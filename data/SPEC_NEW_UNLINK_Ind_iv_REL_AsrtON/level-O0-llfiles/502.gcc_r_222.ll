; ModuleID = 'sel-sched-ir.c'
source_filename = "sel-sched-ir.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.VEC_sel_global_bb_info_def_heap = type { %struct.VEC_sel_global_bb_info_def_base }
%struct.VEC_sel_global_bb_info_def_base = type { i32, i32, [1 x %struct.sel_global_bb_info_def] }
%struct.sel_global_bb_info_def = type { %struct.bitmap_head_def*, i8 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.VEC_sel_region_bb_info_def_heap = type { %struct.VEC_sel_region_bb_info_def_base }
%struct.VEC_sel_region_bb_info_def_base = type { i32, i32, [1 x %struct.sel_region_bb_info_def] }
%struct.sel_region_bb_info_def = type { %struct.rtx_def*, %struct._list_node*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type opaque
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct._list_node = type { %struct._list_node*, %union.anon.0 }
%union.anon.0 = type { %struct._fence }
%struct._fence = type { %struct.rtx_def*, i8*, i32, i32, %struct._list_node*, %struct.deps*, i8*, %struct.VEC_rtx_gc*, i32*, i32, %struct.rtx_def*, i32, %struct.rtx_def*, i8 }
%struct.deps = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.deps_reg*, %struct.bitmap_head_def, %struct.bitmap_head_def, i32, i8 }
%struct.deps_reg = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type { %struct.rtx_def*, %struct.rtx_def*, i32, i32 }
%struct.spec_info_def = type { i32, %struct._IO_FILE*, i32, i32, i32 }
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.sched_deps_info_def = type { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (%struct.rtx_def*)*, void ()*, void (i32)*, void (i32)*, void (i32)*, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, i8 }
%struct.anon = type { %struct.bitmap_head_def**, i32, i32, %struct.bitmap_head_def**, i32, i32, i32 }
%struct.anon.1 = type { %struct.rtx_def**, i32, i32 }
%struct.VEC_sel_insn_data_def_heap = type { %struct.VEC_sel_insn_data_def_base }
%struct.VEC_sel_insn_data_def_base = type { i32, i32, [1 x %struct._sel_insn_data] }
%struct._sel_insn_data = type { %struct._expr, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.htab*, %struct.deps, %struct.rtx_def*, i32, i32, i32, i8 }
%struct._expr = type { %struct.vinsn_def*, i32, i32, i32, i32, i32, i32, i32, i32, i32, %struct.VEC_expr_history_def_heap*, i8, i8 }
%struct.vinsn_def = type { %struct.rtx_def*, %struct.idata_def, i32, i32, i32, i32, i8 }
%struct.idata_def = type { i32, %struct.rtx_def*, %struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.VEC_expr_history_def_heap = type { %struct.VEC_expr_history_def_base }
%struct.VEC_expr_history_def_base = type { i32, i32, [1 x %struct.expr_history_def_1] }
%struct.expr_history_def_1 = type { i32, %struct.vinsn_def*, %struct.vinsn_def*, i32, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.VEC_haifa_deps_insn_data_def_heap = type { %struct.VEC_haifa_deps_insn_data_def_base }
%struct.VEC_haifa_deps_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_deps_insn_data] }
%struct._haifa_deps_insn_data = type { i32, i32, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, %struct._deps_list*, i8 }
%struct._deps_list = type { %struct._dep_link*, i32 }
%struct._dep_link = type { %struct._dep_node*, %struct._dep_link*, %struct._dep_link** }
%struct._dep_node = type { %struct._dep_link, %struct._dep, %struct._dep_link }
%struct.sched_scan_info_def = type { void ()*, void (%struct.basic_block_def*)*, void ()*, void (%struct.rtx_def*)* }
%struct.anon.2 = type { %struct.deps*, i32, %struct.rtx_def*, %struct.vinsn_def*, [3 x i32] }
%struct.anon.3 = type { %struct._expr*, i32, i8 }
%struct.VEC_rtx_heap = type { %struct.VEC_rtx_base }
%struct.anon.4 = type { %struct.succs_info*, i32, i32, i32 }
%struct.succs_info = type { i16, %struct.VEC_rtx_heap*, %struct.VEC_int_heap*, %struct.VEC_rtx_heap*, i32, i32, i32 }
%struct.param_info = type { i8*, i32, i8, i32, i32, i8* }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.cfg_hooks = type { i8*, i32 ()*, void (%struct.basic_block_def*, %struct._IO_FILE*, i32, i32)*, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)*, %struct.edge_def* (%struct.edge_def*, %struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*, %struct.basic_block_def*)*, i8 (%struct.edge_def*)*, void (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, i8*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, i8 (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, void (%struct.edge_def*, i32, i32)*, i8 (%struct.basic_block_def*, i32)*, i8 (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.basic_block_def*)*, %struct.basic_block_def* (%struct.edge_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.basic_block_def*)*, i8 (%struct.basic_block_def*)*, i32 (%struct.simple_bitmap_def*)*, void (%struct.edge_def*)*, void (%struct.edge_def*)*, i8 (%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*)*, void (%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*)*, void (%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**)*, void (%struct.edge_def*)* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.common_sched_info_def = type { void (i32, i32, i32)*, void (%struct.basic_block_def*, %struct.basic_block_def*)*, i32 (%struct.basic_block_def*)*, i32 (%struct.rtx_def*)*, i32 }
%struct.haifa_sched_info = type { void ()*, i32 (%struct.rtx_def*)*, i32 ()*, i32 (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8* (%struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, %struct.rtx_def*)*, i8 (%struct.rtx_def*)*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, i32 }
%struct.VEC_loop_p_heap = type { %struct.VEC_loop_p_base }
%struct.anon.5 = type { %struct.rtx_def* }
%struct.VEC_haifa_insn_data_def_heap = type { %struct.VEC_haifa_insn_data_def_base }
%struct.VEC_haifa_insn_data_def_base = type { i32, i32, [1 x %struct._haifa_insn_data] }
%struct._haifa_insn_data = type { i32, i32, i32, i32, i32, i16, i8, i8, i32, i32, i32, %struct.basic_block_def*, %struct.rtx_def*, %struct.reg_pressure_data*, i32*, %struct.reg_use_data*, %struct.reg_set_data*, i32 }
%struct.reg_pressure_data = type { i32 }
%struct.reg_use_data = type { i32, %struct.rtx_def*, %struct.reg_use_data*, %struct.reg_use_data* }
%struct.reg_set_data = type { i32, %struct.rtx_def*, %struct.reg_set_data* }
%struct.region = type { i32, i32, i8 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.anon.6 = type { i32, %struct.idata_def*, i8, i8 }
%struct._bnd = type { %struct.rtx_def*, %struct._list_node*, %struct._list_node*, %struct._list_node*, %struct.deps* }
%struct._list_iterator = type { %struct._list_node**, i8, i8 }
%struct.flist_tail_def = type { %struct._list_node*, %struct._list_node** }
%struct._def = type { %struct.rtx_def*, i8 }
%struct.succ_iterator = type { i8, %struct.edge_def*, %struct.edge_def*, %struct.edge_iterator, %struct.basic_block_def*, i16, i16, i32, %struct.VEC_edge_heap* }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.df_lr_bb_info = type { %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def* }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.transformed_insns = type { %struct.vinsn_def*, %struct.vinsn_def*, i32, i32, i8 }

@sel_global_bb_info = dso_local global %struct.VEC_sel_global_bb_info_def_heap* null, align 8, !dbg !0
@sel_region_bb_info = dso_local global %struct.VEC_sel_region_bb_info_def_heap* null, align 8, !dbg !2334
@nop_pattern = dso_local global %struct.rtx_def* null, align 8, !dbg !2336
@exit_insn = dso_local global %struct.rtx_def* null, align 8, !dbg !2338
@preheader_removed = dso_local global i8 0, align 1, !dbg !2340
@targetm = external dso_local global %struct.gcc_target, align 8
@advance_deps_context_sched_deps_info = internal global %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (i32)* @haifa_note_reg_set, void (i32)* @haifa_note_reg_clobber, void (i32)* @haifa_note_reg_use, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* null, void (%struct.rtx_def*, i32)* null, i8 0 }, align 8, !dbg !2594
@sched_deps_info = external dso_local global %struct.sched_deps_info_def*, align 8
@flag_sel_sched_pipelining_outer_loops = external dso_local global i32, align 4
@.str = private unnamed_addr constant [15 x i8] c"sel-sched-ir.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@fences = external dso_local global %struct._list_node*, align 8
@issue_rate = external dso_local global i32, align 4
@regset_pool = internal global %struct.anon zeroinitializer, align 8, !dbg !2631
@reg_obstack = external dso_local global %struct.bitmap_obstack, align 8
@nop_pool = internal global %struct.anon.1 zeroinitializer, align 8, !dbg !2642
@s_i_d = dso_local global %struct.VEC_sel_insn_data_def_heap* null, align 8, !dbg !2342
@sched_luids = external dso_local global %struct.VEC_int_heap*, align 8
@nop_vinsn = internal global %struct.vinsn_def* null, align 8, !dbg !2649
@init_insn_force_unique_p = internal global i8 0, align 1, !dbg !2651
@h_d_i_d = external dso_local global %struct.VEC_haifa_deps_insn_data_def_heap*, align 8
@__const.sel_init_global_and_expr.ssi = private unnamed_addr constant %struct.sched_scan_info_def { void ()* null, void (%struct.basic_block_def*)* @init_global_and_expr_for_bb, void ()* @extend_insn_data, void (%struct.rtx_def*)* @init_global_and_expr_for_insn }, align 8
@current_nr_blocks = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@rgn_bb_table = external dso_local global i32*, align 8
@ebb_head = external dso_local global i32*, align 8
@__const.sel_finish_global_and_expr.ssi = private unnamed_addr constant %struct.sched_scan_info_def { void ()* null, void (%struct.basic_block_def*)* @finish_global_and_expr_for_bb, void ()* null, void (%struct.rtx_def*)* @finish_global_and_expr_insn }, align 8
@has_dependence_data = internal global %struct.anon.2 zeroinitializer, align 8, !dbg !2562
@tick_check_data = internal global %struct.anon.3 zeroinitializer, align 8, !dbg !2573
@tick_check_sched_deps_info = internal global %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (%struct.rtx_def*)* null, void ()* null, void (i32)* @haifa_note_reg_set, void (i32)* @haifa_note_reg_clobber, void (i32)* @haifa_note_reg_use, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* @tick_check_note_mem_dep, void (%struct.rtx_def*, i32)* @tick_check_note_dep, i8 0 }, align 8, !dbg !2663
@flag_var_tracking_assignments = external dso_local global i32, align 4
@global_level = external dso_local global i32, align 4
@containing_rgn = external dso_local global i32*, align 8
@__const.sel_init_bbs.ssi = private unnamed_addr constant %struct.sched_scan_info_def { void ()* @extend_bb_info, void (%struct.basic_block_def*)* @init_bb, void ()* null, void (%struct.rtx_def*)* null }, align 8
@new_insns = internal global %struct.VEC_rtx_heap* null, align 8, !dbg !2673
@current_loop_nest = common dso_local global %struct.loop* null, align 8, !dbg !2390
@succs_info_pool = internal global %struct.anon.4 zeroinitializer, align 8, !dbg !2582
@block_to_bb = external dso_local global i32*, align 8
@forced_ebb_heads = external dso_local global %struct.bitmap_head_def*, align 8
@bb_note_pool = internal global %struct.VEC_rtx_heap* null, align 8, !dbg !2559
@compiler_params = external dso_local global %struct.param_info*, align 8
@.str.2 = private unnamed_addr constant [16 x i8] c"sel-sched-lists\00", align 1
@sched_lists_pool = common dso_local global %struct.alloc_pool_def* null, align 8, !dbg !2344
@last_added_blocks = internal global %struct.VEC_basic_block_heap* null, align 8, !dbg !2675
@sched_split_block = external dso_local global %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, align 8
@pipelining_p = external dso_local global i8, align 1
@orig_cfg_hooks = internal global %struct.cfg_hooks zeroinitializer, align 8, !dbg !2392
@sel_cfg_hooks = internal global %struct.cfg_hooks zeroinitializer, align 8, !dbg !2590
@sched_init_only_bb = external dso_local global void (%struct.basic_block_def*, %struct.basic_block_def*)*, align 8
@sched_create_empty_bb = external dso_local global %struct.basic_block_def* (%struct.basic_block_def*)*, align 8
@spec_info = external dso_local global %struct.spec_info_def*, align 8
@sel_common_sched_info = internal global %struct.common_sched_info_def zeroinitializer, align 8, !dbg !2369
@common_sched_info = external dso_local global %struct.common_sched_info_def*, align 8
@sched_sel_haifa_sched_info = internal global %struct.haifa_sched_info { void ()* null, i32 (%struct.rtx_def*)* null, i32 ()* null, i32 (%struct.rtx_def*, i32)* null, i32 (%struct.rtx_def*, %struct.rtx_def*)* null, i8* (%struct.rtx_def*, i32)* @sel_print_insn, i32 (%struct.rtx_def*, %struct.rtx_def*)* @contributes_to_priority, i8 (%struct.rtx_def*)* null, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, %struct.rtx_def* null, i8 0, i32 0, void (%struct.rtx_def*, i32)* null, void (%struct.rtx_def*, %struct.rtx_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* null, i32 48 }, align 8, !dbg !2691
@current_sched_info = external dso_local global %struct.haifa_sched_info*, align 8
@bbs_in_loop_rgns = internal global %struct.simple_bitmap_def* null, align 8, !dbg !2735
@loop_nests = internal global %struct.VEC_loop_p_heap* null, align 8, !dbg !2739
@rev_top_order_index = internal global i32* null, align 8, !dbg !2741
@current_succs = common dso_local global %struct.succs_info zeroinitializer, align 8, !dbg !2367
@bulk_tc = internal global i8* inttoptr (i64 1 to i8*), align 8, !dbg !2592
@.str.3 = private unnamed_addr constant [17 x i8] c"./sel-sched-ir.h\00", align 1
@after_recovery = external dso_local global %struct.basic_block_def*, align 8
@dfa_state_size = external dso_local global i64, align 8
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@init_global_data = internal global %struct.anon.5 zeroinitializer, align 8, !dbg !2653
@flag_non_call_exceptions = external dso_local global i32, align 4
@h_i_d = external dso_local global %struct.VEC_haifa_insn_data_def_heap*, align 8
@has_dependence_sched_deps_info = internal global %struct.sched_deps_info_def zeroinitializer, align 8, !dbg !2658
@const_has_dependence_sched_deps_info = internal constant %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* null, void (%struct.rtx_def*)* @has_dependence_start_insn, void ()* @has_dependence_finish_insn, void (%struct.rtx_def*)* @has_dependence_start_lhs, void ()* @has_dependence_finish_lhs, void (%struct.rtx_def*)* @has_dependence_start_rhs, void ()* @has_dependence_finish_rhs, void (i32)* @has_dependence_note_reg_set, void (i32)* @has_dependence_note_reg_clobber, void (i32)* @has_dependence_note_reg_use, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* @has_dependence_note_mem_dep, void (%struct.rtx_def*, i32)* @has_dependence_note_dep, i8 0 }, align 8, !dbg !2660
@.str.4 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@rgn_table = external dso_local global %struct.region*, align 8
@sched_max_luid = external dso_local global i32, align 4
@insn_init_ssid = internal global %struct._sel_insn_data* @_insn_init_ssid, align 8, !dbg !2665
@insn_init_create_new_vinsn_p = internal global i8 0, align 1, !dbg !2671
@_insn_init_ssid = internal global %struct._sel_insn_data zeroinitializer, align 8, !dbg !2669
@df = external dso_local global %struct.df*, align 8
@note_list = external dso_local global %struct.rtx_def*, align 8
@blocks_to_reschedule = external dso_local global %struct.bitmap_head_def*, align 8
@nr_regions = external dso_local global i32, align 4
@rtx_class = external dso_local constant [139 x i32], align 16
@deps_init_id_data = internal global %struct.anon.6 zeroinitializer, align 8, !dbg !2677
@deps_init_id_sched_deps_info = internal global %struct.sched_deps_info_def zeroinitializer, align 8, !dbg !2687
@const_deps_init_id_sched_deps_info = internal constant %struct.sched_deps_info_def { void (%struct.rtx_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*)* null, void (%struct.rtx_def*)* @deps_init_id_start_insn, void ()* @deps_init_id_finish_insn, void (%struct.rtx_def*)* @deps_init_id_start_lhs, void ()* @deps_init_id_finish_lhs, void (%struct.rtx_def*)* @deps_init_id_start_rhs, void ()* @deps_init_id_finish_rhs, void (i32)* @deps_init_id_note_reg_set, void (i32)* @deps_init_id_note_reg_clobber, void (i32)* @deps_init_id_note_reg_use, void (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)* null, void (%struct.rtx_def*, i32)* null, i8 0 }, align 8, !dbg !2689
@rev_top_order_index_len = internal global i32 -1, align 4, !dbg !2737

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._list_node* @ilist_copy(%struct._list_node* %l) #0 !dbg !2747 {
entry:
  %l.addr = alloca %struct._list_node*, align 8
  %head = alloca %struct._list_node*, align 8
  %tailp = alloca %struct._list_node**, align 8
  store %struct._list_node* %l, %struct._list_node** %l.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %l.addr, metadata !2751, metadata !DIExpression()), !dbg !2752
  call void @llvm.dbg.declare(metadata %struct._list_node** %head, metadata !2753, metadata !DIExpression()), !dbg !2754
  store %struct._list_node* null, %struct._list_node** %head, align 8, !dbg !2754
  call void @llvm.dbg.declare(metadata %struct._list_node*** %tailp, metadata !2755, metadata !DIExpression()), !dbg !2757
  store %struct._list_node** %head, %struct._list_node*** %tailp, align 8, !dbg !2757
  br label %while.cond, !dbg !2758

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2759
  %tobool = icmp ne %struct._list_node* %0, null, !dbg !2758
  br i1 %tobool, label %while.body, label %while.end, !dbg !2758

while.body:                                       ; preds = %while.cond
  %1 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !2760
  %2 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2760
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !2760
  %x = bitcast %union.anon.0* %u to %struct.rtx_def**, !dbg !2760
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !2760
  call void @_xlist_add(%struct._list_node** %1, %struct.rtx_def* %3), !dbg !2760
  %4 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !2762
  %5 = load %struct._list_node*, %struct._list_node** %4, align 8, !dbg !2762
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %5, i32 0, i32 0, !dbg !2762
  store %struct._list_node** %next, %struct._list_node*** %tailp, align 8, !dbg !2763
  %6 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2764
  %next1 = getelementptr inbounds %struct._list_node, %struct._list_node* %6, i32 0, i32 0, !dbg !2764
  %7 = load %struct._list_node*, %struct._list_node** %next1, align 8, !dbg !2764
  store %struct._list_node* %7, %struct._list_node** %l.addr, align 8, !dbg !2765
  br label %while.cond, !dbg !2758, !llvm.loop !2766

while.end:                                        ; preds = %while.cond
  %8 = load %struct._list_node*, %struct._list_node** %head, align 8, !dbg !2768
  ret %struct._list_node* %8, !dbg !2769
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal void @_xlist_add(%struct._list_node** %lp, %struct.rtx_def* %x) #0 !dbg !2770 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2774, metadata !DIExpression()), !dbg !2775
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !2776, metadata !DIExpression()), !dbg !2777
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2778
  call void @_list_add(%struct._list_node** %0), !dbg !2779
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !2780
  %2 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2781
  %3 = load %struct._list_node*, %struct._list_node** %2, align 8, !dbg !2781
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %3, i32 0, i32 1, !dbg !2781
  %x1 = bitcast %union.anon.0* %u to %struct.rtx_def**, !dbg !2781
  store %struct.rtx_def* %1, %struct.rtx_def** %x1, align 8, !dbg !2782
  ret void, !dbg !2783
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._list_node* @ilist_invert(%struct._list_node* %l) #0 !dbg !2784 {
entry:
  %l.addr = alloca %struct._list_node*, align 8
  %res = alloca %struct._list_node*, align 8
  store %struct._list_node* %l, %struct._list_node** %l.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %l.addr, metadata !2785, metadata !DIExpression()), !dbg !2786
  call void @llvm.dbg.declare(metadata %struct._list_node** %res, metadata !2787, metadata !DIExpression()), !dbg !2788
  store %struct._list_node* null, %struct._list_node** %res, align 8, !dbg !2788
  br label %while.cond, !dbg !2789

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2790
  %tobool = icmp ne %struct._list_node* %0, null, !dbg !2789
  br i1 %tobool, label %while.body, label %while.end, !dbg !2789

while.body:                                       ; preds = %while.cond
  %1 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2791
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !2791
  %x = bitcast %union.anon.0* %u to %struct.rtx_def**, !dbg !2791
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !2791
  call void @_xlist_add(%struct._list_node** %res, %struct.rtx_def* %2), !dbg !2791
  %3 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2793
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %3, i32 0, i32 0, !dbg !2793
  %4 = load %struct._list_node*, %struct._list_node** %next, align 8, !dbg !2793
  store %struct._list_node* %4, %struct._list_node** %l.addr, align 8, !dbg !2794
  br label %while.cond, !dbg !2789, !llvm.loop !2795

while.end:                                        ; preds = %while.cond
  %5 = load %struct._list_node*, %struct._list_node** %res, align 8, !dbg !2797
  ret %struct._list_node* %5, !dbg !2798
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @blist_add(%struct._list_node** %lp, %struct.rtx_def* %to, %struct._list_node* %ptr, %struct.deps* %dc) #0 !dbg !2799 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %to.addr = alloca %struct.rtx_def*, align 8
  %ptr.addr = alloca %struct._list_node*, align 8
  %dc.addr = alloca %struct.deps*, align 8
  %bnd = alloca %struct._bnd*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2804, metadata !DIExpression()), !dbg !2805
  store %struct.rtx_def* %to, %struct.rtx_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %to.addr, metadata !2806, metadata !DIExpression()), !dbg !2807
  store %struct._list_node* %ptr, %struct._list_node** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %ptr.addr, metadata !2808, metadata !DIExpression()), !dbg !2809
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !2810, metadata !DIExpression()), !dbg !2811
  call void @llvm.dbg.declare(metadata %struct._bnd** %bnd, metadata !2812, metadata !DIExpression()), !dbg !2815
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2816
  call void @_list_add(%struct._list_node** %0), !dbg !2817
  %1 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2818
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !2818
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !2818
  %bnd1 = bitcast %union.anon.0* %u to %struct._bnd*, !dbg !2818
  store %struct._bnd* %bnd1, %struct._bnd** %bnd, align 8, !dbg !2819
  %3 = load %struct.rtx_def*, %struct.rtx_def** %to.addr, align 8, !dbg !2820
  %4 = load %struct._bnd*, %struct._bnd** %bnd, align 8, !dbg !2821
  %to2 = getelementptr inbounds %struct._bnd, %struct._bnd* %4, i32 0, i32 0, !dbg !2821
  store %struct.rtx_def* %3, %struct.rtx_def** %to2, align 8, !dbg !2822
  %5 = load %struct._list_node*, %struct._list_node** %ptr.addr, align 8, !dbg !2823
  %6 = load %struct._bnd*, %struct._bnd** %bnd, align 8, !dbg !2824
  %ptr3 = getelementptr inbounds %struct._bnd, %struct._bnd* %6, i32 0, i32 1, !dbg !2824
  store %struct._list_node* %5, %struct._list_node** %ptr3, align 8, !dbg !2825
  %7 = load %struct._bnd*, %struct._bnd** %bnd, align 8, !dbg !2826
  %av = getelementptr inbounds %struct._bnd, %struct._bnd* %7, i32 0, i32 2, !dbg !2826
  store %struct._list_node* null, %struct._list_node** %av, align 8, !dbg !2827
  %8 = load %struct._bnd*, %struct._bnd** %bnd, align 8, !dbg !2828
  %av1 = getelementptr inbounds %struct._bnd, %struct._bnd* %8, i32 0, i32 3, !dbg !2828
  store %struct._list_node* null, %struct._list_node** %av1, align 8, !dbg !2829
  %9 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !2830
  %10 = load %struct._bnd*, %struct._bnd** %bnd, align 8, !dbg !2831
  %dc4 = getelementptr inbounds %struct._bnd, %struct._bnd* %10, i32 0, i32 4, !dbg !2831
  store %struct.deps* %9, %struct.deps** %dc4, align 8, !dbg !2832
  ret void, !dbg !2833
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_add(%struct._list_node** %lp) #0 !dbg !2834 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %l = alloca %struct._list_node*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2838, metadata !DIExpression()), !dbg !2839
  call void @llvm.dbg.declare(metadata %struct._list_node** %l, metadata !2840, metadata !DIExpression()), !dbg !2841
  %call = call %struct._list_node* @_list_alloc(), !dbg !2842
  store %struct._list_node* %call, %struct._list_node** %l, align 8, !dbg !2841
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2843
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2844
  %2 = load %struct._list_node*, %struct._list_node** %l, align 8, !dbg !2845
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 0, !dbg !2845
  store %struct._list_node* %1, %struct._list_node** %next, align 8, !dbg !2846
  %3 = load %struct._list_node*, %struct._list_node** %l, align 8, !dbg !2847
  %4 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2848
  store %struct._list_node* %3, %struct._list_node** %4, align 8, !dbg !2849
  ret void, !dbg !2850
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @blist_remove(%struct._list_node** %lp) #0 !dbg !2851 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %b = alloca %struct._bnd*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2854, metadata !DIExpression()), !dbg !2855
  call void @llvm.dbg.declare(metadata %struct._bnd** %b, metadata !2856, metadata !DIExpression()), !dbg !2857
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2858
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2858
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !2858
  %bnd = bitcast %union.anon.0* %u to %struct._bnd*, !dbg !2858
  store %struct._bnd* %bnd, %struct._bnd** %b, align 8, !dbg !2857
  %2 = load %struct._bnd*, %struct._bnd** %b, align 8, !dbg !2859
  %av = getelementptr inbounds %struct._bnd, %struct._bnd* %2, i32 0, i32 2, !dbg !2859
  call void @av_set_clear(%struct._list_node** %av), !dbg !2860
  %3 = load %struct._bnd*, %struct._bnd** %b, align 8, !dbg !2861
  %av1 = getelementptr inbounds %struct._bnd, %struct._bnd* %3, i32 0, i32 3, !dbg !2861
  call void @av_set_clear(%struct._list_node** %av1), !dbg !2862
  %4 = load %struct._bnd*, %struct._bnd** %b, align 8, !dbg !2863
  %ptr = getelementptr inbounds %struct._bnd, %struct._bnd* %4, i32 0, i32 1, !dbg !2863
  call void @_list_clear(%struct._list_node** %ptr), !dbg !2863
  %5 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2864
  call void @_list_remove(%struct._list_node** %5), !dbg !2865
  ret void, !dbg !2866
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_clear(%struct._list_node** %setp) #0 !dbg !2867 {
entry:
  %setp.addr = alloca %struct._list_node**, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !2871, metadata !DIExpression()), !dbg !2872
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !2873, metadata !DIExpression()), !dbg !2874
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !2875, metadata !DIExpression()), !dbg !2883
  %0 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !2884
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !2884
  br label %for.cond, !dbg !2884

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !2886
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !2886
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !2886
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr), !dbg !2886
  %tobool = icmp ne i8 %call, 0, !dbg !2884
  br i1 %tobool, label %for.body, label %for.end, !dbg !2884

for.body:                                         ; preds = %for.cond
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !2888
  br label %for.inc, !dbg !2888

for.inc:                                          ; preds = %for.body
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !2886
  br label %for.cond, !dbg !2886, !llvm.loop !2889

for.end:                                          ; preds = %for.cond
  %3 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !2891
  %4 = load %struct._list_node*, %struct._list_node** %3, align 8, !dbg !2891
  %cmp = icmp eq %struct._list_node* %4, null, !dbg !2891
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !2891

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2260, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2891
  br label %cond.end, !dbg !2891

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !2891

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2891
  ret void, !dbg !2892
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_clear(%struct._list_node** %l) #0 !dbg !2893 {
entry:
  %l.addr = alloca %struct._list_node**, align 8
  store %struct._list_node** %l, %struct._list_node*** %l.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %l.addr, metadata !2894, metadata !DIExpression()), !dbg !2895
  br label %while.cond, !dbg !2896

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._list_node**, %struct._list_node*** %l.addr, align 8, !dbg !2897
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2898
  %tobool = icmp ne %struct._list_node* %1, null, !dbg !2896
  br i1 %tobool, label %while.body, label %while.end, !dbg !2896

while.body:                                       ; preds = %while.cond
  %2 = load %struct._list_node**, %struct._list_node*** %l.addr, align 8, !dbg !2899
  call void @_list_remove(%struct._list_node** %2), !dbg !2900
  br label %while.cond, !dbg !2896, !llvm.loop !2901

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2903
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_remove(%struct._list_node** %lp) #0 !dbg !2904 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %n = alloca %struct._list_node*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2905, metadata !DIExpression()), !dbg !2906
  call void @llvm.dbg.declare(metadata %struct._list_node** %n, metadata !2907, metadata !DIExpression()), !dbg !2908
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2909
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2910
  store %struct._list_node* %1, %struct._list_node** %n, align 8, !dbg !2908
  %2 = load %struct._list_node*, %struct._list_node** %n, align 8, !dbg !2911
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 0, !dbg !2911
  %3 = load %struct._list_node*, %struct._list_node** %next, align 8, !dbg !2911
  %4 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2912
  store %struct._list_node* %3, %struct._list_node** %4, align 8, !dbg !2913
  %5 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @sched_lists_pool, align 8, !dbg !2914
  %6 = load %struct._list_node*, %struct._list_node** %n, align 8, !dbg !2915
  %7 = bitcast %struct._list_node* %6 to i8*, !dbg !2915
  call void @pool_free(%struct.alloc_pool_def* %5, i8* %7), !dbg !2916
  ret void, !dbg !2917
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @flist_tail_init(%struct.flist_tail_def* %l) #0 !dbg !2918 {
entry:
  %l.addr = alloca %struct.flist_tail_def*, align 8
  store %struct.flist_tail_def* %l, %struct.flist_tail_def** %l.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.flist_tail_def** %l.addr, metadata !2929, metadata !DIExpression()), !dbg !2930
  %0 = load %struct.flist_tail_def*, %struct.flist_tail_def** %l.addr, align 8, !dbg !2931
  %head = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %0, i32 0, i32 0, !dbg !2931
  store %struct._list_node* null, %struct._list_node** %head, align 8, !dbg !2932
  %1 = load %struct.flist_tail_def*, %struct.flist_tail_def** %l.addr, align 8, !dbg !2933
  %head1 = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %1, i32 0, i32 0, !dbg !2933
  %2 = load %struct.flist_tail_def*, %struct.flist_tail_def** %l.addr, align 8, !dbg !2934
  %tailp = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %2, i32 0, i32 1, !dbg !2934
  store %struct._list_node** %head1, %struct._list_node*** %tailp, align 8, !dbg !2935
  ret void, !dbg !2936
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._fence* @flist_lookup(%struct._list_node* %l, %struct.rtx_def* %insn) #0 !dbg !2937 {
entry:
  %retval = alloca %struct._fence*, align 8
  %l.addr = alloca %struct._list_node*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct._list_node* %l, %struct._list_node** %l.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %l.addr, metadata !2942, metadata !DIExpression()), !dbg !2943
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !2944, metadata !DIExpression()), !dbg !2945
  br label %while.cond, !dbg !2946

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2947
  %tobool = icmp ne %struct._list_node* %0, null, !dbg !2946
  br i1 %tobool, label %while.body, label %while.end, !dbg !2946

while.body:                                       ; preds = %while.cond
  %1 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2948
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !2948
  %fence = bitcast %union.anon.0* %u to %struct._fence*, !dbg !2948
  %insn1 = getelementptr inbounds %struct._fence, %struct._fence* %fence, i32 0, i32 0, !dbg !2948
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn1, align 8, !dbg !2948
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !2951
  %cmp = icmp eq %struct.rtx_def* %2, %3, !dbg !2952
  br i1 %cmp, label %if.then, label %if.end, !dbg !2953

if.then:                                          ; preds = %while.body
  %4 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2954
  %u2 = getelementptr inbounds %struct._list_node, %struct._list_node* %4, i32 0, i32 1, !dbg !2954
  %fence3 = bitcast %union.anon.0* %u2 to %struct._fence*, !dbg !2954
  store %struct._fence* %fence3, %struct._fence** %retval, align 8, !dbg !2955
  br label %return, !dbg !2955

if.end:                                           ; preds = %while.body
  %5 = load %struct._list_node*, %struct._list_node** %l.addr, align 8, !dbg !2956
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %5, i32 0, i32 0, !dbg !2956
  %6 = load %struct._list_node*, %struct._list_node** %next, align 8, !dbg !2956
  store %struct._list_node* %6, %struct._list_node** %l.addr, align 8, !dbg !2957
  br label %while.cond, !dbg !2946, !llvm.loop !2958

while.end:                                        ; preds = %while.cond
  store %struct._fence* null, %struct._fence** %retval, align 8, !dbg !2960
  br label %return, !dbg !2960

return:                                           ; preds = %while.end, %if.then
  %7 = load %struct._fence*, %struct._fence** %retval, align 8, !dbg !2961
  ret %struct._fence* %7, !dbg !2961
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @flist_clear(%struct._list_node** %lp) #0 !dbg !2962 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2965, metadata !DIExpression()), !dbg !2966
  br label %while.cond, !dbg !2967

while.cond:                                       ; preds = %while.body, %entry
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2968
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2969
  %tobool = icmp ne %struct._list_node* %1, null, !dbg !2967
  br i1 %tobool, label %while.body, label %while.end, !dbg !2967

while.body:                                       ; preds = %while.cond
  %2 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2970
  call void @flist_remove(%struct._list_node** %2), !dbg !2971
  br label %while.cond, !dbg !2967, !llvm.loop !2972

while.end:                                        ; preds = %while.cond
  ret void, !dbg !2974
}

; Function Attrs: noinline nounwind uwtable
define internal void @flist_remove(%struct._list_node** %lp) #0 !dbg !2975 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !2976, metadata !DIExpression()), !dbg !2977
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2978
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !2978
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !2978
  %fence = bitcast %union.anon.0* %u to %struct._fence*, !dbg !2978
  %insn = getelementptr inbounds %struct._fence, %struct._fence* %fence, i32 0, i32 0, !dbg !2978
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !2978
  %tobool = icmp ne %struct.rtx_def* %2, null, !dbg !2978
  br i1 %tobool, label %if.then, label %if.end, !dbg !2980

if.then:                                          ; preds = %entry
  %3 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2981
  %4 = load %struct._list_node*, %struct._list_node** %3, align 8, !dbg !2981
  %u1 = getelementptr inbounds %struct._list_node, %struct._list_node* %4, i32 0, i32 1, !dbg !2981
  %fence2 = bitcast %union.anon.0* %u1 to %struct._fence*, !dbg !2981
  call void @fence_clear(%struct._fence* %fence2), !dbg !2982
  br label %if.end, !dbg !2982

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !2983
  call void @_list_remove(%struct._list_node** %5), !dbg !2984
  ret void, !dbg !2985
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @def_list_add(%struct._list_node** %dl, %struct.rtx_def* %original_insn, i8 zeroext %crosses_call) #0 !dbg !2986 {
entry:
  %dl.addr = alloca %struct._list_node**, align 8
  %original_insn.addr = alloca %struct.rtx_def*, align 8
  %crosses_call.addr = alloca i8, align 1
  %d = alloca %struct._def*, align 8
  store %struct._list_node** %dl, %struct._list_node*** %dl.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %dl.addr, metadata !2991, metadata !DIExpression()), !dbg !2992
  store %struct.rtx_def* %original_insn, %struct.rtx_def** %original_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %original_insn.addr, metadata !2993, metadata !DIExpression()), !dbg !2994
  store i8 %crosses_call, i8* %crosses_call.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %crosses_call.addr, metadata !2995, metadata !DIExpression()), !dbg !2996
  call void @llvm.dbg.declare(metadata %struct._def** %d, metadata !2997, metadata !DIExpression()), !dbg !3000
  %0 = load %struct._list_node**, %struct._list_node*** %dl.addr, align 8, !dbg !3001
  call void @_list_add(%struct._list_node** %0), !dbg !3002
  %1 = load %struct._list_node**, %struct._list_node*** %dl.addr, align 8, !dbg !3003
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !3003
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !3003
  %def = bitcast %union.anon.0* %u to %struct._def*, !dbg !3003
  store %struct._def* %def, %struct._def** %d, align 8, !dbg !3004
  %3 = load %struct.rtx_def*, %struct.rtx_def** %original_insn.addr, align 8, !dbg !3005
  %4 = load %struct._def*, %struct._def** %d, align 8, !dbg !3006
  %orig_insn = getelementptr inbounds %struct._def, %struct._def* %4, i32 0, i32 0, !dbg !3007
  store %struct.rtx_def* %3, %struct.rtx_def** %orig_insn, align 8, !dbg !3008
  %5 = load i8, i8* %crosses_call.addr, align 1, !dbg !3009
  %6 = load %struct._def*, %struct._def** %d, align 8, !dbg !3010
  %crosses_call1 = getelementptr inbounds %struct._def, %struct._def* %6, i32 0, i32 1, !dbg !3011
  store i8 %5, i8* %crosses_call1, align 8, !dbg !3012
  ret void, !dbg !3013
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @create_target_context(i8 zeroext %clean_p) #0 !dbg !3014 {
entry:
  %clean_p.addr = alloca i8, align 1
  %tc = alloca i8*, align 8
  store i8 %clean_p, i8* %clean_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %clean_p.addr, metadata !3017, metadata !DIExpression()), !dbg !3018
  call void @llvm.dbg.declare(metadata i8** %tc, metadata !3019, metadata !DIExpression()), !dbg !3020
  %call = call i8* @alloc_target_context(), !dbg !3021
  store i8* %call, i8** %tc, align 8, !dbg !3020
  %0 = load i8*, i8** %tc, align 8, !dbg !3022
  %1 = load i8, i8* %clean_p.addr, align 1, !dbg !3023
  call void @init_target_context(i8* %0, i8 zeroext %1), !dbg !3024
  %2 = load i8*, i8** %tc, align 8, !dbg !3025
  ret i8* %2, !dbg !3026
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @alloc_target_context() #0 !dbg !3027 {
entry:
  %0 = load i8* ()*, i8* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 23), align 8, !dbg !3030
  %tobool = icmp ne i8* ()* %0, null, !dbg !3031
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3031

cond.true:                                        ; preds = %entry
  %1 = load i8* ()*, i8* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 23), align 8, !dbg !3032
  %call = call i8* %1(), !dbg !3033
  br label %cond.end, !dbg !3031

cond.false:                                       ; preds = %entry
  %2 = load i8*, i8** @bulk_tc, align 8, !dbg !3034
  br label %cond.end, !dbg !3031

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i8* [ %call, %cond.true ], [ %2, %cond.false ], !dbg !3031
  ret i8* %cond, !dbg !3035
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_target_context(i8* %tc, i8 zeroext %clean_p) #0 !dbg !3036 {
entry:
  %tc.addr = alloca i8*, align 8
  %clean_p.addr = alloca i8, align 1
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3039, metadata !DIExpression()), !dbg !3040
  store i8 %clean_p, i8* %clean_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %clean_p.addr, metadata !3041, metadata !DIExpression()), !dbg !3042
  %0 = load void (i8*, i8)*, void (i8*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 24), align 8, !dbg !3043
  %tobool = icmp ne void (i8*, i8)* %0, null, !dbg !3045
  br i1 %tobool, label %if.then, label %if.end, !dbg !3046

if.then:                                          ; preds = %entry
  %1 = load void (i8*, i8)*, void (i8*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 24), align 8, !dbg !3047
  %2 = load i8*, i8** %tc.addr, align 8, !dbg !3048
  %3 = load i8, i8* %clean_p.addr, align 1, !dbg !3049
  call void %1(i8* %2, i8 zeroext %3), !dbg !3050
  br label %if.end, !dbg !3050

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3051
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_target_context(i8* %tc) #0 !dbg !3052 {
entry:
  %tc.addr = alloca i8*, align 8
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3055, metadata !DIExpression()), !dbg !3056
  %0 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 25), align 8, !dbg !3057
  %tobool = icmp ne void (i8*)* %0, null, !dbg !3059
  br i1 %tobool, label %if.then, label %if.end, !dbg !3060

if.then:                                          ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 25), align 8, !dbg !3061
  %2 = load i8*, i8** %tc.addr, align 8, !dbg !3062
  call void %1(i8* %2), !dbg !3063
  br label %if.end, !dbg !3063

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3064
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reset_target_context(i8* %tc, i8 zeroext %clean_p) #0 !dbg !3065 {
entry:
  %tc.addr = alloca i8*, align 8
  %clean_p.addr = alloca i8, align 1
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3066, metadata !DIExpression()), !dbg !3067
  store i8 %clean_p, i8* %clean_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %clean_p.addr, metadata !3068, metadata !DIExpression()), !dbg !3069
  %0 = load i8*, i8** %tc.addr, align 8, !dbg !3070
  call void @clear_target_context(i8* %0), !dbg !3071
  %1 = load i8*, i8** %tc.addr, align 8, !dbg !3072
  %2 = load i8, i8* %clean_p.addr, align 1, !dbg !3073
  call void @init_target_context(i8* %1, i8 zeroext %2), !dbg !3074
  ret void, !dbg !3075
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_target_context(i8* %tc) #0 !dbg !3076 {
entry:
  %tc.addr = alloca i8*, align 8
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3077, metadata !DIExpression()), !dbg !3078
  %0 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 26), align 8, !dbg !3079
  %tobool = icmp ne void (i8*)* %0, null, !dbg !3081
  br i1 %tobool, label %if.then, label %if.end, !dbg !3082

if.then:                                          ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 26), align 8, !dbg !3083
  %2 = load i8*, i8** %tc.addr, align 8, !dbg !3084
  call void %1(i8* %2), !dbg !3085
  br label %if.end, !dbg !3085

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !3086
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @advance_deps_context(%struct.deps* %dc, %struct.rtx_def* %insn) #0 !dbg !3087 {
entry:
  %dc.addr = alloca %struct.deps*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !3090, metadata !DIExpression()), !dbg !3091
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3092, metadata !DIExpression()), !dbg !3093
  store %struct.sched_deps_info_def* @advance_deps_context_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !3094
  %0 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3095
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3096
  call void @deps_analyze_insn(%struct.deps* %0, %struct.rtx_def* %1), !dbg !3097
  ret void, !dbg !3098
}

declare dso_local void @deps_analyze_insn(%struct.deps*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_fences(%struct.rtx_def* %old_fence) #0 !dbg !3099 {
entry:
  %old_fence.addr = alloca %struct.rtx_def*, align 8
  %succ = alloca %struct.rtx_def*, align 8
  %si = alloca %struct.succ_iterator, align 8
  %first = alloca i8, align 1
  %ready_ticks_size = alloca i32, align 4
  %tmp = alloca %struct.succ_iterator, align 8
  store %struct.rtx_def* %old_fence, %struct.rtx_def** %old_fence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_fence.addr, metadata !3102, metadata !DIExpression()), !dbg !3103
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !3104, metadata !DIExpression()), !dbg !3105
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !3106, metadata !DIExpression()), !dbg !3125
  call void @llvm.dbg.declare(metadata i8* %first, metadata !3126, metadata !DIExpression()), !dbg !3127
  store i8 1, i8* %first, align 1, !dbg !3127
  call void @llvm.dbg.declare(metadata i32* %ready_ticks_size, metadata !3128, metadata !DIExpression()), !dbg !3129
  %call = call i32 @get_max_uid(), !dbg !3130
  %add = add nsw i32 %call, 1, !dbg !3131
  store i32 %add, i32* %ready_ticks_size, align 4, !dbg !3129
  %0 = load %struct.rtx_def*, %struct.rtx_def** %old_fence.addr, align 8, !dbg !3132
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %0, i32 9), !dbg !3132
  %1 = bitcast %struct.succ_iterator* %si to i8*, !dbg !3132
  %2 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !3132
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 64, i1 false), !dbg !3132
  br label %for.cond, !dbg !3132

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %old_fence.addr, align 8, !dbg !3134
  %call1 = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %3, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !3134
  %tobool = icmp ne i8 %call1, 0, !dbg !3132
  br i1 %tobool, label %for.body, label %for.end, !dbg !3132

for.body:                                         ; preds = %for.cond
  %4 = load i8, i8* %first, align 1, !dbg !3136
  %tobool2 = icmp ne i8 %4, 0, !dbg !3136
  br i1 %tobool2, label %if.then, label %if.else, !dbg !3139

if.then:                                          ; preds = %for.body
  store i8 0, i8* %first, align 1, !dbg !3140
  br label %if.end, !dbg !3141

if.else:                                          ; preds = %for.body
  %5 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !3142
  %tobool3 = icmp ne i32 %5, 0, !dbg !3142
  br i1 %tobool3, label %cond.false, label %cond.true, !dbg !3142

cond.true:                                        ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 610, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3142
  br label %cond.end, !dbg !3142

cond.false:                                       ; preds = %if.else
  br label %cond.end, !dbg !3142

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3142
  br label %if.end

if.end:                                           ; preds = %cond.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !3143
  %call4 = call i8* @state_create(), !dbg !3144
  %call5 = call %struct.deps* @create_deps_context(), !dbg !3145
  %call6 = call i8* @create_target_context(i8 zeroext 1), !dbg !3146
  %7 = load i32, i32* %ready_ticks_size, align 4, !dbg !3147
  %conv = sext i32 %7 to i64, !dbg !3147
  %call7 = call i8* @xcalloc(i64 %conv, i64 4), !dbg !3147
  %8 = bitcast i8* %call7 to i32*, !dbg !3147
  %9 = load i32, i32* %ready_ticks_size, align 4, !dbg !3148
  %10 = load i32, i32* @issue_rate, align 4, !dbg !3149
  call void @flist_add(%struct._list_node** @fences, %struct.rtx_def* %6, i8* %call4, %struct.deps* %call5, i8* %call6, %struct.rtx_def* null, %struct.VEC_rtx_gc* null, i32* %8, i32 %9, %struct.rtx_def* null, i32 1, i32 0, i32 %10, i8 zeroext 1, i8 zeroext 0), !dbg !3150
  br label %for.inc, !dbg !3151

for.inc:                                          ; preds = %if.end
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !3134
  br label %for.cond, !dbg !3134, !llvm.loop !3152

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3154
}

declare dso_local i32 @get_max_uid() #2

; Function Attrs: noinline nounwind uwtable
define internal void @_succ_iter_start(%struct.succ_iterator* noalias sret %agg.result, %struct.rtx_def** %succp, %struct.rtx_def* %insn, i32 %flags) #0 !dbg !3155 {
entry:
  %succp.addr = alloca %struct.rtx_def**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %flags.addr = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.rtx_def** %succp, %struct.rtx_def*** %succp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %succp.addr, metadata !3158, metadata !DIExpression()), !dbg !3159
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3160, metadata !DIExpression()), !dbg !3161
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3162, metadata !DIExpression()), !dbg !3163
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %agg.result, metadata !3164, metadata !DIExpression()), !dbg !3165
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3166, metadata !DIExpression()), !dbg !3167
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3168
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3168
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3168
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3168
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3168
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3168
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !3167
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !3169
  %bf.load = load i32, i32* %3, align 8, !dbg !3169
  %bf.clear = and i32 %bf.load, 65535, !dbg !3169
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !3169
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !3169

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !3169
  %bf.load1 = load i32, i32* %5, align 8, !dbg !3169
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !3169
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !3169
  br i1 %cmp3, label %cond.false, label %lor.lhs.false4, !dbg !3169

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !3169
  %bf.load5 = load i32, i32* %7, align 8, !dbg !3169
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !3169
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !3169
  br i1 %cmp7, label %cond.false, label %lor.lhs.false8, !dbg !3169

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !3169
  %bf.load9 = load i32, i32* %9, align 8, !dbg !3169
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !3169
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !3169
  br i1 %cmp11, label %cond.false, label %lor.lhs.false12, !dbg !3169

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !3169
  %bf.load13 = load i32, i32* %11, align 8, !dbg !3169
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !3169
  %cmp15 = icmp eq i32 %bf.clear14, 13, !dbg !3169
  br i1 %cmp15, label %land.lhs.true, label %cond.true, !dbg !3169

land.lhs.true:                                    ; preds = %lor.lhs.false12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3169
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !3169
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !3169
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 5, !dbg !3169
  %rt_int = bitcast %union.rtunion_def* %arrayidx18 to i32*, !dbg !3169
  %13 = load i32, i32* %rt_int, align 8, !dbg !3169
  %cmp19 = icmp eq i32 %13, 10, !dbg !3169
  br i1 %cmp19, label %cond.false, label %cond.true, !dbg !3169

cond.true:                                        ; preds = %land.lhs.true, %lor.lhs.false12
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1206, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3169
  br label %cond.end, !dbg !3169

cond.false:                                       ; preds = %land.lhs.true, %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  br label %cond.end, !dbg !3169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3169
  %14 = load i32, i32* %flags.addr, align 4, !dbg !3170
  %conv = trunc i32 %14 to i16, !dbg !3170
  %flags20 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 5, !dbg !3171
  store i16 %conv, i16* %flags20, align 8, !dbg !3172
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3173
  store %struct.rtx_def* null, %struct.rtx_def** %15, align 8, !dbg !3174
  %e1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 1, !dbg !3175
  store %struct.edge_def* null, %struct.edge_def** %e1, align 8, !dbg !3176
  %e2 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 2, !dbg !3177
  store %struct.edge_def* null, %struct.edge_def** %e2, align 8, !dbg !3178
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3179
  %bb21 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 4, !dbg !3180
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb21, align 8, !dbg !3181
  %current_flags = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 6, !dbg !3182
  store i16 0, i16* %current_flags, align 2, !dbg !3183
  %current_exit = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 7, !dbg !3184
  store i32 -1, i32* %current_exit, align 4, !dbg !3185
  %loop_exits = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 8, !dbg !3186
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %loop_exits, align 8, !dbg !3187
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3188
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3190
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !3190
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3190
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3190
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !3190
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3190
  %cmp22 = icmp ne %struct.basic_block_def* %17, %20, !dbg !3191
  br i1 %cmp22, label %land.lhs.true24, label %if.else, !dbg !3192

land.lhs.true24:                                  ; preds = %cond.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3193
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 7, !dbg !3193
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !3193
  %22 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !3193
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %22, i32 0, i32 1, !dbg !3193
  %23 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !3193
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3194
  %cmp25 = icmp ne %struct.rtx_def* %23, %24, !dbg !3195
  br i1 %cmp25, label %if.then, label %if.else, !dbg !3196

if.then:                                          ; preds = %land.lhs.true24
  %bb_end = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 0, !dbg !3197
  store i8 0, i8* %bb_end, align 8, !dbg !3199
  %ei = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 3, !dbg !3200
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei, i32 0, i32 0, !dbg !3201
  store i32 0, i32* %index, align 8, !dbg !3202
  %ei27 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 3, !dbg !3203
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %ei27, i32 0, i32 1, !dbg !3204
  store %struct.VEC_edge_gc** null, %struct.VEC_edge_gc*** %container, align 8, !dbg !3205
  br label %if.end, !dbg !3206

if.else:                                          ; preds = %land.lhs.true24, %cond.end
  %ei28 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 3, !dbg !3207
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3209
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !3209
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3209
  %26 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3209
  %27 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 0, !dbg !3209
  %28 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !3209
  store i32 %28, i32* %27, align 8, !dbg !3209
  %29 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %26, i32 0, i32 1, !dbg !3209
  %30 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !3209
  store %struct.VEC_edge_gc** %30, %struct.VEC_edge_gc*** %29, align 8, !dbg !3209
  %31 = bitcast %struct.edge_iterator* %ei28 to i8*, !dbg !3209
  %32 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3209
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %31, i8* align 8 %32, i64 16, i1 false), !dbg !3209
  %bb_end29 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %agg.result, i32 0, i32 0, !dbg !3210
  store i8 1, i8* %bb_end29, align 8, !dbg !3211
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !3212
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %ip, %struct.rtx_def** %succp, %struct.rtx_def* %insn, i8 (%struct.edge_def*, %struct.succ_iterator*)* %check) #0 !dbg !3213 {
entry:
  %retval = alloca i8, align 1
  %ip.addr = alloca %struct.succ_iterator*, align 8
  %succp.addr = alloca %struct.rtx_def**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %check.addr = alloca i8 (%struct.edge_def*, %struct.succ_iterator*)*, align 8
  %e_tmp = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %bb67 = alloca %struct.basic_block_def*, align 8
  store %struct.succ_iterator* %ip, %struct.succ_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.succ_iterator** %ip.addr, metadata !3220, metadata !DIExpression()), !dbg !3221
  store %struct.rtx_def** %succp, %struct.rtx_def*** %succp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %succp.addr, metadata !3222, metadata !DIExpression()), !dbg !3223
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3224, metadata !DIExpression()), !dbg !3225
  store i8 (%struct.edge_def*, %struct.succ_iterator*)* %check, i8 (%struct.edge_def*, %struct.succ_iterator*)** %check.addr, align 8
  call void @llvm.dbg.declare(metadata i8 (%struct.edge_def*, %struct.succ_iterator*)** %check.addr, metadata !3226, metadata !DIExpression()), !dbg !3227
  %0 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3228
  %bb_end = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %0, i32 0, i32 0, !dbg !3230
  %1 = load i8, i8* %bb_end, align 8, !dbg !3230
  %tobool = icmp ne i8 %1, 0, !dbg !3228
  br i1 %tobool, label %if.else, label %if.then, !dbg !3231

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3232
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !3235
  %cmp = icmp ne %struct.rtx_def* %3, null, !dbg !3236
  br i1 %cmp, label %if.then3, label %lor.lhs.false, !dbg !3237

lor.lhs.false:                                    ; preds = %if.then
  %4 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3238
  %flags = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %4, i32 0, i32 5, !dbg !3239
  %5 = load i16, i16* %flags, align 8, !dbg !3239
  %conv = sext i16 %5 to i32, !dbg !3238
  %and = and i32 %conv, 1, !dbg !3240
  %cmp1 = icmp eq i32 %and, 0, !dbg !3241
  br i1 %cmp1, label %if.then3, label %if.end, !dbg !3242

if.then3:                                         ; preds = %lor.lhs.false, %if.then
  store i8 0, i8* %retval, align 1, !dbg !3243
  br label %return, !dbg !3243

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3244
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !3244
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3244
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !3244
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !3244
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !3244
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3245
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !3246
  %9 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3247
  %current_flags = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %9, i32 0, i32 6, !dbg !3248
  store i16 1, i16* %current_flags, align 2, !dbg !3249
  store i8 1, i8* %retval, align 1, !dbg !3250
  br label %return, !dbg !3250

if.else:                                          ; preds = %entry
  br label %while.body, !dbg !3251

while.body:                                       ; preds = %if.else, %if.then61
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_tmp, metadata !3253, metadata !DIExpression()), !dbg !3255
  store %struct.edge_def* null, %struct.edge_def** %e_tmp, align 8, !dbg !3255
  %10 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3256
  %loop_exits = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %10, i32 0, i32 8, !dbg !3258
  %11 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits, align 8, !dbg !3258
  %tobool4 = icmp ne %struct.VEC_edge_heap* %11, null, !dbg !3256
  br i1 %tobool4, label %if.then5, label %if.end17, !dbg !3259

if.then5:                                         ; preds = %while.body
  br label %do.body, !dbg !3260

do.body:                                          ; preds = %land.end, %if.then5
  %12 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3262
  %loop_exits6 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %12, i32 0, i32 8, !dbg !3262
  %13 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits6, align 8, !dbg !3262
  %tobool7 = icmp ne %struct.VEC_edge_heap* %13, null, !dbg !3262
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !3262

cond.true:                                        ; preds = %do.body
  %14 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3262
  %loop_exits8 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %14, i32 0, i32 8, !dbg !3262
  %15 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits8, align 8, !dbg !3262
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %15, i32 0, i32 0, !dbg !3262
  br label %cond.end, !dbg !3262

cond.false:                                       ; preds = %do.body
  br label %cond.end, !dbg !3262

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !3262
  %16 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3262
  %current_exit = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %16, i32 0, i32 7, !dbg !3262
  %17 = load i32, i32* %current_exit, align 4, !dbg !3262
  %call = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %17, %struct.edge_def** %e_tmp), !dbg !3262
  %18 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3264
  %current_exit9 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %18, i32 0, i32 7, !dbg !3265
  %19 = load i32, i32* %current_exit9, align 4, !dbg !3266
  %inc = add nsw i32 %19, 1, !dbg !3266
  store i32 %inc, i32* %current_exit9, align 4, !dbg !3266
  br label %do.cond, !dbg !3267

do.cond:                                          ; preds = %cond.end
  %20 = load %struct.edge_def*, %struct.edge_def** %e_tmp, align 8, !dbg !3268
  %tobool10 = icmp ne %struct.edge_def* %20, null, !dbg !3268
  br i1 %tobool10, label %land.rhs, label %land.end, !dbg !3269

land.rhs:                                         ; preds = %do.cond
  %21 = load i8 (%struct.edge_def*, %struct.succ_iterator*)*, i8 (%struct.edge_def*, %struct.succ_iterator*)** %check.addr, align 8, !dbg !3270
  %22 = load %struct.edge_def*, %struct.edge_def** %e_tmp, align 8, !dbg !3271
  %23 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3272
  %call11 = call zeroext i8 %21(%struct.edge_def* %22, %struct.succ_iterator* %23), !dbg !3270
  %tobool12 = icmp ne i8 %call11, 0, !dbg !3273
  %lnot = xor i1 %tobool12, true, !dbg !3273
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %24 = phi i1 [ false, %do.cond ], [ %lnot, %land.rhs ], !dbg !3274
  br i1 %24, label %do.body, label %do.end, !dbg !3267, !llvm.loop !3275

do.end:                                           ; preds = %land.end
  %25 = load %struct.edge_def*, %struct.edge_def** %e_tmp, align 8, !dbg !3277
  %tobool13 = icmp ne %struct.edge_def* %25, null, !dbg !3277
  br i1 %tobool13, label %if.end16, label %if.then14, !dbg !3279

if.then14:                                        ; preds = %do.end
  %26 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3280
  %loop_exits15 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %26, i32 0, i32 8, !dbg !3280
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %loop_exits15), !dbg !3280
  br label %if.end16, !dbg !3280

if.end16:                                         ; preds = %if.then14, %do.end
  br label %if.end17, !dbg !3281

if.end17:                                         ; preds = %if.end16, %while.body
  %27 = load %struct.edge_def*, %struct.edge_def** %e_tmp, align 8, !dbg !3282
  %tobool18 = icmp ne %struct.edge_def* %27, null, !dbg !3282
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !3284

if.then19:                                        ; preds = %if.end17
  %28 = load %struct.edge_def*, %struct.edge_def** %e_tmp, align 8, !dbg !3285
  %29 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3287
  %e1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %29, i32 0, i32 1, !dbg !3288
  store %struct.edge_def* %28, %struct.edge_def** %e1, align 8, !dbg !3289
  br label %while.end63, !dbg !3290

if.end20:                                         ; preds = %if.end17
  br label %while.cond21, !dbg !3291

while.cond21:                                     ; preds = %if.end57, %if.end20
  %30 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3292
  %ei = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %30, i32 0, i32 3, !dbg !3293
  %31 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3294
  %e122 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %31, i32 0, i32 1, !dbg !3295
  %32 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3296
  %33 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 0, !dbg !3296
  %34 = load i32, i32* %33, align 8, !dbg !3296
  %35 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %32, i32 0, i32 1, !dbg !3296
  %36 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %35, align 8, !dbg !3296
  %call23 = call zeroext i8 @ei_cond(i32 %34, %struct.VEC_edge_gc** %36, %struct.edge_def** %e122), !dbg !3296
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3291
  br i1 %tobool24, label %while.body25, label %while.end, !dbg !3291

while.body25:                                     ; preds = %while.cond21
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3297, metadata !DIExpression()), !dbg !3299
  %37 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3300
  %e126 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %37, i32 0, i32 1, !dbg !3301
  %38 = load %struct.edge_def*, %struct.edge_def** %e126, align 8, !dbg !3301
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !3302
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3302
  store %struct.basic_block_def* %39, %struct.basic_block_def** %bb, align 8, !dbg !3299
  %40 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3303
  %flags27 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %40, i32 0, i32 5, !dbg !3305
  %41 = load i16, i16* %flags27, align 8, !dbg !3305
  %conv28 = sext i16 %41 to i32, !dbg !3303
  %and29 = and i32 %conv28, 8, !dbg !3306
  %tobool30 = icmp ne i32 %and29, 0, !dbg !3306
  br i1 %tobool30, label %land.lhs.true, label %if.end52, !dbg !3307

land.lhs.true:                                    ; preds = %while.body25
  %42 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !3308
  %tobool31 = icmp ne i32 %42, 0, !dbg !3308
  br i1 %tobool31, label %land.lhs.true32, label %if.end52, !dbg !3309

land.lhs.true32:                                  ; preds = %land.lhs.true
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3310
  %call33 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %43), !dbg !3311
  %tobool34 = icmp ne i8 %call33, 0, !dbg !3311
  br i1 %tobool34, label %lor.lhs.false35, label %if.then43, !dbg !3312

lor.lhs.false35:                                  ; preds = %land.lhs.true32
  %44 = load i32*, i32** @block_to_bb, align 8, !dbg !3313
  %45 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3313
  %bb36 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %45, i32 0, i32 4, !dbg !3313
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb36, align 8, !dbg !3313
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !3313
  %47 = load i32, i32* %index, align 8, !dbg !3313
  %idxprom = sext i32 %47 to i64, !dbg !3313
  %arrayidx37 = getelementptr inbounds i32, i32* %44, i64 %idxprom, !dbg !3313
  %48 = load i32, i32* %arrayidx37, align 4, !dbg !3313
  %49 = load i32*, i32** @block_to_bb, align 8, !dbg !3314
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3314
  %index38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 9, !dbg !3314
  %51 = load i32, i32* %index38, align 8, !dbg !3314
  %idxprom39 = sext i32 %51 to i64, !dbg !3314
  %arrayidx40 = getelementptr inbounds i32, i32* %49, i64 %idxprom39, !dbg !3314
  %52 = load i32, i32* %arrayidx40, align 4, !dbg !3314
  %cmp41 = icmp slt i32 %48, %52, !dbg !3315
  br i1 %cmp41, label %if.then43, label %if.end52, !dbg !3316

if.then43:                                        ; preds = %lor.lhs.false35, %land.lhs.true32
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3317
  %call44 = call %struct.VEC_edge_heap* @get_all_loop_exits(%struct.basic_block_def* %53), !dbg !3319
  %54 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3320
  %loop_exits45 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %54, i32 0, i32 8, !dbg !3321
  store %struct.VEC_edge_heap* %call44, %struct.VEC_edge_heap** %loop_exits45, align 8, !dbg !3322
  %55 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3323
  %loop_exits46 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %55, i32 0, i32 8, !dbg !3325
  %56 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits46, align 8, !dbg !3325
  %tobool47 = icmp ne %struct.VEC_edge_heap* %56, null, !dbg !3323
  br i1 %tobool47, label %if.then48, label %if.end51, !dbg !3326

if.then48:                                        ; preds = %if.then43
  %57 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3327
  %current_exit49 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %57, i32 0, i32 7, !dbg !3329
  store i32 0, i32* %current_exit49, align 4, !dbg !3330
  %58 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3331
  %ei50 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %58, i32 0, i32 3, !dbg !3332
  call void @ei_next(%struct.edge_iterator* %ei50), !dbg !3333
  br label %while.end, !dbg !3334

if.end51:                                         ; preds = %if.then43
  br label %if.end52, !dbg !3335

if.end52:                                         ; preds = %if.end51, %lor.lhs.false35, %land.lhs.true, %while.body25
  %59 = load i8 (%struct.edge_def*, %struct.succ_iterator*)*, i8 (%struct.edge_def*, %struct.succ_iterator*)** %check.addr, align 8, !dbg !3336
  %60 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3338
  %e153 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %60, i32 0, i32 1, !dbg !3339
  %61 = load %struct.edge_def*, %struct.edge_def** %e153, align 8, !dbg !3339
  %62 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3340
  %call54 = call zeroext i8 %59(%struct.edge_def* %61, %struct.succ_iterator* %62), !dbg !3336
  %tobool55 = icmp ne i8 %call54, 0, !dbg !3336
  br i1 %tobool55, label %if.then56, label %if.end57, !dbg !3341

if.then56:                                        ; preds = %if.end52
  br label %while.end, !dbg !3342

if.end57:                                         ; preds = %if.end52
  %63 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3343
  %ei58 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %63, i32 0, i32 3, !dbg !3344
  call void @ei_next(%struct.edge_iterator* %ei58), !dbg !3345
  br label %while.cond21, !dbg !3291, !llvm.loop !3346

while.end:                                        ; preds = %if.then56, %if.then48, %while.cond21
  %64 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3348
  %loop_exits59 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %64, i32 0, i32 8, !dbg !3350
  %65 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits59, align 8, !dbg !3350
  %tobool60 = icmp ne %struct.VEC_edge_heap* %65, null, !dbg !3348
  br i1 %tobool60, label %if.then61, label %if.end62, !dbg !3351

if.then61:                                        ; preds = %while.end
  br label %while.body, !dbg !3352, !llvm.loop !3353

if.end62:                                         ; preds = %while.end
  br label %while.end63, !dbg !3355

while.end63:                                      ; preds = %if.end62, %if.then19
  %66 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3356
  %e164 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %66, i32 0, i32 1, !dbg !3358
  %67 = load %struct.edge_def*, %struct.edge_def** %e164, align 8, !dbg !3358
  %tobool65 = icmp ne %struct.edge_def* %67, null, !dbg !3356
  br i1 %tobool65, label %if.then66, label %if.else103, !dbg !3359

if.then66:                                        ; preds = %while.end63
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb67, metadata !3360, metadata !DIExpression()), !dbg !3362
  %68 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3363
  %e2 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %68, i32 0, i32 2, !dbg !3364
  %69 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3364
  %dest68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %69, i32 0, i32 1, !dbg !3365
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %dest68, align 8, !dbg !3365
  store %struct.basic_block_def* %70, %struct.basic_block_def** %bb67, align 8, !dbg !3362
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb67, align 8, !dbg !3366
  %72 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3368
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %72, i64 0, !dbg !3368
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3368
  %73 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3368
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %73, i32 0, i32 1, !dbg !3368
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3368
  %cmp69 = icmp eq %struct.basic_block_def* %71, %74, !dbg !3369
  br i1 %cmp69, label %if.then74, label %lor.lhs.false71, !dbg !3370

lor.lhs.false71:                                  ; preds = %if.then66
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb67, align 8, !dbg !3371
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** @after_recovery, align 8, !dbg !3372
  %cmp72 = icmp eq %struct.basic_block_def* %75, %76, !dbg !3373
  br i1 %cmp72, label %if.then74, label %if.else75, !dbg !3374

if.then74:                                        ; preds = %lor.lhs.false71, %if.then66
  %77 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !3375
  %78 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3376
  store %struct.rtx_def* %77, %struct.rtx_def** %78, align 8, !dbg !3377
  br label %if.end102, !dbg !3378

if.else75:                                        ; preds = %lor.lhs.false71
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb67, align 8, !dbg !3379
  %call76 = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %79), !dbg !3381
  %80 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3382
  store %struct.rtx_def* %call76, %struct.rtx_def** %80, align 8, !dbg !3383
  %81 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3384
  %flags77 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %81, i32 0, i32 5, !dbg !3384
  %82 = load i16, i16* %flags77, align 8, !dbg !3384
  %conv78 = sext i16 %82 to i32, !dbg !3384
  %cmp79 = icmp ne i32 %conv78, 1, !dbg !3384
  br i1 %cmp79, label %cond.false90, label %lor.lhs.false81, !dbg !3384

lor.lhs.false81:                                  ; preds = %if.else75
  %83 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3384
  %84 = load %struct.rtx_def*, %struct.rtx_def** %83, align 8, !dbg !3384
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb67, align 8, !dbg !3384
  %call82 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %85), !dbg !3384
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call82, i32 0, i32 1, !dbg !3384
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !3384
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 2, !dbg !3384
  %rt_rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**, !dbg !3384
  %86 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx86, align 8, !dbg !3384
  %cmp87 = icmp eq %struct.rtx_def* %84, %86, !dbg !3384
  br i1 %cmp87, label %cond.false90, label %cond.true89, !dbg !3384

cond.true89:                                      ; preds = %lor.lhs.false81
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1331, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3384
  br label %cond.end91, !dbg !3384

cond.false90:                                     ; preds = %lor.lhs.false81, %if.else75
  br label %cond.end91, !dbg !3384

cond.end91:                                       ; preds = %cond.false90, %cond.true89
  %cond92 = phi i32 [ 0, %cond.true89 ], [ 0, %cond.false90 ], !dbg !3384
  %87 = load %struct.rtx_def**, %struct.rtx_def*** %succp.addr, align 8, !dbg !3385
  %88 = load %struct.rtx_def*, %struct.rtx_def** %87, align 8, !dbg !3385
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %88, i32 0, i32 1, !dbg !3385
  %fld94 = bitcast %union.u* %u93 to [1 x %union.rtunion_def]*, !dbg !3385
  %arrayidx95 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld94, i64 0, i64 3, !dbg !3385
  %rt_bb = bitcast %union.rtunion_def* %arrayidx95 to %struct.basic_block_def**, !dbg !3385
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3385
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb67, align 8, !dbg !3385
  %cmp96 = icmp eq %struct.basic_block_def* %89, %90, !dbg !3385
  br i1 %cmp96, label %cond.false99, label %cond.true98, !dbg !3385

cond.true98:                                      ; preds = %cond.end91
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1332, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3385
  br label %cond.end100, !dbg !3385

cond.false99:                                     ; preds = %cond.end91
  br label %cond.end100, !dbg !3385

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !3385
  br label %if.end102

if.end102:                                        ; preds = %cond.end100, %if.then74
  store i8 1, i8* %retval, align 1, !dbg !3386
  br label %return, !dbg !3386

if.else103:                                       ; preds = %while.end63
  store i8 0, i8* %retval, align 1, !dbg !3387
  br label %return, !dbg !3387

return:                                           ; preds = %if.else103, %if.end102, %if.end, %if.then3
  %91 = load i8, i8* %retval, align 1, !dbg !3388
  ret i8 %91, !dbg !3388
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @_eligible_successor_edge_p(%struct.edge_def* %e1, %struct.succ_iterator* %ip) #0 !dbg !3389 {
entry:
  %retval = alloca i8, align 1
  %e1.addr = alloca %struct.edge_def*, align 8
  %ip.addr = alloca %struct.succ_iterator*, align 8
  %e2 = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %flags = alloca i32, align 4
  %src_outside_rgn = alloca i8, align 1
  %ne = alloca %struct.edge_def*, align 8
  %nbb = alloca %struct.basic_block_def*, align 8
  %succeeds_in_top_order = alloca i8, align 1
  store %struct.edge_def* %e1, %struct.edge_def** %e1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1.addr, metadata !3390, metadata !DIExpression()), !dbg !3391
  store %struct.succ_iterator* %ip, %struct.succ_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.succ_iterator** %ip.addr, metadata !3392, metadata !DIExpression()), !dbg !3393
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e2, metadata !3394, metadata !DIExpression()), !dbg !3395
  %0 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3396
  store %struct.edge_def* %0, %struct.edge_def** %e2, align 8, !dbg !3395
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3397, metadata !DIExpression()), !dbg !3398
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !3399, metadata !DIExpression()), !dbg !3400
  %1 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3401
  %flags1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %1, i32 0, i32 5, !dbg !3402
  %2 = load i16, i16* %flags1, align 8, !dbg !3402
  %conv = sext i16 %2 to i32, !dbg !3401
  store i32 %conv, i32* %flags, align 4, !dbg !3400
  call void @llvm.dbg.declare(metadata i8* %src_outside_rgn, metadata !3403, metadata !DIExpression()), !dbg !3404
  %3 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3405
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 0, !dbg !3406
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3406
  %call = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %4), !dbg !3407
  %tobool = icmp ne i8 %call, 0, !dbg !3408
  %lnot = xor i1 %tobool, true, !dbg !3408
  %lnot.ext = zext i1 %lnot to i32, !dbg !3408
  %conv2 = trunc i32 %lnot.ext to i8, !dbg !3408
  store i8 %conv2, i8* %src_outside_rgn, align 1, !dbg !3404
  %5 = load i32, i32* %flags, align 4, !dbg !3409
  %cmp = icmp ne i32 %5, 0, !dbg !3409
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3409

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1363, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3409
  br label %cond.end, !dbg !3409

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3409

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3409
  %6 = load i8, i8* %src_outside_rgn, align 1, !dbg !3410
  %tobool4 = icmp ne i8 %6, 0, !dbg !3410
  br i1 %tobool4, label %if.then, label %if.end13, !dbg !3412

if.then:                                          ; preds = %cond.end
  %7 = load i32, i32* %flags, align 4, !dbg !3413
  %and = and i32 %7, 12, !dbg !3413
  %tobool5 = icmp ne i32 %and, 0, !dbg !3413
  br i1 %tobool5, label %cond.false7, label %cond.true6, !dbg !3413

cond.true6:                                       ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1369, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3413
  br label %cond.end8, !dbg !3413

cond.false7:                                      ; preds = %if.then
  br label %cond.end8, !dbg !3413

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !3413
  %8 = load i32, i32* %flags, align 4, !dbg !3415
  %and10 = and i32 %8, 4, !dbg !3417
  %tobool11 = icmp ne i32 %and10, 0, !dbg !3417
  br i1 %tobool11, label %if.then12, label %if.end, !dbg !3418

if.then12:                                        ; preds = %cond.end8
  store i8 0, i8* %retval, align 1, !dbg !3419
  br label %return, !dbg !3419

if.end:                                           ; preds = %cond.end8
  br label %if.end13, !dbg !3420

if.end13:                                         ; preds = %if.end, %cond.end
  %9 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3421
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 1, !dbg !3422
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3422
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !3423
  br label %while.body, !dbg !3424

while.body:                                       ; preds = %if.end13, %if.end34, %cond.end62
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3425
  %call14 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %11), !dbg !3428
  %tobool15 = icmp ne i8 %call14, 0, !dbg !3428
  br i1 %tobool15, label %if.end35, label %if.then16, !dbg !3429

if.then16:                                        ; preds = %while.body
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ne, metadata !3430, metadata !DIExpression()), !dbg !3432
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %nbb, metadata !3433, metadata !DIExpression()), !dbg !3434
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3435
  %call17 = call zeroext i8 @sel_bb_empty_or_nop_p(%struct.basic_block_def* %12), !dbg !3437
  %tobool18 = icmp ne i8 %call17, 0, !dbg !3437
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !3438

if.then19:                                        ; preds = %if.then16
  br label %while.end, !dbg !3439

if.end20:                                         ; preds = %if.then16
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3440
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !3440
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3440
  %tobool21 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !3440
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !3440

cond.true22:                                      ; preds = %if.end20
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3440
  %succs23 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !3440
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs23, align 8, !dbg !3440
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %16, i32 0, i32 0, !dbg !3440
  br label %cond.end25, !dbg !3440

cond.false24:                                     ; preds = %if.end20
  br label %cond.end25, !dbg !3440

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_edge_base* [ %base, %cond.true22 ], [ null, %cond.false24 ], !dbg !3440
  %call27 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond26, i32 0), !dbg !3440
  store %struct.edge_def* %call27, %struct.edge_def** %ne, align 8, !dbg !3441
  %17 = load %struct.edge_def*, %struct.edge_def** %ne, align 8, !dbg !3442
  %dest28 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 1, !dbg !3443
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %dest28, align 8, !dbg !3443
  store %struct.basic_block_def* %18, %struct.basic_block_def** %nbb, align 8, !dbg !3444
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %nbb, align 8, !dbg !3445
  %call29 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %19), !dbg !3447
  %tobool30 = icmp ne i8 %call29, 0, !dbg !3447
  br i1 %tobool30, label %if.end34, label %land.lhs.true, !dbg !3448

land.lhs.true:                                    ; preds = %cond.end25
  %20 = load i32, i32* %flags, align 4, !dbg !3449
  %and31 = and i32 %20, 4, !dbg !3450
  %tobool32 = icmp ne i32 %and31, 0, !dbg !3450
  br i1 %tobool32, label %if.end34, label %if.then33, !dbg !3451

if.then33:                                        ; preds = %land.lhs.true
  br label %while.end, !dbg !3452

if.end34:                                         ; preds = %land.lhs.true, %cond.end25
  %21 = load %struct.edge_def*, %struct.edge_def** %ne, align 8, !dbg !3453
  store %struct.edge_def* %21, %struct.edge_def** %e2, align 8, !dbg !3454
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %nbb, align 8, !dbg !3455
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !3456
  br label %while.body, !dbg !3457, !llvm.loop !3458

if.end35:                                         ; preds = %while.body
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3460
  %call36 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %23), !dbg !3462
  %tobool37 = icmp ne i8 %call36, 0, !dbg !3462
  br i1 %tobool37, label %if.end42, label %land.lhs.true38, !dbg !3463

land.lhs.true38:                                  ; preds = %if.end35
  %24 = load i32, i32* %flags, align 4, !dbg !3464
  %and39 = and i32 %24, 4, !dbg !3465
  %tobool40 = icmp ne i32 %and39, 0, !dbg !3465
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !3466

if.then41:                                        ; preds = %land.lhs.true38
  store i8 0, i8* %retval, align 1, !dbg !3467
  br label %return, !dbg !3467

if.end42:                                         ; preds = %land.lhs.true38, %if.end35
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3468
  %succs43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !3468
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs43, align 8, !dbg !3468
  %tobool44 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !3468
  br i1 %tobool44, label %cond.true45, label %cond.false48, !dbg !3468

cond.true45:                                      ; preds = %if.end42
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3468
  %succs46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !3468
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs46, align 8, !dbg !3468
  %base47 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !3468
  br label %cond.end49, !dbg !3468

cond.false48:                                     ; preds = %if.end42
  br label %cond.end49, !dbg !3468

cond.end49:                                       ; preds = %cond.false48, %cond.true45
  %cond50 = phi %struct.VEC_edge_base* [ %base47, %cond.true45 ], [ null, %cond.false48 ], !dbg !3468
  %call51 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond50), !dbg !3468
  %cmp52 = icmp eq i32 %call51, 0, !dbg !3470
  br i1 %cmp52, label %if.then54, label %if.end55, !dbg !3471

if.then54:                                        ; preds = %cond.end49
  store i8 0, i8* %retval, align 1, !dbg !3472
  br label %return, !dbg !3472

if.end55:                                         ; preds = %cond.end49
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3473
  %succs56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 1, !dbg !3473
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs56, align 8, !dbg !3473
  %tobool57 = icmp ne %struct.VEC_edge_gc* %30, null, !dbg !3473
  br i1 %tobool57, label %cond.true58, label %cond.false61, !dbg !3473

cond.true58:                                      ; preds = %if.end55
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3473
  %succs59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 1, !dbg !3473
  %32 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs59, align 8, !dbg !3473
  %base60 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %32, i32 0, i32 0, !dbg !3473
  br label %cond.end62, !dbg !3473

cond.false61:                                     ; preds = %if.end55
  br label %cond.end62, !dbg !3473

cond.end62:                                       ; preds = %cond.false61, %cond.true58
  %cond63 = phi %struct.VEC_edge_base* [ %base60, %cond.true58 ], [ null, %cond.false61 ], !dbg !3473
  %call64 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond63, i32 0), !dbg !3473
  store %struct.edge_def* %call64, %struct.edge_def** %e2, align 8, !dbg !3474
  %33 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3475
  %dest65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !3476
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest65, align 8, !dbg !3476
  store %struct.basic_block_def* %34, %struct.basic_block_def** %bb, align 8, !dbg !3477
  br label %while.body, !dbg !3424, !llvm.loop !3458

while.end:                                        ; preds = %if.then33, %if.then19
  %35 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3478
  %36 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3479
  %e266 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %36, i32 0, i32 2, !dbg !3480
  store %struct.edge_def* %35, %struct.edge_def** %e266, align 8, !dbg !3481
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3482
  %call67 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %37), !dbg !3484
  %tobool68 = icmp ne i8 %call67, 0, !dbg !3484
  br i1 %tobool68, label %if.then69, label %if.end117, !dbg !3485

if.then69:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i8* %succeeds_in_top_order, metadata !3486, metadata !DIExpression()), !dbg !3488
  %38 = load i32*, i32** @block_to_bb, align 8, !dbg !3489
  %39 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3489
  %bb70 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %39, i32 0, i32 4, !dbg !3489
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb70, align 8, !dbg !3489
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !3489
  %41 = load i32, i32* %index, align 8, !dbg !3489
  %idxprom = sext i32 %41 to i64, !dbg !3489
  %arrayidx = getelementptr inbounds i32, i32* %38, i64 %idxprom, !dbg !3489
  %42 = load i32, i32* %arrayidx, align 4, !dbg !3489
  %43 = load i32*, i32** @block_to_bb, align 8, !dbg !3490
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3490
  %index71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 9, !dbg !3490
  %45 = load i32, i32* %index71, align 8, !dbg !3490
  %idxprom72 = sext i32 %45 to i64, !dbg !3490
  %arrayidx73 = getelementptr inbounds i32, i32* %43, i64 %idxprom72, !dbg !3490
  %46 = load i32, i32* %arrayidx73, align 4, !dbg !3490
  %cmp74 = icmp slt i32 %42, %46, !dbg !3491
  %conv75 = zext i1 %cmp74 to i32, !dbg !3491
  %conv76 = trunc i32 %conv75 to i8, !dbg !3492
  store i8 %conv76, i8* %succeeds_in_top_order, align 1, !dbg !3488
  %47 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3493
  %current_flags = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %47, i32 0, i32 6, !dbg !3494
  store i16 1, i16* %current_flags, align 2, !dbg !3495
  %48 = load i8, i8* %succeeds_in_top_order, align 1, !dbg !3496
  %tobool77 = icmp ne i8 %48, 0, !dbg !3496
  br i1 %tobool77, label %if.then78, label %if.end92, !dbg !3498

if.then78:                                        ; preds = %if.then69
  %49 = load i8, i8* %src_outside_rgn, align 1, !dbg !3499
  %tobool79 = icmp ne i8 %49, 0, !dbg !3499
  br i1 %tobool79, label %lor.lhs.false, label %cond.false82, !dbg !3499

lor.lhs.false:                                    ; preds = %if.then78
  %50 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !3499
  %tobool80 = icmp ne i32 %50, 0, !dbg !3499
  br i1 %tobool80, label %cond.false82, label %cond.true81, !dbg !3499

cond.true81:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1431, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3499
  br label %cond.end83, !dbg !3499

cond.false82:                                     ; preds = %lor.lhs.false, %if.then78
  br label %cond.end83, !dbg !3499

cond.end83:                                       ; preds = %cond.false82, %cond.true81
  %cond84 = phi i32 [ 0, %cond.true81 ], [ 0, %cond.false82 ], !dbg !3499
  %51 = load i32, i32* %flags, align 4, !dbg !3501
  %and85 = and i32 %51, 1, !dbg !3502
  %tobool86 = icmp ne i32 %and85, 0, !dbg !3503
  %lnot87 = xor i1 %tobool86, true, !dbg !3503
  %lnot89 = xor i1 %lnot87, true, !dbg !3504
  %lnot.ext90 = zext i1 %lnot89 to i32, !dbg !3504
  %conv91 = trunc i32 %lnot.ext90 to i8, !dbg !3504
  store i8 %conv91, i8* %retval, align 1, !dbg !3505
  br label %return, !dbg !3505

if.end92:                                         ; preds = %if.then69
  %52 = load i8, i8* @pipelining_p, align 1, !dbg !3506
  %conv93 = zext i8 %52 to i32, !dbg !3506
  %tobool94 = icmp ne i32 %conv93, 0, !dbg !3506
  br i1 %tobool94, label %land.lhs.true95, label %if.end108, !dbg !3508

land.lhs.true95:                                  ; preds = %if.end92
  %53 = load %struct.edge_def*, %struct.edge_def** %e1.addr, align 8, !dbg !3509
  %src96 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 0, !dbg !3510
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %src96, align 8, !dbg !3510
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 3, !dbg !3511
  %55 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3511
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3512
  %loop_father97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 3, !dbg !3513
  %57 = load %struct.loop*, %struct.loop** %loop_father97, align 8, !dbg !3513
  %cmp98 = icmp eq %struct.loop* %55, %57, !dbg !3514
  br i1 %cmp98, label %if.then100, label %if.end108, !dbg !3515

if.then100:                                       ; preds = %land.lhs.true95
  %58 = load i32, i32* %flags, align 4, !dbg !3516
  %and101 = and i32 %58, 1, !dbg !3517
  %tobool102 = icmp ne i32 %and101, 0, !dbg !3518
  %lnot103 = xor i1 %tobool102, true, !dbg !3518
  %lnot105 = xor i1 %lnot103, true, !dbg !3519
  %lnot.ext106 = zext i1 %lnot105 to i32, !dbg !3519
  %conv107 = trunc i32 %lnot.ext106 to i8, !dbg !3519
  store i8 %conv107, i8* %retval, align 1, !dbg !3520
  br label %return, !dbg !3520

if.end108:                                        ; preds = %land.lhs.true95, %if.end92
  %59 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3521
  %current_flags109 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %59, i32 0, i32 6, !dbg !3522
  store i16 2, i16* %current_flags109, align 2, !dbg !3523
  %60 = load i32, i32* %flags, align 4, !dbg !3524
  %and110 = and i32 %60, 2, !dbg !3525
  %tobool111 = icmp ne i32 %and110, 0, !dbg !3526
  %lnot112 = xor i1 %tobool111, true, !dbg !3526
  %lnot114 = xor i1 %lnot112, true, !dbg !3527
  %lnot.ext115 = zext i1 %lnot114 to i32, !dbg !3527
  %conv116 = trunc i32 %lnot.ext115 to i8, !dbg !3527
  store i8 %conv116, i8* %retval, align 1, !dbg !3528
  br label %return, !dbg !3528

if.end117:                                        ; preds = %while.end
  %61 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3529
  %current_flags118 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %61, i32 0, i32 6, !dbg !3530
  store i16 4, i16* %current_flags118, align 2, !dbg !3531
  %62 = load i32, i32* %flags, align 4, !dbg !3532
  %and119 = and i32 %62, 4, !dbg !3533
  %tobool120 = icmp ne i32 %and119, 0, !dbg !3534
  %lnot121 = xor i1 %tobool120, true, !dbg !3534
  %lnot123 = xor i1 %lnot121, true, !dbg !3535
  %lnot.ext124 = zext i1 %lnot123 to i32, !dbg !3535
  %conv125 = trunc i32 %lnot.ext124 to i8, !dbg !3535
  store i8 %conv125, i8* %retval, align 1, !dbg !3536
  br label %return, !dbg !3536

return:                                           ; preds = %if.end117, %if.end108, %if.then100, %cond.end83, %if.then54, %if.then41, %if.then12
  %63 = load i8, i8* %retval, align 1, !dbg !3537
  ret i8 %63, !dbg !3537
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @flist_add(%struct._list_node** %lp, %struct.rtx_def* %insn, i8* %state, %struct.deps* %dc, i8* %tc, %struct.rtx_def* %last_scheduled_insn, %struct.VEC_rtx_gc* %executing_insns, i32* %ready_ticks, i32 %ready_ticks_size, %struct.rtx_def* %sched_next, i32 %cycle, i32 %cycle_issued_insns, i32 %issue_more, i8 zeroext %starts_cycle_p, i8 zeroext %after_stall_p) #0 !dbg !3538 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %state.addr = alloca i8*, align 8
  %dc.addr = alloca %struct.deps*, align 8
  %tc.addr = alloca i8*, align 8
  %last_scheduled_insn.addr = alloca %struct.rtx_def*, align 8
  %executing_insns.addr = alloca %struct.VEC_rtx_gc*, align 8
  %ready_ticks.addr = alloca i32*, align 8
  %ready_ticks_size.addr = alloca i32, align 4
  %sched_next.addr = alloca %struct.rtx_def*, align 8
  %cycle.addr = alloca i32, align 4
  %cycle_issued_insns.addr = alloca i32, align 4
  %issue_more.addr = alloca i32, align 4
  %starts_cycle_p.addr = alloca i8, align 1
  %after_stall_p.addr = alloca i8, align 1
  %f = alloca %struct._fence*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !3541, metadata !DIExpression()), !dbg !3542
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3543, metadata !DIExpression()), !dbg !3544
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !3545, metadata !DIExpression()), !dbg !3546
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !3547, metadata !DIExpression()), !dbg !3548
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3549, metadata !DIExpression()), !dbg !3550
  store %struct.rtx_def* %last_scheduled_insn, %struct.rtx_def** %last_scheduled_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_scheduled_insn.addr, metadata !3551, metadata !DIExpression()), !dbg !3552
  store %struct.VEC_rtx_gc* %executing_insns, %struct.VEC_rtx_gc** %executing_insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc** %executing_insns.addr, metadata !3553, metadata !DIExpression()), !dbg !3554
  store i32* %ready_ticks, i32** %ready_ticks.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ready_ticks.addr, metadata !3555, metadata !DIExpression()), !dbg !3556
  store i32 %ready_ticks_size, i32* %ready_ticks_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ready_ticks_size.addr, metadata !3557, metadata !DIExpression()), !dbg !3558
  store %struct.rtx_def* %sched_next, %struct.rtx_def** %sched_next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sched_next.addr, metadata !3559, metadata !DIExpression()), !dbg !3560
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !3561, metadata !DIExpression()), !dbg !3562
  store i32 %cycle_issued_insns, i32* %cycle_issued_insns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle_issued_insns.addr, metadata !3563, metadata !DIExpression()), !dbg !3564
  store i32 %issue_more, i32* %issue_more.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %issue_more.addr, metadata !3565, metadata !DIExpression()), !dbg !3566
  store i8 %starts_cycle_p, i8* %starts_cycle_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %starts_cycle_p.addr, metadata !3567, metadata !DIExpression()), !dbg !3568
  store i8 %after_stall_p, i8* %after_stall_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %after_stall_p.addr, metadata !3569, metadata !DIExpression()), !dbg !3570
  call void @llvm.dbg.declare(metadata %struct._fence** %f, metadata !3571, metadata !DIExpression()), !dbg !3572
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !3573
  call void @_list_add(%struct._list_node** %0), !dbg !3574
  %1 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !3575
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !3575
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !3575
  %fence = bitcast %union.anon.0* %u to %struct._fence*, !dbg !3575
  store %struct._fence* %fence, %struct._fence** %f, align 8, !dbg !3576
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3577
  %4 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3578
  %insn1 = getelementptr inbounds %struct._fence, %struct._fence* %4, i32 0, i32 0, !dbg !3578
  store %struct.rtx_def* %3, %struct.rtx_def** %insn1, align 8, !dbg !3579
  %5 = load i8*, i8** %state.addr, align 8, !dbg !3580
  %cmp = icmp ne i8* %5, null, !dbg !3580
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !3580

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 275, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3580
  br label %cond.end, !dbg !3580

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3580

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3580
  %6 = load i8*, i8** %state.addr, align 8, !dbg !3581
  %7 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3582
  %state2 = getelementptr inbounds %struct._fence, %struct._fence* %7, i32 0, i32 1, !dbg !3582
  store i8* %6, i8** %state2, align 8, !dbg !3583
  %8 = load i32, i32* %cycle.addr, align 4, !dbg !3584
  %9 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3585
  %cycle3 = getelementptr inbounds %struct._fence, %struct._fence* %9, i32 0, i32 2, !dbg !3585
  store i32 %8, i32* %cycle3, align 8, !dbg !3586
  %10 = load i32, i32* %cycle_issued_insns.addr, align 4, !dbg !3587
  %11 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3588
  %cycle_issued_insns4 = getelementptr inbounds %struct._fence, %struct._fence* %11, i32 0, i32 3, !dbg !3588
  store i32 %10, i32* %cycle_issued_insns4, align 4, !dbg !3589
  %12 = load i8, i8* %starts_cycle_p.addr, align 1, !dbg !3590
  %conv = zext i8 %12 to i32, !dbg !3590
  %13 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3591
  %starts_cycle_p5 = getelementptr inbounds %struct._fence, %struct._fence* %13, i32 0, i32 13, !dbg !3591
  %14 = trunc i32 %conv to i8, !dbg !3592
  %bf.load = load i8, i8* %starts_cycle_p5, align 8, !dbg !3592
  %bf.value = and i8 %14, 1, !dbg !3592
  %bf.shl = shl i8 %bf.value, 2, !dbg !3592
  %bf.clear = and i8 %bf.load, -5, !dbg !3592
  %bf.set = or i8 %bf.clear, %bf.shl, !dbg !3592
  store i8 %bf.set, i8* %starts_cycle_p5, align 8, !dbg !3592
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !3592
  %15 = load i8, i8* %after_stall_p.addr, align 1, !dbg !3593
  %conv6 = zext i8 %15 to i32, !dbg !3593
  %16 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3594
  %after_stall_p7 = getelementptr inbounds %struct._fence, %struct._fence* %16, i32 0, i32 13, !dbg !3594
  %17 = trunc i32 %conv6 to i8, !dbg !3595
  %bf.load8 = load i8, i8* %after_stall_p7, align 8, !dbg !3595
  %bf.value9 = and i8 %17, 1, !dbg !3595
  %bf.shl10 = shl i8 %bf.value9, 3, !dbg !3595
  %bf.clear11 = and i8 %bf.load8, -9, !dbg !3595
  %bf.set12 = or i8 %bf.clear11, %bf.shl10, !dbg !3595
  store i8 %bf.set12, i8* %after_stall_p7, align 8, !dbg !3595
  %bf.result.cast13 = zext i8 %bf.value9 to i32, !dbg !3595
  %18 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3596
  %cmp14 = icmp ne %struct.deps* %18, null, !dbg !3596
  br i1 %cmp14, label %cond.false17, label %cond.true16, !dbg !3596

cond.true16:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 283, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3596
  br label %cond.end18, !dbg !3596

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18, !dbg !3596

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !3596
  %19 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3597
  %20 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3598
  %dc20 = getelementptr inbounds %struct._fence, %struct._fence* %20, i32 0, i32 5, !dbg !3598
  store %struct.deps* %19, %struct.deps** %dc20, align 8, !dbg !3599
  %21 = load i8*, i8** %tc.addr, align 8, !dbg !3600
  %cmp21 = icmp ne i8* %21, null, !dbg !3600
  br i1 %cmp21, label %cond.false26, label %lor.lhs.false, !dbg !3600

lor.lhs.false:                                    ; preds = %cond.end18
  %22 = load i8* ()*, i8* ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 23), align 8, !dbg !3600
  %cmp23 = icmp eq i8* ()* %22, null, !dbg !3600
  br i1 %cmp23, label %cond.false26, label %cond.true25, !dbg !3600

cond.true25:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 286, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3600
  br label %cond.end27, !dbg !3600

cond.false26:                                     ; preds = %lor.lhs.false, %cond.end18
  br label %cond.end27, !dbg !3600

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi i32 [ 0, %cond.true25 ], [ 0, %cond.false26 ], !dbg !3600
  %23 = load i8*, i8** %tc.addr, align 8, !dbg !3601
  %24 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3602
  %tc29 = getelementptr inbounds %struct._fence, %struct._fence* %24, i32 0, i32 6, !dbg !3602
  store i8* %23, i8** %tc29, align 8, !dbg !3603
  %25 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3604
  %26 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3605
  %last_scheduled_insn30 = getelementptr inbounds %struct._fence, %struct._fence* %26, i32 0, i32 10, !dbg !3605
  store %struct.rtx_def* %25, %struct.rtx_def** %last_scheduled_insn30, align 8, !dbg !3606
  %27 = load i32, i32* %issue_more.addr, align 4, !dbg !3607
  %28 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3608
  %issue_more31 = getelementptr inbounds %struct._fence, %struct._fence* %28, i32 0, i32 11, !dbg !3608
  store i32 %27, i32* %issue_more31, align 8, !dbg !3609
  %29 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns.addr, align 8, !dbg !3610
  %30 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3611
  %executing_insns32 = getelementptr inbounds %struct._fence, %struct._fence* %30, i32 0, i32 7, !dbg !3611
  store %struct.VEC_rtx_gc* %29, %struct.VEC_rtx_gc** %executing_insns32, align 8, !dbg !3612
  %31 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !3613
  %32 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3614
  %ready_ticks33 = getelementptr inbounds %struct._fence, %struct._fence* %32, i32 0, i32 8, !dbg !3614
  store i32* %31, i32** %ready_ticks33, align 8, !dbg !3615
  %33 = load i32, i32* %ready_ticks_size.addr, align 4, !dbg !3616
  %34 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3617
  %ready_ticks_size34 = getelementptr inbounds %struct._fence, %struct._fence* %34, i32 0, i32 9, !dbg !3617
  store i32 %33, i32* %ready_ticks_size34, align 8, !dbg !3618
  %35 = load %struct.rtx_def*, %struct.rtx_def** %sched_next.addr, align 8, !dbg !3619
  %36 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3620
  %sched_next35 = getelementptr inbounds %struct._fence, %struct._fence* %36, i32 0, i32 12, !dbg !3620
  store %struct.rtx_def* %35, %struct.rtx_def** %sched_next35, align 8, !dbg !3621
  %37 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3622
  call void @init_fence_for_scheduling(%struct._fence* %37), !dbg !3623
  ret void, !dbg !3624
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @state_create() #0 !dbg !3625 {
entry:
  %state = alloca i8*, align 8
  call void @llvm.dbg.declare(metadata i8** %state, metadata !3628, metadata !DIExpression()), !dbg !3629
  %call = call i8* @state_alloc(), !dbg !3630
  store i8* %call, i8** %state, align 8, !dbg !3629
  %0 = load i8*, i8** %state, align 8, !dbg !3631
  call void @state_reset(i8* %0), !dbg !3632
  %1 = load i8*, i8** %state, align 8, !dbg !3633
  call void @advance_state(i8* %1), !dbg !3634
  %2 = load i8*, i8** %state, align 8, !dbg !3635
  ret i8* %2, !dbg !3636
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.deps* @create_deps_context() #0 !dbg !3637 {
entry:
  %dc = alloca %struct.deps*, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc, metadata !3640, metadata !DIExpression()), !dbg !3641
  %call = call %struct.deps* @alloc_deps_context(), !dbg !3642
  store %struct.deps* %call, %struct.deps** %dc, align 8, !dbg !3641
  %0 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !3643
  call void @init_deps(%struct.deps* %0, i8 zeroext 0), !dbg !3644
  %1 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !3645
  ret %struct.deps* %1, !dbg !3646
}

declare dso_local i8* @xcalloc(i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal void @_succ_iter_next(%struct.succ_iterator* %ip) #0 !dbg !3647 {
entry:
  %ip.addr = alloca %struct.succ_iterator*, align 8
  store %struct.succ_iterator* %ip, %struct.succ_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.succ_iterator** %ip.addr, metadata !3650, metadata !DIExpression()), !dbg !3651
  %0 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3652
  %e2 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %0, i32 0, i32 2, !dbg !3652
  %1 = load %struct.edge_def*, %struct.edge_def** %e2, align 8, !dbg !3652
  %tobool = icmp ne %struct.edge_def* %1, null, !dbg !3652
  br i1 %tobool, label %lor.lhs.false, label %cond.false, !dbg !3652

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3652
  %e1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %2, i32 0, i32 1, !dbg !3652
  %3 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !3652
  %tobool1 = icmp ne %struct.edge_def* %3, null, !dbg !3652
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !3652

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1345, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3652
  br label %cond.end, !dbg !3652

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !3652

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3652
  %4 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3653
  %bb_end = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %4, i32 0, i32 0, !dbg !3655
  %5 = load i8, i8* %bb_end, align 8, !dbg !3655
  %conv = zext i8 %5 to i32, !dbg !3653
  %tobool2 = icmp ne i32 %conv, 0, !dbg !3653
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !3656

land.lhs.true:                                    ; preds = %cond.end
  %6 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3657
  %e13 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %6, i32 0, i32 1, !dbg !3658
  %7 = load %struct.edge_def*, %struct.edge_def** %e13, align 8, !dbg !3658
  %tobool4 = icmp ne %struct.edge_def* %7, null, !dbg !3657
  br i1 %tobool4, label %land.lhs.true5, label %if.end, !dbg !3659

land.lhs.true5:                                   ; preds = %land.lhs.true
  %8 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3660
  %loop_exits = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %8, i32 0, i32 8, !dbg !3661
  %9 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %loop_exits, align 8, !dbg !3661
  %tobool6 = icmp ne %struct.VEC_edge_heap* %9, null, !dbg !3660
  br i1 %tobool6, label %if.end, label %if.then, !dbg !3662

if.then:                                          ; preds = %land.lhs.true5
  %10 = load %struct.succ_iterator*, %struct.succ_iterator** %ip.addr, align 8, !dbg !3663
  %ei = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %10, i32 0, i32 3, !dbg !3664
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3665
  br label %if.end, !dbg !3665

if.end:                                           ; preds = %if.then, %land.lhs.true5, %land.lhs.true, %cond.end
  ret void, !dbg !3666
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @move_fence_to_fences(%struct._list_node* %old_fences, %struct.flist_tail_def* %new_fences) #0 !dbg !3667 {
entry:
  %old_fences.addr = alloca %struct._list_node*, align 8
  %new_fences.addr = alloca %struct.flist_tail_def*, align 8
  %f = alloca %struct._fence*, align 8
  %old = alloca %struct._fence*, align 8
  %tailp = alloca %struct._list_node**, align 8
  store %struct._list_node* %old_fences, %struct._list_node** %old_fences.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %old_fences.addr, metadata !3670, metadata !DIExpression()), !dbg !3671
  store %struct.flist_tail_def* %new_fences, %struct.flist_tail_def** %new_fences.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.flist_tail_def** %new_fences.addr, metadata !3672, metadata !DIExpression()), !dbg !3673
  call void @llvm.dbg.declare(metadata %struct._fence** %f, metadata !3674, metadata !DIExpression()), !dbg !3675
  call void @llvm.dbg.declare(metadata %struct._fence** %old, metadata !3676, metadata !DIExpression()), !dbg !3677
  call void @llvm.dbg.declare(metadata %struct._list_node*** %tailp, metadata !3678, metadata !DIExpression()), !dbg !3679
  %0 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !3680
  %tailp1 = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %0, i32 0, i32 1, !dbg !3680
  %1 = load %struct._list_node**, %struct._list_node*** %tailp1, align 8, !dbg !3680
  store %struct._list_node** %1, %struct._list_node*** %tailp, align 8, !dbg !3679
  %2 = load %struct._list_node*, %struct._list_node** %old_fences.addr, align 8, !dbg !3681
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !3681
  %fence = bitcast %union.anon.0* %u to %struct._fence*, !dbg !3681
  store %struct._fence* %fence, %struct._fence** %old, align 8, !dbg !3682
  %3 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !3683
  %head = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %3, i32 0, i32 0, !dbg !3683
  %4 = load %struct._list_node*, %struct._list_node** %head, align 8, !dbg !3683
  %5 = load %struct._list_node*, %struct._list_node** %old_fences.addr, align 8, !dbg !3684
  %u2 = getelementptr inbounds %struct._list_node, %struct._list_node* %5, i32 0, i32 1, !dbg !3684
  %fence3 = bitcast %union.anon.0* %u2 to %struct._fence*, !dbg !3684
  %insn = getelementptr inbounds %struct._fence, %struct._fence* %fence3, i32 0, i32 0, !dbg !3684
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !3684
  %call = call %struct._fence* @flist_lookup(%struct._list_node* %4, %struct.rtx_def* %6), !dbg !3685
  store %struct._fence* %call, %struct._fence** %f, align 8, !dbg !3686
  %7 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3687
  %tobool = icmp ne %struct._fence* %7, null, !dbg !3687
  br i1 %tobool, label %if.then, label %if.else, !dbg !3689

if.then:                                          ; preds = %entry
  %8 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !3690
  %9 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3692
  %insn4 = getelementptr inbounds %struct._fence, %struct._fence* %9, i32 0, i32 0, !dbg !3693
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn4, align 8, !dbg !3693
  %11 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3694
  %state = getelementptr inbounds %struct._fence, %struct._fence* %11, i32 0, i32 1, !dbg !3695
  %12 = load i8*, i8** %state, align 8, !dbg !3695
  %13 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3696
  %dc = getelementptr inbounds %struct._fence, %struct._fence* %13, i32 0, i32 5, !dbg !3697
  %14 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !3697
  %15 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3698
  %tc = getelementptr inbounds %struct._fence, %struct._fence* %15, i32 0, i32 6, !dbg !3699
  %16 = load i8*, i8** %tc, align 8, !dbg !3699
  %17 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3700
  %last_scheduled_insn = getelementptr inbounds %struct._fence, %struct._fence* %17, i32 0, i32 10, !dbg !3701
  %18 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn, align 8, !dbg !3701
  %19 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3702
  %executing_insns = getelementptr inbounds %struct._fence, %struct._fence* %19, i32 0, i32 7, !dbg !3703
  %20 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns, align 8, !dbg !3703
  %21 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3704
  %ready_ticks = getelementptr inbounds %struct._fence, %struct._fence* %21, i32 0, i32 8, !dbg !3705
  %22 = load i32*, i32** %ready_ticks, align 8, !dbg !3705
  %23 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3706
  %ready_ticks_size = getelementptr inbounds %struct._fence, %struct._fence* %23, i32 0, i32 9, !dbg !3707
  %24 = load i32, i32* %ready_ticks_size, align 8, !dbg !3707
  %25 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3708
  %sched_next = getelementptr inbounds %struct._fence, %struct._fence* %25, i32 0, i32 12, !dbg !3709
  %26 = load %struct.rtx_def*, %struct.rtx_def** %sched_next, align 8, !dbg !3709
  %27 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3710
  %cycle = getelementptr inbounds %struct._fence, %struct._fence* %27, i32 0, i32 2, !dbg !3711
  %28 = load i32, i32* %cycle, align 8, !dbg !3711
  %29 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3712
  %issue_more = getelementptr inbounds %struct._fence, %struct._fence* %29, i32 0, i32 11, !dbg !3713
  %30 = load i32, i32* %issue_more, align 8, !dbg !3713
  %31 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3714
  %after_stall_p = getelementptr inbounds %struct._fence, %struct._fence* %31, i32 0, i32 13, !dbg !3715
  %bf.load = load i8, i8* %after_stall_p, align 8, !dbg !3715
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !3715
  %bf.clear = and i8 %bf.lshr, 1, !dbg !3715
  %bf.cast = zext i8 %bf.clear to i32, !dbg !3715
  %conv = trunc i32 %bf.cast to i8, !dbg !3714
  call void @merge_fences(%struct._fence* %8, %struct.rtx_def* %10, i8* %12, %struct.deps* %14, i8* %16, %struct.rtx_def* %18, %struct.VEC_rtx_gc* %20, i32* %22, i32 %24, %struct.rtx_def* %26, i32 %28, i32 %30, i8 zeroext %conv), !dbg !3716
  br label %if.end, !dbg !3717

if.else:                                          ; preds = %entry
  %32 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !3718
  call void @_list_add(%struct._list_node** %32), !dbg !3720
  %33 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !3721
  %34 = load %struct._list_node*, %struct._list_node** %33, align 8, !dbg !3721
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %34, i32 0, i32 0, !dbg !3721
  %35 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !3722
  %tailp5 = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %35, i32 0, i32 1, !dbg !3722
  store %struct._list_node** %next, %struct._list_node*** %tailp5, align 8, !dbg !3723
  %36 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !3724
  %37 = load %struct._list_node*, %struct._list_node** %36, align 8, !dbg !3724
  %u6 = getelementptr inbounds %struct._list_node, %struct._list_node* %37, i32 0, i32 1, !dbg !3724
  %fence7 = bitcast %union.anon.0* %u6 to %struct._fence*, !dbg !3724
  %38 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3725
  %39 = bitcast %struct._fence* %fence7 to i8*, !dbg !3726
  %40 = bitcast %struct._fence* %38 to i8*, !dbg !3726
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 8 %40, i64 104, i1 false), !dbg !3726
  %41 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !3727
  %42 = load %struct._list_node*, %struct._list_node** %41, align 8, !dbg !3727
  %u8 = getelementptr inbounds %struct._list_node, %struct._list_node* %42, i32 0, i32 1, !dbg !3727
  %fence9 = bitcast %union.anon.0* %u8 to %struct._fence*, !dbg !3727
  call void @init_fence_for_scheduling(%struct._fence* %fence9), !dbg !3728
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %43 = load %struct._fence*, %struct._fence** %old, align 8, !dbg !3729
  %insn10 = getelementptr inbounds %struct._fence, %struct._fence* %43, i32 0, i32 0, !dbg !3729
  store %struct.rtx_def* null, %struct.rtx_def** %insn10, align 8, !dbg !3730
  ret void, !dbg !3731
}

; Function Attrs: noinline nounwind uwtable
define internal void @merge_fences(%struct._fence* %f, %struct.rtx_def* %insn, i8* %state, %struct.deps* %dc, i8* %tc, %struct.rtx_def* %last_scheduled_insn, %struct.VEC_rtx_gc* %executing_insns, i32* %ready_ticks, i32 %ready_ticks_size, %struct.rtx_def* %sched_next, i32 %cycle, i32 %issue_more, i8 zeroext %after_stall_p) #0 !dbg !3732 {
entry:
  %f.addr = alloca %struct._fence*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %state.addr = alloca i8*, align 8
  %dc.addr = alloca %struct.deps*, align 8
  %tc.addr = alloca i8*, align 8
  %last_scheduled_insn.addr = alloca %struct.rtx_def*, align 8
  %executing_insns.addr = alloca %struct.VEC_rtx_gc*, align 8
  %ready_ticks.addr = alloca i32*, align 8
  %ready_ticks_size.addr = alloca i32, align 4
  %sched_next.addr = alloca %struct.rtx_def*, align 8
  %cycle.addr = alloca i32, align 4
  %issue_more.addr = alloca i32, align 4
  %after_stall_p.addr = alloca i8, align 1
  %last_scheduled_insn_old = alloca %struct.rtx_def*, align 8
  %edge_old = alloca %struct.edge_def*, align 8
  %edge_new = alloca %struct.edge_def*, align 8
  %candidate = alloca %struct.edge_def*, align 8
  %si = alloca %struct.succ_iterator, align 8
  %succ = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.succ_iterator, align 8
  %tmp141 = alloca %struct.succ_iterator, align 8
  store %struct._fence* %f, %struct._fence** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %f.addr, metadata !3735, metadata !DIExpression()), !dbg !3736
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !3737, metadata !DIExpression()), !dbg !3738
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !3739, metadata !DIExpression()), !dbg !3740
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !3741, metadata !DIExpression()), !dbg !3742
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !3743, metadata !DIExpression()), !dbg !3744
  store %struct.rtx_def* %last_scheduled_insn, %struct.rtx_def** %last_scheduled_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_scheduled_insn.addr, metadata !3745, metadata !DIExpression()), !dbg !3746
  store %struct.VEC_rtx_gc* %executing_insns, %struct.VEC_rtx_gc** %executing_insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc** %executing_insns.addr, metadata !3747, metadata !DIExpression()), !dbg !3748
  store i32* %ready_ticks, i32** %ready_ticks.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ready_ticks.addr, metadata !3749, metadata !DIExpression()), !dbg !3750
  store i32 %ready_ticks_size, i32* %ready_ticks_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ready_ticks_size.addr, metadata !3751, metadata !DIExpression()), !dbg !3752
  store %struct.rtx_def* %sched_next, %struct.rtx_def** %sched_next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sched_next.addr, metadata !3753, metadata !DIExpression()), !dbg !3754
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !3755, metadata !DIExpression()), !dbg !3756
  store i32 %issue_more, i32* %issue_more.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %issue_more.addr, metadata !3757, metadata !DIExpression()), !dbg !3758
  store i8 %after_stall_p, i8* %after_stall_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %after_stall_p.addr, metadata !3759, metadata !DIExpression()), !dbg !3760
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_scheduled_insn_old, metadata !3761, metadata !DIExpression()), !dbg !3762
  %0 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3763
  %last_scheduled_insn1 = getelementptr inbounds %struct._fence, %struct._fence* %0, i32 0, i32 10, !dbg !3763
  %1 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn1, align 8, !dbg !3763
  store %struct.rtx_def* %1, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3762
  %2 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3764
  %insn2 = getelementptr inbounds %struct._fence, %struct._fence* %2, i32 0, i32 0, !dbg !3764
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn2, align 8, !dbg !3764
  %call = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %3), !dbg !3764
  %conv = zext i8 %call to i32, !dbg !3764
  %tobool = icmp ne i32 %conv, 0, !dbg !3764
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !3764

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %sched_next.addr, align 8, !dbg !3764
  %tobool3 = icmp ne %struct.rtx_def* %4, null, !dbg !3764
  br i1 %tobool3, label %cond.true, label %land.lhs.true4, !dbg !3764

land.lhs.true4:                                   ; preds = %land.lhs.true
  %5 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3764
  %sched_next5 = getelementptr inbounds %struct._fence, %struct._fence* %5, i32 0, i32 12, !dbg !3764
  %6 = load %struct.rtx_def*, %struct.rtx_def** %sched_next5, align 8, !dbg !3764
  %tobool6 = icmp ne %struct.rtx_def* %6, null, !dbg !3764
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !3764

cond.true:                                        ; preds = %land.lhs.true4, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 646, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3764
  br label %cond.end, !dbg !3764

cond.false:                                       ; preds = %land.lhs.true4
  br label %cond.end, !dbg !3764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3764
  %7 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3765
  %cmp = icmp eq %struct.rtx_def* %7, null, !dbg !3767
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !3768

lor.lhs.false:                                    ; preds = %cond.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3769
  %cmp8 = icmp eq %struct.rtx_def* %8, null, !dbg !3770
  br i1 %cmp8, label %if.then, label %lor.lhs.false10, !dbg !3771

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3772
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3773
  %cmp11 = icmp eq %struct.rtx_def* %9, %10, !dbg !3774
  br i1 %cmp11, label %if.then, label %if.else, !dbg !3775

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false, %cond.end
  %11 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3776
  %state13 = getelementptr inbounds %struct._fence, %struct._fence* %11, i32 0, i32 1, !dbg !3776
  %12 = load i8*, i8** %state13, align 8, !dbg !3776
  call void @state_reset(i8* %12), !dbg !3778
  %13 = load i8*, i8** %state.addr, align 8, !dbg !3779
  call void @state_free(i8* %13), !dbg !3780
  %14 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3781
  %dc14 = getelementptr inbounds %struct._fence, %struct._fence* %14, i32 0, i32 5, !dbg !3781
  %15 = load %struct.deps*, %struct.deps** %dc14, align 8, !dbg !3781
  call void @reset_deps_context(%struct.deps* %15), !dbg !3782
  %16 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3783
  call void @delete_deps_context(%struct.deps* %16), !dbg !3784
  %17 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3785
  %tc15 = getelementptr inbounds %struct._fence, %struct._fence* %17, i32 0, i32 6, !dbg !3785
  %18 = load i8*, i8** %tc15, align 8, !dbg !3785
  call void @reset_target_context(i8* %18, i8 zeroext 1), !dbg !3786
  %19 = load i8*, i8** %tc.addr, align 8, !dbg !3787
  call void @delete_target_context(i8* %19), !dbg !3788
  %20 = load i32, i32* %cycle.addr, align 4, !dbg !3789
  %21 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3791
  %cycle16 = getelementptr inbounds %struct._fence, %struct._fence* %21, i32 0, i32 2, !dbg !3791
  %22 = load i32, i32* %cycle16, align 8, !dbg !3791
  %cmp17 = icmp sgt i32 %20, %22, !dbg !3792
  br i1 %cmp17, label %if.then19, label %if.end, !dbg !3793

if.then19:                                        ; preds = %if.then
  %23 = load i32, i32* %cycle.addr, align 4, !dbg !3794
  %24 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3795
  %cycle20 = getelementptr inbounds %struct._fence, %struct._fence* %24, i32 0, i32 2, !dbg !3795
  store i32 %23, i32* %cycle20, align 8, !dbg !3796
  br label %if.end, !dbg !3795

if.end:                                           ; preds = %if.then19, %if.then
  %25 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3797
  %last_scheduled_insn21 = getelementptr inbounds %struct._fence, %struct._fence* %25, i32 0, i32 10, !dbg !3797
  store %struct.rtx_def* null, %struct.rtx_def** %last_scheduled_insn21, align 8, !dbg !3798
  %26 = load i32, i32* @issue_rate, align 4, !dbg !3799
  %27 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3800
  %issue_more22 = getelementptr inbounds %struct._fence, %struct._fence* %27, i32 0, i32 11, !dbg !3800
  store i32 %26, i32* %issue_more22, align 8, !dbg !3801
  call void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %executing_insns.addr), !dbg !3802
  %28 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !3803
  %29 = bitcast i32* %28 to i8*, !dbg !3803
  call void @free(i8* %29), !dbg !3804
  %30 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3805
  %executing_insns23 = getelementptr inbounds %struct._fence, %struct._fence* %30, i32 0, i32 7, !dbg !3805
  %31 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns23, align 8, !dbg !3805
  %tobool24 = icmp ne %struct.VEC_rtx_gc* %31, null, !dbg !3805
  br i1 %tobool24, label %if.then25, label %if.end42, !dbg !3807

if.then25:                                        ; preds = %if.end
  %32 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3808
  %executing_insns26 = getelementptr inbounds %struct._fence, %struct._fence* %32, i32 0, i32 7, !dbg !3808
  %33 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns26, align 8, !dbg !3808
  %tobool27 = icmp ne %struct.VEC_rtx_gc* %33, null, !dbg !3808
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !3808

cond.true28:                                      ; preds = %if.then25
  %34 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3808
  %executing_insns29 = getelementptr inbounds %struct._fence, %struct._fence* %34, i32 0, i32 7, !dbg !3808
  %35 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns29, align 8, !dbg !3808
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %35, i32 0, i32 0, !dbg !3808
  br label %cond.end31, !dbg !3808

cond.false30:                                     ; preds = %if.then25
  br label %cond.end31, !dbg !3808

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_rtx_base* [ %base, %cond.true28 ], [ null, %cond.false30 ], !dbg !3808
  %36 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3808
  %executing_insns33 = getelementptr inbounds %struct._fence, %struct._fence* %36, i32 0, i32 7, !dbg !3808
  %37 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns33, align 8, !dbg !3808
  %tobool34 = icmp ne %struct.VEC_rtx_gc* %37, null, !dbg !3808
  br i1 %tobool34, label %cond.true35, label %cond.false38, !dbg !3808

cond.true35:                                      ; preds = %cond.end31
  %38 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3808
  %executing_insns36 = getelementptr inbounds %struct._fence, %struct._fence* %38, i32 0, i32 7, !dbg !3808
  %39 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns36, align 8, !dbg !3808
  %base37 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %39, i32 0, i32 0, !dbg !3808
  br label %cond.end39, !dbg !3808

cond.false38:                                     ; preds = %cond.end31
  br label %cond.end39, !dbg !3808

cond.end39:                                       ; preds = %cond.false38, %cond.true35
  %cond40 = phi %struct.VEC_rtx_base* [ %base37, %cond.true35 ], [ null, %cond.false38 ], !dbg !3808
  %call41 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond40), !dbg !3808
  call void @VEC_rtx_base_block_remove(%struct.VEC_rtx_base* %cond32, i32 0, i32 %call41), !dbg !3808
  br label %if.end42, !dbg !3808

if.end42:                                         ; preds = %cond.end39, %if.end
  %40 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3809
  %ready_ticks43 = getelementptr inbounds %struct._fence, %struct._fence* %40, i32 0, i32 8, !dbg !3809
  %41 = load i32*, i32** %ready_ticks43, align 8, !dbg !3809
  %tobool44 = icmp ne i32* %41, null, !dbg !3809
  br i1 %tobool44, label %if.then45, label %if.end49, !dbg !3811

if.then45:                                        ; preds = %if.end42
  %42 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3812
  %ready_ticks46 = getelementptr inbounds %struct._fence, %struct._fence* %42, i32 0, i32 8, !dbg !3812
  %43 = load i32*, i32** %ready_ticks46, align 8, !dbg !3812
  %44 = bitcast i32* %43 to i8*, !dbg !3813
  %45 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3814
  %ready_ticks_size47 = getelementptr inbounds %struct._fence, %struct._fence* %45, i32 0, i32 9, !dbg !3814
  %46 = load i32, i32* %ready_ticks_size47, align 8, !dbg !3814
  %conv48 = sext i32 %46 to i64, !dbg !3814
  call void @llvm.memset.p0i8.i64(i8* align 4 %44, i8 0, i64 %conv48, i1 false), !dbg !3813
  br label %if.end49, !dbg !3813

if.end49:                                         ; preds = %if.then45, %if.end42
  br label %if.end218, !dbg !3815

if.else:                                          ; preds = %lor.lhs.false10
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_old, metadata !3816, metadata !DIExpression()), !dbg !3818
  store %struct.edge_def* null, %struct.edge_def** %edge_old, align 8, !dbg !3818
  call void @llvm.dbg.declare(metadata %struct.edge_def** %edge_new, metadata !3819, metadata !DIExpression()), !dbg !3820
  store %struct.edge_def* null, %struct.edge_def** %edge_new, align 8, !dbg !3820
  call void @llvm.dbg.declare(metadata %struct.edge_def** %candidate, metadata !3821, metadata !DIExpression()), !dbg !3822
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !3823, metadata !DIExpression()), !dbg !3824
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !3825, metadata !DIExpression()), !dbg !3826
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3827
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !3827
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3827
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !3827
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !3827
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !3827
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 5, !dbg !3827
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !3827
  %tobool50 = icmp ne %struct.basic_block_def* %49, null, !dbg !3827
  br i1 %tobool50, label %cond.false52, label %cond.true51, !dbg !3827

cond.true51:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 688, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3827
  br label %cond.end53, !dbg !3827

cond.false52:                                     ; preds = %if.else
  br label %cond.end53, !dbg !3827

cond.end53:                                       ; preds = %cond.false52, %cond.true51
  %cond54 = phi i32 [ 0, %cond.true51 ], [ 0, %cond.false52 ], !dbg !3827
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3828
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !3828
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !3828
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 3, !dbg !3828
  %rt_bb58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.basic_block_def**, !dbg !3828
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb58, align 8, !dbg !3828
  %prev_bb59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 5, !dbg !3829
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb59, align 8, !dbg !3829
  %call60 = call %struct.edge_def* @find_fallthru_edge(%struct.basic_block_def* %52), !dbg !3830
  store %struct.edge_def* %call60, %struct.edge_def** %candidate, align 8, !dbg !3831
  %53 = load %struct.edge_def*, %struct.edge_def** %candidate, align 8, !dbg !3832
  %tobool61 = icmp ne %struct.edge_def* %53, null, !dbg !3832
  br i1 %tobool61, label %lor.lhs.false62, label %if.then77, !dbg !3834

lor.lhs.false62:                                  ; preds = %cond.end53
  %54 = load %struct.edge_def*, %struct.edge_def** %candidate, align 8, !dbg !3835
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %54, i32 0, i32 0, !dbg !3836
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3836
  %56 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3837
  %u63 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !3837
  %fld64 = bitcast %union.u* %u63 to [1 x %union.rtunion_def]*, !dbg !3837
  %arrayidx65 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld64, i64 0, i64 3, !dbg !3837
  %rt_bb66 = bitcast %union.rtunion_def* %arrayidx65 to %struct.basic_block_def**, !dbg !3837
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb66, align 8, !dbg !3837
  %cmp67 = icmp ne %struct.basic_block_def* %55, %57, !dbg !3838
  br i1 %cmp67, label %land.lhs.true69, label %if.else82, !dbg !3839

land.lhs.true69:                                  ; preds = %lor.lhs.false62
  %58 = load %struct.edge_def*, %struct.edge_def** %candidate, align 8, !dbg !3840
  %src70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 0, !dbg !3841
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %src70, align 8, !dbg !3841
  %60 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3842
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !3842
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !3842
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 3, !dbg !3842
  %rt_bb74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.basic_block_def**, !dbg !3842
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb74, align 8, !dbg !3842
  %cmp75 = icmp ne %struct.basic_block_def* %59, %61, !dbg !3843
  br i1 %cmp75, label %if.then77, label %if.else82, !dbg !3844

if.then77:                                        ; preds = %land.lhs.true69, %cond.end53
  %62 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3845
  %state78 = getelementptr inbounds %struct._fence, %struct._fence* %62, i32 0, i32 1, !dbg !3845
  %63 = load i8*, i8** %state78, align 8, !dbg !3845
  call void @state_reset(i8* %63), !dbg !3847
  %64 = load i8*, i8** %state.addr, align 8, !dbg !3848
  call void @state_free(i8* %64), !dbg !3849
  %65 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3850
  %tc79 = getelementptr inbounds %struct._fence, %struct._fence* %65, i32 0, i32 6, !dbg !3850
  %66 = load i8*, i8** %tc79, align 8, !dbg !3850
  call void @reset_target_context(i8* %66, i8 zeroext 1), !dbg !3851
  %67 = load i8*, i8** %tc.addr, align 8, !dbg !3852
  call void @delete_target_context(i8* %67), !dbg !3853
  %68 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3854
  %last_scheduled_insn80 = getelementptr inbounds %struct._fence, %struct._fence* %68, i32 0, i32 10, !dbg !3854
  store %struct.rtx_def* null, %struct.rtx_def** %last_scheduled_insn80, align 8, !dbg !3855
  %69 = load i32, i32* @issue_rate, align 4, !dbg !3856
  %70 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3857
  %issue_more81 = getelementptr inbounds %struct._fence, %struct._fence* %70, i32 0, i32 11, !dbg !3857
  store i32 %69, i32* %issue_more81, align 8, !dbg !3858
  br label %if.end129, !dbg !3859

if.else82:                                        ; preds = %land.lhs.true69, %lor.lhs.false62
  %71 = load %struct.edge_def*, %struct.edge_def** %candidate, align 8, !dbg !3860
  %src83 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %71, i32 0, i32 0, !dbg !3862
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %src83, align 8, !dbg !3862
  %73 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3863
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !3863
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !3863
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 3, !dbg !3863
  %rt_bb87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.basic_block_def**, !dbg !3863
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb87, align 8, !dbg !3863
  %cmp88 = icmp eq %struct.basic_block_def* %72, %74, !dbg !3864
  br i1 %cmp88, label %if.then90, label %if.else112, !dbg !3865

if.then90:                                        ; preds = %if.else82
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3866
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !3866
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !3866
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 3, !dbg !3866
  %rt_bb94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.basic_block_def**, !dbg !3866
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb94, align 8, !dbg !3866
  %prev_bb95 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 5, !dbg !3866
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb95, align 8, !dbg !3866
  %78 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3866
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %78, i32 0, i32 1, !dbg !3866
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !3866
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 3, !dbg !3866
  %rt_bb99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.basic_block_def**, !dbg !3866
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb99, align 8, !dbg !3866
  %cmp100 = icmp ne %struct.basic_block_def* %77, %79, !dbg !3866
  br i1 %cmp100, label %cond.false103, label %cond.true102, !dbg !3866

cond.true102:                                     ; preds = %if.then90
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 711, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3866
  br label %cond.end104, !dbg !3866

cond.false103:                                    ; preds = %if.then90
  br label %cond.end104, !dbg !3866

cond.end104:                                      ; preds = %cond.false103, %cond.true102
  %cond105 = phi i32 [ 0, %cond.true102 ], [ 0, %cond.false103 ], !dbg !3866
  %80 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3868
  %state106 = getelementptr inbounds %struct._fence, %struct._fence* %80, i32 0, i32 1, !dbg !3868
  %81 = load i8*, i8** %state106, align 8, !dbg !3868
  call void @state_free(i8* %81), !dbg !3869
  %82 = load i8*, i8** %state.addr, align 8, !dbg !3870
  %83 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3871
  %state107 = getelementptr inbounds %struct._fence, %struct._fence* %83, i32 0, i32 1, !dbg !3871
  store i8* %82, i8** %state107, align 8, !dbg !3872
  %84 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3873
  %tc108 = getelementptr inbounds %struct._fence, %struct._fence* %84, i32 0, i32 6, !dbg !3873
  %85 = load i8*, i8** %tc108, align 8, !dbg !3873
  call void @delete_target_context(i8* %85), !dbg !3874
  %86 = load i8*, i8** %tc.addr, align 8, !dbg !3875
  %87 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3876
  %tc109 = getelementptr inbounds %struct._fence, %struct._fence* %87, i32 0, i32 6, !dbg !3876
  store i8* %86, i8** %tc109, align 8, !dbg !3877
  %88 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3878
  %89 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3879
  %last_scheduled_insn110 = getelementptr inbounds %struct._fence, %struct._fence* %89, i32 0, i32 10, !dbg !3879
  store %struct.rtx_def* %88, %struct.rtx_def** %last_scheduled_insn110, align 8, !dbg !3880
  %90 = load i32, i32* %issue_more.addr, align 4, !dbg !3881
  %91 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3882
  %issue_more111 = getelementptr inbounds %struct._fence, %struct._fence* %91, i32 0, i32 11, !dbg !3882
  store i32 %90, i32* %issue_more111, align 8, !dbg !3883
  br label %if.end128, !dbg !3884

if.else112:                                       ; preds = %if.else82
  %92 = load i8*, i8** %state.addr, align 8, !dbg !3885
  call void @state_free(i8* %92), !dbg !3887
  %93 = load i8*, i8** %tc.addr, align 8, !dbg !3888
  call void @delete_target_context(i8* %93), !dbg !3889
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3890
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !3890
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !3890
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 3, !dbg !3890
  %rt_bb116 = bitcast %union.rtunion_def* %arrayidx115 to %struct.basic_block_def**, !dbg !3890
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb116, align 8, !dbg !3890
  %prev_bb117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 5, !dbg !3890
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb117, align 8, !dbg !3890
  %97 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3890
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !3890
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !3890
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 3, !dbg !3890
  %rt_bb121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.basic_block_def**, !dbg !3890
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb121, align 8, !dbg !3890
  %cmp122 = icmp ne %struct.basic_block_def* %96, %98, !dbg !3890
  br i1 %cmp122, label %cond.false125, label %cond.true124, !dbg !3890

cond.true124:                                     ; preds = %if.else112
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 729, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3890
  br label %cond.end126, !dbg !3890

cond.false125:                                    ; preds = %if.else112
  br label %cond.end126, !dbg !3890

cond.end126:                                      ; preds = %cond.false125, %cond.true124
  %cond127 = phi i32 [ 0, %cond.true124 ], [ 0, %cond.false125 ], !dbg !3890
  br label %if.end128

if.end128:                                        ; preds = %cond.end126, %cond.end104
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then77
  %99 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3891
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %99, i32 9), !dbg !3891
  %100 = bitcast %struct.succ_iterator* %si to i8*, !dbg !3891
  %101 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !3891
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %100, i8* align 8 %101, i64 64, i1 false), !dbg !3891
  br label %for.cond, !dbg !3891

for.cond:                                         ; preds = %for.inc, %if.end129
  %102 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn_old, align 8, !dbg !3893
  %call130 = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %102, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !3893
  %tobool131 = icmp ne i8 %call130, 0, !dbg !3891
  br i1 %tobool131, label %for.body, label %for.end, !dbg !3891

for.body:                                         ; preds = %for.cond
  %103 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !3895
  %104 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3898
  %cmp132 = icmp eq %struct.rtx_def* %103, %104, !dbg !3899
  br i1 %cmp132, label %if.then134, label %if.end140, !dbg !3900

if.then134:                                       ; preds = %for.body
  %105 = load %struct.edge_def*, %struct.edge_def** %edge_old, align 8, !dbg !3901
  %tobool135 = icmp ne %struct.edge_def* %105, null, !dbg !3901
  br i1 %tobool135, label %cond.true136, label %cond.false137, !dbg !3901

cond.true136:                                     ; preds = %if.then134
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 739, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3901
  br label %cond.end138, !dbg !3901

cond.false137:                                    ; preds = %if.then134
  br label %cond.end138, !dbg !3901

cond.end138:                                      ; preds = %cond.false137, %cond.true136
  %cond139 = phi i32 [ 0, %cond.true136 ], [ 0, %cond.false137 ], !dbg !3901
  %e1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 1, !dbg !3903
  %106 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !3903
  store %struct.edge_def* %106, %struct.edge_def** %edge_old, align 8, !dbg !3904
  br label %if.end140, !dbg !3905

if.end140:                                        ; preds = %cond.end138, %for.body
  br label %for.inc, !dbg !3906

for.inc:                                          ; preds = %if.end140
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !3893
  br label %for.cond, !dbg !3893, !llvm.loop !3907

for.end:                                          ; preds = %for.cond
  %107 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3909
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp141, %struct.rtx_def** %succ, %struct.rtx_def* %107, i32 9), !dbg !3909
  %108 = bitcast %struct.succ_iterator* %si to i8*, !dbg !3909
  %109 = bitcast %struct.succ_iterator* %tmp141 to i8*, !dbg !3909
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %108, i8* align 8 %109, i64 64, i1 false), !dbg !3909
  br label %for.cond142, !dbg !3909

for.cond142:                                      ; preds = %for.inc156, %for.end
  %110 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !3911
  %call143 = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %110, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !3911
  %tobool144 = icmp ne i8 %call143, 0, !dbg !3909
  br i1 %tobool144, label %for.body145, label %for.end157, !dbg !3909

for.body145:                                      ; preds = %for.cond142
  %111 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !3913
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !3916
  %cmp146 = icmp eq %struct.rtx_def* %111, %112, !dbg !3917
  br i1 %cmp146, label %if.then148, label %if.end155, !dbg !3918

if.then148:                                       ; preds = %for.body145
  %113 = load %struct.edge_def*, %struct.edge_def** %edge_new, align 8, !dbg !3919
  %tobool149 = icmp ne %struct.edge_def* %113, null, !dbg !3919
  br i1 %tobool149, label %cond.true150, label %cond.false151, !dbg !3919

cond.true150:                                     ; preds = %if.then148
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 750, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3919
  br label %cond.end152, !dbg !3919

cond.false151:                                    ; preds = %if.then148
  br label %cond.end152, !dbg !3919

cond.end152:                                      ; preds = %cond.false151, %cond.true150
  %cond153 = phi i32 [ 0, %cond.true150 ], [ 0, %cond.false151 ], !dbg !3919
  %e1154 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 1, !dbg !3921
  %114 = load %struct.edge_def*, %struct.edge_def** %e1154, align 8, !dbg !3921
  store %struct.edge_def* %114, %struct.edge_def** %edge_new, align 8, !dbg !3922
  br label %if.end155, !dbg !3923

if.end155:                                        ; preds = %cond.end152, %for.body145
  br label %for.inc156, !dbg !3924

for.inc156:                                       ; preds = %if.end155
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !3911
  br label %for.cond142, !dbg !3911, !llvm.loop !3925

for.end157:                                       ; preds = %for.cond142
  %115 = load %struct.edge_def*, %struct.edge_def** %edge_old, align 8, !dbg !3927
  %cmp158 = icmp eq %struct.edge_def* %115, null, !dbg !3929
  br i1 %cmp158, label %if.then163, label %lor.lhs.false160, !dbg !3930

lor.lhs.false160:                                 ; preds = %for.end157
  %116 = load %struct.edge_def*, %struct.edge_def** %edge_new, align 8, !dbg !3931
  %cmp161 = icmp eq %struct.edge_def* %116, null, !dbg !3932
  br i1 %cmp161, label %if.then163, label %if.else202, !dbg !3933

if.then163:                                       ; preds = %lor.lhs.false160, %for.end157
  %117 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3934
  %dc164 = getelementptr inbounds %struct._fence, %struct._fence* %117, i32 0, i32 5, !dbg !3934
  %118 = load %struct.deps*, %struct.deps** %dc164, align 8, !dbg !3934
  call void @reset_deps_context(%struct.deps* %118), !dbg !3936
  %119 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3937
  call void @delete_deps_context(%struct.deps* %119), !dbg !3938
  call void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %executing_insns.addr), !dbg !3939
  %120 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !3940
  %121 = bitcast i32* %120 to i8*, !dbg !3940
  call void @free(i8* %121), !dbg !3941
  %122 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3942
  %cycle165 = getelementptr inbounds %struct._fence, %struct._fence* %122, i32 0, i32 2, !dbg !3942
  %123 = load i32, i32* %cycle165, align 8, !dbg !3942
  %124 = load i32, i32* %cycle.addr, align 4, !dbg !3942
  %cmp166 = icmp sgt i32 %123, %124, !dbg !3942
  br i1 %cmp166, label %cond.true168, label %cond.false170, !dbg !3942

cond.true168:                                     ; preds = %if.then163
  %125 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3942
  %cycle169 = getelementptr inbounds %struct._fence, %struct._fence* %125, i32 0, i32 2, !dbg !3942
  %126 = load i32, i32* %cycle169, align 8, !dbg !3942
  br label %cond.end171, !dbg !3942

cond.false170:                                    ; preds = %if.then163
  %127 = load i32, i32* %cycle.addr, align 4, !dbg !3942
  br label %cond.end171, !dbg !3942

cond.end171:                                      ; preds = %cond.false170, %cond.true168
  %cond172 = phi i32 [ %126, %cond.true168 ], [ %127, %cond.false170 ], !dbg !3942
  %128 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3943
  %cycle173 = getelementptr inbounds %struct._fence, %struct._fence* %128, i32 0, i32 2, !dbg !3943
  store i32 %cond172, i32* %cycle173, align 8, !dbg !3944
  %129 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3945
  %executing_insns174 = getelementptr inbounds %struct._fence, %struct._fence* %129, i32 0, i32 7, !dbg !3945
  %130 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns174, align 8, !dbg !3945
  %tobool175 = icmp ne %struct.VEC_rtx_gc* %130, null, !dbg !3945
  br i1 %tobool175, label %if.then176, label %if.end194, !dbg !3947

if.then176:                                       ; preds = %cond.end171
  %131 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3948
  %executing_insns177 = getelementptr inbounds %struct._fence, %struct._fence* %131, i32 0, i32 7, !dbg !3948
  %132 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns177, align 8, !dbg !3948
  %tobool178 = icmp ne %struct.VEC_rtx_gc* %132, null, !dbg !3948
  br i1 %tobool178, label %cond.true179, label %cond.false182, !dbg !3948

cond.true179:                                     ; preds = %if.then176
  %133 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3948
  %executing_insns180 = getelementptr inbounds %struct._fence, %struct._fence* %133, i32 0, i32 7, !dbg !3948
  %134 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns180, align 8, !dbg !3948
  %base181 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %134, i32 0, i32 0, !dbg !3948
  br label %cond.end183, !dbg !3948

cond.false182:                                    ; preds = %if.then176
  br label %cond.end183, !dbg !3948

cond.end183:                                      ; preds = %cond.false182, %cond.true179
  %cond184 = phi %struct.VEC_rtx_base* [ %base181, %cond.true179 ], [ null, %cond.false182 ], !dbg !3948
  %135 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3948
  %executing_insns185 = getelementptr inbounds %struct._fence, %struct._fence* %135, i32 0, i32 7, !dbg !3948
  %136 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns185, align 8, !dbg !3948
  %tobool186 = icmp ne %struct.VEC_rtx_gc* %136, null, !dbg !3948
  br i1 %tobool186, label %cond.true187, label %cond.false190, !dbg !3948

cond.true187:                                     ; preds = %cond.end183
  %137 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3948
  %executing_insns188 = getelementptr inbounds %struct._fence, %struct._fence* %137, i32 0, i32 7, !dbg !3948
  %138 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns188, align 8, !dbg !3948
  %base189 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %138, i32 0, i32 0, !dbg !3948
  br label %cond.end191, !dbg !3948

cond.false190:                                    ; preds = %cond.end183
  br label %cond.end191, !dbg !3948

cond.end191:                                      ; preds = %cond.false190, %cond.true187
  %cond192 = phi %struct.VEC_rtx_base* [ %base189, %cond.true187 ], [ null, %cond.false190 ], !dbg !3948
  %call193 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond192), !dbg !3948
  call void @VEC_rtx_base_block_remove(%struct.VEC_rtx_base* %cond184, i32 0, i32 %call193), !dbg !3948
  br label %if.end194, !dbg !3948

if.end194:                                        ; preds = %cond.end191, %cond.end171
  %139 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3949
  %ready_ticks195 = getelementptr inbounds %struct._fence, %struct._fence* %139, i32 0, i32 8, !dbg !3949
  %140 = load i32*, i32** %ready_ticks195, align 8, !dbg !3949
  %tobool196 = icmp ne i32* %140, null, !dbg !3949
  br i1 %tobool196, label %if.then197, label %if.end201, !dbg !3951

if.then197:                                       ; preds = %if.end194
  %141 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3952
  %ready_ticks198 = getelementptr inbounds %struct._fence, %struct._fence* %141, i32 0, i32 8, !dbg !3952
  %142 = load i32*, i32** %ready_ticks198, align 8, !dbg !3952
  %143 = bitcast i32* %142 to i8*, !dbg !3953
  %144 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3954
  %ready_ticks_size199 = getelementptr inbounds %struct._fence, %struct._fence* %144, i32 0, i32 9, !dbg !3954
  %145 = load i32, i32* %ready_ticks_size199, align 8, !dbg !3954
  %conv200 = sext i32 %145 to i64, !dbg !3954
  call void @llvm.memset.p0i8.i64(i8* align 4 %143, i8 0, i64 %conv200, i1 false), !dbg !3953
  br label %if.end201, !dbg !3953

if.end201:                                        ; preds = %if.then197, %if.end194
  br label %if.end217, !dbg !3955

if.else202:                                       ; preds = %lor.lhs.false160
  %146 = load %struct.edge_def*, %struct.edge_def** %edge_new, align 8, !dbg !3956
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %146, i32 0, i32 8, !dbg !3958
  %147 = load i32, i32* %probability, align 4, !dbg !3958
  %148 = load %struct.edge_def*, %struct.edge_def** %edge_old, align 8, !dbg !3959
  %probability203 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %148, i32 0, i32 8, !dbg !3960
  %149 = load i32, i32* %probability203, align 4, !dbg !3960
  %cmp204 = icmp sgt i32 %147, %149, !dbg !3961
  br i1 %cmp204, label %if.then206, label %if.else215, !dbg !3962

if.then206:                                       ; preds = %if.else202
  %150 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3963
  %dc207 = getelementptr inbounds %struct._fence, %struct._fence* %150, i32 0, i32 5, !dbg !3963
  %151 = load %struct.deps*, %struct.deps** %dc207, align 8, !dbg !3963
  call void @delete_deps_context(%struct.deps* %151), !dbg !3965
  %152 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3966
  %153 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3967
  %dc208 = getelementptr inbounds %struct._fence, %struct._fence* %153, i32 0, i32 5, !dbg !3967
  store %struct.deps* %152, %struct.deps** %dc208, align 8, !dbg !3968
  %154 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3969
  %executing_insns209 = getelementptr inbounds %struct._fence, %struct._fence* %154, i32 0, i32 7, !dbg !3969
  call void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %executing_insns209), !dbg !3969
  %155 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns.addr, align 8, !dbg !3970
  %156 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3971
  %executing_insns210 = getelementptr inbounds %struct._fence, %struct._fence* %156, i32 0, i32 7, !dbg !3971
  store %struct.VEC_rtx_gc* %155, %struct.VEC_rtx_gc** %executing_insns210, align 8, !dbg !3972
  %157 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3973
  %ready_ticks211 = getelementptr inbounds %struct._fence, %struct._fence* %157, i32 0, i32 8, !dbg !3973
  %158 = load i32*, i32** %ready_ticks211, align 8, !dbg !3973
  %159 = bitcast i32* %158 to i8*, !dbg !3973
  call void @free(i8* %159), !dbg !3974
  %160 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !3975
  %161 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3976
  %ready_ticks212 = getelementptr inbounds %struct._fence, %struct._fence* %161, i32 0, i32 8, !dbg !3976
  store i32* %160, i32** %ready_ticks212, align 8, !dbg !3977
  %162 = load i32, i32* %ready_ticks_size.addr, align 4, !dbg !3978
  %163 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3979
  %ready_ticks_size213 = getelementptr inbounds %struct._fence, %struct._fence* %163, i32 0, i32 9, !dbg !3979
  store i32 %162, i32* %ready_ticks_size213, align 8, !dbg !3980
  %164 = load i32, i32* %cycle.addr, align 4, !dbg !3981
  %165 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3982
  %cycle214 = getelementptr inbounds %struct._fence, %struct._fence* %165, i32 0, i32 2, !dbg !3982
  store i32 %164, i32* %cycle214, align 8, !dbg !3983
  br label %if.end216, !dbg !3984

if.else215:                                       ; preds = %if.else202
  %166 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !3985
  call void @delete_deps_context(%struct.deps* %166), !dbg !3987
  call void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %executing_insns.addr), !dbg !3988
  %167 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !3989
  %168 = bitcast i32* %167 to i8*, !dbg !3989
  call void @free(i8* %168), !dbg !3990
  br label %if.end216

if.end216:                                        ; preds = %if.else215, %if.then206
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.end201
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %if.end49
  %169 = load i8, i8* %after_stall_p.addr, align 1, !dbg !3991
  %tobool219 = icmp ne i8 %169, 0, !dbg !3991
  br i1 %tobool219, label %if.then220, label %if.end222, !dbg !3993

if.then220:                                       ; preds = %if.end218
  %170 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3994
  %after_stall_p221 = getelementptr inbounds %struct._fence, %struct._fence* %170, i32 0, i32 13, !dbg !3994
  %bf.load = load i8, i8* %after_stall_p221, align 8, !dbg !3995
  %bf.clear = and i8 %bf.load, -9, !dbg !3995
  %bf.set = or i8 %bf.clear, 8, !dbg !3995
  store i8 %bf.set, i8* %after_stall_p221, align 8, !dbg !3995
  br label %if.end222, !dbg !3994

if.end222:                                        ; preds = %if.then220, %if.end218
  %171 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3996
  %cycle_issued_insns = getelementptr inbounds %struct._fence, %struct._fence* %171, i32 0, i32 3, !dbg !3996
  store i32 0, i32* %cycle_issued_insns, align 4, !dbg !3997
  %172 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !3998
  %starts_cycle_p = getelementptr inbounds %struct._fence, %struct._fence* %172, i32 0, i32 13, !dbg !3998
  %bf.load223 = load i8, i8* %starts_cycle_p, align 8, !dbg !3999
  %bf.clear224 = and i8 %bf.load223, -5, !dbg !3999
  %bf.set225 = or i8 %bf.clear224, 4, !dbg !3999
  store i8 %bf.set225, i8* %starts_cycle_p, align 8, !dbg !3999
  %173 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !4000
  %sched_next226 = getelementptr inbounds %struct._fence, %struct._fence* %173, i32 0, i32 12, !dbg !4000
  store %struct.rtx_def* null, %struct.rtx_def** %sched_next226, align 8, !dbg !4001
  ret void, !dbg !4002
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_fence_for_scheduling(%struct._fence* %f) #0 !dbg !4003 {
entry:
  %f.addr = alloca %struct._fence*, align 8
  store %struct._fence* %f, %struct._fence** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %f.addr, metadata !4006, metadata !DIExpression()), !dbg !4007
  %0 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !4008
  %bnds = getelementptr inbounds %struct._fence, %struct._fence* %0, i32 0, i32 4, !dbg !4008
  store %struct._list_node* null, %struct._list_node** %bnds, align 8, !dbg !4009
  %1 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !4010
  %processed_p = getelementptr inbounds %struct._fence, %struct._fence* %1, i32 0, i32 13, !dbg !4010
  %bf.load = load i8, i8* %processed_p, align 8, !dbg !4011
  %bf.clear = and i8 %bf.load, -2, !dbg !4011
  store i8 %bf.clear, i8* %processed_p, align 8, !dbg !4011
  %2 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !4012
  %scheduled_p = getelementptr inbounds %struct._fence, %struct._fence* %2, i32 0, i32 13, !dbg !4012
  %bf.load1 = load i8, i8* %scheduled_p, align 8, !dbg !4013
  %bf.clear2 = and i8 %bf.load1, -3, !dbg !4013
  store i8 %bf.clear2, i8* %scheduled_p, align 8, !dbg !4013
  ret void, !dbg !4014
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_clean_fence_to_fences(%struct.flist_tail_def* %new_fences, %struct.rtx_def* %succ, %struct._fence* %fence) #0 !dbg !4015 {
entry:
  %new_fences.addr = alloca %struct.flist_tail_def*, align 8
  %succ.addr = alloca %struct.rtx_def*, align 8
  %fence.addr = alloca %struct._fence*, align 8
  %ready_ticks_size = alloca i32, align 4
  store %struct.flist_tail_def* %new_fences, %struct.flist_tail_def** %new_fences.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.flist_tail_def** %new_fences.addr, metadata !4018, metadata !DIExpression()), !dbg !4019
  store %struct.rtx_def* %succ, %struct.rtx_def** %succ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ.addr, metadata !4020, metadata !DIExpression()), !dbg !4021
  store %struct._fence* %fence, %struct._fence** %fence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %fence.addr, metadata !4022, metadata !DIExpression()), !dbg !4023
  call void @llvm.dbg.declare(metadata i32* %ready_ticks_size, metadata !4024, metadata !DIExpression()), !dbg !4025
  %call = call i32 @get_max_uid(), !dbg !4026
  %add = add nsw i32 %call, 1, !dbg !4027
  store i32 %add, i32* %ready_ticks_size, align 4, !dbg !4025
  %0 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4028
  %1 = load %struct.rtx_def*, %struct.rtx_def** %succ.addr, align 8, !dbg !4029
  %call1 = call i8* @state_create(), !dbg !4030
  %call2 = call %struct.deps* @create_deps_context(), !dbg !4031
  %call3 = call i8* @create_target_context(i8 zeroext 1), !dbg !4032
  %2 = load i32, i32* %ready_ticks_size, align 4, !dbg !4033
  %conv = sext i32 %2 to i64, !dbg !4033
  %call4 = call i8* @xcalloc(i64 %conv, i64 4), !dbg !4033
  %3 = bitcast i8* %call4 to i32*, !dbg !4033
  %4 = load i32, i32* %ready_ticks_size, align 4, !dbg !4034
  %5 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4035
  %cycle = getelementptr inbounds %struct._fence, %struct._fence* %5, i32 0, i32 2, !dbg !4035
  %6 = load i32, i32* %cycle, align 8, !dbg !4035
  %add5 = add nsw i32 %6, 1, !dbg !4036
  %7 = load i32, i32* @issue_rate, align 4, !dbg !4037
  %8 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4038
  %after_stall_p = getelementptr inbounds %struct._fence, %struct._fence* %8, i32 0, i32 13, !dbg !4038
  %bf.load = load i8, i8* %after_stall_p, align 8, !dbg !4038
  %bf.lshr = lshr i8 %bf.load, 3, !dbg !4038
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4038
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4038
  %conv6 = trunc i32 %bf.cast to i8, !dbg !4038
  call void @add_to_fences(%struct.flist_tail_def* %0, %struct.rtx_def* %1, i8* %call1, %struct.deps* %call2, i8* %call3, %struct.rtx_def* null, %struct.VEC_rtx_gc* null, i32* %3, i32 %4, %struct.rtx_def* null, i32 %add5, i32 0, i32 %7, i8 zeroext 1, i8 zeroext %conv6), !dbg !4039
  ret void, !dbg !4040
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_to_fences(%struct.flist_tail_def* %new_fences, %struct.rtx_def* %insn, i8* %state, %struct.deps* %dc, i8* %tc, %struct.rtx_def* %last_scheduled_insn, %struct.VEC_rtx_gc* %executing_insns, i32* %ready_ticks, i32 %ready_ticks_size, %struct.rtx_def* %sched_next, i32 %cycle, i32 %cycle_issued_insns, i32 %issue_rate, i8 zeroext %starts_cycle_p, i8 zeroext %after_stall_p) #0 !dbg !4041 {
entry:
  %new_fences.addr = alloca %struct.flist_tail_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %state.addr = alloca i8*, align 8
  %dc.addr = alloca %struct.deps*, align 8
  %tc.addr = alloca i8*, align 8
  %last_scheduled_insn.addr = alloca %struct.rtx_def*, align 8
  %executing_insns.addr = alloca %struct.VEC_rtx_gc*, align 8
  %ready_ticks.addr = alloca i32*, align 8
  %ready_ticks_size.addr = alloca i32, align 4
  %sched_next.addr = alloca %struct.rtx_def*, align 8
  %cycle.addr = alloca i32, align 4
  %cycle_issued_insns.addr = alloca i32, align 4
  %issue_rate.addr = alloca i32, align 4
  %starts_cycle_p.addr = alloca i8, align 1
  %after_stall_p.addr = alloca i8, align 1
  %f = alloca %struct._fence*, align 8
  store %struct.flist_tail_def* %new_fences, %struct.flist_tail_def** %new_fences.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.flist_tail_def** %new_fences.addr, metadata !4044, metadata !DIExpression()), !dbg !4045
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4046, metadata !DIExpression()), !dbg !4047
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !4048, metadata !DIExpression()), !dbg !4049
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !4050, metadata !DIExpression()), !dbg !4051
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !4052, metadata !DIExpression()), !dbg !4053
  store %struct.rtx_def* %last_scheduled_insn, %struct.rtx_def** %last_scheduled_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_scheduled_insn.addr, metadata !4054, metadata !DIExpression()), !dbg !4055
  store %struct.VEC_rtx_gc* %executing_insns, %struct.VEC_rtx_gc** %executing_insns.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc** %executing_insns.addr, metadata !4056, metadata !DIExpression()), !dbg !4057
  store i32* %ready_ticks, i32** %ready_ticks.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ready_ticks.addr, metadata !4058, metadata !DIExpression()), !dbg !4059
  store i32 %ready_ticks_size, i32* %ready_ticks_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ready_ticks_size.addr, metadata !4060, metadata !DIExpression()), !dbg !4061
  store %struct.rtx_def* %sched_next, %struct.rtx_def** %sched_next.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %sched_next.addr, metadata !4062, metadata !DIExpression()), !dbg !4063
  store i32 %cycle, i32* %cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle.addr, metadata !4064, metadata !DIExpression()), !dbg !4065
  store i32 %cycle_issued_insns, i32* %cycle_issued_insns.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %cycle_issued_insns.addr, metadata !4066, metadata !DIExpression()), !dbg !4067
  store i32 %issue_rate, i32* %issue_rate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %issue_rate.addr, metadata !4068, metadata !DIExpression()), !dbg !4069
  store i8 %starts_cycle_p, i8* %starts_cycle_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %starts_cycle_p.addr, metadata !4070, metadata !DIExpression()), !dbg !4071
  store i8 %after_stall_p, i8* %after_stall_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %after_stall_p.addr, metadata !4072, metadata !DIExpression()), !dbg !4073
  call void @llvm.dbg.declare(metadata %struct._fence** %f, metadata !4074, metadata !DIExpression()), !dbg !4075
  %0 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4076
  %head = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %0, i32 0, i32 0, !dbg !4076
  %1 = load %struct._list_node*, %struct._list_node** %head, align 8, !dbg !4076
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4077
  %call = call %struct._fence* @flist_lookup(%struct._list_node* %1, %struct.rtx_def* %2), !dbg !4078
  store %struct._fence* %call, %struct._fence** %f, align 8, !dbg !4075
  %3 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !4079
  %tobool = icmp ne %struct._fence* %3, null, !dbg !4079
  br i1 %tobool, label %if.else, label %if.then, !dbg !4081

if.then:                                          ; preds = %entry
  %4 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4082
  %tailp = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %4, i32 0, i32 1, !dbg !4082
  %5 = load %struct._list_node**, %struct._list_node*** %tailp, align 8, !dbg !4082
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4084
  %7 = load i8*, i8** %state.addr, align 8, !dbg !4085
  %8 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !4086
  %9 = load i8*, i8** %tc.addr, align 8, !dbg !4087
  %10 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !4088
  %11 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns.addr, align 8, !dbg !4089
  %12 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !4090
  %13 = load i32, i32* %ready_ticks_size.addr, align 4, !dbg !4091
  %14 = load %struct.rtx_def*, %struct.rtx_def** %sched_next.addr, align 8, !dbg !4092
  %15 = load i32, i32* %cycle.addr, align 4, !dbg !4093
  %16 = load i32, i32* %cycle_issued_insns.addr, align 4, !dbg !4094
  %17 = load i32, i32* %issue_rate.addr, align 4, !dbg !4095
  %18 = load i8, i8* %starts_cycle_p.addr, align 1, !dbg !4096
  %19 = load i8, i8* %after_stall_p.addr, align 1, !dbg !4097
  call void @flist_add(%struct._list_node** %5, %struct.rtx_def* %6, i8* %7, %struct.deps* %8, i8* %9, %struct.rtx_def* %10, %struct.VEC_rtx_gc* %11, i32* %12, i32 %13, %struct.rtx_def* %14, i32 %15, i32 %16, i32 %17, i8 zeroext %18, i8 zeroext %19), !dbg !4098
  %20 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4099
  %tailp1 = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %20, i32 0, i32 1, !dbg !4099
  %21 = load %struct._list_node**, %struct._list_node*** %tailp1, align 8, !dbg !4099
  %22 = load %struct._list_node*, %struct._list_node** %21, align 8, !dbg !4099
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %22, i32 0, i32 0, !dbg !4099
  %23 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4100
  %tailp2 = getelementptr inbounds %struct.flist_tail_def, %struct.flist_tail_def* %23, i32 0, i32 1, !dbg !4100
  store %struct._list_node** %next, %struct._list_node*** %tailp2, align 8, !dbg !4101
  br label %if.end, !dbg !4102

if.else:                                          ; preds = %entry
  %24 = load %struct._fence*, %struct._fence** %f, align 8, !dbg !4103
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4105
  %26 = load i8*, i8** %state.addr, align 8, !dbg !4106
  %27 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !4107
  %28 = load i8*, i8** %tc.addr, align 8, !dbg !4108
  %29 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn.addr, align 8, !dbg !4109
  %30 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns.addr, align 8, !dbg !4110
  %31 = load i32*, i32** %ready_ticks.addr, align 8, !dbg !4111
  %32 = load i32, i32* %ready_ticks_size.addr, align 4, !dbg !4112
  %33 = load %struct.rtx_def*, %struct.rtx_def** %sched_next.addr, align 8, !dbg !4113
  %34 = load i32, i32* %cycle.addr, align 4, !dbg !4114
  %35 = load i32, i32* %issue_rate.addr, align 4, !dbg !4115
  %36 = load i8, i8* %after_stall_p.addr, align 1, !dbg !4116
  call void @merge_fences(%struct._fence* %24, %struct.rtx_def* %25, i8* %26, %struct.deps* %27, i8* %28, %struct.rtx_def* %29, %struct.VEC_rtx_gc* %30, i32* %31, i32 %32, %struct.rtx_def* %33, i32 %34, i32 %35, i8 zeroext %36), !dbg !4117
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !4118
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_dirty_fence_to_fences(%struct.flist_tail_def* %new_fences, %struct.rtx_def* %succ, %struct._fence* %fence) #0 !dbg !4119 {
entry:
  %new_fences.addr = alloca %struct.flist_tail_def*, align 8
  %succ.addr = alloca %struct.rtx_def*, align 8
  %fence.addr = alloca %struct._fence*, align 8
  %new_ready_ticks = alloca i32*, align 8
  store %struct.flist_tail_def* %new_fences, %struct.flist_tail_def** %new_fences.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.flist_tail_def** %new_fences.addr, metadata !4120, metadata !DIExpression()), !dbg !4121
  store %struct.rtx_def* %succ, %struct.rtx_def** %succ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ.addr, metadata !4122, metadata !DIExpression()), !dbg !4123
  store %struct._fence* %fence, %struct._fence** %fence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %fence.addr, metadata !4124, metadata !DIExpression()), !dbg !4125
  call void @llvm.dbg.declare(metadata i32** %new_ready_ticks, metadata !4126, metadata !DIExpression()), !dbg !4127
  %0 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4128
  %ready_ticks_size = getelementptr inbounds %struct._fence, %struct._fence* %0, i32 0, i32 9, !dbg !4128
  %1 = load i32, i32* %ready_ticks_size, align 8, !dbg !4128
  %conv = sext i32 %1 to i64, !dbg !4128
  %mul = mul i64 4, %conv, !dbg !4128
  %call = call i8* @xmalloc(i64 %mul), !dbg !4128
  %2 = bitcast i8* %call to i32*, !dbg !4128
  store i32* %2, i32** %new_ready_ticks, align 8, !dbg !4127
  %3 = load i32*, i32** %new_ready_ticks, align 8, !dbg !4129
  %4 = bitcast i32* %3 to i8*, !dbg !4130
  %5 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4131
  %ready_ticks = getelementptr inbounds %struct._fence, %struct._fence* %5, i32 0, i32 8, !dbg !4131
  %6 = load i32*, i32** %ready_ticks, align 8, !dbg !4131
  %7 = bitcast i32* %6 to i8*, !dbg !4130
  %8 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4132
  %ready_ticks_size1 = getelementptr inbounds %struct._fence, %struct._fence* %8, i32 0, i32 9, !dbg !4132
  %9 = load i32, i32* %ready_ticks_size1, align 8, !dbg !4132
  %conv2 = sext i32 %9 to i64, !dbg !4132
  %mul3 = mul i64 %conv2, 4, !dbg !4133
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %7, i64 %mul3, i1 false), !dbg !4130
  %10 = load %struct.flist_tail_def*, %struct.flist_tail_def** %new_fences.addr, align 8, !dbg !4134
  %11 = load %struct.rtx_def*, %struct.rtx_def** %succ.addr, align 8, !dbg !4135
  %12 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4136
  %state = getelementptr inbounds %struct._fence, %struct._fence* %12, i32 0, i32 1, !dbg !4136
  %13 = load i8*, i8** %state, align 8, !dbg !4136
  %call4 = call i8* @state_create_copy(i8* %13), !dbg !4137
  %14 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4138
  %dc = getelementptr inbounds %struct._fence, %struct._fence* %14, i32 0, i32 5, !dbg !4138
  %15 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !4138
  %call5 = call %struct.deps* @create_copy_of_deps_context(%struct.deps* %15), !dbg !4139
  %16 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4140
  %tc = getelementptr inbounds %struct._fence, %struct._fence* %16, i32 0, i32 6, !dbg !4140
  %17 = load i8*, i8** %tc, align 8, !dbg !4140
  %call6 = call i8* @create_copy_of_target_context(i8* %17), !dbg !4141
  %18 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4142
  %last_scheduled_insn = getelementptr inbounds %struct._fence, %struct._fence* %18, i32 0, i32 10, !dbg !4142
  %19 = load %struct.rtx_def*, %struct.rtx_def** %last_scheduled_insn, align 8, !dbg !4142
  %20 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4143
  %executing_insns = getelementptr inbounds %struct._fence, %struct._fence* %20, i32 0, i32 7, !dbg !4143
  %21 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns, align 8, !dbg !4143
  %tobool = icmp ne %struct.VEC_rtx_gc* %21, null, !dbg !4143
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4143

cond.true:                                        ; preds = %entry
  %22 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4143
  %executing_insns7 = getelementptr inbounds %struct._fence, %struct._fence* %22, i32 0, i32 7, !dbg !4143
  %23 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %executing_insns7, align 8, !dbg !4143
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %23, i32 0, i32 0, !dbg !4143
  br label %cond.end, !dbg !4143

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4143

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4143
  %call8 = call %struct.VEC_rtx_gc* @VEC_rtx_gc_copy(%struct.VEC_rtx_base* %cond), !dbg !4143
  %24 = load i32*, i32** %new_ready_ticks, align 8, !dbg !4144
  %25 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4145
  %ready_ticks_size9 = getelementptr inbounds %struct._fence, %struct._fence* %25, i32 0, i32 9, !dbg !4145
  %26 = load i32, i32* %ready_ticks_size9, align 8, !dbg !4145
  %27 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4146
  %sched_next = getelementptr inbounds %struct._fence, %struct._fence* %27, i32 0, i32 12, !dbg !4146
  %28 = load %struct.rtx_def*, %struct.rtx_def** %sched_next, align 8, !dbg !4146
  %29 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4147
  %cycle = getelementptr inbounds %struct._fence, %struct._fence* %29, i32 0, i32 2, !dbg !4147
  %30 = load i32, i32* %cycle, align 8, !dbg !4147
  %31 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4148
  %cycle_issued_insns = getelementptr inbounds %struct._fence, %struct._fence* %31, i32 0, i32 3, !dbg !4148
  %32 = load i32, i32* %cycle_issued_insns, align 4, !dbg !4148
  %33 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4149
  %issue_more = getelementptr inbounds %struct._fence, %struct._fence* %33, i32 0, i32 11, !dbg !4149
  %34 = load i32, i32* %issue_more, align 8, !dbg !4149
  %35 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4150
  %starts_cycle_p = getelementptr inbounds %struct._fence, %struct._fence* %35, i32 0, i32 13, !dbg !4150
  %bf.load = load i8, i8* %starts_cycle_p, align 8, !dbg !4150
  %bf.lshr = lshr i8 %bf.load, 2, !dbg !4150
  %bf.clear = and i8 %bf.lshr, 1, !dbg !4150
  %bf.cast = zext i8 %bf.clear to i32, !dbg !4150
  %conv10 = trunc i32 %bf.cast to i8, !dbg !4150
  %36 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !4151
  %after_stall_p = getelementptr inbounds %struct._fence, %struct._fence* %36, i32 0, i32 13, !dbg !4151
  %bf.load11 = load i8, i8* %after_stall_p, align 8, !dbg !4151
  %bf.lshr12 = lshr i8 %bf.load11, 3, !dbg !4151
  %bf.clear13 = and i8 %bf.lshr12, 1, !dbg !4151
  %bf.cast14 = zext i8 %bf.clear13 to i32, !dbg !4151
  %conv15 = trunc i32 %bf.cast14 to i8, !dbg !4151
  call void @add_to_fences(%struct.flist_tail_def* %10, %struct.rtx_def* %11, i8* %call4, %struct.deps* %call5, i8* %call6, %struct.rtx_def* %19, %struct.VEC_rtx_gc* %call8, i32* %24, i32 %26, %struct.rtx_def* %28, i32 %30, i32 %32, i32 %34, i8 zeroext %conv10, i8 zeroext %conv15), !dbg !4152
  ret void, !dbg !4153
}

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i8* @state_create_copy(i8* %from) #0 !dbg !4154 {
entry:
  %from.addr = alloca i8*, align 8
  %to = alloca i8*, align 8
  store i8* %from, i8** %from.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %from.addr, metadata !4157, metadata !DIExpression()), !dbg !4158
  call void @llvm.dbg.declare(metadata i8** %to, metadata !4159, metadata !DIExpression()), !dbg !4160
  %call = call i8* @state_alloc(), !dbg !4161
  store i8* %call, i8** %to, align 8, !dbg !4160
  %0 = load i8*, i8** %to, align 8, !dbg !4162
  %1 = load i8*, i8** %from.addr, align 8, !dbg !4163
  call void @state_copy(i8* %0, i8* %1), !dbg !4164
  %2 = load i8*, i8** %to, align 8, !dbg !4165
  ret i8* %2, !dbg !4166
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.deps* @create_copy_of_deps_context(%struct.deps* %from) #0 !dbg !4167 {
entry:
  %from.addr = alloca %struct.deps*, align 8
  %to = alloca %struct.deps*, align 8
  store %struct.deps* %from, %struct.deps** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %from.addr, metadata !4170, metadata !DIExpression()), !dbg !4171
  call void @llvm.dbg.declare(metadata %struct.deps** %to, metadata !4172, metadata !DIExpression()), !dbg !4173
  %call = call %struct.deps* @alloc_deps_context(), !dbg !4174
  store %struct.deps* %call, %struct.deps** %to, align 8, !dbg !4173
  %0 = load %struct.deps*, %struct.deps** %to, align 8, !dbg !4175
  %1 = load %struct.deps*, %struct.deps** %from.addr, align 8, !dbg !4176
  call void @copy_deps_context(%struct.deps* %0, %struct.deps* %1), !dbg !4177
  %2 = load %struct.deps*, %struct.deps** %to, align 8, !dbg !4178
  ret %struct.deps* %2, !dbg !4179
}

; Function Attrs: noinline nounwind uwtable
define internal i8* @create_copy_of_target_context(i8* %tc) #0 !dbg !4180 {
entry:
  %tc.addr = alloca i8*, align 8
  %copy = alloca i8*, align 8
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !4183, metadata !DIExpression()), !dbg !4184
  call void @llvm.dbg.declare(metadata i8** %copy, metadata !4185, metadata !DIExpression()), !dbg !4186
  %call = call i8* @alloc_target_context(), !dbg !4187
  store i8* %call, i8** %copy, align 8, !dbg !4186
  %0 = load i8*, i8** %copy, align 8, !dbg !4188
  %1 = load i8*, i8** %tc.addr, align 8, !dbg !4189
  call void @copy_target_context(i8* %0, i8* %1), !dbg !4190
  %2 = load i8*, i8** %copy, align 8, !dbg !4191
  ret i8* %2, !dbg !4192
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_rtx_gc* @VEC_rtx_gc_copy(%struct.VEC_rtx_base* %vec_) #0 !dbg !4193 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_rtx_gc*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !4197, metadata !DIExpression()), !dbg !4198
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !4199, metadata !DIExpression()), !dbg !4198
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !4198
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !4198
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4198

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !4198
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !4198
  %2 = load i32, i32* %num, align 8, !dbg !4198
  br label %cond.end, !dbg !4198

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4198

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4198
  %conv = zext i32 %cond to i64, !dbg !4198
  store i64 %conv, i64* %len_, align 8, !dbg !4198
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc** %new_vec_, metadata !4200, metadata !DIExpression()), !dbg !4198
  store %struct.VEC_rtx_gc* null, %struct.VEC_rtx_gc** %new_vec_, align 8, !dbg !4198
  %3 = load i64, i64* %len_, align 8, !dbg !4201
  %tobool1 = icmp ne i64 %3, 0, !dbg !4201
  br i1 %tobool1, label %if.then, label %if.end, !dbg !4198

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !4203
  %conv2 = trunc i64 %4 to i32, !dbg !4203
  %call = call i8* @vec_gc_p_reserve_exact(i8* null, i32 %conv2), !dbg !4203
  %5 = bitcast i8* %call to %struct.VEC_rtx_gc*, !dbg !4203
  store %struct.VEC_rtx_gc* %5, %struct.VEC_rtx_gc** %new_vec_, align 8, !dbg !4203
  %6 = load i64, i64* %len_, align 8, !dbg !4203
  %conv3 = trunc i64 %6 to i32, !dbg !4203
  %7 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %new_vec_, align 8, !dbg !4203
  %base = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %7, i32 0, i32 0, !dbg !4203
  %num4 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %base, i32 0, i32 0, !dbg !4203
  store i32 %conv3, i32* %num4, align 8, !dbg !4203
  %8 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %new_vec_, align 8, !dbg !4203
  %base5 = getelementptr inbounds %struct.VEC_rtx_gc, %struct.VEC_rtx_gc* %8, i32 0, i32 0, !dbg !4203
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %base5, i32 0, i32 2, !dbg !4203
  %arraydecay = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 0, !dbg !4203
  %9 = bitcast %struct.rtx_def** %arraydecay to i8*, !dbg !4203
  %10 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !4203
  %vec6 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %10, i32 0, i32 2, !dbg !4203
  %arraydecay7 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec6, i64 0, i64 0, !dbg !4203
  %11 = bitcast %struct.rtx_def** %arraydecay7 to i8*, !dbg !4203
  %12 = load i64, i64* %len_, align 8, !dbg !4203
  %mul = mul i64 8, %12, !dbg !4203
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !4203
  br label %if.end, !dbg !4203

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %new_vec_, align 8, !dbg !4198
  ret %struct.VEC_rtx_gc* %13, !dbg !4198
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.bitmap_head_def* @get_regset_from_pool() #0 !dbg !4205 {
entry:
  %rs = alloca %struct.bitmap_head_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %rs, metadata !4208, metadata !DIExpression()), !dbg !4209
  %0 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4210
  %cmp = icmp ne i32 %0, 0, !dbg !4212
  br i1 %cmp, label %if.then, label %if.else, !dbg !4213

if.then:                                          ; preds = %entry
  %1 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4214
  %2 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4215
  %dec = add nsw i32 %2, -1, !dbg !4215
  store i32 %dec, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4215
  %idxprom = sext i32 %dec to i64, !dbg !4216
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %1, i64 %idxprom, !dbg !4216
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4216
  store %struct.bitmap_head_def* %3, %struct.bitmap_head_def** %rs, align 8, !dbg !4217
  br label %if.end7, !dbg !4218

if.else:                                          ; preds = %entry
  %call = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @reg_obstack), !dbg !4219
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %rs, align 8, !dbg !4221
  %4 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 4), align 8, !dbg !4222
  %5 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 5), align 4, !dbg !4224
  %cmp1 = icmp eq i32 %4, %5, !dbg !4225
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !4226

if.then2:                                         ; preds = %if.else
  %6 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 3), align 8, !dbg !4227
  %7 = bitcast %struct.bitmap_head_def** %6 to i8*, !dbg !4227
  %8 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 5), align 4, !dbg !4227
  %mul = mul nsw i32 2, %8, !dbg !4227
  %add = add nsw i32 %mul, 1, !dbg !4227
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 5), align 4, !dbg !4227
  %conv = sext i32 %add to i64, !dbg !4227
  %mul3 = mul i64 8, %conv, !dbg !4227
  %call4 = call i8* @xrealloc(i8* %7, i64 %mul3), !dbg !4227
  %9 = bitcast i8* %call4 to %struct.bitmap_head_def**, !dbg !4227
  store %struct.bitmap_head_def** %9, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 3), align 8, !dbg !4228
  br label %if.end, !dbg !4229

if.end:                                           ; preds = %if.then2, %if.else
  %10 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rs, align 8, !dbg !4230
  %11 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 3), align 8, !dbg !4231
  %12 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 4), align 8, !dbg !4232
  %inc = add nsw i32 %12, 1, !dbg !4232
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 4), align 8, !dbg !4232
  %idxprom5 = sext i32 %12 to i64, !dbg !4233
  %arrayidx6 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %11, i64 %idxprom5, !dbg !4233
  store %struct.bitmap_head_def* %10, %struct.bitmap_head_def** %arrayidx6, align 8, !dbg !4234
  br label %if.end7

if.end7:                                          ; preds = %if.end, %if.then
  %13 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4235
  %inc8 = add nsw i32 %13, 1, !dbg !4235
  store i32 %inc8, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4235
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rs, align 8, !dbg !4236
  ret %struct.bitmap_head_def* %14, !dbg !4237
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local i8* @xrealloc(i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.bitmap_head_def* @get_clear_regset_from_pool() #0 !dbg !4238 {
entry:
  %rs = alloca %struct.bitmap_head_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %rs, metadata !4239, metadata !DIExpression()), !dbg !4240
  %call = call %struct.bitmap_head_def* @get_regset_from_pool(), !dbg !4241
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %rs, align 8, !dbg !4240
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rs, align 8, !dbg !4242
  call void @bitmap_clear(%struct.bitmap_head_def* %0), !dbg !4242
  %1 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rs, align 8, !dbg !4243
  ret %struct.bitmap_head_def* %1, !dbg !4244
}

declare dso_local void @bitmap_clear(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @return_regset_to_pool(%struct.bitmap_head_def* %rs) #0 !dbg !4245 {
entry:
  %rs.addr = alloca %struct.bitmap_head_def*, align 8
  store %struct.bitmap_head_def* %rs, %struct.bitmap_head_def** %rs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %rs.addr, metadata !4248, metadata !DIExpression()), !dbg !4249
  %0 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4250
  %dec = add nsw i32 %0, -1, !dbg !4250
  store i32 %dec, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4250
  %1 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4251
  %2 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 2), align 4, !dbg !4253
  %cmp = icmp eq i32 %1, %2, !dbg !4254
  br i1 %cmp, label %if.then, label %if.end, !dbg !4255

if.then:                                          ; preds = %entry
  %3 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4256
  %4 = bitcast %struct.bitmap_head_def** %3 to i8*, !dbg !4256
  %5 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 2), align 4, !dbg !4256
  %mul = mul nsw i32 2, %5, !dbg !4256
  %add = add nsw i32 %mul, 1, !dbg !4256
  store i32 %add, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 2), align 4, !dbg !4256
  %conv = sext i32 %add to i64, !dbg !4256
  %mul1 = mul i64 8, %conv, !dbg !4256
  %call = call i8* @xrealloc(i8* %4, i64 %mul1), !dbg !4256
  %6 = bitcast i8* %call to %struct.bitmap_head_def**, !dbg !4256
  store %struct.bitmap_head_def** %6, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4257
  br label %if.end, !dbg !4258

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %rs.addr, align 8, !dbg !4259
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4260
  %9 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4261
  %inc = add nsw i32 %9, 1, !dbg !4261
  store i32 %inc, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4261
  %idxprom = sext i32 %9 to i64, !dbg !4262
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %8, i64 %idxprom, !dbg !4262
  store %struct.bitmap_head_def* %7, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4263
  ret void, !dbg !4264
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_regset_pool() #0 !dbg !4265 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4266
  %cmp = icmp eq i32 %0, 0, !dbg !4266
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4266

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1003, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4266
  br label %cond.end, !dbg !4266

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4266

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4266
  br label %while.cond, !dbg !4267

while.cond:                                       ; preds = %while.body, %cond.end
  %1 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4268
  %tobool = icmp ne i32 %1, 0, !dbg !4267
  br i1 %tobool, label %while.body, label %while.end, !dbg !4267

while.body:                                       ; preds = %while.cond
  %2 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4269
  %dec = add nsw i32 %2, -1, !dbg !4269
  store i32 %dec, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4269
  %3 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4271
  %4 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4271
  %idxprom = sext i32 %4 to i64, !dbg !4271
  %arrayidx = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %3, i64 %idxprom, !dbg !4271
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %arrayidx, align 8, !dbg !4271
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %5), !dbg !4271
  %6 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4271
  %7 = load i32, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 1), align 8, !dbg !4271
  %idxprom1 = sext i32 %7 to i64, !dbg !4271
  %arrayidx2 = getelementptr inbounds %struct.bitmap_head_def*, %struct.bitmap_head_def** %6, i64 %idxprom1, !dbg !4271
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %arrayidx2, align 8, !dbg !4271
  br label %while.cond, !dbg !4267, !llvm.loop !4272

while.end:                                        ; preds = %while.cond
  %8 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4274
  %9 = bitcast %struct.bitmap_head_def** %8 to i8*, !dbg !4275
  call void @free(i8* %9), !dbg !4276
  store %struct.bitmap_head_def** null, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 0), align 8, !dbg !4277
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 2), align 4, !dbg !4278
  %10 = load %struct.bitmap_head_def**, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 3), align 8, !dbg !4279
  %11 = bitcast %struct.bitmap_head_def** %10 to i8*, !dbg !4280
  call void @free(i8* %11), !dbg !4281
  store %struct.bitmap_head_def** null, %struct.bitmap_head_def*** getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 3), align 8, !dbg !4282
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 4), align 8, !dbg !4283
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 5), align 4, !dbg !4284
  store i32 0, i32* getelementptr inbounds (%struct.anon, %struct.anon* @regset_pool, i32 0, i32 6), align 8, !dbg !4285
  ret void, !dbg !4286
}

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

declare dso_local void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @get_nop_from_pool(%struct.rtx_def* %insn) #0 !dbg !4287 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %nop = alloca %struct.rtx_def*, align 8
  %old_p = alloca i8, align 1
  %flags = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4290, metadata !DIExpression()), !dbg !4291
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nop, metadata !4292, metadata !DIExpression()), !dbg !4293
  call void @llvm.dbg.declare(metadata i8* %old_p, metadata !4294, metadata !DIExpression()), !dbg !4295
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4296
  %cmp = icmp ne i32 %0, 0, !dbg !4297
  %conv = zext i1 %cmp to i32, !dbg !4297
  %conv1 = trunc i32 %conv to i8, !dbg !4298
  store i8 %conv1, i8* %old_p, align 1, !dbg !4295
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4299, metadata !DIExpression()), !dbg !4300
  %1 = load i8, i8* %old_p, align 1, !dbg !4301
  %tobool = icmp ne i8 %1, 0, !dbg !4301
  br i1 %tobool, label %if.then, label %if.else, !dbg !4303

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4304
  %3 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4305
  %dec = add nsw i32 %3, -1, !dbg !4305
  store i32 %dec, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4305
  %idxprom = sext i32 %dec to i64, !dbg !4306
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %2, i64 %idxprom, !dbg !4306
  %4 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !4306
  store %struct.rtx_def* %4, %struct.rtx_def** %nop, align 8, !dbg !4307
  br label %if.end, !dbg !4308

if.else:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !4309
  store %struct.rtx_def* %5, %struct.rtx_def** %nop, align 8, !dbg !4310
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %nop, align 8, !dbg !4311
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4312
  %call = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %6, %struct.rtx_def* %7), !dbg !4313
  store %struct.rtx_def* %call, %struct.rtx_def** %nop, align 8, !dbg !4314
  %8 = load i8, i8* %old_p, align 1, !dbg !4315
  %tobool2 = icmp ne i8 %8, 0, !dbg !4315
  br i1 %tobool2, label %if.then3, label %if.else4, !dbg !4317

if.then3:                                         ; preds = %if.end
  store i32 2, i32* %flags, align 4, !dbg !4318
  br label %if.end5, !dbg !4319

if.else4:                                         ; preds = %if.end
  store i32 3, i32* %flags, align 4, !dbg !4320
  br label %if.end5

if.end5:                                          ; preds = %if.else4, %if.then3
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4321
  %tobool6 = icmp ne %struct.VEC_sel_insn_data_def_heap* %9, null, !dbg !4321
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !4321

cond.true:                                        ; preds = %if.end5
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4321
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %10, i32 0, i32 0, !dbg !4321
  br label %cond.end, !dbg !4321

cond.false:                                       ; preds = %if.end5
  br label %cond.end, !dbg !4321

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4321
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4321
  %tobool7 = icmp ne %struct.VEC_int_heap* %11, null, !dbg !4321
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !4321

cond.true8:                                       ; preds = %cond.end
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4321
  %base9 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %12, i32 0, i32 0, !dbg !4321
  br label %cond.end11, !dbg !4321

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !4321

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_int_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !4321
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4321
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4321
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4321
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4321
  %rt_int = bitcast %union.rtunion_def* %arrayidx13 to i32*, !dbg !4321
  %14 = load i32, i32* %rt_int, align 8, !dbg !4321
  %call14 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond12, i32 %14), !dbg !4321
  %call15 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call14), !dbg !4321
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call15, i32 0, i32 0, !dbg !4321
  %15 = load %struct.vinsn_def*, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !4322
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4323
  %tobool16 = icmp ne %struct.VEC_sel_insn_data_def_heap* %16, null, !dbg !4323
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !4323

cond.true17:                                      ; preds = %cond.end11
  %17 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4323
  %base18 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %17, i32 0, i32 0, !dbg !4323
  br label %cond.end20, !dbg !4323

cond.false19:                                     ; preds = %cond.end11
  br label %cond.end20, !dbg !4323

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_sel_insn_data_def_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !4323
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4323
  %tobool22 = icmp ne %struct.VEC_int_heap* %18, null, !dbg !4323
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !4323

cond.true23:                                      ; preds = %cond.end20
  %19 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4323
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %19, i32 0, i32 0, !dbg !4323
  br label %cond.end26, !dbg !4323

cond.false25:                                     ; preds = %cond.end20
  br label %cond.end26, !dbg !4323

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !4323
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4323
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !4323
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4323
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 0, !dbg !4323
  %rt_int31 = bitcast %union.rtunion_def* %arrayidx30 to i32*, !dbg !4323
  %21 = load i32, i32* %rt_int31, align 8, !dbg !4323
  %call32 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond27, i32 %21), !dbg !4323
  %call33 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond21, i32 %call32), !dbg !4323
  %seqno = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call33, i32 0, i32 2, !dbg !4323
  %22 = load i32, i32* %seqno, align 4, !dbg !4323
  %call34 = call %struct._expr* @set_insn_init(%struct._expr* %expr, %struct.vinsn_def* %15, i32 %22), !dbg !4324
  %23 = load %struct.rtx_def*, %struct.rtx_def** %nop, align 8, !dbg !4325
  %24 = load i32, i32* %flags, align 4, !dbg !4326
  call void @sel_init_new_insn(%struct.rtx_def* %23, i32 %24), !dbg !4327
  %25 = load %struct.rtx_def*, %struct.rtx_def** %nop, align 8, !dbg !4328
  ret %struct.rtx_def* %25, !dbg !4329
}

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct._expr* @set_insn_init(%struct._expr* %expr, %struct.vinsn_def* %vi, i32 %seqno) #0 !dbg !4330 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %seqno.addr = alloca i32, align 4
  %x = alloca %struct._expr*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !4333, metadata !DIExpression()), !dbg !4334
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4335, metadata !DIExpression()), !dbg !4336
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4337, metadata !DIExpression()), !dbg !4338
  call void @llvm.dbg.declare(metadata %struct._expr** %x, metadata !4339, metadata !DIExpression()), !dbg !4340
  %0 = load %struct._sel_insn_data*, %struct._sel_insn_data** @insn_init_ssid, align 8, !dbg !4341
  %expr1 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %0, i32 0, i32 0, !dbg !4342
  store %struct._expr* %expr1, %struct._expr** %x, align 8, !dbg !4340
  %1 = load %struct._expr*, %struct._expr** %x, align 8, !dbg !4343
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4344
  call void @copy_expr_onside(%struct._expr* %1, %struct._expr* %2), !dbg !4345
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4346
  %cmp = icmp ne %struct.vinsn_def* %3, null, !dbg !4348
  br i1 %cmp, label %if.then, label %if.else, !dbg !4349

if.then:                                          ; preds = %entry
  store i8 0, i8* @insn_init_create_new_vinsn_p, align 1, !dbg !4350
  %4 = load %struct._expr*, %struct._expr** %x, align 8, !dbg !4352
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4353
  call void @change_vinsn_in_expr(%struct._expr* %4, %struct.vinsn_def* %5), !dbg !4354
  br label %if.end, !dbg !4355

if.else:                                          ; preds = %entry
  store i8 1, i8* @insn_init_create_new_vinsn_p, align 1, !dbg !4356
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %6 = load i32, i32* %seqno.addr, align 4, !dbg !4357
  %7 = load %struct._sel_insn_data*, %struct._sel_insn_data** @insn_init_ssid, align 8, !dbg !4358
  %seqno2 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %7, i32 0, i32 2, !dbg !4359
  store i32 %6, i32* %seqno2, align 4, !dbg !4360
  %8 = load %struct._expr*, %struct._expr** %x, align 8, !dbg !4361
  ret %struct._expr* %8, !dbg !4362
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !4363 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_sel_insn_data_def_base* %vec_, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_base** %vec_.addr, metadata !4367, metadata !DIExpression()), !dbg !4368
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4369, metadata !DIExpression()), !dbg !4368
  %0 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !4368
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_base* %0, null, !dbg !4368
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4368

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4368
  %2 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !4368
  %num = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %2, i32 0, i32 0, !dbg !4368
  %3 = load i32, i32* %num, align 8, !dbg !4368
  %cmp = icmp ult i32 %1, %3, !dbg !4368
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4370
  %land.ext = zext i1 %4 to i32, !dbg !4368
  %5 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !4368
  %vec = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %5, i32 0, i32 2, !dbg !4368
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4368
  %idxprom = zext i32 %6 to i64, !dbg !4368
  %arrayidx = getelementptr inbounds [1 x %struct._sel_insn_data], [1 x %struct._sel_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !4368
  ret %struct._sel_insn_data* %arrayidx, !dbg !4368
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_index(%struct.VEC_int_base* %vec_, i32 %ix_) #0 !dbg !4371 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !4376, metadata !DIExpression()), !dbg !4377
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4378, metadata !DIExpression()), !dbg !4377
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4377
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !4377
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4377

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4377
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4377
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !4377
  %3 = load i32, i32* %num, align 4, !dbg !4377
  %cmp = icmp ult i32 %1, %3, !dbg !4377
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4379
  %land.ext = zext i1 %4 to i32, !dbg !4377
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !4377
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 2, !dbg !4377
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4377
  %idxprom = zext i32 %6 to i64, !dbg !4377
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !4377
  %7 = load i32, i32* %arrayidx, align 4, !dbg !4377
  ret i32 %7, !dbg !4377
}

; Function Attrs: noinline nounwind uwtable
define internal void @sel_init_new_insn(%struct.rtx_def* %insn, i32 %flags) #0 !dbg !4380 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %flags.addr = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4383, metadata !DIExpression()), !dbg !4384
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4385, metadata !DIExpression()), !dbg !4386
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4387
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4387
  %bf.load = load i32, i32* %1, align 8, !dbg !4387
  %bf.clear = and i32 %bf.load, 65535, !dbg !4387
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4387
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4387

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4387
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4387
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4387
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4387
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4387
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4, !dbg !4387

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4387
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4387
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4387
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4387
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4387
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !4387

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4387
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4387
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4387
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4387
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4387
  br i1 %cmp11, label %land.lhs.true, label %if.end, !dbg !4389

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4390
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4390
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4390
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4390
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4390
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4390
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !4390
  br i1 %tobool, label %land.lhs.true12, label %if.end, !dbg !4390

land.lhs.true12:                                  ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4390
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4390
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4390
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 2, !dbg !4390
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !4390
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !4390
  %tobool17 = icmp ne %struct.rtx_def* %11, null, !dbg !4390
  br i1 %tobool17, label %land.lhs.true18, label %if.end, !dbg !4391

land.lhs.true18:                                  ; preds = %land.lhs.true12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4392
  %call = call zeroext i8 @insn_is_the_only_one_in_bb_p(%struct.rtx_def* %12), !dbg !4393
  %conv = zext i8 %call to i32, !dbg !4393
  %tobool19 = icmp ne i32 %conv, 0, !dbg !4393
  br i1 %tobool19, label %if.then, label %if.end, !dbg !4394

if.then:                                          ; preds = %land.lhs.true18
  call void @extend_bb_info(), !dbg !4395
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4397
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4397
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4397
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 3, !dbg !4397
  %rt_bb = bitcast %union.rtunion_def* %arrayidx22 to %struct.basic_block_def**, !dbg !4397
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4397
  call void @create_initial_data_sets(%struct.basic_block_def* %14), !dbg !4398
  br label %if.end, !dbg !4399

if.end:                                           ; preds = %if.then, %land.lhs.true18, %land.lhs.true12, %land.lhs.true, %lor.lhs.false8
  %15 = load i32, i32* %flags.addr, align 4, !dbg !4400
  %and = and i32 %15, 1, !dbg !4402
  %tobool23 = icmp ne i32 %and, 0, !dbg !4402
  br i1 %tobool23, label %if.then24, label %if.end25, !dbg !4403

if.then24:                                        ; preds = %if.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4404
  call void @sched_init_luids(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* %16), !dbg !4405
  br label %if.end25, !dbg !4405

if.end25:                                         ; preds = %if.then24, %if.end
  %17 = load i32, i32* %flags.addr, align 4, !dbg !4406
  %and26 = and i32 %17, 2, !dbg !4408
  %tobool27 = icmp ne i32 %and26, 0, !dbg !4408
  br i1 %tobool27, label %if.then28, label %if.end29, !dbg !4409

if.then28:                                        ; preds = %if.end25
  call void @extend_insn_data(), !dbg !4410
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4412
  call void @init_insn_data(%struct.rtx_def* %18), !dbg !4413
  %19 = load %struct._sel_insn_data*, %struct._sel_insn_data** @insn_init_ssid, align 8, !dbg !4414
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %19, i32 0, i32 0, !dbg !4415
  call void @clear_expr(%struct._expr* %expr), !dbg !4416
  br label %if.end29, !dbg !4417

if.end29:                                         ; preds = %if.then28, %if.end25
  %20 = load i32, i32* %flags.addr, align 4, !dbg !4418
  %and30 = and i32 %20, 4, !dbg !4420
  %tobool31 = icmp ne i32 %and30, 0, !dbg !4420
  br i1 %tobool31, label %if.then32, label %if.end33, !dbg !4421

if.then32:                                        ; preds = %if.end29
  call void @extend_insn_data(), !dbg !4422
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4424
  call void @init_simplejump_data(%struct.rtx_def* %21), !dbg !4425
  br label %if.end33, !dbg !4426

if.end33:                                         ; preds = %if.then32, %if.end29
  %22 = load i32*, i32** @containing_rgn, align 8, !dbg !4427
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4427
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !4427
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !4427
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 3, !dbg !4427
  %rt_bb37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.basic_block_def**, !dbg !4427
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb37, align 8, !dbg !4427
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 9, !dbg !4427
  %25 = load i32, i32* %index, align 8, !dbg !4427
  %add = add nsw i32 %25, 0, !dbg !4427
  %idxprom = sext i32 %add to i64, !dbg !4427
  %arrayidx38 = getelementptr inbounds i32, i32* %22, i64 %idxprom, !dbg !4427
  %26 = load i32, i32* %arrayidx38, align 4, !dbg !4427
  %27 = load i32*, i32** @containing_rgn, align 8, !dbg !4427
  %28 = load i32*, i32** @rgn_bb_table, align 8, !dbg !4427
  %29 = load i32*, i32** @ebb_head, align 8, !dbg !4427
  %arrayidx39 = getelementptr inbounds i32, i32* %29, i64 0, !dbg !4427
  %30 = load i32, i32* %arrayidx39, align 4, !dbg !4427
  %idxprom40 = sext i32 %30 to i64, !dbg !4427
  %arrayidx41 = getelementptr inbounds i32, i32* %28, i64 %idxprom40, !dbg !4427
  %31 = load i32, i32* %arrayidx41, align 4, !dbg !4427
  %idxprom42 = sext i32 %31 to i64, !dbg !4427
  %arrayidx43 = getelementptr inbounds i32, i32* %27, i64 %idxprom42, !dbg !4427
  %32 = load i32, i32* %arrayidx43, align 4, !dbg !4427
  %cmp44 = icmp eq i32 %26, %32, !dbg !4427
  br i1 %cmp44, label %cond.false, label %cond.true, !dbg !4427

cond.true:                                        ; preds = %if.end33
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4083, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4427
  br label %cond.end, !dbg !4427

cond.false:                                       ; preds = %if.end33
  br label %cond.end, !dbg !4427

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4427
  ret void, !dbg !4428
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @return_nop_to_pool(%struct.rtx_def* %nop, i8 zeroext %full_tidying) #0 !dbg !4429 {
entry:
  %nop.addr = alloca %struct.rtx_def*, align 8
  %full_tidying.addr = alloca i8, align 1
  store %struct.rtx_def* %nop, %struct.rtx_def** %nop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %nop.addr, metadata !4432, metadata !DIExpression()), !dbg !4433
  store i8 %full_tidying, i8* %full_tidying.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %full_tidying.addr, metadata !4434, metadata !DIExpression()), !dbg !4435
  %0 = load %struct.rtx_def*, %struct.rtx_def** %nop.addr, align 8, !dbg !4436
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4436
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4436
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4436
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4436
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4436
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !4436
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !4436

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %nop.addr, align 8, !dbg !4436
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4436
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4436
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !4436
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4436
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !4436
  %tobool5 = icmp ne %struct.rtx_def* %3, null, !dbg !4436
  br i1 %tobool5, label %cond.false, label %cond.true, !dbg !4436

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1062, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4436
  br label %cond.end, !dbg !4436

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4436

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4436
  %4 = load %struct.rtx_def*, %struct.rtx_def** %nop.addr, align 8, !dbg !4437
  %5 = load i8, i8* %full_tidying.addr, align 1, !dbg !4438
  %call = call zeroext i8 @sel_remove_insn(%struct.rtx_def* %4, i8 zeroext 0, i8 zeroext %5), !dbg !4439
  %6 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4440
  %7 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 2), align 4, !dbg !4442
  %cmp = icmp eq i32 %6, %7, !dbg !4443
  br i1 %cmp, label %if.then, label %if.end, !dbg !4444

if.then:                                          ; preds = %cond.end
  %8 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4445
  %9 = bitcast %struct.rtx_def** %8 to i8*, !dbg !4445
  %10 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 2), align 4, !dbg !4445
  %mul = mul nsw i32 2, %10, !dbg !4445
  %add = add nsw i32 %mul, 1, !dbg !4445
  store i32 %add, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 2), align 4, !dbg !4445
  %conv = sext i32 %add to i64, !dbg !4445
  %mul6 = mul i64 8, %conv, !dbg !4445
  %call7 = call i8* @xrealloc(i8* %9, i64 %mul6), !dbg !4445
  %11 = bitcast i8* %call7 to %struct.rtx_def**, !dbg !4445
  store %struct.rtx_def** %11, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4446
  br label %if.end, !dbg !4447

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %nop.addr, align 8, !dbg !4448
  %13 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4449
  %14 = load i32, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4450
  %inc = add nsw i32 %14, 1, !dbg !4450
  store i32 %inc, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4450
  %idxprom = sext i32 %14 to i64, !dbg !4451
  %arrayidx8 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %13, i64 %idxprom, !dbg !4451
  store %struct.rtx_def* %12, %struct.rtx_def** %arrayidx8, align 8, !dbg !4452
  ret void, !dbg !4453
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_remove_insn(%struct.rtx_def* %insn, i8 zeroext %only_disconnect, i8 zeroext %full_tidying) #0 !dbg !4454 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %only_disconnect.addr = alloca i8, align 1
  %full_tidying.addr = alloca i8, align 1
  %bb = alloca %struct.basic_block_def*, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  %bb39 = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4457, metadata !DIExpression()), !dbg !4458
  store i8 %only_disconnect, i8* %only_disconnect.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %only_disconnect.addr, metadata !4459, metadata !DIExpression()), !dbg !4460
  store i8 %full_tidying, i8* %full_tidying.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %full_tidying.addr, metadata !4461, metadata !DIExpression()), !dbg !4462
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4463, metadata !DIExpression()), !dbg !4464
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4465
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !4465
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4465
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4465
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4465
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4465
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !4464
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4466
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4466
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4466
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !4466
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4466
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4466
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !4466
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !4466

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4466
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4466
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !4466
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 2, !dbg !4466
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !4466
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !4466
  %tobool8 = icmp ne %struct.rtx_def* %5, null, !dbg !4466
  br i1 %tobool8, label %cond.false, label %cond.true, !dbg !4466

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3736, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4466
  br label %cond.end, !dbg !4466

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4466

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4466
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4467
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4467
  %bf.load = load i32, i32* %7, align 8, !dbg !4467
  %bf.clear = and i32 %bf.load, 65535, !dbg !4467
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !4467
  br i1 %cmp, label %land.lhs.true9, label %if.end28, !dbg !4469

land.lhs.true9:                                   ; preds = %cond.end
  %8 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !4470
  %tobool10 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %8, null, !dbg !4470
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !4470

cond.true11:                                      ; preds = %land.lhs.true9
  %9 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !4470
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %9, i32 0, i32 0, !dbg !4470
  br label %cond.end13, !dbg !4470

cond.false12:                                     ; preds = %land.lhs.true9
  br label %cond.end13, !dbg !4470

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true11 ], [ null, %cond.false12 ], !dbg !4470
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4470
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 9, !dbg !4470
  %11 = load i32, i32* %index, align 8, !dbg !4470
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond14, i32 %11), !dbg !4470
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 2, !dbg !4470
  %12 = load i32, i32* %av_level, align 8, !dbg !4470
  %13 = load i32, i32* @global_level, align 4, !dbg !4470
  %cmp15 = icmp eq i32 %12, %13, !dbg !4470
  br i1 %cmp15, label %if.then, label %if.end28, !dbg !4471

if.then:                                          ; preds = %cond.end13
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !4472, metadata !DIExpression()), !dbg !4474
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !4475, metadata !DIExpression()), !dbg !4476
  %14 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !4477
  %tobool16 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %14, null, !dbg !4477
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !4477

cond.true17:                                      ; preds = %if.then
  %15 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !4477
  %base18 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %15, i32 0, i32 0, !dbg !4477
  br label %cond.end20, !dbg !4477

cond.false19:                                     ; preds = %if.then
  br label %cond.end20, !dbg !4477

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !4477
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4477
  %index22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !4477
  %17 = load i32, i32* %index22, align 8, !dbg !4477
  %call23 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond21, i32 %17), !dbg !4477
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call23, i32 0, i32 1, !dbg !4477
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %av_set, i8 zeroext 1), !dbg !4477
  br label %for.cond, !dbg !4477

for.cond:                                         ; preds = %for.inc, %cond.end20
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !4479
  %18 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !4479
  %19 = load %struct._list_node*, %struct._list_node** %18, align 8, !dbg !4479
  %call24 = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %19, %struct._expr** %expr), !dbg !4479
  %tobool25 = icmp ne i8 %call24, 0, !dbg !4477
  br i1 %tobool25, label %for.body, label %for.end, !dbg !4477

for.body:                                         ; preds = %for.cond
  %20 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4481
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %20, i32 0, i32 0, !dbg !4481
  %21 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !4481
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %21, i32 0, i32 0, !dbg !4481
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4481
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4483
  %cmp26 = icmp eq %struct.rtx_def* %22, %23, !dbg !4484
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !4485

if.then27:                                        ; preds = %for.body
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !4486
  br label %for.end, !dbg !4488

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4483

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !4479
  br label %for.cond, !dbg !4479, !llvm.loop !4489

for.end:                                          ; preds = %if.then27, %for.cond
  br label %if.end28, !dbg !4491

if.end28:                                         ; preds = %for.end, %cond.end13, %cond.end
  %24 = load i8, i8* %only_disconnect.addr, align 1, !dbg !4492
  %tobool29 = icmp ne i8 %24, 0, !dbg !4492
  br i1 %tobool29, label %if.then30, label %if.else, !dbg !4494

if.then30:                                        ; preds = %if.end28
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !4495, metadata !DIExpression()), !dbg !4497
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4498
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !4498
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4498
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 1, !dbg !4498
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4498
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4498
  store %struct.rtx_def* %26, %struct.rtx_def** %prev, align 8, !dbg !4497
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !4499, metadata !DIExpression()), !dbg !4500
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4501
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !4501
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !4501
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 2, !dbg !4501
  %rt_rtx38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !4501
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx38, align 8, !dbg !4501
  store %struct.rtx_def* %28, %struct.rtx_def** %next, align 8, !dbg !4500
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb39, metadata !4502, metadata !DIExpression()), !dbg !4503
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4504
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !4504
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !4504
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 3, !dbg !4504
  %rt_bb43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.basic_block_def**, !dbg !4504
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb43, align 8, !dbg !4504
  store %struct.basic_block_def* %30, %struct.basic_block_def** %bb39, align 8, !dbg !4503
  %31 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4505
  %32 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !4506
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !4506
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !4506
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 2, !dbg !4506
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !4506
  store %struct.rtx_def* %31, %struct.rtx_def** %rt_rtx47, align 8, !dbg !4507
  %33 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !4508
  %34 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4509
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !4509
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !4509
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 1, !dbg !4509
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !4509
  store %struct.rtx_def* %33, %struct.rtx_def** %rt_rtx51, align 8, !dbg !4510
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !4511
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !4511
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4511
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4511
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 0, !dbg !4511
  %37 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4511
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4513
  %cmp52 = icmp eq %struct.rtx_def* %37, %38, !dbg !4514
  br i1 %cmp52, label %if.then53, label %if.end66, !dbg !4515

if.then53:                                        ; preds = %if.then30
  %39 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !4516
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !4516
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !4516
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 3, !dbg !4516
  %rt_bb57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.basic_block_def**, !dbg !4516
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb57, align 8, !dbg !4516
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !4516
  %cmp58 = icmp eq %struct.basic_block_def* %40, %41, !dbg !4516
  br i1 %cmp58, label %cond.false60, label %cond.true59, !dbg !4516

cond.true59:                                      ; preds = %if.then53
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3764, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4516
  br label %cond.end61, !dbg !4516

cond.false60:                                     ; preds = %if.then53
  br label %cond.end61, !dbg !4516

cond.end61:                                       ; preds = %cond.false60, %cond.true59
  %cond62 = phi i32 [ 0, %cond.true59 ], [ 0, %cond.false60 ], !dbg !4516
  %42 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !4518
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !4519
  %il63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 7, !dbg !4519
  %rtl64 = bitcast %union.basic_block_il_dependent* %il63 to %struct.rtl_bb_info**, !dbg !4519
  %44 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl64, align 8, !dbg !4519
  %head_65 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %44, i32 0, i32 0, !dbg !4519
  store %struct.rtx_def* %42, %struct.rtx_def** %head_65, align 8, !dbg !4520
  br label %if.end66, !dbg !4521

if.end66:                                         ; preds = %cond.end61, %if.then30
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !4522
  %il67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 7, !dbg !4522
  %rtl68 = bitcast %union.basic_block_il_dependent* %il67 to %struct.rtl_bb_info**, !dbg !4522
  %46 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl68, align 8, !dbg !4522
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %46, i32 0, i32 1, !dbg !4522
  %47 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4522
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4524
  %cmp69 = icmp eq %struct.rtx_def* %47, %48, !dbg !4525
  br i1 %cmp69, label %if.then70, label %if.end74, !dbg !4526

if.then70:                                        ; preds = %if.end66
  %49 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !4527
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb39, align 8, !dbg !4528
  %il71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 7, !dbg !4528
  %rtl72 = bitcast %union.basic_block_il_dependent* %il71 to %struct.rtl_bb_info**, !dbg !4528
  %51 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl72, align 8, !dbg !4528
  %end_73 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %51, i32 0, i32 1, !dbg !4528
  store %struct.rtx_def* %49, %struct.rtx_def** %end_73, align 8, !dbg !4529
  br label %if.end74, !dbg !4528

if.end74:                                         ; preds = %if.then70, %if.end66
  br label %if.end93, !dbg !4530

if.else:                                          ; preds = %if.end28
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4531
  call void @remove_insn(%struct.rtx_def* %52), !dbg !4533
  %53 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4534
  %tobool75 = icmp ne %struct.VEC_sel_insn_data_def_heap* %53, null, !dbg !4534
  br i1 %tobool75, label %cond.true76, label %cond.false78, !dbg !4534

cond.true76:                                      ; preds = %if.else
  %54 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4534
  %base77 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %54, i32 0, i32 0, !dbg !4534
  br label %cond.end79, !dbg !4534

cond.false78:                                     ; preds = %if.else
  br label %cond.end79, !dbg !4534

cond.end79:                                       ; preds = %cond.false78, %cond.true76
  %cond80 = phi %struct.VEC_sel_insn_data_def_base* [ %base77, %cond.true76 ], [ null, %cond.false78 ], !dbg !4534
  %55 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4534
  %tobool81 = icmp ne %struct.VEC_int_heap* %55, null, !dbg !4534
  br i1 %tobool81, label %cond.true82, label %cond.false84, !dbg !4534

cond.true82:                                      ; preds = %cond.end79
  %56 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4534
  %base83 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %56, i32 0, i32 0, !dbg !4534
  br label %cond.end85, !dbg !4534

cond.false84:                                     ; preds = %cond.end79
  br label %cond.end85, !dbg !4534

cond.end85:                                       ; preds = %cond.false84, %cond.true82
  %cond86 = phi %struct.VEC_int_base* [ %base83, %cond.true82 ], [ null, %cond.false84 ], !dbg !4534
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4534
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !4534
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !4534
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !4534
  %rt_int = bitcast %union.rtunion_def* %arrayidx89 to i32*, !dbg !4534
  %58 = load i32, i32* %rt_int, align 8, !dbg !4534
  %call90 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond86, i32 %58), !dbg !4534
  %call91 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond80, i32 %call90), !dbg !4534
  %expr92 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call91, i32 0, i32 0, !dbg !4534
  call void @clear_expr(%struct._expr* %expr92), !dbg !4535
  br label %if.end93

if.end93:                                         ; preds = %cond.end85, %if.end74
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4536
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !4536
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !4536
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 1, !dbg !4536
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !4536
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx97, align 8, !dbg !4537
  %60 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4538
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4538
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !4538
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 2, !dbg !4538
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !4538
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx101, align 8, !dbg !4539
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4540
  %62 = load i8, i8* %full_tidying.addr, align 1, !dbg !4541
  %call102 = call zeroext i8 @tidy_control_flow(%struct.basic_block_def* %61, i8 zeroext %62), !dbg !4542
  ret i8 %call102, !dbg !4543
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_nop_pool() #0 !dbg !4544 {
entry:
  store i32 0, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 1), align 8, !dbg !4545
  store i32 0, i32* getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 2), align 4, !dbg !4546
  %0 = load %struct.rtx_def**, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4547
  %1 = bitcast %struct.rtx_def** %0 to i8*, !dbg !4548
  call void @free(i8* %1), !dbg !4549
  store %struct.rtx_def** null, %struct.rtx_def*** getelementptr inbounds (%struct.anon.1, %struct.anon.1* @nop_pool, i32 0, i32 0), align 8, !dbg !4550
  ret void, !dbg !4551
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vinsn_attach(%struct.vinsn_def* %vi) #0 !dbg !4552 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4555, metadata !DIExpression()), !dbg !4556
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4557
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 0, !dbg !4557
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4557
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !4557
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !4557

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1219, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4557
  br label %cond.end, !dbg !4557

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4557

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4557
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4558
  %count = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 4, !dbg !4558
  %3 = load i32, i32* %count, align 8, !dbg !4559
  %inc = add nsw i32 %3, 1, !dbg !4559
  store i32 %inc, i32* %count, align 8, !dbg !4559
  ret void, !dbg !4560
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vinsn_def* @vinsn_copy(%struct.vinsn_def* %vi, i8 zeroext %reattach_p) #0 !dbg !4561 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %reattach_p.addr = alloca i8, align 1
  %copy = alloca %struct.rtx_def*, align 8
  %unique = alloca i8, align 1
  %new_vi = alloca %struct.vinsn_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4564, metadata !DIExpression()), !dbg !4565
  store i8 %reattach_p, i8* %reattach_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %reattach_p.addr, metadata !4566, metadata !DIExpression()), !dbg !4567
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy, metadata !4568, metadata !DIExpression()), !dbg !4569
  call void @llvm.dbg.declare(metadata i8* %unique, metadata !4570, metadata !DIExpression()), !dbg !4571
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4572
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 1, !dbg !4572
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !4572
  %1 = load i32, i32* %type, align 8, !dbg !4572
  %cmp = icmp eq i32 %1, 23, !dbg !4572
  br i1 %cmp, label %lor.end, label %lor.rhs, !dbg !4572

lor.rhs:                                          ; preds = %entry
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4572
  %id1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 1, !dbg !4572
  %type2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id1, i32 0, i32 0, !dbg !4572
  %3 = load i32, i32* %type2, align 8, !dbg !4572
  %cmp3 = icmp eq i32 %3, 24, !dbg !4572
  br label %lor.end, !dbg !4572

lor.end:                                          ; preds = %lor.rhs, %entry
  %4 = phi i1 [ true, %entry ], [ %cmp3, %lor.rhs ]
  %lnot = xor i1 %4, true, !dbg !4572
  %lnot.ext = zext i1 %lnot to i32, !dbg !4572
  %conv = trunc i32 %lnot.ext to i8, !dbg !4572
  store i8 %conv, i8* %unique, align 1, !dbg !4571
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %new_vi, metadata !4573, metadata !DIExpression()), !dbg !4574
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4575
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %5, i32 0, i32 0, !dbg !4575
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4575
  %call = call %struct.rtx_def* @create_copy_of_insn_rtx(%struct.rtx_def* %6), !dbg !4576
  store %struct.rtx_def* %call, %struct.rtx_def** %copy, align 8, !dbg !4577
  %7 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !4578
  %8 = load i8, i8* %unique, align 1, !dbg !4579
  %call4 = call %struct.vinsn_def* @create_vinsn_from_insn_rtx(%struct.rtx_def* %7, i8 zeroext %8), !dbg !4580
  store %struct.vinsn_def* %call4, %struct.vinsn_def** %new_vi, align 8, !dbg !4581
  %9 = load i8, i8* %reattach_p.addr, align 1, !dbg !4582
  %tobool = icmp ne i8 %9, 0, !dbg !4582
  br i1 %tobool, label %if.then, label %if.end, !dbg !4584

if.then:                                          ; preds = %lor.end
  %10 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4585
  call void @vinsn_detach(%struct.vinsn_def* %10), !dbg !4587
  %11 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vi, align 8, !dbg !4588
  call void @vinsn_attach(%struct.vinsn_def* %11), !dbg !4589
  br label %if.end, !dbg !4590

if.end:                                           ; preds = %if.then, %lor.end
  %12 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vi, align 8, !dbg !4591
  ret %struct.vinsn_def* %12, !dbg !4592
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @create_copy_of_insn_rtx(%struct.rtx_def* %insn_rtx) #0 !dbg !4593 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %insn_rtx.addr = alloca %struct.rtx_def*, align 8
  %res = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn_rtx, %struct.rtx_def** %insn_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_rtx.addr, metadata !4596, metadata !DIExpression()), !dbg !4597
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %res, metadata !4598, metadata !DIExpression()), !dbg !4599
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4600
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4600
  %bf.load = load i32, i32* %1, align 8, !dbg !4600
  %bf.clear = and i32 %bf.load, 65535, !dbg !4600
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !4600
  br i1 %cmp, label %if.then, label %if.end, !dbg !4602

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4603
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !4603
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4603
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !4603
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4603
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4603
  %call = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %3), !dbg !4604
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4605
  %call1 = call %struct.rtx_def* @create_insn_rtx_from_pattern(%struct.rtx_def* %call, %struct.rtx_def* %4), !dbg !4606
  store %struct.rtx_def* %call1, %struct.rtx_def** %retval, align 8, !dbg !4607
  br label %return, !dbg !4607

if.end:                                           ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4608
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !4608
  %bf.load2 = load i32, i32* %6, align 8, !dbg !4608
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !4608
  %cmp4 = icmp eq i32 %bf.clear3, 8, !dbg !4608
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !4608

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5563, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4608
  br label %cond.end, !dbg !4608

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4608

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4608
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4609
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !4609
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !4609
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 5, !dbg !4609
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !4609
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !4609
  %call9 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %8), !dbg !4610
  %call10 = call %struct.rtx_def* @create_insn_rtx_from_pattern(%struct.rtx_def* %call9, %struct.rtx_def* null), !dbg !4611
  store %struct.rtx_def* %call10, %struct.rtx_def** %res, align 8, !dbg !4612
  %9 = load %struct.rtx_def*, %struct.rtx_def** %res, align 8, !dbg !4613
  store %struct.rtx_def* %9, %struct.rtx_def** %retval, align 8, !dbg !4614
  br label %return, !dbg !4614

return:                                           ; preds = %cond.end, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !4615
  ret %struct.rtx_def* %10, !dbg !4615
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.vinsn_def* @create_vinsn_from_insn_rtx(%struct.rtx_def* %insn_rtx, i8 zeroext %force_unique_p) #0 !dbg !4616 {
entry:
  %insn_rtx.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  store %struct.rtx_def* %insn_rtx, %struct.rtx_def** %insn_rtx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_rtx.addr, metadata !4619, metadata !DIExpression()), !dbg !4620
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !4621, metadata !DIExpression()), !dbg !4622
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !4623
  %bf.load = load i32, i32* %1, align 8, !dbg !4623
  %bf.clear = and i32 %bf.load, 65535, !dbg !4623
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !4623
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !4623

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !4623
  %bf.load1 = load i32, i32* %3, align 8, !dbg !4623
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !4623
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !4623
  br i1 %cmp3, label %land.lhs.true, label %lor.lhs.false4, !dbg !4623

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !4623
  %bf.load5 = load i32, i32* %5, align 8, !dbg !4623
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !4623
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !4623
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false8, !dbg !4623

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !4623
  %bf.load9 = load i32, i32* %7, align 8, !dbg !4623
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !4623
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !4623
  br i1 %cmp11, label %land.lhs.true, label %cond.true, !dbg !4623

land.lhs.true:                                    ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !4623
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4623
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4623
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4623
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4623
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !4623
  br i1 %tobool, label %land.lhs.true12, label %cond.false, !dbg !4623

land.lhs.true12:                                  ; preds = %land.lhs.true
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4623
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !4623
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !4623
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 2, !dbg !4623
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !4623
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !4623
  %tobool17 = icmp ne %struct.rtx_def* %11, null, !dbg !4623
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !4623

cond.true:                                        ; preds = %land.lhs.true12, %lor.lhs.false8
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5547, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4623
  br label %cond.end, !dbg !4623

cond.false:                                       ; preds = %land.lhs.true12, %land.lhs.true
  br label %cond.end, !dbg !4623

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4623
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx.addr, align 8, !dbg !4624
  %13 = load i8, i8* %force_unique_p.addr, align 1, !dbg !4625
  %call = call %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %12, i8 zeroext %13), !dbg !4626
  ret %struct.vinsn_def* %call, !dbg !4627
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @vinsn_detach(%struct.vinsn_def* %vi) #0 !dbg !4628 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4629, metadata !DIExpression()), !dbg !4630
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4631
  %count = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 4, !dbg !4631
  %1 = load i32, i32* %count, align 8, !dbg !4631
  %cmp = icmp sgt i32 %1, 0, !dbg !4631
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4631

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1273, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4631
  br label %cond.end, !dbg !4631

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4631

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4631
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4632
  %count1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 4, !dbg !4632
  %3 = load i32, i32* %count1, align 8, !dbg !4634
  %dec = add nsw i32 %3, -1, !dbg !4634
  store i32 %dec, i32* %count1, align 8, !dbg !4634
  %cmp2 = icmp eq i32 %dec, 0, !dbg !4635
  br i1 %cmp2, label %if.then, label %if.end, !dbg !4636

if.then:                                          ; preds = %cond.end
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4637
  call void @vinsn_delete(%struct.vinsn_def* %4), !dbg !4638
  br label %if.end, !dbg !4638

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !4639
}

; Function Attrs: noinline nounwind uwtable
define internal void @vinsn_delete(%struct.vinsn_def* %vi) #0 !dbg !4640 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4641, metadata !DIExpression()), !dbg !4642
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4643
  %count = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 4, !dbg !4643
  %1 = load i32, i32* %count, align 8, !dbg !4643
  %cmp = icmp eq i32 %1, 0, !dbg !4643
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4643

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1259, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4643
  br label %cond.end, !dbg !4643

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4643

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4643
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4644
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 1, !dbg !4644
  %reg_sets = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 3, !dbg !4644
  %3 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_sets, align 8, !dbg !4644
  call void @return_regset_to_pool(%struct.bitmap_head_def* %3), !dbg !4645
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4646
  %id1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 1, !dbg !4646
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id1, i32 0, i32 5, !dbg !4646
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !4646
  call void @return_regset_to_pool(%struct.bitmap_head_def* %5), !dbg !4647
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4648
  %id2 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 1, !dbg !4648
  %reg_clobbers = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id2, i32 0, i32 4, !dbg !4648
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_clobbers, align 8, !dbg !4648
  call void @return_regset_to_pool(%struct.bitmap_head_def* %7), !dbg !4649
  %8 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4650
  %9 = bitcast %struct.vinsn_def* %8 to i8*, !dbg !4650
  call void @free(i8* %9), !dbg !4651
  ret void, !dbg !4652
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vinsn_cond_branch_p(%struct.vinsn_def* %vi) #0 !dbg !4653 {
entry:
  %retval = alloca i8, align 1
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4656, metadata !DIExpression()), !dbg !4657
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4658, metadata !DIExpression()), !dbg !4659
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4660
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 1, !dbg !4660
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !4660
  %1 = load i32, i32* %type, align 8, !dbg !4660
  %cmp = icmp eq i32 %1, 23, !dbg !4660
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !4660

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4660
  %id1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 1, !dbg !4660
  %type2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id1, i32 0, i32 0, !dbg !4660
  %3 = load i32, i32* %type2, align 8, !dbg !4660
  %cmp3 = icmp eq i32 %3, 24, !dbg !4660
  br i1 %cmp3, label %if.then, label %if.end, !dbg !4662

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !4663
  br label %return, !dbg !4663

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4664
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 0, !dbg !4664
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4664
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !4665
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4666
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !4666
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4666
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4666
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4666
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4666
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !4666
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4666
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4666
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !4666
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4666
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4668
  %cmp4 = icmp ne %struct.rtx_def* %9, %10, !dbg !4669
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !4670

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !4671
  br label %return, !dbg !4671

if.end6:                                          ; preds = %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4672
  %call = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %11), !dbg !4673
  store i8 %call, i8* %retval, align 1, !dbg !4674
  br label %return, !dbg !4674

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !4675
  ret i8 %12, !dbg !4675
}

declare dso_local zeroext i8 @control_flow_insn_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @sel_vinsn_cost(%struct.vinsn_def* %vi) #0 !dbg !4676 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %cost = alloca i32, align 4
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !4679, metadata !DIExpression()), !dbg !4680
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4681, metadata !DIExpression()), !dbg !4682
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4683
  %cost1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 5, !dbg !4684
  %1 = load i32, i32* %cost1, align 4, !dbg !4684
  store i32 %1, i32* %cost, align 4, !dbg !4682
  %2 = load i32, i32* %cost, align 4, !dbg !4685
  %cmp = icmp slt i32 %2, 0, !dbg !4687
  br i1 %cmp, label %if.then, label %if.end, !dbg !4688

if.then:                                          ; preds = %entry
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4689
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %3, i32 0, i32 0, !dbg !4689
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4689
  %call = call i32 @sel_insn_rtx_cost(%struct.rtx_def* %4), !dbg !4691
  store i32 %call, i32* %cost, align 4, !dbg !4692
  %5 = load i32, i32* %cost, align 4, !dbg !4693
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !4694
  %cost2 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 5, !dbg !4695
  store i32 %5, i32* %cost2, align 4, !dbg !4696
  br label %if.end, !dbg !4697

if.end:                                           ; preds = %if.then, %entry
  %7 = load i32, i32* %cost, align 4, !dbg !4698
  ret i32 %7, !dbg !4699
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sel_insn_rtx_cost(%struct.rtx_def* %insn) #0 !dbg !4700 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %cost = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4701, metadata !DIExpression()), !dbg !4702
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !4703, metadata !DIExpression()), !dbg !4704
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4705
  %call = call i32 @recog_memoized(%struct.rtx_def* %0), !dbg !4707
  %cmp = icmp slt i32 %call, 0, !dbg !4708
  br i1 %cmp, label %if.then, label %if.else, !dbg !4709

if.then:                                          ; preds = %entry
  store i32 0, i32* %cost, align 4, !dbg !4710
  br label %if.end4, !dbg !4711

if.else:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4712
  %call1 = call i32 @insn_default_latency(%struct.rtx_def* %1), !dbg !4714
  store i32 %call1, i32* %cost, align 4, !dbg !4715
  %2 = load i32, i32* %cost, align 4, !dbg !4716
  %cmp2 = icmp slt i32 %2, 0, !dbg !4718
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !4719

if.then3:                                         ; preds = %if.else
  store i32 0, i32* %cost, align 4, !dbg !4720
  br label %if.end, !dbg !4721

if.end:                                           ; preds = %if.then3, %if.else
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  %3 = load i32, i32* %cost, align 4, !dbg !4722
  ret i32 %3, !dbg !4723
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_gen_insn_from_rtx_after(%struct.rtx_def* %pattern, %struct._expr* %expr, i32 %seqno, %struct.rtx_def* %after) #0 !dbg !4724 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %seqno.addr = alloca i32, align 4
  %after.addr = alloca %struct.rtx_def*, align 8
  %new_insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !4727, metadata !DIExpression()), !dbg !4728
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !4729, metadata !DIExpression()), !dbg !4730
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4731, metadata !DIExpression()), !dbg !4732
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !4733, metadata !DIExpression()), !dbg !4734
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_insn, metadata !4735, metadata !DIExpression()), !dbg !4736
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4737
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 11, !dbg !4737
  %1 = load i8, i8* %target_available, align 8, !dbg !4737
  %conv = sext i8 %1 to i32, !dbg !4737
  %cmp = icmp eq i32 %conv, 1, !dbg !4737
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !4737

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1344, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4737
  br label %cond.end, !dbg !4737

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4737

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4737
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !4738
  %3 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4739
  %call = call %struct.rtx_def* @emit_insn_after(%struct.rtx_def* %2, %struct.rtx_def* %3), !dbg !4740
  store %struct.rtx_def* %call, %struct.rtx_def** %new_insn, align 8, !dbg !4741
  %4 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4742
  %5 = load i32, i32* %seqno.addr, align 4, !dbg !4743
  %call2 = call %struct._expr* @set_insn_init(%struct._expr* %4, %struct.vinsn_def* null, i32 %5), !dbg !4744
  %6 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !4745
  call void @sel_init_new_insn(%struct.rtx_def* %6, i32 3), !dbg !4746
  %7 = load %struct.rtx_def*, %struct.rtx_def** %new_insn, align 8, !dbg !4747
  ret %struct.rtx_def* %7, !dbg !4748
}

declare dso_local %struct.rtx_def* @emit_insn_after(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_gen_recovery_insn_from_rtx_after(%struct.rtx_def* %pattern, %struct._expr* %expr, i32 %seqno, %struct.rtx_def* %after) #0 !dbg !4749 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %seqno.addr = alloca i32, align 4
  %after.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !4750, metadata !DIExpression()), !dbg !4751
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !4752, metadata !DIExpression()), !dbg !4753
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4754, metadata !DIExpression()), !dbg !4755
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !4756, metadata !DIExpression()), !dbg !4757
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4758, metadata !DIExpression()), !dbg !4759
  %0 = load i8, i8* @init_insn_force_unique_p, align 1, !dbg !4760
  %tobool = icmp ne i8 %0, 0, !dbg !4760
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4760

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1364, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4760
  br label %cond.end, !dbg !4760

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4760

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4760
  store i8 1, i8* @init_insn_force_unique_p, align 1, !dbg !4761
  %1 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !4762
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4763
  %3 = load i32, i32* %seqno.addr, align 4, !dbg !4764
  %4 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4765
  %call = call %struct.rtx_def* @sel_gen_insn_from_rtx_after(%struct.rtx_def* %1, %struct._expr* %2, i32 %3, %struct.rtx_def* %4), !dbg !4766
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !4767
  %5 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !4768
  %tobool1 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %5, null, !dbg !4768
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !4768

cond.true2:                                       ; preds = %cond.end
  %6 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !4768
  %base = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %6, i32 0, i32 0, !dbg !4768
  br label %cond.end4, !dbg !4768

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !4768

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !4768
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4768
  %tobool6 = icmp ne %struct.VEC_int_heap* %7, null, !dbg !4768
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !4768

cond.true7:                                       ; preds = %cond.end4
  %8 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4768
  %base8 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %8, i32 0, i32 0, !dbg !4768
  br label %cond.end10, !dbg !4768

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !4768

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_int_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !4768
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4768
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4768
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4768
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4768
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4768
  %10 = load i32, i32* %rt_int, align 8, !dbg !4768
  %call12 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond11, i32 %10), !dbg !4768
  %call13 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond5, i32 %call12), !dbg !4768
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call13, i32 0, i32 7, !dbg !4768
  %bf.load = load i8, i8* %cant_move, align 8, !dbg !4769
  %bf.clear = and i8 %bf.load, -2, !dbg !4769
  %bf.set = or i8 %bf.clear, 1, !dbg !4769
  store i8 %bf.set, i8* %cant_move, align 8, !dbg !4769
  store i8 0, i8* @init_insn_force_unique_p, align 1, !dbg !4770
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4771
  ret %struct.rtx_def* %11, !dbg !4772
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !4773 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_deps_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_deps_insn_data_def_base* %vec_, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, metadata !4823, metadata !DIExpression()), !dbg !4824
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4825, metadata !DIExpression()), !dbg !4824
  %0 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !4824
  %tobool = icmp ne %struct.VEC_haifa_deps_insn_data_def_base* %0, null, !dbg !4824
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4824

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4824
  %2 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !4824
  %num = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %2, i32 0, i32 0, !dbg !4824
  %3 = load i32, i32* %num, align 8, !dbg !4824
  %cmp = icmp ult i32 %1, %3, !dbg !4824
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4826
  %land.ext = zext i1 %4 to i32, !dbg !4824
  %5 = load %struct.VEC_haifa_deps_insn_data_def_base*, %struct.VEC_haifa_deps_insn_data_def_base** %vec_.addr, align 8, !dbg !4824
  %vec = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_base, %struct.VEC_haifa_deps_insn_data_def_base* %5, i32 0, i32 2, !dbg !4824
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4824
  %idxprom = zext i32 %6 to i64, !dbg !4824
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_deps_insn_data], [1 x %struct._haifa_deps_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !4824
  ret %struct._haifa_deps_insn_data* %arrayidx, !dbg !4824
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_gen_insn_from_expr_after(%struct._expr* %expr, %struct.vinsn_def* %vinsn, i32 %seqno, %struct.rtx_def* %after) #0 !dbg !4827 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %vinsn.addr = alloca %struct.vinsn_def*, align 8
  %seqno.addr = alloca i32, align 4
  %after.addr = alloca %struct.rtx_def*, align 8
  %emit_expr = alloca %struct._expr*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %flags = alloca i32, align 4
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !4830, metadata !DIExpression()), !dbg !4831
  store %struct.vinsn_def* %vinsn, %struct.vinsn_def** %vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vinsn.addr, metadata !4832, metadata !DIExpression()), !dbg !4833
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4834, metadata !DIExpression()), !dbg !4835
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !4836, metadata !DIExpression()), !dbg !4837
  call void @llvm.dbg.declare(metadata %struct._expr** %emit_expr, metadata !4838, metadata !DIExpression()), !dbg !4839
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4840, metadata !DIExpression()), !dbg !4841
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4842, metadata !DIExpression()), !dbg !4843
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4844
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn.addr, align 8, !dbg !4845
  %tobool = icmp ne %struct.vinsn_def* %1, null, !dbg !4845
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4845

cond.true:                                        ; preds = %entry
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn.addr, align 8, !dbg !4846
  br label %cond.end, !dbg !4845

cond.false:                                       ; preds = %entry
  %3 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4847
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !4847
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn1, align 8, !dbg !4847
  br label %cond.end, !dbg !4845

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.vinsn_def* [ %2, %cond.true ], [ %4, %cond.false ], !dbg !4845
  %5 = load i32, i32* %seqno.addr, align 4, !dbg !4848
  %call = call %struct._expr* @set_insn_init(%struct._expr* %0, %struct.vinsn_def* %cond, i32 %5), !dbg !4849
  store %struct._expr* %call, %struct._expr** %emit_expr, align 8, !dbg !4850
  %6 = load %struct._expr*, %struct._expr** %emit_expr, align 8, !dbg !4851
  %vinsn2 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 0, !dbg !4851
  %7 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn2, align 8, !dbg !4851
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %7, i32 0, i32 0, !dbg !4851
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4851
  store %struct.rtx_def* %8, %struct.rtx_def** %insn, align 8, !dbg !4852
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4853
  %10 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4854
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4855
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4855
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4855
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4855
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4855
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4855
  call void @add_insn_after(%struct.rtx_def* %9, %struct.rtx_def* %10, %struct.basic_block_def* %12), !dbg !4856
  store i32 2, i32* %flags, align 4, !dbg !4857
  %13 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4858
  %tobool3 = icmp ne %struct.VEC_int_heap* %13, null, !dbg !4858
  br i1 %tobool3, label %cond.true4, label %cond.false5, !dbg !4858

cond.true4:                                       ; preds = %cond.end
  %14 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4858
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %14, i32 0, i32 0, !dbg !4858
  br label %cond.end6, !dbg !4858

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !4858

cond.end6:                                        ; preds = %cond.false5, %cond.true4
  %cond7 = phi %struct.VEC_int_base* [ %base, %cond.true4 ], [ null, %cond.false5 ], !dbg !4858
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4858
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4858
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !4858
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !4858
  %rt_int = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !4858
  %16 = load i32, i32* %rt_int, align 8, !dbg !4858
  %call11 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond7, i32 %16), !dbg !4858
  %cmp = icmp eq i32 %call11, 0, !dbg !4860
  br i1 %cmp, label %if.then, label %if.end, !dbg !4861

if.then:                                          ; preds = %cond.end6
  %17 = load i32, i32* %flags, align 4, !dbg !4862
  %or = or i32 %17, 1, !dbg !4862
  store i32 %or, i32* %flags, align 4, !dbg !4862
  br label %if.end, !dbg !4863

if.end:                                           ; preds = %if.then, %cond.end6
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4864
  %19 = load i32, i32* %flags, align 4, !dbg !4865
  call void @sel_init_new_insn(%struct.rtx_def* %18, i32 %19), !dbg !4866
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4867
  ret %struct.rtx_def* %20, !dbg !4868
}

declare dso_local void @add_insn_after(%struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_move_insn(%struct._expr* %expr, i32 %seqno, %struct.rtx_def* %after) #0 !dbg !4869 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %seqno.addr = alloca i32, align 4
  %after.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %next = alloca %struct.rtx_def*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !4872, metadata !DIExpression()), !dbg !4873
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4874, metadata !DIExpression()), !dbg !4875
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !4876, metadata !DIExpression()), !dbg !4877
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !4878, metadata !DIExpression()), !dbg !4879
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !4880
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !4880
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !4880
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 0, !dbg !4880
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !4880
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !4879
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4881, metadata !DIExpression()), !dbg !4882
  %3 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4883
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !4883
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4883
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !4883
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !4883
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4883
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !4882
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next, metadata !4884, metadata !DIExpression()), !dbg !4885
  %5 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4886
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !4886
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !4886
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !4886
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !4886
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4886
  store %struct.rtx_def* %6, %struct.rtx_def** %next, align 8, !dbg !4885
  %7 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4887
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %7, null, !dbg !4887
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4887

cond.true:                                        ; preds = %entry
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4887
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %8, i32 0, i32 0, !dbg !4887
  br label %cond.end, !dbg !4887

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4887
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4887
  %tobool4 = icmp ne %struct.VEC_int_heap* %9, null, !dbg !4887
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !4887

cond.true5:                                       ; preds = %cond.end
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4887
  %base6 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %10, i32 0, i32 0, !dbg !4887
  br label %cond.end8, !dbg !4887

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !4887

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_int_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !4887
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4887
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4887
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !4887
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 0, !dbg !4887
  %rt_int = bitcast %union.rtunion_def* %arrayidx12 to i32*, !dbg !4887
  %12 = load i32, i32* %rt_int, align 8, !dbg !4887
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond9, i32 %12), !dbg !4887
  %call13 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !4887
  %expr14 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call13, i32 0, i32 0, !dbg !4887
  %vinsn15 = getelementptr inbounds %struct._expr, %struct._expr* %expr14, i32 0, i32 0, !dbg !4887
  %13 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn15, align 8, !dbg !4887
  %cmp = icmp ne %struct.vinsn_def* %13, null, !dbg !4887
  br i1 %cmp, label %cond.false17, label %cond.true16, !dbg !4887

cond.true16:                                      ; preds = %cond.end8
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1408, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4887
  br label %cond.end18, !dbg !4887

cond.false17:                                     ; preds = %cond.end8
  br label %cond.end18, !dbg !4887

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !4887
  %14 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4888
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4889
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !4889
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !4889
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !4889
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !4889
  store %struct.rtx_def* %14, %struct.rtx_def** %rt_rtx23, align 8, !dbg !4890
  %16 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4891
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4892
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4892
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !4892
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 2, !dbg !4892
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !4892
  store %struct.rtx_def* %16, %struct.rtx_def** %rt_rtx27, align 8, !dbg !4893
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4894
  %19 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4895
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !4895
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4895
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 2, !dbg !4895
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !4895
  store %struct.rtx_def* %18, %struct.rtx_def** %rt_rtx31, align 8, !dbg !4896
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4897
  %21 = load %struct.rtx_def*, %struct.rtx_def** %next, align 8, !dbg !4898
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !4898
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !4898
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 1, !dbg !4898
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !4898
  store %struct.rtx_def* %20, %struct.rtx_def** %rt_rtx35, align 8, !dbg !4899
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4900
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4901
  call void @df_insn_change_bb(%struct.rtx_def* %22, %struct.basic_block_def* %23), !dbg !4902
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4903
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 7, !dbg !4903
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4903
  %25 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4903
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %25, i32 0, i32 1, !dbg !4903
  %26 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4903
  %27 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !4905
  %cmp36 = icmp eq %struct.rtx_def* %26, %27, !dbg !4906
  br i1 %cmp36, label %if.then, label %if.end, !dbg !4907

if.then:                                          ; preds = %cond.end18
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4908
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4909
  %il37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !4909
  %rtl38 = bitcast %union.basic_block_il_dependent* %il37 to %struct.rtl_bb_info**, !dbg !4909
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl38, align 8, !dbg !4909
  %end_39 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !4909
  store %struct.rtx_def* %28, %struct.rtx_def** %end_39, align 8, !dbg !4910
  br label %if.end, !dbg !4909

if.end:                                           ; preds = %if.then, %cond.end18
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4911
  %32 = load i32, i32* %seqno.addr, align 4, !dbg !4912
  call void @prepare_insn_expr(%struct.rtx_def* %31, i32 %32), !dbg !4913
  %33 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !4914
  ret %struct.rtx_def* %33, !dbg !4915
}

declare dso_local void @df_insn_change_bb(%struct.rtx_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @prepare_insn_expr(%struct.rtx_def* %insn, i32 %seqno) #0 !dbg !4916 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %seqno.addr = alloca i32, align 4
  %expr = alloca %struct._expr*, align 8
  %ds = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4917, metadata !DIExpression()), !dbg !4918
  store i32 %seqno, i32* %seqno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %seqno.addr, metadata !4919, metadata !DIExpression()), !dbg !4920
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !4921, metadata !DIExpression()), !dbg !4922
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4923
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !4923
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4923

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4923
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !4923
  br label %cond.end, !dbg !4923

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4923

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4923
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4923
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !4923
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !4923

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4923
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !4923
  br label %cond.end5, !dbg !4923

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !4923

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !4923
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4923
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !4923
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4923
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4923
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4923
  %5 = load i32, i32* %rt_int, align 8, !dbg !4923
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !4923
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !4923
  %expr8 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 0, !dbg !4923
  store %struct._expr* %expr8, %struct._expr** %expr, align 8, !dbg !4922
  call void @llvm.dbg.declare(metadata i32* %ds, metadata !4924, metadata !DIExpression()), !dbg !4925
  %6 = load i32, i32* %seqno.addr, align 4, !dbg !4926
  %7 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4927
  %tobool9 = icmp ne %struct.VEC_sel_insn_data_def_heap* %7, null, !dbg !4927
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !4927

cond.true10:                                      ; preds = %cond.end5
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4927
  %base11 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %8, i32 0, i32 0, !dbg !4927
  br label %cond.end13, !dbg !4927

cond.false12:                                     ; preds = %cond.end5
  br label %cond.end13, !dbg !4927

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_sel_insn_data_def_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !4927
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4927
  %tobool15 = icmp ne %struct.VEC_int_heap* %9, null, !dbg !4927
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !4927

cond.true16:                                      ; preds = %cond.end13
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4927
  %base17 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %10, i32 0, i32 0, !dbg !4927
  br label %cond.end19, !dbg !4927

cond.false18:                                     ; preds = %cond.end13
  br label %cond.end19, !dbg !4927

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_int_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !4927
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4927
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !4927
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !4927
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 0, !dbg !4927
  %rt_int24 = bitcast %union.rtunion_def* %arrayidx23 to i32*, !dbg !4927
  %12 = load i32, i32* %rt_int24, align 8, !dbg !4927
  %call25 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond20, i32 %12), !dbg !4927
  %call26 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond14, i32 %call25), !dbg !4927
  %seqno27 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call26, i32 0, i32 2, !dbg !4927
  store i32 %6, i32* %seqno27, align 4, !dbg !4928
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4929
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !4929
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !4929
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 3, !dbg !4929
  %rt_bb = bitcast %union.rtunion_def* %arrayidx30 to %struct.basic_block_def**, !dbg !4929
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !4929
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !4929
  %15 = load i32, i32* %index, align 8, !dbg !4929
  %add = add nsw i32 %15, 0, !dbg !4929
  %16 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4930
  %orig_bb_index = getelementptr inbounds %struct._expr, %struct._expr* %16, i32 0, i32 6, !dbg !4930
  store i32 %add, i32* %orig_bb_index, align 4, !dbg !4931
  %17 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4932
  %spec = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 1, !dbg !4932
  store i32 0, i32* %spec, align 8, !dbg !4933
  %18 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4934
  %orig_sched_cycle = getelementptr inbounds %struct._expr, %struct._expr* %18, i32 0, i32 9, !dbg !4934
  store i32 0, i32* %orig_sched_cycle, align 8, !dbg !4935
  %19 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4936
  %was_substituted = getelementptr inbounds %struct._expr, %struct._expr* %19, i32 0, i32 12, !dbg !4936
  %bf.load = load i8, i8* %was_substituted, align 1, !dbg !4937
  %bf.clear = and i8 %bf.load, -3, !dbg !4937
  store i8 %bf.clear, i8* %was_substituted, align 1, !dbg !4937
  %20 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4938
  %was_renamed = getelementptr inbounds %struct._expr, %struct._expr* %20, i32 0, i32 12, !dbg !4938
  %bf.load31 = load i8, i8* %was_renamed, align 1, !dbg !4939
  %bf.clear32 = and i8 %bf.load31, -5, !dbg !4939
  store i8 %bf.clear32, i8* %was_renamed, align 1, !dbg !4939
  %21 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4940
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %21, i32 0, i32 11, !dbg !4940
  store i8 1, i8* %target_available, align 8, !dbg !4941
  %22 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4942
  %tobool33 = icmp ne %struct.VEC_sel_insn_data_def_heap* %22, null, !dbg !4942
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !4942

cond.true34:                                      ; preds = %cond.end19
  %23 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4942
  %base35 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %23, i32 0, i32 0, !dbg !4942
  br label %cond.end37, !dbg !4942

cond.false36:                                     ; preds = %cond.end19
  br label %cond.end37, !dbg !4942

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_sel_insn_data_def_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !4942
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4942
  %tobool39 = icmp ne %struct.VEC_int_heap* %24, null, !dbg !4942
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !4942

cond.true40:                                      ; preds = %cond.end37
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4942
  %base41 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !4942
  br label %cond.end43, !dbg !4942

cond.false42:                                     ; preds = %cond.end37
  br label %cond.end43, !dbg !4942

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_int_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !4942
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4942
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !4942
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !4942
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !4942
  %rt_int48 = bitcast %union.rtunion_def* %arrayidx47 to i32*, !dbg !4942
  %27 = load i32, i32* %rt_int48, align 8, !dbg !4942
  %call49 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond44, i32 %27), !dbg !4942
  %call50 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond38, i32 %call49), !dbg !4942
  %live_valid_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call50, i32 0, i32 13, !dbg !4942
  %bf.load51 = load i8, i8* %live_valid_p, align 4, !dbg !4943
  %bf.clear52 = and i8 %bf.load51, -2, !dbg !4943
  store i8 %bf.clear52, i8* %live_valid_p, align 4, !dbg !4943
  %28 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4944
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %28, i32 0, i32 7, !dbg !4944
  %29 = load i32, i32* %spec_done_ds, align 8, !dbg !4944
  store i32 %29, i32* %ds, align 4, !dbg !4945
  %30 = load i32, i32* %ds, align 4, !dbg !4946
  %tobool53 = icmp ne i32 %30, 0, !dbg !4946
  br i1 %tobool53, label %if.then, label %if.end, !dbg !4948

if.then:                                          ; preds = %cond.end43
  %31 = load i32, i32* %ds, align 4, !dbg !4949
  %call54 = call i32 @ds_get_max_dep_weak(i32 %31), !dbg !4950
  %32 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4951
  %spec_done_ds55 = getelementptr inbounds %struct._expr, %struct._expr* %32, i32 0, i32 7, !dbg !4951
  store i32 %call54, i32* %spec_done_ds55, align 8, !dbg !4952
  br label %if.end, !dbg !4951

if.end:                                           ; preds = %if.then, %cond.end43
  %33 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !4953
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 10, !dbg !4953
  call void @free_history_vect(%struct.VEC_expr_history_def_heap** %history_of_changes), !dbg !4954
  ret void, !dbg !4955
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @find_in_history_vect(%struct.VEC_expr_history_def_heap* %vect, %struct.rtx_def* %insn, %struct.vinsn_def* %new_vinsn, i8 zeroext %originators_p) #0 !dbg !4956 {
entry:
  %retval = alloca i32, align 4
  %vect.addr = alloca %struct.VEC_expr_history_def_heap*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %new_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %originators_p.addr = alloca i8, align 1
  %ind = alloca i32, align 4
  %uid = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  store %struct.VEC_expr_history_def_heap* %vect, %struct.VEC_expr_history_def_heap** %vect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %vect.addr, metadata !4959, metadata !DIExpression()), !dbg !4960
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !4961, metadata !DIExpression()), !dbg !4962
  store %struct.vinsn_def* %new_vinsn, %struct.vinsn_def** %new_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %new_vinsn.addr, metadata !4963, metadata !DIExpression()), !dbg !4964
  store i8 %originators_p, i8* %originators_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %originators_p.addr, metadata !4965, metadata !DIExpression()), !dbg !4966
  call void @llvm.dbg.declare(metadata i32* %ind, metadata !4967, metadata !DIExpression()), !dbg !4968
  %0 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !4969
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4971
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !4971
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4971
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4971
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !4971
  %2 = load i32, i32* %rt_int, align 8, !dbg !4971
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vinsn.addr, align 8, !dbg !4972
  %call = call zeroext i8 @find_in_history_vect_1(%struct.VEC_expr_history_def_heap* %0, i32 %2, %struct.vinsn_def* %3, i8 zeroext 0, i32* %ind), !dbg !4973
  %tobool = icmp ne i8 %call, 0, !dbg !4973
  br i1 %tobool, label %if.then, label %if.end, !dbg !4974

if.then:                                          ; preds = %entry
  %4 = load i32, i32* %ind, align 4, !dbg !4975
  store i32 %4, i32* %retval, align 4, !dbg !4976
  br label %return, !dbg !4976

if.end:                                           ; preds = %entry
  %5 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4977
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %5, null, !dbg !4977
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !4977

cond.true:                                        ; preds = %if.end
  %6 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4977
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %6, i32 0, i32 0, !dbg !4977
  br label %cond.end, !dbg !4977

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !4977

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4977
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4977
  %tobool2 = icmp ne %struct.VEC_int_heap* %7, null, !dbg !4977
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !4977

cond.true3:                                       ; preds = %cond.end
  %8 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4977
  %base4 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %8, i32 0, i32 0, !dbg !4977
  br label %cond.end6, !dbg !4977

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !4977

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_int_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !4977
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4977
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !4977
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !4977
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !4977
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !4977
  %10 = load i32, i32* %rt_int11, align 8, !dbg !4977
  %call12 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond7, i32 %10), !dbg !4977
  %call13 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call12), !dbg !4977
  %originators = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call13, i32 0, i32 6, !dbg !4977
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %originators, align 8, !dbg !4977
  %tobool14 = icmp ne %struct.bitmap_head_def* %11, null, !dbg !4977
  br i1 %tobool14, label %land.lhs.true, label %if.end42, !dbg !4979

land.lhs.true:                                    ; preds = %cond.end6
  %12 = load i8, i8* %originators_p.addr, align 1, !dbg !4980
  %conv = zext i8 %12 to i32, !dbg !4980
  %tobool15 = icmp ne i32 %conv, 0, !dbg !4980
  br i1 %tobool15, label %if.then16, label %if.end42, !dbg !4981

if.then16:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !4982, metadata !DIExpression()), !dbg !4984
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !4985, metadata !DIExpression()), !dbg !4993
  %13 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4994
  %tobool17 = icmp ne %struct.VEC_sel_insn_data_def_heap* %13, null, !dbg !4994
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !4994

cond.true18:                                      ; preds = %if.then16
  %14 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !4994
  %base19 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %14, i32 0, i32 0, !dbg !4994
  br label %cond.end21, !dbg !4994

cond.false20:                                     ; preds = %if.then16
  br label %cond.end21, !dbg !4994

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_sel_insn_data_def_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !4994
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4994
  %tobool23 = icmp ne %struct.VEC_int_heap* %15, null, !dbg !4994
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !4994

cond.true24:                                      ; preds = %cond.end21
  %16 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !4994
  %base25 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %16, i32 0, i32 0, !dbg !4994
  br label %cond.end27, !dbg !4994

cond.false26:                                     ; preds = %cond.end21
  br label %cond.end27, !dbg !4994

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_int_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !4994
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !4994
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !4994
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !4994
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !4994
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !4994
  %18 = load i32, i32* %rt_int32, align 8, !dbg !4994
  %call33 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond28, i32 %18), !dbg !4994
  %call34 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond22, i32 %call33), !dbg !4994
  %originators35 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call34, i32 0, i32 6, !dbg !4994
  %19 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %originators35, align 8, !dbg !4994
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %19, i32 0, i32* %uid), !dbg !4994
  br label %for.cond, !dbg !4994

for.cond:                                         ; preds = %for.inc, %cond.end27
  %call36 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %uid), !dbg !4996
  %tobool37 = icmp ne i8 %call36, 0, !dbg !4994
  br i1 %tobool37, label %for.body, label %for.end, !dbg !4994

for.body:                                         ; preds = %for.cond
  %20 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !4998
  %21 = load i32, i32* %uid, align 4, !dbg !5000
  %22 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vinsn.addr, align 8, !dbg !5001
  %call38 = call zeroext i8 @find_in_history_vect_1(%struct.VEC_expr_history_def_heap* %20, i32 %21, %struct.vinsn_def* %22, i8 zeroext 0, i32* %ind), !dbg !5002
  %tobool39 = icmp ne i8 %call38, 0, !dbg !5002
  br i1 %tobool39, label %if.then40, label %if.end41, !dbg !5003

if.then40:                                        ; preds = %for.body
  %23 = load i32, i32* %ind, align 4, !dbg !5004
  store i32 %23, i32* %retval, align 4, !dbg !5005
  br label %return, !dbg !5005

if.end41:                                         ; preds = %for.body
  br label %for.inc, !dbg !5006

for.inc:                                          ; preds = %if.end41
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %uid), !dbg !4996
  br label %for.cond, !dbg !4996, !llvm.loop !5007

for.end:                                          ; preds = %for.cond
  br label %if.end42, !dbg !5009

if.end42:                                         ; preds = %for.end, %land.lhs.true, %cond.end6
  store i32 -1, i32* %retval, align 4, !dbg !5010
  br label %return, !dbg !5010

return:                                           ; preds = %if.end42, %if.then40, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !5011
  ret i32 %24, !dbg !5011
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @find_in_history_vect_1(%struct.VEC_expr_history_def_heap* %vect, i32 %uid, %struct.vinsn_def* %new_vinsn, i8 zeroext %compare_vinsns, i32* %indp) #0 !dbg !5012 {
entry:
  %retval = alloca i8, align 1
  %vect.addr = alloca %struct.VEC_expr_history_def_heap*, align 8
  %uid.addr = alloca i32, align 4
  %new_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %compare_vinsns.addr = alloca i8, align 1
  %indp.addr = alloca i32*, align 8
  %arr = alloca %struct.expr_history_def_1*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %len = alloca i32, align 4
  %auid = alloca i32, align 4
  %avinsn = alloca %struct.vinsn_def*, align 8
  store %struct.VEC_expr_history_def_heap* %vect, %struct.VEC_expr_history_def_heap** %vect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %vect.addr, metadata !5015, metadata !DIExpression()), !dbg !5016
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !5017, metadata !DIExpression()), !dbg !5018
  store %struct.vinsn_def* %new_vinsn, %struct.vinsn_def** %new_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %new_vinsn.addr, metadata !5019, metadata !DIExpression()), !dbg !5020
  store i8 %compare_vinsns, i8* %compare_vinsns.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %compare_vinsns.addr, metadata !5021, metadata !DIExpression()), !dbg !5022
  store i32* %indp, i32** %indp.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %indp.addr, metadata !5023, metadata !DIExpression()), !dbg !5024
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %arr, metadata !5025, metadata !DIExpression()), !dbg !5027
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5028, metadata !DIExpression()), !dbg !5029
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5030, metadata !DIExpression()), !dbg !5031
  call void @llvm.dbg.declare(metadata i32* %len, metadata !5032, metadata !DIExpression()), !dbg !5033
  %0 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !5034
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %0, null, !dbg !5034
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5034

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !5034
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %1, i32 0, i32 0, !dbg !5034
  br label %cond.end, !dbg !5034

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5034
  %call = call i32 @VEC_expr_history_def_base_length(%struct.VEC_expr_history_def_base* %cond), !dbg !5034
  store i32 %call, i32* %len, align 4, !dbg !5033
  %2 = load i32, i32* %len, align 4, !dbg !5035
  %cmp = icmp eq i32 %2, 0, !dbg !5037
  br i1 %cmp, label %if.then, label %if.end, !dbg !5038

if.then:                                          ; preds = %cond.end
  %3 = load i32*, i32** %indp.addr, align 8, !dbg !5039
  store i32 0, i32* %3, align 4, !dbg !5041
  store i8 0, i8* %retval, align 1, !dbg !5042
  br label %return, !dbg !5042

if.end:                                           ; preds = %cond.end
  %4 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !5043
  %tobool1 = icmp ne %struct.VEC_expr_history_def_heap* %4, null, !dbg !5043
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5043

cond.true2:                                       ; preds = %if.end
  %5 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect.addr, align 8, !dbg !5043
  %base3 = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %5, i32 0, i32 0, !dbg !5043
  br label %cond.end5, !dbg !5043

cond.false4:                                      ; preds = %if.end
  br label %cond.end5, !dbg !5043

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_expr_history_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !5043
  %call7 = call %struct.expr_history_def_1* @VEC_expr_history_def_base_address(%struct.VEC_expr_history_def_base* %cond6), !dbg !5043
  store %struct.expr_history_def_1* %call7, %struct.expr_history_def_1** %arr, align 8, !dbg !5044
  store i32 0, i32* %i, align 4, !dbg !5045
  %6 = load i32, i32* %len, align 4, !dbg !5046
  %sub = sub nsw i32 %6, 1, !dbg !5047
  store i32 %sub, i32* %j, align 4, !dbg !5048
  br label %while.cond, !dbg !5049

while.cond:                                       ; preds = %if.end21, %cond.end5
  %7 = load i32, i32* %i, align 4, !dbg !5050
  %8 = load i32, i32* %j, align 4, !dbg !5051
  %cmp8 = icmp sle i32 %7, %8, !dbg !5052
  br i1 %cmp8, label %while.body, label %while.end, !dbg !5049

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata i32* %auid, metadata !5053, metadata !DIExpression()), !dbg !5055
  %9 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %arr, align 8, !dbg !5056
  %10 = load i32, i32* %i, align 4, !dbg !5057
  %idxprom = sext i32 %10 to i64, !dbg !5056
  %arrayidx = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %9, i64 %idxprom, !dbg !5056
  %uid9 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %arrayidx, i32 0, i32 0, !dbg !5058
  %11 = load i32, i32* %uid9, align 8, !dbg !5058
  store i32 %11, i32* %auid, align 4, !dbg !5055
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %avinsn, metadata !5059, metadata !DIExpression()), !dbg !5060
  %12 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %arr, align 8, !dbg !5061
  %13 = load i32, i32* %i, align 4, !dbg !5062
  %idxprom10 = sext i32 %13 to i64, !dbg !5061
  %arrayidx11 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %12, i64 %idxprom10, !dbg !5061
  %new_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %arrayidx11, i32 0, i32 2, !dbg !5063
  %14 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn, align 8, !dbg !5063
  store %struct.vinsn_def* %14, %struct.vinsn_def** %avinsn, align 8, !dbg !5060
  %15 = load i32, i32* %auid, align 4, !dbg !5064
  %16 = load i32, i32* %uid.addr, align 4, !dbg !5066
  %cmp12 = icmp eq i32 %15, %16, !dbg !5067
  br i1 %cmp12, label %land.lhs.true, label %if.else, !dbg !5068

land.lhs.true:                                    ; preds = %while.body
  %17 = load i8, i8* %compare_vinsns.addr, align 1, !dbg !5069
  %tobool13 = icmp ne i8 %17, 0, !dbg !5069
  br i1 %tobool13, label %lor.lhs.false, label %if.then16, !dbg !5070

lor.lhs.false:                                    ; preds = %land.lhs.true
  %18 = load %struct.vinsn_def*, %struct.vinsn_def** %avinsn, align 8, !dbg !5071
  %19 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vinsn.addr, align 8, !dbg !5072
  %call14 = call zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %18, %struct.vinsn_def* %19), !dbg !5073
  %conv = zext i8 %call14 to i32, !dbg !5073
  %tobool15 = icmp ne i32 %conv, 0, !dbg !5073
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !5074

if.then16:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %20 = load i32, i32* %i, align 4, !dbg !5075
  %21 = load i32*, i32** %indp.addr, align 8, !dbg !5077
  store i32 %20, i32* %21, align 4, !dbg !5078
  store i8 1, i8* %retval, align 1, !dbg !5079
  br label %return, !dbg !5079

if.else:                                          ; preds = %lor.lhs.false, %while.body
  %22 = load i32, i32* %auid, align 4, !dbg !5080
  %23 = load i32, i32* %uid.addr, align 4, !dbg !5082
  %cmp17 = icmp ugt i32 %22, %23, !dbg !5083
  br i1 %cmp17, label %if.then19, label %if.end20, !dbg !5084

if.then19:                                        ; preds = %if.else
  br label %while.end, !dbg !5085

if.end20:                                         ; preds = %if.else
  br label %if.end21

if.end21:                                         ; preds = %if.end20
  %24 = load i32, i32* %i, align 4, !dbg !5086
  %inc = add nsw i32 %24, 1, !dbg !5086
  store i32 %inc, i32* %i, align 4, !dbg !5086
  br label %while.cond, !dbg !5049, !llvm.loop !5087

while.end:                                        ; preds = %if.then19, %while.cond
  %25 = load i32, i32* %i, align 4, !dbg !5089
  %26 = load i32*, i32** %indp.addr, align 8, !dbg !5090
  store i32 %25, i32* %26, align 4, !dbg !5091
  store i8 0, i8* %retval, align 1, !dbg !5092
  br label %return, !dbg !5092

return:                                           ; preds = %while.end, %if.then16, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !5093
  ret i8 %27, !dbg !5093
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !5094 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5102, metadata !DIExpression()), !dbg !5103
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !5104, metadata !DIExpression()), !dbg !5105
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !5106, metadata !DIExpression()), !dbg !5107
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5108, metadata !DIExpression()), !dbg !5109
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !5110
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !5111
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !5111
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5112
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !5113
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !5114
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5115
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !5116
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !5117
  br label %while.body, !dbg !5118

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5119
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !5122
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !5122
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !5119
  br i1 %tobool, label %if.end, label %if.then, !dbg !5123

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5124
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !5126
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !5127
  br label %while.end, !dbg !5128

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5129
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !5131
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !5131
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !5132
  %9 = load i32, i32* %indx, align 8, !dbg !5132
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !5133
  %div = udiv i32 %10, 128, !dbg !5134
  %cmp = icmp uge i32 %9, %div, !dbg !5135
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !5136

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !5137

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5138
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !5139
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !5139
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !5140
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5140
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5141
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !5142
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !5143
  br label %while.body, !dbg !5118, !llvm.loop !5144

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5146
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5148
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !5148
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !5149
  %17 = load i32, i32* %indx9, align 8, !dbg !5149
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !5150
  %div10 = udiv i32 %18, 128, !dbg !5151
  %cmp11 = icmp ne i32 %17, %div10, !dbg !5152
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !5153

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5154
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !5155
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !5155
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !5156
  %21 = load i32, i32* %indx14, align 8, !dbg !5156
  %mul = mul i32 %21, 128, !dbg !5157
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !5158
  br label %if.end15, !dbg !5159

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !5160
  %div16 = udiv i32 %22, 64, !dbg !5161
  %rem = urem i32 %div16, 2, !dbg !5162
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5163
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !5164
  store i32 %rem, i32* %word_no, align 8, !dbg !5165
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5166
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !5167
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !5167
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !5168
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5169
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !5170
  %27 = load i32, i32* %word_no18, align 8, !dbg !5170
  %idxprom = zext i32 %27 to i64, !dbg !5166
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !5166
  %28 = load i64, i64* %arrayidx, align 8, !dbg !5166
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5171
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !5172
  store i64 %28, i64* %bits19, align 8, !dbg !5173
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !5174
  %rem20 = urem i32 %30, 64, !dbg !5175
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5176
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !5177
  %32 = load i64, i64* %bits21, align 8, !dbg !5178
  %sh_prom = zext i32 %rem20 to i64, !dbg !5178
  %shr = lshr i64 %32, %sh_prom, !dbg !5178
  store i64 %shr, i64* %bits21, align 8, !dbg !5178
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5179
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !5180
  %34 = load i64, i64* %bits22, align 8, !dbg !5180
  %tobool23 = icmp ne i64 %34, 0, !dbg !5181
  %lnot = xor i1 %tobool23, true, !dbg !5181
  %lnot.ext = zext i1 %lnot to i32, !dbg !5181
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !5182
  %add = add i32 %35, %lnot.ext, !dbg !5182
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !5182
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !5183
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !5184
  store i32 %36, i32* %37, align 4, !dbg !5185
  ret void, !dbg !5186
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5187 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5190, metadata !DIExpression()), !dbg !5191
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5192, metadata !DIExpression()), !dbg !5193
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5194
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5196
  %1 = load i64, i64* %bits, align 8, !dbg !5196
  %tobool = icmp ne i64 %1, 0, !dbg !5194
  br i1 %tobool, label %if.then, label %if.end, !dbg !5197

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !5198

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !5199), !dbg !5201
  br label %while.cond, !dbg !5202

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5203
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !5204
  %3 = load i64, i64* %bits1, align 8, !dbg !5204
  %and = and i64 %3, 1, !dbg !5205
  %tobool2 = icmp ne i64 %and, 0, !dbg !5206
  %lnot = xor i1 %tobool2, true, !dbg !5206
  br i1 %lnot, label %while.body, label %while.end, !dbg !5202

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5207
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !5209
  %5 = load i64, i64* %bits3, align 8, !dbg !5210
  %shr = lshr i64 %5, 1, !dbg !5210
  store i64 %shr, i64* %bits3, align 8, !dbg !5210
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !5211
  %7 = load i32, i32* %6, align 4, !dbg !5212
  %add = add i32 %7, 1, !dbg !5212
  store i32 %add, i32* %6, align 4, !dbg !5212
  br label %while.cond, !dbg !5202, !llvm.loop !5213

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !5215
  br label %return, !dbg !5215

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !5216
  %9 = load i32, i32* %8, align 4, !dbg !5217
  %add4 = add i32 %9, 64, !dbg !5218
  %sub = sub i32 %add4, 1, !dbg !5219
  %div = udiv i32 %sub, 64, !dbg !5220
  %mul = mul i32 %div, 64, !dbg !5221
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !5222
  store i32 %mul, i32* %10, align 4, !dbg !5223
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5224
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !5225
  %12 = load i32, i32* %word_no, align 8, !dbg !5226
  %inc = add i32 %12, 1, !dbg !5226
  store i32 %inc, i32* %word_no, align 8, !dbg !5226
  br label %while.body6, !dbg !5227

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !5228

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5230
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !5231
  %14 = load i32, i32* %word_no8, align 8, !dbg !5231
  %cmp = icmp ne i32 %14, 2, !dbg !5232
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !5228

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5233
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !5235
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !5235
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !5236
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5237
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !5238
  %18 = load i32, i32* %word_no11, align 8, !dbg !5238
  %idxprom = zext i32 %18 to i64, !dbg !5233
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !5233
  %19 = load i64, i64* %arrayidx, align 8, !dbg !5233
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5239
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !5240
  store i64 %19, i64* %bits12, align 8, !dbg !5241
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5242
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !5244
  %22 = load i64, i64* %bits13, align 8, !dbg !5244
  %tobool14 = icmp ne i64 %22, 0, !dbg !5242
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !5245

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !5246

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !5247
  %24 = load i32, i32* %23, align 4, !dbg !5248
  %add17 = add i32 %24, 64, !dbg !5248
  store i32 %add17, i32* %23, align 4, !dbg !5248
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5249
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !5250
  %26 = load i32, i32* %word_no18, align 8, !dbg !5251
  %inc19 = add i32 %26, 1, !dbg !5251
  store i32 %inc19, i32* %word_no18, align 8, !dbg !5251
  br label %while.cond7, !dbg !5228, !llvm.loop !5252

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5254
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !5255
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !5255
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !5256
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !5256
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5257
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !5258
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !5259
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5260
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !5262
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !5262
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !5260
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5263

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !5264
  br label %return, !dbg !5264

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5265
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !5266
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !5266
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !5267
  %35 = load i32, i32* %indx, align 8, !dbg !5267
  %mul28 = mul i32 %35, 128, !dbg !5268
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !5269
  store i32 %mul28, i32* %36, align 4, !dbg !5270
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5271
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !5272
  store i32 0, i32* %word_no29, align 8, !dbg !5273
  br label %while.body6, !dbg !5227, !llvm.loop !5274

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !5276
  ret i8 %38, !dbg !5276
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !5277 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !5280, metadata !DIExpression()), !dbg !5281
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !5282, metadata !DIExpression()), !dbg !5283
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !5284
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !5285
  %1 = load i64, i64* %bits, align 8, !dbg !5286
  %shr = lshr i64 %1, 1, !dbg !5286
  store i64 %shr, i64* %bits, align 8, !dbg !5286
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !5287
  %3 = load i32, i32* %2, align 4, !dbg !5288
  %add = add i32 %3, 1, !dbg !5288
  store i32 %add, i32* %2, align 4, !dbg !5288
  ret void, !dbg !5289
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @insert_in_history_vect(%struct.VEC_expr_history_def_heap** %pvect, i32 %uid, i32 %type, %struct.vinsn_def* %old_expr_vinsn, %struct.vinsn_def* %new_expr_vinsn, i32 %spec_ds) #0 !dbg !5290 {
entry:
  %pvect.addr = alloca %struct.VEC_expr_history_def_heap**, align 8
  %uid.addr = alloca i32, align 4
  %type.addr = alloca i32, align 4
  %old_expr_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %new_expr_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %spec_ds.addr = alloca i32, align 4
  %vect = alloca %struct.VEC_expr_history_def_heap*, align 8
  %temp = alloca %struct.expr_history_def_1, align 8
  %res = alloca i8, align 1
  %ind = alloca i32, align 4
  %phist = alloca %struct.expr_history_def_1*, align 8
  store %struct.VEC_expr_history_def_heap** %pvect, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap*** %pvect.addr, metadata !5294, metadata !DIExpression()), !dbg !5295
  store i32 %uid, i32* %uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %uid.addr, metadata !5296, metadata !DIExpression()), !dbg !5297
  store i32 %type, i32* %type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %type.addr, metadata !5298, metadata !DIExpression()), !dbg !5299
  store %struct.vinsn_def* %old_expr_vinsn, %struct.vinsn_def** %old_expr_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %old_expr_vinsn.addr, metadata !5300, metadata !DIExpression()), !dbg !5301
  store %struct.vinsn_def* %new_expr_vinsn, %struct.vinsn_def** %new_expr_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %new_expr_vinsn.addr, metadata !5302, metadata !DIExpression()), !dbg !5303
  store i32 %spec_ds, i32* %spec_ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %spec_ds.addr, metadata !5304, metadata !DIExpression()), !dbg !5305
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %vect, metadata !5306, metadata !DIExpression()), !dbg !5307
  %0 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !5308
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %0, align 8, !dbg !5309
  store %struct.VEC_expr_history_def_heap* %1, %struct.VEC_expr_history_def_heap** %vect, align 8, !dbg !5307
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1* %temp, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata i8* %res, metadata !5312, metadata !DIExpression()), !dbg !5313
  call void @llvm.dbg.declare(metadata i32* %ind, metadata !5314, metadata !DIExpression()), !dbg !5315
  %2 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect, align 8, !dbg !5316
  %3 = load i32, i32* %uid.addr, align 4, !dbg !5317
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn.addr, align 8, !dbg !5318
  %call = call zeroext i8 @find_in_history_vect_1(%struct.VEC_expr_history_def_heap* %2, i32 %3, %struct.vinsn_def* %4, i8 zeroext 1, i32* %ind), !dbg !5319
  store i8 %call, i8* %res, align 1, !dbg !5320
  %5 = load i8, i8* %res, align 1, !dbg !5321
  %tobool = icmp ne i8 %5, 0, !dbg !5321
  br i1 %tobool, label %if.then, label %if.end8, !dbg !5323

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %phist, metadata !5324, metadata !DIExpression()), !dbg !5326
  %6 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect, align 8, !dbg !5327
  %tobool1 = icmp ne %struct.VEC_expr_history_def_heap* %6, null, !dbg !5327
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5327

cond.true:                                        ; preds = %if.then
  %7 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect, align 8, !dbg !5327
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %7, i32 0, i32 0, !dbg !5327
  br label %cond.end, !dbg !5327

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5327

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5327
  %8 = load i32, i32* %ind, align 4, !dbg !5327
  %call2 = call %struct.expr_history_def_1* @VEC_expr_history_def_base_index(%struct.VEC_expr_history_def_base* %cond, i32 %8), !dbg !5327
  store %struct.expr_history_def_1* %call2, %struct.expr_history_def_1** %phist, align 8, !dbg !5326
  %9 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5328
  %spec_ds3 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %9, i32 0, i32 3, !dbg !5330
  %10 = load i32, i32* %spec_ds3, align 8, !dbg !5330
  %11 = load i32, i32* %spec_ds.addr, align 4, !dbg !5331
  %cmp = icmp ne i32 %10, %11, !dbg !5332
  br i1 %cmp, label %if.then4, label %if.end, !dbg !5333

if.then4:                                         ; preds = %cond.end
  %12 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5334
  %spec_ds5 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %12, i32 0, i32 3, !dbg !5335
  %13 = load i32, i32* %spec_ds5, align 8, !dbg !5335
  %14 = load i32, i32* %spec_ds.addr, align 4, !dbg !5336
  %call6 = call i32 @ds_max_merge(i32 %13, i32 %14), !dbg !5337
  %15 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5338
  %spec_ds7 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %15, i32 0, i32 3, !dbg !5339
  store i32 %call6, i32* %spec_ds7, align 8, !dbg !5340
  br label %if.end, !dbg !5338

if.end:                                           ; preds = %if.then4, %cond.end
  br label %return, !dbg !5341

if.end8:                                          ; preds = %entry
  %16 = load i32, i32* %uid.addr, align 4, !dbg !5342
  %uid9 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %temp, i32 0, i32 0, !dbg !5343
  store i32 %16, i32* %uid9, align 8, !dbg !5344
  %17 = load %struct.vinsn_def*, %struct.vinsn_def** %old_expr_vinsn.addr, align 8, !dbg !5345
  %old_expr_vinsn10 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %temp, i32 0, i32 1, !dbg !5346
  store %struct.vinsn_def* %17, %struct.vinsn_def** %old_expr_vinsn10, align 8, !dbg !5347
  %18 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn.addr, align 8, !dbg !5348
  %new_expr_vinsn11 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %temp, i32 0, i32 2, !dbg !5349
  store %struct.vinsn_def* %18, %struct.vinsn_def** %new_expr_vinsn11, align 8, !dbg !5350
  %19 = load i32, i32* %spec_ds.addr, align 4, !dbg !5351
  %spec_ds12 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %temp, i32 0, i32 3, !dbg !5352
  store i32 %19, i32* %spec_ds12, align 8, !dbg !5353
  %20 = load i32, i32* %type.addr, align 4, !dbg !5354
  %type13 = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %temp, i32 0, i32 4, !dbg !5355
  store i32 %20, i32* %type13, align 4, !dbg !5356
  %21 = load %struct.vinsn_def*, %struct.vinsn_def** %old_expr_vinsn.addr, align 8, !dbg !5357
  call void @vinsn_attach(%struct.vinsn_def* %21), !dbg !5358
  %22 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn.addr, align 8, !dbg !5359
  call void @vinsn_attach(%struct.vinsn_def* %22), !dbg !5360
  %23 = load i32, i32* %ind, align 4, !dbg !5361
  %call14 = call %struct.expr_history_def_1* @VEC_expr_history_def_heap_safe_insert(%struct.VEC_expr_history_def_heap** %vect, i32 %23, %struct.expr_history_def_1* %temp), !dbg !5361
  %24 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %vect, align 8, !dbg !5362
  %25 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !5363
  store %struct.VEC_expr_history_def_heap* %24, %struct.VEC_expr_history_def_heap** %25, align 8, !dbg !5364
  br label %return, !dbg !5365

return:                                           ; preds = %if.end8, %if.end
  ret void, !dbg !5365
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_history_def_1* @VEC_expr_history_def_base_index(%struct.VEC_expr_history_def_base* %vec_, i32 %ix_) #0 !dbg !5366 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !5370, metadata !DIExpression()), !dbg !5371
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5372, metadata !DIExpression()), !dbg !5371
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5371
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %0, null, !dbg !5371
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5371

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5371
  %2 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5371
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %2, i32 0, i32 0, !dbg !5371
  %3 = load i32, i32* %num, align 8, !dbg !5371
  %cmp = icmp ult i32 %1, %3, !dbg !5371
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5373
  %land.ext = zext i1 %4 to i32, !dbg !5371
  %5 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5371
  %vec = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %5, i32 0, i32 2, !dbg !5371
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5371
  %idxprom = zext i32 %6 to i64, !dbg !5371
  %arrayidx = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec, i64 0, i64 %idxprom, !dbg !5371
  ret %struct.expr_history_def_1* %arrayidx, !dbg !5371
}

declare dso_local i32 @ds_max_merge(i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_history_def_1* @VEC_expr_history_def_heap_safe_insert(%struct.VEC_expr_history_def_heap** %vec_, i32 %ix_, %struct.expr_history_def_1* %obj_) #0 !dbg !5374 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_heap**, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.expr_history_def_1*, align 8
  store %struct.VEC_expr_history_def_heap** %vec_, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap*** %vec_.addr, metadata !5379, metadata !DIExpression()), !dbg !5380
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5381, metadata !DIExpression()), !dbg !5380
  store %struct.expr_history_def_1* %obj_, %struct.expr_history_def_1** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %obj_.addr, metadata !5382, metadata !DIExpression()), !dbg !5380
  %0 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !5380
  %call = call i32 @VEC_expr_history_def_heap_reserve(%struct.VEC_expr_history_def_heap** %0, i32 1), !dbg !5380
  %1 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !5380
  %2 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %1, align 8, !dbg !5380
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %2, null, !dbg !5380
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5380

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !5380
  %4 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %3, align 8, !dbg !5380
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %4, i32 0, i32 0, !dbg !5380
  br label %cond.end, !dbg !5380

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5380

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5380
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5380
  %6 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %obj_.addr, align 8, !dbg !5380
  %call1 = call %struct.expr_history_def_1* @VEC_expr_history_def_base_quick_insert(%struct.VEC_expr_history_def_base* %cond, i32 %5, %struct.expr_history_def_1* %6), !dbg !5380
  ret %struct.expr_history_def_1* %call1, !dbg !5380
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %x, %struct.vinsn_def* %y) #0 !dbg !5383 {
entry:
  %retval = alloca i8, align 1
  %x.addr = alloca %struct.vinsn_def*, align 8
  %y.addr = alloca %struct.vinsn_def*, align 8
  %repcf = alloca i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)*, align 8
  store %struct.vinsn_def* %x, %struct.vinsn_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %x.addr, metadata !5386, metadata !DIExpression()), !dbg !5387
  store %struct.vinsn_def* %y, %struct.vinsn_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %y.addr, metadata !5388, metadata !DIExpression()), !dbg !5389
  call void @llvm.dbg.declare(metadata i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)** %repcf, metadata !5390, metadata !DIExpression()), !dbg !5396
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5397
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5399
  %cmp = icmp eq %struct.vinsn_def* %0, %1, !dbg !5400
  br i1 %cmp, label %if.then, label %if.end, !dbg !5401

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !5402
  br label %return, !dbg !5402

if.end:                                           ; preds = %entry
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5403
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 1, !dbg !5403
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !5403
  %3 = load i32, i32* %type, align 8, !dbg !5403
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5405
  %id1 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 1, !dbg !5405
  %type2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id1, i32 0, i32 0, !dbg !5405
  %5 = load i32, i32* %type2, align 8, !dbg !5405
  %cmp3 = icmp ne i32 %3, %5, !dbg !5406
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !5407

if.then4:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !5408
  br label %return, !dbg !5408

if.end5:                                          ; preds = %if.end
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5409
  %hash = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 2, !dbg !5409
  %7 = load i32, i32* %hash, align 8, !dbg !5409
  %8 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5411
  %hash6 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %8, i32 0, i32 2, !dbg !5411
  %9 = load i32, i32* %hash6, align 8, !dbg !5411
  %cmp7 = icmp ne i32 %7, %9, !dbg !5412
  br i1 %cmp7, label %if.then8, label %if.end9, !dbg !5413

if.then8:                                         ; preds = %if.end5
  store i8 0, i8* %retval, align 1, !dbg !5414
  br label %return, !dbg !5414

if.end9:                                          ; preds = %if.end5
  %10 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !5415
  %tobool = icmp ne i8 (%struct.rtx_def*)* %10, null, !dbg !5416
  %11 = zext i1 %tobool to i64, !dbg !5416
  %cond = select i1 %tobool, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)* @skip_unspecs_callback, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)* null, !dbg !5416
  store i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)* %cond, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)** %repcf, align 8, !dbg !5417
  %12 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5418
  %id10 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %12, i32 0, i32 1, !dbg !5418
  %type11 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id10, i32 0, i32 0, !dbg !5418
  %13 = load i32, i32* %type11, align 8, !dbg !5418
  %cmp12 = icmp eq i32 %13, 23, !dbg !5418
  br i1 %cmp12, label %if.then13, label %if.end28, !dbg !5420

if.then13:                                        ; preds = %if.end9
  %14 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5421
  %id14 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %14, i32 0, i32 1, !dbg !5421
  %rhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id14, i32 0, i32 2, !dbg !5421
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !5421
  %tobool15 = icmp ne %struct.rtx_def* %15, null, !dbg !5421
  br i1 %tobool15, label %cond.false, label %cond.true, !dbg !5421

cond.true:                                        ; preds = %if.then13
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1583, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5421
  br label %cond.end, !dbg !5421

cond.false:                                       ; preds = %if.then13
  br label %cond.end, !dbg !5421

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond16 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5421
  %16 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5423
  %id17 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %16, i32 0, i32 1, !dbg !5423
  %rhs18 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id17, i32 0, i32 2, !dbg !5423
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rhs18, align 8, !dbg !5423
  %tobool19 = icmp ne %struct.rtx_def* %17, null, !dbg !5423
  br i1 %tobool19, label %cond.false21, label %cond.true20, !dbg !5423

cond.true20:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1584, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5423
  br label %cond.end22, !dbg !5423

cond.false21:                                     ; preds = %cond.end
  br label %cond.end22, !dbg !5423

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !5423
  %18 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5424
  %id24 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %18, i32 0, i32 1, !dbg !5424
  %rhs25 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id24, i32 0, i32 2, !dbg !5424
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rhs25, align 8, !dbg !5424
  %20 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5425
  %id26 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %20, i32 0, i32 1, !dbg !5425
  %rhs27 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id26, i32 0, i32 2, !dbg !5425
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rhs27, align 8, !dbg !5425
  %22 = load i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)*, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)** %repcf, align 8, !dbg !5426
  %call = call i32 @rtx_equal_p_cb(%struct.rtx_def* %19, %struct.rtx_def* %21, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)* %22), !dbg !5427
  %conv = trunc i32 %call to i8, !dbg !5427
  store i8 %conv, i8* %retval, align 1, !dbg !5428
  br label %return, !dbg !5428

if.end28:                                         ; preds = %if.end9
  %23 = load %struct.vinsn_def*, %struct.vinsn_def** %x.addr, align 8, !dbg !5429
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %23, i32 0, i32 0, !dbg !5429
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !5429
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5429
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5429
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5429
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5429
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5429
  %26 = load %struct.vinsn_def*, %struct.vinsn_def** %y.addr, align 8, !dbg !5430
  %insn_rtx29 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %26, i32 0, i32 0, !dbg !5430
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx29, align 8, !dbg !5430
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5430
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !5430
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 5, !dbg !5430
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !5430
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !5430
  %29 = load i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)*, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)** %repcf, align 8, !dbg !5431
  %call34 = call i32 @rtx_equal_p_cb(%struct.rtx_def* %25, %struct.rtx_def* %28, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)* %29), !dbg !5432
  %conv35 = trunc i32 %call34 to i8, !dbg !5432
  store i8 %conv35, i8* %retval, align 1, !dbg !5433
  br label %return, !dbg !5433

return:                                           ; preds = %if.end28, %cond.end22, %if.then8, %if.then4, %if.then
  %30 = load i8, i8* %retval, align 1, !dbg !5434
  ret i8 %30, !dbg !5434
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @skip_unspecs_callback(%struct.rtx_def** %xx, %struct.rtx_def** %yy, %struct.rtx_def** %nx, %struct.rtx_def** %ny) #0 !dbg !5435 {
entry:
  %retval = alloca i32, align 4
  %xx.addr = alloca %struct.rtx_def**, align 8
  %yy.addr = alloca %struct.rtx_def**, align 8
  %nx.addr = alloca %struct.rtx_def**, align 8
  %ny.addr = alloca %struct.rtx_def**, align 8
  %x = alloca %struct.rtx_def*, align 8
  %y = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def** %xx, %struct.rtx_def*** %xx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %xx.addr, metadata !5436, metadata !DIExpression()), !dbg !5437
  store %struct.rtx_def** %yy, %struct.rtx_def*** %yy.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %yy.addr, metadata !5438, metadata !DIExpression()), !dbg !5439
  store %struct.rtx_def** %nx, %struct.rtx_def*** %nx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %nx.addr, metadata !5440, metadata !DIExpression()), !dbg !5441
  store %struct.rtx_def** %ny, %struct.rtx_def*** %ny.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %ny.addr, metadata !5442, metadata !DIExpression()), !dbg !5443
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5444, metadata !DIExpression()), !dbg !5445
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %xx.addr, align 8, !dbg !5446
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !5447
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !5445
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y, metadata !5448, metadata !DIExpression()), !dbg !5449
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %yy.addr, align 8, !dbg !5450
  %3 = load %struct.rtx_def*, %struct.rtx_def** %2, align 8, !dbg !5451
  store %struct.rtx_def* %3, %struct.rtx_def** %y, align 8, !dbg !5449
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5452
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5452
  %bf.load = load i32, i32* %5, align 8, !dbg !5452
  %bf.clear = and i32 %bf.load, 65535, !dbg !5452
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !5454
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5455

land.lhs.true:                                    ; preds = %entry
  %6 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !5456
  %cmp1 = icmp eq i8 (%struct.rtx_def*)* %6, null, !dbg !5457
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !5458

lor.lhs.false:                                    ; preds = %land.lhs.true
  %7 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !5459
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5460
  %call = call zeroext i8 %7(%struct.rtx_def* %8), !dbg !5461
  %conv = zext i8 %call to i32, !dbg !5461
  %tobool = icmp ne i32 %conv, 0, !dbg !5461
  br i1 %tobool, label %if.then, label %if.end, !dbg !5462

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5463
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !5463
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5463
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5463
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !5463
  %10 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !5463
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %10, i32 0, i32 1, !dbg !5463
  %arrayidx2 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !5463
  %11 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx2, align 8, !dbg !5463
  %12 = load %struct.rtx_def**, %struct.rtx_def*** %nx.addr, align 8, !dbg !5465
  store %struct.rtx_def* %11, %struct.rtx_def** %12, align 8, !dbg !5466
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !5467
  %14 = load %struct.rtx_def**, %struct.rtx_def*** %ny.addr, align 8, !dbg !5468
  store %struct.rtx_def* %13, %struct.rtx_def** %14, align 8, !dbg !5469
  store i32 1, i32* %retval, align 4, !dbg !5470
  br label %return, !dbg !5470

if.end:                                           ; preds = %lor.lhs.false, %entry
  %15 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !5471
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !5471
  %bf.load3 = load i32, i32* %16, align 8, !dbg !5471
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !5471
  %cmp5 = icmp eq i32 %bf.clear4, 18, !dbg !5473
  br i1 %cmp5, label %land.lhs.true7, label %if.end21, !dbg !5474

land.lhs.true7:                                   ; preds = %if.end
  %17 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !5475
  %cmp8 = icmp eq i8 (%struct.rtx_def*)* %17, null, !dbg !5476
  br i1 %cmp8, label %if.then14, label %lor.lhs.false10, !dbg !5477

lor.lhs.false10:                                  ; preds = %land.lhs.true7
  %18 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !5478
  %19 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !5479
  %call11 = call zeroext i8 %18(%struct.rtx_def* %19), !dbg !5480
  %conv12 = zext i8 %call11 to i32, !dbg !5480
  %tobool13 = icmp ne i32 %conv12, 0, !dbg !5480
  br i1 %tobool13, label %if.then14, label %if.end21, !dbg !5481

if.then14:                                        ; preds = %lor.lhs.false10, %land.lhs.true7
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5482
  %21 = load %struct.rtx_def**, %struct.rtx_def*** %nx.addr, align 8, !dbg !5484
  store %struct.rtx_def* %20, %struct.rtx_def** %21, align 8, !dbg !5485
  %22 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !5486
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !5486
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !5486
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 0, !dbg !5486
  %rt_rtvec18 = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtvec_def**, !dbg !5486
  %23 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec18, align 8, !dbg !5486
  %elem19 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %23, i32 0, i32 1, !dbg !5486
  %arrayidx20 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem19, i64 0, i64 0, !dbg !5486
  %24 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx20, align 8, !dbg !5486
  %25 = load %struct.rtx_def**, %struct.rtx_def*** %ny.addr, align 8, !dbg !5487
  store %struct.rtx_def* %24, %struct.rtx_def** %25, align 8, !dbg !5488
  store i32 1, i32* %retval, align 4, !dbg !5489
  br label %return, !dbg !5489

if.end21:                                         ; preds = %lor.lhs.false10, %if.end
  store i32 0, i32* %retval, align 4, !dbg !5490
  br label %return, !dbg !5490

return:                                           ; preds = %if.end21, %if.then14, %if.then
  %26 = load i32, i32* %retval, align 4, !dbg !5491
  ret i32 %26, !dbg !5491
}

declare dso_local i32 @rtx_equal_p_cb(%struct.rtx_def*, %struct.rtx_def*, i32 (%struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**, %struct.rtx_def**)*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_expr(%struct._expr* %to, %struct._expr* %from) #0 !dbg !5492 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  %temp = alloca %struct.VEC_expr_history_def_heap*, align 8
  %i = alloca i32, align 4
  %phist = alloca %struct.expr_history_def_1*, align 8
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5495, metadata !DIExpression()), !dbg !5496
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5497, metadata !DIExpression()), !dbg !5498
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %temp, metadata !5499, metadata !DIExpression()), !dbg !5500
  store %struct.VEC_expr_history_def_heap* null, %struct.VEC_expr_history_def_heap** %temp, align 8, !dbg !5500
  %0 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5501
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 10, !dbg !5501
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history_of_changes, align 8, !dbg !5501
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %1, null, !dbg !5501
  br i1 %tobool, label %if.then, label %if.end, !dbg !5503

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5504, metadata !DIExpression()), !dbg !5506
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %phist, metadata !5507, metadata !DIExpression()), !dbg !5508
  %2 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5509
  %history_of_changes1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 10, !dbg !5509
  %3 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history_of_changes1, align 8, !dbg !5509
  %tobool2 = icmp ne %struct.VEC_expr_history_def_heap* %3, null, !dbg !5509
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !5509

cond.true:                                        ; preds = %if.then
  %4 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5509
  %history_of_changes3 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 10, !dbg !5509
  %5 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history_of_changes3, align 8, !dbg !5509
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %5, i32 0, i32 0, !dbg !5509
  br label %cond.end, !dbg !5509

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !5509

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5509
  %call = call %struct.VEC_expr_history_def_heap* @VEC_expr_history_def_heap_copy(%struct.VEC_expr_history_def_base* %cond), !dbg !5509
  store %struct.VEC_expr_history_def_heap* %call, %struct.VEC_expr_history_def_heap** %temp, align 8, !dbg !5510
  store i32 0, i32* %i, align 4, !dbg !5511
  br label %for.cond, !dbg !5513

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %temp, align 8, !dbg !5514
  %tobool4 = icmp ne %struct.VEC_expr_history_def_heap* %6, null, !dbg !5514
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !5514

cond.true5:                                       ; preds = %for.cond
  %7 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %temp, align 8, !dbg !5514
  %base6 = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %7, i32 0, i32 0, !dbg !5514
  br label %cond.end8, !dbg !5514

cond.false7:                                      ; preds = %for.cond
  br label %cond.end8, !dbg !5514

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_expr_history_def_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !5514
  %8 = load i32, i32* %i, align 4, !dbg !5514
  %call10 = call i32 @VEC_expr_history_def_base_iterate(%struct.VEC_expr_history_def_base* %cond9, i32 %8, %struct.expr_history_def_1** %phist), !dbg !5514
  %tobool11 = icmp ne i32 %call10, 0, !dbg !5516
  br i1 %tobool11, label %for.body, label %for.end, !dbg !5516

for.body:                                         ; preds = %cond.end8
  %9 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5517
  %old_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %9, i32 0, i32 1, !dbg !5519
  %10 = load %struct.vinsn_def*, %struct.vinsn_def** %old_expr_vinsn, align 8, !dbg !5519
  call void @vinsn_attach(%struct.vinsn_def* %10), !dbg !5520
  %11 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5521
  %new_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %11, i32 0, i32 2, !dbg !5522
  %12 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn, align 8, !dbg !5522
  call void @vinsn_attach(%struct.vinsn_def* %12), !dbg !5523
  br label %for.inc, !dbg !5524

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !5525
  %inc = add i32 %13, 1, !dbg !5525
  store i32 %inc, i32* %i, align 4, !dbg !5525
  br label %for.cond, !dbg !5526, !llvm.loop !5527

for.end:                                          ; preds = %cond.end8
  br label %if.end, !dbg !5529

if.end:                                           ; preds = %for.end, %entry
  %14 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5530
  %15 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5531
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %15, i32 0, i32 0, !dbg !5531
  %16 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5531
  %17 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5532
  %spec = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 1, !dbg !5532
  %18 = load i32, i32* %spec, align 8, !dbg !5532
  %19 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5533
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %19, i32 0, i32 2, !dbg !5533
  %20 = load i32, i32* %usefulness, align 4, !dbg !5533
  %21 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5534
  %priority = getelementptr inbounds %struct._expr, %struct._expr* %21, i32 0, i32 3, !dbg !5534
  %22 = load i32, i32* %priority, align 8, !dbg !5534
  %23 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5535
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 5, !dbg !5535
  %24 = load i32, i32* %sched_times, align 8, !dbg !5535
  %25 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5536
  %orig_bb_index = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 6, !dbg !5536
  %26 = load i32, i32* %orig_bb_index, align 4, !dbg !5536
  %27 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5537
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 7, !dbg !5537
  %28 = load i32, i32* %spec_done_ds, align 8, !dbg !5537
  %29 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5538
  %spec_to_check_ds = getelementptr inbounds %struct._expr, %struct._expr* %29, i32 0, i32 8, !dbg !5538
  %30 = load i32, i32* %spec_to_check_ds, align 4, !dbg !5538
  %31 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5539
  %orig_sched_cycle = getelementptr inbounds %struct._expr, %struct._expr* %31, i32 0, i32 9, !dbg !5539
  %32 = load i32, i32* %orig_sched_cycle, align 8, !dbg !5539
  %33 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %temp, align 8, !dbg !5540
  %34 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5541
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %34, i32 0, i32 11, !dbg !5541
  %35 = load i8, i8* %target_available, align 8, !dbg !5541
  %36 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5542
  %was_substituted = getelementptr inbounds %struct._expr, %struct._expr* %36, i32 0, i32 12, !dbg !5542
  %bf.load = load i8, i8* %was_substituted, align 1, !dbg !5542
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5542
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5542
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5542
  %conv = trunc i32 %bf.cast to i8, !dbg !5542
  %37 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5543
  %was_renamed = getelementptr inbounds %struct._expr, %struct._expr* %37, i32 0, i32 12, !dbg !5543
  %bf.load12 = load i8, i8* %was_renamed, align 1, !dbg !5543
  %bf.lshr13 = lshr i8 %bf.load12, 2, !dbg !5543
  %bf.clear14 = and i8 %bf.lshr13, 1, !dbg !5543
  %bf.cast15 = zext i8 %bf.clear14 to i32, !dbg !5543
  %conv16 = trunc i32 %bf.cast15 to i8, !dbg !5543
  %38 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5544
  %needs_spec_check_p = getelementptr inbounds %struct._expr, %struct._expr* %38, i32 0, i32 12, !dbg !5544
  %bf.load17 = load i8, i8* %needs_spec_check_p, align 1, !dbg !5544
  %bf.clear18 = and i8 %bf.load17, 1, !dbg !5544
  %bf.cast19 = zext i8 %bf.clear18 to i32, !dbg !5544
  %conv20 = trunc i32 %bf.cast19 to i8, !dbg !5544
  %39 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5545
  %cant_move = getelementptr inbounds %struct._expr, %struct._expr* %39, i32 0, i32 12, !dbg !5545
  %bf.load21 = load i8, i8* %cant_move, align 1, !dbg !5545
  %bf.lshr22 = lshr i8 %bf.load21, 3, !dbg !5545
  %bf.clear23 = and i8 %bf.lshr22, 1, !dbg !5545
  %bf.cast24 = zext i8 %bf.clear23 to i32, !dbg !5545
  %conv25 = trunc i32 %bf.cast24 to i8, !dbg !5545
  call void @init_expr(%struct._expr* %14, %struct.vinsn_def* %16, i32 %18, i32 %20, i32 %22, i32 %24, i32 %26, i32 %28, i32 %30, i32 %32, %struct.VEC_expr_history_def_heap* %33, i8 zeroext %35, i8 zeroext %conv, i8 zeroext %conv16, i8 zeroext %conv20, i8 zeroext %conv25), !dbg !5546
  ret void, !dbg !5547
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_expr_history_def_heap* @VEC_expr_history_def_heap_copy(%struct.VEC_expr_history_def_base* %vec_) #0 !dbg !5548 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  %len_ = alloca i64, align 8
  %new_vec_ = alloca %struct.VEC_expr_history_def_heap*, align 8
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !5551, metadata !DIExpression()), !dbg !5552
  call void @llvm.dbg.declare(metadata i64* %len_, metadata !5553, metadata !DIExpression()), !dbg !5552
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5552
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %0, null, !dbg !5552
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5552

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5552
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %1, i32 0, i32 0, !dbg !5552
  %2 = load i32, i32* %num, align 8, !dbg !5552
  br label %cond.end, !dbg !5552

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5552

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5552
  %conv = zext i32 %cond to i64, !dbg !5552
  store i64 %conv, i64* %len_, align 8, !dbg !5552
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %new_vec_, metadata !5554, metadata !DIExpression()), !dbg !5552
  store %struct.VEC_expr_history_def_heap* null, %struct.VEC_expr_history_def_heap** %new_vec_, align 8, !dbg !5552
  %3 = load i64, i64* %len_, align 8, !dbg !5555
  %tobool1 = icmp ne i64 %3, 0, !dbg !5555
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5552

if.then:                                          ; preds = %cond.end
  %4 = load i64, i64* %len_, align 8, !dbg !5557
  %conv2 = trunc i64 %4 to i32, !dbg !5557
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %conv2, i64 8, i64 32), !dbg !5557
  %5 = bitcast i8* %call to %struct.VEC_expr_history_def_heap*, !dbg !5557
  store %struct.VEC_expr_history_def_heap* %5, %struct.VEC_expr_history_def_heap** %new_vec_, align 8, !dbg !5557
  %6 = load i64, i64* %len_, align 8, !dbg !5557
  %conv3 = trunc i64 %6 to i32, !dbg !5557
  %7 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %new_vec_, align 8, !dbg !5557
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %7, i32 0, i32 0, !dbg !5557
  %num4 = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %base, i32 0, i32 0, !dbg !5557
  store i32 %conv3, i32* %num4, align 8, !dbg !5557
  %8 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %new_vec_, align 8, !dbg !5557
  %base5 = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %8, i32 0, i32 0, !dbg !5557
  %vec = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %base5, i32 0, i32 2, !dbg !5557
  %arraydecay = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec, i64 0, i64 0, !dbg !5557
  %9 = bitcast %struct.expr_history_def_1* %arraydecay to i8*, !dbg !5557
  %10 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5557
  %vec6 = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %10, i32 0, i32 2, !dbg !5557
  %arraydecay7 = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec6, i64 0, i64 0, !dbg !5557
  %11 = bitcast %struct.expr_history_def_1* %arraydecay7 to i8*, !dbg !5557
  %12 = load i64, i64* %len_, align 8, !dbg !5557
  %mul = mul i64 32, %12, !dbg !5557
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %11, i64 %mul, i1 false), !dbg !5557
  br label %if.end, !dbg !5557

if.end:                                           ; preds = %if.then, %cond.end
  %13 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %new_vec_, align 8, !dbg !5552
  ret %struct.VEC_expr_history_def_heap* %13, !dbg !5552
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_history_def_base_iterate(%struct.VEC_expr_history_def_base* %vec_, i32 %ix_, %struct.expr_history_def_1** %ptr) #0 !dbg !5559 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.expr_history_def_1**, align 8
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !5563, metadata !DIExpression()), !dbg !5564
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5565, metadata !DIExpression()), !dbg !5564
  store %struct.expr_history_def_1** %ptr, %struct.expr_history_def_1*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1*** %ptr.addr, metadata !5566, metadata !DIExpression()), !dbg !5564
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5567
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %0, null, !dbg !5567
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !5567

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5567
  %2 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5567
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %2, i32 0, i32 0, !dbg !5567
  %3 = load i32, i32* %num, align 8, !dbg !5567
  %cmp = icmp ult i32 %1, %3, !dbg !5567
  br i1 %cmp, label %if.then, label %if.else, !dbg !5564

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !5569
  %vec = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %4, i32 0, i32 2, !dbg !5569
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !5569
  %idxprom = zext i32 %5 to i64, !dbg !5569
  %arrayidx = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec, i64 0, i64 %idxprom, !dbg !5569
  %6 = load %struct.expr_history_def_1**, %struct.expr_history_def_1*** %ptr.addr, align 8, !dbg !5569
  store %struct.expr_history_def_1* %arrayidx, %struct.expr_history_def_1** %6, align 8, !dbg !5569
  store i32 1, i32* %retval, align 4, !dbg !5569
  br label %return, !dbg !5569

if.else:                                          ; preds = %land.lhs.true, %entry
  %7 = load %struct.expr_history_def_1**, %struct.expr_history_def_1*** %ptr.addr, align 8, !dbg !5571
  store %struct.expr_history_def_1* null, %struct.expr_history_def_1** %7, align 8, !dbg !5571
  store i32 0, i32* %retval, align 4, !dbg !5571
  br label %return, !dbg !5571

return:                                           ; preds = %if.else, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5564
  ret i32 %8, !dbg !5564
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_expr(%struct._expr* %expr, %struct.vinsn_def* %vi, i32 %spec, i32 %use, i32 %priority, i32 %sched_times, i32 %orig_bb_index, i32 %spec_done_ds, i32 %spec_to_check_ds, i32 %orig_sched_cycle, %struct.VEC_expr_history_def_heap* %history, i8 zeroext %target_available, i8 zeroext %was_substituted, i8 zeroext %was_renamed, i8 zeroext %needs_spec_check_p, i8 zeroext %cant_move) #0 !dbg !5573 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %spec.addr = alloca i32, align 4
  %use.addr = alloca i32, align 4
  %priority.addr = alloca i32, align 4
  %sched_times.addr = alloca i32, align 4
  %orig_bb_index.addr = alloca i32, align 4
  %spec_done_ds.addr = alloca i32, align 4
  %spec_to_check_ds.addr = alloca i32, align 4
  %orig_sched_cycle.addr = alloca i32, align 4
  %history.addr = alloca %struct.VEC_expr_history_def_heap*, align 8
  %target_available.addr = alloca i8, align 1
  %was_substituted.addr = alloca i8, align 1
  %was_renamed.addr = alloca i8, align 1
  %needs_spec_check_p.addr = alloca i8, align 1
  %cant_move.addr = alloca i8, align 1
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !5576, metadata !DIExpression()), !dbg !5577
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !5578, metadata !DIExpression()), !dbg !5579
  store i32 %spec, i32* %spec.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %spec.addr, metadata !5580, metadata !DIExpression()), !dbg !5581
  store i32 %use, i32* %use.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %use.addr, metadata !5582, metadata !DIExpression()), !dbg !5583
  store i32 %priority, i32* %priority.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %priority.addr, metadata !5584, metadata !DIExpression()), !dbg !5585
  store i32 %sched_times, i32* %sched_times.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sched_times.addr, metadata !5586, metadata !DIExpression()), !dbg !5587
  store i32 %orig_bb_index, i32* %orig_bb_index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %orig_bb_index.addr, metadata !5588, metadata !DIExpression()), !dbg !5589
  store i32 %spec_done_ds, i32* %spec_done_ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %spec_done_ds.addr, metadata !5590, metadata !DIExpression()), !dbg !5591
  store i32 %spec_to_check_ds, i32* %spec_to_check_ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %spec_to_check_ds.addr, metadata !5592, metadata !DIExpression()), !dbg !5593
  store i32 %orig_sched_cycle, i32* %orig_sched_cycle.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %orig_sched_cycle.addr, metadata !5594, metadata !DIExpression()), !dbg !5595
  store %struct.VEC_expr_history_def_heap* %history, %struct.VEC_expr_history_def_heap** %history.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap** %history.addr, metadata !5596, metadata !DIExpression()), !dbg !5597
  store i8 %target_available, i8* %target_available.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %target_available.addr, metadata !5598, metadata !DIExpression()), !dbg !5599
  store i8 %was_substituted, i8* %was_substituted.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %was_substituted.addr, metadata !5600, metadata !DIExpression()), !dbg !5601
  store i8 %was_renamed, i8* %was_renamed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %was_renamed.addr, metadata !5602, metadata !DIExpression()), !dbg !5603
  store i8 %needs_spec_check_p, i8* %needs_spec_check_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %needs_spec_check_p.addr, metadata !5604, metadata !DIExpression()), !dbg !5605
  store i8 %cant_move, i8* %cant_move.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %cant_move.addr, metadata !5606, metadata !DIExpression()), !dbg !5607
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !5608
  call void @vinsn_attach(%struct.vinsn_def* %0), !dbg !5609
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !5610
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5611
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 0, !dbg !5611
  store %struct.vinsn_def* %1, %struct.vinsn_def** %vinsn, align 8, !dbg !5612
  %3 = load i32, i32* %spec.addr, align 4, !dbg !5613
  %4 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5614
  %spec1 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1, !dbg !5614
  store i32 %3, i32* %spec1, align 8, !dbg !5615
  %5 = load i32, i32* %use.addr, align 4, !dbg !5616
  %6 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5617
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 2, !dbg !5617
  store i32 %5, i32* %usefulness, align 4, !dbg !5618
  %7 = load i32, i32* %priority.addr, align 4, !dbg !5619
  %8 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5620
  %priority2 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 3, !dbg !5620
  store i32 %7, i32* %priority2, align 8, !dbg !5621
  %9 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5622
  %priority_adj = getelementptr inbounds %struct._expr, %struct._expr* %9, i32 0, i32 4, !dbg !5622
  store i32 0, i32* %priority_adj, align 4, !dbg !5623
  %10 = load i32, i32* %sched_times.addr, align 4, !dbg !5624
  %11 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5625
  %sched_times3 = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 5, !dbg !5625
  store i32 %10, i32* %sched_times3, align 8, !dbg !5626
  %12 = load i32, i32* %orig_bb_index.addr, align 4, !dbg !5627
  %13 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5628
  %orig_bb_index4 = getelementptr inbounds %struct._expr, %struct._expr* %13, i32 0, i32 6, !dbg !5628
  store i32 %12, i32* %orig_bb_index4, align 4, !dbg !5629
  %14 = load i32, i32* %orig_sched_cycle.addr, align 4, !dbg !5630
  %15 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5631
  %orig_sched_cycle5 = getelementptr inbounds %struct._expr, %struct._expr* %15, i32 0, i32 9, !dbg !5631
  store i32 %14, i32* %orig_sched_cycle5, align 8, !dbg !5632
  %16 = load i32, i32* %spec_done_ds.addr, align 4, !dbg !5633
  %17 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5634
  %spec_done_ds6 = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 7, !dbg !5634
  store i32 %16, i32* %spec_done_ds6, align 8, !dbg !5635
  %18 = load i32, i32* %spec_to_check_ds.addr, align 4, !dbg !5636
  %19 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5637
  %spec_to_check_ds7 = getelementptr inbounds %struct._expr, %struct._expr* %19, i32 0, i32 8, !dbg !5637
  store i32 %18, i32* %spec_to_check_ds7, align 4, !dbg !5638
  %20 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history.addr, align 8, !dbg !5639
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %20, null, !dbg !5639
  br i1 %tobool, label %if.then, label %if.else, !dbg !5641

if.then:                                          ; preds = %entry
  %21 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history.addr, align 8, !dbg !5642
  %22 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5643
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %22, i32 0, i32 10, !dbg !5643
  store %struct.VEC_expr_history_def_heap* %21, %struct.VEC_expr_history_def_heap** %history_of_changes, align 8, !dbg !5644
  br label %if.end, !dbg !5643

if.else:                                          ; preds = %entry
  %23 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5645
  %history_of_changes8 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 10, !dbg !5645
  store %struct.VEC_expr_history_def_heap* null, %struct.VEC_expr_history_def_heap** %history_of_changes8, align 8, !dbg !5646
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %24 = load i8, i8* %target_available.addr, align 1, !dbg !5647
  %25 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5648
  %target_available9 = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 11, !dbg !5648
  store i8 %24, i8* %target_available9, align 8, !dbg !5649
  %26 = load i8, i8* %was_substituted.addr, align 1, !dbg !5650
  %conv = zext i8 %26 to i32, !dbg !5650
  %27 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5651
  %was_substituted10 = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 12, !dbg !5651
  %28 = trunc i32 %conv to i8, !dbg !5652
  %bf.load = load i8, i8* %was_substituted10, align 1, !dbg !5652
  %bf.value = and i8 %28, 1, !dbg !5652
  %bf.shl = shl i8 %bf.value, 1, !dbg !5652
  %bf.clear = and i8 %bf.load, -3, !dbg !5652
  %bf.set = or i8 %bf.clear, %bf.shl, !dbg !5652
  store i8 %bf.set, i8* %was_substituted10, align 1, !dbg !5652
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5652
  %29 = load i8, i8* %was_renamed.addr, align 1, !dbg !5653
  %conv11 = zext i8 %29 to i32, !dbg !5653
  %30 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5654
  %was_renamed12 = getelementptr inbounds %struct._expr, %struct._expr* %30, i32 0, i32 12, !dbg !5654
  %31 = trunc i32 %conv11 to i8, !dbg !5655
  %bf.load13 = load i8, i8* %was_renamed12, align 1, !dbg !5655
  %bf.value14 = and i8 %31, 1, !dbg !5655
  %bf.shl15 = shl i8 %bf.value14, 2, !dbg !5655
  %bf.clear16 = and i8 %bf.load13, -5, !dbg !5655
  %bf.set17 = or i8 %bf.clear16, %bf.shl15, !dbg !5655
  store i8 %bf.set17, i8* %was_renamed12, align 1, !dbg !5655
  %bf.result.cast18 = zext i8 %bf.value14 to i32, !dbg !5655
  %32 = load i8, i8* %needs_spec_check_p.addr, align 1, !dbg !5656
  %conv19 = zext i8 %32 to i32, !dbg !5656
  %33 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5657
  %needs_spec_check_p20 = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 12, !dbg !5657
  %34 = trunc i32 %conv19 to i8, !dbg !5658
  %bf.load21 = load i8, i8* %needs_spec_check_p20, align 1, !dbg !5658
  %bf.value22 = and i8 %34, 1, !dbg !5658
  %bf.clear23 = and i8 %bf.load21, -2, !dbg !5658
  %bf.set24 = or i8 %bf.clear23, %bf.value22, !dbg !5658
  store i8 %bf.set24, i8* %needs_spec_check_p20, align 1, !dbg !5658
  %bf.result.cast25 = zext i8 %bf.value22 to i32, !dbg !5658
  %35 = load i8, i8* %cant_move.addr, align 1, !dbg !5659
  %conv26 = zext i8 %35 to i32, !dbg !5659
  %36 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5660
  %cant_move27 = getelementptr inbounds %struct._expr, %struct._expr* %36, i32 0, i32 12, !dbg !5660
  %37 = trunc i32 %conv26 to i8, !dbg !5661
  %bf.load28 = load i8, i8* %cant_move27, align 1, !dbg !5661
  %bf.value29 = and i8 %37, 1, !dbg !5661
  %bf.shl30 = shl i8 %bf.value29, 3, !dbg !5661
  %bf.clear31 = and i8 %bf.load28, -9, !dbg !5661
  %bf.set32 = or i8 %bf.clear31, %bf.shl30, !dbg !5661
  store i8 %bf.set32, i8* %cant_move27, align 1, !dbg !5661
  %bf.result.cast33 = zext i8 %bf.value29 to i32, !dbg !5661
  ret void, !dbg !5662
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_expr_onside(%struct._expr* %to, %struct._expr* %from) #0 !dbg !5663 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5664, metadata !DIExpression()), !dbg !5665
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5666, metadata !DIExpression()), !dbg !5667
  %0 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5668
  %1 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5669
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %1, i32 0, i32 0, !dbg !5669
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5669
  %3 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5670
  %spec = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 1, !dbg !5670
  %4 = load i32, i32* %spec, align 8, !dbg !5670
  %5 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5671
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 2, !dbg !5671
  %6 = load i32, i32* %usefulness, align 4, !dbg !5671
  %7 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5672
  %priority = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 3, !dbg !5672
  %8 = load i32, i32* %priority, align 8, !dbg !5672
  %9 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5673
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %9, i32 0, i32 5, !dbg !5673
  %10 = load i32, i32* %sched_times, align 8, !dbg !5673
  %11 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5674
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 7, !dbg !5674
  %12 = load i32, i32* %spec_done_ds, align 8, !dbg !5674
  %13 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5675
  %spec_to_check_ds = getelementptr inbounds %struct._expr, %struct._expr* %13, i32 0, i32 8, !dbg !5675
  %14 = load i32, i32* %spec_to_check_ds, align 4, !dbg !5675
  %15 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5676
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %15, i32 0, i32 11, !dbg !5676
  %16 = load i8, i8* %target_available, align 8, !dbg !5676
  %17 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5677
  %was_substituted = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 12, !dbg !5677
  %bf.load = load i8, i8* %was_substituted, align 1, !dbg !5677
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5677
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5677
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5677
  %conv = trunc i32 %bf.cast to i8, !dbg !5677
  %18 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5678
  %was_renamed = getelementptr inbounds %struct._expr, %struct._expr* %18, i32 0, i32 12, !dbg !5678
  %bf.load1 = load i8, i8* %was_renamed, align 1, !dbg !5678
  %bf.lshr2 = lshr i8 %bf.load1, 2, !dbg !5678
  %bf.clear3 = and i8 %bf.lshr2, 1, !dbg !5678
  %bf.cast4 = zext i8 %bf.clear3 to i32, !dbg !5678
  %conv5 = trunc i32 %bf.cast4 to i8, !dbg !5678
  %19 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5679
  %needs_spec_check_p = getelementptr inbounds %struct._expr, %struct._expr* %19, i32 0, i32 12, !dbg !5679
  %bf.load6 = load i8, i8* %needs_spec_check_p, align 1, !dbg !5679
  %bf.clear7 = and i8 %bf.load6, 1, !dbg !5679
  %bf.cast8 = zext i8 %bf.clear7 to i32, !dbg !5679
  %conv9 = trunc i32 %bf.cast8 to i8, !dbg !5679
  %20 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5680
  %cant_move = getelementptr inbounds %struct._expr, %struct._expr* %20, i32 0, i32 12, !dbg !5680
  %bf.load10 = load i8, i8* %cant_move, align 1, !dbg !5680
  %bf.lshr11 = lshr i8 %bf.load10, 3, !dbg !5680
  %bf.clear12 = and i8 %bf.lshr11, 1, !dbg !5680
  %bf.cast13 = zext i8 %bf.clear12 to i32, !dbg !5680
  %conv14 = trunc i32 %bf.cast13 to i8, !dbg !5680
  call void @init_expr(%struct._expr* %0, %struct.vinsn_def* %2, i32 %4, i32 %6, i32 %8, i32 %10, i32 0, i32 %12, i32 %14, i32 0, %struct.VEC_expr_history_def_heap* null, i8 zeroext %16, i8 zeroext %conv, i8 zeroext %conv5, i8 zeroext %conv9, i8 zeroext %conv14), !dbg !5681
  ret void, !dbg !5682
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @merge_expr_data(%struct._expr* %to, %struct._expr* %from, %struct.rtx_def* %split_point) #0 !dbg !5683 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  %split_point.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %phist = alloca %struct.expr_history_def_1*, align 8
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5686, metadata !DIExpression()), !dbg !5687
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5688, metadata !DIExpression()), !dbg !5689
  store %struct.rtx_def* %split_point, %struct.rtx_def** %split_point.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %split_point.addr, metadata !5690, metadata !DIExpression()), !dbg !5691
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5692, metadata !DIExpression()), !dbg !5693
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %phist, metadata !5694, metadata !DIExpression()), !dbg !5695
  %0 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5696
  %spec = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 1, !dbg !5696
  %1 = load i32, i32* %spec, align 8, !dbg !5696
  %2 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5698
  %spec1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 1, !dbg !5698
  %3 = load i32, i32* %spec1, align 8, !dbg !5698
  %cmp = icmp sgt i32 %1, %3, !dbg !5699
  br i1 %cmp, label %if.then, label %if.end, !dbg !5700

if.then:                                          ; preds = %entry
  %4 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5701
  %spec2 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 1, !dbg !5701
  %5 = load i32, i32* %spec2, align 8, !dbg !5701
  %6 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5702
  %spec3 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 1, !dbg !5702
  store i32 %5, i32* %spec3, align 8, !dbg !5703
  br label %if.end, !dbg !5702

if.end:                                           ; preds = %if.then, %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5704
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !5704
  br i1 %tobool, label %if.then4, label %if.else, !dbg !5706

if.then4:                                         ; preds = %if.end
  %8 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5707
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 2, !dbg !5707
  %9 = load i32, i32* %usefulness, align 4, !dbg !5707
  %10 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5708
  %usefulness5 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 2, !dbg !5708
  %11 = load i32, i32* %usefulness5, align 4, !dbg !5709
  %add = add nsw i32 %11, %9, !dbg !5709
  store i32 %add, i32* %usefulness5, align 4, !dbg !5709
  br label %if.end12, !dbg !5708

if.else:                                          ; preds = %if.end
  %12 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5710
  %usefulness6 = getelementptr inbounds %struct._expr, %struct._expr* %12, i32 0, i32 2, !dbg !5710
  %13 = load i32, i32* %usefulness6, align 4, !dbg !5710
  %14 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5710
  %usefulness7 = getelementptr inbounds %struct._expr, %struct._expr* %14, i32 0, i32 2, !dbg !5710
  %15 = load i32, i32* %usefulness7, align 4, !dbg !5710
  %cmp8 = icmp sgt i32 %13, %15, !dbg !5710
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !5710

cond.true:                                        ; preds = %if.else
  %16 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5710
  %usefulness9 = getelementptr inbounds %struct._expr, %struct._expr* %16, i32 0, i32 2, !dbg !5710
  %17 = load i32, i32* %usefulness9, align 4, !dbg !5710
  br label %cond.end, !dbg !5710

cond.false:                                       ; preds = %if.else
  %18 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5710
  %usefulness10 = getelementptr inbounds %struct._expr, %struct._expr* %18, i32 0, i32 2, !dbg !5710
  %19 = load i32, i32* %usefulness10, align 4, !dbg !5710
  br label %cond.end, !dbg !5710

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %17, %cond.true ], [ %19, %cond.false ], !dbg !5710
  %20 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5711
  %usefulness11 = getelementptr inbounds %struct._expr, %struct._expr* %20, i32 0, i32 2, !dbg !5711
  store i32 %cond, i32* %usefulness11, align 4, !dbg !5712
  br label %if.end12

if.end12:                                         ; preds = %cond.end, %if.then4
  %21 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5713
  %priority = getelementptr inbounds %struct._expr, %struct._expr* %21, i32 0, i32 3, !dbg !5713
  %22 = load i32, i32* %priority, align 8, !dbg !5713
  %23 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5715
  %priority13 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 3, !dbg !5715
  %24 = load i32, i32* %priority13, align 8, !dbg !5715
  %cmp14 = icmp slt i32 %22, %24, !dbg !5716
  br i1 %cmp14, label %if.then15, label %if.end18, !dbg !5717

if.then15:                                        ; preds = %if.end12
  %25 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5718
  %priority16 = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 3, !dbg !5718
  %26 = load i32, i32* %priority16, align 8, !dbg !5718
  %27 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5719
  %priority17 = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 3, !dbg !5719
  store i32 %26, i32* %priority17, align 8, !dbg !5720
  br label %if.end18, !dbg !5719

if.end18:                                         ; preds = %if.then15, %if.end12
  %28 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5721
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %28, i32 0, i32 5, !dbg !5721
  %29 = load i32, i32* %sched_times, align 8, !dbg !5721
  %30 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5723
  %sched_times19 = getelementptr inbounds %struct._expr, %struct._expr* %30, i32 0, i32 5, !dbg !5723
  %31 = load i32, i32* %sched_times19, align 8, !dbg !5723
  %cmp20 = icmp sgt i32 %29, %31, !dbg !5724
  br i1 %cmp20, label %if.then21, label %if.end24, !dbg !5725

if.then21:                                        ; preds = %if.end18
  %32 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5726
  %sched_times22 = getelementptr inbounds %struct._expr, %struct._expr* %32, i32 0, i32 5, !dbg !5726
  %33 = load i32, i32* %sched_times22, align 8, !dbg !5726
  %34 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5727
  %sched_times23 = getelementptr inbounds %struct._expr, %struct._expr* %34, i32 0, i32 5, !dbg !5727
  store i32 %33, i32* %sched_times23, align 8, !dbg !5728
  br label %if.end24, !dbg !5727

if.end24:                                         ; preds = %if.then21, %if.end18
  %35 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5729
  %orig_bb_index = getelementptr inbounds %struct._expr, %struct._expr* %35, i32 0, i32 6, !dbg !5729
  %36 = load i32, i32* %orig_bb_index, align 4, !dbg !5729
  %37 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5731
  %orig_bb_index25 = getelementptr inbounds %struct._expr, %struct._expr* %37, i32 0, i32 6, !dbg !5731
  %38 = load i32, i32* %orig_bb_index25, align 4, !dbg !5731
  %cmp26 = icmp ne i32 %36, %38, !dbg !5732
  br i1 %cmp26, label %if.then27, label %if.end29, !dbg !5733

if.then27:                                        ; preds = %if.end24
  %39 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5734
  %orig_bb_index28 = getelementptr inbounds %struct._expr, %struct._expr* %39, i32 0, i32 6, !dbg !5734
  store i32 0, i32* %orig_bb_index28, align 4, !dbg !5735
  br label %if.end29, !dbg !5734

if.end29:                                         ; preds = %if.then27, %if.end24
  %40 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5736
  %orig_sched_cycle = getelementptr inbounds %struct._expr, %struct._expr* %40, i32 0, i32 9, !dbg !5736
  %41 = load i32, i32* %orig_sched_cycle, align 8, !dbg !5736
  %42 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5736
  %orig_sched_cycle30 = getelementptr inbounds %struct._expr, %struct._expr* %42, i32 0, i32 9, !dbg !5736
  %43 = load i32, i32* %orig_sched_cycle30, align 8, !dbg !5736
  %cmp31 = icmp slt i32 %41, %43, !dbg !5736
  br i1 %cmp31, label %cond.true32, label %cond.false34, !dbg !5736

cond.true32:                                      ; preds = %if.end29
  %44 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5736
  %orig_sched_cycle33 = getelementptr inbounds %struct._expr, %struct._expr* %44, i32 0, i32 9, !dbg !5736
  %45 = load i32, i32* %orig_sched_cycle33, align 8, !dbg !5736
  br label %cond.end36, !dbg !5736

cond.false34:                                     ; preds = %if.end29
  %46 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5736
  %orig_sched_cycle35 = getelementptr inbounds %struct._expr, %struct._expr* %46, i32 0, i32 9, !dbg !5736
  %47 = load i32, i32* %orig_sched_cycle35, align 8, !dbg !5736
  br label %cond.end36, !dbg !5736

cond.end36:                                       ; preds = %cond.false34, %cond.true32
  %cond37 = phi i32 [ %45, %cond.true32 ], [ %47, %cond.false34 ], !dbg !5736
  %48 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5737
  %orig_sched_cycle38 = getelementptr inbounds %struct._expr, %struct._expr* %48, i32 0, i32 9, !dbg !5737
  store i32 %cond37, i32* %orig_sched_cycle38, align 8, !dbg !5738
  store i32 0, i32* %i, align 4, !dbg !5739
  br label %for.cond, !dbg !5741

for.cond:                                         ; preds = %for.inc, %cond.end36
  %49 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5742
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %49, i32 0, i32 10, !dbg !5742
  %50 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history_of_changes, align 8, !dbg !5742
  %tobool39 = icmp ne %struct.VEC_expr_history_def_heap* %50, null, !dbg !5742
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !5742

cond.true40:                                      ; preds = %for.cond
  %51 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5742
  %history_of_changes41 = getelementptr inbounds %struct._expr, %struct._expr* %51, i32 0, i32 10, !dbg !5742
  %52 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %history_of_changes41, align 8, !dbg !5742
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %52, i32 0, i32 0, !dbg !5742
  br label %cond.end43, !dbg !5742

cond.false42:                                     ; preds = %for.cond
  br label %cond.end43, !dbg !5742

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true40 ], [ null, %cond.false42 ], !dbg !5742
  %53 = load i32, i32* %i, align 4, !dbg !5742
  %call = call i32 @VEC_expr_history_def_base_iterate(%struct.VEC_expr_history_def_base* %cond44, i32 %53, %struct.expr_history_def_1** %phist), !dbg !5742
  %tobool45 = icmp ne i32 %call, 0, !dbg !5744
  br i1 %tobool45, label %for.body, label %for.end, !dbg !5744

for.body:                                         ; preds = %cond.end43
  %54 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5745
  %history_of_changes46 = getelementptr inbounds %struct._expr, %struct._expr* %54, i32 0, i32 10, !dbg !5745
  %55 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5746
  %uid = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %55, i32 0, i32 0, !dbg !5747
  %56 = load i32, i32* %uid, align 8, !dbg !5747
  %57 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5748
  %type = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %57, i32 0, i32 4, !dbg !5749
  %58 = load i32, i32* %type, align 4, !dbg !5749
  %59 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5750
  %old_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %59, i32 0, i32 1, !dbg !5751
  %60 = load %struct.vinsn_def*, %struct.vinsn_def** %old_expr_vinsn, align 8, !dbg !5751
  %61 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5752
  %new_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %61, i32 0, i32 2, !dbg !5753
  %62 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn, align 8, !dbg !5753
  %63 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5754
  %spec_ds = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %63, i32 0, i32 3, !dbg !5755
  %64 = load i32, i32* %spec_ds, align 8, !dbg !5755
  call void @insert_in_history_vect(%struct.VEC_expr_history_def_heap** %history_of_changes46, i32 %56, i32 %58, %struct.vinsn_def* %60, %struct.vinsn_def* %62, i32 %64), !dbg !5756
  br label %for.inc, !dbg !5756

for.inc:                                          ; preds = %for.body
  %65 = load i32, i32* %i, align 4, !dbg !5757
  %inc = add nsw i32 %65, 1, !dbg !5757
  store i32 %inc, i32* %i, align 4, !dbg !5757
  br label %for.cond, !dbg !5758, !llvm.loop !5759

for.end:                                          ; preds = %cond.end43
  %66 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5761
  %was_substituted = getelementptr inbounds %struct._expr, %struct._expr* %66, i32 0, i32 12, !dbg !5761
  %bf.load = load i8, i8* %was_substituted, align 1, !dbg !5761
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !5761
  %bf.clear = and i8 %bf.lshr, 1, !dbg !5761
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5761
  %67 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5762
  %was_substituted47 = getelementptr inbounds %struct._expr, %struct._expr* %67, i32 0, i32 12, !dbg !5762
  %bf.load48 = load i8, i8* %was_substituted47, align 1, !dbg !5763
  %bf.lshr49 = lshr i8 %bf.load48, 1, !dbg !5763
  %bf.clear50 = and i8 %bf.lshr49, 1, !dbg !5763
  %bf.cast51 = zext i8 %bf.clear50 to i32, !dbg !5763
  %or = or i32 %bf.cast51, %bf.cast, !dbg !5763
  %68 = trunc i32 %or to i8, !dbg !5763
  %bf.load52 = load i8, i8* %was_substituted47, align 1, !dbg !5763
  %bf.value = and i8 %68, 1, !dbg !5763
  %bf.shl = shl i8 %bf.value, 1, !dbg !5763
  %bf.clear53 = and i8 %bf.load52, -3, !dbg !5763
  %bf.set = or i8 %bf.clear53, %bf.shl, !dbg !5763
  store i8 %bf.set, i8* %was_substituted47, align 1, !dbg !5763
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5763
  %69 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5764
  %was_renamed = getelementptr inbounds %struct._expr, %struct._expr* %69, i32 0, i32 12, !dbg !5764
  %bf.load54 = load i8, i8* %was_renamed, align 1, !dbg !5764
  %bf.lshr55 = lshr i8 %bf.load54, 2, !dbg !5764
  %bf.clear56 = and i8 %bf.lshr55, 1, !dbg !5764
  %bf.cast57 = zext i8 %bf.clear56 to i32, !dbg !5764
  %70 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5765
  %was_renamed58 = getelementptr inbounds %struct._expr, %struct._expr* %70, i32 0, i32 12, !dbg !5765
  %bf.load59 = load i8, i8* %was_renamed58, align 1, !dbg !5766
  %bf.lshr60 = lshr i8 %bf.load59, 2, !dbg !5766
  %bf.clear61 = and i8 %bf.lshr60, 1, !dbg !5766
  %bf.cast62 = zext i8 %bf.clear61 to i32, !dbg !5766
  %or63 = or i32 %bf.cast62, %bf.cast57, !dbg !5766
  %71 = trunc i32 %or63 to i8, !dbg !5766
  %bf.load64 = load i8, i8* %was_renamed58, align 1, !dbg !5766
  %bf.value65 = and i8 %71, 1, !dbg !5766
  %bf.shl66 = shl i8 %bf.value65, 2, !dbg !5766
  %bf.clear67 = and i8 %bf.load64, -5, !dbg !5766
  %bf.set68 = or i8 %bf.clear67, %bf.shl66, !dbg !5766
  store i8 %bf.set68, i8* %was_renamed58, align 1, !dbg !5766
  %bf.result.cast69 = zext i8 %bf.value65 to i32, !dbg !5766
  %72 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5767
  %cant_move = getelementptr inbounds %struct._expr, %struct._expr* %72, i32 0, i32 12, !dbg !5767
  %bf.load70 = load i8, i8* %cant_move, align 1, !dbg !5767
  %bf.lshr71 = lshr i8 %bf.load70, 3, !dbg !5767
  %bf.clear72 = and i8 %bf.lshr71, 1, !dbg !5767
  %bf.cast73 = zext i8 %bf.clear72 to i32, !dbg !5767
  %73 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5768
  %cant_move74 = getelementptr inbounds %struct._expr, %struct._expr* %73, i32 0, i32 12, !dbg !5768
  %bf.load75 = load i8, i8* %cant_move74, align 1, !dbg !5769
  %bf.lshr76 = lshr i8 %bf.load75, 3, !dbg !5769
  %bf.clear77 = and i8 %bf.lshr76, 1, !dbg !5769
  %bf.cast78 = zext i8 %bf.clear77 to i32, !dbg !5769
  %or79 = or i32 %bf.cast78, %bf.cast73, !dbg !5769
  %74 = trunc i32 %or79 to i8, !dbg !5769
  %bf.load80 = load i8, i8* %cant_move74, align 1, !dbg !5769
  %bf.value81 = and i8 %74, 1, !dbg !5769
  %bf.shl82 = shl i8 %bf.value81, 3, !dbg !5769
  %bf.clear83 = and i8 %bf.load80, -9, !dbg !5769
  %bf.set84 = or i8 %bf.clear83, %bf.shl82, !dbg !5769
  store i8 %bf.set84, i8* %cant_move74, align 1, !dbg !5769
  %bf.result.cast85 = zext i8 %bf.value81 to i32, !dbg !5769
  %75 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5770
  %76 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5771
  %77 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5772
  call void @update_target_availability(%struct._expr* %75, %struct._expr* %76, %struct.rtx_def* %77), !dbg !5773
  %78 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5774
  %79 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5775
  %80 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5776
  call void @update_speculative_bits(%struct._expr* %78, %struct._expr* %79, %struct.rtx_def* %80), !dbg !5777
  ret void, !dbg !5778
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_target_availability(%struct._expr* %to, %struct._expr* %from, %struct.rtx_def* %split_point) #0 !dbg !5779 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  %split_point.addr = alloca %struct.rtx_def*, align 8
  %toind = alloca i32, align 4
  %fromind = alloca i32, align 4
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5780, metadata !DIExpression()), !dbg !5781
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5782, metadata !DIExpression()), !dbg !5783
  store %struct.rtx_def* %split_point, %struct.rtx_def** %split_point.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %split_point.addr, metadata !5784, metadata !DIExpression()), !dbg !5785
  %0 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5786
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 11, !dbg !5786
  %1 = load i8, i8* %target_available, align 8, !dbg !5786
  %conv = sext i8 %1 to i32, !dbg !5786
  %cmp = icmp slt i32 %conv, 0, !dbg !5788
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !5789

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5790
  %target_available2 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 11, !dbg !5790
  %3 = load i8, i8* %target_available2, align 8, !dbg !5790
  %conv3 = sext i8 %3 to i32, !dbg !5790
  %cmp4 = icmp slt i32 %conv3, 0, !dbg !5791
  br i1 %cmp4, label %if.then, label %if.else, !dbg !5792

if.then:                                          ; preds = %lor.lhs.false, %entry
  %4 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5793
  %target_available6 = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 11, !dbg !5793
  store i8 -1, i8* %target_available6, align 8, !dbg !5794
  br label %if.end23, !dbg !5793

if.else:                                          ; preds = %lor.lhs.false
  %5 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5795
  %cmp7 = icmp eq %struct.rtx_def* %5, null, !dbg !5798
  br i1 %cmp7, label %if.then9, label %if.else16, !dbg !5799

if.then9:                                         ; preds = %if.else
  call void @llvm.dbg.declare(metadata i32* %toind, metadata !5800, metadata !DIExpression()), !dbg !5802
  call void @llvm.dbg.declare(metadata i32* %fromind, metadata !5803, metadata !DIExpression()), !dbg !5804
  %6 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5805
  %orig_bb_index = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 6, !dbg !5805
  %7 = load i32, i32* %orig_bb_index, align 4, !dbg !5805
  store i32 %7, i32* %toind, align 4, !dbg !5806
  %8 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5807
  %orig_bb_index10 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 6, !dbg !5807
  %9 = load i32, i32* %orig_bb_index10, align 4, !dbg !5807
  store i32 %9, i32* %fromind, align 4, !dbg !5808
  %10 = load i32, i32* %toind, align 4, !dbg !5809
  %tobool = icmp ne i32 %10, 0, !dbg !5809
  br i1 %tobool, label %land.lhs.true, label %if.else14, !dbg !5811

land.lhs.true:                                    ; preds = %if.then9
  %11 = load i32, i32* %toind, align 4, !dbg !5812
  %12 = load i32, i32* %fromind, align 4, !dbg !5813
  %cmp11 = icmp eq i32 %11, %12, !dbg !5814
  br i1 %cmp11, label %if.then13, label %if.else14, !dbg !5815

if.then13:                                        ; preds = %land.lhs.true
  br label %if.end, !dbg !5815

if.else14:                                        ; preds = %land.lhs.true, %if.then9
  %13 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5816
  %target_available15 = getelementptr inbounds %struct._expr, %struct._expr* %13, i32 0, i32 11, !dbg !5816
  store i8 -1, i8* %target_available15, align 8, !dbg !5817
  br label %if.end

if.end:                                           ; preds = %if.else14, %if.then13
  br label %if.end22, !dbg !5818

if.else16:                                        ; preds = %if.else
  %14 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5819
  %target_available17 = getelementptr inbounds %struct._expr, %struct._expr* %14, i32 0, i32 11, !dbg !5819
  %15 = load i8, i8* %target_available17, align 8, !dbg !5819
  %conv18 = sext i8 %15 to i32, !dbg !5819
  %16 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5820
  %target_available19 = getelementptr inbounds %struct._expr, %struct._expr* %16, i32 0, i32 11, !dbg !5820
  %17 = load i8, i8* %target_available19, align 8, !dbg !5821
  %conv20 = sext i8 %17 to i32, !dbg !5821
  %and = and i32 %conv20, %conv18, !dbg !5821
  %conv21 = trunc i32 %and to i8, !dbg !5821
  store i8 %conv21, i8* %target_available19, align 8, !dbg !5821
  br label %if.end22

if.end22:                                         ; preds = %if.else16, %if.end
  br label %if.end23

if.end23:                                         ; preds = %if.end22, %if.then
  ret void, !dbg !5822
}

; Function Attrs: noinline nounwind uwtable
define internal void @update_speculative_bits(%struct._expr* %to, %struct._expr* %from, %struct.rtx_def* %split_point) #0 !dbg !5823 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  %split_point.addr = alloca %struct.rtx_def*, align 8
  %old_to_ds = alloca i32, align 4
  %old_from_ds = alloca i32, align 4
  %record_ds = alloca i32, align 4
  %res = alloca i32, align 4
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5824, metadata !DIExpression()), !dbg !5825
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5826, metadata !DIExpression()), !dbg !5827
  store %struct.rtx_def* %split_point, %struct.rtx_def** %split_point.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %split_point.addr, metadata !5828, metadata !DIExpression()), !dbg !5829
  call void @llvm.dbg.declare(metadata i32* %old_to_ds, metadata !5830, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata i32* %old_from_ds, metadata !5832, metadata !DIExpression()), !dbg !5833
  %0 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5834
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 7, !dbg !5834
  %1 = load i32, i32* %spec_done_ds, align 8, !dbg !5834
  store i32 %1, i32* %old_to_ds, align 4, !dbg !5835
  %2 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5836
  %spec_done_ds1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 7, !dbg !5836
  %3 = load i32, i32* %spec_done_ds1, align 8, !dbg !5836
  store i32 %3, i32* %old_from_ds, align 4, !dbg !5837
  %4 = load i32, i32* %old_to_ds, align 4, !dbg !5838
  %5 = load i32, i32* %old_from_ds, align 4, !dbg !5839
  %call = call i32 @ds_max_merge(i32 %4, i32 %5), !dbg !5840
  %6 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5841
  %spec_done_ds2 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 7, !dbg !5841
  store i32 %call, i32* %spec_done_ds2, align 8, !dbg !5842
  %7 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5843
  %spec_to_check_ds = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 8, !dbg !5843
  %8 = load i32, i32* %spec_to_check_ds, align 4, !dbg !5843
  %9 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5844
  %spec_to_check_ds3 = getelementptr inbounds %struct._expr, %struct._expr* %9, i32 0, i32 8, !dbg !5844
  %10 = load i32, i32* %spec_to_check_ds3, align 4, !dbg !5845
  %or = or i32 %10, %8, !dbg !5845
  store i32 %or, i32* %spec_to_check_ds3, align 4, !dbg !5845
  %11 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5846
  %needs_spec_check_p = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 12, !dbg !5846
  %bf.load = load i8, i8* %needs_spec_check_p, align 1, !dbg !5846
  %bf.clear = and i8 %bf.load, 1, !dbg !5846
  %bf.cast = zext i8 %bf.clear to i32, !dbg !5846
  %12 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5847
  %needs_spec_check_p4 = getelementptr inbounds %struct._expr, %struct._expr* %12, i32 0, i32 12, !dbg !5847
  %bf.load5 = load i8, i8* %needs_spec_check_p4, align 1, !dbg !5848
  %bf.clear6 = and i8 %bf.load5, 1, !dbg !5848
  %bf.cast7 = zext i8 %bf.clear6 to i32, !dbg !5848
  %or8 = or i32 %bf.cast7, %bf.cast, !dbg !5848
  %13 = trunc i32 %or8 to i8, !dbg !5848
  %bf.load9 = load i8, i8* %needs_spec_check_p4, align 1, !dbg !5848
  %bf.value = and i8 %13, 1, !dbg !5848
  %bf.clear10 = and i8 %bf.load9, -2, !dbg !5848
  %bf.set = or i8 %bf.clear10, %bf.value, !dbg !5848
  store i8 %bf.set, i8* %needs_spec_check_p4, align 1, !dbg !5848
  %bf.result.cast = zext i8 %bf.value to i32, !dbg !5848
  %14 = load i32, i32* %old_to_ds, align 4, !dbg !5849
  %and = and i32 %14, 16777215, !dbg !5851
  %tobool = icmp ne i32 %and, 0, !dbg !5851
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !5852

lor.lhs.false:                                    ; preds = %entry
  %15 = load i32, i32* %old_from_ds, align 4, !dbg !5853
  %and11 = and i32 %15, 16777215, !dbg !5854
  %tobool12 = icmp ne i32 %and11, 0, !dbg !5854
  br i1 %tobool12, label %if.then, label %if.end36, !dbg !5855

if.then:                                          ; preds = %lor.lhs.false, %entry
  %16 = load i32, i32* %old_to_ds, align 4, !dbg !5856
  %call13 = call i32 @ds_get_speculation_types(i32 %16), !dbg !5858
  store i32 %call13, i32* %old_to_ds, align 4, !dbg !5859
  %17 = load i32, i32* %old_from_ds, align 4, !dbg !5860
  %call14 = call i32 @ds_get_speculation_types(i32 %17), !dbg !5861
  store i32 %call14, i32* %old_from_ds, align 4, !dbg !5862
  %18 = load i32, i32* %old_to_ds, align 4, !dbg !5863
  %19 = load i32, i32* %old_from_ds, align 4, !dbg !5865
  %cmp = icmp ne i32 %18, %19, !dbg !5866
  br i1 %cmp, label %if.then15, label %if.end35, !dbg !5867

if.then15:                                        ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %record_ds, metadata !5868, metadata !DIExpression()), !dbg !5870
  %20 = load i32, i32* %old_to_ds, align 4, !dbg !5871
  %and16 = and i32 %20, 16777215, !dbg !5873
  %tobool17 = icmp ne i32 %and16, 0, !dbg !5873
  br i1 %tobool17, label %land.lhs.true, label %if.end, !dbg !5874

land.lhs.true:                                    ; preds = %if.then15
  %21 = load i32, i32* %old_from_ds, align 4, !dbg !5875
  %and18 = and i32 %21, 16777215, !dbg !5876
  %tobool19 = icmp ne i32 %and18, 0, !dbg !5876
  br i1 %tobool19, label %if.then20, label %if.end, !dbg !5877

if.then20:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %res, metadata !5878, metadata !DIExpression()), !dbg !5880
  %22 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5881
  %23 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5882
  %spec_done_ds21 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 7, !dbg !5882
  %24 = load i32, i32* %spec_done_ds21, align 8, !dbg !5882
  %call22 = call i32 @speculate_expr(%struct._expr* %22, i32 %24), !dbg !5883
  store i32 %call22, i32* %res, align 4, !dbg !5884
  %25 = load i32, i32* %res, align 4, !dbg !5885
  %cmp23 = icmp sge i32 %25, 0, !dbg !5885
  br i1 %cmp23, label %cond.false, label %cond.true, !dbg !5885

cond.true:                                        ; preds = %if.then20
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1770, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5885
  br label %cond.end, !dbg !5885

cond.false:                                       ; preds = %if.then20
  br label %cond.end, !dbg !5885

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5885
  br label %if.end, !dbg !5886

if.end:                                           ; preds = %cond.end, %land.lhs.true, %if.then15
  %26 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5887
  %cmp24 = icmp ne %struct.rtx_def* %26, null, !dbg !5889
  br i1 %cmp24, label %if.then25, label %if.end34, !dbg !5890

if.then25:                                        ; preds = %if.end
  %27 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5891
  %spec_done_ds26 = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 7, !dbg !5891
  %28 = load i32, i32* %spec_done_ds26, align 8, !dbg !5891
  %and27 = and i32 %28, 16777215, !dbg !5893
  store i32 %and27, i32* %record_ds, align 4, !dbg !5894
  %29 = load i32, i32* %old_to_ds, align 4, !dbg !5895
  %and28 = and i32 %29, 16777215, !dbg !5896
  %neg = xor i32 %and28, -1, !dbg !5897
  %30 = load i32, i32* %record_ds, align 4, !dbg !5898
  %and29 = and i32 %30, %neg, !dbg !5898
  store i32 %and29, i32* %record_ds, align 4, !dbg !5898
  %31 = load i32, i32* %old_from_ds, align 4, !dbg !5899
  %and30 = and i32 %31, 16777215, !dbg !5900
  %neg31 = xor i32 %and30, -1, !dbg !5901
  %32 = load i32, i32* %record_ds, align 4, !dbg !5902
  %and32 = and i32 %32, %neg31, !dbg !5902
  store i32 %and32, i32* %record_ds, align 4, !dbg !5902
  %33 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5903
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 10, !dbg !5903
  %34 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5904
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5904
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5904
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5904
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !5904
  %35 = load i32, i32* %rt_int, align 8, !dbg !5904
  %36 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5905
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %36, i32 0, i32 0, !dbg !5905
  %37 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5905
  %38 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5906
  %vinsn33 = getelementptr inbounds %struct._expr, %struct._expr* %38, i32 0, i32 0, !dbg !5906
  %39 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn33, align 8, !dbg !5906
  %40 = load i32, i32* %record_ds, align 4, !dbg !5907
  call void @insert_in_history_vect(%struct.VEC_expr_history_def_heap** %history_of_changes, i32 %35, i32 1, %struct.vinsn_def* %37, %struct.vinsn_def* %39, i32 %40), !dbg !5908
  br label %if.end34, !dbg !5909

if.end34:                                         ; preds = %if.then25, %if.end
  br label %if.end35, !dbg !5910

if.end35:                                         ; preds = %if.end34, %if.then
  br label %if.end36, !dbg !5911

if.end36:                                         ; preds = %if.end35, %lor.lhs.false
  ret void, !dbg !5912
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @merge_expr(%struct._expr* %to, %struct._expr* %from, %struct.rtx_def* %split_point) #0 !dbg !5913 {
entry:
  %to.addr = alloca %struct._expr*, align 8
  %from.addr = alloca %struct._expr*, align 8
  %split_point.addr = alloca %struct.rtx_def*, align 8
  %to_vi = alloca %struct.vinsn_def*, align 8
  %from_vi = alloca %struct.vinsn_def*, align 8
  store %struct._expr* %to, %struct._expr** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %to.addr, metadata !5914, metadata !DIExpression()), !dbg !5915
  store %struct._expr* %from, %struct._expr** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %from.addr, metadata !5916, metadata !DIExpression()), !dbg !5917
  store %struct.rtx_def* %split_point, %struct.rtx_def** %split_point.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %split_point.addr, metadata !5918, metadata !DIExpression()), !dbg !5919
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %to_vi, metadata !5920, metadata !DIExpression()), !dbg !5921
  %0 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5922
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !5922
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5922
  store %struct.vinsn_def* %1, %struct.vinsn_def** %to_vi, align 8, !dbg !5921
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %from_vi, metadata !5923, metadata !DIExpression()), !dbg !5924
  %2 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5925
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 0, !dbg !5925
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn1, align 8, !dbg !5925
  store %struct.vinsn_def* %3, %struct.vinsn_def** %from_vi, align 8, !dbg !5924
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %to_vi, align 8, !dbg !5926
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %from_vi, align 8, !dbg !5926
  %call = call zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %4, %struct.vinsn_def* %5), !dbg !5926
  %tobool = icmp ne i8 %call, 0, !dbg !5926
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5926

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5926
  br label %cond.end, !dbg !5926

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5926

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5926
  %6 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5927
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 7, !dbg !5927
  %7 = load i32, i32* %spec_done_ds, align 8, !dbg !5927
  %cmp = icmp eq i32 %7, 0, !dbg !5929
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5930

land.lhs.true:                                    ; preds = %cond.end
  %8 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5931
  %spec_done_ds2 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 7, !dbg !5931
  %9 = load i32, i32* %spec_done_ds2, align 8, !dbg !5931
  %cmp3 = icmp ne i32 %9, 0, !dbg !5932
  br i1 %cmp3, label %if.then, label %if.end, !dbg !5933

if.then:                                          ; preds = %land.lhs.true
  %10 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5934
  %11 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5935
  %vinsn4 = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 0, !dbg !5935
  %12 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn4, align 8, !dbg !5935
  call void @change_vinsn_in_expr(%struct._expr* %10, %struct.vinsn_def* %12), !dbg !5936
  br label %if.end, !dbg !5936

if.end:                                           ; preds = %if.then, %land.lhs.true, %cond.end
  %13 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5937
  %14 = load %struct._expr*, %struct._expr** %from.addr, align 8, !dbg !5938
  %15 = load %struct.rtx_def*, %struct.rtx_def** %split_point.addr, align 8, !dbg !5939
  call void @merge_expr_data(%struct._expr* %13, %struct._expr* %14, %struct.rtx_def* %15), !dbg !5940
  %16 = load %struct._expr*, %struct._expr** %to.addr, align 8, !dbg !5941
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %16, i32 0, i32 2, !dbg !5941
  %17 = load i32, i32* %usefulness, align 4, !dbg !5941
  %cmp5 = icmp sle i32 %17, 10000, !dbg !5941
  br i1 %cmp5, label %cond.false7, label %cond.true6, !dbg !5941

cond.true6:                                       ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1858, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5941
  br label %cond.end8, !dbg !5941

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !5941

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !5941
  ret void, !dbg !5942
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @change_vinsn_in_expr(%struct._expr* %expr, %struct.vinsn_def* %new_vinsn) #0 !dbg !5943 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %new_vinsn.addr = alloca %struct.vinsn_def*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !5946, metadata !DIExpression()), !dbg !5947
  store %struct.vinsn_def* %new_vinsn, %struct.vinsn_def** %new_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %new_vinsn.addr, metadata !5948, metadata !DIExpression()), !dbg !5949
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5950
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !5950
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5950
  call void @vinsn_detach(%struct.vinsn_def* %1), !dbg !5951
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vinsn.addr, align 8, !dbg !5952
  %3 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5953
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !5953
  store %struct.vinsn_def* %2, %struct.vinsn_def** %vinsn1, align 8, !dbg !5954
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %new_vinsn.addr, align 8, !dbg !5955
  call void @vinsn_attach(%struct.vinsn_def* %4), !dbg !5956
  ret void, !dbg !5957
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_expr(%struct._expr* %expr) #0 !dbg !5958 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !5961, metadata !DIExpression()), !dbg !5962
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5963
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !5963
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !5963
  call void @vinsn_detach(%struct.vinsn_def* %1), !dbg !5964
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5965
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 0, !dbg !5965
  store %struct.vinsn_def* null, %struct.vinsn_def** %vinsn1, align 8, !dbg !5966
  %3 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !5967
  %history_of_changes = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 10, !dbg !5967
  call void @free_history_vect(%struct.VEC_expr_history_def_heap** %history_of_changes), !dbg !5968
  ret void, !dbg !5969
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_history_vect(%struct.VEC_expr_history_def_heap** %pvect) #0 !dbg !5970 {
entry:
  %pvect.addr = alloca %struct.VEC_expr_history_def_heap**, align 8
  %i = alloca i32, align 4
  %phist = alloca %struct.expr_history_def_1*, align 8
  store %struct.VEC_expr_history_def_heap** %pvect, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap*** %pvect.addr, metadata !5973, metadata !DIExpression()), !dbg !5974
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5975, metadata !DIExpression()), !dbg !5976
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %phist, metadata !5977, metadata !DIExpression()), !dbg !5978
  %0 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !5979
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %0, align 8, !dbg !5981
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %1, null, !dbg !5981
  br i1 %tobool, label %if.end, label %if.then, !dbg !5982

if.then:                                          ; preds = %entry
  br label %return, !dbg !5983

if.end:                                           ; preds = %entry
  store i32 0, i32* %i, align 4, !dbg !5984
  br label %for.cond, !dbg !5986

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !5987
  %3 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %2, align 8, !dbg !5987
  %tobool1 = icmp ne %struct.VEC_expr_history_def_heap* %3, null, !dbg !5987
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !5987

cond.true:                                        ; preds = %for.cond
  %4 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !5987
  %5 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %4, align 8, !dbg !5987
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %5, i32 0, i32 0, !dbg !5987
  br label %cond.end, !dbg !5987

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5987

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5987
  %6 = load i32, i32* %i, align 4, !dbg !5987
  %call = call i32 @VEC_expr_history_def_base_iterate(%struct.VEC_expr_history_def_base* %cond, i32 %6, %struct.expr_history_def_1** %phist), !dbg !5987
  %tobool2 = icmp ne i32 %call, 0, !dbg !5989
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5989

for.body:                                         ; preds = %cond.end
  %7 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5990
  %old_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %7, i32 0, i32 1, !dbg !5992
  %8 = load %struct.vinsn_def*, %struct.vinsn_def** %old_expr_vinsn, align 8, !dbg !5992
  call void @vinsn_detach(%struct.vinsn_def* %8), !dbg !5993
  %9 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %phist, align 8, !dbg !5994
  %new_expr_vinsn = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %9, i32 0, i32 2, !dbg !5995
  %10 = load %struct.vinsn_def*, %struct.vinsn_def** %new_expr_vinsn, align 8, !dbg !5995
  call void @vinsn_detach(%struct.vinsn_def* %10), !dbg !5996
  br label %for.inc, !dbg !5997

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !5998
  %inc = add i32 %11, 1, !dbg !5998
  store i32 %inc, i32* %i, align 4, !dbg !5998
  br label %for.cond, !dbg !5999, !llvm.loop !6000

for.end:                                          ; preds = %cond.end
  %12 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !6002
  call void @VEC_expr_history_def_heap_free(%struct.VEC_expr_history_def_heap** %12), !dbg !6002
  %13 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %pvect.addr, align 8, !dbg !6003
  store %struct.VEC_expr_history_def_heap* null, %struct.VEC_expr_history_def_heap** %13, align 8, !dbg !6004
  br label %return, !dbg !6005

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !6005
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @speculate_expr(%struct._expr* %expr, i32 %ds) #0 !dbg !6006 {
entry:
  %retval = alloca i32, align 4
  %expr.addr = alloca %struct._expr*, align 8
  %ds.addr = alloca i32, align 4
  %res = alloca i32, align 4
  %orig_insn_rtx = alloca %struct.rtx_def*, align 8
  %spec_pat = alloca %struct.rtx_def*, align 8
  %target_ds = alloca i32, align 4
  %current_ds = alloca i32, align 4
  %spec_insn_rtx = alloca %struct.rtx_def*, align 8
  %spec_vinsn = alloca %struct.vinsn_def*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6009, metadata !DIExpression()), !dbg !6010
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !6011, metadata !DIExpression()), !dbg !6012
  call void @llvm.dbg.declare(metadata i32* %res, metadata !6013, metadata !DIExpression()), !dbg !6014
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_insn_rtx, metadata !6015, metadata !DIExpression()), !dbg !6016
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %spec_pat, metadata !6017, metadata !DIExpression()), !dbg !6018
  call void @llvm.dbg.declare(metadata i32* %target_ds, metadata !6019, metadata !DIExpression()), !dbg !6020
  call void @llvm.dbg.declare(metadata i32* %current_ds, metadata !6021, metadata !DIExpression()), !dbg !6022
  %0 = load i32, i32* %ds.addr, align 4, !dbg !6023
  %and = and i32 %0, 16777215, !dbg !6024
  store i32 %and, i32* %target_ds, align 4, !dbg !6025
  %1 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6026
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %1, i32 0, i32 7, !dbg !6026
  %2 = load i32, i32* %spec_done_ds, align 8, !dbg !6026
  store i32 %2, i32* %current_ds, align 4, !dbg !6027
  %3 = load i32, i32* %current_ds, align 4, !dbg !6028
  %4 = load i32, i32* %target_ds, align 4, !dbg !6029
  %call = call i32 @ds_full_merge(i32 %3, i32 %4, %struct.rtx_def* null, %struct.rtx_def* null), !dbg !6030
  store i32 %call, i32* %ds.addr, align 4, !dbg !6031
  %5 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6032
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 0, !dbg !6032
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6032
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 0, !dbg !6032
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6032
  store %struct.rtx_def* %7, %struct.rtx_def** %orig_insn_rtx, align 8, !dbg !6033
  %8 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn_rtx, align 8, !dbg !6034
  %9 = load i32, i32* %ds.addr, align 4, !dbg !6035
  %call1 = call i32 @sched_speculate_insn(%struct.rtx_def* %8, i32 %9, %struct.rtx_def** %spec_pat), !dbg !6036
  store i32 %call1, i32* %res, align 4, !dbg !6037
  %10 = load i32, i32* %res, align 4, !dbg !6038
  switch i32 %10, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
    i32 -1, label %sw.bb10
  ], !dbg !6039

sw.bb:                                            ; preds = %entry
  %11 = load i32, i32* %ds.addr, align 4, !dbg !6040
  %12 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6042
  %spec_done_ds2 = getelementptr inbounds %struct._expr, %struct._expr* %12, i32 0, i32 7, !dbg !6042
  store i32 %11, i32* %spec_done_ds2, align 8, !dbg !6043
  %13 = load i32, i32* %current_ds, align 4, !dbg !6044
  %14 = load i32, i32* %ds.addr, align 4, !dbg !6045
  %cmp = icmp ne i32 %13, %14, !dbg !6046
  %15 = zext i1 %cmp to i64, !dbg !6044
  %cond = select i1 %cmp, i32 1, i32 0, !dbg !6044
  store i32 %cond, i32* %retval, align 4, !dbg !6047
  br label %return, !dbg !6047

sw.bb3:                                           ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %spec_insn_rtx, metadata !6048, metadata !DIExpression()), !dbg !6050
  %16 = load %struct.rtx_def*, %struct.rtx_def** %spec_pat, align 8, !dbg !6051
  %call4 = call %struct.rtx_def* @create_insn_rtx_from_pattern(%struct.rtx_def* %16, %struct.rtx_def* null), !dbg !6052
  store %struct.rtx_def* %call4, %struct.rtx_def** %spec_insn_rtx, align 8, !dbg !6050
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %spec_vinsn, metadata !6053, metadata !DIExpression()), !dbg !6054
  %17 = load %struct.rtx_def*, %struct.rtx_def** %spec_insn_rtx, align 8, !dbg !6055
  %call5 = call %struct.vinsn_def* @create_vinsn_from_insn_rtx(%struct.rtx_def* %17, i8 zeroext 0), !dbg !6056
  store %struct.vinsn_def* %call5, %struct.vinsn_def** %spec_vinsn, align 8, !dbg !6054
  %18 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6057
  %19 = load %struct.vinsn_def*, %struct.vinsn_def** %spec_vinsn, align 8, !dbg !6058
  call void @change_vinsn_in_expr(%struct._expr* %18, %struct.vinsn_def* %19), !dbg !6059
  %20 = load i32, i32* %ds.addr, align 4, !dbg !6060
  %21 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6061
  %spec_done_ds6 = getelementptr inbounds %struct._expr, %struct._expr* %21, i32 0, i32 7, !dbg !6061
  store i32 %20, i32* %spec_done_ds6, align 8, !dbg !6062
  %22 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6063
  %needs_spec_check_p = getelementptr inbounds %struct._expr, %struct._expr* %22, i32 0, i32 12, !dbg !6063
  %bf.load = load i8, i8* %needs_spec_check_p, align 1, !dbg !6064
  %bf.clear = and i8 %bf.load, -2, !dbg !6064
  %bf.set = or i8 %bf.clear, 1, !dbg !6064
  store i8 %bf.set, i8* %needs_spec_check_p, align 1, !dbg !6064
  %23 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6065
  %vinsn7 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 0, !dbg !6065
  %24 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn7, align 8, !dbg !6065
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %24, i32 0, i32 1, !dbg !6065
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 5, !dbg !6065
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !6065
  %26 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6067
  %call8 = call i32 @expr_dest_regno(%struct._expr* %26), !dbg !6068
  %call9 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %25, i32 %call8), !dbg !6069
  %tobool = icmp ne i32 %call9, 0, !dbg !6069
  br i1 %tobool, label %if.then, label %if.end, !dbg !6070

if.then:                                          ; preds = %sw.bb3
  %27 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6071
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %27, i32 0, i32 11, !dbg !6071
  store i8 0, i8* %target_available, align 8, !dbg !6073
  store i32 2, i32* %retval, align 4, !dbg !6074
  br label %return, !dbg !6074

if.end:                                           ; preds = %sw.bb3
  store i32 1, i32* %retval, align 4, !dbg !6075
  br label %return, !dbg !6075

sw.bb10:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !6076
  br label %return, !dbg !6076

sw.default:                                       ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1981, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6077
  store i32 -1, i32* %retval, align 4, !dbg !6078
  br label %return, !dbg !6078

return:                                           ; preds = %sw.default, %sw.bb10, %if.end, %if.then, %sw.bb
  %28 = load i32, i32* %retval, align 4, !dbg !6079
  ret i32 %28, !dbg !6079
}

declare dso_local i32 @ds_full_merge(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local i32 @sched_speculate_insn(%struct.rtx_def*, i32, %struct.rtx_def**) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @create_insn_rtx_from_pattern(%struct.rtx_def* %pattern, %struct.rtx_def* %label) #0 !dbg !6080 {
entry:
  %pattern.addr = alloca %struct.rtx_def*, align 8
  %label.addr = alloca %struct.rtx_def*, align 8
  %insn_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %pattern, %struct.rtx_def** %pattern.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern.addr, metadata !6083, metadata !DIExpression()), !dbg !6084
  store %struct.rtx_def* %label, %struct.rtx_def** %label.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %label.addr, metadata !6085, metadata !DIExpression()), !dbg !6086
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_rtx, metadata !6087, metadata !DIExpression()), !dbg !6088
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6089
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6089
  %bf.load = load i32, i32* %1, align 8, !dbg !6089
  %bf.clear = and i32 %bf.load, 65535, !dbg !6089
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !6089
  br i1 %cmp, label %cond.true, label %lor.lhs.false, !dbg !6089

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6089
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6089
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6089
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6089
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !6089
  br i1 %cmp3, label %cond.true, label %lor.lhs.false4, !dbg !6089

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6089
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6089
  %bf.load5 = load i32, i32* %5, align 8, !dbg !6089
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !6089
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !6089
  br i1 %cmp7, label %cond.true, label %lor.lhs.false8, !dbg !6089

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6089
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6089
  %bf.load9 = load i32, i32* %7, align 8, !dbg !6089
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6089
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !6089
  br i1 %cmp11, label %cond.true, label %cond.false, !dbg !6089

cond.true:                                        ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5516, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6089
  br label %cond.end, !dbg !6089

cond.false:                                       ; preds = %lor.lhs.false8
  br label %cond.end, !dbg !6089

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6089
  call void @start_sequence(), !dbg !6090
  %8 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6091
  %cmp12 = icmp eq %struct.rtx_def* %8, null, !dbg !6093
  br i1 %cmp12, label %if.then, label %if.else, !dbg !6094

if.then:                                          ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6095
  %call = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %9), !dbg !6096
  store %struct.rtx_def* %call, %struct.rtx_def** %insn_rtx, align 8, !dbg !6097
  br label %if.end23, !dbg !6098

if.else:                                          ; preds = %cond.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6099
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6099
  %bf.load13 = load i32, i32* %11, align 8, !dbg !6099
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !6099
  %cmp15 = icmp eq i32 %bf.clear14, 7, !dbg !6099
  br i1 %cmp15, label %if.then16, label %if.else18, !dbg !6101

if.then16:                                        ; preds = %if.else
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6102
  %call17 = call %struct.rtx_def* @emit_debug_insn(%struct.rtx_def* %12), !dbg !6103
  store %struct.rtx_def* %call17, %struct.rtx_def** %insn_rtx, align 8, !dbg !6104
  br label %if.end, !dbg !6105

if.else18:                                        ; preds = %if.else
  %13 = load %struct.rtx_def*, %struct.rtx_def** %pattern.addr, align 8, !dbg !6106
  %call19 = call %struct.rtx_def* @emit_jump_insn(%struct.rtx_def* %13), !dbg !6108
  store %struct.rtx_def* %call19, %struct.rtx_def** %insn_rtx, align 8, !dbg !6109
  %14 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6110
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6111
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6111
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6111
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 8, !dbg !6111
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6111
  store %struct.rtx_def* %14, %struct.rtx_def** %rt_rtx, align 8, !dbg !6112
  %16 = load %struct.rtx_def*, %struct.rtx_def** %label.addr, align 8, !dbg !6113
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6113
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !6113
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 4, !dbg !6113
  %rt_int = bitcast %union.rtunion_def* %arrayidx22 to i32*, !dbg !6113
  %17 = load i32, i32* %rt_int, align 8, !dbg !6114
  %inc = add nsw i32 %17, 1, !dbg !6114
  store i32 %inc, i32* %rt_int, align 8, !dbg !6114
  br label %if.end

if.end:                                           ; preds = %if.else18, %if.then16
  br label %if.end23

if.end23:                                         ; preds = %if.end, %if.then
  call void @end_sequence(), !dbg !6115
  call void @sched_init_luids(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !6116
  call void @sched_extend_target(), !dbg !6117
  call void @sched_deps_init(i8 zeroext 0), !dbg !6118
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6119
  %call24 = call i32 @recog_memoized(%struct.rtx_def* %18), !dbg !6120
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6121
  ret %struct.rtx_def* %19, !dbg !6122
}

declare dso_local i32 @bitmap_bit_p(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @expr_dest_regno(%struct._expr* %expr) #0 !dbg !6123 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6126, metadata !DIExpression()), !dbg !6127
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !6128, metadata !DIExpression()), !dbg !6129
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6130
  %call = call %struct.rtx_def* @expr_dest_reg(%struct._expr* %0), !dbg !6131
  store %struct.rtx_def* %call, %struct.rtx_def** %dest, align 8, !dbg !6129
  %1 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6132
  %cmp = icmp ne %struct.rtx_def* %1, null, !dbg !6132
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6132

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2004, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6132
  br label %cond.end, !dbg !6132

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6132

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6132
  %2 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6133
  %call1 = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !6133
  ret i32 %call1, !dbg !6134
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expr_dest_reg(%struct._expr* %expr) #0 !dbg !6135 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6138, metadata !DIExpression()), !dbg !6139
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !6140, metadata !DIExpression()), !dbg !6141
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6142
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !6142
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6142
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 1, !dbg !6142
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 1, !dbg !6142
  %2 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !6142
  store %struct.rtx_def* %2, %struct.rtx_def** %dest, align 8, !dbg !6141
  %3 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6143
  %cmp = icmp ne %struct.rtx_def* %3, null, !dbg !6145
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6146

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6147
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6147
  %bf.load = load i32, i32* %5, align 8, !dbg !6147
  %bf.clear = and i32 %bf.load, 65535, !dbg !6147
  %cmp1 = icmp eq i32 %bf.clear, 37, !dbg !6147
  br i1 %cmp1, label %if.then, label %if.end, !dbg !6148

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !6149
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !6150
  br label %return, !dbg !6150

if.end:                                           ; preds = %land.lhs.true, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6151
  br label %return, !dbg !6151

return:                                           ; preds = %if.end, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6152
  ret %struct.rtx_def* %7, !dbg !6152
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !6153 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6156, metadata !DIExpression()), !dbg !6157
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6158
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6158
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6158
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6158
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6158
  %1 = load i32, i32* %rt_uint, align 8, !dbg !6158
  ret i32 %1, !dbg !6159
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @mark_unavailable_targets(%struct._list_node* %join_set, %struct._list_node* %av_set, %struct.bitmap_head_def* %lv_set) #0 !dbg !6160 {
entry:
  %join_set.addr = alloca %struct._list_node*, align 8
  %av_set.addr = alloca %struct._list_node*, align 8
  %lv_set.addr = alloca %struct.bitmap_head_def*, align 8
  %expr = alloca %struct._expr*, align 8
  %avi = alloca %struct._list_iterator, align 8
  store %struct._list_node* %join_set, %struct._list_node** %join_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %join_set.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  store %struct._list_node* %av_set, %struct._list_node** %av_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %av_set.addr, metadata !6165, metadata !DIExpression()), !dbg !6166
  store %struct.bitmap_head_def* %lv_set, %struct.bitmap_head_def** %lv_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %lv_set.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6169, metadata !DIExpression()), !dbg !6170
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %avi, metadata !6171, metadata !DIExpression()), !dbg !6172
  call void @_list_iter_start(%struct._list_iterator* %avi, %struct._list_node** %join_set.addr, i8 zeroext 0), !dbg !6173
  br label %for.cond, !dbg !6173

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %avi, i32 0, i32 0, !dbg !6175
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6175
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6175
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %expr), !dbg !6175
  %tobool = icmp ne i8 %call, 0, !dbg !6173
  br i1 %tobool, label %for.body, label %for.end, !dbg !6173

for.body:                                         ; preds = %for.cond
  %2 = load %struct._list_node*, %struct._list_node** %av_set.addr, align 8, !dbg !6177
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6179
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !6179
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6179
  %call1 = call %struct._expr* @av_set_lookup(%struct._list_node* %2, %struct.vinsn_def* %4), !dbg !6180
  %cmp = icmp eq %struct._expr* %call1, null, !dbg !6181
  br i1 %cmp, label %if.then, label %if.end, !dbg !6182

if.then:                                          ; preds = %for.body
  %5 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6183
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set.addr, align 8, !dbg !6184
  call void @set_unavailable_target_for_expr(%struct._expr* %5, %struct.bitmap_head_def* %6), !dbg !6185
  br label %if.end, !dbg !6185

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6186

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %avi), !dbg !6175
  br label %for.cond, !dbg !6175, !llvm.loop !6187

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6189
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_iter_start(%struct._list_iterator* %ip, %struct._list_node** %lp, i8 zeroext %can_remove_p) #0 !dbg !6190 {
entry:
  %ip.addr = alloca %struct._list_iterator*, align 8
  %lp.addr = alloca %struct._list_node**, align 8
  %can_remove_p.addr = alloca i8, align 1
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !6194, metadata !DIExpression()), !dbg !6195
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !6196, metadata !DIExpression()), !dbg !6197
  store i8 %can_remove_p, i8* %can_remove_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %can_remove_p.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !6200
  %1 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6201
  %lp1 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %1, i32 0, i32 0, !dbg !6202
  store %struct._list_node** %0, %struct._list_node*** %lp1, align 8, !dbg !6203
  %2 = load i8, i8* %can_remove_p.addr, align 1, !dbg !6204
  %3 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6205
  %can_remove_p2 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %3, i32 0, i32 1, !dbg !6206
  store i8 %2, i8* %can_remove_p2, align 8, !dbg !6207
  %4 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6208
  %removed_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %4, i32 0, i32 2, !dbg !6209
  store i8 0, i8* %removed_p, align 1, !dbg !6210
  ret void, !dbg !6211
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @_list_iter_cond_expr(%struct._list_node* %av, %struct._expr** %exprp) #0 !dbg !6212 {
entry:
  %retval = alloca i8, align 1
  %av.addr = alloca %struct._list_node*, align 8
  %exprp.addr = alloca %struct._expr**, align 8
  store %struct._list_node* %av, %struct._list_node** %av.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %av.addr, metadata !6216, metadata !DIExpression()), !dbg !6217
  store %struct._expr** %exprp, %struct._expr*** %exprp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr*** %exprp.addr, metadata !6218, metadata !DIExpression()), !dbg !6219
  %0 = load %struct._list_node*, %struct._list_node** %av.addr, align 8, !dbg !6220
  %tobool = icmp ne %struct._list_node* %0, null, !dbg !6220
  br i1 %tobool, label %if.then, label %if.end, !dbg !6222

if.then:                                          ; preds = %entry
  %1 = load %struct._list_node*, %struct._list_node** %av.addr, align 8, !dbg !6223
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !6223
  %expr = bitcast %union.anon.0* %u to %struct._expr*, !dbg !6223
  %2 = load %struct._expr**, %struct._expr*** %exprp.addr, align 8, !dbg !6225
  store %struct._expr* %expr, %struct._expr** %2, align 8, !dbg !6226
  store i8 1, i8* %retval, align 1, !dbg !6227
  br label %return, !dbg !6227

if.end:                                           ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !6228
  br label %return, !dbg !6228

return:                                           ; preds = %if.end, %if.then
  %3 = load i8, i8* %retval, align 1, !dbg !6229
  ret i8 %3, !dbg !6229
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._expr* @av_set_lookup(%struct._list_node* %set, %struct.vinsn_def* %sought_vinsn) #0 !dbg !6230 {
entry:
  %retval = alloca %struct._expr*, align 8
  %set.addr = alloca %struct._list_node*, align 8
  %sought_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  store %struct._list_node* %set, %struct._list_node** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %set.addr, metadata !6233, metadata !DIExpression()), !dbg !6234
  store %struct.vinsn_def* %sought_vinsn, %struct.vinsn_def** %sought_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %sought_vinsn.addr, metadata !6235, metadata !DIExpression()), !dbg !6236
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6237, metadata !DIExpression()), !dbg !6238
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6239, metadata !DIExpression()), !dbg !6240
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %set.addr, i8 zeroext 0), !dbg !6241
  br label %for.cond, !dbg !6241

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6243
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6243
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6243
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %expr), !dbg !6243
  %tobool = icmp ne i8 %call, 0, !dbg !6241
  br i1 %tobool, label %for.body, label %for.end, !dbg !6241

for.body:                                         ; preds = %for.cond
  %2 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6245
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %2, i32 0, i32 0, !dbg !6245
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6245
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %sought_vinsn.addr, align 8, !dbg !6247
  %call1 = call zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %3, %struct.vinsn_def* %4), !dbg !6248
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6248
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6249

if.then:                                          ; preds = %for.body
  %5 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6250
  store %struct._expr* %5, %struct._expr** %retval, align 8, !dbg !6251
  br label %return, !dbg !6251

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6252

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6243
  br label %for.cond, !dbg !6243, !llvm.loop !6253

for.end:                                          ; preds = %for.cond
  store %struct._expr* null, %struct._expr** %retval, align 8, !dbg !6255
  br label %return, !dbg !6255

return:                                           ; preds = %for.end, %if.then
  %6 = load %struct._expr*, %struct._expr** %retval, align 8, !dbg !6256
  ret %struct._expr* %6, !dbg !6256
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_unavailable_target_for_expr(%struct._expr* %expr, %struct.bitmap_head_def* %lv_set) #0 !dbg !6257 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %lv_set.addr = alloca %struct.bitmap_head_def*, align 8
  %regno = alloca i32, align 4
  %rsi = alloca %struct.bitmap_iterator, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6260, metadata !DIExpression()), !dbg !6261
  store %struct.bitmap_head_def* %lv_set, %struct.bitmap_head_def** %lv_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %lv_set.addr, metadata !6262, metadata !DIExpression()), !dbg !6263
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6264
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !6264
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6264
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 1, !dbg !6264
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !6264
  %2 = load i32, i32* %type, align 8, !dbg !6264
  %cmp = icmp eq i32 %2, 23, !dbg !6264
  br i1 %cmp, label %if.then, label %if.else20, !dbg !6266

if.then:                                          ; preds = %entry
  %3 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6267
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !6267
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn1, align 8, !dbg !6267
  %id2 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 1, !dbg !6267
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id2, i32 0, i32 1, !dbg !6267
  %5 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !6267
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6267
  %bf.load = load i32, i32* %6, align 8, !dbg !6267
  %bf.clear = and i32 %bf.load, 65535, !dbg !6267
  %cmp3 = icmp eq i32 %bf.clear, 37, !dbg !6267
  br i1 %cmp3, label %land.lhs.true, label %if.end19, !dbg !6270

land.lhs.true:                                    ; preds = %if.then
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set.addr, align 8, !dbg !6271
  %8 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6272
  %vinsn4 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 0, !dbg !6272
  %9 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn4, align 8, !dbg !6272
  %id5 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %9, i32 0, i32 1, !dbg !6272
  %lhs6 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id5, i32 0, i32 1, !dbg !6272
  %10 = load %struct.rtx_def*, %struct.rtx_def** %lhs6, align 8, !dbg !6272
  %call = call i32 @rhs_regno(%struct.rtx_def* %10), !dbg !6272
  %call7 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %7, i32 %call), !dbg !6273
  %tobool = icmp ne i32 %call7, 0, !dbg !6273
  br i1 %tobool, label %if.then8, label %if.end19, !dbg !6274

if.then8:                                         ; preds = %land.lhs.true
  %11 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6275
  %vinsn9 = getelementptr inbounds %struct._expr, %struct._expr* %11, i32 0, i32 0, !dbg !6275
  %12 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn9, align 8, !dbg !6275
  %id10 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %12, i32 0, i32 1, !dbg !6275
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id10, i32 0, i32 5, !dbg !6275
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !6275
  %14 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6278
  %vinsn11 = getelementptr inbounds %struct._expr, %struct._expr* %14, i32 0, i32 0, !dbg !6278
  %15 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn11, align 8, !dbg !6278
  %id12 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %15, i32 0, i32 1, !dbg !6278
  %lhs13 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id12, i32 0, i32 1, !dbg !6278
  %16 = load %struct.rtx_def*, %struct.rtx_def** %lhs13, align 8, !dbg !6278
  %call14 = call i32 @rhs_regno(%struct.rtx_def* %16), !dbg !6278
  %call15 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %13, i32 %call14), !dbg !6279
  %tobool16 = icmp ne i32 %call15, 0, !dbg !6279
  br i1 %tobool16, label %if.then17, label %if.else, !dbg !6280

if.then17:                                        ; preds = %if.then8
  %17 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6281
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 11, !dbg !6281
  store i8 -1, i8* %target_available, align 8, !dbg !6282
  br label %if.end, !dbg !6281

if.else:                                          ; preds = %if.then8
  %18 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6283
  %target_available18 = getelementptr inbounds %struct._expr, %struct._expr* %18, i32 0, i32 11, !dbg !6283
  store i8 0, i8* %target_available18, align 8, !dbg !6284
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then17
  br label %if.end19, !dbg !6285

if.end19:                                         ; preds = %if.end, %land.lhs.true, %if.then
  br label %if.end43, !dbg !6286

if.else20:                                        ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !6287, metadata !DIExpression()), !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %rsi, metadata !6290, metadata !DIExpression()), !dbg !6292
  %19 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6293
  %vinsn21 = getelementptr inbounds %struct._expr, %struct._expr* %19, i32 0, i32 0, !dbg !6293
  %20 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn21, align 8, !dbg !6293
  %id22 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %20, i32 0, i32 1, !dbg !6293
  %reg_sets = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id22, i32 0, i32 3, !dbg !6293
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_sets, align 8, !dbg !6293
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %rsi, %struct.bitmap_head_def* %21, i32 0, i32* %regno), !dbg !6293
  br label %for.cond, !dbg !6293

for.cond:                                         ; preds = %for.inc, %if.else20
  %call23 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %rsi, i32* %regno), !dbg !6295
  %tobool24 = icmp ne i8 %call23, 0, !dbg !6293
  br i1 %tobool24, label %for.body, label %for.end, !dbg !6293

for.body:                                         ; preds = %for.cond
  %22 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set.addr, align 8, !dbg !6297
  %23 = load i32, i32* %regno, align 4, !dbg !6299
  %call25 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %22, i32 %23), !dbg !6300
  %tobool26 = icmp ne i32 %call25, 0, !dbg !6300
  br i1 %tobool26, label %if.then27, label %if.end29, !dbg !6301

if.then27:                                        ; preds = %for.body
  %24 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6302
  %target_available28 = getelementptr inbounds %struct._expr, %struct._expr* %24, i32 0, i32 11, !dbg !6302
  store i8 0, i8* %target_available28, align 8, !dbg !6304
  br label %for.end, !dbg !6305

if.end29:                                         ; preds = %for.body
  br label %for.inc, !dbg !6306

for.inc:                                          ; preds = %if.end29
  call void @bmp_iter_next(%struct.bitmap_iterator* %rsi, i32* %regno), !dbg !6295
  br label %for.cond, !dbg !6295, !llvm.loop !6307

for.end:                                          ; preds = %if.then27, %for.cond
  %25 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6309
  %vinsn30 = getelementptr inbounds %struct._expr, %struct._expr* %25, i32 0, i32 0, !dbg !6309
  %26 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn30, align 8, !dbg !6309
  %id31 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %26, i32 0, i32 1, !dbg !6309
  %reg_clobbers = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id31, i32 0, i32 4, !dbg !6309
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_clobbers, align 8, !dbg !6309
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %rsi, %struct.bitmap_head_def* %27, i32 0, i32* %regno), !dbg !6309
  br label %for.cond32, !dbg !6309

for.cond32:                                       ; preds = %for.inc41, %for.end
  %call33 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %rsi, i32* %regno), !dbg !6311
  %tobool34 = icmp ne i8 %call33, 0, !dbg !6309
  br i1 %tobool34, label %for.body35, label %for.end42, !dbg !6309

for.body35:                                       ; preds = %for.cond32
  %28 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set.addr, align 8, !dbg !6313
  %29 = load i32, i32* %regno, align 4, !dbg !6315
  %call36 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %28, i32 %29), !dbg !6316
  %tobool37 = icmp ne i32 %call36, 0, !dbg !6316
  br i1 %tobool37, label %if.then38, label %if.end40, !dbg !6317

if.then38:                                        ; preds = %for.body35
  %30 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6318
  %target_available39 = getelementptr inbounds %struct._expr, %struct._expr* %30, i32 0, i32 11, !dbg !6318
  store i8 0, i8* %target_available39, align 8, !dbg !6320
  br label %for.end42, !dbg !6321

if.end40:                                         ; preds = %for.body35
  br label %for.inc41, !dbg !6322

for.inc41:                                        ; preds = %if.end40
  call void @bmp_iter_next(%struct.bitmap_iterator* %rsi, i32* %regno), !dbg !6311
  br label %for.cond32, !dbg !6311, !llvm.loop !6323

for.end42:                                        ; preds = %if.then38, %for.cond32
  br label %if.end43

if.end43:                                         ; preds = %for.end42, %if.end19
  ret void, !dbg !6325
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_iter_next(%struct._list_iterator* %ip) #0 !dbg !6326 {
entry:
  %ip.addr = alloca %struct._list_iterator*, align 8
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !6329, metadata !DIExpression()), !dbg !6330
  %0 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6331
  %removed_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %0, i32 0, i32 2, !dbg !6333
  %1 = load i8, i8* %removed_p, align 1, !dbg !6333
  %tobool = icmp ne i8 %1, 0, !dbg !6331
  br i1 %tobool, label %if.else, label %if.then, !dbg !6334

if.then:                                          ; preds = %entry
  %2 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6335
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %2, i32 0, i32 0, !dbg !6335
  %3 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6335
  %4 = load %struct._list_node*, %struct._list_node** %3, align 8, !dbg !6335
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %4, i32 0, i32 0, !dbg !6335
  %5 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6336
  %lp1 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %5, i32 0, i32 0, !dbg !6337
  store %struct._list_node** %next, %struct._list_node*** %lp1, align 8, !dbg !6338
  br label %if.end, !dbg !6336

if.else:                                          ; preds = %entry
  %6 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6339
  %removed_p2 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %6, i32 0, i32 2, !dbg !6340
  store i8 0, i8* %removed_p2, align 1, !dbg !6341
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !6342
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_add(%struct._list_node** %setp, %struct._expr* %expr) #0 !dbg !6343 {
entry:
  %setp.addr = alloca %struct._list_node**, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %elem = alloca %struct._list_node*, align 8
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !6346, metadata !DIExpression()), !dbg !6347
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6348, metadata !DIExpression()), !dbg !6349
  call void @llvm.dbg.declare(metadata %struct._list_node** %elem, metadata !6350, metadata !DIExpression()), !dbg !6351
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6352
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %0, i32 0, i32 0, !dbg !6352
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6352
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 0, !dbg !6352
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6352
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6352
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6352
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6352
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6352
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6352
  %4 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !6352
  %cmp = icmp eq %struct.rtx_def* %3, %4, !dbg !6352
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !6352

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2040, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6352
  br label %cond.end, !dbg !6352

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6352
  %5 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6353
  %call = call %struct._list_node* @av_set_add_element(%struct._list_node** %5), !dbg !6354
  store %struct._list_node* %call, %struct._list_node** %elem, align 8, !dbg !6355
  %6 = load %struct._list_node*, %struct._list_node** %elem, align 8, !dbg !6356
  %u1 = getelementptr inbounds %struct._list_node, %struct._list_node* %6, i32 0, i32 1, !dbg !6356
  %expr2 = bitcast %union.anon.0* %u1 to %struct._expr*, !dbg !6356
  %7 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6357
  call void @copy_expr(%struct._expr* %expr2, %struct._expr* %7), !dbg !6358
  ret void, !dbg !6359
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._list_node* @av_set_add_element(%struct._list_node** %setp) #0 !dbg !6360 {
entry:
  %setp.addr = alloca %struct._list_node**, align 8
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !6363, metadata !DIExpression()), !dbg !6364
  %0 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6365
  call void @_list_add(%struct._list_node** %0), !dbg !6366
  %1 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6367
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6368
  ret %struct._list_node* %2, !dbg !6369
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_iter_remove(%struct._list_iterator* %ip) #0 !dbg !6370 {
entry:
  %ip.addr = alloca %struct._list_iterator*, align 8
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !6374, metadata !DIExpression()), !dbg !6375
  %0 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6376
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %0, i32 0, i32 0, !dbg !6376
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6376
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6376
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 1, !dbg !6376
  %expr = bitcast %union.anon.0* %u to %struct._expr*, !dbg !6376
  call void @clear_expr(%struct._expr* %expr), !dbg !6377
  %3 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6378
  call void @_list_iter_remove(%struct._list_iterator* %3), !dbg !6379
  ret void, !dbg !6380
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_iter_remove(%struct._list_iterator* %ip) #0 !dbg !6381 {
entry:
  %ip.addr = alloca %struct._list_iterator*, align 8
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !6382, metadata !DIExpression()), !dbg !6383
  %0 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6384
  %removed_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %0, i32 0, i32 2, !dbg !6384
  %1 = load i8, i8* %removed_p, align 1, !dbg !6384
  %tobool = icmp ne i8 %1, 0, !dbg !6384
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !6384

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6384
  %can_remove_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %2, i32 0, i32 1, !dbg !6384
  %3 = load i8, i8* %can_remove_p, align 8, !dbg !6384
  %conv = zext i8 %3 to i32, !dbg !6384
  %tobool1 = icmp ne i32 %conv, 0, !dbg !6384
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !6384

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 448, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6384
  br label %cond.end, !dbg !6384

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6384

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6384
  %4 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6385
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %4, i32 0, i32 0, !dbg !6386
  %5 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6386
  call void @_list_remove(%struct._list_node** %5), !dbg !6387
  %6 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6388
  %removed_p2 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %6, i32 0, i32 2, !dbg !6389
  store i8 1, i8* %removed_p2, align 1, !dbg !6390
  ret void, !dbg !6391
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._expr* @merge_with_other_exprs(%struct._list_node** %avp, %struct._list_iterator* %ip, %struct._expr* %expr) #0 !dbg !6392 {
entry:
  %retval = alloca %struct._expr*, align 8
  %avp.addr = alloca %struct._list_node**, align 8
  %ip.addr = alloca %struct._list_iterator*, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %expr2 = alloca %struct._expr*, align 8
  store %struct._list_node** %avp, %struct._list_node*** %avp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %avp.addr, metadata !6395, metadata !DIExpression()), !dbg !6396
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !6397, metadata !DIExpression()), !dbg !6398
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6399, metadata !DIExpression()), !dbg !6400
  call void @llvm.dbg.declare(metadata %struct._expr** %expr2, metadata !6401, metadata !DIExpression()), !dbg !6402
  %0 = load %struct._list_node**, %struct._list_node*** %avp.addr, align 8, !dbg !6403
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6404
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6405
  %call = call %struct._expr* @av_set_lookup_other_equiv_expr(%struct._list_node* %1, %struct._expr* %2), !dbg !6406
  store %struct._expr* %call, %struct._expr** %expr2, align 8, !dbg !6407
  %3 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6408
  %cmp = icmp ne %struct._expr* %3, null, !dbg !6410
  br i1 %cmp, label %if.then, label %if.end, !dbg !6411

if.then:                                          ; preds = %entry
  %4 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6412
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 11, !dbg !6412
  store i8 -1, i8* %target_available, align 8, !dbg !6414
  %5 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6415
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 2, !dbg !6415
  store i32 0, i32* %usefulness, align 4, !dbg !6416
  %6 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6417
  %7 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6418
  call void @merge_expr(%struct._expr* %6, %struct._expr* %7, %struct.rtx_def* null), !dbg !6419
  %8 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6420
  %usefulness1 = getelementptr inbounds %struct._expr, %struct._expr* %8, i32 0, i32 2, !dbg !6420
  store i32 10000, i32* %usefulness1, align 4, !dbg !6421
  %9 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !6422
  call void @av_set_iter_remove(%struct._list_iterator* %9), !dbg !6423
  %10 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6424
  store %struct._expr* %10, %struct._expr** %retval, align 8, !dbg !6425
  br label %return, !dbg !6425

if.end:                                           ; preds = %entry
  %11 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6426
  store %struct._expr* %11, %struct._expr** %retval, align 8, !dbg !6427
  br label %return, !dbg !6427

return:                                           ; preds = %if.end, %if.then
  %12 = load %struct._expr*, %struct._expr** %retval, align 8, !dbg !6428
  ret %struct._expr* %12, !dbg !6428
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._expr* @av_set_lookup_other_equiv_expr(%struct._list_node* %set, %struct._expr* %expr) #0 !dbg !6429 {
entry:
  %retval = alloca %struct._expr*, align 8
  %set.addr = alloca %struct._list_node*, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %cur_expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  store %struct._list_node* %set, %struct._list_node** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %set.addr, metadata !6432, metadata !DIExpression()), !dbg !6433
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6434, metadata !DIExpression()), !dbg !6435
  call void @llvm.dbg.declare(metadata %struct._expr** %cur_expr, metadata !6436, metadata !DIExpression()), !dbg !6437
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6438, metadata !DIExpression()), !dbg !6439
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %set.addr, i8 zeroext 0), !dbg !6440
  br label %for.cond, !dbg !6440

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6442
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6442
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6442
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %cur_expr), !dbg !6442
  %tobool = icmp ne i8 %call, 0, !dbg !6440
  br i1 %tobool, label %for.body, label %for.end, !dbg !6440

for.body:                                         ; preds = %for.cond
  %2 = load %struct._expr*, %struct._expr** %cur_expr, align 8, !dbg !6444
  %3 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6447
  %cmp = icmp eq %struct._expr* %2, %3, !dbg !6448
  br i1 %cmp, label %if.then, label %if.end, !dbg !6449

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !6450

if.end:                                           ; preds = %for.body
  %4 = load %struct._expr*, %struct._expr** %cur_expr, align 8, !dbg !6451
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 0, !dbg !6451
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6451
  %6 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6453
  %vinsn1 = getelementptr inbounds %struct._expr, %struct._expr* %6, i32 0, i32 0, !dbg !6453
  %7 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn1, align 8, !dbg !6453
  %call2 = call zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %5, %struct.vinsn_def* %7), !dbg !6454
  %tobool3 = icmp ne i8 %call2, 0, !dbg !6454
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !6455

if.then4:                                         ; preds = %if.end
  %8 = load %struct._expr*, %struct._expr** %cur_expr, align 8, !dbg !6456
  store %struct._expr* %8, %struct._expr** %retval, align 8, !dbg !6457
  br label %return, !dbg !6457

if.end5:                                          ; preds = %if.end
  br label %for.inc, !dbg !6458

for.inc:                                          ; preds = %if.end5, %if.then
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6442
  br label %for.cond, !dbg !6442, !llvm.loop !6459

for.end:                                          ; preds = %for.cond
  store %struct._expr* null, %struct._expr** %retval, align 8, !dbg !6461
  br label %return, !dbg !6461

return:                                           ; preds = %for.end, %if.then4
  %9 = load %struct._expr*, %struct._expr** %retval, align 8, !dbg !6462
  ret %struct._expr* %9, !dbg !6462
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @av_set_is_in_p(%struct._list_node* %set, %struct.vinsn_def* %vi) #0 !dbg !6463 {
entry:
  %set.addr = alloca %struct._list_node*, align 8
  %vi.addr = alloca %struct.vinsn_def*, align 8
  store %struct._list_node* %set, %struct._list_node** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %set.addr, metadata !6466, metadata !DIExpression()), !dbg !6467
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !6468, metadata !DIExpression()), !dbg !6469
  %0 = load %struct._list_node*, %struct._list_node** %set.addr, align 8, !dbg !6470
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !6471
  %call = call %struct._expr* @av_set_lookup(%struct._list_node* %0, %struct.vinsn_def* %1), !dbg !6472
  %cmp = icmp ne %struct._expr* %call, null, !dbg !6473
  %conv = zext i1 %cmp to i32, !dbg !6473
  %conv1 = trunc i32 %conv to i8, !dbg !6472
  ret i8 %conv1, !dbg !6474
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._list_node* @av_set_copy(%struct._list_node* %set) #0 !dbg !6475 {
entry:
  %set.addr = alloca %struct._list_node*, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  %res = alloca %struct._list_node*, align 8
  store %struct._list_node* %set, %struct._list_node** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %set.addr, metadata !6478, metadata !DIExpression()), !dbg !6479
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6480, metadata !DIExpression()), !dbg !6481
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6482, metadata !DIExpression()), !dbg !6483
  call void @llvm.dbg.declare(metadata %struct._list_node** %res, metadata !6484, metadata !DIExpression()), !dbg !6485
  store %struct._list_node* null, %struct._list_node** %res, align 8, !dbg !6485
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %set.addr, i8 zeroext 0), !dbg !6486
  br label %for.cond, !dbg !6486

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6488
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6488
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6488
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %expr), !dbg !6488
  %tobool = icmp ne i8 %call, 0, !dbg !6486
  br i1 %tobool, label %for.body, label %for.end, !dbg !6486

for.body:                                         ; preds = %for.cond
  %2 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6490
  call void @av_set_add(%struct._list_node** %res, %struct._expr* %2), !dbg !6491
  br label %for.inc, !dbg !6491

for.inc:                                          ; preds = %for.body
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6488
  br label %for.cond, !dbg !6488, !llvm.loop !6492

for.end:                                          ; preds = %for.cond
  %3 = load %struct._list_node*, %struct._list_node** %res, align 8, !dbg !6494
  ret %struct._list_node* %3, !dbg !6495
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_union_and_clear(%struct._list_node** %top, %struct._list_node** %fromp, %struct.rtx_def* %insn) #0 !dbg !6496 {
entry:
  %top.addr = alloca %struct._list_node**, align 8
  %fromp.addr = alloca %struct._list_node**, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %expr1 = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  %expr2 = alloca %struct._expr*, align 8
  store %struct._list_node** %top, %struct._list_node*** %top.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %top.addr, metadata !6499, metadata !DIExpression()), !dbg !6500
  store %struct._list_node** %fromp, %struct._list_node*** %fromp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %fromp.addr, metadata !6501, metadata !DIExpression()), !dbg !6502
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6503, metadata !DIExpression()), !dbg !6504
  call void @llvm.dbg.declare(metadata %struct._expr** %expr1, metadata !6505, metadata !DIExpression()), !dbg !6506
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6507, metadata !DIExpression()), !dbg !6508
  %0 = load %struct._list_node**, %struct._list_node*** %top.addr, align 8, !dbg !6509
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6509
  br label %for.cond, !dbg !6509

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6511
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6511
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6511
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr1), !dbg !6511
  %tobool = icmp ne i8 %call, 0, !dbg !6509
  br i1 %tobool, label %for.body, label %for.end, !dbg !6509

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct._expr** %expr2, metadata !6513, metadata !DIExpression()), !dbg !6515
  %3 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6516
  %4 = load %struct._list_node*, %struct._list_node** %3, align 8, !dbg !6517
  %5 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6518
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %5, i32 0, i32 0, !dbg !6518
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6518
  %call1 = call %struct._expr* @av_set_lookup(%struct._list_node* %4, %struct.vinsn_def* %6), !dbg !6519
  store %struct._expr* %call1, %struct._expr** %expr2, align 8, !dbg !6515
  %7 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6520
  %tobool2 = icmp ne %struct._expr* %7, null, !dbg !6520
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6522

if.then:                                          ; preds = %for.body
  %8 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6523
  %9 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6525
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6526
  call void @merge_expr(%struct._expr* %8, %struct._expr* %9, %struct.rtx_def* %10), !dbg !6527
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !6528
  br label %if.end, !dbg !6529

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6530

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6511
  br label %for.cond, !dbg !6511, !llvm.loop !6531

for.end:                                          ; preds = %for.cond
  %lp3 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6533
  %11 = load %struct._list_node**, %struct._list_node*** %lp3, align 8, !dbg !6533
  %12 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6534
  call void @join_distinct_sets(%struct._list_node** %11, %struct._list_node** %12), !dbg !6535
  ret void, !dbg !6536
}

; Function Attrs: noinline nounwind uwtable
define internal void @join_distinct_sets(%struct._list_node** %to_tailp, %struct._list_node** %fromp) #0 !dbg !6537 {
entry:
  %to_tailp.addr = alloca %struct._list_node**, align 8
  %fromp.addr = alloca %struct._list_node**, align 8
  store %struct._list_node** %to_tailp, %struct._list_node*** %to_tailp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %to_tailp.addr, metadata !6540, metadata !DIExpression()), !dbg !6541
  store %struct._list_node** %fromp, %struct._list_node*** %fromp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %fromp.addr, metadata !6542, metadata !DIExpression()), !dbg !6543
  %0 = load %struct._list_node**, %struct._list_node*** %to_tailp.addr, align 8, !dbg !6544
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6544
  %cmp = icmp eq %struct._list_node* %1, null, !dbg !6544
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6544

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2167, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6544
  br label %cond.end, !dbg !6544

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6544

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6544
  %2 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6545
  %3 = load %struct._list_node*, %struct._list_node** %2, align 8, !dbg !6546
  %4 = load %struct._list_node**, %struct._list_node*** %to_tailp.addr, align 8, !dbg !6547
  store %struct._list_node* %3, %struct._list_node** %4, align 8, !dbg !6548
  %5 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6549
  store %struct._list_node* null, %struct._list_node** %5, align 8, !dbg !6550
  ret void, !dbg !6551
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_union_and_live(%struct._list_node** %top, %struct._list_node** %fromp, %struct.bitmap_head_def* %to_lv_set, %struct.bitmap_head_def* %from_lv_set, %struct.rtx_def* %insn) #0 !dbg !6552 {
entry:
  %top.addr = alloca %struct._list_node**, align 8
  %fromp.addr = alloca %struct._list_node**, align 8
  %to_lv_set.addr = alloca %struct.bitmap_head_def*, align 8
  %from_lv_set.addr = alloca %struct.bitmap_head_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %expr1 = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  %to_tailp = alloca %struct._list_node**, align 8
  %in_both_set = alloca %struct._list_node*, align 8
  %expr2 = alloca %struct._expr*, align 8
  %regno1 = alloca i32, align 4
  %regno2 = alloca i32, align 4
  store %struct._list_node** %top, %struct._list_node*** %top.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %top.addr, metadata !6555, metadata !DIExpression()), !dbg !6556
  store %struct._list_node** %fromp, %struct._list_node*** %fromp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %fromp.addr, metadata !6557, metadata !DIExpression()), !dbg !6558
  store %struct.bitmap_head_def* %to_lv_set, %struct.bitmap_head_def** %to_lv_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %to_lv_set.addr, metadata !6559, metadata !DIExpression()), !dbg !6560
  store %struct.bitmap_head_def* %from_lv_set, %struct.bitmap_head_def** %from_lv_set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %from_lv_set.addr, metadata !6561, metadata !DIExpression()), !dbg !6562
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6563, metadata !DIExpression()), !dbg !6564
  call void @llvm.dbg.declare(metadata %struct._expr** %expr1, metadata !6565, metadata !DIExpression()), !dbg !6566
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6567, metadata !DIExpression()), !dbg !6568
  call void @llvm.dbg.declare(metadata %struct._list_node*** %to_tailp, metadata !6569, metadata !DIExpression()), !dbg !6570
  call void @llvm.dbg.declare(metadata %struct._list_node** %in_both_set, metadata !6571, metadata !DIExpression()), !dbg !6572
  store %struct._list_node* null, %struct._list_node** %in_both_set, align 8, !dbg !6572
  %0 = load %struct._list_node**, %struct._list_node*** %top.addr, align 8, !dbg !6573
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6573
  br label %for.cond, !dbg !6573

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6575
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6575
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6575
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr1), !dbg !6575
  %tobool = icmp ne i8 %call, 0, !dbg !6573
  br i1 %tobool, label %for.body, label %for.end, !dbg !6573

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct._expr** %expr2, metadata !6577, metadata !DIExpression()), !dbg !6579
  %3 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6580
  %4 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6581
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 0, !dbg !6581
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6581
  %call1 = call %struct._expr* @av_set_lookup_and_remove(%struct._list_node** %3, %struct.vinsn_def* %5), !dbg !6582
  store %struct._expr* %call1, %struct._expr** %expr2, align 8, !dbg !6579
  %6 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6583
  %tobool2 = icmp ne %struct._expr* %6, null, !dbg !6583
  br i1 %tobool2, label %if.then, label %if.else30, !dbg !6585

if.then:                                          ; preds = %for.body
  %7 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6586
  %vinsn3 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 0, !dbg !6586
  %8 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn3, align 8, !dbg !6586
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %8, i32 0, i32 1, !dbg !6586
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !6586
  %9 = load i32, i32* %type, align 8, !dbg !6586
  %cmp = icmp eq i32 %9, 23, !dbg !6586
  br i1 %cmp, label %if.then4, label %if.else, !dbg !6589

if.then4:                                         ; preds = %if.then
  call void @llvm.dbg.declare(metadata i32* %regno1, metadata !6590, metadata !DIExpression()), !dbg !6592
  %10 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6593
  %vinsn5 = getelementptr inbounds %struct._expr, %struct._expr* %10, i32 0, i32 0, !dbg !6593
  %11 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn5, align 8, !dbg !6593
  %id6 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %11, i32 0, i32 1, !dbg !6593
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id6, i32 0, i32 1, !dbg !6593
  %12 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !6593
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6593
  %bf.load = load i32, i32* %13, align 8, !dbg !6593
  %bf.clear = and i32 %bf.load, 65535, !dbg !6593
  %cmp7 = icmp eq i32 %bf.clear, 37, !dbg !6593
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !6593

cond.true:                                        ; preds = %if.then4
  %14 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6594
  %call8 = call i32 @expr_dest_regno(%struct._expr* %14), !dbg !6595
  br label %cond.end, !dbg !6593

cond.false:                                       ; preds = %if.then4
  br label %cond.end, !dbg !6593

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call8, %cond.true ], [ -1, %cond.false ], !dbg !6593
  store i32 %cond, i32* %regno1, align 4, !dbg !6592
  call void @llvm.dbg.declare(metadata i32* %regno2, metadata !6596, metadata !DIExpression()), !dbg !6597
  %15 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6598
  %vinsn9 = getelementptr inbounds %struct._expr, %struct._expr* %15, i32 0, i32 0, !dbg !6598
  %16 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn9, align 8, !dbg !6598
  %id10 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %16, i32 0, i32 1, !dbg !6598
  %lhs11 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id10, i32 0, i32 1, !dbg !6598
  %17 = load %struct.rtx_def*, %struct.rtx_def** %lhs11, align 8, !dbg !6598
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6598
  %bf.load12 = load i32, i32* %18, align 8, !dbg !6598
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !6598
  %cmp14 = icmp eq i32 %bf.clear13, 37, !dbg !6598
  br i1 %cmp14, label %cond.true15, label %cond.false17, !dbg !6598

cond.true15:                                      ; preds = %cond.end
  %19 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6599
  %call16 = call i32 @expr_dest_regno(%struct._expr* %19), !dbg !6600
  br label %cond.end18, !dbg !6598

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18, !dbg !6598

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi i32 [ %call16, %cond.true15 ], [ -1, %cond.false17 ], !dbg !6598
  store i32 %cond19, i32* %regno2, align 4, !dbg !6597
  %20 = load i32, i32* %regno1, align 4, !dbg !6601
  %21 = load i32, i32* %regno2, align 4, !dbg !6603
  %cmp20 = icmp ne i32 %20, %21, !dbg !6604
  br i1 %cmp20, label %if.then21, label %if.end, !dbg !6605

if.then21:                                        ; preds = %cond.end18
  %22 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6606
  %target_available = getelementptr inbounds %struct._expr, %struct._expr* %22, i32 0, i32 11, !dbg !6606
  store i8 -1, i8* %target_available, align 8, !dbg !6607
  br label %if.end, !dbg !6606

if.end:                                           ; preds = %if.then21, %cond.end18
  br label %if.end29, !dbg !6608

if.else:                                          ; preds = %if.then
  %23 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6609
  %vinsn22 = getelementptr inbounds %struct._expr, %struct._expr* %23, i32 0, i32 0, !dbg !6609
  %24 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn22, align 8, !dbg !6609
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %24, i32 0, i32 0, !dbg !6609
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !6609
  %26 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6611
  %vinsn23 = getelementptr inbounds %struct._expr, %struct._expr* %26, i32 0, i32 0, !dbg !6611
  %27 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn23, align 8, !dbg !6611
  %insn_rtx24 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %27, i32 0, i32 0, !dbg !6611
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx24, align 8, !dbg !6611
  %cmp25 = icmp ne %struct.rtx_def* %25, %28, !dbg !6612
  br i1 %cmp25, label %if.then26, label %if.end28, !dbg !6613

if.then26:                                        ; preds = %if.else
  %29 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6614
  %target_available27 = getelementptr inbounds %struct._expr, %struct._expr* %29, i32 0, i32 11, !dbg !6614
  store i8 -1, i8* %target_available27, align 8, !dbg !6615
  br label %if.end28, !dbg !6614

if.end28:                                         ; preds = %if.then26, %if.else
  br label %if.end29

if.end29:                                         ; preds = %if.end28, %if.end
  %30 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6616
  %31 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6617
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6618
  call void @merge_expr(%struct._expr* %30, %struct._expr* %31, %struct.rtx_def* %32), !dbg !6619
  %33 = load %struct._expr*, %struct._expr** %expr2, align 8, !dbg !6620
  call void @av_set_add_nocopy(%struct._list_node** %in_both_set, %struct._expr* %33), !dbg !6621
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !6622
  br label %if.end31, !dbg !6623

if.else30:                                        ; preds = %for.body
  %34 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6624
  %35 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %from_lv_set.addr, align 8, !dbg !6625
  call void @set_unavailable_target_for_expr(%struct._expr* %34, %struct.bitmap_head_def* %35), !dbg !6626
  br label %if.end31

if.end31:                                         ; preds = %if.else30, %if.end29
  br label %for.inc, !dbg !6627

for.inc:                                          ; preds = %if.end31
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6575
  br label %for.cond, !dbg !6575, !llvm.loop !6628

for.end:                                          ; preds = %for.cond
  %lp32 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6630
  %36 = load %struct._list_node**, %struct._list_node*** %lp32, align 8, !dbg !6630
  store %struct._list_node** %36, %struct._list_node*** %to_tailp, align 8, !dbg !6631
  %37 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6632
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %37, i8 zeroext 0), !dbg !6632
  br label %for.cond33, !dbg !6632

for.cond33:                                       ; preds = %for.inc38, %for.end
  %lp34 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6634
  %38 = load %struct._list_node**, %struct._list_node*** %lp34, align 8, !dbg !6634
  %39 = load %struct._list_node*, %struct._list_node** %38, align 8, !dbg !6634
  %call35 = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %39, %struct._expr** %expr1), !dbg !6634
  %tobool36 = icmp ne i8 %call35, 0, !dbg !6632
  br i1 %tobool36, label %for.body37, label %for.end39, !dbg !6632

for.body37:                                       ; preds = %for.cond33
  %40 = load %struct._expr*, %struct._expr** %expr1, align 8, !dbg !6636
  %41 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_lv_set.addr, align 8, !dbg !6637
  call void @set_unavailable_target_for_expr(%struct._expr* %40, %struct.bitmap_head_def* %41), !dbg !6638
  br label %for.inc38, !dbg !6638

for.inc38:                                        ; preds = %for.body37
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6634
  br label %for.cond33, !dbg !6634, !llvm.loop !6639

for.end39:                                        ; preds = %for.cond33
  %lp40 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6641
  %42 = load %struct._list_node**, %struct._list_node*** %lp40, align 8, !dbg !6641
  call void @join_distinct_sets(%struct._list_node** %42, %struct._list_node** %in_both_set), !dbg !6642
  %43 = load %struct._list_node**, %struct._list_node*** %to_tailp, align 8, !dbg !6643
  %44 = load %struct._list_node**, %struct._list_node*** %fromp.addr, align 8, !dbg !6644
  call void @join_distinct_sets(%struct._list_node** %43, %struct._list_node** %44), !dbg !6645
  ret void, !dbg !6646
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._expr* @av_set_lookup_and_remove(%struct._list_node** %setp, %struct.vinsn_def* %sought_vinsn) #0 !dbg !6647 {
entry:
  %retval = alloca %struct._expr*, align 8
  %setp.addr = alloca %struct._list_node**, align 8
  %sought_vinsn.addr = alloca %struct.vinsn_def*, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !6650, metadata !DIExpression()), !dbg !6651
  store %struct.vinsn_def* %sought_vinsn, %struct.vinsn_def** %sought_vinsn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %sought_vinsn.addr, metadata !6652, metadata !DIExpression()), !dbg !6653
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6654, metadata !DIExpression()), !dbg !6655
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6656, metadata !DIExpression()), !dbg !6657
  %0 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6658
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6658
  br label %for.cond, !dbg !6658

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6660
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6660
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6660
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr), !dbg !6660
  %tobool = icmp ne i8 %call, 0, !dbg !6658
  br i1 %tobool, label %for.body, label %for.end, !dbg !6658

for.body:                                         ; preds = %for.cond
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6662
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !6662
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6662
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %sought_vinsn.addr, align 8, !dbg !6664
  %call1 = call zeroext i8 @vinsn_equal_p(%struct.vinsn_def* %4, %struct.vinsn_def* %5), !dbg !6665
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6665
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6666

if.then:                                          ; preds = %for.body
  call void @_list_iter_remove_nofree(%struct._list_iterator* %i), !dbg !6667
  %6 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6669
  store %struct._expr* %6, %struct._expr** %retval, align 8, !dbg !6670
  br label %return, !dbg !6670

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6671

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6660
  br label %for.cond, !dbg !6660, !llvm.loop !6672

for.end:                                          ; preds = %for.cond
  store %struct._expr* null, %struct._expr** %retval, align 8, !dbg !6674
  br label %return, !dbg !6674

return:                                           ; preds = %for.end, %if.then
  %7 = load %struct._expr*, %struct._expr** %retval, align 8, !dbg !6675
  ret %struct._expr* %7, !dbg !6675
}

; Function Attrs: noinline nounwind uwtable
define internal void @av_set_add_nocopy(%struct._list_node** %setp, %struct._expr* %expr) #0 !dbg !6676 {
entry:
  %setp.addr = alloca %struct._list_node**, align 8
  %expr.addr = alloca %struct._expr*, align 8
  %elem = alloca %struct._list_node*, align 8
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !6677, metadata !DIExpression()), !dbg !6678
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !6679, metadata !DIExpression()), !dbg !6680
  call void @llvm.dbg.declare(metadata %struct._list_node** %elem, metadata !6681, metadata !DIExpression()), !dbg !6682
  %0 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6683
  %call = call %struct._list_node* @av_set_add_element(%struct._list_node** %0), !dbg !6684
  store %struct._list_node* %call, %struct._list_node** %elem, align 8, !dbg !6685
  %1 = load %struct._list_node*, %struct._list_node** %elem, align 8, !dbg !6686
  %u = getelementptr inbounds %struct._list_node, %struct._list_node* %1, i32 0, i32 1, !dbg !6686
  %expr1 = bitcast %union.anon.0* %u to %struct._expr*, !dbg !6686
  %2 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !6687
  %3 = bitcast %struct._expr* %expr1 to i8*, !dbg !6688
  %4 = bitcast %struct._expr* %2 to i8*, !dbg !6688
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 8 %4, i64 64, i1 false), !dbg !6688
  ret void, !dbg !6689
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_leave_one_nonspec(%struct._list_node** %setp) #0 !dbg !6690 {
entry:
  %setp.addr = alloca %struct._list_node**, align 8
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  %has_one_nonspec = alloca i8, align 1
  store %struct._list_node** %setp, %struct._list_node*** %setp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %setp.addr, metadata !6691, metadata !DIExpression()), !dbg !6692
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6693, metadata !DIExpression()), !dbg !6694
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6695, metadata !DIExpression()), !dbg !6696
  call void @llvm.dbg.declare(metadata i8* %has_one_nonspec, metadata !6697, metadata !DIExpression()), !dbg !6698
  store i8 0, i8* %has_one_nonspec, align 1, !dbg !6698
  %0 = load %struct._list_node**, %struct._list_node*** %setp.addr, align 8, !dbg !6699
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6699
  br label %for.cond, !dbg !6699

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6701
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6701
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6701
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr), !dbg !6701
  %tobool = icmp ne i8 %call, 0, !dbg !6699
  br i1 %tobool, label %for.body, label %for.end, !dbg !6699

for.body:                                         ; preds = %for.cond
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6703
  %spec_done_ds = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 7, !dbg !6703
  %4 = load i32, i32* %spec_done_ds, align 8, !dbg !6703
  %tobool1 = icmp ne i32 %4, 0, !dbg !6703
  br i1 %tobool1, label %if.end4, label %if.then, !dbg !6706

if.then:                                          ; preds = %for.body
  %5 = load i8, i8* %has_one_nonspec, align 1, !dbg !6707
  %tobool2 = icmp ne i8 %5, 0, !dbg !6707
  br i1 %tobool2, label %if.then3, label %if.else, !dbg !6710

if.then3:                                         ; preds = %if.then
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !6711
  br label %if.end, !dbg !6711

if.else:                                          ; preds = %if.then
  store i8 1, i8* %has_one_nonspec, align 1, !dbg !6712
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  br label %if.end4, !dbg !6713

if.end4:                                          ; preds = %if.end, %for.body
  br label %for.inc, !dbg !6714

for.inc:                                          ; preds = %if.end4
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6701
  br label %for.cond, !dbg !6701, !llvm.loop !6715

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6717
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._expr* @av_set_element(%struct._list_node* %set, i32 %n) #0 !dbg !6718 {
entry:
  %retval = alloca %struct._expr*, align 8
  %set.addr = alloca %struct._list_node*, align 8
  %n.addr = alloca i32, align 4
  %expr = alloca %struct._expr*, align 8
  %i = alloca %struct._list_iterator, align 8
  store %struct._list_node* %set, %struct._list_node** %set.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %set.addr, metadata !6721, metadata !DIExpression()), !dbg !6722
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !6723, metadata !DIExpression()), !dbg !6724
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6725, metadata !DIExpression()), !dbg !6726
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6727, metadata !DIExpression()), !dbg !6728
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %set.addr, i8 zeroext 0), !dbg !6729
  br label %for.cond, !dbg !6729

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6731
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6731
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6731
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %expr), !dbg !6731
  %tobool = icmp ne i8 %call, 0, !dbg !6729
  br i1 %tobool, label %for.body, label %for.end, !dbg !6729

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %n.addr, align 4, !dbg !6733
  %dec = add nsw i32 %2, -1, !dbg !6733
  store i32 %dec, i32* %n.addr, align 4, !dbg !6733
  %cmp = icmp eq i32 %2, 0, !dbg !6735
  br i1 %cmp, label %if.then, label %if.end, !dbg !6736

if.then:                                          ; preds = %for.body
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6737
  store %struct._expr* %3, %struct._expr** %retval, align 8, !dbg !6738
  br label %return, !dbg !6738

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !6739

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6731
  br label %for.cond, !dbg !6731, !llvm.loop !6740

for.end:                                          ; preds = %for.cond
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2296, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6742
  store %struct._expr* null, %struct._expr** %retval, align 8, !dbg !6743
  br label %return, !dbg !6743

return:                                           ; preds = %for.end, %if.then
  %4 = load %struct._expr*, %struct._expr** %retval, align 8, !dbg !6744
  ret %struct._expr* %4, !dbg !6744
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_substract_cond_branches(%struct._list_node** %avp) #0 !dbg !6745 {
entry:
  %avp.addr = alloca %struct._list_node**, align 8
  %i = alloca %struct._list_iterator, align 8
  %expr = alloca %struct._expr*, align 8
  store %struct._list_node** %avp, %struct._list_node*** %avp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %avp.addr, metadata !6746, metadata !DIExpression()), !dbg !6747
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6748, metadata !DIExpression()), !dbg !6749
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6750, metadata !DIExpression()), !dbg !6751
  %0 = load %struct._list_node**, %struct._list_node*** %avp.addr, align 8, !dbg !6752
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6752
  br label %for.cond, !dbg !6752

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6754
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6754
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6754
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr), !dbg !6754
  %tobool = icmp ne i8 %call, 0, !dbg !6752
  br i1 %tobool, label %for.body, label %for.end, !dbg !6752

for.body:                                         ; preds = %for.cond
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6756
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 0, !dbg !6756
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6756
  %call1 = call zeroext i8 @vinsn_cond_branch_p(%struct.vinsn_def* %4), !dbg !6758
  %tobool2 = icmp ne i8 %call1, 0, !dbg !6758
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6759

if.then:                                          ; preds = %for.body
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !6760
  br label %if.end, !dbg !6760

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6761

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6754
  br label %for.cond, !dbg !6754, !llvm.loop !6762

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6764
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_split_usefulness(%struct._list_node* %av, i32 %prob, i32 %all_prob) #0 !dbg !6765 {
entry:
  %av.addr = alloca %struct._list_node*, align 8
  %prob.addr = alloca i32, align 4
  %all_prob.addr = alloca i32, align 4
  %i = alloca %struct._list_iterator, align 8
  %expr = alloca %struct._expr*, align 8
  store %struct._list_node* %av, %struct._list_node** %av.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %av.addr, metadata !6768, metadata !DIExpression()), !dbg !6769
  store i32 %prob, i32* %prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prob.addr, metadata !6770, metadata !DIExpression()), !dbg !6771
  store i32 %all_prob, i32* %all_prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %all_prob.addr, metadata !6772, metadata !DIExpression()), !dbg !6773
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6774, metadata !DIExpression()), !dbg !6775
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6776, metadata !DIExpression()), !dbg !6777
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %av.addr, i8 zeroext 0), !dbg !6778
  br label %for.cond, !dbg !6778

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6780
  %0 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6780
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !6780
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %1, %struct._expr** %expr), !dbg !6780
  %tobool = icmp ne i8 %call, 0, !dbg !6778
  br i1 %tobool, label %for.body, label %for.end, !dbg !6778

for.body:                                         ; preds = %for.cond
  %2 = load i32, i32* %all_prob.addr, align 4, !dbg !6782
  %tobool1 = icmp ne i32 %2, 0, !dbg !6782
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6782

cond.true:                                        ; preds = %for.body
  %3 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6783
  %usefulness = getelementptr inbounds %struct._expr, %struct._expr* %3, i32 0, i32 2, !dbg !6783
  %4 = load i32, i32* %usefulness, align 4, !dbg !6783
  %5 = load i32, i32* %prob.addr, align 4, !dbg !6784
  %mul = mul nsw i32 %4, %5, !dbg !6785
  %6 = load i32, i32* %all_prob.addr, align 4, !dbg !6786
  %div = sdiv i32 %mul, %6, !dbg !6787
  br label %cond.end, !dbg !6782

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !6782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %div, %cond.true ], [ 0, %cond.false ], !dbg !6782
  %7 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6788
  %usefulness2 = getelementptr inbounds %struct._expr, %struct._expr* %7, i32 0, i32 2, !dbg !6788
  store i32 %cond, i32* %usefulness2, align 4, !dbg !6789
  br label %for.inc, !dbg !6788

for.inc:                                          ; preds = %cond.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6780
  br label %for.cond, !dbg !6780, !llvm.loop !6790

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6792
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @av_set_intersect(%struct._list_node** %avp, %struct._list_node* %av) #0 !dbg !6793 {
entry:
  %avp.addr = alloca %struct._list_node**, align 8
  %av.addr = alloca %struct._list_node*, align 8
  %i = alloca %struct._list_iterator, align 8
  %expr = alloca %struct._expr*, align 8
  store %struct._list_node** %avp, %struct._list_node*** %avp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %avp.addr, metadata !6796, metadata !DIExpression()), !dbg !6797
  store %struct._list_node* %av, %struct._list_node** %av.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node** %av.addr, metadata !6798, metadata !DIExpression()), !dbg !6799
  call void @llvm.dbg.declare(metadata %struct._list_iterator* %i, metadata !6800, metadata !DIExpression()), !dbg !6801
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !6802, metadata !DIExpression()), !dbg !6803
  %0 = load %struct._list_node**, %struct._list_node*** %avp.addr, align 8, !dbg !6804
  call void @_list_iter_start(%struct._list_iterator* %i, %struct._list_node** %0, i8 zeroext 1), !dbg !6804
  br label %for.cond, !dbg !6804

for.cond:                                         ; preds = %for.inc, %entry
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %i, i32 0, i32 0, !dbg !6806
  %1 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !6806
  %2 = load %struct._list_node*, %struct._list_node** %1, align 8, !dbg !6806
  %call = call zeroext i8 @_list_iter_cond_expr(%struct._list_node* %2, %struct._expr** %expr), !dbg !6806
  %tobool = icmp ne i8 %call, 0, !dbg !6804
  br i1 %tobool, label %for.body, label %for.end, !dbg !6804

for.body:                                         ; preds = %for.cond
  %3 = load %struct._list_node*, %struct._list_node** %av.addr, align 8, !dbg !6808
  %4 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !6810
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 0, !dbg !6810
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !6810
  %call1 = call %struct._expr* @av_set_lookup(%struct._list_node* %3, %struct.vinsn_def* %5), !dbg !6811
  %cmp = icmp eq %struct._expr* %call1, null, !dbg !6812
  br i1 %cmp, label %if.then, label %if.end, !dbg !6813

if.then:                                          ; preds = %for.body
  call void @av_set_iter_remove(%struct._list_iterator* %i), !dbg !6814
  br label %if.end, !dbg !6814

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !6815

for.inc:                                          ; preds = %if.end
  call void @_list_iter_next(%struct._list_iterator* %i), !dbg !6806
  br label %for.cond, !dbg !6806, !llvm.loop !6816

for.end:                                          ; preds = %for.cond
  ret void, !dbg !6818
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_data_for_scheduled_insn(%struct.rtx_def* %insn) #0 !dbg !6819 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6820, metadata !DIExpression()), !dbg !6821
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6822
  %call = call zeroext i8 @first_time_insn_init(%struct.rtx_def* %0), !dbg !6822
  %tobool = icmp ne i8 %call, 0, !dbg !6822
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6822

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2778, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6822
  br label %cond.end, !dbg !6822

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6822

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6822
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6823
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !6823
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !6823

cond.true2:                                       ; preds = %cond.end
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6823
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %2, i32 0, i32 0, !dbg !6823
  br label %cond.end4, !dbg !6823

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !6823

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !6823
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6823
  %tobool6 = icmp ne %struct.VEC_int_heap* %3, null, !dbg !6823
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !6823

cond.true7:                                       ; preds = %cond.end4
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6823
  %base8 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !6823
  br label %cond.end10, !dbg !6823

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !6823

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_int_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !6823
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6823
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !6823
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6823
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6823
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6823
  %6 = load i32, i32* %rt_int, align 8, !dbg !6823
  %call12 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond11, i32 %6), !dbg !6823
  %call13 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond5, i32 %call12), !dbg !6823
  %analyzed_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call13, i32 0, i32 4, !dbg !6823
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %analyzed_deps, align 8, !dbg !6823
  %tobool14 = icmp ne %struct.bitmap_head_def* %7, null, !dbg !6823
  br i1 %tobool14, label %if.end, label %if.then, !dbg !6825

if.then:                                          ; preds = %cond.end10
  br label %return, !dbg !6826

if.end:                                           ; preds = %cond.end10
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6827
  %tobool15 = icmp ne %struct.VEC_sel_insn_data_def_heap* %8, null, !dbg !6827
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !6827

cond.true16:                                      ; preds = %if.end
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6827
  %base17 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %9, i32 0, i32 0, !dbg !6827
  br label %cond.end19, !dbg !6827

cond.false18:                                     ; preds = %if.end
  br label %cond.end19, !dbg !6827

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_sel_insn_data_def_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !6827
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6827
  %tobool21 = icmp ne %struct.VEC_int_heap* %10, null, !dbg !6827
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !6827

cond.true22:                                      ; preds = %cond.end19
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6827
  %base23 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %11, i32 0, i32 0, !dbg !6827
  br label %cond.end25, !dbg !6827

cond.false24:                                     ; preds = %cond.end19
  br label %cond.end25, !dbg !6827

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_int_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !6827
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6827
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6827
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !6827
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !6827
  %rt_int30 = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !6827
  %13 = load i32, i32* %rt_int30, align 8, !dbg !6827
  %call31 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond26, i32 %13), !dbg !6827
  %call32 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond20, i32 %call31), !dbg !6827
  %analyzed_deps33 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call32, i32 0, i32 4, !dbg !6827
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %analyzed_deps33, align 8, !dbg !6827
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %14), !dbg !6827
  %15 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6827
  %tobool34 = icmp ne %struct.VEC_sel_insn_data_def_heap* %15, null, !dbg !6827
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !6827

cond.true35:                                      ; preds = %cond.end25
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6827
  %base36 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %16, i32 0, i32 0, !dbg !6827
  br label %cond.end38, !dbg !6827

cond.false37:                                     ; preds = %cond.end25
  br label %cond.end38, !dbg !6827

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_sel_insn_data_def_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !6827
  %17 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6827
  %tobool40 = icmp ne %struct.VEC_int_heap* %17, null, !dbg !6827
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !6827

cond.true41:                                      ; preds = %cond.end38
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6827
  %base42 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %18, i32 0, i32 0, !dbg !6827
  br label %cond.end44, !dbg !6827

cond.false43:                                     ; preds = %cond.end38
  br label %cond.end44, !dbg !6827

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_int_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !6827
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6827
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !6827
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !6827
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !6827
  %rt_int49 = bitcast %union.rtunion_def* %arrayidx48 to i32*, !dbg !6827
  %20 = load i32, i32* %rt_int49, align 8, !dbg !6827
  %call50 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond45, i32 %20), !dbg !6827
  %call51 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond39, i32 %call50), !dbg !6827
  %analyzed_deps52 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call51, i32 0, i32 4, !dbg !6827
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %analyzed_deps52, align 8, !dbg !6827
  %21 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6828
  %tobool53 = icmp ne %struct.VEC_sel_insn_data_def_heap* %21, null, !dbg !6828
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !6828

cond.true54:                                      ; preds = %cond.end44
  %22 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6828
  %base55 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %22, i32 0, i32 0, !dbg !6828
  br label %cond.end57, !dbg !6828

cond.false56:                                     ; preds = %cond.end44
  br label %cond.end57, !dbg !6828

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_sel_insn_data_def_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !6828
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6828
  %tobool59 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !6828
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !6828

cond.true60:                                      ; preds = %cond.end57
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6828
  %base61 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %24, i32 0, i32 0, !dbg !6828
  br label %cond.end63, !dbg !6828

cond.false62:                                     ; preds = %cond.end57
  br label %cond.end63, !dbg !6828

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_int_base* [ %base61, %cond.true60 ], [ null, %cond.false62 ], !dbg !6828
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6828
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6828
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !6828
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !6828
  %rt_int68 = bitcast %union.rtunion_def* %arrayidx67 to i32*, !dbg !6828
  %26 = load i32, i32* %rt_int68, align 8, !dbg !6828
  %call69 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond64, i32 %26), !dbg !6828
  %call70 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond58, i32 %call69), !dbg !6828
  %found_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call70, i32 0, i32 5, !dbg !6828
  %27 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %found_deps, align 8, !dbg !6828
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %27), !dbg !6828
  %28 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6828
  %tobool71 = icmp ne %struct.VEC_sel_insn_data_def_heap* %28, null, !dbg !6828
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !6828

cond.true72:                                      ; preds = %cond.end63
  %29 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6828
  %base73 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %29, i32 0, i32 0, !dbg !6828
  br label %cond.end75, !dbg !6828

cond.false74:                                     ; preds = %cond.end63
  br label %cond.end75, !dbg !6828

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_sel_insn_data_def_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !6828
  %30 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6828
  %tobool77 = icmp ne %struct.VEC_int_heap* %30, null, !dbg !6828
  br i1 %tobool77, label %cond.true78, label %cond.false80, !dbg !6828

cond.true78:                                      ; preds = %cond.end75
  %31 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6828
  %base79 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %31, i32 0, i32 0, !dbg !6828
  br label %cond.end81, !dbg !6828

cond.false80:                                     ; preds = %cond.end75
  br label %cond.end81, !dbg !6828

cond.end81:                                       ; preds = %cond.false80, %cond.true78
  %cond82 = phi %struct.VEC_int_base* [ %base79, %cond.true78 ], [ null, %cond.false80 ], !dbg !6828
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6828
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !6828
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !6828
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 0, !dbg !6828
  %rt_int86 = bitcast %union.rtunion_def* %arrayidx85 to i32*, !dbg !6828
  %33 = load i32, i32* %rt_int86, align 8, !dbg !6828
  %call87 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond82, i32 %33), !dbg !6828
  %call88 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond76, i32 %call87), !dbg !6828
  %found_deps89 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call88, i32 0, i32 5, !dbg !6828
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %found_deps89, align 8, !dbg !6828
  %34 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6829
  %tobool90 = icmp ne %struct.VEC_sel_insn_data_def_heap* %34, null, !dbg !6829
  br i1 %tobool90, label %cond.true91, label %cond.false93, !dbg !6829

cond.true91:                                      ; preds = %cond.end81
  %35 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6829
  %base92 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %35, i32 0, i32 0, !dbg !6829
  br label %cond.end94, !dbg !6829

cond.false93:                                     ; preds = %cond.end81
  br label %cond.end94, !dbg !6829

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi %struct.VEC_sel_insn_data_def_base* [ %base92, %cond.true91 ], [ null, %cond.false93 ], !dbg !6829
  %36 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6829
  %tobool96 = icmp ne %struct.VEC_int_heap* %36, null, !dbg !6829
  br i1 %tobool96, label %cond.true97, label %cond.false99, !dbg !6829

cond.true97:                                      ; preds = %cond.end94
  %37 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6829
  %base98 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %37, i32 0, i32 0, !dbg !6829
  br label %cond.end100, !dbg !6829

cond.false99:                                     ; preds = %cond.end94
  br label %cond.end100, !dbg !6829

cond.end100:                                      ; preds = %cond.false99, %cond.true97
  %cond101 = phi %struct.VEC_int_base* [ %base98, %cond.true97 ], [ null, %cond.false99 ], !dbg !6829
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6829
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !6829
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !6829
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 0, !dbg !6829
  %rt_int105 = bitcast %union.rtunion_def* %arrayidx104 to i32*, !dbg !6829
  %39 = load i32, i32* %rt_int105, align 8, !dbg !6829
  %call106 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond101, i32 %39), !dbg !6829
  %call107 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond95, i32 %call106), !dbg !6829
  %transformed_insns = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call107, i32 0, i32 7, !dbg !6829
  %40 = load %struct.htab*, %struct.htab** %transformed_insns, align 8, !dbg !6829
  call void @htab_delete(%struct.htab* %40), !dbg !6830
  %41 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6831
  %tobool108 = icmp ne %struct.VEC_sel_insn_data_def_heap* %41, null, !dbg !6831
  br i1 %tobool108, label %cond.true109, label %cond.false111, !dbg !6831

cond.true109:                                     ; preds = %cond.end100
  %42 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6831
  %base110 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %42, i32 0, i32 0, !dbg !6831
  br label %cond.end112, !dbg !6831

cond.false111:                                    ; preds = %cond.end100
  br label %cond.end112, !dbg !6831

cond.end112:                                      ; preds = %cond.false111, %cond.true109
  %cond113 = phi %struct.VEC_sel_insn_data_def_base* [ %base110, %cond.true109 ], [ null, %cond.false111 ], !dbg !6831
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6831
  %tobool114 = icmp ne %struct.VEC_int_heap* %43, null, !dbg !6831
  br i1 %tobool114, label %cond.true115, label %cond.false117, !dbg !6831

cond.true115:                                     ; preds = %cond.end112
  %44 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6831
  %base116 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %44, i32 0, i32 0, !dbg !6831
  br label %cond.end118, !dbg !6831

cond.false117:                                    ; preds = %cond.end112
  br label %cond.end118, !dbg !6831

cond.end118:                                      ; preds = %cond.false117, %cond.true115
  %cond119 = phi %struct.VEC_int_base* [ %base116, %cond.true115 ], [ null, %cond.false117 ], !dbg !6831
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6831
  %u120 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !6831
  %fld121 = bitcast %union.u* %u120 to [1 x %union.rtunion_def]*, !dbg !6831
  %arrayidx122 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld121, i64 0, i64 0, !dbg !6831
  %rt_int123 = bitcast %union.rtunion_def* %arrayidx122 to i32*, !dbg !6831
  %46 = load i32, i32* %rt_int123, align 8, !dbg !6831
  %call124 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond119, i32 %46), !dbg !6831
  %call125 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond113, i32 %call124), !dbg !6831
  %originators = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call125, i32 0, i32 6, !dbg !6831
  %47 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %originators, align 8, !dbg !6831
  %tobool126 = icmp ne %struct.bitmap_head_def* %47, null, !dbg !6831
  br i1 %tobool126, label %if.then127, label %if.end166, !dbg !6833

if.then127:                                       ; preds = %cond.end118
  %48 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6834
  %tobool128 = icmp ne %struct.VEC_sel_insn_data_def_heap* %48, null, !dbg !6834
  br i1 %tobool128, label %cond.true129, label %cond.false131, !dbg !6834

cond.true129:                                     ; preds = %if.then127
  %49 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6834
  %base130 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %49, i32 0, i32 0, !dbg !6834
  br label %cond.end132, !dbg !6834

cond.false131:                                    ; preds = %if.then127
  br label %cond.end132, !dbg !6834

cond.end132:                                      ; preds = %cond.false131, %cond.true129
  %cond133 = phi %struct.VEC_sel_insn_data_def_base* [ %base130, %cond.true129 ], [ null, %cond.false131 ], !dbg !6834
  %50 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6834
  %tobool134 = icmp ne %struct.VEC_int_heap* %50, null, !dbg !6834
  br i1 %tobool134, label %cond.true135, label %cond.false137, !dbg !6834

cond.true135:                                     ; preds = %cond.end132
  %51 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6834
  %base136 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %51, i32 0, i32 0, !dbg !6834
  br label %cond.end138, !dbg !6834

cond.false137:                                    ; preds = %cond.end132
  br label %cond.end138, !dbg !6834

cond.end138:                                      ; preds = %cond.false137, %cond.true135
  %cond139 = phi %struct.VEC_int_base* [ %base136, %cond.true135 ], [ null, %cond.false137 ], !dbg !6834
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6834
  %u140 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !6834
  %fld141 = bitcast %union.u* %u140 to [1 x %union.rtunion_def]*, !dbg !6834
  %arrayidx142 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld141, i64 0, i64 0, !dbg !6834
  %rt_int143 = bitcast %union.rtunion_def* %arrayidx142 to i32*, !dbg !6834
  %53 = load i32, i32* %rt_int143, align 8, !dbg !6834
  %call144 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond139, i32 %53), !dbg !6834
  %call145 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond133, i32 %call144), !dbg !6834
  %originators146 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call145, i32 0, i32 6, !dbg !6834
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %originators146, align 8, !dbg !6834
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %54), !dbg !6834
  %55 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6834
  %tobool147 = icmp ne %struct.VEC_sel_insn_data_def_heap* %55, null, !dbg !6834
  br i1 %tobool147, label %cond.true148, label %cond.false150, !dbg !6834

cond.true148:                                     ; preds = %cond.end138
  %56 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6834
  %base149 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %56, i32 0, i32 0, !dbg !6834
  br label %cond.end151, !dbg !6834

cond.false150:                                    ; preds = %cond.end138
  br label %cond.end151, !dbg !6834

cond.end151:                                      ; preds = %cond.false150, %cond.true148
  %cond152 = phi %struct.VEC_sel_insn_data_def_base* [ %base149, %cond.true148 ], [ null, %cond.false150 ], !dbg !6834
  %57 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6834
  %tobool153 = icmp ne %struct.VEC_int_heap* %57, null, !dbg !6834
  br i1 %tobool153, label %cond.true154, label %cond.false156, !dbg !6834

cond.true154:                                     ; preds = %cond.end151
  %58 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6834
  %base155 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %58, i32 0, i32 0, !dbg !6834
  br label %cond.end157, !dbg !6834

cond.false156:                                    ; preds = %cond.end151
  br label %cond.end157, !dbg !6834

cond.end157:                                      ; preds = %cond.false156, %cond.true154
  %cond158 = phi %struct.VEC_int_base* [ %base155, %cond.true154 ], [ null, %cond.false156 ], !dbg !6834
  %59 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6834
  %u159 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !6834
  %fld160 = bitcast %union.u* %u159 to [1 x %union.rtunion_def]*, !dbg !6834
  %arrayidx161 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld160, i64 0, i64 0, !dbg !6834
  %rt_int162 = bitcast %union.rtunion_def* %arrayidx161 to i32*, !dbg !6834
  %60 = load i32, i32* %rt_int162, align 8, !dbg !6834
  %call163 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond158, i32 %60), !dbg !6834
  %call164 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond152, i32 %call163), !dbg !6834
  %originators165 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call164, i32 0, i32 6, !dbg !6834
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %originators165, align 8, !dbg !6834
  br label %if.end166, !dbg !6834

if.end166:                                        ; preds = %cond.end157, %cond.end118
  %61 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6835
  %tobool167 = icmp ne %struct.VEC_sel_insn_data_def_heap* %61, null, !dbg !6835
  br i1 %tobool167, label %cond.true168, label %cond.false170, !dbg !6835

cond.true168:                                     ; preds = %if.end166
  %62 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6835
  %base169 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %62, i32 0, i32 0, !dbg !6835
  br label %cond.end171, !dbg !6835

cond.false170:                                    ; preds = %if.end166
  br label %cond.end171, !dbg !6835

cond.end171:                                      ; preds = %cond.false170, %cond.true168
  %cond172 = phi %struct.VEC_sel_insn_data_def_base* [ %base169, %cond.true168 ], [ null, %cond.false170 ], !dbg !6835
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6835
  %tobool173 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !6835
  br i1 %tobool173, label %cond.true174, label %cond.false176, !dbg !6835

cond.true174:                                     ; preds = %cond.end171
  %64 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6835
  %base175 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %64, i32 0, i32 0, !dbg !6835
  br label %cond.end177, !dbg !6835

cond.false176:                                    ; preds = %cond.end171
  br label %cond.end177, !dbg !6835

cond.end177:                                      ; preds = %cond.false176, %cond.true174
  %cond178 = phi %struct.VEC_int_base* [ %base175, %cond.true174 ], [ null, %cond.false176 ], !dbg !6835
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6835
  %u179 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %65, i32 0, i32 1, !dbg !6835
  %fld180 = bitcast %union.u* %u179 to [1 x %union.rtunion_def]*, !dbg !6835
  %arrayidx181 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld180, i64 0, i64 0, !dbg !6835
  %rt_int182 = bitcast %union.rtunion_def* %arrayidx181 to i32*, !dbg !6835
  %66 = load i32, i32* %rt_int182, align 8, !dbg !6835
  %call183 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond178, i32 %66), !dbg !6835
  %call184 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond172, i32 %call183), !dbg !6835
  %deps_context = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call184, i32 0, i32 8, !dbg !6835
  call void @free_deps(%struct.deps* %deps_context), !dbg !6836
  %67 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6837
  %tobool185 = icmp ne %struct.VEC_sel_insn_data_def_heap* %67, null, !dbg !6837
  br i1 %tobool185, label %cond.true186, label %cond.false188, !dbg !6837

cond.true186:                                     ; preds = %cond.end177
  %68 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6837
  %base187 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %68, i32 0, i32 0, !dbg !6837
  br label %cond.end189, !dbg !6837

cond.false188:                                    ; preds = %cond.end177
  br label %cond.end189, !dbg !6837

cond.end189:                                      ; preds = %cond.false188, %cond.true186
  %cond190 = phi %struct.VEC_sel_insn_data_def_base* [ %base187, %cond.true186 ], [ null, %cond.false188 ], !dbg !6837
  %69 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6837
  %tobool191 = icmp ne %struct.VEC_int_heap* %69, null, !dbg !6837
  br i1 %tobool191, label %cond.true192, label %cond.false194, !dbg !6837

cond.true192:                                     ; preds = %cond.end189
  %70 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6837
  %base193 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %70, i32 0, i32 0, !dbg !6837
  br label %cond.end195, !dbg !6837

cond.false194:                                    ; preds = %cond.end189
  br label %cond.end195, !dbg !6837

cond.end195:                                      ; preds = %cond.false194, %cond.true192
  %cond196 = phi %struct.VEC_int_base* [ %base193, %cond.true192 ], [ null, %cond.false194 ], !dbg !6837
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6837
  %u197 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !6837
  %fld198 = bitcast %union.u* %u197 to [1 x %union.rtunion_def]*, !dbg !6837
  %arrayidx199 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld198, i64 0, i64 0, !dbg !6837
  %rt_int200 = bitcast %union.rtunion_def* %arrayidx199 to i32*, !dbg !6837
  %72 = load i32, i32* %rt_int200, align 8, !dbg !6837
  %call201 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond196, i32 %72), !dbg !6837
  %call202 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond190, i32 %call201), !dbg !6837
  %analyzed_deps203 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call202, i32 0, i32 4, !dbg !6837
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %analyzed_deps203, align 8, !dbg !6838
  %73 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6839
  %tobool204 = icmp ne %struct.VEC_sel_insn_data_def_heap* %73, null, !dbg !6839
  br i1 %tobool204, label %cond.true205, label %cond.false207, !dbg !6839

cond.true205:                                     ; preds = %cond.end195
  %74 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6839
  %base206 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %74, i32 0, i32 0, !dbg !6839
  br label %cond.end208, !dbg !6839

cond.false207:                                    ; preds = %cond.end195
  br label %cond.end208, !dbg !6839

cond.end208:                                      ; preds = %cond.false207, %cond.true205
  %cond209 = phi %struct.VEC_sel_insn_data_def_base* [ %base206, %cond.true205 ], [ null, %cond.false207 ], !dbg !6839
  %75 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6839
  %tobool210 = icmp ne %struct.VEC_int_heap* %75, null, !dbg !6839
  br i1 %tobool210, label %cond.true211, label %cond.false213, !dbg !6839

cond.true211:                                     ; preds = %cond.end208
  %76 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6839
  %base212 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %76, i32 0, i32 0, !dbg !6839
  br label %cond.end214, !dbg !6839

cond.false213:                                    ; preds = %cond.end208
  br label %cond.end214, !dbg !6839

cond.end214:                                      ; preds = %cond.false213, %cond.true211
  %cond215 = phi %struct.VEC_int_base* [ %base212, %cond.true211 ], [ null, %cond.false213 ], !dbg !6839
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6839
  %u216 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !6839
  %fld217 = bitcast %union.u* %u216 to [1 x %union.rtunion_def]*, !dbg !6839
  %arrayidx218 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld217, i64 0, i64 0, !dbg !6839
  %rt_int219 = bitcast %union.rtunion_def* %arrayidx218 to i32*, !dbg !6839
  %78 = load i32, i32* %rt_int219, align 8, !dbg !6839
  %call220 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond215, i32 %78), !dbg !6839
  %call221 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond209, i32 %call220), !dbg !6839
  %deps_context222 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call221, i32 0, i32 8, !dbg !6839
  %readonly = getelementptr inbounds %struct.deps, %struct.deps* %deps_context222, i32 0, i32 18, !dbg !6840
  %bf.load = load i8, i8* %readonly, align 4, !dbg !6841
  %bf.clear = and i8 %bf.load, -2, !dbg !6841
  store i8 %bf.clear, i8* %readonly, align 4, !dbg !6841
  br label %return, !dbg !6842

return:                                           ; preds = %cond.end214, %if.then
  ret void, !dbg !6842
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @first_time_insn_init(%struct.rtx_def* %insn) #0 !dbg !6843 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6846, metadata !DIExpression()), !dbg !6847
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6848
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !6848
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6848

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6848
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !6848
  br label %cond.end, !dbg !6848

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6848
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6848
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !6848
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6848

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6848
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !6848
  br label %cond.end5, !dbg !6848

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !6848

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6848
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6848
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6848
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6848
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6848
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6848
  %5 = load i32, i32* %rt_int, align 8, !dbg !6848
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !6848
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !6848
  %live = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 3, !dbg !6848
  %6 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live, align 8, !dbg !6848
  %cmp = icmp eq %struct.bitmap_head_def* %6, null, !dbg !6849
  %conv = zext i1 %cmp to i32, !dbg !6849
  %conv8 = trunc i32 %conv to i8, !dbg !6848
  ret i8 %conv8, !dbg !6850
}

declare dso_local void @htab_delete(%struct.htab*) #2

declare dso_local void @free_deps(%struct.deps*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_init_global_and_expr(%struct.VEC_basic_block_heap* %bbs) #0 !dbg !6851 {
entry:
  %bbs.addr = alloca %struct.VEC_basic_block_heap*, align 8
  %ssi = alloca %struct.sched_scan_info_def, align 8
  store %struct.VEC_basic_block_heap* %bbs, %struct.VEC_basic_block_heap** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs.addr, metadata !6855, metadata !DIExpression()), !dbg !6856
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def* %ssi, metadata !6857, metadata !DIExpression()), !dbg !6865
  %0 = bitcast %struct.sched_scan_info_def* %ssi to i8*, !dbg !6865
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.sched_scan_info_def* @__const.sel_init_global_and_expr.ssi to i8*), i64 32, i1 false), !dbg !6865
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !6866
  call void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %1, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !6867
  ret void, !dbg !6868
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_global_and_expr_for_bb(%struct.basic_block_def* %bb) #0 !dbg !6869 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6870, metadata !DIExpression()), !dbg !6871
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6872
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %0), !dbg !6874
  %tobool = icmp ne i8 %call, 0, !dbg !6874
  br i1 %tobool, label %if.then, label %if.end, !dbg !6875

if.then:                                          ; preds = %entry
  br label %return, !dbg !6876

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6877
  call void @invalidate_av_set(%struct.basic_block_def* %1), !dbg !6878
  br label %return, !dbg !6879

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !6879
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_insn_data() #0 !dbg !6880 {
entry:
  %reserve = alloca i32, align 4
  %size = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %reserve, metadata !6881, metadata !DIExpression()), !dbg !6882
  call void @sched_extend_target(), !dbg !6883
  call void @sched_deps_init(i8 zeroext 0), !dbg !6884
  %0 = load i32, i32* @sched_max_luid, align 4, !dbg !6885
  %add = add nsw i32 %0, 1, !dbg !6886
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6887
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !6887
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6887

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6887
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %2, i32 0, i32 0, !dbg !6887
  br label %cond.end, !dbg !6887

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6887

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6887
  %call = call i32 @VEC_sel_insn_data_def_base_length(%struct.VEC_sel_insn_data_def_base* %cond), !dbg !6887
  %sub = sub i32 %add, %call, !dbg !6888
  store i32 %sub, i32* %reserve, align 4, !dbg !6889
  %3 = load i32, i32* %reserve, align 4, !dbg !6890
  %cmp = icmp sgt i32 %3, 0, !dbg !6892
  br i1 %cmp, label %land.lhs.true, label %if.end13, !dbg !6893

land.lhs.true:                                    ; preds = %cond.end
  %4 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6894
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %4, null, !dbg !6894
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !6894

cond.true2:                                       ; preds = %land.lhs.true
  %5 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6894
  %base3 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %5, i32 0, i32 0, !dbg !6894
  br label %cond.end5, !dbg !6894

cond.false4:                                      ; preds = %land.lhs.true
  br label %cond.end5, !dbg !6894

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !6894
  %6 = load i32, i32* %reserve, align 4, !dbg !6894
  %call7 = call i32 @VEC_sel_insn_data_def_base_space(%struct.VEC_sel_insn_data_def_base* %cond6, i32 %6), !dbg !6894
  %tobool8 = icmp ne i32 %call7, 0, !dbg !6894
  br i1 %tobool8, label %if.end13, label %if.then, !dbg !6895

if.then:                                          ; preds = %cond.end5
  call void @llvm.dbg.declare(metadata i32* %size, metadata !6896, metadata !DIExpression()), !dbg !6898
  %7 = load i32, i32* @sched_max_luid, align 4, !dbg !6899
  %div = sdiv i32 %7, 2, !dbg !6901
  %cmp9 = icmp sgt i32 %div, 1024, !dbg !6902
  br i1 %cmp9, label %if.then10, label %if.else, !dbg !6903

if.then10:                                        ; preds = %if.then
  %8 = load i32, i32* @sched_max_luid, align 4, !dbg !6904
  %add11 = add nsw i32 %8, 1024, !dbg !6905
  store i32 %add11, i32* %size, align 4, !dbg !6906
  br label %if.end, !dbg !6907

if.else:                                          ; preds = %if.then
  %9 = load i32, i32* @sched_max_luid, align 4, !dbg !6908
  %mul = mul nsw i32 3, %9, !dbg !6909
  %div12 = sdiv i32 %mul, 2, !dbg !6910
  store i32 %div12, i32* %size, align 4, !dbg !6911
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then10
  %10 = load i32, i32* %size, align 4, !dbg !6912
  call void @VEC_sel_insn_data_def_heap_safe_grow_cleared(%struct.VEC_sel_insn_data_def_heap** @s_i_d, i32 %10), !dbg !6912
  br label %if.end13, !dbg !6913

if.end13:                                         ; preds = %if.end, %cond.end5, %cond.end
  ret void, !dbg !6914
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_global_and_expr_for_insn(%struct.rtx_def* %insn) #0 !dbg !6915 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %prev_insn = alloca %struct.rtx_def*, align 8
  %force_unique_p = alloca i8, align 1
  %spec_done_ds = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !6916, metadata !DIExpression()), !dbg !6917
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6918
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6918
  %bf.load = load i32, i32* %1, align 8, !dbg !6918
  %bf.clear = and i32 %bf.load, 65535, !dbg !6918
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !6918
  br i1 %cmp, label %if.then, label %if.end, !dbg !6920

if.then:                                          ; preds = %entry
  br label %return, !dbg !6921

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6922
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6922
  %bf.load1 = load i32, i32* %3, align 8, !dbg !6922
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !6922
  %cmp3 = icmp eq i32 %bf.clear2, 13, !dbg !6922
  br i1 %cmp3, label %land.lhs.true, label %if.end6, !dbg !6922

land.lhs.true:                                    ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6922
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6922
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6922
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6922
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6922
  %5 = load i32, i32* %rt_int, align 8, !dbg !6922
  %cmp4 = icmp eq i32 %5, 10, !dbg !6922
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !6924

if.then5:                                         ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.anon.5, %struct.anon.5* @init_global_data, i32 0, i32 0), align 8, !dbg !6925
  br label %return, !dbg !6927

if.end6:                                          ; preds = %land.lhs.true, %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6928
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6928
  %bf.load7 = load i32, i32* %7, align 8, !dbg !6928
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6928
  %cmp9 = icmp eq i32 %bf.clear8, 8, !dbg !6928
  br i1 %cmp9, label %cond.false, label %lor.lhs.false, !dbg !6928

lor.lhs.false:                                    ; preds = %if.end6
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6928
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6928
  %bf.load10 = load i32, i32* %9, align 8, !dbg !6928
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6928
  %cmp12 = icmp eq i32 %bf.clear11, 7, !dbg !6928
  br i1 %cmp12, label %cond.false, label %lor.lhs.false13, !dbg !6928

lor.lhs.false13:                                  ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6928
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6928
  %bf.load14 = load i32, i32* %11, align 8, !dbg !6928
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !6928
  %cmp16 = icmp eq i32 %bf.clear15, 9, !dbg !6928
  br i1 %cmp16, label %cond.false, label %lor.lhs.false17, !dbg !6928

lor.lhs.false17:                                  ; preds = %lor.lhs.false13
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6928
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6928
  %bf.load18 = load i32, i32* %13, align 8, !dbg !6928
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !6928
  %cmp20 = icmp eq i32 %bf.clear19, 10, !dbg !6928
  br i1 %cmp20, label %cond.false, label %cond.true, !dbg !6928

cond.true:                                        ; preds = %lor.lhs.false17
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2843, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6928
  br label %cond.end, !dbg !6928

cond.false:                                       ; preds = %lor.lhs.false17, %lor.lhs.false13, %lor.lhs.false, %if.end6
  br label %cond.end, !dbg !6928

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6928
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6929
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6929
  %bf.load21 = load i32, i32* %15, align 8, !dbg !6929
  %bf.lshr = lshr i32 %bf.load21, 28, !dbg !6929
  %bf.clear22 = and i32 %bf.lshr, 1, !dbg !6929
  %tobool = icmp ne i32 %bf.clear22, 0, !dbg !6929
  br i1 %tobool, label %if.then23, label %if.else, !dbg !6931

if.then23:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_insn, metadata !6932, metadata !DIExpression()), !dbg !6934
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.5, %struct.anon.5* @init_global_data, i32 0, i32 0), align 8, !dbg !6935
  store %struct.rtx_def* %16, %struct.rtx_def** %prev_insn, align 8, !dbg !6934
  %17 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !6936
  %tobool24 = icmp ne %struct.rtx_def* %17, null, !dbg !6936
  br i1 %tobool24, label %if.then25, label %if.end42, !dbg !6938

if.then25:                                        ; preds = %if.then23
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6939
  %19 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6940
  %tobool26 = icmp ne %struct.VEC_sel_insn_data_def_heap* %19, null, !dbg !6940
  br i1 %tobool26, label %cond.true27, label %cond.false28, !dbg !6940

cond.true27:                                      ; preds = %if.then25
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6940
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %20, i32 0, i32 0, !dbg !6940
  br label %cond.end29, !dbg !6940

cond.false28:                                     ; preds = %if.then25
  br label %cond.end29, !dbg !6940

cond.end29:                                       ; preds = %cond.false28, %cond.true27
  %cond30 = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true27 ], [ null, %cond.false28 ], !dbg !6940
  %21 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6940
  %tobool31 = icmp ne %struct.VEC_int_heap* %21, null, !dbg !6940
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !6940

cond.true32:                                      ; preds = %cond.end29
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6940
  %base33 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %22, i32 0, i32 0, !dbg !6940
  br label %cond.end35, !dbg !6940

cond.false34:                                     ; preds = %cond.end29
  br label %cond.end35, !dbg !6940

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_int_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !6940
  %23 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !6940
  %u37 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !6940
  %fld38 = bitcast %union.u* %u37 to [1 x %union.rtunion_def]*, !dbg !6940
  %arrayidx39 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld38, i64 0, i64 0, !dbg !6940
  %rt_int40 = bitcast %union.rtunion_def* %arrayidx39 to i32*, !dbg !6940
  %24 = load i32, i32* %rt_int40, align 8, !dbg !6940
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond36, i32 %24), !dbg !6940
  %call41 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond30, i32 %call), !dbg !6940
  %sched_next = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call41, i32 0, i32 9, !dbg !6940
  store %struct.rtx_def* %18, %struct.rtx_def** %sched_next, align 8, !dbg !6941
  br label %if.end42, !dbg !6940

if.end42:                                         ; preds = %cond.end35, %if.then23
  %25 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6942
  store %struct.rtx_def* %25, %struct.rtx_def** getelementptr inbounds (%struct.anon.5, %struct.anon.5* @init_global_data, i32 0, i32 0), align 8, !dbg !6943
  br label %if.end43, !dbg !6944

if.else:                                          ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.anon.5, %struct.anon.5* @init_global_data, i32 0, i32 0), align 8, !dbg !6945
  br label %if.end43

if.end43:                                         ; preds = %if.else, %if.end42
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6946
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !6946
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !6946
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 5, !dbg !6946
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !6946
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6946
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6946
  %bf.load47 = load i32, i32* %28, align 8, !dbg !6946
  %bf.clear48 = and i32 %bf.load47, 65535, !dbg !6946
  %cmp49 = icmp eq i32 %bf.clear48, 16, !dbg !6948
  br i1 %cmp49, label %if.then57, label %lor.lhs.false50, !dbg !6949

lor.lhs.false50:                                  ; preds = %if.end43
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6950
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !6950
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !6950
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 5, !dbg !6950
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !6950
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !6950
  %call55 = call i32 @asm_noperands(%struct.rtx_def* %30), !dbg !6951
  %cmp56 = icmp sge i32 %call55, 0, !dbg !6952
  br i1 %cmp56, label %if.then57, label %if.end78, !dbg !6953

if.then57:                                        ; preds = %lor.lhs.false50, %if.end43
  %31 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6954
  %tobool58 = icmp ne %struct.VEC_sel_insn_data_def_heap* %31, null, !dbg !6954
  br i1 %tobool58, label %cond.true59, label %cond.false61, !dbg !6954

cond.true59:                                      ; preds = %if.then57
  %32 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6954
  %base60 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %32, i32 0, i32 0, !dbg !6954
  br label %cond.end62, !dbg !6954

cond.false61:                                     ; preds = %if.then57
  br label %cond.end62, !dbg !6954

cond.end62:                                       ; preds = %cond.false61, %cond.true59
  %cond63 = phi %struct.VEC_sel_insn_data_def_base* [ %base60, %cond.true59 ], [ null, %cond.false61 ], !dbg !6954
  %33 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6954
  %tobool64 = icmp ne %struct.VEC_int_heap* %33, null, !dbg !6954
  br i1 %tobool64, label %cond.true65, label %cond.false67, !dbg !6954

cond.true65:                                      ; preds = %cond.end62
  %34 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6954
  %base66 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %34, i32 0, i32 0, !dbg !6954
  br label %cond.end68, !dbg !6954

cond.false67:                                     ; preds = %cond.end62
  br label %cond.end68, !dbg !6954

cond.end68:                                       ; preds = %cond.false67, %cond.true65
  %cond69 = phi %struct.VEC_int_base* [ %base66, %cond.true65 ], [ null, %cond.false67 ], !dbg !6954
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6954
  %u70 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !6954
  %fld71 = bitcast %union.u* %u70 to [1 x %union.rtunion_def]*, !dbg !6954
  %arrayidx72 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld71, i64 0, i64 0, !dbg !6954
  %rt_int73 = bitcast %union.rtunion_def* %arrayidx72 to i32*, !dbg !6954
  %36 = load i32, i32* %rt_int73, align 8, !dbg !6954
  %call74 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond69, i32 %36), !dbg !6954
  %call75 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond63, i32 %call74), !dbg !6954
  %asm_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call75, i32 0, i32 13, !dbg !6954
  %bf.load76 = load i8, i8* %asm_p, align 4, !dbg !6955
  %bf.clear77 = and i8 %bf.load76, -3, !dbg !6955
  %bf.set = or i8 %bf.clear77, 2, !dbg !6955
  store i8 %bf.set, i8* %asm_p, align 4, !dbg !6955
  br label %if.end78, !dbg !6954

if.end78:                                         ; preds = %cond.end68, %lor.lhs.false50
  call void @llvm.dbg.declare(metadata i8* %force_unique_p, metadata !6956, metadata !DIExpression()), !dbg !6958
  call void @llvm.dbg.declare(metadata i32* %spec_done_ds, metadata !6959, metadata !DIExpression()), !dbg !6960
  %37 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !6961
  %tobool79 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %37, null, !dbg !6961
  br i1 %tobool79, label %cond.true80, label %cond.false82, !dbg !6961

cond.true80:                                      ; preds = %if.end78
  %38 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !6961
  %base81 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %38, i32 0, i32 0, !dbg !6961
  br label %cond.end83, !dbg !6961

cond.false82:                                     ; preds = %if.end78
  br label %cond.end83, !dbg !6961

cond.end83:                                       ; preds = %cond.false82, %cond.true80
  %cond84 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base81, %cond.true80 ], [ null, %cond.false82 ], !dbg !6961
  %39 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6961
  %tobool85 = icmp ne %struct.VEC_int_heap* %39, null, !dbg !6961
  br i1 %tobool85, label %cond.true86, label %cond.false88, !dbg !6961

cond.true86:                                      ; preds = %cond.end83
  %40 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6961
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %40, i32 0, i32 0, !dbg !6961
  br label %cond.end89, !dbg !6961

cond.false88:                                     ; preds = %cond.end83
  br label %cond.end89, !dbg !6961

cond.end89:                                       ; preds = %cond.false88, %cond.true86
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true86 ], [ null, %cond.false88 ], !dbg !6961
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6961
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6961
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !6961
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 0, !dbg !6961
  %rt_int94 = bitcast %union.rtunion_def* %arrayidx93 to i32*, !dbg !6961
  %42 = load i32, i32* %rt_int94, align 8, !dbg !6961
  %call95 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond90, i32 %42), !dbg !6961
  %call96 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond84, i32 %call95), !dbg !6961
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call96, i32 0, i32 7, !dbg !6961
  %bf.load97 = load i8, i8* %cant_move, align 8, !dbg !6961
  %bf.clear98 = and i8 %bf.load97, 1, !dbg !6961
  %bf.cast = zext i8 %bf.clear98 to i32, !dbg !6961
  %tobool99 = icmp ne i32 %bf.cast, 0, !dbg !6961
  br i1 %tobool99, label %if.then142, label %lor.lhs.false100, !dbg !6963

lor.lhs.false100:                                 ; preds = %cond.end89
  %43 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6964
  %tobool101 = icmp ne %struct.VEC_sel_insn_data_def_heap* %43, null, !dbg !6964
  br i1 %tobool101, label %cond.true102, label %cond.false104, !dbg !6964

cond.true102:                                     ; preds = %lor.lhs.false100
  %44 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6964
  %base103 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %44, i32 0, i32 0, !dbg !6964
  br label %cond.end105, !dbg !6964

cond.false104:                                    ; preds = %lor.lhs.false100
  br label %cond.end105, !dbg !6964

cond.end105:                                      ; preds = %cond.false104, %cond.true102
  %cond106 = phi %struct.VEC_sel_insn_data_def_base* [ %base103, %cond.true102 ], [ null, %cond.false104 ], !dbg !6964
  %45 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6964
  %tobool107 = icmp ne %struct.VEC_int_heap* %45, null, !dbg !6964
  br i1 %tobool107, label %cond.true108, label %cond.false110, !dbg !6964

cond.true108:                                     ; preds = %cond.end105
  %46 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6964
  %base109 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %46, i32 0, i32 0, !dbg !6964
  br label %cond.end111, !dbg !6964

cond.false110:                                    ; preds = %cond.end105
  br label %cond.end111, !dbg !6964

cond.end111:                                      ; preds = %cond.false110, %cond.true108
  %cond112 = phi %struct.VEC_int_base* [ %base109, %cond.true108 ], [ null, %cond.false110 ], !dbg !6964
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6964
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !6964
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !6964
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 0, !dbg !6964
  %rt_int116 = bitcast %union.rtunion_def* %arrayidx115 to i32*, !dbg !6964
  %48 = load i32, i32* %rt_int116, align 8, !dbg !6964
  %call117 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond112, i32 %48), !dbg !6964
  %call118 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond106, i32 %call117), !dbg !6964
  %asm_p119 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call118, i32 0, i32 13, !dbg !6964
  %bf.load120 = load i8, i8* %asm_p119, align 4, !dbg !6964
  %bf.lshr121 = lshr i8 %bf.load120, 1, !dbg !6964
  %bf.clear122 = and i8 %bf.lshr121, 1, !dbg !6964
  %bf.cast123 = zext i8 %bf.clear122 to i32, !dbg !6964
  %tobool124 = icmp ne i32 %bf.cast123, 0, !dbg !6964
  br i1 %tobool124, label %if.then142, label %lor.lhs.false125, !dbg !6965

lor.lhs.false125:                                 ; preds = %cond.end111
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6966
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !6966
  %bf.load126 = load i32, i32* %50, align 8, !dbg !6966
  %bf.lshr127 = lshr i32 %bf.load126, 28, !dbg !6966
  %bf.clear128 = and i32 %bf.lshr127, 1, !dbg !6966
  %tobool129 = icmp ne i32 %bf.clear128, 0, !dbg !6966
  br i1 %tobool129, label %if.then142, label %lor.lhs.false130, !dbg !6967

lor.lhs.false130:                                 ; preds = %lor.lhs.false125
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6968
  %call131 = call i32 @prologue_epilogue_contains(%struct.rtx_def* %51), !dbg !6969
  %tobool132 = icmp ne i32 %call131, 0, !dbg !6969
  br i1 %tobool132, label %if.then142, label %lor.lhs.false133, !dbg !6970

lor.lhs.false133:                                 ; preds = %lor.lhs.false130
  %52 = load i32, i32* @flag_non_call_exceptions, align 4, !dbg !6971
  %tobool134 = icmp ne i32 %52, 0, !dbg !6971
  br i1 %tobool134, label %land.lhs.true135, label %lor.lhs.false138, !dbg !6972

land.lhs.true135:                                 ; preds = %lor.lhs.false133
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6973
  %call136 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %53), !dbg !6974
  %conv = zext i8 %call136 to i32, !dbg !6974
  %tobool137 = icmp ne i32 %conv, 0, !dbg !6974
  br i1 %tobool137, label %if.then142, label %lor.lhs.false138, !dbg !6975

lor.lhs.false138:                                 ; preds = %land.lhs.true135, %lor.lhs.false133
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6976
  %call139 = call zeroext i8 @control_flow_insn_p(%struct.rtx_def* %54), !dbg !6977
  %conv140 = zext i8 %call139 to i32, !dbg !6977
  %tobool141 = icmp ne i32 %conv140, 0, !dbg !6977
  br i1 %tobool141, label %if.then142, label %if.else143, !dbg !6978

if.then142:                                       ; preds = %lor.lhs.false138, %land.lhs.true135, %lor.lhs.false130, %lor.lhs.false125, %cond.end111, %cond.end89
  store i8 1, i8* %force_unique_p, align 1, !dbg !6979
  br label %if.end144, !dbg !6980

if.else143:                                       ; preds = %lor.lhs.false138
  store i8 0, i8* %force_unique_p, align 1, !dbg !6981
  br label %if.end144

if.end144:                                        ; preds = %if.else143, %if.then142
  %55 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 33), align 8, !dbg !6982
  %tobool145 = icmp ne i32 (%struct.rtx_def*)* %55, null, !dbg !6984
  br i1 %tobool145, label %if.then146, label %if.else149, !dbg !6985

if.then146:                                       ; preds = %if.end144
  %56 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 33), align 8, !dbg !6986
  %57 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6988
  %call147 = call i32 %56(%struct.rtx_def* %57), !dbg !6989
  store i32 %call147, i32* %spec_done_ds, align 4, !dbg !6990
  %58 = load i32, i32* %spec_done_ds, align 4, !dbg !6991
  %call148 = call i32 @ds_get_max_dep_weak(i32 %58), !dbg !6992
  store i32 %call148, i32* %spec_done_ds, align 4, !dbg !6993
  br label %if.end150, !dbg !6994

if.else149:                                       ; preds = %if.end144
  store i32 0, i32* %spec_done_ds, align 4, !dbg !6995
  br label %if.end150

if.end150:                                        ; preds = %if.else149, %if.then146
  %59 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6996
  %tobool151 = icmp ne %struct.VEC_sel_insn_data_def_heap* %59, null, !dbg !6996
  br i1 %tobool151, label %cond.true152, label %cond.false154, !dbg !6996

cond.true152:                                     ; preds = %if.end150
  %60 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !6996
  %base153 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %60, i32 0, i32 0, !dbg !6996
  br label %cond.end155, !dbg !6996

cond.false154:                                    ; preds = %if.end150
  br label %cond.end155, !dbg !6996

cond.end155:                                      ; preds = %cond.false154, %cond.true152
  %cond156 = phi %struct.VEC_sel_insn_data_def_base* [ %base153, %cond.true152 ], [ null, %cond.false154 ], !dbg !6996
  %61 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6996
  %tobool157 = icmp ne %struct.VEC_int_heap* %61, null, !dbg !6996
  br i1 %tobool157, label %cond.true158, label %cond.false160, !dbg !6996

cond.true158:                                     ; preds = %cond.end155
  %62 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !6996
  %base159 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %62, i32 0, i32 0, !dbg !6996
  br label %cond.end161, !dbg !6996

cond.false160:                                    ; preds = %cond.end155
  br label %cond.end161, !dbg !6996

cond.end161:                                      ; preds = %cond.false160, %cond.true158
  %cond162 = phi %struct.VEC_int_base* [ %base159, %cond.true158 ], [ null, %cond.false160 ], !dbg !6996
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6996
  %u163 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !6996
  %fld164 = bitcast %union.u* %u163 to [1 x %union.rtunion_def]*, !dbg !6996
  %arrayidx165 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld164, i64 0, i64 0, !dbg !6996
  %rt_int166 = bitcast %union.rtunion_def* %arrayidx165 to i32*, !dbg !6996
  %64 = load i32, i32* %rt_int166, align 8, !dbg !6996
  %call167 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond162, i32 %64), !dbg !6996
  %call168 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond156, i32 %call167), !dbg !6996
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call168, i32 0, i32 0, !dbg !6996
  %65 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !6997
  %66 = load i8, i8* %force_unique_p, align 1, !dbg !6998
  %call169 = call %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %65, i8 zeroext %66), !dbg !6999
  %67 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7000
  %tobool170 = icmp ne %struct.VEC_haifa_insn_data_def_heap* %67, null, !dbg !7000
  br i1 %tobool170, label %cond.true171, label %cond.false173, !dbg !7000

cond.true171:                                     ; preds = %cond.end161
  %68 = load %struct.VEC_haifa_insn_data_def_heap*, %struct.VEC_haifa_insn_data_def_heap** @h_i_d, align 8, !dbg !7000
  %base172 = getelementptr inbounds %struct.VEC_haifa_insn_data_def_heap, %struct.VEC_haifa_insn_data_def_heap* %68, i32 0, i32 0, !dbg !7000
  br label %cond.end174, !dbg !7000

cond.false173:                                    ; preds = %cond.end161
  br label %cond.end174, !dbg !7000

cond.end174:                                      ; preds = %cond.false173, %cond.true171
  %cond175 = phi %struct.VEC_haifa_insn_data_def_base* [ %base172, %cond.true171 ], [ null, %cond.false173 ], !dbg !7000
  %69 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7000
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %69, i32 0, i32 1, !dbg !7000
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !7000
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 0, !dbg !7000
  %rt_int179 = bitcast %union.rtunion_def* %arrayidx178 to i32*, !dbg !7000
  %70 = load i32, i32* %rt_int179, align 8, !dbg !7000
  %call180 = call %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %cond175, i32 %70), !dbg !7000
  %priority = getelementptr inbounds %struct._haifa_insn_data, %struct._haifa_insn_data* %call180, i32 0, i32 1, !dbg !7000
  %71 = load i32, i32* %priority, align 4, !dbg !7000
  %72 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7001
  %u181 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !7001
  %fld182 = bitcast %union.u* %u181 to [1 x %union.rtunion_def]*, !dbg !7001
  %arrayidx183 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld182, i64 0, i64 3, !dbg !7001
  %rt_bb = bitcast %union.rtunion_def* %arrayidx183 to %struct.basic_block_def**, !dbg !7001
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7001
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %73, i32 0, i32 9, !dbg !7001
  %74 = load i32, i32* %index, align 8, !dbg !7001
  %add = add nsw i32 %74, 0, !dbg !7001
  %75 = load i32, i32* %spec_done_ds, align 4, !dbg !7002
  %76 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7003
  %tobool184 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %76, null, !dbg !7003
  br i1 %tobool184, label %cond.true185, label %cond.false187, !dbg !7003

cond.true185:                                     ; preds = %cond.end174
  %77 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7003
  %base186 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %77, i32 0, i32 0, !dbg !7003
  br label %cond.end188, !dbg !7003

cond.false187:                                    ; preds = %cond.end174
  br label %cond.end188, !dbg !7003

cond.end188:                                      ; preds = %cond.false187, %cond.true185
  %cond189 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base186, %cond.true185 ], [ null, %cond.false187 ], !dbg !7003
  %78 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7003
  %tobool190 = icmp ne %struct.VEC_int_heap* %78, null, !dbg !7003
  br i1 %tobool190, label %cond.true191, label %cond.false193, !dbg !7003

cond.true191:                                     ; preds = %cond.end188
  %79 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7003
  %base192 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %79, i32 0, i32 0, !dbg !7003
  br label %cond.end194, !dbg !7003

cond.false193:                                    ; preds = %cond.end188
  br label %cond.end194, !dbg !7003

cond.end194:                                      ; preds = %cond.false193, %cond.true191
  %cond195 = phi %struct.VEC_int_base* [ %base192, %cond.true191 ], [ null, %cond.false193 ], !dbg !7003
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7003
  %u196 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %80, i32 0, i32 1, !dbg !7003
  %fld197 = bitcast %union.u* %u196 to [1 x %union.rtunion_def]*, !dbg !7003
  %arrayidx198 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld197, i64 0, i64 0, !dbg !7003
  %rt_int199 = bitcast %union.rtunion_def* %arrayidx198 to i32*, !dbg !7003
  %81 = load i32, i32* %rt_int199, align 8, !dbg !7003
  %call200 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond195, i32 %81), !dbg !7003
  %call201 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond189, i32 %call200), !dbg !7003
  %cant_move202 = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call201, i32 0, i32 7, !dbg !7003
  %bf.load203 = load i8, i8* %cant_move202, align 8, !dbg !7003
  %bf.clear204 = and i8 %bf.load203, 1, !dbg !7003
  %bf.cast205 = zext i8 %bf.clear204 to i32, !dbg !7003
  %conv206 = trunc i32 %bf.cast205 to i8, !dbg !7003
  call void @init_expr(%struct._expr* %expr, %struct.vinsn_def* %call169, i32 0, i32 10000, i32 %71, i32 0, i32 %add, i32 %75, i32 0, i32 0, %struct.VEC_expr_history_def_heap* null, i8 zeroext 1, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext %conv206), !dbg !7004
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7005
  call void @init_first_time_insn_data(%struct.rtx_def* %82), !dbg !7006
  br label %return, !dbg !7007

return:                                           ; preds = %cond.end194, %if.then5, %if.then
  ret void, !dbg !7007
}

declare dso_local void @sched_scan(%struct.sched_scan_info_def*, %struct.VEC_basic_block_heap*, %struct.basic_block_def*, %struct.VEC_rtx_heap*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_finish_global_and_expr() #0 !dbg !7008 {
entry:
  %bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i32, align 4
  %ssi = alloca %struct.sched_scan_info_def, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs, metadata !7009, metadata !DIExpression()), !dbg !7011
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7012, metadata !DIExpression()), !dbg !7013
  %0 = load i32, i32* @current_nr_blocks, align 4, !dbg !7014
  %call = call %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %0), !dbg !7014
  store %struct.VEC_basic_block_heap* %call, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7015
  store i32 0, i32* %i, align 4, !dbg !7016
  br label %for.cond, !dbg !7018

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !7019
  %2 = load i32, i32* @current_nr_blocks, align 4, !dbg !7021
  %cmp = icmp slt i32 %1, %2, !dbg !7022
  br i1 %cmp, label %for.body, label %for.end, !dbg !7023

for.body:                                         ; preds = %for.cond
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7024
  %tobool = icmp ne %struct.VEC_basic_block_heap* %3, null, !dbg !7024
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7024

cond.true:                                        ; preds = %for.body
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7024
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !7024
  br label %cond.end, !dbg !7024

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !7024

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7024
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7024
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !7024
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7024
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7024
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !7024
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !7024
  %tobool1 = icmp ne %struct.VEC_basic_block_gc* %7, null, !dbg !7024
  br i1 %tobool1, label %cond.true2, label %cond.false7, !dbg !7024

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7024
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !7024
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !7024
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !7024
  %x_basic_block_info5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 2, !dbg !7024
  %10 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info5, align 8, !dbg !7024
  %base6 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %10, i32 0, i32 0, !dbg !7024
  br label %cond.end8, !dbg !7024

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !7024

cond.end8:                                        ; preds = %cond.false7, %cond.true2
  %cond9 = phi %struct.VEC_basic_block_base* [ %base6, %cond.true2 ], [ null, %cond.false7 ], !dbg !7024
  %11 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7024
  %12 = load i32*, i32** @ebb_head, align 8, !dbg !7024
  %13 = load i32, i32* %i, align 4, !dbg !7024
  %idxprom = sext i32 %13 to i64, !dbg !7024
  %arrayidx = getelementptr inbounds i32, i32* %12, i64 %idxprom, !dbg !7024
  %14 = load i32, i32* %arrayidx, align 4, !dbg !7024
  %idxprom10 = sext i32 %14 to i64, !dbg !7024
  %arrayidx11 = getelementptr inbounds i32, i32* %11, i64 %idxprom10, !dbg !7024
  %15 = load i32, i32* %arrayidx11, align 4, !dbg !7024
  %call12 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond9, i32 %15), !dbg !7024
  %call13 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %call12), !dbg !7024
  br label %for.inc, !dbg !7024

for.inc:                                          ; preds = %cond.end8
  %16 = load i32, i32* %i, align 4, !dbg !7025
  %inc = add nsw i32 %16, 1, !dbg !7025
  store i32 %inc, i32* %i, align 4, !dbg !7025
  br label %for.cond, !dbg !7026, !llvm.loop !7027

for.end:                                          ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def* %ssi, metadata !7029, metadata !DIExpression()), !dbg !7031
  %17 = bitcast %struct.sched_scan_info_def* %ssi to i8*, !dbg !7031
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %17, i8* align 8 bitcast (%struct.sched_scan_info_def* @__const.sel_finish_global_and_expr.ssi to i8*), i64 32, i1 false), !dbg !7031
  %18 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs, align 8, !dbg !7032
  call void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %18, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !7033
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %bbs), !dbg !7034
  call void @finish_insns(), !dbg !7035
  ret void, !dbg !7036
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_basic_block_heap* @VEC_basic_block_heap_alloc(i32 %alloc_) #0 !dbg !7037 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !7040, metadata !DIExpression()), !dbg !7041
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !7041
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !7041
  %1 = bitcast i8* %call to %struct.VEC_basic_block_heap*, !dbg !7041
  ret %struct.VEC_basic_block_heap* %1, !dbg !7041
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !7042 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7047, metadata !DIExpression()), !dbg !7048
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !7049, metadata !DIExpression()), !dbg !7048
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !7050, metadata !DIExpression()), !dbg !7048
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7048
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !7048
  %1 = load i32, i32* %num, align 8, !dbg !7048
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7048
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !7048
  %3 = load i32, i32* %alloc, align 4, !dbg !7048
  %cmp = icmp ult i32 %1, %3, !dbg !7048
  %conv = zext i1 %cmp to i32, !dbg !7048
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7048
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !7048
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7048
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !7048
  %6 = load i32, i32* %num1, align 8, !dbg !7048
  %inc = add i32 %6, 1, !dbg !7048
  store i32 %inc, i32* %num1, align 8, !dbg !7048
  %idxprom = zext i32 %6 to i64, !dbg !7048
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7048
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !7048
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !7048
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7048
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !7048
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !7048
  ret %struct.basic_block_def** %9, !dbg !7048
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %vec_, i32 %ix_) #0 !dbg !7051 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !7056, metadata !DIExpression()), !dbg !7057
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7058, metadata !DIExpression()), !dbg !7057
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7057
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !7057
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7057

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7057
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7057
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !7057
  %3 = load i32, i32* %num, align 8, !dbg !7057
  %cmp = icmp ult i32 %1, %3, !dbg !7057
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7059
  %land.ext = zext i1 %4 to i32, !dbg !7057
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !7057
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 2, !dbg !7057
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7057
  %idxprom = zext i32 %6 to i64, !dbg !7057
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !7057
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !7057
  ret %struct.basic_block_def* %7, !dbg !7057
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_global_and_expr_for_bb(%struct.basic_block_def* %bb) #0 !dbg !7060 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7061, metadata !DIExpression()), !dbg !7062
  %0 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !7063
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %0, null, !dbg !7063
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7063

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !7063
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %1, i32 0, i32 0, !dbg !7063
  br label %cond.end, !dbg !7063

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7063

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7063
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7063
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !7063
  %3 = load i32, i32* %index, align 8, !dbg !7063
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %3), !dbg !7063
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 1, !dbg !7063
  call void @av_set_clear(%struct._list_node** %av_set), !dbg !7064
  %4 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !7065
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %4, null, !dbg !7065
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7065

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !7065
  %base3 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %5, i32 0, i32 0, !dbg !7065
  br label %cond.end5, !dbg !7065

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7065

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7065
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7065
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !7065
  %7 = load i32, i32* %index7, align 8, !dbg !7065
  %call8 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond6, i32 %7), !dbg !7065
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call8, i32 0, i32 2, !dbg !7065
  store i32 0, i32* %av_level, align 8, !dbg !7066
  ret void, !dbg !7067
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_global_and_expr_insn(%struct.rtx_def* %insn) #0 !dbg !7068 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7069, metadata !DIExpression()), !dbg !7070
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7071
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !7071
  %bf.load = load i32, i32* %1, align 8, !dbg !7071
  %bf.clear = and i32 %bf.load, 65535, !dbg !7071
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !7071
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7073

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7074
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !7074
  %bf.load1 = load i32, i32* %3, align 8, !dbg !7074
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7074
  %cmp3 = icmp eq i32 %bf.clear2, 13, !dbg !7074
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !7074

land.lhs.true:                                    ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7074
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7074
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7074
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7074
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7074
  %5 = load i32, i32* %rt_int, align 8, !dbg !7074
  %cmp4 = icmp eq i32 %5, 10, !dbg !7074
  br i1 %cmp4, label %if.then, label %if.end, !dbg !7075

if.then:                                          ; preds = %land.lhs.true, %entry
  br label %if.end86, !dbg !7076

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7077
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7077
  %bf.load5 = load i32, i32* %7, align 8, !dbg !7077
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7077
  %cmp7 = icmp eq i32 %bf.clear6, 8, !dbg !7077
  br i1 %cmp7, label %cond.false, label %lor.lhs.false8, !dbg !7077

lor.lhs.false8:                                   ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7077
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7077
  %bf.load9 = load i32, i32* %9, align 8, !dbg !7077
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !7077
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !7077
  br i1 %cmp11, label %cond.false, label %lor.lhs.false12, !dbg !7077

lor.lhs.false12:                                  ; preds = %lor.lhs.false8
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7077
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7077
  %bf.load13 = load i32, i32* %11, align 8, !dbg !7077
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !7077
  %cmp15 = icmp eq i32 %bf.clear14, 9, !dbg !7077
  br i1 %cmp15, label %cond.false, label %lor.lhs.false16, !dbg !7077

lor.lhs.false16:                                  ; preds = %lor.lhs.false12
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7077
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7077
  %bf.load17 = load i32, i32* %13, align 8, !dbg !7077
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !7077
  %cmp19 = icmp eq i32 %bf.clear18, 10, !dbg !7077
  br i1 %cmp19, label %cond.false, label %cond.true, !dbg !7077

cond.true:                                        ; preds = %lor.lhs.false16
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2929, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7077
  br label %cond.end, !dbg !7077

cond.false:                                       ; preds = %lor.lhs.false16, %lor.lhs.false12, %lor.lhs.false8, %if.end
  br label %cond.end, !dbg !7077

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7077
  %14 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7078
  %tobool = icmp ne %struct.VEC_int_heap* %14, null, !dbg !7078
  br i1 %tobool, label %cond.true20, label %cond.false21, !dbg !7078

cond.true20:                                      ; preds = %cond.end
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7078
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %15, i32 0, i32 0, !dbg !7078
  br label %cond.end22, !dbg !7078

cond.false21:                                     ; preds = %cond.end
  br label %cond.end22, !dbg !7078

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi %struct.VEC_int_base* [ %base, %cond.true20 ], [ null, %cond.false21 ], !dbg !7078
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7078
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7078
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !7078
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !7078
  %rt_int27 = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !7078
  %17 = load i32, i32* %rt_int27, align 8, !dbg !7078
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond23, i32 %17), !dbg !7078
  %cmp28 = icmp sgt i32 %call, 0, !dbg !7080
  br i1 %cmp28, label %if.then29, label %if.end86, !dbg !7081

if.then29:                                        ; preds = %cond.end22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7082
  call void @free_first_time_insn_data(%struct.rtx_def* %18), !dbg !7084
  %19 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7085
  %tobool30 = icmp ne %struct.VEC_sel_insn_data_def_heap* %19, null, !dbg !7085
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !7085

cond.true31:                                      ; preds = %if.then29
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7085
  %base32 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %20, i32 0, i32 0, !dbg !7085
  br label %cond.end34, !dbg !7085

cond.false33:                                     ; preds = %if.then29
  br label %cond.end34, !dbg !7085

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_sel_insn_data_def_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !7085
  %21 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7085
  %tobool36 = icmp ne %struct.VEC_int_heap* %21, null, !dbg !7085
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !7085

cond.true37:                                      ; preds = %cond.end34
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7085
  %base38 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %22, i32 0, i32 0, !dbg !7085
  br label %cond.end40, !dbg !7085

cond.false39:                                     ; preds = %cond.end34
  br label %cond.end40, !dbg !7085

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_int_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !7085
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7085
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7085
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !7085
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !7085
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !7085
  %24 = load i32, i32* %rt_int45, align 8, !dbg !7085
  %call46 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond41, i32 %24), !dbg !7085
  %call47 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond35, i32 %call46), !dbg !7085
  %ws_level = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call47, i32 0, i32 1, !dbg !7085
  store i32 0, i32* %ws_level, align 8, !dbg !7086
  %25 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7087
  %tobool48 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %25, null, !dbg !7087
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !7087

cond.true49:                                      ; preds = %cond.end40
  %26 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7087
  %base50 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %26, i32 0, i32 0, !dbg !7087
  br label %cond.end52, !dbg !7087

cond.false51:                                     ; preds = %cond.end40
  br label %cond.end52, !dbg !7087

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !7087
  %27 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7087
  %tobool54 = icmp ne %struct.VEC_int_heap* %27, null, !dbg !7087
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !7087

cond.true55:                                      ; preds = %cond.end52
  %28 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7087
  %base56 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %28, i32 0, i32 0, !dbg !7087
  br label %cond.end58, !dbg !7087

cond.false57:                                     ; preds = %cond.end52
  br label %cond.end58, !dbg !7087

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_int_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !7087
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7087
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !7087
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !7087
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !7087
  %rt_int63 = bitcast %union.rtunion_def* %arrayidx62 to i32*, !dbg !7087
  %30 = load i32, i32* %rt_int63, align 8, !dbg !7087
  %call64 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond59, i32 %30), !dbg !7087
  %call65 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond53, i32 %call64), !dbg !7087
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call65, i32 0, i32 7, !dbg !7087
  %bf.load66 = load i8, i8* %cant_move, align 8, !dbg !7088
  %bf.clear67 = and i8 %bf.load66, -2, !dbg !7088
  store i8 %bf.clear67, i8* %cant_move, align 8, !dbg !7088
  %31 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7089
  %tobool68 = icmp ne %struct.VEC_sel_insn_data_def_heap* %31, null, !dbg !7089
  br i1 %tobool68, label %cond.true69, label %cond.false71, !dbg !7089

cond.true69:                                      ; preds = %cond.end58
  %32 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7089
  %base70 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %32, i32 0, i32 0, !dbg !7089
  br label %cond.end72, !dbg !7089

cond.false71:                                     ; preds = %cond.end58
  br label %cond.end72, !dbg !7089

cond.end72:                                       ; preds = %cond.false71, %cond.true69
  %cond73 = phi %struct.VEC_sel_insn_data_def_base* [ %base70, %cond.true69 ], [ null, %cond.false71 ], !dbg !7089
  %33 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7089
  %tobool74 = icmp ne %struct.VEC_int_heap* %33, null, !dbg !7089
  br i1 %tobool74, label %cond.true75, label %cond.false77, !dbg !7089

cond.true75:                                      ; preds = %cond.end72
  %34 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7089
  %base76 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %34, i32 0, i32 0, !dbg !7089
  br label %cond.end78, !dbg !7089

cond.false77:                                     ; preds = %cond.end72
  br label %cond.end78, !dbg !7089

cond.end78:                                       ; preds = %cond.false77, %cond.true75
  %cond79 = phi %struct.VEC_int_base* [ %base76, %cond.true75 ], [ null, %cond.false77 ], !dbg !7089
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7089
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !7089
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !7089
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !7089
  %rt_int83 = bitcast %union.rtunion_def* %arrayidx82 to i32*, !dbg !7089
  %36 = load i32, i32* %rt_int83, align 8, !dbg !7089
  %call84 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond79, i32 %36), !dbg !7089
  %call85 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond73, i32 %call84), !dbg !7089
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call85, i32 0, i32 0, !dbg !7089
  call void @clear_expr(%struct._expr* %expr), !dbg !7090
  br label %if.end86, !dbg !7091

if.end86:                                         ; preds = %if.then, %cond.end78, %cond.end22
  ret void, !dbg !7092
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !7093 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !7097, metadata !DIExpression()), !dbg !7098
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7099
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !7099
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !7099
  br i1 %tobool, label %if.then, label %if.end, !dbg !7098

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7099
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !7099
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !7099
  call void @free(i8* %4), !dbg !7099
  br label %if.end, !dbg !7099

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !7098
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !7098
  ret void, !dbg !7098
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_insns() #0 !dbg !7101 {
entry:
  %i = alloca i32, align 4
  %sid_entry = alloca %struct._sel_insn_data*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7102, metadata !DIExpression()), !dbg !7103
  store i32 0, i32* %i, align 4, !dbg !7104
  br label %for.cond, !dbg !7106

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7107
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7109
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !7109
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7109

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7109
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %2, i32 0, i32 0, !dbg !7109
  br label %cond.end, !dbg !7109

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !7109

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7109
  %call = call i32 @VEC_sel_insn_data_def_base_length(%struct.VEC_sel_insn_data_def_base* %cond), !dbg !7109
  %cmp = icmp ult i32 %0, %call, !dbg !7110
  br i1 %cmp, label %for.body, label %for.end, !dbg !7111

for.body:                                         ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct._sel_insn_data** %sid_entry, metadata !7112, metadata !DIExpression()), !dbg !7114
  %3 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7115
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %3, null, !dbg !7115
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7115

cond.true2:                                       ; preds = %for.body
  %4 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7115
  %base3 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %4, i32 0, i32 0, !dbg !7115
  br label %cond.end5, !dbg !7115

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !7115

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7115
  %5 = load i32, i32* %i, align 4, !dbg !7115
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond6, i32 %5), !dbg !7115
  store %struct._sel_insn_data* %call7, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7114
  %6 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7116
  %live = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %6, i32 0, i32 3, !dbg !7118
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live, align 8, !dbg !7118
  %tobool8 = icmp ne %struct.bitmap_head_def* %7, null, !dbg !7116
  br i1 %tobool8, label %if.then, label %if.end, !dbg !7119

if.then:                                          ; preds = %cond.end5
  %8 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7120
  %live9 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %8, i32 0, i32 3, !dbg !7121
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live9, align 8, !dbg !7121
  call void @return_regset_to_pool(%struct.bitmap_head_def* %9), !dbg !7122
  br label %if.end, !dbg !7122

if.end:                                           ; preds = %if.then, %cond.end5
  %10 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7123
  %analyzed_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %10, i32 0, i32 4, !dbg !7125
  %11 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %analyzed_deps, align 8, !dbg !7125
  %tobool10 = icmp ne %struct.bitmap_head_def* %11, null, !dbg !7123
  br i1 %tobool10, label %if.then11, label %if.end15, !dbg !7126

if.then11:                                        ; preds = %if.end
  %12 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7127
  %analyzed_deps12 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %12, i32 0, i32 4, !dbg !7127
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %analyzed_deps12, align 8, !dbg !7127
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %13), !dbg !7127
  %14 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7127
  %analyzed_deps13 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %14, i32 0, i32 4, !dbg !7127
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %analyzed_deps13, align 8, !dbg !7127
  %15 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7129
  %found_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %15, i32 0, i32 5, !dbg !7129
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %found_deps, align 8, !dbg !7129
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %16), !dbg !7129
  %17 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7129
  %found_deps14 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %17, i32 0, i32 5, !dbg !7129
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %found_deps14, align 8, !dbg !7129
  %18 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7130
  %transformed_insns = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %18, i32 0, i32 7, !dbg !7131
  %19 = load %struct.htab*, %struct.htab** %transformed_insns, align 8, !dbg !7131
  call void @htab_delete(%struct.htab* %19), !dbg !7132
  %20 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7133
  %deps_context = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %20, i32 0, i32 8, !dbg !7134
  call void @free_deps(%struct.deps* %deps_context), !dbg !7135
  br label %if.end15, !dbg !7136

if.end15:                                         ; preds = %if.then11, %if.end
  %21 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7137
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %21, i32 0, i32 0, !dbg !7137
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 0, !dbg !7137
  %22 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !7137
  %tobool16 = icmp ne %struct.vinsn_def* %22, null, !dbg !7137
  br i1 %tobool16, label %if.then17, label %if.end26, !dbg !7139

if.then17:                                        ; preds = %if.end15
  %23 = load %struct._sel_insn_data*, %struct._sel_insn_data** %sid_entry, align 8, !dbg !7140
  %expr18 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %23, i32 0, i32 0, !dbg !7142
  call void @clear_expr(%struct._expr* %expr18), !dbg !7143
  %24 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7144
  %tobool19 = icmp ne %struct.VEC_haifa_deps_insn_data_def_heap* %24, null, !dbg !7144
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !7144

cond.true20:                                      ; preds = %if.then17
  %25 = load %struct.VEC_haifa_deps_insn_data_def_heap*, %struct.VEC_haifa_deps_insn_data_def_heap** @h_d_i_d, align 8, !dbg !7144
  %base21 = getelementptr inbounds %struct.VEC_haifa_deps_insn_data_def_heap, %struct.VEC_haifa_deps_insn_data_def_heap* %25, i32 0, i32 0, !dbg !7144
  br label %cond.end23, !dbg !7144

cond.false22:                                     ; preds = %if.then17
  br label %cond.end23, !dbg !7144

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_haifa_deps_insn_data_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !7144
  %26 = load i32, i32* %i, align 4, !dbg !7144
  %call25 = call %struct._haifa_deps_insn_data* @VEC_haifa_deps_insn_data_def_base_index(%struct.VEC_haifa_deps_insn_data_def_base* %cond24, i32 %26), !dbg !7144
  %cant_move = getelementptr inbounds %struct._haifa_deps_insn_data, %struct._haifa_deps_insn_data* %call25, i32 0, i32 7, !dbg !7144
  %bf.load = load i8, i8* %cant_move, align 8, !dbg !7145
  %bf.clear = and i8 %bf.load, -2, !dbg !7145
  store i8 %bf.clear, i8* %cant_move, align 8, !dbg !7145
  br label %if.end26, !dbg !7146

if.end26:                                         ; preds = %cond.end23, %if.end15
  br label %for.inc, !dbg !7147

for.inc:                                          ; preds = %if.end26
  %27 = load i32, i32* %i, align 4, !dbg !7148
  %inc = add i32 %27, 1, !dbg !7148
  store i32 %inc, i32* %i, align 4, !dbg !7148
  br label %for.cond, !dbg !7149, !llvm.loop !7150

for.end:                                          ; preds = %cond.end
  call void @VEC_sel_insn_data_def_heap_free(%struct.VEC_sel_insn_data_def_heap** @s_i_d), !dbg !7152
  ret void, !dbg !7153
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_mark_hard_insn(%struct.rtx_def* %insn) #0 !dbg !7154 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7155, metadata !DIExpression()), !dbg !7156
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7157, metadata !DIExpression()), !dbg !7158
  %0 = load %struct.deps*, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !7159
  %tobool = icmp ne %struct.deps* %0, null, !dbg !7161
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7162

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !7163
  %tobool1 = icmp ne %struct.rtx_def* %1, null, !dbg !7164
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7165

if.then:                                          ; preds = %lor.lhs.false, %entry
  br label %for.end, !dbg !7166

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7167
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !7167
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %3, i32 0, i32 0, !dbg !7167
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !7167
  %cmp = icmp eq %struct.rtx_def* %2, %4, !dbg !7167
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7167

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3173, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7167
  br label %cond.end, !dbg !7167

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7167

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7167
  %5 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !7168
  %cmp2 = icmp eq i32 %5, 0, !dbg !7168
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !7168

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3174, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7168
  br label %cond.end5, !dbg !7168

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7168

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !7168
  store i32 0, i32* %i, align 4, !dbg !7169
  br label %for.cond, !dbg !7171

for.cond:                                         ; preds = %for.inc, %cond.end5
  %6 = load i32, i32* %i, align 4, !dbg !7172
  %cmp7 = icmp slt i32 %6, 3, !dbg !7174
  br i1 %cmp7, label %for.body, label %for.end, !dbg !7175

for.body:                                         ; preds = %for.cond
  %7 = load i32, i32* %i, align 4, !dbg !7176
  %idxprom = sext i32 %7 to i64, !dbg !7177
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom, !dbg !7177
  %8 = load i32, i32* %arrayidx, align 4, !dbg !7178
  %and = and i32 %8, -16777216, !dbg !7178
  store i32 %and, i32* %arrayidx, align 4, !dbg !7178
  br label %for.inc, !dbg !7177

for.inc:                                          ; preds = %for.body
  %9 = load i32, i32* %i, align 4, !dbg !7179
  %inc = add nsw i32 %9, 1, !dbg !7179
  store i32 %inc, i32* %i, align 4, !dbg !7179
  br label %for.cond, !dbg !7180, !llvm.loop !7181

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !7183
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_clear_has_dependence() #0 !dbg !7184 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7185, metadata !DIExpression()), !dbg !7186
  store i32 0, i32* %i, align 4, !dbg !7187
  br label %for.cond, !dbg !7189

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7190
  %cmp = icmp slt i32 %0, 3, !dbg !7192
  br i1 %cmp, label %for.body, label %for.end, !dbg !7193

for.body:                                         ; preds = %for.cond
  %1 = load i32, i32* %i, align 4, !dbg !7194
  %idxprom = sext i32 %1 to i64, !dbg !7195
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom, !dbg !7195
  store i32 0, i32* %arrayidx, align 4, !dbg !7196
  br label %for.inc, !dbg !7195

for.inc:                                          ; preds = %for.body
  %2 = load i32, i32* %i, align 4, !dbg !7197
  %inc = add nsw i32 %2, 1, !dbg !7197
  store i32 %inc, i32* %i, align 4, !dbg !7197
  br label %for.cond, !dbg !7198, !llvm.loop !7199

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7201
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @has_dependence_p(%struct._expr* %expr, %struct.rtx_def* %pred, i32** %has_dep_pp) #0 !dbg !7202 {
entry:
  %retval = alloca i32, align 4
  %expr.addr = alloca %struct._expr*, align 8
  %pred.addr = alloca %struct.rtx_def*, align 8
  %has_dep_pp.addr = alloca i32**, align 8
  %i = alloca i32, align 4
  %ds = alloca i32, align 4
  %dc = alloca %struct.deps*, align 8
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !7207, metadata !DIExpression()), !dbg !7208
  store %struct.rtx_def* %pred, %struct.rtx_def** %pred.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pred.addr, metadata !7209, metadata !DIExpression()), !dbg !7210
  store i32** %has_dep_pp, i32*** %has_dep_pp.addr, align 8
  call void @llvm.dbg.declare(metadata i32*** %has_dep_pp.addr, metadata !7211, metadata !DIExpression()), !dbg !7212
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7213, metadata !DIExpression()), !dbg !7214
  call void @llvm.dbg.declare(metadata i32* %ds, metadata !7215, metadata !DIExpression()), !dbg !7216
  call void @llvm.dbg.declare(metadata %struct.deps** %dc, metadata !7217, metadata !DIExpression()), !dbg !7218
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7219
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !7219
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7219

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7219
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7219
  br label %cond.end, !dbg !7219

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7219

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7219
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7219
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7219
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7219

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7219
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7219
  br label %cond.end5, !dbg !7219

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7219

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7219
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pred.addr, align 8, !dbg !7219
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7219
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7219
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7219
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7219
  %5 = load i32, i32* %rt_int, align 8, !dbg !7219
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !7219
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !7219
  %expr8 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 0, !dbg !7219
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %expr8, i32 0, i32 0, !dbg !7219
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !7219
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 1, !dbg !7219
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !7219
  %7 = load i32, i32* %type, align 8, !dbg !7219
  %cmp = icmp eq i32 %7, 36, !dbg !7219
  br i1 %cmp, label %if.then, label %if.end, !dbg !7221

if.then:                                          ; preds = %cond.end5
  store i32 0, i32* %retval, align 4, !dbg !7222
  br label %return, !dbg !7222

if.end:                                           ; preds = %cond.end5
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7223
  %tobool9 = icmp ne %struct.VEC_sel_insn_data_def_heap* %8, null, !dbg !7223
  br i1 %tobool9, label %cond.true10, label %cond.false12, !dbg !7223

cond.true10:                                      ; preds = %if.end
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7223
  %base11 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %9, i32 0, i32 0, !dbg !7223
  br label %cond.end13, !dbg !7223

cond.false12:                                     ; preds = %if.end
  br label %cond.end13, !dbg !7223

cond.end13:                                       ; preds = %cond.false12, %cond.true10
  %cond14 = phi %struct.VEC_sel_insn_data_def_base* [ %base11, %cond.true10 ], [ null, %cond.false12 ], !dbg !7223
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7223
  %tobool15 = icmp ne %struct.VEC_int_heap* %10, null, !dbg !7223
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !7223

cond.true16:                                      ; preds = %cond.end13
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7223
  %base17 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %11, i32 0, i32 0, !dbg !7223
  br label %cond.end19, !dbg !7223

cond.false18:                                     ; preds = %cond.end13
  br label %cond.end19, !dbg !7223

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_int_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !7223
  %12 = load %struct.rtx_def*, %struct.rtx_def** %pred.addr, align 8, !dbg !7223
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7223
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !7223
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 0, !dbg !7223
  %rt_int24 = bitcast %union.rtunion_def* %arrayidx23 to i32*, !dbg !7223
  %13 = load i32, i32* %rt_int24, align 8, !dbg !7223
  %call25 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond20, i32 %13), !dbg !7223
  %call26 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond14, i32 %call25), !dbg !7223
  %deps_context = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call26, i32 0, i32 8, !dbg !7223
  store %struct.deps* %deps_context, %struct.deps** %dc, align 8, !dbg !7224
  %14 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7225
  %reg_last = getelementptr inbounds %struct.deps, %struct.deps* %14, i32 0, i32 14, !dbg !7227
  %15 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !7227
  %cmp27 = icmp eq %struct.deps_reg* %15, null, !dbg !7228
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !7229

if.then28:                                        ; preds = %cond.end19
  %16 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7230
  call void @init_deps_reg_last(%struct.deps* %16), !dbg !7231
  br label %if.end29, !dbg !7231

if.end29:                                         ; preds = %if.then28, %cond.end19
  %17 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7232
  %readonly = getelementptr inbounds %struct.deps, %struct.deps* %17, i32 0, i32 18, !dbg !7234
  %bf.load = load i8, i8* %readonly, align 4, !dbg !7234
  %bf.clear = and i8 %bf.load, 1, !dbg !7234
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7234
  %tobool30 = icmp ne i32 %bf.cast, 0, !dbg !7232
  br i1 %tobool30, label %if.end35, label %if.then31, !dbg !7235

if.then31:                                        ; preds = %if.end29
  store %struct.rtx_def* null, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !7236
  %18 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7238
  %19 = load %struct.rtx_def*, %struct.rtx_def** %pred.addr, align 8, !dbg !7239
  call void @advance_deps_context(%struct.deps* %18, %struct.rtx_def* %19), !dbg !7240
  %20 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7241
  %readonly32 = getelementptr inbounds %struct.deps, %struct.deps* %20, i32 0, i32 18, !dbg !7242
  %bf.load33 = load i8, i8* %readonly32, align 4, !dbg !7243
  %bf.clear34 = and i8 %bf.load33, -2, !dbg !7243
  %bf.set = or i8 %bf.clear34, 1, !dbg !7243
  store i8 %bf.set, i8* %readonly32, align 4, !dbg !7243
  br label %if.end35, !dbg !7244

if.end35:                                         ; preds = %if.then31, %if.end29
  store i32 3, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !7245
  %21 = load %struct.rtx_def*, %struct.rtx_def** %pred.addr, align 8, !dbg !7246
  store %struct.rtx_def* %21, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !7247
  %22 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7248
  %vinsn36 = getelementptr inbounds %struct._expr, %struct._expr* %22, i32 0, i32 0, !dbg !7248
  %23 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn36, align 8, !dbg !7248
  store %struct.vinsn_def* %23, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !7249
  %24 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7250
  store %struct.deps* %24, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !7251
  call void @sel_clear_has_dependence(), !dbg !7252
  call void @setup_has_dependence_sched_deps_info(), !dbg !7253
  %25 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7254
  %26 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7255
  %vinsn37 = getelementptr inbounds %struct._expr, %struct._expr* %26, i32 0, i32 0, !dbg !7255
  %27 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn37, align 8, !dbg !7255
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %27, i32 0, i32 0, !dbg !7255
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !7255
  call void @deps_analyze_insn(%struct.deps* %25, %struct.rtx_def* %28), !dbg !7256
  store %struct.deps* null, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !7257
  %29 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7258
  %last_reg_pending_barrier = getelementptr inbounds %struct.deps, %struct.deps* %29, i32 0, i32 17, !dbg !7260
  %30 = load i32, i32* %last_reg_pending_barrier, align 8, !dbg !7260
  %cmp38 = icmp eq i32 %30, 2, !dbg !7261
  br i1 %cmp38, label %if.then39, label %if.else, !dbg !7262

if.then39:                                        ; preds = %if.end35
  store i32 16777216, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4, i64 0), align 8, !dbg !7263
  br label %if.end44, !dbg !7264

if.else:                                          ; preds = %if.end35
  %31 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !7265
  %last_reg_pending_barrier40 = getelementptr inbounds %struct.deps, %struct.deps* %31, i32 0, i32 17, !dbg !7267
  %32 = load i32, i32* %last_reg_pending_barrier40, align 8, !dbg !7267
  %cmp41 = icmp eq i32 %32, 1, !dbg !7268
  br i1 %cmp41, label %if.then42, label %if.end43, !dbg !7269

if.then42:                                        ; preds = %if.else
  store i32 67108864, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4, i64 0), align 8, !dbg !7270
  br label %if.end43, !dbg !7271

if.end43:                                         ; preds = %if.then42, %if.else
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then39
  %33 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7272
  %vinsn45 = getelementptr inbounds %struct._expr, %struct._expr* %33, i32 0, i32 0, !dbg !7272
  %34 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn45, align 8, !dbg !7272
  %id46 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %34, i32 0, i32 1, !dbg !7272
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id46, i32 0, i32 1, !dbg !7272
  %35 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !7272
  %tobool47 = icmp ne %struct.rtx_def* %35, null, !dbg !7272
  br i1 %tobool47, label %land.lhs.true, label %if.end58, !dbg !7274

land.lhs.true:                                    ; preds = %if.end44
  %36 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7275
  %vinsn48 = getelementptr inbounds %struct._expr, %struct._expr* %36, i32 0, i32 0, !dbg !7275
  %37 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn48, align 8, !dbg !7275
  %id49 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %37, i32 0, i32 1, !dbg !7275
  %lhs50 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id49, i32 0, i32 1, !dbg !7275
  %38 = load %struct.rtx_def*, %struct.rtx_def** %lhs50, align 8, !dbg !7275
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !7275
  %bf.load51 = load i32, i32* %39, align 8, !dbg !7275
  %bf.clear52 = and i32 %bf.load51, 65535, !dbg !7275
  %cmp53 = icmp eq i32 %bf.clear52, 43, !dbg !7275
  br i1 %cmp53, label %land.lhs.true54, label %if.end58, !dbg !7276

land.lhs.true54:                                  ; preds = %land.lhs.true
  %40 = load %struct.rtx_def*, %struct.rtx_def** %pred.addr, align 8, !dbg !7277
  %call55 = call zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %40), !dbg !7278
  %conv = zext i8 %call55 to i32, !dbg !7278
  %tobool56 = icmp ne i32 %conv, 0, !dbg !7278
  br i1 %tobool56, label %if.then57, label %if.end58, !dbg !7279

if.then57:                                        ; preds = %land.lhs.true54
  store i32 67108864, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4, i64 0), align 8, !dbg !7280
  br label %if.end58, !dbg !7281

if.end58:                                         ; preds = %if.then57, %land.lhs.true54, %land.lhs.true, %if.end44
  %41 = load i32**, i32*** %has_dep_pp.addr, align 8, !dbg !7282
  store i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4, i64 0), i32** %41, align 8, !dbg !7283
  store i32 0, i32* %ds, align 4, !dbg !7284
  store i32 0, i32* %i, align 4, !dbg !7285
  br label %for.cond, !dbg !7287

for.cond:                                         ; preds = %for.inc, %if.end58
  %42 = load i32, i32* %i, align 4, !dbg !7288
  %cmp59 = icmp slt i32 %42, 3, !dbg !7290
  br i1 %cmp59, label %for.body, label %for.end, !dbg !7291

for.body:                                         ; preds = %for.cond
  %43 = load i32, i32* %ds, align 4, !dbg !7292
  %44 = load i32, i32* %i, align 4, !dbg !7293
  %idxprom = sext i32 %44 to i64, !dbg !7294
  %arrayidx61 = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom, !dbg !7294
  %45 = load i32, i32* %arrayidx61, align 4, !dbg !7294
  %call62 = call i32 @ds_full_merge(i32 %43, i32 %45, %struct.rtx_def* null, %struct.rtx_def* null), !dbg !7295
  store i32 %call62, i32* %ds, align 4, !dbg !7296
  br label %for.inc, !dbg !7297

for.inc:                                          ; preds = %for.body
  %46 = load i32, i32* %i, align 4, !dbg !7298
  %inc = add nsw i32 %46, 1, !dbg !7298
  store i32 %inc, i32* %i, align 4, !dbg !7298
  br label %for.cond, !dbg !7299, !llvm.loop !7300

for.end:                                          ; preds = %for.cond
  %47 = load i32, i32* %ds, align 4, !dbg !7302
  store i32 %47, i32* %retval, align 4, !dbg !7303
  br label %return, !dbg !7303

return:                                           ; preds = %for.end, %if.then
  %48 = load i32, i32* %retval, align 4, !dbg !7304
  ret i32 %48, !dbg !7304
}

declare dso_local void @init_deps_reg_last(%struct.deps*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_has_dependence_sched_deps_info() #0 !dbg !7305 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.sched_deps_info_def* @has_dependence_sched_deps_info to i8*), i8* align 8 bitcast (%struct.sched_deps_info_def* @const_has_dependence_sched_deps_info to i8*), i64 104, i1 false), !dbg !7306
  %0 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !7307
  %cmp = icmp ne %struct.spec_info_def* %0, null, !dbg !7309
  br i1 %cmp, label %if.then, label %if.end, !dbg !7310

if.then:                                          ; preds = %entry
  %bf.load = load i8, i8* getelementptr inbounds (%struct.sched_deps_info_def, %struct.sched_deps_info_def* @has_dependence_sched_deps_info, i32 0, i32 12), align 8, !dbg !7311
  %bf.clear = and i8 %bf.load, -5, !dbg !7311
  %bf.set = or i8 %bf.clear, 4, !dbg !7311
  store i8 %bf.set, i8* getelementptr inbounds (%struct.sched_deps_info_def, %struct.sched_deps_info_def* @has_dependence_sched_deps_info, i32 0, i32 12), align 8, !dbg !7311
  br label %if.end, !dbg !7312

if.end:                                           ; preds = %if.then, %entry
  store %struct.sched_deps_info_def* @has_dependence_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7313
  ret void, !dbg !7314
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_insn_is_speculation_check(%struct.rtx_def* %insn) #0 !dbg !7315 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7316, metadata !DIExpression()), !dbg !7317
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7318
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !7318
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7319

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7320
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !7320
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !7320

cond.true:                                        ; preds = %land.rhs
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7320
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %2, i32 0, i32 0, !dbg !7320
  br label %cond.end, !dbg !7320

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !7320

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7320
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7320
  %tobool2 = icmp ne %struct.VEC_int_heap* %3, null, !dbg !7320
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !7320

cond.true3:                                       ; preds = %cond.end
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7320
  %base4 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !7320
  br label %cond.end6, !dbg !7320

cond.false5:                                      ; preds = %cond.end
  br label %cond.end6, !dbg !7320

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_int_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !7320
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7320
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7320
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7320
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7320
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7320
  %6 = load i32, i32* %rt_int, align 8, !dbg !7320
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond7, i32 %6), !dbg !7320
  %call8 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !7320
  %spec_checked_ds = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call8, i32 0, i32 12, !dbg !7320
  %7 = load i32, i32* %spec_checked_ds, align 8, !dbg !7320
  %tobool9 = icmp ne i32 %7, 0, !dbg !7321
  %lnot = xor i1 %tobool9, true, !dbg !7321
  %lnot10 = xor i1 %lnot, true, !dbg !7322
  br label %land.end

land.end:                                         ; preds = %cond.end6, %entry
  %8 = phi i1 [ false, %entry ], [ %lnot10, %cond.end6 ], !dbg !7323
  %land.ext = zext i1 %8 to i32, !dbg !7319
  %conv = trunc i32 %land.ext to i8, !dbg !7318
  ret i8 %conv, !dbg !7324
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @tick_check_p(%struct._expr* %expr, %struct.deps* %dc, %struct._fence* %fence) #0 !dbg !7325 {
entry:
  %expr.addr = alloca %struct._expr*, align 8
  %dc.addr = alloca %struct.deps*, align 8
  %fence.addr = alloca %struct._fence*, align 8
  %cycles_left = alloca i32, align 4
  store %struct._expr* %expr, %struct._expr** %expr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._expr** %expr.addr, metadata !7328, metadata !DIExpression()), !dbg !7329
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !7330, metadata !DIExpression()), !dbg !7331
  store %struct._fence* %fence, %struct._fence** %fence.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %fence.addr, metadata !7332, metadata !DIExpression()), !dbg !7333
  call void @llvm.dbg.declare(metadata i32* %cycles_left, metadata !7334, metadata !DIExpression()), !dbg !7335
  %0 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7336
  store %struct._expr* %0, %struct._expr** getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 0), align 8, !dbg !7337
  store i32 0, i32* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 1), align 8, !dbg !7338
  store i8 0, i8* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 2), align 4, !dbg !7339
  store %struct.sched_deps_info_def* @tick_check_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !7340
  %1 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !7341
  %readonly = getelementptr inbounds %struct.deps, %struct.deps* %1, i32 0, i32 18, !dbg !7341
  %bf.load = load i8, i8* %readonly, align 4, !dbg !7341
  %bf.clear = and i8 %bf.load, 1, !dbg !7341
  %bf.cast = zext i8 %bf.clear to i32, !dbg !7341
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !7341
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7341

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3409, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7341
  br label %cond.end, !dbg !7341

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7341

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7341
  %2 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !7342
  %readonly1 = getelementptr inbounds %struct.deps, %struct.deps* %2, i32 0, i32 18, !dbg !7343
  %bf.load2 = load i8, i8* %readonly1, align 4, !dbg !7344
  %bf.clear3 = and i8 %bf.load2, -2, !dbg !7344
  %bf.set = or i8 %bf.clear3, 1, !dbg !7344
  store i8 %bf.set, i8* %readonly1, align 4, !dbg !7344
  %3 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !7345
  %4 = load %struct._expr*, %struct._expr** %expr.addr, align 8, !dbg !7346
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %4, i32 0, i32 0, !dbg !7346
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !7346
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %5, i32 0, i32 0, !dbg !7346
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !7346
  call void @deps_analyze_insn(%struct.deps* %3, %struct.rtx_def* %6), !dbg !7347
  %7 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !7348
  %readonly4 = getelementptr inbounds %struct.deps, %struct.deps* %7, i32 0, i32 18, !dbg !7349
  %bf.load5 = load i8, i8* %readonly4, align 4, !dbg !7350
  %bf.clear6 = and i8 %bf.load5, -2, !dbg !7350
  store i8 %bf.clear6, i8* %readonly4, align 4, !dbg !7350
  %8 = load i32, i32* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 1), align 8, !dbg !7351
  %9 = load %struct._fence*, %struct._fence** %fence.addr, align 8, !dbg !7352
  %cycle = getelementptr inbounds %struct._fence, %struct._fence* %9, i32 0, i32 2, !dbg !7352
  %10 = load i32, i32* %cycle, align 8, !dbg !7352
  %sub = sub nsw i32 %8, %10, !dbg !7353
  store i32 %sub, i32* %cycles_left, align 4, !dbg !7354
  %11 = load i32, i32* %cycles_left, align 4, !dbg !7355
  %cmp = icmp sge i32 %11, 0, !dbg !7356
  br i1 %cmp, label %cond.true7, label %cond.false8, !dbg !7355

cond.true7:                                       ; preds = %cond.end
  %12 = load i32, i32* %cycles_left, align 4, !dbg !7357
  br label %cond.end9, !dbg !7355

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !7355

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ %12, %cond.true7 ], [ 0, %cond.false8 ], !dbg !7355
  ret i32 %cond10, !dbg !7358
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @lhs_of_insn_equals_to_dest_p(%struct.rtx_def* %insn, %struct.rtx_def* %dest) #0 !dbg !7359 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dest.addr = alloca %struct.rtx_def*, align 8
  %lhs = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7362, metadata !DIExpression()), !dbg !7363
  store %struct.rtx_def* %dest, %struct.rtx_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest.addr, metadata !7364, metadata !DIExpression()), !dbg !7365
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs, metadata !7366, metadata !DIExpression()), !dbg !7367
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7368
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !7368
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7368

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7368
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7368
  br label %cond.end, !dbg !7368

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7368

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7368
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7368
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7368
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7368

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7368
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7368
  br label %cond.end5, !dbg !7368

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7368

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7368
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7368
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7368
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7368
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7368
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7368
  %5 = load i32, i32* %rt_int, align 8, !dbg !7368
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !7368
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !7368
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 0, !dbg !7368
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 0, !dbg !7368
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !7368
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 1, !dbg !7368
  %lhs8 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 1, !dbg !7368
  %7 = load %struct.rtx_def*, %struct.rtx_def** %lhs8, align 8, !dbg !7368
  store %struct.rtx_def* %7, %struct.rtx_def** %lhs, align 8, !dbg !7367
  %8 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !7369
  %cmp = icmp eq %struct.rtx_def* %8, null, !dbg !7371
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !7372

lor.lhs.false:                                    ; preds = %cond.end5
  %9 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7373
  %cmp9 = icmp eq %struct.rtx_def* %9, null, !dbg !7374
  br i1 %cmp9, label %if.then, label %if.end, !dbg !7375

if.then:                                          ; preds = %lor.lhs.false, %cond.end5
  store i8 0, i8* %retval, align 1, !dbg !7376
  br label %return, !dbg !7376

if.end:                                           ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !7377
  %11 = load %struct.rtx_def*, %struct.rtx_def** %dest.addr, align 8, !dbg !7378
  %call10 = call i32 @rtx_equal_p(%struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !7379
  %conv = trunc i32 %call10 to i8, !dbg !7379
  store i8 %conv, i8* %retval, align 1, !dbg !7380
  br label %return, !dbg !7380

return:                                           ; preds = %if.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !7381
  ret i8 %12, !dbg !7381
}

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @insn_sid(%struct._sel_insn_data* noalias sret %agg.result, %struct.rtx_def* %insn) #0 !dbg !7382 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7385, metadata !DIExpression()), !dbg !7386
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7387
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !7387
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7387

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7387
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !7387
  br label %cond.end, !dbg !7387

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7387
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7387
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !7387
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !7387

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7387
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !7387
  br label %cond.end5, !dbg !7387

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !7387

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !7387
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7387
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7387
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7387
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7387
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7387
  %5 = load i32, i32* %rt_int, align 8, !dbg !7387
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !7387
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !7387
  %6 = bitcast %struct._sel_insn_data* %agg.result to i8*, !dbg !7388
  %7 = bitcast %struct._sel_insn_data* %call7 to i8*, !dbg !7388
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 320, i1 false), !dbg !7388
  ret void, !dbg !7389
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @get_dest_and_mode(%struct.rtx_def* %insn, %struct.rtx_def** %dst_loc, i32* %mode) #0 !dbg !7390 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %dst_loc.addr = alloca %struct.rtx_def**, align 8
  %mode.addr = alloca i32*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7394, metadata !DIExpression()), !dbg !7395
  store %struct.rtx_def** %dst_loc, %struct.rtx_def*** %dst_loc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %dst_loc.addr, metadata !7396, metadata !DIExpression()), !dbg !7397
  store i32* %mode, i32** %mode.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %mode.addr, metadata !7398, metadata !DIExpression()), !dbg !7399
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !7400, metadata !DIExpression()), !dbg !7401
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7402
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7402
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7402
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !7402
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7402
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7402
  store %struct.rtx_def* %1, %struct.rtx_def** %pat, align 8, !dbg !7401
  %2 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7403
  %tobool = icmp ne %struct.rtx_def** %2, null, !dbg !7403
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !7403

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3458, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7403
  br label %cond.end, !dbg !7403

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7403

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7403
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7404
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !7404
  %bf.load = load i32, i32* %4, align 8, !dbg !7404
  %bf.clear = and i32 %bf.load, 65535, !dbg !7404
  %cmp = icmp eq i32 %bf.clear, 23, !dbg !7404
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !7404

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3459, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7404
  br label %cond.end3, !dbg !7404

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !7404

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !7404
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !7405
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !7405
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !7405
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 0, !dbg !7405
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !7405
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !7405
  %7 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7406
  store %struct.rtx_def* %6, %struct.rtx_def** %7, align 8, !dbg !7407
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7408
  %9 = load %struct.rtx_def*, %struct.rtx_def** %8, align 8, !dbg !7408
  %tobool9 = icmp ne %struct.rtx_def* %9, null, !dbg !7408
  br i1 %tobool9, label %cond.false11, label %cond.true10, !dbg !7408

cond.true10:                                      ; preds = %cond.end3
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7408
  br label %cond.end12, !dbg !7408

cond.false11:                                     ; preds = %cond.end3
  br label %cond.end12, !dbg !7408

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !7408
  %10 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7409
  %11 = load %struct.rtx_def*, %struct.rtx_def** %10, align 8, !dbg !7409
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !7409
  %bf.load14 = load i32, i32* %12, align 8, !dbg !7409
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !7409
  %cmp16 = icmp eq i32 %bf.clear15, 43, !dbg !7409
  br i1 %cmp16, label %cond.false21, label %lor.lhs.false, !dbg !7409

lor.lhs.false:                                    ; preds = %cond.end12
  %13 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7409
  %14 = load %struct.rtx_def*, %struct.rtx_def** %13, align 8, !dbg !7409
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !7409
  %bf.load17 = load i32, i32* %15, align 8, !dbg !7409
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !7409
  %cmp19 = icmp eq i32 %bf.clear18, 37, !dbg !7409
  br i1 %cmp19, label %cond.false21, label %cond.true20, !dbg !7409

cond.true20:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3464, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7409
  br label %cond.end22, !dbg !7409

cond.false21:                                     ; preds = %lor.lhs.false, %cond.end12
  br label %cond.end22, !dbg !7409

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !7409
  %16 = load i32*, i32** %mode.addr, align 8, !dbg !7410
  %tobool24 = icmp ne i32* %16, null, !dbg !7410
  br i1 %tobool24, label %if.then, label %if.end, !dbg !7412

if.then:                                          ; preds = %cond.end22
  %17 = load %struct.rtx_def**, %struct.rtx_def*** %dst_loc.addr, align 8, !dbg !7413
  %18 = load %struct.rtx_def*, %struct.rtx_def** %17, align 8, !dbg !7413
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !7413
  %bf.load25 = load i32, i32* %19, align 8, !dbg !7413
  %bf.lshr = lshr i32 %bf.load25, 16, !dbg !7413
  %bf.clear26 = and i32 %bf.lshr, 255, !dbg !7413
  %20 = load i32*, i32** %mode.addr, align 8, !dbg !7414
  store i32 %bf.clear26, i32* %20, align 4, !dbg !7415
  br label %if.end, !dbg !7416

if.end:                                           ; preds = %if.then, %cond.end22
  ret void, !dbg !7417
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @bookkeeping_can_be_created_if_moved_through_p(%struct.rtx_def* %jump) #0 !dbg !7418 {
entry:
  %retval = alloca i8, align 1
  %jump.addr = alloca %struct.rtx_def*, align 8
  %succ = alloca %struct.rtx_def*, align 8
  %si = alloca %struct.succ_iterator, align 8
  %tmp = alloca %struct.succ_iterator, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !7419, metadata !DIExpression()), !dbg !7420
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !7421, metadata !DIExpression()), !dbg !7422
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !7423, metadata !DIExpression()), !dbg !7424
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7425
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %0, i32 1), !dbg !7425
  %1 = bitcast %struct.succ_iterator* %si to i8*, !dbg !7425
  %2 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !7425
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 64, i1 false), !dbg !7425
  br label %for.cond, !dbg !7425

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7427
  %call = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %3, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !7427
  %tobool = icmp ne i8 %call, 0, !dbg !7425
  br i1 %tobool, label %for.body, label %for.end, !dbg !7425

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !7429
  %call1 = call zeroext i8 @sel_num_cfg_preds_gt_1(%struct.rtx_def* %4), !dbg !7431
  %tobool2 = icmp ne i8 %call1, 0, !dbg !7431
  br i1 %tobool2, label %if.then, label %if.end, !dbg !7432

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !7433
  br label %return, !dbg !7433

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !7434

for.inc:                                          ; preds = %if.end
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !7427
  br label %for.cond, !dbg !7427, !llvm.loop !7435

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !7437
  br label %return, !dbg !7437

return:                                           ; preds = %for.end, %if.then
  %5 = load i8, i8* %retval, align 1, !dbg !7438
  ret i8 %5, !dbg !7438
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_num_cfg_preds_gt_1(%struct.rtx_def* %insn) #0 !dbg !7439 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7440, metadata !DIExpression()), !dbg !7441
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !7442, metadata !DIExpression()), !dbg !7443
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7444
  %call = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %0), !dbg !7446
  %tobool = icmp ne i8 %call, 0, !dbg !7446
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7447

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32*, i32** @block_to_bb, align 8, !dbg !7448
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7448
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !7448
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7448
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7448
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7448
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7448
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !7448
  %4 = load i32, i32* %index, align 8, !dbg !7448
  %add = add nsw i32 %4, 0, !dbg !7448
  %idxprom = sext i32 %add to i64, !dbg !7448
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !7448
  %5 = load i32, i32* %arrayidx1, align 4, !dbg !7448
  %cmp = icmp eq i32 %5, 0, !dbg !7449
  br i1 %cmp, label %if.then, label %if.end, !dbg !7450

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7451
  br label %return, !dbg !7451

if.end:                                           ; preds = %lor.lhs.false
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7452
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !7452
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !7452
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 3, !dbg !7452
  %rt_bb5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.basic_block_def**, !dbg !7452
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb5, align 8, !dbg !7452
  store %struct.basic_block_def* %7, %struct.basic_block_def** %bb, align 8, !dbg !7453
  br label %while.body, !dbg !7454

while.body:                                       ; preds = %if.end, %if.end38
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7455
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !7455
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7455
  %tobool6 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !7455
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !7455

cond.true:                                        ; preds = %while.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7455
  %preds7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 0, !dbg !7455
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds7, align 8, !dbg !7455
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !7455
  br label %cond.end, !dbg !7455

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !7455

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7455
  %call8 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7455
  %cmp9 = icmp ugt i32 %call8, 1, !dbg !7458
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !7459

if.then10:                                        ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !7460
  br label %return, !dbg !7460

if.end11:                                         ; preds = %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7461
  %preds12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 0, !dbg !7461
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds12, align 8, !dbg !7461
  %tobool13 = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !7461
  br i1 %tobool13, label %cond.true14, label %cond.false17, !dbg !7461

cond.true14:                                      ; preds = %if.end11
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7461
  %preds15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 0, !dbg !7461
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds15, align 8, !dbg !7461
  %base16 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !7461
  br label %cond.end18, !dbg !7461

cond.false17:                                     ; preds = %if.end11
  br label %cond.end18, !dbg !7461

cond.end18:                                       ; preds = %cond.false17, %cond.true14
  %cond19 = phi %struct.VEC_edge_base* [ %base16, %cond.true14 ], [ null, %cond.false17 ], !dbg !7461
  %call20 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond19, i32 0), !dbg !7461
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call20, i32 0, i32 1, !dbg !7461
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7461
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7461
  %cmp21 = icmp eq %struct.basic_block_def* %16, %17, !dbg !7461
  br i1 %cmp21, label %cond.false23, label %cond.true22, !dbg !7461

cond.true22:                                      ; preds = %cond.end18
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4632, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7461
  br label %cond.end24, !dbg !7461

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24, !dbg !7461

cond.end24:                                       ; preds = %cond.false23, %cond.true22
  %cond25 = phi i32 [ 0, %cond.true22 ], [ 0, %cond.false23 ], !dbg !7461
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7462
  %preds26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 0, !dbg !7462
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds26, align 8, !dbg !7462
  %tobool27 = icmp ne %struct.VEC_edge_gc* %19, null, !dbg !7462
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !7462

cond.true28:                                      ; preds = %cond.end24
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7462
  %preds29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 0, !dbg !7462
  %21 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds29, align 8, !dbg !7462
  %base30 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %21, i32 0, i32 0, !dbg !7462
  br label %cond.end32, !dbg !7462

cond.false31:                                     ; preds = %cond.end24
  br label %cond.end32, !dbg !7462

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_edge_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !7462
  %call34 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond33, i32 0), !dbg !7462
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call34, i32 0, i32 0, !dbg !7463
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7463
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !7464
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !7465
  %call35 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %23), !dbg !7467
  %tobool36 = icmp ne i8 %call35, 0, !dbg !7467
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !7468

if.then37:                                        ; preds = %cond.end32
  br label %while.end, !dbg !7469

if.end38:                                         ; preds = %cond.end32
  br label %while.body, !dbg !7454, !llvm.loop !7470

while.end:                                        ; preds = %if.then37
  store i8 0, i8* %retval, align 1, !dbg !7472
  br label %return, !dbg !7472

return:                                           ; preds = %while.end, %if.then10, %if.then
  %24 = load i8, i8* %retval, align 1, !dbg !7473
  ret i8 %24, !dbg !7473
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @tidy_control_flow(%struct.basic_block_def* %xbb, i8 zeroext %full_tidying) #0 !dbg !7474 {
entry:
  %retval = alloca i8, align 1
  %xbb.addr = alloca %struct.basic_block_def*, align 8
  %full_tidying.addr = alloca i8, align 1
  %changed = alloca i8, align 1
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %recompute_toporder_p = alloca i8, align 1
  store %struct.basic_block_def* %xbb, %struct.basic_block_def** %xbb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %xbb.addr, metadata !7477, metadata !DIExpression()), !dbg !7478
  store i8 %full_tidying, i8* %full_tidying.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %full_tidying.addr, metadata !7479, metadata !DIExpression()), !dbg !7480
  call void @llvm.dbg.declare(metadata i8* %changed, metadata !7481, metadata !DIExpression()), !dbg !7482
  store i8 1, i8* %changed, align 1, !dbg !7482
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !7483, metadata !DIExpression()), !dbg !7484
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7485, metadata !DIExpression()), !dbg !7486
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7487
  %call = call zeroext i8 @maybe_tidy_empty_bb(%struct.basic_block_def* %0, i8 zeroext 0), !dbg !7488
  store i8 %call, i8* %changed, align 1, !dbg !7489
  %1 = load i8, i8* %changed, align 1, !dbg !7490
  %conv = zext i8 %1 to i32, !dbg !7490
  %tobool = icmp ne i32 %conv, 0, !dbg !7490
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7492

lor.lhs.false:                                    ; preds = %entry
  %2 = load i8, i8* %full_tidying.addr, align 1, !dbg !7493
  %tobool1 = icmp ne i8 %2, 0, !dbg !7493
  br i1 %tobool1, label %if.end, label %if.then, !dbg !7494

if.then:                                          ; preds = %lor.lhs.false, %entry
  %3 = load i8, i8* %changed, align 1, !dbg !7495
  store i8 %3, i8* %retval, align 1, !dbg !7496
  br label %return, !dbg !7496

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7497
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !7497
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7497
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7497
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !7497
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7497
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7499
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 6, !dbg !7500
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !7500
  %call2 = call zeroext i8 @jump_leads_only_to_bb_p(%struct.rtx_def* %6, %struct.basic_block_def* %8), !dbg !7501
  %conv3 = zext i8 %call2 to i32, !dbg !7501
  %tobool4 = icmp ne i32 %conv3, 0, !dbg !7501
  br i1 %tobool4, label %land.lhs.true, label %if.end41, !dbg !7502

land.lhs.true:                                    ; preds = %if.end
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7503
  %tobool5 = icmp ne %struct.VEC_sel_insn_data_def_heap* %9, null, !dbg !7503
  br i1 %tobool5, label %cond.true, label %cond.false, !dbg !7503

cond.true:                                        ; preds = %land.lhs.true
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7503
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %10, i32 0, i32 0, !dbg !7503
  br label %cond.end, !dbg !7503

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !7503

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7503
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7503
  %tobool6 = icmp ne %struct.VEC_int_heap* %11, null, !dbg !7503
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !7503

cond.true7:                                       ; preds = %cond.end
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7503
  %base8 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %12, i32 0, i32 0, !dbg !7503
  br label %cond.end10, !dbg !7503

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !7503

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_int_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !7503
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7503
  %il12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !7503
  %rtl13 = bitcast %union.basic_block_il_dependent* %il12 to %struct.rtl_bb_info**, !dbg !7503
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl13, align 8, !dbg !7503
  %end_14 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !7503
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_14, align 8, !dbg !7503
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7503
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7503
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7503
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7503
  %16 = load i32, i32* %rt_int, align 8, !dbg !7503
  %call15 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond11, i32 %16), !dbg !7503
  %call16 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call15), !dbg !7503
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call16, i32 0, i32 0, !dbg !7503
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 5, !dbg !7503
  %17 = load i32, i32* %sched_times, align 8, !dbg !7503
  %cmp = icmp eq i32 %17, 0, !dbg !7504
  br i1 %cmp, label %land.lhs.true18, label %if.end41, !dbg !7505

land.lhs.true18:                                  ; preds = %cond.end10
  %18 = load %struct._list_node*, %struct._list_node** @fences, align 8, !dbg !7506
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7506
  %il19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !7506
  %rtl20 = bitcast %union.basic_block_il_dependent* %il19 to %struct.rtl_bb_info**, !dbg !7506
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl20, align 8, !dbg !7506
  %end_21 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !7506
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_21, align 8, !dbg !7506
  %call22 = call %struct._fence* @flist_lookup(%struct._list_node* %18, %struct.rtx_def* %21), !dbg !7506
  %cmp23 = icmp ne %struct._fence* %call22, null, !dbg !7506
  br i1 %cmp23, label %if.end41, label %if.then25, !dbg !7507

if.then25:                                        ; preds = %land.lhs.true18
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7508
  %il26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !7508
  %rtl27 = bitcast %union.basic_block_il_dependent* %il26 to %struct.rtl_bb_info**, !dbg !7508
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl27, align 8, !dbg !7508
  %end_28 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !7508
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_28, align 8, !dbg !7508
  %call29 = call zeroext i8 @sel_remove_insn(%struct.rtx_def* %24, i8 zeroext 0, i8 zeroext 0), !dbg !7511
  %tobool30 = icmp ne i8 %call29, 0, !dbg !7511
  br i1 %tobool30, label %if.then31, label %if.end32, !dbg !7512

if.then31:                                        ; preds = %if.then25
  store i8 1, i8* %retval, align 1, !dbg !7513
  br label %return, !dbg !7513

if.end32:                                         ; preds = %if.then25
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7514
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !7514
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7514
  %tobool33 = icmp ne %struct.VEC_edge_gc* %26, null, !dbg !7514
  br i1 %tobool33, label %cond.true34, label %cond.false37, !dbg !7514

cond.true34:                                      ; preds = %if.end32
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7514
  %succs35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 1, !dbg !7514
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs35, align 8, !dbg !7514
  %base36 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %28, i32 0, i32 0, !dbg !7514
  br label %cond.end38, !dbg !7514

cond.false37:                                     ; preds = %if.end32
  br label %cond.end38, !dbg !7514

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi %struct.VEC_edge_base* [ %base36, %cond.true34 ], [ null, %cond.false37 ], !dbg !7514
  %call40 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond39, i32 0), !dbg !7514
  call void @tidy_fallthru_edge(%struct.edge_def* %call40), !dbg !7515
  br label %if.end41, !dbg !7516

if.end41:                                         ; preds = %cond.end38, %land.lhs.true18, %cond.end10, %if.end
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7517
  %call42 = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %29), !dbg !7518
  store %struct.rtx_def* %call42, %struct.rtx_def** %first, align 8, !dbg !7519
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7520
  %call43 = call %struct.rtx_def* @sel_bb_end(%struct.basic_block_def* %30), !dbg !7521
  store %struct.rtx_def* %call43, %struct.rtx_def** %last, align 8, !dbg !7522
  %31 = load i32, i32* @flag_var_tracking_assignments, align 4, !dbg !7523
  %tobool44 = icmp ne i32 %31, 0, !dbg !7523
  br i1 %tobool44, label %if.then45, label %if.end96, !dbg !7525

if.then45:                                        ; preds = %if.end41
  %32 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7526
  %33 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7529
  %cmp46 = icmp ne %struct.rtx_def* %32, %33, !dbg !7530
  br i1 %cmp46, label %land.lhs.true48, label %if.end65, !dbg !7531

land.lhs.true48:                                  ; preds = %if.then45
  %34 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7532
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !7532
  %bf.load = load i32, i32* %35, align 8, !dbg !7532
  %bf.clear = and i32 %bf.load, 65535, !dbg !7532
  %cmp49 = icmp eq i32 %bf.clear, 7, !dbg !7532
  br i1 %cmp49, label %if.then51, label %if.end65, !dbg !7533

if.then51:                                        ; preds = %land.lhs.true48
  br label %do.body, !dbg !7534

do.body:                                          ; preds = %land.end, %if.then51
  %36 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7535
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !7535
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !7535
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 2, !dbg !7535
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !7535
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7535
  store %struct.rtx_def* %37, %struct.rtx_def** %first, align 8, !dbg !7536
  br label %do.cond, !dbg !7537

do.cond:                                          ; preds = %do.body
  %38 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7538
  %39 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7539
  %cmp55 = icmp ne %struct.rtx_def* %38, %39, !dbg !7540
  br i1 %cmp55, label %land.rhs, label %land.end, !dbg !7541

land.rhs:                                         ; preds = %do.cond
  %40 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7542
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !7542
  %bf.load57 = load i32, i32* %41, align 8, !dbg !7542
  %bf.clear58 = and i32 %bf.load57, 65535, !dbg !7542
  %cmp59 = icmp eq i32 %bf.clear58, 7, !dbg !7542
  br i1 %cmp59, label %lor.end, label %lor.rhs, !dbg !7543

lor.rhs:                                          ; preds = %land.rhs
  %42 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7544
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !7544
  %bf.load61 = load i32, i32* %43, align 8, !dbg !7544
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !7544
  %cmp63 = icmp eq i32 %bf.clear62, 13, !dbg !7544
  br label %lor.end, !dbg !7543

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %44 = phi i1 [ true, %land.rhs ], [ %cmp63, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %do.cond
  %45 = phi i1 [ false, %do.cond ], [ %44, %lor.end ], !dbg !7545
  br i1 %45, label %do.body, label %do.end, !dbg !7537, !llvm.loop !7546

do.end:                                           ; preds = %land.end
  br label %if.end65, !dbg !7537

if.end65:                                         ; preds = %do.end, %land.lhs.true48, %if.then45
  %46 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7548
  %47 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7550
  %cmp66 = icmp ne %struct.rtx_def* %46, %47, !dbg !7551
  br i1 %cmp66, label %land.lhs.true68, label %if.end95, !dbg !7552

land.lhs.true68:                                  ; preds = %if.end65
  %48 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7553
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !7553
  %bf.load69 = load i32, i32* %49, align 8, !dbg !7553
  %bf.clear70 = and i32 %bf.load69, 65535, !dbg !7553
  %cmp71 = icmp eq i32 %bf.clear70, 7, !dbg !7553
  br i1 %cmp71, label %if.then73, label %if.end95, !dbg !7554

if.then73:                                        ; preds = %land.lhs.true68
  br label %do.body74, !dbg !7555

do.body74:                                        ; preds = %land.end93, %if.then73
  %50 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7556
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %50, i32 0, i32 1, !dbg !7556
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !7556
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !7556
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !7556
  %51 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !7556
  store %struct.rtx_def* %51, %struct.rtx_def** %last, align 8, !dbg !7557
  br label %do.cond79, !dbg !7558

do.cond79:                                        ; preds = %do.body74
  %52 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7559
  %53 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7560
  %cmp80 = icmp ne %struct.rtx_def* %52, %53, !dbg !7561
  br i1 %cmp80, label %land.rhs82, label %land.end93, !dbg !7562

land.rhs82:                                       ; preds = %do.cond79
  %54 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7563
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !7563
  %bf.load83 = load i32, i32* %55, align 8, !dbg !7563
  %bf.clear84 = and i32 %bf.load83, 65535, !dbg !7563
  %cmp85 = icmp eq i32 %bf.clear84, 7, !dbg !7563
  br i1 %cmp85, label %lor.end92, label %lor.rhs87, !dbg !7564

lor.rhs87:                                        ; preds = %land.rhs82
  %56 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7565
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !7565
  %bf.load88 = load i32, i32* %57, align 8, !dbg !7565
  %bf.clear89 = and i32 %bf.load88, 65535, !dbg !7565
  %cmp90 = icmp eq i32 %bf.clear89, 13, !dbg !7565
  br label %lor.end92, !dbg !7564

lor.end92:                                        ; preds = %lor.rhs87, %land.rhs82
  %58 = phi i1 [ true, %land.rhs82 ], [ %cmp90, %lor.rhs87 ]
  br label %land.end93

land.end93:                                       ; preds = %lor.end92, %do.cond79
  %59 = phi i1 [ false, %do.cond79 ], [ %58, %lor.end92 ], !dbg !7566
  br i1 %59, label %do.body74, label %do.end94, !dbg !7558, !llvm.loop !7567

do.end94:                                         ; preds = %land.end93
  br label %if.end95, !dbg !7558

if.end95:                                         ; preds = %do.end94, %land.lhs.true68, %if.end65
  br label %if.end96, !dbg !7569

if.end96:                                         ; preds = %if.end95, %if.end41
  %60 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !7570
  %61 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7572
  %cmp97 = icmp eq %struct.rtx_def* %60, %61, !dbg !7573
  br i1 %cmp97, label %land.lhs.true99, label %if.end248, !dbg !7574

land.lhs.true99:                                  ; preds = %if.end96
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7575
  %call100 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %62), !dbg !7576
  %tobool101 = icmp ne i8 %call100, 0, !dbg !7576
  br i1 %tobool101, label %if.end248, label %land.lhs.true102, !dbg !7577

land.lhs.true102:                                 ; preds = %land.lhs.true99
  %63 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7578
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !7578
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !7578
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 5, !dbg !7578
  %rt_rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !7578
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx106, align 8, !dbg !7578
  %65 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !7578
  %cmp107 = icmp eq %struct.rtx_def* %64, %65, !dbg !7578
  br i1 %cmp107, label %land.lhs.true109, label %if.end248, !dbg !7579

land.lhs.true109:                                 ; preds = %land.lhs.true102
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7580
  %succs110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 1, !dbg !7580
  %67 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs110, align 8, !dbg !7580
  %tobool111 = icmp ne %struct.VEC_edge_gc* %67, null, !dbg !7580
  br i1 %tobool111, label %cond.true112, label %cond.false115, !dbg !7580

cond.true112:                                     ; preds = %land.lhs.true109
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7580
  %succs113 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %68, i32 0, i32 1, !dbg !7580
  %69 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs113, align 8, !dbg !7580
  %base114 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %69, i32 0, i32 0, !dbg !7580
  br label %cond.end116, !dbg !7580

cond.false115:                                    ; preds = %land.lhs.true109
  br label %cond.end116, !dbg !7580

cond.end116:                                      ; preds = %cond.false115, %cond.true112
  %cond117 = phi %struct.VEC_edge_base* [ %base114, %cond.true112 ], [ null, %cond.false115 ], !dbg !7580
  %call118 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond117), !dbg !7580
  %cmp119 = icmp eq i32 %call118, 1, !dbg !7581
  br i1 %cmp119, label %land.lhs.true121, label %if.end248, !dbg !7582

land.lhs.true121:                                 ; preds = %cond.end116
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7583
  %succs122 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 1, !dbg !7583
  %71 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs122, align 8, !dbg !7583
  %tobool123 = icmp ne %struct.VEC_edge_gc* %71, null, !dbg !7583
  br i1 %tobool123, label %cond.true124, label %cond.false127, !dbg !7583

cond.true124:                                     ; preds = %land.lhs.true121
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7583
  %succs125 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 1, !dbg !7583
  %73 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs125, align 8, !dbg !7583
  %base126 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %73, i32 0, i32 0, !dbg !7583
  br label %cond.end128, !dbg !7583

cond.false127:                                    ; preds = %land.lhs.true121
  br label %cond.end128, !dbg !7583

cond.end128:                                      ; preds = %cond.false127, %cond.true124
  %cond129 = phi %struct.VEC_edge_base* [ %base126, %cond.true124 ], [ null, %cond.false127 ], !dbg !7583
  %call130 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond129, i32 0), !dbg !7583
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call130, i32 0, i32 7, !dbg !7584
  %74 = load i32, i32* %flags, align 8, !dbg !7584
  %and = and i32 %74, 1, !dbg !7585
  %tobool131 = icmp ne i32 %and, 0, !dbg !7585
  br i1 %tobool131, label %land.lhs.true132, label %if.end248, !dbg !7586

land.lhs.true132:                                 ; preds = %cond.end128
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7587
  %call133 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %75), !dbg !7588
  %76 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7589
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %76, i64 0, !dbg !7589
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7589
  %77 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7589
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %77, i32 0, i32 1, !dbg !7589
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7589
  %cmp134 = icmp ne %struct.basic_block_def* %call133, %78, !dbg !7590
  br i1 %cmp134, label %land.lhs.true136, label %if.end248, !dbg !7591

land.lhs.true136:                                 ; preds = %land.lhs.true132
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7592
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 5, !dbg !7593
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !7593
  %call137 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %80), !dbg !7594
  %conv138 = zext i8 %call137 to i32, !dbg !7594
  %tobool139 = icmp ne i32 %conv138, 0, !dbg !7594
  br i1 %tobool139, label %land.lhs.true140, label %if.end248, !dbg !7595

land.lhs.true140:                                 ; preds = %land.lhs.true136
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7596
  %prev_bb141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 5, !dbg !7596
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb141, align 8, !dbg !7596
  %il142 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 7, !dbg !7596
  %rtl143 = bitcast %union.basic_block_il_dependent* %il142 to %struct.rtl_bb_info**, !dbg !7596
  %83 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl143, align 8, !dbg !7596
  %end_144 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %83, i32 0, i32 1, !dbg !7596
  %84 = load %struct.rtx_def*, %struct.rtx_def** %end_144, align 8, !dbg !7596
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7597
  %next_bb145 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 6, !dbg !7598
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb145, align 8, !dbg !7598
  %call146 = call zeroext i8 @jump_leads_only_to_bb_p(%struct.rtx_def* %84, %struct.basic_block_def* %86), !dbg !7599
  %conv147 = zext i8 %call146 to i32, !dbg !7599
  %tobool148 = icmp ne i32 %conv147, 0, !dbg !7599
  br i1 %tobool148, label %land.lhs.true149, label %if.end248, !dbg !7600

land.lhs.true149:                                 ; preds = %land.lhs.true140
  %87 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7601
  %tobool150 = icmp ne %struct.VEC_sel_insn_data_def_heap* %87, null, !dbg !7601
  br i1 %tobool150, label %cond.true151, label %cond.false153, !dbg !7601

cond.true151:                                     ; preds = %land.lhs.true149
  %88 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7601
  %base152 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %88, i32 0, i32 0, !dbg !7601
  br label %cond.end154, !dbg !7601

cond.false153:                                    ; preds = %land.lhs.true149
  br label %cond.end154, !dbg !7601

cond.end154:                                      ; preds = %cond.false153, %cond.true151
  %cond155 = phi %struct.VEC_sel_insn_data_def_base* [ %base152, %cond.true151 ], [ null, %cond.false153 ], !dbg !7601
  %89 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7601
  %tobool156 = icmp ne %struct.VEC_int_heap* %89, null, !dbg !7601
  br i1 %tobool156, label %cond.true157, label %cond.false159, !dbg !7601

cond.true157:                                     ; preds = %cond.end154
  %90 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7601
  %base158 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %90, i32 0, i32 0, !dbg !7601
  br label %cond.end160, !dbg !7601

cond.false159:                                    ; preds = %cond.end154
  br label %cond.end160, !dbg !7601

cond.end160:                                      ; preds = %cond.false159, %cond.true157
  %cond161 = phi %struct.VEC_int_base* [ %base158, %cond.true157 ], [ null, %cond.false159 ], !dbg !7601
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7601
  %prev_bb162 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 5, !dbg !7601
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb162, align 8, !dbg !7601
  %il163 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 7, !dbg !7601
  %rtl164 = bitcast %union.basic_block_il_dependent* %il163 to %struct.rtl_bb_info**, !dbg !7601
  %93 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl164, align 8, !dbg !7601
  %end_165 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %93, i32 0, i32 1, !dbg !7601
  %94 = load %struct.rtx_def*, %struct.rtx_def** %end_165, align 8, !dbg !7601
  %u166 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !7601
  %fld167 = bitcast %union.u* %u166 to [1 x %union.rtunion_def]*, !dbg !7601
  %arrayidx168 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld167, i64 0, i64 0, !dbg !7601
  %rt_int169 = bitcast %union.rtunion_def* %arrayidx168 to i32*, !dbg !7601
  %95 = load i32, i32* %rt_int169, align 8, !dbg !7601
  %call170 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond161, i32 %95), !dbg !7601
  %call171 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond155, i32 %call170), !dbg !7601
  %expr172 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call171, i32 0, i32 0, !dbg !7601
  %sched_times173 = getelementptr inbounds %struct._expr, %struct._expr* %expr172, i32 0, i32 5, !dbg !7601
  %96 = load i32, i32* %sched_times173, align 8, !dbg !7601
  %cmp174 = icmp eq i32 %96, 0, !dbg !7602
  br i1 %cmp174, label %land.lhs.true176, label %if.end248, !dbg !7603

land.lhs.true176:                                 ; preds = %cond.end160
  %97 = load %struct._list_node*, %struct._list_node** @fences, align 8, !dbg !7604
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7604
  %prev_bb177 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 5, !dbg !7604
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb177, align 8, !dbg !7604
  %il178 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 7, !dbg !7604
  %rtl179 = bitcast %union.basic_block_il_dependent* %il178 to %struct.rtl_bb_info**, !dbg !7604
  %100 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl179, align 8, !dbg !7604
  %end_180 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %100, i32 0, i32 1, !dbg !7604
  %101 = load %struct.rtx_def*, %struct.rtx_def** %end_180, align 8, !dbg !7604
  %call181 = call %struct._fence* @flist_lookup(%struct._list_node* %97, %struct.rtx_def* %101), !dbg !7604
  %cmp182 = icmp ne %struct._fence* %call181, null, !dbg !7604
  br i1 %cmp182, label %if.end248, label %if.then184, !dbg !7605

if.then184:                                       ; preds = %land.lhs.true176
  call void @llvm.dbg.declare(metadata i8* %recompute_toporder_p, metadata !7606, metadata !DIExpression()), !dbg !7608
  %102 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7609
  %tobool185 = icmp ne %struct.VEC_sel_insn_data_def_heap* %102, null, !dbg !7609
  br i1 %tobool185, label %cond.true186, label %cond.false188, !dbg !7609

cond.true186:                                     ; preds = %if.then184
  %103 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !7609
  %base187 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %103, i32 0, i32 0, !dbg !7609
  br label %cond.end189, !dbg !7609

cond.false188:                                    ; preds = %if.then184
  br label %cond.end189, !dbg !7609

cond.end189:                                      ; preds = %cond.false188, %cond.true186
  %cond190 = phi %struct.VEC_sel_insn_data_def_base* [ %base187, %cond.true186 ], [ null, %cond.false188 ], !dbg !7609
  %104 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7609
  %tobool191 = icmp ne %struct.VEC_int_heap* %104, null, !dbg !7609
  br i1 %tobool191, label %cond.true192, label %cond.false194, !dbg !7609

cond.true192:                                     ; preds = %cond.end189
  %105 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !7609
  %base193 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %105, i32 0, i32 0, !dbg !7609
  br label %cond.end195, !dbg !7609

cond.false194:                                    ; preds = %cond.end189
  br label %cond.end195, !dbg !7609

cond.end195:                                      ; preds = %cond.false194, %cond.true192
  %cond196 = phi %struct.VEC_int_base* [ %base193, %cond.true192 ], [ null, %cond.false194 ], !dbg !7609
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7609
  %prev_bb197 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %106, i32 0, i32 5, !dbg !7609
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb197, align 8, !dbg !7609
  %il198 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 7, !dbg !7609
  %rtl199 = bitcast %union.basic_block_il_dependent* %il198 to %struct.rtl_bb_info**, !dbg !7609
  %108 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl199, align 8, !dbg !7609
  %end_200 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %108, i32 0, i32 1, !dbg !7609
  %109 = load %struct.rtx_def*, %struct.rtx_def** %end_200, align 8, !dbg !7609
  %u201 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %109, i32 0, i32 1, !dbg !7609
  %fld202 = bitcast %union.u* %u201 to [1 x %union.rtunion_def]*, !dbg !7609
  %arrayidx203 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld202, i64 0, i64 0, !dbg !7609
  %rt_int204 = bitcast %union.rtunion_def* %arrayidx203 to i32*, !dbg !7609
  %110 = load i32, i32* %rt_int204, align 8, !dbg !7609
  %call205 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond196, i32 %110), !dbg !7609
  %call206 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond190, i32 %call205), !dbg !7609
  %expr207 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call206, i32 0, i32 0, !dbg !7609
  call void @clear_expr(%struct._expr* %expr207), !dbg !7610
  %111 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7611
  %prev_bb208 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %111, i32 0, i32 5, !dbg !7611
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb208, align 8, !dbg !7611
  %succs209 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 1, !dbg !7611
  %113 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs209, align 8, !dbg !7611
  %tobool210 = icmp ne %struct.VEC_edge_gc* %113, null, !dbg !7611
  br i1 %tobool210, label %cond.true211, label %cond.false215, !dbg !7611

cond.true211:                                     ; preds = %cond.end195
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7611
  %prev_bb212 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %114, i32 0, i32 5, !dbg !7611
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb212, align 8, !dbg !7611
  %succs213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 1, !dbg !7611
  %116 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs213, align 8, !dbg !7611
  %base214 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %116, i32 0, i32 0, !dbg !7611
  br label %cond.end216, !dbg !7611

cond.false215:                                    ; preds = %cond.end195
  br label %cond.end216, !dbg !7611

cond.end216:                                      ; preds = %cond.false215, %cond.true211
  %cond217 = phi %struct.VEC_edge_base* [ %base214, %cond.true211 ], [ null, %cond.false215 ], !dbg !7611
  %call218 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond217, i32 0), !dbg !7611
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7612
  %call219 = call zeroext i8 @sel_redirect_edge_and_branch(%struct.edge_def* %call218, %struct.basic_block_def* %117), !dbg !7613
  store i8 %call219, i8* %recompute_toporder_p, align 1, !dbg !7614
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7615
  %prev_bb220 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %118, i32 0, i32 5, !dbg !7615
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb220, align 8, !dbg !7615
  %succs221 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 1, !dbg !7615
  %120 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs221, align 8, !dbg !7615
  %tobool222 = icmp ne %struct.VEC_edge_gc* %120, null, !dbg !7615
  br i1 %tobool222, label %cond.true223, label %cond.false227, !dbg !7615

cond.true223:                                     ; preds = %cond.end216
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7615
  %prev_bb224 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %121, i32 0, i32 5, !dbg !7615
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb224, align 8, !dbg !7615
  %succs225 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 1, !dbg !7615
  %123 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs225, align 8, !dbg !7615
  %base226 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %123, i32 0, i32 0, !dbg !7615
  br label %cond.end228, !dbg !7615

cond.false227:                                    ; preds = %cond.end216
  br label %cond.end228, !dbg !7615

cond.end228:                                      ; preds = %cond.false227, %cond.true223
  %cond229 = phi %struct.VEC_edge_base* [ %base226, %cond.true223 ], [ null, %cond.false227 ], !dbg !7615
  %call230 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond229, i32 0), !dbg !7615
  %flags231 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call230, i32 0, i32 7, !dbg !7615
  %124 = load i32, i32* %flags231, align 8, !dbg !7615
  %and232 = and i32 %124, 1, !dbg !7615
  %tobool233 = icmp ne i32 %and232, 0, !dbg !7615
  br i1 %tobool233, label %cond.false235, label %cond.true234, !dbg !7615

cond.true234:                                     ; preds = %cond.end228
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3696, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7615
  br label %cond.end236, !dbg !7615

cond.false235:                                    ; preds = %cond.end228
  br label %cond.end236, !dbg !7615

cond.end236:                                      ; preds = %cond.false235, %cond.true234
  %cond237 = phi i32 [ 0, %cond.true234 ], [ 0, %cond.false235 ], !dbg !7615
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7616
  %prev_bb238 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %125, i32 0, i32 5, !dbg !7618
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb238, align 8, !dbg !7618
  %call239 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %126), !dbg !7619
  %tobool240 = icmp ne i8 %call239, 0, !dbg !7619
  br i1 %tobool240, label %if.then241, label %if.else, !dbg !7620

if.then241:                                       ; preds = %cond.end236
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %xbb.addr, align 8, !dbg !7621
  %prev_bb242 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %127, i32 0, i32 5, !dbg !7622
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb242, align 8, !dbg !7622
  %129 = load i8, i8* %recompute_toporder_p, align 1, !dbg !7623
  %call243 = call zeroext i8 @maybe_tidy_empty_bb(%struct.basic_block_def* %128, i8 zeroext %129), !dbg !7624
  store i8 %call243, i8* %changed, align 1, !dbg !7625
  br label %if.end247, !dbg !7626

if.else:                                          ; preds = %cond.end236
  %130 = load i8, i8* %recompute_toporder_p, align 1, !dbg !7627
  %tobool244 = icmp ne i8 %130, 0, !dbg !7627
  br i1 %tobool244, label %if.then245, label %if.end246, !dbg !7629

if.then245:                                       ; preds = %if.else
  call void @sel_recompute_toporder(), !dbg !7630
  br label %if.end246, !dbg !7630

if.end246:                                        ; preds = %if.then245, %if.else
  br label %if.end247

if.end247:                                        ; preds = %if.end246, %if.then241
  br label %if.end248, !dbg !7631

if.end248:                                        ; preds = %if.end247, %land.lhs.true176, %cond.end160, %land.lhs.true140, %land.lhs.true136, %land.lhs.true132, %cond.end128, %cond.end116, %land.lhs.true102, %land.lhs.true99, %if.end96
  %131 = load i8, i8* %changed, align 1, !dbg !7632
  store i8 %131, i8* %retval, align 1, !dbg !7633
  br label %return, !dbg !7633

return:                                           ; preds = %if.end248, %if.then31, %if.then
  %132 = load i8, i8* %retval, align 1, !dbg !7634
  ret i8 %132, !dbg !7634
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @maybe_tidy_empty_bb(%struct.basic_block_def* %bb, i8 zeroext %recompute_toporder_p) #0 !dbg !7635 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %recompute_toporder_p.addr = alloca i8, align 1
  %succ_bb = alloca %struct.basic_block_def*, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %rescan_p = alloca i8, align 1
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp50 = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7636, metadata !DIExpression()), !dbg !7637
  store i8 %recompute_toporder_p, i8* %recompute_toporder_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %recompute_toporder_p.addr, metadata !7638, metadata !DIExpression()), !dbg !7639
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ_bb, metadata !7640, metadata !DIExpression()), !dbg !7641
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !7642, metadata !DIExpression()), !dbg !7643
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !7644, metadata !DIExpression()), !dbg !7645
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !7646, metadata !DIExpression()), !dbg !7647
  call void @llvm.dbg.declare(metadata i8* %rescan_p, metadata !7648, metadata !DIExpression()), !dbg !7649
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7650
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %0), !dbg !7652
  %tobool = icmp ne i8 %call, 0, !dbg !7652
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7653

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7654
  %call1 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %1), !dbg !7655
  %conv = zext i8 %call1 to i32, !dbg !7655
  %tobool2 = icmp ne i32 %conv, 0, !dbg !7655
  br i1 %tobool2, label %land.lhs.true, label %lor.lhs.false11, !dbg !7656

land.lhs.true:                                    ; preds = %lor.lhs.false
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7657
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %2), !dbg !7658
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7659
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !7659
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7659
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7659
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !7659
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7659
  %cmp = icmp eq %struct.basic_block_def* %call3, %5, !dbg !7660
  br i1 %cmp, label %land.lhs.true5, label %lor.lhs.false11, !dbg !7661

land.lhs.true5:                                   ; preds = %land.lhs.true
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7662
  %call6 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %6), !dbg !7663
  %tobool7 = icmp ne i8 %call6, 0, !dbg !7663
  br i1 %tobool7, label %lor.lhs.false8, label %if.then, !dbg !7664

lor.lhs.false8:                                   ; preds = %land.lhs.true5
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7665
  %call9 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %7), !dbg !7666
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call9, i32 0, i32 7, !dbg !7667
  %8 = load i32, i32* %flags, align 8, !dbg !7667
  %and = and i32 %8, 1, !dbg !7668
  %tobool10 = icmp ne i32 %and, 0, !dbg !7668
  br i1 %tobool10, label %lor.lhs.false11, label %if.then, !dbg !7669

lor.lhs.false11:                                  ; preds = %lor.lhs.false8, %land.lhs.true, %lor.lhs.false
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7670
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 0, !dbg !7670
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !7670
  %tobool12 = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !7670
  br i1 %tobool12, label %cond.true, label %cond.false, !dbg !7670

cond.true:                                        ; preds = %lor.lhs.false11
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7670
  %preds13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 0, !dbg !7670
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds13, align 8, !dbg !7670
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %12, i32 0, i32 0, !dbg !7670
  br label %cond.end, !dbg !7670

cond.false:                                       ; preds = %lor.lhs.false11
  br label %cond.end, !dbg !7670

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7670
  %call14 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7670
  %cmp15 = icmp eq i32 %call14, 0, !dbg !7671
  br i1 %cmp15, label %if.then, label %lor.lhs.false17, !dbg !7672

lor.lhs.false17:                                  ; preds = %cond.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7673
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !7673
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7673
  %tobool18 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !7673
  br i1 %tobool18, label %cond.true19, label %cond.false22, !dbg !7673

cond.true19:                                      ; preds = %lor.lhs.false17
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7673
  %succs20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !7673
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs20, align 8, !dbg !7673
  %base21 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %16, i32 0, i32 0, !dbg !7673
  br label %cond.end23, !dbg !7673

cond.false22:                                     ; preds = %lor.lhs.false17
  br label %cond.end23, !dbg !7673

cond.end23:                                       ; preds = %cond.false22, %cond.true19
  %cond24 = phi %struct.VEC_edge_base* [ %base21, %cond.true19 ], [ null, %cond.false22 ], !dbg !7673
  %call25 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond24), !dbg !7673
  %cmp26 = icmp eq i32 %call25, 0, !dbg !7674
  br i1 %cmp26, label %if.then, label %if.end, !dbg !7675

if.then:                                          ; preds = %cond.end23, %cond.end, %lor.lhs.false8, %land.lhs.true5, %entry
  store i8 0, i8* %retval, align 1, !dbg !7676
  br label %return, !dbg !7676

if.end:                                           ; preds = %cond.end23
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7677
  %preds28 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 0, !dbg !7677
  %call29 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds28), !dbg !7677
  %18 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !7677
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 0, !dbg !7677
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call29, 0, !dbg !7677
  store i32 %20, i32* %19, align 8, !dbg !7677
  %21 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %18, i32 0, i32 1, !dbg !7677
  %22 = extractvalue { i32, %struct.VEC_edge_gc** } %call29, 1, !dbg !7677
  store %struct.VEC_edge_gc** %22, %struct.VEC_edge_gc*** %21, align 8, !dbg !7677
  %23 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7677
  %24 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !7677
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %23, i8* align 8 %24, i64 16, i1 false), !dbg !7677
  br label %for.cond, !dbg !7677

for.cond:                                         ; preds = %for.inc, %if.end
  %25 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7679
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 0, !dbg !7679
  %27 = load i32, i32* %26, align 8, !dbg !7679
  %28 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %25, i32 0, i32 1, !dbg !7679
  %29 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %28, align 8, !dbg !7679
  %call30 = call zeroext i8 @ei_cond(i32 %27, %struct.VEC_edge_gc** %29, %struct.edge_def** %e), !dbg !7679
  %tobool31 = icmp ne i8 %call30, 0, !dbg !7677
  br i1 %tobool31, label %for.body, label %for.end, !dbg !7677

for.body:                                         ; preds = %for.cond
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7681
  %flags32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 7, !dbg !7683
  %31 = load i32, i32* %flags32, align 8, !dbg !7683
  %and33 = and i32 %31, 14, !dbg !7684
  %tobool34 = icmp ne i32 %and33, 0, !dbg !7684
  br i1 %tobool34, label %if.then35, label %if.end36, !dbg !7685

if.then35:                                        ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !7686
  br label %return, !dbg !7686

if.end36:                                         ; preds = %for.body
  br label %for.inc, !dbg !7687

for.inc:                                          ; preds = %if.end36
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7679
  br label %for.cond, !dbg !7679, !llvm.loop !7688

for.end:                                          ; preds = %for.cond
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7690
  call void @free_data_sets(%struct.basic_block_def* %32), !dbg !7691
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7692
  %call37 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %33), !dbg !7694
  %tobool38 = icmp ne i8 %call37, 0, !dbg !7694
  br i1 %tobool38, label %if.end47, label %if.then39, !dbg !7695

if.then39:                                        ; preds = %for.end
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7696
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 5, !dbg !7696
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !7696
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7696
  %call40 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %35, %struct.basic_block_def* %36), !dbg !7696
  %tobool41 = icmp ne i8 %call40, 0, !dbg !7696
  br i1 %tobool41, label %cond.false43, label %cond.true42, !dbg !7696

cond.true42:                                      ; preds = %if.then39
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3577, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7696
  br label %cond.end44, !dbg !7696

cond.false43:                                     ; preds = %if.then39
  br label %cond.end44, !dbg !7696

cond.end44:                                       ; preds = %cond.false43, %cond.true42
  %cond45 = phi i32 [ 0, %cond.true42 ], [ 0, %cond.false43 ], !dbg !7696
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7698
  %prev_bb46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 5, !dbg !7699
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb46, align 8, !dbg !7699
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7700
  call void @sel_merge_blocks(%struct.basic_block_def* %38, %struct.basic_block_def* %39), !dbg !7701
  store i8 1, i8* %retval, align 1, !dbg !7702
  br label %return, !dbg !7702

if.end47:                                         ; preds = %for.end
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7703
  %call48 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %40), !dbg !7704
  store %struct.basic_block_def* %call48, %struct.basic_block_def** %succ_bb, align 8, !dbg !7705
  store i8 1, i8* %rescan_p, align 1, !dbg !7706
  store %struct.basic_block_def* null, %struct.basic_block_def** %pred_bb, align 8, !dbg !7707
  br label %while.cond, !dbg !7708

while.cond:                                       ; preds = %for.end67, %if.end47
  %41 = load i8, i8* %rescan_p, align 1, !dbg !7709
  %tobool49 = icmp ne i8 %41, 0, !dbg !7708
  br i1 %tobool49, label %while.body, label %while.end, !dbg !7708

while.body:                                       ; preds = %while.cond
  store i8 0, i8* %rescan_p, align 1, !dbg !7710
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7712
  %preds51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 0, !dbg !7712
  %call52 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds51), !dbg !7712
  %43 = bitcast %struct.edge_iterator* %tmp50 to { i32, %struct.VEC_edge_gc** }*, !dbg !7712
  %44 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 0, !dbg !7712
  %45 = extractvalue { i32, %struct.VEC_edge_gc** } %call52, 0, !dbg !7712
  store i32 %45, i32* %44, align 8, !dbg !7712
  %46 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %43, i32 0, i32 1, !dbg !7712
  %47 = extractvalue { i32, %struct.VEC_edge_gc** } %call52, 1, !dbg !7712
  store %struct.VEC_edge_gc** %47, %struct.VEC_edge_gc*** %46, align 8, !dbg !7712
  %48 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !7712
  %49 = bitcast %struct.edge_iterator* %tmp50 to i8*, !dbg !7712
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %48, i8* align 8 %49, i64 16, i1 false), !dbg !7712
  br label %for.cond53, !dbg !7712

for.cond53:                                       ; preds = %for.inc66, %while.body
  %50 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !7714
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !7714
  %52 = load i32, i32* %51, align 8, !dbg !7714
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !7714
  %54 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %53, align 8, !dbg !7714
  %call54 = call zeroext i8 @ei_cond(i32 %52, %struct.VEC_edge_gc** %54, %struct.edge_def** %e), !dbg !7714
  %tobool55 = icmp ne i8 %call54, 0, !dbg !7712
  br i1 %tobool55, label %for.body56, label %for.end67, !dbg !7712

for.body56:                                       ; preds = %for.cond53
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7716
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 0, !dbg !7718
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7718
  store %struct.basic_block_def* %56, %struct.basic_block_def** %pred_bb, align 8, !dbg !7719
  %57 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7720
  %flags57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 7, !dbg !7722
  %58 = load i32, i32* %flags57, align 8, !dbg !7722
  %and58 = and i32 %58, 1, !dbg !7723
  %tobool59 = icmp ne i32 %and58, 0, !dbg !7723
  br i1 %tobool59, label %if.end65, label %if.then60, !dbg !7724

if.then60:                                        ; preds = %for.body56
  %59 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !7725
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !7727
  %call61 = call zeroext i8 @sel_redirect_edge_and_branch(%struct.edge_def* %59, %struct.basic_block_def* %60), !dbg !7728
  %conv62 = zext i8 %call61 to i32, !dbg !7728
  %61 = load i8, i8* %recompute_toporder_p.addr, align 1, !dbg !7729
  %conv63 = zext i8 %61 to i32, !dbg !7729
  %or = or i32 %conv63, %conv62, !dbg !7729
  %conv64 = trunc i32 %or to i8, !dbg !7729
  store i8 %conv64, i8* %recompute_toporder_p.addr, align 1, !dbg !7729
  store i8 1, i8* %rescan_p, align 1, !dbg !7730
  br label %for.end67, !dbg !7731

if.end65:                                         ; preds = %for.body56
  br label %for.inc66, !dbg !7732

for.inc66:                                        ; preds = %if.end65
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !7714
  br label %for.cond53, !dbg !7714, !llvm.loop !7733

for.end67:                                        ; preds = %if.then60, %for.cond53
  br label %while.cond, !dbg !7708, !llvm.loop !7735

while.end:                                        ; preds = %while.cond
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7737
  %prev_bb68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 5, !dbg !7739
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb68, align 8, !dbg !7739
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7740
  %call69 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %63, %struct.basic_block_def* %64), !dbg !7741
  %tobool70 = icmp ne i8 %call69, 0, !dbg !7741
  br i1 %tobool70, label %if.then71, label %if.else, !dbg !7742

if.then71:                                        ; preds = %while.end
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7743
  %prev_bb72 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 5, !dbg !7744
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb72, align 8, !dbg !7744
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7745
  call void @sel_merge_blocks(%struct.basic_block_def* %66, %struct.basic_block_def* %67), !dbg !7746
  br label %if.end83, !dbg !7746

if.else:                                          ; preds = %while.end
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !7747
  %cmp73 = icmp ne %struct.basic_block_def* %68, null, !dbg !7747
  br i1 %cmp73, label %cond.false76, label %cond.true75, !dbg !7747

cond.true75:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3611, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7747
  br label %cond.end77, !dbg !7747

cond.false76:                                     ; preds = %if.else
  br label %cond.end77, !dbg !7747

cond.end77:                                       ; preds = %cond.false76, %cond.true75
  %cond78 = phi i32 [ 0, %cond.true75 ], [ 0, %cond.false76 ], !dbg !7747
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !7749
  %call79 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %69), !dbg !7751
  %tobool80 = icmp ne i8 %call79, 0, !dbg !7751
  br i1 %tobool80, label %if.then81, label %if.end82, !dbg !7752

if.then81:                                        ; preds = %cond.end77
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !7753
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7754
  call void @move_bb_info(%struct.basic_block_def* %70, %struct.basic_block_def* %71), !dbg !7755
  br label %if.end82, !dbg !7755

if.end82:                                         ; preds = %if.then81, %cond.end77
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7756
  call void @remove_empty_bb(%struct.basic_block_def* %72, i8 zeroext 1), !dbg !7757
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then71
  %73 = load i8, i8* %recompute_toporder_p.addr, align 1, !dbg !7758
  %tobool84 = icmp ne i8 %73, 0, !dbg !7758
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !7760

if.then85:                                        ; preds = %if.end83
  call void @sel_recompute_toporder(), !dbg !7761
  br label %if.end86, !dbg !7761

if.end86:                                         ; preds = %if.then85, %if.end83
  store i8 1, i8* %retval, align 1, !dbg !7762
  br label %return, !dbg !7762

return:                                           ; preds = %if.end86, %cond.end44, %if.then35, %if.then
  %74 = load i8, i8* %retval, align 1, !dbg !7763
  ret i8 %74, !dbg !7763
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @jump_leads_only_to_bb_p(%struct.rtx_def* %jump, %struct.basic_block_def* %dest_bb) #0 !dbg !7764 {
entry:
  %retval = alloca i8, align 1
  %jump.addr = alloca %struct.rtx_def*, align 8
  %dest_bb.addr = alloca %struct.basic_block_def*, align 8
  %jump_bb = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !7767, metadata !DIExpression()), !dbg !7768
  store %struct.basic_block_def* %dest_bb, %struct.basic_block_def** %dest_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest_bb.addr, metadata !7769, metadata !DIExpression()), !dbg !7770
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb, metadata !7771, metadata !DIExpression()), !dbg !7772
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7773
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !7773
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7773
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7773
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7773
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7773
  store %struct.basic_block_def* %1, %struct.basic_block_def** %jump_bb, align 8, !dbg !7772
  %2 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7774
  %call = call i32 @onlyjump_p(%struct.rtx_def* %2), !dbg !7776
  %tobool = icmp ne i32 %call, 0, !dbg !7776
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !7777

lor.lhs.false:                                    ; preds = %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !7778
  %call1 = call i32 @any_uncondjump_p(%struct.rtx_def* %3), !dbg !7779
  %tobool2 = icmp ne i32 %call1, 0, !dbg !7779
  br i1 %tobool2, label %if.end, label %if.then, !dbg !7780

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !7781
  br label %return, !dbg !7781

if.end:                                           ; preds = %lor.lhs.false
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7782
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !7782
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !7782
  %tobool3 = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !7782
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !7782

cond.true:                                        ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7782
  %succs4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !7782
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs4, align 8, !dbg !7782
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !7782
  br label %cond.end, !dbg !7782

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7782

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !7782
  %call5 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !7782
  %cmp = icmp ne i32 %call5, 1, !dbg !7784
  br i1 %cmp, label %if.then28, label %lor.lhs.false6, !dbg !7785

lor.lhs.false6:                                   ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7786
  %succs7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !7786
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs7, align 8, !dbg !7786
  %tobool8 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !7786
  br i1 %tobool8, label %cond.true9, label %cond.false12, !dbg !7786

cond.true9:                                       ; preds = %lor.lhs.false6
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7786
  %succs10 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !7786
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs10, align 8, !dbg !7786
  %base11 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !7786
  br label %cond.end13, !dbg !7786

cond.false12:                                     ; preds = %lor.lhs.false6
  br label %cond.end13, !dbg !7786

cond.end13:                                       ; preds = %cond.false12, %cond.true9
  %cond14 = phi %struct.VEC_edge_base* [ %base11, %cond.true9 ], [ null, %cond.false12 ], !dbg !7786
  %call15 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond14, i32 0), !dbg !7786
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call15, i32 0, i32 7, !dbg !7787
  %12 = load i32, i32* %flags, align 8, !dbg !7787
  %and = and i32 %12, 2, !dbg !7788
  %tobool16 = icmp ne i32 %and, 0, !dbg !7788
  br i1 %tobool16, label %if.then28, label %lor.lhs.false17, !dbg !7789

lor.lhs.false17:                                  ; preds = %cond.end13
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7790
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 1, !dbg !7790
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !7790
  %tobool19 = icmp ne %struct.VEC_edge_gc* %14, null, !dbg !7790
  br i1 %tobool19, label %cond.true20, label %cond.false23, !dbg !7790

cond.true20:                                      ; preds = %lor.lhs.false17
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !7790
  %succs21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !7790
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs21, align 8, !dbg !7790
  %base22 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %16, i32 0, i32 0, !dbg !7790
  br label %cond.end24, !dbg !7790

cond.false23:                                     ; preds = %lor.lhs.false17
  br label %cond.end24, !dbg !7790

cond.end24:                                       ; preds = %cond.false23, %cond.true20
  %cond25 = phi %struct.VEC_edge_base* [ %base22, %cond.true20 ], [ null, %cond.false23 ], !dbg !7790
  %call26 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond25, i32 0), !dbg !7790
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call26, i32 0, i32 1, !dbg !7791
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7791
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %dest_bb.addr, align 8, !dbg !7792
  %cmp27 = icmp ne %struct.basic_block_def* %17, %18, !dbg !7793
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !7794

if.then28:                                        ; preds = %cond.end24, %cond.end13, %cond.end
  store i8 0, i8* %retval, align 1, !dbg !7795
  br label %return, !dbg !7795

if.end29:                                         ; preds = %cond.end24
  store i8 1, i8* %retval, align 1, !dbg !7796
  br label %return, !dbg !7796

return:                                           ; preds = %if.end29, %if.then28, %if.then
  %19 = load i8, i8* %retval, align 1, !dbg !7797
  ret i8 %19, !dbg !7797
}

declare dso_local void @tidy_fallthru_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !7798 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7803, metadata !DIExpression()), !dbg !7804
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !7805, metadata !DIExpression()), !dbg !7804
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7804
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7804
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !7804

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !7804
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7804
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !7804
  %3 = load i32, i32* %num, align 8, !dbg !7804
  %cmp = icmp ult i32 %1, %3, !dbg !7804
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7806
  %land.ext = zext i1 %4 to i32, !dbg !7804
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7804
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !7804
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !7804
  %idxprom = zext i32 %6 to i64, !dbg !7804
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !7804
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !7804
  ret %struct.edge_def* %7, !dbg !7804
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %bb) #0 !dbg !7807 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7810, metadata !DIExpression()), !dbg !7811
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !7812, metadata !DIExpression()), !dbg !7813
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7814
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7816
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !7816
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7816
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7816
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !7816
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7816
  %cmp = icmp eq %struct.basic_block_def* %0, %3, !dbg !7817
  br i1 %cmp, label %if.then, label %if.else, !dbg !7818

if.then:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !7819
  %cmp1 = icmp ne %struct.rtx_def* %4, null, !dbg !7819
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !7819

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4322, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7819
  br label %cond.end, !dbg !7819

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !7819

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7819
  %5 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !7821
  store %struct.rtx_def* %5, %struct.rtx_def** %head, align 8, !dbg !7822
  br label %if.end5, !dbg !7823

if.else:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !7824, metadata !DIExpression()), !dbg !7826
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7827
  %call = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %6), !dbg !7828
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !7829
  %7 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !7830
  %call2 = call %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def* %7), !dbg !7831
  store %struct.rtx_def* %call2, %struct.rtx_def** %head, align 8, !dbg !7832
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !7833
  %tobool = icmp ne %struct.rtx_def* %8, null, !dbg !7833
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !7835

land.lhs.true:                                    ; preds = %if.else
  %9 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !7836
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !7836
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7836
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !7836
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !7836
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7836
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7837
  %cmp3 = icmp ne %struct.basic_block_def* %10, %11, !dbg !7838
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !7839

if.then4:                                         ; preds = %land.lhs.true
  store %struct.rtx_def* null, %struct.rtx_def** %head, align 8, !dbg !7840
  br label %if.end, !dbg !7841

if.end:                                           ; preds = %if.then4, %land.lhs.true, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !7842
  ret %struct.rtx_def* %12, !dbg !7843
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @sel_bb_end(%struct.basic_block_def* %bb) #0 !dbg !7844 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7845, metadata !DIExpression()), !dbg !7846
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7847
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %0), !dbg !7849
  %tobool = icmp ne i8 %call, 0, !dbg !7849
  br i1 %tobool, label %if.then, label %if.end, !dbg !7850

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7851
  br label %return, !dbg !7851

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7852
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7852
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !7852
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7852
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7852
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !7852
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !7852
  %cmp = icmp ne %struct.basic_block_def* %1, %4, !dbg !7852
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !7852

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4353, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7852
  br label %cond.end, !dbg !7852

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !7852

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7852
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7853
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !7853
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !7853
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !7853
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 1, !dbg !7853
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !7853
  store %struct.rtx_def* %7, %struct.rtx_def** %retval, align 8, !dbg !7854
  br label %return, !dbg !7854

return:                                           ; preds = %cond.end, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7855
  ret %struct.rtx_def* %8, !dbg !7855
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %bb) #0 !dbg !7856 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7857, metadata !DIExpression()), !dbg !7858
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7859
  %call = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %0), !dbg !7860
  %cmp = icmp eq %struct.rtx_def* %call, null, !dbg !7861
  %conv = zext i1 %cmp to i32, !dbg !7861
  %conv1 = trunc i32 %conv to i8, !dbg !7860
  ret i8 %conv1, !dbg !7862
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !7863 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !7866, metadata !DIExpression()), !dbg !7867
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7867
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !7867
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7867

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !7867
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !7867
  %2 = load i32, i32* %num, align 8, !dbg !7867
  br label %cond.end, !dbg !7867

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !7867

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !7867
  ret i32 %cond, !dbg !7867
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !7868 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7871, metadata !DIExpression()), !dbg !7872
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7873
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !7874
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !7875
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !7875
  ret %struct.basic_block_def* %1, !dbg !7876
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @in_current_region_p(%struct.basic_block_def* %bb) #0 !dbg !7877 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !7878, metadata !DIExpression()), !dbg !7879
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7880
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 9, !dbg !7882
  %1 = load i32, i32* %index, align 8, !dbg !7882
  %cmp = icmp slt i32 %1, 2, !dbg !7883
  br i1 %cmp, label %if.then, label %if.end, !dbg !7884

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !7885
  br label %return, !dbg !7885

if.end:                                           ; preds = %entry
  %2 = load i32*, i32** @containing_rgn, align 8, !dbg !7886
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !7886
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !7886
  %4 = load i32, i32* %index1, align 8, !dbg !7886
  %idxprom = sext i32 %4 to i64, !dbg !7886
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !7886
  %5 = load i32, i32* %arrayidx, align 4, !dbg !7886
  %6 = load i32*, i32** @containing_rgn, align 8, !dbg !7887
  %7 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7887
  %8 = load i32*, i32** @ebb_head, align 8, !dbg !7887
  %arrayidx2 = getelementptr inbounds i32, i32* %8, i64 0, !dbg !7887
  %9 = load i32, i32* %arrayidx2, align 4, !dbg !7887
  %idxprom3 = sext i32 %9 to i64, !dbg !7887
  %arrayidx4 = getelementptr inbounds i32, i32* %7, i64 %idxprom3, !dbg !7887
  %10 = load i32, i32* %arrayidx4, align 4, !dbg !7887
  %idxprom5 = sext i32 %10 to i64, !dbg !7887
  %arrayidx6 = getelementptr inbounds i32, i32* %6, i64 %idxprom5, !dbg !7887
  %11 = load i32, i32* %arrayidx6, align 4, !dbg !7887
  %cmp7 = icmp eq i32 %5, %11, !dbg !7888
  %conv = zext i1 %cmp7 to i32, !dbg !7888
  %conv8 = trunc i32 %conv to i8, !dbg !7886
  store i8 %conv8, i8* %retval, align 1, !dbg !7889
  br label %return, !dbg !7889

return:                                           ; preds = %if.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !7890
  ret i8 %12, !dbg !7890
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_redirect_edge_and_branch(%struct.edge_def* %e, %struct.basic_block_def* %to) #0 !dbg !7891 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %to.addr = alloca %struct.basic_block_def*, align 8
  %latch_edge_p = alloca i8, align 1
  %src = alloca %struct.basic_block_def*, align 8
  %prev_max_uid = alloca i32, align 4
  %jump = alloca %struct.rtx_def*, align 8
  %redirected = alloca %struct.edge_def*, align 8
  %recompute_toporder_p = alloca i8, align 1
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !7894, metadata !DIExpression()), !dbg !7895
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !7896, metadata !DIExpression()), !dbg !7897
  call void @llvm.dbg.declare(metadata i8* %latch_edge_p, metadata !7898, metadata !DIExpression()), !dbg !7899
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !7900, metadata !DIExpression()), !dbg !7901
  call void @llvm.dbg.declare(metadata i32* %prev_max_uid, metadata !7902, metadata !DIExpression()), !dbg !7903
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !7904, metadata !DIExpression()), !dbg !7905
  call void @llvm.dbg.declare(metadata %struct.edge_def** %redirected, metadata !7906, metadata !DIExpression()), !dbg !7907
  call void @llvm.dbg.declare(metadata i8* %recompute_toporder_p, metadata !7908, metadata !DIExpression()), !dbg !7909
  store i8 0, i8* %recompute_toporder_p, align 1, !dbg !7909
  %0 = load i8, i8* @pipelining_p, align 1, !dbg !7910
  %conv = zext i8 %0 to i32, !dbg !7910
  %tobool = icmp ne i32 %conv, 0, !dbg !7910
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !7911

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !7912
  %tobool1 = icmp ne %struct.loop* %1, null, !dbg !7912
  br i1 %tobool1, label %land.rhs, label %land.end, !dbg !7913

land.rhs:                                         ; preds = %land.lhs.true
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7914
  %3 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !7915
  %call = call %struct.edge_def* @loop_latch_edge(%struct.loop* %3), !dbg !7916
  %cmp = icmp eq %struct.edge_def* %2, %call, !dbg !7917
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %4 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %cmp, %land.rhs ], !dbg !7918
  %land.ext = zext i1 %4 to i32, !dbg !7913
  %conv3 = trunc i32 %land.ext to i8, !dbg !7919
  store i8 %conv3, i8* %latch_edge_p, align 1, !dbg !7920
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7921
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !7922
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !7922
  store %struct.basic_block_def* %6, %struct.basic_block_def** %src, align 8, !dbg !7923
  %call5 = call i32 @get_max_uid(), !dbg !7924
  store i32 %call5, i32* %prev_max_uid, align 4, !dbg !7925
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7926
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !7927
  %call6 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %7, %struct.basic_block_def* %8), !dbg !7928
  store %struct.edge_def* %call6, %struct.edge_def** %redirected, align 8, !dbg !7929
  %9 = load %struct.edge_def*, %struct.edge_def** %redirected, align 8, !dbg !7930
  %tobool7 = icmp ne %struct.edge_def* %9, null, !dbg !7930
  br i1 %tobool7, label %land.lhs.true8, label %cond.true, !dbg !7930

land.lhs.true8:                                   ; preds = %land.end
  %10 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !7930
  %cmp9 = icmp eq %struct.VEC_basic_block_heap* %10, null, !dbg !7930
  br i1 %cmp9, label %cond.false, label %cond.true, !dbg !7930

cond.true:                                        ; preds = %land.lhs.true8, %land.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5453, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7930
  br label %cond.end, !dbg !7930

cond.false:                                       ; preds = %land.lhs.true8
  br label %cond.end, !dbg !7930

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7930
  %11 = load i8, i8* %latch_edge_p, align 1, !dbg !7931
  %tobool11 = icmp ne i8 %11, 0, !dbg !7931
  br i1 %tobool11, label %if.then, label %if.end, !dbg !7933

if.then:                                          ; preds = %cond.end
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !7934
  %13 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !7936
  %header = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 2, !dbg !7937
  store %struct.basic_block_def* %12, %struct.basic_block_def** %header, align 8, !dbg !7938
  %14 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !7939
  %call12 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %14), !dbg !7939
  %tobool13 = icmp ne %struct.edge_def* %call12, null, !dbg !7939
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !7939

cond.true14:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5459, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7939
  br label %cond.end16, !dbg !7939

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !7939

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !7939
  br label %if.end, !dbg !7940

if.end:                                           ; preds = %cond.end16, %cond.end
  %15 = load i32*, i32** @containing_rgn, align 8, !dbg !7941
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7941
  %src18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !7941
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src18, align 8, !dbg !7941
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !7941
  %18 = load i32, i32* %index, align 8, !dbg !7941
  %idxprom = sext i32 %18 to i64, !dbg !7941
  %arrayidx = getelementptr inbounds i32, i32* %15, i64 %idxprom, !dbg !7941
  %19 = load i32, i32* %arrayidx, align 4, !dbg !7941
  %20 = load i32*, i32** @containing_rgn, align 8, !dbg !7943
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !7943
  %index19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !7943
  %22 = load i32, i32* %index19, align 8, !dbg !7943
  %idxprom20 = sext i32 %22 to i64, !dbg !7943
  %arrayidx21 = getelementptr inbounds i32, i32* %20, i64 %idxprom20, !dbg !7943
  %23 = load i32, i32* %arrayidx21, align 4, !dbg !7943
  %cmp22 = icmp eq i32 %19, %23, !dbg !7944
  br i1 %cmp22, label %land.lhs.true24, label %if.end35, !dbg !7945

land.lhs.true24:                                  ; preds = %if.end
  %24 = load i32*, i32** @block_to_bb, align 8, !dbg !7946
  %25 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !7946
  %src25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 0, !dbg !7946
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %src25, align 8, !dbg !7946
  %index26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !7946
  %27 = load i32, i32* %index26, align 8, !dbg !7946
  %idxprom27 = sext i32 %27 to i64, !dbg !7946
  %arrayidx28 = getelementptr inbounds i32, i32* %24, i64 %idxprom27, !dbg !7946
  %28 = load i32, i32* %arrayidx28, align 4, !dbg !7946
  %29 = load i32*, i32** @block_to_bb, align 8, !dbg !7947
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !7947
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !7947
  %31 = load i32, i32* %index29, align 8, !dbg !7947
  %idxprom30 = sext i32 %31 to i64, !dbg !7947
  %arrayidx31 = getelementptr inbounds i32, i32* %29, i64 %idxprom30, !dbg !7947
  %32 = load i32, i32* %arrayidx31, align 4, !dbg !7947
  %cmp32 = icmp sgt i32 %28, %32, !dbg !7948
  br i1 %cmp32, label %if.then34, label %if.end35, !dbg !7949

if.then34:                                        ; preds = %land.lhs.true24
  store i8 1, i8* %recompute_toporder_p, align 1, !dbg !7950
  br label %if.end35, !dbg !7951

if.end35:                                         ; preds = %if.then34, %land.lhs.true24, %if.end
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !7952
  %34 = load i32, i32* %prev_max_uid, align 4, !dbg !7953
  %call36 = call %struct.rtx_def* @find_new_jump(%struct.basic_block_def* %33, %struct.basic_block_def* null, i32 %34), !dbg !7954
  store %struct.rtx_def* %call36, %struct.rtx_def** %jump, align 8, !dbg !7955
  %35 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7956
  %tobool37 = icmp ne %struct.rtx_def* %35, null, !dbg !7956
  br i1 %tobool37, label %if.then38, label %if.end39, !dbg !7958

if.then38:                                        ; preds = %if.end35
  %36 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7959
  call void @sel_init_new_insn(%struct.rtx_def* %36, i32 5), !dbg !7960
  br label %if.end39, !dbg !7960

if.end39:                                         ; preds = %if.then38, %if.end35
  %37 = load i8, i8* %recompute_toporder_p, align 1, !dbg !7961
  ret i8 %37, !dbg !7962
}

; Function Attrs: noinline nounwind uwtable
define internal void @sel_recompute_toporder() #0 !dbg !7963 {
entry:
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %rgn = alloca i32, align 4
  %postorder = alloca i32*, align 8
  %n_blocks = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7964, metadata !DIExpression()), !dbg !7965
  call void @llvm.dbg.declare(metadata i32* %n, metadata !7966, metadata !DIExpression()), !dbg !7967
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !7968, metadata !DIExpression()), !dbg !7969
  call void @llvm.dbg.declare(metadata i32** %postorder, metadata !7970, metadata !DIExpression()), !dbg !7971
  call void @llvm.dbg.declare(metadata i32* %n_blocks, metadata !7972, metadata !DIExpression()), !dbg !7973
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !7974
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !7974
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !7974
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !7974
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 3, !dbg !7974
  %2 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !7974
  %conv = sext i32 %2 to i64, !dbg !7974
  %mul = mul i64 4, %conv, !dbg !7974
  %3 = alloca i8, i64 %mul, align 16, !dbg !7974
  %4 = bitcast i8* %3 to i32*, !dbg !7974
  store i32* %4, i32** %postorder, align 8, !dbg !7975
  %5 = load i32*, i32** %postorder, align 8, !dbg !7976
  %call = call i32 @post_order_compute(i32* %5, i8 zeroext 0, i8 zeroext 0), !dbg !7977
  store i32 %call, i32* %n_blocks, align 4, !dbg !7978
  %6 = load i32*, i32** @containing_rgn, align 8, !dbg !7979
  %7 = load i32*, i32** @rgn_bb_table, align 8, !dbg !7979
  %8 = load i32*, i32** @ebb_head, align 8, !dbg !7979
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 0, !dbg !7979
  %9 = load i32, i32* %arrayidx, align 4, !dbg !7979
  %idxprom = sext i32 %9 to i64, !dbg !7979
  %arrayidx1 = getelementptr inbounds i32, i32* %7, i64 %idxprom, !dbg !7979
  %10 = load i32, i32* %arrayidx1, align 4, !dbg !7979
  %idxprom2 = sext i32 %10 to i64, !dbg !7979
  %arrayidx3 = getelementptr inbounds i32, i32* %6, i64 %idxprom2, !dbg !7979
  %11 = load i32, i32* %arrayidx3, align 4, !dbg !7979
  store i32 %11, i32* %rgn, align 4, !dbg !7980
  store i32 0, i32* %n, align 4, !dbg !7981
  %12 = load i32, i32* %n_blocks, align 4, !dbg !7983
  %sub = sub nsw i32 %12, 1, !dbg !7984
  store i32 %sub, i32* %i, align 4, !dbg !7985
  br label %for.cond, !dbg !7986

for.cond:                                         ; preds = %for.inc, %entry
  %13 = load i32, i32* %i, align 4, !dbg !7987
  %cmp = icmp sge i32 %13, 0, !dbg !7989
  br i1 %cmp, label %for.body, label %for.end, !dbg !7990

for.body:                                         ; preds = %for.cond
  %14 = load i32*, i32** @containing_rgn, align 8, !dbg !7991
  %15 = load i32*, i32** %postorder, align 8, !dbg !7991
  %16 = load i32, i32* %i, align 4, !dbg !7991
  %idxprom5 = sext i32 %16 to i64, !dbg !7991
  %arrayidx6 = getelementptr inbounds i32, i32* %15, i64 %idxprom5, !dbg !7991
  %17 = load i32, i32* %arrayidx6, align 4, !dbg !7991
  %idxprom7 = sext i32 %17 to i64, !dbg !7991
  %arrayidx8 = getelementptr inbounds i32, i32* %14, i64 %idxprom7, !dbg !7991
  %18 = load i32, i32* %arrayidx8, align 4, !dbg !7991
  %19 = load i32, i32* %rgn, align 4, !dbg !7993
  %cmp9 = icmp eq i32 %18, %19, !dbg !7994
  br i1 %cmp9, label %if.then, label %if.end, !dbg !7995

if.then:                                          ; preds = %for.body
  %20 = load i32, i32* %n, align 4, !dbg !7996
  %21 = load i32*, i32** @block_to_bb, align 8, !dbg !7998
  %22 = load i32*, i32** %postorder, align 8, !dbg !7998
  %23 = load i32, i32* %i, align 4, !dbg !7998
  %idxprom11 = sext i32 %23 to i64, !dbg !7998
  %arrayidx12 = getelementptr inbounds i32, i32* %22, i64 %idxprom11, !dbg !7998
  %24 = load i32, i32* %arrayidx12, align 4, !dbg !7998
  %idxprom13 = sext i32 %24 to i64, !dbg !7998
  %arrayidx14 = getelementptr inbounds i32, i32* %21, i64 %idxprom13, !dbg !7998
  store i32 %20, i32* %arrayidx14, align 4, !dbg !7999
  %25 = load i32*, i32** %postorder, align 8, !dbg !8000
  %26 = load i32, i32* %i, align 4, !dbg !8001
  %idxprom15 = sext i32 %26 to i64, !dbg !8000
  %arrayidx16 = getelementptr inbounds i32, i32* %25, i64 %idxprom15, !dbg !8000
  %27 = load i32, i32* %arrayidx16, align 4, !dbg !8000
  %28 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8002
  %29 = load i32*, i32** @ebb_head, align 8, !dbg !8002
  %30 = load i32, i32* %n, align 4, !dbg !8002
  %idxprom17 = sext i32 %30 to i64, !dbg !8002
  %arrayidx18 = getelementptr inbounds i32, i32* %29, i64 %idxprom17, !dbg !8002
  %31 = load i32, i32* %arrayidx18, align 4, !dbg !8002
  %idxprom19 = sext i32 %31 to i64, !dbg !8002
  %arrayidx20 = getelementptr inbounds i32, i32* %28, i64 %idxprom19, !dbg !8002
  store i32 %27, i32* %arrayidx20, align 4, !dbg !8003
  %32 = load i32, i32* %n, align 4, !dbg !8004
  %inc = add nsw i32 %32, 1, !dbg !8004
  store i32 %inc, i32* %n, align 4, !dbg !8004
  br label %if.end, !dbg !8005

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !7993

for.inc:                                          ; preds = %if.end
  %33 = load i32, i32* %i, align 4, !dbg !8006
  %dec = add nsw i32 %33, -1, !dbg !8006
  store i32 %dec, i32* %i, align 4, !dbg !8006
  br label %for.cond, !dbg !8007, !llvm.loop !8008

for.end:                                          ; preds = %for.cond
  %34 = load i32, i32* %n, align 4, !dbg !8010
  %35 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !8010
  %36 = load i32, i32* %rgn, align 4, !dbg !8010
  %idxprom21 = sext i32 %36 to i64, !dbg !8010
  %arrayidx22 = getelementptr inbounds %struct.region, %struct.region* %35, i64 %idxprom21, !dbg !8010
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx22, i32 0, i32 0, !dbg !8010
  %37 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !8010
  %cmp23 = icmp eq i32 %34, %37, !dbg !8010
  br i1 %cmp23, label %cond.false, label %cond.true, !dbg !8010

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3542, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8010
  br label %cond.end, !dbg !8010

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !8010

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8010
  ret void, !dbg !8011
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @purge_empty_blocks() #0 !dbg !8012 {
entry:
  %i = alloca i32, align 4
  %b = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8013, metadata !DIExpression()), !dbg !8014
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8015
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8015
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8015
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8015
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 2, !dbg !8015
  %2 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8015
  %tobool = icmp ne %struct.VEC_basic_block_gc* %2, null, !dbg !8015
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8015

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8015
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !8015
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8015
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8015
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 2, !dbg !8015
  %5 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !8015
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %5, i32 0, i32 0, !dbg !8015
  br label %cond.end, !dbg !8015

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8015

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8015
  %6 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8015
  %7 = load i32*, i32** @ebb_head, align 8, !dbg !8015
  %arrayidx = getelementptr inbounds i32, i32* %7, i64 0, !dbg !8015
  %8 = load i32, i32* %arrayidx, align 4, !dbg !8015
  %idxprom = sext i32 %8 to i64, !dbg !8015
  %arrayidx4 = getelementptr inbounds i32, i32* %6, i64 %idxprom, !dbg !8015
  %9 = load i32, i32* %arrayidx4, align 4, !dbg !8015
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %9), !dbg !8015
  %call5 = call zeroext i8 @sel_is_loop_preheader_p(%struct.basic_block_def* %call), !dbg !8016
  %conv = zext i8 %call5 to i32, !dbg !8016
  %tobool6 = icmp ne i32 %conv, 0, !dbg !8016
  %10 = zext i1 %tobool6 to i64, !dbg !8016
  %cond7 = select i1 %tobool6, i32 1, i32 0, !dbg !8016
  store i32 %cond7, i32* %i, align 4, !dbg !8014
  br label %while.cond, !dbg !8017

while.cond:                                       ; preds = %if.end, %if.then, %cond.end
  %11 = load i32, i32* %i, align 4, !dbg !8018
  %12 = load i32, i32* @current_nr_blocks, align 4, !dbg !8019
  %cmp = icmp slt i32 %11, %12, !dbg !8020
  br i1 %cmp, label %while.body, label %while.end, !dbg !8017

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b, metadata !8021, metadata !DIExpression()), !dbg !8023
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8024
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !8024
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !8024
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !8024
  %x_basic_block_info11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 2, !dbg !8024
  %15 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info11, align 8, !dbg !8024
  %tobool12 = icmp ne %struct.VEC_basic_block_gc* %15, null, !dbg !8024
  br i1 %tobool12, label %cond.true13, label %cond.false18, !dbg !8024

cond.true13:                                      ; preds = %while.body
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8024
  %add.ptr14 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !8024
  %cfg15 = getelementptr inbounds %struct.function, %struct.function* %add.ptr14, i32 0, i32 1, !dbg !8024
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg15, align 8, !dbg !8024
  %x_basic_block_info16 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !8024
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info16, align 8, !dbg !8024
  %base17 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %18, i32 0, i32 0, !dbg !8024
  br label %cond.end19, !dbg !8024

cond.false18:                                     ; preds = %while.body
  br label %cond.end19, !dbg !8024

cond.end19:                                       ; preds = %cond.false18, %cond.true13
  %cond20 = phi %struct.VEC_basic_block_base* [ %base17, %cond.true13 ], [ null, %cond.false18 ], !dbg !8024
  %19 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8024
  %20 = load i32*, i32** @ebb_head, align 8, !dbg !8024
  %21 = load i32, i32* %i, align 4, !dbg !8024
  %idxprom21 = sext i32 %21 to i64, !dbg !8024
  %arrayidx22 = getelementptr inbounds i32, i32* %20, i64 %idxprom21, !dbg !8024
  %22 = load i32, i32* %arrayidx22, align 4, !dbg !8024
  %idxprom23 = sext i32 %22 to i64, !dbg !8024
  %arrayidx24 = getelementptr inbounds i32, i32* %19, i64 %idxprom23, !dbg !8024
  %23 = load i32, i32* %arrayidx24, align 4, !dbg !8024
  %call25 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond20, i32 %23), !dbg !8024
  store %struct.basic_block_def* %call25, %struct.basic_block_def** %b, align 8, !dbg !8023
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %b, align 8, !dbg !8025
  %call26 = call zeroext i8 @maybe_tidy_empty_bb(%struct.basic_block_def* %24, i8 zeroext 0), !dbg !8027
  %tobool27 = icmp ne i8 %call26, 0, !dbg !8027
  br i1 %tobool27, label %if.then, label %if.end, !dbg !8028

if.then:                                          ; preds = %cond.end19
  br label %while.cond, !dbg !8029, !llvm.loop !8030

if.end:                                           ; preds = %cond.end19
  %25 = load i32, i32* %i, align 4, !dbg !8032
  %inc = add nsw i32 %25, 1, !dbg !8032
  store i32 %inc, i32* %i, align 4, !dbg !8032
  br label %while.cond, !dbg !8017, !llvm.loop !8030

while.end:                                        ; preds = %while.cond
  ret void, !dbg !8033
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_is_loop_preheader_p(%struct.basic_block_def* %bb) #0 !dbg !8034 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %outer = alloca %struct.loop*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8035, metadata !DIExpression()), !dbg !8036
  %0 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8037
  %tobool = icmp ne %struct.loop* %0, null, !dbg !8037
  br i1 %tobool, label %if.then, label %if.end25, !dbg !8039

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.loop** %outer, metadata !8040, metadata !DIExpression()), !dbg !8042
  %1 = load i8, i8* @preheader_removed, align 1, !dbg !8043
  %tobool1 = icmp ne i8 %1, 0, !dbg !8043
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !8045

if.then2:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !8046
  br label %return, !dbg !8046

if.end:                                           ; preds = %if.then
  %2 = load i32*, i32** @block_to_bb, align 8, !dbg !8047
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8047
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !8047
  %4 = load i32, i32* %index, align 8, !dbg !8047
  %idxprom = sext i32 %4 to i64, !dbg !8047
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 %idxprom, !dbg !8047
  %5 = load i32, i32* %arrayidx, align 4, !dbg !8047
  %cmp = icmp eq i32 %5, 0, !dbg !8049
  br i1 %cmp, label %if.then3, label %if.end4, !dbg !8050

if.then3:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !8051
  br label %return, !dbg !8051

if.end4:                                          ; preds = %if.end
  %6 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8052
  %header = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 2, !dbg !8054
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !8054
  %call = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %7), !dbg !8055
  %tobool5 = icmp ne i8 %call, 0, !dbg !8055
  br i1 %tobool5, label %if.then6, label %if.end15, !dbg !8056

if.then6:                                         ; preds = %if.end4
  %8 = load i32*, i32** @block_to_bb, align 8, !dbg !8057
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8057
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !8057
  %10 = load i32, i32* %index7, align 8, !dbg !8057
  %idxprom8 = sext i32 %10 to i64, !dbg !8057
  %arrayidx9 = getelementptr inbounds i32, i32* %8, i64 %idxprom8, !dbg !8057
  %11 = load i32, i32* %arrayidx9, align 4, !dbg !8057
  %12 = load i32*, i32** @block_to_bb, align 8, !dbg !8057
  %13 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8057
  %header10 = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 2, !dbg !8057
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %header10, align 8, !dbg !8057
  %index11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !8057
  %15 = load i32, i32* %index11, align 8, !dbg !8057
  %idxprom12 = sext i32 %15 to i64, !dbg !8057
  %arrayidx13 = getelementptr inbounds i32, i32* %12, i64 %idxprom12, !dbg !8057
  %16 = load i32, i32* %arrayidx13, align 4, !dbg !8057
  %cmp14 = icmp slt i32 %11, %16, !dbg !8057
  br i1 %cmp14, label %cond.true, label %cond.false, !dbg !8057

cond.true:                                        ; preds = %if.then6
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 6087, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8057
  br label %cond.end, !dbg !8057

cond.false:                                       ; preds = %if.then6
  br label %cond.end, !dbg !8057

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8057
  br label %if.end15, !dbg !8057

if.end15:                                         ; preds = %cond.end, %if.end4
  %17 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8058
  %call16 = call %struct.loop* @loop_outer(%struct.loop* %17), !dbg !8060
  store %struct.loop* %call16, %struct.loop** %outer, align 8, !dbg !8061
  br label %for.cond, !dbg !8062

for.cond:                                         ; preds = %for.inc, %if.end15
  %18 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !8063
  %tobool17 = icmp ne %struct.loop* %18, null, !dbg !8065
  br i1 %tobool17, label %for.body, label %for.end, !dbg !8065

for.body:                                         ; preds = %for.cond
  %19 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !8066
  %call18 = call zeroext i8 @considered_for_pipelining_p(%struct.loop* %19), !dbg !8068
  %conv = zext i8 %call18 to i32, !dbg !8068
  %tobool19 = icmp ne i32 %conv, 0, !dbg !8068
  br i1 %tobool19, label %land.lhs.true, label %if.end23, !dbg !8069

land.lhs.true:                                    ; preds = %for.body
  %20 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !8070
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 3, !dbg !8071
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !8071
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8072
  %cmp20 = icmp eq %struct.basic_block_def* %21, %22, !dbg !8073
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !8074

if.then22:                                        ; preds = %land.lhs.true
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 6095, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8075
  br label %if.end23, !dbg !8075

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %for.body
  br label %for.inc, !dbg !8072

for.inc:                                          ; preds = %if.end23
  %23 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !8076
  %call24 = call %struct.loop* @loop_outer(%struct.loop* %23), !dbg !8077
  store %struct.loop* %call24, %struct.loop** %outer, align 8, !dbg !8078
  br label %for.cond, !dbg !8079, !llvm.loop !8080

for.end:                                          ; preds = %for.cond
  br label %if.end25, !dbg !8082

if.end25:                                         ; preds = %for.end, %entry
  store i8 0, i8* %retval, align 1, !dbg !8083
  br label %return, !dbg !8083

return:                                           ; preds = %if.end25, %if.then3, %if.then2
  %24 = load i8, i8* %retval, align 1, !dbg !8084
  ret i8 %24, !dbg !8084
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %vec_, i32 %ix_) #0 !dbg !8085 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_sel_region_bb_info_def_base* %vec_, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, metadata !8090, metadata !DIExpression()), !dbg !8091
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8092, metadata !DIExpression()), !dbg !8091
  %0 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !8091
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_base* %0, null, !dbg !8091
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8091

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8091
  %2 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !8091
  %num = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %2, i32 0, i32 0, !dbg !8091
  %3 = load i32, i32* %num, align 8, !dbg !8091
  %cmp = icmp ult i32 %1, %3, !dbg !8091
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8093
  %land.ext = zext i1 %4 to i32, !dbg !8091
  %5 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !8091
  %vec = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %5, i32 0, i32 2, !dbg !8091
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8091
  %idxprom = zext i32 %6 to i64, !dbg !8091
  %arrayidx = getelementptr inbounds [1 x %struct.sel_region_bb_info_def], [1 x %struct.sel_region_bb_info_def]* %vec, i64 0, i64 %idxprom, !dbg !8091
  ret %struct.sel_region_bb_info_def* %arrayidx, !dbg !8091
}

declare dso_local void @remove_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_seqno_by_preds(%struct.rtx_def* %insn) #0 !dbg !8094 {
entry:
  %retval = alloca i32, align 4
  %insn.addr = alloca %struct.rtx_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  %preds = alloca %struct.rtx_def**, align 8
  %n = alloca i32, align 4
  %i = alloca i32, align 4
  %seqno = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8095, metadata !DIExpression()), !dbg !8096
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8097, metadata !DIExpression()), !dbg !8098
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8099
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8099
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8099
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8099
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8099
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8099
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !8098
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8100, metadata !DIExpression()), !dbg !8101
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8102
  store %struct.rtx_def* %2, %struct.rtx_def** %tmp, align 8, !dbg !8101
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !8103, metadata !DIExpression()), !dbg !8104
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8105
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !8105
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8105
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8105
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 0, !dbg !8105
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8105
  store %struct.rtx_def* %5, %struct.rtx_def** %head, align 8, !dbg !8104
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %preds, metadata !8106, metadata !DIExpression()), !dbg !8107
  call void @llvm.dbg.declare(metadata i32* %n, metadata !8108, metadata !DIExpression()), !dbg !8109
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8110, metadata !DIExpression()), !dbg !8111
  call void @llvm.dbg.declare(metadata i32* %seqno, metadata !8112, metadata !DIExpression()), !dbg !8113
  br label %while.cond, !dbg !8114

while.cond:                                       ; preds = %if.end, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8115
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !8116
  %cmp = icmp ne %struct.rtx_def* %6, %7, !dbg !8117
  br i1 %cmp, label %while.body, label %while.end, !dbg !8114

while.body:                                       ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8118
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !8118
  %bf.load = load i32, i32* %9, align 8, !dbg !8118
  %bf.clear = and i32 %bf.load, 65535, !dbg !8118
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !8118
  br i1 %cmp1, label %if.then, label %lor.lhs.false, !dbg !8118

lor.lhs.false:                                    ; preds = %while.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8118
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8118
  %bf.load2 = load i32, i32* %11, align 8, !dbg !8118
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !8118
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !8118
  br i1 %cmp4, label %if.then, label %lor.lhs.false5, !dbg !8118

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8118
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !8118
  %bf.load6 = load i32, i32* %13, align 8, !dbg !8118
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !8118
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !8118
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !8118

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8118
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !8118
  %bf.load10 = load i32, i32* %15, align 8, !dbg !8118
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !8118
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !8118
  br i1 %cmp12, label %if.then, label %if.else, !dbg !8120

if.then:                                          ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %while.body
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8121
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %16, null, !dbg !8121
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8121

cond.true:                                        ; preds = %if.then
  %17 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8121
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %17, i32 0, i32 0, !dbg !8121
  br label %cond.end, !dbg !8121

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8121
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8121
  %tobool13 = icmp ne %struct.VEC_int_heap* %18, null, !dbg !8121
  br i1 %tobool13, label %cond.true14, label %cond.false16, !dbg !8121

cond.true14:                                      ; preds = %cond.end
  %19 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8121
  %base15 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %19, i32 0, i32 0, !dbg !8121
  br label %cond.end17, !dbg !8121

cond.false16:                                     ; preds = %cond.end
  br label %cond.end17, !dbg !8121

cond.end17:                                       ; preds = %cond.false16, %cond.true14
  %cond18 = phi %struct.VEC_int_base* [ %base15, %cond.true14 ], [ null, %cond.false16 ], !dbg !8121
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8121
  %u19 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !8121
  %fld20 = bitcast %union.u* %u19 to [1 x %union.rtunion_def]*, !dbg !8121
  %arrayidx21 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld20, i64 0, i64 0, !dbg !8121
  %rt_int = bitcast %union.rtunion_def* %arrayidx21 to i32*, !dbg !8121
  %21 = load i32, i32* %rt_int, align 8, !dbg !8121
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond18, i32 %21), !dbg !8121
  %call22 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !8121
  %seqno23 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call22, i32 0, i32 2, !dbg !8121
  %22 = load i32, i32* %seqno23, align 4, !dbg !8121
  store i32 %22, i32* %retval, align 4, !dbg !8122
  br label %return, !dbg !8122

if.else:                                          ; preds = %lor.lhs.false9
  %23 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8123
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !8123
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8123
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !8123
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !8123
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8123
  store %struct.rtx_def* %24, %struct.rtx_def** %tmp, align 8, !dbg !8124
  br label %if.end

if.end:                                           ; preds = %if.else
  br label %while.cond, !dbg !8114, !llvm.loop !8125

while.end:                                        ; preds = %while.cond
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8127
  call void @cfg_preds(%struct.basic_block_def* %25, %struct.rtx_def*** %preds, i32* %n), !dbg !8128
  store i32 0, i32* %i, align 4, !dbg !8129
  store i32 -1, i32* %seqno, align 4, !dbg !8131
  br label %for.cond, !dbg !8132

for.cond:                                         ; preds = %for.inc, %while.end
  %26 = load i32, i32* %i, align 4, !dbg !8133
  %27 = load i32, i32* %n, align 4, !dbg !8135
  %cmp27 = icmp slt i32 %26, %27, !dbg !8136
  br i1 %cmp27, label %for.body, label %for.end, !dbg !8137

for.body:                                         ; preds = %for.cond
  %28 = load i32, i32* %seqno, align 4, !dbg !8138
  %29 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8138
  %tobool28 = icmp ne %struct.VEC_sel_insn_data_def_heap* %29, null, !dbg !8138
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !8138

cond.true29:                                      ; preds = %for.body
  %30 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8138
  %base30 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %30, i32 0, i32 0, !dbg !8138
  br label %cond.end32, !dbg !8138

cond.false31:                                     ; preds = %for.body
  br label %cond.end32, !dbg !8138

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_sel_insn_data_def_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !8138
  %31 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8138
  %tobool34 = icmp ne %struct.VEC_int_heap* %31, null, !dbg !8138
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !8138

cond.true35:                                      ; preds = %cond.end32
  %32 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8138
  %base36 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %32, i32 0, i32 0, !dbg !8138
  br label %cond.end38, !dbg !8138

cond.false37:                                     ; preds = %cond.end32
  br label %cond.end38, !dbg !8138

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_int_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !8138
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %preds, align 8, !dbg !8138
  %34 = load i32, i32* %i, align 4, !dbg !8138
  %idxprom = sext i32 %34 to i64, !dbg !8138
  %arrayidx40 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %33, i64 %idxprom, !dbg !8138
  %35 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx40, align 8, !dbg !8138
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !8138
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !8138
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !8138
  %rt_int44 = bitcast %union.rtunion_def* %arrayidx43 to i32*, !dbg !8138
  %36 = load i32, i32* %rt_int44, align 8, !dbg !8138
  %call45 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond39, i32 %36), !dbg !8138
  %call46 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond33, i32 %call45), !dbg !8138
  %seqno47 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call46, i32 0, i32 2, !dbg !8138
  %37 = load i32, i32* %seqno47, align 4, !dbg !8138
  %cmp48 = icmp sgt i32 %28, %37, !dbg !8138
  br i1 %cmp48, label %cond.true49, label %cond.false50, !dbg !8138

cond.true49:                                      ; preds = %cond.end38
  %38 = load i32, i32* %seqno, align 4, !dbg !8138
  br label %cond.end72, !dbg !8138

cond.false50:                                     ; preds = %cond.end38
  %39 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8138
  %tobool51 = icmp ne %struct.VEC_sel_insn_data_def_heap* %39, null, !dbg !8138
  br i1 %tobool51, label %cond.true52, label %cond.false54, !dbg !8138

cond.true52:                                      ; preds = %cond.false50
  %40 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8138
  %base53 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %40, i32 0, i32 0, !dbg !8138
  br label %cond.end55, !dbg !8138

cond.false54:                                     ; preds = %cond.false50
  br label %cond.end55, !dbg !8138

cond.end55:                                       ; preds = %cond.false54, %cond.true52
  %cond56 = phi %struct.VEC_sel_insn_data_def_base* [ %base53, %cond.true52 ], [ null, %cond.false54 ], !dbg !8138
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8138
  %tobool57 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !8138
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !8138

cond.true58:                                      ; preds = %cond.end55
  %42 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8138
  %base59 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %42, i32 0, i32 0, !dbg !8138
  br label %cond.end61, !dbg !8138

cond.false60:                                     ; preds = %cond.end55
  br label %cond.end61, !dbg !8138

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_int_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !8138
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %preds, align 8, !dbg !8138
  %44 = load i32, i32* %i, align 4, !dbg !8138
  %idxprom63 = sext i32 %44 to i64, !dbg !8138
  %arrayidx64 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %43, i64 %idxprom63, !dbg !8138
  %45 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx64, align 8, !dbg !8138
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !8138
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !8138
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !8138
  %rt_int68 = bitcast %union.rtunion_def* %arrayidx67 to i32*, !dbg !8138
  %46 = load i32, i32* %rt_int68, align 8, !dbg !8138
  %call69 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond62, i32 %46), !dbg !8138
  %call70 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond56, i32 %call69), !dbg !8138
  %seqno71 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call70, i32 0, i32 2, !dbg !8138
  %47 = load i32, i32* %seqno71, align 4, !dbg !8138
  br label %cond.end72, !dbg !8138

cond.end72:                                       ; preds = %cond.end61, %cond.true49
  %cond73 = phi i32 [ %38, %cond.true49 ], [ %47, %cond.end61 ], !dbg !8138
  store i32 %cond73, i32* %seqno, align 4, !dbg !8139
  br label %for.inc, !dbg !8140

for.inc:                                          ; preds = %cond.end72
  %48 = load i32, i32* %i, align 4, !dbg !8141
  %inc = add nsw i32 %48, 1, !dbg !8141
  store i32 %inc, i32* %i, align 4, !dbg !8141
  br label %for.cond, !dbg !8142, !llvm.loop !8143

for.end:                                          ; preds = %for.cond
  %49 = load i32, i32* %seqno, align 4, !dbg !8145
  store i32 %49, i32* %retval, align 4, !dbg !8146
  br label %return, !dbg !8146

return:                                           ; preds = %for.end, %cond.end17
  %50 = load i32, i32* %retval, align 4, !dbg !8147
  ret i32 %50, !dbg !8147
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg_preds(%struct.basic_block_def* %bb, %struct.rtx_def*** %preds, i32* %n) #0 !dbg !8148 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %preds.addr = alloca %struct.rtx_def***, align 8
  %n.addr = alloca i32*, align 8
  %size = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8152, metadata !DIExpression()), !dbg !8153
  store %struct.rtx_def*** %preds, %struct.rtx_def**** %preds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def**** %preds.addr, metadata !8154, metadata !DIExpression()), !dbg !8155
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !8156, metadata !DIExpression()), !dbg !8157
  call void @llvm.dbg.declare(metadata i32* %size, metadata !8158, metadata !DIExpression()), !dbg !8159
  store i32 0, i32* %size, align 4, !dbg !8159
  %0 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !8160
  store %struct.rtx_def** null, %struct.rtx_def*** %0, align 8, !dbg !8161
  %1 = load i32*, i32** %n.addr, align 8, !dbg !8162
  store i32 0, i32* %1, align 4, !dbg !8163
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8164
  %3 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !8165
  %4 = load i32*, i32** %n.addr, align 8, !dbg !8166
  call void @cfg_preds_1(%struct.basic_block_def* %2, %struct.rtx_def*** %3, i32* %4, i32* %size), !dbg !8167
  ret void, !dbg !8168
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_extend_global_bb_info() #0 !dbg !8169 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8170
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8170
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8170
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8170
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !8170
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !8170
  call void @VEC_sel_global_bb_info_def_heap_safe_grow_cleared(%struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, i32 %2), !dbg !8170
  ret void, !dbg !8171
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_global_bb_info_def_heap_safe_grow_cleared(%struct.VEC_sel_global_bb_info_def_heap** %vec_, i32 %size_) #0 !dbg !8172 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_sel_global_bb_info_def_heap** %vec_, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, metadata !8176, metadata !DIExpression()), !dbg !8177
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !8178, metadata !DIExpression()), !dbg !8177
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !8179, metadata !DIExpression()), !dbg !8177
  %0 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8177
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %0, align 8, !dbg !8177
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %1, null, !dbg !8177
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8177

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8177
  %3 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %2, align 8, !dbg !8177
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %3, i32 0, i32 0, !dbg !8177
  br label %cond.end, !dbg !8177

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8177

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8177
  %call = call i32 @VEC_sel_global_bb_info_def_base_length(%struct.VEC_sel_global_bb_info_def_base* %cond), !dbg !8177
  store i32 %call, i32* %oldsize, align 4, !dbg !8177
  %4 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8177
  %5 = load i32, i32* %size_.addr, align 4, !dbg !8177
  call void @VEC_sel_global_bb_info_def_heap_safe_grow(%struct.VEC_sel_global_bb_info_def_heap** %4, i32 %5), !dbg !8177
  %6 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8177
  %7 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %6, align 8, !dbg !8177
  %tobool1 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %7, null, !dbg !8177
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8177

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8177
  %9 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %8, align 8, !dbg !8177
  %base3 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %9, i32 0, i32 0, !dbg !8177
  br label %cond.end5, !dbg !8177

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8177

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8177
  %call7 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_address(%struct.VEC_sel_global_bb_info_def_base* %cond6), !dbg !8177
  %10 = load i32, i32* %oldsize, align 4, !dbg !8177
  %idxprom = sext i32 %10 to i64, !dbg !8177
  %arrayidx = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call7, i64 %idxprom, !dbg !8177
  %11 = bitcast %struct.sel_global_bb_info_def* %arrayidx to i8*, !dbg !8177
  %12 = load i32, i32* %size_.addr, align 4, !dbg !8177
  %13 = load i32, i32* %oldsize, align 4, !dbg !8177
  %sub = sub nsw i32 %12, %13, !dbg !8177
  %conv = sext i32 %sub to i64, !dbg !8177
  %mul = mul i64 16, %conv, !dbg !8177
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !8177
  ret void, !dbg !8177
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_finish_global_bb_info() #0 !dbg !8180 {
entry:
  call void @VEC_sel_global_bb_info_def_heap_free(%struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info), !dbg !8181
  ret void, !dbg !8182
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_global_bb_info_def_heap_free(%struct.VEC_sel_global_bb_info_def_heap** %vec_) #0 !dbg !8183 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_heap**, align 8
  store %struct.VEC_sel_global_bb_info_def_heap** %vec_, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, metadata !8186, metadata !DIExpression()), !dbg !8187
  %0 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8188
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %0, align 8, !dbg !8188
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %1, null, !dbg !8188
  br i1 %tobool, label %if.then, label %if.end, !dbg !8187

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8188
  %3 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %2, align 8, !dbg !8188
  %4 = bitcast %struct.VEC_sel_global_bb_info_def_heap* %3 to i8*, !dbg !8188
  call void @free(i8* %4), !dbg !8188
  br label %if.end, !dbg !8188

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !8187
  store %struct.VEC_sel_global_bb_info_def_heap* null, %struct.VEC_sel_global_bb_info_def_heap** %5, align 8, !dbg !8187
  ret void, !dbg !8187
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_lv_sets() #0 !dbg !8190 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8191, metadata !DIExpression()), !dbg !8192
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8193
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8193
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8193
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8193
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 0, !dbg !8193
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8193
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 6, !dbg !8193
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8193
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb, align 8, !dbg !8193
  br label %for.cond, !dbg !8193

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8195
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8195
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !8195
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8195
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8195
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 1, !dbg !8195
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8195
  %cmp = icmp ne %struct.basic_block_def* %4, %7, !dbg !8195
  br i1 %cmp, label %for.body, label %for.end, !dbg !8193

for.body:                                         ; preds = %for.cond
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8197
  call void @init_lv_set(%struct.basic_block_def* %8), !dbg !8198
  br label %for.inc, !dbg !8198

for.inc:                                          ; preds = %for.body
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8195
  %next_bb3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 6, !dbg !8195
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb3, align 8, !dbg !8195
  store %struct.basic_block_def* %10, %struct.basic_block_def** %bb, align 8, !dbg !8195
  br label %for.cond, !dbg !8195, !llvm.loop !8199

for.end:                                          ; preds = %for.cond
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8201
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !8201
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !8201
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !8201
  %x_exit_block_ptr6 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !8201
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr6, align 8, !dbg !8201
  call void @init_lv_set(%struct.basic_block_def* %13), !dbg !8202
  ret void, !dbg !8203
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_lv_set(%struct.basic_block_def* %bb) #0 !dbg !8204 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8205, metadata !DIExpression()), !dbg !8206
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8207
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !8207
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8207

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8207
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8207
  br label %cond.end, !dbg !8207

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8207

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8207
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8207
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8207
  %3 = load i32, i32* %index, align 8, !dbg !8207
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !8207
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 1, !dbg !8207
  %4 = load i8, i8* %lv_set_valid_p, align 8, !dbg !8207
  %tobool1 = icmp ne i8 %4, 0, !dbg !8207
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !8207

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4093, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8207
  br label %cond.end4, !dbg !8207

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !8207

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !8207
  %call6 = call %struct.bitmap_head_def* @get_regset_from_pool(), !dbg !8208
  %5 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8209
  %tobool7 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %5, null, !dbg !8209
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !8209

cond.true8:                                       ; preds = %cond.end4
  %6 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8209
  %base9 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8209
  br label %cond.end11, !dbg !8209

cond.false10:                                     ; preds = %cond.end4
  br label %cond.end11, !dbg !8209

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !8209
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8209
  %index13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8209
  %8 = load i32, i32* %index13, align 8, !dbg !8209
  %call14 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond12, i32 %8), !dbg !8209
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call14, i32 0, i32 0, !dbg !8209
  store %struct.bitmap_head_def* %call6, %struct.bitmap_head_def** %lv_set, align 8, !dbg !8210
  %9 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8211
  %tobool15 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %9, null, !dbg !8211
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !8211

cond.true16:                                      ; preds = %cond.end11
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8211
  %base17 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %10, i32 0, i32 0, !dbg !8211
  br label %cond.end19, !dbg !8211

cond.false18:                                     ; preds = %cond.end11
  br label %cond.end19, !dbg !8211

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !8211
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8211
  %index21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !8211
  %12 = load i32, i32* %index21, align 8, !dbg !8211
  %call22 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond20, i32 %12), !dbg !8211
  %lv_set23 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call22, i32 0, i32 0, !dbg !8211
  %13 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set23, align 8, !dbg !8211
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8211
  %index24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !8211
  %15 = load i32, i32* %index24, align 8, !dbg !8211
  %call25 = call %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %15), !dbg !8211
  %in = getelementptr inbounds %struct.df_lr_bb_info, %struct.df_lr_bb_info* %call25, i32 0, i32 2, !dbg !8211
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %in, align 8, !dbg !8211
  call void @bitmap_copy(%struct.bitmap_head_def* %13, %struct.bitmap_head_def* %16), !dbg !8211
  %17 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8212
  %tobool26 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %17, null, !dbg !8212
  br i1 %tobool26, label %cond.true27, label %cond.false29, !dbg !8212

cond.true27:                                      ; preds = %cond.end19
  %18 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8212
  %base28 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %18, i32 0, i32 0, !dbg !8212
  br label %cond.end30, !dbg !8212

cond.false29:                                     ; preds = %cond.end19
  br label %cond.end30, !dbg !8212

cond.end30:                                       ; preds = %cond.false29, %cond.true27
  %cond31 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base28, %cond.true27 ], [ null, %cond.false29 ], !dbg !8212
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8212
  %index32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 9, !dbg !8212
  %20 = load i32, i32* %index32, align 8, !dbg !8212
  %call33 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond31, i32 %20), !dbg !8212
  %lv_set_valid_p34 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call33, i32 0, i32 1, !dbg !8212
  store i8 1, i8* %lv_set_valid_p34, align 8, !dbg !8213
  ret void, !dbg !8214
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_lv_sets() #0 !dbg !8215 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8216, metadata !DIExpression()), !dbg !8217
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8218
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !8218
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8218
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8218
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 1, !dbg !8218
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8218
  call void @free_lv_set(%struct.basic_block_def* %2), !dbg !8219
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8220
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !8220
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8220
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8220
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 0, !dbg !8220
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8220
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 6, !dbg !8220
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8220
  store %struct.basic_block_def* %6, %struct.basic_block_def** %bb, align 8, !dbg !8220
  br label %for.cond, !dbg !8220

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8222
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8222
  %add.ptr3 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !8222
  %cfg4 = getelementptr inbounds %struct.function, %struct.function* %add.ptr3, i32 0, i32 1, !dbg !8222
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg4, align 8, !dbg !8222
  %x_exit_block_ptr5 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 1, !dbg !8222
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr5, align 8, !dbg !8222
  %cmp = icmp ne %struct.basic_block_def* %7, %10, !dbg !8222
  br i1 %cmp, label %for.body, label %for.end, !dbg !8220

for.body:                                         ; preds = %for.cond
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8224
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %11, null, !dbg !8224
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8224

cond.true:                                        ; preds = %for.body
  %12 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8224
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %12, i32 0, i32 0, !dbg !8224
  br label %cond.end, !dbg !8224

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8224
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8224
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !8224
  %14 = load i32, i32* %index, align 8, !dbg !8224
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %14), !dbg !8224
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 0, !dbg !8224
  %15 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !8224
  %tobool6 = icmp ne %struct.bitmap_head_def* %15, null, !dbg !8224
  br i1 %tobool6, label %if.then, label %if.end, !dbg !8226

if.then:                                          ; preds = %cond.end
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8227
  call void @free_lv_set(%struct.basic_block_def* %16), !dbg !8228
  br label %if.end, !dbg !8228

if.end:                                           ; preds = %if.then, %cond.end
  br label %for.inc, !dbg !8224

for.inc:                                          ; preds = %if.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8222
  %next_bb7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 6, !dbg !8222
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb7, align 8, !dbg !8222
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !8222
  br label %for.cond, !dbg !8222, !llvm.loop !8229

for.end:                                          ; preds = %for.cond
  ret void, !dbg !8231
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_lv_set(%struct.basic_block_def* %bb) #0 !dbg !8232 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8233, metadata !DIExpression()), !dbg !8234
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8235
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !8235
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8235

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8235
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8235
  br label %cond.end, !dbg !8235

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8235

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8235
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8235
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8235
  %3 = load i32, i32* %index, align 8, !dbg !8235
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !8235
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 0, !dbg !8235
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !8235
  %cmp = icmp ne %struct.bitmap_head_def* %4, null, !dbg !8235
  br i1 %cmp, label %cond.false2, label %cond.true1, !dbg !8235

cond.true1:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4128, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8235
  br label %cond.end3, !dbg !8235

cond.false2:                                      ; preds = %cond.end
  br label %cond.end3, !dbg !8235

cond.end3:                                        ; preds = %cond.false2, %cond.true1
  %cond4 = phi i32 [ 0, %cond.true1 ], [ 0, %cond.false2 ], !dbg !8235
  %5 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8236
  %tobool5 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %5, null, !dbg !8236
  br i1 %tobool5, label %cond.true6, label %cond.false8, !dbg !8236

cond.true6:                                       ; preds = %cond.end3
  %6 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8236
  %base7 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8236
  br label %cond.end9, !dbg !8236

cond.false8:                                      ; preds = %cond.end3
  br label %cond.end9, !dbg !8236

cond.end9:                                        ; preds = %cond.false8, %cond.true6
  %cond10 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base7, %cond.true6 ], [ null, %cond.false8 ], !dbg !8236
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8236
  %index11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8236
  %8 = load i32, i32* %index11, align 8, !dbg !8236
  %call12 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond10, i32 %8), !dbg !8236
  %lv_set13 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call12, i32 0, i32 0, !dbg !8236
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set13, align 8, !dbg !8236
  call void @return_regset_to_pool(%struct.bitmap_head_def* %9), !dbg !8237
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8238
  %tobool14 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !8238
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !8238

cond.true15:                                      ; preds = %cond.end9
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8238
  %base16 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %11, i32 0, i32 0, !dbg !8238
  br label %cond.end18, !dbg !8238

cond.false17:                                     ; preds = %cond.end9
  br label %cond.end18, !dbg !8238

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !8238
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8238
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !8238
  %13 = load i32, i32* %index20, align 8, !dbg !8238
  %call21 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond19, i32 %13), !dbg !8238
  %lv_set22 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call21, i32 0, i32 0, !dbg !8238
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %lv_set22, align 8, !dbg !8239
  %14 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8240
  %tobool23 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %14, null, !dbg !8240
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !8240

cond.true24:                                      ; preds = %cond.end18
  %15 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8240
  %base25 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %15, i32 0, i32 0, !dbg !8240
  br label %cond.end27, !dbg !8240

cond.false26:                                     ; preds = %cond.end18
  br label %cond.end27, !dbg !8240

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !8240
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8240
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !8240
  %17 = load i32, i32* %index29, align 8, !dbg !8240
  %call30 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond28, i32 %17), !dbg !8240
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call30, i32 0, i32 1, !dbg !8240
  store i8 0, i8* %lv_set_valid_p, align 8, !dbg !8241
  ret void, !dbg !8242
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %vec_, i32 %ix_) #0 !dbg !8243 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_sel_global_bb_info_def_base* %vec_, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, metadata !8248, metadata !DIExpression()), !dbg !8249
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8250, metadata !DIExpression()), !dbg !8249
  %0 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !8249
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_base* %0, null, !dbg !8249
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !8249

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !8249
  %2 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !8249
  %num = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %2, i32 0, i32 0, !dbg !8249
  %3 = load i32, i32* %num, align 8, !dbg !8249
  %cmp = icmp ult i32 %1, %3, !dbg !8249
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !8251
  %land.ext = zext i1 %4 to i32, !dbg !8249
  %5 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !8249
  %vec = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %5, i32 0, i32 2, !dbg !8249
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !8249
  %idxprom = zext i32 %6 to i64, !dbg !8249
  %arrayidx = getelementptr inbounds [1 x %struct.sel_global_bb_info_def], [1 x %struct.sel_global_bb_info_def]* %vec, i64 0, i64 %idxprom, !dbg !8249
  ret %struct.sel_global_bb_info_def* %arrayidx, !dbg !8249
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_data_sets(%struct.basic_block_def* %bb) #0 !dbg !8252 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8253, metadata !DIExpression()), !dbg !8254
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8255
  call void @free_lv_set(%struct.basic_block_def* %0), !dbg !8256
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8257
  call void @free_av_set(%struct.basic_block_def* %1), !dbg !8258
  ret void, !dbg !8259
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_av_set(%struct.basic_block_def* %bb) #0 !dbg !8260 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8261, metadata !DIExpression()), !dbg !8262
  %0 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8263
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %0, null, !dbg !8263
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8263

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8263
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8263
  br label %cond.end, !dbg !8263

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8263

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8263
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8263
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8263
  %3 = load i32, i32* %index, align 8, !dbg !8263
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %3), !dbg !8263
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 1, !dbg !8263
  call void @av_set_clear(%struct._list_node** %av_set), !dbg !8264
  %4 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8265
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %4, null, !dbg !8265
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8265

cond.true2:                                       ; preds = %cond.end
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8265
  %base3 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %5, i32 0, i32 0, !dbg !8265
  br label %cond.end5, !dbg !8265

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8265

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8265
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8265
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !8265
  %7 = load i32, i32* %index7, align 8, !dbg !8265
  %call8 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond6, i32 %7), !dbg !8265
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call8, i32 0, i32 2, !dbg !8265
  store i32 0, i32* %av_level, align 8, !dbg !8266
  ret void, !dbg !8267
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @exchange_data_sets(%struct.basic_block_def* %to, %struct.basic_block_def* %from) #0 !dbg !8268 {
entry:
  %to.addr = alloca %struct.basic_block_def*, align 8
  %from.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !8269, metadata !DIExpression()), !dbg !8270
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !8271, metadata !DIExpression()), !dbg !8272
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8273
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8274
  call void @exchange_lv_sets(%struct.basic_block_def* %0, %struct.basic_block_def* %1), !dbg !8275
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8276
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8277
  call void @exchange_av_sets(%struct.basic_block_def* %2, %struct.basic_block_def* %3), !dbg !8278
  ret void, !dbg !8279
}

; Function Attrs: noinline nounwind uwtable
define internal void @exchange_lv_sets(%struct.basic_block_def* %to, %struct.basic_block_def* %from) #0 !dbg !8280 {
entry:
  %to.addr = alloca %struct.basic_block_def*, align 8
  %from.addr = alloca %struct.basic_block_def*, align 8
  %to_lv_set = alloca %struct.bitmap_head_def*, align 8
  %to_lv_set_valid_p = alloca i8, align 1
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !8281, metadata !DIExpression()), !dbg !8282
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !8283, metadata !DIExpression()), !dbg !8284
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %to_lv_set, metadata !8285, metadata !DIExpression()), !dbg !8287
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8288
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !8288
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8288

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8288
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8288
  br label %cond.end, !dbg !8288

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8288

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8288
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8288
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8288
  %3 = load i32, i32* %index, align 8, !dbg !8288
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !8288
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 0, !dbg !8288
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !8288
  store %struct.bitmap_head_def* %4, %struct.bitmap_head_def** %to_lv_set, align 8, !dbg !8287
  %5 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8289
  %tobool1 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %5, null, !dbg !8289
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8289

cond.true2:                                       ; preds = %cond.end
  %6 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8289
  %base3 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8289
  br label %cond.end5, !dbg !8289

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8289

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8289
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8289
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8289
  %8 = load i32, i32* %index7, align 8, !dbg !8289
  %call8 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond6, i32 %8), !dbg !8289
  %lv_set9 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call8, i32 0, i32 0, !dbg !8289
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set9, align 8, !dbg !8289
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8290
  %tobool10 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !8290
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !8290

cond.true11:                                      ; preds = %cond.end5
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8290
  %base12 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %11, i32 0, i32 0, !dbg !8290
  br label %cond.end14, !dbg !8290

cond.false13:                                     ; preds = %cond.end5
  br label %cond.end14, !dbg !8290

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !8290
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8290
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !8290
  %13 = load i32, i32* %index16, align 8, !dbg !8290
  %call17 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond15, i32 %13), !dbg !8290
  %lv_set18 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call17, i32 0, i32 0, !dbg !8290
  store %struct.bitmap_head_def* %9, %struct.bitmap_head_def** %lv_set18, align 8, !dbg !8291
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %to_lv_set, align 8, !dbg !8292
  %15 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8293
  %tobool19 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %15, null, !dbg !8293
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !8293

cond.true20:                                      ; preds = %cond.end14
  %16 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8293
  %base21 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %16, i32 0, i32 0, !dbg !8293
  br label %cond.end23, !dbg !8293

cond.false22:                                     ; preds = %cond.end14
  br label %cond.end23, !dbg !8293

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !8293
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8293
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !8293
  %18 = load i32, i32* %index25, align 8, !dbg !8293
  %call26 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond24, i32 %18), !dbg !8293
  %lv_set27 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call26, i32 0, i32 0, !dbg !8293
  store %struct.bitmap_head_def* %14, %struct.bitmap_head_def** %lv_set27, align 8, !dbg !8294
  call void @llvm.dbg.declare(metadata i8* %to_lv_set_valid_p, metadata !8295, metadata !DIExpression()), !dbg !8297
  %19 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8298
  %tobool28 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %19, null, !dbg !8298
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !8298

cond.true29:                                      ; preds = %cond.end23
  %20 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8298
  %base30 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %20, i32 0, i32 0, !dbg !8298
  br label %cond.end32, !dbg !8298

cond.false31:                                     ; preds = %cond.end23
  br label %cond.end32, !dbg !8298

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !8298
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8298
  %index34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !8298
  %22 = load i32, i32* %index34, align 8, !dbg !8298
  %call35 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond33, i32 %22), !dbg !8298
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call35, i32 0, i32 1, !dbg !8298
  %23 = load i8, i8* %lv_set_valid_p, align 8, !dbg !8298
  store i8 %23, i8* %to_lv_set_valid_p, align 1, !dbg !8297
  %24 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8299
  %tobool36 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %24, null, !dbg !8299
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !8299

cond.true37:                                      ; preds = %cond.end32
  %25 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8299
  %base38 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %25, i32 0, i32 0, !dbg !8299
  br label %cond.end40, !dbg !8299

cond.false39:                                     ; preds = %cond.end32
  br label %cond.end40, !dbg !8299

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !8299
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8299
  %index42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !8299
  %27 = load i32, i32* %index42, align 8, !dbg !8299
  %call43 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond41, i32 %27), !dbg !8299
  %lv_set_valid_p44 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call43, i32 0, i32 1, !dbg !8299
  %28 = load i8, i8* %lv_set_valid_p44, align 8, !dbg !8299
  %29 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8300
  %tobool45 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %29, null, !dbg !8300
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !8300

cond.true46:                                      ; preds = %cond.end40
  %30 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8300
  %base47 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %30, i32 0, i32 0, !dbg !8300
  br label %cond.end49, !dbg !8300

cond.false48:                                     ; preds = %cond.end40
  br label %cond.end49, !dbg !8300

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !8300
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8300
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 9, !dbg !8300
  %32 = load i32, i32* %index51, align 8, !dbg !8300
  %call52 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond50, i32 %32), !dbg !8300
  %lv_set_valid_p53 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call52, i32 0, i32 1, !dbg !8300
  store i8 %28, i8* %lv_set_valid_p53, align 8, !dbg !8301
  %33 = load i8, i8* %to_lv_set_valid_p, align 1, !dbg !8302
  %34 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8303
  %tobool54 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %34, null, !dbg !8303
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !8303

cond.true55:                                      ; preds = %cond.end49
  %35 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8303
  %base56 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %35, i32 0, i32 0, !dbg !8303
  br label %cond.end58, !dbg !8303

cond.false57:                                     ; preds = %cond.end49
  br label %cond.end58, !dbg !8303

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !8303
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8303
  %index60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !8303
  %37 = load i32, i32* %index60, align 8, !dbg !8303
  %call61 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond59, i32 %37), !dbg !8303
  %lv_set_valid_p62 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call61, i32 0, i32 1, !dbg !8303
  store i8 %33, i8* %lv_set_valid_p62, align 8, !dbg !8304
  ret void, !dbg !8305
}

; Function Attrs: noinline nounwind uwtable
define internal void @exchange_av_sets(%struct.basic_block_def* %to, %struct.basic_block_def* %from) #0 !dbg !8306 {
entry:
  %to.addr = alloca %struct.basic_block_def*, align 8
  %from.addr = alloca %struct.basic_block_def*, align 8
  %to_av_set = alloca %struct._list_node*, align 8
  %to_av_level = alloca i32, align 4
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !8307, metadata !DIExpression()), !dbg !8308
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !8309, metadata !DIExpression()), !dbg !8310
  call void @llvm.dbg.declare(metadata %struct._list_node** %to_av_set, metadata !8311, metadata !DIExpression()), !dbg !8313
  %0 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8314
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %0, null, !dbg !8314
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8314

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8314
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8314
  br label %cond.end, !dbg !8314

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8314

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8314
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8314
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8314
  %3 = load i32, i32* %index, align 8, !dbg !8314
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %3), !dbg !8314
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 1, !dbg !8314
  %4 = load %struct._list_node*, %struct._list_node** %av_set, align 8, !dbg !8314
  store %struct._list_node* %4, %struct._list_node** %to_av_set, align 8, !dbg !8313
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8315
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %5, null, !dbg !8315
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !8315

cond.true2:                                       ; preds = %cond.end
  %6 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8315
  %base3 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8315
  br label %cond.end5, !dbg !8315

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8315

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !8315
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8315
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8315
  %8 = load i32, i32* %index7, align 8, !dbg !8315
  %call8 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond6, i32 %8), !dbg !8315
  %av_set9 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call8, i32 0, i32 1, !dbg !8315
  %9 = load %struct._list_node*, %struct._list_node** %av_set9, align 8, !dbg !8315
  %10 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8316
  %tobool10 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %10, null, !dbg !8316
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !8316

cond.true11:                                      ; preds = %cond.end5
  %11 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8316
  %base12 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %11, i32 0, i32 0, !dbg !8316
  br label %cond.end14, !dbg !8316

cond.false13:                                     ; preds = %cond.end5
  br label %cond.end14, !dbg !8316

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !8316
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8316
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !8316
  %13 = load i32, i32* %index16, align 8, !dbg !8316
  %call17 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond15, i32 %13), !dbg !8316
  %av_set18 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call17, i32 0, i32 1, !dbg !8316
  store %struct._list_node* %9, %struct._list_node** %av_set18, align 8, !dbg !8317
  %14 = load %struct._list_node*, %struct._list_node** %to_av_set, align 8, !dbg !8318
  %15 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8319
  %tobool19 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %15, null, !dbg !8319
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !8319

cond.true20:                                      ; preds = %cond.end14
  %16 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8319
  %base21 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %16, i32 0, i32 0, !dbg !8319
  br label %cond.end23, !dbg !8319

cond.false22:                                     ; preds = %cond.end14
  br label %cond.end23, !dbg !8319

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !8319
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8319
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !8319
  %18 = load i32, i32* %index25, align 8, !dbg !8319
  %call26 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond24, i32 %18), !dbg !8319
  %av_set27 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call26, i32 0, i32 1, !dbg !8319
  store %struct._list_node* %14, %struct._list_node** %av_set27, align 8, !dbg !8320
  call void @llvm.dbg.declare(metadata i32* %to_av_level, metadata !8321, metadata !DIExpression()), !dbg !8323
  %19 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8324
  %tobool28 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %19, null, !dbg !8324
  br i1 %tobool28, label %cond.true29, label %cond.false31, !dbg !8324

cond.true29:                                      ; preds = %cond.end23
  %20 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8324
  %base30 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %20, i32 0, i32 0, !dbg !8324
  br label %cond.end32, !dbg !8324

cond.false31:                                     ; preds = %cond.end23
  br label %cond.end32, !dbg !8324

cond.end32:                                       ; preds = %cond.false31, %cond.true29
  %cond33 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base30, %cond.true29 ], [ null, %cond.false31 ], !dbg !8324
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8324
  %index34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !8324
  %22 = load i32, i32* %index34, align 8, !dbg !8324
  %call35 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond33, i32 %22), !dbg !8324
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call35, i32 0, i32 2, !dbg !8324
  %23 = load i32, i32* %av_level, align 8, !dbg !8324
  store i32 %23, i32* %to_av_level, align 4, !dbg !8323
  %24 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8325
  %tobool36 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %24, null, !dbg !8325
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !8325

cond.true37:                                      ; preds = %cond.end32
  %25 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8325
  %base38 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %25, i32 0, i32 0, !dbg !8325
  br label %cond.end40, !dbg !8325

cond.false39:                                     ; preds = %cond.end32
  br label %cond.end40, !dbg !8325

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !8325
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8325
  %index42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %26, i32 0, i32 9, !dbg !8325
  %27 = load i32, i32* %index42, align 8, !dbg !8325
  %call43 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond41, i32 %27), !dbg !8325
  %av_level44 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call43, i32 0, i32 2, !dbg !8325
  %28 = load i32, i32* %av_level44, align 8, !dbg !8325
  %29 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8326
  %tobool45 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %29, null, !dbg !8326
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !8326

cond.true46:                                      ; preds = %cond.end40
  %30 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8326
  %base47 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %30, i32 0, i32 0, !dbg !8326
  br label %cond.end49, !dbg !8326

cond.false48:                                     ; preds = %cond.end40
  br label %cond.end49, !dbg !8326

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !8326
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8326
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 9, !dbg !8326
  %32 = load i32, i32* %index51, align 8, !dbg !8326
  %call52 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond50, i32 %32), !dbg !8326
  %av_level53 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call52, i32 0, i32 2, !dbg !8326
  store i32 %28, i32* %av_level53, align 8, !dbg !8327
  %33 = load i32, i32* %to_av_level, align 4, !dbg !8328
  %34 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8329
  %tobool54 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %34, null, !dbg !8329
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !8329

cond.true55:                                      ; preds = %cond.end49
  %35 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8329
  %base56 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %35, i32 0, i32 0, !dbg !8329
  br label %cond.end58, !dbg !8329

cond.false57:                                     ; preds = %cond.end49
  br label %cond.end58, !dbg !8329

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !8329
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8329
  %index60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !8329
  %37 = load i32, i32* %index60, align 8, !dbg !8329
  %call61 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond59, i32 %37), !dbg !8329
  %av_level62 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call61, i32 0, i32 2, !dbg !8329
  store i32 %33, i32* %av_level62, align 8, !dbg !8330
  ret void, !dbg !8331
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @copy_data_sets(%struct.basic_block_def* %to, %struct.basic_block_def* %from) #0 !dbg !8332 {
entry:
  %to.addr = alloca %struct.basic_block_def*, align 8
  %from.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !8333, metadata !DIExpression()), !dbg !8334
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !8335, metadata !DIExpression()), !dbg !8336
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8337
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !8337
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8337

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8337
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !8337
  br label %cond.end, !dbg !8337

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8337

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8337
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8337
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !8337
  %3 = load i32, i32* %index, align 8, !dbg !8337
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !8337
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 1, !dbg !8337
  %4 = load i8, i8* %lv_set_valid_p, align 8, !dbg !8337
  %tobool1 = icmp ne i8 %4, 0, !dbg !8337
  br i1 %tobool1, label %cond.true10, label %land.lhs.true, !dbg !8337

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8337
  %tobool2 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %5, null, !dbg !8337
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !8337

cond.true3:                                       ; preds = %land.lhs.true
  %6 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8337
  %base4 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8337
  br label %cond.end6, !dbg !8337

cond.false5:                                      ; preds = %land.lhs.true
  br label %cond.end6, !dbg !8337

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !8337
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8337
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8337
  %8 = load i32, i32* %index8, align 8, !dbg !8337
  %call9 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond7, i32 %8), !dbg !8337
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call9, i32 0, i32 2, !dbg !8337
  %9 = load i32, i32* %av_level, align 8, !dbg !8337
  %10 = load i32, i32* @global_level, align 4, !dbg !8337
  %cmp = icmp eq i32 %9, %10, !dbg !8337
  br i1 %cmp, label %cond.true10, label %cond.false11, !dbg !8337

cond.true10:                                      ; preds = %cond.end6, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4239, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8337
  br label %cond.end12, !dbg !8337

cond.false11:                                     ; preds = %cond.end6
  br label %cond.end12, !dbg !8337

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !8337
  %11 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8338
  %tobool14 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %11, null, !dbg !8338
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !8338

cond.true15:                                      ; preds = %cond.end12
  %12 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8338
  %base16 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %12, i32 0, i32 0, !dbg !8338
  br label %cond.end18, !dbg !8338

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !8338

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !8338
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8338
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !8338
  %14 = load i32, i32* %index20, align 8, !dbg !8338
  %call21 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond19, i32 %14), !dbg !8338
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call21, i32 0, i32 1, !dbg !8338
  %15 = load %struct._list_node*, %struct._list_node** %av_set, align 8, !dbg !8338
  %cmp22 = icmp eq %struct._list_node* %15, null, !dbg !8338
  br i1 %cmp22, label %cond.false24, label %cond.true23, !dbg !8338

cond.true23:                                      ; preds = %cond.end18
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4240, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8338
  br label %cond.end25, !dbg !8338

cond.false24:                                     ; preds = %cond.end18
  br label %cond.end25, !dbg !8338

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !8338
  %16 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8339
  %tobool27 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %16, null, !dbg !8339
  br i1 %tobool27, label %cond.true28, label %cond.false30, !dbg !8339

cond.true28:                                      ; preds = %cond.end25
  %17 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8339
  %base29 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %17, i32 0, i32 0, !dbg !8339
  br label %cond.end31, !dbg !8339

cond.false30:                                     ; preds = %cond.end25
  br label %cond.end31, !dbg !8339

cond.end31:                                       ; preds = %cond.false30, %cond.true28
  %cond32 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base29, %cond.true28 ], [ null, %cond.false30 ], !dbg !8339
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8339
  %index33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 9, !dbg !8339
  %19 = load i32, i32* %index33, align 8, !dbg !8339
  %call34 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond32, i32 %19), !dbg !8339
  %av_level35 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call34, i32 0, i32 2, !dbg !8339
  %20 = load i32, i32* %av_level35, align 8, !dbg !8339
  %21 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8340
  %tobool36 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %21, null, !dbg !8340
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !8340

cond.true37:                                      ; preds = %cond.end31
  %22 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8340
  %base38 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %22, i32 0, i32 0, !dbg !8340
  br label %cond.end40, !dbg !8340

cond.false39:                                     ; preds = %cond.end31
  br label %cond.end40, !dbg !8340

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !8340
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8340
  %index42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !8340
  %24 = load i32, i32* %index42, align 8, !dbg !8340
  %call43 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond41, i32 %24), !dbg !8340
  %av_level44 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call43, i32 0, i32 2, !dbg !8340
  store i32 %20, i32* %av_level44, align 8, !dbg !8341
  %25 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8342
  %tobool45 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %25, null, !dbg !8342
  br i1 %tobool45, label %cond.true46, label %cond.false48, !dbg !8342

cond.true46:                                      ; preds = %cond.end40
  %26 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8342
  %base47 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %26, i32 0, i32 0, !dbg !8342
  br label %cond.end49, !dbg !8342

cond.false48:                                     ; preds = %cond.end40
  br label %cond.end49, !dbg !8342

cond.end49:                                       ; preds = %cond.false48, %cond.true46
  %cond50 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base47, %cond.true46 ], [ null, %cond.false48 ], !dbg !8342
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8342
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !8342
  %28 = load i32, i32* %index51, align 8, !dbg !8342
  %call52 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond50, i32 %28), !dbg !8342
  %lv_set_valid_p53 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call52, i32 0, i32 1, !dbg !8342
  %29 = load i8, i8* %lv_set_valid_p53, align 8, !dbg !8342
  %30 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8343
  %tobool54 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %30, null, !dbg !8343
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !8343

cond.true55:                                      ; preds = %cond.end49
  %31 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8343
  %base56 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %31, i32 0, i32 0, !dbg !8343
  br label %cond.end58, !dbg !8343

cond.false57:                                     ; preds = %cond.end49
  br label %cond.end58, !dbg !8343

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !8343
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8343
  %index60 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !8343
  %33 = load i32, i32* %index60, align 8, !dbg !8343
  %call61 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond59, i32 %33), !dbg !8343
  %lv_set_valid_p62 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call61, i32 0, i32 1, !dbg !8343
  store i8 %29, i8* %lv_set_valid_p62, align 8, !dbg !8344
  %34 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8345
  %tobool63 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %34, null, !dbg !8345
  br i1 %tobool63, label %cond.true64, label %cond.false66, !dbg !8345

cond.true64:                                      ; preds = %cond.end58
  %35 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8345
  %base65 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %35, i32 0, i32 0, !dbg !8345
  br label %cond.end67, !dbg !8345

cond.false66:                                     ; preds = %cond.end58
  br label %cond.end67, !dbg !8345

cond.end67:                                       ; preds = %cond.false66, %cond.true64
  %cond68 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base65, %cond.true64 ], [ null, %cond.false66 ], !dbg !8345
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8345
  %index69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !8345
  %37 = load i32, i32* %index69, align 8, !dbg !8345
  %call70 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond68, i32 %37), !dbg !8345
  %av_level71 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call70, i32 0, i32 2, !dbg !8345
  %38 = load i32, i32* %av_level71, align 8, !dbg !8345
  %39 = load i32, i32* @global_level, align 4, !dbg !8345
  %cmp72 = icmp eq i32 %38, %39, !dbg !8345
  br i1 %cmp72, label %if.then, label %if.end, !dbg !8347

if.then:                                          ; preds = %cond.end67
  %40 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8348
  %tobool73 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %40, null, !dbg !8348
  br i1 %tobool73, label %cond.true74, label %cond.false76, !dbg !8348

cond.true74:                                      ; preds = %if.then
  %41 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8348
  %base75 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %41, i32 0, i32 0, !dbg !8348
  br label %cond.end77, !dbg !8348

cond.false76:                                     ; preds = %if.then
  br label %cond.end77, !dbg !8348

cond.end77:                                       ; preds = %cond.false76, %cond.true74
  %cond78 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base75, %cond.true74 ], [ null, %cond.false76 ], !dbg !8348
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8348
  %index79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 9, !dbg !8348
  %43 = load i32, i32* %index79, align 8, !dbg !8348
  %call80 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond78, i32 %43), !dbg !8348
  %av_set81 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call80, i32 0, i32 1, !dbg !8348
  %44 = load %struct._list_node*, %struct._list_node** %av_set81, align 8, !dbg !8348
  %call82 = call %struct._list_node* @av_set_copy(%struct._list_node* %44), !dbg !8350
  %45 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8351
  %tobool83 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %45, null, !dbg !8351
  br i1 %tobool83, label %cond.true84, label %cond.false86, !dbg !8351

cond.true84:                                      ; preds = %cond.end77
  %46 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8351
  %base85 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %46, i32 0, i32 0, !dbg !8351
  br label %cond.end87, !dbg !8351

cond.false86:                                     ; preds = %cond.end77
  br label %cond.end87, !dbg !8351

cond.end87:                                       ; preds = %cond.false86, %cond.true84
  %cond88 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base85, %cond.true84 ], [ null, %cond.false86 ], !dbg !8351
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8351
  %index89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !8351
  %48 = load i32, i32* %index89, align 8, !dbg !8351
  %call90 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond88, i32 %48), !dbg !8351
  %av_set91 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call90, i32 0, i32 1, !dbg !8351
  store %struct._list_node* %call82, %struct._list_node** %av_set91, align 8, !dbg !8352
  br label %if.end, !dbg !8353

if.end:                                           ; preds = %cond.end87, %cond.end67
  %49 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8354
  %tobool92 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %49, null, !dbg !8354
  br i1 %tobool92, label %cond.true93, label %cond.false95, !dbg !8354

cond.true93:                                      ; preds = %if.end
  %50 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8354
  %base94 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %50, i32 0, i32 0, !dbg !8354
  br label %cond.end96, !dbg !8354

cond.false95:                                     ; preds = %if.end
  br label %cond.end96, !dbg !8354

cond.end96:                                       ; preds = %cond.false95, %cond.true93
  %cond97 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base94, %cond.true93 ], [ null, %cond.false95 ], !dbg !8354
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8354
  %index98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !8354
  %52 = load i32, i32* %index98, align 8, !dbg !8354
  %call99 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond97, i32 %52), !dbg !8354
  %lv_set_valid_p100 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call99, i32 0, i32 1, !dbg !8354
  %53 = load i8, i8* %lv_set_valid_p100, align 8, !dbg !8354
  %tobool101 = icmp ne i8 %53, 0, !dbg !8354
  br i1 %tobool101, label %if.then102, label %if.end134, !dbg !8356

if.then102:                                       ; preds = %cond.end96
  %54 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8357
  %tobool103 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %54, null, !dbg !8357
  br i1 %tobool103, label %cond.true104, label %cond.false106, !dbg !8357

cond.true104:                                     ; preds = %if.then102
  %55 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8357
  %base105 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %55, i32 0, i32 0, !dbg !8357
  br label %cond.end107, !dbg !8357

cond.false106:                                    ; preds = %if.then102
  br label %cond.end107, !dbg !8357

cond.end107:                                      ; preds = %cond.false106, %cond.true104
  %cond108 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base105, %cond.true104 ], [ null, %cond.false106 ], !dbg !8357
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8357
  %index109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !8357
  %57 = load i32, i32* %index109, align 8, !dbg !8357
  %call110 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond108, i32 %57), !dbg !8357
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call110, i32 0, i32 0, !dbg !8357
  %58 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !8357
  %cmp111 = icmp ne %struct.bitmap_head_def* %58, null, !dbg !8357
  br i1 %cmp111, label %cond.false113, label %cond.true112, !dbg !8357

cond.true112:                                     ; preds = %cond.end107
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4251, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8357
  br label %cond.end114, !dbg !8357

cond.false113:                                    ; preds = %cond.end107
  br label %cond.end114, !dbg !8357

cond.end114:                                      ; preds = %cond.false113, %cond.true112
  %cond115 = phi i32 [ 0, %cond.true112 ], [ 0, %cond.false113 ], !dbg !8357
  %59 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8359
  %tobool116 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %59, null, !dbg !8359
  br i1 %tobool116, label %cond.true117, label %cond.false119, !dbg !8359

cond.true117:                                     ; preds = %cond.end114
  %60 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8359
  %base118 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %60, i32 0, i32 0, !dbg !8359
  br label %cond.end120, !dbg !8359

cond.false119:                                    ; preds = %cond.end114
  br label %cond.end120, !dbg !8359

cond.end120:                                      ; preds = %cond.false119, %cond.true117
  %cond121 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base118, %cond.true117 ], [ null, %cond.false119 ], !dbg !8359
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !8359
  %index122 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !8359
  %62 = load i32, i32* %index122, align 8, !dbg !8359
  %call123 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond121, i32 %62), !dbg !8359
  %lv_set124 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call123, i32 0, i32 0, !dbg !8359
  %63 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set124, align 8, !dbg !8359
  %64 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8359
  %tobool125 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %64, null, !dbg !8359
  br i1 %tobool125, label %cond.true126, label %cond.false128, !dbg !8359

cond.true126:                                     ; preds = %cond.end120
  %65 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !8359
  %base127 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %65, i32 0, i32 0, !dbg !8359
  br label %cond.end129, !dbg !8359

cond.false128:                                    ; preds = %cond.end120
  br label %cond.end129, !dbg !8359

cond.end129:                                      ; preds = %cond.false128, %cond.true126
  %cond130 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base127, %cond.true126 ], [ null, %cond.false128 ], !dbg !8359
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !8359
  %index131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %66, i32 0, i32 9, !dbg !8359
  %67 = load i32, i32* %index131, align 8, !dbg !8359
  %call132 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond130, i32 %67), !dbg !8359
  %lv_set133 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call132, i32 0, i32 0, !dbg !8359
  %68 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set133, align 8, !dbg !8359
  call void @bitmap_copy(%struct.bitmap_head_def* %63, %struct.bitmap_head_def* %68), !dbg !8359
  br label %if.end134, !dbg !8360

if.end134:                                        ; preds = %cond.end129, %cond.end96
  ret void, !dbg !8361
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct._list_node* @get_av_set(%struct.rtx_def* %insn) #0 !dbg !8362 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %av_set = alloca %struct._list_node*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8365, metadata !DIExpression()), !dbg !8366
  call void @llvm.dbg.declare(metadata %struct._list_node** %av_set, metadata !8367, metadata !DIExpression()), !dbg !8368
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8369
  %call = call i32 @get_av_level(%struct.rtx_def* %0), !dbg !8369
  %1 = load i32, i32* @global_level, align 4, !dbg !8369
  %cmp = icmp eq i32 %call, %1, !dbg !8369
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !8369

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4262, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8369
  br label %cond.end, !dbg !8369

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8369

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8369
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8370
  %call1 = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %2), !dbg !8372
  %tobool = icmp ne i8 %call1, 0, !dbg !8372
  br i1 %tobool, label %if.then, label %if.else, !dbg !8373

if.then:                                          ; preds = %cond.end
  %3 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8374
  %tobool2 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %3, null, !dbg !8374
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !8374

cond.true3:                                       ; preds = %if.then
  %4 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8374
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %4, i32 0, i32 0, !dbg !8374
  br label %cond.end5, !dbg !8374

cond.false4:                                      ; preds = %if.then
  br label %cond.end5, !dbg !8374

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !8374
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8374
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8374
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8374
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8374
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8374
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8374
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !8374
  %7 = load i32, i32* %index, align 8, !dbg !8374
  %call7 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond6, i32 %7), !dbg !8374
  %av_set8 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call7, i32 0, i32 1, !dbg !8374
  %8 = load %struct._list_node*, %struct._list_node** %av_set8, align 8, !dbg !8374
  store %struct._list_node* %8, %struct._list_node** %av_set, align 8, !dbg !8375
  br label %if.end, !dbg !8376

if.else:                                          ; preds = %cond.end
  store %struct._list_node* null, %struct._list_node** %av_set, align 8, !dbg !8377
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end5
  %9 = load %struct._list_node*, %struct._list_node** %av_set, align 8, !dbg !8378
  ret %struct._list_node* %9, !dbg !8379
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @get_av_level(%struct.rtx_def* %insn) #0 !dbg !8380 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %av_level = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8383, metadata !DIExpression()), !dbg !8384
  call void @llvm.dbg.declare(metadata i32* %av_level, metadata !8385, metadata !DIExpression()), !dbg !8386
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8387
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8387
  %bf.load = load i32, i32* %1, align 8, !dbg !8387
  %bf.clear = and i32 %bf.load, 65535, !dbg !8387
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !8387
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !8387

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8387
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8387
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8387
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8387
  %cmp3 = icmp eq i32 %bf.clear2, 7, !dbg !8387
  br i1 %cmp3, label %cond.false, label %lor.lhs.false4, !dbg !8387

lor.lhs.false4:                                   ; preds = %lor.lhs.false
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8387
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8387
  %bf.load5 = load i32, i32* %5, align 8, !dbg !8387
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !8387
  %cmp7 = icmp eq i32 %bf.clear6, 9, !dbg !8387
  br i1 %cmp7, label %cond.false, label %lor.lhs.false8, !dbg !8387

lor.lhs.false8:                                   ; preds = %lor.lhs.false4
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8387
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !8387
  %bf.load9 = load i32, i32* %7, align 8, !dbg !8387
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !8387
  %cmp11 = icmp eq i32 %bf.clear10, 10, !dbg !8387
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !8387

cond.true:                                        ; preds = %lor.lhs.false8
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4278, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8387
  br label %cond.end, !dbg !8387

cond.false:                                       ; preds = %lor.lhs.false8, %lor.lhs.false4, %lor.lhs.false, %entry
  br label %cond.end, !dbg !8387

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8387
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8388
  %call = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %8), !dbg !8390
  %tobool = icmp ne i8 %call, 0, !dbg !8390
  br i1 %tobool, label %if.then, label %if.else, !dbg !8391

if.then:                                          ; preds = %cond.end
  %9 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8392
  %tobool12 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %9, null, !dbg !8392
  br i1 %tobool12, label %cond.true13, label %cond.false14, !dbg !8392

cond.true13:                                      ; preds = %if.then
  %10 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8392
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %10, i32 0, i32 0, !dbg !8392
  br label %cond.end15, !dbg !8392

cond.false14:                                     ; preds = %if.then
  br label %cond.end15, !dbg !8392

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true13 ], [ null, %cond.false14 ], !dbg !8392
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8392
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8392
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8392
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8392
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8392
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8392
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !8392
  %13 = load i32, i32* %index, align 8, !dbg !8392
  %call17 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond16, i32 %13), !dbg !8392
  %av_level18 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call17, i32 0, i32 2, !dbg !8392
  %14 = load i32, i32* %av_level18, align 8, !dbg !8392
  store i32 %14, i32* %av_level, align 4, !dbg !8393
  br label %if.end, !dbg !8394

if.else:                                          ; preds = %cond.end
  %15 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8395
  %tobool19 = icmp ne %struct.VEC_sel_insn_data_def_heap* %15, null, !dbg !8395
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !8395

cond.true20:                                      ; preds = %if.else
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !8395
  %base21 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %16, i32 0, i32 0, !dbg !8395
  br label %cond.end23, !dbg !8395

cond.false22:                                     ; preds = %if.else
  br label %cond.end23, !dbg !8395

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_sel_insn_data_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !8395
  %17 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8395
  %tobool25 = icmp ne %struct.VEC_int_heap* %17, null, !dbg !8395
  br i1 %tobool25, label %cond.true26, label %cond.false28, !dbg !8395

cond.true26:                                      ; preds = %cond.end23
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !8395
  %base27 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %18, i32 0, i32 0, !dbg !8395
  br label %cond.end29, !dbg !8395

cond.false28:                                     ; preds = %cond.end23
  br label %cond.end29, !dbg !8395

cond.end29:                                       ; preds = %cond.false28, %cond.true26
  %cond30 = phi %struct.VEC_int_base* [ %base27, %cond.true26 ], [ null, %cond.false28 ], !dbg !8395
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8395
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !8395
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !8395
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !8395
  %rt_int = bitcast %union.rtunion_def* %arrayidx33 to i32*, !dbg !8395
  %20 = load i32, i32* %rt_int, align 8, !dbg !8395
  %call34 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond30, i32 %20), !dbg !8395
  %call35 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond24, i32 %call34), !dbg !8395
  %ws_level = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call35, i32 0, i32 1, !dbg !8395
  %21 = load i32, i32* %ws_level, align 8, !dbg !8395
  store i32 %21, i32* %av_level, align 4, !dbg !8396
  br label %if.end

if.end:                                           ; preds = %cond.end29, %cond.end15
  %22 = load i32, i32* %av_level, align 4, !dbg !8397
  ret i32 %22, !dbg !8398
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_bb_head_p(%struct.rtx_def* %insn) #0 !dbg !8399 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8400, metadata !DIExpression()), !dbg !8401
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8402
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8402
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8402
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8402
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8402
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8402
  %call = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %1), !dbg !8403
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8404
  %cmp = icmp eq %struct.rtx_def* %call, %2, !dbg !8405
  %conv = zext i1 %cmp to i32, !dbg !8405
  %conv1 = trunc i32 %conv to i8, !dbg !8403
  ret i8 %conv1, !dbg !8406
}

declare dso_local %struct.rtx_def* @bb_note(%struct.basic_block_def*) #2

declare dso_local %struct.rtx_def* @next_nonnote_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_bb_end_p(%struct.rtx_def* %insn) #0 !dbg !8407 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8408, metadata !DIExpression()), !dbg !8409
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8410
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8411
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !8411
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8411
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8411
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8411
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8411
  %call = call %struct.rtx_def* @sel_bb_end(%struct.basic_block_def* %2), !dbg !8412
  %cmp = icmp eq %struct.rtx_def* %0, %call, !dbg !8413
  %conv = zext i1 %cmp to i32, !dbg !8413
  %conv1 = trunc i32 %conv to i8, !dbg !8410
  ret i8 %conv1, !dbg !8414
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @fallthru_bb_of_jump(%struct.rtx_def* %jump) #0 !dbg !8415 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !8418, metadata !DIExpression()), !dbg !8419
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8420
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8420
  %bf.load = load i32, i32* %1, align 8, !dbg !8420
  %bf.clear = and i32 %bf.load, 65535, !dbg !8420
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !8420
  br i1 %cmp, label %if.end, label %if.then, !dbg !8422

if.then:                                          ; preds = %entry
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !8423
  br label %return, !dbg !8423

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8424
  %call = call i32 @any_uncondjump_p(%struct.rtx_def* %2), !dbg !8426
  %tobool = icmp ne i32 %call, 0, !dbg !8426
  br i1 %tobool, label %if.then1, label %if.end3, !dbg !8427

if.then1:                                         ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8428
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8428
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8428
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !8428
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !8428
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8428
  %call2 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %4), !dbg !8429
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %retval, align 8, !dbg !8430
  br label %return, !dbg !8430

if.end3:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8431
  %call4 = call i32 @any_condjump_p(%struct.rtx_def* %5), !dbg !8433
  %tobool5 = icmp ne i32 %call4, 0, !dbg !8433
  br i1 %tobool5, label %if.end7, label %if.then6, !dbg !8434

if.then6:                                         ; preds = %if.end3
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !8435
  br label %return, !dbg !8435

if.end7:                                          ; preds = %if.end3
  %6 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8436
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8436
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8436
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 3, !dbg !8436
  %rt_bb11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.basic_block_def**, !dbg !8436
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb11, align 8, !dbg !8436
  %call12 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %7), !dbg !8438
  %tobool13 = icmp ne i8 %call12, 0, !dbg !8438
  br i1 %tobool13, label %if.then14, label %if.end15, !dbg !8439

if.then14:                                        ; preds = %if.end7
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !8440
  br label %return, !dbg !8440

if.end15:                                         ; preds = %if.end7
  %8 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !8441
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 3, !dbg !8441
  %rt_bb19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.basic_block_def**, !dbg !8441
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb19, align 8, !dbg !8441
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !8441
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8441
  %tobool20 = icmp ne %struct.VEC_edge_gc* %10, null, !dbg !8441
  br i1 %tobool20, label %cond.true, label %cond.false, !dbg !8441

cond.true:                                        ; preds = %if.end15
  %11 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8441
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 3, !dbg !8441
  %rt_bb24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.basic_block_def**, !dbg !8441
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb24, align 8, !dbg !8441
  %succs25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !8441
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs25, align 8, !dbg !8441
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %13, i32 0, i32 0, !dbg !8441
  br label %cond.end, !dbg !8441

cond.false:                                       ; preds = %if.end15
  br label %cond.end, !dbg !8441

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8441
  %call26 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 0), !dbg !8441
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call26, i32 0, i32 7, !dbg !8441
  %14 = load i32, i32* %flags, align 8, !dbg !8441
  %and = and i32 %14, 1, !dbg !8441
  %tobool27 = icmp ne i32 %and, 0, !dbg !8441
  br i1 %tobool27, label %cond.true28, label %cond.false46, !dbg !8441

cond.true28:                                      ; preds = %cond.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !8441
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 3, !dbg !8441
  %rt_bb32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.basic_block_def**, !dbg !8441
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb32, align 8, !dbg !8441
  %succs33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !8441
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs33, align 8, !dbg !8441
  %tobool34 = icmp ne %struct.VEC_edge_gc* %17, null, !dbg !8441
  br i1 %tobool34, label %cond.true35, label %cond.false42, !dbg !8441

cond.true35:                                      ; preds = %cond.true28
  %18 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8441
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 3, !dbg !8441
  %rt_bb39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.basic_block_def**, !dbg !8441
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb39, align 8, !dbg !8441
  %succs40 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 1, !dbg !8441
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs40, align 8, !dbg !8441
  %base41 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !8441
  br label %cond.end43, !dbg !8441

cond.false42:                                     ; preds = %cond.true28
  br label %cond.end43, !dbg !8441

cond.end43:                                       ; preds = %cond.false42, %cond.true35
  %cond44 = phi %struct.VEC_edge_base* [ %base41, %cond.true35 ], [ null, %cond.false42 ], !dbg !8441
  %call45 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond44, i32 0), !dbg !8441
  br label %cond.end64, !dbg !8441

cond.false46:                                     ; preds = %cond.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !8441
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 3, !dbg !8441
  %rt_bb50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.basic_block_def**, !dbg !8441
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb50, align 8, !dbg !8441
  %succs51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 1, !dbg !8441
  %23 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs51, align 8, !dbg !8441
  %tobool52 = icmp ne %struct.VEC_edge_gc* %23, null, !dbg !8441
  br i1 %tobool52, label %cond.true53, label %cond.false60, !dbg !8441

cond.true53:                                      ; preds = %cond.false46
  %24 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !8441
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !8441
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 3, !dbg !8441
  %rt_bb57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.basic_block_def**, !dbg !8441
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb57, align 8, !dbg !8441
  %succs58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 1, !dbg !8441
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs58, align 8, !dbg !8441
  %base59 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %26, i32 0, i32 0, !dbg !8441
  br label %cond.end61, !dbg !8441

cond.false60:                                     ; preds = %cond.false46
  br label %cond.end61, !dbg !8441

cond.end61:                                       ; preds = %cond.false60, %cond.true53
  %cond62 = phi %struct.VEC_edge_base* [ %base59, %cond.true53 ], [ null, %cond.false60 ], !dbg !8441
  %call63 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond62, i32 1), !dbg !8441
  br label %cond.end64, !dbg !8441

cond.end64:                                       ; preds = %cond.end61, %cond.end43
  %cond65 = phi %struct.edge_def* [ %call45, %cond.end43 ], [ %call63, %cond.end61 ], !dbg !8441
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond65, i32 0, i32 1, !dbg !8442
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8442
  store %struct.basic_block_def* %27, %struct.basic_block_def** %retval, align 8, !dbg !8443
  br label %return, !dbg !8443

return:                                           ; preds = %cond.end64, %if.then14, %if.then6, %if.then1, %if.then
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !8444
  ret %struct.basic_block_def* %28, !dbg !8444
}

declare dso_local i32 @any_uncondjump_p(%struct.rtx_def*) #2

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !8445 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8446, metadata !DIExpression()), !dbg !8447
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8448
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !8448
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8448
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8448
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8448

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8448
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !8448
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !8448
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8448
  br label %cond.end, !dbg !8448

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8448

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8448
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8448
  %cmp = icmp eq i32 %call, 1, !dbg !8449
  %conv = zext i1 %cmp to i32, !dbg !8449
  %conv2 = trunc i32 %conv to i8, !dbg !8448
  ret i8 %conv2, !dbg !8450
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_init_bbs(%struct.VEC_basic_block_heap* %bbs, %struct.basic_block_def* %bb) #0 !dbg !8451 {
entry:
  %bbs.addr = alloca %struct.VEC_basic_block_heap*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %ssi = alloca %struct.sched_scan_info_def, align 8
  store %struct.VEC_basic_block_heap* %bbs, %struct.VEC_basic_block_heap** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %bbs.addr, metadata !8454, metadata !DIExpression()), !dbg !8455
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8456, metadata !DIExpression()), !dbg !8457
  call void @llvm.dbg.declare(metadata %struct.sched_scan_info_def* %ssi, metadata !8458, metadata !DIExpression()), !dbg !8459
  %0 = bitcast %struct.sched_scan_info_def* %ssi to i8*, !dbg !8459
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %0, i8* align 8 bitcast (%struct.sched_scan_info_def* @__const.sel_init_bbs.ssi to i8*), i64 32, i1 false), !dbg !8459
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %bbs.addr, align 8, !dbg !8460
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8461
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** @new_insns, align 8, !dbg !8462
  call void @sched_scan(%struct.sched_scan_info_def* %ssi, %struct.VEC_basic_block_heap* %1, %struct.basic_block_def* %2, %struct.VEC_rtx_heap* %3, %struct.rtx_def* null), !dbg !8463
  ret void, !dbg !8464
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_bb_info() #0 !dbg !8465 {
entry:
  call void @sel_extend_global_bb_info(), !dbg !8466
  call void @extend_region_bb_info(), !dbg !8467
  ret void, !dbg !8468
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_bb(%struct.basic_block_def* %bb) #0 !dbg !8469 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8470, metadata !DIExpression()), !dbg !8471
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8472
  %call = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %0), !dbg !8473
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8474
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 7, !dbg !8474
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8474
  %2 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8474
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %2, i32 0, i32 1, !dbg !8474
  %3 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8474
  call void @remove_notes(%struct.rtx_def* %call, %struct.rtx_def* %3), !dbg !8475
  %4 = load %struct.rtx_def*, %struct.rtx_def** @note_list, align 8, !dbg !8476
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8477
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %5, null, !dbg !8477
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8477

cond.true:                                        ; preds = %entry
  %6 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8477
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %6, i32 0, i32 0, !dbg !8477
  br label %cond.end, !dbg !8477

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8477

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8477
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8477
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !8477
  %8 = load i32, i32* %index, align 8, !dbg !8477
  %call1 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %8), !dbg !8477
  %note_list = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call1, i32 0, i32 0, !dbg !8477
  store %struct.rtx_def* %4, %struct.rtx_def** %note_list, align 8, !dbg !8478
  ret void, !dbg !8479
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_finish_bbs() #0 !dbg !8480 {
entry:
  call void @sel_restore_notes(), !dbg !8481
  %0 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8482
  %tobool = icmp ne %struct.loop* %0, null, !dbg !8482
  br i1 %tobool, label %if.then, label %if.end, !dbg !8484

if.then:                                          ; preds = %entry
  call void @sel_remove_loop_preheader(), !dbg !8485
  br label %if.end, !dbg !8485

if.end:                                           ; preds = %if.then, %entry
  call void @finish_region_bb_info(), !dbg !8486
  ret void, !dbg !8487
}

; Function Attrs: noinline nounwind uwtable
define internal void @sel_restore_notes() #0 !dbg !8488 {
entry:
  %bb = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %first = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata i32* %bb, metadata !8489, metadata !DIExpression()), !dbg !8490
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8491, metadata !DIExpression()), !dbg !8492
  store i32 0, i32* %bb, align 4, !dbg !8493
  br label %for.cond, !dbg !8495

for.cond:                                         ; preds = %for.inc68, %entry
  %0 = load i32, i32* %bb, align 4, !dbg !8496
  %1 = load i32, i32* @current_nr_blocks, align 4, !dbg !8498
  %cmp = icmp slt i32 %0, %1, !dbg !8499
  br i1 %cmp, label %for.body, label %for.end69, !dbg !8500

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first, metadata !8501, metadata !DIExpression()), !dbg !8503
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last, metadata !8504, metadata !DIExpression()), !dbg !8505
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8506
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !8506
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8506
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8506
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 2, !dbg !8506
  %4 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8506
  %tobool = icmp ne %struct.VEC_basic_block_gc* %4, null, !dbg !8506
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8506

cond.true:                                        ; preds = %for.body
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8506
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !8506
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !8506
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !8506
  %x_basic_block_info3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 2, !dbg !8506
  %7 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info3, align 8, !dbg !8506
  %base = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %7, i32 0, i32 0, !dbg !8506
  br label %cond.end, !dbg !8506

cond.false:                                       ; preds = %for.body
  br label %cond.end, !dbg !8506

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8506
  %8 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8506
  %9 = load i32*, i32** @ebb_head, align 8, !dbg !8506
  %10 = load i32, i32* %bb, align 4, !dbg !8506
  %idxprom = sext i32 %10 to i64, !dbg !8506
  %arrayidx = getelementptr inbounds i32, i32* %9, i64 %idxprom, !dbg !8506
  %11 = load i32, i32* %arrayidx, align 4, !dbg !8506
  %idxprom4 = sext i32 %11 to i64, !dbg !8506
  %arrayidx5 = getelementptr inbounds i32, i32* %8, i64 %idxprom4, !dbg !8506
  %12 = load i32, i32* %arrayidx5, align 4, !dbg !8506
  %call = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond, i32 %12), !dbg !8506
  store %struct.basic_block_def* %call, %struct.basic_block_def** %first, align 8, !dbg !8507
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8508
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !8508
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !8508
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !8508
  %x_basic_block_info8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 2, !dbg !8508
  %15 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info8, align 8, !dbg !8508
  %tobool9 = icmp ne %struct.VEC_basic_block_gc* %15, null, !dbg !8508
  br i1 %tobool9, label %cond.true10, label %cond.false15, !dbg !8508

cond.true10:                                      ; preds = %cond.end
  %16 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8508
  %add.ptr11 = getelementptr inbounds %struct.function, %struct.function* %16, i64 0, !dbg !8508
  %cfg12 = getelementptr inbounds %struct.function, %struct.function* %add.ptr11, i32 0, i32 1, !dbg !8508
  %17 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg12, align 8, !dbg !8508
  %x_basic_block_info13 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %17, i32 0, i32 2, !dbg !8508
  %18 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info13, align 8, !dbg !8508
  %base14 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %18, i32 0, i32 0, !dbg !8508
  br label %cond.end16, !dbg !8508

cond.false15:                                     ; preds = %cond.end
  br label %cond.end16, !dbg !8508

cond.end16:                                       ; preds = %cond.false15, %cond.true10
  %cond17 = phi %struct.VEC_basic_block_base* [ %base14, %cond.true10 ], [ null, %cond.false15 ], !dbg !8508
  %19 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8508
  %20 = load i32*, i32** @ebb_head, align 8, !dbg !8508
  %21 = load i32, i32* %bb, align 4, !dbg !8508
  %add = add nsw i32 %21, 1, !dbg !8508
  %idxprom18 = sext i32 %add to i64, !dbg !8508
  %arrayidx19 = getelementptr inbounds i32, i32* %20, i64 %idxprom18, !dbg !8508
  %22 = load i32, i32* %arrayidx19, align 4, !dbg !8508
  %sub = sub nsw i32 %22, 1, !dbg !8508
  %idxprom20 = sext i32 %sub to i64, !dbg !8508
  %arrayidx21 = getelementptr inbounds i32, i32* %19, i64 %idxprom20, !dbg !8508
  %23 = load i32, i32* %arrayidx21, align 4, !dbg !8508
  %call22 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond17, i32 %23), !dbg !8508
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %call22, i32 0, i32 6, !dbg !8509
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8509
  store %struct.basic_block_def* %24, %struct.basic_block_def** %last, align 8, !dbg !8510
  br label %do.body, !dbg !8511

do.body:                                          ; preds = %do.cond, %cond.end16
  %25 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8512
  %tobool23 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %25, null, !dbg !8512
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !8512

cond.true24:                                      ; preds = %do.body
  %26 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8512
  %base25 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %26, i32 0, i32 0, !dbg !8512
  br label %cond.end27, !dbg !8512

cond.false26:                                     ; preds = %do.body
  br label %cond.end27, !dbg !8512

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !8512
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8512
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !8512
  %28 = load i32, i32* %index, align 8, !dbg !8512
  %call29 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond28, i32 %28), !dbg !8512
  %note_list = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call29, i32 0, i32 0, !dbg !8512
  %29 = load %struct.rtx_def*, %struct.rtx_def** %note_list, align 8, !dbg !8512
  store %struct.rtx_def* %29, %struct.rtx_def** @note_list, align 8, !dbg !8514
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8515
  %call30 = call %struct.rtx_def* @restore_other_notes(%struct.rtx_def* null, %struct.basic_block_def* %30), !dbg !8516
  %31 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8517
  %tobool31 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %31, null, !dbg !8517
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !8517

cond.true32:                                      ; preds = %cond.end27
  %32 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8517
  %base33 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %32, i32 0, i32 0, !dbg !8517
  br label %cond.end35, !dbg !8517

cond.false34:                                     ; preds = %cond.end27
  br label %cond.end35, !dbg !8517

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !8517
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8517
  %index37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 9, !dbg !8517
  %34 = load i32, i32* %index37, align 8, !dbg !8517
  %call38 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond36, i32 %34), !dbg !8517
  %note_list39 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call38, i32 0, i32 0, !dbg !8517
  store %struct.rtx_def* null, %struct.rtx_def** %note_list39, align 8, !dbg !8518
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8519
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 7, !dbg !8519
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8519
  %36 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8519
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %36, i32 0, i32 0, !dbg !8519
  %37 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8519
  store %struct.rtx_def* %37, %struct.rtx_def** %insn, align 8, !dbg !8519
  br label %for.cond40, !dbg !8519

for.cond40:                                       ; preds = %for.inc, %cond.end35
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8521
  %tobool41 = icmp ne %struct.rtx_def* %38, null, !dbg !8521
  br i1 %tobool41, label %land.rhs, label %land.end, !dbg !8521

land.rhs:                                         ; preds = %for.cond40
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8521
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8521
  %il42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 7, !dbg !8521
  %rtl43 = bitcast %union.basic_block_il_dependent* %il42 to %struct.rtl_bb_info**, !dbg !8521
  %41 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl43, align 8, !dbg !8521
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %41, i32 0, i32 1, !dbg !8521
  %42 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8521
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !8521
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8521
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8521
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx44 to %struct.rtx_def**, !dbg !8521
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8521
  %cmp45 = icmp ne %struct.rtx_def* %39, %43, !dbg !8521
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond40
  %44 = phi i1 [ false, %for.cond40 ], [ %cmp45, %land.rhs ], !dbg !8523
  br i1 %44, label %for.body46, label %for.end, !dbg !8519

for.body46:                                       ; preds = %land.end
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8524
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !8524
  %bf.load = load i32, i32* %46, align 8, !dbg !8524
  %bf.clear = and i32 %bf.load, 65535, !dbg !8524
  %cmp47 = icmp eq i32 %bf.clear, 8, !dbg !8524
  br i1 %cmp47, label %land.lhs.true, label %lor.lhs.false, !dbg !8524

lor.lhs.false:                                    ; preds = %for.body46
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8524
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !8524
  %bf.load48 = load i32, i32* %48, align 8, !dbg !8524
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !8524
  %cmp50 = icmp eq i32 %bf.clear49, 7, !dbg !8524
  br i1 %cmp50, label %land.lhs.true, label %lor.lhs.false51, !dbg !8524

lor.lhs.false51:                                  ; preds = %lor.lhs.false
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8524
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !8524
  %bf.load52 = load i32, i32* %50, align 8, !dbg !8524
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !8524
  %cmp54 = icmp eq i32 %bf.clear53, 9, !dbg !8524
  br i1 %cmp54, label %land.lhs.true, label %lor.lhs.false55, !dbg !8524

lor.lhs.false55:                                  ; preds = %lor.lhs.false51
  %51 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8524
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !8524
  %bf.load56 = load i32, i32* %52, align 8, !dbg !8524
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !8524
  %cmp58 = icmp eq i32 %bf.clear57, 10, !dbg !8524
  br i1 %cmp58, label %land.lhs.true, label %if.end, !dbg !8524

land.lhs.true:                                    ; preds = %lor.lhs.false55, %lor.lhs.false51, %lor.lhs.false, %for.body46
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8524
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !8524
  %bf.load59 = load i32, i32* %54, align 8, !dbg !8524
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !8524
  %cmp61 = icmp eq i32 %bf.clear60, 7, !dbg !8524
  br i1 %cmp61, label %if.end, label %if.then, !dbg !8526

if.then:                                          ; preds = %land.lhs.true
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8527
  call void @reemit_notes(%struct.rtx_def* %55), !dbg !8528
  br label %if.end, !dbg !8528

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false55
  br label %for.inc, !dbg !8524

for.inc:                                          ; preds = %if.end
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8521
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %56, i32 0, i32 1, !dbg !8521
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !8521
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 2, !dbg !8521
  %rt_rtx65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.rtx_def**, !dbg !8521
  %57 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx65, align 8, !dbg !8521
  store %struct.rtx_def* %57, %struct.rtx_def** %insn, align 8, !dbg !8521
  br label %for.cond40, !dbg !8521, !llvm.loop !8529

for.end:                                          ; preds = %land.end
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8531
  %next_bb66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 6, !dbg !8532
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb66, align 8, !dbg !8532
  store %struct.basic_block_def* %59, %struct.basic_block_def** %first, align 8, !dbg !8533
  br label %do.cond, !dbg !8534

do.cond:                                          ; preds = %for.end
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %first, align 8, !dbg !8535
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %last, align 8, !dbg !8536
  %cmp67 = icmp ne %struct.basic_block_def* %60, %61, !dbg !8537
  br i1 %cmp67, label %do.body, label %do.end, !dbg !8534, !llvm.loop !8538

do.end:                                           ; preds = %do.cond
  br label %for.inc68, !dbg !8540

for.inc68:                                        ; preds = %do.end
  %62 = load i32, i32* %bb, align 4, !dbg !8541
  %inc = add nsw i32 %62, 1, !dbg !8541
  store i32 %inc, i32* %bb, align 4, !dbg !8541
  br label %for.cond, !dbg !8542, !llvm.loop !8543

for.end69:                                        ; preds = %for.cond
  ret void, !dbg !8545
}

; Function Attrs: noinline nounwind uwtable
define internal void @sel_remove_loop_preheader() #0 !dbg !8546 {
entry:
  %i = alloca i32, align 4
  %old_len = alloca i32, align 4
  %cur_rgn = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %all_empty_p = alloca i8, align 1
  %preheader_blocks = alloca %struct.VEC_basic_block_heap*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %prev_bb = alloca %struct.basic_block_def*, align 8
  %next_bb = alloca %struct.basic_block_def*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8547, metadata !DIExpression()), !dbg !8548
  call void @llvm.dbg.declare(metadata i32* %old_len, metadata !8549, metadata !DIExpression()), !dbg !8550
  call void @llvm.dbg.declare(metadata i32* %cur_rgn, metadata !8551, metadata !DIExpression()), !dbg !8552
  %0 = load i32*, i32** @containing_rgn, align 8, !dbg !8553
  %1 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8553
  %2 = load i32*, i32** @ebb_head, align 8, !dbg !8553
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0, !dbg !8553
  %3 = load i32, i32* %arrayidx, align 4, !dbg !8553
  %idxprom = sext i32 %3 to i64, !dbg !8553
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !8553
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !8553
  %idxprom2 = sext i32 %4 to i64, !dbg !8553
  %arrayidx3 = getelementptr inbounds i32, i32* %0, i64 %idxprom2, !dbg !8553
  %5 = load i32, i32* %arrayidx3, align 4, !dbg !8553
  store i32 %5, i32* %cur_rgn, align 4, !dbg !8552
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !8554, metadata !DIExpression()), !dbg !8555
  call void @llvm.dbg.declare(metadata i8* %all_empty_p, metadata !8556, metadata !DIExpression()), !dbg !8557
  store i8 1, i8* %all_empty_p, align 1, !dbg !8557
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %preheader_blocks, metadata !8558, metadata !DIExpression()), !dbg !8559
  %6 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8560
  %call = call %struct.loop* @loop_outer(%struct.loop* %6), !dbg !8560
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %call, i32 0, i32 10, !dbg !8560
  %7 = load i8*, i8** %aux, align 8, !dbg !8560
  %8 = ptrtoint i8* %7 to i64, !dbg !8560
  %cmp = icmp eq i64 %8, 1, !dbg !8560
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !8560

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !8560

cond.false:                                       ; preds = %entry
  %9 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8560
  %call4 = call %struct.loop* @loop_outer(%struct.loop* %9), !dbg !8560
  %aux5 = getelementptr inbounds %struct.loop, %struct.loop* %call4, i32 0, i32 10, !dbg !8560
  %10 = load i8*, i8** %aux5, align 8, !dbg !8560
  %11 = bitcast i8* %10 to %struct.VEC_basic_block_heap*, !dbg !8560
  br label %cond.end, !dbg !8560

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_heap* [ null, %cond.true ], [ %11, %cond.false ], !dbg !8560
  store %struct.VEC_basic_block_heap* %cond, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8559
  %12 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8561
  %tobool = icmp ne %struct.loop* %12, null, !dbg !8561
  br i1 %tobool, label %cond.false7, label %cond.true6, !dbg !8561

cond.true6:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 6137, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8561
  br label %cond.end8, !dbg !8561

cond.false7:                                      ; preds = %cond.end
  br label %cond.end8, !dbg !8561

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi i32 [ 0, %cond.true6 ], [ 0, %cond.false7 ], !dbg !8561
  %13 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8562
  %tobool10 = icmp ne %struct.VEC_basic_block_heap* %13, null, !dbg !8562
  br i1 %tobool10, label %cond.true11, label %cond.false12, !dbg !8562

cond.true11:                                      ; preds = %cond.end8
  %14 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8562
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %14, i32 0, i32 0, !dbg !8562
  br label %cond.end13, !dbg !8562

cond.false12:                                     ; preds = %cond.end8
  br label %cond.end13, !dbg !8562

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi %struct.VEC_basic_block_base* [ %base, %cond.true11 ], [ null, %cond.false12 ], !dbg !8562
  %call15 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond14), !dbg !8562
  store i32 %call15, i32* %old_len, align 4, !dbg !8563
  store i32 0, i32* %i, align 4, !dbg !8564
  br label %for.cond, !dbg !8566

for.cond:                                         ; preds = %for.inc, %cond.end13
  %15 = load i32, i32* %i, align 4, !dbg !8567
  %16 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !8569
  %17 = load i32, i32* %cur_rgn, align 4, !dbg !8569
  %idxprom16 = sext i32 %17 to i64, !dbg !8569
  %arrayidx17 = getelementptr inbounds %struct.region, %struct.region* %16, i64 %idxprom16, !dbg !8569
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx17, i32 0, i32 0, !dbg !8569
  %18 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !8569
  %cmp18 = icmp slt i32 %15, %18, !dbg !8570
  br i1 %cmp18, label %for.body, label %for.end, !dbg !8571

for.body:                                         ; preds = %for.cond
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8572
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !8572
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8572
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8572
  %x_basic_block_info = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 2, !dbg !8572
  %21 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info, align 8, !dbg !8572
  %tobool19 = icmp ne %struct.VEC_basic_block_gc* %21, null, !dbg !8572
  br i1 %tobool19, label %cond.true20, label %cond.false25, !dbg !8572

cond.true20:                                      ; preds = %for.body
  %22 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8572
  %add.ptr21 = getelementptr inbounds %struct.function, %struct.function* %22, i64 0, !dbg !8572
  %cfg22 = getelementptr inbounds %struct.function, %struct.function* %add.ptr21, i32 0, i32 1, !dbg !8572
  %23 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg22, align 8, !dbg !8572
  %x_basic_block_info23 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %23, i32 0, i32 2, !dbg !8572
  %24 = load %struct.VEC_basic_block_gc*, %struct.VEC_basic_block_gc** %x_basic_block_info23, align 8, !dbg !8572
  %base24 = getelementptr inbounds %struct.VEC_basic_block_gc, %struct.VEC_basic_block_gc* %24, i32 0, i32 0, !dbg !8572
  br label %cond.end26, !dbg !8572

cond.false25:                                     ; preds = %for.body
  br label %cond.end26, !dbg !8572

cond.end26:                                       ; preds = %cond.false25, %cond.true20
  %cond27 = phi %struct.VEC_basic_block_base* [ %base24, %cond.true20 ], [ null, %cond.false25 ], !dbg !8572
  %25 = load i32*, i32** @rgn_bb_table, align 8, !dbg !8572
  %26 = load i32*, i32** @ebb_head, align 8, !dbg !8572
  %27 = load i32, i32* %i, align 4, !dbg !8572
  %idxprom28 = sext i32 %27 to i64, !dbg !8572
  %arrayidx29 = getelementptr inbounds i32, i32* %26, i64 %idxprom28, !dbg !8572
  %28 = load i32, i32* %arrayidx29, align 4, !dbg !8572
  %idxprom30 = sext i32 %28 to i64, !dbg !8572
  %arrayidx31 = getelementptr inbounds i32, i32* %25, i64 %idxprom30, !dbg !8572
  %29 = load i32, i32* %arrayidx31, align 4, !dbg !8572
  %call32 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond27, i32 %29), !dbg !8572
  store %struct.basic_block_def* %call32, %struct.basic_block_def** %bb, align 8, !dbg !8574
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8575
  %call33 = call zeroext i8 @sel_is_loop_preheader_p(%struct.basic_block_def* %30), !dbg !8577
  %tobool34 = icmp ne i8 %call33, 0, !dbg !8577
  br i1 %tobool34, label %if.then, label %if.end39, !dbg !8578

if.then:                                          ; preds = %cond.end26
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8579
  %call35 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %preheader_blocks, %struct.basic_block_def* %31), !dbg !8579
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8581
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 7, !dbg !8581
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8581
  %33 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8581
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %33, i32 0, i32 1, !dbg !8581
  %34 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8581
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8583
  %call36 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %35), !dbg !8584
  %cmp37 = icmp ne %struct.rtx_def* %34, %call36, !dbg !8585
  br i1 %cmp37, label %if.then38, label %if.end, !dbg !8586

if.then38:                                        ; preds = %if.then
  store i8 0, i8* %all_empty_p, align 1, !dbg !8587
  br label %if.end, !dbg !8588

if.end:                                           ; preds = %if.then38, %if.then
  br label %if.end39, !dbg !8589

if.end39:                                         ; preds = %if.end, %cond.end26
  br label %for.inc, !dbg !8590

for.inc:                                          ; preds = %if.end39
  %36 = load i32, i32* %i, align 4, !dbg !8591
  %inc = add nsw i32 %36, 1, !dbg !8591
  store i32 %inc, i32* %i, align 4, !dbg !8591
  br label %for.cond, !dbg !8592, !llvm.loop !8593

for.end:                                          ; preds = %for.cond
  %37 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8595
  %tobool40 = icmp ne %struct.VEC_basic_block_heap* %37, null, !dbg !8595
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !8595

cond.true41:                                      ; preds = %for.end
  %38 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8595
  %base42 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %38, i32 0, i32 0, !dbg !8595
  br label %cond.end44, !dbg !8595

cond.false43:                                     ; preds = %for.end
  br label %cond.end44, !dbg !8595

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_basic_block_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !8595
  %call46 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond45), !dbg !8595
  %sub = sub i32 %call46, 1, !dbg !8597
  store i32 %sub, i32* %i, align 4, !dbg !8598
  br label %for.cond47, !dbg !8599

for.cond47:                                       ; preds = %for.inc57, %cond.end44
  %39 = load i32, i32* %i, align 4, !dbg !8600
  %40 = load i32, i32* %old_len, align 4, !dbg !8602
  %cmp48 = icmp sge i32 %39, %40, !dbg !8603
  br i1 %cmp48, label %for.body49, label %for.end58, !dbg !8604

for.body49:                                       ; preds = %for.cond47
  %41 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8605
  %tobool50 = icmp ne %struct.VEC_basic_block_heap* %41, null, !dbg !8605
  br i1 %tobool50, label %cond.true51, label %cond.false53, !dbg !8605

cond.true51:                                      ; preds = %for.body49
  %42 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8605
  %base52 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %42, i32 0, i32 0, !dbg !8605
  br label %cond.end54, !dbg !8605

cond.false53:                                     ; preds = %for.body49
  br label %cond.end54, !dbg !8605

cond.end54:                                       ; preds = %cond.false53, %cond.true51
  %cond55 = phi %struct.VEC_basic_block_base* [ %base52, %cond.true51 ], [ null, %cond.false53 ], !dbg !8605
  %43 = load i32, i32* %i, align 4, !dbg !8605
  %call56 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond55, i32 %43), !dbg !8605
  store %struct.basic_block_def* %call56, %struct.basic_block_def** %bb, align 8, !dbg !8607
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8608
  call void @sel_remove_bb(%struct.basic_block_def* %44, i8 zeroext 0), !dbg !8609
  br label %for.inc57, !dbg !8610

for.inc57:                                        ; preds = %cond.end54
  %45 = load i32, i32* %i, align 4, !dbg !8611
  %dec = add nsw i32 %45, -1, !dbg !8611
  store i32 %dec, i32* %i, align 4, !dbg !8611
  br label %for.cond47, !dbg !8612, !llvm.loop !8613

for.end58:                                        ; preds = %for.cond47
  %46 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8615
  %call59 = call %struct.loop* @loop_outer(%struct.loop* %46), !dbg !8617
  %call60 = call zeroext i8 @considered_for_pipelining_p(%struct.loop* %call59), !dbg !8618
  %tobool61 = icmp ne i8 %call60, 0, !dbg !8618
  br i1 %tobool61, label %if.else136, label %if.then62, !dbg !8619

if.then62:                                        ; preds = %for.end58
  %47 = load i8, i8* %all_empty_p, align 1, !dbg !8620
  %tobool63 = icmp ne i8 %47, 0, !dbg !8620
  br i1 %tobool63, label %if.else, label %if.then64, !dbg !8623

if.then64:                                        ; preds = %if.then62
  call void @make_region_from_loop_preheader(%struct.VEC_basic_block_heap** %preheader_blocks), !dbg !8624
  br label %if.end135, !dbg !8624

if.else:                                          ; preds = %if.then62
  store i32 0, i32* %i, align 4, !dbg !8625
  br label %for.cond65, !dbg !8628

for.cond65:                                       ; preds = %for.inc132, %if.else
  %48 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8629
  %tobool66 = icmp ne %struct.VEC_basic_block_heap* %48, null, !dbg !8629
  br i1 %tobool66, label %cond.true67, label %cond.false69, !dbg !8629

cond.true67:                                      ; preds = %for.cond65
  %49 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8629
  %base68 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %49, i32 0, i32 0, !dbg !8629
  br label %cond.end70, !dbg !8629

cond.false69:                                     ; preds = %for.cond65
  br label %cond.end70, !dbg !8629

cond.end70:                                       ; preds = %cond.false69, %cond.true67
  %cond71 = phi %struct.VEC_basic_block_base* [ %base68, %cond.true67 ], [ null, %cond.false69 ], !dbg !8629
  %50 = load i32, i32* %i, align 4, !dbg !8629
  %call72 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond71, i32 %50, %struct.basic_block_def** %bb), !dbg !8629
  %tobool73 = icmp ne i32 %call72, 0, !dbg !8631
  br i1 %tobool73, label %for.body74, label %for.end134, !dbg !8631

for.body74:                                       ; preds = %cond.end70
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8632, metadata !DIExpression()), !dbg !8634
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8635, metadata !DIExpression()), !dbg !8636
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %prev_bb, metadata !8637, metadata !DIExpression()), !dbg !8638
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8639
  %prev_bb75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 5, !dbg !8640
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb75, align 8, !dbg !8640
  store %struct.basic_block_def* %52, %struct.basic_block_def** %prev_bb, align 8, !dbg !8638
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next_bb, metadata !8641, metadata !DIExpression()), !dbg !8642
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8643
  %next_bb76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 6, !dbg !8644
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb76, align 8, !dbg !8644
  store %struct.basic_block_def* %54, %struct.basic_block_def** %next_bb, align 8, !dbg !8642
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8645
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 0, !dbg !8645
  %call77 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !8645
  %56 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8645
  %57 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 0, !dbg !8645
  %58 = extractvalue { i32, %struct.VEC_edge_gc** } %call77, 0, !dbg !8645
  store i32 %58, i32* %57, align 8, !dbg !8645
  %59 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %56, i32 0, i32 1, !dbg !8645
  %60 = extractvalue { i32, %struct.VEC_edge_gc** } %call77, 1, !dbg !8645
  store %struct.VEC_edge_gc** %60, %struct.VEC_edge_gc*** %59, align 8, !dbg !8645
  %61 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8645
  %62 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8645
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %61, i8* align 8 %62, i64 16, i1 false), !dbg !8645
  br label %for.cond78, !dbg !8647

for.cond78:                                       ; preds = %if.end88, %for.body74
  %63 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8648
  %64 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 0, !dbg !8648
  %65 = load i32, i32* %64, align 8, !dbg !8648
  %66 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %63, i32 0, i32 1, !dbg !8648
  %67 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %66, align 8, !dbg !8648
  %call79 = call %struct.edge_def* @ei_safe_edge(i32 %65, %struct.VEC_edge_gc** %67), !dbg !8648
  store %struct.edge_def* %call79, %struct.edge_def** %e, align 8, !dbg !8650
  %tobool80 = icmp ne %struct.edge_def* %call79, null, !dbg !8651
  br i1 %tobool80, label %for.body81, label %for.end89, !dbg !8651

for.body81:                                       ; preds = %for.cond78
  %68 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8652
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %68, i32 0, i32 7, !dbg !8655
  %69 = load i32, i32* %flags, align 8, !dbg !8655
  %and = and i32 %69, 1, !dbg !8656
  %tobool82 = icmp ne i32 %and, 0, !dbg !8656
  br i1 %tobool82, label %if.else86, label %if.then83, !dbg !8657

if.then83:                                        ; preds = %for.body81
  %70 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8658
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8659
  %next_bb84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 6, !dbg !8660
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb84, align 8, !dbg !8660
  %call85 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %70, %struct.basic_block_def* %72), !dbg !8661
  br label %if.end88, !dbg !8661

if.else86:                                        ; preds = %for.body81
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8662
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8663
  %next_bb87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 6, !dbg !8664
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb87, align 8, !dbg !8664
  call void @redirect_edge_succ(%struct.edge_def* %73, %struct.basic_block_def* %75), !dbg !8665
  br label %if.end88

if.end88:                                         ; preds = %if.else86, %if.then83
  br label %for.cond78, !dbg !8666, !llvm.loop !8667

for.end89:                                        ; preds = %for.cond78
  %76 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8669
  %tobool90 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %76, null, !dbg !8669
  br i1 %tobool90, label %cond.true91, label %cond.false93, !dbg !8669

cond.true91:                                      ; preds = %for.end89
  %77 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !8669
  %base92 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %77, i32 0, i32 0, !dbg !8669
  br label %cond.end94, !dbg !8669

cond.false93:                                     ; preds = %for.end89
  br label %cond.end94, !dbg !8669

cond.end94:                                       ; preds = %cond.false93, %cond.true91
  %cond95 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base92, %cond.true91 ], [ null, %cond.false93 ], !dbg !8669
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8669
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 9, !dbg !8669
  %79 = load i32, i32* %index, align 8, !dbg !8669
  %call96 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond95, i32 %79), !dbg !8669
  %note_list = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call96, i32 0, i32 0, !dbg !8669
  %80 = load %struct.rtx_def*, %struct.rtx_def** %note_list, align 8, !dbg !8669
  %cmp97 = icmp eq %struct.rtx_def* %80, null, !dbg !8669
  br i1 %cmp97, label %cond.false99, label %cond.true98, !dbg !8669

cond.true98:                                      ; preds = %cond.end94
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 6187, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8669
  br label %cond.end100, !dbg !8669

cond.false99:                                     ; preds = %cond.end94
  br label %cond.end100, !dbg !8669

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !8669
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !8670
  call void @delete_and_free_basic_block(%struct.basic_block_def* %81), !dbg !8671
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8672
  %prev_bb102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %82, i32 0, i32 5, !dbg !8674
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb102, align 8, !dbg !8674
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8675
  %cmp103 = icmp eq %struct.basic_block_def* %83, %84, !dbg !8676
  br i1 %cmp103, label %land.lhs.true, label %if.end131, !dbg !8677

land.lhs.true:                                    ; preds = %cond.end100
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8678
  %86 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8679
  %add.ptr104 = getelementptr inbounds %struct.function, %struct.function* %86, i64 0, !dbg !8679
  %cfg105 = getelementptr inbounds %struct.function, %struct.function* %add.ptr104, i32 0, i32 1, !dbg !8679
  %87 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg105, align 8, !dbg !8679
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %87, i32 0, i32 0, !dbg !8679
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !8679
  %cmp106 = icmp ne %struct.basic_block_def* %85, %88, !dbg !8680
  br i1 %cmp106, label %land.lhs.true107, label %if.end131, !dbg !8681

land.lhs.true107:                                 ; preds = %land.lhs.true
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8682
  %il108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 7, !dbg !8682
  %rtl109 = bitcast %union.basic_block_il_dependent* %il108 to %struct.rtl_bb_info**, !dbg !8682
  %90 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl109, align 8, !dbg !8682
  %end_110 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %90, i32 0, i32 1, !dbg !8682
  %91 = load %struct.rtx_def*, %struct.rtx_def** %end_110, align 8, !dbg !8682
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8683
  %call111 = call zeroext i8 @jump_leads_only_to_bb_p(%struct.rtx_def* %91, %struct.basic_block_def* %92), !dbg !8684
  %conv = zext i8 %call111 to i32, !dbg !8684
  %tobool112 = icmp ne i32 %conv, 0, !dbg !8684
  br i1 %tobool112, label %if.then113, label %if.end131, !dbg !8685

if.then113:                                       ; preds = %land.lhs.true107
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8686
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %93, i32 0, i32 1, !dbg !8686
  %94 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8686
  %tobool114 = icmp ne %struct.VEC_edge_gc* %94, null, !dbg !8686
  br i1 %tobool114, label %cond.true115, label %cond.false118, !dbg !8686

cond.true115:                                     ; preds = %if.then113
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8686
  %succs116 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 1, !dbg !8686
  %96 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs116, align 8, !dbg !8686
  %base117 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %96, i32 0, i32 0, !dbg !8686
  br label %cond.end119, !dbg !8686

cond.false118:                                    ; preds = %if.then113
  br label %cond.end119, !dbg !8686

cond.end119:                                      ; preds = %cond.false118, %cond.true115
  %cond120 = phi %struct.VEC_edge_base* [ %base117, %cond.true115 ], [ null, %cond.false118 ], !dbg !8686
  %call121 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond120, i32 0), !dbg !8686
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8688
  %call122 = call %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def* %call121, %struct.basic_block_def* %97), !dbg !8689
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8690
  %il123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %98, i32 0, i32 7, !dbg !8690
  %rtl124 = bitcast %union.basic_block_il_dependent* %il123 to %struct.rtl_bb_info**, !dbg !8690
  %99 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl124, align 8, !dbg !8690
  %end_125 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %99, i32 0, i32 1, !dbg !8690
  %100 = load %struct.rtx_def*, %struct.rtx_def** %end_125, align 8, !dbg !8690
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8692
  %call126 = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %101), !dbg !8693
  %cmp127 = icmp eq %struct.rtx_def* %100, %call126, !dbg !8694
  br i1 %cmp127, label %if.then129, label %if.end130, !dbg !8695

if.then129:                                       ; preds = %cond.end119
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !8696
  call void @free_data_sets(%struct.basic_block_def* %102), !dbg !8697
  br label %if.end130, !dbg !8697

if.end130:                                        ; preds = %if.then129, %cond.end119
  br label %if.end131, !dbg !8698

if.end131:                                        ; preds = %if.end130, %land.lhs.true107, %land.lhs.true, %cond.end100
  br label %for.inc132, !dbg !8699

for.inc132:                                       ; preds = %if.end131
  %103 = load i32, i32* %i, align 4, !dbg !8700
  %inc133 = add nsw i32 %103, 1, !dbg !8700
  store i32 %inc133, i32* %i, align 4, !dbg !8700
  br label %for.cond65, !dbg !8701, !llvm.loop !8702

for.end134:                                       ; preds = %cond.end70
  br label %if.end135

if.end135:                                        ; preds = %for.end134, %if.then64
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %preheader_blocks), !dbg !8704
  br label %if.end147, !dbg !8705

if.else136:                                       ; preds = %for.end58
  %104 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8706
  %cmp137 = icmp ne %struct.VEC_basic_block_heap* %104, null, !dbg !8706
  br i1 %cmp137, label %cond.true139, label %cond.false140, !dbg !8706

cond.true139:                                     ; preds = %if.else136
  %105 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !8706
  %106 = bitcast %struct.VEC_basic_block_heap* %105 to i8*, !dbg !8706
  br label %cond.end143, !dbg !8706

cond.false140:                                    ; preds = %if.else136
  %107 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8706
  %call141 = call %struct.loop* @loop_outer(%struct.loop* %107), !dbg !8706
  %aux142 = getelementptr inbounds %struct.loop, %struct.loop* %call141, i32 0, i32 10, !dbg !8706
  %108 = load i8*, i8** %aux142, align 8, !dbg !8706
  br label %cond.end143, !dbg !8706

cond.end143:                                      ; preds = %cond.false140, %cond.true139
  %cond144 = phi i8* [ %106, %cond.true139 ], [ %108, %cond.false140 ], !dbg !8706
  %109 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !8706
  %call145 = call %struct.loop* @loop_outer(%struct.loop* %109), !dbg !8706
  %aux146 = getelementptr inbounds %struct.loop, %struct.loop* %call145, i32 0, i32 10, !dbg !8706
  store i8* %cond144, i8** %aux146, align 8, !dbg !8706
  br label %if.end147

if.end147:                                        ; preds = %cond.end143, %if.end135
  ret void, !dbg !8707
}

; Function Attrs: noinline nounwind uwtable
define internal void @finish_region_bb_info() #0 !dbg !8708 {
entry:
  call void @VEC_sel_region_bb_info_def_heap_free(%struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info), !dbg !8709
  ret void, !dbg !8710
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @sel_insn_has_single_succ_p(%struct.rtx_def* %insn, i32 %flags) #0 !dbg !8711 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %flags.addr = alloca i32, align 4
  %succ = alloca %struct.rtx_def*, align 8
  %si = alloca %struct.succ_iterator, align 8
  %first_p = alloca i8, align 1
  %tmp = alloca %struct.succ_iterator, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8714, metadata !DIExpression()), !dbg !8715
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !8716, metadata !DIExpression()), !dbg !8717
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !8718, metadata !DIExpression()), !dbg !8719
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !8720, metadata !DIExpression()), !dbg !8721
  call void @llvm.dbg.declare(metadata i8* %first_p, metadata !8722, metadata !DIExpression()), !dbg !8723
  store i8 1, i8* %first_p, align 1, !dbg !8723
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8724
  %1 = load i32, i32* %flags.addr, align 4, !dbg !8724
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %0, i32 %1), !dbg !8724
  %2 = bitcast %struct.succ_iterator* %si to i8*, !dbg !8724
  %3 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !8724
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 64, i1 false), !dbg !8724
  br label %for.cond, !dbg !8724

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8726
  %call = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %4, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !8726
  %tobool = icmp ne i8 %call, 0, !dbg !8724
  br i1 %tobool, label %for.body, label %for.end, !dbg !8724

for.body:                                         ; preds = %for.cond
  %5 = load i8, i8* %first_p, align 1, !dbg !8728
  %tobool1 = icmp ne i8 %5, 0, !dbg !8728
  br i1 %tobool1, label %if.then, label %if.else, !dbg !8731

if.then:                                          ; preds = %for.body
  store i8 0, i8* %first_p, align 1, !dbg !8732
  br label %if.end, !dbg !8733

if.else:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !8734
  br label %return, !dbg !8734

if.end:                                           ; preds = %if.then
  br label %for.inc, !dbg !8735

for.inc:                                          ; preds = %if.end
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !8726
  br label %for.cond, !dbg !8726, !llvm.loop !8736

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !8738
  br label %return, !dbg !8738

return:                                           ; preds = %for.end, %if.else
  %6 = load i8, i8* %retval, align 1, !dbg !8739
  ret i8 %6, !dbg !8739
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_succs_info(%struct.succs_info* %sinfo) #0 !dbg !8740 {
entry:
  %sinfo.addr = alloca %struct.succs_info*, align 8
  store %struct.succs_info* %sinfo, %struct.succs_info** %sinfo.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.succs_info** %sinfo.addr, metadata !8743, metadata !DIExpression()), !dbg !8744
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8745
  %cmp = icmp sge i32 %0, 0, !dbg !8745
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !8745

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !8745
  %2 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8745
  %idxprom = sext i32 %2 to i64, !dbg !8745
  %arrayidx = getelementptr inbounds %struct.succs_info, %struct.succs_info* %1, i64 %idxprom, !dbg !8745
  %3 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8745
  %cmp1 = icmp eq %struct.succs_info* %arrayidx, %3, !dbg !8745
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !8745

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4514, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8745
  br label %cond.end, !dbg !8745

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !8745

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8745
  %4 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8746
  %dec = add nsw i32 %4, -1, !dbg !8746
  store i32 %dec, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8746
  %5 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8747
  %succs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %5, i32 0, i32 1, !dbg !8747
  %6 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_ok, align 8, !dbg !8747
  %tobool = icmp ne %struct.VEC_rtx_heap* %6, null, !dbg !8747
  br i1 %tobool, label %cond.true2, label %cond.false4, !dbg !8747

cond.true2:                                       ; preds = %cond.end
  %7 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8747
  %succs_ok3 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %7, i32 0, i32 1, !dbg !8747
  %8 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_ok3, align 8, !dbg !8747
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %8, i32 0, i32 0, !dbg !8747
  br label %cond.end5, !dbg !8747

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !8747

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_rtx_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !8747
  %9 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8747
  %succs_ok7 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %9, i32 0, i32 1, !dbg !8747
  %10 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_ok7, align 8, !dbg !8747
  %tobool8 = icmp ne %struct.VEC_rtx_heap* %10, null, !dbg !8747
  br i1 %tobool8, label %cond.true9, label %cond.false12, !dbg !8747

cond.true9:                                       ; preds = %cond.end5
  %11 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8747
  %succs_ok10 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %11, i32 0, i32 1, !dbg !8747
  %12 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_ok10, align 8, !dbg !8747
  %base11 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %12, i32 0, i32 0, !dbg !8747
  br label %cond.end13, !dbg !8747

cond.false12:                                     ; preds = %cond.end5
  br label %cond.end13, !dbg !8747

cond.end13:                                       ; preds = %cond.false12, %cond.true9
  %cond14 = phi %struct.VEC_rtx_base* [ %base11, %cond.true9 ], [ null, %cond.false12 ], !dbg !8747
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond14), !dbg !8747
  call void @VEC_rtx_base_block_remove(%struct.VEC_rtx_base* %cond6, i32 0, i32 %call), !dbg !8747
  %13 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8748
  %succs_other = getelementptr inbounds %struct.succs_info, %struct.succs_info* %13, i32 0, i32 3, !dbg !8748
  %14 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_other, align 8, !dbg !8748
  %tobool15 = icmp ne %struct.VEC_rtx_heap* %14, null, !dbg !8748
  br i1 %tobool15, label %cond.true16, label %cond.false19, !dbg !8748

cond.true16:                                      ; preds = %cond.end13
  %15 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8748
  %succs_other17 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %15, i32 0, i32 3, !dbg !8748
  %16 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_other17, align 8, !dbg !8748
  %base18 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %16, i32 0, i32 0, !dbg !8748
  br label %cond.end20, !dbg !8748

cond.false19:                                     ; preds = %cond.end13
  br label %cond.end20, !dbg !8748

cond.end20:                                       ; preds = %cond.false19, %cond.true16
  %cond21 = phi %struct.VEC_rtx_base* [ %base18, %cond.true16 ], [ null, %cond.false19 ], !dbg !8748
  %17 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8748
  %succs_other22 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %17, i32 0, i32 3, !dbg !8748
  %18 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_other22, align 8, !dbg !8748
  %tobool23 = icmp ne %struct.VEC_rtx_heap* %18, null, !dbg !8748
  br i1 %tobool23, label %cond.true24, label %cond.false27, !dbg !8748

cond.true24:                                      ; preds = %cond.end20
  %19 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8748
  %succs_other25 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %19, i32 0, i32 3, !dbg !8748
  %20 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %succs_other25, align 8, !dbg !8748
  %base26 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %20, i32 0, i32 0, !dbg !8748
  br label %cond.end28, !dbg !8748

cond.false27:                                     ; preds = %cond.end20
  br label %cond.end28, !dbg !8748

cond.end28:                                       ; preds = %cond.false27, %cond.true24
  %cond29 = phi %struct.VEC_rtx_base* [ %base26, %cond.true24 ], [ null, %cond.false27 ], !dbg !8748
  %call30 = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond29), !dbg !8748
  call void @VEC_rtx_base_block_remove(%struct.VEC_rtx_base* %cond21, i32 0, i32 %call30), !dbg !8748
  %21 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8749
  %probs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %21, i32 0, i32 2, !dbg !8749
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %probs_ok, align 8, !dbg !8749
  %tobool31 = icmp ne %struct.VEC_int_heap* %22, null, !dbg !8749
  br i1 %tobool31, label %cond.true32, label %cond.false35, !dbg !8749

cond.true32:                                      ; preds = %cond.end28
  %23 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8749
  %probs_ok33 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %23, i32 0, i32 2, !dbg !8749
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %probs_ok33, align 8, !dbg !8749
  %base34 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %24, i32 0, i32 0, !dbg !8749
  br label %cond.end36, !dbg !8749

cond.false35:                                     ; preds = %cond.end28
  br label %cond.end36, !dbg !8749

cond.end36:                                       ; preds = %cond.false35, %cond.true32
  %cond37 = phi %struct.VEC_int_base* [ %base34, %cond.true32 ], [ null, %cond.false35 ], !dbg !8749
  %25 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8749
  %probs_ok38 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %25, i32 0, i32 2, !dbg !8749
  %26 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %probs_ok38, align 8, !dbg !8749
  %tobool39 = icmp ne %struct.VEC_int_heap* %26, null, !dbg !8749
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !8749

cond.true40:                                      ; preds = %cond.end36
  %27 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8749
  %probs_ok41 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %27, i32 0, i32 2, !dbg !8749
  %28 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %probs_ok41, align 8, !dbg !8749
  %base42 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %28, i32 0, i32 0, !dbg !8749
  br label %cond.end44, !dbg !8749

cond.false43:                                     ; preds = %cond.end36
  br label %cond.end44, !dbg !8749

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_int_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !8749
  %call46 = call i32 @VEC_int_base_length(%struct.VEC_int_base* %cond45), !dbg !8749
  call void @VEC_int_base_block_remove(%struct.VEC_int_base* %cond37, i32 0, i32 %call46), !dbg !8749
  %29 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8750
  %all_prob = getelementptr inbounds %struct.succs_info, %struct.succs_info* %29, i32 0, i32 4, !dbg !8751
  store i32 0, i32* %all_prob, align 8, !dbg !8752
  %30 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8753
  %succs_ok_n = getelementptr inbounds %struct.succs_info, %struct.succs_info* %30, i32 0, i32 6, !dbg !8754
  store i32 0, i32* %succs_ok_n, align 8, !dbg !8755
  %31 = load %struct.succs_info*, %struct.succs_info** %sinfo.addr, align 8, !dbg !8756
  %all_succs_n = getelementptr inbounds %struct.succs_info, %struct.succs_info* %31, i32 0, i32 5, !dbg !8757
  store i32 0, i32* %all_succs_n, align 4, !dbg !8758
  ret void, !dbg !8759
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_base_block_remove(%struct.VEC_rtx_base* %vec_, i32 %ix_, i32 %len_) #0 !dbg !8760 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %ix_.addr = alloca i32, align 4
  %len_.addr = alloca i32, align 4
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !8763, metadata !DIExpression()), !dbg !8764
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8765, metadata !DIExpression()), !dbg !8764
  store i32 %len_, i32* %len_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len_.addr, metadata !8766, metadata !DIExpression()), !dbg !8764
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !8767, metadata !DIExpression()), !dbg !8764
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !8764
  %1 = load i32, i32* %len_.addr, align 4, !dbg !8764
  %add = add i32 %0, %1, !dbg !8764
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8764
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 0, !dbg !8764
  %3 = load i32, i32* %num, align 8, !dbg !8764
  %cmp = icmp ule i32 %add, %3, !dbg !8764
  %conv = zext i1 %cmp to i32, !dbg !8764
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8764
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !8764
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8764
  %idxprom = zext i32 %5 to i64, !dbg !8764
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !8764
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !8764
  %6 = load i32, i32* %len_.addr, align 4, !dbg !8764
  %7 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8764
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %7, i32 0, i32 0, !dbg !8764
  %8 = load i32, i32* %num1, align 8, !dbg !8764
  %sub = sub i32 %8, %6, !dbg !8764
  store i32 %sub, i32* %num1, align 8, !dbg !8764
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !8764
  %10 = bitcast %struct.rtx_def** %9 to i8*, !dbg !8764
  %11 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !8764
  %12 = load i32, i32* %len_.addr, align 4, !dbg !8764
  %idx.ext = zext i32 %12 to i64, !dbg !8764
  %add.ptr = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %11, i64 %idx.ext, !dbg !8764
  %13 = bitcast %struct.rtx_def** %add.ptr to i8*, !dbg !8764
  %14 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8764
  %num2 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %14, i32 0, i32 0, !dbg !8764
  %15 = load i32, i32* %num2, align 8, !dbg !8764
  %16 = load i32, i32* %ix_.addr, align 4, !dbg !8764
  %sub3 = sub i32 %15, %16, !dbg !8764
  %conv4 = zext i32 %sub3 to i64, !dbg !8764
  %mul = mul i64 %conv4, 8, !dbg !8764
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %13, i64 %mul, i1 false), !dbg !8764
  ret void, !dbg !8764
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %vec_) #0 !dbg !8768 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !8773, metadata !DIExpression()), !dbg !8774
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8774
  %tobool = icmp ne %struct.VEC_rtx_base* %0, null, !dbg !8774
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8774

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !8774
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %1, i32 0, i32 0, !dbg !8774
  %2 = load i32, i32* %num, align 8, !dbg !8774
  br label %cond.end, !dbg !8774

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8774

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8774
  ret i32 %cond, !dbg !8774
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_base_block_remove(%struct.VEC_int_base* %vec_, i32 %ix_, i32 %len_) #0 !dbg !8775 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %len_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8779, metadata !DIExpression()), !dbg !8780
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !8781, metadata !DIExpression()), !dbg !8780
  store i32 %len_, i32* %len_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %len_.addr, metadata !8782, metadata !DIExpression()), !dbg !8780
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !8783, metadata !DIExpression()), !dbg !8780
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !8780
  %1 = load i32, i32* %len_.addr, align 4, !dbg !8780
  %add = add i32 %0, %1, !dbg !8780
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8780
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !8780
  %3 = load i32, i32* %num, align 4, !dbg !8780
  %cmp = icmp ule i32 %add, %3, !dbg !8780
  %conv = zext i1 %cmp to i32, !dbg !8780
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8780
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !8780
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !8780
  %idxprom = zext i32 %5 to i64, !dbg !8780
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !8780
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !8780
  %6 = load i32, i32* %len_.addr, align 4, !dbg !8780
  %7 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8780
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %7, i32 0, i32 0, !dbg !8780
  %8 = load i32, i32* %num1, align 4, !dbg !8780
  %sub = sub i32 %8, %6, !dbg !8780
  store i32 %sub, i32* %num1, align 4, !dbg !8780
  %9 = load i32*, i32** %slot_, align 8, !dbg !8780
  %10 = bitcast i32* %9 to i8*, !dbg !8780
  %11 = load i32*, i32** %slot_, align 8, !dbg !8780
  %12 = load i32, i32* %len_.addr, align 4, !dbg !8780
  %idx.ext = zext i32 %12 to i64, !dbg !8780
  %add.ptr = getelementptr inbounds i32, i32* %11, i64 %idx.ext, !dbg !8780
  %13 = bitcast i32* %add.ptr to i8*, !dbg !8780
  %14 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8780
  %num2 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %14, i32 0, i32 0, !dbg !8780
  %15 = load i32, i32* %num2, align 4, !dbg !8780
  %16 = load i32, i32* %ix_.addr, align 4, !dbg !8780
  %sub3 = sub i32 %15, %16, !dbg !8780
  %conv4 = zext i32 %sub3 to i64, !dbg !8780
  %mul = mul i64 %conv4, 4, !dbg !8780
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %13, i64 %mul, i1 false), !dbg !8780
  ret void, !dbg !8780
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_length(%struct.VEC_int_base* %vec_) #0 !dbg !8784 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !8787, metadata !DIExpression()), !dbg !8788
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8788
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !8788
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8788

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !8788
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %1, i32 0, i32 0, !dbg !8788
  %2 = load i32, i32* %num, align 4, !dbg !8788
  br label %cond.end, !dbg !8788

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8788

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !8788
  ret i32 %cond, !dbg !8788
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.succs_info* @compute_succs_info(%struct.rtx_def* %insn, i16 signext %flags) #0 !dbg !8789 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %flags.addr = alloca i16, align 2
  %si = alloca %struct.succ_iterator, align 8
  %succ = alloca %struct.rtx_def*, align 8
  %sinfo = alloca %struct.succs_info*, align 8
  %tmp = alloca %struct.succ_iterator, align 8
  %current_flags = alloca i16, align 2
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8792, metadata !DIExpression()), !dbg !8793
  store i16 %flags, i16* %flags.addr, align 2
  call void @llvm.dbg.declare(metadata i16* %flags.addr, metadata !8794, metadata !DIExpression()), !dbg !8795
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !8796, metadata !DIExpression()), !dbg !8797
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !8798, metadata !DIExpression()), !dbg !8799
  call void @llvm.dbg.declare(metadata %struct.succs_info** %sinfo, metadata !8800, metadata !DIExpression()), !dbg !8801
  %call = call %struct.succs_info* @alloc_succs_info(), !dbg !8802
  store %struct.succs_info* %call, %struct.succs_info** %sinfo, align 8, !dbg !8801
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8803
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %0, i32 7), !dbg !8803
  %1 = bitcast %struct.succ_iterator* %si to i8*, !dbg !8803
  %2 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !8803
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %1, i8* align 8 %2, i64 64, i1 false), !dbg !8803
  br label %for.cond, !dbg !8803

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8805
  %call1 = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %3, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !8805
  %tobool = icmp ne i8 %call1, 0, !dbg !8803
  br i1 %tobool, label %for.body, label %for.end, !dbg !8803

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i16* %current_flags, metadata !8807, metadata !DIExpression()), !dbg !8809
  %current_flags2 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 6, !dbg !8810
  %4 = load i16, i16* %current_flags2, align 2, !dbg !8810
  %conv = sext i16 %4 to i32, !dbg !8811
  %and = and i32 %conv, -9, !dbg !8812
  %conv3 = trunc i32 %and to i16, !dbg !8811
  store i16 %conv3, i16* %current_flags, align 2, !dbg !8809
  %5 = load i16, i16* %current_flags, align 2, !dbg !8813
  %conv4 = sext i16 %5 to i32, !dbg !8813
  %6 = load i16, i16* %flags.addr, align 2, !dbg !8815
  %conv5 = sext i16 %6 to i32, !dbg !8815
  %and6 = and i32 %conv4, %conv5, !dbg !8816
  %tobool7 = icmp ne i32 %and6, 0, !dbg !8816
  br i1 %tobool7, label %if.then, label %if.else, !dbg !8817

if.then:                                          ; preds = %for.body
  %7 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8818
  %succs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %7, i32 0, i32 1, !dbg !8818
  %8 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !8818
  %call8 = call %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %succs_ok, %struct.rtx_def* %8), !dbg !8818
  %9 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8820
  %probs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %9, i32 0, i32 2, !dbg !8820
  %bb_end = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 0, !dbg !8820
  %10 = load i8, i8* %bb_end, align 8, !dbg !8820
  %conv9 = zext i8 %10 to i32, !dbg !8820
  %tobool10 = icmp ne i32 %conv9, 0, !dbg !8820
  br i1 %tobool10, label %cond.true, label %cond.false, !dbg !8820

cond.true:                                        ; preds = %if.then
  %e1 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 1, !dbg !8820
  %11 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !8820
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 8, !dbg !8820
  %12 = load i32, i32* %probability, align 4, !dbg !8820
  br label %cond.end, !dbg !8820

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !8820

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %12, %cond.true ], [ 10000, %cond.false ], !dbg !8820
  %call11 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %probs_ok, i32 %cond), !dbg !8820
  %13 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8821
  %succs_ok_n = getelementptr inbounds %struct.succs_info, %struct.succs_info* %13, i32 0, i32 6, !dbg !8822
  %14 = load i32, i32* %succs_ok_n, align 8, !dbg !8823
  %inc = add nsw i32 %14, 1, !dbg !8823
  store i32 %inc, i32* %succs_ok_n, align 8, !dbg !8823
  br label %if.end, !dbg !8824

if.else:                                          ; preds = %for.body
  %15 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8825
  %succs_other = getelementptr inbounds %struct.succs_info, %struct.succs_info* %15, i32 0, i32 3, !dbg !8825
  %16 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !8825
  %call12 = call %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %succs_other, %struct.rtx_def* %16), !dbg !8825
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %bb_end13 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 0, !dbg !8826
  %17 = load i8, i8* %bb_end13, align 8, !dbg !8826
  %tobool14 = icmp ne i8 %17, 0, !dbg !8828
  br i1 %tobool14, label %if.else16, label %if.then15, !dbg !8829

if.then15:                                        ; preds = %if.end
  %18 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8830
  %all_prob = getelementptr inbounds %struct.succs_info, %struct.succs_info* %18, i32 0, i32 4, !dbg !8831
  store i32 10000, i32* %all_prob, align 8, !dbg !8832
  br label %if.end20, !dbg !8830

if.else16:                                        ; preds = %if.end
  %e117 = getelementptr inbounds %struct.succ_iterator, %struct.succ_iterator* %si, i32 0, i32 1, !dbg !8833
  %19 = load %struct.edge_def*, %struct.edge_def** %e117, align 8, !dbg !8833
  %probability18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 8, !dbg !8834
  %20 = load i32, i32* %probability18, align 4, !dbg !8834
  %21 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8835
  %all_prob19 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %21, i32 0, i32 4, !dbg !8836
  %22 = load i32, i32* %all_prob19, align 8, !dbg !8837
  %add = add nsw i32 %22, %20, !dbg !8837
  store i32 %add, i32* %all_prob19, align 8, !dbg !8837
  br label %if.end20

if.end20:                                         ; preds = %if.else16, %if.then15
  %23 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8838
  %all_succs_n = getelementptr inbounds %struct.succs_info, %struct.succs_info* %23, i32 0, i32 5, !dbg !8839
  %24 = load i32, i32* %all_succs_n, align 4, !dbg !8840
  %inc21 = add nsw i32 %24, 1, !dbg !8840
  store i32 %inc21, i32* %all_succs_n, align 4, !dbg !8840
  br label %for.inc, !dbg !8841

for.inc:                                          ; preds = %if.end20
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !8805
  br label %for.cond, !dbg !8805, !llvm.loop !8842

for.end:                                          ; preds = %for.cond
  %25 = load %struct.succs_info*, %struct.succs_info** %sinfo, align 8, !dbg !8844
  ret %struct.succs_info* %25, !dbg !8845
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.succs_info* @alloc_succs_info() #0 !dbg !8846 {
entry:
  %i = alloca i32, align 4
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8849
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 3), align 8, !dbg !8851
  %cmp = icmp eq i32 %0, %1, !dbg !8852
  br i1 %cmp, label %if.then, label %if.else, !dbg !8853

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8854, metadata !DIExpression()), !dbg !8856
  %2 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 3), align 8, !dbg !8857
  %inc = add nsw i32 %2, 1, !dbg !8857
  store i32 %inc, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 3), align 8, !dbg !8857
  %3 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 1), align 8, !dbg !8859
  %cmp1 = icmp sge i32 %inc, %3, !dbg !8860
  br i1 %cmp1, label %if.then2, label %if.end, !dbg !8861

if.then2:                                         ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4496, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8862
  br label %if.end, !dbg !8862

if.end:                                           ; preds = %if.then2, %if.then
  %4 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8863
  %inc3 = add nsw i32 %4, 1, !dbg !8863
  store i32 %inc3, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8863
  store i32 %inc3, i32* %i, align 4, !dbg !8864
  %call = call %struct.VEC_rtx_heap* @VEC_rtx_heap_alloc(i32 10), !dbg !8865
  %5 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !8866
  %6 = load i32, i32* %i, align 4, !dbg !8867
  %idxprom = sext i32 %6 to i64, !dbg !8868
  %arrayidx = getelementptr inbounds %struct.succs_info, %struct.succs_info* %5, i64 %idxprom, !dbg !8868
  %succs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx, i32 0, i32 1, !dbg !8869
  store %struct.VEC_rtx_heap* %call, %struct.VEC_rtx_heap** %succs_ok, align 8, !dbg !8870
  %call4 = call %struct.VEC_rtx_heap* @VEC_rtx_heap_alloc(i32 10), !dbg !8871
  %7 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !8872
  %8 = load i32, i32* %i, align 4, !dbg !8873
  %idxprom5 = sext i32 %8 to i64, !dbg !8874
  %arrayidx6 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %7, i64 %idxprom5, !dbg !8874
  %succs_other = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx6, i32 0, i32 3, !dbg !8875
  store %struct.VEC_rtx_heap* %call4, %struct.VEC_rtx_heap** %succs_other, align 8, !dbg !8876
  %call7 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 10), !dbg !8877
  %9 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !8878
  %10 = load i32, i32* %i, align 4, !dbg !8879
  %idxprom8 = sext i32 %10 to i64, !dbg !8880
  %arrayidx9 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %9, i64 %idxprom8, !dbg !8880
  %probs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx9, i32 0, i32 2, !dbg !8881
  store %struct.VEC_int_heap* %call7, %struct.VEC_int_heap** %probs_ok, align 8, !dbg !8882
  br label %if.end11, !dbg !8883

if.else:                                          ; preds = %entry
  %11 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8884
  %inc10 = add nsw i32 %11, 1, !dbg !8884
  store i32 %inc10, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8884
  br label %if.end11

if.end11:                                         ; preds = %if.else, %if.end
  %12 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !8885
  %13 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !8886
  %idxprom12 = sext i32 %13 to i64, !dbg !8887
  %arrayidx13 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %12, i64 %idxprom12, !dbg !8887
  ret %struct.succs_info* %arrayidx13, !dbg !8888
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_heap_safe_push(%struct.VEC_rtx_heap** %vec_, %struct.rtx_def* %obj_) #0 !dbg !8889 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !8895, metadata !DIExpression()), !dbg !8894
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !8894
  %call = call i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %0, i32 1), !dbg !8894
  %1 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !8894
  %2 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %1, align 8, !dbg !8894
  %tobool = icmp ne %struct.VEC_rtx_heap* %2, null, !dbg !8894
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8894

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !8894
  %4 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %3, align 8, !dbg !8894
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %4, i32 0, i32 0, !dbg !8894
  br label %cond.end, !dbg !8894

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8894

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8894
  %5 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !8894
  %call1 = call %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %cond, %struct.rtx_def* %5), !dbg !8894
  ret %struct.rtx_def** %call1, !dbg !8894
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !8896 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !8901, metadata !DIExpression()), !dbg !8902
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !8903, metadata !DIExpression()), !dbg !8902
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8902
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !8902
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8902
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !8902
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !8902
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8902

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !8902
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !8902
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !8902
  br label %cond.end, !dbg !8902

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8902

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8902
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !8902
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !8902
  ret i32* %call1, !dbg !8902
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @bb_ends_ebb_p(%struct.basic_block_def* %bb) #0 !dbg !8904 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %next_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8905, metadata !DIExpression()), !dbg !8906
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next_bb, metadata !8907, metadata !DIExpression()), !dbg !8908
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8909
  %call = call %struct.basic_block_def* @bb_next_bb(%struct.basic_block_def* %0), !dbg !8910
  store %struct.basic_block_def* %call, %struct.basic_block_def** %next_bb, align 8, !dbg !8908
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !8911, metadata !DIExpression()), !dbg !8912
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8913, metadata !DIExpression()), !dbg !8914
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8915
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8917
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !8917
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !8917
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !8917
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !8917
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !8917
  %cmp = icmp eq %struct.basic_block_def* %1, %4, !dbg !8918
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8919

lor.lhs.false:                                    ; preds = %entry
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @forced_ebb_heads, align 8, !dbg !8920
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8921
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !8922
  %7 = load i32, i32* %index, align 8, !dbg !8922
  %call1 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %5, i32 %7), !dbg !8923
  %tobool = icmp ne i32 %call1, 0, !dbg !8923
  br i1 %tobool, label %if.then, label %lor.lhs.false2, !dbg !8924

lor.lhs.false2:                                   ; preds = %lor.lhs.false
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8925
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 7, !dbg !8925
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8925
  %9 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8925
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %9, i32 0, i32 0, !dbg !8925
  %10 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8925
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8925
  %bf.load = load i32, i32* %11, align 8, !dbg !8925
  %bf.clear = and i32 %bf.load, 65535, !dbg !8925
  %cmp3 = icmp eq i32 %bf.clear, 12, !dbg !8925
  br i1 %cmp3, label %land.lhs.true, label %if.end, !dbg !8926

land.lhs.true:                                    ; preds = %lor.lhs.false2
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8927
  %call4 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %12), !dbg !8928
  %tobool5 = icmp ne i8 %call4, 0, !dbg !8928
  br i1 %tobool5, label %if.end, label %if.then, !dbg !8929

if.then:                                          ; preds = %land.lhs.true, %lor.lhs.false, %entry
  store i8 1, i8* %retval, align 1, !dbg !8930
  br label %return, !dbg !8930

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false2
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8931
  %call6 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %13), !dbg !8933
  %tobool7 = icmp ne i8 %call6, 0, !dbg !8933
  br i1 %tobool7, label %if.end9, label %if.then8, !dbg !8934

if.then8:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !8935
  br label %return, !dbg !8935

if.end9:                                          ; preds = %if.end
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8936
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !8936
  %call10 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !8936
  %15 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !8936
  %16 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 0, !dbg !8936
  %17 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 0, !dbg !8936
  store i32 %17, i32* %16, align 8, !dbg !8936
  %18 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %15, i32 0, i32 1, !dbg !8936
  %19 = extractvalue { i32, %struct.VEC_edge_gc** } %call10, 1, !dbg !8936
  store %struct.VEC_edge_gc** %19, %struct.VEC_edge_gc*** %18, align 8, !dbg !8936
  %20 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !8936
  %21 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !8936
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %20, i8* align 8 %21, i64 16, i1 false), !dbg !8936
  br label %for.cond, !dbg !8936

for.cond:                                         ; preds = %for.inc, %if.end9
  %22 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8938
  %23 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 0, !dbg !8938
  %24 = load i32, i32* %23, align 8, !dbg !8938
  %25 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %22, i32 0, i32 1, !dbg !8938
  %26 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %25, align 8, !dbg !8938
  %call11 = call zeroext i8 @ei_cond(i32 %24, %struct.VEC_edge_gc** %26, %struct.edge_def** %e), !dbg !8938
  %tobool12 = icmp ne i8 %call11, 0, !dbg !8936
  br i1 %tobool12, label %for.body, label %for.end, !dbg !8936

for.body:                                         ; preds = %for.cond
  %27 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8940
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %27, i32 0, i32 7, !dbg !8942
  %28 = load i32, i32* %flags, align 8, !dbg !8942
  %and = and i32 %28, 1, !dbg !8943
  %cmp13 = icmp ne i32 %and, 0, !dbg !8944
  br i1 %cmp13, label %if.then14, label %if.end16, !dbg !8945

if.then14:                                        ; preds = %for.body
  %29 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !8946
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %29, i32 0, i32 1, !dbg !8946
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8946
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8946
  %cmp15 = icmp eq %struct.basic_block_def* %30, %31, !dbg !8946
  br i1 %cmp15, label %cond.false, label %cond.true, !dbg !8946

cond.true:                                        ; preds = %if.then14
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8946
  br label %cond.end, !dbg !8946

cond.false:                                       ; preds = %if.then14
  br label %cond.end, !dbg !8946

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8946
  store i8 0, i8* %retval, align 1, !dbg !8948
  br label %return, !dbg !8948

if.end16:                                         ; preds = %for.body
  br label %for.inc, !dbg !8949

for.inc:                                          ; preds = %if.end16
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !8938
  br label %for.cond, !dbg !8938, !llvm.loop !8950

for.end:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !8952
  br label %return, !dbg !8952

return:                                           ; preds = %for.end, %cond.end, %if.then8, %if.then
  %32 = load i8, i8* %retval, align 1, !dbg !8953
  ret i8 %32, !dbg !8953
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @bb_next_bb(%struct.basic_block_def* %bb) #0 !dbg !8954 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8955, metadata !DIExpression()), !dbg !8956
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8957
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !8957
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !8957
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8957
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8957

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8957
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !8957
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !8957
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8957
  br label %cond.end, !dbg !8957

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8957
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8957
  switch i32 %call, label %sw.default [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb4
  ], !dbg !8958

sw.bb:                                            ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8959
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 6, !dbg !8961
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !8961
  store %struct.basic_block_def* %5, %struct.basic_block_def** %retval, align 8, !dbg !8962
  br label %return, !dbg !8962

sw.bb2:                                           ; preds = %cond.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8963
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %6), !dbg !8964
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %retval, align 8, !dbg !8965
  br label %return, !dbg !8965

sw.bb4:                                           ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 1, !dbg !8966
  %8 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !8966
  %tobool6 = icmp ne %struct.VEC_edge_gc* %8, null, !dbg !8966
  br i1 %tobool6, label %cond.true7, label %cond.false10, !dbg !8966

cond.true7:                                       ; preds = %sw.bb4
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 1, !dbg !8966
  %10 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs8, align 8, !dbg !8966
  %base9 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %10, i32 0, i32 0, !dbg !8966
  br label %cond.end11, !dbg !8966

cond.false10:                                     ; preds = %sw.bb4
  br label %cond.end11, !dbg !8966

cond.end11:                                       ; preds = %cond.false10, %cond.true7
  %cond12 = phi %struct.VEC_edge_base* [ %base9, %cond.true7 ], [ null, %cond.false10 ], !dbg !8966
  %call13 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond12, i32 0), !dbg !8966
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call13, i32 0, i32 7, !dbg !8966
  %11 = load i32, i32* %flags, align 8, !dbg !8966
  %and = and i32 %11, 1, !dbg !8966
  %tobool14 = icmp ne i32 %and, 0, !dbg !8966
  br i1 %tobool14, label %cond.true15, label %cond.false25, !dbg !8966

cond.true15:                                      ; preds = %cond.end11
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 1, !dbg !8966
  %13 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs16, align 8, !dbg !8966
  %tobool17 = icmp ne %struct.VEC_edge_gc* %13, null, !dbg !8966
  br i1 %tobool17, label %cond.true18, label %cond.false21, !dbg !8966

cond.true18:                                      ; preds = %cond.true15
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 1, !dbg !8966
  %15 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs19, align 8, !dbg !8966
  %base20 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %15, i32 0, i32 0, !dbg !8966
  br label %cond.end22, !dbg !8966

cond.false21:                                     ; preds = %cond.true15
  br label %cond.end22, !dbg !8966

cond.end22:                                       ; preds = %cond.false21, %cond.true18
  %cond23 = phi %struct.VEC_edge_base* [ %base20, %cond.true18 ], [ null, %cond.false21 ], !dbg !8966
  %call24 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond23, i32 0), !dbg !8966
  br label %cond.end35, !dbg !8966

cond.false25:                                     ; preds = %cond.end11
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 1, !dbg !8966
  %17 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs26, align 8, !dbg !8966
  %tobool27 = icmp ne %struct.VEC_edge_gc* %17, null, !dbg !8966
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !8966

cond.true28:                                      ; preds = %cond.false25
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8966
  %succs29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 1, !dbg !8966
  %19 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs29, align 8, !dbg !8966
  %base30 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %19, i32 0, i32 0, !dbg !8966
  br label %cond.end32, !dbg !8966

cond.false31:                                     ; preds = %cond.false25
  br label %cond.end32, !dbg !8966

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_edge_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !8966
  %call34 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond33, i32 1), !dbg !8966
  br label %cond.end35, !dbg !8966

cond.end35:                                       ; preds = %cond.end32, %cond.end22
  %cond36 = phi %struct.edge_def* [ %call24, %cond.end22 ], [ %call34, %cond.end32 ], !dbg !8966
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond36, i32 0, i32 1, !dbg !8967
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !8967
  store %struct.basic_block_def* %20, %struct.basic_block_def** %retval, align 8, !dbg !8968
  br label %return, !dbg !8968

sw.default:                                       ; preds = %cond.end
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8969
  %next_bb37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !8970
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb37, align 8, !dbg !8970
  store %struct.basic_block_def* %22, %struct.basic_block_def** %retval, align 8, !dbg !8971
  br label %return, !dbg !8971

return:                                           ; preds = %sw.default, %cond.end35, %sw.bb2, %sw.bb
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !8972
  ret %struct.basic_block_def* %23, !dbg !8972
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !8973 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8974, metadata !DIExpression()), !dbg !8975
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8976
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !8976
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !8976
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !8976
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !8976

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8976
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !8976
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !8976
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !8976
  br label %cond.end, !dbg !8976

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !8976

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !8976
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !8976
  %cmp = icmp eq i32 %call, 1, !dbg !8977
  %conv = zext i1 %cmp to i32, !dbg !8977
  %conv2 = trunc i32 %conv to i8, !dbg !8976
  ret i8 %conv2, !dbg !8978
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !8979 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !8982, metadata !DIExpression()), !dbg !8983
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !8984, metadata !DIExpression()), !dbg !8985
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !8986
  store i32 0, i32* %index, align 8, !dbg !8987
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !8988
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !8989
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !8990
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !8991
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !8991
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !8991
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !8992 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !8995, metadata !DIExpression()), !dbg !8996
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !8997, metadata !DIExpression()), !dbg !8998
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !8999
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !8999
  %5 = load i32, i32* %4, align 8, !dbg !8999
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !8999
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !8999
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !8999
  %tobool = icmp ne i8 %call, 0, !dbg !8999
  br i1 %tobool, label %if.else, label %if.then, !dbg !9001

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9002
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9002
  %10 = load i32, i32* %9, align 8, !dbg !9002
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9002
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9002
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9002
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9004
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !9005
  store i8 1, i8* %retval, align 1, !dbg !9006
  br label %return, !dbg !9006

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9007
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !9009
  store i8 0, i8* %retval, align 1, !dbg !9010
  br label %return, !dbg !9010

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !9011
  ret i8 %15, !dbg !9011
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !9012 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !9016, metadata !DIExpression()), !dbg !9017
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9018
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !9018
  %1 = load i32, i32* %index, align 8, !dbg !9018
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9018
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !9018
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9018
  %5 = load i32, i32* %4, align 8, !dbg !9018
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9018
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9018
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9018
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !9018
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9018

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9018
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !9018
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !9018
  %11 = load i32, i32* %10, align 8, !dbg !9018
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !9018
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !9018
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !9018
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !9018
  br label %cond.end, !dbg !9018

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9018
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9018
  %cmp = icmp ult i32 %1, %call2, !dbg !9018
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !9018

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9018
  br label %cond.end5, !dbg !9018

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9018

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !9018
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9019
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !9020
  %15 = load i32, i32* %index7, align 8, !dbg !9021
  %inc = add i32 %15, 1, !dbg !9021
  store i32 %inc, i32* %index7, align 8, !dbg !9021
  ret void, !dbg !9022
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @in_same_ebb_p(%struct.rtx_def* %insn, %struct.rtx_def* %succ) #0 !dbg !9023 {
entry:
  %retval = alloca i8, align 1
  %insn.addr = alloca %struct.rtx_def*, align 8
  %succ.addr = alloca %struct.rtx_def*, align 8
  %ptr = alloca %struct.basic_block_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9026, metadata !DIExpression()), !dbg !9027
  store %struct.rtx_def* %succ, %struct.rtx_def** %succ.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ.addr, metadata !9028, metadata !DIExpression()), !dbg !9029
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ptr, metadata !9030, metadata !DIExpression()), !dbg !9031
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9032
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9032
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9032
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !9032
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !9032
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9032
  store %struct.basic_block_def* %1, %struct.basic_block_def** %ptr, align 8, !dbg !9031
  br label %for.cond, !dbg !9033

for.cond:                                         ; preds = %if.end6, %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %ptr, align 8, !dbg !9034
  %3 = load %struct.rtx_def*, %struct.rtx_def** %succ.addr, align 8, !dbg !9039
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9039
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9039
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 3, !dbg !9039
  %rt_bb4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.basic_block_def**, !dbg !9039
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb4, align 8, !dbg !9039
  %cmp = icmp eq %struct.basic_block_def* %2, %4, !dbg !9040
  br i1 %cmp, label %if.then, label %if.end, !dbg !9041

if.then:                                          ; preds = %for.cond
  store i8 1, i8* %retval, align 1, !dbg !9042
  br label %return, !dbg !9042

if.end:                                           ; preds = %for.cond
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %ptr, align 8, !dbg !9043
  %call = call zeroext i8 @bb_ends_ebb_p(%struct.basic_block_def* %5), !dbg !9045
  %tobool = icmp ne i8 %call, 0, !dbg !9045
  br i1 %tobool, label %if.then5, label %if.end6, !dbg !9046

if.then5:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !9047
  br label %return, !dbg !9047

if.end6:                                          ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %ptr, align 8, !dbg !9048
  %call7 = call %struct.basic_block_def* @bb_next_bb(%struct.basic_block_def* %6), !dbg !9049
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %ptr, align 8, !dbg !9050
  br label %for.cond, !dbg !9051, !llvm.loop !9052

return:                                           ; preds = %if.then5, %if.then
  %7 = load i8, i8* %retval, align 1, !dbg !9055
  ret i8 %7, !dbg !9055
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_outdated_rtx_info(%struct.basic_block_def* %bb) #0 !dbg !9056 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9057, metadata !DIExpression()), !dbg !9058
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9059, metadata !DIExpression()), !dbg !9060
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9061
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9061
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9061
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9061
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !9061
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9061
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !9061
  br label %for.cond, !dbg !9061

for.cond:                                         ; preds = %for.inc, %entry
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9063
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !9063
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9063

land.rhs:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9063
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9063
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !9063
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !9063
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !9063
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 1, !dbg !9063
  %7 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9063
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9063
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9063
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9063
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9063
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9063
  %cmp = icmp ne %struct.rtx_def* %4, %8, !dbg !9063
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %9 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !9065
  br i1 %9, label %for.body, label %for.end, !dbg !9061

for.body:                                         ; preds = %land.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9066
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !9066
  %bf.load = load i32, i32* %11, align 8, !dbg !9066
  %bf.clear = and i32 %bf.load, 65535, !dbg !9066
  %cmp3 = icmp eq i32 %bf.clear, 8, !dbg !9066
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !9066

lor.lhs.false:                                    ; preds = %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9066
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !9066
  %bf.load4 = load i32, i32* %13, align 8, !dbg !9066
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !9066
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !9066
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !9066

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9066
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9066
  %bf.load8 = load i32, i32* %15, align 8, !dbg !9066
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9066
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !9066
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !9066

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9066
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !9066
  %bf.load12 = load i32, i32* %17, align 8, !dbg !9066
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !9066
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !9066
  br i1 %cmp14, label %if.then, label %if.end, !dbg !9068

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9069
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9069
  %bf.load15 = load i32, i32* %19, align 8, !dbg !9071
  %bf.clear16 = and i32 %bf.load15, -268435457, !dbg !9071
  store i32 %bf.clear16, i32* %19, align 8, !dbg !9071
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9072
  %tobool17 = icmp ne %struct.VEC_sel_insn_data_def_heap* %20, null, !dbg !9072
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !9072

cond.true:                                        ; preds = %if.then
  %21 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9072
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %21, i32 0, i32 0, !dbg !9072
  br label %cond.end, !dbg !9072

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9072

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9072
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9072
  %tobool18 = icmp ne %struct.VEC_int_heap* %22, null, !dbg !9072
  br i1 %tobool18, label %cond.true19, label %cond.false21, !dbg !9072

cond.true19:                                      ; preds = %cond.end
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9072
  %base20 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %23, i32 0, i32 0, !dbg !9072
  br label %cond.end22, !dbg !9072

cond.false21:                                     ; preds = %cond.end
  br label %cond.end22, !dbg !9072

cond.end22:                                       ; preds = %cond.false21, %cond.true19
  %cond23 = phi %struct.VEC_int_base* [ %base20, %cond.true19 ], [ null, %cond.false21 ], !dbg !9072
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9072
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !9072
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !9072
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !9072
  %rt_int = bitcast %union.rtunion_def* %arrayidx26 to i32*, !dbg !9072
  %25 = load i32, i32* %rt_int, align 8, !dbg !9072
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond23, i32 %25), !dbg !9072
  %call27 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !9072
  %after_stall_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call27, i32 0, i32 13, !dbg !9072
  %bf.load28 = load i8, i8* %after_stall_p, align 4, !dbg !9073
  %bf.clear29 = and i8 %bf.load28, -5, !dbg !9073
  store i8 %bf.clear29, i8* %after_stall_p, align 4, !dbg !9073
  %26 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9074
  %tobool30 = icmp ne %struct.VEC_sel_insn_data_def_heap* %26, null, !dbg !9074
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !9074

cond.true31:                                      ; preds = %cond.end22
  %27 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9074
  %base32 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %27, i32 0, i32 0, !dbg !9074
  br label %cond.end34, !dbg !9074

cond.false33:                                     ; preds = %cond.end22
  br label %cond.end34, !dbg !9074

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_sel_insn_data_def_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !9074
  %28 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9074
  %tobool36 = icmp ne %struct.VEC_int_heap* %28, null, !dbg !9074
  br i1 %tobool36, label %cond.true37, label %cond.false39, !dbg !9074

cond.true37:                                      ; preds = %cond.end34
  %29 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9074
  %base38 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %29, i32 0, i32 0, !dbg !9074
  br label %cond.end40, !dbg !9074

cond.false39:                                     ; preds = %cond.end34
  br label %cond.end40, !dbg !9074

cond.end40:                                       ; preds = %cond.false39, %cond.true37
  %cond41 = phi %struct.VEC_int_base* [ %base38, %cond.true37 ], [ null, %cond.false39 ], !dbg !9074
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9074
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !9074
  %fld43 = bitcast %union.u* %u42 to [1 x %union.rtunion_def]*, !dbg !9074
  %arrayidx44 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld43, i64 0, i64 0, !dbg !9074
  %rt_int45 = bitcast %union.rtunion_def* %arrayidx44 to i32*, !dbg !9074
  %31 = load i32, i32* %rt_int45, align 8, !dbg !9074
  %call46 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond41, i32 %31), !dbg !9074
  %call47 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond35, i32 %call46), !dbg !9074
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call47, i32 0, i32 0, !dbg !9074
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 5, !dbg !9074
  store i32 0, i32* %sched_times, align 8, !dbg !9075
  %32 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9076
  %tobool48 = icmp ne %struct.VEC_sel_insn_data_def_heap* %32, null, !dbg !9076
  br i1 %tobool48, label %cond.true49, label %cond.false51, !dbg !9076

cond.true49:                                      ; preds = %cond.end40
  %33 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9076
  %base50 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %33, i32 0, i32 0, !dbg !9076
  br label %cond.end52, !dbg !9076

cond.false51:                                     ; preds = %cond.end40
  br label %cond.end52, !dbg !9076

cond.end52:                                       ; preds = %cond.false51, %cond.true49
  %cond53 = phi %struct.VEC_sel_insn_data_def_base* [ %base50, %cond.true49 ], [ null, %cond.false51 ], !dbg !9076
  %34 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9076
  %tobool54 = icmp ne %struct.VEC_int_heap* %34, null, !dbg !9076
  br i1 %tobool54, label %cond.true55, label %cond.false57, !dbg !9076

cond.true55:                                      ; preds = %cond.end52
  %35 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9076
  %base56 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %35, i32 0, i32 0, !dbg !9076
  br label %cond.end58, !dbg !9076

cond.false57:                                     ; preds = %cond.end52
  br label %cond.end58, !dbg !9076

cond.end58:                                       ; preds = %cond.false57, %cond.true55
  %cond59 = phi %struct.VEC_int_base* [ %base56, %cond.true55 ], [ null, %cond.false57 ], !dbg !9076
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9076
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9076
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !9076
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 0, !dbg !9076
  %rt_int63 = bitcast %union.rtunion_def* %arrayidx62 to i32*, !dbg !9076
  %37 = load i32, i32* %rt_int63, align 8, !dbg !9076
  %call64 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond59, i32 %37), !dbg !9076
  %call65 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond53, i32 %call64), !dbg !9076
  %expr66 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call65, i32 0, i32 0, !dbg !9076
  %priority_adj = getelementptr inbounds %struct._expr, %struct._expr* %expr66, i32 0, i32 4, !dbg !9076
  store i32 0, i32* %priority_adj, align 4, !dbg !9077
  %38 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9078
  %tobool67 = icmp ne %struct.VEC_sel_insn_data_def_heap* %38, null, !dbg !9078
  br i1 %tobool67, label %cond.true68, label %cond.false70, !dbg !9078

cond.true68:                                      ; preds = %cond.end58
  %39 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9078
  %base69 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %39, i32 0, i32 0, !dbg !9078
  br label %cond.end71, !dbg !9078

cond.false70:                                     ; preds = %cond.end58
  br label %cond.end71, !dbg !9078

cond.end71:                                       ; preds = %cond.false70, %cond.true68
  %cond72 = phi %struct.VEC_sel_insn_data_def_base* [ %base69, %cond.true68 ], [ null, %cond.false70 ], !dbg !9078
  %40 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9078
  %tobool73 = icmp ne %struct.VEC_int_heap* %40, null, !dbg !9078
  br i1 %tobool73, label %cond.true74, label %cond.false76, !dbg !9078

cond.true74:                                      ; preds = %cond.end71
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9078
  %base75 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %41, i32 0, i32 0, !dbg !9078
  br label %cond.end77, !dbg !9078

cond.false76:                                     ; preds = %cond.end71
  br label %cond.end77, !dbg !9078

cond.end77:                                       ; preds = %cond.false76, %cond.true74
  %cond78 = phi %struct.VEC_int_base* [ %base75, %cond.true74 ], [ null, %cond.false76 ], !dbg !9078
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9078
  %u79 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !9078
  %fld80 = bitcast %union.u* %u79 to [1 x %union.rtunion_def]*, !dbg !9078
  %arrayidx81 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld80, i64 0, i64 0, !dbg !9078
  %rt_int82 = bitcast %union.rtunion_def* %arrayidx81 to i32*, !dbg !9078
  %43 = load i32, i32* %rt_int82, align 8, !dbg !9078
  %call83 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond78, i32 %43), !dbg !9078
  %call84 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond72, i32 %call83), !dbg !9078
  %transformed_insns = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call84, i32 0, i32 7, !dbg !9078
  %44 = load %struct.htab*, %struct.htab** %transformed_insns, align 8, !dbg !9078
  call void @htab_empty(%struct.htab* %44), !dbg !9079
  br label %if.end, !dbg !9080

if.end:                                           ; preds = %cond.end77, %lor.lhs.false11
  br label %for.inc, !dbg !9066

for.inc:                                          ; preds = %if.end
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9063
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !9063
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !9063
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 2, !dbg !9063
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !9063
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !9063
  store %struct.rtx_def* %46, %struct.rtx_def** %insn, align 8, !dbg !9063
  br label %for.cond, !dbg !9063, !llvm.loop !9081

for.end:                                          ; preds = %land.end
  ret void, !dbg !9083
}

declare dso_local void @htab_empty(%struct.htab*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_bb_note_pool() #0 !dbg !9084 {
entry:
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** @bb_note_pool), !dbg !9085
  ret void, !dbg !9086
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %vec_) #0 !dbg !9087 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !9090, metadata !DIExpression()), !dbg !9091
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !9092
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !9092
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !9092
  br i1 %tobool, label %if.then, label %if.end, !dbg !9091

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !9092
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !9092
  %4 = bitcast %struct.VEC_rtx_heap* %3 to i8*, !dbg !9092
  call void @free(i8* %4), !dbg !9092
  br label %if.end, !dbg !9092

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !9091
  store %struct.VEC_rtx_heap* null, %struct.VEC_rtx_heap** %5, align 8, !dbg !9091
  ret void, !dbg !9091
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_sched_pools() #0 !dbg !9094 {
entry:
  %succs_size = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %succs_size, metadata !9095, metadata !DIExpression()), !dbg !9096
  %0 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !9097
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %0, i64 85, !dbg !9097
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !9097
  %1 = load i32, i32* %value, align 8, !dbg !9097
  %add = add nsw i32 %1, 1, !dbg !9098
  store i32 %add, i32* %succs_size, align 4, !dbg !9099
  %2 = load i32, i32* %succs_size, align 4, !dbg !9100
  %conv = sext i32 %2 to i64, !dbg !9100
  %call = call i8* @xcalloc(i64 %conv, i64 48), !dbg !9100
  %3 = bitcast i8* %call to %struct.succs_info*, !dbg !9100
  store %struct.succs_info* %3, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !9101
  %4 = load i32, i32* %succs_size, align 4, !dbg !9102
  store i32 %4, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 1), align 8, !dbg !9103
  store i32 -1, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !9104
  store i32 -1, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 3), align 8, !dbg !9105
  %call1 = call %struct.alloc_pool_def* @create_alloc_pool(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0), i64 112, i64 500), !dbg !9106
  store %struct.alloc_pool_def* %call1, %struct.alloc_pool_def** @sched_lists_pool, align 8, !dbg !9107
  ret void, !dbg !9108
}

declare dso_local %struct.alloc_pool_def* @create_alloc_pool(i8*, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_sched_pools() #0 !dbg !9109 {
entry:
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9110, metadata !DIExpression()), !dbg !9111
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @sched_lists_pool, align 8, !dbg !9112
  call void @free_alloc_pool(%struct.alloc_pool_def* %0), !dbg !9113
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 2), align 4, !dbg !9114
  %cmp = icmp eq i32 %1, -1, !dbg !9114
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9114

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4809, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9114
  br label %cond.end, !dbg !9114

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9114

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9114
  store i32 0, i32* %i, align 4, !dbg !9115
  br label %for.cond, !dbg !9117

for.cond:                                         ; preds = %for.inc, %cond.end
  %2 = load i32, i32* %i, align 4, !dbg !9118
  %3 = load i32, i32* getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 3), align 8, !dbg !9120
  %cmp1 = icmp slt i32 %2, %3, !dbg !9121
  br i1 %cmp1, label %for.body, label %for.end, !dbg !9122

for.body:                                         ; preds = %for.cond
  %4 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !9123
  %5 = load i32, i32* %i, align 4, !dbg !9123
  %idxprom = sext i32 %5 to i64, !dbg !9123
  %arrayidx = getelementptr inbounds %struct.succs_info, %struct.succs_info* %4, i64 %idxprom, !dbg !9123
  %succs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx, i32 0, i32 1, !dbg !9123
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %succs_ok), !dbg !9123
  %6 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !9125
  %7 = load i32, i32* %i, align 4, !dbg !9125
  %idxprom2 = sext i32 %7 to i64, !dbg !9125
  %arrayidx3 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %6, i64 %idxprom2, !dbg !9125
  %succs_other = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx3, i32 0, i32 3, !dbg !9125
  call void @VEC_rtx_heap_free(%struct.VEC_rtx_heap** %succs_other), !dbg !9125
  %8 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !9126
  %9 = load i32, i32* %i, align 4, !dbg !9126
  %idxprom4 = sext i32 %9 to i64, !dbg !9126
  %arrayidx5 = getelementptr inbounds %struct.succs_info, %struct.succs_info* %8, i64 %idxprom4, !dbg !9126
  %probs_ok = getelementptr inbounds %struct.succs_info, %struct.succs_info* %arrayidx5, i32 0, i32 2, !dbg !9126
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %probs_ok), !dbg !9126
  br label %for.inc, !dbg !9127

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !9128
  %inc = add nsw i32 %10, 1, !dbg !9128
  store i32 %inc, i32* %i, align 4, !dbg !9128
  br label %for.cond, !dbg !9129, !llvm.loop !9130

for.end:                                          ; preds = %for.cond
  %11 = load %struct.succs_info*, %struct.succs_info** getelementptr inbounds (%struct.anon.4, %struct.anon.4* @succs_info_pool, i32 0, i32 0), align 8, !dbg !9132
  %12 = bitcast %struct.succs_info* %11 to i8*, !dbg !9133
  call void @free(i8* %12), !dbg !9134
  ret void, !dbg !9135
}

declare dso_local void @free_alloc_pool(%struct.alloc_pool_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !9136 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !9139, metadata !DIExpression()), !dbg !9140
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9141
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !9141
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !9141
  br i1 %tobool, label %if.then, label %if.end, !dbg !9140

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9141
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !9141
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !9141
  call void @free(i8* %4), !dbg !9141
  br label %if.end, !dbg !9141

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9140
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !9140
  ret void, !dbg !9140
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_remove_empty_bb(%struct.basic_block_def* %empty_bb, i8 zeroext %merge_up_p, i8 zeroext %remove_from_cfg_p) #0 !dbg !9143 {
entry:
  %empty_bb.addr = alloca %struct.basic_block_def*, align 8
  %merge_up_p.addr = alloca i8, align 1
  %remove_from_cfg_p.addr = alloca i8, align 1
  %merge_bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %empty_bb, %struct.basic_block_def** %empty_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %empty_bb.addr, metadata !9146, metadata !DIExpression()), !dbg !9147
  store i8 %merge_up_p, i8* %merge_up_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %merge_up_p.addr, metadata !9148, metadata !DIExpression()), !dbg !9149
  store i8 %remove_from_cfg_p, i8* %remove_from_cfg_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %remove_from_cfg_p.addr, metadata !9150, metadata !DIExpression()), !dbg !9151
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %merge_bb, metadata !9152, metadata !DIExpression()), !dbg !9153
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9154
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %0), !dbg !9154
  %tobool = icmp ne i8 %call, 0, !dbg !9154
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9154

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5060, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9154
  br label %cond.end, !dbg !9154

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9154

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9154
  %1 = load i8, i8* %merge_up_p.addr, align 1, !dbg !9155
  %tobool1 = icmp ne i8 %1, 0, !dbg !9155
  br i1 %tobool1, label %if.then, label %if.else, !dbg !9157

if.then:                                          ; preds = %cond.end
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9158
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 5, !dbg !9160
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !9160
  store %struct.basic_block_def* %3, %struct.basic_block_def** %merge_bb, align 8, !dbg !9161
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9162
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 0, !dbg !9162
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9162
  %tobool2 = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !9162
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !9162

cond.true3:                                       ; preds = %if.then
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9162
  %preds4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 0, !dbg !9162
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds4, align 8, !dbg !9162
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !9162
  br label %cond.end6, !dbg !9162

cond.false5:                                      ; preds = %if.then
  br label %cond.end6, !dbg !9162

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_edge_base* [ %base, %cond.true3 ], [ null, %cond.false5 ], !dbg !9162
  %call8 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond7), !dbg !9162
  %cmp = icmp eq i32 %call8, 1, !dbg !9162
  br i1 %cmp, label %land.lhs.true, label %cond.true19, !dbg !9162

land.lhs.true:                                    ; preds = %cond.end6
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9162
  %preds9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 0, !dbg !9162
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds9, align 8, !dbg !9162
  %tobool10 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !9162
  br i1 %tobool10, label %cond.true11, label %cond.false14, !dbg !9162

cond.true11:                                      ; preds = %land.lhs.true
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9162
  %preds12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 0, !dbg !9162
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds12, align 8, !dbg !9162
  %base13 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !9162
  br label %cond.end15, !dbg !9162

cond.false14:                                     ; preds = %land.lhs.true
  br label %cond.end15, !dbg !9162

cond.end15:                                       ; preds = %cond.false14, %cond.true11
  %cond16 = phi %struct.VEC_edge_base* [ %base13, %cond.true11 ], [ null, %cond.false14 ], !dbg !9162
  %call17 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond16, i32 0), !dbg !9162
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call17, i32 0, i32 0, !dbg !9162
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9162
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !9162
  %cmp18 = icmp eq %struct.basic_block_def* %12, %13, !dbg !9162
  br i1 %cmp18, label %cond.false20, label %cond.true19, !dbg !9162

cond.true19:                                      ; preds = %cond.end15, %cond.end6
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5066, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9162
  br label %cond.end21, !dbg !9162

cond.false20:                                     ; preds = %cond.end15
  br label %cond.end21, !dbg !9162

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !9162
  br label %if.end56, !dbg !9163

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9164, metadata !DIExpression()), !dbg !9166
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9167, metadata !DIExpression()), !dbg !9168
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9169
  %call23 = call %struct.basic_block_def* @bb_next_bb(%struct.basic_block_def* %14), !dbg !9170
  store %struct.basic_block_def* %call23, %struct.basic_block_def** %merge_bb, align 8, !dbg !9171
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9172
  %preds24 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 0, !dbg !9172
  %call25 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds24), !dbg !9172
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9172
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !9172
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call25, 0, !dbg !9172
  store i32 %18, i32* %17, align 8, !dbg !9172
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !9172
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call25, 1, !dbg !9172
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !9172
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9172
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9172
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !9172
  br label %for.cond, !dbg !9174

for.cond:                                         ; preds = %if.end, %if.else
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9175
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !9175
  %25 = load i32, i32* %24, align 8, !dbg !9175
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !9175
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !9175
  %call26 = call %struct.edge_def* @ei_safe_edge(i32 %25, %struct.VEC_edge_gc** %27), !dbg !9175
  store %struct.edge_def* %call26, %struct.edge_def** %e, align 8, !dbg !9177
  %tobool27 = icmp ne %struct.edge_def* %call26, null, !dbg !9178
  br i1 %tobool27, label %for.body, label %for.end, !dbg !9178

for.body:                                         ; preds = %for.cond
  %28 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9179
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 7, !dbg !9182
  %29 = load i32, i32* %flags, align 8, !dbg !9182
  %and = and i32 %29, 1, !dbg !9183
  %tobool28 = icmp ne i32 %and, 0, !dbg !9183
  br i1 %tobool28, label %if.else31, label %if.then29, !dbg !9184

if.then29:                                        ; preds = %for.body
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9185
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !9186
  %call30 = call zeroext i8 @sel_redirect_edge_and_branch(%struct.edge_def* %30, %struct.basic_block_def* %31), !dbg !9187
  br label %if.end, !dbg !9187

if.else31:                                        ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9188
  br label %if.end

if.end:                                           ; preds = %if.else31, %if.then29
  br label %for.cond, !dbg !9189, !llvm.loop !9190

for.end:                                          ; preds = %for.cond
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9192
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 1, !dbg !9192
  %33 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9192
  %tobool32 = icmp ne %struct.VEC_edge_gc* %33, null, !dbg !9192
  br i1 %tobool32, label %cond.true33, label %cond.false36, !dbg !9192

cond.true33:                                      ; preds = %for.end
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9192
  %succs34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 1, !dbg !9192
  %35 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs34, align 8, !dbg !9192
  %base35 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %35, i32 0, i32 0, !dbg !9192
  br label %cond.end37, !dbg !9192

cond.false36:                                     ; preds = %for.end
  br label %cond.end37, !dbg !9192

cond.end37:                                       ; preds = %cond.false36, %cond.true33
  %cond38 = phi %struct.VEC_edge_base* [ %base35, %cond.true33 ], [ null, %cond.false36 ], !dbg !9192
  %call39 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond38), !dbg !9192
  %cmp40 = icmp eq i32 %call39, 1, !dbg !9192
  br i1 %cmp40, label %land.lhs.true41, label %cond.true52, !dbg !9192

land.lhs.true41:                                  ; preds = %cond.end37
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9192
  %succs42 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 1, !dbg !9192
  %37 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs42, align 8, !dbg !9192
  %tobool43 = icmp ne %struct.VEC_edge_gc* %37, null, !dbg !9192
  br i1 %tobool43, label %cond.true44, label %cond.false47, !dbg !9192

cond.true44:                                      ; preds = %land.lhs.true41
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9192
  %succs45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 1, !dbg !9192
  %39 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs45, align 8, !dbg !9192
  %base46 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %39, i32 0, i32 0, !dbg !9192
  br label %cond.end48, !dbg !9192

cond.false47:                                     ; preds = %land.lhs.true41
  br label %cond.end48, !dbg !9192

cond.end48:                                       ; preds = %cond.false47, %cond.true44
  %cond49 = phi %struct.VEC_edge_base* [ %base46, %cond.true44 ], [ null, %cond.false47 ], !dbg !9192
  %call50 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond49, i32 0), !dbg !9192
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call50, i32 0, i32 1, !dbg !9192
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9192
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !9192
  %cmp51 = icmp eq %struct.basic_block_def* %40, %41, !dbg !9192
  br i1 %cmp51, label %cond.false53, label %cond.true52, !dbg !9192

cond.true52:                                      ; preds = %cond.end48, %cond.end37
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5087, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9192
  br label %cond.end54, !dbg !9192

cond.false53:                                     ; preds = %cond.end48
  br label %cond.end54, !dbg !9192

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !9192
  br label %if.end56

if.end56:                                         ; preds = %cond.end54, %cond.end21
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb, align 8, !dbg !9193
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9194
  call void @move_bb_info(%struct.basic_block_def* %42, %struct.basic_block_def* %43), !dbg !9195
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9196
  %45 = load i8, i8* %remove_from_cfg_p.addr, align 1, !dbg !9197
  call void @remove_empty_bb(%struct.basic_block_def* %44, i8 zeroext %45), !dbg !9198
  ret void, !dbg !9199
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_safe_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9200 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9203, metadata !DIExpression()), !dbg !9204
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9205
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9205
  %5 = load i32, i32* %4, align 8, !dbg !9205
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9205
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9205
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9205
  %tobool = icmp ne i8 %call, 0, !dbg !9205
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9206

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9207
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9207
  %10 = load i32, i32* %9, align 8, !dbg !9207
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9207
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9207
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9207
  br label %cond.end, !dbg !9206

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9206

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.edge_def* [ %call1, %cond.true ], [ null, %cond.false ], !dbg !9206
  ret %struct.edge_def* %cond, !dbg !9208
}

; Function Attrs: noinline nounwind uwtable
define internal void @move_bb_info(%struct.basic_block_def* %merge_bb, %struct.basic_block_def* %empty_bb) #0 !dbg !9209 {
entry:
  %merge_bb.addr = alloca %struct.basic_block_def*, align 8
  %empty_bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %merge_bb, %struct.basic_block_def** %merge_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %merge_bb.addr, metadata !9210, metadata !DIExpression()), !dbg !9211
  store %struct.basic_block_def* %empty_bb, %struct.basic_block_def** %empty_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %empty_bb.addr, metadata !9212, metadata !DIExpression()), !dbg !9213
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !9214
  %call = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %0), !dbg !9214
  %tobool = icmp ne i8 %call, 0, !dbg !9214
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9214

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5042, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9214
  br label %cond.end, !dbg !9214

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9214

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9214
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9215
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %1, null, !dbg !9215
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !9215

cond.true2:                                       ; preds = %cond.end
  %2 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9215
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %2, i32 0, i32 0, !dbg !9215
  br label %cond.end4, !dbg !9215

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !9215

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !9215
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9215
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !9215
  %4 = load i32, i32* %index, align 8, !dbg !9215
  %call6 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond5, i32 %4), !dbg !9215
  %note_list = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call6, i32 0, i32 0, !dbg !9215
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note_list, align 8, !dbg !9215
  %6 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9216
  %tobool7 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %6, null, !dbg !9216
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !9216

cond.true8:                                       ; preds = %cond.end4
  %7 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9216
  %base9 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %7, i32 0, i32 0, !dbg !9216
  br label %cond.end11, !dbg !9216

cond.false10:                                     ; preds = %cond.end4
  br label %cond.end11, !dbg !9216

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !9216
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !9216
  %index13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !9216
  %9 = load i32, i32* %index13, align 8, !dbg !9216
  %call14 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond12, i32 %9), !dbg !9216
  %note_list15 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call14, i32 0, i32 0, !dbg !9216
  call void @concat_note_lists(%struct.rtx_def* %5, %struct.rtx_def** %note_list15), !dbg !9217
  %10 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9218
  %tobool16 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %10, null, !dbg !9218
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !9218

cond.true17:                                      ; preds = %cond.end11
  %11 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !9218
  %base18 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %11, i32 0, i32 0, !dbg !9218
  br label %cond.end20, !dbg !9218

cond.false19:                                     ; preds = %cond.end11
  br label %cond.end20, !dbg !9218

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !9218
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9218
  %index22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !9218
  %13 = load i32, i32* %index22, align 8, !dbg !9218
  %call23 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond21, i32 %13), !dbg !9218
  %note_list24 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call23, i32 0, i32 0, !dbg !9218
  store %struct.rtx_def* null, %struct.rtx_def** %note_list24, align 8, !dbg !9219
  ret void, !dbg !9220
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_empty_bb(%struct.basic_block_def* %empty_bb, i8 zeroext %remove_from_cfg_p) #0 !dbg !9221 {
entry:
  %empty_bb.addr = alloca %struct.basic_block_def*, align 8
  %remove_from_cfg_p.addr = alloca i8, align 1
  %pred = alloca %struct.basic_block_def*, align 8
  %succ = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %e124 = alloca %struct.edge_def*, align 8
  %e167 = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %empty_bb, %struct.basic_block_def** %empty_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %empty_bb.addr, metadata !9224, metadata !DIExpression()), !dbg !9225
  store i8 %remove_from_cfg_p, i8* %remove_from_cfg_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %remove_from_cfg_p.addr, metadata !9226, metadata !DIExpression()), !dbg !9227
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9228
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9228
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9228
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9228
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !9228
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9228
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9228
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !9228
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !9228
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !9228
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 1, !dbg !9228
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9228
  %cmp = icmp eq %struct.rtx_def* %2, %5, !dbg !9228
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !9228

lor.lhs.false:                                    ; preds = %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9228
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !9228
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !9228
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !9228
  %head_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !9228
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_5, align 8, !dbg !9228
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9228
  %bf.load = load i32, i32* %9, align 8, !dbg !9228
  %bf.clear = and i32 %bf.load, 65535, !dbg !9228
  %cmp6 = icmp eq i32 %bf.clear, 12, !dbg !9228
  br i1 %cmp6, label %cond.false, label %cond.true, !dbg !9228

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5102, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9228
  br label %cond.end, !dbg !9228

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !9228

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9228
  %10 = load i8, i8* %remove_from_cfg_p.addr, align 1, !dbg !9229
  %conv = zext i8 %10 to i32, !dbg !9229
  %tobool = icmp ne i32 %conv, 0, !dbg !9229
  br i1 %tobool, label %land.lhs.true, label %if.end184, !dbg !9231

land.lhs.true:                                    ; preds = %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9232
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 0, !dbg !9232
  %12 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9232
  %tobool7 = icmp ne %struct.VEC_edge_gc* %12, null, !dbg !9232
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !9232

cond.true8:                                       ; preds = %land.lhs.true
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9232
  %preds9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 0, !dbg !9232
  %14 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds9, align 8, !dbg !9232
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %14, i32 0, i32 0, !dbg !9232
  br label %cond.end11, !dbg !9232

cond.false10:                                     ; preds = %land.lhs.true
  br label %cond.end11, !dbg !9232

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_edge_base* [ %base, %cond.true8 ], [ null, %cond.false10 ], !dbg !9232
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond12), !dbg !9232
  %cmp13 = icmp ugt i32 %call, 0, !dbg !9233
  br i1 %cmp13, label %if.then, label %lor.lhs.false15, !dbg !9234

lor.lhs.false15:                                  ; preds = %cond.end11
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9235
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !9235
  %16 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9235
  %tobool16 = icmp ne %struct.VEC_edge_gc* %16, null, !dbg !9235
  br i1 %tobool16, label %cond.true17, label %cond.false20, !dbg !9235

cond.true17:                                      ; preds = %lor.lhs.false15
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9235
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 1, !dbg !9235
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !9235
  %base19 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %18, i32 0, i32 0, !dbg !9235
  br label %cond.end21, !dbg !9235

cond.false20:                                     ; preds = %lor.lhs.false15
  br label %cond.end21, !dbg !9235

cond.end21:                                       ; preds = %cond.false20, %cond.true17
  %cond22 = phi %struct.VEC_edge_base* [ %base19, %cond.true17 ], [ null, %cond.false20 ], !dbg !9235
  %call23 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond22), !dbg !9235
  %cmp24 = icmp ugt i32 %call23, 0, !dbg !9236
  br i1 %cmp24, label %if.then, label %if.end184, !dbg !9237

if.then:                                          ; preds = %cond.end21, %cond.end11
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred, metadata !9238, metadata !DIExpression()), !dbg !9240
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ, metadata !9241, metadata !DIExpression()), !dbg !9242
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9243
  %preds26 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 0, !dbg !9243
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds26, align 8, !dbg !9243
  %tobool27 = icmp ne %struct.VEC_edge_gc* %20, null, !dbg !9243
  br i1 %tobool27, label %cond.true28, label %cond.false31, !dbg !9243

cond.true28:                                      ; preds = %if.then
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9243
  %preds29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 0, !dbg !9243
  %22 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds29, align 8, !dbg !9243
  %base30 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %22, i32 0, i32 0, !dbg !9243
  br label %cond.end32, !dbg !9243

cond.false31:                                     ; preds = %if.then
  br label %cond.end32, !dbg !9243

cond.end32:                                       ; preds = %cond.false31, %cond.true28
  %cond33 = phi %struct.VEC_edge_base* [ %base30, %cond.true28 ], [ null, %cond.false31 ], !dbg !9243
  %call34 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond33), !dbg !9243
  %cmp35 = icmp ugt i32 %call34, 0, !dbg !9245
  br i1 %cmp35, label %if.then37, label %if.else, !dbg !9246

if.then37:                                        ; preds = %cond.end32
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9247, metadata !DIExpression()), !dbg !9249
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9250
  %preds38 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 0, !dbg !9250
  %24 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds38, align 8, !dbg !9250
  %tobool39 = icmp ne %struct.VEC_edge_gc* %24, null, !dbg !9250
  br i1 %tobool39, label %cond.true40, label %cond.false43, !dbg !9250

cond.true40:                                      ; preds = %if.then37
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9250
  %preds41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 0, !dbg !9250
  %26 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds41, align 8, !dbg !9250
  %base42 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %26, i32 0, i32 0, !dbg !9250
  br label %cond.end44, !dbg !9250

cond.false43:                                     ; preds = %if.then37
  br label %cond.end44, !dbg !9250

cond.end44:                                       ; preds = %cond.false43, %cond.true40
  %cond45 = phi %struct.VEC_edge_base* [ %base42, %cond.true40 ], [ null, %cond.false43 ], !dbg !9250
  %call46 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond45), !dbg !9250
  %cmp47 = icmp eq i32 %call46, 1, !dbg !9250
  br i1 %cmp47, label %cond.false50, label %cond.true49, !dbg !9250

cond.true49:                                      ; preds = %cond.end44
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5117, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9250
  br label %cond.end51, !dbg !9250

cond.false50:                                     ; preds = %cond.end44
  br label %cond.end51, !dbg !9250

cond.end51:                                       ; preds = %cond.false50, %cond.true49
  %cond52 = phi i32 [ 0, %cond.true49 ], [ 0, %cond.false50 ], !dbg !9250
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9251
  %preds53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 0, !dbg !9251
  %28 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds53, align 8, !dbg !9251
  %tobool54 = icmp ne %struct.VEC_edge_gc* %28, null, !dbg !9251
  br i1 %tobool54, label %cond.true55, label %cond.false58, !dbg !9251

cond.true55:                                      ; preds = %cond.end51
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9251
  %preds56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 0, !dbg !9251
  %30 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds56, align 8, !dbg !9251
  %base57 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %30, i32 0, i32 0, !dbg !9251
  br label %cond.end59, !dbg !9251

cond.false58:                                     ; preds = %cond.end51
  br label %cond.end59, !dbg !9251

cond.end59:                                       ; preds = %cond.false58, %cond.true55
  %cond60 = phi %struct.VEC_edge_base* [ %base57, %cond.true55 ], [ null, %cond.false58 ], !dbg !9251
  %call61 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond60, i32 0), !dbg !9251
  store %struct.edge_def* %call61, %struct.edge_def** %e, align 8, !dbg !9252
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9253
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 0, !dbg !9253
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9253
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9253
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 5, !dbg !9253
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !9253
  %cmp62 = icmp eq %struct.basic_block_def* %32, %34, !dbg !9253
  br i1 %cmp62, label %land.lhs.true64, label %cond.true66, !dbg !9253

land.lhs.true64:                                  ; preds = %cond.end59
  %35 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9253
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 7, !dbg !9253
  %36 = load i32, i32* %flags, align 8, !dbg !9253
  %and = and i32 %36, 1, !dbg !9253
  %tobool65 = icmp ne i32 %and, 0, !dbg !9253
  br i1 %tobool65, label %cond.false67, label %cond.true66, !dbg !9253

cond.true66:                                      ; preds = %land.lhs.true64, %cond.end59
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5121, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9253
  br label %cond.end68, !dbg !9253

cond.false67:                                     ; preds = %land.lhs.true64
  br label %cond.end68, !dbg !9253

cond.end68:                                       ; preds = %cond.false67, %cond.true66
  %cond69 = phi i32 [ 0, %cond.true66 ], [ 0, %cond.false67 ], !dbg !9253
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9254
  %prev_bb70 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 5, !dbg !9255
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb70, align 8, !dbg !9255
  store %struct.basic_block_def* %38, %struct.basic_block_def** %pred, align 8, !dbg !9256
  br label %if.end, !dbg !9257

if.else:                                          ; preds = %cond.end32
  store %struct.basic_block_def* null, %struct.basic_block_def** %pred, align 8, !dbg !9258
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end68
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9259
  %succs71 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 1, !dbg !9259
  %40 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs71, align 8, !dbg !9259
  %tobool72 = icmp ne %struct.VEC_edge_gc* %40, null, !dbg !9259
  br i1 %tobool72, label %cond.true73, label %cond.false76, !dbg !9259

cond.true73:                                      ; preds = %if.end
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9259
  %succs74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 1, !dbg !9259
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs74, align 8, !dbg !9259
  %base75 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %42, i32 0, i32 0, !dbg !9259
  br label %cond.end77, !dbg !9259

cond.false76:                                     ; preds = %if.end
  br label %cond.end77, !dbg !9259

cond.end77:                                       ; preds = %cond.false76, %cond.true73
  %cond78 = phi %struct.VEC_edge_base* [ %base75, %cond.true73 ], [ null, %cond.false76 ], !dbg !9259
  %call79 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond78), !dbg !9259
  %cmp80 = icmp ugt i32 %call79, 0, !dbg !9261
  br i1 %cmp80, label %if.then82, label %if.else107, !dbg !9262

if.then82:                                        ; preds = %cond.end77
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9263
  %succs83 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 1, !dbg !9263
  %44 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs83, align 8, !dbg !9263
  %tobool84 = icmp ne %struct.VEC_edge_gc* %44, null, !dbg !9263
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !9263

cond.true85:                                      ; preds = %if.then82
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9263
  %succs86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 1, !dbg !9263
  %46 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs86, align 8, !dbg !9263
  %base87 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %46, i32 0, i32 0, !dbg !9263
  br label %cond.end89, !dbg !9263

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !9263

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_edge_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !9263
  %call91 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond90), !dbg !9263
  %cmp92 = icmp eq i32 %call91, 1, !dbg !9263
  br i1 %cmp92, label %cond.false95, label %cond.true94, !dbg !9263

cond.true94:                                      ; preds = %cond.end89
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5132, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9263
  br label %cond.end96, !dbg !9263

cond.false95:                                     ; preds = %cond.end89
  br label %cond.end96, !dbg !9263

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ 0, %cond.true94 ], [ 0, %cond.false95 ], !dbg !9263
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9265
  %succs98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 1, !dbg !9265
  %48 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs98, align 8, !dbg !9265
  %tobool99 = icmp ne %struct.VEC_edge_gc* %48, null, !dbg !9265
  br i1 %tobool99, label %cond.true100, label %cond.false103, !dbg !9265

cond.true100:                                     ; preds = %cond.end96
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9265
  %succs101 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 1, !dbg !9265
  %50 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs101, align 8, !dbg !9265
  %base102 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %50, i32 0, i32 0, !dbg !9265
  br label %cond.end104, !dbg !9265

cond.false103:                                    ; preds = %cond.end96
  br label %cond.end104, !dbg !9265

cond.end104:                                      ; preds = %cond.false103, %cond.true100
  %cond105 = phi %struct.VEC_edge_base* [ %base102, %cond.true100 ], [ null, %cond.false103 ], !dbg !9265
  %call106 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond105, i32 0), !dbg !9265
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call106, i32 0, i32 1, !dbg !9266
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9266
  store %struct.basic_block_def* %51, %struct.basic_block_def** %succ, align 8, !dbg !9267
  br label %if.end108, !dbg !9268

if.else107:                                       ; preds = %cond.end77
  store %struct.basic_block_def* null, %struct.basic_block_def** %succ, align 8, !dbg !9269
  br label %if.end108

if.end108:                                        ; preds = %if.else107, %cond.end104
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9270
  %preds109 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 0, !dbg !9270
  %53 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds109, align 8, !dbg !9270
  %tobool110 = icmp ne %struct.VEC_edge_gc* %53, null, !dbg !9270
  br i1 %tobool110, label %cond.true111, label %cond.false114, !dbg !9270

cond.true111:                                     ; preds = %if.end108
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9270
  %preds112 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !9270
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds112, align 8, !dbg !9270
  %base113 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !9270
  br label %cond.end115, !dbg !9270

cond.false114:                                    ; preds = %if.end108
  br label %cond.end115, !dbg !9270

cond.end115:                                      ; preds = %cond.false114, %cond.true111
  %cond116 = phi %struct.VEC_edge_base* [ %base113, %cond.true111 ], [ null, %cond.false114 ], !dbg !9270
  %call117 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond116), !dbg !9270
  %cmp118 = icmp ugt i32 %call117, 0, !dbg !9272
  br i1 %cmp118, label %land.lhs.true120, label %if.end151, !dbg !9273

land.lhs.true120:                                 ; preds = %cond.end115
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !9274
  %cmp121 = icmp ne %struct.basic_block_def* %56, null, !dbg !9275
  br i1 %cmp121, label %if.then123, label %if.end151, !dbg !9276

if.then123:                                       ; preds = %land.lhs.true120
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e124, metadata !9277, metadata !DIExpression()), !dbg !9279
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9280
  %preds125 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 0, !dbg !9280
  %58 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds125, align 8, !dbg !9280
  %tobool126 = icmp ne %struct.VEC_edge_gc* %58, null, !dbg !9280
  br i1 %tobool126, label %cond.true127, label %cond.false130, !dbg !9280

cond.true127:                                     ; preds = %if.then123
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9280
  %preds128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 0, !dbg !9280
  %60 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds128, align 8, !dbg !9280
  %base129 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %60, i32 0, i32 0, !dbg !9280
  br label %cond.end131, !dbg !9280

cond.false130:                                    ; preds = %if.then123
  br label %cond.end131, !dbg !9280

cond.end131:                                      ; preds = %cond.false130, %cond.true127
  %cond132 = phi %struct.VEC_edge_base* [ %base129, %cond.true127 ], [ null, %cond.false130 ], !dbg !9280
  %call133 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond132, i32 0), !dbg !9280
  store %struct.edge_def* %call133, %struct.edge_def** %e124, align 8, !dbg !9279
  %61 = load %struct.edge_def*, %struct.edge_def** %e124, align 8, !dbg !9281
  %flags134 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %61, i32 0, i32 7, !dbg !9283
  %62 = load i32, i32* %flags134, align 8, !dbg !9283
  %and135 = and i32 %62, 1, !dbg !9284
  %tobool136 = icmp ne i32 %and135, 0, !dbg !9284
  br i1 %tobool136, label %if.then137, label %if.else139, !dbg !9285

if.then137:                                       ; preds = %cond.end131
  %63 = load %struct.edge_def*, %struct.edge_def** %e124, align 8, !dbg !9286
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !9287
  %call138 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %63, %struct.basic_block_def* %64), !dbg !9288
  br label %if.end150, !dbg !9288

if.else139:                                       ; preds = %cond.end131
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9289
  %preds140 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 0, !dbg !9289
  %66 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds140, align 8, !dbg !9289
  %tobool141 = icmp ne %struct.VEC_edge_gc* %66, null, !dbg !9289
  br i1 %tobool141, label %cond.true142, label %cond.false145, !dbg !9289

cond.true142:                                     ; preds = %if.else139
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9289
  %preds143 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 0, !dbg !9289
  %68 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds143, align 8, !dbg !9289
  %base144 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %68, i32 0, i32 0, !dbg !9289
  br label %cond.end146, !dbg !9289

cond.false145:                                    ; preds = %if.else139
  br label %cond.end146, !dbg !9289

cond.end146:                                      ; preds = %cond.false145, %cond.true142
  %cond147 = phi %struct.VEC_edge_base* [ %base144, %cond.true142 ], [ null, %cond.false145 ], !dbg !9289
  %call148 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond147, i32 0), !dbg !9289
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %succ, align 8, !dbg !9290
  %call149 = call zeroext i8 @sel_redirect_edge_and_branch(%struct.edge_def* %call148, %struct.basic_block_def* %69), !dbg !9291
  br label %if.end150

if.end150:                                        ; preds = %cond.end146, %if.then137
  br label %if.end151, !dbg !9292

if.end151:                                        ; preds = %if.end150, %land.lhs.true120, %cond.end115
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9293
  %succs152 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %70, i32 0, i32 1, !dbg !9293
  %71 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs152, align 8, !dbg !9293
  %tobool153 = icmp ne %struct.VEC_edge_gc* %71, null, !dbg !9293
  br i1 %tobool153, label %cond.true154, label %cond.false157, !dbg !9293

cond.true154:                                     ; preds = %if.end151
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9293
  %succs155 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 1, !dbg !9293
  %73 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs155, align 8, !dbg !9293
  %base156 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %73, i32 0, i32 0, !dbg !9293
  br label %cond.end158, !dbg !9293

cond.false157:                                    ; preds = %if.end151
  br label %cond.end158, !dbg !9293

cond.end158:                                      ; preds = %cond.false157, %cond.true154
  %cond159 = phi %struct.VEC_edge_base* [ %base156, %cond.true154 ], [ null, %cond.false157 ], !dbg !9293
  %call160 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond159), !dbg !9293
  %cmp161 = icmp ugt i32 %call160, 0, !dbg !9295
  br i1 %cmp161, label %land.lhs.true163, label %if.end183, !dbg !9296

land.lhs.true163:                                 ; preds = %cond.end158
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !9297
  %cmp164 = icmp ne %struct.basic_block_def* %74, null, !dbg !9298
  br i1 %cmp164, label %if.then166, label %if.end183, !dbg !9299

if.then166:                                       ; preds = %land.lhs.true163
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e167, metadata !9300, metadata !DIExpression()), !dbg !9302
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9303
  %succs168 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 1, !dbg !9303
  %76 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs168, align 8, !dbg !9303
  %tobool169 = icmp ne %struct.VEC_edge_gc* %76, null, !dbg !9303
  br i1 %tobool169, label %cond.true170, label %cond.false173, !dbg !9303

cond.true170:                                     ; preds = %if.then166
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9303
  %succs171 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 1, !dbg !9303
  %78 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs171, align 8, !dbg !9303
  %base172 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %78, i32 0, i32 0, !dbg !9303
  br label %cond.end174, !dbg !9303

cond.false173:                                    ; preds = %if.then166
  br label %cond.end174, !dbg !9303

cond.end174:                                      ; preds = %cond.false173, %cond.true170
  %cond175 = phi %struct.VEC_edge_base* [ %base172, %cond.true170 ], [ null, %cond.false173 ], !dbg !9303
  %call176 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond175, i32 0), !dbg !9303
  store %struct.edge_def* %call176, %struct.edge_def** %e167, align 8, !dbg !9302
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !9304
  %80 = load %struct.edge_def*, %struct.edge_def** %e167, align 8, !dbg !9306
  %dest177 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 1, !dbg !9307
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %dest177, align 8, !dbg !9307
  %call178 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %79, %struct.basic_block_def* %81), !dbg !9308
  %cmp179 = icmp eq %struct.edge_def* %call178, null, !dbg !9309
  br i1 %cmp179, label %if.then181, label %if.end182, !dbg !9310

if.then181:                                       ; preds = %cond.end174
  %82 = load %struct.edge_def*, %struct.edge_def** %e167, align 8, !dbg !9311
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !9312
  call void @redirect_edge_pred(%struct.edge_def* %82, %struct.basic_block_def* %83), !dbg !9313
  br label %if.end182, !dbg !9313

if.end182:                                        ; preds = %if.then181, %cond.end174
  br label %if.end183, !dbg !9314

if.end183:                                        ; preds = %if.end182, %land.lhs.true163, %cond.end158
  br label %if.end184, !dbg !9315

if.end184:                                        ; preds = %if.end183, %cond.end21, %cond.end
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %empty_bb.addr, align 8, !dbg !9316
  %85 = load i8, i8* %remove_from_cfg_p.addr, align 1, !dbg !9317
  call void @sel_remove_bb(%struct.basic_block_def* %84, i8 zeroext %85), !dbg !9318
  ret void, !dbg !9319
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @sel_split_edge(%struct.edge_def* %e) #0 !dbg !9320 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %other_bb = alloca %struct.basic_block_def*, align 8
  %prev_max_uid = alloca i32, align 4
  %jump = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !9321, metadata !DIExpression()), !dbg !9322
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !9323, metadata !DIExpression()), !dbg !9324
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !9325, metadata !DIExpression()), !dbg !9326
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %other_bb, metadata !9327, metadata !DIExpression()), !dbg !9328
  store %struct.basic_block_def* null, %struct.basic_block_def** %other_bb, align 8, !dbg !9328
  call void @llvm.dbg.declare(metadata i32* %prev_max_uid, metadata !9329, metadata !DIExpression()), !dbg !9330
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !9331, metadata !DIExpression()), !dbg !9332
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9333
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !9334
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !9334
  store %struct.basic_block_def* %1, %struct.basic_block_def** %src, align 8, !dbg !9335
  %call = call i32 @get_max_uid(), !dbg !9336
  store i32 %call, i32* %prev_max_uid, align 4, !dbg !9337
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9338
  %call2 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %2), !dbg !9339
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %new_bb, align 8, !dbg !9340
  %3 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !9341
  %tobool = icmp ne i32 %3, 0, !dbg !9341
  br i1 %tobool, label %land.lhs.true, label %if.end17, !dbg !9343

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9344
  %tobool3 = icmp ne %struct.loop* %4, null, !dbg !9344
  br i1 %tobool3, label %if.then, label %if.end17, !dbg !9345

if.then:                                          ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9346, metadata !DIExpression()), !dbg !9348
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9349, metadata !DIExpression()), !dbg !9350
  store i32 0, i32* %i, align 4, !dbg !9351
  br label %for.cond, !dbg !9353

for.cond:                                         ; preds = %for.inc, %if.then
  %5 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9354
  %tobool4 = icmp ne %struct.VEC_basic_block_heap* %5, null, !dbg !9354
  br i1 %tobool4, label %cond.true, label %cond.false, !dbg !9354

cond.true:                                        ; preds = %for.cond
  %6 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9354
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %6, i32 0, i32 0, !dbg !9354
  br label %cond.end, !dbg !9354

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9354

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9354
  %7 = load i32, i32* %i, align 4, !dbg !9354
  %call5 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %7, %struct.basic_block_def** %bb), !dbg !9354
  %tobool6 = icmp ne i32 %call5, 0, !dbg !9356
  br i1 %tobool6, label %for.body, label %for.end, !dbg !9356

for.body:                                         ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9357
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 3, !dbg !9359
  %9 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !9359
  %tobool7 = icmp ne %struct.loop* %9, null, !dbg !9357
  br i1 %tobool7, label %if.end, label %if.then8, !dbg !9360

if.then8:                                         ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9361
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9363
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !9364
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9364
  %loop_father9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 3, !dbg !9365
  %13 = load %struct.loop*, %struct.loop** %loop_father9, align 8, !dbg !9365
  call void @add_bb_to_loop(%struct.basic_block_def* %10, %struct.loop* %13), !dbg !9366
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !9367
  %tobool10 = icmp ne %struct.basic_block_def* %14, null, !dbg !9367
  br i1 %tobool10, label %cond.true13, label %land.lhs.true11, !dbg !9367

land.lhs.true11:                                  ; preds = %if.then8
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9367
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !9367
  %16 = load i32, i32* %index, align 8, !dbg !9367
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9367
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !9367
  %18 = load i32, i32* %index12, align 8, !dbg !9367
  %cmp = icmp ne i32 %16, %18, !dbg !9367
  br i1 %cmp, label %cond.false14, label %cond.true13, !dbg !9367

cond.true13:                                      ; preds = %land.lhs.true11, %if.then8
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5319, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9367
  br label %cond.end15, !dbg !9367

cond.false14:                                     ; preds = %land.lhs.true11
  br label %cond.end15, !dbg !9367

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !9367
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9368
  store %struct.basic_block_def* %19, %struct.basic_block_def** %other_bb, align 8, !dbg !9369
  br label %if.end, !dbg !9370

if.end:                                           ; preds = %cond.end15, %for.body
  br label %for.inc, !dbg !9359

for.inc:                                          ; preds = %if.end
  %20 = load i32, i32* %i, align 4, !dbg !9371
  %inc = add nsw i32 %20, 1, !dbg !9371
  store i32 %inc, i32* %i, align 4, !dbg !9371
  br label %for.cond, !dbg !9372, !llvm.loop !9373

for.end:                                          ; preds = %cond.end
  br label %if.end17, !dbg !9375

if.end17:                                         ; preds = %for.end, %land.lhs.true, %entry
  call void @sel_add_bb(%struct.basic_block_def* null), !dbg !9376
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9377
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9378
  %23 = load i32, i32* %prev_max_uid, align 4, !dbg !9379
  %call18 = call %struct.rtx_def* @find_new_jump(%struct.basic_block_def* %21, %struct.basic_block_def* %22, i32 %23), !dbg !9380
  store %struct.rtx_def* %call18, %struct.rtx_def** %jump, align 8, !dbg !9381
  %24 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9382
  %tobool19 = icmp ne %struct.rtx_def* %24, null, !dbg !9382
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !9384

if.then20:                                        ; preds = %if.end17
  %25 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9385
  call void @sel_init_new_insn(%struct.rtx_def* %25, i32 5), !dbg !9386
  br label %if.end21, !dbg !9386

if.end21:                                         ; preds = %if.then20, %if.end17
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !9387
  %tobool22 = icmp ne %struct.basic_block_def* %26, null, !dbg !9387
  br i1 %tobool22, label %land.lhs.true23, label %if.end29, !dbg !9389

land.lhs.true23:                                  ; preds = %if.end21
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !9390
  %call24 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %27), !dbg !9391
  %tobool25 = icmp ne i8 %call24, 0, !dbg !9391
  br i1 %tobool25, label %if.end29, label %if.then26, !dbg !9392

if.then26:                                        ; preds = %land.lhs.true23
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !9393
  %call27 = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %28), !dbg !9394
  %call28 = call %struct.bitmap_head_def* @compute_live(%struct.rtx_def* %call27), !dbg !9395
  br label %if.end29, !dbg !9395

if.end29:                                         ; preds = %if.then26, %land.lhs.true23, %if.end21
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9396
  ret %struct.basic_block_def* %29, !dbg !9397
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !9398 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !9401, metadata !DIExpression()), !dbg !9402
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9403, metadata !DIExpression()), !dbg !9402
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !9404, metadata !DIExpression()), !dbg !9402
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9405
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !9405
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9405

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9405
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9405
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !9405
  %3 = load i32, i32* %num, align 8, !dbg !9405
  %cmp = icmp ult i32 %1, %3, !dbg !9405
  br i1 %cmp, label %if.then, label %if.else, !dbg !9402

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !9407
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !9407
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9407
  %idxprom = zext i32 %5 to i64, !dbg !9407
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !9407
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !9407
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !9407
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !9407
  store i32 1, i32* %retval, align 4, !dbg !9407
  br label %return, !dbg !9407

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !9409
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !9409
  store i32 0, i32* %retval, align 4, !dbg !9409
  br label %return, !dbg !9409

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9402
  ret i32 %9, !dbg !9402
}

declare dso_local void @add_bb_to_loop(%struct.basic_block_def*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sel_add_bb(%struct.basic_block_def* %bb) #0 !dbg !9411 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %temp_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9412, metadata !DIExpression()), !dbg !9413
  call void @sched_init_luids(%struct.VEC_basic_block_heap* null, %struct.basic_block_def* null, %struct.VEC_rtx_heap* null, %struct.rtx_def* null), !dbg !9414
  call void @sched_init_bbs(), !dbg !9415
  %0 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9416
  call void @sel_init_bbs(%struct.VEC_basic_block_heap* %0, %struct.basic_block_def* null), !dbg !9417
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9418
  %cmp = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !9418
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9418

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4981, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9418
  br label %cond.end, !dbg !9418

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9418

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9418
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9419
  %cmp1 = icmp ne %struct.basic_block_def* %2, null, !dbg !9421
  br i1 %cmp1, label %if.then, label %if.else, !dbg !9422

if.then:                                          ; preds = %cond.end
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9423
  %tobool = icmp ne %struct.VEC_basic_block_heap* %3, null, !dbg !9423
  br i1 %tobool, label %cond.true2, label %cond.false3, !dbg !9423

cond.true2:                                       ; preds = %if.then
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9423
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !9423
  br label %cond.end4, !dbg !9423

cond.false3:                                      ; preds = %if.then
  br label %cond.end4, !dbg !9423

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_basic_block_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !9423
  %call = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond5), !dbg !9423
  %cmp6 = icmp eq i32 %call, 1, !dbg !9423
  br i1 %cmp6, label %land.lhs.true, label %cond.true15, !dbg !9423

land.lhs.true:                                    ; preds = %cond.end4
  %5 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9423
  %tobool7 = icmp ne %struct.VEC_basic_block_heap* %5, null, !dbg !9423
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !9423

cond.true8:                                       ; preds = %land.lhs.true
  %6 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9423
  %base9 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %6, i32 0, i32 0, !dbg !9423
  br label %cond.end11, !dbg !9423

cond.false10:                                     ; preds = %land.lhs.true
  br label %cond.end11, !dbg !9423

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_basic_block_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !9423
  %call13 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond12, i32 0), !dbg !9423
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9423
  %cmp14 = icmp eq %struct.basic_block_def* %call13, %7, !dbg !9423
  br i1 %cmp14, label %cond.false16, label %cond.true15, !dbg !9423

cond.true15:                                      ; preds = %cond.end11, %cond.end4
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4987, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9423
  br label %cond.end17, !dbg !9423

cond.false16:                                     ; preds = %cond.end11
  br label %cond.end17, !dbg !9423

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !9423
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9425
  call void @add_block_to_current_region(%struct.basic_block_def* %8), !dbg !9426
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9427
  %call19 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %9), !dbg !9429
  %tobool20 = icmp ne i8 %call19, 0, !dbg !9429
  br i1 %tobool20, label %if.end, label %land.lhs.true21, !dbg !9430

land.lhs.true21:                                  ; preds = %cond.end17
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9431
  %tobool22 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !9431
  br i1 %tobool22, label %cond.true23, label %cond.false25, !dbg !9431

cond.true23:                                      ; preds = %land.lhs.true21
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9431
  %base24 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %11, i32 0, i32 0, !dbg !9431
  br label %cond.end26, !dbg !9431

cond.false25:                                     ; preds = %land.lhs.true21
  br label %cond.end26, !dbg !9431

cond.end26:                                       ; preds = %cond.false25, %cond.true23
  %cond27 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base24, %cond.true23 ], [ null, %cond.false25 ], !dbg !9431
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9431
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !9431
  %13 = load i32, i32* %index, align 8, !dbg !9431
  %call28 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond27, i32 %13), !dbg !9431
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call28, i32 0, i32 0, !dbg !9431
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !9431
  %cmp29 = icmp eq %struct.bitmap_head_def* %14, null, !dbg !9432
  br i1 %cmp29, label %if.then30, label %if.end, !dbg !9433

if.then30:                                        ; preds = %cond.end26
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9434
  call void @create_initial_data_sets(%struct.basic_block_def* %15), !dbg !9435
  br label %if.end, !dbg !9435

if.end:                                           ; preds = %if.then30, %cond.end26, %cond.end17
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** @last_added_blocks), !dbg !9436
  br label %if.end44, !dbg !9437

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9438, metadata !DIExpression()), !dbg !9440
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %temp_bb, metadata !9441, metadata !DIExpression()), !dbg !9442
  store %struct.basic_block_def* null, %struct.basic_block_def** %temp_bb, align 8, !dbg !9442
  store i32 0, i32* %i, align 4, !dbg !9443
  br label %for.cond, !dbg !9445

for.cond:                                         ; preds = %for.inc, %if.else
  %16 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9446
  %tobool31 = icmp ne %struct.VEC_basic_block_heap* %16, null, !dbg !9446
  br i1 %tobool31, label %cond.true32, label %cond.false34, !dbg !9446

cond.true32:                                      ; preds = %for.cond
  %17 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9446
  %base33 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %17, i32 0, i32 0, !dbg !9446
  br label %cond.end35, !dbg !9446

cond.false34:                                     ; preds = %for.cond
  br label %cond.end35, !dbg !9446

cond.end35:                                       ; preds = %cond.false34, %cond.true32
  %cond36 = phi %struct.VEC_basic_block_base* [ %base33, %cond.true32 ], [ null, %cond.false34 ], !dbg !9446
  %18 = load i32, i32* %i, align 4, !dbg !9446
  %call37 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond36, i32 %18, %struct.basic_block_def** %bb.addr), !dbg !9446
  %tobool38 = icmp ne i32 %call37, 0, !dbg !9448
  br i1 %tobool38, label %for.body, label %for.end, !dbg !9448

for.body:                                         ; preds = %cond.end35
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9449
  call void @add_block_to_current_region(%struct.basic_block_def* %19), !dbg !9451
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9452
  store %struct.basic_block_def* %20, %struct.basic_block_def** %temp_bb, align 8, !dbg !9453
  br label %for.inc, !dbg !9454

for.inc:                                          ; preds = %for.body
  %21 = load i32, i32* %i, align 4, !dbg !9455
  %inc = add nsw i32 %21, 1, !dbg !9455
  store i32 %inc, i32* %i, align 4, !dbg !9455
  br label %for.cond, !dbg !9456, !llvm.loop !9457

for.end:                                          ; preds = %cond.end35
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %temp_bb, align 8, !dbg !9459
  %cmp39 = icmp ne %struct.basic_block_def* %22, null, !dbg !9459
  br i1 %cmp39, label %cond.false41, label %cond.true40, !dbg !9459

cond.true40:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5012, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9459
  br label %cond.end42, !dbg !9459

cond.false41:                                     ; preds = %for.end
  br label %cond.end42, !dbg !9459

cond.end42:                                       ; preds = %cond.false41, %cond.true40
  %cond43 = phi i32 [ 0, %cond.true40 ], [ 0, %cond.false41 ], !dbg !9459
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %temp_bb, align 8, !dbg !9460
  store %struct.basic_block_def* %23, %struct.basic_block_def** %bb.addr, align 8, !dbg !9461
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** @last_added_blocks), !dbg !9462
  br label %if.end44

if.end44:                                         ; preds = %cond.end42, %if.end
  %24 = load i32*, i32** @containing_rgn, align 8, !dbg !9463
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9463
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !9463
  %26 = load i32, i32* %index45, align 8, !dbg !9463
  %idxprom = sext i32 %26 to i64, !dbg !9463
  %arrayidx = getelementptr inbounds i32, i32* %24, i64 %idxprom, !dbg !9463
  %27 = load i32, i32* %arrayidx, align 4, !dbg !9463
  call void @rgn_setup_region(i32 %27), !dbg !9464
  ret void, !dbg !9465
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @find_new_jump(%struct.basic_block_def* %from, %struct.basic_block_def* %jump_bb, i32 %prev_max_uid) #0 !dbg !9466 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %from.addr = alloca %struct.basic_block_def*, align 8
  %jump_bb.addr = alloca %struct.basic_block_def*, align 8
  %prev_max_uid.addr = alloca i32, align 4
  %jump = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !9469, metadata !DIExpression()), !dbg !9470
  store %struct.basic_block_def* %jump_bb, %struct.basic_block_def** %jump_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb.addr, metadata !9471, metadata !DIExpression()), !dbg !9472
  store i32 %prev_max_uid, i32* %prev_max_uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prev_max_uid.addr, metadata !9473, metadata !DIExpression()), !dbg !9474
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !9475, metadata !DIExpression()), !dbg !9476
  %call = call i32 @get_max_uid(), !dbg !9477
  %0 = load i32, i32* %prev_max_uid.addr, align 4, !dbg !9479
  %cmp = icmp eq i32 %call, %0, !dbg !9480
  br i1 %cmp, label %if.then, label %if.end, !dbg !9481

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9482
  br label %return, !dbg !9482

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !9483
  %2 = load i32, i32* %prev_max_uid.addr, align 4, !dbg !9485
  %call1 = call %struct.rtx_def* @check_for_new_jump(%struct.basic_block_def* %1, i32 %2), !dbg !9486
  store %struct.rtx_def* %call1, %struct.rtx_def** %jump, align 8, !dbg !9487
  %tobool = icmp ne %struct.rtx_def* %call1, null, !dbg !9487
  br i1 %tobool, label %if.then2, label %if.end3, !dbg !9488

if.then2:                                         ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9489
  store %struct.rtx_def* %3, %struct.rtx_def** %retval, align 8, !dbg !9490
  br label %return, !dbg !9490

if.end3:                                          ; preds = %if.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb.addr, align 8, !dbg !9491
  %cmp4 = icmp ne %struct.basic_block_def* %4, null, !dbg !9493
  br i1 %cmp4, label %land.lhs.true, label %if.end8, !dbg !9494

land.lhs.true:                                    ; preds = %if.end3
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb.addr, align 8, !dbg !9495
  %6 = load i32, i32* %prev_max_uid.addr, align 4, !dbg !9496
  %call5 = call %struct.rtx_def* @check_for_new_jump(%struct.basic_block_def* %5, i32 %6), !dbg !9497
  store %struct.rtx_def* %call5, %struct.rtx_def** %jump, align 8, !dbg !9498
  %tobool6 = icmp ne %struct.rtx_def* %call5, null, !dbg !9498
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !9499

if.then7:                                         ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9500
  store %struct.rtx_def* %7, %struct.rtx_def** %retval, align 8, !dbg !9501
  br label %return, !dbg !9501

if.end8:                                          ; preds = %land.lhs.true, %if.end3
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9502
  br label %return, !dbg !9502

return:                                           ; preds = %if.end8, %if.then7, %if.then2, %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9503
  ret %struct.rtx_def* %8, !dbg !9503
}

declare dso_local %struct.bitmap_head_def* @compute_live(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @sel_create_recovery_block(%struct.rtx_def* %orig_insn) #0 !dbg !9504 {
entry:
  %orig_insn.addr = alloca %struct.rtx_def*, align 8
  %first_bb = alloca %struct.basic_block_def*, align 8
  %second_bb = alloca %struct.basic_block_def*, align 8
  %recovery_block = alloca %struct.basic_block_def*, align 8
  %before_recovery = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %orig_insn, %struct.rtx_def** %orig_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_insn.addr, metadata !9507, metadata !DIExpression()), !dbg !9508
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_bb, metadata !9509, metadata !DIExpression()), !dbg !9510
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_bb, metadata !9511, metadata !DIExpression()), !dbg !9512
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %recovery_block, metadata !9513, metadata !DIExpression()), !dbg !9514
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %before_recovery, metadata !9515, metadata !DIExpression()), !dbg !9516
  store %struct.basic_block_def* null, %struct.basic_block_def** %before_recovery, align 8, !dbg !9516
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !9517, metadata !DIExpression()), !dbg !9518
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn.addr, align 8, !dbg !9519
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9519
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9519
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !9519
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !9519
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !9519
  store %struct.basic_block_def* %1, %struct.basic_block_def** %first_bb, align 8, !dbg !9520
  %2 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn.addr, align 8, !dbg !9521
  %call = call zeroext i8 @sel_bb_end_p(%struct.rtx_def* %2), !dbg !9523
  %tobool = icmp ne i8 %call, 0, !dbg !9523
  br i1 %tobool, label %if.then, label %if.else, !dbg !9524

if.then:                                          ; preds = %entry
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !9525
  %call1 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %3), !dbg !9525
  %tobool2 = icmp ne i8 %call1, 0, !dbg !9525
  br i1 %tobool2, label %cond.false, label %cond.true, !dbg !9525

cond.true:                                        ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5368, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9525
  br label %cond.end, !dbg !9525

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9525

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9525
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !9527
  %call3 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %4), !dbg !9528
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %second_bb, align 8, !dbg !9529
  br label %if.end, !dbg !9530

if.else:                                          ; preds = %entry
  %5 = load %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)*, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !9531
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !9532
  %7 = load %struct.rtx_def*, %struct.rtx_def** %orig_insn.addr, align 8, !dbg !9533
  %call4 = call %struct.basic_block_def* %5(%struct.basic_block_def* %6, %struct.rtx_def* %7), !dbg !9531
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %second_bb, align 8, !dbg !9534
  br label %if.end

if.end:                                           ; preds = %if.else, %cond.end
  %call5 = call %struct.basic_block_def* @sched_create_recovery_block(%struct.basic_block_def** %before_recovery), !dbg !9535
  store %struct.basic_block_def* %call5, %struct.basic_block_def** %recovery_block, align 8, !dbg !9536
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %before_recovery, align 8, !dbg !9537
  %tobool6 = icmp ne %struct.basic_block_def* %8, null, !dbg !9537
  br i1 %tobool6, label %if.then7, label %if.end8, !dbg !9539

if.then7:                                         ; preds = %if.end
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %before_recovery, align 8, !dbg !9540
  %10 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9541
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %10, i64 0, !dbg !9541
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9541
  %11 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9541
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %11, i32 0, i32 1, !dbg !9541
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9541
  call void @copy_lv_set_from(%struct.basic_block_def* %9, %struct.basic_block_def* %12), !dbg !9542
  br label %if.end8, !dbg !9542

if.end8:                                          ; preds = %if.then7, %if.end
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9543
  %call9 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %13), !dbg !9543
  %tobool10 = icmp ne i8 %call9, 0, !dbg !9543
  br i1 %tobool10, label %cond.false12, label %cond.true11, !dbg !9543

cond.true11:                                      ; preds = %if.end8
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5378, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9543
  br label %cond.end13, !dbg !9543

cond.false12:                                     ; preds = %if.end8
  br label %cond.end13, !dbg !9543

cond.end13:                                       ; preds = %cond.false12, %cond.true11
  %cond14 = phi i32 [ 0, %cond.true11 ], [ 0, %cond.false12 ], !dbg !9543
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !9544
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9545
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %second_bb, align 8, !dbg !9546
  call void @sched_create_recovery_edges(%struct.basic_block_def* %14, %struct.basic_block_def* %15, %struct.basic_block_def* %16), !dbg !9547
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9548
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !9548
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 4, !dbg !9548
  %18 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !9548
  %cmp = icmp ne %struct.loops* %18, null, !dbg !9550
  br i1 %cmp, label %if.then16, label %if.end17, !dbg !9551

if.then16:                                        ; preds = %cond.end13
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9552
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %first_bb, align 8, !dbg !9553
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %20, i32 0, i32 3, !dbg !9554
  %21 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !9554
  call void @add_bb_to_loop(%struct.basic_block_def* %19, %struct.loop* %21), !dbg !9555
  br label %if.end17, !dbg !9555

if.end17:                                         ; preds = %if.then16, %cond.end13
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9556
  call void @sel_add_bb(%struct.basic_block_def* %22), !dbg !9557
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9558
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 7, !dbg !9558
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9558
  %24 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9558
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %24, i32 0, i32 1, !dbg !9558
  %25 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9558
  store %struct.rtx_def* %25, %struct.rtx_def** %jump, align 8, !dbg !9559
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9560
  %call18 = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %26), !dbg !9560
  %27 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9560
  %cmp19 = icmp eq %struct.rtx_def* %call18, %27, !dbg !9560
  br i1 %cmp19, label %cond.false21, label %cond.true20, !dbg !9560

cond.true20:                                      ; preds = %if.end17
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5386, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9560
  br label %cond.end22, !dbg !9560

cond.false21:                                     ; preds = %if.end17
  br label %cond.end22, !dbg !9560

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !9560
  %28 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9561
  call void @sel_init_new_insn(%struct.rtx_def* %28, i32 5), !dbg !9562
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %recovery_block, align 8, !dbg !9563
  ret %struct.basic_block_def* %29, !dbg !9564
}

declare dso_local %struct.basic_block_def* @sched_create_recovery_block(%struct.basic_block_def**) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_lv_set_from(%struct.basic_block_def* %bb, %struct.basic_block_def* %from_bb) #0 !dbg !9565 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %from_bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9566, metadata !DIExpression()), !dbg !9567
  store %struct.basic_block_def* %from_bb, %struct.basic_block_def** %from_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from_bb.addr, metadata !9568, metadata !DIExpression()), !dbg !9569
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9570
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !9570
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9570

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9570
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !9570
  br label %cond.end, !dbg !9570

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9570

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9570
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9570
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !9570
  %3 = load i32, i32* %index, align 8, !dbg !9570
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !9570
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 1, !dbg !9570
  %4 = load i8, i8* %lv_set_valid_p, align 8, !dbg !9570
  %tobool1 = icmp ne i8 %4, 0, !dbg !9570
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !9570

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4104, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9570
  br label %cond.end4, !dbg !9570

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !9570

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !9570
  %5 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9571
  %tobool6 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %5, null, !dbg !9571
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !9571

cond.true7:                                       ; preds = %cond.end4
  %6 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9571
  %base8 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %6, i32 0, i32 0, !dbg !9571
  br label %cond.end10, !dbg !9571

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !9571

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !9571
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9571
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !9571
  %8 = load i32, i32* %index12, align 8, !dbg !9571
  %call13 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond11, i32 %8), !dbg !9571
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call13, i32 0, i32 0, !dbg !9571
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !9571
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9571
  %tobool14 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !9571
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !9571

cond.true15:                                      ; preds = %cond.end10
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9571
  %base16 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %11, i32 0, i32 0, !dbg !9571
  br label %cond.end18, !dbg !9571

cond.false17:                                     ; preds = %cond.end10
  br label %cond.end18, !dbg !9571

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !9571
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %from_bb.addr, align 8, !dbg !9571
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !9571
  %13 = load i32, i32* %index20, align 8, !dbg !9571
  %call21 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond19, i32 %13), !dbg !9571
  %lv_set22 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call21, i32 0, i32 0, !dbg !9571
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set22, align 8, !dbg !9571
  call void @bitmap_copy(%struct.bitmap_head_def* %9, %struct.bitmap_head_def* %14), !dbg !9571
  %15 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9572
  %tobool23 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %15, null, !dbg !9572
  br i1 %tobool23, label %cond.true24, label %cond.false26, !dbg !9572

cond.true24:                                      ; preds = %cond.end18
  %16 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !9572
  %base25 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %16, i32 0, i32 0, !dbg !9572
  br label %cond.end27, !dbg !9572

cond.false26:                                     ; preds = %cond.end18
  br label %cond.end27, !dbg !9572

cond.end27:                                       ; preds = %cond.false26, %cond.true24
  %cond28 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base25, %cond.true24 ], [ null, %cond.false26 ], !dbg !9572
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9572
  %index29 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !9572
  %18 = load i32, i32* %index29, align 8, !dbg !9572
  %call30 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond28, i32 %18), !dbg !9572
  %lv_set_valid_p31 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call30, i32 0, i32 1, !dbg !9572
  store i8 1, i8* %lv_set_valid_p31, align 8, !dbg !9573
  ret void, !dbg !9574
}

declare dso_local void @sched_create_recovery_edges(%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_merge_blocks(%struct.basic_block_def* %a, %struct.basic_block_def* %b) #0 !dbg !9575 {
entry:
  %a.addr = alloca %struct.basic_block_def*, align 8
  %b.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %a, %struct.basic_block_def** %a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %a.addr, metadata !9576, metadata !DIExpression()), !dbg !9577
  store %struct.basic_block_def* %b, %struct.basic_block_def** %b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %b.addr, metadata !9578, metadata !DIExpression()), !dbg !9579
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !9580
  call void @sel_remove_empty_bb(%struct.basic_block_def* %0, i8 zeroext 1, i8 zeroext 0), !dbg !9581
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !9582
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !9583
  call void @merge_blocks(%struct.basic_block_def* %1, %struct.basic_block_def* %2), !dbg !9584
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %b.addr, align 8, !dbg !9585
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %a.addr, align 8, !dbg !9586
  call void @change_loops_latches(%struct.basic_block_def* %3, %struct.basic_block_def* %4), !dbg !9587
  ret void, !dbg !9588
}

declare dso_local void @merge_blocks(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @change_loops_latches(%struct.basic_block_def* %from, %struct.basic_block_def* %to) #0 !dbg !9589 {
entry:
  %from.addr = alloca %struct.basic_block_def*, align 8
  %to.addr = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !9590, metadata !DIExpression()), !dbg !9591
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !9592, metadata !DIExpression()), !dbg !9593
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !9594
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9594
  %cmp = icmp ne %struct.basic_block_def* %0, %1, !dbg !9594
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9594

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5203, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9594
  br label %cond.end, !dbg !9594

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9594

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9594
  %2 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9595
  %tobool = icmp ne %struct.loop* %2, null, !dbg !9595
  br i1 %tobool, label %if.then, label %if.end20, !dbg !9597

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !9598, metadata !DIExpression()), !dbg !9600
  %3 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9601
  store %struct.loop* %3, %struct.loop** %loop, align 8, !dbg !9603
  br label %for.cond, !dbg !9604

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9605
  %tobool1 = icmp ne %struct.loop* %4, null, !dbg !9607
  br i1 %tobool1, label %for.body, label %for.end, !dbg !9607

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9608
  %call = call zeroext i8 @considered_for_pipelining_p(%struct.loop* %5), !dbg !9610
  %conv = zext i8 %call to i32, !dbg !9610
  %tobool2 = icmp ne i32 %conv, 0, !dbg !9610
  br i1 %tobool2, label %land.lhs.true, label %if.end, !dbg !9611

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9612
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 3, !dbg !9613
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !9613
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !9614
  %cmp3 = icmp eq %struct.basic_block_def* %7, %8, !dbg !9615
  br i1 %cmp3, label %if.then5, label %if.end, !dbg !9616

if.then5:                                         ; preds = %land.lhs.true
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9617
  %10 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9617
  %cmp6 = icmp eq %struct.loop* %9, %10, !dbg !9617
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !9617

cond.true8:                                       ; preds = %if.then5
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5212, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9617
  br label %cond.end10, !dbg !9617

cond.false9:                                      ; preds = %if.then5
  br label %cond.end10, !dbg !9617

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !9617
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9619
  %12 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9620
  %latch12 = getelementptr inbounds %struct.loop, %struct.loop* %12, i32 0, i32 3, !dbg !9621
  store %struct.basic_block_def* %11, %struct.basic_block_def** %latch12, align 8, !dbg !9622
  %13 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9623
  %call13 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %13), !dbg !9623
  %tobool14 = icmp ne %struct.edge_def* %call13, null, !dbg !9623
  br i1 %tobool14, label %cond.false16, label %cond.true15, !dbg !9623

cond.true15:                                      ; preds = %cond.end10
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5214, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9623
  br label %cond.end17, !dbg !9623

cond.false16:                                     ; preds = %cond.end10
  br label %cond.end17, !dbg !9623

cond.end17:                                       ; preds = %cond.false16, %cond.true15
  %cond18 = phi i32 [ 0, %cond.true15 ], [ 0, %cond.false16 ], !dbg !9623
  br label %if.end, !dbg !9624

if.end:                                           ; preds = %cond.end17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !9614

for.inc:                                          ; preds = %if.end
  %14 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !9625
  %call19 = call %struct.loop* @loop_outer(%struct.loop* %14), !dbg !9626
  store %struct.loop* %call19, %struct.loop** %loop, align 8, !dbg !9627
  br label %for.cond, !dbg !9628, !llvm.loop !9629

for.end:                                          ; preds = %for.cond
  br label %if.end20, !dbg !9631

if.end20:                                         ; preds = %for.end, %cond.end
  ret void, !dbg !9632
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_redirect_edge_and_branch_force(%struct.edge_def* %e, %struct.basic_block_def* %to) #0 !dbg !9633 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %to.addr = alloca %struct.basic_block_def*, align 8
  %jump_bb = alloca %struct.basic_block_def*, align 8
  %src = alloca %struct.basic_block_def*, align 8
  %prev_max_uid = alloca i32, align 4
  %jump = alloca %struct.rtx_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !9636, metadata !DIExpression()), !dbg !9637
  store %struct.basic_block_def* %to, %struct.basic_block_def** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %to.addr, metadata !9638, metadata !DIExpression()), !dbg !9639
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %jump_bb, metadata !9640, metadata !DIExpression()), !dbg !9641
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %src, metadata !9642, metadata !DIExpression()), !dbg !9643
  call void @llvm.dbg.declare(metadata i32* %prev_max_uid, metadata !9644, metadata !DIExpression()), !dbg !9645
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !9646, metadata !DIExpression()), !dbg !9647
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9648
  %src1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !9648
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src1, align 8, !dbg !9648
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %1), !dbg !9648
  %tobool = icmp ne i8 %call, 0, !dbg !9648
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9648

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5412, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9648
  br label %cond.end, !dbg !9648

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9648

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9648
  %2 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9649
  %src2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !9650
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src2, align 8, !dbg !9650
  store %struct.basic_block_def* %3, %struct.basic_block_def** %src, align 8, !dbg !9651
  %call3 = call i32 @get_max_uid(), !dbg !9652
  store i32 %call3, i32* %prev_max_uid, align 4, !dbg !9653
  %4 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !9654
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %to.addr, align 8, !dbg !9655
  %call4 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %4, %struct.basic_block_def* %5), !dbg !9656
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %jump_bb, align 8, !dbg !9657
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9658
  %cmp = icmp ne %struct.basic_block_def* %6, null, !dbg !9660
  br i1 %cmp, label %if.then, label %if.end, !dbg !9661

if.then:                                          ; preds = %cond.end
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9662
  call void @sel_add_bb(%struct.basic_block_def* %7), !dbg !9663
  br label %if.end, !dbg !9663

if.end:                                           ; preds = %if.then, %cond.end
  %8 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9664
  %tobool5 = icmp ne %struct.loop* %8, null, !dbg !9664
  br i1 %tobool5, label %land.lhs.true, label %if.end14, !dbg !9666

land.lhs.true:                                    ; preds = %if.end
  %9 = load i8, i8* @pipelining_p, align 1, !dbg !9667
  %conv = zext i8 %9 to i32, !dbg !9667
  %tobool6 = icmp ne i32 %conv, 0, !dbg !9667
  br i1 %tobool6, label %if.then7, label %if.end14, !dbg !9668

if.then7:                                         ; preds = %land.lhs.true
  %10 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !9669
  %call8 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %10), !dbg !9669
  %tobool9 = icmp ne %struct.edge_def* %call8, null, !dbg !9669
  br i1 %tobool9, label %cond.false11, label %cond.true10, !dbg !9669

cond.true10:                                      ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5425, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9669
  br label %cond.end12, !dbg !9669

cond.false11:                                     ; preds = %if.then7
  br label %cond.end12, !dbg !9669

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !9669
  br label %if.end14, !dbg !9669

if.end14:                                         ; preds = %cond.end12, %land.lhs.true, %if.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9670
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %jump_bb, align 8, !dbg !9671
  %13 = load i32, i32* %prev_max_uid, align 4, !dbg !9672
  %call15 = call %struct.rtx_def* @find_new_jump(%struct.basic_block_def* %11, %struct.basic_block_def* %12, i32 %13), !dbg !9673
  store %struct.rtx_def* %call15, %struct.rtx_def** %jump, align 8, !dbg !9674
  %14 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9675
  %tobool16 = icmp ne %struct.rtx_def* %14, null, !dbg !9675
  br i1 %tobool16, label %if.then17, label %if.end18, !dbg !9677

if.then17:                                        ; preds = %if.end14
  %15 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !9678
  call void @sel_init_new_insn(%struct.rtx_def* %15, i32 5), !dbg !9679
  br label %if.end18, !dbg !9679

if.end18:                                         ; preds = %if.then17, %if.end14
  ret void, !dbg !9680
}

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local %struct.edge_def* @redirect_edge_and_branch(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_register_cfg_hooks() #0 !dbg !9681 {
entry:
  %tmp = alloca %struct.cfg_hooks, align 8
  store %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* @sel_split_block, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !9682
  call void @get_cfg_hooks(%struct.cfg_hooks* sret %tmp), !dbg !9683
  %0 = bitcast %struct.cfg_hooks* %tmp to i8*, !dbg !9683
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.cfg_hooks* @orig_cfg_hooks to i8*), i8* align 8 %0, i64 232, i1 false), !dbg !9683
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.cfg_hooks* @sel_cfg_hooks to i8*), i8* align 8 bitcast (%struct.cfg_hooks* @orig_cfg_hooks to i8*), i64 232, i1 false), !dbg !9684
  store %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)* @sel_create_basic_block, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)** getelementptr inbounds (%struct.cfg_hooks, %struct.cfg_hooks* @sel_cfg_hooks, i32 0, i32 3), align 8, !dbg !9685
  call void @set_cfg_hooks(%struct.cfg_hooks* byval(%struct.cfg_hooks) align 8 @sel_cfg_hooks), !dbg !9686
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* @sel_init_only_bb, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !9687
  store %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* @sel_split_block, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !9688
  store %struct.basic_block_def* (%struct.basic_block_def*)* @sel_create_empty_bb, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !9689
  ret void, !dbg !9690
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @sel_split_block(%struct.basic_block_def* %bb, %struct.rtx_def* %after) #0 !dbg !9691 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.rtx_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9692, metadata !DIExpression()), !dbg !9693
  store %struct.rtx_def* %after, %struct.rtx_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after.addr, metadata !9694, metadata !DIExpression()), !dbg !9695
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !9696, metadata !DIExpression()), !dbg !9697
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9698, metadata !DIExpression()), !dbg !9699
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9700
  %1 = load %struct.rtx_def*, %struct.rtx_def** %after.addr, align 8, !dbg !9701
  %call = call %struct.basic_block_def* @sched_split_block_1(%struct.basic_block_def* %0, %struct.rtx_def* %1), !dbg !9702
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_bb, align 8, !dbg !9703
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9704
  call void @sel_add_bb(%struct.basic_block_def* %2), !dbg !9705
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9706
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9707
  call void @change_loops_latches(%struct.basic_block_def* %3, %struct.basic_block_def* %4), !dbg !9708
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9709
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 7, !dbg !9709
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9709
  %6 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9709
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %6, i32 0, i32 0, !dbg !9709
  %7 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9709
  store %struct.rtx_def* %7, %struct.rtx_def** %insn, align 8, !dbg !9709
  br label %for.cond, !dbg !9709

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9711
  %tobool = icmp ne %struct.rtx_def* %8, null, !dbg !9711
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9711

land.rhs:                                         ; preds = %for.cond
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9711
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9711
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !9711
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !9711
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !9711
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !9711
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9711
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9711
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9711
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9711
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9711
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9711
  %cmp = icmp ne %struct.rtx_def* %9, %13, !dbg !9711
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %14 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !9713
  br i1 %14, label %for.body, label %for.end, !dbg !9709

for.body:                                         ; preds = %land.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9714
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !9714
  %bf.load = load i32, i32* %16, align 8, !dbg !9714
  %bf.clear = and i32 %bf.load, 65535, !dbg !9714
  %cmp3 = icmp eq i32 %bf.clear, 8, !dbg !9714
  br i1 %cmp3, label %if.then, label %lor.lhs.false, !dbg !9714

lor.lhs.false:                                    ; preds = %for.body
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9714
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !9714
  %bf.load4 = load i32, i32* %18, align 8, !dbg !9714
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !9714
  %cmp6 = icmp eq i32 %bf.clear5, 7, !dbg !9714
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !9714

lor.lhs.false7:                                   ; preds = %lor.lhs.false
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9714
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !9714
  %bf.load8 = load i32, i32* %20, align 8, !dbg !9714
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9714
  %cmp10 = icmp eq i32 %bf.clear9, 9, !dbg !9714
  br i1 %cmp10, label %if.then, label %lor.lhs.false11, !dbg !9714

lor.lhs.false11:                                  ; preds = %lor.lhs.false7
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9714
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !9714
  %bf.load12 = load i32, i32* %22, align 8, !dbg !9714
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !9714
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !9714
  br i1 %cmp14, label %if.then, label %if.end, !dbg !9716

if.then:                                          ; preds = %lor.lhs.false11, %lor.lhs.false7, %lor.lhs.false, %for.body
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9717
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %23, i32 0, i32 9, !dbg !9718
  %24 = load i32, i32* %index, align 8, !dbg !9718
  %25 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9719
  %tobool15 = icmp ne %struct.VEC_sel_insn_data_def_heap* %25, null, !dbg !9719
  br i1 %tobool15, label %cond.true, label %cond.false, !dbg !9719

cond.true:                                        ; preds = %if.then
  %26 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !9719
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %26, i32 0, i32 0, !dbg !9719
  br label %cond.end, !dbg !9719

cond.false:                                       ; preds = %if.then
  br label %cond.end, !dbg !9719

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9719
  %27 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9719
  %tobool16 = icmp ne %struct.VEC_int_heap* %27, null, !dbg !9719
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !9719

cond.true17:                                      ; preds = %cond.end
  %28 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !9719
  %base18 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %28, i32 0, i32 0, !dbg !9719
  br label %cond.end20, !dbg !9719

cond.false19:                                     ; preds = %cond.end
  br label %cond.end20, !dbg !9719

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_int_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !9719
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9719
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !9719
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !9719
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 0, !dbg !9719
  %rt_int = bitcast %union.rtunion_def* %arrayidx24 to i32*, !dbg !9719
  %30 = load i32, i32* %rt_int, align 8, !dbg !9719
  %call25 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond21, i32 %30), !dbg !9719
  %call26 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call25), !dbg !9719
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call26, i32 0, i32 0, !dbg !9719
  %orig_bb_index = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 6, !dbg !9719
  store i32 %24, i32* %orig_bb_index, align 4, !dbg !9720
  br label %if.end, !dbg !9719

if.end:                                           ; preds = %cond.end20, %lor.lhs.false11
  br label %for.inc, !dbg !9714

for.inc:                                          ; preds = %if.end
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9711
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !9711
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !9711
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 2, !dbg !9711
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !9711
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !9711
  store %struct.rtx_def* %32, %struct.rtx_def** %insn, align 8, !dbg !9711
  br label %for.cond, !dbg !9711, !llvm.loop !9721

for.end:                                          ; preds = %land.end
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9723
  %call31 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %33), !dbg !9725
  %tobool32 = icmp ne i8 %call31, 0, !dbg !9725
  br i1 %tobool32, label %if.then33, label %if.end40, !dbg !9726

if.then33:                                        ; preds = %for.end
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9727
  %call34 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %34), !dbg !9727
  %tobool35 = icmp ne i8 %call34, 0, !dbg !9727
  br i1 %tobool35, label %cond.true36, label %cond.false37, !dbg !9727

cond.true36:                                      ; preds = %if.then33
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5242, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9727
  br label %cond.end38, !dbg !9727

cond.false37:                                     ; preds = %if.then33
  br label %cond.end38, !dbg !9727

cond.end38:                                       ; preds = %cond.false37, %cond.true36
  %cond39 = phi i32 [ 0, %cond.true36 ], [ 0, %cond.false37 ], !dbg !9727
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9729
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9730
  call void @exchange_data_sets(%struct.basic_block_def* %35, %struct.basic_block_def* %36), !dbg !9731
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9732
  call void @free_data_sets(%struct.basic_block_def* %37), !dbg !9733
  br label %if.end40, !dbg !9734

if.end40:                                         ; preds = %cond.end38, %for.end
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9735
  %call41 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %38), !dbg !9737
  %tobool42 = icmp ne i8 %call41, 0, !dbg !9737
  br i1 %tobool42, label %if.end49, label %land.lhs.true, !dbg !9738

land.lhs.true:                                    ; preds = %if.end40
  %39 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_reschedule, align 8, !dbg !9739
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9740
  %index43 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !9741
  %41 = load i32, i32* %index43, align 8, !dbg !9741
  %call44 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %39, i32 %41), !dbg !9742
  %tobool45 = icmp ne i32 %call44, 0, !dbg !9742
  br i1 %tobool45, label %if.then46, label %if.end49, !dbg !9743

if.then46:                                        ; preds = %land.lhs.true
  %42 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_reschedule, align 8, !dbg !9744
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9745
  %index47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 9, !dbg !9746
  %44 = load i32, i32* %index47, align 8, !dbg !9746
  %call48 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %42, i32 %44), !dbg !9747
  br label %if.end49, !dbg !9747

if.end49:                                         ; preds = %if.then46, %land.lhs.true, %if.end40
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9748
  ret %struct.basic_block_def* %45, !dbg !9749
}

declare dso_local void @get_cfg_hooks(%struct.cfg_hooks* sret) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @sel_create_basic_block(i8* %headp, i8* %endp, %struct.basic_block_def* %after) #0 !dbg !9750 {
entry:
  %headp.addr = alloca i8*, align 8
  %endp.addr = alloca i8*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %new_bb_note = alloca %struct.rtx_def*, align 8
  store i8* %headp, i8** %headp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %headp.addr, metadata !9751, metadata !DIExpression()), !dbg !9752
  store i8* %endp, i8** %endp.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %endp.addr, metadata !9753, metadata !DIExpression()), !dbg !9754
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !9755, metadata !DIExpression()), !dbg !9756
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !9757, metadata !DIExpression()), !dbg !9758
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_bb_note, metadata !9759, metadata !DIExpression()), !dbg !9760
  %0 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !9761
  %tobool = icmp ne i32 %0, 0, !dbg !9761
  br i1 %tobool, label %cond.false, label %lor.lhs.false, !dbg !9761

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9761
  %cmp = icmp eq %struct.VEC_basic_block_heap* %1, null, !dbg !9761
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9761

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5170, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9761
  br label %cond.end, !dbg !9761

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !9761

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9761
  %call = call %struct.rtx_def* @get_bb_note_from_pool(), !dbg !9762
  store %struct.rtx_def* %call, %struct.rtx_def** %new_bb_note, align 8, !dbg !9763
  %2 = load %struct.rtx_def*, %struct.rtx_def** %new_bb_note, align 8, !dbg !9764
  %cmp1 = icmp eq %struct.rtx_def* %2, null, !dbg !9766
  br i1 %cmp1, label %if.then, label %if.else, !dbg !9767

if.then:                                          ; preds = %cond.end
  %3 = load %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)*, %struct.basic_block_def* (i8*, i8*, %struct.basic_block_def*)** getelementptr inbounds (%struct.cfg_hooks, %struct.cfg_hooks* @orig_cfg_hooks, i32 0, i32 3), align 8, !dbg !9768
  %4 = load i8*, i8** %headp.addr, align 8, !dbg !9769
  %5 = load i8*, i8** %endp.addr, align 8, !dbg !9770
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !9771
  %call2 = call %struct.basic_block_def* %3(i8* %4, i8* %5, %struct.basic_block_def* %6), !dbg !9772
  store %struct.basic_block_def* %call2, %struct.basic_block_def** %new_bb, align 8, !dbg !9773
  br label %if.end, !dbg !9774

if.else:                                          ; preds = %cond.end
  %7 = load i8*, i8** %headp.addr, align 8, !dbg !9775
  %8 = bitcast i8* %7 to %struct.rtx_def*, !dbg !9777
  %9 = load i8*, i8** %endp.addr, align 8, !dbg !9778
  %10 = bitcast i8* %9 to %struct.rtx_def*, !dbg !9779
  %11 = load %struct.rtx_def*, %struct.rtx_def** %new_bb_note, align 8, !dbg !9780
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !9781
  %call3 = call %struct.basic_block_def* @create_basic_block_structure(%struct.rtx_def* %8, %struct.rtx_def* %10, %struct.rtx_def* %11, %struct.basic_block_def* %12), !dbg !9782
  store %struct.basic_block_def* %call3, %struct.basic_block_def** %new_bb, align 8, !dbg !9783
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9784
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 2, !dbg !9785
  store i8* null, i8** %aux, align 8, !dbg !9786
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9787
  %call4 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** @last_added_blocks, %struct.basic_block_def* %14), !dbg !9787
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9788
  ret %struct.basic_block_def* %15, !dbg !9789
}

declare dso_local void @set_cfg_hooks(%struct.cfg_hooks* byval(%struct.cfg_hooks) align 8) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sel_init_only_bb(%struct.basic_block_def* %bb, %struct.basic_block_def* %after) #0 !dbg !9790 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %after.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9791, metadata !DIExpression()), !dbg !9792
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !9793, metadata !DIExpression()), !dbg !9794
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !9795
  %cmp = icmp eq %struct.basic_block_def* %0, null, !dbg !9795
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9795

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5192, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9795
  br label %cond.end, !dbg !9795

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9795

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9795
  call void @extend_regions(), !dbg !9796
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9797
  call void @rgn_make_new_region_out_of_new_block(%struct.basic_block_def* %1), !dbg !9798
  ret void, !dbg !9799
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @sel_create_empty_bb(%struct.basic_block_def* %after) #0 !dbg !9800 {
entry:
  %after.addr = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %after, %struct.basic_block_def** %after.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after.addr, metadata !9801, metadata !DIExpression()), !dbg !9802
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !9803, metadata !DIExpression()), !dbg !9804
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %after.addr, align 8, !dbg !9805
  %call = call %struct.basic_block_def* @sched_create_empty_bb_1(%struct.basic_block_def* %0), !dbg !9806
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_bb, align 8, !dbg !9807
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9808
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !9808
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9808

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9808
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %2, i32 0, i32 0, !dbg !9808
  br label %cond.end, !dbg !9808

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9808

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9808
  %call1 = call i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %cond), !dbg !9808
  %cmp = icmp eq i32 %call1, 1, !dbg !9808
  br i1 %cmp, label %land.lhs.true, label %cond.true10, !dbg !9808

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9808
  %tobool2 = icmp ne %struct.VEC_basic_block_heap* %3, null, !dbg !9808
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !9808

cond.true3:                                       ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** @last_added_blocks, align 8, !dbg !9808
  %base4 = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !9808
  br label %cond.end6, !dbg !9808

cond.false5:                                      ; preds = %land.lhs.true
  br label %cond.end6, !dbg !9808

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_basic_block_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !9808
  %call8 = call %struct.basic_block_def* @VEC_basic_block_base_index(%struct.VEC_basic_block_base* %cond7, i32 0), !dbg !9808
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9808
  %cmp9 = icmp eq %struct.basic_block_def* %call8, %5, !dbg !9808
  br i1 %cmp9, label %cond.false11, label %cond.true10, !dbg !9808

cond.true10:                                      ; preds = %cond.end6, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5349, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9808
  br label %cond.end12, !dbg !9808

cond.false11:                                     ; preds = %cond.end6
  br label %cond.end12, !dbg !9808

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !9808
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** @last_added_blocks), !dbg !9809
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !9810
  ret %struct.basic_block_def* %6, !dbg !9811
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_unregister_cfg_hooks() #0 !dbg !9812 {
entry:
  store %struct.basic_block_def* (%struct.basic_block_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*)** @sched_create_empty_bb, align 8, !dbg !9813
  store %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)* null, %struct.basic_block_def* (%struct.basic_block_def*, %struct.rtx_def*)** @sched_split_block, align 8, !dbg !9814
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* null, void (%struct.basic_block_def*, %struct.basic_block_def*)** @sched_init_only_bb, align 8, !dbg !9815
  call void @set_cfg_hooks(%struct.cfg_hooks* byval(%struct.cfg_hooks) align 8 @orig_cfg_hooks), !dbg !9816
  ret void, !dbg !9817
}

declare dso_local void @start_sequence() #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_debug_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_jump_insn(%struct.rtx_def*) #2

declare dso_local void @end_sequence() #2

declare dso_local void @sched_init_luids(%struct.VEC_basic_block_heap*, %struct.basic_block_def*, %struct.VEC_rtx_heap*, %struct.rtx_def*) #2

declare dso_local void @sched_extend_target() #2

declare dso_local void @sched_deps_init(i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !9818 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9820, metadata !DIExpression()), !dbg !9821
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9822
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !9822
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9822
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !9822
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !9822
  %1 = load i32, i32* %rt_int, align 8, !dbg !9822
  %cmp = icmp slt i32 %1, 0, !dbg !9824
  br i1 %cmp, label %if.then, label %if.end, !dbg !9825

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9826
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9826
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9826
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !9826
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !9826
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9826
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9827
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !9828
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9829
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9829
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9829
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !9829
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !9829
  store i32 %call, i32* %rt_int7, align 8, !dbg !9830
  br label %if.end, !dbg !9829

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9831
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9831
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !9831
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !9831
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !9831
  %7 = load i32, i32* %rt_int11, align 8, !dbg !9831
  ret i32 %7, !dbg !9832
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !9833 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  %vi = alloca %struct.vinsn_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !9836, metadata !DIExpression()), !dbg !9837
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !9838, metadata !DIExpression()), !dbg !9839
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi, metadata !9840, metadata !DIExpression()), !dbg !9841
  %call = call i8* @xcalloc(i64 1, i64 80), !dbg !9842
  %0 = bitcast i8* %call to %struct.vinsn_def*, !dbg !9842
  store %struct.vinsn_def* %0, %struct.vinsn_def** %vi, align 8, !dbg !9841
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vi, align 8, !dbg !9843
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !9844
  %3 = load i8, i8* %force_unique_p.addr, align 1, !dbg !9845
  call void @vinsn_init(%struct.vinsn_def* %1, %struct.rtx_def* %2, i8 zeroext %3), !dbg !9846
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** %vi, align 8, !dbg !9847
  ret %struct.vinsn_def* %4, !dbg !9848
}

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @setup_nop_and_exit_insns() #0 !dbg !9849 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !9850
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !9850
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !9850

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !9850
  %cmp1 = icmp eq %struct.rtx_def* %1, null, !dbg !9850
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !9850

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5609, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9850
  br label %cond.end, !dbg !9850

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !9850

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9850
  %call = call %struct.rtx_def* @gen_nop(), !dbg !9851
  store %struct.rtx_def* %call, %struct.rtx_def** @nop_pattern, align 8, !dbg !9852
  call void @start_sequence(), !dbg !9853
  %2 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !9854
  %call2 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %2), !dbg !9855
  %call3 = call %struct.rtx_def* @get_insns(), !dbg !9856
  store %struct.rtx_def* %call3, %struct.rtx_def** @exit_insn, align 8, !dbg !9857
  call void @end_sequence(), !dbg !9858
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9859
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !9859
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !9859
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !9859
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 1, !dbg !9859
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !9859
  %6 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !9859
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9859
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9859
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 3, !dbg !9859
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !9859
  store %struct.basic_block_def* %5, %struct.basic_block_def** %rt_bb, align 8, !dbg !9859
  ret void, !dbg !9860
}

declare dso_local %struct.rtx_def* @gen_nop() #2

declare dso_local %struct.rtx_def* @get_insns() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_nop_and_exit_insns() #0 !dbg !9861 {
entry:
  store %struct.rtx_def* null, %struct.rtx_def** @exit_insn, align 8, !dbg !9862
  store %struct.rtx_def* null, %struct.rtx_def** @nop_pattern, align 8, !dbg !9863
  ret void, !dbg !9864
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @setup_nop_vinsn() #0 !dbg !9865 {
entry:
  %0 = load %struct.rtx_def*, %struct.rtx_def** @exit_insn, align 8, !dbg !9866
  %call = call %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %0, i8 zeroext 0), !dbg !9867
  store %struct.vinsn_def* %call, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !9868
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !9869
  call void @vinsn_attach(%struct.vinsn_def* %1), !dbg !9870
  ret void, !dbg !9871
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_nop_vinsn() #0 !dbg !9872 {
entry:
  %0 = load %struct.vinsn_def*, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !9873
  %count = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %0, i32 0, i32 4, !dbg !9873
  %1 = load i32, i32* %count, align 8, !dbg !9873
  %cmp = icmp eq i32 %1, 1, !dbg !9873
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9873

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5640, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9873
  br label %cond.end, !dbg !9873

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9873

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9873
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !9874
  call void @vinsn_detach(%struct.vinsn_def* %2), !dbg !9875
  store %struct.vinsn_def* null, %struct.vinsn_def** @nop_vinsn, align 8, !dbg !9876
  ret void, !dbg !9877
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_set_sched_flags() #0 !dbg !9878 {
entry:
  %0 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !9879
  %tobool = icmp ne %struct.spec_info_def* %0, null, !dbg !9879
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !9881

land.lhs.true:                                    ; preds = %entry
  %1 = load void (%struct.spec_info_def*)*, void (%struct.spec_info_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 32), align 8, !dbg !9882
  %tobool1 = icmp ne void (%struct.spec_info_def*)* %1, null, !dbg !9883
  br i1 %tobool1, label %if.then, label %if.end, !dbg !9884

if.then:                                          ; preds = %land.lhs.true
  %2 = load void (%struct.spec_info_def*)*, void (%struct.spec_info_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 32), align 8, !dbg !9885
  %3 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !9886
  call void %2(%struct.spec_info_def* %3), !dbg !9887
  br label %if.end, !dbg !9887

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void, !dbg !9888
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_setup_sched_infos() #0 !dbg !9889 {
entry:
  call void @rgn_setup_common_sched_info(), !dbg !9890
  %0 = load %struct.common_sched_info_def*, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !9891
  %1 = bitcast %struct.common_sched_info_def* %0 to i8*, !dbg !9892
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.common_sched_info_def* @sel_common_sched_info to i8*), i8* align 8 %1, i64 40, i1 false), !dbg !9892
  store void (i32, i32, i32)* null, void (i32, i32, i32)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sel_common_sched_info, i32 0, i32 0), align 8, !dbg !9893
  store void (%struct.basic_block_def*, %struct.basic_block_def*)* null, void (%struct.basic_block_def*, %struct.basic_block_def*)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sel_common_sched_info, i32 0, i32 1), align 8, !dbg !9894
  store i32 (%struct.basic_block_def*)* @sel_estimate_number_of_insns, i32 (%struct.basic_block_def*)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sel_common_sched_info, i32 0, i32 2), align 8, !dbg !9895
  store i32 (%struct.rtx_def*)* @sel_luid_for_non_insn, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sel_common_sched_info, i32 0, i32 3), align 8, !dbg !9896
  store i32 4, i32* getelementptr inbounds (%struct.common_sched_info_def, %struct.common_sched_info_def* @sel_common_sched_info, i32 0, i32 4), align 8, !dbg !9897
  store %struct.common_sched_info_def* @sel_common_sched_info, %struct.common_sched_info_def** @common_sched_info, align 8, !dbg !9898
  store %struct.haifa_sched_info* @sched_sel_haifa_sched_info, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !9899
  %call = call i32 @get_rgn_sched_max_insns_priority(), !dbg !9900
  %2 = load %struct.haifa_sched_info*, %struct.haifa_sched_info** @current_sched_info, align 8, !dbg !9901
  %sched_max_insns_priority = getelementptr inbounds %struct.haifa_sched_info, %struct.haifa_sched_info* %2, i32 0, i32 13, !dbg !9902
  store i32 %call, i32* %sched_max_insns_priority, align 4, !dbg !9903
  call void @sel_set_sched_flags(), !dbg !9904
  ret void, !dbg !9905
}

declare dso_local void @rgn_setup_common_sched_info() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @sel_estimate_number_of_insns(%struct.basic_block_def* %bb) #0 !dbg !9906 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %res = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %next_tail = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9907, metadata !DIExpression()), !dbg !9908
  call void @llvm.dbg.declare(metadata i32* %res, metadata !9909, metadata !DIExpression()), !dbg !9910
  store i32 0, i32* %res, align 4, !dbg !9910
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9911, metadata !DIExpression()), !dbg !9912
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9913
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9913
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9913
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9913
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !9913
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9913
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9913
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9913
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9913
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9913
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9913
  store %struct.rtx_def* %3, %struct.rtx_def** %insn, align 8, !dbg !9912
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_tail, metadata !9914, metadata !DIExpression()), !dbg !9915
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9916
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !9916
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !9916
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !9916
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !9916
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9916
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !9916
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !9916
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 2, !dbg !9916
  %rt_rtx6 = bitcast %union.rtunion_def* %arrayidx5 to %struct.rtx_def**, !dbg !9916
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx6, align 8, !dbg !9916
  store %struct.rtx_def* %7, %struct.rtx_def** %next_tail, align 8, !dbg !9915
  br label %for.cond, !dbg !9917

for.cond:                                         ; preds = %for.inc, %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9918
  %9 = load %struct.rtx_def*, %struct.rtx_def** %next_tail, align 8, !dbg !9921
  %cmp = icmp ne %struct.rtx_def* %8, %9, !dbg !9922
  br i1 %cmp, label %for.body, label %for.end, !dbg !9923

for.body:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !9924
  %bf.load = load i32, i32* %11, align 8, !dbg !9924
  %bf.clear = and i32 %bf.load, 65535, !dbg !9924
  %cmp7 = icmp eq i32 %bf.clear, 8, !dbg !9924
  br i1 %cmp7, label %land.lhs.true, label %lor.lhs.false, !dbg !9924

lor.lhs.false:                                    ; preds = %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !9924
  %bf.load8 = load i32, i32* %13, align 8, !dbg !9924
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9924
  %cmp10 = icmp eq i32 %bf.clear9, 7, !dbg !9924
  br i1 %cmp10, label %land.lhs.true, label %lor.lhs.false11, !dbg !9924

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !9924
  %bf.load12 = load i32, i32* %15, align 8, !dbg !9924
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !9924
  %cmp14 = icmp eq i32 %bf.clear13, 9, !dbg !9924
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false15, !dbg !9924

lor.lhs.false15:                                  ; preds = %lor.lhs.false11
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !9924
  %bf.load16 = load i32, i32* %17, align 8, !dbg !9924
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !9924
  %cmp18 = icmp eq i32 %bf.clear17, 10, !dbg !9924
  br i1 %cmp18, label %land.lhs.true, label %if.end, !dbg !9924

land.lhs.true:                                    ; preds = %lor.lhs.false15, %lor.lhs.false11, %lor.lhs.false, %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9924
  %bf.load19 = load i32, i32* %19, align 8, !dbg !9924
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !9924
  %cmp21 = icmp eq i32 %bf.clear20, 7, !dbg !9924
  br i1 %cmp21, label %if.end, label %if.then, !dbg !9926

if.then:                                          ; preds = %land.lhs.true
  %20 = load i32, i32* %res, align 4, !dbg !9927
  %inc = add nsw i32 %20, 1, !dbg !9927
  store i32 %inc, i32* %res, align 4, !dbg !9927
  br label %if.end, !dbg !9928

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false15
  br label %for.inc, !dbg !9924

for.inc:                                          ; preds = %if.end
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9929
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !9929
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !9929
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 2, !dbg !9929
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !9929
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !9929
  store %struct.rtx_def* %22, %struct.rtx_def** %insn, align 8, !dbg !9930
  br label %for.cond, !dbg !9931, !llvm.loop !9932

for.end:                                          ; preds = %for.cond
  %23 = load i32, i32* %res, align 4, !dbg !9934
  ret i32 %23, !dbg !9935
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sel_luid_for_non_insn(%struct.rtx_def* %x) #0 !dbg !9936 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9937, metadata !DIExpression()), !dbg !9938
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9939
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9939
  %bf.load = load i32, i32* %1, align 8, !dbg !9939
  %bf.clear = and i32 %bf.load, 65535, !dbg !9939
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !9939
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !9939

lor.lhs.false:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9939
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !9939
  %bf.load1 = load i32, i32* %3, align 8, !dbg !9939
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !9939
  %cmp3 = icmp eq i32 %bf.clear2, 12, !dbg !9939
  br i1 %cmp3, label %cond.false, label %cond.true, !dbg !9939

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3801, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9939
  br label %cond.end, !dbg !9939

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !9939

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9939
  ret i32 -1, !dbg !9940
}

declare dso_local i32 @get_rgn_sched_max_insns_priority() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @make_region_from_loop_preheader(%struct.VEC_basic_block_heap** %loop_blocks) #0 !dbg !9941 {
entry:
  %loop_blocks.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %i = alloca i32, align 4
  %new_rgn_number = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %bb_ord_index = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %loop_blocks, %struct.VEC_basic_block_heap*** %loop_blocks.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %loop_blocks.addr, metadata !9942, metadata !DIExpression()), !dbg !9943
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9944, metadata !DIExpression()), !dbg !9945
  call void @llvm.dbg.declare(metadata i32* %new_rgn_number, metadata !9946, metadata !DIExpression()), !dbg !9947
  store i32 -1, i32* %new_rgn_number, align 4, !dbg !9947
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9948, metadata !DIExpression()), !dbg !9949
  call void @llvm.dbg.declare(metadata i32* %bb_ord_index, metadata !9950, metadata !DIExpression()), !dbg !9951
  store i32 0, i32* %bb_ord_index, align 4, !dbg !9951
  %call = call i32 @sel_create_new_region(), !dbg !9952
  store i32 %call, i32* %new_rgn_number, align 4, !dbg !9953
  store i32 0, i32* %i, align 4, !dbg !9954
  br label %for.cond, !dbg !9956

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %loop_blocks.addr, align 8, !dbg !9957
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !9957
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !9957
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9957

cond.true:                                        ; preds = %for.cond
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %loop_blocks.addr, align 8, !dbg !9957
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !9957
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !9957
  br label %cond.end, !dbg !9957

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !9957

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9957
  %4 = load i32, i32* %i, align 4, !dbg !9957
  %call1 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond, i32 %4, %struct.basic_block_def** %bb), !dbg !9957
  %tobool2 = icmp ne i32 %call1, 0, !dbg !9959
  br i1 %tobool2, label %for.body, label %for.end, !dbg !9959

for.body:                                         ; preds = %cond.end
  %5 = load i32, i32* %new_rgn_number, align 4, !dbg !9960
  %cmp = icmp sge i32 %5, 0, !dbg !9960
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !9960

cond.true3:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5830, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9960
  br label %cond.end5, !dbg !9960

cond.false4:                                      ; preds = %for.body
  br label %cond.end5, !dbg !9960

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !9960
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9962
  %7 = load i32, i32* %new_rgn_number, align 4, !dbg !9963
  call void @sel_add_block_to_region(%struct.basic_block_def* %6, i32* %bb_ord_index, i32 %7), !dbg !9964
  br label %for.inc, !dbg !9965

for.inc:                                          ; preds = %cond.end5
  %8 = load i32, i32* %i, align 4, !dbg !9966
  %inc = add i32 %8, 1, !dbg !9966
  store i32 %inc, i32* %i, align 4, !dbg !9966
  br label %for.cond, !dbg !9967, !llvm.loop !9968

for.end:                                          ; preds = %cond.end
  %9 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %loop_blocks.addr, align 8, !dbg !9970
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %9), !dbg !9970
  %10 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %loop_blocks.addr, align 8, !dbg !9971
  %11 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %10, align 8, !dbg !9971
  %cmp7 = icmp eq %struct.VEC_basic_block_heap* %11, null, !dbg !9971
  br i1 %cmp7, label %cond.false9, label %cond.true8, !dbg !9971

cond.true8:                                       ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5836, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9971
  br label %cond.end10, !dbg !9971

cond.false9:                                      ; preds = %for.end
  br label %cond.end10, !dbg !9971

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !9971
  ret void, !dbg !9972
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @sel_create_new_region() #0 !dbg !9973 {
entry:
  %new_rgn_number = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32* %new_rgn_number, metadata !9974, metadata !DIExpression()), !dbg !9975
  %0 = load i32, i32* @nr_regions, align 4, !dbg !9976
  store i32 %0, i32* %new_rgn_number, align 4, !dbg !9975
  %1 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9977
  %2 = load i32, i32* %new_rgn_number, align 4, !dbg !9977
  %idxprom = sext i32 %2 to i64, !dbg !9977
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %1, i64 %idxprom, !dbg !9977
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !9977
  store i32 0, i32* %rgn_nr_blocks, align 4, !dbg !9978
  %3 = load i32, i32* %new_rgn_number, align 4, !dbg !9979
  %cmp = icmp ne i32 %3, 0, !dbg !9981
  br i1 %cmp, label %if.then, label %if.else, !dbg !9982

if.then:                                          ; preds = %entry
  %4 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9983
  %5 = load i32, i32* %new_rgn_number, align 4, !dbg !9983
  %sub = sub nsw i32 %5, 1, !dbg !9983
  %idxprom1 = sext i32 %sub to i64, !dbg !9983
  %arrayidx2 = getelementptr inbounds %struct.region, %struct.region* %4, i64 %idxprom1, !dbg !9983
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx2, i32 0, i32 1, !dbg !9983
  %6 = load i32, i32* %rgn_blocks, align 4, !dbg !9983
  %7 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9984
  %8 = load i32, i32* %new_rgn_number, align 4, !dbg !9984
  %sub3 = sub nsw i32 %8, 1, !dbg !9984
  %idxprom4 = sext i32 %sub3 to i64, !dbg !9984
  %arrayidx5 = getelementptr inbounds %struct.region, %struct.region* %7, i64 %idxprom4, !dbg !9984
  %rgn_nr_blocks6 = getelementptr inbounds %struct.region, %struct.region* %arrayidx5, i32 0, i32 0, !dbg !9984
  %9 = load i32, i32* %rgn_nr_blocks6, align 4, !dbg !9984
  %add = add nsw i32 %6, %9, !dbg !9985
  %10 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9986
  %11 = load i32, i32* %new_rgn_number, align 4, !dbg !9986
  %idxprom7 = sext i32 %11 to i64, !dbg !9986
  %arrayidx8 = getelementptr inbounds %struct.region, %struct.region* %10, i64 %idxprom7, !dbg !9986
  %rgn_blocks9 = getelementptr inbounds %struct.region, %struct.region* %arrayidx8, i32 0, i32 1, !dbg !9986
  store i32 %add, i32* %rgn_blocks9, align 4, !dbg !9987
  br label %if.end, !dbg !9986

if.else:                                          ; preds = %entry
  %12 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9988
  %13 = load i32, i32* %new_rgn_number, align 4, !dbg !9988
  %idxprom10 = sext i32 %13 to i64, !dbg !9988
  %arrayidx11 = getelementptr inbounds %struct.region, %struct.region* %12, i64 %idxprom10, !dbg !9988
  %rgn_blocks12 = getelementptr inbounds %struct.region, %struct.region* %arrayidx11, i32 0, i32 1, !dbg !9988
  store i32 0, i32* %rgn_blocks12, align 4, !dbg !9989
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %14 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9990
  %15 = load i32, i32* %new_rgn_number, align 4, !dbg !9990
  %idxprom13 = sext i32 %15 to i64, !dbg !9990
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %14, i64 %idxprom13, !dbg !9990
  %rgn_blocks15 = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 1, !dbg !9990
  %16 = load i32, i32* %rgn_blocks15, align 4, !dbg !9990
  %17 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9991
  %18 = load i32, i32* %new_rgn_number, align 4, !dbg !9991
  %idxprom16 = sext i32 %18 to i64, !dbg !9991
  %arrayidx17 = getelementptr inbounds %struct.region, %struct.region* %17, i64 %idxprom16, !dbg !9991
  %rgn_nr_blocks18 = getelementptr inbounds %struct.region, %struct.region* %arrayidx17, i32 0, i32 0, !dbg !9991
  %19 = load i32, i32* %rgn_nr_blocks18, align 4, !dbg !9991
  %add19 = add nsw i32 %16, %19, !dbg !9992
  %20 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !9993
  %21 = load i32, i32* %new_rgn_number, align 4, !dbg !9993
  %add20 = add nsw i32 %21, 1, !dbg !9993
  %idxprom21 = sext i32 %add20 to i64, !dbg !9993
  %arrayidx22 = getelementptr inbounds %struct.region, %struct.region* %20, i64 %idxprom21, !dbg !9993
  %rgn_blocks23 = getelementptr inbounds %struct.region, %struct.region* %arrayidx22, i32 0, i32 1, !dbg !9993
  store i32 %add19, i32* %rgn_blocks23, align 4, !dbg !9994
  %22 = load i32, i32* @nr_regions, align 4, !dbg !9995
  %inc = add nsw i32 %22, 1, !dbg !9995
  store i32 %inc, i32* @nr_regions, align 4, !dbg !9995
  %23 = load i32, i32* %new_rgn_number, align 4, !dbg !9996
  ret i32 %23, !dbg !9997
}

; Function Attrs: noinline nounwind uwtable
define internal void @sel_add_block_to_region(%struct.basic_block_def* %bb, i32* %bb_ord_index, i32 %rgn) #0 !dbg !9998 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %bb_ord_index.addr = alloca i32*, align 8
  %rgn.addr = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10001, metadata !DIExpression()), !dbg !10002
  store i32* %bb_ord_index, i32** %bb_ord_index.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bb_ord_index.addr, metadata !10003, metadata !DIExpression()), !dbg !10004
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !10005, metadata !DIExpression()), !dbg !10006
  %0 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10007
  %1 = load i32, i32* %rgn.addr, align 4, !dbg !10007
  %idxprom = sext i32 %1 to i64, !dbg !10007
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %0, i64 %idxprom, !dbg !10007
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !10007
  %2 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !10008
  %add = add nsw i32 %2, 1, !dbg !10008
  store i32 %add, i32* %rgn_nr_blocks, align 4, !dbg !10008
  %3 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10009
  %4 = load i32, i32* %rgn.addr, align 4, !dbg !10009
  %idxprom1 = sext i32 %4 to i64, !dbg !10009
  %arrayidx2 = getelementptr inbounds %struct.region, %struct.region* %3, i64 %idxprom1, !dbg !10009
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx2, i32 0, i32 2, !dbg !10009
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !10010
  %bf.clear = and i8 %bf.load, -2, !dbg !10010
  store i8 %bf.clear, i8* %dont_calc_deps, align 4, !dbg !10010
  %5 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10011
  %6 = load i32, i32* %rgn.addr, align 4, !dbg !10011
  %idxprom3 = sext i32 %6 to i64, !dbg !10011
  %arrayidx4 = getelementptr inbounds %struct.region, %struct.region* %5, i64 %idxprom3, !dbg !10011
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx4, i32 0, i32 2, !dbg !10011
  %bf.load5 = load i8, i8* %has_real_ebb, align 4, !dbg !10012
  %bf.clear6 = and i8 %bf.load5, -3, !dbg !10012
  store i8 %bf.clear6, i8* %has_real_ebb, align 4, !dbg !10012
  %7 = load i32, i32* %rgn.addr, align 4, !dbg !10013
  %8 = load i32*, i32** @containing_rgn, align 8, !dbg !10014
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10014
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !10014
  %10 = load i32, i32* %index, align 8, !dbg !10014
  %idxprom7 = sext i32 %10 to i64, !dbg !10014
  %arrayidx8 = getelementptr inbounds i32, i32* %8, i64 %idxprom7, !dbg !10014
  store i32 %7, i32* %arrayidx8, align 4, !dbg !10015
  %11 = load i32*, i32** %bb_ord_index.addr, align 8, !dbg !10016
  %12 = load i32, i32* %11, align 4, !dbg !10017
  %13 = load i32*, i32** @block_to_bb, align 8, !dbg !10018
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10018
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !10018
  %15 = load i32, i32* %index9, align 8, !dbg !10018
  %idxprom10 = sext i32 %15 to i64, !dbg !10018
  %arrayidx11 = getelementptr inbounds i32, i32* %13, i64 %idxprom10, !dbg !10018
  store i32 %12, i32* %arrayidx11, align 4, !dbg !10019
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10020
  %index12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 9, !dbg !10021
  %17 = load i32, i32* %index12, align 8, !dbg !10021
  %18 = load i32*, i32** @rgn_bb_table, align 8, !dbg !10022
  %19 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10023
  %20 = load i32, i32* %rgn.addr, align 4, !dbg !10023
  %idxprom13 = sext i32 %20 to i64, !dbg !10023
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %19, i64 %idxprom13, !dbg !10023
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 1, !dbg !10023
  %21 = load i32, i32* %rgn_blocks, align 4, !dbg !10023
  %22 = load i32*, i32** %bb_ord_index.addr, align 8, !dbg !10024
  %23 = load i32, i32* %22, align 4, !dbg !10025
  %add15 = add nsw i32 %21, %23, !dbg !10026
  %idxprom16 = sext i32 %add15 to i64, !dbg !10022
  %arrayidx17 = getelementptr inbounds i32, i32* %18, i64 %idxprom16, !dbg !10022
  store i32 %17, i32* %arrayidx17, align 4, !dbg !10027
  %24 = load i32*, i32** %bb_ord_index.addr, align 8, !dbg !10028
  %25 = load i32, i32* %24, align 4, !dbg !10029
  %inc = add nsw i32 %25, 1, !dbg !10029
  store i32 %inc, i32* %24, align 4, !dbg !10029
  %26 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10030
  %27 = load i32, i32* %rgn.addr, align 4, !dbg !10030
  %idxprom18 = sext i32 %27 to i64, !dbg !10030
  %arrayidx19 = getelementptr inbounds %struct.region, %struct.region* %26, i64 %idxprom18, !dbg !10030
  %rgn_blocks20 = getelementptr inbounds %struct.region, %struct.region* %arrayidx19, i32 0, i32 1, !dbg !10030
  %28 = load i32, i32* %rgn_blocks20, align 4, !dbg !10030
  %29 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10031
  %30 = load i32, i32* %rgn.addr, align 4, !dbg !10031
  %idxprom21 = sext i32 %30 to i64, !dbg !10031
  %arrayidx22 = getelementptr inbounds %struct.region, %struct.region* %29, i64 %idxprom21, !dbg !10031
  %rgn_nr_blocks23 = getelementptr inbounds %struct.region, %struct.region* %arrayidx22, i32 0, i32 0, !dbg !10031
  %31 = load i32, i32* %rgn_nr_blocks23, align 4, !dbg !10031
  %add24 = add nsw i32 %28, %31, !dbg !10032
  %32 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10033
  %33 = load i32, i32* %rgn.addr, align 4, !dbg !10033
  %add25 = add nsw i32 %33, 1, !dbg !10033
  %idxprom26 = sext i32 %add25 to i64, !dbg !10033
  %arrayidx27 = getelementptr inbounds %struct.region, %struct.region* %32, i64 %idxprom26, !dbg !10033
  %rgn_blocks28 = getelementptr inbounds %struct.region, %struct.region* %arrayidx27, i32 0, i32 1, !dbg !10033
  store i32 %add24, i32* %rgn_blocks28, align 4, !dbg !10034
  ret void, !dbg !10035
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_init_pipelining() #0 !dbg !10036 {
entry:
  call void @loop_optimizer_init(i32 141), !dbg !10037
  store %struct.loop* null, %struct.loop** @current_loop_nest, align 8, !dbg !10038
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10039
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10039
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10039
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10039
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !10039
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !10039
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !10040
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10041
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10042
  call void @sbitmap_zero(%struct.simple_bitmap_def* %3), !dbg !10043
  call void @recompute_rev_top_order(), !dbg !10044
  ret void, !dbg !10045
}

declare dso_local void @loop_optimizer_init(i32) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @recompute_rev_top_order() #0 !dbg !10046 {
entry:
  %postorder = alloca i32*, align 8
  %n_blocks = alloca i32, align 4
  %i = alloca i32, align 4
  call void @llvm.dbg.declare(metadata i32** %postorder, metadata !10047, metadata !DIExpression()), !dbg !10048
  call void @llvm.dbg.declare(metadata i32* %n_blocks, metadata !10049, metadata !DIExpression()), !dbg !10050
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10051, metadata !DIExpression()), !dbg !10052
  %0 = load i32*, i32** @rev_top_order_index, align 8, !dbg !10053
  %tobool = icmp ne i32* %0, null, !dbg !10053
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !10055

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* @rev_top_order_index_len, align 4, !dbg !10056
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10057
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !10057
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10057
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10057
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 5, !dbg !10057
  %4 = load i32, i32* %x_last_basic_block, align 8, !dbg !10057
  %cmp = icmp slt i32 %1, %4, !dbg !10058
  br i1 %cmp, label %if.then, label %if.end, !dbg !10059

if.then:                                          ; preds = %lor.lhs.false, %entry
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10060
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !10060
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !10060
  %6 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !10060
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %6, i32 0, i32 5, !dbg !10060
  %7 = load i32, i32* %x_last_basic_block3, align 8, !dbg !10060
  store i32 %7, i32* @rev_top_order_index_len, align 4, !dbg !10062
  %8 = load i32*, i32** @rev_top_order_index, align 8, !dbg !10063
  %9 = bitcast i32* %8 to i8*, !dbg !10063
  %10 = load i32, i32* @rev_top_order_index_len, align 4, !dbg !10063
  %conv = sext i32 %10 to i64, !dbg !10063
  %mul = mul i64 4, %conv, !dbg !10063
  %call = call i8* @xrealloc(i8* %9, i64 %mul), !dbg !10063
  %11 = bitcast i8* %call to i32*, !dbg !10063
  store i32* %11, i32** @rev_top_order_index, align 8, !dbg !10064
  br label %if.end, !dbg !10065

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10066
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !10066
  %cfg5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 1, !dbg !10066
  %13 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg5, align 8, !dbg !10066
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %13, i32 0, i32 3, !dbg !10066
  %14 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !10066
  %conv6 = sext i32 %14 to i64, !dbg !10066
  %mul7 = mul i64 4, %conv6, !dbg !10066
  %call8 = call i8* @xmalloc(i64 %mul7), !dbg !10066
  %15 = bitcast i8* %call8 to i32*, !dbg !10066
  store i32* %15, i32** %postorder, align 8, !dbg !10067
  %16 = load i32*, i32** %postorder, align 8, !dbg !10068
  %call9 = call i32 @post_order_compute(i32* %16, i8 zeroext 1, i8 zeroext 0), !dbg !10069
  store i32 %call9, i32* %n_blocks, align 4, !dbg !10070
  %17 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10071
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %17, i64 0, !dbg !10071
  %cfg11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 1, !dbg !10071
  %18 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg11, align 8, !dbg !10071
  %x_n_basic_blocks12 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %18, i32 0, i32 3, !dbg !10071
  %19 = load i32, i32* %x_n_basic_blocks12, align 8, !dbg !10071
  %20 = load i32, i32* %n_blocks, align 4, !dbg !10071
  %cmp13 = icmp eq i32 %19, %20, !dbg !10071
  br i1 %cmp13, label %cond.false, label %cond.true, !dbg !10071

cond.true:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4714, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10071
  br label %cond.end, !dbg !10071

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !10071

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10071
  store i32 0, i32* %i, align 4, !dbg !10072
  br label %for.cond, !dbg !10074

for.cond:                                         ; preds = %for.inc, %cond.end
  %21 = load i32, i32* %i, align 4, !dbg !10075
  %22 = load i32, i32* %n_blocks, align 4, !dbg !10077
  %cmp15 = icmp slt i32 %21, %22, !dbg !10078
  br i1 %cmp15, label %for.body, label %for.end, !dbg !10079

for.body:                                         ; preds = %for.cond
  %23 = load i32*, i32** %postorder, align 8, !dbg !10080
  %24 = load i32, i32* %i, align 4, !dbg !10080
  %idxprom = sext i32 %24 to i64, !dbg !10080
  %arrayidx = getelementptr inbounds i32, i32* %23, i64 %idxprom, !dbg !10080
  %25 = load i32, i32* %arrayidx, align 4, !dbg !10080
  %26 = load i32, i32* @rev_top_order_index_len, align 4, !dbg !10080
  %cmp17 = icmp slt i32 %25, %26, !dbg !10080
  br i1 %cmp17, label %cond.false20, label %cond.true19, !dbg !10080

cond.true19:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4720, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10080
  br label %cond.end21, !dbg !10080

cond.false20:                                     ; preds = %for.body
  br label %cond.end21, !dbg !10080

cond.end21:                                       ; preds = %cond.false20, %cond.true19
  %cond22 = phi i32 [ 0, %cond.true19 ], [ 0, %cond.false20 ], !dbg !10080
  %27 = load i32, i32* %i, align 4, !dbg !10082
  %28 = load i32*, i32** @rev_top_order_index, align 8, !dbg !10083
  %29 = load i32*, i32** %postorder, align 8, !dbg !10084
  %30 = load i32, i32* %i, align 4, !dbg !10085
  %idxprom23 = sext i32 %30 to i64, !dbg !10084
  %arrayidx24 = getelementptr inbounds i32, i32* %29, i64 %idxprom23, !dbg !10084
  %31 = load i32, i32* %arrayidx24, align 4, !dbg !10084
  %idxprom25 = sext i32 %31 to i64, !dbg !10083
  %arrayidx26 = getelementptr inbounds i32, i32* %28, i64 %idxprom25, !dbg !10083
  store i32 %27, i32* %arrayidx26, align 4, !dbg !10086
  br label %for.inc, !dbg !10087

for.inc:                                          ; preds = %cond.end21
  %32 = load i32, i32* %i, align 4, !dbg !10088
  %inc = add nsw i32 %32, 1, !dbg !10088
  store i32 %inc, i32* %i, align 4, !dbg !10088
  br label %for.cond, !dbg !10089, !llvm.loop !10090

for.end:                                          ; preds = %for.cond
  %33 = load i32*, i32** %postorder, align 8, !dbg !10092
  %34 = bitcast i32* %33 to i8*, !dbg !10092
  call void @free(i8* %34), !dbg !10093
  ret void, !dbg !10094
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @get_loop_nest_for_rgn(i32 %rgn) #0 !dbg !10095 {
entry:
  %retval = alloca %struct.loop*, align 8
  %rgn.addr = alloca i32, align 4
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !10098, metadata !DIExpression()), !dbg !10099
  %0 = load i32, i32* %rgn.addr, align 4, !dbg !10100
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10102
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !10102
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10102

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10102
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %2, i32 0, i32 0, !dbg !10102
  br label %cond.end, !dbg !10102

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10102

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10102
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !10102
  %cmp = icmp ult i32 %0, %call, !dbg !10103
  br i1 %cmp, label %if.then, label %if.else, !dbg !10104

if.then:                                          ; preds = %cond.end
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10105
  %tobool1 = icmp ne %struct.VEC_loop_p_heap* %3, null, !dbg !10105
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !10105

cond.true2:                                       ; preds = %if.then
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10105
  %base3 = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %4, i32 0, i32 0, !dbg !10105
  br label %cond.end5, !dbg !10105

cond.false4:                                      ; preds = %if.then
  br label %cond.end5, !dbg !10105

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_loop_p_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !10105
  %5 = load i32, i32* %rgn.addr, align 4, !dbg !10105
  %call7 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond6, i32 %5), !dbg !10105
  store %struct.loop* %call7, %struct.loop** %retval, align 8, !dbg !10106
  br label %return, !dbg !10106

if.else:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !10107
  br label %return, !dbg !10107

return:                                           ; preds = %if.else, %cond.end5
  %6 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !10108
  ret %struct.loop* %6, !dbg !10108
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !10109 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !10114, metadata !DIExpression()), !dbg !10115
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !10115
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !10115
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10115

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !10115
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !10115
  %2 = load i32, i32* %num, align 8, !dbg !10115
  br label %cond.end, !dbg !10115

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10115

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !10115
  ret i32 %cond, !dbg !10115
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !10116 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !10119, metadata !DIExpression()), !dbg !10120
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10121, metadata !DIExpression()), !dbg !10120
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !10120
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !10120
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10120

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !10120
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !10120
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !10120
  %3 = load i32, i32* %num, align 8, !dbg !10120
  %cmp = icmp ult i32 %1, %3, !dbg !10120
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !10122
  %land.ext = zext i1 %4 to i32, !dbg !10120
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !10120
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !10120
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !10120
  %idxprom = zext i32 %6 to i64, !dbg !10120
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !10120
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !10120
  ret %struct.loop* %7, !dbg !10120
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @considered_for_pipelining_p(%struct.loop* %loop) #0 !dbg !10123 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %rgn = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10126, metadata !DIExpression()), !dbg !10127
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10128
  %call = call i32 @loop_depth(%struct.loop* %0), !dbg !10130
  %cmp = icmp eq i32 %call, 0, !dbg !10131
  br i1 %cmp, label %if.then, label %if.end, !dbg !10132

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10133
  br label %return, !dbg !10133

if.end:                                           ; preds = %entry
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10134
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 10, !dbg !10134
  %2 = load i8*, i8** %aux, align 8, !dbg !10134
  %3 = ptrtoint i8* %2 to i64, !dbg !10134
  %tobool = icmp ne i64 %3, 0, !dbg !10134
  br i1 %tobool, label %if.then1, label %if.end9, !dbg !10136

if.then1:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !10137, metadata !DIExpression()), !dbg !10139
  %4 = load i32*, i32** @containing_rgn, align 8, !dbg !10140
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10140
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 3, !dbg !10140
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !10140
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 9, !dbg !10140
  %7 = load i32, i32* %index, align 8, !dbg !10140
  %idxprom = sext i32 %7 to i64, !dbg !10140
  %arrayidx = getelementptr inbounds i32, i32* %4, i64 %idxprom, !dbg !10140
  %8 = load i32, i32* %arrayidx, align 4, !dbg !10140
  store i32 %8, i32* %rgn, align 4, !dbg !10139
  %9 = load i32, i32* %rgn, align 4, !dbg !10141
  %10 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10141
  %tobool2 = icmp ne %struct.VEC_loop_p_heap* %10, null, !dbg !10141
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !10141

cond.true:                                        ; preds = %if.then1
  %11 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** @loop_nests, align 8, !dbg !10141
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %11, i32 0, i32 0, !dbg !10141
  br label %cond.end, !dbg !10141

cond.false:                                       ; preds = %if.then1
  br label %cond.end, !dbg !10141

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10141
  %call3 = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !10141
  %cmp4 = icmp ult i32 %9, %call3, !dbg !10141
  br i1 %cmp4, label %cond.false6, label %cond.true5, !dbg !10141

cond.true5:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5911, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10141
  br label %cond.end7, !dbg !10141

cond.false6:                                      ; preds = %cond.end
  br label %cond.end7, !dbg !10141

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !10141
  store i8 1, i8* %retval, align 1, !dbg !10142
  br label %return, !dbg !10142

if.end9:                                          ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !10143
  br label %return, !dbg !10143

return:                                           ; preds = %if.end9, %cond.end7, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !10144
  ret i8 %12, !dbg !10144
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !10145 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10150, metadata !DIExpression()), !dbg !10151
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10152
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !10152
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !10152
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !10152
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10152

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10152
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !10152
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !10152
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !10152
  br label %cond.end, !dbg !10152

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10152
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !10152
  ret i32 %call, !dbg !10153
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_finish_pipelining() #0 !dbg !10154 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !10155, metadata !DIExpression()), !dbg !10161
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !10162, metadata !DIExpression()), !dbg !10163
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !10164
  br label %for.cond, !dbg !10164

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !10166
  %tobool = icmp ne %struct.loop* %0, null, !dbg !10164
  br i1 %tobool, label %for.body, label %for.end, !dbg !10164

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !10168
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 10, !dbg !10169
  store i8* null, i8** %aux, align 8, !dbg !10170
  br label %for.inc, !dbg !10168

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !10166
  br label %for.cond, !dbg !10166, !llvm.loop !10171

for.end:                                          ; preds = %for.cond
  call void @loop_optimizer_finalize(), !dbg !10173
  call void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** @loop_nests), !dbg !10174
  %2 = load i32*, i32** @rev_top_order_index, align 8, !dbg !10175
  %3 = bitcast i32* %2 to i8*, !dbg !10175
  call void @free(i8* %3), !dbg !10176
  store i32* null, i32** @rev_top_order_index, align 8, !dbg !10177
  ret void, !dbg !10178
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !10179 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !10184, metadata !DIExpression()), !dbg !10185
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !10186, metadata !DIExpression()), !dbg !10187
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !10188, metadata !DIExpression()), !dbg !10189
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !10190, metadata !DIExpression()), !dbg !10191
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10192, metadata !DIExpression()), !dbg !10193
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !10194, metadata !DIExpression()), !dbg !10195
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10196
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !10197
  store i32 0, i32* %idx, align 8, !dbg !10198
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10199
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10199
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !10199
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10199
  %tobool = icmp ne %struct.loops* %2, null, !dbg !10199
  br i1 %tobool, label %if.end, label %if.then, !dbg !10201

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10202
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !10204
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !10205
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !10206
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !10207
  br label %return, !dbg !10208

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !10209
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !10209
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10210
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !10211
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !10212
  %6 = load i32, i32* %flags.addr, align 4, !dbg !10213
  %and = and i32 %6, 1, !dbg !10214
  %tobool3 = icmp ne i32 %and, 0, !dbg !10215
  %7 = zext i1 %tobool3 to i64, !dbg !10215
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !10215
  store i32 %cond, i32* %mn, align 4, !dbg !10216
  %8 = load i32, i32* %flags.addr, align 4, !dbg !10217
  %and4 = and i32 %8, 4, !dbg !10219
  %tobool5 = icmp ne i32 %and4, 0, !dbg !10219
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !10220

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !10221
  br label %for.cond, !dbg !10224

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10225
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !10225
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !10225
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !10225
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !10225
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !10225
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !10225
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !10225

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10225
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !10225
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !10225
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !10225
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !10225
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !10225
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !10225
  br label %cond.end, !dbg !10225

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !10225

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10225
  %15 = load i32, i32* %i, align 4, !dbg !10225
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !10225
  %tobool15 = icmp ne i32 %call14, 0, !dbg !10227
  br i1 %tobool15, label %for.body, label %for.end, !dbg !10227

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10228
  %cmp = icmp ne %struct.loop* %16, null, !dbg !10230
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !10231

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10232
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !10233
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !10233
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !10234
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !10235

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10236
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !10237
  %20 = load i32, i32* %num, align 8, !dbg !10237
  %21 = load i32, i32* %mn, align 4, !dbg !10238
  %cmp18 = icmp sge i32 %20, %21, !dbg !10239
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !10240

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10241
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !10241
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !10241
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !10241
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !10241

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10241
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !10241
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !10241
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !10241
  br label %cond.end26, !dbg !10241

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !10241

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !10241
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10241
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !10241
  %27 = load i32, i32* %num28, align 8, !dbg !10241
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !10241
  br label %if.end30, !dbg !10241

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !10238

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !10242
  %inc = add i32 %28, 1, !dbg !10242
  store i32 %inc, i32* %i, align 4, !dbg !10242
  br label %for.cond, !dbg !10243, !llvm.loop !10244

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !10246

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !10247
  %and31 = and i32 %29, 2, !dbg !10249
  %tobool32 = icmp ne i32 %and31, 0, !dbg !10249
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !10250

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10251
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !10251
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !10251
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !10251
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !10254
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !10254
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !10255
  br label %for.cond36, !dbg !10256

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10257
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !10259
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !10259
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !10260
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !10261

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !10262

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10263
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !10264
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !10264
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !10265
  br label %for.cond36, !dbg !10266, !llvm.loop !10267

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !10269

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10270
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !10273
  %38 = load i32, i32* %num43, align 8, !dbg !10273
  %39 = load i32, i32* %mn, align 4, !dbg !10274
  %cmp44 = icmp sge i32 %38, %39, !dbg !10275
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !10276

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10277
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !10277
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !10277
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !10277
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !10277

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10277
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !10277
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !10277
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !10277
  br label %cond.end52, !dbg !10277

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !10277

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !10277
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10277
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !10277
  %45 = load i32, i32* %num54, align 8, !dbg !10277
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !10277
  br label %if.end56, !dbg !10277

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10278
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !10280
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !10280
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !10278
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !10281

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10282
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !10285
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !10285
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !10286
  br label %for.cond60, !dbg !10287

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10288
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !10290
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !10290
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !10291
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !10292

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !10293

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10294
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !10295
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !10295
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !10296
  br label %for.cond60, !dbg !10297, !llvm.loop !10298

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !10300

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10301
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !10303
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !10303
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !10304

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !10305

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10306
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !10307
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !10308
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !10269, !llvm.loop !10309

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !10311

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10312
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !10312
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !10312
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !10312
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !10314
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !10314
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !10315
  br label %while.body79, !dbg !10316

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10317
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !10320
  %60 = load i32, i32* %num80, align 8, !dbg !10320
  %61 = load i32, i32* %mn, align 4, !dbg !10321
  %cmp81 = icmp sge i32 %60, %61, !dbg !10322
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !10323

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10324
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !10324
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !10324
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !10324
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !10324

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10324
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !10324
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !10324
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !10324
  br label %cond.end89, !dbg !10324

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !10324

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !10324
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10324
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !10324
  %67 = load i32, i32* %num91, align 8, !dbg !10324
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !10324
  br label %if.end93, !dbg !10324

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10325
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !10327
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !10327
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !10328
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !10329

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10330
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !10331
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !10331
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !10332
  br label %if.end110, !dbg !10333

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !10334

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10336
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !10337
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !10338

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10339
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !10340
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !10340
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !10341
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !10342
  br i1 %75, label %while.body103, label %while.end105, !dbg !10334

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10343
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !10344
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !10345
  br label %while.cond99, !dbg !10334, !llvm.loop !10346

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10348
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !10350
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !10351

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !10352

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !10353
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !10354
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !10354
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !10355
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !10316, !llvm.loop !10356

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10358
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !10359
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !10360
  br label %return, !dbg !10361

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !10361
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !10362 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !10365, metadata !DIExpression()), !dbg !10366
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !10367, metadata !DIExpression()), !dbg !10368
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !10369, metadata !DIExpression()), !dbg !10370
  br label %while.cond, !dbg !10371

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10372
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !10372
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !10372
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !10372
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10372

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10372
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !10372
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !10372
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !10372
  br label %cond.end, !dbg !10372

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !10372

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10372
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10372
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !10372
  %5 = load i32, i32* %idx, align 8, !dbg !10372
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !10372
  %tobool2 = icmp ne i32 %call, 0, !dbg !10371
  br i1 %tobool2, label %while.body, label %while.end, !dbg !10371

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10373
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !10375
  %7 = load i32, i32* %idx3, align 8, !dbg !10376
  %inc = add i32 %7, 1, !dbg !10376
  store i32 %inc, i32* %idx3, align 8, !dbg !10376
  %8 = load i32, i32* %anum, align 4, !dbg !10377
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !10378
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !10379
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !10380
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !10381
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !10383
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !10383
  br i1 %tobool5, label %if.then, label %if.end, !dbg !10384

if.then:                                          ; preds = %while.body
  br label %return, !dbg !10385

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !10371, !llvm.loop !10386

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !10388
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !10388
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !10388
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !10389
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !10390
  br label %return, !dbg !10391

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !10391
}

declare dso_local void @loop_optimizer_finalize() #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_loop_p_heap_free(%struct.VEC_loop_p_heap** %vec_) #0 !dbg !10392 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !10396, metadata !DIExpression()), !dbg !10397
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !10398
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !10398
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !10398
  br i1 %tobool, label %if.then, label %if.end, !dbg !10397

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !10398
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !10398
  %4 = bitcast %struct.VEC_loop_p_heap* %3 to i8*, !dbg !10398
  call void @free(i8* %4), !dbg !10398
  br label %if.end, !dbg !10398

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !10397
  store %struct.VEC_loop_p_heap* null, %struct.VEC_loop_p_heap** %5, align 8, !dbg !10397
  ret void, !dbg !10397
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_find_rgns() #0 !dbg !10400 {
entry:
  %loop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  call void @sel_init_pipelining(), !dbg !10401
  call void @extend_regions(), !dbg !10402
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10403
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !10403
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !10403
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10403
  %tobool = icmp ne %struct.loops* %1, null, !dbg !10403
  br i1 %tobool, label %if.then, label %if.end, !dbg !10405

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !10406, metadata !DIExpression()), !dbg !10408
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !10409, metadata !DIExpression()), !dbg !10410
  %2 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !10411
  %tobool1 = icmp ne i32 %2, 0, !dbg !10411
  %3 = zext i1 %tobool1 to i64, !dbg !10411
  %cond = select i1 %tobool1, i32 2, i32 4, !dbg !10411
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %cond), !dbg !10411
  br label %for.cond, !dbg !10411

for.cond:                                         ; preds = %for.inc, %if.then
  %4 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !10413
  %tobool2 = icmp ne %struct.loop* %4, null, !dbg !10411
  br i1 %tobool2, label %for.body, label %for.end, !dbg !10411

for.body:                                         ; preds = %for.cond
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !10415
  %call = call zeroext i8 @make_regions_from_loop_nest(%struct.loop* %5), !dbg !10416
  br label %for.inc, !dbg !10416

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !10413
  br label %for.cond, !dbg !10413, !llvm.loop !10417

for.end:                                          ; preds = %for.cond
  br label %if.end, !dbg !10419

if.end:                                           ; preds = %for.end, %entry
  call void @make_regions_from_the_rest(), !dbg !10420
  %6 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10421
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %6, i32 0, i32 0, !dbg !10421
  %7 = load i8*, i8** %popcount, align 8, !dbg !10421
  call void @free(i8* %7), !dbg !10421
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10421
  %9 = bitcast %struct.simple_bitmap_def* %8 to i8*, !dbg !10421
  call void @free(i8* %9), !dbg !10421
  store %struct.simple_bitmap_def* null, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10422
  ret void, !dbg !10423
}

declare dso_local void @extend_regions() #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @make_regions_from_loop_nest(%struct.loop* %loop) #0 !dbg !10424 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %cur_loop = alloca %struct.loop*, align 8
  %rgn_number = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10425, metadata !DIExpression()), !dbg !10426
  call void @llvm.dbg.declare(metadata %struct.loop** %cur_loop, metadata !10427, metadata !DIExpression()), !dbg !10428
  call void @llvm.dbg.declare(metadata i32* %rgn_number, metadata !10429, metadata !DIExpression()), !dbg !10430
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10431
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !10433
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !10433
  store %struct.loop* %1, %struct.loop** %cur_loop, align 8, !dbg !10434
  br label %for.cond, !dbg !10435

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.loop*, %struct.loop** %cur_loop, align 8, !dbg !10436
  %tobool = icmp ne %struct.loop* %2, null, !dbg !10438
  br i1 %tobool, label %for.body, label %for.end, !dbg !10438

for.body:                                         ; preds = %for.cond
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10439
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %3, i32 0, i32 3, !dbg !10439
  %4 = load %struct.loop*, %struct.loop** %cur_loop, align 8, !dbg !10439
  %header = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 2, !dbg !10439
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !10439
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 9, !dbg !10439
  %6 = load i32, i32* %index, align 8, !dbg !10439
  %div = udiv i32 %6, 64, !dbg !10439
  %idxprom = zext i32 %div to i64, !dbg !10439
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !10439
  %7 = load i64, i64* %arrayidx, align 8, !dbg !10439
  %8 = load %struct.loop*, %struct.loop** %cur_loop, align 8, !dbg !10439
  %header1 = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 2, !dbg !10439
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %header1, align 8, !dbg !10439
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !10439
  %10 = load i32, i32* %index2, align 8, !dbg !10439
  %rem = urem i32 %10, 64, !dbg !10439
  %sh_prom = zext i32 %rem to i64, !dbg !10439
  %shr = lshr i64 %7, %sh_prom, !dbg !10439
  %and = and i64 %shr, 1, !dbg !10439
  %tobool3 = icmp ne i64 %and, 0, !dbg !10439
  br i1 %tobool3, label %if.end, label %if.then, !dbg !10441

if.then:                                          ; preds = %for.body
  store i8 0, i8* %retval, align 1, !dbg !10442
  br label %return, !dbg !10442

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !10439

for.inc:                                          ; preds = %if.end
  %11 = load %struct.loop*, %struct.loop** %cur_loop, align 8, !dbg !10443
  %next = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 9, !dbg !10444
  %12 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !10444
  store %struct.loop* %12, %struct.loop** %cur_loop, align 8, !dbg !10445
  br label %for.cond, !dbg !10446, !llvm.loop !10447

for.end:                                          ; preds = %for.cond
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10449
  %call = call i32 @make_region_from_loop(%struct.loop* %13), !dbg !10450
  store i32 %call, i32* %rgn_number, align 4, !dbg !10451
  %14 = load i32, i32* %rgn_number, align 4, !dbg !10452
  %cmp = icmp slt i32 %14, 0, !dbg !10454
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !10455

if.then4:                                         ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !10456
  br label %return, !dbg !10456

if.end5:                                          ; preds = %for.end
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10457
  %call6 = call %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** @loop_nests, %struct.loop* %15), !dbg !10457
  store i8 1, i8* %retval, align 1, !dbg !10458
  br label %return, !dbg !10458

return:                                           ; preds = %if.end5, %if.then4, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !10459
  ret i8 %16, !dbg !10459
}

; Function Attrs: noinline nounwind uwtable
define internal void @make_regions_from_the_rest() #0 !dbg !10460 {
entry:
  %cur_rgn_blocks = alloca i32, align 4
  %loop_hdr = alloca i32*, align 8
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %degree = alloca i32*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  call void @llvm.dbg.declare(metadata i32* %cur_rgn_blocks, metadata !10461, metadata !DIExpression()), !dbg !10462
  call void @llvm.dbg.declare(metadata i32** %loop_hdr, metadata !10463, metadata !DIExpression()), !dbg !10464
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10465, metadata !DIExpression()), !dbg !10466
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10467, metadata !DIExpression()), !dbg !10468
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10469, metadata !DIExpression()), !dbg !10470
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !10471, metadata !DIExpression()), !dbg !10472
  call void @llvm.dbg.declare(metadata i32** %degree, metadata !10473, metadata !DIExpression()), !dbg !10474
  %0 = load i32, i32* @nr_regions, align 4, !dbg !10475
  %tobool = icmp ne i32 %0, 0, !dbg !10475
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10475

cond.true:                                        ; preds = %entry
  %1 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10476
  %2 = load i32, i32* @nr_regions, align 4, !dbg !10476
  %idxprom = sext i32 %2 to i64, !dbg !10476
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %1, i64 %idxprom, !dbg !10476
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 1, !dbg !10476
  %3 = load i32, i32* %rgn_blocks, align 4, !dbg !10476
  br label %cond.end, !dbg !10475

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10475

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %3, %cond.true ], [ 0, %cond.false ], !dbg !10475
  store i32 %cond, i32* %cur_rgn_blocks, align 4, !dbg !10477
  %4 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10478
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %4, i64 0, !dbg !10478
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10478
  %5 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10478
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %5, i32 0, i32 5, !dbg !10478
  %6 = load i32, i32* %x_last_basic_block, align 8, !dbg !10478
  %conv = sext i32 %6 to i64, !dbg !10478
  %mul = mul i64 4, %conv, !dbg !10478
  %call = call i8* @xmalloc(i64 %mul), !dbg !10478
  %7 = bitcast i8* %call to i32*, !dbg !10478
  store i32* %7, i32** %loop_hdr, align 8, !dbg !10479
  %8 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10480
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %8, i64 0, !dbg !10480
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !10480
  %9 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !10480
  %x_last_basic_block3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %9, i32 0, i32 5, !dbg !10480
  %10 = load i32, i32* %x_last_basic_block3, align 8, !dbg !10480
  %conv4 = sext i32 %10 to i64, !dbg !10480
  %call5 = call i8* @xcalloc(i64 %conv4, i64 4), !dbg !10480
  %11 = bitcast i8* %call5 to i32*, !dbg !10480
  store i32* %11, i32** %degree, align 8, !dbg !10481
  store i32 0, i32* %i, align 4, !dbg !10482
  br label %for.cond, !dbg !10484

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = load i32, i32* %i, align 4, !dbg !10485
  %13 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10487
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %13, i64 0, !dbg !10487
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !10487
  %14 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !10487
  %x_last_basic_block8 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %14, i32 0, i32 5, !dbg !10487
  %15 = load i32, i32* %x_last_basic_block8, align 8, !dbg !10487
  %cmp = icmp slt i32 %12, %15, !dbg !10488
  br i1 %cmp, label %for.body, label %for.end, !dbg !10489

for.body:                                         ; preds = %for.cond
  %16 = load i32*, i32** %loop_hdr, align 8, !dbg !10490
  %17 = load i32, i32* %i, align 4, !dbg !10491
  %idxprom10 = sext i32 %17 to i64, !dbg !10490
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i64 %idxprom10, !dbg !10490
  store i32 -1, i32* %arrayidx11, align 4, !dbg !10492
  br label %for.inc, !dbg !10490

for.inc:                                          ; preds = %for.body
  %18 = load i32, i32* %i, align 4, !dbg !10493
  %inc = add nsw i32 %18, 1, !dbg !10493
  store i32 %inc, i32* %i, align 4, !dbg !10493
  br label %for.cond, !dbg !10494, !llvm.loop !10495

for.end:                                          ; preds = %for.cond
  %19 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10497
  %add.ptr12 = getelementptr inbounds %struct.function, %struct.function* %19, i64 0, !dbg !10497
  %cfg13 = getelementptr inbounds %struct.function, %struct.function* %add.ptr12, i32 0, i32 1, !dbg !10497
  %20 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg13, align 8, !dbg !10497
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %20, i32 0, i32 0, !dbg !10497
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !10497
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 6, !dbg !10497
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !10497
  store %struct.basic_block_def* %22, %struct.basic_block_def** %bb, align 8, !dbg !10497
  br label %for.cond14, !dbg !10497

for.cond14:                                       ; preds = %for.inc31, %for.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10499
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10499
  %add.ptr15 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !10499
  %cfg16 = getelementptr inbounds %struct.function, %struct.function* %add.ptr15, i32 0, i32 1, !dbg !10499
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg16, align 8, !dbg !10499
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 1, !dbg !10499
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10499
  %cmp17 = icmp ne %struct.basic_block_def* %23, %26, !dbg !10499
  br i1 %cmp17, label %for.body19, label %for.end33, !dbg !10497

for.body19:                                       ; preds = %for.cond14
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10501
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 3, !dbg !10504
  %28 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10504
  %tobool20 = icmp ne %struct.loop* %28, null, !dbg !10501
  br i1 %tobool20, label %land.lhs.true, label %if.end, !dbg !10505

land.lhs.true:                                    ; preds = %for.body19
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10506
  %loop_father21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 3, !dbg !10507
  %30 = load %struct.loop*, %struct.loop** %loop_father21, align 8, !dbg !10507
  %num = getelementptr inbounds %struct.loop, %struct.loop* %30, i32 0, i32 0, !dbg !10508
  %31 = load i32, i32* %num, align 8, !dbg !10508
  %tobool22 = icmp ne i32 %31, 0, !dbg !10509
  %lnot = xor i1 %tobool22, true, !dbg !10509
  %lnot.ext = zext i1 %lnot to i32, !dbg !10509
  %cmp23 = icmp eq i32 %lnot.ext, 0, !dbg !10510
  br i1 %cmp23, label %land.lhs.true25, label %if.end, !dbg !10511

land.lhs.true25:                                  ; preds = %land.lhs.true
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10512
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 13, !dbg !10513
  %33 = load i32, i32* %flags, align 8, !dbg !10513
  %and = and i32 %33, 4, !dbg !10514
  %tobool26 = icmp ne i32 %and, 0, !dbg !10514
  br i1 %tobool26, label %if.end, label %if.then, !dbg !10515

if.then:                                          ; preds = %land.lhs.true25
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10516
  %loop_father27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %34, i32 0, i32 3, !dbg !10517
  %35 = load %struct.loop*, %struct.loop** %loop_father27, align 8, !dbg !10517
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 0, !dbg !10518
  %36 = load i32, i32* %num28, align 8, !dbg !10518
  %37 = load i32*, i32** %loop_hdr, align 8, !dbg !10519
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10520
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 9, !dbg !10521
  %39 = load i32, i32* %index, align 8, !dbg !10521
  %idxprom29 = sext i32 %39 to i64, !dbg !10519
  %arrayidx30 = getelementptr inbounds i32, i32* %37, i64 %idxprom29, !dbg !10519
  store i32 %36, i32* %arrayidx30, align 4, !dbg !10522
  br label %if.end, !dbg !10519

if.end:                                           ; preds = %if.then, %land.lhs.true25, %land.lhs.true, %for.body19
  br label %for.inc31, !dbg !10523

for.inc31:                                        ; preds = %if.end
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10499
  %next_bb32 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 6, !dbg !10499
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb32, align 8, !dbg !10499
  store %struct.basic_block_def* %41, %struct.basic_block_def** %bb, align 8, !dbg !10499
  br label %for.cond14, !dbg !10499, !llvm.loop !10524

for.end33:                                        ; preds = %for.cond14
  %42 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10526
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %42, i64 0, !dbg !10526
  %cfg35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 1, !dbg !10526
  %43 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg35, align 8, !dbg !10526
  %x_entry_block_ptr36 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %43, i32 0, i32 0, !dbg !10526
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr36, align 8, !dbg !10526
  %next_bb37 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %44, i32 0, i32 6, !dbg !10526
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb37, align 8, !dbg !10526
  store %struct.basic_block_def* %45, %struct.basic_block_def** %bb, align 8, !dbg !10526
  br label %for.cond38, !dbg !10526

for.cond38:                                       ; preds = %for.inc84, %for.end33
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10528
  %47 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10528
  %add.ptr39 = getelementptr inbounds %struct.function, %struct.function* %47, i64 0, !dbg !10528
  %cfg40 = getelementptr inbounds %struct.function, %struct.function* %add.ptr39, i32 0, i32 1, !dbg !10528
  %48 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg40, align 8, !dbg !10528
  %x_exit_block_ptr41 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %48, i32 0, i32 1, !dbg !10528
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr41, align 8, !dbg !10528
  %cmp42 = icmp ne %struct.basic_block_def* %46, %49, !dbg !10528
  br i1 %cmp42, label %for.body44, label %for.end86, !dbg !10526

for.body44:                                       ; preds = %for.cond38
  %50 = load i32*, i32** %degree, align 8, !dbg !10530
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10532
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 9, !dbg !10533
  %52 = load i32, i32* %index45, align 8, !dbg !10533
  %idxprom46 = sext i32 %52 to i64, !dbg !10530
  %arrayidx47 = getelementptr inbounds i32, i32* %50, i64 %idxprom46, !dbg !10530
  store i32 0, i32* %arrayidx47, align 4, !dbg !10534
  %53 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10535
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %53, i32 0, i32 3, !dbg !10535
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10535
  %index48 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !10535
  %55 = load i32, i32* %index48, align 8, !dbg !10535
  %div = udiv i32 %55, 64, !dbg !10535
  %idxprom49 = zext i32 %div to i64, !dbg !10535
  %arrayidx50 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom49, !dbg !10535
  %56 = load i64, i64* %arrayidx50, align 8, !dbg !10535
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10535
  %index51 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %57, i32 0, i32 9, !dbg !10535
  %58 = load i32, i32* %index51, align 8, !dbg !10535
  %rem = urem i32 %58, 64, !dbg !10535
  %sh_prom = zext i32 %rem to i64, !dbg !10535
  %shr = lshr i64 %56, %sh_prom, !dbg !10535
  %and52 = and i64 %shr, 1, !dbg !10535
  %tobool53 = icmp ne i64 %and52, 0, !dbg !10535
  br i1 %tobool53, label %if.else, label %if.then54, !dbg !10537

if.then54:                                        ; preds = %for.body44
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10538
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 0, !dbg !10538
  %call55 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !10538
  %60 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !10538
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 0, !dbg !10538
  %62 = extractvalue { i32, %struct.VEC_edge_gc** } %call55, 0, !dbg !10538
  store i32 %62, i32* %61, align 8, !dbg !10538
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 1, !dbg !10538
  %64 = extractvalue { i32, %struct.VEC_edge_gc** } %call55, 1, !dbg !10538
  store %struct.VEC_edge_gc** %64, %struct.VEC_edge_gc*** %63, align 8, !dbg !10538
  %65 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !10538
  %66 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !10538
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false), !dbg !10538
  br label %for.cond56, !dbg !10538

for.cond56:                                       ; preds = %for.inc78, %if.then54
  %67 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !10541
  %68 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 0, !dbg !10541
  %69 = load i32, i32* %68, align 8, !dbg !10541
  %70 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 1, !dbg !10541
  %71 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %70, align 8, !dbg !10541
  %call57 = call zeroext i8 @ei_cond(i32 %69, %struct.VEC_edge_gc** %71, %struct.edge_def** %e), !dbg !10541
  %tobool58 = icmp ne i8 %call57, 0, !dbg !10538
  br i1 %tobool58, label %for.body59, label %for.end79, !dbg !10538

for.body59:                                       ; preds = %for.cond56
  %72 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10543
  %elms60 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %72, i32 0, i32 3, !dbg !10543
  %73 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10543
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 0, !dbg !10543
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !10543
  %index61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 9, !dbg !10543
  %75 = load i32, i32* %index61, align 8, !dbg !10543
  %div62 = udiv i32 %75, 64, !dbg !10543
  %idxprom63 = zext i32 %div62 to i64, !dbg !10543
  %arrayidx64 = getelementptr inbounds [1 x i64], [1 x i64]* %elms60, i64 0, i64 %idxprom63, !dbg !10543
  %76 = load i64, i64* %arrayidx64, align 8, !dbg !10543
  %77 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10543
  %src65 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 0, !dbg !10543
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %src65, align 8, !dbg !10543
  %index66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 9, !dbg !10543
  %79 = load i32, i32* %index66, align 8, !dbg !10543
  %rem67 = urem i32 %79, 64, !dbg !10543
  %sh_prom68 = zext i32 %rem67 to i64, !dbg !10543
  %shr69 = lshr i64 %76, %sh_prom68, !dbg !10543
  %and70 = and i64 %shr69, 1, !dbg !10543
  %tobool71 = icmp ne i64 %and70, 0, !dbg !10543
  br i1 %tobool71, label %if.end77, label %if.then72, !dbg !10545

if.then72:                                        ; preds = %for.body59
  %80 = load i32*, i32** %degree, align 8, !dbg !10546
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10547
  %index73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %81, i32 0, i32 9, !dbg !10548
  %82 = load i32, i32* %index73, align 8, !dbg !10548
  %idxprom74 = sext i32 %82 to i64, !dbg !10546
  %arrayidx75 = getelementptr inbounds i32, i32* %80, i64 %idxprom74, !dbg !10546
  %83 = load i32, i32* %arrayidx75, align 4, !dbg !10549
  %inc76 = add nsw i32 %83, 1, !dbg !10549
  store i32 %inc76, i32* %arrayidx75, align 4, !dbg !10549
  br label %if.end77, !dbg !10546

if.end77:                                         ; preds = %if.then72, %for.body59
  br label %for.inc78, !dbg !10543

for.inc78:                                        ; preds = %if.end77
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !10541
  br label %for.cond56, !dbg !10541, !llvm.loop !10550

for.end79:                                        ; preds = %for.cond56
  br label %if.end83, !dbg !10552

if.else:                                          ; preds = %for.body44
  %84 = load i32*, i32** %degree, align 8, !dbg !10553
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10554
  %index80 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 9, !dbg !10555
  %86 = load i32, i32* %index80, align 8, !dbg !10555
  %idxprom81 = sext i32 %86 to i64, !dbg !10553
  %arrayidx82 = getelementptr inbounds i32, i32* %84, i64 %idxprom81, !dbg !10553
  store i32 -1, i32* %arrayidx82, align 4, !dbg !10556
  br label %if.end83

if.end83:                                         ; preds = %if.else, %for.end79
  br label %for.inc84, !dbg !10557

for.inc84:                                        ; preds = %if.end83
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10528
  %next_bb85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 6, !dbg !10528
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb85, align 8, !dbg !10528
  store %struct.basic_block_def* %88, %struct.basic_block_def** %bb, align 8, !dbg !10528
  br label %for.cond38, !dbg !10528, !llvm.loop !10558

for.end86:                                        ; preds = %for.cond38
  %89 = load i32*, i32** %degree, align 8, !dbg !10560
  %90 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !10561
  %91 = load i32*, i32** %loop_hdr, align 8, !dbg !10562
  call void @extend_rgns(i32* %89, i32* %cur_rgn_blocks, %struct.simple_bitmap_def* %90, i32* %91), !dbg !10563
  %92 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10564
  %add.ptr87 = getelementptr inbounds %struct.function, %struct.function* %92, i64 0, !dbg !10564
  %cfg88 = getelementptr inbounds %struct.function, %struct.function* %add.ptr87, i32 0, i32 1, !dbg !10564
  %93 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg88, align 8, !dbg !10564
  %x_entry_block_ptr89 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %93, i32 0, i32 0, !dbg !10564
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr89, align 8, !dbg !10564
  %next_bb90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 6, !dbg !10564
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb90, align 8, !dbg !10564
  store %struct.basic_block_def* %95, %struct.basic_block_def** %bb, align 8, !dbg !10564
  br label %for.cond91, !dbg !10564

for.cond91:                                       ; preds = %for.inc127, %for.end86
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10566
  %97 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10566
  %add.ptr92 = getelementptr inbounds %struct.function, %struct.function* %97, i64 0, !dbg !10566
  %cfg93 = getelementptr inbounds %struct.function, %struct.function* %add.ptr92, i32 0, i32 1, !dbg !10566
  %98 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg93, align 8, !dbg !10566
  %x_exit_block_ptr94 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %98, i32 0, i32 1, !dbg !10566
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr94, align 8, !dbg !10566
  %cmp95 = icmp ne %struct.basic_block_def* %96, %99, !dbg !10566
  br i1 %cmp95, label %for.body97, label %for.end129, !dbg !10564

for.body97:                                       ; preds = %for.cond91
  %100 = load i32*, i32** %degree, align 8, !dbg !10568
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10570
  %index98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 9, !dbg !10571
  %102 = load i32, i32* %index98, align 8, !dbg !10571
  %idxprom99 = sext i32 %102 to i64, !dbg !10568
  %arrayidx100 = getelementptr inbounds i32, i32* %100, i64 %idxprom99, !dbg !10568
  %103 = load i32, i32* %arrayidx100, align 4, !dbg !10568
  %cmp101 = icmp sge i32 %103, 0, !dbg !10572
  br i1 %cmp101, label %if.then103, label %if.end126, !dbg !10573

if.then103:                                       ; preds = %for.body97
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10574
  %index104 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 9, !dbg !10576
  %105 = load i32, i32* %index104, align 8, !dbg !10576
  %106 = load i32*, i32** @rgn_bb_table, align 8, !dbg !10577
  %107 = load i32, i32* %cur_rgn_blocks, align 4, !dbg !10578
  %idxprom105 = sext i32 %107 to i64, !dbg !10577
  %arrayidx106 = getelementptr inbounds i32, i32* %106, i64 %idxprom105, !dbg !10577
  store i32 %105, i32* %arrayidx106, align 4, !dbg !10579
  %108 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10580
  %109 = load i32, i32* @nr_regions, align 4, !dbg !10580
  %idxprom107 = sext i32 %109 to i64, !dbg !10580
  %arrayidx108 = getelementptr inbounds %struct.region, %struct.region* %108, i64 %idxprom107, !dbg !10580
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx108, i32 0, i32 0, !dbg !10580
  store i32 1, i32* %rgn_nr_blocks, align 4, !dbg !10581
  %110 = load i32, i32* %cur_rgn_blocks, align 4, !dbg !10582
  %inc109 = add nsw i32 %110, 1, !dbg !10582
  store i32 %inc109, i32* %cur_rgn_blocks, align 4, !dbg !10582
  %111 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10583
  %112 = load i32, i32* @nr_regions, align 4, !dbg !10583
  %idxprom110 = sext i32 %112 to i64, !dbg !10583
  %arrayidx111 = getelementptr inbounds %struct.region, %struct.region* %111, i64 %idxprom110, !dbg !10583
  %rgn_blocks112 = getelementptr inbounds %struct.region, %struct.region* %arrayidx111, i32 0, i32 1, !dbg !10583
  store i32 %110, i32* %rgn_blocks112, align 4, !dbg !10584
  %113 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10585
  %114 = load i32, i32* @nr_regions, align 4, !dbg !10585
  %idxprom113 = sext i32 %114 to i64, !dbg !10585
  %arrayidx114 = getelementptr inbounds %struct.region, %struct.region* %113, i64 %idxprom113, !dbg !10585
  %dont_calc_deps = getelementptr inbounds %struct.region, %struct.region* %arrayidx114, i32 0, i32 2, !dbg !10585
  %bf.load = load i8, i8* %dont_calc_deps, align 4, !dbg !10586
  %bf.clear = and i8 %bf.load, -2, !dbg !10586
  store i8 %bf.clear, i8* %dont_calc_deps, align 4, !dbg !10586
  %115 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !10587
  %116 = load i32, i32* @nr_regions, align 4, !dbg !10587
  %idxprom115 = sext i32 %116 to i64, !dbg !10587
  %arrayidx116 = getelementptr inbounds %struct.region, %struct.region* %115, i64 %idxprom115, !dbg !10587
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx116, i32 0, i32 2, !dbg !10587
  %bf.load117 = load i8, i8* %has_real_ebb, align 4, !dbg !10588
  %bf.clear118 = and i8 %bf.load117, -3, !dbg !10588
  store i8 %bf.clear118, i8* %has_real_ebb, align 4, !dbg !10588
  %117 = load i32, i32* @nr_regions, align 4, !dbg !10589
  %inc119 = add nsw i32 %117, 1, !dbg !10589
  store i32 %inc119, i32* @nr_regions, align 4, !dbg !10589
  %118 = load i32*, i32** @containing_rgn, align 8, !dbg !10590
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10590
  %index120 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %119, i32 0, i32 9, !dbg !10590
  %120 = load i32, i32* %index120, align 8, !dbg !10590
  %idxprom121 = sext i32 %120 to i64, !dbg !10590
  %arrayidx122 = getelementptr inbounds i32, i32* %118, i64 %idxprom121, !dbg !10590
  store i32 %117, i32* %arrayidx122, align 4, !dbg !10591
  %121 = load i32*, i32** @block_to_bb, align 8, !dbg !10592
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10592
  %index123 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %122, i32 0, i32 9, !dbg !10592
  %123 = load i32, i32* %index123, align 8, !dbg !10592
  %idxprom124 = sext i32 %123 to i64, !dbg !10592
  %arrayidx125 = getelementptr inbounds i32, i32* %121, i64 %idxprom124, !dbg !10592
  store i32 0, i32* %arrayidx125, align 4, !dbg !10593
  br label %if.end126, !dbg !10594

if.end126:                                        ; preds = %if.then103, %for.body97
  br label %for.inc127, !dbg !10595

for.inc127:                                       ; preds = %if.end126
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10566
  %next_bb128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %124, i32 0, i32 6, !dbg !10566
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb128, align 8, !dbg !10566
  store %struct.basic_block_def* %125, %struct.basic_block_def** %bb, align 8, !dbg !10566
  br label %for.cond91, !dbg !10566, !llvm.loop !10596

for.end129:                                       ; preds = %for.cond91
  %126 = load i32*, i32** %degree, align 8, !dbg !10598
  %127 = bitcast i32* %126 to i8*, !dbg !10598
  call void @free(i8* %127), !dbg !10599
  %128 = load i32*, i32** %loop_hdr, align 8, !dbg !10600
  %129 = bitcast i32* %128 to i8*, !dbg !10600
  call void @free(i8* %129), !dbg !10601
  ret void, !dbg !10602
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @sel_add_loop_preheaders() #0 !dbg !10603 {
entry:
  %i = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %preheader_blocks = alloca %struct.VEC_basic_block_heap*, align 8
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10604, metadata !DIExpression()), !dbg !10605
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10606, metadata !DIExpression()), !dbg !10607
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %preheader_blocks, metadata !10608, metadata !DIExpression()), !dbg !10609
  %0 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10610
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 10, !dbg !10610
  %1 = load i8*, i8** %aux, align 8, !dbg !10610
  %2 = ptrtoint i8* %1 to i64, !dbg !10610
  %cmp = icmp eq i64 %2, 1, !dbg !10610
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !10610

cond.true:                                        ; preds = %entry
  br label %cond.end, !dbg !10610

cond.false:                                       ; preds = %entry
  %3 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10610
  %aux1 = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 10, !dbg !10610
  %4 = load i8*, i8** %aux1, align 8, !dbg !10610
  %5 = bitcast i8* %4 to %struct.VEC_basic_block_heap*, !dbg !10610
  br label %cond.end, !dbg !10610

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_heap* [ null, %cond.true ], [ %5, %cond.false ], !dbg !10610
  store %struct.VEC_basic_block_heap* %cond, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !10609
  store i32 0, i32* %i, align 4, !dbg !10611
  br label %for.cond, !dbg !10613

for.cond:                                         ; preds = %for.inc, %cond.end
  %6 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !10614
  %tobool = icmp ne %struct.VEC_basic_block_heap* %6, null, !dbg !10614
  br i1 %tobool, label %cond.true2, label %cond.false3, !dbg !10614

cond.true2:                                       ; preds = %for.cond
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %preheader_blocks, align 8, !dbg !10614
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %7, i32 0, i32 0, !dbg !10614
  br label %cond.end4, !dbg !10614

cond.false3:                                      ; preds = %for.cond
  br label %cond.end4, !dbg !10614

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_basic_block_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !10614
  %8 = load i32, i32* %i, align 4, !dbg !10614
  %call = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond5, i32 %8, %struct.basic_block_def** %bb), !dbg !10614
  %tobool6 = icmp ne i32 %call, 0, !dbg !10616
  br i1 %tobool6, label %for.body, label %for.end, !dbg !10616

for.body:                                         ; preds = %cond.end4
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10617
  %call7 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** @last_added_blocks, %struct.basic_block_def* %9), !dbg !10617
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10619
  call void @sel_add_bb(%struct.basic_block_def* %10), !dbg !10620
  br label %for.inc, !dbg !10621

for.inc:                                          ; preds = %for.body
  %11 = load i32, i32* %i, align 4, !dbg !10622
  %inc = add nsw i32 %11, 1, !dbg !10622
  store i32 %inc, i32* %i, align 4, !dbg !10622
  br label %for.cond, !dbg !10623, !llvm.loop !10624

for.end:                                          ; preds = %cond.end4
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %preheader_blocks), !dbg !10626
  ret void, !dbg !10627
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %vec_, %struct.basic_block_def* %obj_) #0 !dbg !10628 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !10631, metadata !DIExpression()), !dbg !10632
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !10633, metadata !DIExpression()), !dbg !10632
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10632
  %call = call i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %0, i32 1), !dbg !10632
  %1 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10632
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %1, align 8, !dbg !10632
  %tobool = icmp ne %struct.VEC_basic_block_heap* %2, null, !dbg !10632
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10632

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !10632
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %3, align 8, !dbg !10632
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !10632
  br label %cond.end, !dbg !10632

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10632

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10632
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !10632
  %call1 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %5), !dbg !10632
  ret %struct.basic_block_def** %call1, !dbg !10632
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !10634 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10637, metadata !DIExpression()), !dbg !10638
  call void @llvm.dbg.declare(metadata i32* %n, metadata !10639, metadata !DIExpression()), !dbg !10640
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10641
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !10641
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !10641
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !10641
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10641

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10641
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !10641
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !10641
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !10641
  br label %cond.end, !dbg !10641

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !10641

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10641
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !10641
  store i32 %call, i32* %n, align 4, !dbg !10640
  %4 = load i32, i32* %n, align 4, !dbg !10642
  %cmp = icmp eq i32 %4, 0, !dbg !10644
  br i1 %cmp, label %if.then, label %if.end, !dbg !10645

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !10646
  br label %return, !dbg !10646

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10647
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !10647
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !10647
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !10647
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !10647

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10647
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !10647
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !10647
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !10647
  br label %cond.end8, !dbg !10647

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !10647

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !10647
  %9 = load i32, i32* %n, align 4, !dbg !10647
  %sub = sub i32 %9, 1, !dbg !10647
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !10647
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !10648
  br label %return, !dbg !10648

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !10649
  ret %struct.loop* %10, !dbg !10649
}

declare dso_local i32 @onlyjump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct._list_node* @_list_alloc() #0 !dbg !10650 {
entry:
  %0 = load %struct.alloc_pool_def*, %struct.alloc_pool_def** @sched_lists_pool, align 8, !dbg !10653
  %call = call i8* @pool_alloc(%struct.alloc_pool_def* %0), !dbg !10654
  %1 = bitcast i8* %call to %struct._list_node*, !dbg !10655
  ret %struct._list_node* %1, !dbg !10656
}

declare dso_local i8* @pool_alloc(%struct.alloc_pool_def*) #2

declare dso_local void @pool_free(%struct.alloc_pool_def*, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @fence_clear(%struct._fence* %f) #0 !dbg !10657 {
entry:
  %f.addr = alloca %struct._fence*, align 8
  %s = alloca i8*, align 8
  %dc = alloca %struct.deps*, align 8
  %tc = alloca i8*, align 8
  store %struct._fence* %f, %struct._fence** %f.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._fence** %f.addr, metadata !10658, metadata !DIExpression()), !dbg !10659
  call void @llvm.dbg.declare(metadata i8** %s, metadata !10660, metadata !DIExpression()), !dbg !10661
  %0 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10662
  %state = getelementptr inbounds %struct._fence, %struct._fence* %0, i32 0, i32 1, !dbg !10662
  %1 = load i8*, i8** %state, align 8, !dbg !10662
  store i8* %1, i8** %s, align 8, !dbg !10661
  call void @llvm.dbg.declare(metadata %struct.deps** %dc, metadata !10663, metadata !DIExpression()), !dbg !10664
  %2 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10665
  %dc1 = getelementptr inbounds %struct._fence, %struct._fence* %2, i32 0, i32 5, !dbg !10665
  %3 = load %struct.deps*, %struct.deps** %dc1, align 8, !dbg !10665
  store %struct.deps* %3, %struct.deps** %dc, align 8, !dbg !10664
  call void @llvm.dbg.declare(metadata i8** %tc, metadata !10666, metadata !DIExpression()), !dbg !10667
  %4 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10668
  %tc2 = getelementptr inbounds %struct._fence, %struct._fence* %4, i32 0, i32 6, !dbg !10668
  %5 = load i8*, i8** %tc2, align 8, !dbg !10668
  store i8* %5, i8** %tc, align 8, !dbg !10667
  %6 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10669
  %bnds = getelementptr inbounds %struct._fence, %struct._fence* %6, i32 0, i32 4, !dbg !10669
  call void @_list_clear(%struct._list_node** %bnds), !dbg !10669
  %7 = load i8*, i8** %s, align 8, !dbg !10670
  %cmp = icmp ne i8* %7, null, !dbg !10670
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !10670

land.lhs.true:                                    ; preds = %entry
  %8 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !10670
  %cmp3 = icmp ne %struct.deps* %8, null, !dbg !10670
  br i1 %cmp3, label %land.lhs.true4, label %lor.lhs.false, !dbg !10670

land.lhs.true4:                                   ; preds = %land.lhs.true
  %9 = load i8*, i8** %tc, align 8, !dbg !10670
  %cmp5 = icmp ne i8* %9, null, !dbg !10670
  br i1 %cmp5, label %cond.false, label %lor.lhs.false, !dbg !10670

lor.lhs.false:                                    ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %10 = load i8*, i8** %s, align 8, !dbg !10670
  %cmp6 = icmp eq i8* %10, null, !dbg !10670
  br i1 %cmp6, label %land.lhs.true7, label %cond.true, !dbg !10670

land.lhs.true7:                                   ; preds = %lor.lhs.false
  %11 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !10670
  %cmp8 = icmp eq %struct.deps* %11, null, !dbg !10670
  br i1 %cmp8, label %land.lhs.true9, label %cond.true, !dbg !10670

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %12 = load i8*, i8** %tc, align 8, !dbg !10670
  %cmp10 = icmp eq i8* %12, null, !dbg !10670
  br i1 %cmp10, label %cond.false, label %cond.true, !dbg !10670

cond.true:                                        ; preds = %land.lhs.true9, %land.lhs.true7, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 579, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10670
  br label %cond.end, !dbg !10670

cond.false:                                       ; preds = %land.lhs.true9, %land.lhs.true4
  br label %cond.end, !dbg !10670

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10670
  %13 = load i8*, i8** %s, align 8, !dbg !10671
  %cmp11 = icmp ne i8* %13, null, !dbg !10673
  br i1 %cmp11, label %if.then, label %if.end, !dbg !10674

if.then:                                          ; preds = %cond.end
  %14 = load i8*, i8** %s, align 8, !dbg !10675
  call void @free(i8* %14), !dbg !10676
  br label %if.end, !dbg !10676

if.end:                                           ; preds = %if.then, %cond.end
  %15 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !10677
  %cmp12 = icmp ne %struct.deps* %15, null, !dbg !10679
  br i1 %cmp12, label %if.then13, label %if.end14, !dbg !10680

if.then13:                                        ; preds = %if.end
  %16 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !10681
  call void @delete_deps_context(%struct.deps* %16), !dbg !10682
  br label %if.end14, !dbg !10682

if.end14:                                         ; preds = %if.then13, %if.end
  %17 = load i8*, i8** %tc, align 8, !dbg !10683
  %cmp15 = icmp ne i8* %17, null, !dbg !10685
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !10686

if.then16:                                        ; preds = %if.end14
  %18 = load i8*, i8** %tc, align 8, !dbg !10687
  call void @delete_target_context(i8* %18), !dbg !10688
  br label %if.end17, !dbg !10688

if.end17:                                         ; preds = %if.then16, %if.end14
  %19 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10689
  %executing_insns = getelementptr inbounds %struct._fence, %struct._fence* %19, i32 0, i32 7, !dbg !10689
  call void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %executing_insns), !dbg !10689
  %20 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10690
  %ready_ticks = getelementptr inbounds %struct._fence, %struct._fence* %20, i32 0, i32 8, !dbg !10690
  %21 = load i32*, i32** %ready_ticks, align 8, !dbg !10690
  %22 = bitcast i32* %21 to i8*, !dbg !10690
  call void @free(i8* %22), !dbg !10691
  %23 = load %struct._fence*, %struct._fence** %f.addr, align 8, !dbg !10692
  %ready_ticks18 = getelementptr inbounds %struct._fence, %struct._fence* %23, i32 0, i32 8, !dbg !10692
  store i32* null, i32** %ready_ticks18, align 8, !dbg !10693
  ret void, !dbg !10694
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_deps_context(%struct.deps* %dc) #0 !dbg !10695 {
entry:
  %dc.addr = alloca %struct.deps*, align 8
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !10698, metadata !DIExpression()), !dbg !10699
  %0 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !10700
  call void @clear_deps_context(%struct.deps* %0), !dbg !10701
  %1 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !10702
  %2 = bitcast %struct.deps* %1 to i8*, !dbg !10702
  call void @free(i8* %2), !dbg !10703
  ret void, !dbg !10704
}

; Function Attrs: noinline nounwind uwtable
define internal void @delete_target_context(i8* %tc) #0 !dbg !10705 {
entry:
  %tc.addr = alloca i8*, align 8
  store i8* %tc, i8** %tc.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %tc.addr, metadata !10706, metadata !DIExpression()), !dbg !10707
  %0 = load i8*, i8** %tc.addr, align 8, !dbg !10708
  call void @clear_target_context(i8* %0), !dbg !10709
  %1 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 27), align 8, !dbg !10710
  %tobool = icmp ne void (i8*)* %1, null, !dbg !10712
  br i1 %tobool, label %if.then, label %if.end, !dbg !10713

if.then:                                          ; preds = %entry
  %2 = load void (i8*)*, void (i8*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 27), align 8, !dbg !10714
  %3 = load i8*, i8** %tc.addr, align 8, !dbg !10715
  call void %2(i8* %3), !dbg !10716
  br label %if.end, !dbg !10716

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !10717
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_rtx_gc_free(%struct.VEC_rtx_gc** %vec_) #0 !dbg !10718 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_gc**, align 8
  store %struct.VEC_rtx_gc** %vec_, %struct.VEC_rtx_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_gc*** %vec_.addr, metadata !10722, metadata !DIExpression()), !dbg !10723
  %0 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !10724
  %1 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %0, align 8, !dbg !10724
  %tobool = icmp ne %struct.VEC_rtx_gc* %1, null, !dbg !10724
  br i1 %tobool, label %if.then, label %if.end, !dbg !10723

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !10724
  %3 = load %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc** %2, align 8, !dbg !10724
  %4 = bitcast %struct.VEC_rtx_gc* %3 to i8*, !dbg !10724
  call void @ggc_free(i8* %4), !dbg !10724
  br label %if.end, !dbg !10724

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_rtx_gc**, %struct.VEC_rtx_gc*** %vec_.addr, align 8, !dbg !10723
  store %struct.VEC_rtx_gc* null, %struct.VEC_rtx_gc** %5, align 8, !dbg !10723
  ret void, !dbg !10723
}

; Function Attrs: noinline nounwind uwtable
define internal void @clear_deps_context(%struct.deps* %dc) #0 !dbg !10726 {
entry:
  %dc.addr = alloca %struct.deps*, align 8
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !10727, metadata !DIExpression()), !dbg !10728
  %0 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !10729
  call void @free_deps(%struct.deps* %0), !dbg !10730
  ret void, !dbg !10731
}

declare dso_local void @ggc_free(i8*) #2

declare dso_local void @haifa_note_reg_set(i32) #2

declare dso_local void @haifa_note_reg_clobber(i32) #2

declare dso_local void @haifa_note_reg_use(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !10732 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !10735, metadata !DIExpression()), !dbg !10736
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !10737, metadata !DIExpression()), !dbg !10736
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !10738, metadata !DIExpression()), !dbg !10736
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !10739
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !10739
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !10739

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !10739
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !10739
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !10739
  %3 = load i32, i32* %num, align 8, !dbg !10739
  %cmp = icmp ult i32 %1, %3, !dbg !10739
  br i1 %cmp, label %if.then, label %if.else, !dbg !10736

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !10741
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !10741
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !10741
  %idxprom = zext i32 %5 to i64, !dbg !10741
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !10741
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !10741
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !10741
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !10741
  store i32 1, i32* %retval, align 4, !dbg !10741
  br label %return, !dbg !10741

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !10743
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !10743
  store i32 0, i32* %retval, align 4, !dbg !10743
  br label %return, !dbg !10743

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !10736
  ret i32 %9, !dbg !10736
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !10745 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !10748, metadata !DIExpression()), !dbg !10749
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !10750
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !10750
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !10750
  br i1 %tobool, label %if.then, label %if.end, !dbg !10749

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !10750
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !10750
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !10750
  call void @free(i8* %4), !dbg !10750
  br label %if.end, !dbg !10750

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !10749
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !10749
  ret void, !dbg !10749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_heap* @get_all_loop_exits(%struct.basic_block_def* %bb) #0 !dbg !10752 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %this_loop = alloca %struct.loop*, align 8
  %pred_loop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %next_exits = alloca %struct.VEC_edge_heap*, align 8
  %j = alloca i32, align 4
  %ne = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10755, metadata !DIExpression()), !dbg !10756
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !10757, metadata !DIExpression()), !dbg !10758
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %exits, align 8, !dbg !10758
  br label %while.cond, !dbg !10759

while.cond:                                       ; preds = %cond.end, %entry
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10760
  %call = call zeroext i8 @sel_bb_empty_or_nop_p(%struct.basic_block_def* %0), !dbg !10761
  %conv = zext i8 %call to i32, !dbg !10761
  %tobool = icmp ne i32 %conv, 0, !dbg !10761
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !10762

land.rhs:                                         ; preds = %while.cond
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10763
  %call1 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %1), !dbg !10764
  %conv2 = zext i8 %call1 to i32, !dbg !10764
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !10762
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %2 = phi i1 [ false, %while.cond ], [ %tobool3, %land.rhs ], !dbg !10765
  br i1 %2, label %while.body, label %while.end, !dbg !10759

while.body:                                       ; preds = %land.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10766
  %call4 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %3), !dbg !10768
  store %struct.basic_block_def* %call4, %struct.basic_block_def** %bb.addr, align 8, !dbg !10769
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10770
  %call5 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %4), !dbg !10770
  %tobool6 = icmp ne i8 %call5, 0, !dbg !10770
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !10770

cond.true:                                        ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1127, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10770
  br label %cond.end, !dbg !10770

cond.false:                                       ; preds = %while.body
  br label %cond.end, !dbg !10770

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10770
  br label %while.cond, !dbg !10759, !llvm.loop !10771

while.end:                                        ; preds = %land.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10773
  %call7 = call zeroext i8 @inner_loop_header_p(%struct.basic_block_def* %5), !dbg !10775
  %tobool8 = icmp ne i8 %call7, 0, !dbg !10775
  br i1 %tobool8, label %if.then, label %if.end66, !dbg !10776

if.then:                                          ; preds = %while.end
  call void @llvm.dbg.declare(metadata %struct.loop** %this_loop, metadata !10777, metadata !DIExpression()), !dbg !10779
  call void @llvm.dbg.declare(metadata %struct.loop** %pred_loop, metadata !10780, metadata !DIExpression()), !dbg !10781
  store %struct.loop* null, %struct.loop** %pred_loop, align 8, !dbg !10781
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10782, metadata !DIExpression()), !dbg !10783
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !10784, metadata !DIExpression()), !dbg !10785
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10786
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 3, !dbg !10788
  %7 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10788
  store %struct.loop* %7, %struct.loop** %this_loop, align 8, !dbg !10789
  br label %for.cond, !dbg !10790

for.cond:                                         ; preds = %for.inc, %if.then
  %8 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10791
  %tobool9 = icmp ne %struct.loop* %8, null, !dbg !10791
  br i1 %tobool9, label %land.rhs10, label %land.end12, !dbg !10793

land.rhs10:                                       ; preds = %for.cond
  %9 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10794
  %10 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10795
  %cmp = icmp ne %struct.loop* %9, %10, !dbg !10796
  br label %land.end12

land.end12:                                       ; preds = %land.rhs10, %for.cond
  %11 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs10 ], !dbg !10797
  br i1 %11, label %for.body, label %for.end, !dbg !10798

for.body:                                         ; preds = %land.end12
  %12 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10799
  store %struct.loop* %12, %struct.loop** %pred_loop, align 8, !dbg !10800
  br label %for.inc, !dbg !10801

for.inc:                                          ; preds = %for.body
  %13 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10802
  %call13 = call %struct.loop* @loop_outer(%struct.loop* %13), !dbg !10803
  store %struct.loop* %call13, %struct.loop** %this_loop, align 8, !dbg !10804
  br label %for.cond, !dbg !10805, !llvm.loop !10806

for.end:                                          ; preds = %land.end12
  %14 = load %struct.loop*, %struct.loop** %pred_loop, align 8, !dbg !10808
  store %struct.loop* %14, %struct.loop** %this_loop, align 8, !dbg !10809
  %15 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10810
  %cmp14 = icmp ne %struct.loop* %15, null, !dbg !10810
  br i1 %cmp14, label %cond.false17, label %cond.true16, !dbg !10810

cond.true16:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10810
  br label %cond.end18, !dbg !10810

cond.false17:                                     ; preds = %for.end
  br label %cond.end18, !dbg !10810

cond.end18:                                       ; preds = %cond.false17, %cond.true16
  %cond19 = phi i32 [ 0, %cond.true16 ], [ 0, %cond.false17 ], !dbg !10810
  %16 = load %struct.loop*, %struct.loop** %this_loop, align 8, !dbg !10811
  %call20 = call %struct.VEC_edge_heap* @get_loop_exit_edges_unique_dests(%struct.loop* %16), !dbg !10812
  store %struct.VEC_edge_heap* %call20, %struct.VEC_edge_heap** %exits, align 8, !dbg !10813
  store i32 0, i32* %i, align 4, !dbg !10814
  br label %for.cond21, !dbg !10816

for.cond21:                                       ; preds = %for.inc63, %cond.end18
  %17 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !10817
  %tobool22 = icmp ne %struct.VEC_edge_heap* %17, null, !dbg !10817
  br i1 %tobool22, label %cond.true23, label %cond.false24, !dbg !10817

cond.true23:                                      ; preds = %for.cond21
  %18 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !10817
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %18, i32 0, i32 0, !dbg !10817
  br label %cond.end25, !dbg !10817

cond.false24:                                     ; preds = %for.cond21
  br label %cond.end25, !dbg !10817

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi %struct.VEC_edge_base* [ %base, %cond.true23 ], [ null, %cond.false24 ], !dbg !10817
  %19 = load i32, i32* %i, align 4, !dbg !10817
  %call27 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond26, i32 %19, %struct.edge_def** %e), !dbg !10817
  %tobool28 = icmp ne i32 %call27, 0, !dbg !10819
  br i1 %tobool28, label %for.body29, label %for.end65, !dbg !10819

for.body29:                                       ; preds = %cond.end25
  %20 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10820
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !10822
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10822
  %call30 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %21), !dbg !10823
  %conv31 = zext i8 %call30 to i32, !dbg !10823
  %tobool32 = icmp ne i32 %conv31, 0, !dbg !10823
  br i1 %tobool32, label %if.then37, label %lor.lhs.false, !dbg !10824

lor.lhs.false:                                    ; preds = %for.body29
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10825
  %dest33 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !10826
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest33, align 8, !dbg !10826
  %call34 = call zeroext i8 @inner_loop_header_p(%struct.basic_block_def* %23), !dbg !10827
  %conv35 = zext i8 %call34 to i32, !dbg !10827
  %tobool36 = icmp ne i32 %conv35, 0, !dbg !10827
  br i1 %tobool36, label %if.then37, label %if.end62, !dbg !10828

if.then37:                                        ; preds = %lor.lhs.false, %for.body29
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %next_exits, metadata !10829, metadata !DIExpression()), !dbg !10831
  %24 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10832
  %dest38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !10833
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest38, align 8, !dbg !10833
  %call39 = call %struct.VEC_edge_heap* @get_all_loop_exits(%struct.basic_block_def* %25), !dbg !10834
  store %struct.VEC_edge_heap* %call39, %struct.VEC_edge_heap** %next_exits, align 8, !dbg !10831
  %26 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %next_exits, align 8, !dbg !10835
  %tobool40 = icmp ne %struct.VEC_edge_heap* %26, null, !dbg !10835
  br i1 %tobool40, label %if.then41, label %if.end, !dbg !10837

if.then41:                                        ; preds = %if.then37
  call void @llvm.dbg.declare(metadata i32* %j, metadata !10838, metadata !DIExpression()), !dbg !10840
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ne, metadata !10841, metadata !DIExpression()), !dbg !10842
  store i32 0, i32* %j, align 4, !dbg !10843
  br label %for.cond42, !dbg !10845

for.cond42:                                       ; preds = %for.inc53, %if.then41
  %27 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %next_exits, align 8, !dbg !10846
  %tobool43 = icmp ne %struct.VEC_edge_heap* %27, null, !dbg !10846
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !10846

cond.true44:                                      ; preds = %for.cond42
  %28 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %next_exits, align 8, !dbg !10846
  %base45 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %28, i32 0, i32 0, !dbg !10846
  br label %cond.end47, !dbg !10846

cond.false46:                                     ; preds = %for.cond42
  br label %cond.end47, !dbg !10846

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_edge_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !10846
  %29 = load i32, i32* %j, align 4, !dbg !10846
  %call49 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond48, i32 %29, %struct.edge_def** %ne), !dbg !10846
  %tobool50 = icmp ne i32 %call49, 0, !dbg !10848
  br i1 %tobool50, label %for.body51, label %for.end54, !dbg !10848

for.body51:                                       ; preds = %cond.end47
  %30 = load %struct.edge_def*, %struct.edge_def** %ne, align 8, !dbg !10849
  %call52 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %exits, %struct.edge_def* %30), !dbg !10849
  br label %for.inc53, !dbg !10849

for.inc53:                                        ; preds = %for.body51
  %31 = load i32, i32* %j, align 4, !dbg !10850
  %inc = add nsw i32 %31, 1, !dbg !10850
  store i32 %inc, i32* %j, align 4, !dbg !10850
  br label %for.cond42, !dbg !10851, !llvm.loop !10852

for.end54:                                        ; preds = %cond.end47
  %32 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !10854
  %tobool55 = icmp ne %struct.VEC_edge_heap* %32, null, !dbg !10854
  br i1 %tobool55, label %cond.true56, label %cond.false58, !dbg !10854

cond.true56:                                      ; preds = %for.end54
  %33 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !10854
  %base57 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %33, i32 0, i32 0, !dbg !10854
  br label %cond.end59, !dbg !10854

cond.false58:                                     ; preds = %for.end54
  br label %cond.end59, !dbg !10854

cond.end59:                                       ; preds = %cond.false58, %cond.true56
  %cond60 = phi %struct.VEC_edge_base* [ %base57, %cond.true56 ], [ null, %cond.false58 ], !dbg !10854
  %34 = load i32, i32* %i, align 4, !dbg !10854
  %call61 = call %struct.edge_def* @VEC_edge_base_ordered_remove(%struct.VEC_edge_base* %cond60, i32 %34), !dbg !10854
  %35 = load i32, i32* %i, align 4, !dbg !10855
  %dec = add nsw i32 %35, -1, !dbg !10855
  store i32 %dec, i32* %i, align 4, !dbg !10855
  br label %for.inc63, !dbg !10856

if.end:                                           ; preds = %if.then37
  br label %if.end62, !dbg !10857

if.end62:                                         ; preds = %if.end, %lor.lhs.false
  br label %for.inc63, !dbg !10858

for.inc63:                                        ; preds = %if.end62, %cond.end59
  %36 = load i32, i32* %i, align 4, !dbg !10859
  %inc64 = add nsw i32 %36, 1, !dbg !10859
  store i32 %inc64, i32* %i, align 4, !dbg !10859
  br label %for.cond21, !dbg !10860, !llvm.loop !10861

for.end65:                                        ; preds = %cond.end25
  br label %if.end66, !dbg !10863

if.end66:                                         ; preds = %for.end65, %while.end
  %37 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !10864
  ret %struct.VEC_edge_heap* %37, !dbg !10865
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @sel_bb_empty_or_nop_p(%struct.basic_block_def* %bb) #0 !dbg !10866 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %first = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10867, metadata !DIExpression()), !dbg !10868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %first, metadata !10869, metadata !DIExpression()), !dbg !10870
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10871
  %call = call %struct.rtx_def* @sel_bb_head(%struct.basic_block_def* %0), !dbg !10872
  store %struct.rtx_def* %call, %struct.rtx_def** %first, align 8, !dbg !10870
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !10873, metadata !DIExpression()), !dbg !10874
  %1 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !10875
  %cmp = icmp eq %struct.rtx_def* %1, null, !dbg !10877
  br i1 %cmp, label %if.then, label %if.end, !dbg !10878

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !10879
  br label %return, !dbg !10879

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !10880
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !10880
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10880
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10880
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10880
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10880
  %4 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !10880
  %cmp1 = icmp eq %struct.rtx_def* %3, %4, !dbg !10880
  br i1 %cmp1, label %if.end3, label %if.then2, !dbg !10882

if.then2:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !10883
  br label %return, !dbg !10883

if.end3:                                          ; preds = %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10884
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10886
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !10886
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10886
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10886
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !10886
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10886
  %cmp4 = icmp eq %struct.basic_block_def* %5, %8, !dbg !10887
  br i1 %cmp4, label %if.then5, label %if.end6, !dbg !10888

if.then5:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !10889
  br label %return, !dbg !10889

if.end6:                                          ; preds = %if.end3
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10890
  %call7 = call %struct.rtx_def* @sel_bb_end(%struct.basic_block_def* %9), !dbg !10891
  store %struct.rtx_def* %call7, %struct.rtx_def** %last, align 8, !dbg !10892
  %10 = load %struct.rtx_def*, %struct.rtx_def** %first, align 8, !dbg !10893
  %11 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10895
  %cmp8 = icmp ne %struct.rtx_def* %10, %11, !dbg !10896
  br i1 %cmp8, label %if.then9, label %if.end10, !dbg !10897

if.then9:                                         ; preds = %if.end6
  store i8 0, i8* %retval, align 1, !dbg !10898
  br label %return, !dbg !10898

if.end10:                                         ; preds = %if.end6
  store i8 1, i8* %retval, align 1, !dbg !10899
  br label %return, !dbg !10899

return:                                           ; preds = %if.end10, %if.then9, %if.then5, %if.then2, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !10900
  ret i8 %12, !dbg !10900
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @inner_loop_header_p(%struct.basic_block_def* %bb) #0 !dbg !10901 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %inner_loop = alloca %struct.loop*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10902, metadata !DIExpression()), !dbg !10903
  call void @llvm.dbg.declare(metadata %struct.loop** %inner_loop, metadata !10904, metadata !DIExpression()), !dbg !10905
  %0 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10906
  %tobool = icmp ne %struct.loop* %0, null, !dbg !10906
  br i1 %tobool, label %if.end, label %if.then, !dbg !10908

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !10909
  br label %return, !dbg !10909

if.end:                                           ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10910
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10912
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !10912
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10912
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10912
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !10912
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10912
  %cmp = icmp eq %struct.basic_block_def* %1, %4, !dbg !10913
  br i1 %cmp, label %if.then1, label %if.end2, !dbg !10914

if.then1:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !10915
  br label %return, !dbg !10915

if.end2:                                          ; preds = %if.end
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10916
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %5, i32 0, i32 3, !dbg !10917
  %6 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !10917
  store %struct.loop* %6, %struct.loop** %inner_loop, align 8, !dbg !10918
  %7 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !10919
  %8 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10921
  %cmp3 = icmp eq %struct.loop* %7, %8, !dbg !10922
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !10923

if.then4:                                         ; preds = %if.end2
  store i8 0, i8* %retval, align 1, !dbg !10924
  br label %return, !dbg !10924

if.end5:                                          ; preds = %if.end2
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10925
  %10 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !10927
  %header = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 2, !dbg !10928
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !10928
  %cmp6 = icmp eq %struct.basic_block_def* %9, %11, !dbg !10929
  br i1 %cmp6, label %land.lhs.true, label %if.end13, !dbg !10930

land.lhs.true:                                    ; preds = %if.end5
  %12 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10931
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10932
  %call = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %12, %struct.basic_block_def* %13), !dbg !10933
  %conv = zext i8 %call to i32, !dbg !10933
  %tobool7 = icmp ne i32 %conv, 0, !dbg !10933
  br i1 %tobool7, label %if.then8, label %if.end13, !dbg !10934

if.then8:                                         ; preds = %land.lhs.true
  %14 = load %struct.loop*, %struct.loop** %inner_loop, align 8, !dbg !10935
  %call9 = call i32 @loop_depth(%struct.loop* %14), !dbg !10935
  %15 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !10935
  %call10 = call i32 @loop_depth(%struct.loop* %15), !dbg !10935
  %cmp11 = icmp uge i32 %call9, %call10, !dbg !10935
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !10935

cond.true:                                        ; preds = %if.then8
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1052, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10935
  br label %cond.end, !dbg !10935

cond.false:                                       ; preds = %if.then8
  br label %cond.end, !dbg !10935

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10935
  store i8 1, i8* %retval, align 1, !dbg !10937
  br label %return, !dbg !10937

if.end13:                                         ; preds = %land.lhs.true, %if.end5
  store i8 0, i8* %retval, align 1, !dbg !10938
  br label %return, !dbg !10938

return:                                           ; preds = %if.end13, %cond.end, %if.then4, %if.then1, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !10939
  ret i8 %16, !dbg !10939
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_heap* @get_loop_exit_edges_unique_dests(%struct.loop* %loop) #0 !dbg !10940 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %edges = alloca %struct.VEC_edge_heap*, align 8
  %exit = alloca %struct.loop_exit*, align 8
  %i = alloca i32, align 4
  %e3 = alloca %struct.edge_def*, align 8
  %was_dest = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !10943, metadata !DIExpression()), !dbg !10944
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %edges, metadata !10945, metadata !DIExpression()), !dbg !10946
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %edges, align 8, !dbg !10946
  call void @llvm.dbg.declare(metadata %struct.loop_exit** %exit, metadata !10947, metadata !DIExpression()), !dbg !10948
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10949
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !10949
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !10949
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10949
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !10949
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10949
  %3 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10949
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %3, i32 0, i32 1, !dbg !10949
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10949
  %cmp = icmp ne %struct.basic_block_def* %1, %4, !dbg !10949
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !10949

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10949
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !10949
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !10949
  %6 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !10949
  %state = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 0, !dbg !10949
  %7 = load i32, i32* %state, align 8, !dbg !10949
  %and = and i32 %7, 8, !dbg !10949
  %tobool = icmp ne i32 %and, 0, !dbg !10949
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !10949

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 1067, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !10949
  br label %cond.end, !dbg !10949

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !10949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !10949
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !10950
  %exits = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 18, !dbg !10952
  %9 = load %struct.loop_exit*, %struct.loop_exit** %exits, align 8, !dbg !10952
  %next = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %9, i32 0, i32 2, !dbg !10953
  %10 = load %struct.loop_exit*, %struct.loop_exit** %next, align 8, !dbg !10953
  store %struct.loop_exit* %10, %struct.loop_exit** %exit, align 8, !dbg !10954
  br label %for.cond, !dbg !10955

for.cond:                                         ; preds = %for.inc20, %cond.end
  %11 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !10956
  %e = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %11, i32 0, i32 0, !dbg !10958
  %12 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !10958
  %tobool2 = icmp ne %struct.edge_def* %12, null, !dbg !10959
  br i1 %tobool2, label %for.body, label %for.end22, !dbg !10959

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10960, metadata !DIExpression()), !dbg !10962
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e3, metadata !10963, metadata !DIExpression()), !dbg !10964
  call void @llvm.dbg.declare(metadata i8* %was_dest, metadata !10965, metadata !DIExpression()), !dbg !10966
  store i8 0, i8* %was_dest, align 1, !dbg !10966
  store i32 0, i32* %i, align 4, !dbg !10967
  br label %for.cond4, !dbg !10969

for.cond4:                                        ; preds = %for.inc, %for.body
  %13 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !10970
  %tobool5 = icmp ne %struct.VEC_edge_heap* %13, null, !dbg !10970
  br i1 %tobool5, label %cond.true6, label %cond.false7, !dbg !10970

cond.true6:                                       ; preds = %for.cond4
  %14 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !10970
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %14, i32 0, i32 0, !dbg !10970
  br label %cond.end8, !dbg !10970

cond.false7:                                      ; preds = %for.cond4
  br label %cond.end8, !dbg !10970

cond.end8:                                        ; preds = %cond.false7, %cond.true6
  %cond9 = phi %struct.VEC_edge_base* [ %base, %cond.true6 ], [ null, %cond.false7 ], !dbg !10970
  %15 = load i32, i32* %i, align 4, !dbg !10970
  %call = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond9, i32 %15, %struct.edge_def** %e3), !dbg !10970
  %tobool10 = icmp ne i32 %call, 0, !dbg !10972
  br i1 %tobool10, label %for.body11, label %for.end, !dbg !10972

for.body11:                                       ; preds = %cond.end8
  %16 = load %struct.edge_def*, %struct.edge_def** %e3, align 8, !dbg !10973
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 1, !dbg !10975
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10975
  %18 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !10976
  %e12 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %18, i32 0, i32 0, !dbg !10977
  %19 = load %struct.edge_def*, %struct.edge_def** %e12, align 8, !dbg !10977
  %dest13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 1, !dbg !10978
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %dest13, align 8, !dbg !10978
  %cmp14 = icmp eq %struct.basic_block_def* %17, %20, !dbg !10979
  br i1 %cmp14, label %if.then, label %if.end, !dbg !10980

if.then:                                          ; preds = %for.body11
  store i8 1, i8* %was_dest, align 1, !dbg !10981
  br label %for.end, !dbg !10983

if.end:                                           ; preds = %for.body11
  br label %for.inc, !dbg !10978

for.inc:                                          ; preds = %if.end
  %21 = load i32, i32* %i, align 4, !dbg !10984
  %inc = add nsw i32 %21, 1, !dbg !10984
  store i32 %inc, i32* %i, align 4, !dbg !10984
  br label %for.cond4, !dbg !10985, !llvm.loop !10986

for.end:                                          ; preds = %if.then, %cond.end8
  %22 = load i8, i8* %was_dest, align 1, !dbg !10988
  %tobool15 = icmp ne i8 %22, 0, !dbg !10988
  br i1 %tobool15, label %if.end19, label %if.then16, !dbg !10990

if.then16:                                        ; preds = %for.end
  %23 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !10991
  %e17 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %23, i32 0, i32 0, !dbg !10991
  %24 = load %struct.edge_def*, %struct.edge_def** %e17, align 8, !dbg !10991
  %call18 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %edges, %struct.edge_def* %24), !dbg !10991
  br label %if.end19, !dbg !10991

if.end19:                                         ; preds = %if.then16, %for.end
  br label %for.inc20, !dbg !10992

for.inc20:                                        ; preds = %if.end19
  %25 = load %struct.loop_exit*, %struct.loop_exit** %exit, align 8, !dbg !10993
  %next21 = getelementptr inbounds %struct.loop_exit, %struct.loop_exit* %25, i32 0, i32 2, !dbg !10994
  %26 = load %struct.loop_exit*, %struct.loop_exit** %next21, align 8, !dbg !10994
  store %struct.loop_exit* %26, %struct.loop_exit** %exit, align 8, !dbg !10995
  br label %for.cond, !dbg !10996, !llvm.loop !10997

for.end22:                                        ; preds = %for.cond
  %27 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %edges, align 8, !dbg !10999
  ret %struct.VEC_edge_heap* %27, !dbg !11000
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %vec_, %struct.edge_def* %obj_) #0 !dbg !11001 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !11004, metadata !DIExpression()), !dbg !11005
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !11006, metadata !DIExpression()), !dbg !11005
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11005
  %call = call i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %0, i32 1), !dbg !11005
  %1 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11005
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %1, align 8, !dbg !11005
  %tobool = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !11005
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11005

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11005
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %3, align 8, !dbg !11005
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !11005
  br label %cond.end, !dbg !11005

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11005

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11005
  %5 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !11005
  %call1 = call %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %5), !dbg !11005
  ret %struct.edge_def** %call1, !dbg !11005
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_ordered_remove(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !11007 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %slot_ = alloca %struct.edge_def**, align 8
  %obj_ = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !11011, metadata !DIExpression()), !dbg !11012
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11013, metadata !DIExpression()), !dbg !11012
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !11014, metadata !DIExpression()), !dbg !11012
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_, metadata !11015, metadata !DIExpression()), !dbg !11012
  %0 = load i32, i32* %ix_.addr, align 4, !dbg !11012
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11012
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !11012
  %2 = load i32, i32* %num, align 8, !dbg !11012
  %cmp = icmp ult i32 %0, %2, !dbg !11012
  %conv = zext i1 %cmp to i32, !dbg !11012
  %3 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11012
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %3, i32 0, i32 2, !dbg !11012
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !11012
  %idxprom = zext i32 %4 to i64, !dbg !11012
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !11012
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !11012
  %5 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !11012
  %6 = load %struct.edge_def*, %struct.edge_def** %5, align 8, !dbg !11012
  store %struct.edge_def* %6, %struct.edge_def** %obj_, align 8, !dbg !11012
  %7 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !11012
  %8 = bitcast %struct.edge_def** %7 to i8*, !dbg !11012
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !11012
  %add.ptr = getelementptr inbounds %struct.edge_def*, %struct.edge_def** %9, i64 1, !dbg !11012
  %10 = bitcast %struct.edge_def** %add.ptr to i8*, !dbg !11012
  %11 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11012
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %11, i32 0, i32 0, !dbg !11012
  %12 = load i32, i32* %num1, align 8, !dbg !11012
  %dec = add i32 %12, -1, !dbg !11012
  store i32 %dec, i32* %num1, align 8, !dbg !11012
  %13 = load i32, i32* %ix_.addr, align 4, !dbg !11012
  %sub = sub i32 %dec, %13, !dbg !11012
  %conv2 = zext i32 %sub to i64, !dbg !11012
  %mul = mul i64 %conv2, 8, !dbg !11012
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %10, i64 %mul, i1 false), !dbg !11012
  %14 = load %struct.edge_def*, %struct.edge_def** %obj_, align 8, !dbg !11012
  ret %struct.edge_def* %14, !dbg !11012
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %vec_, i32 %alloc_) #0 !dbg !11016 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !11019, metadata !DIExpression()), !dbg !11020
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11021, metadata !DIExpression()), !dbg !11020
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11022, metadata !DIExpression()), !dbg !11020
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11020
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !11020
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !11020
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11020

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11020
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !11020
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !11020
  br label %cond.end, !dbg !11020

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11020

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11020
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11020
  %call = call i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 %4), !dbg !11020
  %tobool1 = icmp ne i32 %call, 0, !dbg !11020
  %lnot = xor i1 %tobool1, true, !dbg !11020
  %lnot.ext = zext i1 %lnot to i32, !dbg !11020
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11020
  %5 = load i32, i32* %extend, align 4, !dbg !11023
  %tobool2 = icmp ne i32 %5, 0, !dbg !11023
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11020

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11023
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %6, align 8, !dbg !11023
  %8 = bitcast %struct.VEC_edge_heap* %7 to i8*, !dbg !11023
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11023
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !11023
  %10 = bitcast i8* %call3 to %struct.VEC_edge_heap*, !dbg !11023
  %11 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !11023
  store %struct.VEC_edge_heap* %10, %struct.VEC_edge_heap** %11, align 8, !dbg !11023
  br label %if.end, !dbg !11023

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11020
  ret i32 %12, !dbg !11020
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) #0 !dbg !11025 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  %slot_ = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !11028, metadata !DIExpression()), !dbg !11029
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !11030, metadata !DIExpression()), !dbg !11029
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !11031, metadata !DIExpression()), !dbg !11029
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11029
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %0, i32 0, i32 0, !dbg !11029
  %1 = load i32, i32* %num, align 8, !dbg !11029
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11029
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !11029
  %3 = load i32, i32* %alloc, align 4, !dbg !11029
  %cmp = icmp ult i32 %1, %3, !dbg !11029
  %conv = zext i1 %cmp to i32, !dbg !11029
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11029
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !11029
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11029
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 0, !dbg !11029
  %6 = load i32, i32* %num1, align 8, !dbg !11029
  %inc = add i32 %6, 1, !dbg !11029
  store i32 %inc, i32* %num1, align 8, !dbg !11029
  %idxprom = zext i32 %6 to i64, !dbg !11029
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !11029
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !11029
  %7 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !11029
  %8 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !11029
  store %struct.edge_def* %7, %struct.edge_def** %8, align 8, !dbg !11029
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !11029
  ret %struct.edge_def** %9, !dbg !11029
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) #0 !dbg !11032 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !11035, metadata !DIExpression()), !dbg !11036
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11037, metadata !DIExpression()), !dbg !11036
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11036
  %cmp = icmp sge i32 %0, 0, !dbg !11036
  %conv = zext i1 %cmp to i32, !dbg !11036
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11036
  %tobool = icmp ne %struct.VEC_edge_base* %1, null, !dbg !11036
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11036

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11036
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !11036
  %3 = load i32, i32* %alloc, align 4, !dbg !11036
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !11036
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 0, !dbg !11036
  %5 = load i32, i32* %num, align 8, !dbg !11036
  %sub = sub i32 %3, %5, !dbg !11036
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11036
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11036
  %conv2 = zext i1 %cmp1 to i32, !dbg !11036
  br label %cond.end, !dbg !11036

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11036
  %tobool3 = icmp ne i32 %7, 0, !dbg !11036
  %lnot = xor i1 %tobool3, true, !dbg !11036
  %lnot.ext = zext i1 %lnot to i32, !dbg !11036
  br label %cond.end, !dbg !11036

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11036
  ret i32 %cond, !dbg !11036
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture, i8* nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i8* @state_alloc() #0 !dbg !11038 {
entry:
  %0 = load i64, i64* @dfa_state_size, align 8, !dbg !11039
  %call = call i8* @xmalloc(i64 %0), !dbg !11040
  ret i8* %call, !dbg !11041
}

declare dso_local void @state_reset(i8*) #2

declare dso_local void @advance_state(i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.deps* @alloc_deps_context() #0 !dbg !11042 {
entry:
  %call = call i8* @xmalloc(i64 184), !dbg !11043
  %0 = bitcast i8* %call to %struct.deps*, !dbg !11043
  ret %struct.deps* %0, !dbg !11044
}

declare dso_local void @init_deps(%struct.deps*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @state_free(i8* %state) #0 !dbg !11045 {
entry:
  %state.addr = alloca i8*, align 8
  store i8* %state, i8** %state.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %state.addr, metadata !11048, metadata !DIExpression()), !dbg !11049
  %0 = load i8*, i8** %state.addr, align 8, !dbg !11050
  call void @free(i8* %0), !dbg !11051
  ret void, !dbg !11052
}

; Function Attrs: noinline nounwind uwtable
define internal void @reset_deps_context(%struct.deps* %dc) #0 !dbg !11053 {
entry:
  %dc.addr = alloca %struct.deps*, align 8
  store %struct.deps* %dc, %struct.deps** %dc.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %dc.addr, metadata !11054, metadata !DIExpression()), !dbg !11055
  %0 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !11056
  call void @clear_deps_context(%struct.deps* %0), !dbg !11057
  %1 = load %struct.deps*, %struct.deps** %dc.addr, align 8, !dbg !11058
  call void @init_deps(%struct.deps* %1, i8 zeroext 0), !dbg !11059
  ret void, !dbg !11060
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

declare dso_local %struct.edge_def* @find_fallthru_edge(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @state_copy(i8* %to, i8* %from) #0 !dbg !11061 {
entry:
  %to.addr = alloca i8*, align 8
  %from.addr = alloca i8*, align 8
  store i8* %to, i8** %to.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %to.addr, metadata !11064, metadata !DIExpression()), !dbg !11065
  store i8* %from, i8** %from.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %from.addr, metadata !11066, metadata !DIExpression()), !dbg !11067
  %0 = load i8*, i8** %to.addr, align 8, !dbg !11068
  %1 = load i8*, i8** %from.addr, align 8, !dbg !11069
  %2 = load i64, i64* @dfa_state_size, align 8, !dbg !11070
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %0, i8* align 1 %1, i64 %2, i1 false), !dbg !11071
  ret void, !dbg !11072
}

; Function Attrs: noinline nounwind uwtable
define internal void @copy_deps_context(%struct.deps* %to, %struct.deps* %from) #0 !dbg !11073 {
entry:
  %to.addr = alloca %struct.deps*, align 8
  %from.addr = alloca %struct.deps*, align 8
  store %struct.deps* %to, %struct.deps** %to.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %to.addr, metadata !11076, metadata !DIExpression()), !dbg !11077
  store %struct.deps* %from, %struct.deps** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.deps** %from.addr, metadata !11078, metadata !DIExpression()), !dbg !11079
  %0 = load %struct.deps*, %struct.deps** %to.addr, align 8, !dbg !11080
  call void @init_deps(%struct.deps* %0, i8 zeroext 0), !dbg !11081
  %1 = load %struct.deps*, %struct.deps** %to.addr, align 8, !dbg !11082
  %2 = load %struct.deps*, %struct.deps** %from.addr, align 8, !dbg !11083
  call void @deps_join(%struct.deps* %1, %struct.deps* %2), !dbg !11084
  ret void, !dbg !11085
}

declare dso_local void @deps_join(%struct.deps*, %struct.deps*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_target_context(i8* %to, i8* %from) #0 !dbg !11086 {
entry:
  %to.addr = alloca i8*, align 8
  %from.addr = alloca i8*, align 8
  %tmp = alloca i8*, align 8
  store i8* %to, i8** %to.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %to.addr, metadata !11089, metadata !DIExpression()), !dbg !11090
  store i8* %from, i8** %from.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %from.addr, metadata !11091, metadata !DIExpression()), !dbg !11092
  call void @llvm.dbg.declare(metadata i8** %tmp, metadata !11093, metadata !DIExpression()), !dbg !11094
  %call = call i8* @create_target_context(i8 zeroext 0), !dbg !11095
  store i8* %call, i8** %tmp, align 8, !dbg !11094
  %0 = load i8*, i8** %from.addr, align 8, !dbg !11096
  call void @set_target_context(i8* %0), !dbg !11097
  %1 = load i8*, i8** %to.addr, align 8, !dbg !11098
  call void @init_target_context(i8* %1, i8 zeroext 0), !dbg !11099
  %2 = load i8*, i8** %tmp, align 8, !dbg !11100
  call void @set_target_context(i8* %2), !dbg !11101
  %3 = load i8*, i8** %tmp, align 8, !dbg !11102
  call void @delete_target_context(i8* %3), !dbg !11103
  ret void, !dbg !11104
}

declare dso_local i8* @vec_gc_p_reserve_exact(i8*, i32) #2

declare dso_local i32 @insn_default_latency(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_history_def_base_length(%struct.VEC_expr_history_def_base* %vec_) #0 !dbg !11105 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !11110, metadata !DIExpression()), !dbg !11111
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11111
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %0, null, !dbg !11111
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11111

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11111
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %1, i32 0, i32 0, !dbg !11111
  %2 = load i32, i32* %num, align 8, !dbg !11111
  br label %cond.end, !dbg !11111

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11111

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11111
  ret i32 %cond, !dbg !11111
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_history_def_1* @VEC_expr_history_def_base_address(%struct.VEC_expr_history_def_base* %vec_) #0 !dbg !11112 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !11115, metadata !DIExpression()), !dbg !11116
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11116
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %0, null, !dbg !11116
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11116

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11116
  %vec = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %1, i32 0, i32 2, !dbg !11116
  %arraydecay = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec, i64 0, i64 0, !dbg !11116
  br label %cond.end, !dbg !11116

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11116

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.expr_history_def_1* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11116
  ret %struct.expr_history_def_1* %cond, !dbg !11116
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_history_def_heap_reserve(%struct.VEC_expr_history_def_heap** %vec_, i32 %alloc_) #0 !dbg !11117 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_expr_history_def_heap** %vec_, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap*** %vec_.addr, metadata !11120, metadata !DIExpression()), !dbg !11121
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11122, metadata !DIExpression()), !dbg !11121
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11123, metadata !DIExpression()), !dbg !11121
  %0 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11121
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %0, align 8, !dbg !11121
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %1, null, !dbg !11121
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11121

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11121
  %3 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %2, align 8, !dbg !11121
  %base = getelementptr inbounds %struct.VEC_expr_history_def_heap, %struct.VEC_expr_history_def_heap* %3, i32 0, i32 0, !dbg !11121
  br label %cond.end, !dbg !11121

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11121

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_expr_history_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11121
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11121
  %call = call i32 @VEC_expr_history_def_base_space(%struct.VEC_expr_history_def_base* %cond, i32 %4), !dbg !11121
  %tobool1 = icmp ne i32 %call, 0, !dbg !11121
  %lnot = xor i1 %tobool1, true, !dbg !11121
  %lnot.ext = zext i1 %lnot to i32, !dbg !11121
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11121
  %5 = load i32, i32* %extend, align 4, !dbg !11124
  %tobool2 = icmp ne i32 %5, 0, !dbg !11124
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11121

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11124
  %7 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %6, align 8, !dbg !11124
  %8 = bitcast %struct.VEC_expr_history_def_heap* %7 to i8*, !dbg !11124
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11124
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 32), !dbg !11124
  %10 = bitcast i8* %call3 to %struct.VEC_expr_history_def_heap*, !dbg !11124
  %11 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11124
  store %struct.VEC_expr_history_def_heap* %10, %struct.VEC_expr_history_def_heap** %11, align 8, !dbg !11124
  br label %if.end, !dbg !11124

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11121
  ret i32 %12, !dbg !11121
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.expr_history_def_1* @VEC_expr_history_def_base_quick_insert(%struct.VEC_expr_history_def_base* %vec_, i32 %ix_, %struct.expr_history_def_1* %obj_) #0 !dbg !11126 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  %obj_.addr = alloca %struct.expr_history_def_1*, align 8
  %slot_ = alloca %struct.expr_history_def_1*, align 8
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !11129, metadata !DIExpression()), !dbg !11130
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11131, metadata !DIExpression()), !dbg !11130
  store %struct.expr_history_def_1* %obj_, %struct.expr_history_def_1** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %obj_.addr, metadata !11132, metadata !DIExpression()), !dbg !11130
  call void @llvm.dbg.declare(metadata %struct.expr_history_def_1** %slot_, metadata !11133, metadata !DIExpression()), !dbg !11130
  %0 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11130
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %0, i32 0, i32 0, !dbg !11130
  %1 = load i32, i32* %num, align 8, !dbg !11130
  %2 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11130
  %alloc = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %2, i32 0, i32 1, !dbg !11130
  %3 = load i32, i32* %alloc, align 4, !dbg !11130
  %cmp = icmp ult i32 %1, %3, !dbg !11130
  %conv = zext i1 %cmp to i32, !dbg !11130
  %4 = load i32, i32* %ix_.addr, align 4, !dbg !11130
  %5 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11130
  %num1 = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %5, i32 0, i32 0, !dbg !11130
  %6 = load i32, i32* %num1, align 8, !dbg !11130
  %cmp2 = icmp ule i32 %4, %6, !dbg !11130
  %conv3 = zext i1 %cmp2 to i32, !dbg !11130
  %7 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11130
  %vec = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %7, i32 0, i32 2, !dbg !11130
  %8 = load i32, i32* %ix_.addr, align 4, !dbg !11130
  %idxprom = zext i32 %8 to i64, !dbg !11130
  %arrayidx = getelementptr inbounds [1 x %struct.expr_history_def_1], [1 x %struct.expr_history_def_1]* %vec, i64 0, i64 %idxprom, !dbg !11130
  store %struct.expr_history_def_1* %arrayidx, %struct.expr_history_def_1** %slot_, align 8, !dbg !11130
  %9 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %slot_, align 8, !dbg !11130
  %add.ptr = getelementptr inbounds %struct.expr_history_def_1, %struct.expr_history_def_1* %9, i64 1, !dbg !11130
  %10 = bitcast %struct.expr_history_def_1* %add.ptr to i8*, !dbg !11130
  %11 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %slot_, align 8, !dbg !11130
  %12 = bitcast %struct.expr_history_def_1* %11 to i8*, !dbg !11130
  %13 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11130
  %num4 = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %13, i32 0, i32 0, !dbg !11130
  %14 = load i32, i32* %num4, align 8, !dbg !11130
  %inc = add i32 %14, 1, !dbg !11130
  store i32 %inc, i32* %num4, align 8, !dbg !11130
  %15 = load i32, i32* %ix_.addr, align 4, !dbg !11130
  %sub = sub i32 %14, %15, !dbg !11130
  %conv5 = zext i32 %sub to i64, !dbg !11130
  %mul = mul i64 %conv5, 32, !dbg !11130
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %12, i64 %mul, i1 false), !dbg !11130
  %16 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %obj_.addr, align 8, !dbg !11134
  %tobool = icmp ne %struct.expr_history_def_1* %16, null, !dbg !11134
  br i1 %tobool, label %if.then, label %if.end, !dbg !11130

if.then:                                          ; preds = %entry
  %17 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %slot_, align 8, !dbg !11134
  %18 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %obj_.addr, align 8, !dbg !11134
  %19 = bitcast %struct.expr_history_def_1* %17 to i8*, !dbg !11134
  %20 = bitcast %struct.expr_history_def_1* %18 to i8*, !dbg !11134
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %19, i8* align 8 %20, i64 32, i1 false), !dbg !11134
  br label %if.end, !dbg !11134

if.end:                                           ; preds = %if.then, %entry
  %21 = load %struct.expr_history_def_1*, %struct.expr_history_def_1** %slot_, align 8, !dbg !11130
  ret %struct.expr_history_def_1* %21, !dbg !11130
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_expr_history_def_base_space(%struct.VEC_expr_history_def_base* %vec_, i32 %alloc_) #0 !dbg !11136 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_expr_history_def_base* %vec_, %struct.VEC_expr_history_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_base** %vec_.addr, metadata !11139, metadata !DIExpression()), !dbg !11140
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11141, metadata !DIExpression()), !dbg !11140
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11140
  %cmp = icmp sge i32 %0, 0, !dbg !11140
  %conv = zext i1 %cmp to i32, !dbg !11140
  %1 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11140
  %tobool = icmp ne %struct.VEC_expr_history_def_base* %1, null, !dbg !11140
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11140

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11140
  %alloc = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %2, i32 0, i32 1, !dbg !11140
  %3 = load i32, i32* %alloc, align 4, !dbg !11140
  %4 = load %struct.VEC_expr_history_def_base*, %struct.VEC_expr_history_def_base** %vec_.addr, align 8, !dbg !11140
  %num = getelementptr inbounds %struct.VEC_expr_history_def_base, %struct.VEC_expr_history_def_base* %4, i32 0, i32 0, !dbg !11140
  %5 = load i32, i32* %num, align 8, !dbg !11140
  %sub = sub i32 %3, %5, !dbg !11140
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11140
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11140
  %conv2 = zext i1 %cmp1 to i32, !dbg !11140
  br label %cond.end, !dbg !11140

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11140
  %tobool3 = icmp ne i32 %7, 0, !dbg !11140
  %lnot = xor i1 %tobool3, true, !dbg !11140
  %lnot.ext = zext i1 %lnot to i32, !dbg !11140
  br label %cond.end, !dbg !11140

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11140
  ret i32 %cond, !dbg !11140
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #2

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

declare dso_local i32 @ds_get_max_dep_weak(i32) #2

declare dso_local i32 @ds_get_speculation_types(i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_expr_history_def_heap_free(%struct.VEC_expr_history_def_heap** %vec_) #0 !dbg !11142 {
entry:
  %vec_.addr = alloca %struct.VEC_expr_history_def_heap**, align 8
  store %struct.VEC_expr_history_def_heap** %vec_, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_expr_history_def_heap*** %vec_.addr, metadata !11143, metadata !DIExpression()), !dbg !11144
  %0 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11145
  %1 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %0, align 8, !dbg !11145
  %tobool = icmp ne %struct.VEC_expr_history_def_heap* %1, null, !dbg !11145
  br i1 %tobool, label %if.then, label %if.end, !dbg !11144

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11145
  %3 = load %struct.VEC_expr_history_def_heap*, %struct.VEC_expr_history_def_heap** %2, align 8, !dbg !11145
  %4 = bitcast %struct.VEC_expr_history_def_heap* %3 to i8*, !dbg !11145
  call void @free(i8* %4), !dbg !11145
  br label %if.end, !dbg !11145

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_expr_history_def_heap**, %struct.VEC_expr_history_def_heap*** %vec_.addr, align 8, !dbg !11144
  store %struct.VEC_expr_history_def_heap* null, %struct.VEC_expr_history_def_heap** %5, align 8, !dbg !11144
  ret void, !dbg !11144
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_iter_remove_nofree(%struct._list_iterator* %ip) #0 !dbg !11147 {
entry:
  %ip.addr = alloca %struct._list_iterator*, align 8
  store %struct._list_iterator* %ip, %struct._list_iterator** %ip.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_iterator** %ip.addr, metadata !11148, metadata !DIExpression()), !dbg !11149
  %0 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !11150
  %removed_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %0, i32 0, i32 2, !dbg !11150
  %1 = load i8, i8* %removed_p, align 1, !dbg !11150
  %tobool = icmp ne i8 %1, 0, !dbg !11150
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !11150

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !11150
  %can_remove_p = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %2, i32 0, i32 1, !dbg !11150
  %3 = load i8, i8* %can_remove_p, align 8, !dbg !11150
  %conv = zext i8 %3 to i32, !dbg !11150
  %tobool1 = icmp ne i32 %conv, 0, !dbg !11150
  br i1 %tobool1, label %cond.false, label %cond.true, !dbg !11150

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 456, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11150
  br label %cond.end, !dbg !11150

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !11150

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11150
  %4 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !11151
  %lp = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %4, i32 0, i32 0, !dbg !11152
  %5 = load %struct._list_node**, %struct._list_node*** %lp, align 8, !dbg !11152
  call void @_list_remove_nofree(%struct._list_node** %5), !dbg !11153
  %6 = load %struct._list_iterator*, %struct._list_iterator** %ip.addr, align 8, !dbg !11154
  %removed_p2 = getelementptr inbounds %struct._list_iterator, %struct._list_iterator* %6, i32 0, i32 2, !dbg !11155
  store i8 1, i8* %removed_p2, align 1, !dbg !11156
  ret void, !dbg !11157
}

; Function Attrs: noinline nounwind uwtable
define internal void @_list_remove_nofree(%struct._list_node** %lp) #0 !dbg !11158 {
entry:
  %lp.addr = alloca %struct._list_node**, align 8
  %n = alloca %struct._list_node*, align 8
  store %struct._list_node** %lp, %struct._list_node*** %lp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct._list_node*** %lp.addr, metadata !11159, metadata !DIExpression()), !dbg !11160
  call void @llvm.dbg.declare(metadata %struct._list_node** %n, metadata !11161, metadata !DIExpression()), !dbg !11162
  %0 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !11163
  %1 = load %struct._list_node*, %struct._list_node** %0, align 8, !dbg !11164
  store %struct._list_node* %1, %struct._list_node** %n, align 8, !dbg !11162
  %2 = load %struct._list_node*, %struct._list_node** %n, align 8, !dbg !11165
  %next = getelementptr inbounds %struct._list_node, %struct._list_node* %2, i32 0, i32 0, !dbg !11165
  %3 = load %struct._list_node*, %struct._list_node** %next, align 8, !dbg !11165
  %4 = load %struct._list_node**, %struct._list_node*** %lp.addr, align 8, !dbg !11166
  store %struct._list_node* %3, %struct._list_node** %4, align 8, !dbg !11167
  ret void, !dbg !11168
}

; Function Attrs: noinline nounwind uwtable
define internal void @invalidate_av_set(%struct.basic_block_def* %bb) #0 !dbg !11169 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11170, metadata !DIExpression()), !dbg !11171
  %0 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11172
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %0, null, !dbg !11172
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11172

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11172
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %1, i32 0, i32 0, !dbg !11172
  br label %cond.end, !dbg !11172

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11172
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11172
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !11172
  %3 = load i32, i32* %index, align 8, !dbg !11172
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %3), !dbg !11172
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 2, !dbg !11172
  %4 = load i32, i32* %av_level, align 8, !dbg !11172
  %cmp = icmp sle i32 %4, 0, !dbg !11172
  br i1 %cmp, label %land.lhs.true, label %cond.true10, !dbg !11172

land.lhs.true:                                    ; preds = %cond.end
  %5 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11172
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %5, null, !dbg !11172
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11172

cond.true2:                                       ; preds = %land.lhs.true
  %6 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11172
  %base3 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %6, i32 0, i32 0, !dbg !11172
  br label %cond.end5, !dbg !11172

cond.false4:                                      ; preds = %land.lhs.true
  br label %cond.end5, !dbg !11172

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11172
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11172
  %index7 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !11172
  %8 = load i32, i32* %index7, align 8, !dbg !11172
  %call8 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond6, i32 %8), !dbg !11172
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call8, i32 0, i32 1, !dbg !11172
  %9 = load %struct._list_node*, %struct._list_node** %av_set, align 8, !dbg !11172
  %cmp9 = icmp eq %struct._list_node* %9, null, !dbg !11172
  br i1 %cmp9, label %cond.false11, label %cond.true10, !dbg !11172

cond.true10:                                      ; preds = %cond.end5, %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4156, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11172
  br label %cond.end12, !dbg !11172

cond.false11:                                     ; preds = %cond.end5
  br label %cond.end12, !dbg !11172

cond.end12:                                       ; preds = %cond.false11, %cond.true10
  %cond13 = phi i32 [ 0, %cond.true10 ], [ 0, %cond.false11 ], !dbg !11172
  %10 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11173
  %tobool14 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %10, null, !dbg !11173
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11173

cond.true15:                                      ; preds = %cond.end12
  %11 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !11173
  %base16 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %11, i32 0, i32 0, !dbg !11173
  br label %cond.end18, !dbg !11173

cond.false17:                                     ; preds = %cond.end12
  br label %cond.end18, !dbg !11173

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11173
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11173
  %index20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !11173
  %13 = load i32, i32* %index20, align 8, !dbg !11173
  %call21 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond19, i32 %13), !dbg !11173
  %av_level22 = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call21, i32 0, i32 2, !dbg !11173
  store i32 -1, i32* %av_level22, align 8, !dbg !11174
  ret void, !dbg !11175
}

declare dso_local i32 @asm_noperands(%struct.rtx_def*) #2

declare dso_local i32 @prologue_epilogue_contains(%struct.rtx_def*) #2

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct._haifa_insn_data* @VEC_haifa_insn_data_def_base_index(%struct.VEC_haifa_insn_data_def_base* %vec_, i32 %ix_) #0 !dbg !11176 {
entry:
  %vec_.addr = alloca %struct.VEC_haifa_insn_data_def_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_haifa_insn_data_def_base* %vec_, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_haifa_insn_data_def_base** %vec_.addr, metadata !11230, metadata !DIExpression()), !dbg !11231
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !11232, metadata !DIExpression()), !dbg !11231
  %0 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11231
  %tobool = icmp ne %struct.VEC_haifa_insn_data_def_base* %0, null, !dbg !11231
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11231

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !11231
  %2 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11231
  %num = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %2, i32 0, i32 0, !dbg !11231
  %3 = load i32, i32* %num, align 8, !dbg !11231
  %cmp = icmp ult i32 %1, %3, !dbg !11231
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !11233
  %land.ext = zext i1 %4 to i32, !dbg !11231
  %5 = load %struct.VEC_haifa_insn_data_def_base*, %struct.VEC_haifa_insn_data_def_base** %vec_.addr, align 8, !dbg !11231
  %vec = getelementptr inbounds %struct.VEC_haifa_insn_data_def_base, %struct.VEC_haifa_insn_data_def_base* %5, i32 0, i32 2, !dbg !11231
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !11231
  %idxprom = zext i32 %6 to i64, !dbg !11231
  %arrayidx = getelementptr inbounds [1 x %struct._haifa_insn_data], [1 x %struct._haifa_insn_data]* %vec, i64 0, i64 %idxprom, !dbg !11231
  ret %struct._haifa_insn_data* %arrayidx, !dbg !11231
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_first_time_insn_data(%struct.rtx_def* %insn) #0 !dbg !11234 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11235, metadata !DIExpression()), !dbg !11236
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11237
  %call = call zeroext i8 @first_time_insn_init(%struct.rtx_def* %0), !dbg !11237
  %tobool = icmp ne i8 %call, 0, !dbg !11237
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11237

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2756, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11237
  br label %cond.end, !dbg !11237

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11237

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11237
  %call1 = call %struct.bitmap_head_def* @get_regset_from_pool(), !dbg !11238
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11239
  %tobool2 = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !11239
  br i1 %tobool2, label %cond.true3, label %cond.false4, !dbg !11239

cond.true3:                                       ; preds = %cond.end
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11239
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %2, i32 0, i32 0, !dbg !11239
  br label %cond.end5, !dbg !11239

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11239

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true3 ], [ null, %cond.false4 ], !dbg !11239
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11239
  %tobool7 = icmp ne %struct.VEC_int_heap* %3, null, !dbg !11239
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !11239

cond.true8:                                       ; preds = %cond.end5
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11239
  %base9 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !11239
  br label %cond.end11, !dbg !11239

cond.false10:                                     ; preds = %cond.end5
  br label %cond.end11, !dbg !11239

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_int_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !11239
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11239
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !11239
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11239
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11239
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11239
  %6 = load i32, i32* %rt_int, align 8, !dbg !11239
  %call13 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond12, i32 %6), !dbg !11239
  %call14 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond6, i32 %call13), !dbg !11239
  %live = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call14, i32 0, i32 3, !dbg !11239
  store %struct.bitmap_head_def* %call1, %struct.bitmap_head_def** %live, align 8, !dbg !11240
  %7 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11241
  %tobool15 = icmp ne %struct.VEC_sel_insn_data_def_heap* %7, null, !dbg !11241
  br i1 %tobool15, label %cond.true16, label %cond.false18, !dbg !11241

cond.true16:                                      ; preds = %cond.end11
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11241
  %base17 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %8, i32 0, i32 0, !dbg !11241
  br label %cond.end19, !dbg !11241

cond.false18:                                     ; preds = %cond.end11
  br label %cond.end19, !dbg !11241

cond.end19:                                       ; preds = %cond.false18, %cond.true16
  %cond20 = phi %struct.VEC_sel_insn_data_def_base* [ %base17, %cond.true16 ], [ null, %cond.false18 ], !dbg !11241
  %9 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11241
  %tobool21 = icmp ne %struct.VEC_int_heap* %9, null, !dbg !11241
  br i1 %tobool21, label %cond.true22, label %cond.false24, !dbg !11241

cond.true22:                                      ; preds = %cond.end19
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11241
  %base23 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %10, i32 0, i32 0, !dbg !11241
  br label %cond.end25, !dbg !11241

cond.false24:                                     ; preds = %cond.end19
  br label %cond.end25, !dbg !11241

cond.end25:                                       ; preds = %cond.false24, %cond.true22
  %cond26 = phi %struct.VEC_int_base* [ %base23, %cond.true22 ], [ null, %cond.false24 ], !dbg !11241
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11241
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !11241
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !11241
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 0, !dbg !11241
  %rt_int30 = bitcast %union.rtunion_def* %arrayidx29 to i32*, !dbg !11241
  %12 = load i32, i32* %rt_int30, align 8, !dbg !11241
  %call31 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond26, i32 %12), !dbg !11241
  %call32 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond20, i32 %call31), !dbg !11241
  %live_valid_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call32, i32 0, i32 13, !dbg !11241
  %bf.load = load i8, i8* %live_valid_p, align 4, !dbg !11242
  %bf.clear = and i8 %bf.load, -2, !dbg !11242
  store i8 %bf.clear, i8* %live_valid_p, align 4, !dbg !11242
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11243
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !11243
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !11243
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 5, !dbg !11243
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !11243
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11243
  %15 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !11243
  %cmp = icmp eq %struct.rtx_def* %14, %15, !dbg !11243
  br i1 %cmp, label %if.end, label %if.then, !dbg !11245

if.then:                                          ; preds = %cond.end25
  %call36 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !11246
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11248
  %tobool37 = icmp ne %struct.VEC_sel_insn_data_def_heap* %16, null, !dbg !11248
  br i1 %tobool37, label %cond.true38, label %cond.false40, !dbg !11248

cond.true38:                                      ; preds = %if.then
  %17 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11248
  %base39 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %17, i32 0, i32 0, !dbg !11248
  br label %cond.end41, !dbg !11248

cond.false40:                                     ; preds = %if.then
  br label %cond.end41, !dbg !11248

cond.end41:                                       ; preds = %cond.false40, %cond.true38
  %cond42 = phi %struct.VEC_sel_insn_data_def_base* [ %base39, %cond.true38 ], [ null, %cond.false40 ], !dbg !11248
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11248
  %tobool43 = icmp ne %struct.VEC_int_heap* %18, null, !dbg !11248
  br i1 %tobool43, label %cond.true44, label %cond.false46, !dbg !11248

cond.true44:                                      ; preds = %cond.end41
  %19 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11248
  %base45 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %19, i32 0, i32 0, !dbg !11248
  br label %cond.end47, !dbg !11248

cond.false46:                                     ; preds = %cond.end41
  br label %cond.end47, !dbg !11248

cond.end47:                                       ; preds = %cond.false46, %cond.true44
  %cond48 = phi %struct.VEC_int_base* [ %base45, %cond.true44 ], [ null, %cond.false46 ], !dbg !11248
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11248
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !11248
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !11248
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !11248
  %rt_int52 = bitcast %union.rtunion_def* %arrayidx51 to i32*, !dbg !11248
  %21 = load i32, i32* %rt_int52, align 8, !dbg !11248
  %call53 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond48, i32 %21), !dbg !11248
  %call54 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond42, i32 %call53), !dbg !11248
  %analyzed_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call54, i32 0, i32 4, !dbg !11248
  store %struct.bitmap_head_def* %call36, %struct.bitmap_head_def** %analyzed_deps, align 8, !dbg !11249
  %call55 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !11250
  %22 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11251
  %tobool56 = icmp ne %struct.VEC_sel_insn_data_def_heap* %22, null, !dbg !11251
  br i1 %tobool56, label %cond.true57, label %cond.false59, !dbg !11251

cond.true57:                                      ; preds = %cond.end47
  %23 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11251
  %base58 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %23, i32 0, i32 0, !dbg !11251
  br label %cond.end60, !dbg !11251

cond.false59:                                     ; preds = %cond.end47
  br label %cond.end60, !dbg !11251

cond.end60:                                       ; preds = %cond.false59, %cond.true57
  %cond61 = phi %struct.VEC_sel_insn_data_def_base* [ %base58, %cond.true57 ], [ null, %cond.false59 ], !dbg !11251
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11251
  %tobool62 = icmp ne %struct.VEC_int_heap* %24, null, !dbg !11251
  br i1 %tobool62, label %cond.true63, label %cond.false65, !dbg !11251

cond.true63:                                      ; preds = %cond.end60
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11251
  %base64 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !11251
  br label %cond.end66, !dbg !11251

cond.false65:                                     ; preds = %cond.end60
  br label %cond.end66, !dbg !11251

cond.end66:                                       ; preds = %cond.false65, %cond.true63
  %cond67 = phi %struct.VEC_int_base* [ %base64, %cond.true63 ], [ null, %cond.false65 ], !dbg !11251
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11251
  %u68 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !11251
  %fld69 = bitcast %union.u* %u68 to [1 x %union.rtunion_def]*, !dbg !11251
  %arrayidx70 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld69, i64 0, i64 0, !dbg !11251
  %rt_int71 = bitcast %union.rtunion_def* %arrayidx70 to i32*, !dbg !11251
  %27 = load i32, i32* %rt_int71, align 8, !dbg !11251
  %call72 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond67, i32 %27), !dbg !11251
  %call73 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond61, i32 %call72), !dbg !11251
  %found_deps = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call73, i32 0, i32 5, !dbg !11251
  store %struct.bitmap_head_def* %call55, %struct.bitmap_head_def** %found_deps, align 8, !dbg !11252
  %call74 = call %struct.htab* @htab_create(i64 16, i32 (i8*)* @hash_transformed_insns, i32 (i8*, i8*)* @eq_transformed_insns, void (i8*)* @free_transformed_insns), !dbg !11253
  %28 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11254
  %tobool75 = icmp ne %struct.VEC_sel_insn_data_def_heap* %28, null, !dbg !11254
  br i1 %tobool75, label %cond.true76, label %cond.false78, !dbg !11254

cond.true76:                                      ; preds = %cond.end66
  %29 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11254
  %base77 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %29, i32 0, i32 0, !dbg !11254
  br label %cond.end79, !dbg !11254

cond.false78:                                     ; preds = %cond.end66
  br label %cond.end79, !dbg !11254

cond.end79:                                       ; preds = %cond.false78, %cond.true76
  %cond80 = phi %struct.VEC_sel_insn_data_def_base* [ %base77, %cond.true76 ], [ null, %cond.false78 ], !dbg !11254
  %30 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11254
  %tobool81 = icmp ne %struct.VEC_int_heap* %30, null, !dbg !11254
  br i1 %tobool81, label %cond.true82, label %cond.false84, !dbg !11254

cond.true82:                                      ; preds = %cond.end79
  %31 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11254
  %base83 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %31, i32 0, i32 0, !dbg !11254
  br label %cond.end85, !dbg !11254

cond.false84:                                     ; preds = %cond.end79
  br label %cond.end85, !dbg !11254

cond.end85:                                       ; preds = %cond.false84, %cond.true82
  %cond86 = phi %struct.VEC_int_base* [ %base83, %cond.true82 ], [ null, %cond.false84 ], !dbg !11254
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11254
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !11254
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !11254
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !11254
  %rt_int90 = bitcast %union.rtunion_def* %arrayidx89 to i32*, !dbg !11254
  %33 = load i32, i32* %rt_int90, align 8, !dbg !11254
  %call91 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond86, i32 %33), !dbg !11254
  %call92 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond80, i32 %call91), !dbg !11254
  %transformed_insns = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call92, i32 0, i32 7, !dbg !11254
  store %struct.htab* %call74, %struct.htab** %transformed_insns, align 8, !dbg !11255
  %34 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11256
  %tobool93 = icmp ne %struct.VEC_sel_insn_data_def_heap* %34, null, !dbg !11256
  br i1 %tobool93, label %cond.true94, label %cond.false96, !dbg !11256

cond.true94:                                      ; preds = %cond.end85
  %35 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11256
  %base95 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %35, i32 0, i32 0, !dbg !11256
  br label %cond.end97, !dbg !11256

cond.false96:                                     ; preds = %cond.end85
  br label %cond.end97, !dbg !11256

cond.end97:                                       ; preds = %cond.false96, %cond.true94
  %cond98 = phi %struct.VEC_sel_insn_data_def_base* [ %base95, %cond.true94 ], [ null, %cond.false96 ], !dbg !11256
  %36 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11256
  %tobool99 = icmp ne %struct.VEC_int_heap* %36, null, !dbg !11256
  br i1 %tobool99, label %cond.true100, label %cond.false102, !dbg !11256

cond.true100:                                     ; preds = %cond.end97
  %37 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11256
  %base101 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %37, i32 0, i32 0, !dbg !11256
  br label %cond.end103, !dbg !11256

cond.false102:                                    ; preds = %cond.end97
  br label %cond.end103, !dbg !11256

cond.end103:                                      ; preds = %cond.false102, %cond.true100
  %cond104 = phi %struct.VEC_int_base* [ %base101, %cond.true100 ], [ null, %cond.false102 ], !dbg !11256
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11256
  %u105 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !11256
  %fld106 = bitcast %union.u* %u105 to [1 x %union.rtunion_def]*, !dbg !11256
  %arrayidx107 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld106, i64 0, i64 0, !dbg !11256
  %rt_int108 = bitcast %union.rtunion_def* %arrayidx107 to i32*, !dbg !11256
  %39 = load i32, i32* %rt_int108, align 8, !dbg !11256
  %call109 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond104, i32 %39), !dbg !11256
  %call110 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond98, i32 %call109), !dbg !11256
  %deps_context = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call110, i32 0, i32 8, !dbg !11256
  call void @init_deps(%struct.deps* %deps_context, i8 zeroext 1), !dbg !11257
  br label %if.end, !dbg !11258

if.end:                                           ; preds = %cond.end103, %cond.end25
  ret void, !dbg !11259
}

declare dso_local %struct.htab* @htab_create(i64, i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_transformed_insns(i8* %p) #0 !dbg !11260 {
entry:
  %p.addr = alloca i8*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11261, metadata !DIExpression()), !dbg !11262
  %0 = load i8*, i8** %p.addr, align 8, !dbg !11263
  %1 = bitcast i8* %0 to %struct.transformed_insns*, !dbg !11263
  %vinsn_old = getelementptr inbounds %struct.transformed_insns, %struct.transformed_insns* %1, i32 0, i32 0, !dbg !11263
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn_old, align 8, !dbg !11263
  %hash_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 3, !dbg !11263
  %3 = load i32, i32* %hash_rtx, align 4, !dbg !11263
  ret i32 %3, !dbg !11264
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @eq_transformed_insns(i8* %p, i8* %q) #0 !dbg !11265 {
entry:
  %retval = alloca i32, align 4
  %p.addr = alloca i8*, align 8
  %q.addr = alloca i8*, align 8
  %i1 = alloca %struct.rtx_def*, align 8
  %i2 = alloca %struct.rtx_def*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11266, metadata !DIExpression()), !dbg !11267
  store i8* %q, i8** %q.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %q.addr, metadata !11268, metadata !DIExpression()), !dbg !11269
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i1, metadata !11270, metadata !DIExpression()), !dbg !11271
  %0 = load i8*, i8** %p.addr, align 8, !dbg !11272
  %1 = bitcast i8* %0 to %struct.transformed_insns*, !dbg !11272
  %vinsn_old = getelementptr inbounds %struct.transformed_insns, %struct.transformed_insns* %1, i32 0, i32 0, !dbg !11272
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn_old, align 8, !dbg !11272
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 0, !dbg !11272
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11272
  store %struct.rtx_def* %3, %struct.rtx_def** %i1, align 8, !dbg !11271
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %i2, metadata !11273, metadata !DIExpression()), !dbg !11274
  %4 = load i8*, i8** %q.addr, align 8, !dbg !11275
  %5 = bitcast i8* %4 to %struct.transformed_insns*, !dbg !11275
  %vinsn_old1 = getelementptr inbounds %struct.transformed_insns, %struct.transformed_insns* %5, i32 0, i32 0, !dbg !11275
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn_old1, align 8, !dbg !11275
  %insn_rtx2 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 0, !dbg !11275
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx2, align 8, !dbg !11275
  store %struct.rtx_def* %7, %struct.rtx_def** %i2, align 8, !dbg !11274
  %8 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !11276
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !11276
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11276
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11276
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11276
  %9 = load i32, i32* %rt_int, align 8, !dbg !11276
  %10 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !11278
  %u3 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !11278
  %fld4 = bitcast %union.u* %u3 to [1 x %union.rtunion_def]*, !dbg !11278
  %arrayidx5 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld4, i64 0, i64 0, !dbg !11278
  %rt_int6 = bitcast %union.rtunion_def* %arrayidx5 to i32*, !dbg !11278
  %11 = load i32, i32* %rt_int6, align 8, !dbg !11278
  %cmp = icmp eq i32 %9, %11, !dbg !11279
  br i1 %cmp, label %if.then, label %if.end, !dbg !11280

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !11281
  br label %return, !dbg !11281

if.end:                                           ; preds = %entry
  %12 = load %struct.rtx_def*, %struct.rtx_def** %i1, align 8, !dbg !11282
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !11282
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !11282
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 5, !dbg !11282
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !11282
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11282
  %14 = load %struct.rtx_def*, %struct.rtx_def** %i2, align 8, !dbg !11283
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !11283
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !11283
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 5, !dbg !11283
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !11283
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !11283
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %13, %struct.rtx_def* %15), !dbg !11284
  store i32 %call, i32* %retval, align 4, !dbg !11285
  br label %return, !dbg !11285

return:                                           ; preds = %if.end, %if.then
  %16 = load i32, i32* %retval, align 4, !dbg !11286
  ret i32 %16, !dbg !11286
}

; Function Attrs: noinline nounwind uwtable
define internal void @free_transformed_insns(i8* %p) #0 !dbg !11287 {
entry:
  %p.addr = alloca i8*, align 8
  %pti = alloca %struct.transformed_insns*, align 8
  store i8* %p, i8** %p.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %p.addr, metadata !11288, metadata !DIExpression()), !dbg !11289
  call void @llvm.dbg.declare(metadata %struct.transformed_insns** %pti, metadata !11290, metadata !DIExpression()), !dbg !11291
  %0 = load i8*, i8** %p.addr, align 8, !dbg !11292
  %1 = bitcast i8* %0 to %struct.transformed_insns*, !dbg !11293
  store %struct.transformed_insns* %1, %struct.transformed_insns** %pti, align 8, !dbg !11291
  %2 = load %struct.transformed_insns*, %struct.transformed_insns** %pti, align 8, !dbg !11294
  %vinsn_old = getelementptr inbounds %struct.transformed_insns, %struct.transformed_insns* %2, i32 0, i32 0, !dbg !11295
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn_old, align 8, !dbg !11295
  call void @vinsn_detach(%struct.vinsn_def* %3), !dbg !11296
  %4 = load %struct.transformed_insns*, %struct.transformed_insns** %pti, align 8, !dbg !11297
  %vinsn_new = getelementptr inbounds %struct.transformed_insns, %struct.transformed_insns* %4, i32 0, i32 1, !dbg !11298
  %5 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn_new, align 8, !dbg !11298
  call void @vinsn_detach(%struct.vinsn_def* %5), !dbg !11299
  %6 = load %struct.transformed_insns*, %struct.transformed_insns** %pti, align 8, !dbg !11300
  %7 = bitcast %struct.transformed_insns* %6 to i8*, !dbg !11300
  call void @free(i8* %7), !dbg !11301
  ret void, !dbg !11302
}

declare dso_local i8* @vec_heap_p_reserve_exact(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @free_first_time_insn_data(%struct.rtx_def* %insn) #0 !dbg !11303 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11304, metadata !DIExpression()), !dbg !11305
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11306
  %call = call zeroext i8 @first_time_insn_init(%struct.rtx_def* %0), !dbg !11306
  %tobool = icmp ne i8 %call, 0, !dbg !11306
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11306

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2803, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11306
  br label %cond.end, !dbg !11306

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11306
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11307
  call void @free_data_for_scheduled_insn(%struct.rtx_def* %1), !dbg !11308
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11309
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %2, null, !dbg !11309
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !11309

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11309
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %3, i32 0, i32 0, !dbg !11309
  br label %cond.end4, !dbg !11309

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !11309

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !11309
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11309
  %tobool6 = icmp ne %struct.VEC_int_heap* %4, null, !dbg !11309
  br i1 %tobool6, label %cond.true7, label %cond.false9, !dbg !11309

cond.true7:                                       ; preds = %cond.end4
  %5 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11309
  %base8 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %5, i32 0, i32 0, !dbg !11309
  br label %cond.end10, !dbg !11309

cond.false9:                                      ; preds = %cond.end4
  br label %cond.end10, !dbg !11309

cond.end10:                                       ; preds = %cond.false9, %cond.true7
  %cond11 = phi %struct.VEC_int_base* [ %base8, %cond.true7 ], [ null, %cond.false9 ], !dbg !11309
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11309
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !11309
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11309
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11309
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11309
  %7 = load i32, i32* %rt_int, align 8, !dbg !11309
  %call12 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond11, i32 %7), !dbg !11309
  %call13 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond5, i32 %call12), !dbg !11309
  %live = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call13, i32 0, i32 3, !dbg !11309
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %live, align 8, !dbg !11309
  call void @return_regset_to_pool(%struct.bitmap_head_def* %8), !dbg !11310
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11311
  %tobool14 = icmp ne %struct.VEC_sel_insn_data_def_heap* %9, null, !dbg !11311
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11311

cond.true15:                                      ; preds = %cond.end10
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11311
  %base16 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %10, i32 0, i32 0, !dbg !11311
  br label %cond.end18, !dbg !11311

cond.false17:                                     ; preds = %cond.end10
  br label %cond.end18, !dbg !11311

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_insn_data_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11311
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11311
  %tobool20 = icmp ne %struct.VEC_int_heap* %11, null, !dbg !11311
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !11311

cond.true21:                                      ; preds = %cond.end18
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11311
  %base22 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %12, i32 0, i32 0, !dbg !11311
  br label %cond.end24, !dbg !11311

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24, !dbg !11311

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_int_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !11311
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11311
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !11311
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !11311
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 0, !dbg !11311
  %rt_int29 = bitcast %union.rtunion_def* %arrayidx28 to i32*, !dbg !11311
  %14 = load i32, i32* %rt_int29, align 8, !dbg !11311
  %call30 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond25, i32 %14), !dbg !11311
  %call31 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond19, i32 %call30), !dbg !11311
  %live32 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call31, i32 0, i32 3, !dbg !11311
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %live32, align 8, !dbg !11312
  %15 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11313
  %tobool33 = icmp ne %struct.VEC_sel_insn_data_def_heap* %15, null, !dbg !11313
  br i1 %tobool33, label %cond.true34, label %cond.false36, !dbg !11313

cond.true34:                                      ; preds = %cond.end24
  %16 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11313
  %base35 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %16, i32 0, i32 0, !dbg !11313
  br label %cond.end37, !dbg !11313

cond.false36:                                     ; preds = %cond.end24
  br label %cond.end37, !dbg !11313

cond.end37:                                       ; preds = %cond.false36, %cond.true34
  %cond38 = phi %struct.VEC_sel_insn_data_def_base* [ %base35, %cond.true34 ], [ null, %cond.false36 ], !dbg !11313
  %17 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11313
  %tobool39 = icmp ne %struct.VEC_int_heap* %17, null, !dbg !11313
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !11313

cond.true40:                                      ; preds = %cond.end37
  %18 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11313
  %base41 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %18, i32 0, i32 0, !dbg !11313
  br label %cond.end43, !dbg !11313

cond.false42:                                     ; preds = %cond.end37
  br label %cond.end43, !dbg !11313

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_int_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !11313
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11313
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !11313
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !11313
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 0, !dbg !11313
  %rt_int48 = bitcast %union.rtunion_def* %arrayidx47 to i32*, !dbg !11313
  %20 = load i32, i32* %rt_int48, align 8, !dbg !11313
  %call49 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond44, i32 %20), !dbg !11313
  %call50 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond38, i32 %call49), !dbg !11313
  %live_valid_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call50, i32 0, i32 13, !dbg !11313
  %bf.load = load i8, i8* %live_valid_p, align 4, !dbg !11314
  %bf.clear = and i8 %bf.load, -2, !dbg !11314
  store i8 %bf.clear, i8* %live_valid_p, align 4, !dbg !11314
  ret void, !dbg !11315
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_start_insn(%struct.rtx_def* %insn) #0 !dbg !11316 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11317, metadata !DIExpression()), !dbg !11318
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11319
  %cmp = icmp eq i32 %0, 3, !dbg !11319
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11319

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3006, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11319
  br label %cond.end, !dbg !11319

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11319

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11319
  store i32 0, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11320
  ret void, !dbg !11321
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_finish_insn() #0 !dbg !11322 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11323
  %cmp = icmp eq i32 %0, 0, !dbg !11323
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11323

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3015, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11323
  br label %cond.end, !dbg !11323

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11323

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11323
  store i32 3, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11324
  ret void, !dbg !11325
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_start_lhs(%struct.rtx_def* %lhs) #0 !dbg !11326 {
entry:
  %lhs.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %lhs, %struct.rtx_def** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs.addr, metadata !11327, metadata !DIExpression()), !dbg !11328
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11329
  %cmp = icmp eq i32 %0, 0, !dbg !11329
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11329

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3024, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11329
  br label %cond.end, !dbg !11329

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11329

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11329
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11330
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 1, !dbg !11330
  %lhs1 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 1, !dbg !11330
  %2 = load %struct.rtx_def*, %struct.rtx_def** %lhs1, align 8, !dbg !11330
  %cmp2 = icmp ne %struct.rtx_def* %2, null, !dbg !11332
  br i1 %cmp2, label %if.then, label %if.end, !dbg !11333

if.then:                                          ; preds = %cond.end
  store i32 1, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11334
  br label %if.end, !dbg !11335

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !11336
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_finish_lhs() #0 !dbg !11337 {
entry:
  store i32 0, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11338
  ret void, !dbg !11339
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_start_rhs(%struct.rtx_def* %rhs) #0 !dbg !11340 {
entry:
  %rhs.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %rhs, %struct.rtx_def** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs.addr, metadata !11341, metadata !DIExpression()), !dbg !11342
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11343
  %cmp = icmp eq i32 %0, 0, !dbg !11343
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !11343

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3041, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11343
  br label %cond.end, !dbg !11343

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11343

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11343
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11344
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 1, !dbg !11344
  %rhs1 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 2, !dbg !11344
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rhs1, align 8, !dbg !11344
  %cmp2 = icmp ne %struct.rtx_def* %2, null, !dbg !11346
  br i1 %cmp2, label %if.then, label %if.end, !dbg !11347

if.then:                                          ; preds = %cond.end
  store i32 2, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11348
  br label %if.end, !dbg !11349

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !11350
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_finish_rhs() #0 !dbg !11351 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11352
  %cmp = icmp eq i32 %0, 2, !dbg !11352
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !11352

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11352
  %cmp1 = icmp eq i32 %1, 0, !dbg !11352
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !11352

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3052, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11352
  br label %cond.end, !dbg !11352

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !11352

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11352
  store i32 0, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11353
  ret void, !dbg !11354
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_note_reg_set(i32 %regno) #0 !dbg !11355 {
entry:
  %regno.addr = alloca i32, align 4
  %reg_last = alloca %struct.deps_reg*, align 8
  %dsp = alloca i32*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !11356, metadata !DIExpression()), !dbg !11357
  call void @llvm.dbg.declare(metadata %struct.deps_reg** %reg_last, metadata !11358, metadata !DIExpression()), !dbg !11359
  %0 = load %struct.deps*, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !11360
  %reg_last1 = getelementptr inbounds %struct.deps, %struct.deps* %0, i32 0, i32 14, !dbg !11361
  %1 = load %struct.deps_reg*, %struct.deps_reg** %reg_last1, align 8, !dbg !11361
  %2 = load i32, i32* %regno.addr, align 4, !dbg !11362
  %idxprom = sext i32 %2 to i64, !dbg !11363
  %arrayidx = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %1, i64 %idxprom, !dbg !11363
  store %struct.deps_reg* %arrayidx, %struct.deps_reg** %reg_last, align 8, !dbg !11359
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11364
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11366
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 0, !dbg !11366
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11366
  %call = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %3, %struct.rtx_def* %5), !dbg !11367
  %tobool = icmp ne i8 %call, 0, !dbg !11367
  br i1 %tobool, label %if.end11, label %if.then, !dbg !11368

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32** %dsp, metadata !11369, metadata !DIExpression()), !dbg !11371
  %6 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11372
  %idxprom2 = zext i32 %6 to i64, !dbg !11373
  %arrayidx3 = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom2, !dbg !11373
  store i32* %arrayidx3, i32** %dsp, align 8, !dbg !11371
  %7 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11374
  %sets = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %7, i32 0, i32 1, !dbg !11376
  %8 = load %struct.rtx_def*, %struct.rtx_def** %sets, align 8, !dbg !11376
  %cmp = icmp ne %struct.rtx_def* %8, null, !dbg !11377
  br i1 %cmp, label %if.then5, label %lor.lhs.false, !dbg !11378

lor.lhs.false:                                    ; preds = %if.then
  %9 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11379
  %clobbers = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %9, i32 0, i32 3, !dbg !11380
  %10 = load %struct.rtx_def*, %struct.rtx_def** %clobbers, align 8, !dbg !11380
  %cmp4 = icmp ne %struct.rtx_def* %10, null, !dbg !11381
  br i1 %cmp4, label %if.then5, label %if.end, !dbg !11382

if.then5:                                         ; preds = %lor.lhs.false, %if.then
  %11 = load i32*, i32** %dsp, align 8, !dbg !11383
  %12 = load i32, i32* %11, align 4, !dbg !11384
  %and = and i32 %12, -16777216, !dbg !11385
  %or = or i32 %and, 33554432, !dbg !11386
  %13 = load i32*, i32** %dsp, align 8, !dbg !11387
  store i32 %or, i32* %13, align 4, !dbg !11388
  br label %if.end, !dbg !11389

if.end:                                           ; preds = %if.then5, %lor.lhs.false
  %14 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11390
  %uses = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %14, i32 0, i32 0, !dbg !11392
  %15 = load %struct.rtx_def*, %struct.rtx_def** %uses, align 8, !dbg !11392
  %tobool6 = icmp ne %struct.rtx_def* %15, null, !dbg !11390
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !11393

if.then7:                                         ; preds = %if.end
  %16 = load i32*, i32** %dsp, align 8, !dbg !11394
  %17 = load i32, i32* %16, align 4, !dbg !11395
  %and8 = and i32 %17, -16777216, !dbg !11396
  %or9 = or i32 %and8, 67108864, !dbg !11397
  %18 = load i32*, i32** %dsp, align 8, !dbg !11398
  store i32 %or9, i32* %18, align 4, !dbg !11399
  br label %if.end10, !dbg !11400

if.end10:                                         ; preds = %if.then7, %if.end
  br label %if.end11, !dbg !11401

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !11402
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_note_reg_clobber(i32 %regno) #0 !dbg !11403 {
entry:
  %regno.addr = alloca i32, align 4
  %reg_last = alloca %struct.deps_reg*, align 8
  %dsp = alloca i32*, align 8
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !11404, metadata !DIExpression()), !dbg !11405
  call void @llvm.dbg.declare(metadata %struct.deps_reg** %reg_last, metadata !11406, metadata !DIExpression()), !dbg !11407
  %0 = load %struct.deps*, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !11408
  %reg_last1 = getelementptr inbounds %struct.deps, %struct.deps* %0, i32 0, i32 14, !dbg !11409
  %1 = load %struct.deps_reg*, %struct.deps_reg** %reg_last1, align 8, !dbg !11409
  %2 = load i32, i32* %regno.addr, align 4, !dbg !11410
  %idxprom = sext i32 %2 to i64, !dbg !11411
  %arrayidx = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %1, i64 %idxprom, !dbg !11411
  store %struct.deps_reg* %arrayidx, %struct.deps_reg** %reg_last, align 8, !dbg !11407
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11412
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11414
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 0, !dbg !11414
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11414
  %call = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %3, %struct.rtx_def* %5), !dbg !11415
  %tobool = icmp ne i8 %call, 0, !dbg !11415
  br i1 %tobool, label %if.end11, label %if.then, !dbg !11416

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32** %dsp, metadata !11417, metadata !DIExpression()), !dbg !11419
  %6 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11420
  %idxprom2 = zext i32 %6 to i64, !dbg !11421
  %arrayidx3 = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom2, !dbg !11421
  store i32* %arrayidx3, i32** %dsp, align 8, !dbg !11419
  %7 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11422
  %sets = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %7, i32 0, i32 1, !dbg !11424
  %8 = load %struct.rtx_def*, %struct.rtx_def** %sets, align 8, !dbg !11424
  %tobool4 = icmp ne %struct.rtx_def* %8, null, !dbg !11422
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !11425

if.then5:                                         ; preds = %if.then
  %9 = load i32*, i32** %dsp, align 8, !dbg !11426
  %10 = load i32, i32* %9, align 4, !dbg !11427
  %and = and i32 %10, -16777216, !dbg !11428
  %or = or i32 %and, 33554432, !dbg !11429
  %11 = load i32*, i32** %dsp, align 8, !dbg !11430
  store i32 %or, i32* %11, align 4, !dbg !11431
  br label %if.end, !dbg !11432

if.end:                                           ; preds = %if.then5, %if.then
  %12 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11433
  %uses = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %12, i32 0, i32 0, !dbg !11435
  %13 = load %struct.rtx_def*, %struct.rtx_def** %uses, align 8, !dbg !11435
  %tobool6 = icmp ne %struct.rtx_def* %13, null, !dbg !11433
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !11436

if.then7:                                         ; preds = %if.end
  %14 = load i32*, i32** %dsp, align 8, !dbg !11437
  %15 = load i32, i32* %14, align 4, !dbg !11438
  %and8 = and i32 %15, -16777216, !dbg !11439
  %or9 = or i32 %and8, 67108864, !dbg !11440
  %16 = load i32*, i32** %dsp, align 8, !dbg !11441
  store i32 %or9, i32* %16, align 4, !dbg !11442
  br label %if.end10, !dbg !11443

if.end10:                                         ; preds = %if.then7, %if.end
  br label %if.end11, !dbg !11444

if.end11:                                         ; preds = %if.end10, %entry
  ret void, !dbg !11445
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_note_reg_use(i32 %regno) #0 !dbg !11446 {
entry:
  %regno.addr = alloca i32, align 4
  %reg_last = alloca %struct.deps_reg*, align 8
  %dsp = alloca i32*, align 8
  %pro_spec_checked_ds = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !11447, metadata !DIExpression()), !dbg !11448
  call void @llvm.dbg.declare(metadata %struct.deps_reg** %reg_last, metadata !11449, metadata !DIExpression()), !dbg !11450
  %0 = load %struct.deps*, %struct.deps** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 0), align 8, !dbg !11451
  %reg_last1 = getelementptr inbounds %struct.deps, %struct.deps* %0, i32 0, i32 14, !dbg !11452
  %1 = load %struct.deps_reg*, %struct.deps_reg** %reg_last1, align 8, !dbg !11452
  %2 = load i32, i32* %regno.addr, align 4, !dbg !11453
  %idxprom = sext i32 %2 to i64, !dbg !11454
  %arrayidx = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %1, i64 %idxprom, !dbg !11454
  store %struct.deps_reg* %arrayidx, %struct.deps_reg** %reg_last, align 8, !dbg !11450
  %3 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11455
  %4 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11457
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %4, i32 0, i32 0, !dbg !11457
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11457
  %call = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %3, %struct.rtx_def* %5), !dbg !11458
  %tobool = icmp ne i8 %call, 0, !dbg !11458
  br i1 %tobool, label %if.end28, label %if.then, !dbg !11459

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32** %dsp, metadata !11460, metadata !DIExpression()), !dbg !11462
  %6 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11463
  %idxprom2 = zext i32 %6 to i64, !dbg !11464
  %arrayidx3 = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom2, !dbg !11464
  store i32* %arrayidx3, i32** %dsp, align 8, !dbg !11462
  %7 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11465
  %sets = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %7, i32 0, i32 1, !dbg !11467
  %8 = load %struct.rtx_def*, %struct.rtx_def** %sets, align 8, !dbg !11467
  %tobool4 = icmp ne %struct.rtx_def* %8, null, !dbg !11465
  br i1 %tobool4, label %if.then5, label %if.end, !dbg !11468

if.then5:                                         ; preds = %if.then
  %9 = load i32*, i32** %dsp, align 8, !dbg !11469
  %10 = load i32, i32* %9, align 4, !dbg !11470
  %and = and i32 %10, -16777216, !dbg !11471
  %or = or i32 %and, 16777216, !dbg !11472
  %11 = load i32*, i32** %dsp, align 8, !dbg !11473
  store i32 %or, i32* %11, align 4, !dbg !11474
  br label %if.end, !dbg !11475

if.end:                                           ; preds = %if.then5, %if.then
  %12 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11476
  %clobbers = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %12, i32 0, i32 3, !dbg !11478
  %13 = load %struct.rtx_def*, %struct.rtx_def** %clobbers, align 8, !dbg !11478
  %tobool6 = icmp ne %struct.rtx_def* %13, null, !dbg !11476
  br i1 %tobool6, label %if.then7, label %if.end10, !dbg !11479

if.then7:                                         ; preds = %if.end
  %14 = load i32*, i32** %dsp, align 8, !dbg !11480
  %15 = load i32, i32* %14, align 4, !dbg !11481
  %and8 = and i32 %15, -16777216, !dbg !11482
  %or9 = or i32 %and8, 67108864, !dbg !11483
  %16 = load i32*, i32** %dsp, align 8, !dbg !11484
  store i32 %or9, i32* %16, align 4, !dbg !11485
  br label %if.end10, !dbg !11486

if.end10:                                         ; preds = %if.then7, %if.end
  %17 = load %struct.deps_reg*, %struct.deps_reg** %reg_last, align 8, !dbg !11487
  %uses = getelementptr inbounds %struct.deps_reg, %struct.deps_reg* %17, i32 0, i32 0, !dbg !11489
  %18 = load %struct.rtx_def*, %struct.rtx_def** %uses, align 8, !dbg !11489
  %tobool11 = icmp ne %struct.rtx_def* %18, null, !dbg !11487
  br i1 %tobool11, label %if.then12, label %if.end27, !dbg !11490

if.then12:                                        ; preds = %if.end10
  call void @llvm.dbg.declare(metadata i32* %pro_spec_checked_ds, metadata !11491, metadata !DIExpression()), !dbg !11493
  %19 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11494
  %tobool13 = icmp ne %struct.VEC_sel_insn_data_def_heap* %19, null, !dbg !11494
  br i1 %tobool13, label %cond.true, label %cond.false, !dbg !11494

cond.true:                                        ; preds = %if.then12
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11494
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %20, i32 0, i32 0, !dbg !11494
  br label %cond.end, !dbg !11494

cond.false:                                       ; preds = %if.then12
  br label %cond.end, !dbg !11494

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11494
  %21 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11494
  %tobool14 = icmp ne %struct.VEC_int_heap* %21, null, !dbg !11494
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11494

cond.true15:                                      ; preds = %cond.end
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11494
  %base16 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %22, i32 0, i32 0, !dbg !11494
  br label %cond.end18, !dbg !11494

cond.false17:                                     ; preds = %cond.end
  br label %cond.end18, !dbg !11494

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_int_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11494
  %23 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11494
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !11494
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11494
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11494
  %rt_int = bitcast %union.rtunion_def* %arrayidx20 to i32*, !dbg !11494
  %24 = load i32, i32* %rt_int, align 8, !dbg !11494
  %call21 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond19, i32 %24), !dbg !11494
  %call22 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call21), !dbg !11494
  %spec_checked_ds = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call22, i32 0, i32 12, !dbg !11494
  %25 = load i32, i32* %spec_checked_ds, align 8, !dbg !11494
  store i32 %25, i32* %pro_spec_checked_ds, align 4, !dbg !11495
  %26 = load i32, i32* %pro_spec_checked_ds, align 4, !dbg !11496
  %call23 = call i32 @ds_get_max_dep_weak(i32 %26), !dbg !11497
  store i32 %call23, i32* %pro_spec_checked_ds, align 4, !dbg !11498
  %27 = load i32, i32* %pro_spec_checked_ds, align 4, !dbg !11499
  %cmp = icmp ne i32 %27, 0, !dbg !11501
  br i1 %cmp, label %if.then24, label %if.end26, !dbg !11502

if.then24:                                        ; preds = %cond.end18
  %28 = load i32*, i32** %dsp, align 8, !dbg !11503
  %29 = load i32, i32* %28, align 4, !dbg !11504
  %30 = load i32, i32* %pro_spec_checked_ds, align 4, !dbg !11505
  %call25 = call i32 @ds_full_merge(i32 %29, i32 %30, %struct.rtx_def* null, %struct.rtx_def* null), !dbg !11506
  %31 = load i32*, i32** %dsp, align 8, !dbg !11507
  store i32 %call25, i32* %31, align 4, !dbg !11508
  br label %if.end26, !dbg !11509

if.end26:                                         ; preds = %if.then24, %cond.end18
  br label %if.end27, !dbg !11510

if.end27:                                         ; preds = %if.end26, %if.end10
  br label %if.end28, !dbg !11511

if.end28:                                         ; preds = %if.end27, %entry
  ret void, !dbg !11512
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_note_mem_dep(%struct.rtx_def* %mem, %struct.rtx_def* %pending_mem, %struct.rtx_def* %pending_insn, i32 %ds) #0 !dbg !11513 {
entry:
  %mem.addr = alloca %struct.rtx_def*, align 8
  %pending_mem.addr = alloca %struct.rtx_def*, align 8
  %pending_insn.addr = alloca %struct.rtx_def*, align 8
  %ds.addr = alloca i32, align 4
  %dsp = alloca i32*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !11516, metadata !DIExpression()), !dbg !11517
  store %struct.rtx_def* %pending_mem, %struct.rtx_def** %pending_mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pending_mem.addr, metadata !11518, metadata !DIExpression()), !dbg !11519
  store %struct.rtx_def* %pending_insn, %struct.rtx_def** %pending_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pending_insn.addr, metadata !11520, metadata !DIExpression()), !dbg !11521
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !11522, metadata !DIExpression()), !dbg !11523
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11524
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11526
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 0, !dbg !11526
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11526
  %call = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %0, %struct.rtx_def* %2), !dbg !11527
  %tobool = icmp ne i8 %call, 0, !dbg !11527
  br i1 %tobool, label %if.end, label %if.then, !dbg !11528

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32** %dsp, metadata !11529, metadata !DIExpression()), !dbg !11531
  %3 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11532
  %idxprom = zext i32 %3 to i64, !dbg !11533
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom, !dbg !11533
  store i32* %arrayidx, i32** %dsp, align 8, !dbg !11531
  %4 = load i32, i32* %ds.addr, align 4, !dbg !11534
  %5 = load i32*, i32** %dsp, align 8, !dbg !11535
  %6 = load i32, i32* %5, align 4, !dbg !11536
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pending_mem.addr, align 8, !dbg !11537
  %8 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !11538
  %call1 = call i32 @ds_full_merge(i32 %4, i32 %6, %struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !11539
  %9 = load i32*, i32** %dsp, align 8, !dbg !11540
  store i32 %call1, i32* %9, align 4, !dbg !11541
  br label %if.end, !dbg !11542

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !11543
}

; Function Attrs: noinline nounwind uwtable
define internal void @has_dependence_note_dep(%struct.rtx_def* %pro, i32 %ds) #0 !dbg !11544 {
entry:
  %pro.addr = alloca %struct.rtx_def*, align 8
  %ds.addr = alloca i32, align 4
  %dsp = alloca i32*, align 8
  store %struct.rtx_def* %pro, %struct.rtx_def** %pro.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro.addr, metadata !11547, metadata !DIExpression()), !dbg !11548
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !11549, metadata !DIExpression()), !dbg !11550
  %0 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 2), align 8, !dbg !11551
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 3), align 8, !dbg !11553
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 0, !dbg !11553
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11553
  %call = call zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def* %0, %struct.rtx_def* %2), !dbg !11554
  %tobool = icmp ne i8 %call, 0, !dbg !11554
  br i1 %tobool, label %if.end, label %if.then, !dbg !11555

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32** %dsp, metadata !11556, metadata !DIExpression()), !dbg !11558
  %3 = load i32, i32* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 1), align 8, !dbg !11559
  %idxprom = zext i32 %3 to i64, !dbg !11560
  %arrayidx = getelementptr inbounds [3 x i32], [3 x i32]* getelementptr inbounds (%struct.anon.2, %struct.anon.2* @has_dependence_data, i32 0, i32 4), i64 0, i64 %idxprom, !dbg !11560
  store i32* %arrayidx, i32** %dsp, align 8, !dbg !11558
  %4 = load i32, i32* %ds.addr, align 4, !dbg !11561
  %5 = load i32*, i32** %dsp, align 8, !dbg !11562
  %6 = load i32, i32* %5, align 4, !dbg !11563
  %call1 = call i32 @ds_full_merge(i32 %4, i32 %6, %struct.rtx_def* null, %struct.rtx_def* null), !dbg !11564
  %7 = load i32*, i32** %dsp, align 8, !dbg !11565
  store i32 %call1, i32* %7, align 4, !dbg !11566
  br label %if.end, !dbg !11567

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !11568
}

declare dso_local zeroext i8 @sched_insns_conditions_mutex_p(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @tick_check_note_mem_dep(%struct.rtx_def* %mem1, %struct.rtx_def* %mem2, %struct.rtx_def* %pro, i32 %ds) #0 !dbg !11569 {
entry:
  %mem1.addr = alloca %struct.rtx_def*, align 8
  %mem2.addr = alloca %struct.rtx_def*, align 8
  %pro.addr = alloca %struct.rtx_def*, align 8
  %ds.addr = alloca i32, align 4
  %dw = alloca i32, align 4
  store %struct.rtx_def* %mem1, %struct.rtx_def** %mem1.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem1.addr, metadata !11570, metadata !DIExpression()), !dbg !11571
  store %struct.rtx_def* %mem2, %struct.rtx_def** %mem2.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem2.addr, metadata !11572, metadata !DIExpression()), !dbg !11573
  store %struct.rtx_def* %pro, %struct.rtx_def** %pro.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro.addr, metadata !11574, metadata !DIExpression()), !dbg !11575
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !11576, metadata !DIExpression()), !dbg !11577
  call void @llvm.dbg.declare(metadata i32* %dw, metadata !11578, metadata !DIExpression()), !dbg !11580
  %0 = load i32, i32* %ds.addr, align 4, !dbg !11581
  %call = call i32 @ds_to_dt(i32 %0), !dbg !11582
  %cmp = icmp eq i32 %call, 0, !dbg !11583
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !11582

cond.true:                                        ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %mem1.addr, align 8, !dbg !11584
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem2.addr, align 8, !dbg !11585
  %call1 = call i32 @estimate_dep_weak(%struct.rtx_def* %1, %struct.rtx_def* %2), !dbg !11586
  br label %cond.end, !dbg !11582

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11582

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call1, %cond.true ], [ 0, %cond.false ], !dbg !11582
  store i32 %cond, i32* %dw, align 4, !dbg !11587
  %3 = load %struct.rtx_def*, %struct.rtx_def** %pro.addr, align 8, !dbg !11588
  %4 = load i32, i32* %ds.addr, align 4, !dbg !11589
  %5 = load i32, i32* %dw, align 4, !dbg !11590
  call void @tick_check_dep_with_dw(%struct.rtx_def* %3, i32 %4, i32 %5), !dbg !11591
  ret void, !dbg !11592
}

; Function Attrs: noinline nounwind uwtable
define internal void @tick_check_note_dep(%struct.rtx_def* %pro, i32 %ds) #0 !dbg !11593 {
entry:
  %pro.addr = alloca %struct.rtx_def*, align 8
  %ds.addr = alloca i32, align 4
  store %struct.rtx_def* %pro, %struct.rtx_def** %pro.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro.addr, metadata !11594, metadata !DIExpression()), !dbg !11595
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !11596, metadata !DIExpression()), !dbg !11597
  %0 = load %struct.rtx_def*, %struct.rtx_def** %pro.addr, align 8, !dbg !11598
  %1 = load i32, i32* %ds.addr, align 4, !dbg !11599
  call void @tick_check_dep_with_dw(%struct.rtx_def* %0, i32 %1, i32 0), !dbg !11600
  ret void, !dbg !11601
}

declare dso_local i32 @ds_to_dt(i32) #2

declare dso_local i32 @estimate_dep_weak(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @tick_check_dep_with_dw(%struct.rtx_def* %pro_insn, i32 %ds, i32 %dw) #0 !dbg !11602 {
entry:
  %pro_insn.addr = alloca %struct.rtx_def*, align 8
  %ds.addr = alloca i32, align 4
  %dw.addr = alloca i32, align 4
  %con_expr = alloca %struct._expr*, align 8
  %con_insn = alloca %struct.rtx_def*, align 8
  %dt = alloca i32, align 4
  %tick = alloca i32, align 4
  %_dep = alloca %struct._dep, align 8
  %dep = alloca %struct._dep*, align 8
  store %struct.rtx_def* %pro_insn, %struct.rtx_def** %pro_insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pro_insn.addr, metadata !11605, metadata !DIExpression()), !dbg !11606
  store i32 %ds, i32* %ds.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ds.addr, metadata !11607, metadata !DIExpression()), !dbg !11608
  store i32 %dw, i32* %dw.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %dw.addr, metadata !11609, metadata !DIExpression()), !dbg !11610
  call void @llvm.dbg.declare(metadata %struct._expr** %con_expr, metadata !11611, metadata !DIExpression()), !dbg !11612
  %0 = load %struct._expr*, %struct._expr** getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 0), align 8, !dbg !11613
  store %struct._expr* %0, %struct._expr** %con_expr, align 8, !dbg !11612
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %con_insn, metadata !11614, metadata !DIExpression()), !dbg !11615
  %1 = load %struct._expr*, %struct._expr** %con_expr, align 8, !dbg !11616
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %1, i32 0, i32 0, !dbg !11616
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !11616
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 0, !dbg !11616
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx, align 8, !dbg !11616
  store %struct.rtx_def* %3, %struct.rtx_def** %con_insn, align 8, !dbg !11615
  %4 = load %struct.rtx_def*, %struct.rtx_def** %con_insn, align 8, !dbg !11617
  %5 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11619
  %cmp = icmp ne %struct.rtx_def* %4, %5, !dbg !11620
  br i1 %cmp, label %if.then, label %if.end74, !dbg !11621

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %dt, metadata !11622, metadata !DIExpression()), !dbg !11624
  call void @llvm.dbg.declare(metadata i32* %tick, metadata !11625, metadata !DIExpression()), !dbg !11626
  %6 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11627
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !11627
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11627
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !11627
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !11627
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11627
  %tobool = icmp ne %struct.rtx_def* %7, null, !dbg !11627
  br i1 %tobool, label %land.lhs.true, label %if.then19, !dbg !11627

land.lhs.true:                                    ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11627
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !11627
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !11627
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 2, !dbg !11627
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !11627
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !11627
  %tobool5 = icmp ne %struct.rtx_def* %9, null, !dbg !11627
  br i1 %tobool5, label %lor.lhs.false, label %if.then19, !dbg !11629

lor.lhs.false:                                    ; preds = %land.lhs.true
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11630
  %tobool6 = icmp ne %struct.VEC_sel_insn_data_def_heap* %10, null, !dbg !11630
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !11630

cond.true:                                        ; preds = %lor.lhs.false
  %11 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11630
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %11, i32 0, i32 0, !dbg !11630
  br label %cond.end, !dbg !11630

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !11630

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11630
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11630
  %tobool7 = icmp ne %struct.VEC_int_heap* %12, null, !dbg !11630
  br i1 %tobool7, label %cond.true8, label %cond.false10, !dbg !11630

cond.true8:                                       ; preds = %cond.end
  %13 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11630
  %base9 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %13, i32 0, i32 0, !dbg !11630
  br label %cond.end11, !dbg !11630

cond.false10:                                     ; preds = %cond.end
  br label %cond.end11, !dbg !11630

cond.end11:                                       ; preds = %cond.false10, %cond.true8
  %cond12 = phi %struct.VEC_int_base* [ %base9, %cond.true8 ], [ null, %cond.false10 ], !dbg !11630
  %14 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11630
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !11630
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !11630
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !11630
  %rt_int = bitcast %union.rtunion_def* %arrayidx15 to i32*, !dbg !11630
  %15 = load i32, i32* %rt_int, align 8, !dbg !11630
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond12, i32 %15), !dbg !11630
  %call16 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !11630
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call16, i32 0, i32 0, !dbg !11630
  %sched_times = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 5, !dbg !11630
  %16 = load i32, i32* %sched_times, align 8, !dbg !11630
  %17 = load %struct._expr*, %struct._expr** %con_expr, align 8, !dbg !11631
  %sched_times17 = getelementptr inbounds %struct._expr, %struct._expr* %17, i32 0, i32 5, !dbg !11631
  %18 = load i32, i32* %sched_times17, align 8, !dbg !11631
  %sub = sub nsw i32 %16, %18, !dbg !11632
  %cmp18 = icmp sgt i32 %sub, 1, !dbg !11633
  br i1 %cmp18, label %if.then19, label %if.end, !dbg !11634

if.then19:                                        ; preds = %cond.end11, %land.lhs.true, %if.then
  br label %if.end74, !dbg !11635

if.end:                                           ; preds = %cond.end11
  %19 = load i32, i32* %ds.addr, align 4, !dbg !11636
  %call20 = call i32 @ds_to_dt(i32 %19), !dbg !11637
  store i32 %call20, i32* %dt, align 4, !dbg !11638
  %20 = load i32, i32* %dt, align 4, !dbg !11639
  %cmp21 = icmp eq i32 %20, 0, !dbg !11641
  br i1 %cmp21, label %if.then22, label %if.end23, !dbg !11642

if.then22:                                        ; preds = %if.end
  store i8 1, i8* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 2), align 4, !dbg !11643
  br label %if.end23, !dbg !11644

if.end23:                                         ; preds = %if.then22, %if.end
  %21 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11645
  %tobool24 = icmp ne %struct.VEC_sel_insn_data_def_heap* %21, null, !dbg !11645
  br i1 %tobool24, label %cond.true25, label %cond.false27, !dbg !11645

cond.true25:                                      ; preds = %if.end23
  %22 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11645
  %base26 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %22, i32 0, i32 0, !dbg !11645
  br label %cond.end28, !dbg !11645

cond.false27:                                     ; preds = %if.end23
  br label %cond.end28, !dbg !11645

cond.end28:                                       ; preds = %cond.false27, %cond.true25
  %cond29 = phi %struct.VEC_sel_insn_data_def_base* [ %base26, %cond.true25 ], [ null, %cond.false27 ], !dbg !11645
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11645
  %tobool30 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !11645
  br i1 %tobool30, label %cond.true31, label %cond.false33, !dbg !11645

cond.true31:                                      ; preds = %cond.end28
  %24 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11645
  %base32 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %24, i32 0, i32 0, !dbg !11645
  br label %cond.end34, !dbg !11645

cond.false33:                                     ; preds = %cond.end28
  br label %cond.end34, !dbg !11645

cond.end34:                                       ; preds = %cond.false33, %cond.true31
  %cond35 = phi %struct.VEC_int_base* [ %base32, %cond.true31 ], [ null, %cond.false33 ], !dbg !11645
  %25 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11645
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !11645
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !11645
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !11645
  %rt_int39 = bitcast %union.rtunion_def* %arrayidx38 to i32*, !dbg !11645
  %26 = load i32, i32* %rt_int39, align 8, !dbg !11645
  %call40 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond35, i32 %26), !dbg !11645
  %call41 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond29, i32 %call40), !dbg !11645
  %sched_cycle = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call41, i32 0, i32 10, !dbg !11645
  %27 = load i32, i32* %sched_cycle, align 8, !dbg !11645
  %cmp42 = icmp sgt i32 %27, 0, !dbg !11645
  br i1 %cmp42, label %cond.false44, label %cond.true43, !dbg !11645

cond.true43:                                      ; preds = %cond.end34
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11645
  br label %cond.end45, !dbg !11645

cond.false44:                                     ; preds = %cond.end34
  br label %cond.end45, !dbg !11645

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !11645
  call void @llvm.dbg.declare(metadata %struct._dep* %_dep, metadata !11646, metadata !DIExpression()), !dbg !11649
  call void @llvm.dbg.declare(metadata %struct._dep** %dep, metadata !11650, metadata !DIExpression()), !dbg !11652
  store %struct._dep* %_dep, %struct._dep** %dep, align 8, !dbg !11652
  %28 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !11653
  %29 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11654
  %30 = load %struct.rtx_def*, %struct.rtx_def** %con_insn, align 8, !dbg !11655
  %31 = load i32, i32* %dt, align 4, !dbg !11656
  call void @init_dep(%struct._dep* %28, %struct.rtx_def* %29, %struct.rtx_def* %30, i32 %31), !dbg !11657
  %32 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11658
  %tobool47 = icmp ne %struct.VEC_sel_insn_data_def_heap* %32, null, !dbg !11658
  br i1 %tobool47, label %cond.true48, label %cond.false50, !dbg !11658

cond.true48:                                      ; preds = %cond.end45
  %33 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11658
  %base49 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %33, i32 0, i32 0, !dbg !11658
  br label %cond.end51, !dbg !11658

cond.false50:                                     ; preds = %cond.end45
  br label %cond.end51, !dbg !11658

cond.end51:                                       ; preds = %cond.false50, %cond.true48
  %cond52 = phi %struct.VEC_sel_insn_data_def_base* [ %base49, %cond.true48 ], [ null, %cond.false50 ], !dbg !11658
  %34 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11658
  %tobool53 = icmp ne %struct.VEC_int_heap* %34, null, !dbg !11658
  br i1 %tobool53, label %cond.true54, label %cond.false56, !dbg !11658

cond.true54:                                      ; preds = %cond.end51
  %35 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11658
  %base55 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %35, i32 0, i32 0, !dbg !11658
  br label %cond.end57, !dbg !11658

cond.false56:                                     ; preds = %cond.end51
  br label %cond.end57, !dbg !11658

cond.end57:                                       ; preds = %cond.false56, %cond.true54
  %cond58 = phi %struct.VEC_int_base* [ %base55, %cond.true54 ], [ null, %cond.false56 ], !dbg !11658
  %36 = load %struct.rtx_def*, %struct.rtx_def** %pro_insn.addr, align 8, !dbg !11658
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !11658
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !11658
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 0, !dbg !11658
  %rt_int62 = bitcast %union.rtunion_def* %arrayidx61 to i32*, !dbg !11658
  %37 = load i32, i32* %rt_int62, align 8, !dbg !11658
  %call63 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond58, i32 %37), !dbg !11658
  %call64 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond52, i32 %call63), !dbg !11658
  %sched_cycle65 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call64, i32 0, i32 10, !dbg !11658
  %38 = load i32, i32* %sched_cycle65, align 8, !dbg !11658
  %39 = load %struct._dep*, %struct._dep** %dep, align 8, !dbg !11659
  %40 = load i32, i32* %dw.addr, align 4, !dbg !11660
  %call66 = call i32 @dep_cost_1(%struct._dep* %39, i32 %40), !dbg !11661
  %add = add nsw i32 %38, %call66, !dbg !11662
  store i32 %add, i32* %tick, align 4, !dbg !11663
  %41 = load i32, i32* %tick, align 4, !dbg !11664
  %42 = load i32, i32* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 1), align 8, !dbg !11666
  %cmp67 = icmp sgt i32 %41, %42, !dbg !11667
  br i1 %cmp67, label %land.lhs.true68, label %if.end73, !dbg !11668

land.lhs.true68:                                  ; preds = %cond.end57
  %43 = load i32, i32* %dt, align 4, !dbg !11669
  %cmp69 = icmp eq i32 %43, 0, !dbg !11670
  br i1 %cmp69, label %if.then72, label %lor.lhs.false70, !dbg !11671

lor.lhs.false70:                                  ; preds = %land.lhs.true68
  %44 = load i8, i8* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 2), align 4, !dbg !11672
  %tobool71 = icmp ne i8 %44, 0, !dbg !11673
  br i1 %tobool71, label %if.end73, label %if.then72, !dbg !11674

if.then72:                                        ; preds = %lor.lhs.false70, %land.lhs.true68
  %45 = load i32, i32* %tick, align 4, !dbg !11675
  store i32 %45, i32* getelementptr inbounds (%struct.anon.3, %struct.anon.3* @tick_check_data, i32 0, i32 1), align 8, !dbg !11676
  br label %if.end73, !dbg !11677

if.end73:                                         ; preds = %if.then72, %lor.lhs.false70, %cond.end57
  br label %if.end74, !dbg !11678

if.end74:                                         ; preds = %if.then19, %if.end73, %entry
  ret void, !dbg !11679
}

declare dso_local void @init_dep(%struct._dep*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local i32 @dep_cost_1(%struct._dep*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !11680 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11683, metadata !DIExpression()), !dbg !11684
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11685
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !11685
  %tobool = icmp ne i8 %call, 0, !dbg !11685
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11685

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11685
  br label %cond.end, !dbg !11685

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11685

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11685
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11686
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !11686
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !11686
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !11686
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11686

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11686
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !11686
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !11686
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !11686
  br label %cond.end5, !dbg !11686

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11686

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !11686
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !11686
  ret %struct.edge_def* %call7, !dbg !11687
}

declare dso_local zeroext i8 @can_merge_blocks_p(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !11688 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11689, metadata !DIExpression()), !dbg !11690
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11691
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !11691
  %tobool = icmp ne i8 %call, 0, !dbg !11691
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !11691

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11691
  br label %cond.end, !dbg !11691

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11691

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11691
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11692
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !11692
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !11692
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !11692
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11692

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11692
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !11692
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !11692
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !11692
  br label %cond.end5, !dbg !11692

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11692

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !11692
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !11692
  ret %struct.edge_def* %call7, !dbg !11693
}

declare dso_local i32 @post_order_compute(i32*, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_global_bb_info_def_base_length(%struct.VEC_sel_global_bb_info_def_base* %vec_) #0 !dbg !11694 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_base*, align 8
  store %struct.VEC_sel_global_bb_info_def_base* %vec_, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, metadata !11699, metadata !DIExpression()), !dbg !11700
  %0 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11700
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_base* %0, null, !dbg !11700
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11700

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11700
  %num = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %1, i32 0, i32 0, !dbg !11700
  %2 = load i32, i32* %num, align 8, !dbg !11700
  br label %cond.end, !dbg !11700

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11700

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11700
  ret i32 %cond, !dbg !11700
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_global_bb_info_def_heap_safe_grow(%struct.VEC_sel_global_bb_info_def_heap** %vec_, i32 %size_) #0 !dbg !11701 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_sel_global_bb_info_def_heap** %vec_, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, metadata !11702, metadata !DIExpression()), !dbg !11703
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11704, metadata !DIExpression()), !dbg !11703
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11703
  %cmp = icmp sge i32 %0, 0, !dbg !11703
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11703

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %2 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %1, align 8, !dbg !11703
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %2, null, !dbg !11703
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11703

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %4 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %3, align 8, !dbg !11703
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %4, i32 0, i32 0, !dbg !11703
  br label %cond.end, !dbg !11703

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11703

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11703
  %call = call i32 @VEC_sel_global_bb_info_def_base_length(%struct.VEC_sel_global_bb_info_def_base* %cond), !dbg !11703
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11703
  %cmp1 = icmp ule i32 %call, %5, !dbg !11703
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11705
  %land.ext = zext i1 %6 to i32, !dbg !11703
  %7 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11703
  %9 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %9, align 8, !dbg !11703
  %tobool2 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !11703
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11703

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %12 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %11, align 8, !dbg !11703
  %tobool4 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %12, null, !dbg !11703
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11703

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %14 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %13, align 8, !dbg !11703
  %base6 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %14, i32 0, i32 0, !dbg !11703
  br label %cond.end8, !dbg !11703

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11703

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11703
  %num = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %cond9, i32 0, i32 0, !dbg !11703
  %15 = load i32, i32* %num, align 8, !dbg !11703
  br label %cond.end11, !dbg !11703

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11703

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11703
  %sub = sub nsw i32 %8, %cond12, !dbg !11703
  %call13 = call i32 @VEC_sel_global_bb_info_def_heap_reserve_exact(%struct.VEC_sel_global_bb_info_def_heap** %7, i32 %sub), !dbg !11703
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11703
  %17 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %18 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %17, align 8, !dbg !11703
  %tobool14 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %18, null, !dbg !11703
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11703

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11703
  %20 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %19, align 8, !dbg !11703
  %base16 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %20, i32 0, i32 0, !dbg !11703
  br label %cond.end18, !dbg !11703

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11703

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11703
  %num20 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %cond19, i32 0, i32 0, !dbg !11703
  store i32 %16, i32* %num20, align 8, !dbg !11703
  ret void, !dbg !11703
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_address(%struct.VEC_sel_global_bb_info_def_base* %vec_) #0 !dbg !11706 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_base*, align 8
  store %struct.VEC_sel_global_bb_info_def_base* %vec_, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, metadata !11709, metadata !DIExpression()), !dbg !11710
  %0 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11710
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_base* %0, null, !dbg !11710
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11710

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11710
  %vec = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %1, i32 0, i32 2, !dbg !11710
  %arraydecay = getelementptr inbounds [1 x %struct.sel_global_bb_info_def], [1 x %struct.sel_global_bb_info_def]* %vec, i64 0, i64 0, !dbg !11710
  br label %cond.end, !dbg !11710

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11710

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sel_global_bb_info_def* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11710
  ret %struct.sel_global_bb_info_def* %cond, !dbg !11710
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_global_bb_info_def_heap_reserve_exact(%struct.VEC_sel_global_bb_info_def_heap** %vec_, i32 %alloc_) #0 !dbg !11711 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_sel_global_bb_info_def_heap** %vec_, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, metadata !11714, metadata !DIExpression()), !dbg !11715
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11716, metadata !DIExpression()), !dbg !11715
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11717, metadata !DIExpression()), !dbg !11715
  %0 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11715
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %0, align 8, !dbg !11715
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %1, null, !dbg !11715
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11715

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11715
  %3 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %2, align 8, !dbg !11715
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %3, i32 0, i32 0, !dbg !11715
  br label %cond.end, !dbg !11715

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11715

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11715
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11715
  %call = call i32 @VEC_sel_global_bb_info_def_base_space(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %4), !dbg !11715
  %tobool1 = icmp ne i32 %call, 0, !dbg !11715
  %lnot = xor i1 %tobool1, true, !dbg !11715
  %lnot.ext = zext i1 %lnot to i32, !dbg !11715
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11715
  %5 = load i32, i32* %extend, align 4, !dbg !11718
  %tobool2 = icmp ne i32 %5, 0, !dbg !11718
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11715

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11718
  %7 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** %6, align 8, !dbg !11718
  %8 = bitcast %struct.VEC_sel_global_bb_info_def_heap* %7 to i8*, !dbg !11718
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11718
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 16), !dbg !11718
  %10 = bitcast i8* %call3 to %struct.VEC_sel_global_bb_info_def_heap*, !dbg !11718
  %11 = load %struct.VEC_sel_global_bb_info_def_heap**, %struct.VEC_sel_global_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11718
  store %struct.VEC_sel_global_bb_info_def_heap* %10, %struct.VEC_sel_global_bb_info_def_heap** %11, align 8, !dbg !11718
  br label %if.end, !dbg !11718

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11715
  ret i32 %12, !dbg !11715
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_global_bb_info_def_base_space(%struct.VEC_sel_global_bb_info_def_base* %vec_, i32 %alloc_) #0 !dbg !11720 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_global_bb_info_def_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_sel_global_bb_info_def_base* %vec_, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, metadata !11723, metadata !DIExpression()), !dbg !11724
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11725, metadata !DIExpression()), !dbg !11724
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11724
  %cmp = icmp sge i32 %0, 0, !dbg !11724
  %conv = zext i1 %cmp to i32, !dbg !11724
  %1 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11724
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_base* %1, null, !dbg !11724
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11724

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11724
  %alloc = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %2, i32 0, i32 1, !dbg !11724
  %3 = load i32, i32* %alloc, align 4, !dbg !11724
  %4 = load %struct.VEC_sel_global_bb_info_def_base*, %struct.VEC_sel_global_bb_info_def_base** %vec_.addr, align 8, !dbg !11724
  %num = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_base, %struct.VEC_sel_global_bb_info_def_base* %4, i32 0, i32 0, !dbg !11724
  %5 = load i32, i32* %num, align 8, !dbg !11724
  %sub = sub i32 %3, %5, !dbg !11724
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11724
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11724
  %conv2 = zext i1 %cmp1 to i32, !dbg !11724
  br label %cond.end, !dbg !11724

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11724
  %tobool3 = icmp ne i32 %7, 0, !dbg !11724
  %lnot = xor i1 %tobool3, true, !dbg !11724
  %lnot.ext = zext i1 %lnot to i32, !dbg !11724
  br label %cond.end, !dbg !11724

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11724
  ret i32 %cond, !dbg !11724
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_insn_data_def_base_length(%struct.VEC_sel_insn_data_def_base* %vec_) #0 !dbg !11726 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_base*, align 8
  store %struct.VEC_sel_insn_data_def_base* %vec_, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_base** %vec_.addr, metadata !11731, metadata !DIExpression()), !dbg !11732
  %0 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11732
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_base* %0, null, !dbg !11732
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11732

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11732
  %num = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %1, i32 0, i32 0, !dbg !11732
  %2 = load i32, i32* %num, align 8, !dbg !11732
  br label %cond.end, !dbg !11732

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11732

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11732
  ret i32 %cond, !dbg !11732
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_insn_data_def_base_space(%struct.VEC_sel_insn_data_def_base* %vec_, i32 %alloc_) #0 !dbg !11733 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_sel_insn_data_def_base* %vec_, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_base** %vec_.addr, metadata !11736, metadata !DIExpression()), !dbg !11737
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11738, metadata !DIExpression()), !dbg !11737
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11737
  %cmp = icmp sge i32 %0, 0, !dbg !11737
  %conv = zext i1 %cmp to i32, !dbg !11737
  %1 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11737
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_base* %1, null, !dbg !11737
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11737

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11737
  %alloc = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %2, i32 0, i32 1, !dbg !11737
  %3 = load i32, i32* %alloc, align 4, !dbg !11737
  %4 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11737
  %num = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %4, i32 0, i32 0, !dbg !11737
  %5 = load i32, i32* %num, align 8, !dbg !11737
  %sub = sub i32 %3, %5, !dbg !11737
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11737
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11737
  %conv2 = zext i1 %cmp1 to i32, !dbg !11737
  br label %cond.end, !dbg !11737

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11737
  %tobool3 = icmp ne i32 %7, 0, !dbg !11737
  %lnot = xor i1 %tobool3, true, !dbg !11737
  %lnot.ext = zext i1 %lnot to i32, !dbg !11737
  br label %cond.end, !dbg !11737

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11737
  ret i32 %cond, !dbg !11737
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_insn_data_def_heap_safe_grow_cleared(%struct.VEC_sel_insn_data_def_heap** %vec_, i32 %size_) #0 !dbg !11739 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_sel_insn_data_def_heap** %vec_, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, metadata !11743, metadata !DIExpression()), !dbg !11744
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11745, metadata !DIExpression()), !dbg !11744
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !11746, metadata !DIExpression()), !dbg !11744
  %0 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11744
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %0, align 8, !dbg !11744
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !11744
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11744

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11744
  %3 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %2, align 8, !dbg !11744
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %3, i32 0, i32 0, !dbg !11744
  br label %cond.end, !dbg !11744

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11744
  %call = call i32 @VEC_sel_insn_data_def_base_length(%struct.VEC_sel_insn_data_def_base* %cond), !dbg !11744
  store i32 %call, i32* %oldsize, align 4, !dbg !11744
  %4 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11744
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11744
  call void @VEC_sel_insn_data_def_heap_safe_grow(%struct.VEC_sel_insn_data_def_heap** %4, i32 %5), !dbg !11744
  %6 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11744
  %7 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %6, align 8, !dbg !11744
  %tobool1 = icmp ne %struct.VEC_sel_insn_data_def_heap* %7, null, !dbg !11744
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11744

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11744
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %8, align 8, !dbg !11744
  %base3 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %9, i32 0, i32 0, !dbg !11744
  br label %cond.end5, !dbg !11744

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11744

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_insn_data_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11744
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_address(%struct.VEC_sel_insn_data_def_base* %cond6), !dbg !11744
  %10 = load i32, i32* %oldsize, align 4, !dbg !11744
  %idxprom = sext i32 %10 to i64, !dbg !11744
  %arrayidx = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i64 %idxprom, !dbg !11744
  %11 = bitcast %struct._sel_insn_data* %arrayidx to i8*, !dbg !11744
  %12 = load i32, i32* %size_.addr, align 4, !dbg !11744
  %13 = load i32, i32* %oldsize, align 4, !dbg !11744
  %sub = sub nsw i32 %12, %13, !dbg !11744
  %conv = sext i32 %sub to i64, !dbg !11744
  %mul = mul i64 320, %conv, !dbg !11744
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !11744
  ret void, !dbg !11744
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_insn_data_def_heap_safe_grow(%struct.VEC_sel_insn_data_def_heap** %vec_, i32 %size_) #0 !dbg !11747 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_sel_insn_data_def_heap** %vec_, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, metadata !11748, metadata !DIExpression()), !dbg !11749
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11750, metadata !DIExpression()), !dbg !11749
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11749
  %cmp = icmp sge i32 %0, 0, !dbg !11749
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11749

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %2 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %1, align 8, !dbg !11749
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %2, null, !dbg !11749
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11749

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %4 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %3, align 8, !dbg !11749
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %4, i32 0, i32 0, !dbg !11749
  br label %cond.end, !dbg !11749

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11749

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11749
  %call = call i32 @VEC_sel_insn_data_def_base_length(%struct.VEC_sel_insn_data_def_base* %cond), !dbg !11749
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11749
  %cmp1 = icmp ule i32 %call, %5, !dbg !11749
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11751
  %land.ext = zext i1 %6 to i32, !dbg !11749
  %7 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11749
  %9 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %9, align 8, !dbg !11749
  %tobool2 = icmp ne %struct.VEC_sel_insn_data_def_heap* %10, null, !dbg !11749
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11749

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %12 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %11, align 8, !dbg !11749
  %tobool4 = icmp ne %struct.VEC_sel_insn_data_def_heap* %12, null, !dbg !11749
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11749

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %14 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %13, align 8, !dbg !11749
  %base6 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %14, i32 0, i32 0, !dbg !11749
  br label %cond.end8, !dbg !11749

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11749

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_sel_insn_data_def_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11749
  %num = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %cond9, i32 0, i32 0, !dbg !11749
  %15 = load i32, i32* %num, align 8, !dbg !11749
  br label %cond.end11, !dbg !11749

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11749

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11749
  %sub = sub nsw i32 %8, %cond12, !dbg !11749
  %call13 = call i32 @VEC_sel_insn_data_def_heap_reserve_exact(%struct.VEC_sel_insn_data_def_heap** %7, i32 %sub), !dbg !11749
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11749
  %17 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %18 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %17, align 8, !dbg !11749
  %tobool14 = icmp ne %struct.VEC_sel_insn_data_def_heap* %18, null, !dbg !11749
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11749

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11749
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %19, align 8, !dbg !11749
  %base16 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %20, i32 0, i32 0, !dbg !11749
  br label %cond.end18, !dbg !11749

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11749

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_insn_data_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11749
  %num20 = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %cond19, i32 0, i32 0, !dbg !11749
  store i32 %16, i32* %num20, align 8, !dbg !11749
  ret void, !dbg !11749
}

; Function Attrs: noinline nounwind uwtable
define internal %struct._sel_insn_data* @VEC_sel_insn_data_def_base_address(%struct.VEC_sel_insn_data_def_base* %vec_) #0 !dbg !11752 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_base*, align 8
  store %struct.VEC_sel_insn_data_def_base* %vec_, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_base** %vec_.addr, metadata !11755, metadata !DIExpression()), !dbg !11756
  %0 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11756
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_base* %0, null, !dbg !11756
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11756

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_base*, %struct.VEC_sel_insn_data_def_base** %vec_.addr, align 8, !dbg !11756
  %vec = getelementptr inbounds %struct.VEC_sel_insn_data_def_base, %struct.VEC_sel_insn_data_def_base* %1, i32 0, i32 2, !dbg !11756
  %arraydecay = getelementptr inbounds [1 x %struct._sel_insn_data], [1 x %struct._sel_insn_data]* %vec, i64 0, i64 0, !dbg !11756
  br label %cond.end, !dbg !11756

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11756

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct._sel_insn_data* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11756
  ret %struct._sel_insn_data* %cond, !dbg !11756
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_insn_data_def_heap_reserve_exact(%struct.VEC_sel_insn_data_def_heap** %vec_, i32 %alloc_) #0 !dbg !11757 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_sel_insn_data_def_heap** %vec_, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, metadata !11760, metadata !DIExpression()), !dbg !11761
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11762, metadata !DIExpression()), !dbg !11761
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11763, metadata !DIExpression()), !dbg !11761
  %0 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11761
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %0, align 8, !dbg !11761
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !11761
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11761

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11761
  %3 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %2, align 8, !dbg !11761
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %3, i32 0, i32 0, !dbg !11761
  br label %cond.end, !dbg !11761

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11761

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11761
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11761
  %call = call i32 @VEC_sel_insn_data_def_base_space(%struct.VEC_sel_insn_data_def_base* %cond, i32 %4), !dbg !11761
  %tobool1 = icmp ne i32 %call, 0, !dbg !11761
  %lnot = xor i1 %tobool1, true, !dbg !11761
  %lnot.ext = zext i1 %lnot to i32, !dbg !11761
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11761
  %5 = load i32, i32* %extend, align 4, !dbg !11764
  %tobool2 = icmp ne i32 %5, 0, !dbg !11764
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11761

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11764
  %7 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %6, align 8, !dbg !11764
  %8 = bitcast %struct.VEC_sel_insn_data_def_heap* %7 to i8*, !dbg !11764
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11764
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 320), !dbg !11764
  %10 = bitcast i8* %call3 to %struct.VEC_sel_insn_data_def_heap*, !dbg !11764
  %11 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11764
  store %struct.VEC_sel_insn_data_def_heap* %10, %struct.VEC_sel_insn_data_def_heap** %11, align 8, !dbg !11764
  br label %if.end, !dbg !11764

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11761
  ret i32 %12, !dbg !11761
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_insn_data_def_heap_free(%struct.VEC_sel_insn_data_def_heap** %vec_) #0 !dbg !11766 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_insn_data_def_heap**, align 8
  store %struct.VEC_sel_insn_data_def_heap** %vec_, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, metadata !11769, metadata !DIExpression()), !dbg !11770
  %0 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11771
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %0, align 8, !dbg !11771
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %1, null, !dbg !11771
  br i1 %tobool, label %if.then, label %if.end, !dbg !11770

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11771
  %3 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** %2, align 8, !dbg !11771
  %4 = bitcast %struct.VEC_sel_insn_data_def_heap* %3 to i8*, !dbg !11771
  call void @free(i8* %4), !dbg !11771
  br label %if.end, !dbg !11771

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_sel_insn_data_def_heap**, %struct.VEC_sel_insn_data_def_heap*** %vec_.addr, align 8, !dbg !11770
  store %struct.VEC_sel_insn_data_def_heap* null, %struct.VEC_sel_insn_data_def_heap** %5, align 8, !dbg !11770
  ret void, !dbg !11770
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @insn_is_the_only_one_in_bb_p(%struct.rtx_def* %insn) #0 !dbg !11773 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11774, metadata !DIExpression()), !dbg !11775
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11776
  %call = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %0), !dbg !11777
  %conv = zext i8 %call to i32, !dbg !11777
  %tobool = icmp ne i32 %conv, 0, !dbg !11777
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !11778

land.rhs:                                         ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11779
  %call1 = call zeroext i8 @sel_bb_end_p(%struct.rtx_def* %1), !dbg !11780
  %conv2 = zext i8 %call1 to i32, !dbg !11780
  %tobool3 = icmp ne i32 %conv2, 0, !dbg !11778
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %tobool3, %land.rhs ], !dbg !11781
  %land.ext = zext i1 %2 to i32, !dbg !11778
  %conv4 = trunc i32 %land.ext to i8, !dbg !11777
  ret i8 %conv4, !dbg !11782
}

; Function Attrs: noinline nounwind uwtable
define internal void @create_initial_data_sets(%struct.basic_block_def* %bb) #0 !dbg !11783 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11784, metadata !DIExpression()), !dbg !11785
  %0 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11786
  %tobool = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %0, null, !dbg !11786
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11786

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11786
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %1, i32 0, i32 0, !dbg !11786
  br label %cond.end, !dbg !11786

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11786

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11786
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11786
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 9, !dbg !11786
  %3 = load i32, i32* %index, align 8, !dbg !11786
  %call = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond, i32 %3), !dbg !11786
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call, i32 0, i32 0, !dbg !11786
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !11786
  %tobool1 = icmp ne %struct.bitmap_head_def* %4, null, !dbg !11786
  br i1 %tobool1, label %if.then, label %if.else, !dbg !11788

if.then:                                          ; preds = %cond.end
  %5 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11789
  %tobool2 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %5, null, !dbg !11789
  br i1 %tobool2, label %cond.true3, label %cond.false5, !dbg !11789

cond.true3:                                       ; preds = %if.then
  %6 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11789
  %base4 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %6, i32 0, i32 0, !dbg !11789
  br label %cond.end6, !dbg !11789

cond.false5:                                      ; preds = %if.then
  br label %cond.end6, !dbg !11789

cond.end6:                                        ; preds = %cond.false5, %cond.true3
  %cond7 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base4, %cond.true3 ], [ null, %cond.false5 ], !dbg !11789
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11789
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !11789
  %8 = load i32, i32* %index8, align 8, !dbg !11789
  %call9 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond7, i32 %8), !dbg !11789
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call9, i32 0, i32 1, !dbg !11789
  store i8 0, i8* %lv_set_valid_p, align 8, !dbg !11790
  br label %if.end, !dbg !11789

if.else:                                          ; preds = %cond.end
  %call10 = call %struct.bitmap_head_def* @get_regset_from_pool(), !dbg !11791
  %9 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11792
  %tobool11 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %9, null, !dbg !11792
  br i1 %tobool11, label %cond.true12, label %cond.false14, !dbg !11792

cond.true12:                                      ; preds = %if.else
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !11792
  %base13 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %10, i32 0, i32 0, !dbg !11792
  br label %cond.end15, !dbg !11792

cond.false14:                                     ; preds = %if.else
  br label %cond.end15, !dbg !11792

cond.end15:                                       ; preds = %cond.false14, %cond.true12
  %cond16 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base13, %cond.true12 ], [ null, %cond.false14 ], !dbg !11792
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11792
  %index17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !11792
  %12 = load i32, i32* %index17, align 8, !dbg !11792
  %call18 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond16, i32 %12), !dbg !11792
  %lv_set19 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call18, i32 0, i32 0, !dbg !11792
  store %struct.bitmap_head_def* %call10, %struct.bitmap_head_def** %lv_set19, align 8, !dbg !11793
  br label %if.end

if.end:                                           ; preds = %cond.end15, %cond.end6
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11794
  call void @invalidate_av_set(%struct.basic_block_def* %13), !dbg !11795
  ret void, !dbg !11796
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_insn_data(%struct.rtx_def* %insn) #0 !dbg !11797 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %expr = alloca %struct._expr*, align 8
  %ssid = alloca %struct._sel_insn_data*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11798, metadata !DIExpression()), !dbg !11799
  call void @llvm.dbg.declare(metadata %struct._expr** %expr, metadata !11800, metadata !DIExpression()), !dbg !11801
  call void @llvm.dbg.declare(metadata %struct._sel_insn_data** %ssid, metadata !11802, metadata !DIExpression()), !dbg !11803
  %0 = load %struct._sel_insn_data*, %struct._sel_insn_data** @insn_init_ssid, align 8, !dbg !11804
  store %struct._sel_insn_data* %0, %struct._sel_insn_data** %ssid, align 8, !dbg !11803
  %1 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11805
  %asm_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %1, i32 0, i32 13, !dbg !11805
  %bf.load = load i8, i8* %asm_p, align 4, !dbg !11805
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !11805
  %bf.clear = and i8 %bf.lshr, 1, !dbg !11805
  %bf.cast = zext i8 %bf.clear to i32, !dbg !11805
  %tobool = icmp ne i32 %bf.cast, 0, !dbg !11805
  br i1 %tobool, label %cond.true, label %land.lhs.true, !dbg !11805

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11805
  %sched_next = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %2, i32 0, i32 9, !dbg !11805
  %3 = load %struct.rtx_def*, %struct.rtx_def** %sched_next, align 8, !dbg !11805
  %cmp = icmp eq %struct.rtx_def* %3, null, !dbg !11805
  br i1 %cmp, label %land.lhs.true1, label %cond.true, !dbg !11805

land.lhs.true1:                                   ; preds = %land.lhs.true
  %4 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11805
  %after_stall_p = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %4, i32 0, i32 13, !dbg !11805
  %bf.load2 = load i8, i8* %after_stall_p, align 4, !dbg !11805
  %bf.lshr3 = lshr i8 %bf.load2, 2, !dbg !11805
  %bf.clear4 = and i8 %bf.lshr3, 1, !dbg !11805
  %bf.cast5 = zext i8 %bf.clear4 to i32, !dbg !11805
  %tobool6 = icmp ne i32 %bf.cast5, 0, !dbg !11805
  br i1 %tobool6, label %cond.true, label %land.lhs.true7, !dbg !11805

land.lhs.true7:                                   ; preds = %land.lhs.true1
  %5 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11805
  %sched_cycle = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %5, i32 0, i32 10, !dbg !11805
  %6 = load i32, i32* %sched_cycle, align 8, !dbg !11805
  %cmp8 = icmp eq i32 %6, 0, !dbg !11805
  br i1 %cmp8, label %cond.false, label %cond.true, !dbg !11805

cond.true:                                        ; preds = %land.lhs.true7, %land.lhs.true1, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11805
  br label %cond.end, !dbg !11805

cond.false:                                       ; preds = %land.lhs.true7
  br label %cond.end, !dbg !11805

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !11805
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11806
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !11806
  %bf.load9 = load i32, i32* %8, align 8, !dbg !11806
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !11806
  %cmp11 = icmp eq i32 %bf.clear10, 8, !dbg !11806
  br i1 %cmp11, label %land.lhs.true23, label %lor.lhs.false, !dbg !11806

lor.lhs.false:                                    ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11806
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !11806
  %bf.load12 = load i32, i32* %10, align 8, !dbg !11806
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !11806
  %cmp14 = icmp eq i32 %bf.clear13, 7, !dbg !11806
  br i1 %cmp14, label %land.lhs.true23, label %lor.lhs.false15, !dbg !11806

lor.lhs.false15:                                  ; preds = %lor.lhs.false
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11806
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !11806
  %bf.load16 = load i32, i32* %12, align 8, !dbg !11806
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !11806
  %cmp18 = icmp eq i32 %bf.clear17, 9, !dbg !11806
  br i1 %cmp18, label %land.lhs.true23, label %lor.lhs.false19, !dbg !11806

lor.lhs.false19:                                  ; preds = %lor.lhs.false15
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11806
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !11806
  %bf.load20 = load i32, i32* %14, align 8, !dbg !11806
  %bf.clear21 = and i32 %bf.load20, 65535, !dbg !11806
  %cmp22 = icmp eq i32 %bf.clear21, 10, !dbg !11806
  br i1 %cmp22, label %land.lhs.true23, label %cond.true30, !dbg !11806

land.lhs.true23:                                  ; preds = %lor.lhs.false19, %lor.lhs.false15, %lor.lhs.false, %cond.end
  %15 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11806
  %tobool24 = icmp ne %struct.VEC_int_heap* %15, null, !dbg !11806
  br i1 %tobool24, label %cond.true25, label %cond.false26, !dbg !11806

cond.true25:                                      ; preds = %land.lhs.true23
  %16 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11806
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %16, i32 0, i32 0, !dbg !11806
  br label %cond.end27, !dbg !11806

cond.false26:                                     ; preds = %land.lhs.true23
  br label %cond.end27, !dbg !11806

cond.end27:                                       ; preds = %cond.false26, %cond.true25
  %cond28 = phi %struct.VEC_int_base* [ %base, %cond.true25 ], [ null, %cond.false26 ], !dbg !11806
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11806
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !11806
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11806
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11806
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11806
  %18 = load i32, i32* %rt_int, align 8, !dbg !11806
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond28, i32 %18), !dbg !11806
  %cmp29 = icmp sgt i32 %call, 0, !dbg !11806
  br i1 %cmp29, label %cond.false31, label %cond.true30, !dbg !11806

cond.true30:                                      ; preds = %cond.end27, %lor.lhs.false19
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4027, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11806
  br label %cond.end32, !dbg !11806

cond.false31:                                     ; preds = %cond.end27
  br label %cond.end32, !dbg !11806

cond.end32:                                       ; preds = %cond.false31, %cond.true30
  %cond33 = phi i32 [ 0, %cond.true30 ], [ 0, %cond.false31 ], !dbg !11806
  %19 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11807
  %tobool34 = icmp ne %struct.VEC_sel_insn_data_def_heap* %19, null, !dbg !11807
  br i1 %tobool34, label %cond.true35, label %cond.false37, !dbg !11807

cond.true35:                                      ; preds = %cond.end32
  %20 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11807
  %base36 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %20, i32 0, i32 0, !dbg !11807
  br label %cond.end38, !dbg !11807

cond.false37:                                     ; preds = %cond.end32
  br label %cond.end38, !dbg !11807

cond.end38:                                       ; preds = %cond.false37, %cond.true35
  %cond39 = phi %struct.VEC_sel_insn_data_def_base* [ %base36, %cond.true35 ], [ null, %cond.false37 ], !dbg !11807
  %21 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11807
  %tobool40 = icmp ne %struct.VEC_int_heap* %21, null, !dbg !11807
  br i1 %tobool40, label %cond.true41, label %cond.false43, !dbg !11807

cond.true41:                                      ; preds = %cond.end38
  %22 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11807
  %base42 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %22, i32 0, i32 0, !dbg !11807
  br label %cond.end44, !dbg !11807

cond.false43:                                     ; preds = %cond.end38
  br label %cond.end44, !dbg !11807

cond.end44:                                       ; preds = %cond.false43, %cond.true41
  %cond45 = phi %struct.VEC_int_base* [ %base42, %cond.true41 ], [ null, %cond.false43 ], !dbg !11807
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11807
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !11807
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !11807
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !11807
  %rt_int49 = bitcast %union.rtunion_def* %arrayidx48 to i32*, !dbg !11807
  %24 = load i32, i32* %rt_int49, align 8, !dbg !11807
  %call50 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond45, i32 %24), !dbg !11807
  %call51 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond39, i32 %call50), !dbg !11807
  %expr52 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call51, i32 0, i32 0, !dbg !11807
  store %struct._expr* %expr52, %struct._expr** %expr, align 8, !dbg !11808
  %25 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !11809
  %26 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11810
  %expr53 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %26, i32 0, i32 0, !dbg !11811
  call void @copy_expr(%struct._expr* %25, %struct._expr* %expr53), !dbg !11812
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11813
  %28 = load %struct._sel_insn_data*, %struct._sel_insn_data** %ssid, align 8, !dbg !11814
  %seqno = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %28, i32 0, i32 2, !dbg !11815
  %29 = load i32, i32* %seqno, align 4, !dbg !11815
  call void @prepare_insn_expr(%struct.rtx_def* %27, i32 %29), !dbg !11816
  %30 = load i8, i8* @insn_init_create_new_vinsn_p, align 1, !dbg !11817
  %tobool54 = icmp ne i8 %30, 0, !dbg !11817
  br i1 %tobool54, label %if.then, label %if.end, !dbg !11819

if.then:                                          ; preds = %cond.end44
  %31 = load %struct._expr*, %struct._expr** %expr, align 8, !dbg !11820
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11821
  %33 = load i8, i8* @init_insn_force_unique_p, align 1, !dbg !11822
  %call55 = call %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %32, i8 zeroext %33), !dbg !11823
  call void @change_vinsn_in_expr(%struct._expr* %31, %struct.vinsn_def* %call55), !dbg !11824
  br label %if.end, !dbg !11824

if.end:                                           ; preds = %if.then, %cond.end44
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11825
  %call56 = call zeroext i8 @first_time_insn_init(%struct.rtx_def* %34), !dbg !11827
  %tobool57 = icmp ne i8 %call56, 0, !dbg !11827
  br i1 %tobool57, label %if.then58, label %if.end59, !dbg !11828

if.then58:                                        ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11829
  call void @init_first_time_insn_data(%struct.rtx_def* %35), !dbg !11830
  br label %if.end59, !dbg !11830

if.end59:                                         ; preds = %if.then58, %if.end
  ret void, !dbg !11831
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_simplejump_data(%struct.rtx_def* %insn) #0 !dbg !11832 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11833, metadata !DIExpression()), !dbg !11834
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11835
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !11835
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11835

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11835
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !11835
  br label %cond.end, !dbg !11835

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11835

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11835
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11835
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !11835
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11835

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11835
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !11835
  br label %cond.end5, !dbg !11835

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11835

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11835
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11835
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !11835
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11835
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11835
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11835
  %5 = load i32, i32* %rt_int, align 8, !dbg !11835
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !11835
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !11835
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 0, !dbg !11835
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11836
  %call8 = call %struct.vinsn_def* @vinsn_create(%struct.rtx_def* %6, i8 zeroext 0), !dbg !11837
  call void @init_expr(%struct._expr* %expr, %struct.vinsn_def* %call8, i32 0, i32 10000, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, %struct.VEC_expr_history_def_heap* null, i8 zeroext 1, i8 zeroext 0, i8 zeroext 0, i8 zeroext 0, i8 zeroext 1), !dbg !11838
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11839
  %call9 = call i32 @get_seqno_of_a_pred(%struct.rtx_def* %7), !dbg !11840
  %8 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11841
  %tobool10 = icmp ne %struct.VEC_sel_insn_data_def_heap* %8, null, !dbg !11841
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !11841

cond.true11:                                      ; preds = %cond.end5
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11841
  %base12 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %9, i32 0, i32 0, !dbg !11841
  br label %cond.end14, !dbg !11841

cond.false13:                                     ; preds = %cond.end5
  br label %cond.end14, !dbg !11841

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_sel_insn_data_def_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !11841
  %10 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11841
  %tobool16 = icmp ne %struct.VEC_int_heap* %10, null, !dbg !11841
  br i1 %tobool16, label %cond.true17, label %cond.false19, !dbg !11841

cond.true17:                                      ; preds = %cond.end14
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11841
  %base18 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %11, i32 0, i32 0, !dbg !11841
  br label %cond.end20, !dbg !11841

cond.false19:                                     ; preds = %cond.end14
  br label %cond.end20, !dbg !11841

cond.end20:                                       ; preds = %cond.false19, %cond.true17
  %cond21 = phi %struct.VEC_int_base* [ %base18, %cond.true17 ], [ null, %cond.false19 ], !dbg !11841
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11841
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !11841
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !11841
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 0, !dbg !11841
  %rt_int25 = bitcast %union.rtunion_def* %arrayidx24 to i32*, !dbg !11841
  %13 = load i32, i32* %rt_int25, align 8, !dbg !11841
  %call26 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond21, i32 %13), !dbg !11841
  %call27 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond15, i32 %call26), !dbg !11841
  %seqno = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call27, i32 0, i32 2, !dbg !11841
  store i32 %call9, i32* %seqno, align 4, !dbg !11842
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11843
  call void @init_first_time_insn_data(%struct.rtx_def* %14), !dbg !11844
  ret void, !dbg !11845
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @get_seqno_of_a_pred(%struct.rtx_def* %insn) #0 !dbg !11846 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %seqno = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %succ = alloca %struct.rtx_def*, align 8
  %si = alloca %struct.succ_iterator, align 8
  %first = alloca i8, align 1
  %tmp = alloca %struct.succ_iterator, align 8
  %preds = alloca %struct.rtx_def**, align 8
  %n = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !11847, metadata !DIExpression()), !dbg !11848
  call void @llvm.dbg.declare(metadata i32* %seqno, metadata !11849, metadata !DIExpression()), !dbg !11850
  %0 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11851
  %tobool = icmp ne %struct.VEC_sel_insn_data_def_heap* %0, null, !dbg !11851
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11851

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11851
  %base = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %1, i32 0, i32 0, !dbg !11851
  br label %cond.end, !dbg !11851

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11851

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_insn_data_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11851
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11851
  %tobool1 = icmp ne %struct.VEC_int_heap* %2, null, !dbg !11851
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11851

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11851
  %base3 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !11851
  br label %cond.end5, !dbg !11851

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11851

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_int_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11851
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11851
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !11851
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !11851
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !11851
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !11851
  %5 = load i32, i32* %rt_int, align 8, !dbg !11851
  %call = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond6, i32 %5), !dbg !11851
  %call7 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond, i32 %call), !dbg !11851
  %expr = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call7, i32 0, i32 0, !dbg !11851
  %vinsn = getelementptr inbounds %struct._expr, %struct._expr* %expr, i32 0, i32 0, !dbg !11851
  %6 = load %struct.vinsn_def*, %struct.vinsn_def** %vinsn, align 8, !dbg !11851
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %6, i32 0, i32 1, !dbg !11851
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id, i32 0, i32 0, !dbg !11851
  %7 = load i32, i32* %type, align 8, !dbg !11851
  %cmp = icmp eq i32 %7, 36, !dbg !11851
  br i1 %cmp, label %cond.false9, label %cond.true8, !dbg !11851

cond.true8:                                       ; preds = %cond.end5
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3812, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11851
  br label %cond.end10, !dbg !11851

cond.false9:                                      ; preds = %cond.end5
  br label %cond.end10, !dbg !11851

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !11851
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11852
  %call12 = call zeroext i8 @sel_bb_head_p(%struct.rtx_def* %8), !dbg !11854
  %tobool13 = icmp ne i8 %call12, 0, !dbg !11854
  br i1 %tobool13, label %if.else, label %if.then, !dbg !11855

if.then:                                          ; preds = %cond.end10
  %9 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11856
  %tobool14 = icmp ne %struct.VEC_sel_insn_data_def_heap* %9, null, !dbg !11856
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11856

cond.true15:                                      ; preds = %if.then
  %10 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11856
  %base16 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %10, i32 0, i32 0, !dbg !11856
  br label %cond.end18, !dbg !11856

cond.false17:                                     ; preds = %if.then
  br label %cond.end18, !dbg !11856

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_insn_data_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11856
  %11 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11856
  %tobool20 = icmp ne %struct.VEC_int_heap* %11, null, !dbg !11856
  br i1 %tobool20, label %cond.true21, label %cond.false23, !dbg !11856

cond.true21:                                      ; preds = %cond.end18
  %12 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11856
  %base22 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %12, i32 0, i32 0, !dbg !11856
  br label %cond.end24, !dbg !11856

cond.false23:                                     ; preds = %cond.end18
  br label %cond.end24, !dbg !11856

cond.end24:                                       ; preds = %cond.false23, %cond.true21
  %cond25 = phi %struct.VEC_int_base* [ %base22, %cond.true21 ], [ null, %cond.false23 ], !dbg !11856
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11856
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !11856
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !11856
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !11856
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !11856
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !11856
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !11856
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !11856
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 0, !dbg !11856
  %rt_int32 = bitcast %union.rtunion_def* %arrayidx31 to i32*, !dbg !11856
  %15 = load i32, i32* %rt_int32, align 8, !dbg !11856
  %call33 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond25, i32 %15), !dbg !11856
  %call34 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond19, i32 %call33), !dbg !11856
  %seqno35 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call34, i32 0, i32 2, !dbg !11856
  %16 = load i32, i32* %seqno35, align 4, !dbg !11856
  store i32 %16, i32* %seqno, align 4, !dbg !11857
  br label %if.end115, !dbg !11858

if.else:                                          ; preds = %cond.end10
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !11859, metadata !DIExpression()), !dbg !11861
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11862
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !11862
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !11862
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 3, !dbg !11862
  %rt_bb = bitcast %union.rtunion_def* %arrayidx38 to %struct.basic_block_def**, !dbg !11862
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !11862
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !11861
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11863
  %call39 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %19), !dbg !11865
  %conv = zext i8 %call39 to i32, !dbg !11865
  %tobool40 = icmp ne i32 %conv, 0, !dbg !11865
  br i1 %tobool40, label %land.lhs.true, label %if.else84, !dbg !11866

land.lhs.true:                                    ; preds = %if.else
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !11867
  %call41 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %20), !dbg !11868
  %call42 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %call41), !dbg !11869
  %tobool43 = icmp ne i8 %call42, 0, !dbg !11869
  br i1 %tobool43, label %if.else84, label %if.then44, !dbg !11870

if.then44:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %succ, metadata !11871, metadata !DIExpression()), !dbg !11873
  store %struct.rtx_def* null, %struct.rtx_def** %succ, align 8, !dbg !11873
  call void @llvm.dbg.declare(metadata %struct.succ_iterator* %si, metadata !11874, metadata !DIExpression()), !dbg !11875
  call void @llvm.dbg.declare(metadata i8* %first, metadata !11876, metadata !DIExpression()), !dbg !11877
  store i8 1, i8* %first, align 1, !dbg !11877
  %21 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !11878
  %tobool45 = icmp ne i32 %21, 0, !dbg !11878
  br i1 %tobool45, label %land.lhs.true46, label %cond.true48, !dbg !11878

land.lhs.true46:                                  ; preds = %if.then44
  %22 = load %struct.loop*, %struct.loop** @current_loop_nest, align 8, !dbg !11878
  %tobool47 = icmp ne %struct.loop* %22, null, !dbg !11878
  br i1 %tobool47, label %cond.false49, label %cond.true48, !dbg !11878

cond.true48:                                      ; preds = %land.lhs.true46, %if.then44
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3831, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11878
  br label %cond.end50, !dbg !11878

cond.false49:                                     ; preds = %land.lhs.true46
  br label %cond.end50, !dbg !11878

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !11878
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11879
  call void @_succ_iter_start(%struct.succ_iterator* sret %tmp, %struct.rtx_def** %succ, %struct.rtx_def* %23, i32 9), !dbg !11879
  %24 = bitcast %struct.succ_iterator* %si to i8*, !dbg !11879
  %25 = bitcast %struct.succ_iterator* %tmp to i8*, !dbg !11879
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %24, i8* align 8 %25, i64 64, i1 false), !dbg !11879
  br label %for.cond, !dbg !11879

for.cond:                                         ; preds = %for.inc, %cond.end50
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11881
  %call52 = call zeroext i8 @_succ_iter_cond(%struct.succ_iterator* %si, %struct.rtx_def** %succ, %struct.rtx_def* %26, i8 (%struct.edge_def*, %struct.succ_iterator*)* @_eligible_successor_edge_p), !dbg !11881
  %tobool53 = icmp ne i8 %call52, 0, !dbg !11879
  br i1 %tobool53, label %for.body, label %for.end, !dbg !11879

for.body:                                         ; preds = %for.cond
  %27 = load i8, i8* %first, align 1, !dbg !11883
  %tobool54 = icmp ne i8 %27, 0, !dbg !11883
  br i1 %tobool54, label %cond.false56, label %cond.true55, !dbg !11883

cond.true55:                                      ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3835, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11883
  br label %cond.end57, !dbg !11883

cond.false56:                                     ; preds = %for.body
  br label %cond.end57, !dbg !11883

cond.end57:                                       ; preds = %cond.false56, %cond.true55
  %cond58 = phi i32 [ 0, %cond.true55 ], [ 0, %cond.false56 ], !dbg !11883
  store i8 0, i8* %first, align 1, !dbg !11885
  br label %for.inc, !dbg !11886

for.inc:                                          ; preds = %cond.end57
  call void @_succ_iter_next(%struct.succ_iterator* %si), !dbg !11881
  br label %for.cond, !dbg !11881, !llvm.loop !11887

for.end:                                          ; preds = %for.cond
  %28 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !11889
  %cmp59 = icmp ne %struct.rtx_def* %28, null, !dbg !11889
  br i1 %cmp59, label %cond.false62, label %cond.true61, !dbg !11889

cond.true61:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3839, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11889
  br label %cond.end63, !dbg !11889

cond.false62:                                     ; preds = %for.end
  br label %cond.end63, !dbg !11889

cond.end63:                                       ; preds = %cond.false62, %cond.true61
  %cond64 = phi i32 [ 0, %cond.true61 ], [ 0, %cond.false62 ], !dbg !11889
  %29 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11890
  %tobool65 = icmp ne %struct.VEC_sel_insn_data_def_heap* %29, null, !dbg !11890
  br i1 %tobool65, label %cond.true66, label %cond.false68, !dbg !11890

cond.true66:                                      ; preds = %cond.end63
  %30 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11890
  %base67 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %30, i32 0, i32 0, !dbg !11890
  br label %cond.end69, !dbg !11890

cond.false68:                                     ; preds = %cond.end63
  br label %cond.end69, !dbg !11890

cond.end69:                                       ; preds = %cond.false68, %cond.true66
  %cond70 = phi %struct.VEC_sel_insn_data_def_base* [ %base67, %cond.true66 ], [ null, %cond.false68 ], !dbg !11890
  %31 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11890
  %tobool71 = icmp ne %struct.VEC_int_heap* %31, null, !dbg !11890
  br i1 %tobool71, label %cond.true72, label %cond.false74, !dbg !11890

cond.true72:                                      ; preds = %cond.end69
  %32 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11890
  %base73 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %32, i32 0, i32 0, !dbg !11890
  br label %cond.end75, !dbg !11890

cond.false74:                                     ; preds = %cond.end69
  br label %cond.end75, !dbg !11890

cond.end75:                                       ; preds = %cond.false74, %cond.true72
  %cond76 = phi %struct.VEC_int_base* [ %base73, %cond.true72 ], [ null, %cond.false74 ], !dbg !11890
  %33 = load %struct.rtx_def*, %struct.rtx_def** %succ, align 8, !dbg !11890
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !11890
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !11890
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 0, !dbg !11890
  %rt_int80 = bitcast %union.rtunion_def* %arrayidx79 to i32*, !dbg !11890
  %34 = load i32, i32* %rt_int80, align 8, !dbg !11890
  %call81 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond76, i32 %34), !dbg !11890
  %call82 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond70, i32 %call81), !dbg !11890
  %seqno83 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call82, i32 0, i32 2, !dbg !11890
  %35 = load i32, i32* %seqno83, align 4, !dbg !11890
  store i32 %35, i32* %seqno, align 4, !dbg !11891
  br label %if.end, !dbg !11892

if.else84:                                        ; preds = %land.lhs.true, %if.else
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %preds, metadata !11893, metadata !DIExpression()), !dbg !11895
  call void @llvm.dbg.declare(metadata i32* %n, metadata !11896, metadata !DIExpression()), !dbg !11897
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !11898
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !11898
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !11898
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 3, !dbg !11898
  %rt_bb88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.basic_block_def**, !dbg !11898
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb88, align 8, !dbg !11898
  call void @cfg_preds(%struct.basic_block_def* %37, %struct.rtx_def*** %preds, i32* %n), !dbg !11899
  %38 = load i32, i32* %n, align 4, !dbg !11900
  %cmp89 = icmp eq i32 %38, 1, !dbg !11900
  br i1 %cmp89, label %cond.false92, label %cond.true91, !dbg !11900

cond.true91:                                      ; preds = %if.else84
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 3848, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !11900
  br label %cond.end93, !dbg !11900

cond.false92:                                     ; preds = %if.else84
  br label %cond.end93, !dbg !11900

cond.end93:                                       ; preds = %cond.false92, %cond.true91
  %cond94 = phi i32 [ 0, %cond.true91 ], [ 0, %cond.false92 ], !dbg !11900
  %39 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11901
  %tobool95 = icmp ne %struct.VEC_sel_insn_data_def_heap* %39, null, !dbg !11901
  br i1 %tobool95, label %cond.true96, label %cond.false98, !dbg !11901

cond.true96:                                      ; preds = %cond.end93
  %40 = load %struct.VEC_sel_insn_data_def_heap*, %struct.VEC_sel_insn_data_def_heap** @s_i_d, align 8, !dbg !11901
  %base97 = getelementptr inbounds %struct.VEC_sel_insn_data_def_heap, %struct.VEC_sel_insn_data_def_heap* %40, i32 0, i32 0, !dbg !11901
  br label %cond.end99, !dbg !11901

cond.false98:                                     ; preds = %cond.end93
  br label %cond.end99, !dbg !11901

cond.end99:                                       ; preds = %cond.false98, %cond.true96
  %cond100 = phi %struct.VEC_sel_insn_data_def_base* [ %base97, %cond.true96 ], [ null, %cond.false98 ], !dbg !11901
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11901
  %tobool101 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !11901
  br i1 %tobool101, label %cond.true102, label %cond.false104, !dbg !11901

cond.true102:                                     ; preds = %cond.end99
  %42 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** @sched_luids, align 8, !dbg !11901
  %base103 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %42, i32 0, i32 0, !dbg !11901
  br label %cond.end105, !dbg !11901

cond.false104:                                    ; preds = %cond.end99
  br label %cond.end105, !dbg !11901

cond.end105:                                      ; preds = %cond.false104, %cond.true102
  %cond106 = phi %struct.VEC_int_base* [ %base103, %cond.true102 ], [ null, %cond.false104 ], !dbg !11901
  %43 = load %struct.rtx_def**, %struct.rtx_def*** %preds, align 8, !dbg !11901
  %arrayidx107 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %43, i64 0, !dbg !11901
  %44 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx107, align 8, !dbg !11901
  %u108 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !11901
  %fld109 = bitcast %union.u* %u108 to [1 x %union.rtunion_def]*, !dbg !11901
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld109, i64 0, i64 0, !dbg !11901
  %rt_int111 = bitcast %union.rtunion_def* %arrayidx110 to i32*, !dbg !11901
  %45 = load i32, i32* %rt_int111, align 8, !dbg !11901
  %call112 = call i32 @VEC_int_base_index(%struct.VEC_int_base* %cond106, i32 %45), !dbg !11901
  %call113 = call %struct._sel_insn_data* @VEC_sel_insn_data_def_base_index(%struct.VEC_sel_insn_data_def_base* %cond100, i32 %call112), !dbg !11901
  %seqno114 = getelementptr inbounds %struct._sel_insn_data, %struct._sel_insn_data* %call113, i32 0, i32 2, !dbg !11901
  %46 = load i32, i32* %seqno114, align 4, !dbg !11901
  store i32 %46, i32* %seqno, align 4, !dbg !11902
  %47 = load %struct.rtx_def**, %struct.rtx_def*** %preds, align 8, !dbg !11903
  %48 = bitcast %struct.rtx_def** %47 to i8*, !dbg !11903
  call void @free(i8* %48), !dbg !11904
  br label %if.end

if.end:                                           ; preds = %cond.end105, %cond.end75
  br label %if.end115

if.end115:                                        ; preds = %if.end, %cond.end24
  %49 = load i32, i32* %seqno, align 4, !dbg !11905
  ret i32 %49, !dbg !11906
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !11907 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !11908, metadata !DIExpression()), !dbg !11909
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !11910
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !11911
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !11912
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !11912
  ret %struct.basic_block_def* %1, !dbg !11913
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.df_lr_bb_info* @df_lr_get_bb_info(i32 %index) #0 !dbg !11914 {
entry:
  %retval = alloca %struct.df_lr_bb_info*, align 8
  %index.addr = alloca i32, align 4
  store i32 %index, i32* %index.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %index.addr, metadata !11917, metadata !DIExpression()), !dbg !11918
  %0 = load i32, i32* %index.addr, align 4, !dbg !11919
  %1 = load %struct.df*, %struct.df** @df, align 8, !dbg !11921
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %1, i32 0, i32 1, !dbg !11921
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 1, !dbg !11921
  %2 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !11921
  %block_info_size = getelementptr inbounds %struct.dataflow, %struct.dataflow* %2, i32 0, i32 2, !dbg !11922
  %3 = load i32, i32* %block_info_size, align 8, !dbg !11922
  %cmp = icmp ult i32 %0, %3, !dbg !11923
  br i1 %cmp, label %if.then, label %if.else, !dbg !11924

if.then:                                          ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !11925
  %problems_by_index1 = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 1, !dbg !11925
  %arrayidx2 = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index1, i64 0, i64 1, !dbg !11925
  %5 = load %struct.dataflow*, %struct.dataflow** %arrayidx2, align 8, !dbg !11925
  %block_info = getelementptr inbounds %struct.dataflow, %struct.dataflow* %5, i32 0, i32 1, !dbg !11926
  %6 = load i8**, i8*** %block_info, align 8, !dbg !11926
  %7 = load i32, i32* %index.addr, align 4, !dbg !11927
  %idxprom = zext i32 %7 to i64, !dbg !11925
  %arrayidx3 = getelementptr inbounds i8*, i8** %6, i64 %idxprom, !dbg !11925
  %8 = load i8*, i8** %arrayidx3, align 8, !dbg !11925
  %9 = bitcast i8* %8 to %struct.df_lr_bb_info*, !dbg !11928
  store %struct.df_lr_bb_info* %9, %struct.df_lr_bb_info** %retval, align 8, !dbg !11929
  br label %return, !dbg !11929

if.else:                                          ; preds = %entry
  store %struct.df_lr_bb_info* null, %struct.df_lr_bb_info** %retval, align 8, !dbg !11930
  br label %return, !dbg !11930

return:                                           ; preds = %if.else, %if.then
  %10 = load %struct.df_lr_bb_info*, %struct.df_lr_bb_info** %retval, align 8, !dbg !11931
  ret %struct.df_lr_bb_info* %10, !dbg !11931
}

; Function Attrs: noinline nounwind uwtable
define internal void @extend_region_bb_info() #0 !dbg !11932 {
entry:
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !11933
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !11933
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !11933
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !11933
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !11933
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !11933
  call void @VEC_sel_region_bb_info_def_heap_safe_grow_cleared(%struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, i32 %2), !dbg !11933
  ret void, !dbg !11934
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_region_bb_info_def_heap_safe_grow_cleared(%struct.VEC_sel_region_bb_info_def_heap** %vec_, i32 %size_) #0 !dbg !11935 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  %oldsize = alloca i32, align 4
  store %struct.VEC_sel_region_bb_info_def_heap** %vec_, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, metadata !11939, metadata !DIExpression()), !dbg !11940
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11941, metadata !DIExpression()), !dbg !11940
  call void @llvm.dbg.declare(metadata i32* %oldsize, metadata !11942, metadata !DIExpression()), !dbg !11940
  %0 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11940
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %0, align 8, !dbg !11940
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %1, null, !dbg !11940
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11940

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11940
  %3 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %2, align 8, !dbg !11940
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %3, i32 0, i32 0, !dbg !11940
  br label %cond.end, !dbg !11940

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11940

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11940
  %call = call i32 @VEC_sel_region_bb_info_def_base_length(%struct.VEC_sel_region_bb_info_def_base* %cond), !dbg !11940
  store i32 %call, i32* %oldsize, align 4, !dbg !11940
  %4 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11940
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11940
  call void @VEC_sel_region_bb_info_def_heap_safe_grow(%struct.VEC_sel_region_bb_info_def_heap** %4, i32 %5), !dbg !11940
  %6 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11940
  %7 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %6, align 8, !dbg !11940
  %tobool1 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %7, null, !dbg !11940
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !11940

cond.true2:                                       ; preds = %cond.end
  %8 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11940
  %9 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %8, align 8, !dbg !11940
  %base3 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %9, i32 0, i32 0, !dbg !11940
  br label %cond.end5, !dbg !11940

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !11940

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !11940
  %call7 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_address(%struct.VEC_sel_region_bb_info_def_base* %cond6), !dbg !11940
  %10 = load i32, i32* %oldsize, align 4, !dbg !11940
  %idxprom = sext i32 %10 to i64, !dbg !11940
  %arrayidx = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call7, i64 %idxprom, !dbg !11940
  %11 = bitcast %struct.sel_region_bb_info_def* %arrayidx to i8*, !dbg !11940
  %12 = load i32, i32* %size_.addr, align 4, !dbg !11940
  %13 = load i32, i32* %oldsize, align 4, !dbg !11940
  %sub = sub nsw i32 %12, %13, !dbg !11940
  %conv = sext i32 %sub to i64, !dbg !11940
  %mul = mul i64 24, %conv, !dbg !11940
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %mul, i1 false), !dbg !11940
  ret void, !dbg !11940
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_region_bb_info_def_base_length(%struct.VEC_sel_region_bb_info_def_base* %vec_) #0 !dbg !11943 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_base*, align 8
  store %struct.VEC_sel_region_bb_info_def_base* %vec_, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, metadata !11948, metadata !DIExpression()), !dbg !11949
  %0 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11949
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_base* %0, null, !dbg !11949
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11949

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11949
  %num = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %1, i32 0, i32 0, !dbg !11949
  %2 = load i32, i32* %num, align 8, !dbg !11949
  br label %cond.end, !dbg !11949

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11949

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !11949
  ret i32 %cond, !dbg !11949
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_region_bb_info_def_heap_safe_grow(%struct.VEC_sel_region_bb_info_def_heap** %vec_, i32 %size_) #0 !dbg !11950 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_heap**, align 8
  %size_.addr = alloca i32, align 4
  store %struct.VEC_sel_region_bb_info_def_heap** %vec_, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, metadata !11951, metadata !DIExpression()), !dbg !11952
  store i32 %size_, i32* %size_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %size_.addr, metadata !11953, metadata !DIExpression()), !dbg !11952
  %0 = load i32, i32* %size_.addr, align 4, !dbg !11952
  %cmp = icmp sge i32 %0, 0, !dbg !11952
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !11952

land.rhs:                                         ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %2 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %1, align 8, !dbg !11952
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %2, null, !dbg !11952
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11952

cond.true:                                        ; preds = %land.rhs
  %3 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %4 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %3, align 8, !dbg !11952
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %4, i32 0, i32 0, !dbg !11952
  br label %cond.end, !dbg !11952

cond.false:                                       ; preds = %land.rhs
  br label %cond.end, !dbg !11952

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11952
  %call = call i32 @VEC_sel_region_bb_info_def_base_length(%struct.VEC_sel_region_bb_info_def_base* %cond), !dbg !11952
  %5 = load i32, i32* %size_.addr, align 4, !dbg !11952
  %cmp1 = icmp ule i32 %call, %5, !dbg !11952
  br label %land.end

land.end:                                         ; preds = %cond.end, %entry
  %6 = phi i1 [ false, %entry ], [ %cmp1, %cond.end ], !dbg !11954
  %land.ext = zext i1 %6 to i32, !dbg !11952
  %7 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %8 = load i32, i32* %size_.addr, align 4, !dbg !11952
  %9 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %10 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %9, align 8, !dbg !11952
  %tobool2 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %10, null, !dbg !11952
  br i1 %tobool2, label %cond.true3, label %cond.false10, !dbg !11952

cond.true3:                                       ; preds = %land.end
  %11 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %12 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %11, align 8, !dbg !11952
  %tobool4 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %12, null, !dbg !11952
  br i1 %tobool4, label %cond.true5, label %cond.false7, !dbg !11952

cond.true5:                                       ; preds = %cond.true3
  %13 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %14 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %13, align 8, !dbg !11952
  %base6 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %14, i32 0, i32 0, !dbg !11952
  br label %cond.end8, !dbg !11952

cond.false7:                                      ; preds = %cond.true3
  br label %cond.end8, !dbg !11952

cond.end8:                                        ; preds = %cond.false7, %cond.true5
  %cond9 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base6, %cond.true5 ], [ null, %cond.false7 ], !dbg !11952
  %num = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %cond9, i32 0, i32 0, !dbg !11952
  %15 = load i32, i32* %num, align 8, !dbg !11952
  br label %cond.end11, !dbg !11952

cond.false10:                                     ; preds = %land.end
  br label %cond.end11, !dbg !11952

cond.end11:                                       ; preds = %cond.false10, %cond.end8
  %cond12 = phi i32 [ %15, %cond.end8 ], [ 0, %cond.false10 ], !dbg !11952
  %sub = sub nsw i32 %8, %cond12, !dbg !11952
  %call13 = call i32 @VEC_sel_region_bb_info_def_heap_reserve_exact(%struct.VEC_sel_region_bb_info_def_heap** %7, i32 %sub), !dbg !11952
  %16 = load i32, i32* %size_.addr, align 4, !dbg !11952
  %17 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %18 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %17, align 8, !dbg !11952
  %tobool14 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %18, null, !dbg !11952
  br i1 %tobool14, label %cond.true15, label %cond.false17, !dbg !11952

cond.true15:                                      ; preds = %cond.end11
  %19 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11952
  %20 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %19, align 8, !dbg !11952
  %base16 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %20, i32 0, i32 0, !dbg !11952
  br label %cond.end18, !dbg !11952

cond.false17:                                     ; preds = %cond.end11
  br label %cond.end18, !dbg !11952

cond.end18:                                       ; preds = %cond.false17, %cond.true15
  %cond19 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base16, %cond.true15 ], [ null, %cond.false17 ], !dbg !11952
  %num20 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %cond19, i32 0, i32 0, !dbg !11952
  store i32 %16, i32* %num20, align 8, !dbg !11952
  ret void, !dbg !11952
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_address(%struct.VEC_sel_region_bb_info_def_base* %vec_) #0 !dbg !11955 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_base*, align 8
  store %struct.VEC_sel_region_bb_info_def_base* %vec_, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, metadata !11958, metadata !DIExpression()), !dbg !11959
  %0 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11959
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_base* %0, null, !dbg !11959
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11959

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11959
  %vec = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %1, i32 0, i32 2, !dbg !11959
  %arraydecay = getelementptr inbounds [1 x %struct.sel_region_bb_info_def], [1 x %struct.sel_region_bb_info_def]* %vec, i64 0, i64 0, !dbg !11959
  br label %cond.end, !dbg !11959

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11959

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.sel_region_bb_info_def* [ %arraydecay, %cond.true ], [ null, %cond.false ], !dbg !11959
  ret %struct.sel_region_bb_info_def* %cond, !dbg !11959
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_region_bb_info_def_heap_reserve_exact(%struct.VEC_sel_region_bb_info_def_heap** %vec_, i32 %alloc_) #0 !dbg !11960 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_sel_region_bb_info_def_heap** %vec_, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, metadata !11963, metadata !DIExpression()), !dbg !11964
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11965, metadata !DIExpression()), !dbg !11964
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11966, metadata !DIExpression()), !dbg !11964
  %0 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11964
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %0, align 8, !dbg !11964
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %1, null, !dbg !11964
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11964

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11964
  %3 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %2, align 8, !dbg !11964
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %3, i32 0, i32 0, !dbg !11964
  br label %cond.end, !dbg !11964

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11964

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11964
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11964
  %call = call i32 @VEC_sel_region_bb_info_def_base_space(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %4), !dbg !11964
  %tobool1 = icmp ne i32 %call, 0, !dbg !11964
  %lnot = xor i1 %tobool1, true, !dbg !11964
  %lnot.ext = zext i1 %lnot to i32, !dbg !11964
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11964
  %5 = load i32, i32* %extend, align 4, !dbg !11967
  %tobool2 = icmp ne i32 %5, 0, !dbg !11967
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11964

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11967
  %7 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %6, align 8, !dbg !11967
  %8 = bitcast %struct.VEC_sel_region_bb_info_def_heap* %7 to i8*, !dbg !11967
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11967
  %call3 = call i8* @vec_heap_o_reserve_exact(i8* %8, i32 %9, i64 8, i64 24), !dbg !11967
  %10 = bitcast i8* %call3 to %struct.VEC_sel_region_bb_info_def_heap*, !dbg !11967
  %11 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11967
  store %struct.VEC_sel_region_bb_info_def_heap* %10, %struct.VEC_sel_region_bb_info_def_heap** %11, align 8, !dbg !11967
  br label %if.end, !dbg !11967

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11964
  ret i32 %12, !dbg !11964
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_sel_region_bb_info_def_base_space(%struct.VEC_sel_region_bb_info_def_base* %vec_, i32 %alloc_) #0 !dbg !11969 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_sel_region_bb_info_def_base* %vec_, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, metadata !11972, metadata !DIExpression()), !dbg !11973
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11974, metadata !DIExpression()), !dbg !11973
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11973
  %cmp = icmp sge i32 %0, 0, !dbg !11973
  %conv = zext i1 %cmp to i32, !dbg !11973
  %1 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11973
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_base* %1, null, !dbg !11973
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11973

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11973
  %alloc = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %2, i32 0, i32 1, !dbg !11973
  %3 = load i32, i32* %alloc, align 4, !dbg !11973
  %4 = load %struct.VEC_sel_region_bb_info_def_base*, %struct.VEC_sel_region_bb_info_def_base** %vec_.addr, align 8, !dbg !11973
  %num = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_base, %struct.VEC_sel_region_bb_info_def_base* %4, i32 0, i32 0, !dbg !11973
  %5 = load i32, i32* %num, align 8, !dbg !11973
  %sub = sub i32 %3, %5, !dbg !11973
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !11973
  %cmp1 = icmp uge i32 %sub, %6, !dbg !11973
  %conv2 = zext i1 %cmp1 to i32, !dbg !11973
  br label %cond.end, !dbg !11973

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !11973
  %tobool3 = icmp ne i32 %7, 0, !dbg !11973
  %lnot = xor i1 %tobool3, true, !dbg !11973
  %lnot.ext = zext i1 %lnot to i32, !dbg !11973
  br label %cond.end, !dbg !11973

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !11973
  ret i32 %cond, !dbg !11973
}

declare dso_local void @remove_notes(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @restore_other_notes(%struct.rtx_def*, %struct.basic_block_def*) #2

declare dso_local void @reemit_notes(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_sel_region_bb_info_def_heap_free(%struct.VEC_sel_region_bb_info_def_heap** %vec_) #0 !dbg !11975 {
entry:
  %vec_.addr = alloca %struct.VEC_sel_region_bb_info_def_heap**, align 8
  store %struct.VEC_sel_region_bb_info_def_heap** %vec_, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, metadata !11978, metadata !DIExpression()), !dbg !11979
  %0 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11980
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %0, align 8, !dbg !11980
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %1, null, !dbg !11980
  br i1 %tobool, label %if.then, label %if.end, !dbg !11979

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11980
  %3 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** %2, align 8, !dbg !11980
  %4 = bitcast %struct.VEC_sel_region_bb_info_def_heap* %3 to i8*, !dbg !11980
  call void @free(i8* %4), !dbg !11980
  br label %if.end, !dbg !11980

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_sel_region_bb_info_def_heap**, %struct.VEC_sel_region_bb_info_def_heap*** %vec_.addr, align 8, !dbg !11979
  store %struct.VEC_sel_region_bb_info_def_heap* null, %struct.VEC_sel_region_bb_info_def_heap** %5, align 8, !dbg !11979
  ret void, !dbg !11979
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_rtx_heap* @VEC_rtx_heap_alloc(i32 %alloc_) #0 !dbg !11982 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11985, metadata !DIExpression()), !dbg !11986
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11986
  %call = call i8* @vec_heap_p_reserve_exact(i8* null, i32 %0), !dbg !11986
  %1 = bitcast i8* %call to %struct.VEC_rtx_heap*, !dbg !11986
  ret %struct.VEC_rtx_heap* %1, !dbg !11986
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !11987 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11990, metadata !DIExpression()), !dbg !11991
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !11991
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !11991
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !11991
  ret %struct.VEC_int_heap* %1, !dbg !11991
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_heap_reserve(%struct.VEC_rtx_heap** %vec_, i32 %alloc_) #0 !dbg !11992 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_rtx_heap** %vec_, %struct.VEC_rtx_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_heap*** %vec_.addr, metadata !11995, metadata !DIExpression()), !dbg !11996
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !11997, metadata !DIExpression()), !dbg !11996
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !11998, metadata !DIExpression()), !dbg !11996
  %0 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11996
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %0, align 8, !dbg !11996
  %tobool = icmp ne %struct.VEC_rtx_heap* %1, null, !dbg !11996
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !11996

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11996
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %2, align 8, !dbg !11996
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %3, i32 0, i32 0, !dbg !11996
  br label %cond.end, !dbg !11996

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !11996

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !11996
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !11996
  %call = call i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %cond, i32 %4), !dbg !11996
  %tobool1 = icmp ne i32 %call, 0, !dbg !11996
  %lnot = xor i1 %tobool1, true, !dbg !11996
  %lnot.ext = zext i1 %lnot to i32, !dbg !11996
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !11996
  %5 = load i32, i32* %extend, align 4, !dbg !11999
  %tobool2 = icmp ne i32 %5, 0, !dbg !11999
  br i1 %tobool2, label %if.then, label %if.end, !dbg !11996

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11999
  %7 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** %6, align 8, !dbg !11999
  %8 = bitcast %struct.VEC_rtx_heap* %7 to i8*, !dbg !11999
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !11999
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !11999
  %10 = bitcast i8* %call3 to %struct.VEC_rtx_heap*, !dbg !11999
  %11 = load %struct.VEC_rtx_heap**, %struct.VEC_rtx_heap*** %vec_.addr, align 8, !dbg !11999
  store %struct.VEC_rtx_heap* %10, %struct.VEC_rtx_heap** %11, align 8, !dbg !11999
  br label %if.end, !dbg !11999

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !11996
  ret i32 %12, !dbg !11996
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def** @VEC_rtx_base_quick_push(%struct.VEC_rtx_base* %vec_, %struct.rtx_def* %obj_) #0 !dbg !12001 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %obj_.addr = alloca %struct.rtx_def*, align 8
  %slot_ = alloca %struct.rtx_def**, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !12004, metadata !DIExpression()), !dbg !12005
  store %struct.rtx_def* %obj_, %struct.rtx_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_.addr, metadata !12006, metadata !DIExpression()), !dbg !12005
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %slot_, metadata !12007, metadata !DIExpression()), !dbg !12005
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12005
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !12005
  %1 = load i32, i32* %num, align 8, !dbg !12005
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12005
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !12005
  %3 = load i32, i32* %alloc, align 4, !dbg !12005
  %cmp = icmp ult i32 %1, %3, !dbg !12005
  %conv = zext i1 %cmp to i32, !dbg !12005
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12005
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 2, !dbg !12005
  %5 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12005
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %5, i32 0, i32 0, !dbg !12005
  %6 = load i32, i32* %num1, align 8, !dbg !12005
  %inc = add i32 %6, 1, !dbg !12005
  store i32 %inc, i32* %num1, align 8, !dbg !12005
  %idxprom = zext i32 %6 to i64, !dbg !12005
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !12005
  store %struct.rtx_def** %arrayidx, %struct.rtx_def*** %slot_, align 8, !dbg !12005
  %7 = load %struct.rtx_def*, %struct.rtx_def** %obj_.addr, align 8, !dbg !12005
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !12005
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !12005
  %9 = load %struct.rtx_def**, %struct.rtx_def*** %slot_, align 8, !dbg !12005
  ret %struct.rtx_def** %9, !dbg !12005
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_rtx_base_space(%struct.VEC_rtx_base* %vec_, i32 %alloc_) #0 !dbg !12008 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !12011, metadata !DIExpression()), !dbg !12012
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12013, metadata !DIExpression()), !dbg !12012
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12012
  %cmp = icmp sge i32 %0, 0, !dbg !12012
  %conv = zext i1 %cmp to i32, !dbg !12012
  %1 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12012
  %tobool = icmp ne %struct.VEC_rtx_base* %1, null, !dbg !12012
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12012

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12012
  %alloc = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 1, !dbg !12012
  %3 = load i32, i32* %alloc, align 4, !dbg !12012
  %4 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12012
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %4, i32 0, i32 0, !dbg !12012
  %5 = load i32, i32* %num, align 8, !dbg !12012
  %sub = sub i32 %3, %5, !dbg !12012
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12012
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12012
  %conv2 = zext i1 %cmp1 to i32, !dbg !12012
  br label %cond.end, !dbg !12012

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12012
  %tobool3 = icmp ne i32 %7, 0, !dbg !12012
  %lnot = xor i1 %tobool3, true, !dbg !12012
  %lnot.ext = zext i1 %lnot to i32, !dbg !12012
  br label %cond.end, !dbg !12012

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12012
  ret i32 %cond, !dbg !12012
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !12014 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !12017, metadata !DIExpression()), !dbg !12018
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12019, metadata !DIExpression()), !dbg !12018
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !12020, metadata !DIExpression()), !dbg !12018
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !12018
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !12018
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !12018
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12018

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !12018
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !12018
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !12018
  br label %cond.end, !dbg !12018

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12018

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12018
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !12018
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !12018
  %tobool1 = icmp ne i32 %call, 0, !dbg !12018
  %lnot = xor i1 %tobool1, true, !dbg !12018
  %lnot.ext = zext i1 %lnot to i32, !dbg !12018
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !12018
  %5 = load i32, i32* %extend, align 4, !dbg !12021
  %tobool2 = icmp ne i32 %5, 0, !dbg !12021
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12018

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !12021
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !12021
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !12021
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !12021
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !12021
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !12021
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !12021
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !12021
  br label %if.end, !dbg !12021

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !12018
  ret i32 %12, !dbg !12018
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !12023 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !12026, metadata !DIExpression()), !dbg !12027
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !12028, metadata !DIExpression()), !dbg !12027
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !12029, metadata !DIExpression()), !dbg !12027
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12027
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !12027
  %1 = load i32, i32* %num, align 4, !dbg !12027
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12027
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !12027
  %3 = load i32, i32* %alloc, align 4, !dbg !12027
  %cmp = icmp ult i32 %1, %3, !dbg !12027
  %conv = zext i1 %cmp to i32, !dbg !12027
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12027
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !12027
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12027
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !12027
  %6 = load i32, i32* %num1, align 4, !dbg !12027
  %inc = add i32 %6, 1, !dbg !12027
  store i32 %inc, i32* %num1, align 4, !dbg !12027
  %idxprom = zext i32 %6 to i64, !dbg !12027
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !12027
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !12027
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !12027
  %8 = load i32*, i32** %slot_, align 8, !dbg !12027
  store i32 %7, i32* %8, align 4, !dbg !12027
  %9 = load i32*, i32** %slot_, align 8, !dbg !12027
  ret i32* %9, !dbg !12027
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !12030 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !12033, metadata !DIExpression()), !dbg !12034
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !12035, metadata !DIExpression()), !dbg !12034
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !12034
  %cmp = icmp sge i32 %0, 0, !dbg !12034
  %conv = zext i1 %cmp to i32, !dbg !12034
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12034
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !12034
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12034

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12034
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !12034
  %3 = load i32, i32* %alloc, align 4, !dbg !12034
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !12034
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !12034
  %5 = load i32, i32* %num, align 4, !dbg !12034
  %sub = sub i32 %3, %5, !dbg !12034
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !12034
  %cmp1 = icmp uge i32 %sub, %6, !dbg !12034
  %conv2 = zext i1 %cmp1 to i32, !dbg !12034
  br label %cond.end, !dbg !12034

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !12034
  %tobool3 = icmp ne i32 %7, 0, !dbg !12034
  %lnot = xor i1 %tobool3, true, !dbg !12034
  %lnot.ext = zext i1 %lnot to i32, !dbg !12034
  br label %cond.end, !dbg !12034

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !12034
  ret i32 %cond, !dbg !12034
}

; Function Attrs: noinline nounwind uwtable
define internal void @cfg_preds_1(%struct.basic_block_def* %bb, %struct.rtx_def*** %preds, i32* %n, i32* %size) #0 !dbg !12036 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %preds.addr = alloca %struct.rtx_def***, align 8
  %n.addr = alloca i32*, align 8
  %size.addr = alloca i32*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  %bb_end = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12039, metadata !DIExpression()), !dbg !12040
  store %struct.rtx_def*** %preds, %struct.rtx_def**** %preds.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def**** %preds.addr, metadata !12041, metadata !DIExpression()), !dbg !12042
  store i32* %n, i32** %n.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %n.addr, metadata !12043, metadata !DIExpression()), !dbg !12044
  store i32* %size, i32** %size.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %size.addr, metadata !12045, metadata !DIExpression()), !dbg !12046
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12047, metadata !DIExpression()), !dbg !12048
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12049, metadata !DIExpression()), !dbg !12050
  %0 = load i32*, i32** @block_to_bb, align 8, !dbg !12051
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12051
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 9, !dbg !12051
  %2 = load i32, i32* %index, align 8, !dbg !12051
  %idxprom = sext i32 %2 to i64, !dbg !12051
  %arrayidx = getelementptr inbounds i32, i32* %0, i64 %idxprom, !dbg !12051
  %3 = load i32, i32* %arrayidx, align 4, !dbg !12051
  %cmp = icmp ne i32 %3, 0, !dbg !12051
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !12051

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4579, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12051
  br label %cond.end, !dbg !12051

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12051

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12051
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12052
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 0, !dbg !12052
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds1), !dbg !12052
  %5 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !12052
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 0, !dbg !12052
  %7 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !12052
  store i32 %7, i32* %6, align 8, !dbg !12052
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %5, i32 0, i32 1, !dbg !12052
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !12052
  store %struct.VEC_edge_gc** %9, %struct.VEC_edge_gc*** %8, align 8, !dbg !12052
  %10 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12052
  %11 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !12052
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %10, i8* align 8 %11, i64 16, i1 false), !dbg !12052
  br label %for.cond, !dbg !12052

for.cond:                                         ; preds = %for.inc, %cond.end
  %12 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12054
  %13 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 0, !dbg !12054
  %14 = load i32, i32* %13, align 8, !dbg !12054
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %12, i32 0, i32 1, !dbg !12054
  %16 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %15, align 8, !dbg !12054
  %call2 = call zeroext i8 @ei_cond(i32 %14, %struct.VEC_edge_gc** %16, %struct.edge_def** %e), !dbg !12054
  %tobool = icmp ne i8 %call2, 0, !dbg !12052
  br i1 %tobool, label %for.body, label %for.end, !dbg !12052

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !12056, metadata !DIExpression()), !dbg !12058
  %17 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12059
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 0, !dbg !12060
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12060
  store %struct.basic_block_def* %18, %struct.basic_block_def** %pred_bb, align 8, !dbg !12058
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %bb_end, metadata !12061, metadata !DIExpression()), !dbg !12062
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !12063
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !12063
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !12063
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !12063
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !12063
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !12063
  store %struct.rtx_def* %21, %struct.rtx_def** %bb_end, align 8, !dbg !12062
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !12064
  %call3 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %22), !dbg !12064
  %tobool4 = icmp ne i8 %call3, 0, !dbg !12064
  br i1 %tobool4, label %cond.false6, label %cond.true5, !dbg !12064

cond.true5:                                       ; preds = %for.body
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4587, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12064
  br label %cond.end7, !dbg !12064

cond.false6:                                      ; preds = %for.body
  br label %cond.end7, !dbg !12064

cond.end7:                                        ; preds = %cond.false6, %cond.true5
  %cond8 = phi i32 [ 0, %cond.true5 ], [ 0, %cond.false6 ], !dbg !12064
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !12065
  %call9 = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %23), !dbg !12067
  %tobool10 = icmp ne i8 %call9, 0, !dbg !12067
  br i1 %tobool10, label %if.then, label %if.else, !dbg !12068

if.then:                                          ; preds = %cond.end7
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !12069
  %25 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !12070
  %26 = load i32*, i32** %n.addr, align 8, !dbg !12071
  %27 = load i32*, i32** %size.addr, align 8, !dbg !12072
  call void @cfg_preds_1(%struct.basic_block_def* %24, %struct.rtx_def*** %25, i32* %26, i32* %27), !dbg !12073
  br label %if.end17, !dbg !12073

if.else:                                          ; preds = %cond.end7
  %28 = load i32*, i32** %n.addr, align 8, !dbg !12074
  %29 = load i32, i32* %28, align 4, !dbg !12077
  %30 = load i32*, i32** %size.addr, align 8, !dbg !12078
  %31 = load i32, i32* %30, align 4, !dbg !12079
  %cmp11 = icmp eq i32 %29, %31, !dbg !12080
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !12081

if.then12:                                        ; preds = %if.else
  %32 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !12082
  %33 = load %struct.rtx_def**, %struct.rtx_def*** %32, align 8, !dbg !12082
  %34 = bitcast %struct.rtx_def** %33 to i8*, !dbg !12082
  %35 = load i32*, i32** %size.addr, align 8, !dbg !12082
  %36 = load i32, i32* %35, align 4, !dbg !12082
  %mul = mul nsw i32 2, %36, !dbg !12082
  %add = add nsw i32 %mul, 1, !dbg !12082
  %37 = load i32*, i32** %size.addr, align 8, !dbg !12082
  store i32 %add, i32* %37, align 4, !dbg !12082
  %conv = sext i32 %add to i64, !dbg !12082
  %mul13 = mul i64 8, %conv, !dbg !12082
  %call14 = call i8* @xrealloc(i8* %34, i64 %mul13), !dbg !12082
  %38 = bitcast i8* %call14 to %struct.rtx_def**, !dbg !12082
  %39 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !12083
  store %struct.rtx_def** %38, %struct.rtx_def*** %39, align 8, !dbg !12084
  br label %if.end, !dbg !12085

if.end:                                           ; preds = %if.then12, %if.else
  %40 = load %struct.rtx_def*, %struct.rtx_def** %bb_end, align 8, !dbg !12086
  %41 = load %struct.rtx_def***, %struct.rtx_def**** %preds.addr, align 8, !dbg !12087
  %42 = load %struct.rtx_def**, %struct.rtx_def*** %41, align 8, !dbg !12088
  %43 = load i32*, i32** %n.addr, align 8, !dbg !12089
  %44 = load i32, i32* %43, align 4, !dbg !12090
  %inc = add nsw i32 %44, 1, !dbg !12090
  store i32 %inc, i32* %43, align 4, !dbg !12090
  %idxprom15 = sext i32 %44 to i64, !dbg !12091
  %arrayidx16 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %42, i64 %idxprom15, !dbg !12091
  store %struct.rtx_def* %40, %struct.rtx_def** %arrayidx16, align 8, !dbg !12092
  br label %if.end17

if.end17:                                         ; preds = %if.end, %if.then
  br label %for.inc, !dbg !12093

for.inc:                                          ; preds = %if.end17
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12054
  br label %for.cond, !dbg !12054, !llvm.loop !12094

for.end:                                          ; preds = %for.cond
  %45 = load i32*, i32** %n.addr, align 8, !dbg !12096
  %46 = load i32, i32* %45, align 4, !dbg !12096
  %cmp18 = icmp ne i32 %46, 0, !dbg !12096
  br i1 %cmp18, label %cond.false21, label %cond.true20, !dbg !12096

cond.true20:                                      ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4600, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12096
  br label %cond.end22, !dbg !12096

cond.false21:                                     ; preds = %for.end
  br label %cond.end22, !dbg !12096

cond.end22:                                       ; preds = %cond.false21, %cond.true20
  %cond23 = phi i32 [ 0, %cond.true20 ], [ 0, %cond.false21 ], !dbg !12096
  ret void, !dbg !12097
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12098 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12101, metadata !DIExpression()), !dbg !12102
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !12103
  %3 = load i32, i32* %index, align 8, !dbg !12103
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12104
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !12104
  %6 = load i32, i32* %5, align 8, !dbg !12104
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !12104
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !12104
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !12104
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !12104
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12104

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12104
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !12104
  %11 = load i32, i32* %10, align 8, !dbg !12104
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !12104
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !12104
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !12104
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !12104
  br label %cond.end, !dbg !12104

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12104

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12104
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12104
  %cmp = icmp eq i32 %3, %call2, !dbg !12105
  %conv = zext i1 %cmp to i32, !dbg !12105
  %conv3 = trunc i32 %conv to i8, !dbg !12106
  ret i8 %conv3, !dbg !12107
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12108 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12109, metadata !DIExpression()), !dbg !12110
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12111
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !12111
  %5 = load i32, i32* %4, align 8, !dbg !12111
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !12111
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !12111
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !12111
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !12111
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12111

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !12111
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !12111
  %10 = load i32, i32* %9, align 8, !dbg !12111
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !12111
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !12111
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !12111
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !12111
  br label %cond.end, !dbg !12111

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12111

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12111
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !12111
  %13 = load i32, i32* %index, align 8, !dbg !12111
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !12111
  ret %struct.edge_def* %call2, !dbg !12112
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !12113 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !12116, metadata !DIExpression()), !dbg !12117
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !12118
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !12118
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !12118
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12118

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12118
  br label %cond.end, !dbg !12118

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12118

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12118
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !12119
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !12119
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !12120
  ret %struct.VEC_edge_gc* %5, !dbg !12121
}

declare dso_local void @concat_note_lists(%struct.rtx_def*, %struct.rtx_def**) #2

declare dso_local %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local void @redirect_edge_pred(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @sel_remove_bb(%struct.basic_block_def* %bb, i8 zeroext %remove_from_cfg_p) #0 !dbg !12122 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %remove_from_cfg_p.addr = alloca i8, align 1
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12123, metadata !DIExpression()), !dbg !12124
  store i8 %remove_from_cfg_p, i8* %remove_from_cfg_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %remove_from_cfg_p.addr, metadata !12125, metadata !DIExpression()), !dbg !12126
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12127
  %cmp = icmp ne %struct.basic_block_def* %0, null, !dbg !12127
  br i1 %cmp, label %land.lhs.true, label %cond.true2, !dbg !12127

land.lhs.true:                                    ; preds = %entry
  %1 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12127
  %tobool = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %1, null, !dbg !12127
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12127

cond.true:                                        ; preds = %land.lhs.true
  %2 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12127
  %base = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %2, i32 0, i32 0, !dbg !12127
  br label %cond.end, !dbg !12127

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_sel_region_bb_info_def_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12127
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12127
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !12127
  %4 = load i32, i32* %index, align 8, !dbg !12127
  %call = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond, i32 %4), !dbg !12127
  %note_list = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call, i32 0, i32 0, !dbg !12127
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note_list, align 8, !dbg !12127
  %cmp1 = icmp eq %struct.rtx_def* %5, null, !dbg !12127
  br i1 %cmp1, label %cond.false3, label %cond.true2, !dbg !12127

cond.true2:                                       ; preds = %cond.end, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5026, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12127
  br label %cond.end4, !dbg !12127

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !12127

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !12127
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12128
  call void @remove_bb_from_region(%struct.basic_block_def* %6), !dbg !12129
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12130
  call void @return_bb_to_pool(%struct.basic_block_def* %7), !dbg !12131
  %8 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_reschedule, align 8, !dbg !12132
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12133
  %index6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !12134
  %10 = load i32, i32* %index6, align 8, !dbg !12134
  %call7 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %8, i32 %10), !dbg !12135
  %11 = load i8, i8* %remove_from_cfg_p.addr, align 1, !dbg !12136
  %tobool8 = icmp ne i8 %11, 0, !dbg !12136
  br i1 %tobool8, label %if.then, label %if.end, !dbg !12138

if.then:                                          ; preds = %cond.end4
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12139
  call void @delete_and_free_basic_block(%struct.basic_block_def* %12), !dbg !12140
  br label %if.end, !dbg !12140

if.end:                                           ; preds = %if.then, %cond.end4
  %13 = load i32*, i32** @containing_rgn, align 8, !dbg !12141
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12141
  %index9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !12141
  %15 = load i32, i32* %index9, align 8, !dbg !12141
  %idxprom = sext i32 %15 to i64, !dbg !12141
  %arrayidx = getelementptr inbounds i32, i32* %13, i64 %idxprom, !dbg !12141
  %16 = load i32, i32* %arrayidx, align 4, !dbg !12141
  call void @rgn_setup_region(i32 %16), !dbg !12142
  ret void, !dbg !12143
}

; Function Attrs: noinline nounwind uwtable
define internal void @remove_bb_from_region(%struct.basic_block_def* %bb) #0 !dbg !12144 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %pos = alloca i32, align 4
  %bbi = alloca i32, align 4
  %rgn = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12145, metadata !DIExpression()), !dbg !12146
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12147, metadata !DIExpression()), !dbg !12148
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !12149, metadata !DIExpression()), !dbg !12150
  call void @llvm.dbg.declare(metadata i32* %bbi, metadata !12151, metadata !DIExpression()), !dbg !12152
  store i32 -2, i32* %bbi, align 4, !dbg !12152
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !12153, metadata !DIExpression()), !dbg !12154
  %0 = load i32*, i32** @containing_rgn, align 8, !dbg !12155
  %1 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12155
  %2 = load i32*, i32** @ebb_head, align 8, !dbg !12155
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0, !dbg !12155
  %3 = load i32, i32* %arrayidx, align 4, !dbg !12155
  %idxprom = sext i32 %3 to i64, !dbg !12155
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !12155
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !12155
  %idxprom2 = sext i32 %4 to i64, !dbg !12155
  %arrayidx3 = getelementptr inbounds i32, i32* %0, i64 %idxprom2, !dbg !12155
  %5 = load i32, i32* %arrayidx3, align 4, !dbg !12155
  store i32 %5, i32* %rgn, align 4, !dbg !12156
  %6 = load i32*, i32** @block_to_bb, align 8, !dbg !12157
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12157
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 9, !dbg !12157
  %8 = load i32, i32* %index, align 8, !dbg !12157
  %idxprom4 = sext i32 %8 to i64, !dbg !12157
  %arrayidx5 = getelementptr inbounds i32, i32* %6, i64 %idxprom4, !dbg !12157
  %9 = load i32, i32* %arrayidx5, align 4, !dbg !12157
  store i32 %9, i32* %bbi, align 4, !dbg !12158
  %10 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12159
  %11 = load i32, i32* %rgn, align 4, !dbg !12159
  %idxprom6 = sext i32 %11 to i64, !dbg !12159
  %arrayidx7 = getelementptr inbounds %struct.region, %struct.region* %10, i64 %idxprom6, !dbg !12159
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx7, i32 0, i32 1, !dbg !12159
  %12 = load i32, i32* %rgn_blocks, align 4, !dbg !12159
  %13 = load i32, i32* %bbi, align 4, !dbg !12160
  %add = add nsw i32 %12, %13, !dbg !12161
  store i32 %add, i32* %pos, align 4, !dbg !12162
  %14 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12163
  %15 = load i32, i32* %rgn, align 4, !dbg !12163
  %idxprom8 = sext i32 %15 to i64, !dbg !12163
  %arrayidx9 = getelementptr inbounds %struct.region, %struct.region* %14, i64 %idxprom8, !dbg !12163
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx9, i32 0, i32 2, !dbg !12163
  %bf.load = load i8, i8* %has_real_ebb, align 4, !dbg !12163
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !12163
  %bf.clear = and i8 %bf.lshr, 1, !dbg !12163
  %bf.cast = zext i8 %bf.clear to i32, !dbg !12163
  %cmp = icmp eq i32 %bf.cast, 0, !dbg !12163
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12163

land.lhs.true:                                    ; preds = %entry
  %16 = load i32*, i32** @ebb_head, align 8, !dbg !12163
  %17 = load i32, i32* %bbi, align 4, !dbg !12163
  %idxprom10 = sext i32 %17 to i64, !dbg !12163
  %arrayidx11 = getelementptr inbounds i32, i32* %16, i64 %idxprom10, !dbg !12163
  %18 = load i32, i32* %arrayidx11, align 4, !dbg !12163
  %19 = load i32, i32* %pos, align 4, !dbg !12163
  %cmp12 = icmp eq i32 %18, %19, !dbg !12163
  br i1 %cmp12, label %cond.false, label %cond.true, !dbg !12163

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4954, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12163
  br label %cond.end, !dbg !12163

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12163

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12163
  %20 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12164
  %21 = load i32, i32* %rgn, align 4, !dbg !12164
  %add13 = add nsw i32 %21, 1, !dbg !12164
  %idxprom14 = sext i32 %add13 to i64, !dbg !12164
  %arrayidx15 = getelementptr inbounds %struct.region, %struct.region* %20, i64 %idxprom14, !dbg !12164
  %rgn_blocks16 = getelementptr inbounds %struct.region, %struct.region* %arrayidx15, i32 0, i32 1, !dbg !12164
  %22 = load i32, i32* %rgn_blocks16, align 4, !dbg !12164
  %sub = sub nsw i32 %22, 1, !dbg !12166
  store i32 %sub, i32* %i, align 4, !dbg !12167
  br label %for.cond, !dbg !12168

for.cond:                                         ; preds = %for.inc, %cond.end
  %23 = load i32, i32* %i, align 4, !dbg !12169
  %24 = load i32, i32* %pos, align 4, !dbg !12171
  %cmp17 = icmp sge i32 %23, %24, !dbg !12172
  br i1 %cmp17, label %for.body, label %for.end, !dbg !12173

for.body:                                         ; preds = %for.cond
  %25 = load i32*, i32** @block_to_bb, align 8, !dbg !12174
  %26 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12174
  %27 = load i32, i32* %i, align 4, !dbg !12174
  %idxprom18 = sext i32 %27 to i64, !dbg !12174
  %arrayidx19 = getelementptr inbounds i32, i32* %26, i64 %idxprom18, !dbg !12174
  %28 = load i32, i32* %arrayidx19, align 4, !dbg !12174
  %idxprom20 = sext i32 %28 to i64, !dbg !12174
  %arrayidx21 = getelementptr inbounds i32, i32* %25, i64 %idxprom20, !dbg !12174
  %29 = load i32, i32* %arrayidx21, align 4, !dbg !12175
  %dec = add nsw i32 %29, -1, !dbg !12175
  store i32 %dec, i32* %arrayidx21, align 4, !dbg !12175
  br label %for.inc, !dbg !12174

for.inc:                                          ; preds = %for.body
  %30 = load i32, i32* %i, align 4, !dbg !12176
  %dec22 = add nsw i32 %30, -1, !dbg !12176
  store i32 %dec22, i32* %i, align 4, !dbg !12176
  br label %for.cond, !dbg !12177, !llvm.loop !12178

for.end:                                          ; preds = %for.cond
  %31 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12180
  %32 = load i32, i32* %pos, align 4, !dbg !12181
  %idx.ext = sext i32 %32 to i64, !dbg !12182
  %add.ptr = getelementptr inbounds i32, i32* %31, i64 %idx.ext, !dbg !12182
  %33 = bitcast i32* %add.ptr to i8*, !dbg !12183
  %34 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12184
  %35 = load i32, i32* %pos, align 4, !dbg !12185
  %idx.ext23 = sext i32 %35 to i64, !dbg !12186
  %add.ptr24 = getelementptr inbounds i32, i32* %34, i64 %idx.ext23, !dbg !12186
  %add.ptr25 = getelementptr inbounds i32, i32* %add.ptr24, i64 1, !dbg !12187
  %36 = bitcast i32* %add.ptr25 to i8*, !dbg !12183
  %37 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12188
  %38 = load i32, i32* @nr_regions, align 4, !dbg !12188
  %idxprom26 = sext i32 %38 to i64, !dbg !12188
  %arrayidx27 = getelementptr inbounds %struct.region, %struct.region* %37, i64 %idxprom26, !dbg !12188
  %rgn_blocks28 = getelementptr inbounds %struct.region, %struct.region* %arrayidx27, i32 0, i32 1, !dbg !12188
  %39 = load i32, i32* %rgn_blocks28, align 4, !dbg !12188
  %40 = load i32, i32* %pos, align 4, !dbg !12189
  %sub29 = sub nsw i32 %39, %40, !dbg !12190
  %conv = sext i32 %sub29 to i64, !dbg !12191
  %mul = mul i64 %conv, 4, !dbg !12192
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %36, i64 %mul, i1 false), !dbg !12183
  %41 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12193
  %42 = load i32, i32* %rgn, align 4, !dbg !12193
  %idxprom30 = sext i32 %42 to i64, !dbg !12193
  %arrayidx31 = getelementptr inbounds %struct.region, %struct.region* %41, i64 %idxprom30, !dbg !12193
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx31, i32 0, i32 0, !dbg !12193
  %43 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !12194
  %dec32 = add nsw i32 %43, -1, !dbg !12194
  store i32 %dec32, i32* %rgn_nr_blocks, align 4, !dbg !12194
  %44 = load i32, i32* %rgn, align 4, !dbg !12195
  %add33 = add nsw i32 %44, 1, !dbg !12197
  store i32 %add33, i32* %i, align 4, !dbg !12198
  br label %for.cond34, !dbg !12199

for.cond34:                                       ; preds = %for.inc42, %for.end
  %45 = load i32, i32* %i, align 4, !dbg !12200
  %46 = load i32, i32* @nr_regions, align 4, !dbg !12202
  %cmp35 = icmp sle i32 %45, %46, !dbg !12203
  br i1 %cmp35, label %for.body37, label %for.end43, !dbg !12204

for.body37:                                       ; preds = %for.cond34
  %47 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12205
  %48 = load i32, i32* %i, align 4, !dbg !12205
  %idxprom38 = sext i32 %48 to i64, !dbg !12205
  %arrayidx39 = getelementptr inbounds %struct.region, %struct.region* %47, i64 %idxprom38, !dbg !12205
  %rgn_blocks40 = getelementptr inbounds %struct.region, %struct.region* %arrayidx39, i32 0, i32 1, !dbg !12205
  %49 = load i32, i32* %rgn_blocks40, align 4, !dbg !12206
  %dec41 = add nsw i32 %49, -1, !dbg !12206
  store i32 %dec41, i32* %rgn_blocks40, align 4, !dbg !12206
  br label %for.inc42, !dbg !12205

for.inc42:                                        ; preds = %for.body37
  %50 = load i32, i32* %i, align 4, !dbg !12207
  %inc = add nsw i32 %50, 1, !dbg !12207
  store i32 %inc, i32* %i, align 4, !dbg !12207
  br label %for.cond34, !dbg !12208, !llvm.loop !12209

for.end43:                                        ; preds = %for.cond34
  ret void, !dbg !12211
}

; Function Attrs: noinline nounwind uwtable
define internal void @return_bb_to_pool(%struct.basic_block_def* %bb) #0 !dbg !12212 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12213, metadata !DIExpression()), !dbg !12214
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !12215, metadata !DIExpression()), !dbg !12216
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12217
  %call = call %struct.rtx_def* @bb_note(%struct.basic_block_def* %0), !dbg !12218
  store %struct.rtx_def* %call, %struct.rtx_def** %note, align 8, !dbg !12216
  %1 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !12219
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !12219
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12219
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !12219
  %rt_bb = bitcast %union.rtunion_def* %arrayidx to %struct.basic_block_def**, !dbg !12219
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !12219
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12219
  %cmp = icmp eq %struct.basic_block_def* %2, %3, !dbg !12219
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12219

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12219
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 2, !dbg !12219
  %5 = load i8*, i8** %aux, align 8, !dbg !12219
  %cmp1 = icmp eq i8* %5, null, !dbg !12219
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !12219

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4755, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12219
  br label %cond.end, !dbg !12219

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12219

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12219
  ret void, !dbg !12220
}

declare dso_local zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @delete_and_free_basic_block(%struct.basic_block_def* %bb) #0 !dbg !12221 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12222, metadata !DIExpression()), !dbg !12223
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12224
  %call = call zeroext i8 @sel_bb_empty_p(%struct.basic_block_def* %0), !dbg !12224
  %tobool = icmp ne i8 %call, 0, !dbg !12224
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !12224

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4890, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12224
  br label %cond.end, !dbg !12224

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12224

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12224
  %1 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12225
  %tobool1 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %1, null, !dbg !12225
  br i1 %tobool1, label %cond.true2, label %cond.false3, !dbg !12225

cond.true2:                                       ; preds = %cond.end
  %2 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12225
  %base = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %2, i32 0, i32 0, !dbg !12225
  br label %cond.end4, !dbg !12225

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !12225

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base, %cond.true2 ], [ null, %cond.false3 ], !dbg !12225
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12225
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 9, !dbg !12225
  %4 = load i32, i32* %index, align 8, !dbg !12225
  %call6 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond5, i32 %4), !dbg !12225
  %lv_set = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call6, i32 0, i32 0, !dbg !12225
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set, align 8, !dbg !12225
  %tobool7 = icmp ne %struct.bitmap_head_def* %5, null, !dbg !12225
  br i1 %tobool7, label %if.then, label %if.end, !dbg !12227

if.then:                                          ; preds = %cond.end4
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12228
  call void @free_lv_set(%struct.basic_block_def* %6), !dbg !12229
  br label %if.end, !dbg !12229

if.end:                                           ; preds = %if.then, %cond.end4
  %7 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** @blocks_to_reschedule, align 8, !dbg !12230
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12231
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 9, !dbg !12232
  %9 = load i32, i32* %index8, align 8, !dbg !12232
  %call9 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %7, i32 %9), !dbg !12233
  %10 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12234
  %tobool10 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %10, null, !dbg !12234
  br i1 %tobool10, label %cond.true11, label %cond.false13, !dbg !12234

cond.true11:                                      ; preds = %if.end
  %11 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12234
  %base12 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %11, i32 0, i32 0, !dbg !12234
  br label %cond.end14, !dbg !12234

cond.false13:                                     ; preds = %if.end
  br label %cond.end14, !dbg !12234

cond.end14:                                       ; preds = %cond.false13, %cond.true11
  %cond15 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base12, %cond.true11 ], [ null, %cond.false13 ], !dbg !12234
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12234
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !12234
  %13 = load i32, i32* %index16, align 8, !dbg !12234
  %call17 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond15, i32 %13), !dbg !12234
  %lv_set18 = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call17, i32 0, i32 0, !dbg !12234
  %14 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %lv_set18, align 8, !dbg !12234
  %cmp = icmp eq %struct.bitmap_head_def* %14, null, !dbg !12234
  br i1 %cmp, label %land.lhs.true, label %cond.true48, !dbg !12234

land.lhs.true:                                    ; preds = %cond.end14
  %15 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12234
  %tobool19 = icmp ne %struct.VEC_sel_global_bb_info_def_heap* %15, null, !dbg !12234
  br i1 %tobool19, label %cond.true20, label %cond.false22, !dbg !12234

cond.true20:                                      ; preds = %land.lhs.true
  %16 = load %struct.VEC_sel_global_bb_info_def_heap*, %struct.VEC_sel_global_bb_info_def_heap** @sel_global_bb_info, align 8, !dbg !12234
  %base21 = getelementptr inbounds %struct.VEC_sel_global_bb_info_def_heap, %struct.VEC_sel_global_bb_info_def_heap* %16, i32 0, i32 0, !dbg !12234
  br label %cond.end23, !dbg !12234

cond.false22:                                     ; preds = %land.lhs.true
  br label %cond.end23, !dbg !12234

cond.end23:                                       ; preds = %cond.false22, %cond.true20
  %cond24 = phi %struct.VEC_sel_global_bb_info_def_base* [ %base21, %cond.true20 ], [ null, %cond.false22 ], !dbg !12234
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12234
  %index25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !12234
  %18 = load i32, i32* %index25, align 8, !dbg !12234
  %call26 = call %struct.sel_global_bb_info_def* @VEC_sel_global_bb_info_def_base_index(%struct.VEC_sel_global_bb_info_def_base* %cond24, i32 %18), !dbg !12234
  %lv_set_valid_p = getelementptr inbounds %struct.sel_global_bb_info_def, %struct.sel_global_bb_info_def* %call26, i32 0, i32 1, !dbg !12234
  %19 = load i8, i8* %lv_set_valid_p, align 8, !dbg !12234
  %tobool27 = icmp ne i8 %19, 0, !dbg !12234
  br i1 %tobool27, label %cond.true48, label %land.lhs.true28, !dbg !12234

land.lhs.true28:                                  ; preds = %cond.end23
  %20 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12234
  %tobool29 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %20, null, !dbg !12234
  br i1 %tobool29, label %cond.true30, label %cond.false32, !dbg !12234

cond.true30:                                      ; preds = %land.lhs.true28
  %21 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12234
  %base31 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %21, i32 0, i32 0, !dbg !12234
  br label %cond.end33, !dbg !12234

cond.false32:                                     ; preds = %land.lhs.true28
  br label %cond.end33, !dbg !12234

cond.end33:                                       ; preds = %cond.false32, %cond.true30
  %cond34 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base31, %cond.true30 ], [ null, %cond.false32 ], !dbg !12234
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12234
  %index35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !12234
  %23 = load i32, i32* %index35, align 8, !dbg !12234
  %call36 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond34, i32 %23), !dbg !12234
  %av_level = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call36, i32 0, i32 2, !dbg !12234
  %24 = load i32, i32* %av_level, align 8, !dbg !12234
  %cmp37 = icmp eq i32 %24, 0, !dbg !12234
  br i1 %cmp37, label %land.lhs.true38, label %cond.true48, !dbg !12234

land.lhs.true38:                                  ; preds = %cond.end33
  %25 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12234
  %tobool39 = icmp ne %struct.VEC_sel_region_bb_info_def_heap* %25, null, !dbg !12234
  br i1 %tobool39, label %cond.true40, label %cond.false42, !dbg !12234

cond.true40:                                      ; preds = %land.lhs.true38
  %26 = load %struct.VEC_sel_region_bb_info_def_heap*, %struct.VEC_sel_region_bb_info_def_heap** @sel_region_bb_info, align 8, !dbg !12234
  %base41 = getelementptr inbounds %struct.VEC_sel_region_bb_info_def_heap, %struct.VEC_sel_region_bb_info_def_heap* %26, i32 0, i32 0, !dbg !12234
  br label %cond.end43, !dbg !12234

cond.false42:                                     ; preds = %land.lhs.true38
  br label %cond.end43, !dbg !12234

cond.end43:                                       ; preds = %cond.false42, %cond.true40
  %cond44 = phi %struct.VEC_sel_region_bb_info_def_base* [ %base41, %cond.true40 ], [ null, %cond.false42 ], !dbg !12234
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12234
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !12234
  %28 = load i32, i32* %index45, align 8, !dbg !12234
  %call46 = call %struct.sel_region_bb_info_def* @VEC_sel_region_bb_info_def_base_index(%struct.VEC_sel_region_bb_info_def_base* %cond44, i32 %28), !dbg !12234
  %av_set = getelementptr inbounds %struct.sel_region_bb_info_def, %struct.sel_region_bb_info_def* %call46, i32 0, i32 1, !dbg !12234
  %29 = load %struct._list_node*, %struct._list_node** %av_set, align 8, !dbg !12234
  %cmp47 = icmp eq %struct._list_node* %29, null, !dbg !12234
  br i1 %cmp47, label %cond.false49, label %cond.true48, !dbg !12234

cond.true48:                                      ; preds = %cond.end43, %cond.end33, %cond.end23, %cond.end14
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4903, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12234
  br label %cond.end50, !dbg !12234

cond.false49:                                     ; preds = %cond.end43
  br label %cond.end50, !dbg !12234

cond.end50:                                       ; preds = %cond.false49, %cond.true48
  %cond51 = phi i32 [ 0, %cond.true48 ], [ 0, %cond.false49 ], !dbg !12234
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12235
  call void @delete_basic_block(%struct.basic_block_def* %30), !dbg !12236
  ret void, !dbg !12237
}

declare dso_local void @rgn_setup_region(i32) #2

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

declare dso_local void @sched_init_bbs() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_length(%struct.VEC_basic_block_base* %vec_) #0 !dbg !12238 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !12241, metadata !DIExpression()), !dbg !12242
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !12242
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !12242
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12242

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !12242
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %1, i32 0, i32 0, !dbg !12242
  %2 = load i32, i32* %num, align 8, !dbg !12242
  br label %cond.end, !dbg !12242

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !12242
  ret i32 %cond, !dbg !12242
}

; Function Attrs: noinline nounwind uwtable
define internal void @add_block_to_current_region(%struct.basic_block_def* %bb) #0 !dbg !12243 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  %pos = alloca i32, align 4
  %bbi = alloca i32, align 4
  %rgn = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12244, metadata !DIExpression()), !dbg !12245
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12246, metadata !DIExpression()), !dbg !12247
  call void @llvm.dbg.declare(metadata i32* %pos, metadata !12248, metadata !DIExpression()), !dbg !12249
  call void @llvm.dbg.declare(metadata i32* %bbi, metadata !12250, metadata !DIExpression()), !dbg !12251
  store i32 -2, i32* %bbi, align 4, !dbg !12251
  call void @llvm.dbg.declare(metadata i32* %rgn, metadata !12252, metadata !DIExpression()), !dbg !12253
  %0 = load i32*, i32** @containing_rgn, align 8, !dbg !12254
  %1 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12254
  %2 = load i32*, i32** @ebb_head, align 8, !dbg !12254
  %arrayidx = getelementptr inbounds i32, i32* %2, i64 0, !dbg !12254
  %3 = load i32, i32* %arrayidx, align 4, !dbg !12254
  %idxprom = sext i32 %3 to i64, !dbg !12254
  %arrayidx1 = getelementptr inbounds i32, i32* %1, i64 %idxprom, !dbg !12254
  %4 = load i32, i32* %arrayidx1, align 4, !dbg !12254
  %idxprom2 = sext i32 %4 to i64, !dbg !12254
  %arrayidx3 = getelementptr inbounds i32, i32* %0, i64 %idxprom2, !dbg !12254
  %5 = load i32, i32* %arrayidx3, align 4, !dbg !12254
  store i32 %5, i32* %rgn, align 4, !dbg !12255
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12256
  %7 = load i32, i32* %rgn, align 4, !dbg !12257
  %call = call i32 @find_place_to_insert_bb(%struct.basic_block_def* %6, i32 %7), !dbg !12258
  store i32 %call, i32* %bbi, align 4, !dbg !12259
  %8 = load i32, i32* %bbi, align 4, !dbg !12260
  %add = add nsw i32 %8, 1, !dbg !12260
  store i32 %add, i32* %bbi, align 4, !dbg !12260
  %9 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12261
  %10 = load i32, i32* %rgn, align 4, !dbg !12261
  %idxprom4 = sext i32 %10 to i64, !dbg !12261
  %arrayidx5 = getelementptr inbounds %struct.region, %struct.region* %9, i64 %idxprom4, !dbg !12261
  %rgn_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx5, i32 0, i32 1, !dbg !12261
  %11 = load i32, i32* %rgn_blocks, align 4, !dbg !12261
  %12 = load i32, i32* %bbi, align 4, !dbg !12262
  %add6 = add nsw i32 %11, %12, !dbg !12263
  store i32 %add6, i32* %pos, align 4, !dbg !12264
  %13 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12265
  %14 = load i32, i32* %rgn, align 4, !dbg !12265
  %idxprom7 = sext i32 %14 to i64, !dbg !12265
  %arrayidx8 = getelementptr inbounds %struct.region, %struct.region* %13, i64 %idxprom7, !dbg !12265
  %has_real_ebb = getelementptr inbounds %struct.region, %struct.region* %arrayidx8, i32 0, i32 2, !dbg !12265
  %bf.load = load i8, i8* %has_real_ebb, align 4, !dbg !12265
  %bf.lshr = lshr i8 %bf.load, 1, !dbg !12265
  %bf.clear = and i8 %bf.lshr, 1, !dbg !12265
  %bf.cast = zext i8 %bf.clear to i32, !dbg !12265
  %cmp = icmp eq i32 %bf.cast, 0, !dbg !12265
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !12265

land.lhs.true:                                    ; preds = %entry
  %15 = load i32*, i32** @ebb_head, align 8, !dbg !12265
  %16 = load i32, i32* %bbi, align 4, !dbg !12265
  %idxprom9 = sext i32 %16 to i64, !dbg !12265
  %arrayidx10 = getelementptr inbounds i32, i32* %15, i64 %idxprom9, !dbg !12265
  %17 = load i32, i32* %arrayidx10, align 4, !dbg !12265
  %18 = load i32, i32* %pos, align 4, !dbg !12265
  %cmp11 = icmp eq i32 %17, %18, !dbg !12265
  br i1 %cmp11, label %cond.false, label %cond.true, !dbg !12265

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4920, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12265
  br label %cond.end, !dbg !12265

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !12265

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !12265
  call void @extend_regions(), !dbg !12266
  %19 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12267
  %20 = load i32, i32* %rgn, align 4, !dbg !12267
  %add12 = add nsw i32 %20, 1, !dbg !12267
  %idxprom13 = sext i32 %add12 to i64, !dbg !12267
  %arrayidx14 = getelementptr inbounds %struct.region, %struct.region* %19, i64 %idxprom13, !dbg !12267
  %rgn_blocks15 = getelementptr inbounds %struct.region, %struct.region* %arrayidx14, i32 0, i32 1, !dbg !12267
  %21 = load i32, i32* %rgn_blocks15, align 4, !dbg !12267
  %sub = sub nsw i32 %21, 1, !dbg !12269
  store i32 %sub, i32* %i, align 4, !dbg !12270
  br label %for.cond, !dbg !12271

for.cond:                                         ; preds = %for.inc, %cond.end
  %22 = load i32, i32* %i, align 4, !dbg !12272
  %23 = load i32, i32* %pos, align 4, !dbg !12274
  %cmp16 = icmp sge i32 %22, %23, !dbg !12275
  br i1 %cmp16, label %for.body, label %for.end, !dbg !12276

for.body:                                         ; preds = %for.cond
  %24 = load i32*, i32** @block_to_bb, align 8, !dbg !12277
  %25 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12277
  %26 = load i32, i32* %i, align 4, !dbg !12277
  %idxprom17 = sext i32 %26 to i64, !dbg !12277
  %arrayidx18 = getelementptr inbounds i32, i32* %25, i64 %idxprom17, !dbg !12277
  %27 = load i32, i32* %arrayidx18, align 4, !dbg !12277
  %idxprom19 = sext i32 %27 to i64, !dbg !12277
  %arrayidx20 = getelementptr inbounds i32, i32* %24, i64 %idxprom19, !dbg !12277
  %28 = load i32, i32* %arrayidx20, align 4, !dbg !12278
  %inc = add nsw i32 %28, 1, !dbg !12278
  store i32 %inc, i32* %arrayidx20, align 4, !dbg !12278
  br label %for.inc, !dbg !12277

for.inc:                                          ; preds = %for.body
  %29 = load i32, i32* %i, align 4, !dbg !12279
  %dec = add nsw i32 %29, -1, !dbg !12279
  store i32 %dec, i32* %i, align 4, !dbg !12279
  br label %for.cond, !dbg !12280, !llvm.loop !12281

for.end:                                          ; preds = %for.cond
  %30 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12283
  %31 = load i32, i32* %pos, align 4, !dbg !12284
  %idx.ext = sext i32 %31 to i64, !dbg !12285
  %add.ptr = getelementptr inbounds i32, i32* %30, i64 %idx.ext, !dbg !12285
  %add.ptr21 = getelementptr inbounds i32, i32* %add.ptr, i64 1, !dbg !12286
  %32 = bitcast i32* %add.ptr21 to i8*, !dbg !12287
  %33 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12288
  %34 = load i32, i32* %pos, align 4, !dbg !12289
  %idx.ext22 = sext i32 %34 to i64, !dbg !12290
  %add.ptr23 = getelementptr inbounds i32, i32* %33, i64 %idx.ext22, !dbg !12290
  %35 = bitcast i32* %add.ptr23 to i8*, !dbg !12287
  %36 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12291
  %37 = load i32, i32* @nr_regions, align 4, !dbg !12291
  %idxprom24 = sext i32 %37 to i64, !dbg !12291
  %arrayidx25 = getelementptr inbounds %struct.region, %struct.region* %36, i64 %idxprom24, !dbg !12291
  %rgn_blocks26 = getelementptr inbounds %struct.region, %struct.region* %arrayidx25, i32 0, i32 1, !dbg !12291
  %38 = load i32, i32* %rgn_blocks26, align 4, !dbg !12291
  %39 = load i32, i32* %pos, align 4, !dbg !12292
  %sub27 = sub nsw i32 %38, %39, !dbg !12293
  %conv = sext i32 %sub27 to i64, !dbg !12294
  %mul = mul i64 %conv, 4, !dbg !12295
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %32, i8* align 4 %35, i64 %mul, i1 false), !dbg !12287
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12296
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %40, i32 0, i32 9, !dbg !12297
  %41 = load i32, i32* %index, align 8, !dbg !12297
  %42 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12298
  %43 = load i32, i32* %pos, align 4, !dbg !12299
  %idxprom28 = sext i32 %43 to i64, !dbg !12298
  %arrayidx29 = getelementptr inbounds i32, i32* %42, i64 %idxprom28, !dbg !12298
  store i32 %41, i32* %arrayidx29, align 4, !dbg !12300
  %44 = load i32, i32* %bbi, align 4, !dbg !12301
  %45 = load i32*, i32** @block_to_bb, align 8, !dbg !12302
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12302
  %index30 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 9, !dbg !12302
  %47 = load i32, i32* %index30, align 8, !dbg !12302
  %idxprom31 = sext i32 %47 to i64, !dbg !12302
  %arrayidx32 = getelementptr inbounds i32, i32* %45, i64 %idxprom31, !dbg !12302
  store i32 %44, i32* %arrayidx32, align 4, !dbg !12303
  %48 = load i32, i32* %rgn, align 4, !dbg !12304
  %49 = load i32*, i32** @containing_rgn, align 8, !dbg !12305
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12305
  %index33 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %50, i32 0, i32 9, !dbg !12305
  %51 = load i32, i32* %index33, align 8, !dbg !12305
  %idxprom34 = sext i32 %51 to i64, !dbg !12305
  %arrayidx35 = getelementptr inbounds i32, i32* %49, i64 %idxprom34, !dbg !12305
  store i32 %48, i32* %arrayidx35, align 4, !dbg !12306
  %52 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12307
  %53 = load i32, i32* %rgn, align 4, !dbg !12307
  %idxprom36 = sext i32 %53 to i64, !dbg !12307
  %arrayidx37 = getelementptr inbounds %struct.region, %struct.region* %52, i64 %idxprom36, !dbg !12307
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx37, i32 0, i32 0, !dbg !12307
  %54 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !12308
  %inc38 = add nsw i32 %54, 1, !dbg !12308
  store i32 %inc38, i32* %rgn_nr_blocks, align 4, !dbg !12308
  %55 = load i32, i32* %rgn, align 4, !dbg !12309
  %add39 = add nsw i32 %55, 1, !dbg !12311
  store i32 %add39, i32* %i, align 4, !dbg !12312
  br label %for.cond40, !dbg !12313

for.cond40:                                       ; preds = %for.inc48, %for.end
  %56 = load i32, i32* %i, align 4, !dbg !12314
  %57 = load i32, i32* @nr_regions, align 4, !dbg !12316
  %cmp41 = icmp sle i32 %56, %57, !dbg !12317
  br i1 %cmp41, label %for.body43, label %for.end50, !dbg !12318

for.body43:                                       ; preds = %for.cond40
  %58 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12319
  %59 = load i32, i32* %i, align 4, !dbg !12319
  %idxprom44 = sext i32 %59 to i64, !dbg !12319
  %arrayidx45 = getelementptr inbounds %struct.region, %struct.region* %58, i64 %idxprom44, !dbg !12319
  %rgn_blocks46 = getelementptr inbounds %struct.region, %struct.region* %arrayidx45, i32 0, i32 1, !dbg !12319
  %60 = load i32, i32* %rgn_blocks46, align 4, !dbg !12320
  %inc47 = add nsw i32 %60, 1, !dbg !12320
  store i32 %inc47, i32* %rgn_blocks46, align 4, !dbg !12320
  br label %for.inc48, !dbg !12319

for.inc48:                                        ; preds = %for.body43
  %61 = load i32, i32* %i, align 4, !dbg !12321
  %inc49 = add nsw i32 %61, 1, !dbg !12321
  store i32 %inc49, i32* %i, align 4, !dbg !12321
  br label %for.cond40, !dbg !12322, !llvm.loop !12323

for.end50:                                        ; preds = %for.cond40
  ret void, !dbg !12325
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_place_to_insert_bb(%struct.basic_block_def* %bb, i32 %rgn) #0 !dbg !12326 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %rgn.addr = alloca i32, align 4
  %has_preds_outside_rgn = alloca i8, align 1
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %i = alloca i32, align 4
  %bbi = alloca i32, align 4
  %cur_bbi = alloca i32, align 4
  %pred_bbi = alloca i32, align 4
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12329, metadata !DIExpression()), !dbg !12330
  store i32 %rgn, i32* %rgn.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %rgn.addr, metadata !12331, metadata !DIExpression()), !dbg !12332
  call void @llvm.dbg.declare(metadata i8* %has_preds_outside_rgn, metadata !12333, metadata !DIExpression()), !dbg !12334
  store i8 0, i8* %has_preds_outside_rgn, align 1, !dbg !12334
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !12335, metadata !DIExpression()), !dbg !12336
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !12337, metadata !DIExpression()), !dbg !12338
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12339
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !12339
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !12339
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !12339
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !12339
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !12339
  store i32 %3, i32* %2, align 8, !dbg !12339
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !12339
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !12339
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !12339
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !12339
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !12339
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !12339
  br label %for.cond, !dbg !12339

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !12341
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !12341
  %10 = load i32, i32* %9, align 8, !dbg !12341
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !12341
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !12341
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !12341
  %tobool = icmp ne i8 %call1, 0, !dbg !12339
  br i1 %tobool, label %for.body, label %for.end, !dbg !12339

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12343
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !12345
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !12345
  %call2 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %14), !dbg !12346
  %tobool3 = icmp ne i8 %call2, 0, !dbg !12346
  br i1 %tobool3, label %if.end, label %if.then, !dbg !12347

if.then:                                          ; preds = %for.body
  store i8 1, i8* %has_preds_outside_rgn, align 1, !dbg !12348
  br label %for.end, !dbg !12350

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !12351

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !12341
  br label %for.cond, !dbg !12341, !llvm.loop !12352

for.end:                                          ; preds = %if.then, %for.cond
  %15 = load i32, i32* @flag_sel_sched_pipelining_outer_loops, align 4, !dbg !12354
  %tobool4 = icmp ne i32 %15, 0, !dbg !12354
  br i1 %tobool4, label %land.lhs.true, label %if.else, !dbg !12356

land.lhs.true:                                    ; preds = %for.end
  %16 = load i8, i8* %has_preds_outside_rgn, align 1, !dbg !12357
  %conv = zext i8 %16 to i32, !dbg !12357
  %tobool5 = icmp ne i32 %conv, 0, !dbg !12357
  br i1 %tobool5, label %if.then11, label %lor.lhs.false, !dbg !12358

lor.lhs.false:                                    ; preds = %land.lhs.true
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12359
  %preds6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 0, !dbg !12359
  %18 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds6, align 8, !dbg !12359
  %tobool7 = icmp ne %struct.VEC_edge_gc* %18, null, !dbg !12359
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !12359

cond.true:                                        ; preds = %lor.lhs.false
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12359
  %preds8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 0, !dbg !12359
  %20 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds8, align 8, !dbg !12359
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %20, i32 0, i32 0, !dbg !12359
  br label %cond.end, !dbg !12359

cond.false:                                       ; preds = %lor.lhs.false
  br label %cond.end, !dbg !12359

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12359
  %call9 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !12359
  %cmp = icmp ugt i32 %call9, 1, !dbg !12360
  br i1 %cmp, label %if.then11, label %if.else, !dbg !12361

if.then11:                                        ; preds = %cond.end, %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %i, metadata !12362, metadata !DIExpression()), !dbg !12364
  call void @llvm.dbg.declare(metadata i32* %bbi, metadata !12365, metadata !DIExpression()), !dbg !12366
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12367
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !12368
  %22 = load i32, i32* %index, align 8, !dbg !12368
  store i32 %22, i32* %bbi, align 4, !dbg !12366
  call void @llvm.dbg.declare(metadata i32* %cur_bbi, metadata !12369, metadata !DIExpression()), !dbg !12370
  call void @recompute_rev_top_order(), !dbg !12371
  %23 = load %struct.region*, %struct.region** @rgn_table, align 8, !dbg !12372
  %24 = load i32, i32* %rgn.addr, align 4, !dbg !12372
  %idxprom = sext i32 %24 to i64, !dbg !12372
  %arrayidx = getelementptr inbounds %struct.region, %struct.region* %23, i64 %idxprom, !dbg !12372
  %rgn_nr_blocks = getelementptr inbounds %struct.region, %struct.region* %arrayidx, i32 0, i32 0, !dbg !12372
  %25 = load i32, i32* %rgn_nr_blocks, align 4, !dbg !12372
  %sub = sub nsw i32 %25, 1, !dbg !12374
  store i32 %sub, i32* %i, align 4, !dbg !12375
  br label %for.cond12, !dbg !12376

for.cond12:                                       ; preds = %for.inc28, %if.then11
  %26 = load i32, i32* %i, align 4, !dbg !12377
  %cmp13 = icmp sge i32 %26, 0, !dbg !12379
  br i1 %cmp13, label %for.body15, label %for.end29, !dbg !12380

for.body15:                                       ; preds = %for.cond12
  %27 = load i32*, i32** @rgn_bb_table, align 8, !dbg !12381
  %28 = load i32*, i32** @ebb_head, align 8, !dbg !12381
  %29 = load i32, i32* %i, align 4, !dbg !12381
  %idxprom16 = sext i32 %29 to i64, !dbg !12381
  %arrayidx17 = getelementptr inbounds i32, i32* %28, i64 %idxprom16, !dbg !12381
  %30 = load i32, i32* %arrayidx17, align 4, !dbg !12381
  %idxprom18 = sext i32 %30 to i64, !dbg !12381
  %arrayidx19 = getelementptr inbounds i32, i32* %27, i64 %idxprom18, !dbg !12381
  %31 = load i32, i32* %arrayidx19, align 4, !dbg !12381
  store i32 %31, i32* %cur_bbi, align 4, !dbg !12383
  %32 = load i32*, i32** @rev_top_order_index, align 8, !dbg !12384
  %33 = load i32, i32* %bbi, align 4, !dbg !12386
  %idxprom20 = sext i32 %33 to i64, !dbg !12384
  %arrayidx21 = getelementptr inbounds i32, i32* %32, i64 %idxprom20, !dbg !12384
  %34 = load i32, i32* %arrayidx21, align 4, !dbg !12384
  %35 = load i32*, i32** @rev_top_order_index, align 8, !dbg !12387
  %36 = load i32, i32* %cur_bbi, align 4, !dbg !12388
  %idxprom22 = sext i32 %36 to i64, !dbg !12387
  %arrayidx23 = getelementptr inbounds i32, i32* %35, i64 %idxprom22, !dbg !12387
  %37 = load i32, i32* %arrayidx23, align 4, !dbg !12387
  %cmp24 = icmp slt i32 %34, %37, !dbg !12389
  br i1 %cmp24, label %if.then26, label %if.end27, !dbg !12390

if.then26:                                        ; preds = %for.body15
  br label %for.end29, !dbg !12391

if.end27:                                         ; preds = %for.body15
  br label %for.inc28, !dbg !12392

for.inc28:                                        ; preds = %if.end27
  %38 = load i32, i32* %i, align 4, !dbg !12393
  %dec = add nsw i32 %38, -1, !dbg !12393
  store i32 %dec, i32* %i, align 4, !dbg !12393
  br label %for.cond12, !dbg !12394, !llvm.loop !12395

for.end29:                                        ; preds = %if.then26, %for.cond12
  %39 = load i32, i32* %i, align 4, !dbg !12397
  %add = add nsw i32 %39, 1, !dbg !12398
  %sub30 = sub nsw i32 %add, 1, !dbg !12399
  store i32 %sub30, i32* %retval, align 4, !dbg !12400
  br label %return, !dbg !12400

if.else:                                          ; preds = %cond.end, %for.end
  %40 = load i8, i8* %has_preds_outside_rgn, align 1, !dbg !12401
  %tobool31 = icmp ne i8 %40, 0, !dbg !12401
  br i1 %tobool31, label %if.then32, label %if.end76, !dbg !12403

if.then32:                                        ; preds = %if.else
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12404
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %41, i32 0, i32 1, !dbg !12404
  %42 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !12404
  %tobool33 = icmp ne %struct.VEC_edge_gc* %42, null, !dbg !12404
  br i1 %tobool33, label %cond.true34, label %cond.false37, !dbg !12404

cond.true34:                                      ; preds = %if.then32
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12404
  %succs35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 1, !dbg !12404
  %44 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs35, align 8, !dbg !12404
  %base36 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %44, i32 0, i32 0, !dbg !12404
  br label %cond.end38, !dbg !12404

cond.false37:                                     ; preds = %if.then32
  br label %cond.end38, !dbg !12404

cond.end38:                                       ; preds = %cond.false37, %cond.true34
  %cond39 = phi %struct.VEC_edge_base* [ %base36, %cond.true34 ], [ null, %cond.false37 ], !dbg !12404
  %call40 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond39, i32 0), !dbg !12404
  store %struct.edge_def* %call40, %struct.edge_def** %e, align 8, !dbg !12406
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12407
  %succs41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 1, !dbg !12407
  %46 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs41, align 8, !dbg !12407
  %tobool42 = icmp ne %struct.VEC_edge_gc* %46, null, !dbg !12407
  br i1 %tobool42, label %cond.true43, label %cond.false46, !dbg !12407

cond.true43:                                      ; preds = %cond.end38
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12407
  %succs44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 1, !dbg !12407
  %48 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs44, align 8, !dbg !12407
  %base45 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %48, i32 0, i32 0, !dbg !12407
  br label %cond.end47, !dbg !12407

cond.false46:                                     ; preds = %cond.end38
  br label %cond.end47, !dbg !12407

cond.end47:                                       ; preds = %cond.false46, %cond.true43
  %cond48 = phi %struct.VEC_edge_base* [ %base45, %cond.true43 ], [ null, %cond.false46 ], !dbg !12407
  %call49 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond48), !dbg !12407
  %cmp50 = icmp eq i32 %call49, 1, !dbg !12407
  br i1 %cmp50, label %land.lhs.true52, label %cond.true72, !dbg !12407

land.lhs.true52:                                  ; preds = %cond.end47
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12407
  %succs53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 1, !dbg !12407
  %50 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs53, align 8, !dbg !12407
  %tobool54 = icmp ne %struct.VEC_edge_gc* %50, null, !dbg !12407
  br i1 %tobool54, label %cond.true55, label %cond.false58, !dbg !12407

cond.true55:                                      ; preds = %land.lhs.true52
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12407
  %succs56 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !12407
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs56, align 8, !dbg !12407
  %base57 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %52, i32 0, i32 0, !dbg !12407
  br label %cond.end59, !dbg !12407

cond.false58:                                     ; preds = %land.lhs.true52
  br label %cond.end59, !dbg !12407

cond.end59:                                       ; preds = %cond.false58, %cond.true55
  %cond60 = phi %struct.VEC_edge_base* [ %base57, %cond.true55 ], [ null, %cond.false58 ], !dbg !12407
  %call61 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond60, i32 0), !dbg !12407
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call61, i32 0, i32 1, !dbg !12407
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !12407
  %call62 = call zeroext i8 @in_current_region_p(%struct.basic_block_def* %53), !dbg !12407
  %conv63 = zext i8 %call62 to i32, !dbg !12407
  %tobool64 = icmp ne i32 %conv63, 0, !dbg !12407
  br i1 %tobool64, label %land.lhs.true65, label %cond.true72, !dbg !12407

land.lhs.true65:                                  ; preds = %cond.end59
  %54 = load i32*, i32** @block_to_bb, align 8, !dbg !12407
  %55 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !12407
  %dest66 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %55, i32 0, i32 1, !dbg !12407
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %dest66, align 8, !dbg !12407
  %index67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %56, i32 0, i32 9, !dbg !12407
  %57 = load i32, i32* %index67, align 8, !dbg !12407
  %idxprom68 = sext i32 %57 to i64, !dbg !12407
  %arrayidx69 = getelementptr inbounds i32, i32* %54, i64 %idxprom68, !dbg !12407
  %58 = load i32, i32* %arrayidx69, align 4, !dbg !12407
  %cmp70 = icmp eq i32 %58, 0, !dbg !12407
  br i1 %cmp70, label %cond.false73, label %cond.true72, !dbg !12407

cond.true72:                                      ; preds = %land.lhs.true65, %cond.end59, %cond.end47
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4864, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12407
  br label %cond.end74, !dbg !12407

cond.false73:                                     ; preds = %land.lhs.true65
  br label %cond.end74, !dbg !12407

cond.end74:                                       ; preds = %cond.false73, %cond.true72
  %cond75 = phi i32 [ 0, %cond.true72 ], [ 0, %cond.false73 ], !dbg !12407
  store i32 -1, i32* %retval, align 4, !dbg !12408
  br label %return, !dbg !12408

if.end76:                                         ; preds = %if.else
  br label %if.end77

if.end77:                                         ; preds = %if.end76
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12409
  %succs78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 1, !dbg !12409
  %60 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs78, align 8, !dbg !12409
  %tobool79 = icmp ne %struct.VEC_edge_gc* %60, null, !dbg !12409
  br i1 %tobool79, label %cond.true80, label %cond.false83, !dbg !12409

cond.true80:                                      ; preds = %if.end77
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12409
  %succs81 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 1, !dbg !12409
  %62 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs81, align 8, !dbg !12409
  %base82 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %62, i32 0, i32 0, !dbg !12409
  br label %cond.end84, !dbg !12409

cond.false83:                                     ; preds = %if.end77
  br label %cond.end84, !dbg !12409

cond.end84:                                       ; preds = %cond.false83, %cond.true80
  %cond85 = phi %struct.VEC_edge_base* [ %base82, %cond.true80 ], [ null, %cond.false83 ], !dbg !12409
  %call86 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond85), !dbg !12409
  %cmp87 = icmp ugt i32 %call86, 0, !dbg !12411
  br i1 %cmp87, label %if.then89, label %if.else118, !dbg !12412

if.then89:                                        ; preds = %cond.end84
  call void @llvm.dbg.declare(metadata i32* %pred_bbi, metadata !12413, metadata !DIExpression()), !dbg !12415
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12416
  %preds90 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 0, !dbg !12416
  %64 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds90, align 8, !dbg !12416
  %tobool91 = icmp ne %struct.VEC_edge_gc* %64, null, !dbg !12416
  br i1 %tobool91, label %cond.true92, label %cond.false95, !dbg !12416

cond.true92:                                      ; preds = %if.then89
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12416
  %preds93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 0, !dbg !12416
  %66 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds93, align 8, !dbg !12416
  %base94 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %66, i32 0, i32 0, !dbg !12416
  br label %cond.end96, !dbg !12416

cond.false95:                                     ; preds = %if.then89
  br label %cond.end96, !dbg !12416

cond.end96:                                       ; preds = %cond.false95, %cond.true92
  %cond97 = phi %struct.VEC_edge_base* [ %base94, %cond.true92 ], [ null, %cond.false95 ], !dbg !12416
  %call98 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond97), !dbg !12416
  %cmp99 = icmp eq i32 %call98, 1, !dbg !12416
  br i1 %cmp99, label %cond.false102, label %cond.true101, !dbg !12416

cond.true101:                                     ; preds = %cond.end96
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 4876, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12416
  br label %cond.end103, !dbg !12416

cond.false102:                                    ; preds = %cond.end96
  br label %cond.end103, !dbg !12416

cond.end103:                                      ; preds = %cond.false102, %cond.true101
  %cond104 = phi i32 [ 0, %cond.true101 ], [ 0, %cond.false102 ], !dbg !12416
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12417
  %preds105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 0, !dbg !12417
  %68 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds105, align 8, !dbg !12417
  %tobool106 = icmp ne %struct.VEC_edge_gc* %68, null, !dbg !12417
  br i1 %tobool106, label %cond.true107, label %cond.false110, !dbg !12417

cond.true107:                                     ; preds = %cond.end103
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12417
  %preds108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 0, !dbg !12417
  %70 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds108, align 8, !dbg !12417
  %base109 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %70, i32 0, i32 0, !dbg !12417
  br label %cond.end111, !dbg !12417

cond.false110:                                    ; preds = %cond.end103
  br label %cond.end111, !dbg !12417

cond.end111:                                      ; preds = %cond.false110, %cond.true107
  %cond112 = phi %struct.VEC_edge_base* [ %base109, %cond.true107 ], [ null, %cond.false110 ], !dbg !12417
  %call113 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond112, i32 0), !dbg !12417
  %src114 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call113, i32 0, i32 0, !dbg !12418
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %src114, align 8, !dbg !12418
  %index115 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 9, !dbg !12419
  %72 = load i32, i32* %index115, align 8, !dbg !12419
  store i32 %72, i32* %pred_bbi, align 4, !dbg !12420
  %73 = load i32*, i32** @block_to_bb, align 8, !dbg !12421
  %74 = load i32, i32* %pred_bbi, align 4, !dbg !12421
  %idxprom116 = sext i32 %74 to i64, !dbg !12421
  %arrayidx117 = getelementptr inbounds i32, i32* %73, i64 %idxprom116, !dbg !12421
  %75 = load i32, i32* %arrayidx117, align 4, !dbg !12421
  store i32 %75, i32* %retval, align 4, !dbg !12422
  br label %return, !dbg !12422

if.else118:                                       ; preds = %cond.end84
  %76 = load i32, i32* @current_nr_blocks, align 4, !dbg !12423
  %sub119 = sub nsw i32 %76, 1, !dbg !12424
  store i32 %sub119, i32* %retval, align 4, !dbg !12425
  br label %return, !dbg !12425

return:                                           ; preds = %if.else118, %cond.end111, %cond.end74, %for.end29
  %77 = load i32, i32* %retval, align 4, !dbg !12426
  ret i32 %77, !dbg !12426
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @check_for_new_jump(%struct.basic_block_def* %bb, i32 %prev_max_uid) #0 !dbg !12427 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %prev_max_uid.addr = alloca i32, align 4
  %end = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !12430, metadata !DIExpression()), !dbg !12431
  store i32 %prev_max_uid, i32* %prev_max_uid.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %prev_max_uid.addr, metadata !12432, metadata !DIExpression()), !dbg !12433
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !12434, metadata !DIExpression()), !dbg !12435
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !12436
  %call = call %struct.rtx_def* @sel_bb_end(%struct.basic_block_def* %0), !dbg !12437
  store %struct.rtx_def* %call, %struct.rtx_def** %end, align 8, !dbg !12438
  %1 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !12439
  %tobool = icmp ne %struct.rtx_def* %1, null, !dbg !12439
  br i1 %tobool, label %land.lhs.true, label %if.end, !dbg !12441

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !12442
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !12442
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12442
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12442
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12442
  %3 = load i32, i32* %rt_int, align 8, !dbg !12442
  %4 = load i32, i32* %prev_max_uid.addr, align 4, !dbg !12443
  %cmp = icmp sge i32 %3, %4, !dbg !12444
  br i1 %cmp, label %if.then, label %if.end, !dbg !12445

if.then:                                          ; preds = %land.lhs.true
  %5 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !12446
  store %struct.rtx_def* %5, %struct.rtx_def** %retval, align 8, !dbg !12447
  br label %return, !dbg !12447

if.end:                                           ; preds = %land.lhs.true, %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !12448
  br label %return, !dbg !12448

return:                                           ; preds = %if.end, %if.then
  %6 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12449
  ret %struct.rtx_def* %6, !dbg !12449
}

declare dso_local %struct.basic_block_def* @sched_split_block_1(%struct.basic_block_def*, %struct.rtx_def*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @get_bb_note_from_pool() #0 !dbg !12450 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %0 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** @bb_note_pool, align 8, !dbg !12453
  %tobool = icmp ne %struct.VEC_rtx_heap* %0, null, !dbg !12453
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !12453

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** @bb_note_pool, align 8, !dbg !12453
  %base = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %1, i32 0, i32 0, !dbg !12453
  br label %cond.end, !dbg !12453

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12453

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_rtx_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !12453
  %call = call i32 @VEC_rtx_base_length(%struct.VEC_rtx_base* %cond), !dbg !12453
  %cmp = icmp eq i32 %call, 0, !dbg !12453
  br i1 %cmp, label %if.then, label %if.else, !dbg !12455

if.then:                                          ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !12456
  br label %return, !dbg !12456

if.else:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !12457, metadata !DIExpression()), !dbg !12459
  %2 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** @bb_note_pool, align 8, !dbg !12460
  %tobool1 = icmp ne %struct.VEC_rtx_heap* %2, null, !dbg !12460
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !12460

cond.true2:                                       ; preds = %if.else
  %3 = load %struct.VEC_rtx_heap*, %struct.VEC_rtx_heap** @bb_note_pool, align 8, !dbg !12460
  %base3 = getelementptr inbounds %struct.VEC_rtx_heap, %struct.VEC_rtx_heap* %3, i32 0, i32 0, !dbg !12460
  br label %cond.end5, !dbg !12460

cond.false4:                                      ; preds = %if.else
  br label %cond.end5, !dbg !12460

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_rtx_base* [ %base3, %cond.true2 ], [ null, %cond.false4 ], !dbg !12460
  %call7 = call %struct.rtx_def* @VEC_rtx_base_pop(%struct.VEC_rtx_base* %cond6), !dbg !12460
  store %struct.rtx_def* %call7, %struct.rtx_def** %note, align 8, !dbg !12459
  %4 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !12461
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !12461
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12461
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !12461
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !12461
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx, align 8, !dbg !12462
  %5 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !12463
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !12463
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !12463
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 2, !dbg !12463
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !12463
  store %struct.rtx_def* null, %struct.rtx_def** %rt_rtx11, align 8, !dbg !12464
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !12465
  store %struct.rtx_def* %6, %struct.rtx_def** %retval, align 8, !dbg !12466
  br label %return, !dbg !12466

return:                                           ; preds = %cond.end5, %if.then
  %7 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !12467
  ret %struct.rtx_def* %7, !dbg !12467
}

declare dso_local %struct.basic_block_def* @create_basic_block_structure(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @VEC_rtx_base_pop(%struct.VEC_rtx_base* %vec_) #0 !dbg !12468 {
entry:
  %vec_.addr = alloca %struct.VEC_rtx_base*, align 8
  %obj_ = alloca %struct.rtx_def*, align 8
  store %struct.VEC_rtx_base* %vec_, %struct.VEC_rtx_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_rtx_base** %vec_.addr, metadata !12471, metadata !DIExpression()), !dbg !12472
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %obj_, metadata !12473, metadata !DIExpression()), !dbg !12472
  %0 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12472
  %num = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %0, i32 0, i32 0, !dbg !12472
  %1 = load i32, i32* %num, align 8, !dbg !12472
  %2 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12472
  %vec = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %2, i32 0, i32 2, !dbg !12472
  %3 = load %struct.VEC_rtx_base*, %struct.VEC_rtx_base** %vec_.addr, align 8, !dbg !12472
  %num1 = getelementptr inbounds %struct.VEC_rtx_base, %struct.VEC_rtx_base* %3, i32 0, i32 0, !dbg !12472
  %4 = load i32, i32* %num1, align 8, !dbg !12472
  %dec = add i32 %4, -1, !dbg !12472
  store i32 %dec, i32* %num1, align 8, !dbg !12472
  %idxprom = zext i32 %dec to i64, !dbg !12472
  %arrayidx = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %vec, i64 0, i64 %idxprom, !dbg !12472
  %5 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !12472
  store %struct.rtx_def* %5, %struct.rtx_def** %obj_, align 8, !dbg !12472
  %6 = load %struct.rtx_def*, %struct.rtx_def** %obj_, align 8, !dbg !12472
  ret %struct.rtx_def* %6, !dbg !12472
}

declare dso_local void @rgn_make_new_region_out_of_new_block(%struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @sched_create_empty_bb_1(%struct.basic_block_def*) #2

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @vinsn_init(%struct.vinsn_def* %vi, %struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !12474 {
entry:
  %vi.addr = alloca %struct.vinsn_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  %hrcf = alloca i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)*, align 8
  %insn_class = alloca i32, align 4
  %rhs = alloca %struct.rtx_def*, align 8
  store %struct.vinsn_def* %vi, %struct.vinsn_def** %vi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.vinsn_def** %vi.addr, metadata !12477, metadata !DIExpression()), !dbg !12478
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12479, metadata !DIExpression()), !dbg !12480
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !12481, metadata !DIExpression()), !dbg !12482
  call void @llvm.dbg.declare(metadata i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)** %hrcf, metadata !12483, metadata !DIExpression()), !dbg !12488
  call void @llvm.dbg.declare(metadata i32* %insn_class, metadata !12489, metadata !DIExpression()), !dbg !12490
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12491
  %1 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12492
  %insn_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %1, i32 0, i32 0, !dbg !12492
  store %struct.rtx_def* %0, %struct.rtx_def** %insn_rtx, align 8, !dbg !12493
  %2 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12494
  %count = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %2, i32 0, i32 4, !dbg !12494
  store i32 0, i32* %count, align 8, !dbg !12495
  %3 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12496
  %cost = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %3, i32 0, i32 5, !dbg !12497
  store i32 -1, i32* %cost, align 4, !dbg !12498
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12499
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !12499
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12499
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12499
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12499
  %5 = load i32, i32* %rt_int, align 8, !dbg !12499
  %6 = load %struct.df*, %struct.df** @df, align 8, !dbg !12499
  %insns_size = getelementptr inbounds %struct.df, %struct.df* %6, i32 0, i32 11, !dbg !12499
  %7 = load i32, i32* %insns_size, align 8, !dbg !12499
  %cmp = icmp ult i32 %5, %7, !dbg !12499
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12499

cond.true:                                        ; preds = %entry
  %8 = load %struct.df*, %struct.df** @df, align 8, !dbg !12499
  %insns = getelementptr inbounds %struct.df, %struct.df* %8, i32 0, i32 10, !dbg !12499
  %9 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !12499
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12499
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !12499
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !12499
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !12499
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !12499
  %11 = load i32, i32* %rt_int4, align 8, !dbg !12499
  %idxprom = sext i32 %11 to i64, !dbg !12499
  %arrayidx5 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %9, i64 %idxprom, !dbg !12499
  %12 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx5, align 8, !dbg !12499
  br label %cond.end, !dbg !12499

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12499

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.df_insn_info* [ %12, %cond.true ], [ null, %cond.false ], !dbg !12499
  %cmp6 = icmp ne %struct.df_insn_info* %cond, null, !dbg !12501
  br i1 %cmp6, label %if.then, label %if.else, !dbg !12502

if.then:                                          ; preds = %cond.end
  %13 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12503
  %id = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %13, i32 0, i32 1, !dbg !12503
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12504
  %15 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12505
  call void @init_id_from_df(%struct.idata_def* %id, %struct.rtx_def* %14, i8 zeroext %15), !dbg !12506
  br label %if.end, !dbg !12506

if.else:                                          ; preds = %cond.end
  %16 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12507
  %id7 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %16, i32 0, i32 1, !dbg !12507
  %17 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12508
  %18 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12509
  call void @deps_init_id(%struct.idata_def* %id7, %struct.rtx_def* %17, i8 zeroext %18), !dbg !12510
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %19 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !12511
  %tobool = icmp ne i8 (%struct.rtx_def*)* %19, null, !dbg !12512
  %20 = zext i1 %tobool to i64, !dbg !12512
  %cond8 = select i1 %tobool, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* @hash_with_unspec_callback, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* null, !dbg !12512
  store i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* %cond8, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)** %hrcf, align 8, !dbg !12513
  %21 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12514
  %id9 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %21, i32 0, i32 1, !dbg !12514
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id9, i32 0, i32 0, !dbg !12514
  %22 = load i32, i32* %type, align 8, !dbg !12514
  %cmp10 = icmp eq i32 %22, 23, !dbg !12514
  br i1 %cmp10, label %if.then11, label %if.else19, !dbg !12516

if.then11:                                        ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs, metadata !12517, metadata !DIExpression()), !dbg !12519
  %23 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12520
  %id12 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %23, i32 0, i32 1, !dbg !12520
  %rhs13 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %id12, i32 0, i32 2, !dbg !12520
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rhs13, align 8, !dbg !12520
  store %struct.rtx_def* %24, %struct.rtx_def** %rhs, align 8, !dbg !12519
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !12521
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !12522
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !12522
  %bf.load = load i32, i32* %27, align 8, !dbg !12522
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !12522
  %bf.clear = and i32 %bf.lshr, 255, !dbg !12522
  %28 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)** %hrcf, align 8, !dbg !12523
  %call = call i32 @hash_rtx_cb(%struct.rtx_def* %25, i32 %bf.clear, i32* null, i32* null, i8 zeroext 0, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* %28), !dbg !12524
  %29 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12525
  %hash = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %29, i32 0, i32 2, !dbg !12525
  store i32 %call, i32* %hash, align 8, !dbg !12526
  %30 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12527
  %insn_rtx14 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %30, i32 0, i32 0, !dbg !12527
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx14, align 8, !dbg !12527
  %u15 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !12527
  %fld16 = bitcast %union.u* %u15 to [1 x %union.rtunion_def]*, !dbg !12527
  %arrayidx17 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld16, i64 0, i64 5, !dbg !12527
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx17 to %struct.rtx_def**, !dbg !12527
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12527
  %33 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)** %hrcf, align 8, !dbg !12528
  %call18 = call i32 @hash_rtx_cb(%struct.rtx_def* %32, i32 0, i32* null, i32* null, i8 zeroext 0, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* %33), !dbg !12529
  %34 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12530
  %hash_rtx = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %34, i32 0, i32 3, !dbg !12530
  store i32 %call18, i32* %hash_rtx, align 4, !dbg !12531
  br label %if.end29, !dbg !12532

if.else19:                                        ; preds = %if.end
  %35 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12533
  %insn_rtx20 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %35, i32 0, i32 0, !dbg !12533
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn_rtx20, align 8, !dbg !12533
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !12533
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !12533
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 5, !dbg !12533
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !12533
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !12533
  %38 = load i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)** %hrcf, align 8, !dbg !12535
  %call25 = call i32 @hash_rtx_cb(%struct.rtx_def* %37, i32 0, i32* null, i32* null, i8 zeroext 0, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)* %38), !dbg !12536
  %39 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12537
  %hash26 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %39, i32 0, i32 2, !dbg !12537
  store i32 %call25, i32* %hash26, align 8, !dbg !12538
  %40 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12539
  %hash27 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %40, i32 0, i32 2, !dbg !12539
  %41 = load i32, i32* %hash27, align 8, !dbg !12539
  %42 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12540
  %hash_rtx28 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %42, i32 0, i32 3, !dbg !12540
  store i32 %41, i32* %hash_rtx28, align 4, !dbg !12541
  br label %if.end29

if.end29:                                         ; preds = %if.else19, %if.then11
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12542
  %call30 = call i32 @haifa_classify_insn(%struct.rtx_def* %43), !dbg !12543
  store i32 %call30, i32* %insn_class, align 4, !dbg !12544
  %44 = load i32, i32* %insn_class, align 4, !dbg !12545
  %cmp31 = icmp sge i32 %44, 2, !dbg !12547
  br i1 %cmp31, label %land.lhs.true, label %if.else36, !dbg !12548

land.lhs.true:                                    ; preds = %if.end29
  %45 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 33), align 8, !dbg !12549
  %tobool32 = icmp ne i32 (%struct.rtx_def*)* %45, null, !dbg !12550
  br i1 %tobool32, label %lor.lhs.false, label %if.then35, !dbg !12551

lor.lhs.false:                                    ; preds = %land.lhs.true
  %46 = load i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 33), align 8, !dbg !12552
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12553
  %call33 = call i32 %46(%struct.rtx_def* %47), !dbg !12554
  %and = and i32 %call33, 258048, !dbg !12555
  %cmp34 = icmp eq i32 %and, 0, !dbg !12556
  br i1 %cmp34, label %if.then35, label %if.else36, !dbg !12557

if.then35:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %48 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12558
  %may_trap_p = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %48, i32 0, i32 6, !dbg !12558
  store i8 1, i8* %may_trap_p, align 8, !dbg !12559
  br label %if.end38, !dbg !12558

if.else36:                                        ; preds = %lor.lhs.false, %if.end29
  %49 = load %struct.vinsn_def*, %struct.vinsn_def** %vi.addr, align 8, !dbg !12560
  %may_trap_p37 = getelementptr inbounds %struct.vinsn_def, %struct.vinsn_def* %49, i32 0, i32 6, !dbg !12560
  store i8 0, i8* %may_trap_p37, align 8, !dbg !12561
  br label %if.end38

if.end38:                                         ; preds = %if.else36, %if.then35
  ret void, !dbg !12562
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_id_from_df(%struct.idata_def* %id, %struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !12563 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12566, metadata !DIExpression()), !dbg !12567
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12568, metadata !DIExpression()), !dbg !12569
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !12570, metadata !DIExpression()), !dbg !12571
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12572
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !12572
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12572
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12572
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12572
  %1 = load i32, i32* %rt_int, align 8, !dbg !12572
  %2 = load %struct.df*, %struct.df** @df, align 8, !dbg !12572
  %insns_size = getelementptr inbounds %struct.df, %struct.df* %2, i32 0, i32 11, !dbg !12572
  %3 = load i32, i32* %insns_size, align 8, !dbg !12572
  %cmp = icmp ult i32 %1, %3, !dbg !12572
  br i1 %cmp, label %cond.true, label %cond.false, !dbg !12572

cond.true:                                        ; preds = %entry
  %4 = load %struct.df*, %struct.df** @df, align 8, !dbg !12572
  %insns = getelementptr inbounds %struct.df, %struct.df* %4, i32 0, i32 10, !dbg !12572
  %5 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !12572
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12572
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !12572
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !12572
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 0, !dbg !12572
  %rt_int4 = bitcast %union.rtunion_def* %arrayidx3 to i32*, !dbg !12572
  %7 = load i32, i32* %rt_int4, align 8, !dbg !12572
  %idxprom = sext i32 %7 to i64, !dbg !12572
  %arrayidx5 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %5, i64 %idxprom, !dbg !12572
  %8 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx5, align 8, !dbg !12572
  br label %cond.end, !dbg !12572

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !12572

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.df_insn_info* [ %8, %cond.true ], [ null, %cond.false ], !dbg !12572
  %cmp6 = icmp ne %struct.df_insn_info* %cond, null, !dbg !12572
  br i1 %cmp6, label %cond.false8, label %cond.true7, !dbg !12572

cond.true7:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2666, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !12572
  br label %cond.end9, !dbg !12572

cond.false8:                                      ; preds = %cond.end
  br label %cond.end9, !dbg !12572

cond.end9:                                        ; preds = %cond.false8, %cond.true7
  %cond10 = phi i32 [ 0, %cond.true7 ], [ 0, %cond.false8 ], !dbg !12572
  %9 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12573
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12574
  %11 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12575
  call void @setup_id_for_insn(%struct.idata_def* %9, %struct.rtx_def* %10, i8 zeroext %11), !dbg !12576
  %12 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12577
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12578
  %14 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12579
  call void @setup_id_lhs_rhs(%struct.idata_def* %12, %struct.rtx_def* %13, i8 zeroext %14), !dbg !12580
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12581
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !12581
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !12581
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 5, !dbg !12581
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !12581
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12581
  %17 = load %struct.rtx_def*, %struct.rtx_def** @nop_pattern, align 8, !dbg !12581
  %cmp14 = icmp eq %struct.rtx_def* %16, %17, !dbg !12581
  br i1 %cmp14, label %if.then, label %if.end, !dbg !12583

if.then:                                          ; preds = %cond.end9
  br label %return, !dbg !12584

if.end:                                           ; preds = %cond.end9
  %18 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12585
  %19 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12586
  call void @maybe_downgrade_id_to_use(%struct.idata_def* %18, %struct.rtx_def* %19), !dbg !12587
  %20 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12588
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12589
  call void @setup_id_reg_sets(%struct.idata_def* %20, %struct.rtx_def* %21), !dbg !12590
  br label %return, !dbg !12591

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !12591
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id(%struct.idata_def* %id, %struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !12592 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  %_dc = alloca %struct.deps, align 8
  %dc = alloca %struct.deps*, align 8
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12593, metadata !DIExpression()), !dbg !12594
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12595, metadata !DIExpression()), !dbg !12596
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !12597, metadata !DIExpression()), !dbg !12598
  call void @llvm.dbg.declare(metadata %struct.deps* %_dc, metadata !12599, metadata !DIExpression()), !dbg !12600
  call void @llvm.dbg.declare(metadata %struct.deps** %dc, metadata !12601, metadata !DIExpression()), !dbg !12602
  store %struct.deps* %_dc, %struct.deps** %dc, align 8, !dbg !12602
  store i32 3, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !12603
  %0 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12604
  store %struct.idata_def* %0, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !12605
  %1 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12606
  store i8 %1, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 2), align 8, !dbg !12607
  store i8 0, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 3), align 1, !dbg !12608
  %2 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !12609
  call void @init_deps(%struct.deps* %2, i8 zeroext 0), !dbg !12610
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 bitcast (%struct.sched_deps_info_def* @deps_init_id_sched_deps_info to i8*), i8* align 8 bitcast (%struct.sched_deps_info_def* @const_deps_init_id_sched_deps_info to i8*), i64 104, i1 false), !dbg !12611
  %3 = load %struct.spec_info_def*, %struct.spec_info_def** @spec_info, align 8, !dbg !12612
  %cmp = icmp ne %struct.spec_info_def* %3, null, !dbg !12614
  br i1 %cmp, label %if.then, label %if.end, !dbg !12615

if.then:                                          ; preds = %entry
  %bf.load = load i8, i8* getelementptr inbounds (%struct.sched_deps_info_def, %struct.sched_deps_info_def* @deps_init_id_sched_deps_info, i32 0, i32 12), align 8, !dbg !12616
  %bf.clear = and i8 %bf.load, -5, !dbg !12616
  %bf.set = or i8 %bf.clear, 4, !dbg !12616
  store i8 %bf.set, i8* getelementptr inbounds (%struct.sched_deps_info_def, %struct.sched_deps_info_def* @deps_init_id_sched_deps_info, i32 0, i32 12), align 8, !dbg !12616
  br label %if.end, !dbg !12617

if.end:                                           ; preds = %if.then, %entry
  store %struct.sched_deps_info_def* @deps_init_id_sched_deps_info, %struct.sched_deps_info_def** @sched_deps_info, align 8, !dbg !12618
  %4 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !12619
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12620
  call void @deps_analyze_insn(%struct.deps* %4, %struct.rtx_def* %5), !dbg !12621
  %6 = load %struct.deps*, %struct.deps** %dc, align 8, !dbg !12622
  call void @free_deps(%struct.deps* %6), !dbg !12623
  store %struct.idata_def* null, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !12624
  ret void, !dbg !12625
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @hash_with_unspec_callback(%struct.rtx_def* %x, i32 %mode, %struct.rtx_def** %nx, i32* %nmode) #0 !dbg !12626 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %nx.addr = alloca %struct.rtx_def**, align 8
  %nmode.addr = alloca i32*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !12627, metadata !DIExpression()), !dbg !12628
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !12629, metadata !DIExpression()), !dbg !12630
  store %struct.rtx_def** %nx, %struct.rtx_def*** %nx.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %nx.addr, metadata !12631, metadata !DIExpression()), !dbg !12632
  store i32* %nmode, i32** %nmode.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %nmode.addr, metadata !12633, metadata !DIExpression()), !dbg !12634
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12635
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12635
  %bf.load = load i32, i32* %1, align 8, !dbg !12635
  %bf.clear = and i32 %bf.load, 65535, !dbg !12635
  %cmp = icmp eq i32 %bf.clear, 18, !dbg !12637
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !12638

land.lhs.true:                                    ; preds = %entry
  %2 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !12639
  %tobool = icmp ne i8 (%struct.rtx_def*)* %2, null, !dbg !12640
  br i1 %tobool, label %land.lhs.true1, label %if.end, !dbg !12641

land.lhs.true1:                                   ; preds = %land.lhs.true
  %3 = load i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 1, i32 35), align 8, !dbg !12642
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12643
  %call = call zeroext i8 %3(%struct.rtx_def* %4), !dbg !12644
  %conv = zext i8 %call to i32, !dbg !12644
  %tobool2 = icmp ne i32 %conv, 0, !dbg !12644
  br i1 %tobool2, label %if.then, label %if.end, !dbg !12645

if.then:                                          ; preds = %land.lhs.true1
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !12646
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !12646
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12646
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12646
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx to %struct.rtvec_def**, !dbg !12646
  %6 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !12646
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %6, i32 0, i32 1, !dbg !12646
  %arrayidx3 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !12646
  %7 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx3, align 8, !dbg !12646
  %8 = load %struct.rtx_def**, %struct.rtx_def*** %nx.addr, align 8, !dbg !12648
  store %struct.rtx_def* %7, %struct.rtx_def** %8, align 8, !dbg !12649
  %9 = load i32*, i32** %nmode.addr, align 8, !dbg !12650
  store i32 0, i32* %9, align 4, !dbg !12651
  store i32 1, i32* %retval, align 4, !dbg !12652
  br label %return, !dbg !12652

if.end:                                           ; preds = %land.lhs.true1, %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !12653
  br label %return, !dbg !12653

return:                                           ; preds = %if.end, %if.then
  %10 = load i32, i32* %retval, align 4, !dbg !12654
  ret i32 %10, !dbg !12654
}

declare dso_local i32 @hash_rtx_cb(%struct.rtx_def*, i32, i32*, i32*, i8 zeroext, i32 (%struct.rtx_def*, i32, %struct.rtx_def**, i32*)*) #2

declare dso_local i32 @haifa_classify_insn(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @setup_id_for_insn(%struct.idata_def* %id, %struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !12655 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  %type = alloca i32, align 4
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12656, metadata !DIExpression()), !dbg !12657
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12658, metadata !DIExpression()), !dbg !12659
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !12660, metadata !DIExpression()), !dbg !12661
  call void @llvm.dbg.declare(metadata i32* %type, metadata !12662, metadata !DIExpression()), !dbg !12663
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12664
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !12664
  %bf.load = load i32, i32* %1, align 8, !dbg !12664
  %bf.clear = and i32 %bf.load, 65535, !dbg !12664
  store i32 %bf.clear, i32* %type, align 4, !dbg !12665
  %2 = load i32, i32* %type, align 4, !dbg !12666
  %cmp = icmp eq i32 %2, 8, !dbg !12668
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !12669

land.lhs.true:                                    ; preds = %entry
  %3 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12670
  %tobool = icmp ne i8 %3, 0, !dbg !12670
  br i1 %tobool, label %if.else, label %if.then, !dbg !12671

if.then:                                          ; preds = %land.lhs.true
  store i32 23, i32* %type, align 4, !dbg !12672
  br label %if.end10, !dbg !12673

if.else:                                          ; preds = %land.lhs.true, %entry
  %4 = load i32, i32* %type, align 4, !dbg !12674
  %cmp1 = icmp eq i32 %4, 9, !dbg !12676
  br i1 %cmp1, label %land.lhs.true2, label %if.else5, !dbg !12677

land.lhs.true2:                                   ; preds = %if.else
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12678
  %call = call i32 @simplejump_p(%struct.rtx_def* %5), !dbg !12679
  %tobool3 = icmp ne i32 %call, 0, !dbg !12679
  br i1 %tobool3, label %if.then4, label %if.else5, !dbg !12680

if.then4:                                         ; preds = %land.lhs.true2
  store i32 36, i32* %type, align 4, !dbg !12681
  br label %if.end9, !dbg !12682

if.else5:                                         ; preds = %land.lhs.true2, %if.else
  %6 = load i32, i32* %type, align 4, !dbg !12683
  %cmp6 = icmp eq i32 %6, 7, !dbg !12685
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !12686

if.then7:                                         ; preds = %if.else5
  %7 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12687
  %tobool8 = icmp ne i8 %7, 0, !dbg !12688
  %lnot = xor i1 %tobool8, true, !dbg !12688
  %8 = zext i1 %lnot to i64, !dbg !12688
  %cond = select i1 %lnot, i32 24, i32 8, !dbg !12688
  store i32 %cond, i32* %type, align 4, !dbg !12689
  br label %if.end, !dbg !12690

if.end:                                           ; preds = %if.then7, %if.else5
  br label %if.end9

if.end9:                                          ; preds = %if.end, %if.then4
  br label %if.end10

if.end10:                                         ; preds = %if.end9, %if.then
  %9 = load i32, i32* %type, align 4, !dbg !12691
  %10 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12692
  %type11 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %10, i32 0, i32 0, !dbg !12692
  store i32 %9, i32* %type11, align 8, !dbg !12693
  %call12 = call %struct.bitmap_head_def* @get_clear_regset_from_pool(), !dbg !12694
  %11 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12695
  %reg_sets = getelementptr inbounds %struct.idata_def, %struct.idata_def* %11, i32 0, i32 3, !dbg !12695
  store %struct.bitmap_head_def* %call12, %struct.bitmap_head_def** %reg_sets, align 8, !dbg !12696
  %call13 = call %struct.bitmap_head_def* @get_clear_regset_from_pool(), !dbg !12697
  %12 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12698
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %12, i32 0, i32 5, !dbg !12698
  store %struct.bitmap_head_def* %call13, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !12699
  %call14 = call %struct.bitmap_head_def* @get_clear_regset_from_pool(), !dbg !12700
  %13 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12701
  %reg_clobbers = getelementptr inbounds %struct.idata_def, %struct.idata_def* %13, i32 0, i32 4, !dbg !12701
  store %struct.bitmap_head_def* %call14, %struct.bitmap_head_def** %reg_clobbers, align 8, !dbg !12702
  ret void, !dbg !12703
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_id_lhs_rhs(%struct.idata_def* %id, %struct.rtx_def* %insn, i8 zeroext %force_unique_p) #0 !dbg !12704 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %force_unique_p.addr = alloca i8, align 1
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12705, metadata !DIExpression()), !dbg !12706
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12707, metadata !DIExpression()), !dbg !12708
  store i8 %force_unique_p, i8* %force_unique_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %force_unique_p.addr, metadata !12709, metadata !DIExpression()), !dbg !12710
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !12711, metadata !DIExpression()), !dbg !12712
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12713
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !12713
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12713
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !12713
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !12713
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !12713
  store %struct.rtx_def* %1, %struct.rtx_def** %pat, align 8, !dbg !12712
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12714
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12714
  %bf.load = load i32, i32* %3, align 8, !dbg !12714
  %bf.clear = and i32 %bf.load, 65535, !dbg !12714
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !12714
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !12716

land.lhs.true:                                    ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !12717
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !12717
  %bf.load1 = load i32, i32* %5, align 8, !dbg !12717
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !12717
  %cmp3 = icmp eq i32 %bf.clear2, 23, !dbg !12718
  br i1 %cmp3, label %land.lhs.true4, label %if.else, !dbg !12719

land.lhs.true4:                                   ; preds = %land.lhs.true
  %6 = load i8, i8* %force_unique_p.addr, align 1, !dbg !12720
  %tobool = icmp ne i8 %6, 0, !dbg !12720
  br i1 %tobool, label %if.else, label %if.then, !dbg !12721

if.then:                                          ; preds = %land.lhs.true4
  %7 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !12722
  %u5 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !12722
  %fld6 = bitcast %union.u* %u5 to [1 x %union.rtunion_def]*, !dbg !12722
  %arrayidx7 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld6, i64 0, i64 1, !dbg !12722
  %rt_rtx8 = bitcast %union.rtunion_def* %arrayidx7 to %struct.rtx_def**, !dbg !12722
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx8, align 8, !dbg !12722
  %9 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12724
  %rhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %9, i32 0, i32 2, !dbg !12724
  store %struct.rtx_def* %8, %struct.rtx_def** %rhs, align 8, !dbg !12725
  %10 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !12726
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !12726
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !12726
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !12726
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !12726
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !12726
  %12 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12727
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %12, i32 0, i32 1, !dbg !12727
  store %struct.rtx_def* %11, %struct.rtx_def** %lhs, align 8, !dbg !12728
  br label %if.end, !dbg !12729

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %13 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12730
  %rhs13 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %13, i32 0, i32 2, !dbg !12730
  store %struct.rtx_def* null, %struct.rtx_def** %rhs13, align 8, !dbg !12731
  %14 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12732
  %lhs14 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %14, i32 0, i32 1, !dbg !12732
  store %struct.rtx_def* null, %struct.rtx_def** %lhs14, align 8, !dbg !12733
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !12734
}

; Function Attrs: noinline nounwind uwtable
define internal void @maybe_downgrade_id_to_use(%struct.idata_def* %id, %struct.rtx_def* %insn) #0 !dbg !12735 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %must_be_use = alloca i8, align 1
  %uid = alloca i32, align 4
  %rec = alloca %union.df_ref_d**, align 8
  %lhs = alloca %struct.rtx_def*, align 8
  %rhs = alloca %struct.rtx_def*, align 8
  %def = alloca %union.df_ref_d*, align 8
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12738, metadata !DIExpression()), !dbg !12739
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12740, metadata !DIExpression()), !dbg !12741
  call void @llvm.dbg.declare(metadata i8* %must_be_use, metadata !12742, metadata !DIExpression()), !dbg !12743
  store i8 0, i8* %must_be_use, align 1, !dbg !12743
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !12744, metadata !DIExpression()), !dbg !12745
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12746
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !12746
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12746
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12746
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12746
  %1 = load i32, i32* %rt_int, align 8, !dbg !12746
  store i32 %1, i32* %uid, align 4, !dbg !12745
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %rec, metadata !12747, metadata !DIExpression()), !dbg !12808
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs, metadata !12809, metadata !DIExpression()), !dbg !12810
  %2 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12811
  %lhs1 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %2, i32 0, i32 1, !dbg !12811
  %3 = load %struct.rtx_def*, %struct.rtx_def** %lhs1, align 8, !dbg !12811
  store %struct.rtx_def* %3, %struct.rtx_def** %lhs, align 8, !dbg !12810
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs, metadata !12812, metadata !DIExpression()), !dbg !12813
  %4 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12814
  %rhs2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %4, i32 0, i32 2, !dbg !12814
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rhs2, align 8, !dbg !12814
  store %struct.rtx_def* %5, %struct.rtx_def** %rhs, align 8, !dbg !12813
  %6 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12815
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %6, i32 0, i32 0, !dbg !12815
  %7 = load i32, i32* %type, align 8, !dbg !12815
  %cmp = icmp ne i32 %7, 23, !dbg !12817
  br i1 %cmp, label %if.then, label %if.end, !dbg !12818

if.then:                                          ; preds = %entry
  br label %if.end35, !dbg !12819

if.end:                                           ; preds = %entry
  %8 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !12820
  %tobool = icmp ne %struct.rtx_def* %8, null, !dbg !12820
  br i1 %tobool, label %lor.lhs.false, label %if.then4, !dbg !12822

lor.lhs.false:                                    ; preds = %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !12823
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !12824
  %call = call zeroext i8 @lhs_and_rhs_separable_p(%struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !12825
  %tobool3 = icmp ne i8 %call, 0, !dbg !12825
  br i1 %tobool3, label %if.end6, label %if.then4, !dbg !12826

if.then4:                                         ; preds = %lor.lhs.false, %if.end
  %11 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12827
  %type5 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %11, i32 0, i32 0, !dbg !12827
  store i32 24, i32* %type5, align 8, !dbg !12829
  br label %if.end35, !dbg !12830

if.end6:                                          ; preds = %lor.lhs.false
  %12 = load %struct.df*, %struct.df** @df, align 8, !dbg !12831
  %insns = getelementptr inbounds %struct.df, %struct.df* %12, i32 0, i32 10, !dbg !12831
  %13 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !12831
  %14 = load i32, i32* %uid, align 4, !dbg !12831
  %idxprom = zext i32 %14 to i64, !dbg !12831
  %arrayidx7 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %13, i64 %idxprom, !dbg !12831
  %15 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx7, align 8, !dbg !12831
  %defs = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %15, i32 0, i32 1, !dbg !12831
  %16 = load %union.df_ref_d**, %union.df_ref_d*** %defs, align 8, !dbg !12831
  store %union.df_ref_d** %16, %union.df_ref_d*** %rec, align 8, !dbg !12833
  br label %for.cond, !dbg !12834

for.cond:                                         ; preds = %for.inc, %if.end6
  %17 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12835
  %18 = load %union.df_ref_d*, %union.df_ref_d** %17, align 8, !dbg !12837
  %tobool8 = icmp ne %union.df_ref_d* %18, null, !dbg !12838
  br i1 %tobool8, label %for.body, label %for.end, !dbg !12838

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !12839, metadata !DIExpression()), !dbg !12841
  %19 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12842
  %20 = load %union.df_ref_d*, %union.df_ref_d** %19, align 8, !dbg !12843
  store %union.df_ref_d* %20, %union.df_ref_d** %def, align 8, !dbg !12841
  %21 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12844
  %base = bitcast %union.df_ref_d* %21 to %struct.df_base_ref*, !dbg !12844
  %insn_info = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 3, !dbg !12844
  %22 = load %struct.df_insn_info*, %struct.df_insn_info** %insn_info, align 8, !dbg !12844
  %insn9 = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %22, i32 0, i32 0, !dbg !12844
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn9, align 8, !dbg !12844
  %tobool10 = icmp ne %struct.rtx_def* %23, null, !dbg !12844
  br i1 %tobool10, label %land.lhs.true, label %if.end26, !dbg !12846

land.lhs.true:                                    ; preds = %for.body
  %24 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12847
  %base11 = bitcast %union.df_ref_d* %24 to %struct.df_base_ref*, !dbg !12847
  %25 = bitcast %struct.df_base_ref* %base11 to i32*, !dbg !12847
  %bf.load = load i32, i32* %25, align 8, !dbg !12847
  %bf.ashr = ashr i32 %bf.load, 16, !dbg !12847
  %and = and i32 %bf.ashr, 32768, !dbg !12847
  %cmp12 = icmp ne i32 %and, 0, !dbg !12847
  br i1 %cmp12, label %land.lhs.true13, label %if.end26, !dbg !12848

land.lhs.true13:                                  ; preds = %land.lhs.true
  %26 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12849
  %base14 = bitcast %union.df_ref_d* %26 to %struct.df_base_ref*, !dbg !12849
  %27 = bitcast %struct.df_base_ref* %base14 to i32*, !dbg !12849
  %bf.load15 = load i32, i32* %27, align 8, !dbg !12849
  %bf.clear = and i32 %bf.load15, 255, !dbg !12849
  %cmp16 = icmp eq i32 %bf.clear, 2, !dbg !12849
  br i1 %cmp16, label %cond.true, label %lor.lhs.false17, !dbg !12849

lor.lhs.false17:                                  ; preds = %land.lhs.true13
  %28 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12849
  %base18 = bitcast %union.df_ref_d* %28 to %struct.df_base_ref*, !dbg !12849
  %29 = bitcast %struct.df_base_ref* %base18 to i32*, !dbg !12849
  %bf.load19 = load i32, i32* %29, align 8, !dbg !12849
  %bf.clear20 = and i32 %bf.load19, 255, !dbg !12849
  %cmp21 = icmp eq i32 %bf.clear20, 3, !dbg !12849
  br i1 %cmp21, label %cond.true, label %cond.false, !dbg !12849

cond.true:                                        ; preds = %lor.lhs.false17, %land.lhs.true13
  %30 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12849
  %regular_ref = bitcast %union.df_ref_d* %30 to %struct.df_regular_ref*, !dbg !12849
  %loc = getelementptr inbounds %struct.df_regular_ref, %struct.df_regular_ref* %regular_ref, i32 0, i32 1, !dbg !12849
  %31 = load %struct.rtx_def**, %struct.rtx_def*** %loc, align 8, !dbg !12849
  br label %cond.end, !dbg !12849

cond.false:                                       ; preds = %lor.lhs.false17
  br label %cond.end, !dbg !12849

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def** [ %31, %cond.true ], [ null, %cond.false ], !dbg !12849
  %32 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12850
  %rhs22 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %32, i32 0, i32 2, !dbg !12850
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rhs22, align 8, !dbg !12850
  %call23 = call i32 @loc_mentioned_in_p(%struct.rtx_def** %cond, %struct.rtx_def* %33), !dbg !12851
  %tobool24 = icmp ne i32 %call23, 0, !dbg !12851
  br i1 %tobool24, label %if.then25, label %if.end26, !dbg !12852

if.then25:                                        ; preds = %cond.end
  store i8 1, i8* %must_be_use, align 1, !dbg !12853
  br label %for.end, !dbg !12855

if.end26:                                         ; preds = %cond.end, %land.lhs.true, %for.body
  %34 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12856
  %base27 = bitcast %union.df_ref_d* %34 to %struct.df_base_ref*, !dbg !12856
  %regno = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base27, i32 0, i32 6, !dbg !12856
  %35 = load i32, i32* %regno, align 8, !dbg !12856
  %conv = zext i32 %35 to i64, !dbg !12856
  %sub = sub i64 %conv, 8, !dbg !12856
  %cmp28 = icmp ule i64 %sub, 7, !dbg !12856
  br i1 %cmp28, label %if.then30, label %if.end31, !dbg !12858

if.then30:                                        ; preds = %if.end26
  store i8 1, i8* %must_be_use, align 1, !dbg !12859
  br label %for.end, !dbg !12861

if.end31:                                         ; preds = %if.end26
  br label %for.inc, !dbg !12862

for.inc:                                          ; preds = %if.end31
  %36 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12863
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %36, i32 1, !dbg !12863
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %rec, align 8, !dbg !12863
  br label %for.cond, !dbg !12864, !llvm.loop !12865

for.end:                                          ; preds = %if.then30, %if.then25, %for.cond
  %37 = load i8, i8* %must_be_use, align 1, !dbg !12867
  %tobool32 = icmp ne i8 %37, 0, !dbg !12867
  br i1 %tobool32, label %if.then33, label %if.end35, !dbg !12869

if.then33:                                        ; preds = %for.end
  %38 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12870
  %type34 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %38, i32 0, i32 0, !dbg !12870
  store i32 24, i32* %type34, align 8, !dbg !12871
  br label %if.end35, !dbg !12870

if.end35:                                         ; preds = %if.then, %if.then4, %if.then33, %for.end
  ret void, !dbg !12872
}

; Function Attrs: noinline nounwind uwtable
define internal void @setup_id_reg_sets(%struct.idata_def* %id, %struct.rtx_def* %insn) #0 !dbg !12873 {
entry:
  %id.addr = alloca %struct.idata_def*, align 8
  %insn.addr = alloca %struct.rtx_def*, align 8
  %uid = alloca i32, align 4
  %rec = alloca %union.df_ref_d**, align 8
  %tmp = alloca %struct.bitmap_head_def*, align 8
  %def = alloca %union.df_ref_d*, align 8
  %regno = alloca i32, align 4
  %use = alloca %union.df_ref_d*, align 8
  %regno36 = alloca i32, align 4
  store %struct.idata_def* %id, %struct.idata_def** %id.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.idata_def** %id.addr, metadata !12874, metadata !DIExpression()), !dbg !12875
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !12876, metadata !DIExpression()), !dbg !12877
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !12878, metadata !DIExpression()), !dbg !12879
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !12880
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !12880
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !12880
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !12880
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !12880
  %1 = load i32, i32* %rt_int, align 8, !dbg !12880
  store i32 %1, i32* %uid, align 4, !dbg !12879
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %rec, metadata !12881, metadata !DIExpression()), !dbg !12882
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %tmp, metadata !12883, metadata !DIExpression()), !dbg !12884
  %call = call %struct.bitmap_head_def* @get_clear_regset_from_pool(), !dbg !12885
  store %struct.bitmap_head_def* %call, %struct.bitmap_head_def** %tmp, align 8, !dbg !12884
  %2 = load %struct.df*, %struct.df** @df, align 8, !dbg !12886
  %insns = getelementptr inbounds %struct.df, %struct.df* %2, i32 0, i32 10, !dbg !12886
  %3 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !12886
  %4 = load i32, i32* %uid, align 4, !dbg !12886
  %idxprom = zext i32 %4 to i64, !dbg !12886
  %arrayidx1 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %3, i64 %idxprom, !dbg !12886
  %5 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx1, align 8, !dbg !12886
  %defs = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %5, i32 0, i32 1, !dbg !12886
  %6 = load %union.df_ref_d**, %union.df_ref_d*** %defs, align 8, !dbg !12886
  store %union.df_ref_d** %6, %union.df_ref_d*** %rec, align 8, !dbg !12888
  br label %for.cond, !dbg !12889

for.cond:                                         ; preds = %for.inc, %entry
  %7 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12890
  %8 = load %union.df_ref_d*, %union.df_ref_d** %7, align 8, !dbg !12892
  %tobool = icmp ne %union.df_ref_d* %8, null, !dbg !12893
  br i1 %tobool, label %for.body, label %for.end, !dbg !12893

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !12894, metadata !DIExpression()), !dbg !12896
  %9 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12897
  %10 = load %union.df_ref_d*, %union.df_ref_d** %9, align 8, !dbg !12898
  store %union.df_ref_d* %10, %union.df_ref_d** %def, align 8, !dbg !12896
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !12899, metadata !DIExpression()), !dbg !12900
  %11 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12901
  %base = bitcast %union.df_ref_d* %11 to %struct.df_base_ref*, !dbg !12901
  %regno2 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 6, !dbg !12901
  %12 = load i32, i32* %regno2, align 8, !dbg !12901
  store i32 %12, i32* %regno, align 4, !dbg !12900
  %13 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12902
  %base3 = bitcast %union.df_ref_d* %13 to %struct.df_base_ref*, !dbg !12902
  %14 = bitcast %struct.df_base_ref* %base3 to i32*, !dbg !12902
  %bf.load = load i32, i32* %14, align 8, !dbg !12902
  %bf.ashr = ashr i32 %bf.load, 16, !dbg !12902
  %and = and i32 %bf.ashr, 32896, !dbg !12902
  %cmp = icmp ne i32 %and, 0, !dbg !12902
  br i1 %cmp, label %if.then, label %if.else, !dbg !12904

if.then:                                          ; preds = %for.body
  %15 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12905
  %reg_clobbers = getelementptr inbounds %struct.idata_def, %struct.idata_def* %15, i32 0, i32 4, !dbg !12905
  %16 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_clobbers, align 8, !dbg !12905
  %17 = load i32, i32* %regno, align 4, !dbg !12905
  %call4 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %16, i32 %17), !dbg !12905
  br label %if.end18, !dbg !12905

if.else:                                          ; preds = %for.body
  %18 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12906
  %base5 = bitcast %union.df_ref_d* %18 to %struct.df_base_ref*, !dbg !12906
  %19 = bitcast %struct.df_base_ref* %base5 to i32*, !dbg !12906
  %bf.load6 = load i32, i32* %19, align 8, !dbg !12906
  %bf.ashr7 = ashr i32 %bf.load6, 16, !dbg !12906
  %and8 = and i32 %bf.ashr7, 64, !dbg !12906
  %cmp9 = icmp ne i32 %and8, 0, !dbg !12906
  br i1 %cmp9, label %if.end17, label %if.then10, !dbg !12908

if.then10:                                        ; preds = %if.else
  %20 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12909
  %reg_sets = getelementptr inbounds %struct.idata_def, %struct.idata_def* %20, i32 0, i32 3, !dbg !12909
  %21 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_sets, align 8, !dbg !12909
  %22 = load i32, i32* %regno, align 4, !dbg !12909
  %call11 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %21, i32 %22), !dbg !12909
  %23 = load i32, i32* %regno, align 4, !dbg !12911
  %conv = zext i32 %23 to i64, !dbg !12911
  %sub = sub i64 %conv, 8, !dbg !12911
  %cmp12 = icmp ule i64 %sub, 7, !dbg !12911
  br i1 %cmp12, label %if.then14, label %if.end, !dbg !12913

if.then14:                                        ; preds = %if.then10
  %24 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12914
  %reg_sets15 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %24, i32 0, i32 3, !dbg !12914
  %25 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_sets15, align 8, !dbg !12914
  %call16 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %25, i32 8), !dbg !12914
  br label %if.end, !dbg !12914

if.end:                                           ; preds = %if.then14, %if.then10
  br label %if.end17, !dbg !12915

if.end17:                                         ; preds = %if.end, %if.else
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.then
  %26 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !12916
  %base19 = bitcast %union.df_ref_d* %26 to %struct.df_base_ref*, !dbg !12916
  %27 = bitcast %struct.df_base_ref* %base19 to i32*, !dbg !12916
  %bf.load20 = load i32, i32* %27, align 8, !dbg !12916
  %bf.ashr21 = ashr i32 %bf.load20, 16, !dbg !12916
  %and22 = and i32 %bf.ashr21, 1, !dbg !12916
  %cmp23 = icmp ne i32 %and22, 0, !dbg !12916
  br i1 %cmp23, label %if.then27, label %lor.lhs.false, !dbg !12918

lor.lhs.false:                                    ; preds = %if.end18
  %28 = load i32, i32* %regno, align 4, !dbg !12919
  %cmp25 = icmp eq i32 %28, 7, !dbg !12920
  br i1 %cmp25, label %if.then27, label %if.end29, !dbg !12921

if.then27:                                        ; preds = %lor.lhs.false, %if.end18
  %29 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !12922
  %30 = load i32, i32* %regno, align 4, !dbg !12923
  %call28 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %29, i32 %30), !dbg !12924
  br label %if.end29, !dbg !12924

if.end29:                                         ; preds = %if.then27, %lor.lhs.false
  br label %for.inc, !dbg !12925

for.inc:                                          ; preds = %if.end29
  %31 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12926
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %31, i32 1, !dbg !12926
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %rec, align 8, !dbg !12926
  br label %for.cond, !dbg !12927, !llvm.loop !12928

for.end:                                          ; preds = %for.cond
  %32 = load %struct.df*, %struct.df** @df, align 8, !dbg !12930
  %insns30 = getelementptr inbounds %struct.df, %struct.df* %32, i32 0, i32 10, !dbg !12930
  %33 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns30, align 8, !dbg !12930
  %34 = load i32, i32* %uid, align 4, !dbg !12930
  %idxprom31 = zext i32 %34 to i64, !dbg !12930
  %arrayidx32 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %33, i64 %idxprom31, !dbg !12930
  %35 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx32, align 8, !dbg !12930
  %uses = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %35, i32 0, i32 2, !dbg !12930
  %36 = load %union.df_ref_d**, %union.df_ref_d*** %uses, align 8, !dbg !12930
  store %union.df_ref_d** %36, %union.df_ref_d*** %rec, align 8, !dbg !12932
  br label %for.cond33, !dbg !12933

for.cond33:                                       ; preds = %for.inc62, %for.end
  %37 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12934
  %38 = load %union.df_ref_d*, %union.df_ref_d** %37, align 8, !dbg !12936
  %tobool34 = icmp ne %union.df_ref_d* %38, null, !dbg !12937
  br i1 %tobool34, label %for.body35, label %for.end64, !dbg !12937

for.body35:                                       ; preds = %for.cond33
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %use, metadata !12938, metadata !DIExpression()), !dbg !12940
  %39 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12941
  %40 = load %union.df_ref_d*, %union.df_ref_d** %39, align 8, !dbg !12942
  store %union.df_ref_d* %40, %union.df_ref_d** %use, align 8, !dbg !12940
  call void @llvm.dbg.declare(metadata i32* %regno36, metadata !12943, metadata !DIExpression()), !dbg !12944
  %41 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !12945
  %base37 = bitcast %union.df_ref_d* %41 to %struct.df_base_ref*, !dbg !12945
  %regno38 = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base37, i32 0, i32 6, !dbg !12945
  %42 = load i32, i32* %regno38, align 8, !dbg !12945
  store i32 %42, i32* %regno36, align 4, !dbg !12944
  %43 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !12946
  %44 = load i32, i32* %regno36, align 4, !dbg !12948
  %call39 = call i32 @bitmap_bit_p(%struct.bitmap_head_def* %43, i32 %44), !dbg !12949
  %tobool40 = icmp ne i32 %call39, 0, !dbg !12949
  br i1 %tobool40, label %if.then41, label %if.else43, !dbg !12950

if.then41:                                        ; preds = %for.body35
  %45 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !12951
  %46 = load i32, i32* %regno36, align 4, !dbg !12952
  %call42 = call zeroext i8 @bitmap_clear_bit(%struct.bitmap_head_def* %45, i32 %46), !dbg !12953
  br label %if.end61, !dbg !12953

if.else43:                                        ; preds = %for.body35
  %47 = load %union.df_ref_d*, %union.df_ref_d** %use, align 8, !dbg !12954
  %base44 = bitcast %union.df_ref_d* %47 to %struct.df_base_ref*, !dbg !12954
  %48 = bitcast %struct.df_base_ref* %base44 to i32*, !dbg !12954
  %bf.load45 = load i32, i32* %48, align 8, !dbg !12954
  %bf.ashr46 = ashr i32 %bf.load45, 16, !dbg !12954
  %and47 = and i32 %bf.ashr46, 8192, !dbg !12954
  %cmp48 = icmp ne i32 %and47, 0, !dbg !12954
  br i1 %cmp48, label %if.end60, label %if.then50, !dbg !12956

if.then50:                                        ; preds = %if.else43
  %49 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12957
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %49, i32 0, i32 5, !dbg !12957
  %50 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !12957
  %51 = load i32, i32* %regno36, align 4, !dbg !12957
  %call51 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %50, i32 %51), !dbg !12957
  %52 = load i32, i32* %regno36, align 4, !dbg !12959
  %conv52 = zext i32 %52 to i64, !dbg !12959
  %sub53 = sub i64 %conv52, 8, !dbg !12959
  %cmp54 = icmp ule i64 %sub53, 7, !dbg !12959
  br i1 %cmp54, label %if.then56, label %if.end59, !dbg !12961

if.then56:                                        ; preds = %if.then50
  %53 = load %struct.idata_def*, %struct.idata_def** %id.addr, align 8, !dbg !12962
  %reg_uses57 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %53, i32 0, i32 5, !dbg !12962
  %54 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses57, align 8, !dbg !12962
  %call58 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %54, i32 8), !dbg !12962
  br label %if.end59, !dbg !12962

if.end59:                                         ; preds = %if.then56, %if.then50
  br label %if.end60, !dbg !12963

if.end60:                                         ; preds = %if.end59, %if.else43
  br label %if.end61

if.end61:                                         ; preds = %if.end60, %if.then41
  br label %for.inc62, !dbg !12964

for.inc62:                                        ; preds = %if.end61
  %55 = load %union.df_ref_d**, %union.df_ref_d*** %rec, align 8, !dbg !12965
  %incdec.ptr63 = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %55, i32 1, !dbg !12965
  store %union.df_ref_d** %incdec.ptr63, %union.df_ref_d*** %rec, align 8, !dbg !12965
  br label %for.cond33, !dbg !12966, !llvm.loop !12967

for.end64:                                        ; preds = %for.cond33
  %56 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %tmp, align 8, !dbg !12969
  call void @return_regset_to_pool(%struct.bitmap_head_def* %56), !dbg !12970
  ret void, !dbg !12971
}

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @lhs_and_rhs_separable_p(%struct.rtx_def* %lhs, %struct.rtx_def* %rhs) #0 !dbg !12972 {
entry:
  %retval = alloca i8, align 1
  %lhs.addr = alloca %struct.rtx_def*, align 8
  %rhs.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %lhs, %struct.rtx_def** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs.addr, metadata !12975, metadata !DIExpression()), !dbg !12976
  store %struct.rtx_def* %rhs, %struct.rtx_def** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs.addr, metadata !12977, metadata !DIExpression()), !dbg !12978
  %0 = load %struct.rtx_def*, %struct.rtx_def** %lhs.addr, align 8, !dbg !12979
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !12981
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !12982

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %rhs.addr, align 8, !dbg !12983
  %cmp1 = icmp eq %struct.rtx_def* %1, null, !dbg !12984
  br i1 %cmp1, label %if.then, label %if.end, !dbg !12985

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i8 0, i8* %retval, align 1, !dbg !12986
  br label %return, !dbg !12986

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rhs.addr, align 8, !dbg !12987
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !12987
  %bf.load = load i32, i32* %3, align 8, !dbg !12987
  %bf.clear = and i32 %bf.load, 65535, !dbg !12987
  %idxprom = sext i32 %bf.clear to i64, !dbg !12987
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !12987
  %4 = load i32, i32* %arrayidx, align 4, !dbg !12987
  %cmp2 = icmp eq i32 %4, 9, !dbg !12987
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !12989

if.then3:                                         ; preds = %if.end
  store i8 0, i8* %retval, align 1, !dbg !12990
  br label %return, !dbg !12990

if.end4:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rhs.addr, align 8, !dbg !12991
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !12991
  %bf.load5 = load i32, i32* %6, align 8, !dbg !12991
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !12991
  %idxprom7 = sext i32 %bf.clear6 to i64, !dbg !12991
  %arrayidx8 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom7, !dbg !12991
  %7 = load i32, i32* %arrayidx8, align 4, !dbg !12991
  %and = and i32 %7, -2, !dbg !12991
  %cmp9 = icmp eq i32 %and, 0, !dbg !12991
  br i1 %cmp9, label %if.then10, label %if.end11, !dbg !12993

if.then10:                                        ; preds = %if.end4
  store i8 0, i8* %retval, align 1, !dbg !12994
  br label %return, !dbg !12994

if.end11:                                         ; preds = %if.end4
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rhs.addr, align 8, !dbg !12995
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !12995
  %bf.load12 = load i32, i32* %9, align 8, !dbg !12995
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !12995
  %cmp14 = icmp eq i32 %bf.clear13, 37, !dbg !12995
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !12997

if.then15:                                        ; preds = %if.end11
  store i8 0, i8* %retval, align 1, !dbg !12998
  br label %return, !dbg !12998

if.end16:                                         ; preds = %if.end11
  %10 = load %struct.rtx_def*, %struct.rtx_def** %lhs.addr, align 8, !dbg !12999
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !12999
  %bf.load17 = load i32, i32* %11, align 8, !dbg !12999
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !12999
  %cmp19 = icmp eq i32 %bf.clear18, 43, !dbg !12999
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !13001

if.then20:                                        ; preds = %if.end16
  store i8 0, i8* %retval, align 1, !dbg !13002
  br label %return, !dbg !13002

if.end21:                                         ; preds = %if.end16
  %12 = load %struct.rtx_def*, %struct.rtx_def** %lhs.addr, align 8, !dbg !13003
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !13003
  %bf.load22 = load i32, i32* %13, align 8, !dbg !13003
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !13003
  %cmp24 = icmp eq i32 %bf.clear23, 37, !dbg !13003
  br i1 %cmp24, label %if.end29, label %land.lhs.true, !dbg !13005

land.lhs.true:                                    ; preds = %if.end21
  %14 = load %struct.rtx_def*, %struct.rtx_def** %lhs.addr, align 8, !dbg !13006
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !13006
  %bf.load25 = load i32, i32* %15, align 8, !dbg !13006
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !13006
  %cmp27 = icmp eq i32 %bf.clear26, 43, !dbg !13006
  br i1 %cmp27, label %if.end29, label %if.then28, !dbg !13007

if.then28:                                        ; preds = %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !13008
  br label %return, !dbg !13008

if.end29:                                         ; preds = %land.lhs.true, %if.end21
  store i8 1, i8* %retval, align 1, !dbg !13009
  br label %return, !dbg !13009

return:                                           ; preds = %if.end29, %if.then28, %if.then20, %if.then15, %if.then10, %if.then3, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !13010
  ret i8 %16, !dbg !13010
}

declare dso_local i32 @loc_mentioned_in_p(%struct.rtx_def**, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_start_insn(%struct.rtx_def* %insn) #0 !dbg !13011 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !13012, metadata !DIExpression()), !dbg !13013
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13014
  %cmp = icmp eq i32 %0, 3, !dbg !13014
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13014

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2391, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13014
  br label %cond.end, !dbg !13014

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13014

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13014
  %1 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13015
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !13016
  %3 = load i8, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 2), align 8, !dbg !13017
  call void @setup_id_for_insn(%struct.idata_def* %1, %struct.rtx_def* %2, i8 zeroext %3), !dbg !13018
  store i32 0, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13019
  ret void, !dbg !13020
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_finish_insn() #0 !dbg !13021 {
entry:
  %lhs = alloca %struct.rtx_def*, align 8
  %rhs = alloca %struct.rtx_def*, align 8
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13022
  %cmp = icmp eq i32 %0, 0, !dbg !13022
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13022

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2489, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13022
  br label %cond.end, !dbg !13022

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13022

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13022
  %1 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13023
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %1, i32 0, i32 0, !dbg !13023
  %2 = load i32, i32* %type, align 8, !dbg !13023
  %cmp1 = icmp eq i32 %2, 23, !dbg !13025
  br i1 %cmp1, label %if.then, label %if.end28, !dbg !13026

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs, metadata !13027, metadata !DIExpression()), !dbg !13029
  %3 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13030
  %lhs2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %3, i32 0, i32 1, !dbg !13030
  %4 = load %struct.rtx_def*, %struct.rtx_def** %lhs2, align 8, !dbg !13030
  store %struct.rtx_def* %4, %struct.rtx_def** %lhs, align 8, !dbg !13029
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs, metadata !13031, metadata !DIExpression()), !dbg !13032
  %5 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13033
  %rhs3 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %5, i32 0, i32 2, !dbg !13033
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rhs3, align 8, !dbg !13033
  store %struct.rtx_def* %6, %struct.rtx_def** %rhs, align 8, !dbg !13032
  %7 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !13034
  %cmp4 = icmp eq %struct.rtx_def* %7, null, !dbg !13036
  br i1 %cmp4, label %if.then9, label %lor.lhs.false, !dbg !13037

lor.lhs.false:                                    ; preds = %if.then
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !13038
  %cmp5 = icmp eq %struct.rtx_def* %8, null, !dbg !13039
  br i1 %cmp5, label %if.then9, label %lor.lhs.false6, !dbg !13040

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %9 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !13041
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !13042
  %call = call zeroext i8 @lhs_and_rhs_separable_p(%struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !13043
  %tobool = icmp ne i8 %call, 0, !dbg !13043
  br i1 %tobool, label %lor.lhs.false7, label %if.then9, !dbg !13044

lor.lhs.false7:                                   ; preds = %lor.lhs.false6
  %11 = load i8, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 3), align 1, !dbg !13045
  %conv = zext i8 %11 to i32, !dbg !13046
  %tobool8 = icmp ne i32 %conv, 0, !dbg !13046
  br i1 %tobool8, label %if.then9, label %if.end, !dbg !13047

if.then9:                                         ; preds = %lor.lhs.false7, %lor.lhs.false6, %lor.lhs.false, %if.then
  %12 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13048
  %type10 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %12, i32 0, i32 0, !dbg !13048
  %13 = load i32, i32* %type10, align 8, !dbg !13048
  %cmp11 = icmp eq i32 %13, 23, !dbg !13048
  br i1 %cmp11, label %cond.false14, label %cond.true13, !dbg !13048

cond.true13:                                      ; preds = %if.then9
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2503, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13048
  br label %cond.end15, !dbg !13048

cond.false14:                                     ; preds = %if.then9
  br label %cond.end15, !dbg !13048

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !13048
  %14 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !13050
  %tobool17 = icmp ne %struct.rtx_def* %14, null, !dbg !13050
  %lnot = xor i1 %tobool17, true, !dbg !13050
  %lnot.ext = zext i1 %lnot to i32, !dbg !13050
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rhs, align 8, !dbg !13050
  %tobool18 = icmp ne %struct.rtx_def* %15, null, !dbg !13050
  %lnot19 = xor i1 %tobool18, true, !dbg !13050
  %lnot.ext20 = zext i1 %lnot19 to i32, !dbg !13050
  %cmp21 = icmp eq i32 %lnot.ext, %lnot.ext20, !dbg !13050
  br i1 %cmp21, label %cond.false24, label %cond.true23, !dbg !13050

cond.true23:                                      ; preds = %cond.end15
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2504, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13050
  br label %cond.end25, !dbg !13050

cond.false24:                                     ; preds = %cond.end15
  br label %cond.end25, !dbg !13050

cond.end25:                                       ; preds = %cond.false24, %cond.true23
  %cond26 = phi i32 [ 0, %cond.true23 ], [ 0, %cond.false24 ], !dbg !13050
  %16 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13051
  %type27 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %16, i32 0, i32 0, !dbg !13051
  store i32 24, i32* %type27, align 8, !dbg !13052
  br label %if.end, !dbg !13053

if.end:                                           ; preds = %cond.end25, %lor.lhs.false7
  br label %if.end28, !dbg !13054

if.end28:                                         ; preds = %if.end, %cond.end
  store i32 3, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13055
  ret void, !dbg !13056
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_start_lhs(%struct.rtx_def* %lhs) #0 !dbg !13057 {
entry:
  %lhs.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %lhs, %struct.rtx_def** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lhs.addr, metadata !13058, metadata !DIExpression()), !dbg !13059
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13060
  %cmp = icmp eq i32 %0, 0, !dbg !13060
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13060

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2402, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13060
  br label %cond.end, !dbg !13060

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13060

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13060
  %1 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13061
  %lhs1 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %1, i32 0, i32 1, !dbg !13061
  %2 = load %struct.rtx_def*, %struct.rtx_def** %lhs1, align 8, !dbg !13061
  %cmp2 = icmp eq %struct.rtx_def* %2, null, !dbg !13061
  br i1 %cmp2, label %cond.false4, label %cond.true3, !dbg !13061

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2403, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13061
  br label %cond.end5, !dbg !13061

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !13061

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !13061
  %3 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13062
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %3, i32 0, i32 0, !dbg !13062
  %4 = load i32, i32* %type, align 8, !dbg !13062
  %cmp7 = icmp eq i32 %4, 23, !dbg !13064
  br i1 %cmp7, label %if.then, label %if.end, !dbg !13065

if.then:                                          ; preds = %cond.end5
  %5 = load %struct.rtx_def*, %struct.rtx_def** %lhs.addr, align 8, !dbg !13066
  %6 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13068
  %lhs8 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %6, i32 0, i32 1, !dbg !13068
  store %struct.rtx_def* %5, %struct.rtx_def** %lhs8, align 8, !dbg !13069
  store i32 1, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13070
  br label %if.end, !dbg !13071

if.end:                                           ; preds = %if.then, %cond.end5
  ret void, !dbg !13072
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_finish_lhs() #0 !dbg !13073 {
entry:
  store i32 0, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13074
  ret void, !dbg !13075
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_start_rhs(%struct.rtx_def* %rhs) #0 !dbg !13076 {
entry:
  %rhs.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %rhs, %struct.rtx_def** %rhs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rhs.addr, metadata !13077, metadata !DIExpression()), !dbg !13078
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13079
  %cmp = icmp eq i32 %0, 0, !dbg !13079
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !13079

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2466, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13079
  br label %cond.end, !dbg !13079

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13079

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13079
  %1 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13080
  %lhs = getelementptr inbounds %struct.idata_def, %struct.idata_def* %1, i32 0, i32 1, !dbg !13080
  %2 = load %struct.rtx_def*, %struct.rtx_def** %lhs, align 8, !dbg !13080
  %cmp1 = icmp ne %struct.rtx_def* %2, null, !dbg !13082
  br i1 %cmp1, label %if.then, label %if.end, !dbg !13083

if.then:                                          ; preds = %cond.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rhs.addr, align 8, !dbg !13084
  %4 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13086
  %rhs2 = getelementptr inbounds %struct.idata_def, %struct.idata_def* %4, i32 0, i32 2, !dbg !13086
  store %struct.rtx_def* %3, %struct.rtx_def** %rhs2, align 8, !dbg !13087
  store i32 2, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13088
  br label %if.end, !dbg !13089

if.end:                                           ; preds = %if.then, %cond.end
  ret void, !dbg !13090
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_finish_rhs() #0 !dbg !13091 {
entry:
  %0 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13092
  %cmp = icmp eq i32 %0, 2, !dbg !13092
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !13092

lor.lhs.false:                                    ; preds = %entry
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13092
  %cmp1 = icmp eq i32 %1, 0, !dbg !13092
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !13092

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 2481, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13092
  br label %cond.end, !dbg !13092

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !13092

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13092
  store i32 0, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13093
  ret void, !dbg !13094
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_note_reg_set(i32 %regno) #0 !dbg !13095 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !13096, metadata !DIExpression()), !dbg !13097
  %0 = load i32, i32* %regno.addr, align 4, !dbg !13098
  call void @haifa_note_reg_set(i32 %0), !dbg !13099
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13100
  %cmp = icmp eq i32 %1, 2, !dbg !13102
  br i1 %cmp, label %if.then, label %if.end, !dbg !13103

if.then:                                          ; preds = %entry
  store i8 1, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 3), align 1, !dbg !13104
  br label %if.end, !dbg !13105

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13106
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %2, i32 0, i32 0, !dbg !13106
  %3 = load i32, i32* %type, align 8, !dbg !13106
  %cmp1 = icmp ne i32 %3, 36, !dbg !13108
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !13109

if.then2:                                         ; preds = %if.end
  %4 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13110
  %reg_sets = getelementptr inbounds %struct.idata_def, %struct.idata_def* %4, i32 0, i32 3, !dbg !13110
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_sets, align 8, !dbg !13110
  %6 = load i32, i32* %regno.addr, align 4, !dbg !13110
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %6), !dbg !13110
  br label %if.end3, !dbg !13110

if.end3:                                          ; preds = %if.then2, %if.end
  %7 = load i32, i32* %regno.addr, align 4, !dbg !13111
  %conv = sext i32 %7 to i64, !dbg !13111
  %sub = sub i64 %conv, 8, !dbg !13111
  %cmp4 = icmp ule i64 %sub, 7, !dbg !13111
  br i1 %cmp4, label %if.then6, label %if.end7, !dbg !13113

if.then6:                                         ; preds = %if.end3
  store i8 1, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 3), align 1, !dbg !13114
  br label %if.end7, !dbg !13115

if.end7:                                          ; preds = %if.then6, %if.end3
  ret void, !dbg !13116
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_note_reg_clobber(i32 %regno) #0 !dbg !13117 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !13118, metadata !DIExpression()), !dbg !13119
  %0 = load i32, i32* %regno.addr, align 4, !dbg !13120
  call void @haifa_note_reg_clobber(i32 %0), !dbg !13121
  %1 = load i32, i32* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 0), align 8, !dbg !13122
  %cmp = icmp eq i32 %1, 2, !dbg !13124
  br i1 %cmp, label %if.then, label %if.end, !dbg !13125

if.then:                                          ; preds = %entry
  store i8 1, i8* getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 3), align 1, !dbg !13126
  br label %if.end, !dbg !13127

if.end:                                           ; preds = %if.then, %entry
  %2 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13128
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %2, i32 0, i32 0, !dbg !13128
  %3 = load i32, i32* %type, align 8, !dbg !13128
  %cmp1 = icmp ne i32 %3, 36, !dbg !13130
  br i1 %cmp1, label %if.then2, label %if.end3, !dbg !13131

if.then2:                                         ; preds = %if.end
  %4 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13132
  %reg_clobbers = getelementptr inbounds %struct.idata_def, %struct.idata_def* %4, i32 0, i32 4, !dbg !13132
  %5 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_clobbers, align 8, !dbg !13132
  %6 = load i32, i32* %regno.addr, align 4, !dbg !13132
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %5, i32 %6), !dbg !13132
  br label %if.end3, !dbg !13132

if.end3:                                          ; preds = %if.then2, %if.end
  ret void, !dbg !13133
}

; Function Attrs: noinline nounwind uwtable
define internal void @deps_init_id_note_reg_use(i32 %regno) #0 !dbg !13134 {
entry:
  %regno.addr = alloca i32, align 4
  store i32 %regno, i32* %regno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %regno.addr, metadata !13135, metadata !DIExpression()), !dbg !13136
  %0 = load i32, i32* %regno.addr, align 4, !dbg !13137
  call void @haifa_note_reg_use(i32 %0), !dbg !13138
  %1 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13139
  %type = getelementptr inbounds %struct.idata_def, %struct.idata_def* %1, i32 0, i32 0, !dbg !13139
  %2 = load i32, i32* %type, align 8, !dbg !13139
  %cmp = icmp ne i32 %2, 36, !dbg !13141
  br i1 %cmp, label %if.then, label %if.end, !dbg !13142

if.then:                                          ; preds = %entry
  %3 = load %struct.idata_def*, %struct.idata_def** getelementptr inbounds (%struct.anon.6, %struct.anon.6* @deps_init_id_data, i32 0, i32 1), align 8, !dbg !13143
  %reg_uses = getelementptr inbounds %struct.idata_def, %struct.idata_def* %3, i32 0, i32 5, !dbg !13143
  %4 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %reg_uses, align 8, !dbg !13143
  %5 = load i32, i32* %regno.addr, align 4, !dbg !13143
  %call = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %4, i32 %5), !dbg !13143
  br label %if.end, !dbg !13143

if.end:                                           ; preds = %if.then, %entry
  ret void, !dbg !13144
}

declare dso_local i8* @sel_print_insn(%struct.rtx_def*, i32) #2

declare dso_local i32 @contributes_to_priority(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !13145 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13148
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !13148
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !13148
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !13148
  %tobool = icmp ne %struct.loops* %1, null, !dbg !13148
  br i1 %tobool, label %if.end, label %if.then, !dbg !13150

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !13151
  br label %return, !dbg !13151

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13152
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !13152
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !13152
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !13152
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !13152
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !13152
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !13152
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !13152

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13152
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !13152
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !13152
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !13152
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !13152
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !13152
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !13152
  br label %cond.end, !dbg !13152

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !13152

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13152
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !13152
  store i32 %call, i32* %retval, align 4, !dbg !13153
  br label %return, !dbg !13153

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !13154
  ret i32 %8, !dbg !13154
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !13155 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !13158, metadata !DIExpression()), !dbg !13159
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !13160, metadata !DIExpression()), !dbg !13159
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !13161, metadata !DIExpression()), !dbg !13159
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13162
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !13162
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13162

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !13162
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13162
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !13162
  %3 = load i32, i32* %num, align 8, !dbg !13162
  %cmp = icmp ult i32 %1, %3, !dbg !13162
  br i1 %cmp, label %if.then, label %if.else, !dbg !13159

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13164
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !13164
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !13164
  %idxprom = zext i32 %5 to i64, !dbg !13164
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !13164
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !13164
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !13164
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !13164
  store i32 1, i32* %retval, align 4, !dbg !13164
  br label %return, !dbg !13164

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !13166
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !13166
  store i32 0, i32* %retval, align 4, !dbg !13166
  br label %return, !dbg !13166

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !13159
  ret i32 %9, !dbg !13159
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !13168 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !13171, metadata !DIExpression()), !dbg !13172
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !13173, metadata !DIExpression()), !dbg !13172
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !13174, metadata !DIExpression()), !dbg !13172
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13175
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !13175
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !13175

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !13175
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13175
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !13175
  %3 = load i32, i32* %num, align 4, !dbg !13175
  %cmp = icmp ult i32 %1, %3, !dbg !13175
  br i1 %cmp, label %if.then, label %if.else, !dbg !13172

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !13177
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !13177
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !13177
  %idxprom = zext i32 %5 to i64, !dbg !13177
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !13177
  %6 = load i32, i32* %arrayidx, align 4, !dbg !13177
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !13177
  store i32 %6, i32* %7, align 4, !dbg !13177
  store i32 1, i32* %retval, align 4, !dbg !13177
  br label %return, !dbg !13177

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !13179
  store i32 0, i32* %8, align 4, !dbg !13179
  store i32 0, i32* %retval, align 4, !dbg !13179
  br label %return, !dbg !13179

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !13172
  ret i32 %9, !dbg !13172
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !13181 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !13184, metadata !DIExpression()), !dbg !13185
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13186
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !13186
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !13186
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !13186
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !13186
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !13186
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !13186
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13186

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !13186
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !13186
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !13186
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !13186
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !13186
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !13186
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !13186
  br label %cond.end, !dbg !13186

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13186

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13186
  %6 = load i32, i32* %num.addr, align 4, !dbg !13186
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !13186
  ret %struct.loop* %call, !dbg !13187
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @make_region_from_loop(%struct.loop* %loop) #0 !dbg !13188 {
entry:
  %retval = alloca i32, align 4
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %new_rgn_number = alloca i32, align 4
  %inner = alloca %struct.loop*, align 8
  %bb_ord_index = alloca i32, align 4
  %loop_blocks = alloca %struct.basic_block_def**, align 8
  %preheader_block = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !13191, metadata !DIExpression()), !dbg !13192
  call void @llvm.dbg.declare(metadata i32* %i, metadata !13193, metadata !DIExpression()), !dbg !13194
  call void @llvm.dbg.declare(metadata i32* %new_rgn_number, metadata !13195, metadata !DIExpression()), !dbg !13196
  store i32 -1, i32* %new_rgn_number, align 4, !dbg !13196
  call void @llvm.dbg.declare(metadata %struct.loop** %inner, metadata !13197, metadata !DIExpression()), !dbg !13198
  call void @llvm.dbg.declare(metadata i32* %bb_ord_index, metadata !13199, metadata !DIExpression()), !dbg !13200
  store i32 0, i32* %bb_ord_index, align 4, !dbg !13200
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %loop_blocks, metadata !13201, metadata !DIExpression()), !dbg !13202
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %preheader_block, metadata !13203, metadata !DIExpression()), !dbg !13204
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13205
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 6, !dbg !13207
  %1 = load i32, i32* %num_nodes, align 4, !dbg !13207
  %2 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !13208
  %arrayidx = getelementptr inbounds %struct.param_info, %struct.param_info* %2, i64 79, !dbg !13208
  %value = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx, i32 0, i32 1, !dbg !13208
  %3 = load i32, i32* %value, align 8, !dbg !13208
  %cmp = icmp ugt i32 %1, %3, !dbg !13209
  br i1 %cmp, label %if.then, label %if.end, !dbg !13210

if.then:                                          ; preds = %entry
  store i32 -1, i32* %retval, align 4, !dbg !13211
  br label %return, !dbg !13211

if.end:                                           ; preds = %entry
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13212
  %inner1 = getelementptr inbounds %struct.loop, %struct.loop* %4, i32 0, i32 8, !dbg !13214
  %5 = load %struct.loop*, %struct.loop** %inner1, align 8, !dbg !13214
  store %struct.loop* %5, %struct.loop** %inner, align 8, !dbg !13215
  br label %for.cond, !dbg !13216

for.cond:                                         ; preds = %for.inc, %if.end
  %6 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !13217
  %tobool = icmp ne %struct.loop* %6, null, !dbg !13219
  br i1 %tobool, label %for.body, label %for.end, !dbg !13219

for.body:                                         ; preds = %for.cond
  %7 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !13220
  %8 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13222
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 3, !dbg !13223
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !13223
  %call = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %7, %struct.basic_block_def* %9), !dbg !13224
  %tobool2 = icmp ne i8 %call, 0, !dbg !13224
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !13225

if.then3:                                         ; preds = %for.body
  store i32 -1, i32* %retval, align 4, !dbg !13226
  br label %return, !dbg !13226

if.end4:                                          ; preds = %for.body
  br label %for.inc, !dbg !13227

for.inc:                                          ; preds = %if.end4
  %10 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !13228
  %inner5 = getelementptr inbounds %struct.loop, %struct.loop* %10, i32 0, i32 8, !dbg !13229
  %11 = load %struct.loop*, %struct.loop** %inner5, align 8, !dbg !13229
  store %struct.loop* %11, %struct.loop** %inner, align 8, !dbg !13230
  br label %for.cond, !dbg !13231, !llvm.loop !13232

for.end:                                          ; preds = %for.cond
  %12 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13234
  %call6 = call i32 @num_loop_insns(%struct.loop* %12), !dbg !13235
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13236
  %ninsns = getelementptr inbounds %struct.loop, %struct.loop* %13, i32 0, i32 1, !dbg !13237
  store i32 %call6, i32* %ninsns, align 4, !dbg !13238
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13239
  %ninsns7 = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 1, !dbg !13241
  %15 = load i32, i32* %ninsns7, align 4, !dbg !13241
  %16 = load %struct.param_info*, %struct.param_info** @compiler_params, align 8, !dbg !13242
  %arrayidx8 = getelementptr inbounds %struct.param_info, %struct.param_info* %16, i64 80, !dbg !13242
  %value9 = getelementptr inbounds %struct.param_info, %struct.param_info* %arrayidx8, i32 0, i32 1, !dbg !13242
  %17 = load i32, i32* %value9, align 8, !dbg !13242
  %cmp10 = icmp sgt i32 %15, %17, !dbg !13243
  br i1 %cmp10, label %if.then11, label %if.end12, !dbg !13244

if.then11:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !13245
  br label %return, !dbg !13245

if.end12:                                         ; preds = %for.end
  %18 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13246
  %call13 = call %struct.basic_block_def** @get_loop_body_in_custom_order(%struct.loop* %18, i32 (i8*, i8*)* @bb_top_order_comparator), !dbg !13247
  store %struct.basic_block_def** %call13, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13248
  store i32 0, i32* %i, align 4, !dbg !13249
  br label %for.cond14, !dbg !13251

for.cond14:                                       ; preds = %for.inc22, %if.end12
  %19 = load i32, i32* %i, align 4, !dbg !13252
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13254
  %num_nodes15 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 6, !dbg !13255
  %21 = load i32, i32* %num_nodes15, align 4, !dbg !13255
  %cmp16 = icmp ult i32 %19, %21, !dbg !13256
  br i1 %cmp16, label %for.body17, label %for.end23, !dbg !13257

for.body17:                                       ; preds = %for.cond14
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13258
  %23 = load i32, i32* %i, align 4, !dbg !13260
  %idxprom = zext i32 %23 to i64, !dbg !13258
  %arrayidx18 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %22, i64 %idxprom, !dbg !13258
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx18, align 8, !dbg !13258
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %24, i32 0, i32 13, !dbg !13261
  %25 = load i32, i32* %flags, align 8, !dbg !13261
  %and = and i32 %25, 4, !dbg !13262
  %tobool19 = icmp ne i32 %and, 0, !dbg !13262
  br i1 %tobool19, label %if.then20, label %if.end21, !dbg !13263

if.then20:                                        ; preds = %for.body17
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13264
  %27 = bitcast %struct.basic_block_def** %26 to i8*, !dbg !13264
  call void @free(i8* %27), !dbg !13266
  store i32 -1, i32* %retval, align 4, !dbg !13267
  br label %return, !dbg !13267

if.end21:                                         ; preds = %for.body17
  br label %for.inc22, !dbg !13268

for.inc22:                                        ; preds = %if.end21
  %28 = load i32, i32* %i, align 4, !dbg !13269
  %inc = add i32 %28, 1, !dbg !13269
  store i32 %inc, i32* %i, align 4, !dbg !13269
  br label %for.cond14, !dbg !13270, !llvm.loop !13271

for.end23:                                        ; preds = %for.cond14
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13273
  %call24 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %29), !dbg !13274
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call24, i32 0, i32 0, !dbg !13275
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !13275
  store %struct.basic_block_def* %30, %struct.basic_block_def** %preheader_block, align 8, !dbg !13276
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader_block, align 8, !dbg !13277
  %tobool25 = icmp ne %struct.basic_block_def* %31, null, !dbg !13277
  br i1 %tobool25, label %cond.false, label %cond.true, !dbg !13277

cond.true:                                        ; preds = %for.end23
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5784, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13277
  br label %cond.end, !dbg !13277

cond.false:                                       ; preds = %for.end23
  br label %cond.end, !dbg !13277

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13277
  %32 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13278
  %arrayidx26 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %32, i64 0, !dbg !13278
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx26, align 8, !dbg !13278
  %34 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13278
  %header = getelementptr inbounds %struct.loop, %struct.loop* %34, i32 0, i32 2, !dbg !13278
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !13278
  %cmp27 = icmp eq %struct.basic_block_def* %33, %35, !dbg !13278
  br i1 %cmp27, label %cond.false29, label %cond.true28, !dbg !13278

cond.true28:                                      ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5785, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13278
  br label %cond.end30, !dbg !13278

cond.false29:                                     ; preds = %cond.end
  br label %cond.end30, !dbg !13278

cond.end30:                                       ; preds = %cond.false29, %cond.true28
  %cond31 = phi i32 [ 0, %cond.true28 ], [ 0, %cond.false29 ], !dbg !13278
  %call32 = call i32 @sel_create_new_region(), !dbg !13279
  store i32 %call32, i32* %new_rgn_number, align 4, !dbg !13280
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader_block, align 8, !dbg !13281
  %37 = load i32, i32* %new_rgn_number, align 4, !dbg !13282
  call void @sel_add_block_to_region(%struct.basic_block_def* %36, i32* %bb_ord_index, i32 %37), !dbg !13283
  %38 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !13284
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %preheader_block, align 8, !dbg !13285
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 9, !dbg !13286
  %40 = load i32, i32* %index, align 8, !dbg !13286
  call void @SET_BIT(%struct.simple_bitmap_def* %38, i32 %40), !dbg !13287
  store i32 0, i32* %i, align 4, !dbg !13288
  br label %for.cond33, !dbg !13290

for.cond33:                                       ; preds = %for.inc59, %cond.end30
  %41 = load i32, i32* %i, align 4, !dbg !13291
  %42 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13293
  %num_nodes34 = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 6, !dbg !13294
  %43 = load i32, i32* %num_nodes34, align 4, !dbg !13294
  %cmp35 = icmp ult i32 %41, %43, !dbg !13295
  br i1 %cmp35, label %for.body36, label %for.end61, !dbg !13296

for.body36:                                       ; preds = %for.cond33
  %44 = load i32, i32* %new_rgn_number, align 4, !dbg !13297
  %cmp37 = icmp sge i32 %44, 0, !dbg !13297
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !13297

cond.true38:                                      ; preds = %for.body36
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5799, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13297
  br label %cond.end40, !dbg !13297

cond.false39:                                     ; preds = %for.body36
  br label %cond.end40, !dbg !13297

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !13297
  %45 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !13299
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %45, i32 0, i32 3, !dbg !13299
  %46 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13299
  %47 = load i32, i32* %i, align 4, !dbg !13299
  %idxprom42 = zext i32 %47 to i64, !dbg !13299
  %arrayidx43 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %46, i64 %idxprom42, !dbg !13299
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx43, align 8, !dbg !13299
  %index44 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 9, !dbg !13299
  %49 = load i32, i32* %index44, align 8, !dbg !13299
  %div = udiv i32 %49, 64, !dbg !13299
  %idxprom45 = zext i32 %div to i64, !dbg !13299
  %arrayidx46 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom45, !dbg !13299
  %50 = load i64, i64* %arrayidx46, align 8, !dbg !13299
  %51 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13299
  %52 = load i32, i32* %i, align 4, !dbg !13299
  %idxprom47 = zext i32 %52 to i64, !dbg !13299
  %arrayidx48 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %51, i64 %idxprom47, !dbg !13299
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx48, align 8, !dbg !13299
  %index49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 9, !dbg !13299
  %54 = load i32, i32* %index49, align 8, !dbg !13299
  %rem = urem i32 %54, 64, !dbg !13299
  %sh_prom = zext i32 %rem to i64, !dbg !13299
  %shr = lshr i64 %50, %sh_prom, !dbg !13299
  %and50 = and i64 %shr, 1, !dbg !13299
  %tobool51 = icmp ne i64 %and50, 0, !dbg !13299
  br i1 %tobool51, label %if.end58, label %if.then52, !dbg !13301

if.then52:                                        ; preds = %cond.end40
  %55 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13302
  %56 = load i32, i32* %i, align 4, !dbg !13304
  %idxprom53 = zext i32 %56 to i64, !dbg !13302
  %arrayidx54 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %55, i64 %idxprom53, !dbg !13302
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx54, align 8, !dbg !13302
  %58 = load i32, i32* %new_rgn_number, align 4, !dbg !13305
  call void @sel_add_block_to_region(%struct.basic_block_def* %57, i32* %bb_ord_index, i32 %58), !dbg !13306
  %59 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @bbs_in_loop_rgns, align 8, !dbg !13307
  %60 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13308
  %61 = load i32, i32* %i, align 4, !dbg !13309
  %idxprom55 = zext i32 %61 to i64, !dbg !13308
  %arrayidx56 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %60, i64 %idxprom55, !dbg !13308
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx56, align 8, !dbg !13308
  %index57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 9, !dbg !13310
  %63 = load i32, i32* %index57, align 8, !dbg !13310
  call void @SET_BIT(%struct.simple_bitmap_def* %59, i32 %63), !dbg !13311
  br label %if.end58, !dbg !13312

if.end58:                                         ; preds = %if.then52, %cond.end40
  br label %for.inc59, !dbg !13313

for.inc59:                                        ; preds = %if.end58
  %64 = load i32, i32* %i, align 4, !dbg !13314
  %inc60 = add i32 %64, 1, !dbg !13314
  store i32 %inc60, i32* %i, align 4, !dbg !13314
  br label %for.cond33, !dbg !13315, !llvm.loop !13316

for.end61:                                        ; preds = %for.cond33
  %65 = load %struct.basic_block_def**, %struct.basic_block_def*** %loop_blocks, align 8, !dbg !13318
  %66 = bitcast %struct.basic_block_def** %65 to i8*, !dbg !13318
  call void @free(i8* %66), !dbg !13319
  %67 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !13320
  %aux = getelementptr inbounds %struct.loop, %struct.loop* %67, i32 0, i32 10, !dbg !13320
  store i8* inttoptr (i64 1 to i8*), i8** %aux, align 8, !dbg !13320
  %68 = load i32, i32* %new_rgn_number, align 4, !dbg !13321
  store i32 %68, i32* %retval, align 4, !dbg !13322
  br label %return, !dbg !13322

return:                                           ; preds = %for.end61, %if.then20, %if.then11, %if.then3, %if.then
  %69 = load i32, i32* %retval, align 4, !dbg !13323
  ret i32 %69, !dbg !13323
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_heap_safe_push(%struct.VEC_loop_p_heap** %vec_, %struct.loop* %obj_) #0 !dbg !13324 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !13327, metadata !DIExpression()), !dbg !13328
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !13329, metadata !DIExpression()), !dbg !13328
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13328
  %call = call i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %0, i32 1), !dbg !13328
  %1 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13328
  %2 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %1, align 8, !dbg !13328
  %tobool = icmp ne %struct.VEC_loop_p_heap* %2, null, !dbg !13328
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13328

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13328
  %4 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %3, align 8, !dbg !13328
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %4, i32 0, i32 0, !dbg !13328
  br label %cond.end, !dbg !13328

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13328

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13328
  %5 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !13328
  %call1 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond, %struct.loop* %5), !dbg !13328
  ret %struct.loop** %call1, !dbg !13328
}

declare dso_local i32 @num_loop_insns(%struct.loop*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_custom_order(%struct.loop*, i32 (i8*, i8*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @bb_top_order_comparator(i8* %x, i8* %y) #0 !dbg !13330 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca i8*, align 8
  %y.addr = alloca i8*, align 8
  %bb1 = alloca %struct.basic_block_def*, align 8
  %bb2 = alloca %struct.basic_block_def*, align 8
  store i8* %x, i8** %x.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %x.addr, metadata !13331, metadata !DIExpression()), !dbg !13332
  store i8* %y, i8** %y.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %y.addr, metadata !13333, metadata !DIExpression()), !dbg !13334
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb1, metadata !13335, metadata !DIExpression()), !dbg !13336
  %0 = load i8*, i8** %x.addr, align 8, !dbg !13337
  %1 = bitcast i8* %0 to %struct.basic_block_def**, !dbg !13338
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %1, align 8, !dbg !13339
  store %struct.basic_block_def* %2, %struct.basic_block_def** %bb1, align 8, !dbg !13336
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb2, metadata !13340, metadata !DIExpression()), !dbg !13341
  %3 = load i8*, i8** %y.addr, align 8, !dbg !13342
  %4 = bitcast i8* %3 to %struct.basic_block_def**, !dbg !13343
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %4, align 8, !dbg !13344
  store %struct.basic_block_def* %5, %struct.basic_block_def** %bb2, align 8, !dbg !13341
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !13345
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !13345
  %cmp = icmp eq %struct.basic_block_def* %6, %7, !dbg !13345
  br i1 %cmp, label %cond.false, label %lor.lhs.false, !dbg !13345

lor.lhs.false:                                    ; preds = %entry
  %8 = load i32*, i32** @rev_top_order_index, align 8, !dbg !13345
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !13345
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 9, !dbg !13345
  %10 = load i32, i32* %index, align 8, !dbg !13345
  %idxprom = sext i32 %10 to i64, !dbg !13345
  %arrayidx = getelementptr inbounds i32, i32* %8, i64 %idxprom, !dbg !13345
  %11 = load i32, i32* %arrayidx, align 4, !dbg !13345
  %12 = load i32*, i32** @rev_top_order_index, align 8, !dbg !13345
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !13345
  %index1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 9, !dbg !13345
  %14 = load i32, i32* %index1, align 8, !dbg !13345
  %idxprom2 = sext i32 %14 to i64, !dbg !13345
  %arrayidx3 = getelementptr inbounds i32, i32* %12, i64 %idxprom2, !dbg !13345
  %15 = load i32, i32* %arrayidx3, align 4, !dbg !13345
  %cmp4 = icmp ne i32 %11, %15, !dbg !13345
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !13345

cond.true:                                        ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 5737, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !13345
  br label %cond.end, !dbg !13345

cond.false:                                       ; preds = %lor.lhs.false, %entry
  br label %cond.end, !dbg !13345

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !13345
  %16 = load i32*, i32** @rev_top_order_index, align 8, !dbg !13346
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb1, align 8, !dbg !13348
  %index5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 9, !dbg !13349
  %18 = load i32, i32* %index5, align 8, !dbg !13349
  %idxprom6 = sext i32 %18 to i64, !dbg !13346
  %arrayidx7 = getelementptr inbounds i32, i32* %16, i64 %idxprom6, !dbg !13346
  %19 = load i32, i32* %arrayidx7, align 4, !dbg !13346
  %20 = load i32*, i32** @rev_top_order_index, align 8, !dbg !13350
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb2, align 8, !dbg !13351
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %21, i32 0, i32 9, !dbg !13352
  %22 = load i32, i32* %index8, align 8, !dbg !13352
  %idxprom9 = sext i32 %22 to i64, !dbg !13350
  %arrayidx10 = getelementptr inbounds i32, i32* %20, i64 %idxprom9, !dbg !13350
  %23 = load i32, i32* %arrayidx10, align 4, !dbg !13350
  %cmp11 = icmp sgt i32 %19, %23, !dbg !13353
  br i1 %cmp11, label %if.then, label %if.else, !dbg !13354

if.then:                                          ; preds = %cond.end
  store i32 -1, i32* %retval, align 4, !dbg !13355
  br label %return, !dbg !13355

if.else:                                          ; preds = %cond.end
  store i32 1, i32* %retval, align 4, !dbg !13356
  br label %return, !dbg !13356

return:                                           ; preds = %if.else, %if.then
  %24 = load i32, i32* %retval, align 4, !dbg !13357
  ret i32 %24, !dbg !13357
}

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !13358 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !13361, metadata !DIExpression()), !dbg !13362
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !13363, metadata !DIExpression()), !dbg !13364
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !13365
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !13367
  %1 = load i8*, i8** %popcount, align 8, !dbg !13367
  %tobool = icmp ne i8* %1, null, !dbg !13365
  br i1 %tobool, label %if.then, label %if.end7, !dbg !13368

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !13369, metadata !DIExpression()), !dbg !13371
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !13372
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !13372
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !13372
  %div = udiv i32 %3, 64, !dbg !13372
  %idxprom = zext i32 %div to i64, !dbg !13372
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !13372
  %4 = load i64, i64* %arrayidx, align 8, !dbg !13372
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !13372
  %rem = urem i32 %5, 64, !dbg !13372
  %sh_prom = zext i32 %rem to i64, !dbg !13372
  %shr = lshr i64 %4, %sh_prom, !dbg !13372
  %and = and i64 %shr, 1, !dbg !13372
  %conv = trunc i64 %and to i8, !dbg !13372
  store i8 %conv, i8* %oldbit, align 1, !dbg !13373
  %6 = load i8, i8* %oldbit, align 1, !dbg !13374
  %tobool1 = icmp ne i8 %6, 0, !dbg !13374
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !13376

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !13377
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !13378
  %8 = load i8*, i8** %popcount3, align 8, !dbg !13378
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !13379
  %div4 = udiv i32 %9, 64, !dbg !13380
  %idxprom5 = zext i32 %div4 to i64, !dbg !13377
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !13377
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !13381
  %inc = add i8 %10, 1, !dbg !13381
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !13381
  br label %if.end, !dbg !13377

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !13382

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !13383
  %rem8 = urem i32 %11, 64, !dbg !13384
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !13385
  %shl = shl i64 1, %sh_prom9, !dbg !13385
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !13386
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !13387
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !13388
  %div11 = udiv i32 %13, 64, !dbg !13389
  %idxprom12 = zext i32 %div11 to i64, !dbg !13386
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !13386
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !13390
  %or = or i64 %14, %shl, !dbg !13390
  store i64 %or, i64* %arrayidx13, align 8, !dbg !13390
  ret void, !dbg !13391
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_heap_reserve(%struct.VEC_loop_p_heap** %vec_, i32 %alloc_) #0 !dbg !13392 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_loop_p_heap** %vec_, %struct.VEC_loop_p_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_heap*** %vec_.addr, metadata !13395, metadata !DIExpression()), !dbg !13396
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13397, metadata !DIExpression()), !dbg !13396
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13398, metadata !DIExpression()), !dbg !13396
  %0 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13396
  %1 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %0, align 8, !dbg !13396
  %tobool = icmp ne %struct.VEC_loop_p_heap* %1, null, !dbg !13396
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13396

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13396
  %3 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %2, align 8, !dbg !13396
  %base = getelementptr inbounds %struct.VEC_loop_p_heap, %struct.VEC_loop_p_heap* %3, i32 0, i32 0, !dbg !13396
  br label %cond.end, !dbg !13396

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13396

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13396
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13396
  %call = call i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %cond, i32 %4), !dbg !13396
  %tobool1 = icmp ne i32 %call, 0, !dbg !13396
  %lnot = xor i1 %tobool1, true, !dbg !13396
  %lnot.ext = zext i1 %lnot to i32, !dbg !13396
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13396
  %5 = load i32, i32* %extend, align 4, !dbg !13399
  %tobool2 = icmp ne i32 %5, 0, !dbg !13399
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13396

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13399
  %7 = load %struct.VEC_loop_p_heap*, %struct.VEC_loop_p_heap** %6, align 8, !dbg !13399
  %8 = bitcast %struct.VEC_loop_p_heap* %7 to i8*, !dbg !13399
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13399
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !13399
  %10 = bitcast i8* %call3 to %struct.VEC_loop_p_heap*, !dbg !13399
  %11 = load %struct.VEC_loop_p_heap**, %struct.VEC_loop_p_heap*** %vec_.addr, align 8, !dbg !13399
  store %struct.VEC_loop_p_heap* %10, %struct.VEC_loop_p_heap** %11, align 8, !dbg !13399
  br label %if.end, !dbg !13399

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13396
  ret i32 %12, !dbg !13396
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %vec_, %struct.loop* %obj_) #0 !dbg !13401 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  %slot_ = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !13405, metadata !DIExpression()), !dbg !13406
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !13407, metadata !DIExpression()), !dbg !13406
  call void @llvm.dbg.declare(metadata %struct.loop*** %slot_, metadata !13408, metadata !DIExpression()), !dbg !13406
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13406
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %0, i32 0, i32 0, !dbg !13406
  %1 = load i32, i32* %num, align 8, !dbg !13406
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13406
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !13406
  %3 = load i32, i32* %alloc, align 4, !dbg !13406
  %cmp = icmp ult i32 %1, %3, !dbg !13406
  %conv = zext i1 %cmp to i32, !dbg !13406
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13406
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !13406
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13406
  %num1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 0, !dbg !13406
  %6 = load i32, i32* %num1, align 8, !dbg !13406
  %inc = add i32 %6, 1, !dbg !13406
  store i32 %inc, i32* %num1, align 8, !dbg !13406
  %idxprom = zext i32 %6 to i64, !dbg !13406
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !13406
  store %struct.loop** %arrayidx, %struct.loop*** %slot_, align 8, !dbg !13406
  %7 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !13406
  %8 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !13406
  store %struct.loop* %7, %struct.loop** %8, align 8, !dbg !13406
  %9 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !13406
  ret %struct.loop** %9, !dbg !13406
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %vec_, i32 %alloc_) #0 !dbg !13409 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !13412, metadata !DIExpression()), !dbg !13413
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13414, metadata !DIExpression()), !dbg !13413
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13413
  %cmp = icmp sge i32 %0, 0, !dbg !13413
  %conv = zext i1 %cmp to i32, !dbg !13413
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13413
  %tobool = icmp ne %struct.VEC_loop_p_base* %1, null, !dbg !13413
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13413

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13413
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !13413
  %3 = load i32, i32* %alloc, align 4, !dbg !13413
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !13413
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 0, !dbg !13413
  %5 = load i32, i32* %num, align 8, !dbg !13413
  %sub = sub i32 %3, %5, !dbg !13413
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13413
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13413
  %conv2 = zext i1 %cmp1 to i32, !dbg !13413
  br label %cond.end, !dbg !13413

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13413
  %tobool3 = icmp ne i32 %7, 0, !dbg !13413
  %lnot = xor i1 %tobool3, true, !dbg !13413
  %lnot.ext = zext i1 %lnot to i32, !dbg !13413
  br label %cond.end, !dbg !13413

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13413
  ret i32 %cond, !dbg !13413
}

declare dso_local void @extend_rgns(i32*, i32*, %struct.simple_bitmap_def*, i32*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %vec_, i32 %alloc_) #0 !dbg !13415 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !13418, metadata !DIExpression()), !dbg !13419
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13420, metadata !DIExpression()), !dbg !13419
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !13421, metadata !DIExpression()), !dbg !13419
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !13419
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !13419
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !13419
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13419

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !13419
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !13419
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !13419
  br label %cond.end, !dbg !13419

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !13419

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !13419
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !13419
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !13419
  %tobool1 = icmp ne i32 %call, 0, !dbg !13419
  %lnot = xor i1 %tobool1, true, !dbg !13419
  %lnot.ext = zext i1 %lnot to i32, !dbg !13419
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !13419
  %5 = load i32, i32* %extend, align 4, !dbg !13422
  %tobool2 = icmp ne i32 %5, 0, !dbg !13422
  br i1 %tobool2, label %if.then, label %if.end, !dbg !13419

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !13422
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %6, align 8, !dbg !13422
  %8 = bitcast %struct.VEC_basic_block_heap* %7 to i8*, !dbg !13422
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !13422
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !13422
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_heap*, !dbg !13422
  %11 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !13422
  store %struct.VEC_basic_block_heap* %10, %struct.VEC_basic_block_heap** %11, align 8, !dbg !13422
  br label %if.end, !dbg !13422

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !13419
  ret i32 %12, !dbg !13419
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !13424 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !13427, metadata !DIExpression()), !dbg !13428
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !13429, metadata !DIExpression()), !dbg !13428
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !13428
  %cmp = icmp sge i32 %0, 0, !dbg !13428
  %conv = zext i1 %cmp to i32, !dbg !13428
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13428
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !13428
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !13428

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13428
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !13428
  %3 = load i32, i32* %alloc, align 4, !dbg !13428
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !13428
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !13428
  %5 = load i32, i32* %num, align 8, !dbg !13428
  %sub = sub i32 %3, %5, !dbg !13428
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !13428
  %cmp1 = icmp uge i32 %sub, %6, !dbg !13428
  %conv2 = zext i1 %cmp1 to i32, !dbg !13428
  br label %cond.end, !dbg !13428

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !13428
  %tobool3 = icmp ne i32 %7, 0, !dbg !13428
  %lnot = xor i1 %tobool3, true, !dbg !13428
  %lnot.ext = zext i1 %lnot to i32, !dbg !13428
  br label %cond.end, !dbg !13428

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !13428
  ret i32 %cond, !dbg !13428
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2743, !2744, !2745}
!llvm.ident = !{!2746}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "sel_global_bb_info", scope: !2, file: !3, line: 53, type: !2252, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !849, globals: !2333, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "sel-sched-ir.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !134, !141, !150, !154, !160, !165, !170, !189, !196, !203, !397, !403, !408, !413, !556, !562, !568, !691, !698, !708, !713, !745, !761, !795, !814, !820, !835}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !6, line: 7, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133}
!9 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!15 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!16 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!17 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!18 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!19 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!20 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!21 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!22 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!23 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!24 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!25 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!26 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!27 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!28 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!29 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!30 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!31 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!32 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!33 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!34 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!35 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!36 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!37 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!38 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!39 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!40 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!41 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!42 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!43 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!44 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!45 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!46 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!47 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!48 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!49 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!50 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!51 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!52 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!53 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!54 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!55 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!56 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!57 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!58 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!59 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!60 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!61 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!62 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!63 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!64 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!65 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!66 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!67 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!68 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!69 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!70 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!71 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!72 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!73 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!74 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!75 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!76 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!77 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!78 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!79 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!80 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!81 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!82 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!83 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!84 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!85 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!86 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!87 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!88 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!89 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!90 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!91 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!92 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!96 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!97 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!98 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!99 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!100 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!101 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!102 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!103 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!104 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!105 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!106 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!107 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!108 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!109 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!110 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!111 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!112 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!113 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!114 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!115 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!116 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!117 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!118 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!119 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!120 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!121 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!122 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!123 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!124 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!125 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!126 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!127 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!128 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!129 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!130 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!131 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!133 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!134 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !135, line: 30, baseType: !7, size: 32, elements: !136)
!135 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!136 = !{!137, !138, !139, !140}
!137 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!139 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!140 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!141 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !142, line: 31, baseType: !7, size: 32, elements: !143)
!142 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!143 = !{!144, !145, !146, !147, !148, !149}
!144 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!145 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!146 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!147 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!148 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!149 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!150 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !142, line: 91, baseType: !7, size: 32, elements: !151)
!151 = !{!152, !153}
!152 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!153 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !155, line: 363, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159}
!157 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!160 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !155, line: 355, baseType: !7, size: 32, elements: !161)
!161 = !{!162, !163, !164}
!162 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!163 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!164 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!165 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !166, line: 474, baseType: !7, size: 32, elements: !167)
!166 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!167 = !{!168, !169}
!168 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!170 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !171, line: 280, baseType: !7, size: 32, elements: !172)
!171 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!172 = !{!173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!173 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!175 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!176 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!177 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!178 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!179 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!180 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!181 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!182 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!183 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!184 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!185 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!186 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!187 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!188 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !171, line: 1817, baseType: !7, size: 32, elements: !190)
!190 = !{!191, !192, !193, !194, !195}
!191 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!192 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!193 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!194 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!195 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!196 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !171, line: 1805, baseType: !7, size: 32, elements: !197)
!197 = !{!198, !199, !200, !201, !202}
!198 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!199 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!200 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!201 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!202 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!203 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !171, line: 39, baseType: !7, size: 32, elements: !204)
!204 = !{!205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371, !372, !373, !374, !375, !376, !377, !378, !379, !380, !381, !382, !383, !384, !385, !386, !387, !388, !389, !390, !391, !392, !393, !394, !395, !396}
!205 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!206 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!207 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!208 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!209 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!210 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!211 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!212 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!213 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!214 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!215 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!216 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!217 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!218 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!219 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!220 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!221 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!222 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!223 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!224 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!225 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!226 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!227 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!228 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!229 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!230 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!231 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!232 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!233 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!234 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!235 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!236 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!237 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!238 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!239 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!240 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!241 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!242 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!243 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!244 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!245 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!246 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!248 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!249 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!250 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!251 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!252 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!253 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!254 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!255 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!256 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!257 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!258 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!259 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!260 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!261 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!262 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!263 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!264 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!265 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!266 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!267 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!268 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!269 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!270 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!271 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!272 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!273 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!274 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!275 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!276 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!277 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!278 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!279 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!280 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!281 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!282 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!283 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!284 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!285 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!286 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!287 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!288 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!289 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!290 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!291 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!292 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!293 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!294 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!295 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!296 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!297 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!298 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!299 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!300 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!301 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!302 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!303 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!304 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!305 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!306 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!307 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!308 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!309 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!310 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!311 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!312 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!313 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!314 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!315 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!316 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!317 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!318 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!319 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!320 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!321 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!322 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!323 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!324 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!325 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!326 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!327 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!328 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!329 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!330 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!331 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!332 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!333 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!334 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!335 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!336 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!337 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!338 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!339 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!340 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!341 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!342 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!343 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!344 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!345 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!346 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!347 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!348 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!349 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!350 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!351 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!352 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!353 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!354 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!355 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!356 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!357 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!369 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!370 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!371 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!372 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!373 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!374 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!375 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!376 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!377 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!378 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!379 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!380 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!381 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!382 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!383 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!384 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!385 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!386 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!387 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!388 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!389 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!390 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!391 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!392 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!393 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!394 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!395 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!396 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!397 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "post_call_group", file: !398, line: 432, baseType: !7, size: 32, elements: !399)
!398 = !DIFile(filename: "./sched-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!399 = !{!400, !401, !402}
!400 = !DIEnumerator(name: "not_post_call", value: 0, isUnsigned: true)
!401 = !DIEnumerator(name: "post_call", value: 1, isUnsigned: true)
!402 = !DIEnumerator(name: "post_call_initial", value: 2, isUnsigned: true)
!403 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_pending_barrier_mode", file: !398, line: 424, baseType: !7, size: 32, elements: !404)
!404 = !{!405, !406, !407}
!405 = !DIEnumerator(name: "NOT_A_BARRIER", value: 0, isUnsigned: true)
!406 = !DIEnumerator(name: "MOVE_BARRIER", value: 1, isUnsigned: true)
!407 = !DIEnumerator(name: "TRUE_BARRIER", value: 2, isUnsigned: true)
!408 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "local_trans_type", file: !409, line: 73, baseType: !7, size: 32, elements: !410)
!409 = !DIFile(filename: "./sel-sched-ir.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!410 = !{!411, !412}
!411 = !DIEnumerator(name: "TRANS_SUBSTITUTION", value: 0, isUnsigned: true)
!412 = !DIEnumerator(name: "TRANS_SPECULATION", value: 1, isUnsigned: true)
!413 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !414, line: 45, baseType: !7, size: 32, elements: !415)
!414 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!415 = !{!416, !417, !418, !419, !420, !421, !422, !423, !424, !425, !426, !427, !428, !429, !430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555}
!416 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!417 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!418 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!419 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!420 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!421 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!422 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!423 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!424 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!425 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!426 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!427 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!428 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!429 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!430 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!431 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!432 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!433 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!434 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!435 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!436 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!437 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!438 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!439 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!440 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!441 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!442 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!443 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!444 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!445 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!446 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!447 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!448 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!449 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!450 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!451 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!452 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!453 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!454 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!455 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!456 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!457 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!458 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!459 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!460 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!461 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!462 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!463 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!464 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!465 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!466 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!467 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!468 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!469 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!470 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!471 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!472 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!473 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!474 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!475 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!476 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!477 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!478 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!479 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!480 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!481 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!482 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!483 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!484 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!485 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!486 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!487 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!488 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!489 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!490 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!491 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!492 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!493 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!494 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!495 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!496 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!497 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!498 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!499 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!500 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!501 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!502 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!503 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!504 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!505 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!506 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!507 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!508 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!509 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!510 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!511 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!512 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!513 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!514 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!515 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!516 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!517 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!518 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!519 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!520 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!521 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!522 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!523 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!524 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!525 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!526 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!527 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!528 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!529 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!530 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!531 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!532 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!533 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!534 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!535 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!536 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!537 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!538 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!539 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!540 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!541 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!542 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!543 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!544 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!545 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!546 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!547 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!548 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!549 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!550 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!551 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!552 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!553 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!554 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!555 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!556 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "SPEC_TYPES_OFFSETS", file: !398, line: 958, baseType: !7, size: 32, elements: !557)
!557 = !{!558, !559, !560, !561}
!558 = !DIEnumerator(name: "BEGIN_DATA_BITS_OFFSET", value: 0, isUnsigned: true)
!559 = !DIEnumerator(name: "BE_IN_DATA_BITS_OFFSET", value: 6, isUnsigned: true)
!560 = !DIEnumerator(name: "BEGIN_CONTROL_BITS_OFFSET", value: 12, isUnsigned: true)
!561 = !DIEnumerator(name: "BE_IN_CONTROL_BITS_OFFSET", value: 18, isUnsigned: true)
!562 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "deps_where_def", file: !409, line: 861, baseType: !7, size: 32, elements: !563)
!563 = !{!564, !565, !566, !567}
!564 = !DIEnumerator(name: "DEPS_IN_INSN", value: 0, isUnsigned: true)
!565 = !DIEnumerator(name: "DEPS_IN_LHS", value: 1, isUnsigned: true)
!566 = !DIEnumerator(name: "DEPS_IN_RHS", value: 2, isUnsigned: true)
!567 = !DIEnumerator(name: "DEPS_IN_NOWHERE", value: 3, isUnsigned: true)
!568 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "compiler_param", file: !569, line: 82, baseType: !7, size: 32, elements: !570)
!569 = !DIFile(filename: "./params.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!570 = !{!571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639, !640, !641, !642, !643, !644, !645, !646, !647, !648, !649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690}
!571 = !DIEnumerator(name: "PARAM_STRUCT_REORG_COLD_STRUCT_RATIO", value: 0, isUnsigned: true)
!572 = !DIEnumerator(name: "PARAM_PREDICTABLE_BRANCH_OUTCOME", value: 1, isUnsigned: true)
!573 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_SINGLE", value: 2, isUnsigned: true)
!574 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_AUTO", value: 3, isUnsigned: true)
!575 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE", value: 4, isUnsigned: true)
!576 = !DIEnumerator(name: "PARAM_MAX_INLINE_INSNS_RECURSIVE_AUTO", value: 5, isUnsigned: true)
!577 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH", value: 6, isUnsigned: true)
!578 = !DIEnumerator(name: "PARAM_MAX_INLINE_RECURSIVE_DEPTH_AUTO", value: 7, isUnsigned: true)
!579 = !DIEnumerator(name: "PARAM_MIN_INLINE_RECURSIVE_PROBABILITY", value: 8, isUnsigned: true)
!580 = !DIEnumerator(name: "PARAM_EARLY_INLINER_MAX_ITERATIONS", value: 9, isUnsigned: true)
!581 = !DIEnumerator(name: "PARAM_MAX_VARIABLE_EXPANSIONS", value: 10, isUnsigned: true)
!582 = !DIEnumerator(name: "PARAM_MIN_VECT_LOOP_BOUND", value: 11, isUnsigned: true)
!583 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_INSN_SEARCH", value: 12, isUnsigned: true)
!584 = !DIEnumerator(name: "PARAM_MAX_DELAY_SLOT_LIVE_SEARCH", value: 13, isUnsigned: true)
!585 = !DIEnumerator(name: "PARAM_MAX_PENDING_LIST_LENGTH", value: 14, isUnsigned: true)
!586 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_INSNS", value: 15, isUnsigned: true)
!587 = !DIEnumerator(name: "PARAM_LARGE_FUNCTION_GROWTH", value: 16, isUnsigned: true)
!588 = !DIEnumerator(name: "PARAM_LARGE_UNIT_INSNS", value: 17, isUnsigned: true)
!589 = !DIEnumerator(name: "PARAM_INLINE_UNIT_GROWTH", value: 18, isUnsigned: true)
!590 = !DIEnumerator(name: "PARAM_IPCP_UNIT_GROWTH", value: 19, isUnsigned: true)
!591 = !DIEnumerator(name: "PARAM_EARLY_INLINING_INSNS", value: 20, isUnsigned: true)
!592 = !DIEnumerator(name: "PARAM_LARGE_STACK_FRAME", value: 21, isUnsigned: true)
!593 = !DIEnumerator(name: "PARAM_STACK_FRAME_GROWTH", value: 22, isUnsigned: true)
!594 = !DIEnumerator(name: "PARAM_MAX_GCSE_MEMORY", value: 23, isUnsigned: true)
!595 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_PARTIAL_FRACTION", value: 24, isUnsigned: true)
!596 = !DIEnumerator(name: "PARAM_GCSE_AFTER_RELOAD_CRITICAL_FRACTION", value: 25, isUnsigned: true)
!597 = !DIEnumerator(name: "PARAM_MAX_UNROLLED_INSNS", value: 26, isUnsigned: true)
!598 = !DIEnumerator(name: "PARAM_MAX_AVERAGE_UNROLLED_INSNS", value: 27, isUnsigned: true)
!599 = !DIEnumerator(name: "PARAM_MAX_UNROLL_TIMES", value: 28, isUnsigned: true)
!600 = !DIEnumerator(name: "PARAM_MAX_PEELED_INSNS", value: 29, isUnsigned: true)
!601 = !DIEnumerator(name: "PARAM_MAX_PEEL_TIMES", value: 30, isUnsigned: true)
!602 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEELED_INSNS", value: 31, isUnsigned: true)
!603 = !DIEnumerator(name: "PARAM_MAX_COMPLETELY_PEEL_TIMES", value: 32, isUnsigned: true)
!604 = !DIEnumerator(name: "PARAM_MAX_ONCE_PEELED_INSNS", value: 33, isUnsigned: true)
!605 = !DIEnumerator(name: "PARAM_MAX_UNROLL_ITERATIONS", value: 34, isUnsigned: true)
!606 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_INSNS", value: 35, isUnsigned: true)
!607 = !DIEnumerator(name: "PARAM_MAX_UNSWITCH_LEVEL", value: 36, isUnsigned: true)
!608 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_TO_TRACK", value: 37, isUnsigned: true)
!609 = !DIEnumerator(name: "PARAM_MAX_ITERATIONS_COMPUTATION_COST", value: 38, isUnsigned: true)
!610 = !DIEnumerator(name: "PARAM_SMS_MAX_II_FACTOR", value: 39, isUnsigned: true)
!611 = !DIEnumerator(name: "PARAM_SMS_DFA_HISTORY", value: 40, isUnsigned: true)
!612 = !DIEnumerator(name: "PARAM_SMS_LOOP_AVERAGE_COUNT_THRESHOLD", value: 41, isUnsigned: true)
!613 = !DIEnumerator(name: "HOT_BB_COUNT_FRACTION", value: 42, isUnsigned: true)
!614 = !DIEnumerator(name: "HOT_BB_FREQUENCY_FRACTION", value: 43, isUnsigned: true)
!615 = !DIEnumerator(name: "PARAM_ALIGN_THRESHOLD", value: 44, isUnsigned: true)
!616 = !DIEnumerator(name: "PARAM_ALIGN_LOOP_ITERATIONS", value: 45, isUnsigned: true)
!617 = !DIEnumerator(name: "PARAM_MAX_PREDICTED_ITERATIONS", value: 46, isUnsigned: true)
!618 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE_FEEDBACK", value: 47, isUnsigned: true)
!619 = !DIEnumerator(name: "TRACER_DYNAMIC_COVERAGE", value: 48, isUnsigned: true)
!620 = !DIEnumerator(name: "TRACER_MAX_CODE_GROWTH", value: 49, isUnsigned: true)
!621 = !DIEnumerator(name: "TRACER_MIN_BRANCH_RATIO", value: 50, isUnsigned: true)
!622 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY_FEEDBACK", value: 51, isUnsigned: true)
!623 = !DIEnumerator(name: "TRACER_MIN_BRANCH_PROBABILITY", value: 52, isUnsigned: true)
!624 = !DIEnumerator(name: "PARAM_MAX_CROSSJUMP_EDGES", value: 53, isUnsigned: true)
!625 = !DIEnumerator(name: "PARAM_MIN_CROSSJUMP_INSNS", value: 54, isUnsigned: true)
!626 = !DIEnumerator(name: "PARAM_MAX_GROW_COPY_BB_INSNS", value: 55, isUnsigned: true)
!627 = !DIEnumerator(name: "PARAM_MAX_GOTO_DUPLICATION_INSNS", value: 56, isUnsigned: true)
!628 = !DIEnumerator(name: "PARAM_MAX_CSE_PATH_LENGTH", value: 57, isUnsigned: true)
!629 = !DIEnumerator(name: "PARAM_MAX_CSE_INSNS", value: 58, isUnsigned: true)
!630 = !DIEnumerator(name: "PARAM_LIM_EXPENSIVE", value: 59, isUnsigned: true)
!631 = !DIEnumerator(name: "PARAM_IV_CONSIDER_ALL_CANDIDATES_BOUND", value: 60, isUnsigned: true)
!632 = !DIEnumerator(name: "PARAM_IV_MAX_CONSIDERED_USES", value: 61, isUnsigned: true)
!633 = !DIEnumerator(name: "PARAM_IV_ALWAYS_PRUNE_CAND_SET_BOUND", value: 62, isUnsigned: true)
!634 = !DIEnumerator(name: "PARAM_SCEV_MAX_EXPR_SIZE", value: 63, isUnsigned: true)
!635 = !DIEnumerator(name: "PARAM_OMEGA_MAX_VARS", value: 64, isUnsigned: true)
!636 = !DIEnumerator(name: "PARAM_OMEGA_MAX_GEQS", value: 65, isUnsigned: true)
!637 = !DIEnumerator(name: "PARAM_OMEGA_MAX_EQS", value: 66, isUnsigned: true)
!638 = !DIEnumerator(name: "PARAM_OMEGA_MAX_WILD_CARDS", value: 67, isUnsigned: true)
!639 = !DIEnumerator(name: "PARAM_OMEGA_HASH_TABLE_SIZE", value: 68, isUnsigned: true)
!640 = !DIEnumerator(name: "PARAM_OMEGA_MAX_KEYS", value: 69, isUnsigned: true)
!641 = !DIEnumerator(name: "PARAM_OMEGA_ELIMINATE_REDUNDANT_CONSTRAINTS", value: 70, isUnsigned: true)
!642 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIGNMENT_CHECKS", value: 71, isUnsigned: true)
!643 = !DIEnumerator(name: "PARAM_VECT_MAX_VERSION_FOR_ALIAS_CHECKS", value: 72, isUnsigned: true)
!644 = !DIEnumerator(name: "PARAM_MAX_CSELIB_MEMORY_LOCATIONS", value: 73, isUnsigned: true)
!645 = !DIEnumerator(name: "GGC_MIN_EXPAND", value: 74, isUnsigned: true)
!646 = !DIEnumerator(name: "GGC_MIN_HEAPSIZE", value: 75, isUnsigned: true)
!647 = !DIEnumerator(name: "PARAM_MAX_RELOAD_SEARCH_INSNS", value: 76, isUnsigned: true)
!648 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_BLOCKS", value: 77, isUnsigned: true)
!649 = !DIEnumerator(name: "PARAM_MAX_SCHED_REGION_INSNS", value: 78, isUnsigned: true)
!650 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_BLOCKS", value: 79, isUnsigned: true)
!651 = !DIEnumerator(name: "PARAM_MAX_PIPELINE_REGION_INSNS", value: 80, isUnsigned: true)
!652 = !DIEnumerator(name: "PARAM_MIN_SPEC_PROB", value: 81, isUnsigned: true)
!653 = !DIEnumerator(name: "PARAM_MAX_SCHED_EXTEND_REGIONS_ITERS", value: 82, isUnsigned: true)
!654 = !DIEnumerator(name: "PARAM_MAX_SCHED_INSN_CONFLICT_DELAY", value: 83, isUnsigned: true)
!655 = !DIEnumerator(name: "PARAM_SCHED_SPEC_PROB_CUTOFF", value: 84, isUnsigned: true)
!656 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_LOOKAHEAD", value: 85, isUnsigned: true)
!657 = !DIEnumerator(name: "PARAM_SELSCHED_MAX_SCHED_TIMES", value: 86, isUnsigned: true)
!658 = !DIEnumerator(name: "PARAM_SELSCHED_INSNS_TO_RENAME", value: 87, isUnsigned: true)
!659 = !DIEnumerator(name: "PARAM_SCHED_MEM_TRUE_DEP_COST", value: 88, isUnsigned: true)
!660 = !DIEnumerator(name: "PARAM_MAX_LAST_VALUE_RTL", value: 89, isUnsigned: true)
!661 = !DIEnumerator(name: "PARAM_INTEGER_SHARE_LIMIT", value: 90, isUnsigned: true)
!662 = !DIEnumerator(name: "PARAM_MIN_VIRTUAL_MAPPINGS", value: 91, isUnsigned: true)
!663 = !DIEnumerator(name: "PARAM_VIRTUAL_MAPPINGS_TO_SYMS_RATIO", value: 92, isUnsigned: true)
!664 = !DIEnumerator(name: "PARAM_SSP_BUFFER_SIZE", value: 93, isUnsigned: true)
!665 = !DIEnumerator(name: "PARAM_MAX_JUMP_THREAD_DUPLICATION_STMTS", value: 94, isUnsigned: true)
!666 = !DIEnumerator(name: "PARAM_MAX_FIELDS_FOR_FIELD_SENSITIVE", value: 95, isUnsigned: true)
!667 = !DIEnumerator(name: "PARAM_MAX_SCHED_READY_INSNS", value: 96, isUnsigned: true)
!668 = !DIEnumerator(name: "PARAM_PREFETCH_LATENCY", value: 97, isUnsigned: true)
!669 = !DIEnumerator(name: "PARAM_SIMULTANEOUS_PREFETCHES", value: 98, isUnsigned: true)
!670 = !DIEnumerator(name: "PARAM_L1_CACHE_SIZE", value: 99, isUnsigned: true)
!671 = !DIEnumerator(name: "PARAM_L1_CACHE_LINE_SIZE", value: 100, isUnsigned: true)
!672 = !DIEnumerator(name: "PARAM_L2_CACHE_SIZE", value: 101, isUnsigned: true)
!673 = !DIEnumerator(name: "PARAM_USE_CANONICAL_TYPES", value: 102, isUnsigned: true)
!674 = !DIEnumerator(name: "PARAM_MAX_PARTIAL_ANTIC_LENGTH", value: 103, isUnsigned: true)
!675 = !DIEnumerator(name: "PARAM_SCCVN_MAX_SCC_SIZE", value: 104, isUnsigned: true)
!676 = !DIEnumerator(name: "PARAM_IRA_MAX_LOOPS_NUM", value: 105, isUnsigned: true)
!677 = !DIEnumerator(name: "PARAM_IRA_MAX_CONFLICT_TABLE_SIZE", value: 106, isUnsigned: true)
!678 = !DIEnumerator(name: "PARAM_IRA_LOOP_RESERVED_REGS", value: 107, isUnsigned: true)
!679 = !DIEnumerator(name: "PARAM_SWITCH_CONVERSION_BRANCH_RATIO", value: 108, isUnsigned: true)
!680 = !DIEnumerator(name: "PARAM_LOOP_BLOCK_TILE_SIZE", value: 109, isUnsigned: true)
!681 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_NB_SCOP_PARAMS", value: 110, isUnsigned: true)
!682 = !DIEnumerator(name: "PARAM_GRAPHITE_MAX_BBS_PER_FUNCTION", value: 111, isUnsigned: true)
!683 = !DIEnumerator(name: "PARAM_LOOP_INVARIANT_MAX_BBS_IN_LOOP", value: 112, isUnsigned: true)
!684 = !DIEnumerator(name: "PARAM_SLP_MAX_INSNS_IN_BB", value: 113, isUnsigned: true)
!685 = !DIEnumerator(name: "PARAM_MIN_INSN_TO_PREFETCH_RATIO", value: 114, isUnsigned: true)
!686 = !DIEnumerator(name: "PARAM_PREFETCH_MIN_INSN_TO_MEM_RATIO", value: 115, isUnsigned: true)
!687 = !DIEnumerator(name: "PARAM_MAX_VARTRACK_SIZE", value: 116, isUnsigned: true)
!688 = !DIEnumerator(name: "PARAM_MIN_NONDEBUG_INSN_UID", value: 117, isUnsigned: true)
!689 = !DIEnumerator(name: "PARAM_IPA_SRA_PTR_GROWTH_FACTOR", value: 118, isUnsigned: true)
!690 = !DIEnumerator(name: "LAST_PARAM", value: 119, isUnsigned: true)
!691 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "sched_pass_id_t", file: !398, line: 37, baseType: !7, size: 32, elements: !692)
!692 = !{!693, !694, !695, !696, !697}
!693 = !DIEnumerator(name: "SCHED_PASS_UNKNOWN", value: 0, isUnsigned: true)
!694 = !DIEnumerator(name: "SCHED_RGN_PASS", value: 1, isUnsigned: true)
!695 = !DIEnumerator(name: "SCHED_EBB_PASS", value: 2, isUnsigned: true)
!696 = !DIEnumerator(name: "SCHED_SMS_PASS", value: 3, isUnsigned: true)
!697 = !DIEnumerator(name: "SCHED_SEL_PASS", value: 4, isUnsigned: true)
!698 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !142, line: 170, baseType: !7, size: 32, elements: !699)
!699 = !{!700, !701, !702, !703, !704, !705, !706, !707}
!700 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!701 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!702 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!703 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!704 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!705 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!706 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!707 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!708 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !142, line: 498, baseType: !7, size: 32, elements: !709)
!709 = !{!710, !711, !712}
!710 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!711 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!712 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!713 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "br_predictor", file: !714, line: 24, baseType: !7, size: 32, elements: !715)
!714 = !DIFile(filename: "./predict.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!715 = !{!716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744}
!716 = !DIEnumerator(name: "PRED_COMBINED", value: 0, isUnsigned: true)
!717 = !DIEnumerator(name: "PRED_DS_THEORY", value: 1, isUnsigned: true)
!718 = !DIEnumerator(name: "PRED_FIRST_MATCH", value: 2, isUnsigned: true)
!719 = !DIEnumerator(name: "PRED_NO_PREDICTION", value: 3, isUnsigned: true)
!720 = !DIEnumerator(name: "PRED_UNCONDITIONAL", value: 4, isUnsigned: true)
!721 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS", value: 5, isUnsigned: true)
!722 = !DIEnumerator(name: "PRED_BUILTIN_EXPECT", value: 6, isUnsigned: true)
!723 = !DIEnumerator(name: "PRED_LOOP_ITERATIONS_GUESSED", value: 7, isUnsigned: true)
!724 = !DIEnumerator(name: "PRED_CONTINUE", value: 8, isUnsigned: true)
!725 = !DIEnumerator(name: "PRED_NORETURN", value: 9, isUnsigned: true)
!726 = !DIEnumerator(name: "PRED_COLD_FUNCTION", value: 10, isUnsigned: true)
!727 = !DIEnumerator(name: "PRED_LOOP_BRANCH", value: 11, isUnsigned: true)
!728 = !DIEnumerator(name: "PRED_LOOP_EXIT", value: 12, isUnsigned: true)
!729 = !DIEnumerator(name: "PRED_POINTER", value: 13, isUnsigned: true)
!730 = !DIEnumerator(name: "PRED_TREE_POINTER", value: 14, isUnsigned: true)
!731 = !DIEnumerator(name: "PRED_OPCODE_POSITIVE", value: 15, isUnsigned: true)
!732 = !DIEnumerator(name: "PRED_OPCODE_NONEQUAL", value: 16, isUnsigned: true)
!733 = !DIEnumerator(name: "PRED_FPOPCODE", value: 17, isUnsigned: true)
!734 = !DIEnumerator(name: "PRED_TREE_OPCODE_POSITIVE", value: 18, isUnsigned: true)
!735 = !DIEnumerator(name: "PRED_TREE_OPCODE_NONEQUAL", value: 19, isUnsigned: true)
!736 = !DIEnumerator(name: "PRED_TREE_FPOPCODE", value: 20, isUnsigned: true)
!737 = !DIEnumerator(name: "PRED_CALL", value: 21, isUnsigned: true)
!738 = !DIEnumerator(name: "PRED_TREE_EARLY_RETURN", value: 22, isUnsigned: true)
!739 = !DIEnumerator(name: "PRED_GOTO", value: 23, isUnsigned: true)
!740 = !DIEnumerator(name: "PRED_CONST_RETURN", value: 24, isUnsigned: true)
!741 = !DIEnumerator(name: "PRED_NEGATIVE_RETURN", value: 25, isUnsigned: true)
!742 = !DIEnumerator(name: "PRED_NULL_RETURN", value: 26, isUnsigned: true)
!743 = !DIEnumerator(name: "PRED_MUDFLAP", value: 27, isUnsigned: true)
!744 = !DIEnumerator(name: "END_PREDICTORS", value: 28, isUnsigned: true)
!745 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !414, line: 956, baseType: !7, size: 32, elements: !746)
!746 = !{!747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760}
!747 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!748 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!749 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!750 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!751 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!752 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!753 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!754 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!755 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!756 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!757 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!758 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!759 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!760 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!761 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !414, line: 836, baseType: !7, size: 32, elements: !762)
!762 = !{!763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794}
!763 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!764 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!765 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!766 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!767 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!768 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!769 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!770 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!771 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!772 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!773 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!774 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!775 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!776 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!777 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!778 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!779 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!780 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!781 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!782 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!783 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!784 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!785 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!786 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!787 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!788 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!789 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!790 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!791 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!792 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!793 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!794 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!795 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_flags", file: !796, line: 84, baseType: !7, size: 32, elements: !797)
!796 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!797 = !{!798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808, !809, !810, !811, !812, !813}
!798 = !DIEnumerator(name: "DF_REF_CONDITIONAL", value: 1, isUnsigned: true)
!799 = !DIEnumerator(name: "DF_REF_AT_TOP", value: 2, isUnsigned: true)
!800 = !DIEnumerator(name: "DF_REF_IN_NOTE", value: 4, isUnsigned: true)
!801 = !DIEnumerator(name: "DF_HARD_REG_LIVE", value: 8, isUnsigned: true)
!802 = !DIEnumerator(name: "DF_REF_PARTIAL", value: 16, isUnsigned: true)
!803 = !DIEnumerator(name: "DF_REF_READ_WRITE", value: 32, isUnsigned: true)
!804 = !DIEnumerator(name: "DF_REF_MAY_CLOBBER", value: 64, isUnsigned: true)
!805 = !DIEnumerator(name: "DF_REF_MUST_CLOBBER", value: 128, isUnsigned: true)
!806 = !DIEnumerator(name: "DF_REF_SIGN_EXTRACT", value: 256, isUnsigned: true)
!807 = !DIEnumerator(name: "DF_REF_ZERO_EXTRACT", value: 512, isUnsigned: true)
!808 = !DIEnumerator(name: "DF_REF_STRICT_LOW_PART", value: 1024, isUnsigned: true)
!809 = !DIEnumerator(name: "DF_REF_SUBREG", value: 2048, isUnsigned: true)
!810 = !DIEnumerator(name: "DF_REF_MW_HARDREG", value: 4096, isUnsigned: true)
!811 = !DIEnumerator(name: "DF_REF_CALL_STACK_USAGE", value: 8192, isUnsigned: true)
!812 = !DIEnumerator(name: "DF_REF_REG_MARKER", value: 16384, isUnsigned: true)
!813 = !DIEnumerator(name: "DF_REF_PRE_POST_MODIFY", value: 32768, isUnsigned: true)
!814 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_ref_class", file: !796, line: 76, baseType: !7, size: 32, elements: !815)
!815 = !{!816, !817, !818, !819}
!816 = !DIEnumerator(name: "DF_REF_BASE", value: 0, isUnsigned: true)
!817 = !DIEnumerator(name: "DF_REF_ARTIFICIAL", value: 1, isUnsigned: true)
!818 = !DIEnumerator(name: "DF_REF_REGULAR", value: 2, isUnsigned: true)
!819 = !DIEnumerator(name: "DF_REF_EXTRACT", value: 3, isUnsigned: true)
!820 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !414, line: 60, baseType: !7, size: 32, elements: !821)
!821 = !{!822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834}
!822 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!823 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!824 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!825 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!826 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!827 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!828 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!829 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!830 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!831 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!832 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!833 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!834 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!835 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !155, line: 295, baseType: !7, size: 32, elements: !836)
!836 = !{!837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848}
!837 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!838 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!839 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!840 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!841 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!842 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!843 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!844 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!845 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!846 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!847 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!848 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!849 = !{!850, !2051, !2052, !962, !2054, !2055, !2056, !413, !874, !5, !2057, !1329, !7, !2086, !2091, !1408, !2234, !2113, !2036, !2180, !852, !2239, !2241, !2251, !2252, !2269, !2300, !2307, !2064, !2070, !2325, !1391, !2152, !924, !1460, !2326, !2328}
!850 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !851, line: 50, baseType: !852)
!851 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!852 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !853, size: 64)
!853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !414, line: 240, size: 384, elements: !854)
!854 = !{!855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865}
!855 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !853, file: !414, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !853, file: !414, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !853, file: !414, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !853, file: !414, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !853, file: !414, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !853, file: !414, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !853, file: !414, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !853, file: !414, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !853, file: !414, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !853, file: !414, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !853, file: !414, line: 321, baseType: !866, size: 320, offset: 64)
!866 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !414, line: 315, size: 320, elements: !867)
!867 = !{!868, !2018, !2020, !2049, !2050}
!868 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !866, file: !414, line: 316, baseType: !869, size: 64)
!869 = !DICompositeType(tag: DW_TAG_array_type, baseType: !870, size: 64, elements: !889)
!870 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !414, line: 183, baseType: !871)
!871 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !414, line: 166, size: 64, elements: !872)
!872 = !{!873, !875, !876, !880, !881, !891, !892, !904, !907, !971, !1996, !1997, !2008, !2015}
!873 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !871, file: !414, line: 168, baseType: !874, size: 32)
!874 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !871, file: !414, line: 169, baseType: !7, size: 32)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !871, file: !414, line: 170, baseType: !877, size: 64)
!877 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !878, size: 64)
!878 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !879)
!879 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!880 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !871, file: !414, line: 171, baseType: !850, size: 64)
!881 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !871, file: !414, line: 172, baseType: !882, size: 64)
!882 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !851, line: 53, baseType: !883)
!883 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !884, size: 64)
!884 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !414, line: 359, size: 128, elements: !885)
!885 = !{!886, !887}
!886 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !884, file: !414, line: 360, baseType: !874, size: 32)
!887 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !884, file: !414, line: 361, baseType: !888, size: 64, offset: 64)
!888 = !DICompositeType(tag: DW_TAG_array_type, baseType: !850, size: 64, elements: !889)
!889 = !{!890}
!890 = !DISubrange(count: 1)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !871, file: !414, line: 173, baseType: !5, size: 32)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !871, file: !414, line: 174, baseType: !893, size: 32)
!893 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !414, line: 133, baseType: !894)
!894 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !414, line: 115, size: 32, elements: !895)
!895 = !{!896, !897, !898, !899, !900, !901, !902, !903}
!896 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !894, file: !414, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !894, file: !414, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!898 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !894, file: !414, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!899 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !894, file: !414, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!900 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !894, file: !414, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!901 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !894, file: !414, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!902 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !894, file: !414, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!903 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !894, file: !414, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!904 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !871, file: !414, line: 175, baseType: !905, size: 64)
!905 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !906, size: 64)
!906 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !414, line: 175, flags: DIFlagFwdDecl)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !871, file: !414, line: 176, baseType: !908, size: 64)
!908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !909, size: 64)
!909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !910, line: 75, size: 256, elements: !911)
!910 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!911 = !{!912, !927, !928, !929}
!912 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !909, file: !910, line: 76, baseType: !913, size: 64)
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !914, size: 64)
!914 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !910, line: 68, baseType: !915)
!915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !910, line: 63, size: 320, elements: !916)
!916 = !{!917, !919, !920, !921}
!917 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !915, file: !910, line: 64, baseType: !918, size: 64)
!918 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !915, size: 64)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !915, file: !910, line: 65, baseType: !918, size: 64, offset: 64)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !915, file: !910, line: 66, baseType: !7, size: 32, offset: 128)
!921 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !915, file: !910, line: 67, baseType: !922, size: 128, offset: 192)
!922 = !DICompositeType(tag: DW_TAG_array_type, baseType: !923, size: 128, elements: !925)
!923 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !910, line: 29, baseType: !924)
!924 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!925 = !{!926}
!926 = !DISubrange(count: 2)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !909, file: !910, line: 77, baseType: !913, size: 64, offset: 64)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !909, file: !910, line: 78, baseType: !7, size: 32, offset: 128)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !909, file: !910, line: 79, baseType: !930, size: 64, offset: 192)
!930 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !931, size: 64)
!931 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !910, line: 49, baseType: !932)
!932 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !910, line: 45, size: 832, elements: !933)
!933 = !{!934, !935, !936}
!934 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !932, file: !910, line: 46, baseType: !918, size: 64)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !932, file: !910, line: 47, baseType: !908, size: 64, offset: 64)
!936 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !932, file: !910, line: 48, baseType: !937, size: 704, offset: 128)
!937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !938, line: 164, size: 704, elements: !939)
!938 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!939 = !{!940, !942, !953, !954, !955, !956, !957, !958, !963, !967, !968, !969, !970}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !937, file: !938, line: 166, baseType: !941, size: 64)
!941 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!942 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !937, file: !938, line: 167, baseType: !943, size: 64, offset: 64)
!943 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !944, size: 64)
!944 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !938, line: 157, size: 192, elements: !945)
!945 = !{!946, !948, !949}
!946 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !944, file: !938, line: 159, baseType: !947, size: 64)
!947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !879, size: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !944, file: !938, line: 160, baseType: !943, size: 64, offset: 64)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !944, file: !938, line: 161, baseType: !950, size: 32, offset: 128)
!950 = !DICompositeType(tag: DW_TAG_array_type, baseType: !879, size: 32, elements: !951)
!951 = !{!952}
!952 = !DISubrange(count: 4)
!953 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !937, file: !938, line: 168, baseType: !947, size: 64, offset: 128)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !937, file: !938, line: 169, baseType: !947, size: 64, offset: 192)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !937, file: !938, line: 170, baseType: !947, size: 64, offset: 256)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !937, file: !938, line: 171, baseType: !941, size: 64, offset: 320)
!957 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !937, file: !938, line: 172, baseType: !874, size: 32, offset: 384)
!958 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !937, file: !938, line: 176, baseType: !959, size: 64, offset: 448)
!959 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !960, size: 64)
!960 = !DISubroutineType(types: !961)
!961 = !{!943, !962, !941}
!962 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !937, file: !938, line: 177, baseType: !964, size: 64, offset: 512)
!964 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !965, size: 64)
!965 = !DISubroutineType(types: !966)
!966 = !{null, !962, !943}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !937, file: !938, line: 178, baseType: !962, size: 64, offset: 576)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !937, file: !938, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!969 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !937, file: !938, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!970 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !937, file: !938, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!971 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !871, file: !414, line: 177, baseType: !972, size: 64)
!972 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !851, line: 56, baseType: !973)
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !974, size: 64)
!974 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !171, line: 3371, size: 1792, elements: !975)
!975 = !{!976, !1009, !1015, !1026, !1045, !1056, !1061, !1068, !1074, !1088, !1100, !1138, !1143, !1171, !1179, !1180, !1185, !1194, !1200, !1205, !1209, !1213, !1635, !1684, !1690, !1696, !1703, !1726, !1740, !1757, !1769, !1791, !1806, !1978}
!976 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !974, file: !171, line: 3372, baseType: !977, size: 64)
!977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !171, line: 360, size: 64, elements: !978)
!978 = !{!979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008}
!979 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !977, file: !171, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !977, file: !171, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !977, file: !171, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !977, file: !171, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !977, file: !171, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !977, file: !171, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!985 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !977, file: !171, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!986 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !977, file: !171, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!987 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !977, file: !171, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!988 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !977, file: !171, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !977, file: !171, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!990 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !977, file: !171, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!991 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !977, file: !171, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!992 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !977, file: !171, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!993 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !977, file: !171, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !977, file: !171, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !977, file: !171, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !977, file: !171, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !977, file: !171, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !977, file: !171, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !977, file: !171, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!1000 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !977, file: !171, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!1001 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !977, file: !171, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!1002 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !977, file: !171, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!1003 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !977, file: !171, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !977, file: !171, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !977, file: !171, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !977, file: !171, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !977, file: !171, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!1008 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !977, file: !171, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!1009 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !974, file: !171, line: 3373, baseType: !1010, size: 192)
!1010 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !171, line: 402, size: 192, elements: !1011)
!1011 = !{!1012, !1013, !1014}
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1010, file: !171, line: 403, baseType: !977, size: 64)
!1013 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !1010, file: !171, line: 404, baseType: !972, size: 64, offset: 64)
!1014 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1010, file: !171, line: 405, baseType: !972, size: 64, offset: 128)
!1015 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !974, file: !171, line: 3374, baseType: !1016, size: 320)
!1016 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !171, line: 1384, size: 320, elements: !1017)
!1017 = !{!1018, !1019}
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1016, file: !171, line: 1385, baseType: !1010, size: 192)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !1016, file: !171, line: 1386, baseType: !1020, size: 128, offset: 192)
!1020 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !1021, line: 58, baseType: !1022)
!1021 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1022 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !1021, line: 54, size: 128, elements: !1023)
!1023 = !{!1024, !1025}
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !1022, file: !1021, line: 56, baseType: !924, size: 64)
!1025 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !1022, file: !1021, line: 57, baseType: !941, size: 64, offset: 64)
!1026 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !974, file: !171, line: 3375, baseType: !1027, size: 256)
!1027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !171, line: 1397, size: 256, elements: !1028)
!1028 = !{!1029, !1030}
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1027, file: !171, line: 1398, baseType: !1010, size: 192)
!1030 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !1027, file: !171, line: 1399, baseType: !1031, size: 64, offset: 192)
!1031 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1032, size: 64)
!1032 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !1033, line: 52, size: 256, elements: !1034)
!1033 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1034 = !{!1035, !1036, !1037, !1038, !1039, !1040, !1041}
!1035 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !1032, file: !1033, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!1036 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !1032, file: !1033, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1037 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !1032, file: !1033, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1038 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !1032, file: !1033, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1032, file: !1033, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1040 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !1032, file: !1033, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!1041 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !1032, file: !1033, line: 62, baseType: !1042, size: 192, offset: 64)
!1042 = !DICompositeType(tag: DW_TAG_array_type, baseType: !924, size: 192, elements: !1043)
!1043 = !{!1044}
!1044 = !DISubrange(count: 3)
!1045 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !974, file: !171, line: 3376, baseType: !1046, size: 256)
!1046 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !171, line: 1408, size: 256, elements: !1047)
!1047 = !{!1048, !1049}
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1046, file: !171, line: 1409, baseType: !1010, size: 192)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !1046, file: !171, line: 1410, baseType: !1050, size: 64, offset: 192)
!1050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1051, size: 64)
!1051 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !1052, line: 27, size: 192, elements: !1053)
!1052 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1053 = !{!1054, !1055}
!1054 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1051, file: !1052, line: 29, baseType: !1020, size: 128)
!1055 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1051, file: !1052, line: 30, baseType: !5, size: 32, offset: 128)
!1056 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !974, file: !171, line: 3377, baseType: !1057, size: 256)
!1057 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !171, line: 1437, size: 256, elements: !1058)
!1058 = !{!1059, !1060}
!1059 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1057, file: !171, line: 1438, baseType: !1010, size: 192)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !1057, file: !171, line: 1439, baseType: !972, size: 64, offset: 192)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !974, file: !171, line: 3378, baseType: !1062, size: 256)
!1062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !171, line: 1418, size: 256, elements: !1063)
!1063 = !{!1064, !1065, !1066}
!1064 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1062, file: !171, line: 1419, baseType: !1010, size: 192)
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1062, file: !171, line: 1420, baseType: !874, size: 32, offset: 192)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1062, file: !171, line: 1421, baseType: !1067, size: 8, offset: 224)
!1067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !879, size: 8, elements: !889)
!1068 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !974, file: !171, line: 3379, baseType: !1069, size: 320)
!1069 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !171, line: 1428, size: 320, elements: !1070)
!1070 = !{!1071, !1072, !1073}
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1069, file: !171, line: 1429, baseType: !1010, size: 192)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !1069, file: !171, line: 1430, baseType: !972, size: 64, offset: 192)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !1069, file: !171, line: 1431, baseType: !972, size: 64, offset: 256)
!1074 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !974, file: !171, line: 3380, baseType: !1075, size: 320)
!1075 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !171, line: 1460, size: 320, elements: !1076)
!1076 = !{!1077, !1078}
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1075, file: !171, line: 1461, baseType: !1010, size: 192)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !1075, file: !171, line: 1462, baseType: !1079, size: 128, offset: 192)
!1079 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !1080, line: 31, size: 128, elements: !1081)
!1080 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1081 = !{!1082, !1086, !1087}
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !1079, file: !1080, line: 32, baseType: !1083, size: 64)
!1083 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1084, size: 64)
!1084 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1085)
!1085 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !1079, file: !1080, line: 33, baseType: !7, size: 32, offset: 64)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !1079, file: !1080, line: 34, baseType: !7, size: 32, offset: 96)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !974, file: !171, line: 3381, baseType: !1089, size: 384)
!1089 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !171, line: 2507, size: 384, elements: !1090)
!1090 = !{!1091, !1092, !1097, !1098, !1099}
!1091 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1089, file: !171, line: 2508, baseType: !1010, size: 192)
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1089, file: !171, line: 2509, baseType: !1093, size: 32, offset: 192)
!1093 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !1094, line: 58, baseType: !1095)
!1094 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1095 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !1096, line: 44, baseType: !7)
!1096 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1089, file: !171, line: 2510, baseType: !7, size: 32, offset: 224)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1089, file: !171, line: 2511, baseType: !972, size: 64, offset: 256)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1089, file: !171, line: 2512, baseType: !972, size: 64, offset: 320)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !974, file: !171, line: 3382, baseType: !1101, size: 896)
!1101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !171, line: 2652, size: 896, elements: !1102)
!1102 = !{!1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135}
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1101, file: !171, line: 2653, baseType: !1089, size: 384)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1101, file: !171, line: 2654, baseType: !972, size: 64, offset: 384)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1101, file: !171, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !1101, file: !171, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !1101, file: !171, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !1101, file: !171, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1101, file: !171, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !1101, file: !171, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !1101, file: !171, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !1101, file: !171, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1101, file: !171, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1101, file: !171, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1101, file: !171, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1101, file: !171, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1101, file: !171, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1101, file: !171, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1101, file: !171, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !1101, file: !171, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !1101, file: !171, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !1101, file: !171, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !1101, file: !171, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !1101, file: !171, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !1101, file: !171, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !1101, file: !171, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !1101, file: !171, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !1101, file: !171, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !1101, file: !171, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1101, file: !171, line: 2703, baseType: !7, size: 32, offset: 512)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1101, file: !171, line: 2705, baseType: !972, size: 64, offset: 576)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1101, file: !171, line: 2706, baseType: !972, size: 64, offset: 640)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1101, file: !171, line: 2707, baseType: !972, size: 64, offset: 704)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1101, file: !171, line: 2708, baseType: !972, size: 64, offset: 768)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1101, file: !171, line: 2711, baseType: !1136, size: 64, offset: 832)
!1136 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1137, size: 64)
!1137 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !171, line: 2711, flags: DIFlagFwdDecl)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !974, file: !171, line: 3383, baseType: !1139, size: 960)
!1139 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !171, line: 2756, size: 960, elements: !1140)
!1140 = !{!1141, !1142}
!1141 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1139, file: !171, line: 2757, baseType: !1101, size: 896)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1139, file: !171, line: 2758, baseType: !850, size: 64, offset: 896)
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !974, file: !171, line: 3384, baseType: !1144, size: 1472)
!1144 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !171, line: 3114, size: 1472, elements: !1145)
!1145 = !{!1146, !1167, !1168, !1169, !1170}
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1144, file: !171, line: 3115, baseType: !1147, size: 1216)
!1147 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !171, line: 2984, size: 1216, elements: !1148)
!1148 = !{!1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166}
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1147, file: !171, line: 2985, baseType: !1139, size: 960)
!1150 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1147, file: !171, line: 2986, baseType: !972, size: 64, offset: 960)
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1147, file: !171, line: 2987, baseType: !972, size: 64, offset: 1024)
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1147, file: !171, line: 2988, baseType: !972, size: 64, offset: 1088)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1147, file: !171, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1147, file: !171, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1147, file: !171, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1147, file: !171, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1147, file: !171, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1147, file: !171, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1147, file: !171, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1147, file: !171, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1147, file: !171, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1147, file: !171, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1147, file: !171, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1147, file: !171, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1147, file: !171, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1147, file: !171, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1144, file: !171, line: 3117, baseType: !972, size: 64, offset: 1216)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1144, file: !171, line: 3119, baseType: !972, size: 64, offset: 1280)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1144, file: !171, line: 3121, baseType: !972, size: 64, offset: 1344)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1144, file: !171, line: 3123, baseType: !972, size: 64, offset: 1408)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !974, file: !171, line: 3385, baseType: !1172, size: 1088)
!1172 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !171, line: 2874, size: 1088, elements: !1173)
!1173 = !{!1174, !1175, !1176}
!1174 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1172, file: !171, line: 2875, baseType: !1139, size: 960)
!1175 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1172, file: !171, line: 2876, baseType: !850, size: 64, offset: 960)
!1176 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1172, file: !171, line: 2877, baseType: !1177, size: 64, offset: 1024)
!1177 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1178, size: 64)
!1178 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !171, line: 2856, flags: DIFlagFwdDecl)
!1179 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !974, file: !171, line: 3386, baseType: !1147, size: 1216)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !974, file: !171, line: 3387, baseType: !1181, size: 1280)
!1181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !171, line: 3093, size: 1280, elements: !1182)
!1182 = !{!1183, !1184}
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1181, file: !171, line: 3094, baseType: !1147, size: 1216)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1181, file: !171, line: 3095, baseType: !1177, size: 64, offset: 1216)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !974, file: !171, line: 3388, baseType: !1186, size: 1216)
!1186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !171, line: 2824, size: 1216, elements: !1187)
!1187 = !{!1188, !1189, !1190, !1191, !1192, !1193}
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1186, file: !171, line: 2825, baseType: !1101, size: 896)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1186, file: !171, line: 2827, baseType: !972, size: 64, offset: 896)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1186, file: !171, line: 2828, baseType: !972, size: 64, offset: 960)
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1186, file: !171, line: 2829, baseType: !972, size: 64, offset: 1024)
!1192 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1186, file: !171, line: 2830, baseType: !972, size: 64, offset: 1088)
!1193 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1186, file: !171, line: 2831, baseType: !972, size: 64, offset: 1152)
!1194 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !974, file: !171, line: 3389, baseType: !1195, size: 1024)
!1195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !171, line: 2850, size: 1024, elements: !1196)
!1196 = !{!1197, !1198, !1199}
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1195, file: !171, line: 2851, baseType: !1139, size: 960)
!1198 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1195, file: !171, line: 2852, baseType: !874, size: 32, offset: 960)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1195, file: !171, line: 2853, baseType: !874, size: 32, offset: 992)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !974, file: !171, line: 3390, baseType: !1201, size: 1024)
!1201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !171, line: 2857, size: 1024, elements: !1202)
!1202 = !{!1203, !1204}
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1201, file: !171, line: 2858, baseType: !1139, size: 960)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1201, file: !171, line: 2859, baseType: !1177, size: 64, offset: 960)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !974, file: !171, line: 3391, baseType: !1206, size: 960)
!1206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !171, line: 2862, size: 960, elements: !1207)
!1207 = !{!1208}
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1206, file: !171, line: 2863, baseType: !1139, size: 960)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !974, file: !171, line: 3392, baseType: !1210, size: 1472)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !171, line: 3304, size: 1472, elements: !1211)
!1211 = !{!1212}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1210, file: !171, line: 3305, baseType: !1144, size: 1472)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !974, file: !171, line: 3393, baseType: !1214, size: 1792)
!1214 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !171, line: 3248, size: 1792, elements: !1215)
!1215 = !{!1216, !1217, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634}
!1216 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1214, file: !171, line: 3249, baseType: !1144, size: 1472)
!1217 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1214, file: !171, line: 3251, baseType: !1218, size: 64, offset: 1472)
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1220, line: 463, size: 1152, elements: !1221)
!1220 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1221 = !{!1222, !1386, !1546, !1547, !1550, !1558, !1559, !1560, !1561, !1562, !1563, !1587, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1219, file: !1220, line: 464, baseType: !1223, size: 64)
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !135, line: 194, size: 384, elements: !1225)
!1225 = !{!1226, !1275, !1288, !1302, !1354, !1367}
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !1224, file: !135, line: 197, baseType: !1227, size: 64)
!1227 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !135, line: 182, baseType: !1228)
!1228 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1229, size: 64)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !135, line: 116, size: 704, elements: !1230)
!1230 = !{!1231, !1232, !1233, !1234, !1235, !1236, !1263, !1272, !1273, !1274}
!1231 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !1229, file: !135, line: 119, baseType: !1228, size: 64)
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1229, file: !135, line: 122, baseType: !1228, size: 64, offset: 64)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !1229, file: !135, line: 123, baseType: !1228, size: 64, offset: 128)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1229, file: !135, line: 126, baseType: !874, size: 32, offset: 192)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !1229, file: !135, line: 129, baseType: !134, size: 32, offset: 224)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !1229, file: !135, line: 165, baseType: !1237, size: 192, offset: 256)
!1237 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !135, line: 132, size: 192, elements: !1238)
!1238 = !{!1239, !1252, !1258}
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !1237, file: !135, line: 137, baseType: !1240, size: 128)
!1240 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !135, line: 133, size: 128, elements: !1241)
!1241 = !{!1242, !1251}
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !1240, file: !135, line: 135, baseType: !1243, size: 64)
!1243 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1244, size: 64)
!1244 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !135, line: 93, size: 320, elements: !1245)
!1245 = !{!1246, !1247, !1248, !1249, !1250}
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !1244, file: !135, line: 96, baseType: !1243, size: 64)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !1244, file: !135, line: 97, baseType: !1243, size: 64, offset: 64)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1244, file: !135, line: 101, baseType: !972, size: 64, offset: 128)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !1244, file: !135, line: 106, baseType: !972, size: 64, offset: 192)
!1250 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1244, file: !135, line: 111, baseType: !972, size: 64, offset: 256)
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !1240, file: !135, line: 136, baseType: !1243, size: 64, offset: 64)
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !1237, file: !135, line: 151, baseType: !1253, size: 192)
!1253 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !135, line: 139, size: 192, elements: !1254)
!1254 = !{!1255, !1256, !1257}
!1255 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !1253, file: !135, line: 141, baseType: !972, size: 64)
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !1253, file: !135, line: 145, baseType: !972, size: 64, offset: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !1253, file: !135, line: 150, baseType: !874, size: 32, offset: 128)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !1237, file: !135, line: 164, baseType: !1259, size: 128)
!1259 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !135, line: 153, size: 128, elements: !1260)
!1260 = !{!1261, !1262}
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !1259, file: !135, line: 161, baseType: !972, size: 64)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !1259, file: !135, line: 163, baseType: !1093, size: 32, offset: 64)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !1229, file: !135, line: 168, baseType: !1264, size: 64, offset: 448)
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !135, line: 67, size: 320, elements: !1266)
!1266 = !{!1267, !1268, !1269, !1270, !1271}
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !1265, file: !135, line: 70, baseType: !1264, size: 64)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1265, file: !135, line: 73, baseType: !1228, size: 64, offset: 64)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !1265, file: !135, line: 78, baseType: !972, size: 64, offset: 128)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !1265, file: !135, line: 85, baseType: !850, size: 64, offset: 192)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1265, file: !135, line: 88, baseType: !874, size: 32, offset: 256)
!1272 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !1229, file: !135, line: 173, baseType: !850, size: 64, offset: 512)
!1273 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !1229, file: !135, line: 173, baseType: !850, size: 64, offset: 576)
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !1229, file: !135, line: 177, baseType: !1085, size: 8, offset: 640)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !1224, file: !135, line: 200, baseType: !1276, size: 64, offset: 64)
!1276 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1277, size: 64)
!1277 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !135, line: 185, baseType: !1278)
!1278 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !135, line: 185, size: 128, elements: !1279)
!1279 = !{!1280}
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1278, file: !135, line: 185, baseType: !1281, size: 128)
!1281 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !135, line: 184, baseType: !1282)
!1282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !135, line: 184, size: 128, elements: !1283)
!1283 = !{!1284, !1285, !1286}
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1282, file: !135, line: 184, baseType: !7, size: 32)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1282, file: !135, line: 184, baseType: !7, size: 32, offset: 32)
!1286 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1282, file: !135, line: 184, baseType: !1287, size: 64, offset: 64)
!1287 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1227, size: 64, elements: !889)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !1224, file: !135, line: 203, baseType: !1289, size: 64, offset: 128)
!1289 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1290, size: 64)
!1290 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, baseType: !1291)
!1291 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !135, line: 189, size: 128, elements: !1292)
!1292 = !{!1293}
!1293 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1291, file: !135, line: 189, baseType: !1294, size: 128)
!1294 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !135, line: 188, baseType: !1295)
!1295 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !135, line: 188, size: 128, elements: !1296)
!1296 = !{!1297, !1298, !1299}
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1295, file: !135, line: 188, baseType: !7, size: 32)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1295, file: !135, line: 188, baseType: !7, size: 32, offset: 32)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1295, file: !135, line: 188, baseType: !1300, size: 64, offset: 64)
!1300 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1301, size: 64, elements: !889)
!1301 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !135, line: 180, baseType: !1264)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !1224, file: !135, line: 207, baseType: !1303, size: 64, offset: 192)
!1303 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1304, line: 144, baseType: !1305)
!1304 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1305 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1306, size: 64)
!1306 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1304, line: 100, size: 896, elements: !1307)
!1307 = !{!1308, !1316, !1321, !1326, !1328, !1331, !1332, !1333, !1334, !1335, !1340, !1342, !1343, !1348, !1353}
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1306, file: !1304, line: 102, baseType: !1309, size: 64)
!1309 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1304, line: 52, baseType: !1310)
!1310 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1311, size: 64)
!1311 = !DISubroutineType(types: !1312)
!1312 = !{!1313, !1314}
!1313 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1304, line: 47, baseType: !7)
!1314 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1315, size: 64)
!1315 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1306, file: !1304, line: 105, baseType: !1317, size: 64, offset: 64)
!1317 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1304, line: 59, baseType: !1318)
!1318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!1319 = !DISubroutineType(types: !1320)
!1320 = !{!874, !1314, !1314}
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1306, file: !1304, line: 108, baseType: !1322, size: 64, offset: 128)
!1322 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1304, line: 63, baseType: !1323)
!1323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1324, size: 64)
!1324 = !DISubroutineType(types: !1325)
!1325 = !{null, !962}
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1306, file: !1304, line: 111, baseType: !1327, size: 64, offset: 192)
!1327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !962, size: 64)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1306, file: !1304, line: 114, baseType: !1329, size: 64, offset: 256)
!1329 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1330, line: 46, baseType: !924)
!1330 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1306, file: !1304, line: 117, baseType: !1329, size: 64, offset: 320)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1306, file: !1304, line: 120, baseType: !1329, size: 64, offset: 384)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1306, file: !1304, line: 124, baseType: !7, size: 32, offset: 448)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1306, file: !1304, line: 128, baseType: !7, size: 32, offset: 480)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1306, file: !1304, line: 131, baseType: !1336, size: 64, offset: 512)
!1336 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1304, line: 75, baseType: !1337)
!1337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1338, size: 64)
!1338 = !DISubroutineType(types: !1339)
!1339 = !{!962, !1329, !1329}
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1306, file: !1304, line: 132, baseType: !1341, size: 64, offset: 576)
!1341 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1304, line: 78, baseType: !1323)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1306, file: !1304, line: 135, baseType: !962, size: 64, offset: 640)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1306, file: !1304, line: 136, baseType: !1344, size: 64, offset: 704)
!1344 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1304, line: 82, baseType: !1345)
!1345 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1346, size: 64)
!1346 = !DISubroutineType(types: !1347)
!1347 = !{!962, !962, !1329, !1329}
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1306, file: !1304, line: 137, baseType: !1349, size: 64, offset: 768)
!1349 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1304, line: 83, baseType: !1350)
!1350 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1351, size: 64)
!1351 = !DISubroutineType(types: !1352)
!1352 = !{null, !962, !962}
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1306, file: !1304, line: 141, baseType: !7, size: 32, offset: 832)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !1224, file: !135, line: 211, baseType: !1355, size: 64, offset: 256)
!1355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1356, size: 64)
!1356 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !171, line: 183, baseType: !1357)
!1357 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !171, line: 183, size: 128, elements: !1358)
!1358 = !{!1359}
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1357, file: !171, line: 183, baseType: !1360, size: 128)
!1360 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !171, line: 182, baseType: !1361)
!1361 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !171, line: 182, size: 128, elements: !1362)
!1362 = !{!1363, !1364, !1365}
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1361, file: !171, line: 182, baseType: !7, size: 32)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1361, file: !171, line: 182, baseType: !7, size: 32, offset: 32)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1361, file: !171, line: 182, baseType: !1366, size: 64, offset: 64)
!1366 = !DICompositeType(tag: DW_TAG_array_type, baseType: !972, size: 64, elements: !889)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !1224, file: !135, line: 220, baseType: !1368, size: 64, offset: 320)
!1368 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !135, line: 217, size: 64, elements: !1369)
!1369 = !{!1370, !1371}
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !1368, file: !135, line: 218, baseType: !1355, size: 64)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !1368, file: !135, line: 219, baseType: !1372, size: 64)
!1372 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1373, size: 64)
!1373 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !1374, line: 29, baseType: !1375)
!1374 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1375 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !1374, line: 29, size: 96, elements: !1376)
!1376 = !{!1377}
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1375, file: !1374, line: 29, baseType: !1378, size: 96)
!1378 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !1374, line: 27, baseType: !1379)
!1379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !1374, line: 27, size: 96, elements: !1380)
!1380 = !{!1381, !1382, !1383}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1379, file: !1374, line: 27, baseType: !7, size: 32)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1379, file: !1374, line: 27, baseType: !7, size: 32, offset: 32)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1379, file: !1374, line: 27, baseType: !1384, size: 8, offset: 64)
!1384 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1385, size: 8, elements: !889)
!1385 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !1374, line: 26, baseType: !1085)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1219, file: !1220, line: 467, baseType: !1387, size: 64, offset: 64)
!1387 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1388, size: 64)
!1388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !155, line: 374, size: 640, elements: !1389)
!1389 = !{!1390, !1521, !1522, !1535, !1536, !1537, !1538, !1539, !1540, !1542, !1544, !1545}
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1388, file: !155, line: 377, baseType: !1391, size: 64)
!1391 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !851, line: 111, baseType: !1392)
!1392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1393, size: 64)
!1393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !155, line: 217, size: 832, elements: !1394)
!1394 = !{!1395, !1430, !1431, !1432, !1491, !1495, !1496, !1497, !1515, !1516, !1517, !1518, !1519, !1520}
!1395 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !1393, file: !155, line: 219, baseType: !1396, size: 64)
!1396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1397, size: 64)
!1397 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !155, line: 151, baseType: !1398)
!1398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !155, line: 151, size: 128, elements: !1399)
!1399 = !{!1400}
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1398, file: !155, line: 151, baseType: !1401, size: 128)
!1401 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !155, line: 150, baseType: !1402)
!1402 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !155, line: 150, size: 128, elements: !1403)
!1403 = !{!1404, !1405, !1406}
!1404 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1402, file: !155, line: 150, baseType: !7, size: 32)
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1402, file: !155, line: 150, baseType: !7, size: 32, offset: 32)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1402, file: !155, line: 150, baseType: !1407, size: 64, offset: 64)
!1407 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1408, size: 64, elements: !889)
!1408 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !851, line: 108, baseType: !1409)
!1409 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1410, size: 64)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !155, line: 122, size: 512, elements: !1411)
!1411 = !{!1412, !1413, !1414, !1422, !1423, !1424, !1425, !1426, !1427, !1428}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !1410, file: !155, line: 124, baseType: !1392, size: 64)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !1410, file: !155, line: 125, baseType: !1392, size: 64, offset: 64)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !1410, file: !155, line: 131, baseType: !1415, size: 64, offset: 128)
!1415 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !155, line: 128, size: 64, elements: !1416)
!1416 = !{!1417, !1421}
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !1415, file: !155, line: 129, baseType: !1418, size: 64)
!1418 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !851, line: 66, baseType: !1419)
!1419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1420, size: 64)
!1420 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !851, line: 65, flags: DIFlagFwdDecl)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !1415, file: !155, line: 130, baseType: !850, size: 64)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1410, file: !155, line: 134, baseType: !962, size: 64, offset: 192)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !1410, file: !155, line: 137, baseType: !972, size: 64, offset: 256)
!1424 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !1410, file: !155, line: 138, baseType: !1093, size: 32, offset: 320)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !1410, file: !155, line: 142, baseType: !7, size: 32, offset: 352)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1410, file: !155, line: 144, baseType: !874, size: 32, offset: 384)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !1410, file: !155, line: 145, baseType: !874, size: 32, offset: 416)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1410, file: !155, line: 146, baseType: !1429, size: 64, offset: 448)
!1429 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !155, line: 119, baseType: !941)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !1393, file: !155, line: 220, baseType: !1396, size: 64, offset: 64)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1393, file: !155, line: 223, baseType: !962, size: 64, offset: 128)
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !1393, file: !155, line: 226, baseType: !1433, size: 64, offset: 192)
!1433 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1434, size: 64)
!1434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !142, line: 100, size: 1216, elements: !1435)
!1435 = !{!1436, !1437, !1438, !1439, !1440, !1445, !1446, !1447, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1481, !1489, !1490}
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1434, file: !142, line: 102, baseType: !874, size: 32)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1434, file: !142, line: 105, baseType: !7, size: 32, offset: 32)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1434, file: !142, line: 108, baseType: !1392, size: 64, offset: 64)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1434, file: !142, line: 111, baseType: !1392, size: 64, offset: 128)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1434, file: !142, line: 114, baseType: !1441, size: 64, offset: 192)
!1441 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !142, line: 41, size: 64, elements: !1442)
!1442 = !{!1443, !1444}
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1441, file: !142, line: 42, baseType: !141, size: 32)
!1444 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1441, file: !142, line: 43, baseType: !7, size: 32, offset: 32)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1434, file: !142, line: 117, baseType: !7, size: 32, offset: 256)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1434, file: !142, line: 120, baseType: !7, size: 32, offset: 288)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1434, file: !142, line: 123, baseType: !1448, size: 64, offset: 320)
!1448 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1449, size: 64)
!1449 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !142, line: 87, baseType: !1450)
!1450 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !142, line: 87, size: 128, elements: !1451)
!1451 = !{!1452}
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1450, file: !142, line: 87, baseType: !1453, size: 128)
!1453 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !142, line: 85, baseType: !1454)
!1454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !142, line: 85, size: 128, elements: !1455)
!1455 = !{!1456, !1457, !1458}
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1454, file: !142, line: 85, baseType: !7, size: 32)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1454, file: !142, line: 85, baseType: !7, size: 32, offset: 32)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1454, file: !142, line: 85, baseType: !1459, size: 64, offset: 64)
!1459 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1460, size: 64, elements: !889)
!1460 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !142, line: 84, baseType: !1433)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1434, file: !142, line: 126, baseType: !1433, size: 64, offset: 384)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1434, file: !142, line: 129, baseType: !1433, size: 64, offset: 448)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1434, file: !142, line: 132, baseType: !962, size: 64, offset: 512)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1434, file: !142, line: 139, baseType: !972, size: 64, offset: 576)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1434, file: !142, line: 143, baseType: !1020, size: 128, offset: 640)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1434, file: !142, line: 146, baseType: !1020, size: 128, offset: 768)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1434, file: !142, line: 148, baseType: !1085, size: 8, offset: 896)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1434, file: !142, line: 149, baseType: !1085, size: 8, offset: 904)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1434, file: !142, line: 153, baseType: !150, size: 32, offset: 928)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1434, file: !142, line: 156, baseType: !1471, size: 64, offset: 960)
!1471 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1472, size: 64)
!1472 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !142, line: 48, size: 320, elements: !1473)
!1473 = !{!1474, !1478, !1479, !1480}
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1472, file: !142, line: 50, baseType: !1475, size: 64)
!1475 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !851, line: 58, baseType: !1476)
!1476 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1477, size: 64)
!1477 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !851, line: 57, flags: DIFlagFwdDecl)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1472, file: !142, line: 59, baseType: !1020, size: 128, offset: 64)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1472, file: !142, line: 64, baseType: !1085, size: 8, offset: 192)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1472, file: !142, line: 67, baseType: !1471, size: 64, offset: 256)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1434, file: !142, line: 159, baseType: !1482, size: 64, offset: 1024)
!1482 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1483, size: 64)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !142, line: 72, size: 256, elements: !1484)
!1484 = !{!1485, !1486, !1487, !1488}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1483, file: !142, line: 74, baseType: !1409, size: 64)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1483, file: !142, line: 77, baseType: !1482, size: 64, offset: 64)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1483, file: !142, line: 78, baseType: !1482, size: 64, offset: 128)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1483, file: !142, line: 81, baseType: !1482, size: 64, offset: 192)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1434, file: !142, line: 162, baseType: !1085, size: 8, offset: 1088)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1434, file: !142, line: 166, baseType: !972, size: 64, offset: 1152)
!1491 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !1393, file: !155, line: 229, baseType: !1492, size: 128, offset: 256)
!1492 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1493, size: 128, elements: !925)
!1493 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1494, size: 64)
!1494 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !155, line: 229, flags: DIFlagFwdDecl)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !1393, file: !155, line: 232, baseType: !1392, size: 64, offset: 384)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !1393, file: !155, line: 233, baseType: !1392, size: 64, offset: 448)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !1393, file: !155, line: 238, baseType: !1498, size: 64, offset: 512)
!1498 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !155, line: 235, size: 64, elements: !1499)
!1499 = !{!1500, !1506}
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1498, file: !155, line: 236, baseType: !1501, size: 64)
!1501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1502, size: 64)
!1502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !155, line: 273, size: 128, elements: !1503)
!1503 = !{!1504, !1505}
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1502, file: !155, line: 275, baseType: !1418, size: 64)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1502, file: !155, line: 278, baseType: !1418, size: 64, offset: 64)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1498, file: !155, line: 237, baseType: !1507, size: 64)
!1507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1508, size: 64)
!1508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !155, line: 259, size: 320, elements: !1509)
!1509 = !{!1510, !1511, !1512, !1513, !1514}
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1508, file: !155, line: 261, baseType: !850, size: 64)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1508, file: !155, line: 262, baseType: !850, size: 64, offset: 64)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1508, file: !155, line: 266, baseType: !850, size: 64, offset: 128)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1508, file: !155, line: 267, baseType: !850, size: 64, offset: 192)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1508, file: !155, line: 270, baseType: !874, size: 32, offset: 256)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !1393, file: !155, line: 241, baseType: !1429, size: 64, offset: 576)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1393, file: !155, line: 244, baseType: !874, size: 32, offset: 640)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !1393, file: !155, line: 247, baseType: !874, size: 32, offset: 672)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !1393, file: !155, line: 250, baseType: !874, size: 32, offset: 704)
!1519 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !1393, file: !155, line: 253, baseType: !874, size: 32, offset: 736)
!1520 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1393, file: !155, line: 256, baseType: !874, size: 32, offset: 768)
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1388, file: !155, line: 378, baseType: !1391, size: 64, offset: 64)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1388, file: !155, line: 381, baseType: !1523, size: 64, offset: 128)
!1523 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1524, size: 64)
!1524 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !155, line: 282, baseType: !1525)
!1525 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !155, line: 282, size: 128, elements: !1526)
!1526 = !{!1527}
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1525, file: !155, line: 282, baseType: !1528, size: 128)
!1528 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !155, line: 281, baseType: !1529)
!1529 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !155, line: 281, size: 128, elements: !1530)
!1530 = !{!1531, !1532, !1533}
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1529, file: !155, line: 281, baseType: !7, size: 32)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1529, file: !155, line: 281, baseType: !7, size: 32, offset: 32)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1529, file: !155, line: 281, baseType: !1534, size: 64, offset: 64)
!1534 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1391, size: 64, elements: !889)
!1535 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1388, file: !155, line: 384, baseType: !874, size: 32, offset: 192)
!1536 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1388, file: !155, line: 387, baseType: !874, size: 32, offset: 224)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1388, file: !155, line: 390, baseType: !874, size: 32, offset: 256)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1388, file: !155, line: 394, baseType: !1523, size: 64, offset: 320)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1388, file: !155, line: 396, baseType: !154, size: 32, offset: 384)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1388, file: !155, line: 399, baseType: !1541, size: 64, offset: 416)
!1541 = !DICompositeType(tag: DW_TAG_array_type, baseType: !160, size: 64, elements: !925)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1388, file: !155, line: 402, baseType: !1543, size: 64, offset: 480)
!1543 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !925)
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1388, file: !155, line: 406, baseType: !874, size: 32, offset: 544)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1388, file: !155, line: 409, baseType: !874, size: 32, offset: 576)
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1219, file: !1220, line: 470, baseType: !1419, size: 64, offset: 128)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1219, file: !1220, line: 473, baseType: !1548, size: 64, offset: 192)
!1548 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1549, size: 64)
!1549 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1220, line: 166, flags: DIFlagFwdDecl)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1219, file: !1220, line: 476, baseType: !1551, size: 64, offset: 256)
!1551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1552, size: 64)
!1552 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !142, line: 187, size: 256, elements: !1553)
!1553 = !{!1554, !1555, !1556, !1557}
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1552, file: !142, line: 189, baseType: !874, size: 32)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1552, file: !142, line: 192, baseType: !1448, size: 64, offset: 64)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1552, file: !142, line: 197, baseType: !1303, size: 64, offset: 128)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1552, file: !142, line: 200, baseType: !1433, size: 64, offset: 192)
!1558 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1219, file: !1220, line: 479, baseType: !1303, size: 64, offset: 320)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1219, file: !1220, line: 484, baseType: !972, size: 64, offset: 384)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1219, file: !1220, line: 488, baseType: !972, size: 64, offset: 448)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1219, file: !1220, line: 493, baseType: !972, size: 64, offset: 512)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1219, file: !1220, line: 496, baseType: !972, size: 64, offset: 576)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1219, file: !1220, line: 501, baseType: !1564, size: 64, offset: 640)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !166, line: 2355, size: 576, elements: !1566)
!1566 = !{!1567, !1570, !1571, !1572, !1573, !1575, !1576, !1581, !1582, !1583, !1584, !1585, !1586}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1565, file: !166, line: 2356, baseType: !1568, size: 64)
!1568 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1569, size: 64)
!1569 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !166, line: 2356, flags: DIFlagFwdDecl)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1565, file: !166, line: 2357, baseType: !877, size: 64, offset: 64)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1565, file: !166, line: 2358, baseType: !874, size: 32, offset: 128)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1565, file: !166, line: 2359, baseType: !874, size: 32, offset: 160)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1565, file: !166, line: 2360, baseType: !1574, size: 128, offset: 192)
!1574 = !DICompositeType(tag: DW_TAG_array_type, baseType: !874, size: 128, elements: !951)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1565, file: !166, line: 2364, baseType: !874, size: 32, offset: 320)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1565, file: !166, line: 2367, baseType: !1577, size: 128, offset: 384)
!1577 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !166, line: 2349, size: 128, elements: !1578)
!1578 = !{!1579, !1580}
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1577, file: !166, line: 2351, baseType: !850, size: 64)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1577, file: !166, line: 2352, baseType: !941, size: 64, offset: 64)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1565, file: !166, line: 2371, baseType: !165, size: 32, offset: 512)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1565, file: !166, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1565, file: !166, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1565, file: !166, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1565, file: !166, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1565, file: !166, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1219, file: !1220, line: 504, baseType: !1588, size: 64, offset: 704)
!1588 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1589, size: 64)
!1589 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1220, line: 504, flags: DIFlagFwdDecl)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1219, file: !1220, line: 507, baseType: !1303, size: 64, offset: 768)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1219, file: !1220, line: 510, baseType: !874, size: 32, offset: 832)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1219, file: !1220, line: 513, baseType: !874, size: 32, offset: 864)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1219, file: !1220, line: 516, baseType: !1093, size: 32, offset: 896)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1219, file: !1220, line: 519, baseType: !1093, size: 32, offset: 928)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1219, file: !1220, line: 522, baseType: !7, size: 32, offset: 960)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1219, file: !1220, line: 523, baseType: !7, size: 32, offset: 992)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1219, file: !1220, line: 528, baseType: !877, size: 64, offset: 1024)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1219, file: !1220, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1219, file: !1220, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1219, file: !1220, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1219, file: !1220, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1219, file: !1220, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1219, file: !1220, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1219, file: !1220, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1219, file: !1220, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1219, file: !1220, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1219, file: !1220, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1219, file: !1220, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1219, file: !1220, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1219, file: !1220, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1219, file: !1220, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1219, file: !1220, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1219, file: !1220, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1214, file: !171, line: 3254, baseType: !972, size: 64, offset: 1536)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1214, file: !171, line: 3257, baseType: !972, size: 64, offset: 1600)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1214, file: !171, line: 3258, baseType: !972, size: 64, offset: 1664)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1214, file: !171, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1214, file: !171, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1214, file: !171, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1214, file: !171, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1214, file: !171, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1214, file: !171, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1214, file: !171, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1214, file: !171, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1214, file: !171, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1214, file: !171, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1214, file: !171, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1214, file: !171, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1214, file: !171, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1214, file: !171, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1214, file: !171, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1214, file: !171, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1214, file: !171, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1214, file: !171, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !974, file: !171, line: 3394, baseType: !1636, size: 1344)
!1636 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !171, line: 2279, size: 1344, elements: !1637)
!1637 = !{!1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1663, !1664, !1665, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681}
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1636, file: !171, line: 2280, baseType: !1010, size: 192)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1636, file: !171, line: 2281, baseType: !972, size: 64, offset: 192)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1636, file: !171, line: 2282, baseType: !972, size: 64, offset: 256)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1636, file: !171, line: 2283, baseType: !972, size: 64, offset: 320)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1636, file: !171, line: 2284, baseType: !972, size: 64, offset: 384)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1636, file: !171, line: 2285, baseType: !7, size: 32, offset: 448)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1636, file: !171, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1636, file: !171, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1636, file: !171, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1636, file: !171, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1636, file: !171, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1636, file: !171, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1636, file: !171, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1636, file: !171, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1636, file: !171, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1636, file: !171, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1636, file: !171, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1636, file: !171, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1636, file: !171, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1636, file: !171, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1636, file: !171, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1636, file: !171, line: 2305, baseType: !7, size: 32, offset: 512)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1636, file: !171, line: 2306, baseType: !1661, size: 32, offset: 544)
!1661 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1662, line: 31, baseType: !874)
!1662 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1636, file: !171, line: 2307, baseType: !972, size: 64, offset: 576)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1636, file: !171, line: 2308, baseType: !972, size: 64, offset: 640)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1636, file: !171, line: 2314, baseType: !1666, size: 64, offset: 704)
!1666 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !171, line: 2309, size: 64, elements: !1667)
!1667 = !{!1668, !1669, !1670}
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1666, file: !171, line: 2310, baseType: !874, size: 32)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1666, file: !171, line: 2311, baseType: !877, size: 64)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1666, file: !171, line: 2312, baseType: !1671, size: 64)
!1671 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1672, size: 64)
!1672 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !171, line: 2277, flags: DIFlagFwdDecl)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1636, file: !171, line: 2315, baseType: !972, size: 64, offset: 768)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1636, file: !171, line: 2316, baseType: !972, size: 64, offset: 832)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1636, file: !171, line: 2317, baseType: !972, size: 64, offset: 896)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1636, file: !171, line: 2318, baseType: !972, size: 64, offset: 960)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1636, file: !171, line: 2319, baseType: !972, size: 64, offset: 1024)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1636, file: !171, line: 2320, baseType: !972, size: 64, offset: 1088)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1636, file: !171, line: 2321, baseType: !972, size: 64, offset: 1152)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1636, file: !171, line: 2322, baseType: !972, size: 64, offset: 1216)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1636, file: !171, line: 2324, baseType: !1682, size: 64, offset: 1280)
!1682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1683, size: 64)
!1683 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !171, line: 2324, flags: DIFlagFwdDecl)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !974, file: !171, line: 3395, baseType: !1685, size: 320)
!1685 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !171, line: 1469, size: 320, elements: !1686)
!1686 = !{!1687, !1688, !1689}
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1685, file: !171, line: 1470, baseType: !1010, size: 192)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1685, file: !171, line: 1471, baseType: !972, size: 64, offset: 192)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1685, file: !171, line: 1472, baseType: !972, size: 64, offset: 256)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !974, file: !171, line: 3396, baseType: !1691, size: 320)
!1691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !171, line: 1482, size: 320, elements: !1692)
!1692 = !{!1693, !1694, !1695}
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1691, file: !171, line: 1483, baseType: !1010, size: 192)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1691, file: !171, line: 1484, baseType: !874, size: 32, offset: 192)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1691, file: !171, line: 1485, baseType: !1366, size: 64, offset: 256)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !974, file: !171, line: 3397, baseType: !1697, size: 384)
!1697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !171, line: 1829, size: 384, elements: !1698)
!1698 = !{!1699, !1700, !1701, !1702}
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1697, file: !171, line: 1830, baseType: !1010, size: 192)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1697, file: !171, line: 1831, baseType: !1093, size: 32, offset: 192)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1697, file: !171, line: 1832, baseType: !972, size: 64, offset: 256)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1697, file: !171, line: 1835, baseType: !1366, size: 64, offset: 320)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !974, file: !171, line: 3398, baseType: !1704, size: 704)
!1704 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !171, line: 1898, size: 704, elements: !1705)
!1705 = !{!1706, !1707, !1708, !1709, !1710, !1713}
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1704, file: !171, line: 1899, baseType: !1010, size: 192)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1704, file: !171, line: 1902, baseType: !972, size: 64, offset: 192)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1704, file: !171, line: 1905, baseType: !1475, size: 64, offset: 256)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1704, file: !171, line: 1908, baseType: !7, size: 32, offset: 320)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1704, file: !171, line: 1911, baseType: !1711, size: 64, offset: 384)
!1711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1712, size: 64)
!1712 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !171, line: 1876, flags: DIFlagFwdDecl)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1704, file: !171, line: 1914, baseType: !1714, size: 256, offset: 448)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !171, line: 1883, size: 256, elements: !1715)
!1715 = !{!1716, !1718, !1719, !1724}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1714, file: !171, line: 1884, baseType: !1717, size: 64)
!1717 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1714, size: 64)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1714, file: !171, line: 1885, baseType: !1717, size: 64, offset: 64)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1714, file: !171, line: 1891, baseType: !1720, size: 64, offset: 128)
!1720 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1714, file: !171, line: 1891, size: 64, elements: !1721)
!1721 = !{!1722, !1723}
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1720, file: !171, line: 1891, baseType: !1475, size: 64)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1720, file: !171, line: 1891, baseType: !972, size: 64)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1714, file: !171, line: 1892, baseType: !1725, size: 64, offset: 192)
!1725 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !972, size: 64)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !974, file: !171, line: 3399, baseType: !1727, size: 704)
!1727 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !171, line: 2008, size: 704, elements: !1728)
!1728 = !{!1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739}
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1727, file: !171, line: 2009, baseType: !1010, size: 192)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1727, file: !171, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1727, file: !171, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1727, file: !171, line: 2014, baseType: !1093, size: 32, offset: 224)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1727, file: !171, line: 2016, baseType: !972, size: 64, offset: 256)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1727, file: !171, line: 2017, baseType: !1355, size: 64, offset: 320)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1727, file: !171, line: 2019, baseType: !972, size: 64, offset: 384)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1727, file: !171, line: 2020, baseType: !972, size: 64, offset: 448)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1727, file: !171, line: 2021, baseType: !972, size: 64, offset: 512)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1727, file: !171, line: 2022, baseType: !972, size: 64, offset: 576)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1727, file: !171, line: 2023, baseType: !972, size: 64, offset: 640)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !974, file: !171, line: 3400, baseType: !1741, size: 832)
!1741 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !171, line: 2430, size: 832, elements: !1742)
!1742 = !{!1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752}
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1741, file: !171, line: 2431, baseType: !1010, size: 192)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1741, file: !171, line: 2433, baseType: !972, size: 64, offset: 192)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1741, file: !171, line: 2434, baseType: !972, size: 64, offset: 256)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1741, file: !171, line: 2435, baseType: !972, size: 64, offset: 320)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1741, file: !171, line: 2436, baseType: !972, size: 64, offset: 384)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1741, file: !171, line: 2437, baseType: !1355, size: 64, offset: 448)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1741, file: !171, line: 2438, baseType: !972, size: 64, offset: 512)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1741, file: !171, line: 2440, baseType: !972, size: 64, offset: 576)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1741, file: !171, line: 2441, baseType: !972, size: 64, offset: 640)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1741, file: !171, line: 2443, baseType: !1753, size: 128, offset: 704)
!1753 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !171, line: 182, baseType: !1754)
!1754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !171, line: 182, size: 128, elements: !1755)
!1755 = !{!1756}
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1754, file: !171, line: 182, baseType: !1360, size: 128)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !974, file: !171, line: 3401, baseType: !1758, size: 320)
!1758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !171, line: 3327, size: 320, elements: !1759)
!1759 = !{!1760, !1761, !1768}
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1758, file: !171, line: 3329, baseType: !1010, size: 192)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1758, file: !171, line: 3330, baseType: !1762, size: 64, offset: 192)
!1762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1763, size: 64)
!1763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !171, line: 3320, size: 192, elements: !1764)
!1764 = !{!1765, !1766, !1767}
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1763, file: !171, line: 3322, baseType: !1762, size: 64)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1763, file: !171, line: 3323, baseType: !1762, size: 64, offset: 64)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1763, file: !171, line: 3324, baseType: !972, size: 64, offset: 128)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1758, file: !171, line: 3331, baseType: !1762, size: 64, offset: 256)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !974, file: !171, line: 3402, baseType: !1770, size: 256)
!1770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !171, line: 1540, size: 256, elements: !1771)
!1771 = !{!1772, !1773}
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1770, file: !171, line: 1541, baseType: !1010, size: 192)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1770, file: !171, line: 1542, baseType: !1774, size: 64, offset: 192)
!1774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1775, size: 64)
!1775 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !171, line: 1538, baseType: !1776)
!1776 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !171, line: 1538, size: 192, elements: !1777)
!1777 = !{!1778}
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1776, file: !171, line: 1538, baseType: !1779, size: 192)
!1779 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !171, line: 1537, baseType: !1780)
!1780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !171, line: 1537, size: 192, elements: !1781)
!1781 = !{!1782, !1783, !1784}
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1780, file: !171, line: 1537, baseType: !7, size: 32)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1780, file: !171, line: 1537, baseType: !7, size: 32, offset: 32)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1780, file: !171, line: 1537, baseType: !1785, size: 128, offset: 64)
!1785 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1786, size: 128, elements: !889)
!1786 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !171, line: 1535, baseType: !1787)
!1787 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !171, line: 1532, size: 128, elements: !1788)
!1788 = !{!1789, !1790}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1787, file: !171, line: 1533, baseType: !972, size: 64)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1787, file: !171, line: 1534, baseType: !972, size: 64, offset: 64)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !974, file: !171, line: 3403, baseType: !1792, size: 512)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !171, line: 1938, size: 512, elements: !1793)
!1793 = !{!1794, !1795, !1796, !1797, !1803, !1804, !1805}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1792, file: !171, line: 1939, baseType: !1010, size: 192)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1792, file: !171, line: 1940, baseType: !1093, size: 32, offset: 192)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1792, file: !171, line: 1941, baseType: !170, size: 32, offset: 224)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1792, file: !171, line: 1946, baseType: !1798, size: 32, offset: 256)
!1798 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !171, line: 1942, size: 32, elements: !1799)
!1799 = !{!1800, !1801, !1802}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1798, file: !171, line: 1943, baseType: !189, size: 32)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1798, file: !171, line: 1944, baseType: !196, size: 32)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1798, file: !171, line: 1945, baseType: !203, size: 32)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1792, file: !171, line: 1950, baseType: !1418, size: 64, offset: 320)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1792, file: !171, line: 1951, baseType: !1418, size: 64, offset: 384)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1792, file: !171, line: 1953, baseType: !1366, size: 64, offset: 448)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !974, file: !171, line: 3404, baseType: !1807, size: 1664)
!1807 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !171, line: 3337, size: 1664, elements: !1808)
!1808 = !{!1809, !1810}
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1807, file: !171, line: 3338, baseType: !1010, size: 192)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1807, file: !171, line: 3341, baseType: !1811, size: 1472, offset: 192)
!1811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1812, line: 410, size: 1472, elements: !1813)
!1812 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1813 = !{!1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977}
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1811, file: !1812, line: 412, baseType: !874, size: 32)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1811, file: !1812, line: 413, baseType: !874, size: 32, offset: 32)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1811, file: !1812, line: 414, baseType: !874, size: 32, offset: 64)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1811, file: !1812, line: 415, baseType: !874, size: 32, offset: 96)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1811, file: !1812, line: 416, baseType: !874, size: 32, offset: 128)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1811, file: !1812, line: 417, baseType: !874, size: 32, offset: 160)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1811, file: !1812, line: 418, baseType: !1085, size: 8, offset: 192)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1811, file: !1812, line: 419, baseType: !1085, size: 8, offset: 200)
!1822 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1811, file: !1812, line: 420, baseType: !1823, size: 8, offset: 208)
!1823 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1811, file: !1812, line: 421, baseType: !1823, size: 8, offset: 216)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1811, file: !1812, line: 422, baseType: !1823, size: 8, offset: 224)
!1826 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1811, file: !1812, line: 423, baseType: !1823, size: 8, offset: 232)
!1827 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1811, file: !1812, line: 424, baseType: !1823, size: 8, offset: 240)
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1811, file: !1812, line: 425, baseType: !1823, size: 8, offset: 248)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1811, file: !1812, line: 426, baseType: !1823, size: 8, offset: 256)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1811, file: !1812, line: 427, baseType: !1823, size: 8, offset: 264)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1811, file: !1812, line: 428, baseType: !1823, size: 8, offset: 272)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1811, file: !1812, line: 429, baseType: !1823, size: 8, offset: 280)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1811, file: !1812, line: 430, baseType: !1823, size: 8, offset: 288)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1811, file: !1812, line: 431, baseType: !1823, size: 8, offset: 296)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1811, file: !1812, line: 432, baseType: !1823, size: 8, offset: 304)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1811, file: !1812, line: 433, baseType: !1823, size: 8, offset: 312)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1811, file: !1812, line: 434, baseType: !1823, size: 8, offset: 320)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1811, file: !1812, line: 435, baseType: !1823, size: 8, offset: 328)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1811, file: !1812, line: 436, baseType: !1823, size: 8, offset: 336)
!1840 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1811, file: !1812, line: 437, baseType: !1823, size: 8, offset: 344)
!1841 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1811, file: !1812, line: 438, baseType: !1823, size: 8, offset: 352)
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1811, file: !1812, line: 439, baseType: !1823, size: 8, offset: 360)
!1843 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1811, file: !1812, line: 440, baseType: !1823, size: 8, offset: 368)
!1844 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1811, file: !1812, line: 441, baseType: !1823, size: 8, offset: 376)
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1811, file: !1812, line: 442, baseType: !1823, size: 8, offset: 384)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1811, file: !1812, line: 443, baseType: !1823, size: 8, offset: 392)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1811, file: !1812, line: 444, baseType: !1823, size: 8, offset: 400)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1811, file: !1812, line: 445, baseType: !1823, size: 8, offset: 408)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1811, file: !1812, line: 446, baseType: !1823, size: 8, offset: 416)
!1850 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1811, file: !1812, line: 447, baseType: !1823, size: 8, offset: 424)
!1851 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1811, file: !1812, line: 448, baseType: !1823, size: 8, offset: 432)
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1811, file: !1812, line: 449, baseType: !1823, size: 8, offset: 440)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1811, file: !1812, line: 450, baseType: !1823, size: 8, offset: 448)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1811, file: !1812, line: 451, baseType: !1823, size: 8, offset: 456)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1811, file: !1812, line: 452, baseType: !1823, size: 8, offset: 464)
!1856 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1811, file: !1812, line: 453, baseType: !1823, size: 8, offset: 472)
!1857 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1811, file: !1812, line: 454, baseType: !1823, size: 8, offset: 480)
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1811, file: !1812, line: 455, baseType: !1823, size: 8, offset: 488)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1811, file: !1812, line: 456, baseType: !1823, size: 8, offset: 496)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1811, file: !1812, line: 457, baseType: !1823, size: 8, offset: 504)
!1861 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1811, file: !1812, line: 458, baseType: !1823, size: 8, offset: 512)
!1862 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1811, file: !1812, line: 459, baseType: !1823, size: 8, offset: 520)
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1811, file: !1812, line: 460, baseType: !1823, size: 8, offset: 528)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1811, file: !1812, line: 461, baseType: !1823, size: 8, offset: 536)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1811, file: !1812, line: 462, baseType: !1823, size: 8, offset: 544)
!1866 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1811, file: !1812, line: 463, baseType: !1823, size: 8, offset: 552)
!1867 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1811, file: !1812, line: 464, baseType: !1823, size: 8, offset: 560)
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1811, file: !1812, line: 465, baseType: !1823, size: 8, offset: 568)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1811, file: !1812, line: 466, baseType: !1823, size: 8, offset: 576)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1811, file: !1812, line: 467, baseType: !1823, size: 8, offset: 584)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1811, file: !1812, line: 468, baseType: !1823, size: 8, offset: 592)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1811, file: !1812, line: 469, baseType: !1823, size: 8, offset: 600)
!1873 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1811, file: !1812, line: 470, baseType: !1823, size: 8, offset: 608)
!1874 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1811, file: !1812, line: 471, baseType: !1823, size: 8, offset: 616)
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1811, file: !1812, line: 472, baseType: !1823, size: 8, offset: 624)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1811, file: !1812, line: 473, baseType: !1823, size: 8, offset: 632)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1811, file: !1812, line: 474, baseType: !1823, size: 8, offset: 640)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1811, file: !1812, line: 475, baseType: !1823, size: 8, offset: 648)
!1879 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1811, file: !1812, line: 476, baseType: !1823, size: 8, offset: 656)
!1880 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1811, file: !1812, line: 477, baseType: !1823, size: 8, offset: 664)
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1811, file: !1812, line: 478, baseType: !1823, size: 8, offset: 672)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1811, file: !1812, line: 479, baseType: !1823, size: 8, offset: 680)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1811, file: !1812, line: 480, baseType: !1823, size: 8, offset: 688)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1811, file: !1812, line: 481, baseType: !1823, size: 8, offset: 696)
!1885 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1811, file: !1812, line: 482, baseType: !1823, size: 8, offset: 704)
!1886 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1811, file: !1812, line: 483, baseType: !1823, size: 8, offset: 712)
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1811, file: !1812, line: 484, baseType: !1823, size: 8, offset: 720)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1811, file: !1812, line: 485, baseType: !1823, size: 8, offset: 728)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1811, file: !1812, line: 486, baseType: !1823, size: 8, offset: 736)
!1890 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1811, file: !1812, line: 487, baseType: !1823, size: 8, offset: 744)
!1891 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1811, file: !1812, line: 488, baseType: !1823, size: 8, offset: 752)
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1811, file: !1812, line: 489, baseType: !1823, size: 8, offset: 760)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1811, file: !1812, line: 490, baseType: !1823, size: 8, offset: 768)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1811, file: !1812, line: 491, baseType: !1823, size: 8, offset: 776)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1811, file: !1812, line: 492, baseType: !1823, size: 8, offset: 784)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1811, file: !1812, line: 493, baseType: !1823, size: 8, offset: 792)
!1897 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1811, file: !1812, line: 494, baseType: !1823, size: 8, offset: 800)
!1898 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1811, file: !1812, line: 495, baseType: !1823, size: 8, offset: 808)
!1899 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1811, file: !1812, line: 496, baseType: !1823, size: 8, offset: 816)
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1811, file: !1812, line: 497, baseType: !1823, size: 8, offset: 824)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1811, file: !1812, line: 498, baseType: !1823, size: 8, offset: 832)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1811, file: !1812, line: 499, baseType: !1823, size: 8, offset: 840)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1811, file: !1812, line: 500, baseType: !1823, size: 8, offset: 848)
!1904 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1811, file: !1812, line: 501, baseType: !1823, size: 8, offset: 856)
!1905 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1811, file: !1812, line: 502, baseType: !1823, size: 8, offset: 864)
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1811, file: !1812, line: 503, baseType: !1823, size: 8, offset: 872)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1811, file: !1812, line: 504, baseType: !1823, size: 8, offset: 880)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1811, file: !1812, line: 505, baseType: !1823, size: 8, offset: 888)
!1909 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1811, file: !1812, line: 506, baseType: !1823, size: 8, offset: 896)
!1910 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1811, file: !1812, line: 507, baseType: !1823, size: 8, offset: 904)
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1811, file: !1812, line: 508, baseType: !1823, size: 8, offset: 912)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1811, file: !1812, line: 509, baseType: !1823, size: 8, offset: 920)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1811, file: !1812, line: 510, baseType: !1823, size: 8, offset: 928)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1811, file: !1812, line: 511, baseType: !1823, size: 8, offset: 936)
!1915 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1811, file: !1812, line: 512, baseType: !1823, size: 8, offset: 944)
!1916 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1811, file: !1812, line: 513, baseType: !1823, size: 8, offset: 952)
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1811, file: !1812, line: 514, baseType: !1823, size: 8, offset: 960)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1811, file: !1812, line: 515, baseType: !1823, size: 8, offset: 968)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1811, file: !1812, line: 516, baseType: !1823, size: 8, offset: 976)
!1920 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1811, file: !1812, line: 517, baseType: !1823, size: 8, offset: 984)
!1921 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1811, file: !1812, line: 518, baseType: !1823, size: 8, offset: 992)
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1811, file: !1812, line: 519, baseType: !1823, size: 8, offset: 1000)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1811, file: !1812, line: 520, baseType: !1823, size: 8, offset: 1008)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1811, file: !1812, line: 521, baseType: !1823, size: 8, offset: 1016)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1811, file: !1812, line: 522, baseType: !1823, size: 8, offset: 1024)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1811, file: !1812, line: 523, baseType: !1823, size: 8, offset: 1032)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1811, file: !1812, line: 524, baseType: !1823, size: 8, offset: 1040)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1811, file: !1812, line: 525, baseType: !1823, size: 8, offset: 1048)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1811, file: !1812, line: 526, baseType: !1823, size: 8, offset: 1056)
!1930 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1811, file: !1812, line: 527, baseType: !1823, size: 8, offset: 1064)
!1931 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1811, file: !1812, line: 528, baseType: !1823, size: 8, offset: 1072)
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1811, file: !1812, line: 529, baseType: !1823, size: 8, offset: 1080)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1811, file: !1812, line: 530, baseType: !1823, size: 8, offset: 1088)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1811, file: !1812, line: 531, baseType: !1823, size: 8, offset: 1096)
!1935 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1811, file: !1812, line: 532, baseType: !1823, size: 8, offset: 1104)
!1936 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1811, file: !1812, line: 533, baseType: !1823, size: 8, offset: 1112)
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1811, file: !1812, line: 534, baseType: !1823, size: 8, offset: 1120)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1811, file: !1812, line: 535, baseType: !1823, size: 8, offset: 1128)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1811, file: !1812, line: 536, baseType: !1823, size: 8, offset: 1136)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1811, file: !1812, line: 537, baseType: !1823, size: 8, offset: 1144)
!1941 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1811, file: !1812, line: 538, baseType: !1823, size: 8, offset: 1152)
!1942 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1811, file: !1812, line: 539, baseType: !1823, size: 8, offset: 1160)
!1943 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1811, file: !1812, line: 540, baseType: !1823, size: 8, offset: 1168)
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1811, file: !1812, line: 541, baseType: !1823, size: 8, offset: 1176)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1811, file: !1812, line: 542, baseType: !1823, size: 8, offset: 1184)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1811, file: !1812, line: 543, baseType: !1823, size: 8, offset: 1192)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1811, file: !1812, line: 544, baseType: !1823, size: 8, offset: 1200)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1811, file: !1812, line: 545, baseType: !1823, size: 8, offset: 1208)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1811, file: !1812, line: 546, baseType: !1823, size: 8, offset: 1216)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1811, file: !1812, line: 547, baseType: !1823, size: 8, offset: 1224)
!1951 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1811, file: !1812, line: 548, baseType: !1823, size: 8, offset: 1232)
!1952 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1811, file: !1812, line: 549, baseType: !1823, size: 8, offset: 1240)
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1811, file: !1812, line: 550, baseType: !1823, size: 8, offset: 1248)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1811, file: !1812, line: 551, baseType: !1823, size: 8, offset: 1256)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1811, file: !1812, line: 552, baseType: !1823, size: 8, offset: 1264)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1811, file: !1812, line: 553, baseType: !1823, size: 8, offset: 1272)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1811, file: !1812, line: 554, baseType: !1823, size: 8, offset: 1280)
!1958 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1811, file: !1812, line: 555, baseType: !1823, size: 8, offset: 1288)
!1959 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1811, file: !1812, line: 556, baseType: !1823, size: 8, offset: 1296)
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1811, file: !1812, line: 557, baseType: !1823, size: 8, offset: 1304)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1811, file: !1812, line: 558, baseType: !1823, size: 8, offset: 1312)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1811, file: !1812, line: 559, baseType: !1823, size: 8, offset: 1320)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1811, file: !1812, line: 560, baseType: !1823, size: 8, offset: 1328)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1811, file: !1812, line: 561, baseType: !1823, size: 8, offset: 1336)
!1965 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1811, file: !1812, line: 562, baseType: !1823, size: 8, offset: 1344)
!1966 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1811, file: !1812, line: 563, baseType: !1823, size: 8, offset: 1352)
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1811, file: !1812, line: 564, baseType: !1823, size: 8, offset: 1360)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1811, file: !1812, line: 565, baseType: !1823, size: 8, offset: 1368)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1811, file: !1812, line: 566, baseType: !1823, size: 8, offset: 1376)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1811, file: !1812, line: 567, baseType: !1823, size: 8, offset: 1384)
!1971 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1811, file: !1812, line: 568, baseType: !1823, size: 8, offset: 1392)
!1972 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1811, file: !1812, line: 569, baseType: !1823, size: 8, offset: 1400)
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1811, file: !1812, line: 570, baseType: !1823, size: 8, offset: 1408)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1811, file: !1812, line: 571, baseType: !1823, size: 8, offset: 1416)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1811, file: !1812, line: 572, baseType: !1823, size: 8, offset: 1424)
!1976 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1811, file: !1812, line: 573, baseType: !1823, size: 8, offset: 1432)
!1977 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1811, file: !1812, line: 574, baseType: !1823, size: 8, offset: 1440)
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !974, file: !171, line: 3405, baseType: !1979, size: 384)
!1979 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !171, line: 3352, size: 384, elements: !1980)
!1980 = !{!1981, !1982}
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1979, file: !171, line: 3353, baseType: !1010, size: 192)
!1982 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1979, file: !171, line: 3356, baseType: !1983, size: 192, offset: 192)
!1983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1812, line: 578, size: 192, elements: !1984)
!1984 = !{!1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995}
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1983, file: !1812, line: 580, baseType: !874, size: 32)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1983, file: !1812, line: 581, baseType: !874, size: 32, offset: 32)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1983, file: !1812, line: 582, baseType: !874, size: 32, offset: 64)
!1988 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1983, file: !1812, line: 583, baseType: !874, size: 32, offset: 96)
!1989 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1983, file: !1812, line: 584, baseType: !1085, size: 8, offset: 128)
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1983, file: !1812, line: 585, baseType: !1085, size: 8, offset: 136)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1983, file: !1812, line: 586, baseType: !1085, size: 8, offset: 144)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1983, file: !1812, line: 587, baseType: !1085, size: 8, offset: 152)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1983, file: !1812, line: 588, baseType: !1085, size: 8, offset: 160)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1983, file: !1812, line: 589, baseType: !1085, size: 8, offset: 168)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1983, file: !1812, line: 590, baseType: !1085, size: 8, offset: 176)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !871, file: !414, line: 178, baseType: !1392, size: 64)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !871, file: !414, line: 179, baseType: !1998, size: 64)
!1998 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1999, size: 64)
!1999 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !414, line: 150, baseType: !2000)
!2000 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !414, line: 142, size: 320, elements: !2001)
!2001 = !{!2002, !2003, !2004, !2005, !2006, !2007}
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2000, file: !414, line: 144, baseType: !972, size: 64)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2000, file: !414, line: 145, baseType: !850, size: 64, offset: 64)
!2004 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2000, file: !414, line: 146, baseType: !850, size: 64, offset: 128)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !2000, file: !414, line: 147, baseType: !1661, size: 32, offset: 192)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2000, file: !414, line: 148, baseType: !7, size: 32, offset: 224)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !2000, file: !414, line: 149, baseType: !1085, size: 8, offset: 256)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !871, file: !414, line: 180, baseType: !2009, size: 64)
!2009 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2010, size: 64)
!2010 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !414, line: 162, baseType: !2011)
!2011 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !414, line: 159, size: 128, elements: !2012)
!2012 = !{!2013, !2014}
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2011, file: !414, line: 160, baseType: !972, size: 64)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2011, file: !414, line: 161, baseType: !941, size: 64, offset: 64)
!2015 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !871, file: !414, line: 181, baseType: !2016, size: 64)
!2016 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2017, size: 64)
!2017 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !414, line: 181, flags: DIFlagFwdDecl)
!2018 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !866, file: !414, line: 317, baseType: !2019, size: 64)
!2019 = !DICompositeType(tag: DW_TAG_array_type, baseType: !941, size: 64, elements: !889)
!2020 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !866, file: !414, line: 318, baseType: !2021, size: 320)
!2021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !414, line: 188, size: 320, elements: !2022)
!2022 = !{!2023, !2025, !2048}
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2021, file: !414, line: 190, baseType: !2024, size: 192)
!2024 = !DICompositeType(tag: DW_TAG_array_type, baseType: !870, size: 192, elements: !1043)
!2025 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2021, file: !414, line: 193, baseType: !2026, size: 64, offset: 192)
!2026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2027, size: 64)
!2027 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !414, line: 206, size: 320, elements: !2028)
!2028 = !{!2029, !2033, !2034, !2035, !2047}
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !2027, file: !414, line: 208, baseType: !2030, size: 64)
!2030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2031, size: 64)
!2031 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !851, line: 62, baseType: !2032)
!2032 = !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !851, line: 61, flags: DIFlagFwdDecl)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !2027, file: !414, line: 211, baseType: !7, size: 32, offset: 64)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2027, file: !414, line: 214, baseType: !941, size: 64, offset: 128)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !2027, file: !414, line: 224, baseType: !2036, size: 64, offset: 192)
!2036 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2037, size: 64)
!2037 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !414, line: 202, baseType: !2038)
!2038 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !414, line: 202, size: 128, elements: !2039)
!2039 = !{!2040}
!2040 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2038, file: !414, line: 202, baseType: !2041, size: 128)
!2041 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !414, line: 200, baseType: !2042)
!2042 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !414, line: 200, size: 128, elements: !2043)
!2043 = !{!2044, !2045, !2046}
!2044 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2042, file: !414, line: 200, baseType: !7, size: 32)
!2045 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2042, file: !414, line: 200, baseType: !7, size: 32, offset: 32)
!2046 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2042, file: !414, line: 200, baseType: !888, size: 64, offset: 64)
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !2027, file: !414, line: 234, baseType: !2036, size: 64, offset: 256)
!2048 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2021, file: !414, line: 197, baseType: !941, size: 64, offset: 256)
!2049 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !866, file: !414, line: 319, baseType: !1032, size: 256)
!2050 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !866, file: !414, line: 320, baseType: !1051, size: 192)
!2051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !874, size: 64)
!2052 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2053, size: 64)
!2053 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset", file: !155, line: 37, baseType: !2054)
!2054 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !851, line: 47, baseType: !908)
!2055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !850, size: 64)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "ds_t", file: !398, line: 218, baseType: !874)
!2057 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2058, size: 64)
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "succs_info", file: !409, line: 998, size: 384, elements: !2059)
!2059 = !{!2060, !2062, !2069, !2082, !2083, !2084, !2085}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2058, file: !409, line: 1001, baseType: !2061, size: 16)
!2061 = !DIBasicType(name: "short", size: 16, encoding: DW_ATE_signed)
!2062 = !DIDerivedType(tag: DW_TAG_member, name: "succs_ok", scope: !2058, file: !409, line: 1004, baseType: !2063, size: 64, offset: 64)
!2063 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_vec_t", file: !398, line: 41, baseType: !2064)
!2064 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2065, size: 64)
!2065 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_heap", file: !414, line: 201, baseType: !2066)
!2066 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_heap", file: !414, line: 201, size: 128, elements: !2067)
!2067 = !{!2068}
!2068 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2066, file: !414, line: 201, baseType: !2041, size: 128)
!2069 = !DIDerivedType(tag: DW_TAG_member, name: "probs_ok", scope: !2058, file: !409, line: 1008, baseType: !2070, size: 64, offset: 128)
!2070 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2071, size: 64)
!2071 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !1374, line: 32, baseType: !2072)
!2072 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !1374, line: 32, size: 96, elements: !2073)
!2073 = !{!2074}
!2074 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2072, file: !1374, line: 32, baseType: !2075, size: 96)
!2075 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !1374, line: 31, baseType: !2076)
!2076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !1374, line: 31, size: 96, elements: !2077)
!2077 = !{!2078, !2079, !2080}
!2078 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2076, file: !1374, line: 31, baseType: !7, size: 32)
!2079 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2076, file: !1374, line: 31, baseType: !7, size: 32, offset: 32)
!2080 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2076, file: !1374, line: 31, baseType: !2081, size: 32, offset: 64)
!2081 = !DICompositeType(tag: DW_TAG_array_type, baseType: !874, size: 32, elements: !889)
!2082 = !DIDerivedType(tag: DW_TAG_member, name: "succs_other", scope: !2058, file: !409, line: 1011, baseType: !2063, size: 64, offset: 192)
!2083 = !DIDerivedType(tag: DW_TAG_member, name: "all_prob", scope: !2058, file: !409, line: 1014, baseType: !874, size: 32, offset: 256)
!2084 = !DIDerivedType(tag: DW_TAG_member, name: "all_succs_n", scope: !2058, file: !409, line: 1017, baseType: !874, size: 32, offset: 288)
!2085 = !DIDerivedType(tag: DW_TAG_member, name: "succs_ok_n", scope: !2058, file: !409, line: 1020, baseType: !874, size: 32, offset: 320)
!2086 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2087, size: 64)
!2087 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !155, line: 283, baseType: !2088)
!2088 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !155, line: 283, size: 128, elements: !2089)
!2089 = !{!2090}
!2090 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2088, file: !155, line: 283, baseType: !1528, size: 128)
!2091 = !DIDerivedType(tag: DW_TAG_typedef, name: "_list_t", file: !409, line: 46, baseType: !2092)
!2092 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2093, size: 64)
!2093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_list_node", file: !409, line: 354, size: 896, elements: !2094)
!2094 = !{!2095, !2096}
!2095 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2093, file: !409, line: 356, baseType: !2091, size: 64)
!2096 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2093, file: !409, line: 366, baseType: !2097, size: 832, offset: 64)
!2097 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !2093, file: !409, line: 358, size: 832, elements: !2098)
!2098 = !{!2099, !2100, !2146, !2205, !2228, !2233}
!2099 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !2097, file: !409, line: 360, baseType: !850, size: 64)
!2100 = !DIDerivedType(tag: DW_TAG_member, name: "bnd", scope: !2097, file: !409, line: 361, baseType: !2101, size: 320)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_bnd", file: !409, line: 222, size: 320, elements: !2102)
!2102 = !{!2103, !2105, !2108, !2110, !2111}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "to", scope: !2101, file: !409, line: 225, baseType: !2104, size: 64)
!2104 = !DIDerivedType(tag: DW_TAG_typedef, name: "insn_t", file: !409, line: 64, baseType: !850)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !2101, file: !409, line: 228, baseType: !2106, size: 64, offset: 64)
!2106 = !DIDerivedType(tag: DW_TAG_typedef, name: "ilist_t", file: !409, line: 67, baseType: !2107)
!2107 = !DIDerivedType(tag: DW_TAG_typedef, name: "_xlist_t", file: !409, line: 59, baseType: !2091)
!2108 = !DIDerivedType(tag: DW_TAG_member, name: "av", scope: !2101, file: !409, line: 231, baseType: !2109, size: 64, offset: 128)
!2109 = !DIDerivedType(tag: DW_TAG_typedef, name: "av_set_t", file: !409, line: 216, baseType: !2091)
!2110 = !DIDerivedType(tag: DW_TAG_member, name: "av1", scope: !2101, file: !409, line: 234, baseType: !2109, size: 64, offset: 192)
!2111 = !DIDerivedType(tag: DW_TAG_member, name: "dc", scope: !2101, file: !409, line: 239, baseType: !2112, size: 64, offset: 256)
!2112 = !DIDerivedType(tag: DW_TAG_typedef, name: "deps_t", file: !398, line: 549, baseType: !2113)
!2113 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2114, size: 64)
!2114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "deps", file: !398, line: 451, size: 1472, elements: !2115)
!2115 = !{!2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2140, !2143, !2144, !2145}
!2116 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_insns", scope: !2114, file: !398, line: 463, baseType: !850, size: 64)
!2117 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_mems", scope: !2114, file: !398, line: 466, baseType: !850, size: 64, offset: 64)
!2118 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_insns", scope: !2114, file: !398, line: 469, baseType: !850, size: 64, offset: 128)
!2119 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_mems", scope: !2114, file: !398, line: 472, baseType: !850, size: 64, offset: 192)
!2120 = !DIDerivedType(tag: DW_TAG_member, name: "pending_read_list_length", scope: !2114, file: !398, line: 480, baseType: !874, size: 32, offset: 256)
!2121 = !DIDerivedType(tag: DW_TAG_member, name: "pending_write_list_length", scope: !2114, file: !398, line: 483, baseType: !874, size: 32, offset: 288)
!2122 = !DIDerivedType(tag: DW_TAG_member, name: "pending_flush_length", scope: !2114, file: !398, line: 487, baseType: !874, size: 32, offset: 320)
!2123 = !DIDerivedType(tag: DW_TAG_member, name: "last_pending_memory_flush", scope: !2114, file: !398, line: 498, baseType: !850, size: 64, offset: 384)
!2124 = !DIDerivedType(tag: DW_TAG_member, name: "last_function_call", scope: !2114, file: !398, line: 503, baseType: !850, size: 64, offset: 448)
!2125 = !DIDerivedType(tag: DW_TAG_member, name: "last_function_call_may_noreturn", scope: !2114, file: !398, line: 509, baseType: !850, size: 64, offset: 512)
!2126 = !DIDerivedType(tag: DW_TAG_member, name: "sched_before_next_call", scope: !2114, file: !398, line: 515, baseType: !850, size: 64, offset: 576)
!2127 = !DIDerivedType(tag: DW_TAG_member, name: "in_post_call_group_p", scope: !2114, file: !398, line: 519, baseType: !397, size: 32, offset: 640)
!2128 = !DIDerivedType(tag: DW_TAG_member, name: "last_debug_insn", scope: !2114, file: !398, line: 522, baseType: !850, size: 64, offset: 704)
!2129 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg", scope: !2114, file: !398, line: 526, baseType: !874, size: 32, offset: 768)
!2130 = !DIDerivedType(tag: DW_TAG_member, name: "reg_last", scope: !2114, file: !398, line: 532, baseType: !2131, size: 64, offset: 832)
!2131 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2132, size: 64)
!2132 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "deps_reg", file: !398, line: 440, size: 320, elements: !2133)
!2133 = !{!2134, !2135, !2136, !2137, !2138, !2139}
!2134 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !2132, file: !398, line: 442, baseType: !850, size: 64)
!2135 = !DIDerivedType(tag: DW_TAG_member, name: "sets", scope: !2132, file: !398, line: 443, baseType: !850, size: 64, offset: 64)
!2136 = !DIDerivedType(tag: DW_TAG_member, name: "implicit_sets", scope: !2132, file: !398, line: 444, baseType: !850, size: 64, offset: 128)
!2137 = !DIDerivedType(tag: DW_TAG_member, name: "clobbers", scope: !2132, file: !398, line: 445, baseType: !850, size: 64, offset: 192)
!2138 = !DIDerivedType(tag: DW_TAG_member, name: "uses_length", scope: !2132, file: !398, line: 446, baseType: !874, size: 32, offset: 256)
!2139 = !DIDerivedType(tag: DW_TAG_member, name: "clobbers_length", scope: !2132, file: !398, line: 447, baseType: !874, size: 32, offset: 288)
!2140 = !DIDerivedType(tag: DW_TAG_member, name: "reg_last_in_use", scope: !2114, file: !398, line: 536, baseType: !2141, size: 256, offset: 896)
!2141 = !DIDerivedType(tag: DW_TAG_typedef, name: "regset_head", file: !155, line: 34, baseType: !2142)
!2142 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_head", file: !910, line: 84, baseType: !909)
!2143 = !DIDerivedType(tag: DW_TAG_member, name: "reg_conditional_sets", scope: !2114, file: !398, line: 539, baseType: !2141, size: 256, offset: 1152)
!2144 = !DIDerivedType(tag: DW_TAG_member, name: "last_reg_pending_barrier", scope: !2114, file: !398, line: 542, baseType: !403, size: 32, offset: 1408)
!2145 = !DIDerivedType(tag: DW_TAG_member, name: "readonly", scope: !2114, file: !398, line: 546, baseType: !7, size: 1, offset: 1440, flags: DIFlagBitField, extraData: i64 1440)
!2146 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2097, file: !409, line: 362, baseType: !2147, size: 512)
!2147 = !DIDerivedType(tag: DW_TAG_typedef, name: "expr_def", file: !409, line: 170, baseType: !2148)
!2148 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_expr", file: !409, line: 105, size: 512, elements: !2149)
!2149 = !{!2150, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2200, !2201, !2202, !2203, !2204}
!2150 = !DIDerivedType(tag: DW_TAG_member, name: "vinsn", scope: !2148, file: !409, line: 108, baseType: !2151, size: 64)
!2151 = !DIDerivedType(tag: DW_TAG_typedef, name: "vinsn_t", file: !409, line: 55, baseType: !2152)
!2152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2153, size: 64)
!2153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "vinsn_def", file: !409, line: 629, size: 640, elements: !2154)
!2154 = !{!2155, !2156, !2165, !2166, !2167, !2168, !2169}
!2155 = !DIDerivedType(tag: DW_TAG_member, name: "insn_rtx", scope: !2153, file: !409, line: 632, baseType: !850, size: 64)
!2156 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2153, file: !409, line: 635, baseType: !2157, size: 384, offset: 64)
!2157 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "idata_def", file: !409, line: 573, size: 384, elements: !2158)
!2158 = !{!2159, !2160, !2161, !2162, !2163, !2164}
!2159 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2157, file: !409, line: 585, baseType: !874, size: 32)
!2160 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !2157, file: !409, line: 588, baseType: !850, size: 64, offset: 64)
!2161 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !2157, file: !409, line: 591, baseType: !850, size: 64, offset: 128)
!2162 = !DIDerivedType(tag: DW_TAG_member, name: "reg_sets", scope: !2157, file: !409, line: 602, baseType: !2053, size: 64, offset: 192)
!2163 = !DIDerivedType(tag: DW_TAG_member, name: "reg_clobbers", scope: !2157, file: !409, line: 604, baseType: !2053, size: 64, offset: 256)
!2164 = !DIDerivedType(tag: DW_TAG_member, name: "reg_uses", scope: !2157, file: !409, line: 606, baseType: !2053, size: 64, offset: 320)
!2165 = !DIDerivedType(tag: DW_TAG_member, name: "hash", scope: !2153, file: !409, line: 639, baseType: !7, size: 32, offset: 448)
!2166 = !DIDerivedType(tag: DW_TAG_member, name: "hash_rtx", scope: !2153, file: !409, line: 642, baseType: !7, size: 32, offset: 480)
!2167 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2153, file: !409, line: 645, baseType: !874, size: 32, offset: 512)
!2168 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !2153, file: !409, line: 648, baseType: !874, size: 32, offset: 544)
!2169 = !DIDerivedType(tag: DW_TAG_member, name: "may_trap_p", scope: !2153, file: !409, line: 651, baseType: !1085, size: 8, offset: 576)
!2170 = !DIDerivedType(tag: DW_TAG_member, name: "spec", scope: !2148, file: !409, line: 115, baseType: !874, size: 32, offset: 64)
!2171 = !DIDerivedType(tag: DW_TAG_member, name: "usefulness", scope: !2148, file: !409, line: 120, baseType: !874, size: 32, offset: 96)
!2172 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !2148, file: !409, line: 123, baseType: !874, size: 32, offset: 128)
!2173 = !DIDerivedType(tag: DW_TAG_member, name: "priority_adj", scope: !2148, file: !409, line: 126, baseType: !874, size: 32, offset: 160)
!2174 = !DIDerivedType(tag: DW_TAG_member, name: "sched_times", scope: !2148, file: !409, line: 129, baseType: !874, size: 32, offset: 192)
!2175 = !DIDerivedType(tag: DW_TAG_member, name: "orig_bb_index", scope: !2148, file: !409, line: 133, baseType: !874, size: 32, offset: 224)
!2176 = !DIDerivedType(tag: DW_TAG_member, name: "spec_done_ds", scope: !2148, file: !409, line: 137, baseType: !2056, size: 32, offset: 256)
!2177 = !DIDerivedType(tag: DW_TAG_member, name: "spec_to_check_ds", scope: !2148, file: !409, line: 141, baseType: !2056, size: 32, offset: 288)
!2178 = !DIDerivedType(tag: DW_TAG_member, name: "orig_sched_cycle", scope: !2148, file: !409, line: 145, baseType: !874, size: 32, offset: 320)
!2179 = !DIDerivedType(tag: DW_TAG_member, name: "history_of_changes", scope: !2148, file: !409, line: 148, baseType: !2180, size: 64, offset: 384)
!2180 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2181, size: 64)
!2181 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_expr_history_def_heap", file: !409, line: 102, baseType: !2182)
!2182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_expr_history_def_heap", file: !409, line: 102, size: 320, elements: !2183)
!2183 = !{!2184}
!2184 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2182, file: !409, line: 102, baseType: !2185, size: 320)
!2185 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_expr_history_def_base", file: !409, line: 101, baseType: !2186)
!2186 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_expr_history_def_base", file: !409, line: 101, size: 320, elements: !2187)
!2187 = !{!2188, !2189, !2190}
!2188 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2186, file: !409, line: 101, baseType: !7, size: 32)
!2189 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2186, file: !409, line: 101, baseType: !7, size: 32, offset: 32)
!2190 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2186, file: !409, line: 101, baseType: !2191, size: 256, offset: 64)
!2191 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2192, size: 256, elements: !889)
!2192 = !DIDerivedType(tag: DW_TAG_typedef, name: "expr_history_def", file: !409, line: 99, baseType: !2193)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "expr_history_def_1", file: !409, line: 81, size: 256, elements: !2194)
!2194 = !{!2195, !2196, !2197, !2198, !2199}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2193, file: !409, line: 84, baseType: !7, size: 32)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "old_expr_vinsn", scope: !2193, file: !409, line: 87, baseType: !2151, size: 64, offset: 64)
!2197 = !DIDerivedType(tag: DW_TAG_member, name: "new_expr_vinsn", scope: !2193, file: !409, line: 90, baseType: !2151, size: 64, offset: 128)
!2198 = !DIDerivedType(tag: DW_TAG_member, name: "spec_ds", scope: !2193, file: !409, line: 93, baseType: !2056, size: 32, offset: 192)
!2199 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2193, file: !409, line: 96, baseType: !408, size: 32, offset: 224)
!2200 = !DIDerivedType(tag: DW_TAG_member, name: "target_available", scope: !2148, file: !409, line: 153, baseType: !1823, size: 8, offset: 448)
!2201 = !DIDerivedType(tag: DW_TAG_member, name: "needs_spec_check_p", scope: !2148, file: !409, line: 157, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 456)
!2202 = !DIDerivedType(tag: DW_TAG_member, name: "was_substituted", scope: !2148, file: !409, line: 161, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 456)
!2203 = !DIDerivedType(tag: DW_TAG_member, name: "was_renamed", scope: !2148, file: !409, line: 164, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 456)
!2204 = !DIDerivedType(tag: DW_TAG_member, name: "cant_move", scope: !2148, file: !409, line: 167, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 456)
!2205 = !DIDerivedType(tag: DW_TAG_member, name: "fence", scope: !2097, file: !409, line: 363, baseType: !2206, size: 832)
!2206 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_fence", file: !409, line: 259, size: 832, elements: !2207)
!2207 = !{!2208, !2209, !2212, !2213, !2214, !2215, !2216, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227}
!2208 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !2206, file: !409, line: 262, baseType: !2104, size: 64)
!2209 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !2206, file: !409, line: 265, baseType: !2210, size: 64, offset: 64)
!2210 = !DIDerivedType(tag: DW_TAG_typedef, name: "state_t", file: !2211, line: 158, baseType: !962)
!2211 = !DIFile(filename: "./insn-attr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2212 = !DIDerivedType(tag: DW_TAG_member, name: "cycle", scope: !2206, file: !409, line: 268, baseType: !874, size: 32, offset: 128)
!2213 = !DIDerivedType(tag: DW_TAG_member, name: "cycle_issued_insns", scope: !2206, file: !409, line: 272, baseType: !874, size: 32, offset: 160)
!2214 = !DIDerivedType(tag: DW_TAG_member, name: "bnds", scope: !2206, file: !409, line: 276, baseType: !2106, size: 64, offset: 192)
!2215 = !DIDerivedType(tag: DW_TAG_member, name: "dc", scope: !2206, file: !409, line: 280, baseType: !2112, size: 64, offset: 256)
!2216 = !DIDerivedType(tag: DW_TAG_member, name: "tc", scope: !2206, file: !409, line: 284, baseType: !2217, size: 64, offset: 320)
!2217 = !DIDerivedType(tag: DW_TAG_typedef, name: "tc_t", file: !409, line: 38, baseType: !962)
!2218 = !DIDerivedType(tag: DW_TAG_member, name: "executing_insns", scope: !2206, file: !409, line: 287, baseType: !2036, size: 64, offset: 384)
!2219 = !DIDerivedType(tag: DW_TAG_member, name: "ready_ticks", scope: !2206, file: !409, line: 291, baseType: !2051, size: 64, offset: 448)
!2220 = !DIDerivedType(tag: DW_TAG_member, name: "ready_ticks_size", scope: !2206, file: !409, line: 294, baseType: !874, size: 32, offset: 512)
!2221 = !DIDerivedType(tag: DW_TAG_member, name: "last_scheduled_insn", scope: !2206, file: !409, line: 297, baseType: !850, size: 64, offset: 576)
!2222 = !DIDerivedType(tag: DW_TAG_member, name: "issue_more", scope: !2206, file: !409, line: 300, baseType: !874, size: 32, offset: 640)
!2223 = !DIDerivedType(tag: DW_TAG_member, name: "sched_next", scope: !2206, file: !409, line: 303, baseType: !850, size: 64, offset: 704)
!2224 = !DIDerivedType(tag: DW_TAG_member, name: "processed_p", scope: !2206, file: !409, line: 306, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2225 = !DIDerivedType(tag: DW_TAG_member, name: "scheduled_p", scope: !2206, file: !409, line: 309, baseType: !7, size: 1, offset: 769, flags: DIFlagBitField, extraData: i64 768)
!2226 = !DIDerivedType(tag: DW_TAG_member, name: "starts_cycle_p", scope: !2206, file: !409, line: 312, baseType: !7, size: 1, offset: 770, flags: DIFlagBitField, extraData: i64 768)
!2227 = !DIDerivedType(tag: DW_TAG_member, name: "after_stall_p", scope: !2206, file: !409, line: 315, baseType: !7, size: 1, offset: 771, flags: DIFlagBitField, extraData: i64 768)
!2228 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2097, file: !409, line: 364, baseType: !2229, size: 128)
!2229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_def", file: !409, line: 201, size: 128, elements: !2230)
!2230 = !{!2231, !2232}
!2231 = !DIDerivedType(tag: DW_TAG_member, name: "orig_insn", scope: !2229, file: !409, line: 203, baseType: !2104, size: 64)
!2232 = !DIDerivedType(tag: DW_TAG_member, name: "crosses_call", scope: !2229, file: !409, line: 210, baseType: !1085, size: 8, offset: 64)
!2233 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2097, file: !409, line: 365, baseType: !962, size: 64)
!2234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2235, size: 64)
!2235 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !155, line: 152, baseType: !2236)
!2236 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !155, line: 152, size: 128, elements: !2237)
!2237 = !{!2238}
!2238 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2236, file: !155, line: 152, baseType: !1401, size: 128)
!2239 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2240, size: 64)
!2240 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !853)
!2241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2242, size: 64)
!2242 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2243)
!2243 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "transformed_insns", file: !409, line: 675, size: 256, elements: !2244)
!2244 = !{!2245, !2246, !2247, !2248, !2249, !2250}
!2245 = !DIDerivedType(tag: DW_TAG_member, name: "vinsn_old", scope: !2243, file: !409, line: 678, baseType: !2151, size: 64)
!2246 = !DIDerivedType(tag: DW_TAG_member, name: "vinsn_new", scope: !2243, file: !409, line: 681, baseType: !2151, size: 64, offset: 64)
!2247 = !DIDerivedType(tag: DW_TAG_member, name: "ds", scope: !2243, file: !409, line: 684, baseType: !2056, size: 32, offset: 128)
!2248 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2243, file: !409, line: 687, baseType: !408, size: 32, offset: 160)
!2249 = !DIDerivedType(tag: DW_TAG_member, name: "was_target_conflict", scope: !2243, file: !409, line: 690, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!2250 = !DIDerivedType(tag: DW_TAG_member, name: "needs_check", scope: !2243, file: !409, line: 693, baseType: !7, size: 1, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!2251 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2243, size: 64)
!2252 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2253, size: 64)
!2253 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_global_bb_info_def_heap", file: !409, line: 889, baseType: !2254)
!2254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_global_bb_info_def_heap", file: !409, line: 889, size: 192, elements: !2255)
!2255 = !{!2256}
!2256 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2254, file: !409, line: 889, baseType: !2257, size: 192)
!2257 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_global_bb_info_def_base", file: !409, line: 888, baseType: !2258)
!2258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_global_bb_info_def_base", file: !409, line: 888, size: 192, elements: !2259)
!2259 = !{!2260, !2261, !2262}
!2260 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2258, file: !409, line: 888, baseType: !7, size: 32)
!2261 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2258, file: !409, line: 888, baseType: !7, size: 32, offset: 32)
!2262 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2258, file: !409, line: 888, baseType: !2263, size: 128, offset: 64)
!2263 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2264, size: 128, elements: !889)
!2264 = !DIDerivedType(tag: DW_TAG_typedef, name: "sel_global_bb_info_def", file: !409, line: 884, baseType: !2265)
!2265 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !409, line: 872, size: 128, elements: !2266)
!2266 = !{!2267, !2268}
!2267 = !DIDerivedType(tag: DW_TAG_member, name: "lv_set", scope: !2265, file: !409, line: 878, baseType: !2053, size: 64)
!2268 = !DIDerivedType(tag: DW_TAG_member, name: "lv_set_valid_p", scope: !2265, file: !409, line: 883, baseType: !1085, size: 8, offset: 64)
!2269 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2270, size: 64)
!2270 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_insn_data_def_heap", file: !409, line: 763, baseType: !2271)
!2271 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_insn_data_def_heap", file: !409, line: 763, size: 2624, elements: !2272)
!2272 = !{!2273}
!2273 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2271, file: !409, line: 763, baseType: !2274, size: 2624)
!2274 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_insn_data_def_base", file: !409, line: 762, baseType: !2275)
!2275 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_insn_data_def_base", file: !409, line: 762, size: 2624, elements: !2276)
!2276 = !{!2277, !2278, !2279}
!2277 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2275, file: !409, line: 762, baseType: !7, size: 32)
!2278 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2275, file: !409, line: 762, baseType: !7, size: 32, offset: 32)
!2279 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2275, file: !409, line: 762, baseType: !2280, size: 2560, offset: 64)
!2280 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2281, size: 2560, elements: !889)
!2281 = !DIDerivedType(tag: DW_TAG_typedef, name: "sel_insn_data_def", file: !409, line: 759, baseType: !2282)
!2282 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_sel_insn_data", file: !409, line: 698, size: 2560, elements: !2283)
!2283 = !{!2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299}
!2284 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2282, file: !409, line: 702, baseType: !2147, size: 512)
!2285 = !DIDerivedType(tag: DW_TAG_member, name: "ws_level", scope: !2282, file: !409, line: 705, baseType: !874, size: 32, offset: 512)
!2286 = !DIDerivedType(tag: DW_TAG_member, name: "seqno", scope: !2282, file: !409, line: 708, baseType: !874, size: 32, offset: 544)
!2287 = !DIDerivedType(tag: DW_TAG_member, name: "live", scope: !2282, file: !409, line: 711, baseType: !2053, size: 64, offset: 576)
!2288 = !DIDerivedType(tag: DW_TAG_member, name: "analyzed_deps", scope: !2282, file: !409, line: 714, baseType: !2054, size: 64, offset: 640)
!2289 = !DIDerivedType(tag: DW_TAG_member, name: "found_deps", scope: !2282, file: !409, line: 719, baseType: !2054, size: 64, offset: 704)
!2290 = !DIDerivedType(tag: DW_TAG_member, name: "originators", scope: !2282, file: !409, line: 724, baseType: !2054, size: 64, offset: 768)
!2291 = !DIDerivedType(tag: DW_TAG_member, name: "transformed_insns", scope: !2282, file: !409, line: 727, baseType: !1303, size: 64, offset: 832)
!2292 = !DIDerivedType(tag: DW_TAG_member, name: "deps_context", scope: !2282, file: !409, line: 730, baseType: !2114, size: 1472, offset: 896)
!2293 = !DIDerivedType(tag: DW_TAG_member, name: "sched_next", scope: !2282, file: !409, line: 736, baseType: !2104, size: 64, offset: 2368)
!2294 = !DIDerivedType(tag: DW_TAG_member, name: "sched_cycle", scope: !2282, file: !409, line: 740, baseType: !874, size: 32, offset: 2432)
!2295 = !DIDerivedType(tag: DW_TAG_member, name: "ready_cycle", scope: !2282, file: !409, line: 743, baseType: !874, size: 32, offset: 2464)
!2296 = !DIDerivedType(tag: DW_TAG_member, name: "spec_checked_ds", scope: !2282, file: !409, line: 746, baseType: !2056, size: 32, offset: 2496)
!2297 = !DIDerivedType(tag: DW_TAG_member, name: "live_valid_p", scope: !2282, file: !409, line: 749, baseType: !7, size: 1, offset: 2528, flags: DIFlagBitField, extraData: i64 2528)
!2298 = !DIDerivedType(tag: DW_TAG_member, name: "asm_p", scope: !2282, file: !409, line: 751, baseType: !7, size: 1, offset: 2529, flags: DIFlagBitField, extraData: i64 2528)
!2299 = !DIDerivedType(tag: DW_TAG_member, name: "after_stall_p", scope: !2282, file: !409, line: 756, baseType: !7, size: 1, offset: 2530, flags: DIFlagBitField, extraData: i64 2528)
!2300 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2301, size: 64)
!2301 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_lr_bb_info", file: !796, line: 826, size: 256, elements: !2302)
!2302 = !{!2303, !2304, !2305, !2306}
!2303 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !2301, file: !796, line: 829, baseType: !2054, size: 64)
!2304 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !2301, file: !796, line: 831, baseType: !2054, size: 64, offset: 64)
!2305 = !DIDerivedType(tag: DW_TAG_member, name: "in", scope: !2301, file: !796, line: 834, baseType: !2054, size: 64, offset: 128)
!2306 = !DIDerivedType(tag: DW_TAG_member, name: "out", scope: !2301, file: !796, line: 835, baseType: !2054, size: 64, offset: 192)
!2307 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2308, size: 64)
!2308 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_region_bb_info_def_heap", file: !409, line: 923, baseType: !2309)
!2309 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_region_bb_info_def_heap", file: !409, line: 923, size: 256, elements: !2310)
!2310 = !{!2311}
!2311 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2309, file: !409, line: 923, baseType: !2312, size: 256)
!2312 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_sel_region_bb_info_def_base", file: !409, line: 922, baseType: !2313)
!2313 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_sel_region_bb_info_def_base", file: !409, line: 922, size: 256, elements: !2314)
!2314 = !{!2315, !2316, !2317}
!2315 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2313, file: !409, line: 922, baseType: !7, size: 32)
!2316 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2313, file: !409, line: 922, baseType: !7, size: 32, offset: 32)
!2317 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2313, file: !409, line: 922, baseType: !2318, size: 192, offset: 64)
!2318 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2319, size: 192, elements: !889)
!2319 = !DIDerivedType(tag: DW_TAG_typedef, name: "sel_region_bb_info_def", file: !409, line: 918, baseType: !2320)
!2320 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !409, line: 906, size: 192, elements: !2321)
!2321 = !{!2322, !2323, !2324}
!2322 = !DIDerivedType(tag: DW_TAG_member, name: "note_list", scope: !2320, file: !409, line: 910, baseType: !850, size: 64)
!2323 = !DIDerivedType(tag: DW_TAG_member, name: "av_set", scope: !2320, file: !409, line: 914, baseType: !2109, size: 64, offset: 64)
!2324 = !DIDerivedType(tag: DW_TAG_member, name: "av_level", scope: !2320, file: !409, line: 917, baseType: !874, size: 32, offset: 128)
!2325 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2104, size: 64)
!2326 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2327, size: 64)
!2327 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1391)
!2328 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2329, size: 64)
!2329 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_heap", file: !142, line: 86, baseType: !2330)
!2330 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_heap", file: !142, line: 86, size: 128, elements: !2331)
!2331 = !{!2332}
!2332 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2330, file: !142, line: 86, baseType: !1453, size: 128)
!2333 = !{!0, !2334, !2336, !2338, !2340, !2342, !2344, !2367, !2369, !2390, !2392, !2559, !2562, !2573, !2582, !2590, !2592, !2594, !2631, !2642, !2649, !2651, !2653, !2658, !2660, !2663, !2665, !2669, !2671, !2673, !2675, !2677, !2687, !2689, !2691, !2735, !2737, !2739, !2741}
!2334 = !DIGlobalVariableExpression(var: !2335, expr: !DIExpression())
!2335 = distinct !DIGlobalVariable(name: "sel_region_bb_info", scope: !2, file: !3, line: 56, type: !2307, isLocal: false, isDefinition: true)
!2336 = !DIGlobalVariableExpression(var: !2337, expr: !DIExpression())
!2337 = distinct !DIGlobalVariable(name: "nop_pattern", scope: !2, file: !3, line: 132, type: !850, isLocal: false, isDefinition: true)
!2338 = !DIGlobalVariableExpression(var: !2339, expr: !DIExpression())
!2339 = distinct !DIGlobalVariable(name: "exit_insn", scope: !2, file: !3, line: 135, type: !850, isLocal: false, isDefinition: true)
!2340 = !DIGlobalVariableExpression(var: !2341, expr: !DIExpression())
!2341 = distinct !DIGlobalVariable(name: "preheader_removed", scope: !2, file: !3, line: 139, type: !1085, isLocal: false, isDefinition: true)
!2342 = !DIGlobalVariableExpression(var: !2343, expr: !DIExpression())
!2343 = distinct !DIGlobalVariable(name: "s_i_d", scope: !2, file: !3, line: 3924, type: !2269, isLocal: false, isDefinition: true)
!2344 = !DIGlobalVariableExpression(var: !2345, expr: !DIExpression())
!2345 = distinct !DIGlobalVariable(name: "sched_lists_pool", scope: !2, file: !3, line: 59, type: !2346, isLocal: false, isDefinition: true)
!2346 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool", file: !2347, line: 58, baseType: !2348)
!2347 = !DIFile(filename: "./alloc-pool.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2348 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2349, size: 64)
!2349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_def", file: !2347, line: 32, size: 704, elements: !2350)
!2350 = !{!2351, !2352, !2353, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366}
!2351 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2349, file: !2347, line: 34, baseType: !877, size: 64)
!2352 = !DIDerivedType(tag: DW_TAG_member, name: "elts_per_block", scope: !2349, file: !2347, line: 38, baseType: !1329, size: 64, offset: 64)
!2353 = !DIDerivedType(tag: DW_TAG_member, name: "returned_free_list", scope: !2349, file: !2347, line: 41, baseType: !2354, size: 64, offset: 128)
!2354 = !DIDerivedType(tag: DW_TAG_typedef, name: "alloc_pool_list", file: !2347, line: 30, baseType: !2355)
!2355 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2356, size: 64)
!2356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "alloc_pool_list_def", file: !2347, line: 26, size: 64, elements: !2357)
!2357 = !{!2358}
!2358 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2356, file: !2347, line: 28, baseType: !2355, size: 64)
!2359 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_free_list", scope: !2349, file: !2347, line: 45, baseType: !947, size: 64, offset: 192)
!2360 = !DIDerivedType(tag: DW_TAG_member, name: "virgin_elts_remaining", scope: !2349, file: !2347, line: 49, baseType: !1329, size: 64, offset: 256)
!2361 = !DIDerivedType(tag: DW_TAG_member, name: "elts_allocated", scope: !2349, file: !2347, line: 51, baseType: !1329, size: 64, offset: 320)
!2362 = !DIDerivedType(tag: DW_TAG_member, name: "elts_free", scope: !2349, file: !2347, line: 52, baseType: !1329, size: 64, offset: 384)
!2363 = !DIDerivedType(tag: DW_TAG_member, name: "blocks_allocated", scope: !2349, file: !2347, line: 53, baseType: !1329, size: 64, offset: 448)
!2364 = !DIDerivedType(tag: DW_TAG_member, name: "block_list", scope: !2349, file: !2347, line: 54, baseType: !2354, size: 64, offset: 512)
!2365 = !DIDerivedType(tag: DW_TAG_member, name: "block_size", scope: !2349, file: !2347, line: 55, baseType: !1329, size: 64, offset: 576)
!2366 = !DIDerivedType(tag: DW_TAG_member, name: "elt_size", scope: !2349, file: !2347, line: 56, baseType: !1329, size: 64, offset: 640)
!2367 = !DIGlobalVariableExpression(var: !2368, expr: !DIExpression())
!2368 = distinct !DIGlobalVariable(name: "current_succs", scope: !2, file: !3, line: 62, type: !2058, isLocal: false, isDefinition: true)
!2369 = !DIGlobalVariableExpression(var: !2370, expr: !DIExpression())
!2370 = distinct !DIGlobalVariable(name: "sel_common_sched_info", scope: !2, file: !3, line: 65, type: !2371, isLocal: true, isDefinition: true)
!2371 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "common_sched_info_def", file: !398, line: 81, size: 320, elements: !2372)
!2372 = !{!2373, !2377, !2381, !2385, !2389}
!2373 = !DIDerivedType(tag: DW_TAG_member, name: "fix_recovery_cfg", scope: !2371, file: !398, line: 89, baseType: !2374, size: 64)
!2374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2375, size: 64)
!2375 = !DISubroutineType(types: !2376)
!2376 = !{null, !874, !874, !874}
!2377 = !DIDerivedType(tag: DW_TAG_member, name: "add_block", scope: !2371, file: !398, line: 96, baseType: !2378, size: 64, offset: 64)
!2378 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2379, size: 64)
!2379 = !DISubroutineType(types: !2380)
!2380 = !{null, !1391, !1391}
!2381 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_number_of_insns", scope: !2371, file: !398, line: 99, baseType: !2382, size: 64, offset: 128)
!2382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2383, size: 64)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{!874, !1391}
!2385 = !DIDerivedType(tag: DW_TAG_member, name: "luid_for_non_insn", scope: !2371, file: !398, line: 105, baseType: !2386, size: 64, offset: 192)
!2386 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2387, size: 64)
!2387 = !DISubroutineType(types: !2388)
!2388 = !{!874, !850}
!2389 = !DIDerivedType(tag: DW_TAG_member, name: "sched_pass_id", scope: !2371, file: !398, line: 108, baseType: !691, size: 32, offset: 256)
!2390 = !DIGlobalVariableExpression(var: !2391, expr: !DIExpression())
!2391 = distinct !DIGlobalVariable(name: "current_loop_nest", scope: !2, file: !3, line: 68, type: !1433, isLocal: false, isDefinition: true)
!2392 = !DIGlobalVariableExpression(var: !2393, expr: !DIExpression())
!2393 = distinct !DIGlobalVariable(name: "orig_cfg_hooks", scope: !2, file: !3, line: 78, type: !2394, isLocal: true, isDefinition: true)
!2394 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cfg_hooks", file: !2395, line: 25, size: 1856, elements: !2396)
!2395 = !DIFile(filename: "./cfghooks.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2396 = !{!2397, !2398, !2402, !2457, !2461, !2465, !2469, !2476, !2480, !2484, !2488, !2489, !2490, !2494, !2501, !2505, !2509, !2513, !2517, !2518, !2522, !2523, !2538, !2539, !2540, !2545, !2549, !2553, !2558}
!2397 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2394, file: !2395, line: 28, baseType: !877, size: 64)
!2398 = !DIDerivedType(tag: DW_TAG_member, name: "verify_flow_info", scope: !2394, file: !2395, line: 31, baseType: !2399, size: 64, offset: 64)
!2399 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2400, size: 64)
!2400 = !DISubroutineType(types: !2401)
!2401 = !{!874}
!2402 = !DIDerivedType(tag: DW_TAG_member, name: "dump_bb", scope: !2394, file: !2395, line: 32, baseType: !2403, size: 64, offset: 128)
!2403 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2404, size: 64)
!2404 = !DISubroutineType(types: !2405)
!2405 = !{null, !1391, !2406, !874, !874}
!2406 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2407, size: 64)
!2407 = !DIDerivedType(tag: DW_TAG_typedef, name: "FILE", file: !2408, line: 7, baseType: !2409)
!2408 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/FILE.h", directory: "")
!2409 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_FILE", file: !2410, line: 49, size: 1728, elements: !2411)
!2410 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h", directory: "")
!2411 = !{!2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2427, !2429, !2430, !2431, !2434, !2436, !2437, !2438, !2441, !2443, !2446, !2449, !2450, !2451, !2452, !2453}
!2412 = !DIDerivedType(tag: DW_TAG_member, name: "_flags", scope: !2409, file: !2410, line: 51, baseType: !874, size: 32)
!2413 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_ptr", scope: !2409, file: !2410, line: 54, baseType: !947, size: 64, offset: 64)
!2414 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_end", scope: !2409, file: !2410, line: 55, baseType: !947, size: 64, offset: 128)
!2415 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_read_base", scope: !2409, file: !2410, line: 56, baseType: !947, size: 64, offset: 192)
!2416 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_base", scope: !2409, file: !2410, line: 57, baseType: !947, size: 64, offset: 256)
!2417 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_ptr", scope: !2409, file: !2410, line: 58, baseType: !947, size: 64, offset: 320)
!2418 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_write_end", scope: !2409, file: !2410, line: 59, baseType: !947, size: 64, offset: 384)
!2419 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_base", scope: !2409, file: !2410, line: 60, baseType: !947, size: 64, offset: 448)
!2420 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_buf_end", scope: !2409, file: !2410, line: 61, baseType: !947, size: 64, offset: 512)
!2421 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_base", scope: !2409, file: !2410, line: 64, baseType: !947, size: 64, offset: 576)
!2422 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_backup_base", scope: !2409, file: !2410, line: 65, baseType: !947, size: 64, offset: 640)
!2423 = !DIDerivedType(tag: DW_TAG_member, name: "_IO_save_end", scope: !2409, file: !2410, line: 66, baseType: !947, size: 64, offset: 704)
!2424 = !DIDerivedType(tag: DW_TAG_member, name: "_markers", scope: !2409, file: !2410, line: 68, baseType: !2425, size: 64, offset: 768)
!2425 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2426, size: 64)
!2426 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_marker", file: !2410, line: 36, flags: DIFlagFwdDecl)
!2427 = !DIDerivedType(tag: DW_TAG_member, name: "_chain", scope: !2409, file: !2410, line: 70, baseType: !2428, size: 64, offset: 832)
!2428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2409, size: 64)
!2429 = !DIDerivedType(tag: DW_TAG_member, name: "_fileno", scope: !2409, file: !2410, line: 72, baseType: !874, size: 32, offset: 896)
!2430 = !DIDerivedType(tag: DW_TAG_member, name: "_flags2", scope: !2409, file: !2410, line: 73, baseType: !874, size: 32, offset: 928)
!2431 = !DIDerivedType(tag: DW_TAG_member, name: "_old_offset", scope: !2409, file: !2410, line: 74, baseType: !2432, size: 64, offset: 960)
!2432 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off_t", file: !2433, line: 152, baseType: !941)
!2433 = !DIFile(filename: "/usr/include/x86_64-linux-gnu/bits/types.h", directory: "")
!2434 = !DIDerivedType(tag: DW_TAG_member, name: "_cur_column", scope: !2409, file: !2410, line: 77, baseType: !2435, size: 16, offset: 1024)
!2435 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!2436 = !DIDerivedType(tag: DW_TAG_member, name: "_vtable_offset", scope: !2409, file: !2410, line: 78, baseType: !1823, size: 8, offset: 1040)
!2437 = !DIDerivedType(tag: DW_TAG_member, name: "_shortbuf", scope: !2409, file: !2410, line: 79, baseType: !1067, size: 8, offset: 1048)
!2438 = !DIDerivedType(tag: DW_TAG_member, name: "_lock", scope: !2409, file: !2410, line: 81, baseType: !2439, size: 64, offset: 1088)
!2439 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2440, size: 64)
!2440 = !DIDerivedType(tag: DW_TAG_typedef, name: "_IO_lock_t", file: !2410, line: 43, baseType: null)
!2441 = !DIDerivedType(tag: DW_TAG_member, name: "_offset", scope: !2409, file: !2410, line: 89, baseType: !2442, size: 64, offset: 1152)
!2442 = !DIDerivedType(tag: DW_TAG_typedef, name: "__off64_t", file: !2433, line: 153, baseType: !941)
!2443 = !DIDerivedType(tag: DW_TAG_member, name: "_codecvt", scope: !2409, file: !2410, line: 91, baseType: !2444, size: 64, offset: 1216)
!2444 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2445, size: 64)
!2445 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_codecvt", file: !2410, line: 37, flags: DIFlagFwdDecl)
!2446 = !DIDerivedType(tag: DW_TAG_member, name: "_wide_data", scope: !2409, file: !2410, line: 92, baseType: !2447, size: 64, offset: 1280)
!2447 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2448, size: 64)
!2448 = !DICompositeType(tag: DW_TAG_structure_type, name: "_IO_wide_data", file: !2410, line: 38, flags: DIFlagFwdDecl)
!2449 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_list", scope: !2409, file: !2410, line: 93, baseType: !2428, size: 64, offset: 1344)
!2450 = !DIDerivedType(tag: DW_TAG_member, name: "_freeres_buf", scope: !2409, file: !2410, line: 94, baseType: !962, size: 64, offset: 1408)
!2451 = !DIDerivedType(tag: DW_TAG_member, name: "__pad5", scope: !2409, file: !2410, line: 95, baseType: !1329, size: 64, offset: 1472)
!2452 = !DIDerivedType(tag: DW_TAG_member, name: "_mode", scope: !2409, file: !2410, line: 96, baseType: !874, size: 32, offset: 1536)
!2453 = !DIDerivedType(tag: DW_TAG_member, name: "_unused2", scope: !2409, file: !2410, line: 98, baseType: !2454, size: 160, offset: 1568)
!2454 = !DICompositeType(tag: DW_TAG_array_type, baseType: !879, size: 160, elements: !2455)
!2455 = !{!2456}
!2456 = !DISubrange(count: 20)
!2457 = !DIDerivedType(tag: DW_TAG_member, name: "create_basic_block", scope: !2394, file: !2395, line: 37, baseType: !2458, size: 64, offset: 192)
!2458 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2459, size: 64)
!2459 = !DISubroutineType(types: !2460)
!2460 = !{!1391, !962, !962, !1391}
!2461 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch", scope: !2394, file: !2395, line: 43, baseType: !2462, size: 64, offset: 256)
!2462 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2463, size: 64)
!2463 = !DISubroutineType(types: !2464)
!2464 = !{!1408, !1408, !1391}
!2465 = !DIDerivedType(tag: DW_TAG_member, name: "redirect_edge_and_branch_force", scope: !2394, file: !2395, line: 48, baseType: !2466, size: 64, offset: 320)
!2466 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2467, size: 64)
!2467 = !DISubroutineType(types: !2468)
!2468 = !{!1391, !1408, !1391}
!2469 = !DIDerivedType(tag: DW_TAG_member, name: "can_remove_branch_p", scope: !2394, file: !2395, line: 52, baseType: !2470, size: 64, offset: 384)
!2470 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2471, size: 64)
!2471 = !DISubroutineType(types: !2472)
!2472 = !{!1085, !2473}
!2473 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_edge", file: !851, line: 109, baseType: !2474)
!2474 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2475, size: 64)
!2475 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1410)
!2476 = !DIDerivedType(tag: DW_TAG_member, name: "delete_basic_block", scope: !2394, file: !2395, line: 55, baseType: !2477, size: 64, offset: 448)
!2477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2478, size: 64)
!2478 = !DISubroutineType(types: !2479)
!2479 = !{null, !1391}
!2480 = !DIDerivedType(tag: DW_TAG_member, name: "split_block", scope: !2394, file: !2395, line: 59, baseType: !2481, size: 64, offset: 512)
!2481 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2482, size: 64)
!2482 = !DISubroutineType(types: !2483)
!2483 = !{!1391, !1391, !962}
!2484 = !DIDerivedType(tag: DW_TAG_member, name: "move_block_after", scope: !2394, file: !2395, line: 62, baseType: !2485, size: 64, offset: 576)
!2485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2486, size: 64)
!2486 = !DISubroutineType(types: !2487)
!2487 = !{!1085, !1391, !1391}
!2488 = !DIDerivedType(tag: DW_TAG_member, name: "can_merge_blocks_p", scope: !2394, file: !2395, line: 65, baseType: !2485, size: 64, offset: 640)
!2489 = !DIDerivedType(tag: DW_TAG_member, name: "merge_blocks", scope: !2394, file: !2395, line: 68, baseType: !2378, size: 64, offset: 704)
!2490 = !DIDerivedType(tag: DW_TAG_member, name: "predict_edge", scope: !2394, file: !2395, line: 71, baseType: !2491, size: 64, offset: 768)
!2491 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2492, size: 64)
!2492 = !DISubroutineType(types: !2493)
!2493 = !{null, !1408, !713, !874}
!2494 = !DIDerivedType(tag: DW_TAG_member, name: "predicted_by_p", scope: !2394, file: !2395, line: 75, baseType: !2495, size: 64, offset: 832)
!2495 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2496, size: 64)
!2496 = !DISubroutineType(types: !2497)
!2497 = !{!1085, !2498, !713}
!2498 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !851, line: 112, baseType: !2499)
!2499 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2500, size: 64)
!2500 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1393)
!2501 = !DIDerivedType(tag: DW_TAG_member, name: "can_duplicate_block_p", scope: !2394, file: !2395, line: 78, baseType: !2502, size: 64, offset: 896)
!2502 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2503, size: 64)
!2503 = !DISubroutineType(types: !2504)
!2504 = !{!1085, !2498}
!2505 = !DIDerivedType(tag: DW_TAG_member, name: "duplicate_block", scope: !2394, file: !2395, line: 81, baseType: !2506, size: 64, offset: 960)
!2506 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2507, size: 64)
!2507 = !DISubroutineType(types: !2508)
!2508 = !{!1391, !1391}
!2509 = !DIDerivedType(tag: DW_TAG_member, name: "split_edge", scope: !2394, file: !2395, line: 85, baseType: !2510, size: 64, offset: 1024)
!2510 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2511, size: 64)
!2511 = !DISubroutineType(types: !2512)
!2512 = !{!1391, !1408}
!2513 = !DIDerivedType(tag: DW_TAG_member, name: "make_forwarder_block", scope: !2394, file: !2395, line: 86, baseType: !2514, size: 64, offset: 1088)
!2514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2515, size: 64)
!2515 = !DISubroutineType(types: !2516)
!2516 = !{null, !1408}
!2517 = !DIDerivedType(tag: DW_TAG_member, name: "tidy_fallthru_edge", scope: !2394, file: !2395, line: 89, baseType: !2514, size: 64, offset: 1152)
!2518 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_call_p", scope: !2394, file: !2395, line: 93, baseType: !2519, size: 64, offset: 1216)
!2519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2520, size: 64)
!2520 = !DISubroutineType(types: !2521)
!2521 = !{!1085, !1391}
!2522 = !DIDerivedType(tag: DW_TAG_member, name: "block_ends_with_condjump_p", scope: !2394, file: !2395, line: 97, baseType: !2502, size: 64, offset: 1280)
!2523 = !DIDerivedType(tag: DW_TAG_member, name: "flow_call_edges_add", scope: !2394, file: !2395, line: 106, baseType: !2524, size: 64, offset: 1344)
!2524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2525, size: 64)
!2525 = !DISubroutineType(types: !2526)
!2526 = !{!874, !2527}
!2527 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2528, line: 45, baseType: !2529)
!2528 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2529 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2530, size: 64)
!2530 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2528, line: 39, size: 192, elements: !2531)
!2531 = !{!2532, !2534, !2535, !2536}
!2532 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2530, file: !2528, line: 41, baseType: !2533, size: 64)
!2533 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1085, size: 64)
!2534 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2530, file: !2528, line: 42, baseType: !7, size: 32, offset: 64)
!2535 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2530, file: !2528, line: 43, baseType: !7, size: 32, offset: 96)
!2536 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2530, file: !2528, line: 44, baseType: !2537, size: 64, offset: 128)
!2537 = !DICompositeType(tag: DW_TAG_array_type, baseType: !924, size: 64, elements: !889)
!2538 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_growing_pred", scope: !2394, file: !2395, line: 110, baseType: !2514, size: 64, offset: 1408)
!2539 = !DIDerivedType(tag: DW_TAG_member, name: "execute_on_shrinking_pred", scope: !2394, file: !2395, line: 114, baseType: !2514, size: 64, offset: 1472)
!2540 = !DIDerivedType(tag: DW_TAG_member, name: "cfg_hook_duplicate_loop_to_header_edge", scope: !2394, file: !2395, line: 118, baseType: !2541, size: 64, offset: 1536)
!2541 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2542, size: 64)
!2542 = !DISubroutineType(types: !2543)
!2543 = !{!1085, !1433, !1408, !7, !2527, !1408, !2544, !874}
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2234, size: 64)
!2545 = !DIDerivedType(tag: DW_TAG_member, name: "lv_add_condition_to_bb", scope: !2394, file: !2395, line: 125, baseType: !2546, size: 64, offset: 1600)
!2546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2547, size: 64)
!2547 = !DISubroutineType(types: !2548)
!2548 = !{null, !1391, !1391, !1391, !962}
!2549 = !DIDerivedType(tag: DW_TAG_member, name: "lv_adjust_loop_header_phi", scope: !2394, file: !2395, line: 128, baseType: !2550, size: 64, offset: 1664)
!2550 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2551, size: 64)
!2551 = !DISubroutineType(types: !2552)
!2552 = !{null, !1391, !1391, !1391, !1408}
!2553 = !DIDerivedType(tag: DW_TAG_member, name: "extract_cond_bb_edges", scope: !2394, file: !2395, line: 133, baseType: !2554, size: 64, offset: 1728)
!2554 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2555, size: 64)
!2555 = !DISubroutineType(types: !2556)
!2556 = !{null, !1391, !2557, !2557}
!2557 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1408, size: 64)
!2558 = !DIDerivedType(tag: DW_TAG_member, name: "flush_pending_stmts", scope: !2394, file: !2395, line: 138, baseType: !2514, size: 64, offset: 1792)
!2559 = !DIGlobalVariableExpression(var: !2560, expr: !DIExpression())
!2560 = distinct !DIGlobalVariable(name: "bb_note_pool", scope: !2, file: !3, line: 129, type: !2561, isLocal: true, isDefinition: true)
!2561 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx_vec_t", file: !398, line: 42, baseType: !2064)
!2562 = !DIGlobalVariableExpression(var: !2563, expr: !DIExpression())
!2563 = distinct !DIGlobalVariable(name: "has_dependence_data", scope: !2, file: !3, line: 3000, type: !2564, isLocal: true, isDefinition: true)
!2564 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 2983, size: 384, elements: !2565)
!2565 = !{!2566, !2567, !2569, !2570, !2571}
!2566 = !DIDerivedType(tag: DW_TAG_member, name: "dc", scope: !2564, file: !3, line: 2985, baseType: !2112, size: 64)
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "where", scope: !2564, file: !3, line: 2989, baseType: !2568, size: 32, offset: 64)
!2568 = !DIDerivedType(tag: DW_TAG_typedef, name: "deps_where_t", file: !409, line: 868, baseType: !562)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "pro", scope: !2564, file: !3, line: 2992, baseType: !2104, size: 64, offset: 128)
!2570 = !DIDerivedType(tag: DW_TAG_member, name: "con", scope: !2564, file: !3, line: 2995, baseType: !2151, size: 64, offset: 192)
!2571 = !DIDerivedType(tag: DW_TAG_member, name: "has_dep_p", scope: !2564, file: !3, line: 2999, baseType: !2572, size: 96, offset: 256)
!2572 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2056, size: 96, elements: !1043)
!2573 = !DIGlobalVariableExpression(var: !2574, expr: !DIExpression())
!2574 = distinct !DIGlobalVariable(name: "tick_check_data", scope: !2, file: !3, line: 3310, type: !2575, isLocal: true, isDefinition: true)
!2575 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 3300, size: 128, elements: !2576)
!2576 = !{!2577, !2580, !2581}
!2577 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !2575, file: !3, line: 3303, baseType: !2578, size: 64)
!2578 = !DIDerivedType(tag: DW_TAG_typedef, name: "expr_t", file: !409, line: 171, baseType: !2579)
!2579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2147, size: 64)
!2580 = !DIDerivedType(tag: DW_TAG_member, name: "cycle", scope: !2575, file: !3, line: 3306, baseType: !874, size: 32, offset: 64)
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "seen_true_dep_p", scope: !2575, file: !3, line: 3309, baseType: !1085, size: 8, offset: 96)
!2582 = !DIGlobalVariableExpression(var: !2583, expr: !DIExpression())
!2583 = distinct !DIGlobalVariable(name: "succs_info_pool", scope: !2, file: !3, line: 4310, type: !2584, isLocal: true, isDefinition: true)
!2584 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 4297, size: 192, elements: !2585)
!2585 = !{!2586, !2587, !2588, !2589}
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "stack", scope: !2584, file: !3, line: 4300, baseType: !2057, size: 64)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2584, file: !3, line: 4303, baseType: !874, size: 32, offset: 64)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "top", scope: !2584, file: !3, line: 4306, baseType: !874, size: 32, offset: 96)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "max_top", scope: !2584, file: !3, line: 4309, baseType: !874, size: 32, offset: 128)
!2590 = !DIGlobalVariableExpression(var: !2591, expr: !DIExpression())
!2591 = distinct !DIGlobalVariable(name: "sel_cfg_hooks", scope: !2, file: !3, line: 5477, type: !2394, isLocal: true, isDefinition: true)
!2592 = !DIGlobalVariableExpression(var: !2593, expr: !DIExpression())
!2593 = distinct !DIGlobalVariable(name: "bulk_tc", scope: !2, file: !3, line: 334, type: !2217, isLocal: true, isDefinition: true)
!2594 = !DIGlobalVariableExpression(var: !2595, expr: !DIExpression())
!2595 = distinct !DIGlobalVariable(name: "advance_deps_context_sched_deps_info", scope: !2, file: !3, line: 493, type: !2596, isLocal: true, isDefinition: true)
!2596 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_deps_info_def", file: !398, line: 1149, size: 832, elements: !2597)
!2597 = !{!2598, !2602, !2606, !2610, !2611, !2612, !2613, !2614, !2618, !2619, !2620, !2624, !2628, !2629, !2630}
!2598 = !DIDerivedType(tag: DW_TAG_member, name: "compute_jump_reg_dependencies", scope: !2596, file: !398, line: 1154, baseType: !2599, size: 64)
!2599 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2600, size: 64)
!2600 = !DISubroutineType(types: !2601)
!2601 = !{null, !850, !2053, !2053, !2053}
!2602 = !DIDerivedType(tag: DW_TAG_member, name: "start_insn", scope: !2596, file: !398, line: 1157, baseType: !2603, size: 64, offset: 64)
!2603 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2604, size: 64)
!2604 = !DISubroutineType(types: !2605)
!2605 = !{null, !850}
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "finish_insn", scope: !2596, file: !398, line: 1160, baseType: !2607, size: 64, offset: 128)
!2607 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2608, size: 64)
!2608 = !DISubroutineType(types: !2609)
!2609 = !{null}
!2610 = !DIDerivedType(tag: DW_TAG_member, name: "start_lhs", scope: !2596, file: !398, line: 1163, baseType: !2603, size: 64, offset: 192)
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "finish_lhs", scope: !2596, file: !398, line: 1166, baseType: !2607, size: 64, offset: 256)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "start_rhs", scope: !2596, file: !398, line: 1169, baseType: !2603, size: 64, offset: 320)
!2613 = !DIDerivedType(tag: DW_TAG_member, name: "finish_rhs", scope: !2596, file: !398, line: 1172, baseType: !2607, size: 64, offset: 384)
!2614 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_set", scope: !2596, file: !398, line: 1175, baseType: !2615, size: 64, offset: 448)
!2615 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2616, size: 64)
!2616 = !DISubroutineType(types: !2617)
!2617 = !{null, !874}
!2618 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_clobber", scope: !2596, file: !398, line: 1178, baseType: !2615, size: 64, offset: 512)
!2619 = !DIDerivedType(tag: DW_TAG_member, name: "note_reg_use", scope: !2596, file: !398, line: 1181, baseType: !2615, size: 64, offset: 576)
!2620 = !DIDerivedType(tag: DW_TAG_member, name: "note_mem_dep", scope: !2596, file: !398, line: 1185, baseType: !2621, size: 64, offset: 640)
!2621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2622, size: 64)
!2622 = !DISubroutineType(types: !2623)
!2623 = !{null, !850, !850, !850, !2056}
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "note_dep", scope: !2596, file: !398, line: 1188, baseType: !2625, size: 64, offset: 704)
!2625 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2626, size: 64)
!2626 = !DISubroutineType(types: !2627)
!2627 = !{null, !850, !2056}
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "use_cselib", scope: !2596, file: !398, line: 1194, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "use_deps_list", scope: !2596, file: !398, line: 1198, baseType: !7, size: 1, offset: 769, flags: DIFlagBitField, extraData: i64 768)
!2630 = !DIDerivedType(tag: DW_TAG_member, name: "generate_spec_deps", scope: !2596, file: !398, line: 1202, baseType: !7, size: 1, offset: 770, flags: DIFlagBitField, extraData: i64 768)
!2631 = !DIGlobalVariableExpression(var: !2632, expr: !DIExpression())
!2632 = distinct !DIGlobalVariable(name: "regset_pool", scope: !2, file: !3, line: 113, type: !2633, isLocal: true, isDefinition: true)
!2633 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 89, size: 320, elements: !2634)
!2634 = !{!2635, !2636, !2637, !2638, !2639, !2640, !2641}
!2635 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !2633, file: !3, line: 92, baseType: !2052, size: 64)
!2636 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2633, file: !3, line: 95, baseType: !874, size: 32, offset: 64)
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !2633, file: !3, line: 98, baseType: !874, size: 32, offset: 96)
!2638 = !DIDerivedType(tag: DW_TAG_member, name: "vv", scope: !2633, file: !3, line: 103, baseType: !2052, size: 64, offset: 128)
!2639 = !DIDerivedType(tag: DW_TAG_member, name: "nn", scope: !2633, file: !3, line: 106, baseType: !874, size: 32, offset: 192)
!2640 = !DIDerivedType(tag: DW_TAG_member, name: "ss", scope: !2633, file: !3, line: 109, baseType: !874, size: 32, offset: 224)
!2641 = !DIDerivedType(tag: DW_TAG_member, name: "diff", scope: !2633, file: !3, line: 112, baseType: !874, size: 32, offset: 256)
!2642 = !DIGlobalVariableExpression(var: !2643, expr: !DIExpression())
!2643 = distinct !DIGlobalVariable(name: "nop_pool", scope: !2, file: !3, line: 126, type: !2644, isLocal: true, isDefinition: true)
!2644 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 116, size: 128, elements: !2645)
!2645 = !{!2646, !2647, !2648}
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "v", scope: !2644, file: !3, line: 119, baseType: !2325, size: 64)
!2647 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !2644, file: !3, line: 122, baseType: !874, size: 32, offset: 64)
!2648 = !DIDerivedType(tag: DW_TAG_member, name: "s", scope: !2644, file: !3, line: 125, baseType: !874, size: 32, offset: 96)
!2649 = !DIGlobalVariableExpression(var: !2650, expr: !DIExpression())
!2650 = distinct !DIGlobalVariable(name: "nop_vinsn", scope: !2, file: !3, line: 1030, type: !2151, isLocal: true, isDefinition: true)
!2651 = !DIGlobalVariableExpression(var: !2652, expr: !DIExpression())
!2652 = distinct !DIGlobalVariable(name: "init_insn_force_unique_p", scope: !2, file: !3, line: 1354, type: !1085, isLocal: true, isDefinition: true)
!2653 = !DIGlobalVariableExpression(var: !2654, expr: !DIExpression())
!2654 = distinct !DIGlobalVariable(name: "init_global_data", scope: !2, file: !3, line: 2827, type: !2655, isLocal: true, isDefinition: true)
!2655 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 2823, size: 64, elements: !2656)
!2656 = !{!2657}
!2657 = !DIDerivedType(tag: DW_TAG_member, name: "prev_insn", scope: !2655, file: !3, line: 2826, baseType: !2104, size: 64)
!2658 = !DIGlobalVariableExpression(var: !2659, expr: !DIExpression())
!2659 = distinct !DIGlobalVariable(name: "has_dependence_sched_deps_info", scope: !2, file: !3, line: 3182, type: !2596, isLocal: true, isDefinition: true)
!2660 = !DIGlobalVariableExpression(var: !2661, expr: !DIExpression())
!2661 = distinct !DIGlobalVariable(name: "const_has_dependence_sched_deps_info", scope: !2, file: !3, line: 3185, type: !2662, isLocal: true, isDefinition: true)
!2662 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2596)
!2663 = !DIGlobalVariableExpression(var: !2664, expr: !DIExpression())
!2664 = distinct !DIGlobalVariable(name: "tick_check_sched_deps_info", scope: !2, file: !3, line: 3378, type: !2596, isLocal: true, isDefinition: true)
!2665 = !DIGlobalVariableExpression(var: !2666, expr: !DIExpression())
!2666 = distinct !DIGlobalVariable(name: "insn_init_ssid", scope: !2, file: !3, line: 3992, type: !2667, isLocal: true, isDefinition: true)
!2667 = !DIDerivedType(tag: DW_TAG_typedef, name: "sel_insn_data_t", file: !409, line: 760, baseType: !2668)
!2668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2281, size: 64)
!2669 = !DIGlobalVariableExpression(var: !2670, expr: !DIExpression())
!2670 = distinct !DIGlobalVariable(name: "_insn_init_ssid", scope: !2, file: !3, line: 3991, type: !2281, isLocal: true, isDefinition: true)
!2671 = !DIGlobalVariableExpression(var: !2672, expr: !DIExpression())
!2672 = distinct !DIGlobalVariable(name: "insn_init_create_new_vinsn_p", scope: !2, file: !3, line: 3995, type: !1085, isLocal: true, isDefinition: true)
!2673 = !DIGlobalVariableExpression(var: !2674, expr: !DIExpression())
!2674 = distinct !DIGlobalVariable(name: "new_insns", scope: !2, file: !3, line: 3927, type: !2063, isLocal: true, isDefinition: true)
!2675 = !DIGlobalVariableExpression(var: !2676, expr: !DIExpression())
!2676 = distinct !DIGlobalVariable(name: "last_added_blocks", scope: !2, file: !3, line: 4294, type: !2086, isLocal: true, isDefinition: true)
!2677 = !DIGlobalVariableExpression(var: !2678, expr: !DIExpression())
!2678 = distinct !DIGlobalVariable(name: "deps_init_id_data", scope: !2, file: !3, line: 2358, type: !2679, isLocal: true, isDefinition: true)
!2679 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !3, line: 2345, size: 192, elements: !2680)
!2680 = !{!2681, !2682, !2685, !2686}
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "where", scope: !2679, file: !3, line: 2348, baseType: !2568, size: 32)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2679, file: !3, line: 2351, baseType: !2683, size: 64, offset: 64)
!2683 = !DIDerivedType(tag: DW_TAG_typedef, name: "idata_t", file: !409, line: 51, baseType: !2684)
!2684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2157, size: 64)
!2685 = !DIDerivedType(tag: DW_TAG_member, name: "force_unique_p", scope: !2679, file: !3, line: 2354, baseType: !1085, size: 8, offset: 128)
!2686 = !DIDerivedType(tag: DW_TAG_member, name: "force_use_p", scope: !2679, file: !3, line: 2357, baseType: !1085, size: 8, offset: 136)
!2687 = !DIGlobalVariableExpression(var: !2688, expr: !DIExpression())
!2688 = distinct !DIGlobalVariable(name: "deps_init_id_sched_deps_info", scope: !2, file: !3, line: 2514, type: !2596, isLocal: true, isDefinition: true)
!2689 = !DIGlobalVariableExpression(var: !2690, expr: !DIExpression())
!2690 = distinct !DIGlobalVariable(name: "const_deps_init_id_sched_deps_info", scope: !2, file: !3, line: 2517, type: !2662, isLocal: true, isDefinition: true)
!2691 = !DIGlobalVariableExpression(var: !2692, expr: !DIExpression())
!2692 = distinct !DIGlobalVariable(name: "sched_sel_haifa_sched_info", scope: !2, file: !3, line: 5583, type: !2693, isLocal: true, isDefinition: true)
!2693 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "haifa_sched_info", file: !398, line: 556, size: 1088, elements: !2694)
!2694 = !{!2695, !2696, !2697, !2698, !2702, !2706, !2711, !2712, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2726, !2730, !2734}
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "init_ready_list", scope: !2693, file: !398, line: 560, baseType: !2607, size: 64)
!2696 = !DIDerivedType(tag: DW_TAG_member, name: "can_schedule_ready_p", scope: !2693, file: !398, line: 563, baseType: !2386, size: 64, offset: 64)
!2697 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_more_p", scope: !2693, file: !398, line: 565, baseType: !2399, size: 64, offset: 128)
!2698 = !DIDerivedType(tag: DW_TAG_member, name: "new_ready", scope: !2693, file: !398, line: 571, baseType: !2699, size: 64, offset: 192)
!2699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2700, size: 64)
!2700 = !DISubroutineType(types: !2701)
!2701 = !{!2056, !850, !2056}
!2702 = !DIDerivedType(tag: DW_TAG_member, name: "rank", scope: !2693, file: !398, line: 575, baseType: !2703, size: 64, offset: 256)
!2703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2704, size: 64)
!2704 = !DISubroutineType(types: !2705)
!2705 = !{!874, !850, !850}
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "print_insn", scope: !2693, file: !398, line: 580, baseType: !2707, size: 64, offset: 320)
!2707 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2708, size: 64)
!2708 = !DISubroutineType(types: !2709)
!2709 = !{!877, !2710, !874}
!2710 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !851, line: 51, baseType: !2239)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "contributes_to_priority", scope: !2693, file: !398, line: 583, baseType: !2703, size: 64, offset: 384)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "insn_finishes_block_p", scope: !2693, file: !398, line: 587, baseType: !2713, size: 64, offset: 448)
!2713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2714, size: 64)
!2714 = !DISubroutineType(types: !2715)
!2715 = !{!1085, !850}
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "prev_head", scope: !2693, file: !398, line: 590, baseType: !850, size: 64, offset: 512)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "next_tail", scope: !2693, file: !398, line: 590, baseType: !850, size: 64, offset: 576)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2693, file: !398, line: 594, baseType: !850, size: 64, offset: 640)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !2693, file: !398, line: 594, baseType: !850, size: 64, offset: 704)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "queue_must_finish_empty", scope: !2693, file: !398, line: 597, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "sched_max_insns_priority", scope: !2693, file: !398, line: 600, baseType: !874, size: 32, offset: 800)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "add_remove_insn", scope: !2693, file: !398, line: 606, baseType: !2723, size: 64, offset: 832)
!2723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2724, size: 64)
!2724 = !DISubroutineType(types: !2725)
!2725 = !{null, !850, !874}
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "begin_schedule_ready", scope: !2693, file: !398, line: 611, baseType: !2727, size: 64, offset: 896)
!2727 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2728, size: 64)
!2728 = !DISubroutineType(types: !2729)
!2729 = !{null, !850, !850}
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "advance_target_bb", scope: !2693, file: !398, line: 617, baseType: !2731, size: 64, offset: 960)
!2731 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2732, size: 64)
!2732 = !DISubroutineType(types: !2733)
!2733 = !{!1391, !1391, !850}
!2734 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2693, file: !398, line: 621, baseType: !7, size: 32, offset: 1024)
!2735 = !DIGlobalVariableExpression(var: !2736, expr: !DIExpression())
!2736 = distinct !DIGlobalVariable(name: "bbs_in_loop_rgns", scope: !2, file: !3, line: 75, type: !2527, isLocal: true, isDefinition: true)
!2737 = !DIGlobalVariableExpression(var: !2738, expr: !DIExpression())
!2738 = distinct !DIGlobalVariable(name: "rev_top_order_index_len", scope: !2, file: !3, line: 86, type: !874, isLocal: true, isDefinition: true)
!2739 = !DIGlobalVariableExpression(var: !2740, expr: !DIExpression())
!2740 = distinct !DIGlobalVariable(name: "loop_nests", scope: !2, file: !3, line: 72, type: !2328, isLocal: true, isDefinition: true)
!2741 = !DIGlobalVariableExpression(var: !2742, expr: !DIExpression())
!2742 = distinct !DIGlobalVariable(name: "rev_top_order_index", scope: !2, file: !3, line: 83, type: !2051, isLocal: true, isDefinition: true)
!2743 = !{i32 7, !"Dwarf Version", i32 4}
!2744 = !{i32 2, !"Debug Info Version", i32 3}
!2745 = !{i32 1, !"wchar_size", i32 4}
!2746 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2747 = distinct !DISubprogram(name: "ilist_copy", scope: !3, file: !3, line: 170, type: !2748, scopeLine: 171, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2748 = !DISubroutineType(types: !2749)
!2749 = !{!2106, !2106}
!2750 = !{}
!2751 = !DILocalVariable(name: "l", arg: 1, scope: !2747, file: !3, line: 170, type: !2106)
!2752 = !DILocation(line: 170, column: 21, scope: !2747)
!2753 = !DILocalVariable(name: "head", scope: !2747, file: !3, line: 172, type: !2106)
!2754 = !DILocation(line: 172, column: 11, scope: !2747)
!2755 = !DILocalVariable(name: "tailp", scope: !2747, file: !3, line: 172, type: !2756)
!2756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2106, size: 64)
!2757 = !DILocation(line: 172, column: 25, scope: !2747)
!2758 = !DILocation(line: 174, column: 3, scope: !2747)
!2759 = !DILocation(line: 174, column: 10, scope: !2747)
!2760 = !DILocation(line: 176, column: 7, scope: !2761)
!2761 = distinct !DILexicalBlock(scope: !2747, file: !3, line: 175, column: 5)
!2762 = !DILocation(line: 177, column: 16, scope: !2761)
!2763 = !DILocation(line: 177, column: 13, scope: !2761)
!2764 = !DILocation(line: 178, column: 11, scope: !2761)
!2765 = !DILocation(line: 178, column: 9, scope: !2761)
!2766 = distinct !{!2766, !2758, !2767}
!2767 = !DILocation(line: 179, column: 5, scope: !2747)
!2768 = !DILocation(line: 181, column: 10, scope: !2747)
!2769 = !DILocation(line: 181, column: 3, scope: !2747)
!2770 = distinct !DISubprogram(name: "_xlist_add", scope: !409, file: !409, line: 477, type: !2771, scopeLine: 478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2771 = !DISubroutineType(types: !2772)
!2772 = !{null, !2773, !850}
!2773 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2107, size: 64)
!2774 = !DILocalVariable(name: "lp", arg: 1, scope: !2770, file: !409, line: 477, type: !2773)
!2775 = !DILocation(line: 477, column: 23, scope: !2770)
!2776 = !DILocalVariable(name: "x", arg: 2, scope: !2770, file: !409, line: 477, type: !850)
!2777 = !DILocation(line: 477, column: 31, scope: !2770)
!2778 = !DILocation(line: 479, column: 14, scope: !2770)
!2779 = !DILocation(line: 479, column: 3, scope: !2770)
!2780 = !DILocation(line: 480, column: 20, scope: !2770)
!2781 = !DILocation(line: 480, column: 3, scope: !2770)
!2782 = !DILocation(line: 480, column: 18, scope: !2770)
!2783 = !DILocation(line: 481, column: 1, scope: !2770)
!2784 = distinct !DISubprogram(name: "ilist_invert", scope: !3, file: !3, line: 186, type: !2748, scopeLine: 187, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2785 = !DILocalVariable(name: "l", arg: 1, scope: !2784, file: !3, line: 186, type: !2106)
!2786 = !DILocation(line: 186, column: 23, scope: !2784)
!2787 = !DILocalVariable(name: "res", scope: !2784, file: !3, line: 188, type: !2106)
!2788 = !DILocation(line: 188, column: 11, scope: !2784)
!2789 = !DILocation(line: 190, column: 3, scope: !2784)
!2790 = !DILocation(line: 190, column: 10, scope: !2784)
!2791 = !DILocation(line: 192, column: 7, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2784, file: !3, line: 191, column: 5)
!2793 = !DILocation(line: 193, column: 11, scope: !2792)
!2794 = !DILocation(line: 193, column: 9, scope: !2792)
!2795 = distinct !{!2795, !2789, !2796}
!2796 = !DILocation(line: 194, column: 5, scope: !2784)
!2797 = !DILocation(line: 196, column: 10, scope: !2784)
!2798 = !DILocation(line: 196, column: 3, scope: !2784)
!2799 = distinct !DISubprogram(name: "blist_add", scope: !3, file: !3, line: 201, type: !2800, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2800 = !DISubroutineType(types: !2801)
!2801 = !{null, !2802, !2104, !2106, !2112}
!2802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2803, size: 64)
!2803 = !DIDerivedType(tag: DW_TAG_typedef, name: "blist_t", file: !409, line: 252, baseType: !2091)
!2804 = !DILocalVariable(name: "lp", arg: 1, scope: !2799, file: !3, line: 201, type: !2802)
!2805 = !DILocation(line: 201, column: 21, scope: !2799)
!2806 = !DILocalVariable(name: "to", arg: 2, scope: !2799, file: !3, line: 201, type: !2104)
!2807 = !DILocation(line: 201, column: 32, scope: !2799)
!2808 = !DILocalVariable(name: "ptr", arg: 3, scope: !2799, file: !3, line: 201, type: !2106)
!2809 = !DILocation(line: 201, column: 44, scope: !2799)
!2810 = !DILocalVariable(name: "dc", arg: 4, scope: !2799, file: !3, line: 201, type: !2112)
!2811 = !DILocation(line: 201, column: 56, scope: !2799)
!2812 = !DILocalVariable(name: "bnd", scope: !2799, file: !3, line: 203, type: !2813)
!2813 = !DIDerivedType(tag: DW_TAG_typedef, name: "bnd_t", file: !409, line: 241, baseType: !2814)
!2814 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2101, size: 64)
!2815 = !DILocation(line: 203, column: 9, scope: !2799)
!2816 = !DILocation(line: 205, column: 14, scope: !2799)
!2817 = !DILocation(line: 205, column: 3, scope: !2799)
!2818 = !DILocation(line: 206, column: 9, scope: !2799)
!2819 = !DILocation(line: 206, column: 7, scope: !2799)
!2820 = !DILocation(line: 208, column: 18, scope: !2799)
!2821 = !DILocation(line: 208, column: 3, scope: !2799)
!2822 = !DILocation(line: 208, column: 16, scope: !2799)
!2823 = !DILocation(line: 209, column: 19, scope: !2799)
!2824 = !DILocation(line: 209, column: 3, scope: !2799)
!2825 = !DILocation(line: 209, column: 17, scope: !2799)
!2826 = !DILocation(line: 210, column: 3, scope: !2799)
!2827 = !DILocation(line: 210, column: 16, scope: !2799)
!2828 = !DILocation(line: 211, column: 3, scope: !2799)
!2829 = !DILocation(line: 211, column: 17, scope: !2799)
!2830 = !DILocation(line: 212, column: 18, scope: !2799)
!2831 = !DILocation(line: 212, column: 3, scope: !2799)
!2832 = !DILocation(line: 212, column: 16, scope: !2799)
!2833 = !DILocation(line: 213, column: 1, scope: !2799)
!2834 = distinct !DISubprogram(name: "_list_add", scope: !409, file: !409, line: 382, type: !2835, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2835 = !DISubroutineType(types: !2836)
!2836 = !{null, !2837}
!2837 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2091, size: 64)
!2838 = !DILocalVariable(name: "lp", arg: 1, scope: !2834, file: !409, line: 382, type: !2837)
!2839 = !DILocation(line: 382, column: 21, scope: !2834)
!2840 = !DILocalVariable(name: "l", scope: !2834, file: !409, line: 384, type: !2091)
!2841 = !DILocation(line: 384, column: 11, scope: !2834)
!2842 = !DILocation(line: 384, column: 15, scope: !2834)
!2843 = !DILocation(line: 386, column: 21, scope: !2834)
!2844 = !DILocation(line: 386, column: 20, scope: !2834)
!2845 = !DILocation(line: 386, column: 3, scope: !2834)
!2846 = !DILocation(line: 386, column: 18, scope: !2834)
!2847 = !DILocation(line: 387, column: 9, scope: !2834)
!2848 = !DILocation(line: 387, column: 4, scope: !2834)
!2849 = !DILocation(line: 387, column: 7, scope: !2834)
!2850 = !DILocation(line: 388, column: 1, scope: !2834)
!2851 = distinct !DISubprogram(name: "blist_remove", scope: !3, file: !3, line: 217, type: !2852, scopeLine: 218, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2852 = !DISubroutineType(types: !2853)
!2853 = !{null, !2802}
!2854 = !DILocalVariable(name: "lp", arg: 1, scope: !2851, file: !3, line: 217, type: !2802)
!2855 = !DILocation(line: 217, column: 24, scope: !2851)
!2856 = !DILocalVariable(name: "b", scope: !2851, file: !3, line: 219, type: !2813)
!2857 = !DILocation(line: 219, column: 9, scope: !2851)
!2858 = !DILocation(line: 219, column: 13, scope: !2851)
!2859 = !DILocation(line: 221, column: 18, scope: !2851)
!2860 = !DILocation(line: 221, column: 3, scope: !2851)
!2861 = !DILocation(line: 222, column: 18, scope: !2851)
!2862 = !DILocation(line: 222, column: 3, scope: !2851)
!2863 = !DILocation(line: 223, column: 3, scope: !2851)
!2864 = !DILocation(line: 225, column: 17, scope: !2851)
!2865 = !DILocation(line: 225, column: 3, scope: !2851)
!2866 = !DILocation(line: 226, column: 1, scope: !2851)
!2867 = distinct !DISubprogram(name: "av_set_clear", scope: !3, file: !3, line: 2252, type: !2868, scopeLine: 2253, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2868 = !DISubroutineType(types: !2869)
!2869 = !{null, !2870}
!2870 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2109, size: 64)
!2871 = !DILocalVariable(name: "setp", arg: 1, scope: !2867, file: !3, line: 2252, type: !2870)
!2872 = !DILocation(line: 2252, column: 25, scope: !2867)
!2873 = !DILocalVariable(name: "expr", scope: !2867, file: !3, line: 2254, type: !2578)
!2874 = !DILocation(line: 2254, column: 10, scope: !2867)
!2875 = !DILocalVariable(name: "i", scope: !2867, file: !3, line: 2255, type: !2876)
!2876 = !DIDerivedType(tag: DW_TAG_typedef, name: "av_set_iterator", file: !409, line: 533, baseType: !2877)
!2877 = !DIDerivedType(tag: DW_TAG_typedef, name: "_list_iterator", file: !409, line: 426, baseType: !2878)
!2878 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !409, line: 416, size: 128, elements: !2879)
!2879 = !{!2880, !2881, !2882}
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "lp", scope: !2878, file: !409, line: 419, baseType: !2837, size: 64)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "can_remove_p", scope: !2878, file: !409, line: 422, baseType: !1085, size: 8, offset: 64)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "removed_p", scope: !2878, file: !409, line: 425, baseType: !1085, size: 8, offset: 72)
!2883 = !DILocation(line: 2255, column: 19, scope: !2867)
!2884 = !DILocation(line: 2257, column: 3, scope: !2885)
!2885 = distinct !DILexicalBlock(scope: !2867, file: !3, line: 2257, column: 3)
!2886 = !DILocation(line: 2257, column: 3, scope: !2887)
!2887 = distinct !DILexicalBlock(scope: !2885, file: !3, line: 2257, column: 3)
!2888 = !DILocation(line: 2258, column: 5, scope: !2887)
!2889 = distinct !{!2889, !2884, !2890}
!2890 = !DILocation(line: 2258, column: 27, scope: !2885)
!2891 = !DILocation(line: 2260, column: 3, scope: !2867)
!2892 = !DILocation(line: 2261, column: 1, scope: !2867)
!2893 = distinct !DISubprogram(name: "_list_clear", scope: !409, file: !409, line: 408, type: !2835, scopeLine: 409, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2894 = !DILocalVariable(name: "l", arg: 1, scope: !2893, file: !409, line: 408, type: !2837)
!2895 = !DILocation(line: 408, column: 23, scope: !2893)
!2896 = !DILocation(line: 410, column: 3, scope: !2893)
!2897 = !DILocation(line: 410, column: 11, scope: !2893)
!2898 = !DILocation(line: 410, column: 10, scope: !2893)
!2899 = !DILocation(line: 411, column: 19, scope: !2893)
!2900 = !DILocation(line: 411, column: 5, scope: !2893)
!2901 = distinct !{!2901, !2896, !2902}
!2902 = !DILocation(line: 411, column: 20, scope: !2893)
!2903 = !DILocation(line: 412, column: 1, scope: !2893)
!2904 = distinct !DISubprogram(name: "_list_remove", scope: !409, file: !409, line: 399, type: !2835, scopeLine: 400, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2905 = !DILocalVariable(name: "lp", arg: 1, scope: !2904, file: !409, line: 399, type: !2837)
!2906 = !DILocation(line: 399, column: 24, scope: !2904)
!2907 = !DILocalVariable(name: "n", scope: !2904, file: !409, line: 401, type: !2091)
!2908 = !DILocation(line: 401, column: 11, scope: !2904)
!2909 = !DILocation(line: 401, column: 16, scope: !2904)
!2910 = !DILocation(line: 401, column: 15, scope: !2904)
!2911 = !DILocation(line: 403, column: 9, scope: !2904)
!2912 = !DILocation(line: 403, column: 4, scope: !2904)
!2913 = !DILocation(line: 403, column: 7, scope: !2904)
!2914 = !DILocation(line: 404, column: 14, scope: !2904)
!2915 = !DILocation(line: 404, column: 32, scope: !2904)
!2916 = !DILocation(line: 404, column: 3, scope: !2904)
!2917 = !DILocation(line: 405, column: 1, scope: !2904)
!2918 = distinct !DISubprogram(name: "flist_tail_init", scope: !3, file: !3, line: 230, type: !2919, scopeLine: 231, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2919 = !DISubroutineType(types: !2920)
!2920 = !{null, !2921}
!2921 = !DIDerivedType(tag: DW_TAG_typedef, name: "flist_tail_t", file: !409, line: 349, baseType: !2922)
!2922 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2923, size: 64)
!2923 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "flist_tail_def", file: !409, line: 343, size: 128, elements: !2924)
!2924 = !{!2925, !2927}
!2925 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !2923, file: !409, line: 345, baseType: !2926, size: 64)
!2926 = !DIDerivedType(tag: DW_TAG_typedef, name: "flist_t", file: !409, line: 338, baseType: !2091)
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "tailp", scope: !2923, file: !409, line: 346, baseType: !2928, size: 64, offset: 64)
!2928 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2926, size: 64)
!2929 = !DILocalVariable(name: "l", arg: 1, scope: !2918, file: !3, line: 230, type: !2921)
!2930 = !DILocation(line: 230, column: 31, scope: !2918)
!2931 = !DILocation(line: 232, column: 3, scope: !2918)
!2932 = !DILocation(line: 232, column: 23, scope: !2918)
!2933 = !DILocation(line: 233, column: 27, scope: !2918)
!2934 = !DILocation(line: 233, column: 3, scope: !2918)
!2935 = !DILocation(line: 233, column: 24, scope: !2918)
!2936 = !DILocation(line: 234, column: 1, scope: !2918)
!2937 = distinct !DISubprogram(name: "flist_lookup", scope: !3, file: !3, line: 238, type: !2938, scopeLine: 239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2938 = !DISubroutineType(types: !2939)
!2939 = !{!2940, !2926, !2104}
!2940 = !DIDerivedType(tag: DW_TAG_typedef, name: "fence_t", file: !409, line: 317, baseType: !2941)
!2941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2206, size: 64)
!2942 = !DILocalVariable(name: "l", arg: 1, scope: !2937, file: !3, line: 238, type: !2926)
!2943 = !DILocation(line: 238, column: 23, scope: !2937)
!2944 = !DILocalVariable(name: "insn", arg: 2, scope: !2937, file: !3, line: 238, type: !2104)
!2945 = !DILocation(line: 238, column: 33, scope: !2937)
!2946 = !DILocation(line: 240, column: 3, scope: !2937)
!2947 = !DILocation(line: 240, column: 10, scope: !2937)
!2948 = !DILocation(line: 242, column: 11, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2950, file: !3, line: 242, column: 11)
!2950 = distinct !DILexicalBlock(scope: !2937, file: !3, line: 241, column: 5)
!2951 = !DILocation(line: 242, column: 43, scope: !2949)
!2952 = !DILocation(line: 242, column: 40, scope: !2949)
!2953 = !DILocation(line: 242, column: 11, scope: !2950)
!2954 = !DILocation(line: 243, column: 9, scope: !2949)
!2955 = !DILocation(line: 243, column: 2, scope: !2949)
!2956 = !DILocation(line: 245, column: 11, scope: !2950)
!2957 = !DILocation(line: 245, column: 9, scope: !2950)
!2958 = distinct !{!2958, !2946, !2959}
!2959 = !DILocation(line: 246, column: 5, scope: !2937)
!2960 = !DILocation(line: 248, column: 3, scope: !2937)
!2961 = !DILocation(line: 249, column: 1, scope: !2937)
!2962 = distinct !DISubprogram(name: "flist_clear", scope: !3, file: !3, line: 310, type: !2963, scopeLine: 311, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2963 = !DISubroutineType(types: !2964)
!2964 = !{null, !2928}
!2965 = !DILocalVariable(name: "lp", arg: 1, scope: !2962, file: !3, line: 310, type: !2928)
!2966 = !DILocation(line: 310, column: 23, scope: !2962)
!2967 = !DILocation(line: 312, column: 3, scope: !2962)
!2968 = !DILocation(line: 312, column: 11, scope: !2962)
!2969 = !DILocation(line: 312, column: 10, scope: !2962)
!2970 = !DILocation(line: 313, column: 19, scope: !2962)
!2971 = !DILocation(line: 313, column: 5, scope: !2962)
!2972 = distinct !{!2972, !2967, !2973}
!2973 = !DILocation(line: 313, column: 21, scope: !2962)
!2974 = !DILocation(line: 314, column: 1, scope: !2962)
!2975 = distinct !DISubprogram(name: "flist_remove", scope: !3, file: !3, line: 301, type: !2963, scopeLine: 302, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2976 = !DILocalVariable(name: "lp", arg: 1, scope: !2975, file: !3, line: 301, type: !2928)
!2977 = !DILocation(line: 301, column: 24, scope: !2975)
!2978 = !DILocation(line: 303, column: 7, scope: !2979)
!2979 = distinct !DILexicalBlock(scope: !2975, file: !3, line: 303, column: 7)
!2980 = !DILocation(line: 303, column: 7, scope: !2975)
!2981 = !DILocation(line: 304, column: 18, scope: !2979)
!2982 = !DILocation(line: 304, column: 5, scope: !2979)
!2983 = !DILocation(line: 305, column: 17, scope: !2975)
!2984 = !DILocation(line: 305, column: 3, scope: !2975)
!2985 = !DILocation(line: 306, column: 1, scope: !2975)
!2986 = distinct !DISubprogram(name: "def_list_add", scope: !3, file: !3, line: 318, type: !2987, scopeLine: 319, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{null, !2989, !2104, !1085}
!2989 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2990, size: 64)
!2990 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_list_t", file: !409, line: 551, baseType: !2091)
!2991 = !DILocalVariable(name: "dl", arg: 1, scope: !2986, file: !3, line: 318, type: !2989)
!2992 = !DILocation(line: 318, column: 27, scope: !2986)
!2993 = !DILocalVariable(name: "original_insn", arg: 2, scope: !2986, file: !3, line: 318, type: !2104)
!2994 = !DILocation(line: 318, column: 38, scope: !2986)
!2995 = !DILocalVariable(name: "crosses_call", arg: 3, scope: !2986, file: !3, line: 318, type: !1085)
!2996 = !DILocation(line: 318, column: 58, scope: !2986)
!2997 = !DILocalVariable(name: "d", scope: !2986, file: !3, line: 320, type: !2998)
!2998 = !DIDerivedType(tag: DW_TAG_typedef, name: "def_t", file: !409, line: 212, baseType: !2999)
!2999 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2229, size: 64)
!3000 = !DILocation(line: 320, column: 9, scope: !2986)
!3001 = !DILocation(line: 322, column: 14, scope: !2986)
!3002 = !DILocation(line: 322, column: 3, scope: !2986)
!3003 = !DILocation(line: 323, column: 7, scope: !2986)
!3004 = !DILocation(line: 323, column: 5, scope: !2986)
!3005 = !DILocation(line: 325, column: 18, scope: !2986)
!3006 = !DILocation(line: 325, column: 3, scope: !2986)
!3007 = !DILocation(line: 325, column: 6, scope: !2986)
!3008 = !DILocation(line: 325, column: 16, scope: !2986)
!3009 = !DILocation(line: 326, column: 21, scope: !2986)
!3010 = !DILocation(line: 326, column: 3, scope: !2986)
!3011 = !DILocation(line: 326, column: 6, scope: !2986)
!3012 = !DILocation(line: 326, column: 19, scope: !2986)
!3013 = !DILocation(line: 327, column: 1, scope: !2986)
!3014 = distinct !DISubprogram(name: "create_target_context", scope: !3, file: !3, line: 360, type: !3015, scopeLine: 361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3015 = !DISubroutineType(types: !3016)
!3016 = !{!2217, !1085}
!3017 = !DILocalVariable(name: "clean_p", arg: 1, scope: !3014, file: !3, line: 360, type: !1085)
!3018 = !DILocation(line: 360, column: 29, scope: !3014)
!3019 = !DILocalVariable(name: "tc", scope: !3014, file: !3, line: 362, type: !2217)
!3020 = !DILocation(line: 362, column: 8, scope: !3014)
!3021 = !DILocation(line: 362, column: 13, scope: !3014)
!3022 = !DILocation(line: 364, column: 24, scope: !3014)
!3023 = !DILocation(line: 364, column: 28, scope: !3014)
!3024 = !DILocation(line: 364, column: 3, scope: !3014)
!3025 = !DILocation(line: 365, column: 10, scope: !3014)
!3026 = !DILocation(line: 365, column: 3, scope: !3014)
!3027 = distinct !DISubprogram(name: "alloc_target_context", scope: !3, file: !3, line: 341, type: !3028, scopeLine: 342, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3028 = !DISubroutineType(types: !3029)
!3029 = !{!2217}
!3030 = !DILocation(line: 343, column: 25, scope: !3027)
!3031 = !DILocation(line: 343, column: 11, scope: !3027)
!3032 = !DILocation(line: 344, column: 20, scope: !3027)
!3033 = !DILocation(line: 344, column: 6, scope: !3027)
!3034 = !DILocation(line: 344, column: 45, scope: !3027)
!3035 = !DILocation(line: 343, column: 3, scope: !3027)
!3036 = distinct !DISubprogram(name: "init_target_context", scope: !3, file: !3, line: 351, type: !3037, scopeLine: 352, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3037 = !DISubroutineType(types: !3038)
!3038 = !{null, !2217, !1085}
!3039 = !DILocalVariable(name: "tc", arg: 1, scope: !3036, file: !3, line: 351, type: !2217)
!3040 = !DILocation(line: 351, column: 27, scope: !3036)
!3041 = !DILocalVariable(name: "clean_p", arg: 2, scope: !3036, file: !3, line: 351, type: !1085)
!3042 = !DILocation(line: 351, column: 36, scope: !3036)
!3043 = !DILocation(line: 353, column: 21, scope: !3044)
!3044 = distinct !DILexicalBlock(scope: !3036, file: !3, line: 353, column: 7)
!3045 = !DILocation(line: 353, column: 7, scope: !3044)
!3046 = !DILocation(line: 353, column: 7, scope: !3036)
!3047 = !DILocation(line: 354, column: 19, scope: !3044)
!3048 = !DILocation(line: 354, column: 39, scope: !3044)
!3049 = !DILocation(line: 354, column: 43, scope: !3044)
!3050 = !DILocation(line: 354, column: 5, scope: !3044)
!3051 = !DILocation(line: 355, column: 1, scope: !3036)
!3052 = distinct !DISubprogram(name: "set_target_context", scope: !3, file: !3, line: 370, type: !3053, scopeLine: 371, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3053 = !DISubroutineType(types: !3054)
!3054 = !{null, !2217}
!3055 = !DILocalVariable(name: "tc", arg: 1, scope: !3052, file: !3, line: 370, type: !2217)
!3056 = !DILocation(line: 370, column: 26, scope: !3052)
!3057 = !DILocation(line: 372, column: 21, scope: !3058)
!3058 = distinct !DILexicalBlock(scope: !3052, file: !3, line: 372, column: 7)
!3059 = !DILocation(line: 372, column: 7, scope: !3058)
!3060 = !DILocation(line: 372, column: 7, scope: !3052)
!3061 = !DILocation(line: 373, column: 19, scope: !3058)
!3062 = !DILocation(line: 373, column: 38, scope: !3058)
!3063 = !DILocation(line: 373, column: 5, scope: !3058)
!3064 = !DILocation(line: 374, column: 1, scope: !3052)
!3065 = distinct !DISubprogram(name: "reset_target_context", scope: !3, file: !3, line: 422, type: !3037, scopeLine: 423, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3066 = !DILocalVariable(name: "tc", arg: 1, scope: !3065, file: !3, line: 422, type: !2217)
!3067 = !DILocation(line: 422, column: 28, scope: !3065)
!3068 = !DILocalVariable(name: "clean_p", arg: 2, scope: !3065, file: !3, line: 422, type: !1085)
!3069 = !DILocation(line: 422, column: 37, scope: !3065)
!3070 = !DILocation(line: 424, column: 25, scope: !3065)
!3071 = !DILocation(line: 424, column: 3, scope: !3065)
!3072 = !DILocation(line: 425, column: 24, scope: !3065)
!3073 = !DILocation(line: 425, column: 28, scope: !3065)
!3074 = !DILocation(line: 425, column: 3, scope: !3065)
!3075 = !DILocation(line: 426, column: 1, scope: !3065)
!3076 = distinct !DISubprogram(name: "clear_target_context", scope: !3, file: !3, line: 378, type: !3053, scopeLine: 379, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3077 = !DILocalVariable(name: "tc", arg: 1, scope: !3076, file: !3, line: 378, type: !2217)
!3078 = !DILocation(line: 378, column: 28, scope: !3076)
!3079 = !DILocation(line: 380, column: 21, scope: !3080)
!3080 = distinct !DILexicalBlock(scope: !3076, file: !3, line: 380, column: 7)
!3081 = !DILocation(line: 380, column: 7, scope: !3080)
!3082 = !DILocation(line: 380, column: 7, scope: !3076)
!3083 = !DILocation(line: 381, column: 19, scope: !3080)
!3084 = !DILocation(line: 381, column: 40, scope: !3080)
!3085 = !DILocation(line: 381, column: 5, scope: !3080)
!3086 = !DILocation(line: 382, column: 1, scope: !3076)
!3087 = distinct !DISubprogram(name: "advance_deps_context", scope: !3, file: !3, line: 514, type: !3088, scopeLine: 515, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3088 = !DISubroutineType(types: !3089)
!3089 = !{null, !2112, !2104}
!3090 = !DILocalVariable(name: "dc", arg: 1, scope: !3087, file: !3, line: 514, type: !2112)
!3091 = !DILocation(line: 514, column: 30, scope: !3087)
!3092 = !DILocalVariable(name: "insn", arg: 2, scope: !3087, file: !3, line: 514, type: !2104)
!3093 = !DILocation(line: 514, column: 41, scope: !3087)
!3094 = !DILocation(line: 516, column: 19, scope: !3087)
!3095 = !DILocation(line: 517, column: 22, scope: !3087)
!3096 = !DILocation(line: 517, column: 26, scope: !3087)
!3097 = !DILocation(line: 517, column: 3, scope: !3087)
!3098 = !DILocation(line: 518, column: 1, scope: !3087)
!3099 = distinct !DISubprogram(name: "init_fences", scope: !3, file: !3, line: 596, type: !3100, scopeLine: 597, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3100 = !DISubroutineType(types: !3101)
!3101 = !{null, !2104}
!3102 = !DILocalVariable(name: "old_fence", arg: 1, scope: !3099, file: !3, line: 596, type: !2104)
!3103 = !DILocation(line: 596, column: 21, scope: !3099)
!3104 = !DILocalVariable(name: "succ", scope: !3099, file: !3, line: 598, type: !2104)
!3105 = !DILocation(line: 598, column: 10, scope: !3099)
!3106 = !DILocalVariable(name: "si", scope: !3099, file: !3, line: 599, type: !3107)
!3107 = !DIDerivedType(tag: DW_TAG_typedef, name: "succ_iterator", file: !409, line: 995, baseType: !3108)
!3108 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !409, line: 967, size: 512, elements: !3109)
!3109 = !{!3110, !3111, !3112, !3113, !3120, !3121, !3122, !3123, !3124}
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "bb_end", scope: !3108, file: !409, line: 970, baseType: !1085, size: 8)
!3111 = !DIDerivedType(tag: DW_TAG_member, name: "e1", scope: !3108, file: !409, line: 973, baseType: !1408, size: 64, offset: 64)
!3112 = !DIDerivedType(tag: DW_TAG_member, name: "e2", scope: !3108, file: !409, line: 976, baseType: !1408, size: 64, offset: 128)
!3113 = !DIDerivedType(tag: DW_TAG_member, name: "ei", scope: !3108, file: !409, line: 979, baseType: !3114, size: 128, offset: 192)
!3114 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !155, line: 682, baseType: !3115)
!3115 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !155, line: 679, size: 128, elements: !3116)
!3116 = !{!3117, !3118}
!3117 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3115, file: !155, line: 680, baseType: !7, size: 32)
!3118 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !3115, file: !155, line: 681, baseType: !3119, size: 64, offset: 64)
!3119 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!3120 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3108, file: !409, line: 982, baseType: !1391, size: 64, offset: 320)
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3108, file: !409, line: 986, baseType: !2061, size: 16, offset: 384)
!3122 = !DIDerivedType(tag: DW_TAG_member, name: "current_flags", scope: !3108, file: !409, line: 990, baseType: !2061, size: 16, offset: 400)
!3123 = !DIDerivedType(tag: DW_TAG_member, name: "current_exit", scope: !3108, file: !409, line: 993, baseType: !874, size: 32, offset: 416)
!3124 = !DIDerivedType(tag: DW_TAG_member, name: "loop_exits", scope: !3108, file: !409, line: 994, baseType: !2234, size: 64, offset: 448)
!3125 = !DILocation(line: 599, column: 17, scope: !3099)
!3126 = !DILocalVariable(name: "first", scope: !3099, file: !3, line: 600, type: !1085)
!3127 = !DILocation(line: 600, column: 8, scope: !3099)
!3128 = !DILocalVariable(name: "ready_ticks_size", scope: !3099, file: !3, line: 601, type: !874)
!3129 = !DILocation(line: 601, column: 7, scope: !3099)
!3130 = !DILocation(line: 601, column: 26, scope: !3099)
!3131 = !DILocation(line: 601, column: 41, scope: !3099)
!3132 = !DILocation(line: 603, column: 3, scope: !3133)
!3133 = distinct !DILexicalBlock(scope: !3099, file: !3, line: 603, column: 3)
!3134 = !DILocation(line: 603, column: 3, scope: !3135)
!3135 = distinct !DILexicalBlock(scope: !3133, file: !3, line: 603, column: 3)
!3136 = !DILocation(line: 607, column: 11, scope: !3137)
!3137 = distinct !DILexicalBlock(scope: !3138, file: !3, line: 607, column: 11)
!3138 = distinct !DILexicalBlock(scope: !3135, file: !3, line: 605, column: 5)
!3139 = !DILocation(line: 607, column: 11, scope: !3138)
!3140 = !DILocation(line: 608, column: 15, scope: !3137)
!3141 = !DILocation(line: 608, column: 9, scope: !3137)
!3142 = !DILocation(line: 610, column: 9, scope: !3137)
!3143 = !DILocation(line: 612, column: 27, scope: !3138)
!3144 = !DILocation(line: 613, column: 4, scope: !3138)
!3145 = !DILocation(line: 614, column: 4, scope: !3138)
!3146 = !DILocation(line: 615, column: 4, scope: !3138)
!3147 = !DILocation(line: 618, column: 18, scope: !3138)
!3148 = !DILocation(line: 619, column: 18, scope: !3138)
!3149 = !DILocation(line: 622, column: 4, scope: !3138)
!3150 = !DILocation(line: 612, column: 7, scope: !3138)
!3151 = !DILocation(line: 624, column: 5, scope: !3138)
!3152 = distinct !{!3152, !3132, !3153}
!3153 = !DILocation(line: 624, column: 5, scope: !3133)
!3154 = !DILocation(line: 625, column: 1, scope: !3099)
!3155 = distinct !DISubprogram(name: "_succ_iter_start", scope: !409, file: !409, line: 1200, type: !3156, scopeLine: 1201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3156 = !DISubroutineType(types: !3157)
!3157 = !{!3107, !2325, !2104, !874}
!3158 = !DILocalVariable(name: "succp", arg: 1, scope: !3155, file: !409, line: 1200, type: !2325)
!3159 = !DILocation(line: 1200, column: 27, scope: !3155)
!3160 = !DILocalVariable(name: "insn", arg: 2, scope: !3155, file: !409, line: 1200, type: !2104)
!3161 = !DILocation(line: 1200, column: 41, scope: !3155)
!3162 = !DILocalVariable(name: "flags", arg: 3, scope: !3155, file: !409, line: 1200, type: !874)
!3163 = !DILocation(line: 1200, column: 51, scope: !3155)
!3164 = !DILocalVariable(name: "i", scope: !3155, file: !409, line: 1202, type: !3107)
!3165 = !DILocation(line: 1202, column: 17, scope: !3155)
!3166 = !DILocalVariable(name: "bb", scope: !3155, file: !409, line: 1204, type: !1391)
!3167 = !DILocation(line: 1204, column: 15, scope: !3155)
!3168 = !DILocation(line: 1204, column: 20, scope: !3155)
!3169 = !DILocation(line: 1206, column: 3, scope: !3155)
!3170 = !DILocation(line: 1208, column: 13, scope: !3155)
!3171 = !DILocation(line: 1208, column: 5, scope: !3155)
!3172 = !DILocation(line: 1208, column: 11, scope: !3155)
!3173 = !DILocation(line: 1211, column: 4, scope: !3155)
!3174 = !DILocation(line: 1211, column: 10, scope: !3155)
!3175 = !DILocation(line: 1212, column: 5, scope: !3155)
!3176 = !DILocation(line: 1212, column: 8, scope: !3155)
!3177 = !DILocation(line: 1213, column: 5, scope: !3155)
!3178 = !DILocation(line: 1213, column: 8, scope: !3155)
!3179 = !DILocation(line: 1214, column: 10, scope: !3155)
!3180 = !DILocation(line: 1214, column: 5, scope: !3155)
!3181 = !DILocation(line: 1214, column: 8, scope: !3155)
!3182 = !DILocation(line: 1215, column: 5, scope: !3155)
!3183 = !DILocation(line: 1215, column: 19, scope: !3155)
!3184 = !DILocation(line: 1216, column: 5, scope: !3155)
!3185 = !DILocation(line: 1216, column: 18, scope: !3155)
!3186 = !DILocation(line: 1217, column: 5, scope: !3155)
!3187 = !DILocation(line: 1217, column: 16, scope: !3155)
!3188 = !DILocation(line: 1219, column: 7, scope: !3189)
!3189 = distinct !DILexicalBlock(scope: !3155, file: !409, line: 1219, column: 7)
!3190 = !DILocation(line: 1219, column: 13, scope: !3189)
!3191 = !DILocation(line: 1219, column: 10, scope: !3189)
!3192 = !DILocation(line: 1219, column: 28, scope: !3189)
!3193 = !DILocation(line: 1219, column: 31, scope: !3189)
!3194 = !DILocation(line: 1219, column: 46, scope: !3189)
!3195 = !DILocation(line: 1219, column: 43, scope: !3189)
!3196 = !DILocation(line: 1219, column: 7, scope: !3155)
!3197 = !DILocation(line: 1221, column: 9, scope: !3198)
!3198 = distinct !DILexicalBlock(scope: !3189, file: !409, line: 1220, column: 5)
!3199 = !DILocation(line: 1221, column: 16, scope: !3198)
!3200 = !DILocation(line: 1224, column: 9, scope: !3198)
!3201 = !DILocation(line: 1224, column: 12, scope: !3198)
!3202 = !DILocation(line: 1224, column: 18, scope: !3198)
!3203 = !DILocation(line: 1225, column: 9, scope: !3198)
!3204 = !DILocation(line: 1225, column: 12, scope: !3198)
!3205 = !DILocation(line: 1225, column: 22, scope: !3198)
!3206 = !DILocation(line: 1226, column: 5, scope: !3198)
!3207 = !DILocation(line: 1229, column: 9, scope: !3208)
!3208 = distinct !DILexicalBlock(scope: !3189, file: !409, line: 1228, column: 5)
!3209 = !DILocation(line: 1229, column: 14, scope: !3208)
!3210 = !DILocation(line: 1230, column: 9, scope: !3208)
!3211 = !DILocation(line: 1230, column: 16, scope: !3208)
!3212 = !DILocation(line: 1233, column: 3, scope: !3155)
!3213 = distinct !DISubprogram(name: "_succ_iter_cond", scope: !409, file: !409, line: 1237, type: !3214, scopeLine: 1239, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3214 = !DISubroutineType(types: !3215)
!3215 = !{!1085, !3216, !2055, !850, !3217}
!3216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3107, size: 64)
!3217 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3218, size: 64)
!3218 = !DISubroutineType(types: !3219)
!3219 = !{!1085, !1408, !3216}
!3220 = !DILocalVariable(name: "ip", arg: 1, scope: !3213, file: !409, line: 1237, type: !3216)
!3221 = !DILocation(line: 1237, column: 33, scope: !3213)
!3222 = !DILocalVariable(name: "succp", arg: 2, scope: !3213, file: !409, line: 1237, type: !2055)
!3223 = !DILocation(line: 1237, column: 42, scope: !3213)
!3224 = !DILocalVariable(name: "insn", arg: 3, scope: !3213, file: !409, line: 1237, type: !850)
!3225 = !DILocation(line: 1237, column: 53, scope: !3213)
!3226 = !DILocalVariable(name: "check", arg: 4, scope: !3213, file: !409, line: 1238, type: !3217)
!3227 = !DILocation(line: 1238, column: 23, scope: !3213)
!3228 = !DILocation(line: 1240, column: 8, scope: !3229)
!3229 = distinct !DILexicalBlock(scope: !3213, file: !409, line: 1240, column: 7)
!3230 = !DILocation(line: 1240, column: 12, scope: !3229)
!3231 = !DILocation(line: 1240, column: 7, scope: !3213)
!3232 = !DILocation(line: 1244, column: 12, scope: !3233)
!3233 = distinct !DILexicalBlock(scope: !3234, file: !409, line: 1244, column: 11)
!3234 = distinct !DILexicalBlock(scope: !3229, file: !409, line: 1241, column: 5)
!3235 = !DILocation(line: 1244, column: 11, scope: !3233)
!3236 = !DILocation(line: 1244, column: 18, scope: !3233)
!3237 = !DILocation(line: 1244, column: 26, scope: !3233)
!3238 = !DILocation(line: 1244, column: 30, scope: !3233)
!3239 = !DILocation(line: 1244, column: 34, scope: !3233)
!3240 = !DILocation(line: 1244, column: 40, scope: !3233)
!3241 = !DILocation(line: 1244, column: 56, scope: !3233)
!3242 = !DILocation(line: 1244, column: 11, scope: !3234)
!3243 = !DILocation(line: 1245, column: 9, scope: !3233)
!3244 = !DILocation(line: 1247, column: 16, scope: !3234)
!3245 = !DILocation(line: 1247, column: 8, scope: !3234)
!3246 = !DILocation(line: 1247, column: 14, scope: !3234)
!3247 = !DILocation(line: 1248, column: 7, scope: !3234)
!3248 = !DILocation(line: 1248, column: 11, scope: !3234)
!3249 = !DILocation(line: 1248, column: 25, scope: !3234)
!3250 = !DILocation(line: 1249, column: 7, scope: !3234)
!3251 = !DILocation(line: 1253, column: 7, scope: !3252)
!3252 = distinct !DILexicalBlock(scope: !3229, file: !409, line: 1252, column: 5)
!3253 = !DILocalVariable(name: "e_tmp", scope: !3254, file: !409, line: 1255, type: !1408)
!3254 = distinct !DILexicalBlock(scope: !3252, file: !409, line: 1254, column: 9)
!3255 = !DILocation(line: 1255, column: 16, scope: !3254)
!3256 = !DILocation(line: 1258, column: 15, scope: !3257)
!3257 = distinct !DILexicalBlock(scope: !3254, file: !409, line: 1258, column: 15)
!3258 = !DILocation(line: 1258, column: 19, scope: !3257)
!3259 = !DILocation(line: 1258, column: 15, scope: !3254)
!3260 = !DILocation(line: 1260, column: 15, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3257, file: !409, line: 1259, column: 13)
!3262 = !DILocation(line: 1262, column: 19, scope: !3263)
!3263 = distinct !DILexicalBlock(scope: !3261, file: !409, line: 1261, column: 17)
!3264 = !DILocation(line: 1264, column: 19, scope: !3263)
!3265 = !DILocation(line: 1264, column: 23, scope: !3263)
!3266 = !DILocation(line: 1264, column: 35, scope: !3263)
!3267 = !DILocation(line: 1265, column: 17, scope: !3263)
!3268 = !DILocation(line: 1266, column: 15, scope: !3261)
!3269 = !DILocation(line: 1266, column: 21, scope: !3261)
!3270 = !DILocation(line: 1266, column: 25, scope: !3261)
!3271 = !DILocation(line: 1266, column: 32, scope: !3261)
!3272 = !DILocation(line: 1266, column: 39, scope: !3261)
!3273 = !DILocation(line: 1266, column: 24, scope: !3261)
!3274 = !DILocation(line: 0, scope: !3261)
!3275 = distinct !{!3275, !3260, !3276}
!3276 = !DILocation(line: 1266, column: 42, scope: !3261)
!3277 = !DILocation(line: 1268, column: 20, scope: !3278)
!3278 = distinct !DILexicalBlock(scope: !3261, file: !409, line: 1268, column: 19)
!3279 = !DILocation(line: 1268, column: 19, scope: !3261)
!3280 = !DILocation(line: 1269, column: 17, scope: !3278)
!3281 = !DILocation(line: 1270, column: 13, scope: !3261)
!3282 = !DILocation(line: 1273, column: 15, scope: !3283)
!3283 = distinct !DILexicalBlock(scope: !3254, file: !409, line: 1273, column: 15)
!3284 = !DILocation(line: 1273, column: 15, scope: !3254)
!3285 = !DILocation(line: 1275, column: 24, scope: !3286)
!3286 = distinct !DILexicalBlock(scope: !3283, file: !409, line: 1274, column: 13)
!3287 = !DILocation(line: 1275, column: 15, scope: !3286)
!3288 = !DILocation(line: 1275, column: 19, scope: !3286)
!3289 = !DILocation(line: 1275, column: 22, scope: !3286)
!3290 = !DILocation(line: 1276, column: 15, scope: !3286)
!3291 = !DILocation(line: 1280, column: 11, scope: !3254)
!3292 = !DILocation(line: 1280, column: 27, scope: !3254)
!3293 = !DILocation(line: 1280, column: 31, scope: !3254)
!3294 = !DILocation(line: 1280, column: 37, scope: !3254)
!3295 = !DILocation(line: 1280, column: 41, scope: !3254)
!3296 = !DILocation(line: 1280, column: 18, scope: !3254)
!3297 = !DILocalVariable(name: "bb", scope: !3298, file: !409, line: 1282, type: !1391)
!3298 = distinct !DILexicalBlock(scope: !3254, file: !409, line: 1281, column: 13)
!3299 = !DILocation(line: 1282, column: 27, scope: !3298)
!3300 = !DILocation(line: 1282, column: 32, scope: !3298)
!3301 = !DILocation(line: 1282, column: 36, scope: !3298)
!3302 = !DILocation(line: 1282, column: 40, scope: !3298)
!3303 = !DILocation(line: 1285, column: 20, scope: !3304)
!3304 = distinct !DILexicalBlock(scope: !3298, file: !409, line: 1285, column: 19)
!3305 = !DILocation(line: 1285, column: 24, scope: !3304)
!3306 = !DILocation(line: 1285, column: 30, scope: !3304)
!3307 = !DILocation(line: 1286, column: 19, scope: !3304)
!3308 = !DILocation(line: 1286, column: 22, scope: !3304)
!3309 = !DILocation(line: 1287, column: 5, scope: !3304)
!3310 = !DILocation(line: 1287, column: 31, scope: !3304)
!3311 = !DILocation(line: 1287, column: 10, scope: !3304)
!3312 = !DILocation(line: 1288, column: 9, scope: !3304)
!3313 = !DILocation(line: 1288, column: 12, scope: !3304)
!3314 = !DILocation(line: 1289, column: 7, scope: !3304)
!3315 = !DILocation(line: 1289, column: 5, scope: !3304)
!3316 = !DILocation(line: 1285, column: 19, scope: !3298)
!3317 = !DILocation(line: 1292, column: 42, scope: !3318)
!3318 = distinct !DILexicalBlock(scope: !3304, file: !409, line: 1290, column: 17)
!3319 = !DILocation(line: 1292, column: 22, scope: !3318)
!3320 = !DILocation(line: 1292, column: 5, scope: !3318)
!3321 = !DILocation(line: 1292, column: 9, scope: !3318)
!3322 = !DILocation(line: 1292, column: 20, scope: !3318)
!3323 = !DILocation(line: 1294, column: 9, scope: !3324)
!3324 = distinct !DILexicalBlock(scope: !3318, file: !409, line: 1294, column: 9)
!3325 = !DILocation(line: 1294, column: 13, scope: !3324)
!3326 = !DILocation(line: 1294, column: 9, scope: !3318)
!3327 = !DILocation(line: 1296, column: 11, scope: !3328)
!3328 = distinct !DILexicalBlock(scope: !3324, file: !409, line: 1295, column: 7)
!3329 = !DILocation(line: 1296, column: 15, scope: !3328)
!3330 = !DILocation(line: 1296, column: 28, scope: !3328)
!3331 = !DILocation(line: 1299, column: 20, scope: !3328)
!3332 = !DILocation(line: 1299, column: 24, scope: !3328)
!3333 = !DILocation(line: 1299, column: 9, scope: !3328)
!3334 = !DILocation(line: 1300, column: 9, scope: !3328)
!3335 = !DILocation(line: 1302, column: 17, scope: !3318)
!3336 = !DILocation(line: 1305, column: 19, scope: !3337)
!3337 = distinct !DILexicalBlock(scope: !3298, file: !409, line: 1305, column: 19)
!3338 = !DILocation(line: 1305, column: 26, scope: !3337)
!3339 = !DILocation(line: 1305, column: 30, scope: !3337)
!3340 = !DILocation(line: 1305, column: 34, scope: !3337)
!3341 = !DILocation(line: 1305, column: 19, scope: !3298)
!3342 = !DILocation(line: 1306, column: 17, scope: !3337)
!3343 = !DILocation(line: 1308, column: 26, scope: !3298)
!3344 = !DILocation(line: 1308, column: 30, scope: !3298)
!3345 = !DILocation(line: 1308, column: 15, scope: !3298)
!3346 = distinct !{!3346, !3291, !3347}
!3347 = !DILocation(line: 1309, column: 13, scope: !3254)
!3348 = !DILocation(line: 1313, column: 15, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3254, file: !409, line: 1313, column: 15)
!3350 = !DILocation(line: 1313, column: 19, scope: !3349)
!3351 = !DILocation(line: 1313, column: 15, scope: !3254)
!3352 = !DILocation(line: 1314, column: 13, scope: !3349)
!3353 = distinct !{!3353, !3251, !3354}
!3354 = !DILocation(line: 1318, column: 9, scope: !3252)
!3355 = !DILocation(line: 1317, column: 11, scope: !3254)
!3356 = !DILocation(line: 1320, column: 11, scope: !3357)
!3357 = distinct !DILexicalBlock(scope: !3252, file: !409, line: 1320, column: 11)
!3358 = !DILocation(line: 1320, column: 15, scope: !3357)
!3359 = !DILocation(line: 1320, column: 11, scope: !3252)
!3360 = !DILocalVariable(name: "bb", scope: !3361, file: !409, line: 1322, type: !1391)
!3361 = distinct !DILexicalBlock(scope: !3357, file: !409, line: 1321, column: 2)
!3362 = !DILocation(line: 1322, column: 16, scope: !3361)
!3363 = !DILocation(line: 1322, column: 21, scope: !3361)
!3364 = !DILocation(line: 1322, column: 25, scope: !3361)
!3365 = !DILocation(line: 1322, column: 29, scope: !3361)
!3366 = !DILocation(line: 1324, column: 8, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3361, file: !409, line: 1324, column: 8)
!3368 = !DILocation(line: 1324, column: 14, scope: !3367)
!3369 = !DILocation(line: 1324, column: 11, scope: !3367)
!3370 = !DILocation(line: 1324, column: 29, scope: !3367)
!3371 = !DILocation(line: 1324, column: 32, scope: !3367)
!3372 = !DILocation(line: 1324, column: 38, scope: !3367)
!3373 = !DILocation(line: 1324, column: 35, scope: !3367)
!3374 = !DILocation(line: 1324, column: 8, scope: !3361)
!3375 = !DILocation(line: 1325, column: 15, scope: !3367)
!3376 = !DILocation(line: 1325, column: 7, scope: !3367)
!3377 = !DILocation(line: 1325, column: 13, scope: !3367)
!3378 = !DILocation(line: 1325, column: 6, scope: !3367)
!3379 = !DILocation(line: 1328, column: 37, scope: !3380)
!3380 = distinct !DILexicalBlock(scope: !3367, file: !409, line: 1327, column: 6)
!3381 = !DILocation(line: 1328, column: 24, scope: !3380)
!3382 = !DILocation(line: 1328, column: 16, scope: !3380)
!3383 = !DILocation(line: 1328, column: 22, scope: !3380)
!3384 = !DILocation(line: 1330, column: 15, scope: !3380)
!3385 = !DILocation(line: 1332, column: 8, scope: !3380)
!3386 = !DILocation(line: 1335, column: 4, scope: !3361)
!3387 = !DILocation(line: 1338, column: 2, scope: !3357)
!3388 = !DILocation(line: 1340, column: 1, scope: !3213)
!3389 = distinct !DISubprogram(name: "_eligible_successor_edge_p", scope: !409, file: !409, line: 1356, type: !3218, scopeLine: 1357, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3390 = !DILocalVariable(name: "e1", arg: 1, scope: !3389, file: !409, line: 1356, type: !1408)
!3391 = !DILocation(line: 1356, column: 34, scope: !3389)
!3392 = !DILocalVariable(name: "ip", arg: 2, scope: !3389, file: !409, line: 1356, type: !3216)
!3393 = !DILocation(line: 1356, column: 53, scope: !3389)
!3394 = !DILocalVariable(name: "e2", scope: !3389, file: !409, line: 1358, type: !1408)
!3395 = !DILocation(line: 1358, column: 8, scope: !3389)
!3396 = !DILocation(line: 1358, column: 13, scope: !3389)
!3397 = !DILocalVariable(name: "bb", scope: !3389, file: !409, line: 1359, type: !1391)
!3398 = !DILocation(line: 1359, column: 15, scope: !3389)
!3399 = !DILocalVariable(name: "flags", scope: !3389, file: !409, line: 1360, type: !874)
!3400 = !DILocation(line: 1360, column: 7, scope: !3389)
!3401 = !DILocation(line: 1360, column: 15, scope: !3389)
!3402 = !DILocation(line: 1360, column: 19, scope: !3389)
!3403 = !DILocalVariable(name: "src_outside_rgn", scope: !3389, file: !409, line: 1361, type: !1085)
!3404 = !DILocation(line: 1361, column: 8, scope: !3389)
!3405 = !DILocation(line: 1361, column: 48, scope: !3389)
!3406 = !DILocation(line: 1361, column: 52, scope: !3389)
!3407 = !DILocation(line: 1361, column: 27, scope: !3389)
!3408 = !DILocation(line: 1361, column: 26, scope: !3389)
!3409 = !DILocation(line: 1363, column: 3, scope: !3389)
!3410 = !DILocation(line: 1365, column: 7, scope: !3411)
!3411 = distinct !DILexicalBlock(scope: !3389, file: !409, line: 1365, column: 7)
!3412 = !DILocation(line: 1365, column: 7, scope: !3389)
!3413 = !DILocation(line: 1369, column: 7, scope: !3414)
!3414 = distinct !DILexicalBlock(scope: !3411, file: !409, line: 1366, column: 5)
!3415 = !DILocation(line: 1371, column: 11, scope: !3416)
!3416 = distinct !DILexicalBlock(scope: !3414, file: !409, line: 1371, column: 11)
!3417 = !DILocation(line: 1371, column: 17, scope: !3416)
!3418 = !DILocation(line: 1371, column: 11, scope: !3414)
!3419 = !DILocation(line: 1372, column: 2, scope: !3416)
!3420 = !DILocation(line: 1373, column: 5, scope: !3414)
!3421 = !DILocation(line: 1375, column: 8, scope: !3389)
!3422 = !DILocation(line: 1375, column: 12, scope: !3389)
!3423 = !DILocation(line: 1375, column: 6, scope: !3389)
!3424 = !DILocation(line: 1378, column: 3, scope: !3389)
!3425 = !DILocation(line: 1380, column: 28, scope: !3426)
!3426 = distinct !DILexicalBlock(scope: !3427, file: !409, line: 1380, column: 11)
!3427 = distinct !DILexicalBlock(scope: !3389, file: !409, line: 1379, column: 5)
!3428 = !DILocation(line: 1380, column: 12, scope: !3426)
!3429 = !DILocation(line: 1380, column: 11, scope: !3427)
!3430 = !DILocalVariable(name: "ne", scope: !3431, file: !409, line: 1382, type: !1408)
!3431 = distinct !DILexicalBlock(scope: !3426, file: !409, line: 1381, column: 2)
!3432 = !DILocation(line: 1382, column: 9, scope: !3431)
!3433 = !DILocalVariable(name: "nbb", scope: !3431, file: !409, line: 1383, type: !1391)
!3434 = !DILocation(line: 1383, column: 16, scope: !3431)
!3435 = !DILocation(line: 1385, column: 32, scope: !3436)
!3436 = distinct !DILexicalBlock(scope: !3431, file: !409, line: 1385, column: 8)
!3437 = !DILocation(line: 1385, column: 9, scope: !3436)
!3438 = !DILocation(line: 1385, column: 8, scope: !3431)
!3439 = !DILocation(line: 1386, column: 6, scope: !3436)
!3440 = !DILocation(line: 1388, column: 9, scope: !3431)
!3441 = !DILocation(line: 1388, column: 7, scope: !3431)
!3442 = !DILocation(line: 1389, column: 10, scope: !3431)
!3443 = !DILocation(line: 1389, column: 14, scope: !3431)
!3444 = !DILocation(line: 1389, column: 8, scope: !3431)
!3445 = !DILocation(line: 1391, column: 30, scope: !3446)
!3446 = distinct !DILexicalBlock(scope: !3431, file: !409, line: 1391, column: 8)
!3447 = !DILocation(line: 1391, column: 9, scope: !3446)
!3448 = !DILocation(line: 1392, column: 8, scope: !3446)
!3449 = !DILocation(line: 1392, column: 13, scope: !3446)
!3450 = !DILocation(line: 1392, column: 19, scope: !3446)
!3451 = !DILocation(line: 1391, column: 8, scope: !3431)
!3452 = !DILocation(line: 1393, column: 6, scope: !3446)
!3453 = !DILocation(line: 1395, column: 9, scope: !3431)
!3454 = !DILocation(line: 1395, column: 7, scope: !3431)
!3455 = !DILocation(line: 1396, column: 9, scope: !3431)
!3456 = !DILocation(line: 1396, column: 7, scope: !3431)
!3457 = !DILocation(line: 1397, column: 4, scope: !3431)
!3458 = distinct !{!3458, !3424, !3459}
!3459 = !DILocation(line: 1409, column: 5, scope: !3389)
!3460 = !DILocation(line: 1400, column: 33, scope: !3461)
!3461 = distinct !DILexicalBlock(scope: !3427, file: !409, line: 1400, column: 11)
!3462 = !DILocation(line: 1400, column: 12, scope: !3461)
!3463 = !DILocation(line: 1401, column: 11, scope: !3461)
!3464 = !DILocation(line: 1401, column: 16, scope: !3461)
!3465 = !DILocation(line: 1401, column: 22, scope: !3461)
!3466 = !DILocation(line: 1400, column: 11, scope: !3427)
!3467 = !DILocation(line: 1402, column: 9, scope: !3461)
!3468 = !DILocation(line: 1404, column: 11, scope: !3469)
!3469 = distinct !DILexicalBlock(scope: !3427, file: !409, line: 1404, column: 11)
!3470 = !DILocation(line: 1404, column: 34, scope: !3469)
!3471 = !DILocation(line: 1404, column: 11, scope: !3427)
!3472 = !DILocation(line: 1405, column: 2, scope: !3469)
!3473 = !DILocation(line: 1407, column: 12, scope: !3427)
!3474 = !DILocation(line: 1407, column: 10, scope: !3427)
!3475 = !DILocation(line: 1408, column: 12, scope: !3427)
!3476 = !DILocation(line: 1408, column: 16, scope: !3427)
!3477 = !DILocation(line: 1408, column: 10, scope: !3427)
!3478 = !DILocation(line: 1412, column: 12, scope: !3389)
!3479 = !DILocation(line: 1412, column: 3, scope: !3389)
!3480 = !DILocation(line: 1412, column: 7, scope: !3389)
!3481 = !DILocation(line: 1412, column: 10, scope: !3389)
!3482 = !DILocation(line: 1414, column: 28, scope: !3483)
!3483 = distinct !DILexicalBlock(scope: !3389, file: !409, line: 1414, column: 7)
!3484 = !DILocation(line: 1414, column: 7, scope: !3483)
!3485 = !DILocation(line: 1414, column: 7, scope: !3389)
!3486 = !DILocalVariable(name: "succeeds_in_top_order", scope: !3487, file: !409, line: 1420, type: !1085)
!3487 = distinct !DILexicalBlock(scope: !3483, file: !409, line: 1415, column: 5)
!3488 = !DILocation(line: 1420, column: 12, scope: !3487)
!3489 = !DILocation(line: 1420, column: 37, scope: !3487)
!3490 = !DILocation(line: 1421, column: 11, scope: !3487)
!3491 = !DILocation(line: 1421, column: 9, scope: !3487)
!3492 = !DILocation(line: 1420, column: 36, scope: !3487)
!3493 = !DILocation(line: 1424, column: 7, scope: !3487)
!3494 = !DILocation(line: 1424, column: 11, scope: !3487)
!3495 = !DILocation(line: 1424, column: 25, scope: !3487)
!3496 = !DILocation(line: 1427, column: 11, scope: !3497)
!3497 = distinct !DILexicalBlock(scope: !3487, file: !409, line: 1427, column: 11)
!3498 = !DILocation(line: 1427, column: 11, scope: !3487)
!3499 = !DILocation(line: 1430, column: 11, scope: !3500)
!3500 = distinct !DILexicalBlock(scope: !3497, file: !409, line: 1428, column: 9)
!3501 = !DILocation(line: 1432, column: 21, scope: !3500)
!3502 = !DILocation(line: 1432, column: 27, scope: !3500)
!3503 = !DILocation(line: 1432, column: 19, scope: !3500)
!3504 = !DILocation(line: 1432, column: 18, scope: !3500)
!3505 = !DILocation(line: 1432, column: 11, scope: !3500)
!3506 = !DILocation(line: 1439, column: 11, scope: !3507)
!3507 = distinct !DILexicalBlock(scope: !3487, file: !409, line: 1439, column: 11)
!3508 = !DILocation(line: 1440, column: 12, scope: !3507)
!3509 = !DILocation(line: 1440, column: 15, scope: !3507)
!3510 = !DILocation(line: 1440, column: 19, scope: !3507)
!3511 = !DILocation(line: 1440, column: 24, scope: !3507)
!3512 = !DILocation(line: 1440, column: 39, scope: !3507)
!3513 = !DILocation(line: 1440, column: 43, scope: !3507)
!3514 = !DILocation(line: 1440, column: 36, scope: !3507)
!3515 = !DILocation(line: 1439, column: 11, scope: !3487)
!3516 = !DILocation(line: 1441, column: 19, scope: !3507)
!3517 = !DILocation(line: 1441, column: 25, scope: !3507)
!3518 = !DILocation(line: 1441, column: 17, scope: !3507)
!3519 = !DILocation(line: 1441, column: 16, scope: !3507)
!3520 = !DILocation(line: 1441, column: 9, scope: !3507)
!3521 = !DILocation(line: 1444, column: 7, scope: !3487)
!3522 = !DILocation(line: 1444, column: 11, scope: !3487)
!3523 = !DILocation(line: 1444, column: 25, scope: !3487)
!3524 = !DILocation(line: 1445, column: 17, scope: !3487)
!3525 = !DILocation(line: 1445, column: 23, scope: !3487)
!3526 = !DILocation(line: 1445, column: 15, scope: !3487)
!3527 = !DILocation(line: 1445, column: 14, scope: !3487)
!3528 = !DILocation(line: 1445, column: 7, scope: !3487)
!3529 = !DILocation(line: 1448, column: 3, scope: !3389)
!3530 = !DILocation(line: 1448, column: 7, scope: !3389)
!3531 = !DILocation(line: 1448, column: 21, scope: !3389)
!3532 = !DILocation(line: 1449, column: 13, scope: !3389)
!3533 = !DILocation(line: 1449, column: 19, scope: !3389)
!3534 = !DILocation(line: 1449, column: 11, scope: !3389)
!3535 = !DILocation(line: 1449, column: 10, scope: !3389)
!3536 = !DILocation(line: 1449, column: 3, scope: !3389)
!3537 = !DILocation(line: 1450, column: 1, scope: !3389)
!3538 = distinct !DISubprogram(name: "flist_add", scope: !3, file: !3, line: 262, type: !3539, scopeLine: 267, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3539 = !DISubroutineType(types: !3540)
!3540 = !{null, !2928, !2104, !2210, !2112, !962, !2104, !2036, !2051, !874, !2104, !874, !874, !874, !1085, !1085}
!3541 = !DILocalVariable(name: "lp", arg: 1, scope: !3538, file: !3, line: 262, type: !2928)
!3542 = !DILocation(line: 262, column: 21, scope: !3538)
!3543 = !DILocalVariable(name: "insn", arg: 2, scope: !3538, file: !3, line: 262, type: !2104)
!3544 = !DILocation(line: 262, column: 32, scope: !3538)
!3545 = !DILocalVariable(name: "state", arg: 3, scope: !3538, file: !3, line: 262, type: !2210)
!3546 = !DILocation(line: 262, column: 46, scope: !3538)
!3547 = !DILocalVariable(name: "dc", arg: 4, scope: !3538, file: !3, line: 262, type: !2112)
!3548 = !DILocation(line: 262, column: 60, scope: !3538)
!3549 = !DILocalVariable(name: "tc", arg: 5, scope: !3538, file: !3, line: 262, type: !962)
!3550 = !DILocation(line: 262, column: 70, scope: !3538)
!3551 = !DILocalVariable(name: "last_scheduled_insn", arg: 6, scope: !3538, file: !3, line: 263, type: !2104)
!3552 = !DILocation(line: 263, column: 19, scope: !3538)
!3553 = !DILocalVariable(name: "executing_insns", arg: 7, scope: !3538, file: !3, line: 263, type: !2036)
!3554 = !DILocation(line: 263, column: 53, scope: !3538)
!3555 = !DILocalVariable(name: "ready_ticks", arg: 8, scope: !3538, file: !3, line: 264, type: !2051)
!3556 = !DILocation(line: 264, column: 17, scope: !3538)
!3557 = !DILocalVariable(name: "ready_ticks_size", arg: 9, scope: !3538, file: !3, line: 264, type: !874)
!3558 = !DILocation(line: 264, column: 34, scope: !3538)
!3559 = !DILocalVariable(name: "sched_next", arg: 10, scope: !3538, file: !3, line: 264, type: !2104)
!3560 = !DILocation(line: 264, column: 59, scope: !3538)
!3561 = !DILocalVariable(name: "cycle", arg: 11, scope: !3538, file: !3, line: 265, type: !874)
!3562 = !DILocation(line: 265, column: 16, scope: !3538)
!3563 = !DILocalVariable(name: "cycle_issued_insns", arg: 12, scope: !3538, file: !3, line: 265, type: !874)
!3564 = !DILocation(line: 265, column: 27, scope: !3538)
!3565 = !DILocalVariable(name: "issue_more", arg: 13, scope: !3538, file: !3, line: 265, type: !874)
!3566 = !DILocation(line: 265, column: 51, scope: !3538)
!3567 = !DILocalVariable(name: "starts_cycle_p", arg: 14, scope: !3538, file: !3, line: 266, type: !1085)
!3568 = !DILocation(line: 266, column: 17, scope: !3538)
!3569 = !DILocalVariable(name: "after_stall_p", arg: 15, scope: !3538, file: !3, line: 266, type: !1085)
!3570 = !DILocation(line: 266, column: 38, scope: !3538)
!3571 = !DILocalVariable(name: "f", scope: !3538, file: !3, line: 268, type: !2940)
!3572 = !DILocation(line: 268, column: 11, scope: !3538)
!3573 = !DILocation(line: 270, column: 14, scope: !3538)
!3574 = !DILocation(line: 270, column: 3, scope: !3538)
!3575 = !DILocation(line: 271, column: 7, scope: !3538)
!3576 = !DILocation(line: 271, column: 5, scope: !3538)
!3577 = !DILocation(line: 273, column: 20, scope: !3538)
!3578 = !DILocation(line: 273, column: 3, scope: !3538)
!3579 = !DILocation(line: 273, column: 18, scope: !3538)
!3580 = !DILocation(line: 275, column: 3, scope: !3538)
!3581 = !DILocation(line: 276, column: 21, scope: !3538)
!3582 = !DILocation(line: 276, column: 3, scope: !3538)
!3583 = !DILocation(line: 276, column: 19, scope: !3538)
!3584 = !DILocation(line: 278, column: 21, scope: !3538)
!3585 = !DILocation(line: 278, column: 3, scope: !3538)
!3586 = !DILocation(line: 278, column: 19, scope: !3538)
!3587 = !DILocation(line: 279, column: 28, scope: !3538)
!3588 = !DILocation(line: 279, column: 3, scope: !3538)
!3589 = !DILocation(line: 279, column: 26, scope: !3538)
!3590 = !DILocation(line: 280, column: 30, scope: !3538)
!3591 = !DILocation(line: 280, column: 3, scope: !3538)
!3592 = !DILocation(line: 280, column: 28, scope: !3538)
!3593 = !DILocation(line: 281, column: 29, scope: !3538)
!3594 = !DILocation(line: 281, column: 3, scope: !3538)
!3595 = !DILocation(line: 281, column: 27, scope: !3538)
!3596 = !DILocation(line: 283, column: 3, scope: !3538)
!3597 = !DILocation(line: 284, column: 18, scope: !3538)
!3598 = !DILocation(line: 284, column: 3, scope: !3538)
!3599 = !DILocation(line: 284, column: 16, scope: !3538)
!3600 = !DILocation(line: 286, column: 3, scope: !3538)
!3601 = !DILocation(line: 287, column: 18, scope: !3538)
!3602 = !DILocation(line: 287, column: 3, scope: !3538)
!3603 = !DILocation(line: 287, column: 16, scope: !3538)
!3604 = !DILocation(line: 289, column: 35, scope: !3538)
!3605 = !DILocation(line: 289, column: 3, scope: !3538)
!3606 = !DILocation(line: 289, column: 33, scope: !3538)
!3607 = !DILocation(line: 290, column: 26, scope: !3538)
!3608 = !DILocation(line: 290, column: 3, scope: !3538)
!3609 = !DILocation(line: 290, column: 24, scope: !3538)
!3610 = !DILocation(line: 291, column: 31, scope: !3538)
!3611 = !DILocation(line: 291, column: 3, scope: !3538)
!3612 = !DILocation(line: 291, column: 29, scope: !3538)
!3613 = !DILocation(line: 292, column: 27, scope: !3538)
!3614 = !DILocation(line: 292, column: 3, scope: !3538)
!3615 = !DILocation(line: 292, column: 25, scope: !3538)
!3616 = !DILocation(line: 293, column: 32, scope: !3538)
!3617 = !DILocation(line: 293, column: 3, scope: !3538)
!3618 = !DILocation(line: 293, column: 30, scope: !3538)
!3619 = !DILocation(line: 294, column: 26, scope: !3538)
!3620 = !DILocation(line: 294, column: 3, scope: !3538)
!3621 = !DILocation(line: 294, column: 24, scope: !3538)
!3622 = !DILocation(line: 296, column: 30, scope: !3538)
!3623 = !DILocation(line: 296, column: 3, scope: !3538)
!3624 = !DILocation(line: 297, column: 1, scope: !3538)
!3625 = distinct !DISubprogram(name: "state_create", scope: !3, file: !3, line: 532, type: !3626, scopeLine: 533, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3626 = !DISubroutineType(types: !3627)
!3627 = !{!2210}
!3628 = !DILocalVariable(name: "state", scope: !3625, file: !3, line: 534, type: !2210)
!3629 = !DILocation(line: 534, column: 11, scope: !3625)
!3630 = !DILocation(line: 534, column: 19, scope: !3625)
!3631 = !DILocation(line: 536, column: 16, scope: !3625)
!3632 = !DILocation(line: 536, column: 3, scope: !3625)
!3633 = !DILocation(line: 537, column: 18, scope: !3625)
!3634 = !DILocation(line: 537, column: 3, scope: !3625)
!3635 = !DILocation(line: 538, column: 10, scope: !3625)
!3636 = !DILocation(line: 538, column: 3, scope: !3625)
!3637 = distinct !DISubprogram(name: "create_deps_context", scope: !3, file: !3, line: 450, type: !3638, scopeLine: 451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3638 = !DISubroutineType(types: !3639)
!3639 = !{!2112}
!3640 = !DILocalVariable(name: "dc", scope: !3637, file: !3, line: 452, type: !2112)
!3641 = !DILocation(line: 452, column: 10, scope: !3637)
!3642 = !DILocation(line: 452, column: 15, scope: !3637)
!3643 = !DILocation(line: 454, column: 14, scope: !3637)
!3644 = !DILocation(line: 454, column: 3, scope: !3637)
!3645 = !DILocation(line: 455, column: 10, scope: !3637)
!3646 = !DILocation(line: 455, column: 3, scope: !3637)
!3647 = distinct !DISubprogram(name: "_succ_iter_next", scope: !409, file: !409, line: 1343, type: !3648, scopeLine: 1344, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3648 = !DISubroutineType(types: !3649)
!3649 = !{null, !3216}
!3650 = !DILocalVariable(name: "ip", arg: 1, scope: !3647, file: !409, line: 1343, type: !3216)
!3651 = !DILocation(line: 1343, column: 33, scope: !3647)
!3652 = !DILocation(line: 1345, column: 3, scope: !3647)
!3653 = !DILocation(line: 1347, column: 7, scope: !3654)
!3654 = distinct !DILexicalBlock(scope: !3647, file: !409, line: 1347, column: 7)
!3655 = !DILocation(line: 1347, column: 11, scope: !3654)
!3656 = !DILocation(line: 1347, column: 18, scope: !3654)
!3657 = !DILocation(line: 1347, column: 21, scope: !3654)
!3658 = !DILocation(line: 1347, column: 25, scope: !3654)
!3659 = !DILocation(line: 1347, column: 28, scope: !3654)
!3660 = !DILocation(line: 1347, column: 32, scope: !3654)
!3661 = !DILocation(line: 1347, column: 36, scope: !3654)
!3662 = !DILocation(line: 1347, column: 7, scope: !3647)
!3663 = !DILocation(line: 1348, column: 16, scope: !3654)
!3664 = !DILocation(line: 1348, column: 20, scope: !3654)
!3665 = !DILocation(line: 1348, column: 5, scope: !3654)
!3666 = !DILocation(line: 1349, column: 1, scope: !3647)
!3667 = distinct !DISubprogram(name: "move_fence_to_fences", scope: !3, file: !3, line: 832, type: !3668, scopeLine: 833, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3668 = !DISubroutineType(types: !3669)
!3669 = !{null, !2926, !2921}
!3670 = !DILocalVariable(name: "old_fences", arg: 1, scope: !3667, file: !3, line: 832, type: !2926)
!3671 = !DILocation(line: 832, column: 31, scope: !3667)
!3672 = !DILocalVariable(name: "new_fences", arg: 2, scope: !3667, file: !3, line: 832, type: !2921)
!3673 = !DILocation(line: 832, column: 56, scope: !3667)
!3674 = !DILocalVariable(name: "f", scope: !3667, file: !3, line: 834, type: !2940)
!3675 = !DILocation(line: 834, column: 11, scope: !3667)
!3676 = !DILocalVariable(name: "old", scope: !3667, file: !3, line: 834, type: !2940)
!3677 = !DILocation(line: 834, column: 14, scope: !3667)
!3678 = !DILocalVariable(name: "tailp", scope: !3667, file: !3, line: 835, type: !2928)
!3679 = !DILocation(line: 835, column: 12, scope: !3667)
!3680 = !DILocation(line: 835, column: 20, scope: !3667)
!3681 = !DILocation(line: 837, column: 9, scope: !3667)
!3682 = !DILocation(line: 837, column: 7, scope: !3667)
!3683 = !DILocation(line: 838, column: 21, scope: !3667)
!3684 = !DILocation(line: 839, column: 21, scope: !3667)
!3685 = !DILocation(line: 838, column: 7, scope: !3667)
!3686 = !DILocation(line: 838, column: 5, scope: !3667)
!3687 = !DILocation(line: 840, column: 7, scope: !3688)
!3688 = distinct !DILexicalBlock(scope: !3667, file: !3, line: 840, column: 7)
!3689 = !DILocation(line: 840, column: 7, scope: !3667)
!3690 = !DILocation(line: 842, column: 21, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3688, file: !3, line: 841, column: 5)
!3692 = !DILocation(line: 842, column: 24, scope: !3691)
!3693 = !DILocation(line: 842, column: 29, scope: !3691)
!3694 = !DILocation(line: 842, column: 35, scope: !3691)
!3695 = !DILocation(line: 842, column: 40, scope: !3691)
!3696 = !DILocation(line: 842, column: 47, scope: !3691)
!3697 = !DILocation(line: 842, column: 52, scope: !3691)
!3698 = !DILocation(line: 842, column: 56, scope: !3691)
!3699 = !DILocation(line: 842, column: 61, scope: !3691)
!3700 = !DILocation(line: 843, column: 21, scope: !3691)
!3701 = !DILocation(line: 843, column: 26, scope: !3691)
!3702 = !DILocation(line: 843, column: 47, scope: !3691)
!3703 = !DILocation(line: 843, column: 52, scope: !3691)
!3704 = !DILocation(line: 844, column: 21, scope: !3691)
!3705 = !DILocation(line: 844, column: 26, scope: !3691)
!3706 = !DILocation(line: 844, column: 39, scope: !3691)
!3707 = !DILocation(line: 844, column: 44, scope: !3691)
!3708 = !DILocation(line: 845, column: 21, scope: !3691)
!3709 = !DILocation(line: 845, column: 26, scope: !3691)
!3710 = !DILocation(line: 845, column: 38, scope: !3691)
!3711 = !DILocation(line: 845, column: 43, scope: !3691)
!3712 = !DILocation(line: 845, column: 50, scope: !3691)
!3713 = !DILocation(line: 845, column: 55, scope: !3691)
!3714 = !DILocation(line: 846, column: 21, scope: !3691)
!3715 = !DILocation(line: 846, column: 26, scope: !3691)
!3716 = !DILocation(line: 842, column: 7, scope: !3691)
!3717 = !DILocation(line: 847, column: 5, scope: !3691)
!3718 = !DILocation(line: 850, column: 18, scope: !3719)
!3719 = distinct !DILexicalBlock(scope: !3688, file: !3, line: 849, column: 5)
!3720 = !DILocation(line: 850, column: 7, scope: !3719)
!3721 = !DILocation(line: 851, column: 40, scope: !3719)
!3722 = !DILocation(line: 851, column: 7, scope: !3719)
!3723 = !DILocation(line: 851, column: 37, scope: !3719)
!3724 = !DILocation(line: 852, column: 8, scope: !3719)
!3725 = !DILocation(line: 852, column: 32, scope: !3719)
!3726 = !DILocation(line: 852, column: 31, scope: !3719)
!3727 = !DILocation(line: 853, column: 34, scope: !3719)
!3728 = !DILocation(line: 853, column: 7, scope: !3719)
!3729 = !DILocation(line: 855, column: 3, scope: !3667)
!3730 = !DILocation(line: 855, column: 20, scope: !3667)
!3731 = !DILocation(line: 856, column: 1, scope: !3667)
!3732 = distinct !DISubprogram(name: "merge_fences", scope: !3, file: !3, line: 637, type: !3733, scopeLine: 642, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!3733 = !DISubroutineType(types: !3734)
!3734 = !{null, !2940, !2104, !2210, !2112, !962, !850, !2036, !2051, !874, !850, !874, !874, !1085}
!3735 = !DILocalVariable(name: "f", arg: 1, scope: !3732, file: !3, line: 637, type: !2940)
!3736 = !DILocation(line: 637, column: 23, scope: !3732)
!3737 = !DILocalVariable(name: "insn", arg: 2, scope: !3732, file: !3, line: 637, type: !2104)
!3738 = !DILocation(line: 637, column: 33, scope: !3732)
!3739 = !DILocalVariable(name: "state", arg: 3, scope: !3732, file: !3, line: 638, type: !2210)
!3740 = !DILocation(line: 638, column: 16, scope: !3732)
!3741 = !DILocalVariable(name: "dc", arg: 4, scope: !3732, file: !3, line: 638, type: !2112)
!3742 = !DILocation(line: 638, column: 30, scope: !3732)
!3743 = !DILocalVariable(name: "tc", arg: 5, scope: !3732, file: !3, line: 638, type: !962)
!3744 = !DILocation(line: 638, column: 40, scope: !3732)
!3745 = !DILocalVariable(name: "last_scheduled_insn", arg: 6, scope: !3732, file: !3, line: 639, type: !850)
!3746 = !DILocation(line: 639, column: 19, scope: !3732)
!3747 = !DILocalVariable(name: "executing_insns", arg: 7, scope: !3732, file: !3, line: 639, type: !2036)
!3748 = !DILocation(line: 639, column: 54, scope: !3732)
!3749 = !DILocalVariable(name: "ready_ticks", arg: 8, scope: !3732, file: !3, line: 640, type: !2051)
!3750 = !DILocation(line: 640, column: 20, scope: !3732)
!3751 = !DILocalVariable(name: "ready_ticks_size", arg: 9, scope: !3732, file: !3, line: 640, type: !874)
!3752 = !DILocation(line: 640, column: 37, scope: !3732)
!3753 = !DILocalVariable(name: "sched_next", arg: 10, scope: !3732, file: !3, line: 641, type: !850)
!3754 = !DILocation(line: 641, column: 12, scope: !3732)
!3755 = !DILocalVariable(name: "cycle", arg: 11, scope: !3732, file: !3, line: 641, type: !874)
!3756 = !DILocation(line: 641, column: 28, scope: !3732)
!3757 = !DILocalVariable(name: "issue_more", arg: 12, scope: !3732, file: !3, line: 641, type: !874)
!3758 = !DILocation(line: 641, column: 39, scope: !3732)
!3759 = !DILocalVariable(name: "after_stall_p", arg: 13, scope: !3732, file: !3, line: 641, type: !1085)
!3760 = !DILocation(line: 641, column: 56, scope: !3732)
!3761 = !DILocalVariable(name: "last_scheduled_insn_old", scope: !3732, file: !3, line: 643, type: !2104)
!3762 = !DILocation(line: 643, column: 10, scope: !3732)
!3763 = !DILocation(line: 643, column: 36, scope: !3732)
!3764 = !DILocation(line: 645, column: 3, scope: !3732)
!3765 = !DILocation(line: 650, column: 7, scope: !3766)
!3766 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 650, column: 7)
!3767 = !DILocation(line: 650, column: 27, scope: !3766)
!3768 = !DILocation(line: 651, column: 7, scope: !3766)
!3769 = !DILocation(line: 651, column: 10, scope: !3766)
!3770 = !DILocation(line: 651, column: 34, scope: !3766)
!3771 = !DILocation(line: 656, column: 7, scope: !3766)
!3772 = !DILocation(line: 656, column: 10, scope: !3766)
!3773 = !DILocation(line: 656, column: 33, scope: !3766)
!3774 = !DILocation(line: 656, column: 30, scope: !3766)
!3775 = !DILocation(line: 650, column: 7, scope: !3732)
!3776 = !DILocation(line: 658, column: 20, scope: !3777)
!3777 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 657, column: 5)
!3778 = !DILocation(line: 658, column: 7, scope: !3777)
!3779 = !DILocation(line: 659, column: 19, scope: !3777)
!3780 = !DILocation(line: 659, column: 7, scope: !3777)
!3781 = !DILocation(line: 661, column: 27, scope: !3777)
!3782 = !DILocation(line: 661, column: 7, scope: !3777)
!3783 = !DILocation(line: 662, column: 28, scope: !3777)
!3784 = !DILocation(line: 662, column: 7, scope: !3777)
!3785 = !DILocation(line: 664, column: 29, scope: !3777)
!3786 = !DILocation(line: 664, column: 7, scope: !3777)
!3787 = !DILocation(line: 665, column: 30, scope: !3777)
!3788 = !DILocation(line: 665, column: 7, scope: !3777)
!3789 = !DILocation(line: 667, column: 11, scope: !3790)
!3790 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 667, column: 11)
!3791 = !DILocation(line: 667, column: 19, scope: !3790)
!3792 = !DILocation(line: 667, column: 17, scope: !3790)
!3793 = !DILocation(line: 667, column: 11, scope: !3777)
!3794 = !DILocation(line: 668, column: 27, scope: !3790)
!3795 = !DILocation(line: 668, column: 9, scope: !3790)
!3796 = !DILocation(line: 668, column: 25, scope: !3790)
!3797 = !DILocation(line: 670, column: 7, scope: !3777)
!3798 = !DILocation(line: 670, column: 37, scope: !3777)
!3799 = !DILocation(line: 671, column: 30, scope: !3777)
!3800 = !DILocation(line: 671, column: 7, scope: !3777)
!3801 = !DILocation(line: 671, column: 28, scope: !3777)
!3802 = !DILocation(line: 672, column: 7, scope: !3777)
!3803 = !DILocation(line: 673, column: 13, scope: !3777)
!3804 = !DILocation(line: 673, column: 7, scope: !3777)
!3805 = !DILocation(line: 674, column: 11, scope: !3806)
!3806 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 674, column: 11)
!3807 = !DILocation(line: 674, column: 11, scope: !3777)
!3808 = !DILocation(line: 675, column: 9, scope: !3806)
!3809 = !DILocation(line: 677, column: 11, scope: !3810)
!3810 = distinct !DILexicalBlock(scope: !3777, file: !3, line: 677, column: 11)
!3811 = !DILocation(line: 677, column: 11, scope: !3777)
!3812 = !DILocation(line: 678, column: 17, scope: !3810)
!3813 = !DILocation(line: 678, column: 9, scope: !3810)
!3814 = !DILocation(line: 678, column: 43, scope: !3810)
!3815 = !DILocation(line: 679, column: 5, scope: !3777)
!3816 = !DILocalVariable(name: "edge_old", scope: !3817, file: !3, line: 682, type: !1408)
!3817 = distinct !DILexicalBlock(scope: !3766, file: !3, line: 681, column: 5)
!3818 = !DILocation(line: 682, column: 12, scope: !3817)
!3819 = !DILocalVariable(name: "edge_new", scope: !3817, file: !3, line: 682, type: !1408)
!3820 = !DILocation(line: 682, column: 29, scope: !3817)
!3821 = !DILocalVariable(name: "candidate", scope: !3817, file: !3, line: 683, type: !1408)
!3822 = !DILocation(line: 683, column: 12, scope: !3817)
!3823 = !DILocalVariable(name: "si", scope: !3817, file: !3, line: 684, type: !3107)
!3824 = !DILocation(line: 684, column: 21, scope: !3817)
!3825 = !DILocalVariable(name: "succ", scope: !3817, file: !3, line: 685, type: !2104)
!3826 = !DILocation(line: 685, column: 14, scope: !3817)
!3827 = !DILocation(line: 688, column: 7, scope: !3817)
!3828 = !DILocation(line: 689, column: 39, scope: !3817)
!3829 = !DILocation(line: 689, column: 62, scope: !3817)
!3830 = !DILocation(line: 689, column: 19, scope: !3817)
!3831 = !DILocation(line: 689, column: 17, scope: !3817)
!3832 = !DILocation(line: 691, column: 12, scope: !3833)
!3833 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 691, column: 11)
!3834 = !DILocation(line: 692, column: 11, scope: !3833)
!3835 = !DILocation(line: 692, column: 15, scope: !3833)
!3836 = !DILocation(line: 692, column: 26, scope: !3833)
!3837 = !DILocation(line: 692, column: 33, scope: !3833)
!3838 = !DILocation(line: 692, column: 30, scope: !3833)
!3839 = !DILocation(line: 693, column: 15, scope: !3833)
!3840 = !DILocation(line: 693, column: 18, scope: !3833)
!3841 = !DILocation(line: 693, column: 29, scope: !3833)
!3842 = !DILocation(line: 693, column: 36, scope: !3833)
!3843 = !DILocation(line: 693, column: 33, scope: !3833)
!3844 = !DILocation(line: 691, column: 11, scope: !3817)
!3845 = !DILocation(line: 696, column: 24, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 694, column: 9)
!3847 = !DILocation(line: 696, column: 11, scope: !3846)
!3848 = !DILocation(line: 697, column: 23, scope: !3846)
!3849 = !DILocation(line: 697, column: 11, scope: !3846)
!3850 = !DILocation(line: 699, column: 33, scope: !3846)
!3851 = !DILocation(line: 699, column: 11, scope: !3846)
!3852 = !DILocation(line: 700, column: 34, scope: !3846)
!3853 = !DILocation(line: 700, column: 11, scope: !3846)
!3854 = !DILocation(line: 702, column: 11, scope: !3846)
!3855 = !DILocation(line: 702, column: 41, scope: !3846)
!3856 = !DILocation(line: 703, column: 27, scope: !3846)
!3857 = !DILocation(line: 703, column: 4, scope: !3846)
!3858 = !DILocation(line: 703, column: 25, scope: !3846)
!3859 = !DILocation(line: 704, column: 9, scope: !3846)
!3860 = !DILocation(line: 706, column: 13, scope: !3861)
!3861 = distinct !DILexicalBlock(scope: !3833, file: !3, line: 706, column: 13)
!3862 = !DILocation(line: 706, column: 24, scope: !3861)
!3863 = !DILocation(line: 706, column: 31, scope: !3861)
!3864 = !DILocation(line: 706, column: 28, scope: !3861)
!3865 = !DILocation(line: 706, column: 13, scope: !3833)
!3866 = !DILocation(line: 710, column: 13, scope: !3867)
!3867 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 707, column: 11)
!3868 = !DILocation(line: 713, column: 25, scope: !3867)
!3869 = !DILocation(line: 713, column: 13, scope: !3867)
!3870 = !DILocation(line: 714, column: 31, scope: !3867)
!3871 = !DILocation(line: 714, column: 13, scope: !3867)
!3872 = !DILocation(line: 714, column: 29, scope: !3867)
!3873 = !DILocation(line: 716, column: 36, scope: !3867)
!3874 = !DILocation(line: 716, column: 13, scope: !3867)
!3875 = !DILocation(line: 717, column: 28, scope: !3867)
!3876 = !DILocation(line: 717, column: 13, scope: !3867)
!3877 = !DILocation(line: 717, column: 26, scope: !3867)
!3878 = !DILocation(line: 719, column: 45, scope: !3867)
!3879 = !DILocation(line: 719, column: 13, scope: !3867)
!3880 = !DILocation(line: 719, column: 43, scope: !3867)
!3881 = !DILocation(line: 720, column: 29, scope: !3867)
!3882 = !DILocation(line: 720, column: 6, scope: !3867)
!3883 = !DILocation(line: 720, column: 27, scope: !3867)
!3884 = !DILocation(line: 721, column: 11, scope: !3867)
!3885 = !DILocation(line: 725, column: 25, scope: !3886)
!3886 = distinct !DILexicalBlock(scope: !3861, file: !3, line: 723, column: 11)
!3887 = !DILocation(line: 725, column: 13, scope: !3886)
!3888 = !DILocation(line: 726, column: 36, scope: !3886)
!3889 = !DILocation(line: 726, column: 13, scope: !3886)
!3890 = !DILocation(line: 728, column: 13, scope: !3886)
!3891 = !DILocation(line: 733, column: 9, scope: !3892)
!3892 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 733, column: 9)
!3893 = !DILocation(line: 733, column: 9, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3892, file: !3, line: 733, column: 9)
!3895 = !DILocation(line: 736, column: 17, scope: !3896)
!3896 = distinct !DILexicalBlock(scope: !3897, file: !3, line: 736, column: 17)
!3897 = distinct !DILexicalBlock(scope: !3894, file: !3, line: 735, column: 11)
!3898 = !DILocation(line: 736, column: 25, scope: !3896)
!3899 = !DILocation(line: 736, column: 22, scope: !3896)
!3900 = !DILocation(line: 736, column: 17, scope: !3897)
!3901 = !DILocation(line: 739, column: 17, scope: !3902)
!3902 = distinct !DILexicalBlock(scope: !3896, file: !3, line: 737, column: 15)
!3903 = !DILocation(line: 740, column: 31, scope: !3902)
!3904 = !DILocation(line: 740, column: 26, scope: !3902)
!3905 = !DILocation(line: 741, column: 15, scope: !3902)
!3906 = !DILocation(line: 742, column: 11, scope: !3897)
!3907 = distinct !{!3907, !3891, !3908}
!3908 = !DILocation(line: 742, column: 11, scope: !3892)
!3909 = !DILocation(line: 744, column: 9, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 744, column: 9)
!3911 = !DILocation(line: 744, column: 9, scope: !3912)
!3912 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 744, column: 9)
!3913 = !DILocation(line: 747, column: 17, scope: !3914)
!3914 = distinct !DILexicalBlock(scope: !3915, file: !3, line: 747, column: 17)
!3915 = distinct !DILexicalBlock(scope: !3912, file: !3, line: 746, column: 11)
!3916 = !DILocation(line: 747, column: 25, scope: !3914)
!3917 = !DILocation(line: 747, column: 22, scope: !3914)
!3918 = !DILocation(line: 747, column: 17, scope: !3915)
!3919 = !DILocation(line: 750, column: 17, scope: !3920)
!3920 = distinct !DILexicalBlock(scope: !3914, file: !3, line: 748, column: 15)
!3921 = !DILocation(line: 751, column: 31, scope: !3920)
!3922 = !DILocation(line: 751, column: 26, scope: !3920)
!3923 = !DILocation(line: 752, column: 15, scope: !3920)
!3924 = !DILocation(line: 753, column: 11, scope: !3915)
!3925 = distinct !{!3925, !3909, !3926}
!3926 = !DILocation(line: 753, column: 11, scope: !3910)
!3927 = !DILocation(line: 756, column: 13, scope: !3928)
!3928 = distinct !DILexicalBlock(scope: !3817, file: !3, line: 756, column: 13)
!3929 = !DILocation(line: 756, column: 22, scope: !3928)
!3930 = !DILocation(line: 756, column: 30, scope: !3928)
!3931 = !DILocation(line: 756, column: 33, scope: !3928)
!3932 = !DILocation(line: 756, column: 42, scope: !3928)
!3933 = !DILocation(line: 756, column: 13, scope: !3817)
!3934 = !DILocation(line: 758, column: 33, scope: !3935)
!3935 = distinct !DILexicalBlock(scope: !3928, file: !3, line: 757, column: 11)
!3936 = !DILocation(line: 758, column: 13, scope: !3935)
!3937 = !DILocation(line: 759, column: 34, scope: !3935)
!3938 = !DILocation(line: 759, column: 13, scope: !3935)
!3939 = !DILocation(line: 760, column: 13, scope: !3935)
!3940 = !DILocation(line: 761, column: 19, scope: !3935)
!3941 = !DILocation(line: 761, column: 13, scope: !3935)
!3942 = !DILocation(line: 763, column: 31, scope: !3935)
!3943 = !DILocation(line: 763, column: 13, scope: !3935)
!3944 = !DILocation(line: 763, column: 29, scope: !3935)
!3945 = !DILocation(line: 764, column: 17, scope: !3946)
!3946 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 764, column: 17)
!3947 = !DILocation(line: 764, column: 17, scope: !3935)
!3948 = !DILocation(line: 765, column: 15, scope: !3946)
!3949 = !DILocation(line: 767, column: 17, scope: !3950)
!3950 = distinct !DILexicalBlock(scope: !3935, file: !3, line: 767, column: 17)
!3951 = !DILocation(line: 767, column: 17, scope: !3935)
!3952 = !DILocation(line: 768, column: 23, scope: !3950)
!3953 = !DILocation(line: 768, column: 15, scope: !3950)
!3954 = !DILocation(line: 768, column: 49, scope: !3950)
!3955 = !DILocation(line: 769, column: 11, scope: !3935)
!3956 = !DILocation(line: 771, column: 15, scope: !3957)
!3957 = distinct !DILexicalBlock(scope: !3928, file: !3, line: 771, column: 15)
!3958 = !DILocation(line: 771, column: 25, scope: !3957)
!3959 = !DILocation(line: 771, column: 39, scope: !3957)
!3960 = !DILocation(line: 771, column: 49, scope: !3957)
!3961 = !DILocation(line: 771, column: 37, scope: !3957)
!3962 = !DILocation(line: 771, column: 15, scope: !3928)
!3963 = !DILocation(line: 773, column: 36, scope: !3964)
!3964 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 772, column: 13)
!3965 = !DILocation(line: 773, column: 15, scope: !3964)
!3966 = !DILocation(line: 774, column: 30, scope: !3964)
!3967 = !DILocation(line: 774, column: 15, scope: !3964)
!3968 = !DILocation(line: 774, column: 28, scope: !3964)
!3969 = !DILocation(line: 775, column: 15, scope: !3964)
!3970 = !DILocation(line: 776, column: 43, scope: !3964)
!3971 = !DILocation(line: 776, column: 15, scope: !3964)
!3972 = !DILocation(line: 776, column: 41, scope: !3964)
!3973 = !DILocation(line: 777, column: 21, scope: !3964)
!3974 = !DILocation(line: 777, column: 15, scope: !3964)
!3975 = !DILocation(line: 778, column: 39, scope: !3964)
!3976 = !DILocation(line: 778, column: 15, scope: !3964)
!3977 = !DILocation(line: 778, column: 37, scope: !3964)
!3978 = !DILocation(line: 779, column: 44, scope: !3964)
!3979 = !DILocation(line: 779, column: 15, scope: !3964)
!3980 = !DILocation(line: 779, column: 42, scope: !3964)
!3981 = !DILocation(line: 780, column: 33, scope: !3964)
!3982 = !DILocation(line: 780, column: 15, scope: !3964)
!3983 = !DILocation(line: 780, column: 31, scope: !3964)
!3984 = !DILocation(line: 781, column: 13, scope: !3964)
!3985 = !DILocation(line: 785, column: 36, scope: !3986)
!3986 = distinct !DILexicalBlock(scope: !3957, file: !3, line: 783, column: 13)
!3987 = !DILocation(line: 785, column: 15, scope: !3986)
!3988 = !DILocation(line: 786, column: 15, scope: !3986)
!3989 = !DILocation(line: 787, column: 21, scope: !3986)
!3990 = !DILocation(line: 787, column: 15, scope: !3986)
!3991 = !DILocation(line: 792, column: 7, scope: !3992)
!3992 = distinct !DILexicalBlock(scope: !3732, file: !3, line: 792, column: 7)
!3993 = !DILocation(line: 792, column: 7, scope: !3732)
!3994 = !DILocation(line: 793, column: 5, scope: !3992)
!3995 = !DILocation(line: 793, column: 29, scope: !3992)
!3996 = !DILocation(line: 795, column: 3, scope: !3732)
!3997 = !DILocation(line: 795, column: 26, scope: !3732)
!3998 = !DILocation(line: 796, column: 3, scope: !3732)
!3999 = !DILocation(line: 796, column: 28, scope: !3732)
!4000 = !DILocation(line: 797, column: 3, scope: !3732)
!4001 = !DILocation(line: 797, column: 24, scope: !3732)
!4002 = !DILocation(line: 798, column: 1, scope: !3732)
!4003 = distinct !DISubprogram(name: "init_fence_for_scheduling", scope: !3, file: !3, line: 253, type: !4004, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4004 = !DISubroutineType(types: !4005)
!4005 = !{null, !2940}
!4006 = !DILocalVariable(name: "f", arg: 1, scope: !4003, file: !3, line: 253, type: !2940)
!4007 = !DILocation(line: 253, column: 36, scope: !4003)
!4008 = !DILocation(line: 255, column: 3, scope: !4003)
!4009 = !DILocation(line: 255, column: 18, scope: !4003)
!4010 = !DILocation(line: 256, column: 3, scope: !4003)
!4011 = !DILocation(line: 256, column: 25, scope: !4003)
!4012 = !DILocation(line: 257, column: 3, scope: !4003)
!4013 = !DILocation(line: 257, column: 25, scope: !4003)
!4014 = !DILocation(line: 258, column: 1, scope: !4003)
!4015 = distinct !DISubprogram(name: "add_clean_fence_to_fences", scope: !3, file: !3, line: 861, type: !4016, scopeLine: 862, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4016 = !DISubroutineType(types: !4017)
!4017 = !{null, !2921, !2104, !2940}
!4018 = !DILocalVariable(name: "new_fences", arg: 1, scope: !4015, file: !3, line: 861, type: !2921)
!4019 = !DILocation(line: 861, column: 41, scope: !4015)
!4020 = !DILocalVariable(name: "succ", arg: 2, scope: !4015, file: !3, line: 861, type: !2104)
!4021 = !DILocation(line: 861, column: 60, scope: !4015)
!4022 = !DILocalVariable(name: "fence", arg: 3, scope: !4015, file: !3, line: 861, type: !2940)
!4023 = !DILocation(line: 861, column: 74, scope: !4015)
!4024 = !DILocalVariable(name: "ready_ticks_size", scope: !4015, file: !3, line: 863, type: !874)
!4025 = !DILocation(line: 863, column: 7, scope: !4015)
!4026 = !DILocation(line: 863, column: 26, scope: !4015)
!4027 = !DILocation(line: 863, column: 41, scope: !4015)
!4028 = !DILocation(line: 865, column: 18, scope: !4015)
!4029 = !DILocation(line: 866, column: 18, scope: !4015)
!4030 = !DILocation(line: 866, column: 24, scope: !4015)
!4031 = !DILocation(line: 866, column: 41, scope: !4015)
!4032 = !DILocation(line: 867, column: 18, scope: !4015)
!4033 = !DILocation(line: 869, column: 18, scope: !4015)
!4034 = !DILocation(line: 869, column: 52, scope: !4015)
!4035 = !DILocation(line: 870, column: 28, scope: !4015)
!4036 = !DILocation(line: 870, column: 48, scope: !4015)
!4037 = !DILocation(line: 871, column: 21, scope: !4015)
!4038 = !DILocation(line: 871, column: 36, scope: !4015)
!4039 = !DILocation(line: 865, column: 3, scope: !4015)
!4040 = !DILocation(line: 872, column: 1, scope: !4015)
!4041 = distinct !DISubprogram(name: "add_to_fences", scope: !3, file: !3, line: 803, type: !4042, scopeLine: 809, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4042 = !DISubroutineType(types: !4043)
!4043 = !{null, !2921, !2104, !2210, !2112, !962, !850, !2036, !2051, !874, !850, !874, !874, !874, !1085, !1085}
!4044 = !DILocalVariable(name: "new_fences", arg: 1, scope: !4041, file: !3, line: 803, type: !2921)
!4045 = !DILocation(line: 803, column: 29, scope: !4041)
!4046 = !DILocalVariable(name: "insn", arg: 2, scope: !4041, file: !3, line: 803, type: !2104)
!4047 = !DILocation(line: 803, column: 48, scope: !4041)
!4048 = !DILocalVariable(name: "state", arg: 3, scope: !4041, file: !3, line: 804, type: !2210)
!4049 = !DILocation(line: 804, column: 24, scope: !4041)
!4050 = !DILocalVariable(name: "dc", arg: 4, scope: !4041, file: !3, line: 804, type: !2112)
!4051 = !DILocation(line: 804, column: 38, scope: !4041)
!4052 = !DILocalVariable(name: "tc", arg: 5, scope: !4041, file: !3, line: 804, type: !962)
!4053 = !DILocation(line: 804, column: 48, scope: !4041)
!4054 = !DILocalVariable(name: "last_scheduled_insn", arg: 6, scope: !4041, file: !3, line: 804, type: !850)
!4055 = !DILocation(line: 804, column: 56, scope: !4041)
!4056 = !DILocalVariable(name: "executing_insns", arg: 7, scope: !4041, file: !3, line: 805, type: !2036)
!4057 = !DILocation(line: 805, column: 30, scope: !4041)
!4058 = !DILocalVariable(name: "ready_ticks", arg: 8, scope: !4041, file: !3, line: 805, type: !2051)
!4059 = !DILocation(line: 805, column: 52, scope: !4041)
!4060 = !DILocalVariable(name: "ready_ticks_size", arg: 9, scope: !4041, file: !3, line: 806, type: !874)
!4061 = !DILocation(line: 806, column: 20, scope: !4041)
!4062 = !DILocalVariable(name: "sched_next", arg: 10, scope: !4041, file: !3, line: 806, type: !850)
!4063 = !DILocation(line: 806, column: 42, scope: !4041)
!4064 = !DILocalVariable(name: "cycle", arg: 11, scope: !4041, file: !3, line: 806, type: !874)
!4065 = !DILocation(line: 806, column: 58, scope: !4041)
!4066 = !DILocalVariable(name: "cycle_issued_insns", arg: 12, scope: !4041, file: !3, line: 807, type: !874)
!4067 = !DILocation(line: 807, column: 20, scope: !4041)
!4068 = !DILocalVariable(name: "issue_rate", arg: 13, scope: !4041, file: !3, line: 807, type: !874)
!4069 = !DILocation(line: 807, column: 44, scope: !4041)
!4070 = !DILocalVariable(name: "starts_cycle_p", arg: 14, scope: !4041, file: !3, line: 808, type: !1085)
!4071 = !DILocation(line: 808, column: 14, scope: !4041)
!4072 = !DILocalVariable(name: "after_stall_p", arg: 15, scope: !4041, file: !3, line: 808, type: !1085)
!4073 = !DILocation(line: 808, column: 35, scope: !4041)
!4074 = !DILocalVariable(name: "f", scope: !4041, file: !3, line: 810, type: !2940)
!4075 = !DILocation(line: 810, column: 11, scope: !4041)
!4076 = !DILocation(line: 810, column: 29, scope: !4041)
!4077 = !DILocation(line: 810, column: 59, scope: !4041)
!4078 = !DILocation(line: 810, column: 15, scope: !4041)
!4079 = !DILocation(line: 812, column: 9, scope: !4080)
!4080 = distinct !DILexicalBlock(scope: !4041, file: !3, line: 812, column: 7)
!4081 = !DILocation(line: 812, column: 7, scope: !4041)
!4082 = !DILocation(line: 814, column: 18, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 813, column: 5)
!4084 = !DILocation(line: 814, column: 49, scope: !4083)
!4085 = !DILocation(line: 814, column: 55, scope: !4083)
!4086 = !DILocation(line: 814, column: 62, scope: !4083)
!4087 = !DILocation(line: 814, column: 66, scope: !4083)
!4088 = !DILocation(line: 815, column: 4, scope: !4083)
!4089 = !DILocation(line: 815, column: 25, scope: !4083)
!4090 = !DILocation(line: 815, column: 42, scope: !4083)
!4091 = !DILocation(line: 816, column: 18, scope: !4083)
!4092 = !DILocation(line: 816, column: 36, scope: !4083)
!4093 = !DILocation(line: 816, column: 48, scope: !4083)
!4094 = !DILocation(line: 816, column: 55, scope: !4083)
!4095 = !DILocation(line: 817, column: 4, scope: !4083)
!4096 = !DILocation(line: 817, column: 16, scope: !4083)
!4097 = !DILocation(line: 817, column: 32, scope: !4083)
!4098 = !DILocation(line: 814, column: 7, scope: !4083)
!4099 = !DILocation(line: 820, column: 5, scope: !4083)
!4100 = !DILocation(line: 819, column: 7, scope: !4083)
!4101 = !DILocation(line: 820, column: 2, scope: !4083)
!4102 = !DILocation(line: 821, column: 5, scope: !4083)
!4103 = !DILocation(line: 824, column: 21, scope: !4104)
!4104 = distinct !DILexicalBlock(scope: !4080, file: !3, line: 823, column: 5)
!4105 = !DILocation(line: 824, column: 24, scope: !4104)
!4106 = !DILocation(line: 824, column: 30, scope: !4104)
!4107 = !DILocation(line: 824, column: 37, scope: !4104)
!4108 = !DILocation(line: 824, column: 41, scope: !4104)
!4109 = !DILocation(line: 824, column: 45, scope: !4104)
!4110 = !DILocation(line: 825, column: 21, scope: !4104)
!4111 = !DILocation(line: 825, column: 38, scope: !4104)
!4112 = !DILocation(line: 825, column: 51, scope: !4104)
!4113 = !DILocation(line: 826, column: 21, scope: !4104)
!4114 = !DILocation(line: 826, column: 33, scope: !4104)
!4115 = !DILocation(line: 826, column: 40, scope: !4104)
!4116 = !DILocation(line: 826, column: 52, scope: !4104)
!4117 = !DILocation(line: 824, column: 7, scope: !4104)
!4118 = !DILocation(line: 828, column: 1, scope: !4041)
!4119 = distinct !DISubprogram(name: "add_dirty_fence_to_fences", scope: !3, file: !3, line: 877, type: !4016, scopeLine: 878, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4120 = !DILocalVariable(name: "new_fences", arg: 1, scope: !4119, file: !3, line: 877, type: !2921)
!4121 = !DILocation(line: 877, column: 41, scope: !4119)
!4122 = !DILocalVariable(name: "succ", arg: 2, scope: !4119, file: !3, line: 877, type: !2104)
!4123 = !DILocation(line: 877, column: 60, scope: !4119)
!4124 = !DILocalVariable(name: "fence", arg: 3, scope: !4119, file: !3, line: 877, type: !2940)
!4125 = !DILocation(line: 877, column: 74, scope: !4119)
!4126 = !DILocalVariable(name: "new_ready_ticks", scope: !4119, file: !3, line: 879, type: !2051)
!4127 = !DILocation(line: 879, column: 9, scope: !4119)
!4128 = !DILocation(line: 880, column: 7, scope: !4119)
!4129 = !DILocation(line: 882, column: 11, scope: !4119)
!4130 = !DILocation(line: 882, column: 3, scope: !4119)
!4131 = !DILocation(line: 882, column: 28, scope: !4119)
!4132 = !DILocation(line: 883, column: 11, scope: !4119)
!4133 = !DILocation(line: 883, column: 42, scope: !4119)
!4134 = !DILocation(line: 884, column: 18, scope: !4119)
!4135 = !DILocation(line: 885, column: 18, scope: !4119)
!4136 = !DILocation(line: 885, column: 43, scope: !4119)
!4137 = !DILocation(line: 885, column: 24, scope: !4119)
!4138 = !DILocation(line: 886, column: 47, scope: !4119)
!4139 = !DILocation(line: 886, column: 18, scope: !4119)
!4140 = !DILocation(line: 887, column: 49, scope: !4119)
!4141 = !DILocation(line: 887, column: 18, scope: !4119)
!4142 = !DILocation(line: 888, column: 18, scope: !4119)
!4143 = !DILocation(line: 889, column: 18, scope: !4119)
!4144 = !DILocation(line: 890, column: 18, scope: !4119)
!4145 = !DILocation(line: 891, column: 18, scope: !4119)
!4146 = !DILocation(line: 892, column: 18, scope: !4119)
!4147 = !DILocation(line: 893, column: 18, scope: !4119)
!4148 = !DILocation(line: 894, column: 18, scope: !4119)
!4149 = !DILocation(line: 895, column: 4, scope: !4119)
!4150 = !DILocation(line: 896, column: 18, scope: !4119)
!4151 = !DILocation(line: 897, column: 18, scope: !4119)
!4152 = !DILocation(line: 884, column: 3, scope: !4119)
!4153 = !DILocation(line: 898, column: 1, scope: !4119)
!4154 = distinct !DISubprogram(name: "state_create_copy", scope: !3, file: !3, line: 557, type: !4155, scopeLine: 558, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4155 = !DISubroutineType(types: !4156)
!4156 = !{!2210, !2210}
!4157 = !DILocalVariable(name: "from", arg: 1, scope: !4154, file: !3, line: 557, type: !2210)
!4158 = !DILocation(line: 557, column: 28, scope: !4154)
!4159 = !DILocalVariable(name: "to", scope: !4154, file: !3, line: 559, type: !2210)
!4160 = !DILocation(line: 559, column: 11, scope: !4154)
!4161 = !DILocation(line: 559, column: 16, scope: !4154)
!4162 = !DILocation(line: 561, column: 15, scope: !4154)
!4163 = !DILocation(line: 561, column: 19, scope: !4154)
!4164 = !DILocation(line: 561, column: 3, scope: !4154)
!4165 = !DILocation(line: 562, column: 10, scope: !4154)
!4166 = !DILocation(line: 562, column: 3, scope: !4154)
!4167 = distinct !DISubprogram(name: "create_copy_of_deps_context", scope: !3, file: !3, line: 460, type: !4168, scopeLine: 461, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4168 = !DISubroutineType(types: !4169)
!4169 = !{!2112, !2112}
!4170 = !DILocalVariable(name: "from", arg: 1, scope: !4167, file: !3, line: 460, type: !2112)
!4171 = !DILocation(line: 460, column: 37, scope: !4167)
!4172 = !DILocalVariable(name: "to", scope: !4167, file: !3, line: 462, type: !2112)
!4173 = !DILocation(line: 462, column: 10, scope: !4167)
!4174 = !DILocation(line: 462, column: 15, scope: !4167)
!4175 = !DILocation(line: 464, column: 22, scope: !4167)
!4176 = !DILocation(line: 464, column: 26, scope: !4167)
!4177 = !DILocation(line: 464, column: 3, scope: !4167)
!4178 = !DILocation(line: 465, column: 10, scope: !4167)
!4179 = !DILocation(line: 465, column: 3, scope: !4167)
!4180 = distinct !DISubprogram(name: "create_copy_of_target_context", scope: !3, file: !3, line: 410, type: !4181, scopeLine: 411, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4181 = !DISubroutineType(types: !4182)
!4182 = !{!2217, !2217}
!4183 = !DILocalVariable(name: "tc", arg: 1, scope: !4180, file: !3, line: 410, type: !2217)
!4184 = !DILocation(line: 410, column: 37, scope: !4180)
!4185 = !DILocalVariable(name: "copy", scope: !4180, file: !3, line: 412, type: !2217)
!4186 = !DILocation(line: 412, column: 8, scope: !4180)
!4187 = !DILocation(line: 412, column: 15, scope: !4180)
!4188 = !DILocation(line: 414, column: 24, scope: !4180)
!4189 = !DILocation(line: 414, column: 30, scope: !4180)
!4190 = !DILocation(line: 414, column: 3, scope: !4180)
!4191 = !DILocation(line: 416, column: 10, scope: !4180)
!4192 = !DILocation(line: 416, column: 3, scope: !4180)
!4193 = distinct !DISubprogram(name: "VEC_rtx_gc_copy", scope: !414, file: !414, line: 202, type: !4194, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4194 = !DISubroutineType(types: !4195)
!4195 = !{!2036, !4196}
!4196 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2041, size: 64)
!4197 = !DILocalVariable(name: "vec_", arg: 1, scope: !4193, file: !414, line: 202, type: !4196)
!4198 = !DILocation(line: 202, column: 1, scope: !4193)
!4199 = !DILocalVariable(name: "len_", scope: !4193, file: !414, line: 202, type: !1329)
!4200 = !DILocalVariable(name: "new_vec_", scope: !4193, file: !414, line: 202, type: !2036)
!4201 = !DILocation(line: 202, column: 1, scope: !4202)
!4202 = distinct !DILexicalBlock(scope: !4193, file: !414, line: 202, column: 1)
!4203 = !DILocation(line: 202, column: 1, scope: !4204)
!4204 = distinct !DILexicalBlock(scope: !4202, file: !414, line: 202, column: 1)
!4205 = distinct !DISubprogram(name: "get_regset_from_pool", scope: !3, file: !3, line: 906, type: !4206, scopeLine: 907, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4206 = !DISubroutineType(types: !4207)
!4207 = !{!2053}
!4208 = !DILocalVariable(name: "rs", scope: !4205, file: !3, line: 908, type: !2053)
!4209 = !DILocation(line: 908, column: 10, scope: !4205)
!4210 = !DILocation(line: 910, column: 19, scope: !4211)
!4211 = distinct !DILexicalBlock(scope: !4205, file: !3, line: 910, column: 7)
!4212 = !DILocation(line: 910, column: 21, scope: !4211)
!4213 = !DILocation(line: 910, column: 7, scope: !4205)
!4214 = !DILocation(line: 911, column: 22, scope: !4211)
!4215 = !DILocation(line: 911, column: 24, scope: !4211)
!4216 = !DILocation(line: 911, column: 10, scope: !4211)
!4217 = !DILocation(line: 911, column: 8, scope: !4211)
!4218 = !DILocation(line: 911, column: 5, scope: !4211)
!4219 = !DILocation(line: 915, column: 12, scope: !4220)
!4220 = distinct !DILexicalBlock(scope: !4211, file: !3, line: 914, column: 5)
!4221 = !DILocation(line: 915, column: 10, scope: !4220)
!4222 = !DILocation(line: 917, column: 23, scope: !4223)
!4223 = distinct !DILexicalBlock(scope: !4220, file: !3, line: 917, column: 11)
!4224 = !DILocation(line: 917, column: 41, scope: !4223)
!4225 = !DILocation(line: 917, column: 26, scope: !4223)
!4226 = !DILocation(line: 917, column: 11, scope: !4220)
!4227 = !DILocation(line: 918, column: 19, scope: !4223)
!4228 = !DILocation(line: 918, column: 17, scope: !4223)
!4229 = !DILocation(line: 918, column: 2, scope: !4223)
!4230 = !DILocation(line: 920, column: 42, scope: !4220)
!4231 = !DILocation(line: 920, column: 19, scope: !4220)
!4232 = !DILocation(line: 920, column: 36, scope: !4220)
!4233 = !DILocation(line: 920, column: 7, scope: !4220)
!4234 = !DILocation(line: 920, column: 40, scope: !4220)
!4235 = !DILocation(line: 923, column: 19, scope: !4205)
!4236 = !DILocation(line: 925, column: 10, scope: !4205)
!4237 = !DILocation(line: 925, column: 3, scope: !4205)
!4238 = distinct !DISubprogram(name: "get_clear_regset_from_pool", scope: !3, file: !3, line: 930, type: !4206, scopeLine: 931, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4239 = !DILocalVariable(name: "rs", scope: !4238, file: !3, line: 932, type: !2053)
!4240 = !DILocation(line: 932, column: 10, scope: !4238)
!4241 = !DILocation(line: 932, column: 15, scope: !4238)
!4242 = !DILocation(line: 934, column: 3, scope: !4238)
!4243 = !DILocation(line: 935, column: 10, scope: !4238)
!4244 = !DILocation(line: 935, column: 3, scope: !4238)
!4245 = distinct !DISubprogram(name: "return_regset_to_pool", scope: !3, file: !3, line: 940, type: !4246, scopeLine: 941, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4246 = !DISubroutineType(types: !4247)
!4247 = !{null, !2053}
!4248 = !DILocalVariable(name: "rs", arg: 1, scope: !4245, file: !3, line: 940, type: !2053)
!4249 = !DILocation(line: 940, column: 31, scope: !4245)
!4250 = !DILocation(line: 942, column: 19, scope: !4245)
!4251 = !DILocation(line: 944, column: 19, scope: !4252)
!4252 = distinct !DILexicalBlock(scope: !4245, file: !3, line: 944, column: 7)
!4253 = !DILocation(line: 944, column: 36, scope: !4252)
!4254 = !DILocation(line: 944, column: 21, scope: !4252)
!4255 = !DILocation(line: 944, column: 7, scope: !4245)
!4256 = !DILocation(line: 945, column: 21, scope: !4252)
!4257 = !DILocation(line: 945, column: 19, scope: !4252)
!4258 = !DILocation(line: 945, column: 5, scope: !4252)
!4259 = !DILocation(line: 947, column: 36, scope: !4245)
!4260 = !DILocation(line: 947, column: 15, scope: !4245)
!4261 = !DILocation(line: 947, column: 30, scope: !4245)
!4262 = !DILocation(line: 947, column: 3, scope: !4245)
!4263 = !DILocation(line: 947, column: 34, scope: !4245)
!4264 = !DILocation(line: 948, column: 1, scope: !4245)
!4265 = distinct !DISubprogram(name: "free_regset_pool", scope: !3, file: !3, line: 962, type: !2608, scopeLine: 963, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4266 = !DILocation(line: 1003, column: 3, scope: !4265)
!4267 = !DILocation(line: 1005, column: 3, scope: !4265)
!4268 = !DILocation(line: 1005, column: 22, scope: !4265)
!4269 = !DILocation(line: 1007, column: 7, scope: !4270)
!4270 = distinct !DILexicalBlock(scope: !4265, file: !3, line: 1006, column: 5)
!4271 = !DILocation(line: 1008, column: 7, scope: !4270)
!4272 = distinct !{!4272, !4267, !4273}
!4273 = !DILocation(line: 1009, column: 5, scope: !4265)
!4274 = !DILocation(line: 1011, column: 21, scope: !4265)
!4275 = !DILocation(line: 1011, column: 9, scope: !4265)
!4276 = !DILocation(line: 1011, column: 3, scope: !4265)
!4277 = !DILocation(line: 1012, column: 17, scope: !4265)
!4278 = !DILocation(line: 1013, column: 17, scope: !4265)
!4279 = !DILocation(line: 1015, column: 21, scope: !4265)
!4280 = !DILocation(line: 1015, column: 9, scope: !4265)
!4281 = !DILocation(line: 1015, column: 3, scope: !4265)
!4282 = !DILocation(line: 1016, column: 18, scope: !4265)
!4283 = !DILocation(line: 1017, column: 18, scope: !4265)
!4284 = !DILocation(line: 1018, column: 18, scope: !4265)
!4285 = !DILocation(line: 1020, column: 20, scope: !4265)
!4286 = !DILocation(line: 1021, column: 1, scope: !4265)
!4287 = distinct !DISubprogram(name: "get_nop_from_pool", scope: !3, file: !3, line: 1034, type: !4288, scopeLine: 1035, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4288 = !DISubroutineType(types: !4289)
!4289 = !{!2104, !2104}
!4290 = !DILocalVariable(name: "insn", arg: 1, scope: !4287, file: !3, line: 1034, type: !2104)
!4291 = !DILocation(line: 1034, column: 27, scope: !4287)
!4292 = !DILocalVariable(name: "nop", scope: !4287, file: !3, line: 1036, type: !2104)
!4293 = !DILocation(line: 1036, column: 10, scope: !4287)
!4294 = !DILocalVariable(name: "old_p", scope: !4287, file: !3, line: 1037, type: !1085)
!4295 = !DILocation(line: 1037, column: 8, scope: !4287)
!4296 = !DILocation(line: 1037, column: 25, scope: !4287)
!4297 = !DILocation(line: 1037, column: 27, scope: !4287)
!4298 = !DILocation(line: 1037, column: 16, scope: !4287)
!4299 = !DILocalVariable(name: "flags", scope: !4287, file: !3, line: 1038, type: !874)
!4300 = !DILocation(line: 1038, column: 7, scope: !4287)
!4301 = !DILocation(line: 1040, column: 7, scope: !4302)
!4302 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 1040, column: 7)
!4303 = !DILocation(line: 1040, column: 7, scope: !4287)
!4304 = !DILocation(line: 1041, column: 20, scope: !4302)
!4305 = !DILocation(line: 1041, column: 22, scope: !4302)
!4306 = !DILocation(line: 1041, column: 11, scope: !4302)
!4307 = !DILocation(line: 1041, column: 9, scope: !4302)
!4308 = !DILocation(line: 1041, column: 5, scope: !4302)
!4309 = !DILocation(line: 1043, column: 11, scope: !4302)
!4310 = !DILocation(line: 1043, column: 9, scope: !4302)
!4311 = !DILocation(line: 1045, column: 27, scope: !4287)
!4312 = !DILocation(line: 1045, column: 32, scope: !4287)
!4313 = !DILocation(line: 1045, column: 9, scope: !4287)
!4314 = !DILocation(line: 1045, column: 7, scope: !4287)
!4315 = !DILocation(line: 1047, column: 7, scope: !4316)
!4316 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 1047, column: 7)
!4317 = !DILocation(line: 1047, column: 7, scope: !4287)
!4318 = !DILocation(line: 1048, column: 11, scope: !4316)
!4319 = !DILocation(line: 1048, column: 5, scope: !4316)
!4320 = !DILocation(line: 1050, column: 11, scope: !4316)
!4321 = !DILocation(line: 1052, column: 18, scope: !4287)
!4322 = !DILocation(line: 1052, column: 36, scope: !4287)
!4323 = !DILocation(line: 1052, column: 47, scope: !4287)
!4324 = !DILocation(line: 1052, column: 3, scope: !4287)
!4325 = !DILocation(line: 1053, column: 22, scope: !4287)
!4326 = !DILocation(line: 1053, column: 27, scope: !4287)
!4327 = !DILocation(line: 1053, column: 3, scope: !4287)
!4328 = !DILocation(line: 1055, column: 10, scope: !4287)
!4329 = !DILocation(line: 1055, column: 3, scope: !4287)
!4330 = distinct !DISubprogram(name: "set_insn_init", scope: !3, file: !3, line: 3999, type: !4331, scopeLine: 4000, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4331 = !DISubroutineType(types: !4332)
!4332 = !{!2578, !2578, !2151, !874}
!4333 = !DILocalVariable(name: "expr", arg: 1, scope: !4330, file: !3, line: 3999, type: !2578)
!4334 = !DILocation(line: 3999, column: 23, scope: !4330)
!4335 = !DILocalVariable(name: "vi", arg: 2, scope: !4330, file: !3, line: 3999, type: !2151)
!4336 = !DILocation(line: 3999, column: 37, scope: !4330)
!4337 = !DILocalVariable(name: "seqno", arg: 3, scope: !4330, file: !3, line: 3999, type: !874)
!4338 = !DILocation(line: 3999, column: 45, scope: !4330)
!4339 = !DILocalVariable(name: "x", scope: !4330, file: !3, line: 4001, type: !2578)
!4340 = !DILocation(line: 4001, column: 10, scope: !4330)
!4341 = !DILocation(line: 4001, column: 15, scope: !4330)
!4342 = !DILocation(line: 4001, column: 31, scope: !4330)
!4343 = !DILocation(line: 4003, column: 21, scope: !4330)
!4344 = !DILocation(line: 4003, column: 24, scope: !4330)
!4345 = !DILocation(line: 4003, column: 3, scope: !4330)
!4346 = !DILocation(line: 4004, column: 7, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4330, file: !3, line: 4004, column: 7)
!4348 = !DILocation(line: 4004, column: 10, scope: !4347)
!4349 = !DILocation(line: 4004, column: 7, scope: !4330)
!4350 = !DILocation(line: 4006, column: 36, scope: !4351)
!4351 = distinct !DILexicalBlock(scope: !4347, file: !3, line: 4005, column: 5)
!4352 = !DILocation(line: 4007, column: 29, scope: !4351)
!4353 = !DILocation(line: 4007, column: 32, scope: !4351)
!4354 = !DILocation(line: 4007, column: 7, scope: !4351)
!4355 = !DILocation(line: 4008, column: 5, scope: !4351)
!4356 = !DILocation(line: 4010, column: 34, scope: !4347)
!4357 = !DILocation(line: 4012, column: 27, scope: !4330)
!4358 = !DILocation(line: 4012, column: 3, scope: !4330)
!4359 = !DILocation(line: 4012, column: 19, scope: !4330)
!4360 = !DILocation(line: 4012, column: 25, scope: !4330)
!4361 = !DILocation(line: 4013, column: 10, scope: !4330)
!4362 = !DILocation(line: 4013, column: 3, scope: !4330)
!4363 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_base_index", scope: !409, file: !409, line: 762, type: !4364, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4364 = !DISubroutineType(types: !4365)
!4365 = !{!2668, !4366, !7}
!4366 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2274, size: 64)
!4367 = !DILocalVariable(name: "vec_", arg: 1, scope: !4363, file: !409, line: 762, type: !4366)
!4368 = !DILocation(line: 762, column: 1, scope: !4363)
!4369 = !DILocalVariable(name: "ix_", arg: 2, scope: !4363, file: !409, line: 762, type: !7)
!4370 = !DILocation(line: 0, scope: !4363)
!4371 = distinct !DISubprogram(name: "VEC_int_base_index", scope: !1374, file: !1374, line: 31, type: !4372, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4372 = !DISubroutineType(types: !4373)
!4373 = !{!874, !4374, !7}
!4374 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4375, size: 64)
!4375 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2075)
!4376 = !DILocalVariable(name: "vec_", arg: 1, scope: !4371, file: !1374, line: 31, type: !4374)
!4377 = !DILocation(line: 31, column: 1, scope: !4371)
!4378 = !DILocalVariable(name: "ix_", arg: 2, scope: !4371, file: !1374, line: 31, type: !7)
!4379 = !DILocation(line: 0, scope: !4371)
!4380 = distinct !DISubprogram(name: "sel_init_new_insn", scope: !3, file: !3, line: 4055, type: !4381, scopeLine: 4056, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4381 = !DISubroutineType(types: !4382)
!4382 = !{null, !2104, !874}
!4383 = !DILocalVariable(name: "insn", arg: 1, scope: !4380, file: !3, line: 4055, type: !2104)
!4384 = !DILocation(line: 4055, column: 27, scope: !4380)
!4385 = !DILocalVariable(name: "flags", arg: 2, scope: !4380, file: !3, line: 4055, type: !874)
!4386 = !DILocation(line: 4055, column: 37, scope: !4380)
!4387 = !DILocation(line: 4058, column: 7, scope: !4388)
!4388 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4058, column: 7)
!4389 = !DILocation(line: 4059, column: 7, scope: !4388)
!4390 = !DILocation(line: 4059, column: 10, scope: !4388)
!4391 = !DILocation(line: 4060, column: 7, scope: !4388)
!4392 = !DILocation(line: 4060, column: 40, scope: !4388)
!4393 = !DILocation(line: 4060, column: 10, scope: !4388)
!4394 = !DILocation(line: 4058, column: 7, scope: !4380)
!4395 = !DILocation(line: 4062, column: 7, scope: !4396)
!4396 = distinct !DILexicalBlock(scope: !4388, file: !3, line: 4061, column: 5)
!4397 = !DILocation(line: 4063, column: 33, scope: !4396)
!4398 = !DILocation(line: 4063, column: 7, scope: !4396)
!4399 = !DILocation(line: 4064, column: 5, scope: !4396)
!4400 = !DILocation(line: 4066, column: 7, scope: !4401)
!4401 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4066, column: 7)
!4402 = !DILocation(line: 4066, column: 13, scope: !4401)
!4403 = !DILocation(line: 4066, column: 7, scope: !4380)
!4404 = !DILocation(line: 4067, column: 41, scope: !4401)
!4405 = !DILocation(line: 4067, column: 5, scope: !4401)
!4406 = !DILocation(line: 4069, column: 7, scope: !4407)
!4407 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4069, column: 7)
!4408 = !DILocation(line: 4069, column: 13, scope: !4407)
!4409 = !DILocation(line: 4069, column: 7, scope: !4380)
!4410 = !DILocation(line: 4071, column: 7, scope: !4411)
!4411 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 4070, column: 5)
!4412 = !DILocation(line: 4072, column: 23, scope: !4411)
!4413 = !DILocation(line: 4072, column: 7, scope: !4411)
!4414 = !DILocation(line: 4073, column: 20, scope: !4411)
!4415 = !DILocation(line: 4073, column: 36, scope: !4411)
!4416 = !DILocation(line: 4073, column: 7, scope: !4411)
!4417 = !DILocation(line: 4074, column: 5, scope: !4411)
!4418 = !DILocation(line: 4076, column: 7, scope: !4419)
!4419 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 4076, column: 7)
!4420 = !DILocation(line: 4076, column: 13, scope: !4419)
!4421 = !DILocation(line: 4076, column: 7, scope: !4380)
!4422 = !DILocation(line: 4078, column: 7, scope: !4423)
!4423 = distinct !DILexicalBlock(scope: !4419, file: !3, line: 4077, column: 5)
!4424 = !DILocation(line: 4079, column: 29, scope: !4423)
!4425 = !DILocation(line: 4079, column: 7, scope: !4423)
!4426 = !DILocation(line: 4080, column: 5, scope: !4423)
!4427 = !DILocation(line: 4082, column: 3, scope: !4380)
!4428 = !DILocation(line: 4084, column: 1, scope: !4380)
!4429 = distinct !DISubprogram(name: "return_nop_to_pool", scope: !3, file: !3, line: 1060, type: !4430, scopeLine: 1061, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4430 = !DISubroutineType(types: !4431)
!4431 = !{null, !2104, !1085}
!4432 = !DILocalVariable(name: "nop", arg: 1, scope: !4429, file: !3, line: 1060, type: !2104)
!4433 = !DILocation(line: 1060, column: 28, scope: !4429)
!4434 = !DILocalVariable(name: "full_tidying", arg: 2, scope: !4429, file: !3, line: 1060, type: !1085)
!4435 = !DILocation(line: 1060, column: 38, scope: !4429)
!4436 = !DILocation(line: 1062, column: 3, scope: !4429)
!4437 = !DILocation(line: 1063, column: 20, scope: !4429)
!4438 = !DILocation(line: 1063, column: 32, scope: !4429)
!4439 = !DILocation(line: 1063, column: 3, scope: !4429)
!4440 = !DILocation(line: 1065, column: 16, scope: !4441)
!4441 = distinct !DILexicalBlock(scope: !4429, file: !3, line: 1065, column: 7)
!4442 = !DILocation(line: 1065, column: 30, scope: !4441)
!4443 = !DILocation(line: 1065, column: 18, scope: !4441)
!4444 = !DILocation(line: 1065, column: 7, scope: !4429)
!4445 = !DILocation(line: 1066, column: 18, scope: !4441)
!4446 = !DILocation(line: 1066, column: 16, scope: !4441)
!4447 = !DILocation(line: 1066, column: 5, scope: !4441)
!4448 = !DILocation(line: 1068, column: 30, scope: !4429)
!4449 = !DILocation(line: 1068, column: 12, scope: !4429)
!4450 = !DILocation(line: 1068, column: 24, scope: !4429)
!4451 = !DILocation(line: 1068, column: 3, scope: !4429)
!4452 = !DILocation(line: 1068, column: 28, scope: !4429)
!4453 = !DILocation(line: 1069, column: 1, scope: !4429)
!4454 = distinct !DISubprogram(name: "sel_remove_insn", scope: !3, file: !3, line: 3732, type: !4455, scopeLine: 3733, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4455 = !DISubroutineType(types: !4456)
!4456 = !{!1085, !2104, !1085, !1085}
!4457 = !DILocalVariable(name: "insn", arg: 1, scope: !4454, file: !3, line: 3732, type: !2104)
!4458 = !DILocation(line: 3732, column: 25, scope: !4454)
!4459 = !DILocalVariable(name: "only_disconnect", arg: 2, scope: !4454, file: !3, line: 3732, type: !1085)
!4460 = !DILocation(line: 3732, column: 36, scope: !4454)
!4461 = !DILocalVariable(name: "full_tidying", arg: 3, scope: !4454, file: !3, line: 3732, type: !1085)
!4462 = !DILocation(line: 3732, column: 58, scope: !4454)
!4463 = !DILocalVariable(name: "bb", scope: !4454, file: !3, line: 3734, type: !1391)
!4464 = !DILocation(line: 3734, column: 15, scope: !4454)
!4465 = !DILocation(line: 3734, column: 20, scope: !4454)
!4466 = !DILocation(line: 3736, column: 3, scope: !4454)
!4467 = !DILocation(line: 3738, column: 7, scope: !4468)
!4468 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 3738, column: 7)
!4469 = !DILocation(line: 3738, column: 27, scope: !4468)
!4470 = !DILocation(line: 3738, column: 30, scope: !4468)
!4471 = !DILocation(line: 3738, column: 7, scope: !4454)
!4472 = !DILocalVariable(name: "expr", scope: !4473, file: !3, line: 3740, type: !2578)
!4473 = distinct !DILexicalBlock(scope: !4468, file: !3, line: 3739, column: 5)
!4474 = !DILocation(line: 3740, column: 14, scope: !4473)
!4475 = !DILocalVariable(name: "i", scope: !4473, file: !3, line: 3741, type: !2876)
!4476 = !DILocation(line: 3741, column: 23, scope: !4473)
!4477 = !DILocation(line: 3745, column: 7, scope: !4478)
!4478 = distinct !DILexicalBlock(scope: !4473, file: !3, line: 3745, column: 7)
!4479 = !DILocation(line: 3745, column: 7, scope: !4480)
!4480 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 3745, column: 7)
!4481 = !DILocation(line: 3746, column: 6, scope: !4482)
!4482 = distinct !DILexicalBlock(scope: !4480, file: !3, line: 3746, column: 6)
!4483 = !DILocation(line: 3746, column: 30, scope: !4482)
!4484 = !DILocation(line: 3746, column: 27, scope: !4482)
!4485 = !DILocation(line: 3746, column: 6, scope: !4480)
!4486 = !DILocation(line: 3748, column: 6, scope: !4487)
!4487 = distinct !DILexicalBlock(scope: !4482, file: !3, line: 3747, column: 4)
!4488 = !DILocation(line: 3749, column: 6, scope: !4487)
!4489 = distinct !{!4489, !4477, !4490}
!4490 = !DILocation(line: 3750, column: 4, scope: !4478)
!4491 = !DILocation(line: 3751, column: 5, scope: !4473)
!4492 = !DILocation(line: 3753, column: 7, scope: !4493)
!4493 = distinct !DILexicalBlock(scope: !4454, file: !3, line: 3753, column: 7)
!4494 = !DILocation(line: 3753, column: 7, scope: !4454)
!4495 = !DILocalVariable(name: "prev", scope: !4496, file: !3, line: 3755, type: !2104)
!4496 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 3754, column: 5)
!4497 = !DILocation(line: 3755, column: 14, scope: !4496)
!4498 = !DILocation(line: 3755, column: 21, scope: !4496)
!4499 = !DILocalVariable(name: "next", scope: !4496, file: !3, line: 3756, type: !2104)
!4500 = !DILocation(line: 3756, column: 14, scope: !4496)
!4501 = !DILocation(line: 3756, column: 21, scope: !4496)
!4502 = !DILocalVariable(name: "bb", scope: !4496, file: !3, line: 3757, type: !1391)
!4503 = !DILocation(line: 3757, column: 19, scope: !4496)
!4504 = !DILocation(line: 3757, column: 24, scope: !4496)
!4505 = !DILocation(line: 3759, column: 26, scope: !4496)
!4506 = !DILocation(line: 3759, column: 7, scope: !4496)
!4507 = !DILocation(line: 3759, column: 24, scope: !4496)
!4508 = !DILocation(line: 3760, column: 26, scope: !4496)
!4509 = !DILocation(line: 3760, column: 7, scope: !4496)
!4510 = !DILocation(line: 3760, column: 24, scope: !4496)
!4511 = !DILocation(line: 3762, column: 11, scope: !4512)
!4512 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 3762, column: 11)
!4513 = !DILocation(line: 3762, column: 27, scope: !4512)
!4514 = !DILocation(line: 3762, column: 24, scope: !4512)
!4515 = !DILocation(line: 3762, column: 11, scope: !4496)
!4516 = !DILocation(line: 3764, column: 11, scope: !4517)
!4517 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 3763, column: 9)
!4518 = !DILocation(line: 3765, column: 26, scope: !4517)
!4519 = !DILocation(line: 3765, column: 11, scope: !4517)
!4520 = !DILocation(line: 3765, column: 24, scope: !4517)
!4521 = !DILocation(line: 3766, column: 9, scope: !4517)
!4522 = !DILocation(line: 3767, column: 11, scope: !4523)
!4523 = distinct !DILexicalBlock(scope: !4496, file: !3, line: 3767, column: 11)
!4524 = !DILocation(line: 3767, column: 26, scope: !4523)
!4525 = !DILocation(line: 3767, column: 23, scope: !4523)
!4526 = !DILocation(line: 3767, column: 11, scope: !4496)
!4527 = !DILocation(line: 3768, column: 23, scope: !4523)
!4528 = !DILocation(line: 3768, column: 9, scope: !4523)
!4529 = !DILocation(line: 3768, column: 21, scope: !4523)
!4530 = !DILocation(line: 3769, column: 5, scope: !4496)
!4531 = !DILocation(line: 3772, column: 20, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4493, file: !3, line: 3771, column: 5)
!4533 = !DILocation(line: 3772, column: 7, scope: !4532)
!4534 = !DILocation(line: 3773, column: 19, scope: !4532)
!4535 = !DILocation(line: 3773, column: 7, scope: !4532)
!4536 = !DILocation(line: 3777, column: 3, scope: !4454)
!4537 = !DILocation(line: 3777, column: 20, scope: !4454)
!4538 = !DILocation(line: 3778, column: 3, scope: !4454)
!4539 = !DILocation(line: 3778, column: 20, scope: !4454)
!4540 = !DILocation(line: 3780, column: 29, scope: !4454)
!4541 = !DILocation(line: 3780, column: 33, scope: !4454)
!4542 = !DILocation(line: 3780, column: 10, scope: !4454)
!4543 = !DILocation(line: 3780, column: 3, scope: !4454)
!4544 = distinct !DISubprogram(name: "free_nop_pool", scope: !3, file: !3, line: 1073, type: !2608, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4545 = !DILocation(line: 1075, column: 14, scope: !4544)
!4546 = !DILocation(line: 1076, column: 14, scope: !4544)
!4547 = !DILocation(line: 1077, column: 18, scope: !4544)
!4548 = !DILocation(line: 1077, column: 9, scope: !4544)
!4549 = !DILocation(line: 1077, column: 3, scope: !4544)
!4550 = !DILocation(line: 1078, column: 14, scope: !4544)
!4551 = !DILocation(line: 1079, column: 1, scope: !4544)
!4552 = distinct !DISubprogram(name: "vinsn_attach", scope: !3, file: !3, line: 1216, type: !4553, scopeLine: 1217, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4553 = !DISubroutineType(types: !4554)
!4554 = !{null, !2151}
!4555 = !DILocalVariable(name: "vi", arg: 1, scope: !4552, file: !3, line: 1216, type: !2151)
!4556 = !DILocation(line: 1216, column: 23, scope: !4552)
!4557 = !DILocation(line: 1219, column: 3, scope: !4552)
!4558 = !DILocation(line: 1221, column: 3, scope: !4552)
!4559 = !DILocation(line: 1221, column: 19, scope: !4552)
!4560 = !DILocation(line: 1222, column: 1, scope: !4552)
!4561 = distinct !DISubprogram(name: "vinsn_copy", scope: !3, file: !3, line: 1238, type: !4562, scopeLine: 1239, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4562 = !DISubroutineType(types: !4563)
!4563 = !{!2151, !2151, !1085}
!4564 = !DILocalVariable(name: "vi", arg: 1, scope: !4561, file: !3, line: 1238, type: !2151)
!4565 = !DILocation(line: 1238, column: 21, scope: !4561)
!4566 = !DILocalVariable(name: "reattach_p", arg: 2, scope: !4561, file: !3, line: 1238, type: !1085)
!4567 = !DILocation(line: 1238, column: 30, scope: !4561)
!4568 = !DILocalVariable(name: "copy", scope: !4561, file: !3, line: 1240, type: !850)
!4569 = !DILocation(line: 1240, column: 7, scope: !4561)
!4570 = !DILocalVariable(name: "unique", scope: !4561, file: !3, line: 1241, type: !1085)
!4571 = !DILocation(line: 1241, column: 8, scope: !4561)
!4572 = !DILocation(line: 1241, column: 17, scope: !4561)
!4573 = !DILocalVariable(name: "new_vi", scope: !4561, file: !3, line: 1242, type: !2151)
!4574 = !DILocation(line: 1242, column: 11, scope: !4561)
!4575 = !DILocation(line: 1244, column: 35, scope: !4561)
!4576 = !DILocation(line: 1244, column: 10, scope: !4561)
!4577 = !DILocation(line: 1244, column: 8, scope: !4561)
!4578 = !DILocation(line: 1245, column: 40, scope: !4561)
!4579 = !DILocation(line: 1245, column: 46, scope: !4561)
!4580 = !DILocation(line: 1245, column: 12, scope: !4561)
!4581 = !DILocation(line: 1245, column: 10, scope: !4561)
!4582 = !DILocation(line: 1246, column: 7, scope: !4583)
!4583 = distinct !DILexicalBlock(scope: !4561, file: !3, line: 1246, column: 7)
!4584 = !DILocation(line: 1246, column: 7, scope: !4561)
!4585 = !DILocation(line: 1248, column: 21, scope: !4586)
!4586 = distinct !DILexicalBlock(scope: !4583, file: !3, line: 1247, column: 5)
!4587 = !DILocation(line: 1248, column: 7, scope: !4586)
!4588 = !DILocation(line: 1249, column: 21, scope: !4586)
!4589 = !DILocation(line: 1249, column: 7, scope: !4586)
!4590 = !DILocation(line: 1250, column: 5, scope: !4586)
!4591 = !DILocation(line: 1252, column: 10, scope: !4561)
!4592 = !DILocation(line: 1252, column: 3, scope: !4561)
!4593 = distinct !DISubprogram(name: "create_copy_of_insn_rtx", scope: !3, file: !3, line: 5555, type: !4594, scopeLine: 5556, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4594 = !DISubroutineType(types: !4595)
!4595 = !{!850, !850}
!4596 = !DILocalVariable(name: "insn_rtx", arg: 1, scope: !4593, file: !3, line: 5555, type: !850)
!4597 = !DILocation(line: 5555, column: 30, scope: !4593)
!4598 = !DILocalVariable(name: "res", scope: !4593, file: !3, line: 5557, type: !850)
!4599 = !DILocation(line: 5557, column: 7, scope: !4593)
!4600 = !DILocation(line: 5559, column: 7, scope: !4601)
!4601 = distinct !DILexicalBlock(scope: !4593, file: !3, line: 5559, column: 7)
!4602 = !DILocation(line: 5559, column: 7, scope: !4593)
!4603 = !DILocation(line: 5560, column: 52, scope: !4601)
!4604 = !DILocation(line: 5560, column: 42, scope: !4601)
!4605 = !DILocation(line: 5561, column: 7, scope: !4601)
!4606 = !DILocation(line: 5560, column: 12, scope: !4601)
!4607 = !DILocation(line: 5560, column: 5, scope: !4601)
!4608 = !DILocation(line: 5563, column: 3, scope: !4593)
!4609 = !DILocation(line: 5565, column: 49, scope: !4593)
!4610 = !DILocation(line: 5565, column: 39, scope: !4593)
!4611 = !DILocation(line: 5565, column: 9, scope: !4593)
!4612 = !DILocation(line: 5565, column: 7, scope: !4593)
!4613 = !DILocation(line: 5567, column: 10, scope: !4593)
!4614 = !DILocation(line: 5567, column: 3, scope: !4593)
!4615 = !DILocation(line: 5568, column: 1, scope: !4593)
!4616 = distinct !DISubprogram(name: "create_vinsn_from_insn_rtx", scope: !3, file: !3, line: 5545, type: !4617, scopeLine: 5546, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4617 = !DISubroutineType(types: !4618)
!4618 = !{!2151, !850, !1085}
!4619 = !DILocalVariable(name: "insn_rtx", arg: 1, scope: !4616, file: !3, line: 5545, type: !850)
!4620 = !DILocation(line: 5545, column: 33, scope: !4616)
!4621 = !DILocalVariable(name: "force_unique_p", arg: 2, scope: !4616, file: !3, line: 5545, type: !1085)
!4622 = !DILocation(line: 5545, column: 48, scope: !4616)
!4623 = !DILocation(line: 5547, column: 3, scope: !4616)
!4624 = !DILocation(line: 5550, column: 24, scope: !4616)
!4625 = !DILocation(line: 5550, column: 34, scope: !4616)
!4626 = !DILocation(line: 5550, column: 10, scope: !4616)
!4627 = !DILocation(line: 5550, column: 3, scope: !4616)
!4628 = distinct !DISubprogram(name: "vinsn_detach", scope: !3, file: !3, line: 1271, type: !4553, scopeLine: 1272, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4629 = !DILocalVariable(name: "vi", arg: 1, scope: !4628, file: !3, line: 1271, type: !2151)
!4630 = !DILocation(line: 1271, column: 23, scope: !4628)
!4631 = !DILocation(line: 1273, column: 3, scope: !4628)
!4632 = !DILocation(line: 1275, column: 9, scope: !4633)
!4633 = distinct !DILexicalBlock(scope: !4628, file: !3, line: 1275, column: 7)
!4634 = !DILocation(line: 1275, column: 7, scope: !4633)
!4635 = !DILocation(line: 1275, column: 26, scope: !4633)
!4636 = !DILocation(line: 1275, column: 7, scope: !4628)
!4637 = !DILocation(line: 1276, column: 19, scope: !4633)
!4638 = !DILocation(line: 1276, column: 5, scope: !4633)
!4639 = !DILocation(line: 1277, column: 1, scope: !4628)
!4640 = distinct !DISubprogram(name: "vinsn_delete", scope: !3, file: !3, line: 1257, type: !4553, scopeLine: 1258, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4641 = !DILocalVariable(name: "vi", arg: 1, scope: !4640, file: !3, line: 1257, type: !2151)
!4642 = !DILocation(line: 1257, column: 23, scope: !4640)
!4643 = !DILocation(line: 1259, column: 3, scope: !4640)
!4644 = !DILocation(line: 1261, column: 26, scope: !4640)
!4645 = !DILocation(line: 1261, column: 3, scope: !4640)
!4646 = !DILocation(line: 1262, column: 26, scope: !4640)
!4647 = !DILocation(line: 1262, column: 3, scope: !4640)
!4648 = !DILocation(line: 1263, column: 26, scope: !4640)
!4649 = !DILocation(line: 1263, column: 3, scope: !4640)
!4650 = !DILocation(line: 1265, column: 9, scope: !4640)
!4651 = !DILocation(line: 1265, column: 3, scope: !4640)
!4652 = !DILocation(line: 1266, column: 1, scope: !4640)
!4653 = distinct !DISubprogram(name: "vinsn_cond_branch_p", scope: !3, file: !3, line: 1281, type: !4654, scopeLine: 1282, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4654 = !DISubroutineType(types: !4655)
!4655 = !{!1085, !2151}
!4656 = !DILocalVariable(name: "vi", arg: 1, scope: !4653, file: !3, line: 1281, type: !2151)
!4657 = !DILocation(line: 1281, column: 30, scope: !4653)
!4658 = !DILocalVariable(name: "insn", scope: !4653, file: !3, line: 1283, type: !2104)
!4659 = !DILocation(line: 1283, column: 10, scope: !4653)
!4660 = !DILocation(line: 1285, column: 8, scope: !4661)
!4661 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 1285, column: 7)
!4662 = !DILocation(line: 1285, column: 7, scope: !4653)
!4663 = !DILocation(line: 1286, column: 5, scope: !4661)
!4664 = !DILocation(line: 1288, column: 10, scope: !4653)
!4665 = !DILocation(line: 1288, column: 8, scope: !4653)
!4666 = !DILocation(line: 1289, column: 7, scope: !4667)
!4667 = distinct !DILexicalBlock(scope: !4653, file: !3, line: 1289, column: 7)
!4668 = !DILocation(line: 1289, column: 41, scope: !4667)
!4669 = !DILocation(line: 1289, column: 38, scope: !4667)
!4670 = !DILocation(line: 1289, column: 7, scope: !4653)
!4671 = !DILocation(line: 1290, column: 5, scope: !4667)
!4672 = !DILocation(line: 1292, column: 31, scope: !4653)
!4673 = !DILocation(line: 1292, column: 10, scope: !4653)
!4674 = !DILocation(line: 1292, column: 3, scope: !4653)
!4675 = !DILocation(line: 1293, column: 1, scope: !4653)
!4676 = distinct !DISubprogram(name: "sel_vinsn_cost", scope: !3, file: !3, line: 1321, type: !4677, scopeLine: 1322, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4677 = !DISubroutineType(types: !4678)
!4678 = !{!874, !2151}
!4679 = !DILocalVariable(name: "vi", arg: 1, scope: !4676, file: !3, line: 1321, type: !2151)
!4680 = !DILocation(line: 1321, column: 25, scope: !4676)
!4681 = !DILocalVariable(name: "cost", scope: !4676, file: !3, line: 1323, type: !874)
!4682 = !DILocation(line: 1323, column: 7, scope: !4676)
!4683 = !DILocation(line: 1323, column: 14, scope: !4676)
!4684 = !DILocation(line: 1323, column: 18, scope: !4676)
!4685 = !DILocation(line: 1325, column: 7, scope: !4686)
!4686 = distinct !DILexicalBlock(scope: !4676, file: !3, line: 1325, column: 7)
!4687 = !DILocation(line: 1325, column: 12, scope: !4686)
!4688 = !DILocation(line: 1325, column: 7, scope: !4676)
!4689 = !DILocation(line: 1327, column: 33, scope: !4690)
!4690 = distinct !DILexicalBlock(scope: !4686, file: !3, line: 1326, column: 5)
!4691 = !DILocation(line: 1327, column: 14, scope: !4690)
!4692 = !DILocation(line: 1327, column: 12, scope: !4690)
!4693 = !DILocation(line: 1328, column: 18, scope: !4690)
!4694 = !DILocation(line: 1328, column: 7, scope: !4690)
!4695 = !DILocation(line: 1328, column: 11, scope: !4690)
!4696 = !DILocation(line: 1328, column: 16, scope: !4690)
!4697 = !DILocation(line: 1329, column: 5, scope: !4690)
!4698 = !DILocation(line: 1331, column: 10, scope: !4676)
!4699 = !DILocation(line: 1331, column: 3, scope: !4676)
!4700 = distinct !DISubprogram(name: "sel_insn_rtx_cost", scope: !3, file: !3, line: 1297, type: !2387, scopeLine: 1298, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4701 = !DILocalVariable(name: "insn", arg: 1, scope: !4700, file: !3, line: 1297, type: !850)
!4702 = !DILocation(line: 1297, column: 24, scope: !4700)
!4703 = !DILocalVariable(name: "cost", scope: !4700, file: !3, line: 1299, type: !874)
!4704 = !DILocation(line: 1299, column: 7, scope: !4700)
!4705 = !DILocation(line: 1305, column: 23, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4700, file: !3, line: 1305, column: 7)
!4707 = !DILocation(line: 1305, column: 7, scope: !4706)
!4708 = !DILocation(line: 1305, column: 29, scope: !4706)
!4709 = !DILocation(line: 1305, column: 7, scope: !4700)
!4710 = !DILocation(line: 1306, column: 10, scope: !4706)
!4711 = !DILocation(line: 1306, column: 5, scope: !4706)
!4712 = !DILocation(line: 1309, column: 36, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 1308, column: 5)
!4714 = !DILocation(line: 1309, column: 14, scope: !4713)
!4715 = !DILocation(line: 1309, column: 12, scope: !4713)
!4716 = !DILocation(line: 1311, column: 11, scope: !4717)
!4717 = distinct !DILexicalBlock(scope: !4713, file: !3, line: 1311, column: 11)
!4718 = !DILocation(line: 1311, column: 16, scope: !4717)
!4719 = !DILocation(line: 1311, column: 11, scope: !4713)
!4720 = !DILocation(line: 1312, column: 7, scope: !4717)
!4721 = !DILocation(line: 1312, column: 2, scope: !4717)
!4722 = !DILocation(line: 1315, column: 10, scope: !4700)
!4723 = !DILocation(line: 1315, column: 3, scope: !4700)
!4724 = distinct !DISubprogram(name: "sel_gen_insn_from_rtx_after", scope: !3, file: !3, line: 1340, type: !4725, scopeLine: 1341, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4725 = !DISubroutineType(types: !4726)
!4726 = !{!2104, !850, !2578, !874, !2104}
!4727 = !DILocalVariable(name: "pattern", arg: 1, scope: !4724, file: !3, line: 1340, type: !850)
!4728 = !DILocation(line: 1340, column: 34, scope: !4724)
!4729 = !DILocalVariable(name: "expr", arg: 2, scope: !4724, file: !3, line: 1340, type: !2578)
!4730 = !DILocation(line: 1340, column: 50, scope: !4724)
!4731 = !DILocalVariable(name: "seqno", arg: 3, scope: !4724, file: !3, line: 1340, type: !874)
!4732 = !DILocation(line: 1340, column: 60, scope: !4724)
!4733 = !DILocalVariable(name: "after", arg: 4, scope: !4724, file: !3, line: 1340, type: !2104)
!4734 = !DILocation(line: 1340, column: 74, scope: !4724)
!4735 = !DILocalVariable(name: "new_insn", scope: !4724, file: !3, line: 1342, type: !2104)
!4736 = !DILocation(line: 1342, column: 10, scope: !4724)
!4737 = !DILocation(line: 1344, column: 3, scope: !4724)
!4738 = !DILocation(line: 1346, column: 31, scope: !4724)
!4739 = !DILocation(line: 1346, column: 40, scope: !4724)
!4740 = !DILocation(line: 1346, column: 14, scope: !4724)
!4741 = !DILocation(line: 1346, column: 12, scope: !4724)
!4742 = !DILocation(line: 1347, column: 18, scope: !4724)
!4743 = !DILocation(line: 1347, column: 30, scope: !4724)
!4744 = !DILocation(line: 1347, column: 3, scope: !4724)
!4745 = !DILocation(line: 1348, column: 22, scope: !4724)
!4746 = !DILocation(line: 1348, column: 3, scope: !4724)
!4747 = !DILocation(line: 1350, column: 10, scope: !4724)
!4748 = !DILocation(line: 1350, column: 3, scope: !4724)
!4749 = distinct !DISubprogram(name: "sel_gen_recovery_insn_from_rtx_after", scope: !3, file: !3, line: 1359, type: !4725, scopeLine: 1361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4750 = !DILocalVariable(name: "pattern", arg: 1, scope: !4749, file: !3, line: 1359, type: !850)
!4751 = !DILocation(line: 1359, column: 43, scope: !4749)
!4752 = !DILocalVariable(name: "expr", arg: 2, scope: !4749, file: !3, line: 1359, type: !2578)
!4753 = !DILocation(line: 1359, column: 59, scope: !4749)
!4754 = !DILocalVariable(name: "seqno", arg: 3, scope: !4749, file: !3, line: 1359, type: !874)
!4755 = !DILocation(line: 1359, column: 69, scope: !4749)
!4756 = !DILocalVariable(name: "after", arg: 4, scope: !4749, file: !3, line: 1360, type: !2104)
!4757 = !DILocation(line: 1360, column: 18, scope: !4749)
!4758 = !DILocalVariable(name: "insn", scope: !4749, file: !3, line: 1362, type: !2104)
!4759 = !DILocation(line: 1362, column: 10, scope: !4749)
!4760 = !DILocation(line: 1364, column: 3, scope: !4749)
!4761 = !DILocation(line: 1366, column: 28, scope: !4749)
!4762 = !DILocation(line: 1367, column: 39, scope: !4749)
!4763 = !DILocation(line: 1367, column: 48, scope: !4749)
!4764 = !DILocation(line: 1367, column: 54, scope: !4749)
!4765 = !DILocation(line: 1367, column: 61, scope: !4749)
!4766 = !DILocation(line: 1367, column: 10, scope: !4749)
!4767 = !DILocation(line: 1367, column: 8, scope: !4749)
!4768 = !DILocation(line: 1368, column: 3, scope: !4749)
!4769 = !DILocation(line: 1368, column: 20, scope: !4749)
!4770 = !DILocation(line: 1369, column: 28, scope: !4749)
!4771 = !DILocation(line: 1371, column: 10, scope: !4749)
!4772 = !DILocation(line: 1371, column: 3, scope: !4749)
!4773 = distinct !DISubprogram(name: "VEC_haifa_deps_insn_data_def_base_index", scope: !398, file: !398, line: 846, type: !4774, scopeLine: 846, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4774 = !DISubroutineType(types: !4775)
!4775 = !{!4776, !4815, !7}
!4776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4777, size: 64)
!4777 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_deps_insn_data_def", file: !398, line: 843, baseType: !4778)
!4778 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_deps_insn_data", file: !398, line: 663, size: 448, elements: !4779)
!4779 = !{!4780, !4781, !4782, !4810, !4811, !4812, !4813, !4814}
!4780 = !DIDerivedType(tag: DW_TAG_member, name: "dep_count", scope: !4778, file: !398, line: 668, baseType: !874, size: 32)
!4781 = !DIDerivedType(tag: DW_TAG_member, name: "has_internal_dep", scope: !4778, file: !398, line: 672, baseType: !7, size: 32, offset: 32)
!4782 = !DIDerivedType(tag: DW_TAG_member, name: "hard_back_deps", scope: !4778, file: !398, line: 682, baseType: !4783, size: 64, offset: 64)
!4783 = !DIDerivedType(tag: DW_TAG_typedef, name: "deps_list_t", file: !398, line: 305, baseType: !4784)
!4784 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4785, size: 64)
!4785 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_deps_list", file: !398, line: 297, size: 128, elements: !4786)
!4786 = !{!4787, !4809}
!4787 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !4785, file: !398, line: 300, baseType: !4788, size: 64)
!4788 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_link_t", file: !398, line: 280, baseType: !4789)
!4789 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4790, size: 64)
!4790 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_link", file: !398, line: 265, size: 192, elements: !4791)
!4791 = !{!4792, !4806, !4807}
!4792 = !DIDerivedType(tag: DW_TAG_member, name: "node", scope: !4790, file: !398, line: 268, baseType: !4793, size: 64)
!4793 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_node_t", file: !398, line: 261, baseType: !4794)
!4794 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4795, size: 64)
!4795 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep_node", file: !398, line: 405, size: 576, elements: !4796)
!4796 = !{!4797, !4798, !4805}
!4797 = !DIDerivedType(tag: DW_TAG_member, name: "back", scope: !4795, file: !398, line: 408, baseType: !4790, size: 192)
!4798 = !DIDerivedType(tag: DW_TAG_member, name: "dep", scope: !4795, file: !398, line: 411, baseType: !4799, size: 192, offset: 192)
!4799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_dep", file: !398, line: 227, size: 192, elements: !4800)
!4800 = !{!4801, !4802, !4803, !4804}
!4801 = !DIDerivedType(tag: DW_TAG_member, name: "pro", scope: !4799, file: !398, line: 230, baseType: !850, size: 64)
!4802 = !DIDerivedType(tag: DW_TAG_member, name: "con", scope: !4799, file: !398, line: 233, baseType: !850, size: 64, offset: 64)
!4803 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !4799, file: !398, line: 237, baseType: !761, size: 32, offset: 128)
!4804 = !DIDerivedType(tag: DW_TAG_member, name: "status", scope: !4799, file: !398, line: 241, baseType: !2056, size: 32, offset: 160)
!4805 = !DIDerivedType(tag: DW_TAG_member, name: "forw", scope: !4795, file: !398, line: 414, baseType: !4790, size: 192, offset: 384)
!4806 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !4790, file: !398, line: 271, baseType: !4789, size: 64, offset: 64)
!4807 = !DIDerivedType(tag: DW_TAG_member, name: "prev_nextp", scope: !4790, file: !398, line: 278, baseType: !4808, size: 64, offset: 128)
!4808 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4789, size: 64)
!4809 = !DIDerivedType(tag: DW_TAG_member, name: "n_links", scope: !4785, file: !398, line: 303, baseType: !874, size: 32, offset: 64)
!4810 = !DIDerivedType(tag: DW_TAG_member, name: "spec_back_deps", scope: !4778, file: !398, line: 686, baseType: !4783, size: 64, offset: 128)
!4811 = !DIDerivedType(tag: DW_TAG_member, name: "forw_deps", scope: !4778, file: !398, line: 690, baseType: !4783, size: 64, offset: 192)
!4812 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_back_deps", scope: !4778, file: !398, line: 694, baseType: !4783, size: 64, offset: 256)
!4813 = !DIDerivedType(tag: DW_TAG_member, name: "resolved_forw_deps", scope: !4778, file: !398, line: 699, baseType: !4783, size: 64, offset: 320)
!4814 = !DIDerivedType(tag: DW_TAG_member, name: "cant_move", scope: !4778, file: !398, line: 702, baseType: !7, size: 1, offset: 384, flags: DIFlagBitField, extraData: i64 384)
!4815 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4816, size: 64)
!4816 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_deps_insn_data_def_base", file: !398, line: 846, baseType: !4817)
!4817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_deps_insn_data_def_base", file: !398, line: 846, size: 512, elements: !4818)
!4818 = !{!4819, !4820, !4821}
!4819 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !4817, file: !398, line: 846, baseType: !7, size: 32)
!4820 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !4817, file: !398, line: 846, baseType: !7, size: 32, offset: 32)
!4821 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !4817, file: !398, line: 846, baseType: !4822, size: 448, offset: 64)
!4822 = !DICompositeType(tag: DW_TAG_array_type, baseType: !4777, size: 448, elements: !889)
!4823 = !DILocalVariable(name: "vec_", arg: 1, scope: !4773, file: !398, line: 846, type: !4815)
!4824 = !DILocation(line: 846, column: 1, scope: !4773)
!4825 = !DILocalVariable(name: "ix_", arg: 2, scope: !4773, file: !398, line: 846, type: !7)
!4826 = !DILocation(line: 0, scope: !4773)
!4827 = distinct !DISubprogram(name: "sel_gen_insn_from_expr_after", scope: !3, file: !3, line: 1379, type: !4828, scopeLine: 1381, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4828 = !DISubroutineType(types: !4829)
!4829 = !{!2104, !2578, !2151, !874, !2104}
!4830 = !DILocalVariable(name: "expr", arg: 1, scope: !4827, file: !3, line: 1379, type: !2578)
!4831 = !DILocation(line: 1379, column: 38, scope: !4827)
!4832 = !DILocalVariable(name: "vinsn", arg: 2, scope: !4827, file: !3, line: 1379, type: !2151)
!4833 = !DILocation(line: 1379, column: 52, scope: !4827)
!4834 = !DILocalVariable(name: "seqno", arg: 3, scope: !4827, file: !3, line: 1379, type: !874)
!4835 = !DILocation(line: 1379, column: 63, scope: !4827)
!4836 = !DILocalVariable(name: "after", arg: 4, scope: !4827, file: !3, line: 1380, type: !2104)
!4837 = !DILocation(line: 1380, column: 38, scope: !4827)
!4838 = !DILocalVariable(name: "emit_expr", scope: !4827, file: !3, line: 1382, type: !2578)
!4839 = !DILocation(line: 1382, column: 10, scope: !4827)
!4840 = !DILocalVariable(name: "insn", scope: !4827, file: !3, line: 1383, type: !2104)
!4841 = !DILocation(line: 1383, column: 10, scope: !4827)
!4842 = !DILocalVariable(name: "flags", scope: !4827, file: !3, line: 1384, type: !874)
!4843 = !DILocation(line: 1384, column: 7, scope: !4827)
!4844 = !DILocation(line: 1386, column: 30, scope: !4827)
!4845 = !DILocation(line: 1386, column: 36, scope: !4827)
!4846 = !DILocation(line: 1386, column: 44, scope: !4827)
!4847 = !DILocation(line: 1386, column: 52, scope: !4827)
!4848 = !DILocation(line: 1387, column: 30, scope: !4827)
!4849 = !DILocation(line: 1386, column: 15, scope: !4827)
!4850 = !DILocation(line: 1386, column: 13, scope: !4827)
!4851 = !DILocation(line: 1388, column: 10, scope: !4827)
!4852 = !DILocation(line: 1388, column: 8, scope: !4827)
!4853 = !DILocation(line: 1389, column: 19, scope: !4827)
!4854 = !DILocation(line: 1389, column: 25, scope: !4827)
!4855 = !DILocation(line: 1389, column: 32, scope: !4827)
!4856 = !DILocation(line: 1389, column: 3, scope: !4827)
!4857 = !DILocation(line: 1391, column: 9, scope: !4827)
!4858 = !DILocation(line: 1392, column: 7, scope: !4859)
!4859 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 1392, column: 7)
!4860 = !DILocation(line: 1392, column: 24, scope: !4859)
!4861 = !DILocation(line: 1392, column: 7, scope: !4827)
!4862 = !DILocation(line: 1393, column: 11, scope: !4859)
!4863 = !DILocation(line: 1393, column: 5, scope: !4859)
!4864 = !DILocation(line: 1394, column: 22, scope: !4827)
!4865 = !DILocation(line: 1394, column: 28, scope: !4827)
!4866 = !DILocation(line: 1394, column: 3, scope: !4827)
!4867 = !DILocation(line: 1396, column: 10, scope: !4827)
!4868 = !DILocation(line: 1396, column: 3, scope: !4827)
!4869 = distinct !DISubprogram(name: "sel_move_insn", scope: !3, file: !3, line: 1401, type: !4870, scopeLine: 1402, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4870 = !DISubroutineType(types: !4871)
!4871 = !{!2104, !2578, !874, !2104}
!4872 = !DILocalVariable(name: "expr", arg: 1, scope: !4869, file: !3, line: 1401, type: !2578)
!4873 = !DILocation(line: 1401, column: 23, scope: !4869)
!4874 = !DILocalVariable(name: "seqno", arg: 2, scope: !4869, file: !3, line: 1401, type: !874)
!4875 = !DILocation(line: 1401, column: 33, scope: !4869)
!4876 = !DILocalVariable(name: "after", arg: 3, scope: !4869, file: !3, line: 1401, type: !2104)
!4877 = !DILocation(line: 1401, column: 47, scope: !4869)
!4878 = !DILocalVariable(name: "insn", scope: !4869, file: !3, line: 1403, type: !2104)
!4879 = !DILocation(line: 1403, column: 10, scope: !4869)
!4880 = !DILocation(line: 1403, column: 17, scope: !4869)
!4881 = !DILocalVariable(name: "bb", scope: !4869, file: !3, line: 1404, type: !1391)
!4882 = !DILocation(line: 1404, column: 15, scope: !4869)
!4883 = !DILocation(line: 1404, column: 20, scope: !4869)
!4884 = !DILocalVariable(name: "next", scope: !4869, file: !3, line: 1405, type: !2104)
!4885 = !DILocation(line: 1405, column: 10, scope: !4869)
!4886 = !DILocation(line: 1405, column: 17, scope: !4869)
!4887 = !DILocation(line: 1408, column: 3, scope: !4869)
!4888 = !DILocation(line: 1409, column: 22, scope: !4869)
!4889 = !DILocation(line: 1409, column: 3, scope: !4869)
!4890 = !DILocation(line: 1409, column: 20, scope: !4869)
!4891 = !DILocation(line: 1410, column: 22, scope: !4869)
!4892 = !DILocation(line: 1410, column: 3, scope: !4869)
!4893 = !DILocation(line: 1410, column: 20, scope: !4869)
!4894 = !DILocation(line: 1412, column: 23, scope: !4869)
!4895 = !DILocation(line: 1412, column: 3, scope: !4869)
!4896 = !DILocation(line: 1412, column: 21, scope: !4869)
!4897 = !DILocation(line: 1413, column: 22, scope: !4869)
!4898 = !DILocation(line: 1413, column: 3, scope: !4869)
!4899 = !DILocation(line: 1413, column: 20, scope: !4869)
!4900 = !DILocation(line: 1416, column: 22, scope: !4869)
!4901 = !DILocation(line: 1416, column: 28, scope: !4869)
!4902 = !DILocation(line: 1416, column: 3, scope: !4869)
!4903 = !DILocation(line: 1417, column: 7, scope: !4904)
!4904 = distinct !DILexicalBlock(scope: !4869, file: !3, line: 1417, column: 7)
!4905 = !DILocation(line: 1417, column: 22, scope: !4904)
!4906 = !DILocation(line: 1417, column: 19, scope: !4904)
!4907 = !DILocation(line: 1417, column: 7, scope: !4869)
!4908 = !DILocation(line: 1418, column: 19, scope: !4904)
!4909 = !DILocation(line: 1418, column: 5, scope: !4904)
!4910 = !DILocation(line: 1418, column: 17, scope: !4904)
!4911 = !DILocation(line: 1420, column: 22, scope: !4869)
!4912 = !DILocation(line: 1420, column: 28, scope: !4869)
!4913 = !DILocation(line: 1420, column: 3, scope: !4869)
!4914 = !DILocation(line: 1421, column: 10, scope: !4869)
!4915 = !DILocation(line: 1421, column: 3, scope: !4869)
!4916 = distinct !DISubprogram(name: "prepare_insn_expr", scope: !3, file: !3, line: 1676, type: !4381, scopeLine: 1677, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4917 = !DILocalVariable(name: "insn", arg: 1, scope: !4916, file: !3, line: 1676, type: !2104)
!4918 = !DILocation(line: 1676, column: 27, scope: !4916)
!4919 = !DILocalVariable(name: "seqno", arg: 2, scope: !4916, file: !3, line: 1676, type: !874)
!4920 = !DILocation(line: 1676, column: 37, scope: !4916)
!4921 = !DILocalVariable(name: "expr", scope: !4916, file: !3, line: 1678, type: !2578)
!4922 = !DILocation(line: 1678, column: 10, scope: !4916)
!4923 = !DILocation(line: 1678, column: 17, scope: !4916)
!4924 = !DILocalVariable(name: "ds", scope: !4916, file: !3, line: 1679, type: !2056)
!4925 = !DILocation(line: 1679, column: 8, scope: !4916)
!4926 = !DILocation(line: 1681, column: 23, scope: !4916)
!4927 = !DILocation(line: 1681, column: 3, scope: !4916)
!4928 = !DILocation(line: 1681, column: 21, scope: !4916)
!4929 = !DILocation(line: 1682, column: 31, scope: !4916)
!4930 = !DILocation(line: 1682, column: 3, scope: !4916)
!4931 = !DILocation(line: 1682, column: 29, scope: !4916)
!4932 = !DILocation(line: 1683, column: 3, scope: !4916)
!4933 = !DILocation(line: 1683, column: 20, scope: !4916)
!4934 = !DILocation(line: 1684, column: 3, scope: !4916)
!4935 = !DILocation(line: 1684, column: 32, scope: !4916)
!4936 = !DILocation(line: 1685, column: 3, scope: !4916)
!4937 = !DILocation(line: 1685, column: 31, scope: !4916)
!4938 = !DILocation(line: 1686, column: 3, scope: !4916)
!4939 = !DILocation(line: 1686, column: 27, scope: !4916)
!4940 = !DILocation(line: 1687, column: 3, scope: !4916)
!4941 = !DILocation(line: 1687, column: 32, scope: !4916)
!4942 = !DILocation(line: 1688, column: 3, scope: !4916)
!4943 = !DILocation(line: 1688, column: 28, scope: !4916)
!4944 = !DILocation(line: 1695, column: 8, scope: !4916)
!4945 = !DILocation(line: 1695, column: 6, scope: !4916)
!4946 = !DILocation(line: 1696, column: 7, scope: !4947)
!4947 = distinct !DILexicalBlock(scope: !4916, file: !3, line: 1696, column: 7)
!4948 = !DILocation(line: 1696, column: 7, scope: !4916)
!4949 = !DILocation(line: 1697, column: 53, scope: !4947)
!4950 = !DILocation(line: 1697, column: 32, scope: !4947)
!4951 = !DILocation(line: 1697, column: 5, scope: !4947)
!4952 = !DILocation(line: 1697, column: 30, scope: !4947)
!4953 = !DILocation(line: 1699, column: 23, scope: !4916)
!4954 = !DILocation(line: 1699, column: 3, scope: !4916)
!4955 = !DILocation(line: 1700, column: 1, scope: !4916)
!4956 = distinct !DISubprogram(name: "find_in_history_vect", scope: !3, file: !3, line: 1478, type: !4957, scopeLine: 1480, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!4957 = !DISubroutineType(types: !4958)
!4958 = !{!874, !2180, !850, !2151, !1085}
!4959 = !DILocalVariable(name: "vect", arg: 1, scope: !4956, file: !3, line: 1478, type: !2180)
!4960 = !DILocation(line: 1478, column: 52, scope: !4956)
!4961 = !DILocalVariable(name: "insn", arg: 2, scope: !4956, file: !3, line: 1478, type: !850)
!4962 = !DILocation(line: 1478, column: 62, scope: !4956)
!4963 = !DILocalVariable(name: "new_vinsn", arg: 3, scope: !4956, file: !3, line: 1479, type: !2151)
!4964 = !DILocation(line: 1479, column: 31, scope: !4956)
!4965 = !DILocalVariable(name: "originators_p", arg: 4, scope: !4956, file: !3, line: 1479, type: !1085)
!4966 = !DILocation(line: 1479, column: 47, scope: !4956)
!4967 = !DILocalVariable(name: "ind", scope: !4956, file: !3, line: 1481, type: !874)
!4968 = !DILocation(line: 1481, column: 7, scope: !4956)
!4969 = !DILocation(line: 1483, column: 31, scope: !4970)
!4970 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 1483, column: 7)
!4971 = !DILocation(line: 1483, column: 37, scope: !4970)
!4972 = !DILocation(line: 1483, column: 54, scope: !4970)
!4973 = !DILocation(line: 1483, column: 7, scope: !4970)
!4974 = !DILocation(line: 1483, column: 7, scope: !4956)
!4975 = !DILocation(line: 1485, column: 12, scope: !4970)
!4976 = !DILocation(line: 1485, column: 5, scope: !4970)
!4977 = !DILocation(line: 1487, column: 7, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4956, file: !3, line: 1487, column: 7)
!4979 = !DILocation(line: 1487, column: 31, scope: !4978)
!4980 = !DILocation(line: 1487, column: 34, scope: !4978)
!4981 = !DILocation(line: 1487, column: 7, scope: !4956)
!4982 = !DILocalVariable(name: "uid", scope: !4983, file: !3, line: 1489, type: !7)
!4983 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1488, column: 5)
!4984 = !DILocation(line: 1489, column: 16, scope: !4983)
!4985 = !DILocalVariable(name: "bi", scope: !4983, file: !3, line: 1490, type: !4986)
!4986 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !910, line: 218, baseType: !4987)
!4987 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !910, line: 203, size: 256, elements: !4988)
!4988 = !{!4989, !4990, !4991, !4992}
!4989 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !4987, file: !910, line: 206, baseType: !913, size: 64)
!4990 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !4987, file: !910, line: 209, baseType: !913, size: 64, offset: 64)
!4991 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !4987, file: !910, line: 212, baseType: !7, size: 32, offset: 128)
!4992 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !4987, file: !910, line: 217, baseType: !923, size: 64, offset: 192)
!4993 = !DILocation(line: 1490, column: 23, scope: !4983)
!4994 = !DILocation(line: 1492, column: 7, scope: !4995)
!4995 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 1492, column: 7)
!4996 = !DILocation(line: 1492, column: 7, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4995, file: !3, line: 1492, column: 7)
!4998 = !DILocation(line: 1493, column: 37, scope: !4999)
!4999 = distinct !DILexicalBlock(scope: !4997, file: !3, line: 1493, column: 13)
!5000 = !DILocation(line: 1493, column: 43, scope: !4999)
!5001 = !DILocation(line: 1493, column: 48, scope: !4999)
!5002 = !DILocation(line: 1493, column: 13, scope: !4999)
!5003 = !DILocation(line: 1493, column: 13, scope: !4997)
!5004 = !DILocation(line: 1494, column: 18, scope: !4999)
!5005 = !DILocation(line: 1494, column: 11, scope: !4999)
!5006 = !DILocation(line: 1493, column: 70, scope: !4999)
!5007 = distinct !{!5007, !4994, !5008}
!5008 = !DILocation(line: 1494, column: 18, scope: !4995)
!5009 = !DILocation(line: 1495, column: 5, scope: !4983)
!5010 = !DILocation(line: 1497, column: 3, scope: !4956)
!5011 = !DILocation(line: 1498, column: 1, scope: !4956)
!5012 = distinct !DISubprogram(name: "find_in_history_vect_1", scope: !3, file: !3, line: 1433, type: !5013, scopeLine: 1436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5013 = !DISubroutineType(types: !5014)
!5014 = !{!1085, !2180, !7, !2151, !1085, !2051}
!5015 = !DILocalVariable(name: "vect", arg: 1, scope: !5012, file: !3, line: 1433, type: !2180)
!5016 = !DILocation(line: 1433, column: 54, scope: !5012)
!5017 = !DILocalVariable(name: "uid", arg: 2, scope: !5012, file: !3, line: 1434, type: !7)
!5018 = !DILocation(line: 1434, column: 34, scope: !5012)
!5019 = !DILocalVariable(name: "new_vinsn", arg: 3, scope: !5012, file: !3, line: 1434, type: !2151)
!5020 = !DILocation(line: 1434, column: 47, scope: !5012)
!5021 = !DILocalVariable(name: "compare_vinsns", arg: 4, scope: !5012, file: !3, line: 1435, type: !1085)
!5022 = !DILocation(line: 1435, column: 30, scope: !5012)
!5023 = !DILocalVariable(name: "indp", arg: 5, scope: !5012, file: !3, line: 1435, type: !2051)
!5024 = !DILocation(line: 1435, column: 51, scope: !5012)
!5025 = !DILocalVariable(name: "arr", scope: !5012, file: !3, line: 1437, type: !5026)
!5026 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!5027 = !DILocation(line: 1437, column: 21, scope: !5012)
!5028 = !DILocalVariable(name: "i", scope: !5012, file: !3, line: 1438, type: !874)
!5029 = !DILocation(line: 1438, column: 7, scope: !5012)
!5030 = !DILocalVariable(name: "j", scope: !5012, file: !3, line: 1438, type: !874)
!5031 = !DILocation(line: 1438, column: 10, scope: !5012)
!5032 = !DILocalVariable(name: "len", scope: !5012, file: !3, line: 1438, type: !874)
!5033 = !DILocation(line: 1438, column: 13, scope: !5012)
!5034 = !DILocation(line: 1438, column: 19, scope: !5012)
!5035 = !DILocation(line: 1440, column: 7, scope: !5036)
!5036 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1440, column: 7)
!5037 = !DILocation(line: 1440, column: 11, scope: !5036)
!5038 = !DILocation(line: 1440, column: 7, scope: !5012)
!5039 = !DILocation(line: 1442, column: 8, scope: !5040)
!5040 = distinct !DILexicalBlock(scope: !5036, file: !3, line: 1441, column: 5)
!5041 = !DILocation(line: 1442, column: 13, scope: !5040)
!5042 = !DILocation(line: 1443, column: 7, scope: !5040)
!5043 = !DILocation(line: 1446, column: 9, scope: !5012)
!5044 = !DILocation(line: 1446, column: 7, scope: !5012)
!5045 = !DILocation(line: 1447, column: 5, scope: !5012)
!5046 = !DILocation(line: 1447, column: 14, scope: !5012)
!5047 = !DILocation(line: 1447, column: 18, scope: !5012)
!5048 = !DILocation(line: 1447, column: 12, scope: !5012)
!5049 = !DILocation(line: 1449, column: 3, scope: !5012)
!5050 = !DILocation(line: 1449, column: 10, scope: !5012)
!5051 = !DILocation(line: 1449, column: 15, scope: !5012)
!5052 = !DILocation(line: 1449, column: 12, scope: !5012)
!5053 = !DILocalVariable(name: "auid", scope: !5054, file: !3, line: 1451, type: !7)
!5054 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 1450, column: 5)
!5055 = !DILocation(line: 1451, column: 16, scope: !5054)
!5056 = !DILocation(line: 1451, column: 23, scope: !5054)
!5057 = !DILocation(line: 1451, column: 27, scope: !5054)
!5058 = !DILocation(line: 1451, column: 30, scope: !5054)
!5059 = !DILocalVariable(name: "avinsn", scope: !5054, file: !3, line: 1452, type: !2151)
!5060 = !DILocation(line: 1452, column: 15, scope: !5054)
!5061 = !DILocation(line: 1452, column: 24, scope: !5054)
!5062 = !DILocation(line: 1452, column: 28, scope: !5054)
!5063 = !DILocation(line: 1452, column: 31, scope: !5054)
!5064 = !DILocation(line: 1454, column: 11, scope: !5065)
!5065 = distinct !DILexicalBlock(scope: !5054, file: !3, line: 1454, column: 11)
!5066 = !DILocation(line: 1454, column: 19, scope: !5065)
!5067 = !DILocation(line: 1454, column: 16, scope: !5065)
!5068 = !DILocation(line: 1459, column: 11, scope: !5065)
!5069 = !DILocation(line: 1459, column: 17, scope: !5065)
!5070 = !DILocation(line: 1460, column: 15, scope: !5065)
!5071 = !DILocation(line: 1460, column: 33, scope: !5065)
!5072 = !DILocation(line: 1460, column: 41, scope: !5065)
!5073 = !DILocation(line: 1460, column: 18, scope: !5065)
!5074 = !DILocation(line: 1454, column: 11, scope: !5054)
!5075 = !DILocation(line: 1462, column: 19, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1461, column: 9)
!5077 = !DILocation(line: 1462, column: 12, scope: !5076)
!5078 = !DILocation(line: 1462, column: 17, scope: !5076)
!5079 = !DILocation(line: 1463, column: 11, scope: !5076)
!5080 = !DILocation(line: 1465, column: 16, scope: !5081)
!5081 = distinct !DILexicalBlock(scope: !5065, file: !3, line: 1465, column: 16)
!5082 = !DILocation(line: 1465, column: 23, scope: !5081)
!5083 = !DILocation(line: 1465, column: 21, scope: !5081)
!5084 = !DILocation(line: 1465, column: 16, scope: !5065)
!5085 = !DILocation(line: 1466, column: 9, scope: !5081)
!5086 = !DILocation(line: 1467, column: 8, scope: !5054)
!5087 = distinct !{!5087, !5049, !5088}
!5088 = !DILocation(line: 1468, column: 5, scope: !5012)
!5089 = !DILocation(line: 1470, column: 11, scope: !5012)
!5090 = !DILocation(line: 1470, column: 4, scope: !5012)
!5091 = !DILocation(line: 1470, column: 9, scope: !5012)
!5092 = !DILocation(line: 1471, column: 3, scope: !5012)
!5093 = !DILocation(line: 1472, column: 1, scope: !5012)
!5094 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !910, file: !910, line: 224, type: !5095, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5095 = !DISubroutineType(types: !5096)
!5096 = !{null, !5097, !5098, !7, !5101}
!5097 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4986, size: 64)
!5098 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !851, line: 48, baseType: !5099)
!5099 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5100, size: 64)
!5100 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !909)
!5101 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!5102 = !DILocalVariable(name: "bi", arg: 1, scope: !5094, file: !910, line: 224, type: !5097)
!5103 = !DILocation(line: 224, column: 37, scope: !5094)
!5104 = !DILocalVariable(name: "map", arg: 2, scope: !5094, file: !910, line: 224, type: !5098)
!5105 = !DILocation(line: 224, column: 54, scope: !5094)
!5106 = !DILocalVariable(name: "start_bit", arg: 3, scope: !5094, file: !910, line: 225, type: !7)
!5107 = !DILocation(line: 225, column: 15, scope: !5094)
!5108 = !DILocalVariable(name: "bit_no", arg: 4, scope: !5094, file: !910, line: 225, type: !5101)
!5109 = !DILocation(line: 225, column: 36, scope: !5094)
!5110 = !DILocation(line: 227, column: 14, scope: !5094)
!5111 = !DILocation(line: 227, column: 19, scope: !5094)
!5112 = !DILocation(line: 227, column: 3, scope: !5094)
!5113 = !DILocation(line: 227, column: 7, scope: !5094)
!5114 = !DILocation(line: 227, column: 12, scope: !5094)
!5115 = !DILocation(line: 228, column: 3, scope: !5094)
!5116 = !DILocation(line: 228, column: 7, scope: !5094)
!5117 = !DILocation(line: 228, column: 12, scope: !5094)
!5118 = !DILocation(line: 231, column: 3, scope: !5094)
!5119 = !DILocation(line: 233, column: 12, scope: !5120)
!5120 = distinct !DILexicalBlock(scope: !5121, file: !910, line: 233, column: 11)
!5121 = distinct !DILexicalBlock(scope: !5094, file: !910, line: 232, column: 5)
!5122 = !DILocation(line: 233, column: 16, scope: !5120)
!5123 = !DILocation(line: 233, column: 11, scope: !5121)
!5124 = !DILocation(line: 235, column: 4, scope: !5125)
!5125 = distinct !DILexicalBlock(scope: !5120, file: !910, line: 234, column: 2)
!5126 = !DILocation(line: 235, column: 8, scope: !5125)
!5127 = !DILocation(line: 235, column: 13, scope: !5125)
!5128 = !DILocation(line: 236, column: 4, scope: !5125)
!5129 = !DILocation(line: 239, column: 11, scope: !5130)
!5130 = distinct !DILexicalBlock(scope: !5121, file: !910, line: 239, column: 11)
!5131 = !DILocation(line: 239, column: 15, scope: !5130)
!5132 = !DILocation(line: 239, column: 21, scope: !5130)
!5133 = !DILocation(line: 239, column: 29, scope: !5130)
!5134 = !DILocation(line: 239, column: 39, scope: !5130)
!5135 = !DILocation(line: 239, column: 26, scope: !5130)
!5136 = !DILocation(line: 239, column: 11, scope: !5121)
!5137 = !DILocation(line: 240, column: 2, scope: !5130)
!5138 = !DILocation(line: 241, column: 18, scope: !5121)
!5139 = !DILocation(line: 241, column: 22, scope: !5121)
!5140 = !DILocation(line: 241, column: 28, scope: !5121)
!5141 = !DILocation(line: 241, column: 7, scope: !5121)
!5142 = !DILocation(line: 241, column: 11, scope: !5121)
!5143 = !DILocation(line: 241, column: 16, scope: !5121)
!5144 = distinct !{!5144, !5118, !5145}
!5145 = !DILocation(line: 242, column: 5, scope: !5094)
!5146 = !DILocation(line: 245, column: 7, scope: !5147)
!5147 = distinct !DILexicalBlock(scope: !5094, file: !910, line: 245, column: 7)
!5148 = !DILocation(line: 245, column: 11, scope: !5147)
!5149 = !DILocation(line: 245, column: 17, scope: !5147)
!5150 = !DILocation(line: 245, column: 25, scope: !5147)
!5151 = !DILocation(line: 245, column: 35, scope: !5147)
!5152 = !DILocation(line: 245, column: 22, scope: !5147)
!5153 = !DILocation(line: 245, column: 7, scope: !5094)
!5154 = !DILocation(line: 246, column: 17, scope: !5147)
!5155 = !DILocation(line: 246, column: 21, scope: !5147)
!5156 = !DILocation(line: 246, column: 27, scope: !5147)
!5157 = !DILocation(line: 246, column: 32, scope: !5147)
!5158 = !DILocation(line: 246, column: 15, scope: !5147)
!5159 = !DILocation(line: 246, column: 5, scope: !5147)
!5160 = !DILocation(line: 249, column: 17, scope: !5094)
!5161 = !DILocation(line: 249, column: 27, scope: !5094)
!5162 = !DILocation(line: 249, column: 46, scope: !5094)
!5163 = !DILocation(line: 249, column: 3, scope: !5094)
!5164 = !DILocation(line: 249, column: 7, scope: !5094)
!5165 = !DILocation(line: 249, column: 15, scope: !5094)
!5166 = !DILocation(line: 250, column: 14, scope: !5094)
!5167 = !DILocation(line: 250, column: 18, scope: !5094)
!5168 = !DILocation(line: 250, column: 24, scope: !5094)
!5169 = !DILocation(line: 250, column: 29, scope: !5094)
!5170 = !DILocation(line: 250, column: 33, scope: !5094)
!5171 = !DILocation(line: 250, column: 3, scope: !5094)
!5172 = !DILocation(line: 250, column: 7, scope: !5094)
!5173 = !DILocation(line: 250, column: 12, scope: !5094)
!5174 = !DILocation(line: 251, column: 16, scope: !5094)
!5175 = !DILocation(line: 251, column: 26, scope: !5094)
!5176 = !DILocation(line: 251, column: 3, scope: !5094)
!5177 = !DILocation(line: 251, column: 7, scope: !5094)
!5178 = !DILocation(line: 251, column: 12, scope: !5094)
!5179 = !DILocation(line: 257, column: 17, scope: !5094)
!5180 = !DILocation(line: 257, column: 21, scope: !5094)
!5181 = !DILocation(line: 257, column: 16, scope: !5094)
!5182 = !DILocation(line: 257, column: 13, scope: !5094)
!5183 = !DILocation(line: 259, column: 13, scope: !5094)
!5184 = !DILocation(line: 259, column: 4, scope: !5094)
!5185 = !DILocation(line: 259, column: 11, scope: !5094)
!5186 = !DILocation(line: 260, column: 1, scope: !5094)
!5187 = distinct !DISubprogram(name: "bmp_iter_set", scope: !910, file: !910, line: 393, type: !5188, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5188 = !DISubroutineType(types: !5189)
!5189 = !{!1085, !5097, !5101}
!5190 = !DILocalVariable(name: "bi", arg: 1, scope: !5187, file: !910, line: 393, type: !5097)
!5191 = !DILocation(line: 393, column: 32, scope: !5187)
!5192 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5187, file: !910, line: 393, type: !5101)
!5193 = !DILocation(line: 393, column: 46, scope: !5187)
!5194 = !DILocation(line: 396, column: 7, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5187, file: !910, line: 396, column: 7)
!5196 = !DILocation(line: 396, column: 11, scope: !5195)
!5197 = !DILocation(line: 396, column: 7, scope: !5187)
!5198 = !DILocation(line: 397, column: 5, scope: !5195)
!5199 = !DILabel(scope: !5200, name: "next_bit", file: !910, line: 398)
!5200 = distinct !DILexicalBlock(scope: !5195, file: !910, line: 397, column: 5)
!5201 = !DILocation(line: 398, column: 5, scope: !5200)
!5202 = !DILocation(line: 399, column: 7, scope: !5200)
!5203 = !DILocation(line: 399, column: 16, scope: !5200)
!5204 = !DILocation(line: 399, column: 20, scope: !5200)
!5205 = !DILocation(line: 399, column: 25, scope: !5200)
!5206 = !DILocation(line: 399, column: 14, scope: !5200)
!5207 = !DILocation(line: 401, column: 4, scope: !5208)
!5208 = distinct !DILexicalBlock(scope: !5200, file: !910, line: 400, column: 2)
!5209 = !DILocation(line: 401, column: 8, scope: !5208)
!5210 = !DILocation(line: 401, column: 13, scope: !5208)
!5211 = !DILocation(line: 402, column: 5, scope: !5208)
!5212 = !DILocation(line: 402, column: 12, scope: !5208)
!5213 = distinct !{!5213, !5202, !5214}
!5214 = !DILocation(line: 403, column: 2, scope: !5200)
!5215 = !DILocation(line: 404, column: 7, scope: !5200)
!5216 = !DILocation(line: 410, column: 16, scope: !5187)
!5217 = !DILocation(line: 410, column: 15, scope: !5187)
!5218 = !DILocation(line: 410, column: 23, scope: !5187)
!5219 = !DILocation(line: 410, column: 42, scope: !5187)
!5220 = !DILocation(line: 411, column: 7, scope: !5187)
!5221 = !DILocation(line: 411, column: 26, scope: !5187)
!5222 = !DILocation(line: 410, column: 4, scope: !5187)
!5223 = !DILocation(line: 410, column: 11, scope: !5187)
!5224 = !DILocation(line: 412, column: 3, scope: !5187)
!5225 = !DILocation(line: 412, column: 7, scope: !5187)
!5226 = !DILocation(line: 412, column: 14, scope: !5187)
!5227 = !DILocation(line: 414, column: 3, scope: !5187)
!5228 = !DILocation(line: 417, column: 7, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5187, file: !910, line: 415, column: 5)
!5230 = !DILocation(line: 417, column: 14, scope: !5229)
!5231 = !DILocation(line: 417, column: 18, scope: !5229)
!5232 = !DILocation(line: 417, column: 26, scope: !5229)
!5233 = !DILocation(line: 419, column: 15, scope: !5234)
!5234 = distinct !DILexicalBlock(scope: !5229, file: !910, line: 418, column: 2)
!5235 = !DILocation(line: 419, column: 19, scope: !5234)
!5236 = !DILocation(line: 419, column: 25, scope: !5234)
!5237 = !DILocation(line: 419, column: 30, scope: !5234)
!5238 = !DILocation(line: 419, column: 34, scope: !5234)
!5239 = !DILocation(line: 419, column: 4, scope: !5234)
!5240 = !DILocation(line: 419, column: 8, scope: !5234)
!5241 = !DILocation(line: 419, column: 13, scope: !5234)
!5242 = !DILocation(line: 420, column: 8, scope: !5243)
!5243 = distinct !DILexicalBlock(scope: !5234, file: !910, line: 420, column: 8)
!5244 = !DILocation(line: 420, column: 12, scope: !5243)
!5245 = !DILocation(line: 420, column: 8, scope: !5234)
!5246 = !DILocation(line: 421, column: 6, scope: !5243)
!5247 = !DILocation(line: 422, column: 5, scope: !5234)
!5248 = !DILocation(line: 422, column: 12, scope: !5234)
!5249 = !DILocation(line: 423, column: 4, scope: !5234)
!5250 = !DILocation(line: 423, column: 8, scope: !5234)
!5251 = !DILocation(line: 423, column: 15, scope: !5234)
!5252 = distinct !{!5252, !5228, !5253}
!5253 = !DILocation(line: 424, column: 2, scope: !5229)
!5254 = !DILocation(line: 427, column: 18, scope: !5229)
!5255 = !DILocation(line: 427, column: 22, scope: !5229)
!5256 = !DILocation(line: 427, column: 28, scope: !5229)
!5257 = !DILocation(line: 427, column: 7, scope: !5229)
!5258 = !DILocation(line: 427, column: 11, scope: !5229)
!5259 = !DILocation(line: 427, column: 16, scope: !5229)
!5260 = !DILocation(line: 428, column: 12, scope: !5261)
!5261 = distinct !DILexicalBlock(scope: !5229, file: !910, line: 428, column: 11)
!5262 = !DILocation(line: 428, column: 16, scope: !5261)
!5263 = !DILocation(line: 428, column: 11, scope: !5229)
!5264 = !DILocation(line: 429, column: 2, scope: !5261)
!5265 = !DILocation(line: 430, column: 17, scope: !5229)
!5266 = !DILocation(line: 430, column: 21, scope: !5229)
!5267 = !DILocation(line: 430, column: 27, scope: !5229)
!5268 = !DILocation(line: 430, column: 32, scope: !5229)
!5269 = !DILocation(line: 430, column: 8, scope: !5229)
!5270 = !DILocation(line: 430, column: 15, scope: !5229)
!5271 = !DILocation(line: 431, column: 7, scope: !5229)
!5272 = !DILocation(line: 431, column: 11, scope: !5229)
!5273 = !DILocation(line: 431, column: 19, scope: !5229)
!5274 = distinct !{!5274, !5227, !5275}
!5275 = !DILocation(line: 432, column: 5, scope: !5187)
!5276 = !DILocation(line: 433, column: 1, scope: !5187)
!5277 = distinct !DISubprogram(name: "bmp_iter_next", scope: !910, file: !910, line: 382, type: !5278, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5278 = !DISubroutineType(types: !5279)
!5279 = !{null, !5097, !5101}
!5280 = !DILocalVariable(name: "bi", arg: 1, scope: !5277, file: !910, line: 382, type: !5097)
!5281 = !DILocation(line: 382, column: 33, scope: !5277)
!5282 = !DILocalVariable(name: "bit_no", arg: 2, scope: !5277, file: !910, line: 382, type: !5101)
!5283 = !DILocation(line: 382, column: 47, scope: !5277)
!5284 = !DILocation(line: 384, column: 3, scope: !5277)
!5285 = !DILocation(line: 384, column: 7, scope: !5277)
!5286 = !DILocation(line: 384, column: 12, scope: !5277)
!5287 = !DILocation(line: 385, column: 4, scope: !5277)
!5288 = !DILocation(line: 385, column: 11, scope: !5277)
!5289 = !DILocation(line: 386, column: 1, scope: !5277)
!5290 = distinct !DISubprogram(name: "insert_in_history_vect", scope: !3, file: !3, line: 1505, type: !5291, scopeLine: 1509, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5291 = !DISubroutineType(types: !5292)
!5292 = !{null, !5293, !7, !408, !2151, !2151, !2056}
!5293 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2180, size: 64)
!5294 = !DILocalVariable(name: "pvect", arg: 1, scope: !5290, file: !3, line: 1505, type: !5293)
!5295 = !DILocation(line: 1505, column: 56, scope: !5290)
!5296 = !DILocalVariable(name: "uid", arg: 2, scope: !5290, file: !3, line: 1506, type: !7)
!5297 = !DILocation(line: 1506, column: 34, scope: !5290)
!5298 = !DILocalVariable(name: "type", arg: 3, scope: !5290, file: !3, line: 1506, type: !408)
!5299 = !DILocation(line: 1506, column: 61, scope: !5290)
!5300 = !DILocalVariable(name: "old_expr_vinsn", arg: 4, scope: !5290, file: !3, line: 1507, type: !2151)
!5301 = !DILocation(line: 1507, column: 33, scope: !5290)
!5302 = !DILocalVariable(name: "new_expr_vinsn", arg: 5, scope: !5290, file: !3, line: 1507, type: !2151)
!5303 = !DILocation(line: 1507, column: 57, scope: !5290)
!5304 = !DILocalVariable(name: "spec_ds", arg: 6, scope: !5290, file: !3, line: 1508, type: !2056)
!5305 = !DILocation(line: 1508, column: 30, scope: !5290)
!5306 = !DILocalVariable(name: "vect", scope: !5290, file: !3, line: 1510, type: !2180)
!5307 = !DILocation(line: 1510, column: 32, scope: !5290)
!5308 = !DILocation(line: 1510, column: 40, scope: !5290)
!5309 = !DILocation(line: 1510, column: 39, scope: !5290)
!5310 = !DILocalVariable(name: "temp", scope: !5290, file: !3, line: 1511, type: !2192)
!5311 = !DILocation(line: 1511, column: 20, scope: !5290)
!5312 = !DILocalVariable(name: "res", scope: !5290, file: !3, line: 1512, type: !1085)
!5313 = !DILocation(line: 1512, column: 8, scope: !5290)
!5314 = !DILocalVariable(name: "ind", scope: !5290, file: !3, line: 1513, type: !874)
!5315 = !DILocation(line: 1513, column: 7, scope: !5290)
!5316 = !DILocation(line: 1515, column: 33, scope: !5290)
!5317 = !DILocation(line: 1515, column: 39, scope: !5290)
!5318 = !DILocation(line: 1515, column: 44, scope: !5290)
!5319 = !DILocation(line: 1515, column: 9, scope: !5290)
!5320 = !DILocation(line: 1515, column: 7, scope: !5290)
!5321 = !DILocation(line: 1517, column: 7, scope: !5322)
!5322 = distinct !DILexicalBlock(scope: !5290, file: !3, line: 1517, column: 7)
!5323 = !DILocation(line: 1517, column: 7, scope: !5290)
!5324 = !DILocalVariable(name: "phist", scope: !5325, file: !3, line: 1519, type: !5026)
!5325 = distinct !DILexicalBlock(scope: !5322, file: !3, line: 1518, column: 5)
!5326 = !DILocation(line: 1519, column: 25, scope: !5325)
!5327 = !DILocation(line: 1519, column: 33, scope: !5325)
!5328 = !DILocation(line: 1524, column: 11, scope: !5329)
!5329 = distinct !DILexicalBlock(scope: !5325, file: !3, line: 1524, column: 11)
!5330 = !DILocation(line: 1524, column: 18, scope: !5329)
!5331 = !DILocation(line: 1524, column: 29, scope: !5329)
!5332 = !DILocation(line: 1524, column: 26, scope: !5329)
!5333 = !DILocation(line: 1524, column: 11, scope: !5325)
!5334 = !DILocation(line: 1525, column: 40, scope: !5329)
!5335 = !DILocation(line: 1525, column: 47, scope: !5329)
!5336 = !DILocation(line: 1525, column: 56, scope: !5329)
!5337 = !DILocation(line: 1525, column: 26, scope: !5329)
!5338 = !DILocation(line: 1525, column: 9, scope: !5329)
!5339 = !DILocation(line: 1525, column: 16, scope: !5329)
!5340 = !DILocation(line: 1525, column: 24, scope: !5329)
!5341 = !DILocation(line: 1526, column: 7, scope: !5325)
!5342 = !DILocation(line: 1529, column: 14, scope: !5290)
!5343 = !DILocation(line: 1529, column: 8, scope: !5290)
!5344 = !DILocation(line: 1529, column: 12, scope: !5290)
!5345 = !DILocation(line: 1530, column: 25, scope: !5290)
!5346 = !DILocation(line: 1530, column: 8, scope: !5290)
!5347 = !DILocation(line: 1530, column: 23, scope: !5290)
!5348 = !DILocation(line: 1531, column: 25, scope: !5290)
!5349 = !DILocation(line: 1531, column: 8, scope: !5290)
!5350 = !DILocation(line: 1531, column: 23, scope: !5290)
!5351 = !DILocation(line: 1532, column: 18, scope: !5290)
!5352 = !DILocation(line: 1532, column: 8, scope: !5290)
!5353 = !DILocation(line: 1532, column: 16, scope: !5290)
!5354 = !DILocation(line: 1533, column: 15, scope: !5290)
!5355 = !DILocation(line: 1533, column: 8, scope: !5290)
!5356 = !DILocation(line: 1533, column: 13, scope: !5290)
!5357 = !DILocation(line: 1535, column: 17, scope: !5290)
!5358 = !DILocation(line: 1535, column: 3, scope: !5290)
!5359 = !DILocation(line: 1536, column: 17, scope: !5290)
!5360 = !DILocation(line: 1536, column: 3, scope: !5290)
!5361 = !DILocation(line: 1537, column: 3, scope: !5290)
!5362 = !DILocation(line: 1538, column: 12, scope: !5290)
!5363 = !DILocation(line: 1538, column: 4, scope: !5290)
!5364 = !DILocation(line: 1538, column: 10, scope: !5290)
!5365 = !DILocation(line: 1539, column: 1, scope: !5290)
!5366 = distinct !DISubprogram(name: "VEC_expr_history_def_base_index", scope: !409, file: !409, line: 101, type: !5367, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5367 = !DISubroutineType(types: !5368)
!5368 = !{!5026, !5369, !7}
!5369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2185, size: 64)
!5370 = !DILocalVariable(name: "vec_", arg: 1, scope: !5366, file: !409, line: 101, type: !5369)
!5371 = !DILocation(line: 101, column: 1, scope: !5366)
!5372 = !DILocalVariable(name: "ix_", arg: 2, scope: !5366, file: !409, line: 101, type: !7)
!5373 = !DILocation(line: 0, scope: !5366)
!5374 = distinct !DISubprogram(name: "VEC_expr_history_def_heap_safe_insert", scope: !409, file: !409, line: 102, type: !5375, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5375 = !DISubroutineType(types: !5376)
!5376 = !{!5026, !5293, !7, !5377}
!5377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5378, size: 64)
!5378 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2192)
!5379 = !DILocalVariable(name: "vec_", arg: 1, scope: !5374, file: !409, line: 102, type: !5293)
!5380 = !DILocation(line: 102, column: 1, scope: !5374)
!5381 = !DILocalVariable(name: "ix_", arg: 2, scope: !5374, file: !409, line: 102, type: !7)
!5382 = !DILocalVariable(name: "obj_", arg: 3, scope: !5374, file: !409, line: 102, type: !5377)
!5383 = distinct !DISubprogram(name: "vinsn_equal_p", scope: !3, file: !3, line: 1566, type: !5384, scopeLine: 1567, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5384 = !DISubroutineType(types: !5385)
!5385 = !{!1085, !2151, !2151}
!5386 = !DILocalVariable(name: "x", arg: 1, scope: !5383, file: !3, line: 1566, type: !2151)
!5387 = !DILocation(line: 1566, column: 24, scope: !5383)
!5388 = !DILocalVariable(name: "y", arg: 2, scope: !5383, file: !3, line: 1566, type: !2151)
!5389 = !DILocation(line: 1566, column: 35, scope: !5383)
!5390 = !DILocalVariable(name: "repcf", scope: !5383, file: !3, line: 1568, type: !5391)
!5391 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx_equal_p_callback_function", file: !414, line: 1878, baseType: !5392)
!5392 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5393, size: 64)
!5393 = !DISubroutineType(types: !5394)
!5394 = !{!874, !5395, !5395, !2055, !2055}
!5395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2710, size: 64)
!5396 = !DILocation(line: 1568, column: 33, scope: !5383)
!5397 = !DILocation(line: 1570, column: 7, scope: !5398)
!5398 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1570, column: 7)
!5399 = !DILocation(line: 1570, column: 12, scope: !5398)
!5400 = !DILocation(line: 1570, column: 9, scope: !5398)
!5401 = !DILocation(line: 1570, column: 7, scope: !5383)
!5402 = !DILocation(line: 1571, column: 5, scope: !5398)
!5403 = !DILocation(line: 1573, column: 7, scope: !5404)
!5404 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1573, column: 7)
!5405 = !DILocation(line: 1573, column: 25, scope: !5404)
!5406 = !DILocation(line: 1573, column: 22, scope: !5404)
!5407 = !DILocation(line: 1573, column: 7, scope: !5383)
!5408 = !DILocation(line: 1574, column: 5, scope: !5404)
!5409 = !DILocation(line: 1576, column: 7, scope: !5410)
!5410 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1576, column: 7)
!5411 = !DILocation(line: 1576, column: 25, scope: !5410)
!5412 = !DILocation(line: 1576, column: 22, scope: !5410)
!5413 = !DILocation(line: 1576, column: 7, scope: !5383)
!5414 = !DILocation(line: 1577, column: 5, scope: !5410)
!5415 = !DILocation(line: 1579, column: 25, scope: !5383)
!5416 = !DILocation(line: 1579, column: 11, scope: !5383)
!5417 = !DILocation(line: 1579, column: 9, scope: !5383)
!5418 = !DILocation(line: 1580, column: 7, scope: !5419)
!5419 = distinct !DILexicalBlock(scope: !5383, file: !3, line: 1580, column: 7)
!5420 = !DILocation(line: 1580, column: 7, scope: !5383)
!5421 = !DILocation(line: 1583, column: 7, scope: !5422)
!5422 = distinct !DILexicalBlock(scope: !5419, file: !3, line: 1581, column: 5)
!5423 = !DILocation(line: 1584, column: 7, scope: !5422)
!5424 = !DILocation(line: 1586, column: 30, scope: !5422)
!5425 = !DILocation(line: 1586, column: 45, scope: !5422)
!5426 = !DILocation(line: 1586, column: 60, scope: !5422)
!5427 = !DILocation(line: 1586, column: 14, scope: !5422)
!5428 = !DILocation(line: 1586, column: 7, scope: !5422)
!5429 = !DILocation(line: 1589, column: 26, scope: !5383)
!5430 = !DILocation(line: 1589, column: 45, scope: !5383)
!5431 = !DILocation(line: 1589, column: 64, scope: !5383)
!5432 = !DILocation(line: 1589, column: 10, scope: !5383)
!5433 = !DILocation(line: 1589, column: 3, scope: !5383)
!5434 = !DILocation(line: 1590, column: 1, scope: !5383)
!5435 = distinct !DISubprogram(name: "skip_unspecs_callback", scope: !3, file: !3, line: 1086, type: !5393, scopeLine: 1087, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5436 = !DILocalVariable(name: "xx", arg: 1, scope: !5435, file: !3, line: 1086, type: !5395)
!5437 = !DILocation(line: 1086, column: 35, scope: !5435)
!5438 = !DILocalVariable(name: "yy", arg: 2, scope: !5435, file: !3, line: 1086, type: !5395)
!5439 = !DILocation(line: 1086, column: 50, scope: !5435)
!5440 = !DILocalVariable(name: "nx", arg: 3, scope: !5435, file: !3, line: 1086, type: !2055)
!5441 = !DILocation(line: 1086, column: 59, scope: !5435)
!5442 = !DILocalVariable(name: "ny", arg: 4, scope: !5435, file: !3, line: 1086, type: !2055)
!5443 = !DILocation(line: 1086, column: 68, scope: !5435)
!5444 = !DILocalVariable(name: "x", scope: !5435, file: !3, line: 1088, type: !2710)
!5445 = !DILocation(line: 1088, column: 13, scope: !5435)
!5446 = !DILocation(line: 1088, column: 18, scope: !5435)
!5447 = !DILocation(line: 1088, column: 17, scope: !5435)
!5448 = !DILocalVariable(name: "y", scope: !5435, file: !3, line: 1089, type: !2710)
!5449 = !DILocation(line: 1089, column: 13, scope: !5435)
!5450 = !DILocation(line: 1089, column: 18, scope: !5435)
!5451 = !DILocation(line: 1089, column: 17, scope: !5435)
!5452 = !DILocation(line: 1091, column: 7, scope: !5453)
!5453 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 1091, column: 7)
!5454 = !DILocation(line: 1091, column: 20, scope: !5453)
!5455 = !DILocation(line: 1092, column: 7, scope: !5453)
!5456 = !DILocation(line: 1092, column: 25, scope: !5453)
!5457 = !DILocation(line: 1092, column: 36, scope: !5453)
!5458 = !DILocation(line: 1093, column: 11, scope: !5453)
!5459 = !DILocation(line: 1093, column: 28, scope: !5453)
!5460 = !DILocation(line: 1093, column: 40, scope: !5453)
!5461 = !DILocation(line: 1093, column: 14, scope: !5453)
!5462 = !DILocation(line: 1091, column: 7, scope: !5435)
!5463 = !DILocation(line: 1095, column: 13, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !5453, file: !3, line: 1094, column: 5)
!5465 = !DILocation(line: 1095, column: 8, scope: !5464)
!5466 = !DILocation(line: 1095, column: 11, scope: !5464)
!5467 = !DILocation(line: 1096, column: 13, scope: !5464)
!5468 = !DILocation(line: 1096, column: 8, scope: !5464)
!5469 = !DILocation(line: 1096, column: 11, scope: !5464)
!5470 = !DILocation(line: 1097, column: 7, scope: !5464)
!5471 = !DILocation(line: 1100, column: 7, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 1100, column: 7)
!5473 = !DILocation(line: 1100, column: 20, scope: !5472)
!5474 = !DILocation(line: 1101, column: 7, scope: !5472)
!5475 = !DILocation(line: 1101, column: 25, scope: !5472)
!5476 = !DILocation(line: 1101, column: 36, scope: !5472)
!5477 = !DILocation(line: 1102, column: 11, scope: !5472)
!5478 = !DILocation(line: 1102, column: 28, scope: !5472)
!5479 = !DILocation(line: 1102, column: 40, scope: !5472)
!5480 = !DILocation(line: 1102, column: 14, scope: !5472)
!5481 = !DILocation(line: 1100, column: 7, scope: !5435)
!5482 = !DILocation(line: 1104, column: 13, scope: !5483)
!5483 = distinct !DILexicalBlock(scope: !5472, file: !3, line: 1103, column: 5)
!5484 = !DILocation(line: 1104, column: 8, scope: !5483)
!5485 = !DILocation(line: 1104, column: 11, scope: !5483)
!5486 = !DILocation(line: 1105, column: 13, scope: !5483)
!5487 = !DILocation(line: 1105, column: 8, scope: !5483)
!5488 = !DILocation(line: 1105, column: 11, scope: !5483)
!5489 = !DILocation(line: 1106, column: 7, scope: !5483)
!5490 = !DILocation(line: 1109, column: 3, scope: !5435)
!5491 = !DILocation(line: 1110, column: 1, scope: !5435)
!5492 = distinct !DISubprogram(name: "copy_expr", scope: !3, file: !3, line: 1631, type: !5493, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5493 = !DISubroutineType(types: !5494)
!5494 = !{null, !2578, !2578}
!5495 = !DILocalVariable(name: "to", arg: 1, scope: !5492, file: !3, line: 1631, type: !2578)
!5496 = !DILocation(line: 1631, column: 19, scope: !5492)
!5497 = !DILocalVariable(name: "from", arg: 2, scope: !5492, file: !3, line: 1631, type: !2578)
!5498 = !DILocation(line: 1631, column: 30, scope: !5492)
!5499 = !DILocalVariable(name: "temp", scope: !5492, file: !3, line: 1633, type: !2180)
!5500 = !DILocation(line: 1633, column: 32, scope: !5492)
!5501 = !DILocation(line: 1635, column: 7, scope: !5502)
!5502 = distinct !DILexicalBlock(scope: !5492, file: !3, line: 1635, column: 7)
!5503 = !DILocation(line: 1635, column: 7, scope: !5492)
!5504 = !DILocalVariable(name: "i", scope: !5505, file: !3, line: 1637, type: !7)
!5505 = distinct !DILexicalBlock(scope: !5502, file: !3, line: 1636, column: 5)
!5506 = !DILocation(line: 1637, column: 16, scope: !5505)
!5507 = !DILocalVariable(name: "phist", scope: !5505, file: !3, line: 1638, type: !5026)
!5508 = !DILocation(line: 1638, column: 25, scope: !5505)
!5509 = !DILocation(line: 1640, column: 14, scope: !5505)
!5510 = !DILocation(line: 1640, column: 12, scope: !5505)
!5511 = !DILocation(line: 1641, column: 14, scope: !5512)
!5512 = distinct !DILexicalBlock(scope: !5505, file: !3, line: 1641, column: 7)
!5513 = !DILocation(line: 1641, column: 12, scope: !5512)
!5514 = !DILocation(line: 1642, column: 12, scope: !5515)
!5515 = distinct !DILexicalBlock(scope: !5512, file: !3, line: 1641, column: 7)
!5516 = !DILocation(line: 1641, column: 7, scope: !5512)
!5517 = !DILocation(line: 1645, column: 25, scope: !5518)
!5518 = distinct !DILexicalBlock(scope: !5515, file: !3, line: 1644, column: 9)
!5519 = !DILocation(line: 1645, column: 32, scope: !5518)
!5520 = !DILocation(line: 1645, column: 11, scope: !5518)
!5521 = !DILocation(line: 1646, column: 25, scope: !5518)
!5522 = !DILocation(line: 1646, column: 32, scope: !5518)
!5523 = !DILocation(line: 1646, column: 11, scope: !5518)
!5524 = !DILocation(line: 1647, column: 9, scope: !5518)
!5525 = !DILocation(line: 1643, column: 13, scope: !5515)
!5526 = !DILocation(line: 1641, column: 7, scope: !5515)
!5527 = distinct !{!5527, !5516, !5528}
!5528 = !DILocation(line: 1647, column: 9, scope: !5512)
!5529 = !DILocation(line: 1648, column: 5, scope: !5505)
!5530 = !DILocation(line: 1650, column: 14, scope: !5492)
!5531 = !DILocation(line: 1650, column: 18, scope: !5492)
!5532 = !DILocation(line: 1650, column: 37, scope: !5492)
!5533 = !DILocation(line: 1651, column: 14, scope: !5492)
!5534 = !DILocation(line: 1651, column: 38, scope: !5492)
!5535 = !DILocation(line: 1652, column: 7, scope: !5492)
!5536 = !DILocation(line: 1652, column: 32, scope: !5492)
!5537 = !DILocation(line: 1653, column: 7, scope: !5492)
!5538 = !DILocation(line: 1653, column: 33, scope: !5492)
!5539 = !DILocation(line: 1654, column: 7, scope: !5492)
!5540 = !DILocation(line: 1654, column: 37, scope: !5492)
!5541 = !DILocation(line: 1655, column: 14, scope: !5492)
!5542 = !DILocation(line: 1655, column: 44, scope: !5492)
!5543 = !DILocation(line: 1656, column: 14, scope: !5492)
!5544 = !DILocation(line: 1656, column: 39, scope: !5492)
!5545 = !DILocation(line: 1657, column: 14, scope: !5492)
!5546 = !DILocation(line: 1650, column: 3, scope: !5492)
!5547 = !DILocation(line: 1658, column: 1, scope: !5492)
!5548 = distinct !DISubprogram(name: "VEC_expr_history_def_heap_copy", scope: !409, file: !409, line: 102, type: !5549, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5549 = !DISubroutineType(types: !5550)
!5550 = !{!2180, !5369}
!5551 = !DILocalVariable(name: "vec_", arg: 1, scope: !5548, file: !409, line: 102, type: !5369)
!5552 = !DILocation(line: 102, column: 1, scope: !5548)
!5553 = !DILocalVariable(name: "len_", scope: !5548, file: !409, line: 102, type: !1329)
!5554 = !DILocalVariable(name: "new_vec_", scope: !5548, file: !409, line: 102, type: !2180)
!5555 = !DILocation(line: 102, column: 1, scope: !5556)
!5556 = distinct !DILexicalBlock(scope: !5548, file: !409, line: 102, column: 1)
!5557 = !DILocation(line: 102, column: 1, scope: !5558)
!5558 = distinct !DILexicalBlock(scope: !5556, file: !409, line: 102, column: 1)
!5559 = distinct !DISubprogram(name: "VEC_expr_history_def_base_iterate", scope: !409, file: !409, line: 101, type: !5560, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5560 = !DISubroutineType(types: !5561)
!5561 = !{!874, !5369, !7, !5562}
!5562 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5026, size: 64)
!5563 = !DILocalVariable(name: "vec_", arg: 1, scope: !5559, file: !409, line: 101, type: !5369)
!5564 = !DILocation(line: 101, column: 1, scope: !5559)
!5565 = !DILocalVariable(name: "ix_", arg: 2, scope: !5559, file: !409, line: 101, type: !7)
!5566 = !DILocalVariable(name: "ptr", arg: 3, scope: !5559, file: !409, line: 101, type: !5562)
!5567 = !DILocation(line: 101, column: 1, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5559, file: !409, line: 101, column: 1)
!5569 = !DILocation(line: 101, column: 1, scope: !5570)
!5570 = distinct !DILexicalBlock(scope: !5568, file: !409, line: 101, column: 1)
!5571 = !DILocation(line: 101, column: 1, scope: !5572)
!5572 = distinct !DILexicalBlock(scope: !5568, file: !409, line: 101, column: 1)
!5573 = distinct !DISubprogram(name: "init_expr", scope: !3, file: !3, line: 1597, type: !5574, scopeLine: 1603, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5574 = !DISubroutineType(types: !5575)
!5575 = !{null, !2578, !2151, !874, !874, !874, !874, !874, !2056, !2056, !874, !2180, !1085, !1085, !1085, !1085, !1085}
!5576 = !DILocalVariable(name: "expr", arg: 1, scope: !5573, file: !3, line: 1597, type: !2578)
!5577 = !DILocation(line: 1597, column: 19, scope: !5573)
!5578 = !DILocalVariable(name: "vi", arg: 2, scope: !5573, file: !3, line: 1597, type: !2151)
!5579 = !DILocation(line: 1597, column: 33, scope: !5573)
!5580 = !DILocalVariable(name: "spec", arg: 3, scope: !5573, file: !3, line: 1597, type: !874)
!5581 = !DILocation(line: 1597, column: 41, scope: !5573)
!5582 = !DILocalVariable(name: "use", arg: 4, scope: !5573, file: !3, line: 1597, type: !874)
!5583 = !DILocation(line: 1597, column: 51, scope: !5573)
!5584 = !DILocalVariable(name: "priority", arg: 5, scope: !5573, file: !3, line: 1597, type: !874)
!5585 = !DILocation(line: 1597, column: 60, scope: !5573)
!5586 = !DILocalVariable(name: "sched_times", arg: 6, scope: !5573, file: !3, line: 1598, type: !874)
!5587 = !DILocation(line: 1598, column: 9, scope: !5573)
!5588 = !DILocalVariable(name: "orig_bb_index", arg: 7, scope: !5573, file: !3, line: 1598, type: !874)
!5589 = !DILocation(line: 1598, column: 26, scope: !5573)
!5590 = !DILocalVariable(name: "spec_done_ds", arg: 8, scope: !5573, file: !3, line: 1598, type: !2056)
!5591 = !DILocation(line: 1598, column: 46, scope: !5573)
!5592 = !DILocalVariable(name: "spec_to_check_ds", arg: 9, scope: !5573, file: !3, line: 1599, type: !2056)
!5593 = !DILocation(line: 1599, column: 10, scope: !5573)
!5594 = !DILocalVariable(name: "orig_sched_cycle", arg: 10, scope: !5573, file: !3, line: 1599, type: !874)
!5595 = !DILocation(line: 1599, column: 32, scope: !5573)
!5596 = !DILocalVariable(name: "history", arg: 11, scope: !5573, file: !3, line: 1600, type: !2180)
!5597 = !DILocation(line: 1600, column: 34, scope: !5573)
!5598 = !DILocalVariable(name: "target_available", arg: 12, scope: !5573, file: !3, line: 1600, type: !1085)
!5599 = !DILocation(line: 1600, column: 48, scope: !5573)
!5600 = !DILocalVariable(name: "was_substituted", arg: 13, scope: !5573, file: !3, line: 1601, type: !1085)
!5601 = !DILocation(line: 1601, column: 17, scope: !5573)
!5602 = !DILocalVariable(name: "was_renamed", arg: 14, scope: !5573, file: !3, line: 1601, type: !1085)
!5603 = !DILocation(line: 1601, column: 39, scope: !5573)
!5604 = !DILocalVariable(name: "needs_spec_check_p", arg: 15, scope: !5573, file: !3, line: 1601, type: !1085)
!5605 = !DILocation(line: 1601, column: 57, scope: !5573)
!5606 = !DILocalVariable(name: "cant_move", arg: 16, scope: !5573, file: !3, line: 1602, type: !1085)
!5607 = !DILocation(line: 1602, column: 17, scope: !5573)
!5608 = !DILocation(line: 1604, column: 17, scope: !5573)
!5609 = !DILocation(line: 1604, column: 3, scope: !5573)
!5610 = !DILocation(line: 1606, column: 23, scope: !5573)
!5611 = !DILocation(line: 1606, column: 3, scope: !5573)
!5612 = !DILocation(line: 1606, column: 21, scope: !5573)
!5613 = !DILocation(line: 1607, column: 22, scope: !5573)
!5614 = !DILocation(line: 1607, column: 3, scope: !5573)
!5615 = !DILocation(line: 1607, column: 20, scope: !5573)
!5616 = !DILocation(line: 1608, column: 28, scope: !5573)
!5617 = !DILocation(line: 1608, column: 3, scope: !5573)
!5618 = !DILocation(line: 1608, column: 26, scope: !5573)
!5619 = !DILocation(line: 1609, column: 26, scope: !5573)
!5620 = !DILocation(line: 1609, column: 3, scope: !5573)
!5621 = !DILocation(line: 1609, column: 24, scope: !5573)
!5622 = !DILocation(line: 1610, column: 3, scope: !5573)
!5623 = !DILocation(line: 1610, column: 28, scope: !5573)
!5624 = !DILocation(line: 1611, column: 29, scope: !5573)
!5625 = !DILocation(line: 1611, column: 3, scope: !5573)
!5626 = !DILocation(line: 1611, column: 27, scope: !5573)
!5627 = !DILocation(line: 1612, column: 31, scope: !5573)
!5628 = !DILocation(line: 1612, column: 3, scope: !5573)
!5629 = !DILocation(line: 1612, column: 29, scope: !5573)
!5630 = !DILocation(line: 1613, column: 34, scope: !5573)
!5631 = !DILocation(line: 1613, column: 3, scope: !5573)
!5632 = !DILocation(line: 1613, column: 32, scope: !5573)
!5633 = !DILocation(line: 1614, column: 30, scope: !5573)
!5634 = !DILocation(line: 1614, column: 3, scope: !5573)
!5635 = !DILocation(line: 1614, column: 28, scope: !5573)
!5636 = !DILocation(line: 1615, column: 34, scope: !5573)
!5637 = !DILocation(line: 1615, column: 3, scope: !5573)
!5638 = !DILocation(line: 1615, column: 32, scope: !5573)
!5639 = !DILocation(line: 1617, column: 7, scope: !5640)
!5640 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1617, column: 7)
!5641 = !DILocation(line: 1617, column: 7, scope: !5573)
!5642 = !DILocation(line: 1618, column: 38, scope: !5640)
!5643 = !DILocation(line: 1618, column: 5, scope: !5640)
!5644 = !DILocation(line: 1618, column: 36, scope: !5640)
!5645 = !DILocation(line: 1620, column: 5, scope: !5640)
!5646 = !DILocation(line: 1620, column: 36, scope: !5640)
!5647 = !DILocation(line: 1622, column: 34, scope: !5573)
!5648 = !DILocation(line: 1622, column: 3, scope: !5573)
!5649 = !DILocation(line: 1622, column: 32, scope: !5573)
!5650 = !DILocation(line: 1623, column: 33, scope: !5573)
!5651 = !DILocation(line: 1623, column: 3, scope: !5573)
!5652 = !DILocation(line: 1623, column: 31, scope: !5573)
!5653 = !DILocation(line: 1624, column: 29, scope: !5573)
!5654 = !DILocation(line: 1624, column: 3, scope: !5573)
!5655 = !DILocation(line: 1624, column: 27, scope: !5573)
!5656 = !DILocation(line: 1625, column: 36, scope: !5573)
!5657 = !DILocation(line: 1625, column: 3, scope: !5573)
!5658 = !DILocation(line: 1625, column: 34, scope: !5573)
!5659 = !DILocation(line: 1626, column: 27, scope: !5573)
!5660 = !DILocation(line: 1626, column: 3, scope: !5573)
!5661 = !DILocation(line: 1626, column: 25, scope: !5573)
!5662 = !DILocation(line: 1627, column: 1, scope: !5573)
!5663 = distinct !DISubprogram(name: "copy_expr_onside", scope: !3, file: !3, line: 1663, type: !5493, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5664 = !DILocalVariable(name: "to", arg: 1, scope: !5663, file: !3, line: 1663, type: !2578)
!5665 = !DILocation(line: 1663, column: 26, scope: !5663)
!5666 = !DILocalVariable(name: "from", arg: 2, scope: !5663, file: !3, line: 1663, type: !2578)
!5667 = !DILocation(line: 1663, column: 37, scope: !5663)
!5668 = !DILocation(line: 1665, column: 14, scope: !5663)
!5669 = !DILocation(line: 1665, column: 18, scope: !5663)
!5670 = !DILocation(line: 1665, column: 37, scope: !5663)
!5671 = !DILocation(line: 1665, column: 55, scope: !5663)
!5672 = !DILocation(line: 1666, column: 7, scope: !5663)
!5673 = !DILocation(line: 1666, column: 29, scope: !5663)
!5674 = !DILocation(line: 1667, column: 7, scope: !5663)
!5675 = !DILocation(line: 1667, column: 33, scope: !5663)
!5676 = !DILocation(line: 1668, column: 7, scope: !5663)
!5677 = !DILocation(line: 1668, column: 37, scope: !5663)
!5678 = !DILocation(line: 1669, column: 7, scope: !5663)
!5679 = !DILocation(line: 1669, column: 32, scope: !5663)
!5680 = !DILocation(line: 1670, column: 14, scope: !5663)
!5681 = !DILocation(line: 1665, column: 3, scope: !5663)
!5682 = !DILocation(line: 1671, column: 1, scope: !5663)
!5683 = distinct !DISubprogram(name: "merge_expr_data", scope: !3, file: !3, line: 1793, type: !5684, scopeLine: 1794, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5684 = !DISubroutineType(types: !5685)
!5685 = !{null, !2578, !2578, !2104}
!5686 = !DILocalVariable(name: "to", arg: 1, scope: !5683, file: !3, line: 1793, type: !2578)
!5687 = !DILocation(line: 1793, column: 25, scope: !5683)
!5688 = !DILocalVariable(name: "from", arg: 2, scope: !5683, file: !3, line: 1793, type: !2578)
!5689 = !DILocation(line: 1793, column: 36, scope: !5683)
!5690 = !DILocalVariable(name: "split_point", arg: 3, scope: !5683, file: !3, line: 1793, type: !2104)
!5691 = !DILocation(line: 1793, column: 49, scope: !5683)
!5692 = !DILocalVariable(name: "i", scope: !5683, file: !3, line: 1795, type: !874)
!5693 = !DILocation(line: 1795, column: 7, scope: !5683)
!5694 = !DILocalVariable(name: "phist", scope: !5683, file: !3, line: 1796, type: !5026)
!5695 = !DILocation(line: 1796, column: 21, scope: !5683)
!5696 = !DILocation(line: 1800, column: 7, scope: !5697)
!5697 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1800, column: 7)
!5698 = !DILocation(line: 1800, column: 24, scope: !5697)
!5699 = !DILocation(line: 1800, column: 22, scope: !5697)
!5700 = !DILocation(line: 1800, column: 7, scope: !5683)
!5701 = !DILocation(line: 1801, column: 22, scope: !5697)
!5702 = !DILocation(line: 1801, column: 5, scope: !5697)
!5703 = !DILocation(line: 1801, column: 20, scope: !5697)
!5704 = !DILocation(line: 1803, column: 7, scope: !5705)
!5705 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1803, column: 7)
!5706 = !DILocation(line: 1803, column: 7, scope: !5683)
!5707 = !DILocation(line: 1804, column: 29, scope: !5705)
!5708 = !DILocation(line: 1804, column: 5, scope: !5705)
!5709 = !DILocation(line: 1804, column: 26, scope: !5705)
!5710 = !DILocation(line: 1806, column: 28, scope: !5705)
!5711 = !DILocation(line: 1806, column: 5, scope: !5705)
!5712 = !DILocation(line: 1806, column: 26, scope: !5705)
!5713 = !DILocation(line: 1809, column: 7, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1809, column: 7)
!5715 = !DILocation(line: 1809, column: 28, scope: !5714)
!5716 = !DILocation(line: 1809, column: 26, scope: !5714)
!5717 = !DILocation(line: 1809, column: 7, scope: !5683)
!5718 = !DILocation(line: 1810, column: 26, scope: !5714)
!5719 = !DILocation(line: 1810, column: 5, scope: !5714)
!5720 = !DILocation(line: 1810, column: 24, scope: !5714)
!5721 = !DILocation(line: 1812, column: 7, scope: !5722)
!5722 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1812, column: 7)
!5723 = !DILocation(line: 1812, column: 31, scope: !5722)
!5724 = !DILocation(line: 1812, column: 29, scope: !5722)
!5725 = !DILocation(line: 1812, column: 7, scope: !5683)
!5726 = !DILocation(line: 1813, column: 29, scope: !5722)
!5727 = !DILocation(line: 1813, column: 5, scope: !5722)
!5728 = !DILocation(line: 1813, column: 27, scope: !5722)
!5729 = !DILocation(line: 1815, column: 7, scope: !5730)
!5730 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1815, column: 7)
!5731 = !DILocation(line: 1815, column: 34, scope: !5730)
!5732 = !DILocation(line: 1815, column: 31, scope: !5730)
!5733 = !DILocation(line: 1815, column: 7, scope: !5683)
!5734 = !DILocation(line: 1816, column: 5, scope: !5730)
!5735 = !DILocation(line: 1816, column: 29, scope: !5730)
!5736 = !DILocation(line: 1818, column: 32, scope: !5683)
!5737 = !DILocation(line: 1818, column: 3, scope: !5683)
!5738 = !DILocation(line: 1818, column: 30, scope: !5683)
!5739 = !DILocation(line: 1822, column: 10, scope: !5740)
!5740 = distinct !DILexicalBlock(scope: !5683, file: !3, line: 1822, column: 3)
!5741 = !DILocation(line: 1822, column: 8, scope: !5740)
!5742 = !DILocation(line: 1823, column: 8, scope: !5743)
!5743 = distinct !DILexicalBlock(scope: !5740, file: !3, line: 1822, column: 3)
!5744 = !DILocation(line: 1822, column: 3, scope: !5740)
!5745 = !DILocation(line: 1826, column: 30, scope: !5743)
!5746 = !DILocation(line: 1827, column: 29, scope: !5743)
!5747 = !DILocation(line: 1827, column: 36, scope: !5743)
!5748 = !DILocation(line: 1827, column: 41, scope: !5743)
!5749 = !DILocation(line: 1827, column: 48, scope: !5743)
!5750 = !DILocation(line: 1828, column: 29, scope: !5743)
!5751 = !DILocation(line: 1828, column: 36, scope: !5743)
!5752 = !DILocation(line: 1828, column: 52, scope: !5743)
!5753 = !DILocation(line: 1828, column: 59, scope: !5743)
!5754 = !DILocation(line: 1829, column: 29, scope: !5743)
!5755 = !DILocation(line: 1829, column: 36, scope: !5743)
!5756 = !DILocation(line: 1826, column: 5, scope: !5743)
!5757 = !DILocation(line: 1825, column: 9, scope: !5743)
!5758 = !DILocation(line: 1822, column: 3, scope: !5743)
!5759 = distinct !{!5759, !5744, !5760}
!5760 = !DILocation(line: 1829, column: 43, scope: !5740)
!5761 = !DILocation(line: 1831, column: 32, scope: !5683)
!5762 = !DILocation(line: 1831, column: 3, scope: !5683)
!5763 = !DILocation(line: 1831, column: 29, scope: !5683)
!5764 = !DILocation(line: 1832, column: 28, scope: !5683)
!5765 = !DILocation(line: 1832, column: 3, scope: !5683)
!5766 = !DILocation(line: 1832, column: 25, scope: !5683)
!5767 = !DILocation(line: 1833, column: 26, scope: !5683)
!5768 = !DILocation(line: 1833, column: 3, scope: !5683)
!5769 = !DILocation(line: 1833, column: 23, scope: !5683)
!5770 = !DILocation(line: 1835, column: 31, scope: !5683)
!5771 = !DILocation(line: 1835, column: 35, scope: !5683)
!5772 = !DILocation(line: 1835, column: 41, scope: !5683)
!5773 = !DILocation(line: 1835, column: 3, scope: !5683)
!5774 = !DILocation(line: 1836, column: 28, scope: !5683)
!5775 = !DILocation(line: 1836, column: 32, scope: !5683)
!5776 = !DILocation(line: 1836, column: 38, scope: !5683)
!5777 = !DILocation(line: 1836, column: 3, scope: !5683)
!5778 = !DILocation(line: 1837, column: 1, scope: !5683)
!5779 = distinct !DISubprogram(name: "update_target_availability", scope: !3, file: !3, line: 1706, type: !5684, scopeLine: 1707, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5780 = !DILocalVariable(name: "to", arg: 1, scope: !5779, file: !3, line: 1706, type: !2578)
!5781 = !DILocation(line: 1706, column: 36, scope: !5779)
!5782 = !DILocalVariable(name: "from", arg: 2, scope: !5779, file: !3, line: 1706, type: !2578)
!5783 = !DILocation(line: 1706, column: 47, scope: !5779)
!5784 = !DILocalVariable(name: "split_point", arg: 3, scope: !5779, file: !3, line: 1706, type: !2104)
!5785 = !DILocation(line: 1706, column: 60, scope: !5779)
!5786 = !DILocation(line: 1708, column: 7, scope: !5787)
!5787 = distinct !DILexicalBlock(scope: !5779, file: !3, line: 1708, column: 7)
!5788 = !DILocation(line: 1708, column: 34, scope: !5787)
!5789 = !DILocation(line: 1709, column: 7, scope: !5787)
!5790 = !DILocation(line: 1709, column: 10, scope: !5787)
!5791 = !DILocation(line: 1709, column: 39, scope: !5787)
!5792 = !DILocation(line: 1708, column: 7, scope: !5779)
!5793 = !DILocation(line: 1710, column: 5, scope: !5787)
!5794 = !DILocation(line: 1710, column: 32, scope: !5787)
!5795 = !DILocation(line: 1716, column: 11, scope: !5796)
!5796 = distinct !DILexicalBlock(scope: !5797, file: !3, line: 1716, column: 11)
!5797 = distinct !DILexicalBlock(scope: !5787, file: !3, line: 1712, column: 5)
!5798 = !DILocation(line: 1716, column: 23, scope: !5796)
!5799 = !DILocation(line: 1716, column: 11, scope: !5797)
!5800 = !DILocalVariable(name: "toind", scope: !5801, file: !3, line: 1718, type: !874)
!5801 = distinct !DILexicalBlock(scope: !5796, file: !3, line: 1717, column: 9)
!5802 = !DILocation(line: 1718, column: 15, scope: !5801)
!5803 = !DILocalVariable(name: "fromind", scope: !5801, file: !3, line: 1718, type: !874)
!5804 = !DILocation(line: 1718, column: 22, scope: !5801)
!5805 = !DILocation(line: 1720, column: 19, scope: !5801)
!5806 = !DILocation(line: 1720, column: 17, scope: !5801)
!5807 = !DILocation(line: 1721, column: 21, scope: !5801)
!5808 = !DILocation(line: 1721, column: 19, scope: !5801)
!5809 = !DILocation(line: 1723, column: 15, scope: !5810)
!5810 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 1723, column: 15)
!5811 = !DILocation(line: 1723, column: 21, scope: !5810)
!5812 = !DILocation(line: 1723, column: 24, scope: !5810)
!5813 = !DILocation(line: 1723, column: 33, scope: !5810)
!5814 = !DILocation(line: 1723, column: 30, scope: !5810)
!5815 = !DILocation(line: 1723, column: 15, scope: !5801)
!5816 = !DILocation(line: 1728, column: 13, scope: !5810)
!5817 = !DILocation(line: 1728, column: 40, scope: !5810)
!5818 = !DILocation(line: 1729, column: 9, scope: !5801)
!5819 = !DILocation(line: 1731, column: 39, scope: !5796)
!5820 = !DILocation(line: 1731, column: 9, scope: !5796)
!5821 = !DILocation(line: 1731, column: 36, scope: !5796)
!5822 = !DILocation(line: 1733, column: 1, scope: !5779)
!5823 = distinct !DISubprogram(name: "update_speculative_bits", scope: !3, file: !3, line: 1739, type: !5684, scopeLine: 1740, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5824 = !DILocalVariable(name: "to", arg: 1, scope: !5823, file: !3, line: 1739, type: !2578)
!5825 = !DILocation(line: 1739, column: 33, scope: !5823)
!5826 = !DILocalVariable(name: "from", arg: 2, scope: !5823, file: !3, line: 1739, type: !2578)
!5827 = !DILocation(line: 1739, column: 44, scope: !5823)
!5828 = !DILocalVariable(name: "split_point", arg: 3, scope: !5823, file: !3, line: 1739, type: !2104)
!5829 = !DILocation(line: 1739, column: 57, scope: !5823)
!5830 = !DILocalVariable(name: "old_to_ds", scope: !5823, file: !3, line: 1741, type: !2056)
!5831 = !DILocation(line: 1741, column: 8, scope: !5823)
!5832 = !DILocalVariable(name: "old_from_ds", scope: !5823, file: !3, line: 1741, type: !2056)
!5833 = !DILocation(line: 1741, column: 19, scope: !5823)
!5834 = !DILocation(line: 1743, column: 15, scope: !5823)
!5835 = !DILocation(line: 1743, column: 13, scope: !5823)
!5836 = !DILocation(line: 1744, column: 17, scope: !5823)
!5837 = !DILocation(line: 1744, column: 15, scope: !5823)
!5838 = !DILocation(line: 1746, column: 42, scope: !5823)
!5839 = !DILocation(line: 1746, column: 53, scope: !5823)
!5840 = !DILocation(line: 1746, column: 28, scope: !5823)
!5841 = !DILocation(line: 1746, column: 3, scope: !5823)
!5842 = !DILocation(line: 1746, column: 26, scope: !5823)
!5843 = !DILocation(line: 1747, column: 33, scope: !5823)
!5844 = !DILocation(line: 1747, column: 3, scope: !5823)
!5845 = !DILocation(line: 1747, column: 30, scope: !5823)
!5846 = !DILocation(line: 1748, column: 35, scope: !5823)
!5847 = !DILocation(line: 1748, column: 3, scope: !5823)
!5848 = !DILocation(line: 1748, column: 32, scope: !5823)
!5849 = !DILocation(line: 1754, column: 8, scope: !5850)
!5850 = distinct !DILexicalBlock(scope: !5823, file: !3, line: 1754, column: 7)
!5851 = !DILocation(line: 1754, column: 18, scope: !5850)
!5852 = !DILocation(line: 1754, column: 33, scope: !5850)
!5853 = !DILocation(line: 1754, column: 37, scope: !5850)
!5854 = !DILocation(line: 1754, column: 49, scope: !5850)
!5855 = !DILocation(line: 1754, column: 7, scope: !5823)
!5856 = !DILocation(line: 1756, column: 45, scope: !5857)
!5857 = distinct !DILexicalBlock(scope: !5850, file: !3, line: 1755, column: 5)
!5858 = !DILocation(line: 1756, column: 19, scope: !5857)
!5859 = !DILocation(line: 1756, column: 17, scope: !5857)
!5860 = !DILocation(line: 1757, column: 47, scope: !5857)
!5861 = !DILocation(line: 1757, column: 21, scope: !5857)
!5862 = !DILocation(line: 1757, column: 19, scope: !5857)
!5863 = !DILocation(line: 1759, column: 11, scope: !5864)
!5864 = distinct !DILexicalBlock(scope: !5857, file: !3, line: 1759, column: 11)
!5865 = !DILocation(line: 1759, column: 24, scope: !5864)
!5866 = !DILocation(line: 1759, column: 21, scope: !5864)
!5867 = !DILocation(line: 1759, column: 11, scope: !5857)
!5868 = !DILocalVariable(name: "record_ds", scope: !5869, file: !3, line: 1761, type: !2056)
!5869 = distinct !DILexicalBlock(scope: !5864, file: !3, line: 1760, column: 9)
!5870 = !DILocation(line: 1761, column: 16, scope: !5869)
!5871 = !DILocation(line: 1765, column: 16, scope: !5872)
!5872 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 1765, column: 15)
!5873 = !DILocation(line: 1765, column: 26, scope: !5872)
!5874 = !DILocation(line: 1765, column: 41, scope: !5872)
!5875 = !DILocation(line: 1765, column: 45, scope: !5872)
!5876 = !DILocation(line: 1765, column: 57, scope: !5872)
!5877 = !DILocation(line: 1765, column: 15, scope: !5869)
!5878 = !DILocalVariable(name: "res", scope: !5879, file: !3, line: 1767, type: !874)
!5879 = distinct !DILexicalBlock(scope: !5872, file: !3, line: 1766, column: 13)
!5880 = !DILocation(line: 1767, column: 19, scope: !5879)
!5881 = !DILocation(line: 1769, column: 37, scope: !5879)
!5882 = !DILocation(line: 1769, column: 41, scope: !5879)
!5883 = !DILocation(line: 1769, column: 21, scope: !5879)
!5884 = !DILocation(line: 1769, column: 19, scope: !5879)
!5885 = !DILocation(line: 1770, column: 15, scope: !5879)
!5886 = !DILocation(line: 1771, column: 13, scope: !5879)
!5887 = !DILocation(line: 1773, column: 15, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5869, file: !3, line: 1773, column: 15)
!5889 = !DILocation(line: 1773, column: 27, scope: !5888)
!5890 = !DILocation(line: 1773, column: 15, scope: !5869)
!5891 = !DILocation(line: 1776, column: 27, scope: !5892)
!5892 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 1774, column: 13)
!5893 = !DILocation(line: 1776, column: 50, scope: !5892)
!5894 = !DILocation(line: 1776, column: 25, scope: !5892)
!5895 = !DILocation(line: 1777, column: 30, scope: !5892)
!5896 = !DILocation(line: 1777, column: 40, scope: !5892)
!5897 = !DILocation(line: 1777, column: 28, scope: !5892)
!5898 = !DILocation(line: 1777, column: 25, scope: !5892)
!5899 = !DILocation(line: 1778, column: 30, scope: !5892)
!5900 = !DILocation(line: 1778, column: 42, scope: !5892)
!5901 = !DILocation(line: 1778, column: 28, scope: !5892)
!5902 = !DILocation(line: 1778, column: 25, scope: !5892)
!5903 = !DILocation(line: 1780, column: 40, scope: !5892)
!5904 = !DILocation(line: 1781, column: 39, scope: !5892)
!5905 = !DILocation(line: 1782, column: 39, scope: !5892)
!5906 = !DILocation(line: 1782, column: 58, scope: !5892)
!5907 = !DILocation(line: 1783, column: 39, scope: !5892)
!5908 = !DILocation(line: 1780, column: 15, scope: !5892)
!5909 = !DILocation(line: 1784, column: 13, scope: !5892)
!5910 = !DILocation(line: 1785, column: 9, scope: !5869)
!5911 = !DILocation(line: 1786, column: 5, scope: !5857)
!5912 = !DILocation(line: 1787, column: 1, scope: !5823)
!5913 = distinct !DISubprogram(name: "merge_expr", scope: !3, file: !3, line: 1843, type: !5684, scopeLine: 1844, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5914 = !DILocalVariable(name: "to", arg: 1, scope: !5913, file: !3, line: 1843, type: !2578)
!5915 = !DILocation(line: 1843, column: 20, scope: !5913)
!5916 = !DILocalVariable(name: "from", arg: 2, scope: !5913, file: !3, line: 1843, type: !2578)
!5917 = !DILocation(line: 1843, column: 31, scope: !5913)
!5918 = !DILocalVariable(name: "split_point", arg: 3, scope: !5913, file: !3, line: 1843, type: !2104)
!5919 = !DILocation(line: 1843, column: 44, scope: !5913)
!5920 = !DILocalVariable(name: "to_vi", scope: !5913, file: !3, line: 1845, type: !2151)
!5921 = !DILocation(line: 1845, column: 11, scope: !5913)
!5922 = !DILocation(line: 1845, column: 19, scope: !5913)
!5923 = !DILocalVariable(name: "from_vi", scope: !5913, file: !3, line: 1846, type: !2151)
!5924 = !DILocation(line: 1846, column: 11, scope: !5913)
!5925 = !DILocation(line: 1846, column: 21, scope: !5913)
!5926 = !DILocation(line: 1848, column: 3, scope: !5913)
!5927 = !DILocation(line: 1853, column: 7, scope: !5928)
!5928 = distinct !DILexicalBlock(scope: !5913, file: !3, line: 1853, column: 7)
!5929 = !DILocation(line: 1853, column: 30, scope: !5928)
!5930 = !DILocation(line: 1854, column: 7, scope: !5928)
!5931 = !DILocation(line: 1854, column: 10, scope: !5928)
!5932 = !DILocation(line: 1854, column: 35, scope: !5928)
!5933 = !DILocation(line: 1853, column: 7, scope: !5913)
!5934 = !DILocation(line: 1855, column: 27, scope: !5928)
!5935 = !DILocation(line: 1855, column: 31, scope: !5928)
!5936 = !DILocation(line: 1855, column: 5, scope: !5928)
!5937 = !DILocation(line: 1857, column: 20, scope: !5913)
!5938 = !DILocation(line: 1857, column: 24, scope: !5913)
!5939 = !DILocation(line: 1857, column: 30, scope: !5913)
!5940 = !DILocation(line: 1857, column: 3, scope: !5913)
!5941 = !DILocation(line: 1858, column: 3, scope: !5913)
!5942 = !DILocation(line: 1859, column: 1, scope: !5913)
!5943 = distinct !DISubprogram(name: "change_vinsn_in_expr", scope: !3, file: !3, line: 5572, type: !5944, scopeLine: 5573, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5944 = !DISubroutineType(types: !5945)
!5945 = !{null, !2578, !2151}
!5946 = !DILocalVariable(name: "expr", arg: 1, scope: !5943, file: !3, line: 5572, type: !2578)
!5947 = !DILocation(line: 5572, column: 30, scope: !5943)
!5948 = !DILocalVariable(name: "new_vinsn", arg: 2, scope: !5943, file: !3, line: 5572, type: !2151)
!5949 = !DILocation(line: 5572, column: 44, scope: !5943)
!5950 = !DILocation(line: 5574, column: 17, scope: !5943)
!5951 = !DILocation(line: 5574, column: 3, scope: !5943)
!5952 = !DILocation(line: 5576, column: 23, scope: !5943)
!5953 = !DILocation(line: 5576, column: 3, scope: !5943)
!5954 = !DILocation(line: 5576, column: 21, scope: !5943)
!5955 = !DILocation(line: 5577, column: 17, scope: !5943)
!5956 = !DILocation(line: 5577, column: 3, scope: !5943)
!5957 = !DILocation(line: 5578, column: 1, scope: !5943)
!5958 = distinct !DISubprogram(name: "clear_expr", scope: !3, file: !3, line: 1863, type: !5959, scopeLine: 1864, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5959 = !DISubroutineType(types: !5960)
!5960 = !{null, !2578}
!5961 = !DILocalVariable(name: "expr", arg: 1, scope: !5958, file: !3, line: 1863, type: !2578)
!5962 = !DILocation(line: 1863, column: 20, scope: !5958)
!5963 = !DILocation(line: 1866, column: 17, scope: !5958)
!5964 = !DILocation(line: 1866, column: 3, scope: !5958)
!5965 = !DILocation(line: 1867, column: 3, scope: !5958)
!5966 = !DILocation(line: 1867, column: 21, scope: !5958)
!5967 = !DILocation(line: 1869, column: 23, scope: !5958)
!5968 = !DILocation(line: 1869, column: 3, scope: !5958)
!5969 = !DILocation(line: 1870, column: 1, scope: !5958)
!5970 = distinct !DISubprogram(name: "free_history_vect", scope: !3, file: !3, line: 1543, type: !5971, scopeLine: 1544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!5971 = !DISubroutineType(types: !5972)
!5972 = !{null, !5293}
!5973 = !DILocalVariable(name: "pvect", arg: 1, scope: !5970, file: !3, line: 1543, type: !5293)
!5974 = !DILocation(line: 1543, column: 51, scope: !5970)
!5975 = !DILocalVariable(name: "i", scope: !5970, file: !3, line: 1545, type: !7)
!5976 = !DILocation(line: 1545, column: 12, scope: !5970)
!5977 = !DILocalVariable(name: "phist", scope: !5970, file: !3, line: 1546, type: !5026)
!5978 = !DILocation(line: 1546, column: 21, scope: !5970)
!5979 = !DILocation(line: 1548, column: 10, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1548, column: 7)
!5981 = !DILocation(line: 1548, column: 9, scope: !5980)
!5982 = !DILocation(line: 1548, column: 7, scope: !5970)
!5983 = !DILocation(line: 1549, column: 5, scope: !5980)
!5984 = !DILocation(line: 1551, column: 10, scope: !5985)
!5985 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1551, column: 3)
!5986 = !DILocation(line: 1551, column: 8, scope: !5985)
!5987 = !DILocation(line: 1552, column: 8, scope: !5988)
!5988 = distinct !DILexicalBlock(scope: !5985, file: !3, line: 1551, column: 3)
!5989 = !DILocation(line: 1551, column: 3, scope: !5985)
!5990 = !DILocation(line: 1555, column: 21, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5988, file: !3, line: 1554, column: 5)
!5992 = !DILocation(line: 1555, column: 28, scope: !5991)
!5993 = !DILocation(line: 1555, column: 7, scope: !5991)
!5994 = !DILocation(line: 1556, column: 21, scope: !5991)
!5995 = !DILocation(line: 1556, column: 28, scope: !5991)
!5996 = !DILocation(line: 1556, column: 7, scope: !5991)
!5997 = !DILocation(line: 1557, column: 5, scope: !5991)
!5998 = !DILocation(line: 1553, column: 9, scope: !5988)
!5999 = !DILocation(line: 1551, column: 3, scope: !5988)
!6000 = distinct !{!6000, !5989, !6001}
!6001 = !DILocation(line: 1557, column: 5, scope: !5985)
!6002 = !DILocation(line: 1559, column: 3, scope: !5970)
!6003 = !DILocation(line: 1560, column: 4, scope: !5970)
!6004 = !DILocation(line: 1560, column: 10, scope: !5970)
!6005 = !DILocation(line: 1561, column: 1, scope: !5970)
!6006 = distinct !DISubprogram(name: "speculate_expr", scope: !3, file: !3, line: 1934, type: !6007, scopeLine: 1935, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6007 = !DISubroutineType(types: !6008)
!6008 = !{!874, !2578, !2056}
!6009 = !DILocalVariable(name: "expr", arg: 1, scope: !6006, file: !3, line: 1934, type: !2578)
!6010 = !DILocation(line: 1934, column: 24, scope: !6006)
!6011 = !DILocalVariable(name: "ds", arg: 2, scope: !6006, file: !3, line: 1934, type: !2056)
!6012 = !DILocation(line: 1934, column: 35, scope: !6006)
!6013 = !DILocalVariable(name: "res", scope: !6006, file: !3, line: 1936, type: !874)
!6014 = !DILocation(line: 1936, column: 7, scope: !6006)
!6015 = !DILocalVariable(name: "orig_insn_rtx", scope: !6006, file: !3, line: 1937, type: !850)
!6016 = !DILocation(line: 1937, column: 7, scope: !6006)
!6017 = !DILocalVariable(name: "spec_pat", scope: !6006, file: !3, line: 1938, type: !850)
!6018 = !DILocation(line: 1938, column: 7, scope: !6006)
!6019 = !DILocalVariable(name: "target_ds", scope: !6006, file: !3, line: 1939, type: !2056)
!6020 = !DILocation(line: 1939, column: 8, scope: !6006)
!6021 = !DILocalVariable(name: "current_ds", scope: !6006, file: !3, line: 1939, type: !2056)
!6022 = !DILocation(line: 1939, column: 19, scope: !6006)
!6023 = !DILocation(line: 1942, column: 16, scope: !6006)
!6024 = !DILocation(line: 1942, column: 19, scope: !6006)
!6025 = !DILocation(line: 1942, column: 13, scope: !6006)
!6026 = !DILocation(line: 1943, column: 16, scope: !6006)
!6027 = !DILocation(line: 1943, column: 14, scope: !6006)
!6028 = !DILocation(line: 1944, column: 23, scope: !6006)
!6029 = !DILocation(line: 1944, column: 35, scope: !6006)
!6030 = !DILocation(line: 1944, column: 8, scope: !6006)
!6031 = !DILocation(line: 1944, column: 6, scope: !6006)
!6032 = !DILocation(line: 1946, column: 19, scope: !6006)
!6033 = !DILocation(line: 1946, column: 17, scope: !6006)
!6034 = !DILocation(line: 1948, column: 31, scope: !6006)
!6035 = !DILocation(line: 1948, column: 46, scope: !6006)
!6036 = !DILocation(line: 1948, column: 9, scope: !6006)
!6037 = !DILocation(line: 1948, column: 7, scope: !6006)
!6038 = !DILocation(line: 1950, column: 11, scope: !6006)
!6039 = !DILocation(line: 1950, column: 3, scope: !6006)
!6040 = !DILocation(line: 1953, column: 34, scope: !6041)
!6041 = distinct !DILexicalBlock(scope: !6006, file: !3, line: 1951, column: 5)
!6042 = !DILocation(line: 1953, column: 7, scope: !6041)
!6043 = !DILocation(line: 1953, column: 32, scope: !6041)
!6044 = !DILocation(line: 1954, column: 14, scope: !6041)
!6045 = !DILocation(line: 1954, column: 28, scope: !6041)
!6046 = !DILocation(line: 1954, column: 25, scope: !6041)
!6047 = !DILocation(line: 1954, column: 7, scope: !6041)
!6048 = !DILocalVariable(name: "spec_insn_rtx", scope: !6049, file: !3, line: 1958, type: !850)
!6049 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 1957, column: 7)
!6050 = !DILocation(line: 1958, column: 6, scope: !6049)
!6051 = !DILocation(line: 1958, column: 52, scope: !6049)
!6052 = !DILocation(line: 1958, column: 22, scope: !6049)
!6053 = !DILocalVariable(name: "spec_vinsn", scope: !6049, file: !3, line: 1959, type: !2151)
!6054 = !DILocation(line: 1959, column: 10, scope: !6049)
!6055 = !DILocation(line: 1959, column: 51, scope: !6049)
!6056 = !DILocation(line: 1959, column: 23, scope: !6049)
!6057 = !DILocation(line: 1961, column: 24, scope: !6049)
!6058 = !DILocation(line: 1961, column: 30, scope: !6049)
!6059 = !DILocation(line: 1961, column: 2, scope: !6049)
!6060 = !DILocation(line: 1962, column: 29, scope: !6049)
!6061 = !DILocation(line: 1962, column: 2, scope: !6049)
!6062 = !DILocation(line: 1962, column: 27, scope: !6049)
!6063 = !DILocation(line: 1963, column: 9, scope: !6049)
!6064 = !DILocation(line: 1963, column: 40, scope: !6049)
!6065 = !DILocation(line: 1967, column: 27, scope: !6066)
!6066 = distinct !DILexicalBlock(scope: !6049, file: !3, line: 1967, column: 13)
!6067 = !DILocation(line: 1968, column: 44, scope: !6066)
!6068 = !DILocation(line: 1968, column: 27, scope: !6066)
!6069 = !DILocation(line: 1967, column: 13, scope: !6066)
!6070 = !DILocation(line: 1967, column: 13, scope: !6049)
!6071 = !DILocation(line: 1970, column: 13, scope: !6072)
!6072 = distinct !DILexicalBlock(scope: !6066, file: !3, line: 1969, column: 11)
!6073 = !DILocation(line: 1970, column: 42, scope: !6072)
!6074 = !DILocation(line: 1971, column: 13, scope: !6072)
!6075 = !DILocation(line: 1974, column: 2, scope: !6049)
!6076 = !DILocation(line: 1978, column: 7, scope: !6041)
!6077 = !DILocation(line: 1981, column: 7, scope: !6041)
!6078 = !DILocation(line: 1982, column: 7, scope: !6041)
!6079 = !DILocation(line: 1984, column: 1, scope: !6006)
!6080 = distinct !DISubprogram(name: "create_insn_rtx_from_pattern", scope: !3, file: !3, line: 5512, type: !6081, scopeLine: 5513, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6081 = !DISubroutineType(types: !6082)
!6082 = !{!850, !850, !850}
!6083 = !DILocalVariable(name: "pattern", arg: 1, scope: !6080, file: !3, line: 5512, type: !850)
!6084 = !DILocation(line: 5512, column: 35, scope: !6080)
!6085 = !DILocalVariable(name: "label", arg: 2, scope: !6080, file: !3, line: 5512, type: !850)
!6086 = !DILocation(line: 5512, column: 48, scope: !6080)
!6087 = !DILocalVariable(name: "insn_rtx", scope: !6080, file: !3, line: 5514, type: !850)
!6088 = !DILocation(line: 5514, column: 7, scope: !6080)
!6089 = !DILocation(line: 5516, column: 3, scope: !6080)
!6090 = !DILocation(line: 5518, column: 3, scope: !6080)
!6091 = !DILocation(line: 5520, column: 7, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6080, file: !3, line: 5520, column: 7)
!6093 = !DILocation(line: 5520, column: 13, scope: !6092)
!6094 = !DILocation(line: 5520, column: 7, scope: !6080)
!6095 = !DILocation(line: 5521, column: 27, scope: !6092)
!6096 = !DILocation(line: 5521, column: 16, scope: !6092)
!6097 = !DILocation(line: 5521, column: 14, scope: !6092)
!6098 = !DILocation(line: 5521, column: 5, scope: !6092)
!6099 = !DILocation(line: 5522, column: 12, scope: !6100)
!6100 = distinct !DILexicalBlock(scope: !6092, file: !3, line: 5522, column: 12)
!6101 = !DILocation(line: 5522, column: 12, scope: !6092)
!6102 = !DILocation(line: 5523, column: 33, scope: !6100)
!6103 = !DILocation(line: 5523, column: 16, scope: !6100)
!6104 = !DILocation(line: 5523, column: 14, scope: !6100)
!6105 = !DILocation(line: 5523, column: 5, scope: !6100)
!6106 = !DILocation(line: 5526, column: 34, scope: !6107)
!6107 = distinct !DILexicalBlock(scope: !6100, file: !3, line: 5525, column: 5)
!6108 = !DILocation(line: 5526, column: 18, scope: !6107)
!6109 = !DILocation(line: 5526, column: 16, scope: !6107)
!6110 = !DILocation(line: 5527, column: 31, scope: !6107)
!6111 = !DILocation(line: 5527, column: 7, scope: !6107)
!6112 = !DILocation(line: 5527, column: 29, scope: !6107)
!6113 = !DILocation(line: 5528, column: 9, scope: !6107)
!6114 = !DILocation(line: 5528, column: 7, scope: !6107)
!6115 = !DILocation(line: 5531, column: 3, scope: !6080)
!6116 = !DILocation(line: 5533, column: 3, scope: !6080)
!6117 = !DILocation(line: 5534, column: 3, scope: !6080)
!6118 = !DILocation(line: 5535, column: 3, scope: !6080)
!6119 = !DILocation(line: 5538, column: 19, scope: !6080)
!6120 = !DILocation(line: 5538, column: 3, scope: !6080)
!6121 = !DILocation(line: 5539, column: 10, scope: !6080)
!6122 = !DILocation(line: 5539, column: 3, scope: !6080)
!6123 = distinct !DISubprogram(name: "expr_dest_regno", scope: !3, file: !3, line: 2000, type: !6124, scopeLine: 2001, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6124 = !DISubroutineType(types: !6125)
!6125 = !{!7, !2578}
!6126 = !DILocalVariable(name: "expr", arg: 1, scope: !6123, file: !3, line: 2000, type: !2578)
!6127 = !DILocation(line: 2000, column: 25, scope: !6123)
!6128 = !DILocalVariable(name: "dest", scope: !6123, file: !3, line: 2002, type: !850)
!6129 = !DILocation(line: 2002, column: 7, scope: !6123)
!6130 = !DILocation(line: 2002, column: 29, scope: !6123)
!6131 = !DILocation(line: 2002, column: 14, scope: !6123)
!6132 = !DILocation(line: 2004, column: 3, scope: !6123)
!6133 = !DILocation(line: 2005, column: 10, scope: !6123)
!6134 = !DILocation(line: 2005, column: 3, scope: !6123)
!6135 = distinct !DISubprogram(name: "expr_dest_reg", scope: !3, file: !3, line: 1988, type: !6136, scopeLine: 1989, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6136 = !DISubroutineType(types: !6137)
!6137 = !{!850, !2578}
!6138 = !DILocalVariable(name: "expr", arg: 1, scope: !6135, file: !3, line: 1988, type: !2578)
!6139 = !DILocation(line: 1988, column: 23, scope: !6135)
!6140 = !DILocalVariable(name: "dest", scope: !6135, file: !3, line: 1990, type: !850)
!6141 = !DILocation(line: 1990, column: 7, scope: !6135)
!6142 = !DILocation(line: 1990, column: 14, scope: !6135)
!6143 = !DILocation(line: 1992, column: 7, scope: !6144)
!6144 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1992, column: 7)
!6145 = !DILocation(line: 1992, column: 12, scope: !6144)
!6146 = !DILocation(line: 1992, column: 24, scope: !6144)
!6147 = !DILocation(line: 1992, column: 27, scope: !6144)
!6148 = !DILocation(line: 1992, column: 7, scope: !6135)
!6149 = !DILocation(line: 1993, column: 12, scope: !6144)
!6150 = !DILocation(line: 1993, column: 5, scope: !6144)
!6151 = !DILocation(line: 1995, column: 3, scope: !6135)
!6152 = !DILocation(line: 1996, column: 1, scope: !6135)
!6153 = distinct !DISubprogram(name: "rhs_regno", scope: !414, file: !414, line: 1051, type: !6154, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6154 = !DISubroutineType(types: !6155)
!6155 = !{!7, !2710}
!6156 = !DILocalVariable(name: "x", arg: 1, scope: !6153, file: !414, line: 1051, type: !2710)
!6157 = !DILocation(line: 1051, column: 22, scope: !6153)
!6158 = !DILocation(line: 1053, column: 10, scope: !6153)
!6159 = !DILocation(line: 1053, column: 3, scope: !6153)
!6160 = distinct !DISubprogram(name: "mark_unavailable_targets", scope: !3, file: !3, line: 2011, type: !6161, scopeLine: 2012, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6161 = !DISubroutineType(types: !6162)
!6162 = !{null, !2109, !2109, !2053}
!6163 = !DILocalVariable(name: "join_set", arg: 1, scope: !6160, file: !3, line: 2011, type: !2109)
!6164 = !DILocation(line: 2011, column: 36, scope: !6160)
!6165 = !DILocalVariable(name: "av_set", arg: 2, scope: !6160, file: !3, line: 2011, type: !2109)
!6166 = !DILocation(line: 2011, column: 55, scope: !6160)
!6167 = !DILocalVariable(name: "lv_set", arg: 3, scope: !6160, file: !3, line: 2011, type: !2053)
!6168 = !DILocation(line: 2011, column: 70, scope: !6160)
!6169 = !DILocalVariable(name: "expr", scope: !6160, file: !3, line: 2013, type: !2578)
!6170 = !DILocation(line: 2013, column: 10, scope: !6160)
!6171 = !DILocalVariable(name: "avi", scope: !6160, file: !3, line: 2014, type: !2876)
!6172 = !DILocation(line: 2014, column: 19, scope: !6160)
!6173 = !DILocation(line: 2016, column: 3, scope: !6174)
!6174 = distinct !DILexicalBlock(scope: !6160, file: !3, line: 2016, column: 3)
!6175 = !DILocation(line: 2016, column: 3, scope: !6176)
!6176 = distinct !DILexicalBlock(scope: !6174, file: !3, line: 2016, column: 3)
!6177 = !DILocation(line: 2017, column: 24, scope: !6178)
!6178 = distinct !DILexicalBlock(scope: !6176, file: !3, line: 2017, column: 9)
!6179 = !DILocation(line: 2017, column: 32, scope: !6178)
!6180 = !DILocation(line: 2017, column: 9, scope: !6178)
!6181 = !DILocation(line: 2017, column: 51, scope: !6178)
!6182 = !DILocation(line: 2017, column: 9, scope: !6176)
!6183 = !DILocation(line: 2018, column: 40, scope: !6178)
!6184 = !DILocation(line: 2018, column: 46, scope: !6178)
!6185 = !DILocation(line: 2018, column: 7, scope: !6178)
!6186 = !DILocation(line: 2017, column: 54, scope: !6178)
!6187 = distinct !{!6187, !6173, !6188}
!6188 = !DILocation(line: 2018, column: 52, scope: !6174)
!6189 = !DILocation(line: 2019, column: 1, scope: !6160)
!6190 = distinct !DISubprogram(name: "_list_iter_start", scope: !409, file: !409, line: 429, type: !6191, scopeLine: 430, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6191 = !DISubroutineType(types: !6192)
!6192 = !{null, !6193, !2837, !1085}
!6193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2877, size: 64)
!6194 = !DILocalVariable(name: "ip", arg: 1, scope: !6190, file: !409, line: 429, type: !6193)
!6195 = !DILocation(line: 429, column: 35, scope: !6190)
!6196 = !DILocalVariable(name: "lp", arg: 2, scope: !6190, file: !409, line: 429, type: !2837)
!6197 = !DILocation(line: 429, column: 48, scope: !6190)
!6198 = !DILocalVariable(name: "can_remove_p", arg: 3, scope: !6190, file: !409, line: 429, type: !1085)
!6199 = !DILocation(line: 429, column: 57, scope: !6190)
!6200 = !DILocation(line: 431, column: 12, scope: !6190)
!6201 = !DILocation(line: 431, column: 3, scope: !6190)
!6202 = !DILocation(line: 431, column: 7, scope: !6190)
!6203 = !DILocation(line: 431, column: 10, scope: !6190)
!6204 = !DILocation(line: 432, column: 22, scope: !6190)
!6205 = !DILocation(line: 432, column: 3, scope: !6190)
!6206 = !DILocation(line: 432, column: 7, scope: !6190)
!6207 = !DILocation(line: 432, column: 20, scope: !6190)
!6208 = !DILocation(line: 433, column: 3, scope: !6190)
!6209 = !DILocation(line: 433, column: 7, scope: !6190)
!6210 = !DILocation(line: 433, column: 17, scope: !6190)
!6211 = !DILocation(line: 434, column: 1, scope: !6190)
!6212 = distinct !DISubprogram(name: "_list_iter_cond_expr", scope: !409, file: !409, line: 538, type: !6213, scopeLine: 539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6213 = !DISubroutineType(types: !6214)
!6214 = !{!1085, !2109, !6215}
!6215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2578, size: 64)
!6216 = !DILocalVariable(name: "av", arg: 1, scope: !6212, file: !409, line: 538, type: !2109)
!6217 = !DILocation(line: 538, column: 32, scope: !6212)
!6218 = !DILocalVariable(name: "exprp", arg: 2, scope: !6212, file: !409, line: 538, type: !6215)
!6219 = !DILocation(line: 538, column: 44, scope: !6212)
!6220 = !DILocation(line: 540, column: 7, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6212, file: !409, line: 540, column: 7)
!6222 = !DILocation(line: 540, column: 7, scope: !6212)
!6223 = !DILocation(line: 542, column: 16, scope: !6224)
!6224 = distinct !DILexicalBlock(scope: !6221, file: !409, line: 541, column: 5)
!6225 = !DILocation(line: 542, column: 8, scope: !6224)
!6226 = !DILocation(line: 542, column: 14, scope: !6224)
!6227 = !DILocation(line: 543, column: 7, scope: !6224)
!6228 = !DILocation(line: 546, column: 3, scope: !6212)
!6229 = !DILocation(line: 547, column: 1, scope: !6212)
!6230 = distinct !DISubprogram(name: "av_set_lookup", scope: !3, file: !3, line: 2067, type: !6231, scopeLine: 2068, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6231 = !DISubroutineType(types: !6232)
!6232 = !{!2578, !2109, !2151}
!6233 = !DILocalVariable(name: "set", arg: 1, scope: !6230, file: !3, line: 2067, type: !2109)
!6234 = !DILocation(line: 2067, column: 25, scope: !6230)
!6235 = !DILocalVariable(name: "sought_vinsn", arg: 2, scope: !6230, file: !3, line: 2067, type: !2151)
!6236 = !DILocation(line: 2067, column: 38, scope: !6230)
!6237 = !DILocalVariable(name: "expr", scope: !6230, file: !3, line: 2069, type: !2578)
!6238 = !DILocation(line: 2069, column: 10, scope: !6230)
!6239 = !DILocalVariable(name: "i", scope: !6230, file: !3, line: 2070, type: !2876)
!6240 = !DILocation(line: 2070, column: 19, scope: !6230)
!6241 = !DILocation(line: 2072, column: 3, scope: !6242)
!6242 = distinct !DILexicalBlock(scope: !6230, file: !3, line: 2072, column: 3)
!6243 = !DILocation(line: 2072, column: 3, scope: !6244)
!6244 = distinct !DILexicalBlock(scope: !6242, file: !3, line: 2072, column: 3)
!6245 = !DILocation(line: 2073, column: 24, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6244, file: !3, line: 2073, column: 9)
!6247 = !DILocation(line: 2073, column: 43, scope: !6246)
!6248 = !DILocation(line: 2073, column: 9, scope: !6246)
!6249 = !DILocation(line: 2073, column: 9, scope: !6244)
!6250 = !DILocation(line: 2074, column: 14, scope: !6246)
!6251 = !DILocation(line: 2074, column: 7, scope: !6246)
!6252 = !DILocation(line: 2073, column: 55, scope: !6246)
!6253 = distinct !{!6253, !6241, !6254}
!6254 = !DILocation(line: 2074, column: 14, scope: !6242)
!6255 = !DILocation(line: 2075, column: 3, scope: !6230)
!6256 = !DILocation(line: 2076, column: 1, scope: !6230)
!6257 = distinct !DISubprogram(name: "set_unavailable_target_for_expr", scope: !3, file: !3, line: 1874, type: !6258, scopeLine: 1875, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6258 = !DISubroutineType(types: !6259)
!6259 = !{null, !2578, !2053}
!6260 = !DILocalVariable(name: "expr", arg: 1, scope: !6257, file: !3, line: 1874, type: !2578)
!6261 = !DILocation(line: 1874, column: 41, scope: !6257)
!6262 = !DILocalVariable(name: "lv_set", arg: 2, scope: !6257, file: !3, line: 1874, type: !2053)
!6263 = !DILocation(line: 1874, column: 54, scope: !6257)
!6264 = !DILocation(line: 1876, column: 7, scope: !6265)
!6265 = distinct !DILexicalBlock(scope: !6257, file: !3, line: 1876, column: 7)
!6266 = !DILocation(line: 1876, column: 7, scope: !6257)
!6267 = !DILocation(line: 1878, column: 11, scope: !6268)
!6268 = distinct !DILexicalBlock(scope: !6269, file: !3, line: 1878, column: 11)
!6269 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 1877, column: 5)
!6270 = !DILocation(line: 1879, column: 11, scope: !6268)
!6271 = !DILocation(line: 1879, column: 28, scope: !6268)
!6272 = !DILocation(line: 1879, column: 36, scope: !6268)
!6273 = !DILocation(line: 1879, column: 14, scope: !6268)
!6274 = !DILocation(line: 1878, column: 11, scope: !6269)
!6275 = !DILocation(line: 1900, column: 22, scope: !6276)
!6276 = distinct !DILexicalBlock(scope: !6277, file: !3, line: 1900, column: 8)
!6277 = distinct !DILexicalBlock(scope: !6268, file: !3, line: 1880, column: 2)
!6278 = !DILocation(line: 1901, column: 8, scope: !6276)
!6279 = !DILocation(line: 1900, column: 8, scope: !6276)
!6280 = !DILocation(line: 1900, column: 8, scope: !6277)
!6281 = !DILocation(line: 1902, column: 6, scope: !6276)
!6282 = !DILocation(line: 1902, column: 35, scope: !6276)
!6283 = !DILocation(line: 1904, column: 6, scope: !6276)
!6284 = !DILocation(line: 1904, column: 35, scope: !6276)
!6285 = !DILocation(line: 1905, column: 2, scope: !6277)
!6286 = !DILocation(line: 1906, column: 5, scope: !6269)
!6287 = !DILocalVariable(name: "regno", scope: !6288, file: !3, line: 1909, type: !7)
!6288 = distinct !DILexicalBlock(scope: !6265, file: !3, line: 1908, column: 5)
!6289 = !DILocation(line: 1909, column: 16, scope: !6288)
!6290 = !DILocalVariable(name: "rsi", scope: !6288, file: !3, line: 1910, type: !6291)
!6291 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_set_iterator", file: !155, line: 90, baseType: !4986)
!6292 = !DILocation(line: 1910, column: 24, scope: !6288)
!6293 = !DILocation(line: 1912, column: 7, scope: !6294)
!6294 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 1912, column: 7)
!6295 = !DILocation(line: 1912, column: 7, scope: !6296)
!6296 = distinct !DILexicalBlock(scope: !6294, file: !3, line: 1912, column: 7)
!6297 = !DILocation(line: 1914, column: 27, scope: !6298)
!6298 = distinct !DILexicalBlock(scope: !6296, file: !3, line: 1914, column: 13)
!6299 = !DILocation(line: 1914, column: 35, scope: !6298)
!6300 = !DILocation(line: 1914, column: 13, scope: !6298)
!6301 = !DILocation(line: 1914, column: 13, scope: !6296)
!6302 = !DILocation(line: 1916, column: 13, scope: !6303)
!6303 = distinct !DILexicalBlock(scope: !6298, file: !3, line: 1915, column: 11)
!6304 = !DILocation(line: 1916, column: 42, scope: !6303)
!6305 = !DILocation(line: 1917, column: 13, scope: !6303)
!6306 = !DILocation(line: 1914, column: 40, scope: !6298)
!6307 = distinct !{!6307, !6293, !6308}
!6308 = !DILocation(line: 1918, column: 11, scope: !6294)
!6309 = !DILocation(line: 1920, column: 7, scope: !6310)
!6310 = distinct !DILexicalBlock(scope: !6288, file: !3, line: 1920, column: 7)
!6311 = !DILocation(line: 1920, column: 7, scope: !6312)
!6312 = distinct !DILexicalBlock(scope: !6310, file: !3, line: 1920, column: 7)
!6313 = !DILocation(line: 1922, column: 27, scope: !6314)
!6314 = distinct !DILexicalBlock(scope: !6312, file: !3, line: 1922, column: 13)
!6315 = !DILocation(line: 1922, column: 35, scope: !6314)
!6316 = !DILocation(line: 1922, column: 13, scope: !6314)
!6317 = !DILocation(line: 1922, column: 13, scope: !6312)
!6318 = !DILocation(line: 1924, column: 13, scope: !6319)
!6319 = distinct !DILexicalBlock(scope: !6314, file: !3, line: 1923, column: 11)
!6320 = !DILocation(line: 1924, column: 42, scope: !6319)
!6321 = !DILocation(line: 1925, column: 13, scope: !6319)
!6322 = !DILocation(line: 1922, column: 40, scope: !6314)
!6323 = distinct !{!6323, !6309, !6324}
!6324 = !DILocation(line: 1926, column: 11, scope: !6310)
!6325 = !DILocation(line: 1928, column: 1, scope: !6257)
!6326 = distinct !DISubprogram(name: "_list_iter_next", scope: !409, file: !409, line: 437, type: !6327, scopeLine: 438, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6327 = !DISubroutineType(types: !6328)
!6328 = !{null, !6193}
!6329 = !DILocalVariable(name: "ip", arg: 1, scope: !6326, file: !409, line: 437, type: !6193)
!6330 = !DILocation(line: 437, column: 34, scope: !6326)
!6331 = !DILocation(line: 439, column: 8, scope: !6332)
!6332 = distinct !DILexicalBlock(scope: !6326, file: !409, line: 439, column: 7)
!6333 = !DILocation(line: 439, column: 12, scope: !6332)
!6334 = !DILocation(line: 439, column: 7, scope: !6326)
!6335 = !DILocation(line: 440, column: 15, scope: !6332)
!6336 = !DILocation(line: 440, column: 5, scope: !6332)
!6337 = !DILocation(line: 440, column: 9, scope: !6332)
!6338 = !DILocation(line: 440, column: 12, scope: !6332)
!6339 = !DILocation(line: 442, column: 5, scope: !6332)
!6340 = !DILocation(line: 442, column: 9, scope: !6332)
!6341 = !DILocation(line: 442, column: 19, scope: !6332)
!6342 = !DILocation(line: 443, column: 1, scope: !6326)
!6343 = distinct !DISubprogram(name: "av_set_add", scope: !3, file: !3, line: 2036, type: !6344, scopeLine: 2037, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6344 = !DISubroutineType(types: !6345)
!6345 = !{null, !2870, !2578}
!6346 = !DILocalVariable(name: "setp", arg: 1, scope: !6343, file: !3, line: 2036, type: !2870)
!6347 = !DILocation(line: 2036, column: 23, scope: !6343)
!6348 = !DILocalVariable(name: "expr", arg: 2, scope: !6343, file: !3, line: 2036, type: !2578)
!6349 = !DILocation(line: 2036, column: 36, scope: !6343)
!6350 = !DILocalVariable(name: "elem", scope: !6343, file: !3, line: 2038, type: !2109)
!6351 = !DILocation(line: 2038, column: 12, scope: !6343)
!6352 = !DILocation(line: 2040, column: 3, scope: !6343)
!6353 = !DILocation(line: 2041, column: 30, scope: !6343)
!6354 = !DILocation(line: 2041, column: 10, scope: !6343)
!6355 = !DILocation(line: 2041, column: 8, scope: !6343)
!6356 = !DILocation(line: 2042, column: 14, scope: !6343)
!6357 = !DILocation(line: 2042, column: 35, scope: !6343)
!6358 = !DILocation(line: 2042, column: 3, scope: !6343)
!6359 = !DILocation(line: 2043, column: 1, scope: !6343)
!6360 = distinct !DISubprogram(name: "av_set_add_element", scope: !3, file: !3, line: 2027, type: !6361, scopeLine: 2028, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6361 = !DISubroutineType(types: !6362)
!6362 = !{!2109, !2870}
!6363 = !DILocalVariable(name: "setp", arg: 1, scope: !6360, file: !3, line: 2027, type: !2870)
!6364 = !DILocation(line: 2027, column: 31, scope: !6360)
!6365 = !DILocation(line: 2030, column: 14, scope: !6360)
!6366 = !DILocation(line: 2030, column: 3, scope: !6360)
!6367 = !DILocation(line: 2031, column: 11, scope: !6360)
!6368 = !DILocation(line: 2031, column: 10, scope: !6360)
!6369 = !DILocation(line: 2031, column: 3, scope: !6360)
!6370 = distinct !DISubprogram(name: "av_set_iter_remove", scope: !3, file: !3, line: 2057, type: !6371, scopeLine: 2058, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6371 = !DISubroutineType(types: !6372)
!6372 = !{null, !6373}
!6373 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2876, size: 64)
!6374 = !DILocalVariable(name: "ip", arg: 1, scope: !6370, file: !3, line: 2057, type: !6373)
!6375 = !DILocation(line: 2057, column: 38, scope: !6370)
!6376 = !DILocation(line: 2059, column: 15, scope: !6370)
!6377 = !DILocation(line: 2059, column: 3, scope: !6370)
!6378 = !DILocation(line: 2060, column: 22, scope: !6370)
!6379 = !DILocation(line: 2060, column: 3, scope: !6370)
!6380 = !DILocation(line: 2061, column: 1, scope: !6370)
!6381 = distinct !DISubprogram(name: "_list_iter_remove", scope: !409, file: !409, line: 446, type: !6327, scopeLine: 447, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6382 = !DILocalVariable(name: "ip", arg: 1, scope: !6381, file: !409, line: 446, type: !6193)
!6383 = !DILocation(line: 446, column: 36, scope: !6381)
!6384 = !DILocation(line: 448, column: 3, scope: !6381)
!6385 = !DILocation(line: 449, column: 17, scope: !6381)
!6386 = !DILocation(line: 449, column: 21, scope: !6381)
!6387 = !DILocation(line: 449, column: 3, scope: !6381)
!6388 = !DILocation(line: 450, column: 3, scope: !6381)
!6389 = !DILocation(line: 450, column: 7, scope: !6381)
!6390 = !DILocation(line: 450, column: 17, scope: !6381)
!6391 = !DILocation(line: 451, column: 1, scope: !6381)
!6392 = distinct !DISubprogram(name: "merge_with_other_exprs", scope: !3, file: !3, line: 2116, type: !6393, scopeLine: 2117, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6393 = !DISubroutineType(types: !6394)
!6394 = !{!2578, !2870, !6373, !2578}
!6395 = !DILocalVariable(name: "avp", arg: 1, scope: !6392, file: !3, line: 2116, type: !2870)
!6396 = !DILocation(line: 2116, column: 35, scope: !6392)
!6397 = !DILocalVariable(name: "ip", arg: 2, scope: !6392, file: !3, line: 2116, type: !6373)
!6398 = !DILocation(line: 2116, column: 57, scope: !6392)
!6399 = !DILocalVariable(name: "expr", arg: 3, scope: !6392, file: !3, line: 2116, type: !2578)
!6400 = !DILocation(line: 2116, column: 68, scope: !6392)
!6401 = !DILocalVariable(name: "expr2", scope: !6392, file: !3, line: 2118, type: !2578)
!6402 = !DILocation(line: 2118, column: 10, scope: !6392)
!6403 = !DILocation(line: 2120, column: 44, scope: !6392)
!6404 = !DILocation(line: 2120, column: 43, scope: !6392)
!6405 = !DILocation(line: 2120, column: 49, scope: !6392)
!6406 = !DILocation(line: 2120, column: 11, scope: !6392)
!6407 = !DILocation(line: 2120, column: 9, scope: !6392)
!6408 = !DILocation(line: 2121, column: 7, scope: !6409)
!6409 = distinct !DILexicalBlock(scope: !6392, file: !3, line: 2121, column: 7)
!6410 = !DILocation(line: 2121, column: 13, scope: !6409)
!6411 = !DILocation(line: 2121, column: 7, scope: !6392)
!6412 = !DILocation(line: 2125, column: 7, scope: !6413)
!6413 = distinct !DILexicalBlock(scope: !6409, file: !3, line: 2122, column: 5)
!6414 = !DILocation(line: 2125, column: 37, scope: !6413)
!6415 = !DILocation(line: 2126, column: 7, scope: !6413)
!6416 = !DILocation(line: 2126, column: 31, scope: !6413)
!6417 = !DILocation(line: 2128, column: 19, scope: !6413)
!6418 = !DILocation(line: 2128, column: 26, scope: !6413)
!6419 = !DILocation(line: 2128, column: 7, scope: !6413)
!6420 = !DILocation(line: 2131, column: 7, scope: !6413)
!6421 = !DILocation(line: 2131, column: 31, scope: !6413)
!6422 = !DILocation(line: 2133, column: 27, scope: !6413)
!6423 = !DILocation(line: 2133, column: 7, scope: !6413)
!6424 = !DILocation(line: 2134, column: 14, scope: !6413)
!6425 = !DILocation(line: 2134, column: 7, scope: !6413)
!6426 = !DILocation(line: 2137, column: 10, scope: !6392)
!6427 = !DILocation(line: 2137, column: 3, scope: !6392)
!6428 = !DILocation(line: 2138, column: 1, scope: !6392)
!6429 = distinct !DISubprogram(name: "av_set_lookup_other_equiv_expr", scope: !3, file: !3, line: 2098, type: !6430, scopeLine: 2099, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6430 = !DISubroutineType(types: !6431)
!6431 = !{!2578, !2109, !2578}
!6432 = !DILocalVariable(name: "set", arg: 1, scope: !6429, file: !3, line: 2098, type: !2109)
!6433 = !DILocation(line: 2098, column: 42, scope: !6429)
!6434 = !DILocalVariable(name: "expr", arg: 2, scope: !6429, file: !3, line: 2098, type: !2578)
!6435 = !DILocation(line: 2098, column: 54, scope: !6429)
!6436 = !DILocalVariable(name: "cur_expr", scope: !6429, file: !3, line: 2100, type: !2578)
!6437 = !DILocation(line: 2100, column: 10, scope: !6429)
!6438 = !DILocalVariable(name: "i", scope: !6429, file: !3, line: 2101, type: !2876)
!6439 = !DILocation(line: 2101, column: 19, scope: !6429)
!6440 = !DILocation(line: 2103, column: 3, scope: !6441)
!6441 = distinct !DILexicalBlock(scope: !6429, file: !3, line: 2103, column: 3)
!6442 = !DILocation(line: 2103, column: 3, scope: !6443)
!6443 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 2103, column: 3)
!6444 = !DILocation(line: 2105, column: 11, scope: !6445)
!6445 = distinct !DILexicalBlock(scope: !6446, file: !3, line: 2105, column: 11)
!6446 = distinct !DILexicalBlock(scope: !6443, file: !3, line: 2104, column: 5)
!6447 = !DILocation(line: 2105, column: 23, scope: !6445)
!6448 = !DILocation(line: 2105, column: 20, scope: !6445)
!6449 = !DILocation(line: 2105, column: 11, scope: !6446)
!6450 = !DILocation(line: 2106, column: 9, scope: !6445)
!6451 = !DILocation(line: 2107, column: 26, scope: !6452)
!6452 = distinct !DILexicalBlock(scope: !6446, file: !3, line: 2107, column: 11)
!6453 = !DILocation(line: 2107, column: 49, scope: !6452)
!6454 = !DILocation(line: 2107, column: 11, scope: !6452)
!6455 = !DILocation(line: 2107, column: 11, scope: !6446)
!6456 = !DILocation(line: 2108, column: 16, scope: !6452)
!6457 = !DILocation(line: 2108, column: 9, scope: !6452)
!6458 = !DILocation(line: 2109, column: 5, scope: !6446)
!6459 = distinct !{!6459, !6440, !6460}
!6460 = !DILocation(line: 2109, column: 5, scope: !6441)
!6461 = !DILocation(line: 2111, column: 3, scope: !6429)
!6462 = !DILocation(line: 2112, column: 1, scope: !6429)
!6463 = distinct !DISubprogram(name: "av_set_is_in_p", scope: !3, file: !3, line: 2142, type: !6464, scopeLine: 2143, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6464 = !DISubroutineType(types: !6465)
!6465 = !{!1085, !2109, !2151}
!6466 = !DILocalVariable(name: "set", arg: 1, scope: !6463, file: !3, line: 2142, type: !2109)
!6467 = !DILocation(line: 2142, column: 26, scope: !6463)
!6468 = !DILocalVariable(name: "vi", arg: 2, scope: !6463, file: !3, line: 2142, type: !2151)
!6469 = !DILocation(line: 2142, column: 39, scope: !6463)
!6470 = !DILocation(line: 2144, column: 25, scope: !6463)
!6471 = !DILocation(line: 2144, column: 30, scope: !6463)
!6472 = !DILocation(line: 2144, column: 10, scope: !6463)
!6473 = !DILocation(line: 2144, column: 34, scope: !6463)
!6474 = !DILocation(line: 2144, column: 3, scope: !6463)
!6475 = distinct !DISubprogram(name: "av_set_copy", scope: !3, file: !3, line: 2149, type: !6476, scopeLine: 2150, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6476 = !DISubroutineType(types: !6477)
!6477 = !{!2109, !2109}
!6478 = !DILocalVariable(name: "set", arg: 1, scope: !6475, file: !3, line: 2149, type: !2109)
!6479 = !DILocation(line: 2149, column: 23, scope: !6475)
!6480 = !DILocalVariable(name: "expr", scope: !6475, file: !3, line: 2151, type: !2578)
!6481 = !DILocation(line: 2151, column: 10, scope: !6475)
!6482 = !DILocalVariable(name: "i", scope: !6475, file: !3, line: 2152, type: !2876)
!6483 = !DILocation(line: 2152, column: 19, scope: !6475)
!6484 = !DILocalVariable(name: "res", scope: !6475, file: !3, line: 2153, type: !2109)
!6485 = !DILocation(line: 2153, column: 12, scope: !6475)
!6486 = !DILocation(line: 2155, column: 3, scope: !6487)
!6487 = distinct !DILexicalBlock(scope: !6475, file: !3, line: 2155, column: 3)
!6488 = !DILocation(line: 2155, column: 3, scope: !6489)
!6489 = distinct !DILexicalBlock(scope: !6487, file: !3, line: 2155, column: 3)
!6490 = !DILocation(line: 2156, column: 23, scope: !6489)
!6491 = !DILocation(line: 2156, column: 5, scope: !6489)
!6492 = distinct !{!6492, !6486, !6493}
!6493 = !DILocation(line: 2156, column: 27, scope: !6487)
!6494 = !DILocation(line: 2158, column: 10, scope: !6475)
!6495 = !DILocation(line: 2158, column: 3, scope: !6475)
!6496 = distinct !DISubprogram(name: "av_set_union_and_clear", scope: !3, file: !3, line: 2175, type: !6497, scopeLine: 2176, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6497 = !DISubroutineType(types: !6498)
!6498 = !{null, !2870, !2870, !2104}
!6499 = !DILocalVariable(name: "top", arg: 1, scope: !6496, file: !3, line: 2175, type: !2870)
!6500 = !DILocation(line: 2175, column: 35, scope: !6496)
!6501 = !DILocalVariable(name: "fromp", arg: 2, scope: !6496, file: !3, line: 2175, type: !2870)
!6502 = !DILocation(line: 2175, column: 50, scope: !6496)
!6503 = !DILocalVariable(name: "insn", arg: 3, scope: !6496, file: !3, line: 2175, type: !2104)
!6504 = !DILocation(line: 2175, column: 64, scope: !6496)
!6505 = !DILocalVariable(name: "expr1", scope: !6496, file: !3, line: 2177, type: !2578)
!6506 = !DILocation(line: 2177, column: 10, scope: !6496)
!6507 = !DILocalVariable(name: "i", scope: !6496, file: !3, line: 2178, type: !2876)
!6508 = !DILocation(line: 2178, column: 19, scope: !6496)
!6509 = !DILocation(line: 2181, column: 3, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 2181, column: 3)
!6511 = !DILocation(line: 2181, column: 3, scope: !6512)
!6512 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 2181, column: 3)
!6513 = !DILocalVariable(name: "expr2", scope: !6514, file: !3, line: 2183, type: !2578)
!6514 = distinct !DILexicalBlock(scope: !6512, file: !3, line: 2182, column: 5)
!6515 = !DILocation(line: 2183, column: 14, scope: !6514)
!6516 = !DILocation(line: 2183, column: 38, scope: !6514)
!6517 = !DILocation(line: 2183, column: 37, scope: !6514)
!6518 = !DILocation(line: 2183, column: 45, scope: !6514)
!6519 = !DILocation(line: 2183, column: 22, scope: !6514)
!6520 = !DILocation(line: 2185, column: 11, scope: !6521)
!6521 = distinct !DILexicalBlock(scope: !6514, file: !3, line: 2185, column: 11)
!6522 = !DILocation(line: 2185, column: 11, scope: !6514)
!6523 = !DILocation(line: 2187, column: 23, scope: !6524)
!6524 = distinct !DILexicalBlock(scope: !6521, file: !3, line: 2186, column: 2)
!6525 = !DILocation(line: 2187, column: 30, scope: !6524)
!6526 = !DILocation(line: 2187, column: 37, scope: !6524)
!6527 = !DILocation(line: 2187, column: 11, scope: !6524)
!6528 = !DILocation(line: 2188, column: 4, scope: !6524)
!6529 = !DILocation(line: 2189, column: 2, scope: !6524)
!6530 = !DILocation(line: 2190, column: 5, scope: !6514)
!6531 = distinct !{!6531, !6509, !6532}
!6532 = !DILocation(line: 2190, column: 5, scope: !6510)
!6533 = !DILocation(line: 2192, column: 25, scope: !6496)
!6534 = !DILocation(line: 2192, column: 29, scope: !6496)
!6535 = !DILocation(line: 2192, column: 3, scope: !6496)
!6536 = !DILocation(line: 2193, column: 1, scope: !6496)
!6537 = distinct !DISubprogram(name: "join_distinct_sets", scope: !3, file: !3, line: 2165, type: !6538, scopeLine: 2166, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6538 = !DISubroutineType(types: !6539)
!6539 = !{null, !2870, !2870}
!6540 = !DILocalVariable(name: "to_tailp", arg: 1, scope: !6537, file: !3, line: 2165, type: !2870)
!6541 = !DILocation(line: 2165, column: 31, scope: !6537)
!6542 = !DILocalVariable(name: "fromp", arg: 2, scope: !6537, file: !3, line: 2165, type: !2870)
!6543 = !DILocation(line: 2165, column: 51, scope: !6537)
!6544 = !DILocation(line: 2167, column: 3, scope: !6537)
!6545 = !DILocation(line: 2168, column: 16, scope: !6537)
!6546 = !DILocation(line: 2168, column: 15, scope: !6537)
!6547 = !DILocation(line: 2168, column: 4, scope: !6537)
!6548 = !DILocation(line: 2168, column: 13, scope: !6537)
!6549 = !DILocation(line: 2169, column: 4, scope: !6537)
!6550 = !DILocation(line: 2169, column: 10, scope: !6537)
!6551 = !DILocation(line: 2170, column: 1, scope: !6537)
!6552 = distinct !DISubprogram(name: "av_set_union_and_live", scope: !3, file: !3, line: 2198, type: !6553, scopeLine: 2200, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6553 = !DISubroutineType(types: !6554)
!6554 = !{null, !2870, !2870, !2053, !2053, !2104}
!6555 = !DILocalVariable(name: "top", arg: 1, scope: !6552, file: !3, line: 2198, type: !2870)
!6556 = !DILocation(line: 2198, column: 34, scope: !6552)
!6557 = !DILocalVariable(name: "fromp", arg: 2, scope: !6552, file: !3, line: 2198, type: !2870)
!6558 = !DILocation(line: 2198, column: 49, scope: !6552)
!6559 = !DILocalVariable(name: "to_lv_set", arg: 3, scope: !6552, file: !3, line: 2198, type: !2053)
!6560 = !DILocation(line: 2198, column: 63, scope: !6552)
!6561 = !DILocalVariable(name: "from_lv_set", arg: 4, scope: !6552, file: !3, line: 2199, type: !2053)
!6562 = !DILocation(line: 2199, column: 31, scope: !6552)
!6563 = !DILocalVariable(name: "insn", arg: 5, scope: !6552, file: !3, line: 2199, type: !2104)
!6564 = !DILocation(line: 2199, column: 51, scope: !6552)
!6565 = !DILocalVariable(name: "expr1", scope: !6552, file: !3, line: 2201, type: !2578)
!6566 = !DILocation(line: 2201, column: 10, scope: !6552)
!6567 = !DILocalVariable(name: "i", scope: !6552, file: !3, line: 2202, type: !2876)
!6568 = !DILocation(line: 2202, column: 19, scope: !6552)
!6569 = !DILocalVariable(name: "to_tailp", scope: !6552, file: !3, line: 2203, type: !2870)
!6570 = !DILocation(line: 2203, column: 13, scope: !6552)
!6571 = !DILocalVariable(name: "in_both_set", scope: !6552, file: !3, line: 2203, type: !2109)
!6572 = !DILocation(line: 2203, column: 23, scope: !6552)
!6573 = !DILocation(line: 2206, column: 3, scope: !6574)
!6574 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 2206, column: 3)
!6575 = !DILocation(line: 2206, column: 3, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6574, file: !3, line: 2206, column: 3)
!6577 = !DILocalVariable(name: "expr2", scope: !6578, file: !3, line: 2208, type: !2578)
!6578 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 2207, column: 5)
!6579 = !DILocation(line: 2208, column: 14, scope: !6578)
!6580 = !DILocation(line: 2208, column: 48, scope: !6578)
!6581 = !DILocation(line: 2208, column: 55, scope: !6578)
!6582 = !DILocation(line: 2208, column: 22, scope: !6578)
!6583 = !DILocation(line: 2210, column: 11, scope: !6584)
!6584 = distinct !DILexicalBlock(scope: !6578, file: !3, line: 2210, column: 11)
!6585 = !DILocation(line: 2210, column: 11, scope: !6578)
!6586 = !DILocation(line: 2214, column: 15, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6588, file: !3, line: 2214, column: 15)
!6588 = distinct !DILexicalBlock(scope: !6584, file: !3, line: 2211, column: 2)
!6589 = !DILocation(line: 2214, column: 15, scope: !6588)
!6590 = !DILocalVariable(name: "regno1", scope: !6591, file: !3, line: 2216, type: !874)
!6591 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 2215, column: 13)
!6592 = !DILocation(line: 2216, column: 19, scope: !6591)
!6593 = !DILocation(line: 2216, column: 29, scope: !6591)
!6594 = !DILocation(line: 2217, column: 54, scope: !6591)
!6595 = !DILocation(line: 2217, column: 37, scope: !6591)
!6596 = !DILocalVariable(name: "regno2", scope: !6591, file: !3, line: 2218, type: !874)
!6597 = !DILocation(line: 2218, column: 19, scope: !6591)
!6598 = !DILocation(line: 2218, column: 29, scope: !6591)
!6599 = !DILocation(line: 2219, column: 54, scope: !6591)
!6600 = !DILocation(line: 2219, column: 37, scope: !6591)
!6601 = !DILocation(line: 2224, column: 19, scope: !6602)
!6602 = distinct !DILexicalBlock(scope: !6591, file: !3, line: 2224, column: 19)
!6603 = !DILocation(line: 2224, column: 29, scope: !6602)
!6604 = !DILocation(line: 2224, column: 26, scope: !6602)
!6605 = !DILocation(line: 2224, column: 19, scope: !6591)
!6606 = !DILocation(line: 2225, column: 17, scope: !6602)
!6607 = !DILocation(line: 2225, column: 47, scope: !6602)
!6608 = !DILocation(line: 2226, column: 13, scope: !6591)
!6609 = !DILocation(line: 2227, column: 20, scope: !6610)
!6610 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 2227, column: 20)
!6611 = !DILocation(line: 2227, column: 45, scope: !6610)
!6612 = !DILocation(line: 2227, column: 42, scope: !6610)
!6613 = !DILocation(line: 2227, column: 20, scope: !6587)
!6614 = !DILocation(line: 2228, column: 13, scope: !6610)
!6615 = !DILocation(line: 2228, column: 43, scope: !6610)
!6616 = !DILocation(line: 2230, column: 23, scope: !6588)
!6617 = !DILocation(line: 2230, column: 30, scope: !6588)
!6618 = !DILocation(line: 2230, column: 37, scope: !6588)
!6619 = !DILocation(line: 2230, column: 11, scope: !6588)
!6620 = !DILocation(line: 2231, column: 44, scope: !6588)
!6621 = !DILocation(line: 2231, column: 11, scope: !6588)
!6622 = !DILocation(line: 2232, column: 4, scope: !6588)
!6623 = !DILocation(line: 2233, column: 2, scope: !6588)
!6624 = !DILocation(line: 2237, column: 42, scope: !6584)
!6625 = !DILocation(line: 2237, column: 49, scope: !6584)
!6626 = !DILocation(line: 2237, column: 9, scope: !6584)
!6627 = !DILocation(line: 2238, column: 5, scope: !6578)
!6628 = distinct !{!6628, !6573, !6629}
!6629 = !DILocation(line: 2238, column: 5, scope: !6574)
!6630 = !DILocation(line: 2239, column: 16, scope: !6552)
!6631 = !DILocation(line: 2239, column: 12, scope: !6552)
!6632 = !DILocation(line: 2243, column: 3, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6552, file: !3, line: 2243, column: 3)
!6634 = !DILocation(line: 2243, column: 3, scope: !6635)
!6635 = distinct !DILexicalBlock(scope: !6633, file: !3, line: 2243, column: 3)
!6636 = !DILocation(line: 2244, column: 38, scope: !6635)
!6637 = !DILocation(line: 2244, column: 45, scope: !6635)
!6638 = !DILocation(line: 2244, column: 5, scope: !6635)
!6639 = distinct !{!6639, !6632, !6640}
!6640 = !DILocation(line: 2244, column: 54, scope: !6633)
!6641 = !DILocation(line: 2246, column: 25, scope: !6552)
!6642 = !DILocation(line: 2246, column: 3, scope: !6552)
!6643 = !DILocation(line: 2247, column: 23, scope: !6552)
!6644 = !DILocation(line: 2247, column: 33, scope: !6552)
!6645 = !DILocation(line: 2247, column: 3, scope: !6552)
!6646 = !DILocation(line: 2248, column: 1, scope: !6552)
!6647 = distinct !DISubprogram(name: "av_set_lookup_and_remove", scope: !3, file: !3, line: 2080, type: !6648, scopeLine: 2081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6648 = !DISubroutineType(types: !6649)
!6649 = !{!2578, !2870, !2151}
!6650 = !DILocalVariable(name: "setp", arg: 1, scope: !6647, file: !3, line: 2080, type: !2870)
!6651 = !DILocation(line: 2080, column: 37, scope: !6647)
!6652 = !DILocalVariable(name: "sought_vinsn", arg: 2, scope: !6647, file: !3, line: 2080, type: !2151)
!6653 = !DILocation(line: 2080, column: 51, scope: !6647)
!6654 = !DILocalVariable(name: "expr", scope: !6647, file: !3, line: 2082, type: !2578)
!6655 = !DILocation(line: 2082, column: 10, scope: !6647)
!6656 = !DILocalVariable(name: "i", scope: !6647, file: !3, line: 2083, type: !2876)
!6657 = !DILocation(line: 2083, column: 19, scope: !6647)
!6658 = !DILocation(line: 2085, column: 3, scope: !6659)
!6659 = distinct !DILexicalBlock(scope: !6647, file: !3, line: 2085, column: 3)
!6660 = !DILocation(line: 2085, column: 3, scope: !6661)
!6661 = distinct !DILexicalBlock(scope: !6659, file: !3, line: 2085, column: 3)
!6662 = !DILocation(line: 2086, column: 24, scope: !6663)
!6663 = distinct !DILexicalBlock(scope: !6661, file: !3, line: 2086, column: 9)
!6664 = !DILocation(line: 2086, column: 43, scope: !6663)
!6665 = !DILocation(line: 2086, column: 9, scope: !6663)
!6666 = !DILocation(line: 2086, column: 9, scope: !6661)
!6667 = !DILocation(line: 2088, column: 9, scope: !6668)
!6668 = distinct !DILexicalBlock(scope: !6663, file: !3, line: 2087, column: 7)
!6669 = !DILocation(line: 2089, column: 16, scope: !6668)
!6670 = !DILocation(line: 2089, column: 9, scope: !6668)
!6671 = !DILocation(line: 2086, column: 55, scope: !6663)
!6672 = distinct !{!6672, !6658, !6673}
!6673 = !DILocation(line: 2090, column: 7, scope: !6659)
!6674 = !DILocation(line: 2091, column: 3, scope: !6647)
!6675 = !DILocation(line: 2092, column: 1, scope: !6647)
!6676 = distinct !DISubprogram(name: "av_set_add_nocopy", scope: !3, file: !3, line: 2047, type: !6344, scopeLine: 2048, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6677 = !DILocalVariable(name: "setp", arg: 1, scope: !6676, file: !3, line: 2047, type: !2870)
!6678 = !DILocation(line: 2047, column: 30, scope: !6676)
!6679 = !DILocalVariable(name: "expr", arg: 2, scope: !6676, file: !3, line: 2047, type: !2578)
!6680 = !DILocation(line: 2047, column: 43, scope: !6676)
!6681 = !DILocalVariable(name: "elem", scope: !6676, file: !3, line: 2049, type: !2109)
!6682 = !DILocation(line: 2049, column: 12, scope: !6676)
!6683 = !DILocation(line: 2051, column: 30, scope: !6676)
!6684 = !DILocation(line: 2051, column: 10, scope: !6676)
!6685 = !DILocation(line: 2051, column: 8, scope: !6676)
!6686 = !DILocation(line: 2052, column: 4, scope: !6676)
!6687 = !DILocation(line: 2052, column: 27, scope: !6676)
!6688 = !DILocation(line: 2052, column: 26, scope: !6676)
!6689 = !DILocation(line: 2053, column: 1, scope: !6676)
!6690 = distinct !DISubprogram(name: "av_set_leave_one_nonspec", scope: !3, file: !3, line: 2265, type: !2868, scopeLine: 2266, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6691 = !DILocalVariable(name: "setp", arg: 1, scope: !6690, file: !3, line: 2265, type: !2870)
!6692 = !DILocation(line: 2265, column: 37, scope: !6690)
!6693 = !DILocalVariable(name: "expr", scope: !6690, file: !3, line: 2267, type: !2578)
!6694 = !DILocation(line: 2267, column: 10, scope: !6690)
!6695 = !DILocalVariable(name: "i", scope: !6690, file: !3, line: 2268, type: !2876)
!6696 = !DILocation(line: 2268, column: 19, scope: !6690)
!6697 = !DILocalVariable(name: "has_one_nonspec", scope: !6690, file: !3, line: 2269, type: !1085)
!6698 = !DILocation(line: 2269, column: 8, scope: !6690)
!6699 = !DILocation(line: 2273, column: 3, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6690, file: !3, line: 2273, column: 3)
!6701 = !DILocation(line: 2273, column: 3, scope: !6702)
!6702 = distinct !DILexicalBlock(scope: !6700, file: !3, line: 2273, column: 3)
!6703 = !DILocation(line: 2275, column: 12, scope: !6704)
!6704 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 2275, column: 11)
!6705 = distinct !DILexicalBlock(scope: !6702, file: !3, line: 2274, column: 5)
!6706 = !DILocation(line: 2275, column: 11, scope: !6705)
!6707 = !DILocation(line: 2277, column: 10, scope: !6708)
!6708 = distinct !DILexicalBlock(scope: !6709, file: !3, line: 2277, column: 10)
!6709 = distinct !DILexicalBlock(scope: !6704, file: !3, line: 2276, column: 2)
!6710 = !DILocation(line: 2277, column: 10, scope: !6709)
!6711 = !DILocation(line: 2278, column: 6, scope: !6708)
!6712 = !DILocation(line: 2280, column: 22, scope: !6708)
!6713 = !DILocation(line: 2281, column: 2, scope: !6709)
!6714 = !DILocation(line: 2282, column: 5, scope: !6705)
!6715 = distinct !{!6715, !6699, !6716}
!6716 = !DILocation(line: 2282, column: 5, scope: !6700)
!6717 = !DILocation(line: 2283, column: 1, scope: !6690)
!6718 = distinct !DISubprogram(name: "av_set_element", scope: !3, file: !3, line: 2287, type: !6719, scopeLine: 2288, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6719 = !DISubroutineType(types: !6720)
!6720 = !{!2578, !2109, !874}
!6721 = !DILocalVariable(name: "set", arg: 1, scope: !6718, file: !3, line: 2287, type: !2109)
!6722 = !DILocation(line: 2287, column: 26, scope: !6718)
!6723 = !DILocalVariable(name: "n", arg: 2, scope: !6718, file: !3, line: 2287, type: !874)
!6724 = !DILocation(line: 2287, column: 35, scope: !6718)
!6725 = !DILocalVariable(name: "expr", scope: !6718, file: !3, line: 2289, type: !2578)
!6726 = !DILocation(line: 2289, column: 10, scope: !6718)
!6727 = !DILocalVariable(name: "i", scope: !6718, file: !3, line: 2290, type: !2876)
!6728 = !DILocation(line: 2290, column: 19, scope: !6718)
!6729 = !DILocation(line: 2292, column: 3, scope: !6730)
!6730 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 2292, column: 3)
!6731 = !DILocation(line: 2292, column: 3, scope: !6732)
!6732 = distinct !DILexicalBlock(scope: !6730, file: !3, line: 2292, column: 3)
!6733 = !DILocation(line: 2293, column: 10, scope: !6734)
!6734 = distinct !DILexicalBlock(scope: !6732, file: !3, line: 2293, column: 9)
!6735 = !DILocation(line: 2293, column: 13, scope: !6734)
!6736 = !DILocation(line: 2293, column: 9, scope: !6732)
!6737 = !DILocation(line: 2294, column: 14, scope: !6734)
!6738 = !DILocation(line: 2294, column: 7, scope: !6734)
!6739 = !DILocation(line: 2293, column: 16, scope: !6734)
!6740 = distinct !{!6740, !6729, !6741}
!6741 = !DILocation(line: 2294, column: 14, scope: !6730)
!6742 = !DILocation(line: 2296, column: 3, scope: !6718)
!6743 = !DILocation(line: 2297, column: 3, scope: !6718)
!6744 = !DILocation(line: 2298, column: 1, scope: !6718)
!6745 = distinct !DISubprogram(name: "av_set_substract_cond_branches", scope: !3, file: !3, line: 2302, type: !2868, scopeLine: 2303, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6746 = !DILocalVariable(name: "avp", arg: 1, scope: !6745, file: !3, line: 2302, type: !2870)
!6747 = !DILocation(line: 2302, column: 43, scope: !6745)
!6748 = !DILocalVariable(name: "i", scope: !6745, file: !3, line: 2304, type: !2876)
!6749 = !DILocation(line: 2304, column: 19, scope: !6745)
!6750 = !DILocalVariable(name: "expr", scope: !6745, file: !3, line: 2305, type: !2578)
!6751 = !DILocation(line: 2305, column: 10, scope: !6745)
!6752 = !DILocation(line: 2307, column: 3, scope: !6753)
!6753 = distinct !DILexicalBlock(scope: !6745, file: !3, line: 2307, column: 3)
!6754 = !DILocation(line: 2307, column: 3, scope: !6755)
!6755 = distinct !DILexicalBlock(scope: !6753, file: !3, line: 2307, column: 3)
!6756 = !DILocation(line: 2308, column: 30, scope: !6757)
!6757 = distinct !DILexicalBlock(scope: !6755, file: !3, line: 2308, column: 9)
!6758 = !DILocation(line: 2308, column: 9, scope: !6757)
!6759 = !DILocation(line: 2308, column: 9, scope: !6755)
!6760 = !DILocation(line: 2309, column: 7, scope: !6757)
!6761 = !DILocation(line: 2308, column: 47, scope: !6757)
!6762 = distinct !{!6762, !6752, !6763}
!6763 = !DILocation(line: 2309, column: 29, scope: !6753)
!6764 = !DILocation(line: 2310, column: 1, scope: !6745)
!6765 = distinct !DISubprogram(name: "av_set_split_usefulness", scope: !3, file: !3, line: 2315, type: !6766, scopeLine: 2316, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6766 = !DISubroutineType(types: !6767)
!6767 = !{null, !2109, !874, !874}
!6768 = !DILocalVariable(name: "av", arg: 1, scope: !6765, file: !3, line: 2315, type: !2109)
!6769 = !DILocation(line: 2315, column: 35, scope: !6765)
!6770 = !DILocalVariable(name: "prob", arg: 2, scope: !6765, file: !3, line: 2315, type: !874)
!6771 = !DILocation(line: 2315, column: 43, scope: !6765)
!6772 = !DILocalVariable(name: "all_prob", arg: 3, scope: !6765, file: !3, line: 2315, type: !874)
!6773 = !DILocation(line: 2315, column: 53, scope: !6765)
!6774 = !DILocalVariable(name: "i", scope: !6765, file: !3, line: 2317, type: !2876)
!6775 = !DILocation(line: 2317, column: 19, scope: !6765)
!6776 = !DILocalVariable(name: "expr", scope: !6765, file: !3, line: 2318, type: !2578)
!6777 = !DILocation(line: 2318, column: 10, scope: !6765)
!6778 = !DILocation(line: 2320, column: 3, scope: !6779)
!6779 = distinct !DILexicalBlock(scope: !6765, file: !3, line: 2320, column: 3)
!6780 = !DILocation(line: 2320, column: 3, scope: !6781)
!6781 = distinct !DILexicalBlock(scope: !6779, file: !3, line: 2320, column: 3)
!6782 = !DILocation(line: 2321, column: 31, scope: !6781)
!6783 = !DILocation(line: 2322, column: 34, scope: !6781)
!6784 = !DILocation(line: 2322, column: 59, scope: !6781)
!6785 = !DILocation(line: 2322, column: 57, scope: !6781)
!6786 = !DILocation(line: 2322, column: 67, scope: !6781)
!6787 = !DILocation(line: 2322, column: 65, scope: !6781)
!6788 = !DILocation(line: 2321, column: 5, scope: !6781)
!6789 = !DILocation(line: 2321, column: 28, scope: !6781)
!6790 = distinct !{!6790, !6778, !6791}
!6791 = !DILocation(line: 2323, column: 34, scope: !6779)
!6792 = !DILocation(line: 2324, column: 1, scope: !6765)
!6793 = distinct !DISubprogram(name: "av_set_intersect", scope: !3, file: !3, line: 2329, type: !6794, scopeLine: 2330, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6794 = !DISubroutineType(types: !6795)
!6795 = !{null, !2870, !2109}
!6796 = !DILocalVariable(name: "avp", arg: 1, scope: !6793, file: !3, line: 2329, type: !2870)
!6797 = !DILocation(line: 2329, column: 29, scope: !6793)
!6798 = !DILocalVariable(name: "av", arg: 2, scope: !6793, file: !3, line: 2329, type: !2109)
!6799 = !DILocation(line: 2329, column: 43, scope: !6793)
!6800 = !DILocalVariable(name: "i", scope: !6793, file: !3, line: 2331, type: !2876)
!6801 = !DILocation(line: 2331, column: 19, scope: !6793)
!6802 = !DILocalVariable(name: "expr", scope: !6793, file: !3, line: 2332, type: !2578)
!6803 = !DILocation(line: 2332, column: 10, scope: !6793)
!6804 = !DILocation(line: 2334, column: 3, scope: !6805)
!6805 = distinct !DILexicalBlock(scope: !6793, file: !3, line: 2334, column: 3)
!6806 = !DILocation(line: 2334, column: 3, scope: !6807)
!6807 = distinct !DILexicalBlock(scope: !6805, file: !3, line: 2334, column: 3)
!6808 = !DILocation(line: 2335, column: 24, scope: !6809)
!6809 = distinct !DILexicalBlock(scope: !6807, file: !3, line: 2335, column: 9)
!6810 = !DILocation(line: 2335, column: 28, scope: !6809)
!6811 = !DILocation(line: 2335, column: 9, scope: !6809)
!6812 = !DILocation(line: 2335, column: 47, scope: !6809)
!6813 = !DILocation(line: 2335, column: 9, scope: !6807)
!6814 = !DILocation(line: 2336, column: 7, scope: !6809)
!6815 = !DILocation(line: 2335, column: 50, scope: !6809)
!6816 = distinct !{!6816, !6804, !6817}
!6817 = !DILocation(line: 2336, column: 29, scope: !6805)
!6818 = !DILocation(line: 2337, column: 1, scope: !6793)
!6819 = distinct !DISubprogram(name: "free_data_for_scheduled_insn", scope: !3, file: !3, line: 2776, type: !3100, scopeLine: 2777, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6820 = !DILocalVariable(name: "insn", arg: 1, scope: !6819, file: !3, line: 2776, type: !2104)
!6821 = !DILocation(line: 2776, column: 38, scope: !6819)
!6822 = !DILocation(line: 2778, column: 3, scope: !6819)
!6823 = !DILocation(line: 2780, column: 9, scope: !6824)
!6824 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 2780, column: 7)
!6825 = !DILocation(line: 2780, column: 7, scope: !6819)
!6826 = !DILocation(line: 2781, column: 5, scope: !6824)
!6827 = !DILocation(line: 2783, column: 3, scope: !6819)
!6828 = !DILocation(line: 2784, column: 3, scope: !6819)
!6829 = !DILocation(line: 2785, column: 16, scope: !6819)
!6830 = !DILocation(line: 2785, column: 3, scope: !6819)
!6831 = !DILocation(line: 2788, column: 7, scope: !6832)
!6832 = distinct !DILexicalBlock(scope: !6819, file: !3, line: 2788, column: 7)
!6833 = !DILocation(line: 2788, column: 7, scope: !6819)
!6834 = !DILocation(line: 2789, column: 5, scope: !6832)
!6835 = !DILocation(line: 2790, column: 15, scope: !6819)
!6836 = !DILocation(line: 2790, column: 3, scope: !6819)
!6837 = !DILocation(line: 2792, column: 3, scope: !6819)
!6838 = !DILocation(line: 2792, column: 29, scope: !6819)
!6839 = !DILocation(line: 2796, column: 5, scope: !6819)
!6840 = !DILocation(line: 2796, column: 32, scope: !6819)
!6841 = !DILocation(line: 2796, column: 41, scope: !6819)
!6842 = !DILocation(line: 2797, column: 1, scope: !6819)
!6843 = distinct !DISubprogram(name: "first_time_insn_init", scope: !3, file: !3, line: 2714, type: !6844, scopeLine: 2715, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6844 = !DISubroutineType(types: !6845)
!6845 = !{!1085, !2104}
!6846 = !DILocalVariable(name: "insn", arg: 1, scope: !6843, file: !3, line: 2714, type: !2104)
!6847 = !DILocation(line: 2714, column: 30, scope: !6843)
!6848 = !DILocation(line: 2716, column: 10, scope: !6843)
!6849 = !DILocation(line: 2716, column: 27, scope: !6843)
!6850 = !DILocation(line: 2716, column: 3, scope: !6843)
!6851 = distinct !DISubprogram(name: "sel_init_global_and_expr", scope: !3, file: !3, line: 2900, type: !6852, scopeLine: 2901, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6852 = !DISubroutineType(types: !6853)
!6853 = !{null, !6854}
!6854 = !DIDerivedType(tag: DW_TAG_typedef, name: "bb_vec_t", file: !398, line: 40, baseType: !2086)
!6855 = !DILocalVariable(name: "bbs", arg: 1, scope: !6851, file: !3, line: 2900, type: !6854)
!6856 = !DILocation(line: 2900, column: 36, scope: !6851)
!6857 = !DILocalVariable(name: "ssi", scope: !6851, file: !3, line: 2903, type: !6858)
!6858 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6859)
!6859 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "sched_scan_info_def", file: !398, line: 44, size: 256, elements: !6860)
!6860 = !{!6861, !6862, !6863, !6864}
!6861 = !DIDerivedType(tag: DW_TAG_member, name: "extend_bb", scope: !6859, file: !398, line: 49, baseType: !2607, size: 64)
!6862 = !DIDerivedType(tag: DW_TAG_member, name: "init_bb", scope: !6859, file: !398, line: 53, baseType: !2477, size: 64, offset: 64)
!6863 = !DIDerivedType(tag: DW_TAG_member, name: "extend_insn", scope: !6859, file: !398, line: 58, baseType: !2607, size: 64, offset: 128)
!6864 = !DIDerivedType(tag: DW_TAG_member, name: "init_insn", scope: !6859, file: !398, line: 62, baseType: !2603, size: 64, offset: 192)
!6865 = !DILocation(line: 2903, column: 36, scope: !6851)
!6866 = !DILocation(line: 2911, column: 21, scope: !6851)
!6867 = !DILocation(line: 2911, column: 3, scope: !6851)
!6868 = !DILocation(line: 2912, column: 1, scope: !6851)
!6869 = distinct !DISubprogram(name: "init_global_and_expr_for_bb", scope: !3, file: !3, line: 2813, type: !2478, scopeLine: 2814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6870 = !DILocalVariable(name: "bb", arg: 1, scope: !6869, file: !3, line: 2813, type: !1391)
!6871 = !DILocation(line: 2813, column: 42, scope: !6869)
!6872 = !DILocation(line: 2815, column: 23, scope: !6873)
!6873 = distinct !DILexicalBlock(scope: !6869, file: !3, line: 2815, column: 7)
!6874 = !DILocation(line: 2815, column: 7, scope: !6873)
!6875 = !DILocation(line: 2815, column: 7, scope: !6869)
!6876 = !DILocation(line: 2816, column: 5, scope: !6873)
!6877 = !DILocation(line: 2818, column: 22, scope: !6869)
!6878 = !DILocation(line: 2818, column: 3, scope: !6869)
!6879 = !DILocation(line: 2819, column: 1, scope: !6869)
!6880 = distinct !DISubprogram(name: "extend_insn_data", scope: !3, file: !3, line: 3931, type: !2608, scopeLine: 3932, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6881 = !DILocalVariable(name: "reserve", scope: !6880, file: !3, line: 3933, type: !874)
!6882 = !DILocation(line: 3933, column: 7, scope: !6880)
!6883 = !DILocation(line: 3935, column: 3, scope: !6880)
!6884 = !DILocation(line: 3936, column: 3, scope: !6880)
!6885 = !DILocation(line: 3939, column: 14, scope: !6880)
!6886 = !DILocation(line: 3939, column: 29, scope: !6880)
!6887 = !DILocation(line: 3940, column: 16, scope: !6880)
!6888 = !DILocation(line: 3940, column: 14, scope: !6880)
!6889 = !DILocation(line: 3939, column: 11, scope: !6880)
!6890 = !DILocation(line: 3941, column: 7, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6880, file: !3, line: 3941, column: 7)
!6892 = !DILocation(line: 3941, column: 15, scope: !6891)
!6893 = !DILocation(line: 3942, column: 7, scope: !6891)
!6894 = !DILocation(line: 3942, column: 12, scope: !6891)
!6895 = !DILocation(line: 3941, column: 7, scope: !6880)
!6896 = !DILocalVariable(name: "size", scope: !6897, file: !3, line: 3944, type: !874)
!6897 = distinct !DILexicalBlock(scope: !6891, file: !3, line: 3943, column: 5)
!6898 = !DILocation(line: 3944, column: 11, scope: !6897)
!6899 = !DILocation(line: 3946, column: 11, scope: !6900)
!6900 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 3946, column: 11)
!6901 = !DILocation(line: 3946, column: 26, scope: !6900)
!6902 = !DILocation(line: 3946, column: 30, scope: !6900)
!6903 = !DILocation(line: 3946, column: 11, scope: !6897)
!6904 = !DILocation(line: 3947, column: 16, scope: !6900)
!6905 = !DILocation(line: 3947, column: 31, scope: !6900)
!6906 = !DILocation(line: 3947, column: 14, scope: !6900)
!6907 = !DILocation(line: 3947, column: 9, scope: !6900)
!6908 = !DILocation(line: 3949, column: 20, scope: !6900)
!6909 = !DILocation(line: 3949, column: 18, scope: !6900)
!6910 = !DILocation(line: 3949, column: 35, scope: !6900)
!6911 = !DILocation(line: 3949, column: 14, scope: !6900)
!6912 = !DILocation(line: 3952, column: 7, scope: !6897)
!6913 = !DILocation(line: 3953, column: 5, scope: !6897)
!6914 = !DILocation(line: 3954, column: 1, scope: !6880)
!6915 = distinct !DISubprogram(name: "init_global_and_expr_for_insn", scope: !3, file: !3, line: 2832, type: !3100, scopeLine: 2833, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!6916 = !DILocalVariable(name: "insn", arg: 1, scope: !6915, file: !3, line: 2832, type: !2104)
!6917 = !DILocation(line: 2832, column: 39, scope: !6915)
!6918 = !DILocation(line: 2834, column: 7, scope: !6919)
!6919 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2834, column: 7)
!6920 = !DILocation(line: 2834, column: 7, scope: !6915)
!6921 = !DILocation(line: 2835, column: 5, scope: !6919)
!6922 = !DILocation(line: 2837, column: 7, scope: !6923)
!6923 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2837, column: 7)
!6924 = !DILocation(line: 2837, column: 7, scope: !6915)
!6925 = !DILocation(line: 2839, column: 34, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6923, file: !3, line: 2838, column: 5)
!6927 = !DILocation(line: 2840, column: 7, scope: !6926)
!6928 = !DILocation(line: 2843, column: 3, scope: !6915)
!6929 = !DILocation(line: 2845, column: 7, scope: !6930)
!6930 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2845, column: 7)
!6931 = !DILocation(line: 2845, column: 7, scope: !6915)
!6932 = !DILocalVariable(name: "prev_insn", scope: !6933, file: !3, line: 2848, type: !2104)
!6933 = distinct !DILexicalBlock(scope: !6930, file: !3, line: 2847, column: 5)
!6934 = !DILocation(line: 2848, column: 14, scope: !6933)
!6935 = !DILocation(line: 2848, column: 43, scope: !6933)
!6936 = !DILocation(line: 2850, column: 11, scope: !6937)
!6937 = distinct !DILexicalBlock(scope: !6933, file: !3, line: 2850, column: 11)
!6938 = !DILocation(line: 2850, column: 11, scope: !6933)
!6939 = !DILocation(line: 2851, column: 32, scope: !6937)
!6940 = !DILocation(line: 2851, column: 2, scope: !6937)
!6941 = !DILocation(line: 2851, column: 30, scope: !6937)
!6942 = !DILocation(line: 2853, column: 36, scope: !6933)
!6943 = !DILocation(line: 2853, column: 34, scope: !6933)
!6944 = !DILocation(line: 2854, column: 5, scope: !6933)
!6945 = !DILocation(line: 2856, column: 32, scope: !6930)
!6946 = !DILocation(line: 2858, column: 7, scope: !6947)
!6947 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2858, column: 7)
!6948 = !DILocation(line: 2858, column: 33, scope: !6947)
!6949 = !DILocation(line: 2859, column: 7, scope: !6947)
!6950 = !DILocation(line: 2859, column: 25, scope: !6947)
!6951 = !DILocation(line: 2859, column: 10, scope: !6947)
!6952 = !DILocation(line: 2859, column: 41, scope: !6947)
!6953 = !DILocation(line: 2858, column: 7, scope: !6915)
!6954 = !DILocation(line: 2861, column: 5, scope: !6947)
!6955 = !DILocation(line: 2861, column: 23, scope: !6947)
!6956 = !DILocalVariable(name: "force_unique_p", scope: !6957, file: !3, line: 2864, type: !1085)
!6957 = distinct !DILexicalBlock(scope: !6915, file: !3, line: 2863, column: 3)
!6958 = !DILocation(line: 2864, column: 10, scope: !6957)
!6959 = !DILocalVariable(name: "spec_done_ds", scope: !6957, file: !3, line: 2865, type: !2056)
!6960 = !DILocation(line: 2865, column: 10, scope: !6957)
!6961 = !DILocation(line: 2868, column: 9, scope: !6962)
!6962 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 2868, column: 9)
!6963 = !DILocation(line: 2869, column: 2, scope: !6962)
!6964 = !DILocation(line: 2869, column: 5, scope: !6962)
!6965 = !DILocation(line: 2870, column: 2, scope: !6962)
!6966 = !DILocation(line: 2870, column: 5, scope: !6962)
!6967 = !DILocation(line: 2871, column: 2, scope: !6962)
!6968 = !DILocation(line: 2871, column: 33, scope: !6962)
!6969 = !DILocation(line: 2871, column: 5, scope: !6962)
!6970 = !DILocation(line: 2873, column: 2, scope: !6962)
!6971 = !DILocation(line: 2873, column: 6, scope: !6962)
!6972 = !DILocation(line: 2873, column: 31, scope: !6962)
!6973 = !DILocation(line: 2873, column: 54, scope: !6962)
!6974 = !DILocation(line: 2873, column: 34, scope: !6962)
!6975 = !DILocation(line: 2875, column: 2, scope: !6962)
!6976 = !DILocation(line: 2875, column: 26, scope: !6962)
!6977 = !DILocation(line: 2875, column: 5, scope: !6962)
!6978 = !DILocation(line: 2868, column: 9, scope: !6957)
!6979 = !DILocation(line: 2876, column: 22, scope: !6962)
!6980 = !DILocation(line: 2876, column: 7, scope: !6962)
!6981 = !DILocation(line: 2878, column: 22, scope: !6962)
!6982 = !DILocation(line: 2880, column: 23, scope: !6983)
!6983 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 2880, column: 9)
!6984 = !DILocation(line: 2880, column: 9, scope: !6983)
!6985 = !DILocation(line: 2880, column: 9, scope: !6957)
!6986 = !DILocation(line: 2882, column: 31, scope: !6987)
!6987 = distinct !DILexicalBlock(scope: !6983, file: !3, line: 2881, column: 7)
!6988 = !DILocation(line: 2882, column: 49, scope: !6987)
!6989 = !DILocation(line: 2882, column: 17, scope: !6987)
!6990 = !DILocation(line: 2882, column: 15, scope: !6987)
!6991 = !DILocation(line: 2883, column: 38, scope: !6987)
!6992 = !DILocation(line: 2883, column: 17, scope: !6987)
!6993 = !DILocation(line: 2883, column: 15, scope: !6987)
!6994 = !DILocation(line: 2884, column: 7, scope: !6987)
!6995 = !DILocation(line: 2886, column: 20, scope: !6983)
!6996 = !DILocation(line: 2889, column: 16, scope: !6957)
!6997 = !DILocation(line: 2889, column: 48, scope: !6957)
!6998 = !DILocation(line: 2889, column: 54, scope: !6957)
!6999 = !DILocation(line: 2889, column: 34, scope: !6957)
!7000 = !DILocation(line: 2890, column: 27, scope: !6957)
!7001 = !DILocation(line: 2890, column: 52, scope: !6957)
!7002 = !DILocation(line: 2891, column: 9, scope: !6957)
!7003 = !DILocation(line: 2892, column: 16, scope: !6957)
!7004 = !DILocation(line: 2889, column: 5, scope: !6957)
!7005 = !DILocation(line: 2895, column: 30, scope: !6915)
!7006 = !DILocation(line: 2895, column: 3, scope: !6915)
!7007 = !DILocation(line: 2896, column: 1, scope: !6915)
!7008 = distinct !DISubprogram(name: "sel_finish_global_and_expr", scope: !3, file: !3, line: 2947, type: !2608, scopeLine: 2948, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7009 = !DILocalVariable(name: "bbs", scope: !7010, file: !3, line: 2950, type: !6854)
!7010 = distinct !DILexicalBlock(scope: !7008, file: !3, line: 2949, column: 3)
!7011 = !DILocation(line: 2950, column: 14, scope: !7010)
!7012 = !DILocalVariable(name: "i", scope: !7010, file: !3, line: 2951, type: !874)
!7013 = !DILocation(line: 2951, column: 9, scope: !7010)
!7014 = !DILocation(line: 2953, column: 11, scope: !7010)
!7015 = !DILocation(line: 2953, column: 9, scope: !7010)
!7016 = !DILocation(line: 2955, column: 12, scope: !7017)
!7017 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2955, column: 5)
!7018 = !DILocation(line: 2955, column: 10, scope: !7017)
!7019 = !DILocation(line: 2955, column: 17, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7017, file: !3, line: 2955, column: 5)
!7021 = !DILocation(line: 2955, column: 21, scope: !7020)
!7022 = !DILocation(line: 2955, column: 19, scope: !7020)
!7023 = !DILocation(line: 2955, column: 5, scope: !7017)
!7024 = !DILocation(line: 2956, column: 7, scope: !7020)
!7025 = !DILocation(line: 2955, column: 41, scope: !7020)
!7026 = !DILocation(line: 2955, column: 5, scope: !7020)
!7027 = distinct !{!7027, !7023, !7028}
!7028 = !DILocation(line: 2956, column: 7, scope: !7017)
!7029 = !DILocalVariable(name: "ssi", scope: !7030, file: !3, line: 2960, type: !6858)
!7030 = distinct !DILexicalBlock(scope: !7010, file: !3, line: 2959, column: 5)
!7031 = !DILocation(line: 2960, column: 40, scope: !7030)
!7032 = !DILocation(line: 2968, column: 25, scope: !7030)
!7033 = !DILocation(line: 2968, column: 7, scope: !7030)
!7034 = !DILocation(line: 2971, column: 5, scope: !7010)
!7035 = !DILocation(line: 2974, column: 3, scope: !7008)
!7036 = !DILocation(line: 2975, column: 1, scope: !7008)
!7037 = distinct !DISubprogram(name: "VEC_basic_block_heap_alloc", scope: !155, file: !155, line: 283, type: !7038, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7038 = !DISubroutineType(types: !7039)
!7039 = !{!2086, !874}
!7040 = !DILocalVariable(name: "alloc_", arg: 1, scope: !7037, file: !155, line: 283, type: !874)
!7041 = !DILocation(line: 283, column: 1, scope: !7037)
!7042 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !155, file: !155, line: 281, type: !7043, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7043 = !DISubroutineType(types: !7044)
!7044 = !{!7045, !7046, !1391}
!7045 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1391, size: 64)
!7046 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1528, size: 64)
!7047 = !DILocalVariable(name: "vec_", arg: 1, scope: !7042, file: !155, line: 281, type: !7046)
!7048 = !DILocation(line: 281, column: 1, scope: !7042)
!7049 = !DILocalVariable(name: "obj_", arg: 2, scope: !7042, file: !155, line: 281, type: !1391)
!7050 = !DILocalVariable(name: "slot_", scope: !7042, file: !155, line: 281, type: !7045)
!7051 = distinct !DISubprogram(name: "VEC_basic_block_base_index", scope: !155, file: !155, line: 281, type: !7052, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7052 = !DISubroutineType(types: !7053)
!7053 = !{!1391, !7054, !7}
!7054 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7055, size: 64)
!7055 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1528)
!7056 = !DILocalVariable(name: "vec_", arg: 1, scope: !7051, file: !155, line: 281, type: !7054)
!7057 = !DILocation(line: 281, column: 1, scope: !7051)
!7058 = !DILocalVariable(name: "ix_", arg: 2, scope: !7051, file: !155, line: 281, type: !7)
!7059 = !DILocation(line: 0, scope: !7051)
!7060 = distinct !DISubprogram(name: "finish_global_and_expr_for_bb", scope: !3, file: !3, line: 2916, type: !2478, scopeLine: 2917, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7061 = !DILocalVariable(name: "bb", arg: 1, scope: !7060, file: !3, line: 2916, type: !1391)
!7062 = !DILocation(line: 2916, column: 44, scope: !7060)
!7063 = !DILocation(line: 2918, column: 18, scope: !7060)
!7064 = !DILocation(line: 2918, column: 3, scope: !7060)
!7065 = !DILocation(line: 2919, column: 3, scope: !7060)
!7066 = !DILocation(line: 2919, column: 20, scope: !7060)
!7067 = !DILocation(line: 2920, column: 1, scope: !7060)
!7068 = distinct !DISubprogram(name: "finish_global_and_expr_insn", scope: !3, file: !3, line: 2924, type: !3100, scopeLine: 2925, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7069 = !DILocalVariable(name: "insn", arg: 1, scope: !7068, file: !3, line: 2924, type: !2104)
!7070 = !DILocation(line: 2924, column: 37, scope: !7068)
!7071 = !DILocation(line: 2926, column: 7, scope: !7072)
!7072 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2926, column: 7)
!7073 = !DILocation(line: 2926, column: 22, scope: !7072)
!7074 = !DILocation(line: 2926, column: 25, scope: !7072)
!7075 = !DILocation(line: 2926, column: 7, scope: !7068)
!7076 = !DILocation(line: 2927, column: 5, scope: !7072)
!7077 = !DILocation(line: 2929, column: 3, scope: !7068)
!7078 = !DILocation(line: 2931, column: 7, scope: !7079)
!7079 = distinct !DILexicalBlock(scope: !7068, file: !3, line: 2931, column: 7)
!7080 = !DILocation(line: 2931, column: 24, scope: !7079)
!7081 = !DILocation(line: 2931, column: 7, scope: !7068)
!7082 = !DILocation(line: 2933, column: 34, scope: !7083)
!7083 = distinct !DILexicalBlock(scope: !7079, file: !3, line: 2932, column: 5)
!7084 = !DILocation(line: 2933, column: 7, scope: !7083)
!7085 = !DILocation(line: 2934, column: 7, scope: !7083)
!7086 = !DILocation(line: 2934, column: 28, scope: !7083)
!7087 = !DILocation(line: 2935, column: 7, scope: !7083)
!7088 = !DILocation(line: 2935, column: 24, scope: !7083)
!7089 = !DILocation(line: 2941, column: 19, scope: !7083)
!7090 = !DILocation(line: 2941, column: 7, scope: !7083)
!7091 = !DILocation(line: 2942, column: 5, scope: !7083)
!7092 = !DILocation(line: 2943, column: 1, scope: !7068)
!7093 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !155, file: !155, line: 283, type: !7094, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7094 = !DISubroutineType(types: !7095)
!7095 = !{null, !7096}
!7096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2086, size: 64)
!7097 = !DILocalVariable(name: "vec_", arg: 1, scope: !7093, file: !155, line: 283, type: !7096)
!7098 = !DILocation(line: 283, column: 1, scope: !7093)
!7099 = !DILocation(line: 283, column: 1, scope: !7100)
!7100 = distinct !DILexicalBlock(scope: !7093, file: !155, line: 283, column: 1)
!7101 = distinct !DISubprogram(name: "finish_insns", scope: !3, file: !3, line: 3958, type: !2608, scopeLine: 3959, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7102 = !DILocalVariable(name: "i", scope: !7101, file: !3, line: 3960, type: !7)
!7103 = !DILocation(line: 3960, column: 12, scope: !7101)
!7104 = !DILocation(line: 3964, column: 10, scope: !7105)
!7105 = distinct !DILexicalBlock(scope: !7101, file: !3, line: 3964, column: 3)
!7106 = !DILocation(line: 3964, column: 8, scope: !7105)
!7107 = !DILocation(line: 3964, column: 15, scope: !7108)
!7108 = distinct !DILexicalBlock(scope: !7105, file: !3, line: 3964, column: 3)
!7109 = !DILocation(line: 3964, column: 19, scope: !7108)
!7110 = !DILocation(line: 3964, column: 17, scope: !7108)
!7111 = !DILocation(line: 3964, column: 3, scope: !7105)
!7112 = !DILocalVariable(name: "sid_entry", scope: !7113, file: !3, line: 3966, type: !2668)
!7113 = distinct !DILexicalBlock(scope: !7108, file: !3, line: 3965, column: 5)
!7114 = !DILocation(line: 3966, column: 26, scope: !7113)
!7115 = !DILocation(line: 3966, column: 38, scope: !7113)
!7116 = !DILocation(line: 3968, column: 11, scope: !7117)
!7117 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 3968, column: 11)
!7118 = !DILocation(line: 3968, column: 22, scope: !7117)
!7119 = !DILocation(line: 3968, column: 11, scope: !7113)
!7120 = !DILocation(line: 3969, column: 32, scope: !7117)
!7121 = !DILocation(line: 3969, column: 43, scope: !7117)
!7122 = !DILocation(line: 3969, column: 9, scope: !7117)
!7123 = !DILocation(line: 3970, column: 11, scope: !7124)
!7124 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 3970, column: 11)
!7125 = !DILocation(line: 3970, column: 22, scope: !7124)
!7126 = !DILocation(line: 3970, column: 11, scope: !7113)
!7127 = !DILocation(line: 3972, column: 4, scope: !7128)
!7128 = distinct !DILexicalBlock(scope: !7124, file: !3, line: 3971, column: 2)
!7129 = !DILocation(line: 3973, column: 4, scope: !7128)
!7130 = !DILocation(line: 3974, column: 24, scope: !7128)
!7131 = !DILocation(line: 3974, column: 35, scope: !7128)
!7132 = !DILocation(line: 3974, column: 11, scope: !7128)
!7133 = !DILocation(line: 3975, column: 16, scope: !7128)
!7134 = !DILocation(line: 3975, column: 27, scope: !7128)
!7135 = !DILocation(line: 3975, column: 4, scope: !7128)
!7136 = !DILocation(line: 3976, column: 2, scope: !7128)
!7137 = !DILocation(line: 3977, column: 11, scope: !7138)
!7138 = distinct !DILexicalBlock(scope: !7113, file: !3, line: 3977, column: 11)
!7139 = !DILocation(line: 3977, column: 11, scope: !7113)
!7140 = !DILocation(line: 3979, column: 24, scope: !7141)
!7141 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 3978, column: 9)
!7142 = !DILocation(line: 3979, column: 35, scope: !7141)
!7143 = !DILocation(line: 3979, column: 11, scope: !7141)
!7144 = !DILocation(line: 3983, column: 11, scope: !7141)
!7145 = !DILocation(line: 3983, column: 33, scope: !7141)
!7146 = !DILocation(line: 3984, column: 9, scope: !7141)
!7147 = !DILocation(line: 3985, column: 5, scope: !7113)
!7148 = !DILocation(line: 3964, column: 59, scope: !7108)
!7149 = !DILocation(line: 3964, column: 3, scope: !7108)
!7150 = distinct !{!7150, !7111, !7151}
!7151 = !DILocation(line: 3985, column: 5, scope: !7105)
!7152 = !DILocation(line: 3987, column: 3, scope: !7101)
!7153 = !DILocation(line: 3988, column: 1, scope: !7101)
!7154 = distinct !DISubprogram(name: "sel_mark_hard_insn", scope: !3, file: !3, line: 3164, type: !2604, scopeLine: 3165, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7155 = !DILocalVariable(name: "insn", arg: 1, scope: !7154, file: !3, line: 3164, type: !850)
!7156 = !DILocation(line: 3164, column: 25, scope: !7154)
!7157 = !DILocalVariable(name: "i", scope: !7154, file: !3, line: 3166, type: !874)
!7158 = !DILocation(line: 3166, column: 7, scope: !7154)
!7159 = !DILocation(line: 3170, column: 28, scope: !7160)
!7160 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 3170, column: 7)
!7161 = !DILocation(line: 3170, column: 8, scope: !7160)
!7162 = !DILocation(line: 3170, column: 31, scope: !7160)
!7163 = !DILocation(line: 3170, column: 55, scope: !7160)
!7164 = !DILocation(line: 3170, column: 35, scope: !7160)
!7165 = !DILocation(line: 3170, column: 7, scope: !7154)
!7166 = !DILocation(line: 3171, column: 5, scope: !7160)
!7167 = !DILocation(line: 3173, column: 3, scope: !7154)
!7168 = !DILocation(line: 3174, column: 3, scope: !7154)
!7169 = !DILocation(line: 3176, column: 10, scope: !7170)
!7170 = distinct !DILexicalBlock(scope: !7154, file: !3, line: 3176, column: 3)
!7171 = !DILocation(line: 3176, column: 8, scope: !7170)
!7172 = !DILocation(line: 3176, column: 15, scope: !7173)
!7173 = distinct !DILexicalBlock(scope: !7170, file: !3, line: 3176, column: 3)
!7174 = !DILocation(line: 3176, column: 17, scope: !7173)
!7175 = !DILocation(line: 3176, column: 3, scope: !7170)
!7176 = !DILocation(line: 3177, column: 35, scope: !7173)
!7177 = !DILocation(line: 3177, column: 5, scope: !7173)
!7178 = !DILocation(line: 3177, column: 38, scope: !7173)
!7179 = !DILocation(line: 3176, column: 37, scope: !7173)
!7180 = !DILocation(line: 3176, column: 3, scope: !7173)
!7181 = distinct !{!7181, !7175, !7182}
!7182 = !DILocation(line: 3177, column: 42, scope: !7170)
!7183 = !DILocation(line: 3178, column: 1, scope: !7154)
!7184 = distinct !DISubprogram(name: "sel_clear_has_dependence", scope: !3, file: !3, line: 3222, type: !2608, scopeLine: 3223, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7185 = !DILocalVariable(name: "i", scope: !7184, file: !3, line: 3224, type: !874)
!7186 = !DILocation(line: 3224, column: 7, scope: !7184)
!7187 = !DILocation(line: 3226, column: 10, scope: !7188)
!7188 = distinct !DILexicalBlock(scope: !7184, file: !3, line: 3226, column: 3)
!7189 = !DILocation(line: 3226, column: 8, scope: !7188)
!7190 = !DILocation(line: 3226, column: 15, scope: !7191)
!7191 = distinct !DILexicalBlock(scope: !7188, file: !3, line: 3226, column: 3)
!7192 = !DILocation(line: 3226, column: 17, scope: !7191)
!7193 = !DILocation(line: 3226, column: 3, scope: !7188)
!7194 = !DILocation(line: 3227, column: 35, scope: !7191)
!7195 = !DILocation(line: 3227, column: 5, scope: !7191)
!7196 = !DILocation(line: 3227, column: 38, scope: !7191)
!7197 = !DILocation(line: 3226, column: 37, scope: !7191)
!7198 = !DILocation(line: 3226, column: 3, scope: !7191)
!7199 = distinct !{!7199, !7193, !7200}
!7200 = !DILocation(line: 3227, column: 40, scope: !7188)
!7201 = !DILocation(line: 3228, column: 1, scope: !7184)
!7202 = distinct !DISubprogram(name: "has_dependence_p", scope: !3, file: !3, line: 3233, type: !7203, scopeLine: 3234, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7203 = !DISubroutineType(types: !7204)
!7204 = !{!2056, !2578, !2104, !7205}
!7205 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7206, size: 64)
!7206 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2056, size: 64)
!7207 = !DILocalVariable(name: "expr", arg: 1, scope: !7202, file: !3, line: 3233, type: !2578)
!7208 = !DILocation(line: 3233, column: 26, scope: !7202)
!7209 = !DILocalVariable(name: "pred", arg: 2, scope: !7202, file: !3, line: 3233, type: !2104)
!7210 = !DILocation(line: 3233, column: 39, scope: !7202)
!7211 = !DILocalVariable(name: "has_dep_pp", arg: 3, scope: !7202, file: !3, line: 3233, type: !7205)
!7212 = !DILocation(line: 3233, column: 52, scope: !7202)
!7213 = !DILocalVariable(name: "i", scope: !7202, file: !3, line: 3235, type: !874)
!7214 = !DILocation(line: 3235, column: 7, scope: !7202)
!7215 = !DILocalVariable(name: "ds", scope: !7202, file: !3, line: 3236, type: !2056)
!7216 = !DILocation(line: 3236, column: 8, scope: !7202)
!7217 = !DILocalVariable(name: "dc", scope: !7202, file: !3, line: 3237, type: !2113)
!7218 = !DILocation(line: 3237, column: 16, scope: !7202)
!7219 = !DILocation(line: 3239, column: 7, scope: !7220)
!7220 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3239, column: 7)
!7221 = !DILocation(line: 3239, column: 7, scope: !7202)
!7222 = !DILocation(line: 3242, column: 5, scope: !7220)
!7223 = !DILocation(line: 3244, column: 9, scope: !7202)
!7224 = !DILocation(line: 3244, column: 6, scope: !7202)
!7225 = !DILocation(line: 3247, column: 7, scope: !7226)
!7226 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3247, column: 7)
!7227 = !DILocation(line: 3247, column: 11, scope: !7226)
!7228 = !DILocation(line: 3247, column: 20, scope: !7226)
!7229 = !DILocation(line: 3247, column: 7, scope: !7202)
!7230 = !DILocation(line: 3248, column: 25, scope: !7226)
!7231 = !DILocation(line: 3248, column: 5, scope: !7226)
!7232 = !DILocation(line: 3250, column: 8, scope: !7233)
!7233 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3250, column: 7)
!7234 = !DILocation(line: 3250, column: 12, scope: !7233)
!7235 = !DILocation(line: 3250, column: 7, scope: !7202)
!7236 = !DILocation(line: 3252, column: 31, scope: !7237)
!7237 = distinct !DILexicalBlock(scope: !7233, file: !3, line: 3251, column: 5)
!7238 = !DILocation(line: 3254, column: 29, scope: !7237)
!7239 = !DILocation(line: 3254, column: 33, scope: !7237)
!7240 = !DILocation(line: 3254, column: 7, scope: !7237)
!7241 = !DILocation(line: 3255, column: 7, scope: !7237)
!7242 = !DILocation(line: 3255, column: 11, scope: !7237)
!7243 = !DILocation(line: 3255, column: 20, scope: !7237)
!7244 = !DILocation(line: 3256, column: 5, scope: !7237)
!7245 = !DILocation(line: 3258, column: 29, scope: !7202)
!7246 = !DILocation(line: 3259, column: 29, scope: !7202)
!7247 = !DILocation(line: 3259, column: 27, scope: !7202)
!7248 = !DILocation(line: 3260, column: 29, scope: !7202)
!7249 = !DILocation(line: 3260, column: 27, scope: !7202)
!7250 = !DILocation(line: 3261, column: 28, scope: !7202)
!7251 = !DILocation(line: 3261, column: 26, scope: !7202)
!7252 = !DILocation(line: 3263, column: 3, scope: !7202)
!7253 = !DILocation(line: 3267, column: 3, scope: !7202)
!7254 = !DILocation(line: 3268, column: 22, scope: !7202)
!7255 = !DILocation(line: 3268, column: 26, scope: !7202)
!7256 = !DILocation(line: 3268, column: 3, scope: !7202)
!7257 = !DILocation(line: 3269, column: 26, scope: !7202)
!7258 = !DILocation(line: 3272, column: 7, scope: !7259)
!7259 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3272, column: 7)
!7260 = !DILocation(line: 3272, column: 11, scope: !7259)
!7261 = !DILocation(line: 3272, column: 36, scope: !7259)
!7262 = !DILocation(line: 3272, column: 7, scope: !7202)
!7263 = !DILocation(line: 3273, column: 49, scope: !7259)
!7264 = !DILocation(line: 3273, column: 5, scope: !7259)
!7265 = !DILocation(line: 3274, column: 12, scope: !7266)
!7266 = distinct !DILexicalBlock(scope: !7259, file: !3, line: 3274, column: 12)
!7267 = !DILocation(line: 3274, column: 16, scope: !7266)
!7268 = !DILocation(line: 3274, column: 41, scope: !7266)
!7269 = !DILocation(line: 3274, column: 12, scope: !7259)
!7270 = !DILocation(line: 3275, column: 49, scope: !7266)
!7271 = !DILocation(line: 3275, column: 5, scope: !7266)
!7272 = !DILocation(line: 3281, column: 7, scope: !7273)
!7273 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3281, column: 7)
!7274 = !DILocation(line: 3282, column: 7, scope: !7273)
!7275 = !DILocation(line: 3282, column: 10, scope: !7273)
!7276 = !DILocation(line: 3283, column: 7, scope: !7273)
!7277 = !DILocation(line: 3283, column: 41, scope: !7273)
!7278 = !DILocation(line: 3283, column: 10, scope: !7273)
!7279 = !DILocation(line: 3281, column: 7, scope: !7202)
!7280 = !DILocation(line: 3284, column: 49, scope: !7273)
!7281 = !DILocation(line: 3284, column: 5, scope: !7273)
!7282 = !DILocation(line: 3286, column: 4, scope: !7202)
!7283 = !DILocation(line: 3286, column: 15, scope: !7202)
!7284 = !DILocation(line: 3287, column: 6, scope: !7202)
!7285 = !DILocation(line: 3288, column: 10, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7202, file: !3, line: 3288, column: 3)
!7287 = !DILocation(line: 3288, column: 8, scope: !7286)
!7288 = !DILocation(line: 3288, column: 15, scope: !7289)
!7289 = distinct !DILexicalBlock(scope: !7286, file: !3, line: 3288, column: 3)
!7290 = !DILocation(line: 3288, column: 17, scope: !7289)
!7291 = !DILocation(line: 3288, column: 3, scope: !7286)
!7292 = !DILocation(line: 3289, column: 25, scope: !7289)
!7293 = !DILocation(line: 3289, column: 59, scope: !7289)
!7294 = !DILocation(line: 3289, column: 29, scope: !7289)
!7295 = !DILocation(line: 3289, column: 10, scope: !7289)
!7296 = !DILocation(line: 3289, column: 8, scope: !7289)
!7297 = !DILocation(line: 3289, column: 5, scope: !7289)
!7298 = !DILocation(line: 3288, column: 37, scope: !7289)
!7299 = !DILocation(line: 3288, column: 3, scope: !7289)
!7300 = distinct !{!7300, !7291, !7301}
!7301 = !DILocation(line: 3290, column: 22, scope: !7286)
!7302 = !DILocation(line: 3292, column: 10, scope: !7202)
!7303 = !DILocation(line: 3292, column: 3, scope: !7202)
!7304 = !DILocation(line: 3293, column: 1, scope: !7202)
!7305 = distinct !DISubprogram(name: "setup_has_dependence_sched_deps_info", scope: !3, file: !3, line: 3208, type: !2608, scopeLine: 3209, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7306 = !DILocation(line: 3210, column: 3, scope: !7305)
!7307 = !DILocation(line: 3214, column: 7, scope: !7308)
!7308 = distinct !DILexicalBlock(scope: !7305, file: !3, line: 3214, column: 7)
!7309 = !DILocation(line: 3214, column: 17, scope: !7308)
!7310 = !DILocation(line: 3214, column: 7, scope: !7305)
!7311 = !DILocation(line: 3215, column: 55, scope: !7308)
!7312 = !DILocation(line: 3215, column: 5, scope: !7308)
!7313 = !DILocation(line: 3217, column: 19, scope: !7305)
!7314 = !DILocation(line: 3218, column: 1, scope: !7305)
!7315 = distinct !DISubprogram(name: "sel_insn_is_speculation_check", scope: !3, file: !3, line: 3446, type: !2714, scopeLine: 3447, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7316 = !DILocalVariable(name: "insn", arg: 1, scope: !7315, file: !3, line: 3446, type: !850)
!7317 = !DILocation(line: 3446, column: 36, scope: !7315)
!7318 = !DILocation(line: 3448, column: 10, scope: !7315)
!7319 = !DILocation(line: 3448, column: 16, scope: !7315)
!7320 = !DILocation(line: 3448, column: 22, scope: !7315)
!7321 = !DILocation(line: 3448, column: 20, scope: !7315)
!7322 = !DILocation(line: 3448, column: 19, scope: !7315)
!7323 = !DILocation(line: 0, scope: !7315)
!7324 = !DILocation(line: 3448, column: 3, scope: !7315)
!7325 = distinct !DISubprogram(name: "tick_check_p", scope: !3, file: !3, line: 3400, type: !7326, scopeLine: 3401, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7326 = !DISubroutineType(types: !7327)
!7327 = !{!874, !2578, !2112, !2940}
!7328 = !DILocalVariable(name: "expr", arg: 1, scope: !7325, file: !3, line: 3400, type: !2578)
!7329 = !DILocation(line: 3400, column: 22, scope: !7325)
!7330 = !DILocalVariable(name: "dc", arg: 2, scope: !7325, file: !3, line: 3400, type: !2112)
!7331 = !DILocation(line: 3400, column: 35, scope: !7325)
!7332 = !DILocalVariable(name: "fence", arg: 3, scope: !7325, file: !3, line: 3400, type: !2940)
!7333 = !DILocation(line: 3400, column: 47, scope: !7325)
!7334 = !DILocalVariable(name: "cycles_left", scope: !7325, file: !3, line: 3402, type: !874)
!7335 = !DILocation(line: 3402, column: 7, scope: !7325)
!7336 = !DILocation(line: 3404, column: 26, scope: !7325)
!7337 = !DILocation(line: 3404, column: 24, scope: !7325)
!7338 = !DILocation(line: 3405, column: 25, scope: !7325)
!7339 = !DILocation(line: 3406, column: 35, scope: !7325)
!7340 = !DILocation(line: 3407, column: 19, scope: !7325)
!7341 = !DILocation(line: 3409, column: 3, scope: !7325)
!7342 = !DILocation(line: 3410, column: 3, scope: !7325)
!7343 = !DILocation(line: 3410, column: 7, scope: !7325)
!7344 = !DILocation(line: 3410, column: 16, scope: !7325)
!7345 = !DILocation(line: 3411, column: 22, scope: !7325)
!7346 = !DILocation(line: 3411, column: 26, scope: !7325)
!7347 = !DILocation(line: 3411, column: 3, scope: !7325)
!7348 = !DILocation(line: 3412, column: 3, scope: !7325)
!7349 = !DILocation(line: 3412, column: 7, scope: !7325)
!7350 = !DILocation(line: 3412, column: 16, scope: !7325)
!7351 = !DILocation(line: 3414, column: 33, scope: !7325)
!7352 = !DILocation(line: 3414, column: 41, scope: !7325)
!7353 = !DILocation(line: 3414, column: 39, scope: !7325)
!7354 = !DILocation(line: 3414, column: 15, scope: !7325)
!7355 = !DILocation(line: 3416, column: 10, scope: !7325)
!7356 = !DILocation(line: 3416, column: 22, scope: !7325)
!7357 = !DILocation(line: 3416, column: 29, scope: !7325)
!7358 = !DILocation(line: 3416, column: 3, scope: !7325)
!7359 = distinct !DISubprogram(name: "lhs_of_insn_equals_to_dest_p", scope: !3, file: !3, line: 3425, type: !7360, scopeLine: 3426, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7360 = !DISubroutineType(types: !7361)
!7361 = !{!1085, !2104, !850}
!7362 = !DILocalVariable(name: "insn", arg: 1, scope: !7359, file: !3, line: 3425, type: !2104)
!7363 = !DILocation(line: 3425, column: 38, scope: !7359)
!7364 = !DILocalVariable(name: "dest", arg: 2, scope: !7359, file: !3, line: 3425, type: !850)
!7365 = !DILocation(line: 3425, column: 48, scope: !7359)
!7366 = !DILocalVariable(name: "lhs", scope: !7359, file: !3, line: 3427, type: !850)
!7367 = !DILocation(line: 3427, column: 7, scope: !7359)
!7368 = !DILocation(line: 3427, column: 13, scope: !7359)
!7369 = !DILocation(line: 3429, column: 7, scope: !7370)
!7370 = distinct !DILexicalBlock(scope: !7359, file: !3, line: 3429, column: 7)
!7371 = !DILocation(line: 3429, column: 11, scope: !7370)
!7372 = !DILocation(line: 3429, column: 19, scope: !7370)
!7373 = !DILocation(line: 3429, column: 22, scope: !7370)
!7374 = !DILocation(line: 3429, column: 27, scope: !7370)
!7375 = !DILocation(line: 3429, column: 7, scope: !7359)
!7376 = !DILocation(line: 3430, column: 5, scope: !7370)
!7377 = !DILocation(line: 3432, column: 23, scope: !7359)
!7378 = !DILocation(line: 3432, column: 28, scope: !7359)
!7379 = !DILocation(line: 3432, column: 10, scope: !7359)
!7380 = !DILocation(line: 3432, column: 3, scope: !7359)
!7381 = !DILocation(line: 3433, column: 1, scope: !7359)
!7382 = distinct !DISubprogram(name: "insn_sid", scope: !3, file: !3, line: 3437, type: !7383, scopeLine: 3438, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7383 = !DISubroutineType(types: !7384)
!7384 = !{!2281, !2104}
!7385 = !DILocalVariable(name: "insn", arg: 1, scope: !7382, file: !3, line: 3437, type: !2104)
!7386 = !DILocation(line: 3437, column: 18, scope: !7382)
!7387 = !DILocation(line: 3439, column: 11, scope: !7382)
!7388 = !DILocation(line: 3439, column: 10, scope: !7382)
!7389 = !DILocation(line: 3439, column: 3, scope: !7382)
!7390 = distinct !DISubprogram(name: "get_dest_and_mode", scope: !3, file: !3, line: 3454, type: !7391, scopeLine: 3455, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7391 = !DISubroutineType(types: !7392)
!7392 = !{null, !850, !2055, !7393}
!7393 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5, size: 64)
!7394 = !DILocalVariable(name: "insn", arg: 1, scope: !7390, file: !3, line: 3454, type: !850)
!7395 = !DILocation(line: 3454, column: 24, scope: !7390)
!7396 = !DILocalVariable(name: "dst_loc", arg: 2, scope: !7390, file: !3, line: 3454, type: !2055)
!7397 = !DILocation(line: 3454, column: 35, scope: !7390)
!7398 = !DILocalVariable(name: "mode", arg: 3, scope: !7390, file: !3, line: 3454, type: !7393)
!7399 = !DILocation(line: 3454, column: 63, scope: !7390)
!7400 = !DILocalVariable(name: "pat", scope: !7390, file: !3, line: 3456, type: !850)
!7401 = !DILocation(line: 3456, column: 7, scope: !7390)
!7402 = !DILocation(line: 3456, column: 13, scope: !7390)
!7403 = !DILocation(line: 3458, column: 3, scope: !7390)
!7404 = !DILocation(line: 3459, column: 3, scope: !7390)
!7405 = !DILocation(line: 3461, column: 14, scope: !7390)
!7406 = !DILocation(line: 3461, column: 4, scope: !7390)
!7407 = !DILocation(line: 3461, column: 12, scope: !7390)
!7408 = !DILocation(line: 3463, column: 3, scope: !7390)
!7409 = !DILocation(line: 3464, column: 3, scope: !7390)
!7410 = !DILocation(line: 3466, column: 7, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7390, file: !3, line: 3466, column: 7)
!7412 = !DILocation(line: 3466, column: 7, scope: !7390)
!7413 = !DILocation(line: 3467, column: 13, scope: !7411)
!7414 = !DILocation(line: 3467, column: 6, scope: !7411)
!7415 = !DILocation(line: 3467, column: 11, scope: !7411)
!7416 = !DILocation(line: 3467, column: 5, scope: !7411)
!7417 = !DILocation(line: 3468, column: 1, scope: !7390)
!7418 = distinct !DISubprogram(name: "bookkeeping_can_be_created_if_moved_through_p", scope: !3, file: !3, line: 3473, type: !6844, scopeLine: 3474, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7419 = !DILocalVariable(name: "jump", arg: 1, scope: !7418, file: !3, line: 3473, type: !2104)
!7420 = !DILocation(line: 3473, column: 55, scope: !7418)
!7421 = !DILocalVariable(name: "succ", scope: !7418, file: !3, line: 3475, type: !2104)
!7422 = !DILocation(line: 3475, column: 10, scope: !7418)
!7423 = !DILocalVariable(name: "si", scope: !7418, file: !3, line: 3476, type: !3107)
!7424 = !DILocation(line: 3476, column: 17, scope: !7418)
!7425 = !DILocation(line: 3478, column: 3, scope: !7426)
!7426 = distinct !DILexicalBlock(scope: !7418, file: !3, line: 3478, column: 3)
!7427 = !DILocation(line: 3478, column: 3, scope: !7428)
!7428 = distinct !DILexicalBlock(scope: !7426, file: !3, line: 3478, column: 3)
!7429 = !DILocation(line: 3479, column: 33, scope: !7430)
!7430 = distinct !DILexicalBlock(scope: !7428, file: !3, line: 3479, column: 9)
!7431 = !DILocation(line: 3479, column: 9, scope: !7430)
!7432 = !DILocation(line: 3479, column: 9, scope: !7428)
!7433 = !DILocation(line: 3480, column: 7, scope: !7430)
!7434 = !DILocation(line: 3479, column: 37, scope: !7430)
!7435 = distinct !{!7435, !7425, !7436}
!7436 = !DILocation(line: 3480, column: 14, scope: !7426)
!7437 = !DILocation(line: 3482, column: 3, scope: !7418)
!7438 = !DILocation(line: 3483, column: 1, scope: !7418)
!7439 = distinct !DISubprogram(name: "sel_num_cfg_preds_gt_1", scope: !3, file: !3, line: 4618, type: !6844, scopeLine: 4619, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7440 = !DILocalVariable(name: "insn", arg: 1, scope: !7439, file: !3, line: 4618, type: !2104)
!7441 = !DILocation(line: 4618, column: 32, scope: !7439)
!7442 = !DILocalVariable(name: "bb", scope: !7439, file: !3, line: 4620, type: !1391)
!7443 = !DILocation(line: 4620, column: 15, scope: !7439)
!7444 = !DILocation(line: 4622, column: 23, scope: !7445)
!7445 = distinct !DILexicalBlock(scope: !7439, file: !3, line: 4622, column: 7)
!7446 = !DILocation(line: 4622, column: 8, scope: !7445)
!7447 = !DILocation(line: 4622, column: 29, scope: !7445)
!7448 = !DILocation(line: 4622, column: 32, scope: !7445)
!7449 = !DILocation(line: 4622, column: 47, scope: !7445)
!7450 = !DILocation(line: 4622, column: 7, scope: !7439)
!7451 = !DILocation(line: 4623, column: 5, scope: !7445)
!7452 = !DILocation(line: 4625, column: 8, scope: !7439)
!7453 = !DILocation(line: 4625, column: 6, scope: !7439)
!7454 = !DILocation(line: 4627, column: 3, scope: !7439)
!7455 = !DILocation(line: 4629, column: 11, scope: !7456)
!7456 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4629, column: 11)
!7457 = distinct !DILexicalBlock(scope: !7439, file: !3, line: 4628, column: 5)
!7458 = !DILocation(line: 4629, column: 34, scope: !7456)
!7459 = !DILocation(line: 4629, column: 11, scope: !7457)
!7460 = !DILocation(line: 4630, column: 2, scope: !7456)
!7461 = !DILocation(line: 4632, column: 7, scope: !7457)
!7462 = !DILocation(line: 4633, column: 12, scope: !7457)
!7463 = !DILocation(line: 4633, column: 31, scope: !7457)
!7464 = !DILocation(line: 4633, column: 10, scope: !7457)
!7465 = !DILocation(line: 4635, column: 28, scope: !7466)
!7466 = distinct !DILexicalBlock(scope: !7457, file: !3, line: 4635, column: 11)
!7467 = !DILocation(line: 4635, column: 12, scope: !7466)
!7468 = !DILocation(line: 4635, column: 11, scope: !7457)
!7469 = !DILocation(line: 4636, column: 2, scope: !7466)
!7470 = distinct !{!7470, !7454, !7471}
!7471 = !DILocation(line: 4637, column: 5, scope: !7439)
!7472 = !DILocation(line: 4639, column: 3, scope: !7439)
!7473 = !DILocation(line: 4640, column: 1, scope: !7439)
!7474 = distinct !DISubprogram(name: "tidy_control_flow", scope: !3, file: !3, line: 3632, type: !7475, scopeLine: 3633, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7475 = !DISubroutineType(types: !7476)
!7476 = !{!1085, !1391, !1085}
!7477 = !DILocalVariable(name: "xbb", arg: 1, scope: !7474, file: !3, line: 3632, type: !1391)
!7478 = !DILocation(line: 3632, column: 32, scope: !7474)
!7479 = !DILocalVariable(name: "full_tidying", arg: 2, scope: !7474, file: !3, line: 3632, type: !1085)
!7480 = !DILocation(line: 3632, column: 42, scope: !7474)
!7481 = !DILocalVariable(name: "changed", scope: !7474, file: !3, line: 3634, type: !1085)
!7482 = !DILocation(line: 3634, column: 8, scope: !7474)
!7483 = !DILocalVariable(name: "first", scope: !7474, file: !3, line: 3635, type: !2104)
!7484 = !DILocation(line: 3635, column: 10, scope: !7474)
!7485 = !DILocalVariable(name: "last", scope: !7474, file: !3, line: 3635, type: !2104)
!7486 = !DILocation(line: 3635, column: 17, scope: !7474)
!7487 = !DILocation(line: 3638, column: 34, scope: !7474)
!7488 = !DILocation(line: 3638, column: 13, scope: !7474)
!7489 = !DILocation(line: 3638, column: 11, scope: !7474)
!7490 = !DILocation(line: 3639, column: 7, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3639, column: 7)
!7492 = !DILocation(line: 3639, column: 15, scope: !7491)
!7493 = !DILocation(line: 3639, column: 19, scope: !7491)
!7494 = !DILocation(line: 3639, column: 7, scope: !7474)
!7495 = !DILocation(line: 3640, column: 12, scope: !7491)
!7496 = !DILocation(line: 3640, column: 5, scope: !7491)
!7497 = !DILocation(line: 3643, column: 32, scope: !7498)
!7498 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3643, column: 7)
!7499 = !DILocation(line: 3643, column: 46, scope: !7498)
!7500 = !DILocation(line: 3643, column: 51, scope: !7498)
!7501 = !DILocation(line: 3643, column: 7, scope: !7498)
!7502 = !DILocation(line: 3644, column: 7, scope: !7498)
!7503 = !DILocation(line: 3644, column: 10, scope: !7498)
!7504 = !DILocation(line: 3644, column: 42, scope: !7498)
!7505 = !DILocation(line: 3645, column: 7, scope: !7498)
!7506 = !DILocation(line: 3645, column: 11, scope: !7498)
!7507 = !DILocation(line: 3643, column: 7, scope: !7474)
!7508 = !DILocation(line: 3647, column: 28, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7510, file: !3, line: 3647, column: 11)
!7510 = distinct !DILexicalBlock(scope: !7498, file: !3, line: 3646, column: 5)
!7511 = !DILocation(line: 3647, column: 11, scope: !7509)
!7512 = !DILocation(line: 3647, column: 11, scope: !7510)
!7513 = !DILocation(line: 3648, column: 9, scope: !7509)
!7514 = !DILocation(line: 3649, column: 27, scope: !7510)
!7515 = !DILocation(line: 3649, column: 7, scope: !7510)
!7516 = !DILocation(line: 3650, column: 5, scope: !7510)
!7517 = !DILocation(line: 3652, column: 24, scope: !7474)
!7518 = !DILocation(line: 3652, column: 11, scope: !7474)
!7519 = !DILocation(line: 3652, column: 9, scope: !7474)
!7520 = !DILocation(line: 3653, column: 22, scope: !7474)
!7521 = !DILocation(line: 3653, column: 10, scope: !7474)
!7522 = !DILocation(line: 3653, column: 8, scope: !7474)
!7523 = !DILocation(line: 3654, column: 7, scope: !7524)
!7524 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3654, column: 7)
!7525 = !DILocation(line: 3654, column: 7, scope: !7474)
!7526 = !DILocation(line: 3656, column: 11, scope: !7527)
!7527 = distinct !DILexicalBlock(scope: !7528, file: !3, line: 3656, column: 11)
!7528 = distinct !DILexicalBlock(scope: !7524, file: !3, line: 3655, column: 5)
!7529 = !DILocation(line: 3656, column: 20, scope: !7527)
!7530 = !DILocation(line: 3656, column: 17, scope: !7527)
!7531 = !DILocation(line: 3656, column: 25, scope: !7527)
!7532 = !DILocation(line: 3656, column: 28, scope: !7527)
!7533 = !DILocation(line: 3656, column: 11, scope: !7528)
!7534 = !DILocation(line: 3657, column: 2, scope: !7527)
!7535 = !DILocation(line: 3658, column: 12, scope: !7527)
!7536 = !DILocation(line: 3658, column: 10, scope: !7527)
!7537 = !DILocation(line: 3658, column: 4, scope: !7527)
!7538 = !DILocation(line: 3659, column: 9, scope: !7527)
!7539 = !DILocation(line: 3659, column: 18, scope: !7527)
!7540 = !DILocation(line: 3659, column: 15, scope: !7527)
!7541 = !DILocation(line: 3659, column: 23, scope: !7527)
!7542 = !DILocation(line: 3659, column: 27, scope: !7527)
!7543 = !DILocation(line: 3659, column: 48, scope: !7527)
!7544 = !DILocation(line: 3659, column: 51, scope: !7527)
!7545 = !DILocation(line: 0, scope: !7527)
!7546 = distinct !{!7546, !7534, !7547}
!7547 = !DILocation(line: 3659, column: 66, scope: !7527)
!7548 = !DILocation(line: 3661, column: 11, scope: !7549)
!7549 = distinct !DILexicalBlock(scope: !7528, file: !3, line: 3661, column: 11)
!7550 = !DILocation(line: 3661, column: 20, scope: !7549)
!7551 = !DILocation(line: 3661, column: 17, scope: !7549)
!7552 = !DILocation(line: 3661, column: 25, scope: !7549)
!7553 = !DILocation(line: 3661, column: 28, scope: !7549)
!7554 = !DILocation(line: 3661, column: 11, scope: !7528)
!7555 = !DILocation(line: 3662, column: 2, scope: !7549)
!7556 = !DILocation(line: 3663, column: 11, scope: !7549)
!7557 = !DILocation(line: 3663, column: 9, scope: !7549)
!7558 = !DILocation(line: 3663, column: 4, scope: !7549)
!7559 = !DILocation(line: 3664, column: 9, scope: !7549)
!7560 = !DILocation(line: 3664, column: 18, scope: !7549)
!7561 = !DILocation(line: 3664, column: 15, scope: !7549)
!7562 = !DILocation(line: 3664, column: 23, scope: !7549)
!7563 = !DILocation(line: 3664, column: 27, scope: !7549)
!7564 = !DILocation(line: 3664, column: 47, scope: !7549)
!7565 = !DILocation(line: 3664, column: 50, scope: !7549)
!7566 = !DILocation(line: 0, scope: !7549)
!7567 = distinct !{!7567, !7555, !7568}
!7568 = !DILocation(line: 3664, column: 64, scope: !7549)
!7569 = !DILocation(line: 3665, column: 5, scope: !7528)
!7570 = !DILocation(line: 3673, column: 7, scope: !7571)
!7571 = distinct !DILexicalBlock(scope: !7474, file: !3, line: 3673, column: 7)
!7572 = !DILocation(line: 3673, column: 16, scope: !7571)
!7573 = !DILocation(line: 3673, column: 13, scope: !7571)
!7574 = !DILocation(line: 3674, column: 7, scope: !7571)
!7575 = !DILocation(line: 3674, column: 27, scope: !7571)
!7576 = !DILocation(line: 3674, column: 11, scope: !7571)
!7577 = !DILocation(line: 3675, column: 7, scope: !7571)
!7578 = !DILocation(line: 3675, column: 10, scope: !7571)
!7579 = !DILocation(line: 3677, column: 7, scope: !7571)
!7580 = !DILocation(line: 3677, column: 10, scope: !7571)
!7581 = !DILocation(line: 3677, column: 34, scope: !7571)
!7582 = !DILocation(line: 3678, column: 7, scope: !7571)
!7583 = !DILocation(line: 3678, column: 11, scope: !7571)
!7584 = !DILocation(line: 3678, column: 31, scope: !7571)
!7585 = !DILocation(line: 3678, column: 37, scope: !7571)
!7586 = !DILocation(line: 3680, column: 7, scope: !7571)
!7587 = !DILocation(line: 3680, column: 23, scope: !7571)
!7588 = !DILocation(line: 3680, column: 10, scope: !7571)
!7589 = !DILocation(line: 3680, column: 31, scope: !7571)
!7590 = !DILocation(line: 3680, column: 28, scope: !7571)
!7591 = !DILocation(line: 3683, column: 7, scope: !7571)
!7592 = !DILocation(line: 3683, column: 31, scope: !7571)
!7593 = !DILocation(line: 3683, column: 36, scope: !7571)
!7594 = !DILocation(line: 3683, column: 10, scope: !7571)
!7595 = !DILocation(line: 3684, column: 7, scope: !7571)
!7596 = !DILocation(line: 3684, column: 35, scope: !7571)
!7597 = !DILocation(line: 3684, column: 58, scope: !7571)
!7598 = !DILocation(line: 3684, column: 63, scope: !7571)
!7599 = !DILocation(line: 3684, column: 10, scope: !7571)
!7600 = !DILocation(line: 3685, column: 7, scope: !7571)
!7601 = !DILocation(line: 3685, column: 10, scope: !7571)
!7602 = !DILocation(line: 3685, column: 51, scope: !7571)
!7603 = !DILocation(line: 3687, column: 7, scope: !7571)
!7604 = !DILocation(line: 3687, column: 11, scope: !7571)
!7605 = !DILocation(line: 3673, column: 7, scope: !7474)
!7606 = !DILocalVariable(name: "recompute_toporder_p", scope: !7607, file: !3, line: 3689, type: !1085)
!7607 = distinct !DILexicalBlock(scope: !7571, file: !3, line: 3688, column: 5)
!7608 = !DILocation(line: 3689, column: 12, scope: !7607)
!7609 = !DILocation(line: 3692, column: 19, scope: !7607)
!7610 = !DILocation(line: 3692, column: 7, scope: !7607)
!7611 = !DILocation(line: 3694, column: 41, scope: !7607)
!7612 = !DILocation(line: 3694, column: 70, scope: !7607)
!7613 = !DILocation(line: 3694, column: 11, scope: !7607)
!7614 = !DILocation(line: 3694, column: 9, scope: !7607)
!7615 = !DILocation(line: 3696, column: 7, scope: !7607)
!7616 = !DILocation(line: 3701, column: 27, scope: !7617)
!7617 = distinct !DILexicalBlock(scope: !7607, file: !3, line: 3701, column: 11)
!7618 = !DILocation(line: 3701, column: 32, scope: !7617)
!7619 = !DILocation(line: 3701, column: 11, scope: !7617)
!7620 = !DILocation(line: 3701, column: 11, scope: !7607)
!7621 = !DILocation(line: 3702, column: 40, scope: !7617)
!7622 = !DILocation(line: 3702, column: 45, scope: !7617)
!7623 = !DILocation(line: 3702, column: 54, scope: !7617)
!7624 = !DILocation(line: 3702, column: 19, scope: !7617)
!7625 = !DILocation(line: 3702, column: 17, scope: !7617)
!7626 = !DILocation(line: 3702, column: 9, scope: !7617)
!7627 = !DILocation(line: 3703, column: 16, scope: !7628)
!7628 = distinct !DILexicalBlock(scope: !7617, file: !3, line: 3703, column: 16)
!7629 = !DILocation(line: 3703, column: 16, scope: !7617)
!7630 = !DILocation(line: 3704, column: 2, scope: !7628)
!7631 = !DILocation(line: 3705, column: 5, scope: !7607)
!7632 = !DILocation(line: 3707, column: 10, scope: !7474)
!7633 = !DILocation(line: 3707, column: 3, scope: !7474)
!7634 = !DILocation(line: 3708, column: 1, scope: !7474)
!7635 = distinct !DISubprogram(name: "maybe_tidy_empty_bb", scope: !3, file: !3, line: 3547, type: !7475, scopeLine: 3548, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7636 = !DILocalVariable(name: "bb", arg: 1, scope: !7635, file: !3, line: 3547, type: !1391)
!7637 = !DILocation(line: 3547, column: 34, scope: !7635)
!7638 = !DILocalVariable(name: "recompute_toporder_p", arg: 2, scope: !7635, file: !3, line: 3547, type: !1085)
!7639 = !DILocation(line: 3547, column: 43, scope: !7635)
!7640 = !DILocalVariable(name: "succ_bb", scope: !7635, file: !3, line: 3549, type: !1391)
!7641 = !DILocation(line: 3549, column: 15, scope: !7635)
!7642 = !DILocalVariable(name: "pred_bb", scope: !7635, file: !3, line: 3549, type: !1391)
!7643 = !DILocation(line: 3549, column: 24, scope: !7635)
!7644 = !DILocalVariable(name: "e", scope: !7635, file: !3, line: 3550, type: !1408)
!7645 = !DILocation(line: 3550, column: 8, scope: !7635)
!7646 = !DILocalVariable(name: "ei", scope: !7635, file: !3, line: 3551, type: !3114)
!7647 = !DILocation(line: 3551, column: 17, scope: !7635)
!7648 = !DILocalVariable(name: "rescan_p", scope: !7635, file: !3, line: 3552, type: !1085)
!7649 = !DILocation(line: 3552, column: 8, scope: !7635)
!7650 = !DILocation(line: 3557, column: 24, scope: !7651)
!7651 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3557, column: 7)
!7652 = !DILocation(line: 3557, column: 8, scope: !7651)
!7653 = !DILocation(line: 3558, column: 7, scope: !7651)
!7654 = !DILocation(line: 3558, column: 26, scope: !7651)
!7655 = !DILocation(line: 3558, column: 11, scope: !7651)
!7656 = !DILocation(line: 3559, column: 11, scope: !7651)
!7657 = !DILocation(line: 3559, column: 27, scope: !7651)
!7658 = !DILocation(line: 3559, column: 14, scope: !7651)
!7659 = !DILocation(line: 3559, column: 34, scope: !7651)
!7660 = !DILocation(line: 3559, column: 31, scope: !7651)
!7661 = !DILocation(line: 3560, column: 11, scope: !7651)
!7662 = !DILocation(line: 3560, column: 31, scope: !7651)
!7663 = !DILocation(line: 3560, column: 16, scope: !7651)
!7664 = !DILocation(line: 3561, column: 15, scope: !7651)
!7665 = !DILocation(line: 3561, column: 38, scope: !7651)
!7666 = !DILocation(line: 3561, column: 20, scope: !7651)
!7667 = !DILocation(line: 3561, column: 43, scope: !7651)
!7668 = !DILocation(line: 3561, column: 49, scope: !7651)
!7669 = !DILocation(line: 3562, column: 7, scope: !7651)
!7670 = !DILocation(line: 3562, column: 10, scope: !7651)
!7671 = !DILocation(line: 3562, column: 33, scope: !7651)
!7672 = !DILocation(line: 3563, column: 7, scope: !7651)
!7673 = !DILocation(line: 3563, column: 10, scope: !7651)
!7674 = !DILocation(line: 3563, column: 33, scope: !7651)
!7675 = !DILocation(line: 3557, column: 7, scope: !7635)
!7676 = !DILocation(line: 3564, column: 5, scope: !7651)
!7677 = !DILocation(line: 3567, column: 3, scope: !7678)
!7678 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3567, column: 3)
!7679 = !DILocation(line: 3567, column: 3, scope: !7680)
!7680 = distinct !DILexicalBlock(scope: !7678, file: !3, line: 3567, column: 3)
!7681 = !DILocation(line: 3568, column: 9, scope: !7682)
!7682 = distinct !DILexicalBlock(scope: !7680, file: !3, line: 3568, column: 9)
!7683 = !DILocation(line: 3568, column: 12, scope: !7682)
!7684 = !DILocation(line: 3568, column: 18, scope: !7682)
!7685 = !DILocation(line: 3568, column: 9, scope: !7680)
!7686 = !DILocation(line: 3569, column: 7, scope: !7682)
!7687 = !DILocation(line: 3568, column: 20, scope: !7682)
!7688 = distinct !{!7688, !7677, !7689}
!7689 = !DILocation(line: 3569, column: 14, scope: !7678)
!7690 = !DILocation(line: 3571, column: 19, scope: !7635)
!7691 = !DILocation(line: 3571, column: 3, scope: !7635)
!7692 = !DILocation(line: 3575, column: 23, scope: !7693)
!7693 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3575, column: 7)
!7694 = !DILocation(line: 3575, column: 8, scope: !7693)
!7695 = !DILocation(line: 3575, column: 7, scope: !7635)
!7696 = !DILocation(line: 3577, column: 7, scope: !7697)
!7697 = distinct !DILexicalBlock(scope: !7693, file: !3, line: 3576, column: 5)
!7698 = !DILocation(line: 3578, column: 25, scope: !7697)
!7699 = !DILocation(line: 3578, column: 29, scope: !7697)
!7700 = !DILocation(line: 3578, column: 38, scope: !7697)
!7701 = !DILocation(line: 3578, column: 7, scope: !7697)
!7702 = !DILocation(line: 3579, column: 7, scope: !7697)
!7703 = !DILocation(line: 3582, column: 26, scope: !7635)
!7704 = !DILocation(line: 3582, column: 13, scope: !7635)
!7705 = !DILocation(line: 3582, column: 11, scope: !7635)
!7706 = !DILocation(line: 3583, column: 12, scope: !7635)
!7707 = !DILocation(line: 3584, column: 11, scope: !7635)
!7708 = !DILocation(line: 3587, column: 3, scope: !7635)
!7709 = !DILocation(line: 3587, column: 10, scope: !7635)
!7710 = !DILocation(line: 3589, column: 16, scope: !7711)
!7711 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3588, column: 5)
!7712 = !DILocation(line: 3591, column: 7, scope: !7713)
!7713 = distinct !DILexicalBlock(scope: !7711, file: !3, line: 3591, column: 7)
!7714 = !DILocation(line: 3591, column: 7, scope: !7715)
!7715 = distinct !DILexicalBlock(scope: !7713, file: !3, line: 3591, column: 7)
!7716 = !DILocation(line: 3593, column: 21, scope: !7717)
!7717 = distinct !DILexicalBlock(scope: !7715, file: !3, line: 3592, column: 9)
!7718 = !DILocation(line: 3593, column: 24, scope: !7717)
!7719 = !DILocation(line: 3593, column: 19, scope: !7717)
!7720 = !DILocation(line: 3595, column: 17, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7717, file: !3, line: 3595, column: 15)
!7722 = !DILocation(line: 3595, column: 20, scope: !7721)
!7723 = !DILocation(line: 3595, column: 26, scope: !7721)
!7724 = !DILocation(line: 3595, column: 15, scope: !7717)
!7725 = !DILocation(line: 3597, column: 69, scope: !7726)
!7726 = distinct !DILexicalBlock(scope: !7721, file: !3, line: 3596, column: 13)
!7727 = !DILocation(line: 3597, column: 72, scope: !7726)
!7728 = !DILocation(line: 3597, column: 39, scope: !7726)
!7729 = !DILocation(line: 3597, column: 36, scope: !7726)
!7730 = !DILocation(line: 3598, column: 24, scope: !7726)
!7731 = !DILocation(line: 3599, column: 15, scope: !7726)
!7732 = !DILocation(line: 3601, column: 9, scope: !7717)
!7733 = distinct !{!7733, !7712, !7734}
!7734 = !DILocation(line: 3601, column: 9, scope: !7713)
!7735 = distinct !{!7735, !7708, !7736}
!7736 = !DILocation(line: 3602, column: 5, scope: !7635)
!7737 = !DILocation(line: 3605, column: 27, scope: !7738)
!7738 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3605, column: 7)
!7739 = !DILocation(line: 3605, column: 31, scope: !7738)
!7740 = !DILocation(line: 3605, column: 40, scope: !7738)
!7741 = !DILocation(line: 3605, column: 7, scope: !7738)
!7742 = !DILocation(line: 3605, column: 7, scope: !7635)
!7743 = !DILocation(line: 3606, column: 23, scope: !7738)
!7744 = !DILocation(line: 3606, column: 27, scope: !7738)
!7745 = !DILocation(line: 3606, column: 36, scope: !7738)
!7746 = !DILocation(line: 3606, column: 5, scope: !7738)
!7747 = !DILocation(line: 3611, column: 7, scope: !7748)
!7748 = distinct !DILexicalBlock(scope: !7738, file: !3, line: 3610, column: 5)
!7749 = !DILocation(line: 3613, column: 32, scope: !7750)
!7750 = distinct !DILexicalBlock(scope: !7748, file: !3, line: 3613, column: 11)
!7751 = !DILocation(line: 3613, column: 11, scope: !7750)
!7752 = !DILocation(line: 3613, column: 11, scope: !7748)
!7753 = !DILocation(line: 3614, column: 16, scope: !7750)
!7754 = !DILocation(line: 3614, column: 25, scope: !7750)
!7755 = !DILocation(line: 3614, column: 2, scope: !7750)
!7756 = !DILocation(line: 3615, column: 24, scope: !7748)
!7757 = !DILocation(line: 3615, column: 7, scope: !7748)
!7758 = !DILocation(line: 3618, column: 7, scope: !7759)
!7759 = distinct !DILexicalBlock(scope: !7635, file: !3, line: 3618, column: 7)
!7760 = !DILocation(line: 3618, column: 7, scope: !7635)
!7761 = !DILocation(line: 3619, column: 5, scope: !7759)
!7762 = !DILocation(line: 3625, column: 3, scope: !7635)
!7763 = !DILocation(line: 3626, column: 1, scope: !7635)
!7764 = distinct !DISubprogram(name: "jump_leads_only_to_bb_p", scope: !3, file: !3, line: 6103, type: !7765, scopeLine: 6104, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7765 = !DISubroutineType(types: !7766)
!7766 = !{!1085, !2104, !1391}
!7767 = !DILocalVariable(name: "jump", arg: 1, scope: !7764, file: !3, line: 6103, type: !2104)
!7768 = !DILocation(line: 6103, column: 33, scope: !7764)
!7769 = !DILocalVariable(name: "dest_bb", arg: 2, scope: !7764, file: !3, line: 6103, type: !1391)
!7770 = !DILocation(line: 6103, column: 51, scope: !7764)
!7771 = !DILocalVariable(name: "jump_bb", scope: !7764, file: !3, line: 6105, type: !1391)
!7772 = !DILocation(line: 6105, column: 15, scope: !7764)
!7773 = !DILocation(line: 6105, column: 25, scope: !7764)
!7774 = !DILocation(line: 6109, column: 20, scope: !7775)
!7775 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 6109, column: 7)
!7776 = !DILocation(line: 6109, column: 8, scope: !7775)
!7777 = !DILocation(line: 6110, column: 7, scope: !7775)
!7778 = !DILocation(line: 6110, column: 29, scope: !7775)
!7779 = !DILocation(line: 6110, column: 11, scope: !7775)
!7780 = !DILocation(line: 6109, column: 7, scope: !7764)
!7781 = !DILocation(line: 6111, column: 5, scope: !7775)
!7782 = !DILocation(line: 6115, column: 7, scope: !7783)
!7783 = distinct !DILexicalBlock(scope: !7764, file: !3, line: 6115, column: 7)
!7784 = !DILocation(line: 6115, column: 35, scope: !7783)
!7785 = !DILocation(line: 6116, column: 7, scope: !7783)
!7786 = !DILocation(line: 6116, column: 10, scope: !7783)
!7787 = !DILocation(line: 6116, column: 34, scope: !7783)
!7788 = !DILocation(line: 6116, column: 40, scope: !7783)
!7789 = !DILocation(line: 6117, column: 7, scope: !7783)
!7790 = !DILocation(line: 6117, column: 10, scope: !7783)
!7791 = !DILocation(line: 6117, column: 34, scope: !7783)
!7792 = !DILocation(line: 6117, column: 42, scope: !7783)
!7793 = !DILocation(line: 6117, column: 39, scope: !7783)
!7794 = !DILocation(line: 6115, column: 7, scope: !7764)
!7795 = !DILocation(line: 6118, column: 5, scope: !7783)
!7796 = !DILocation(line: 6121, column: 3, scope: !7764)
!7797 = !DILocation(line: 6122, column: 1, scope: !7764)
!7798 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !155, file: !155, line: 150, type: !7799, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7799 = !DISubroutineType(types: !7800)
!7800 = !{!1408, !7801, !7}
!7801 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7802, size: 64)
!7802 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1401)
!7803 = !DILocalVariable(name: "vec_", arg: 1, scope: !7798, file: !155, line: 150, type: !7801)
!7804 = !DILocation(line: 150, column: 1, scope: !7798)
!7805 = !DILocalVariable(name: "ix_", arg: 2, scope: !7798, file: !155, line: 150, type: !7)
!7806 = !DILocation(line: 0, scope: !7798)
!7807 = distinct !DISubprogram(name: "sel_bb_head", scope: !3, file: !3, line: 4316, type: !7808, scopeLine: 4317, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7808 = !DISubroutineType(types: !7809)
!7809 = !{!2104, !1391}
!7810 = !DILocalVariable(name: "bb", arg: 1, scope: !7807, file: !3, line: 4316, type: !1391)
!7811 = !DILocation(line: 4316, column: 26, scope: !7807)
!7812 = !DILocalVariable(name: "head", scope: !7807, file: !3, line: 4318, type: !2104)
!7813 = !DILocation(line: 4318, column: 10, scope: !7807)
!7814 = !DILocation(line: 4320, column: 7, scope: !7815)
!7815 = distinct !DILexicalBlock(scope: !7807, file: !3, line: 4320, column: 7)
!7816 = !DILocation(line: 4320, column: 13, scope: !7815)
!7817 = !DILocation(line: 4320, column: 10, scope: !7815)
!7818 = !DILocation(line: 4320, column: 7, scope: !7807)
!7819 = !DILocation(line: 4322, column: 7, scope: !7820)
!7820 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 4321, column: 5)
!7821 = !DILocation(line: 4323, column: 14, scope: !7820)
!7822 = !DILocation(line: 4323, column: 12, scope: !7820)
!7823 = !DILocation(line: 4324, column: 5, scope: !7820)
!7824 = !DILocalVariable(name: "note", scope: !7825, file: !3, line: 4327, type: !2104)
!7825 = distinct !DILexicalBlock(scope: !7815, file: !3, line: 4326, column: 5)
!7826 = !DILocation(line: 4327, column: 14, scope: !7825)
!7827 = !DILocation(line: 4329, column: 23, scope: !7825)
!7828 = !DILocation(line: 4329, column: 14, scope: !7825)
!7829 = !DILocation(line: 4329, column: 12, scope: !7825)
!7830 = !DILocation(line: 4330, column: 33, scope: !7825)
!7831 = !DILocation(line: 4330, column: 14, scope: !7825)
!7832 = !DILocation(line: 4330, column: 12, scope: !7825)
!7833 = !DILocation(line: 4332, column: 11, scope: !7834)
!7834 = distinct !DILexicalBlock(scope: !7825, file: !3, line: 4332, column: 11)
!7835 = !DILocation(line: 4332, column: 16, scope: !7834)
!7836 = !DILocation(line: 4332, column: 19, scope: !7834)
!7837 = !DILocation(line: 4332, column: 44, scope: !7834)
!7838 = !DILocation(line: 4332, column: 41, scope: !7834)
!7839 = !DILocation(line: 4332, column: 11, scope: !7825)
!7840 = !DILocation(line: 4333, column: 7, scope: !7834)
!7841 = !DILocation(line: 4333, column: 2, scope: !7834)
!7842 = !DILocation(line: 4336, column: 10, scope: !7807)
!7843 = !DILocation(line: 4336, column: 3, scope: !7807)
!7844 = distinct !DISubprogram(name: "sel_bb_end", scope: !3, file: !3, line: 4348, type: !7808, scopeLine: 4349, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7845 = !DILocalVariable(name: "bb", arg: 1, scope: !7844, file: !3, line: 4348, type: !1391)
!7846 = !DILocation(line: 4348, column: 25, scope: !7844)
!7847 = !DILocation(line: 4350, column: 23, scope: !7848)
!7848 = distinct !DILexicalBlock(scope: !7844, file: !3, line: 4350, column: 7)
!7849 = !DILocation(line: 4350, column: 7, scope: !7848)
!7850 = !DILocation(line: 4350, column: 7, scope: !7844)
!7851 = !DILocation(line: 4351, column: 5, scope: !7848)
!7852 = !DILocation(line: 4353, column: 3, scope: !7844)
!7853 = !DILocation(line: 4355, column: 10, scope: !7844)
!7854 = !DILocation(line: 4355, column: 3, scope: !7844)
!7855 = !DILocation(line: 4356, column: 1, scope: !7844)
!7856 = distinct !DISubprogram(name: "sel_bb_empty_p", scope: !3, file: !3, line: 4367, type: !2520, scopeLine: 4368, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7857 = !DILocalVariable(name: "bb", arg: 1, scope: !7856, file: !3, line: 4367, type: !1391)
!7858 = !DILocation(line: 4367, column: 29, scope: !7856)
!7859 = !DILocation(line: 4369, column: 23, scope: !7856)
!7860 = !DILocation(line: 4369, column: 10, scope: !7856)
!7861 = !DILocation(line: 4369, column: 27, scope: !7856)
!7862 = !DILocation(line: 4369, column: 3, scope: !7856)
!7863 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !155, file: !155, line: 150, type: !7864, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7864 = !DISubroutineType(types: !7865)
!7865 = !{!7, !7801}
!7866 = !DILocalVariable(name: "vec_", arg: 1, scope: !7863, file: !155, line: 150, type: !7801)
!7867 = !DILocation(line: 150, column: 1, scope: !7863)
!7868 = distinct !DISubprogram(name: "single_succ", scope: !155, file: !155, line: 663, type: !7869, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7869 = !DISubroutineType(types: !7870)
!7870 = !{!1391, !2498}
!7871 = !DILocalVariable(name: "bb", arg: 1, scope: !7868, file: !155, line: 663, type: !2498)
!7872 = !DILocation(line: 663, column: 32, scope: !7868)
!7873 = !DILocation(line: 665, column: 28, scope: !7868)
!7874 = !DILocation(line: 665, column: 10, scope: !7868)
!7875 = !DILocation(line: 665, column: 33, scope: !7868)
!7876 = !DILocation(line: 665, column: 3, scope: !7868)
!7877 = distinct !DISubprogram(name: "in_current_region_p", scope: !3, file: !3, line: 4374, type: !2520, scopeLine: 4375, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7878 = !DILocalVariable(name: "bb", arg: 1, scope: !7877, file: !3, line: 4374, type: !1391)
!7879 = !DILocation(line: 4374, column: 34, scope: !7877)
!7880 = !DILocation(line: 4376, column: 7, scope: !7881)
!7881 = distinct !DILexicalBlock(scope: !7877, file: !3, line: 4376, column: 7)
!7882 = !DILocation(line: 4376, column: 11, scope: !7881)
!7883 = !DILocation(line: 4376, column: 17, scope: !7881)
!7884 = !DILocation(line: 4376, column: 7, scope: !7877)
!7885 = !DILocation(line: 4377, column: 5, scope: !7881)
!7886 = !DILocation(line: 4379, column: 10, scope: !7877)
!7887 = !DILocation(line: 4379, column: 40, scope: !7877)
!7888 = !DILocation(line: 4379, column: 37, scope: !7877)
!7889 = !DILocation(line: 4379, column: 3, scope: !7877)
!7890 = !DILocation(line: 4380, column: 1, scope: !7877)
!7891 = distinct !DISubprogram(name: "sel_redirect_edge_and_branch", scope: !3, file: !3, line: 5435, type: !7892, scopeLine: 5436, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7892 = !DISubroutineType(types: !7893)
!7893 = !{!1085, !1408, !1391}
!7894 = !DILocalVariable(name: "e", arg: 1, scope: !7891, file: !3, line: 5435, type: !1408)
!7895 = !DILocation(line: 5435, column: 36, scope: !7891)
!7896 = !DILocalVariable(name: "to", arg: 2, scope: !7891, file: !3, line: 5435, type: !1391)
!7897 = !DILocation(line: 5435, column: 51, scope: !7891)
!7898 = !DILocalVariable(name: "latch_edge_p", scope: !7891, file: !3, line: 5437, type: !1085)
!7899 = !DILocation(line: 5437, column: 8, scope: !7891)
!7900 = !DILocalVariable(name: "src", scope: !7891, file: !3, line: 5438, type: !1391)
!7901 = !DILocation(line: 5438, column: 15, scope: !7891)
!7902 = !DILocalVariable(name: "prev_max_uid", scope: !7891, file: !3, line: 5439, type: !874)
!7903 = !DILocation(line: 5439, column: 7, scope: !7891)
!7904 = !DILocalVariable(name: "jump", scope: !7891, file: !3, line: 5440, type: !850)
!7905 = !DILocation(line: 5440, column: 7, scope: !7891)
!7906 = !DILocalVariable(name: "redirected", scope: !7891, file: !3, line: 5441, type: !1408)
!7907 = !DILocation(line: 5441, column: 8, scope: !7891)
!7908 = !DILocalVariable(name: "recompute_toporder_p", scope: !7891, file: !3, line: 5442, type: !1085)
!7909 = !DILocation(line: 5442, column: 8, scope: !7891)
!7910 = !DILocation(line: 5444, column: 19, scope: !7891)
!7911 = !DILocation(line: 5445, column: 19, scope: !7891)
!7912 = !DILocation(line: 5445, column: 22, scope: !7891)
!7913 = !DILocation(line: 5446, column: 19, scope: !7891)
!7914 = !DILocation(line: 5446, column: 22, scope: !7891)
!7915 = !DILocation(line: 5446, column: 44, scope: !7891)
!7916 = !DILocation(line: 5446, column: 27, scope: !7891)
!7917 = !DILocation(line: 5446, column: 24, scope: !7891)
!7918 = !DILocation(line: 0, scope: !7891)
!7919 = !DILocation(line: 5444, column: 18, scope: !7891)
!7920 = !DILocation(line: 5444, column: 16, scope: !7891)
!7921 = !DILocation(line: 5448, column: 9, scope: !7891)
!7922 = !DILocation(line: 5448, column: 12, scope: !7891)
!7923 = !DILocation(line: 5448, column: 7, scope: !7891)
!7924 = !DILocation(line: 5449, column: 18, scope: !7891)
!7925 = !DILocation(line: 5449, column: 16, scope: !7891)
!7926 = !DILocation(line: 5451, column: 42, scope: !7891)
!7927 = !DILocation(line: 5451, column: 45, scope: !7891)
!7928 = !DILocation(line: 5451, column: 16, scope: !7891)
!7929 = !DILocation(line: 5451, column: 14, scope: !7891)
!7930 = !DILocation(line: 5453, column: 3, scope: !7891)
!7931 = !DILocation(line: 5456, column: 7, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7891, file: !3, line: 5456, column: 7)
!7933 = !DILocation(line: 5456, column: 7, scope: !7891)
!7934 = !DILocation(line: 5458, column: 35, scope: !7935)
!7935 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 5457, column: 5)
!7936 = !DILocation(line: 5458, column: 7, scope: !7935)
!7937 = !DILocation(line: 5458, column: 26, scope: !7935)
!7938 = !DILocation(line: 5458, column: 33, scope: !7935)
!7939 = !DILocation(line: 5459, column: 7, scope: !7935)
!7940 = !DILocation(line: 5460, column: 5, scope: !7935)
!7941 = !DILocation(line: 5465, column: 7, scope: !7942)
!7942 = distinct !DILexicalBlock(scope: !7891, file: !3, line: 5465, column: 7)
!7943 = !DILocation(line: 5465, column: 41, scope: !7942)
!7944 = !DILocation(line: 5465, column: 38, scope: !7942)
!7945 = !DILocation(line: 5466, column: 7, scope: !7942)
!7946 = !DILocation(line: 5466, column: 10, scope: !7942)
!7947 = !DILocation(line: 5466, column: 40, scope: !7942)
!7948 = !DILocation(line: 5466, column: 38, scope: !7942)
!7949 = !DILocation(line: 5465, column: 7, scope: !7891)
!7950 = !DILocation(line: 5467, column: 26, scope: !7942)
!7951 = !DILocation(line: 5467, column: 5, scope: !7942)
!7952 = !DILocation(line: 5469, column: 25, scope: !7891)
!7953 = !DILocation(line: 5469, column: 36, scope: !7891)
!7954 = !DILocation(line: 5469, column: 10, scope: !7891)
!7955 = !DILocation(line: 5469, column: 8, scope: !7891)
!7956 = !DILocation(line: 5470, column: 7, scope: !7957)
!7957 = distinct !DILexicalBlock(scope: !7891, file: !3, line: 5470, column: 7)
!7958 = !DILocation(line: 5470, column: 7, scope: !7891)
!7959 = !DILocation(line: 5471, column: 24, scope: !7957)
!7960 = !DILocation(line: 5471, column: 5, scope: !7957)
!7961 = !DILocation(line: 5473, column: 10, scope: !7891)
!7962 = !DILocation(line: 5473, column: 3, scope: !7891)
!7963 = distinct !DISubprogram(name: "sel_recompute_toporder", scope: !3, file: !3, line: 3522, type: !2608, scopeLine: 3523, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!7964 = !DILocalVariable(name: "i", scope: !7963, file: !3, line: 3524, type: !874)
!7965 = !DILocation(line: 3524, column: 7, scope: !7963)
!7966 = !DILocalVariable(name: "n", scope: !7963, file: !3, line: 3524, type: !874)
!7967 = !DILocation(line: 3524, column: 10, scope: !7963)
!7968 = !DILocalVariable(name: "rgn", scope: !7963, file: !3, line: 3524, type: !874)
!7969 = !DILocation(line: 3524, column: 13, scope: !7963)
!7970 = !DILocalVariable(name: "postorder", scope: !7963, file: !3, line: 3525, type: !2051)
!7971 = !DILocation(line: 3525, column: 8, scope: !7963)
!7972 = !DILocalVariable(name: "n_blocks", scope: !7963, file: !3, line: 3525, type: !874)
!7973 = !DILocation(line: 3525, column: 19, scope: !7963)
!7974 = !DILocation(line: 3527, column: 15, scope: !7963)
!7975 = !DILocation(line: 3527, column: 13, scope: !7963)
!7976 = !DILocation(line: 3528, column: 34, scope: !7963)
!7977 = !DILocation(line: 3528, column: 14, scope: !7963)
!7978 = !DILocation(line: 3528, column: 12, scope: !7963)
!7979 = !DILocation(line: 3530, column: 9, scope: !7963)
!7980 = !DILocation(line: 3530, column: 7, scope: !7963)
!7981 = !DILocation(line: 3531, column: 10, scope: !7982)
!7982 = distinct !DILexicalBlock(scope: !7963, file: !3, line: 3531, column: 3)
!7983 = !DILocation(line: 3531, column: 19, scope: !7982)
!7984 = !DILocation(line: 3531, column: 28, scope: !7982)
!7985 = !DILocation(line: 3531, column: 17, scope: !7982)
!7986 = !DILocation(line: 3531, column: 8, scope: !7982)
!7987 = !DILocation(line: 3531, column: 33, scope: !7988)
!7988 = distinct !DILexicalBlock(scope: !7982, file: !3, line: 3531, column: 3)
!7989 = !DILocation(line: 3531, column: 35, scope: !7988)
!7990 = !DILocation(line: 3531, column: 3, scope: !7982)
!7991 = !DILocation(line: 3532, column: 9, scope: !7992)
!7992 = distinct !DILexicalBlock(scope: !7988, file: !3, line: 3532, column: 9)
!7993 = !DILocation(line: 3532, column: 42, scope: !7992)
!7994 = !DILocation(line: 3532, column: 39, scope: !7992)
!7995 = !DILocation(line: 3532, column: 9, scope: !7988)
!7996 = !DILocation(line: 3534, column: 31, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7992, file: !3, line: 3533, column: 7)
!7998 = !DILocation(line: 3534, column: 2, scope: !7997)
!7999 = !DILocation(line: 3534, column: 29, scope: !7997)
!8000 = !DILocation(line: 3535, column: 20, scope: !7997)
!8001 = !DILocation(line: 3535, column: 30, scope: !7997)
!8002 = !DILocation(line: 3535, column: 2, scope: !7997)
!8003 = !DILocation(line: 3535, column: 18, scope: !7997)
!8004 = !DILocation(line: 3536, column: 3, scope: !7997)
!8005 = !DILocation(line: 3537, column: 7, scope: !7997)
!8006 = !DILocation(line: 3531, column: 42, scope: !7988)
!8007 = !DILocation(line: 3531, column: 3, scope: !7988)
!8008 = distinct !{!8008, !7990, !8009}
!8009 = !DILocation(line: 3537, column: 7, scope: !7982)
!8010 = !DILocation(line: 3542, column: 3, scope: !7963)
!8011 = !DILocation(line: 3543, column: 1, scope: !7963)
!8012 = distinct !DISubprogram(name: "purge_empty_blocks", scope: !3, file: !3, line: 3712, type: !2608, scopeLine: 3713, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8013 = !DILocalVariable(name: "i", scope: !8012, file: !3, line: 3715, type: !874)
!8014 = !DILocation(line: 3715, column: 7, scope: !8012)
!8015 = !DILocation(line: 3715, column: 36, scope: !8012)
!8016 = !DILocation(line: 3715, column: 11, scope: !8012)
!8017 = !DILocation(line: 3717, column: 3, scope: !8012)
!8018 = !DILocation(line: 3717, column: 10, scope: !8012)
!8019 = !DILocation(line: 3717, column: 14, scope: !8012)
!8020 = !DILocation(line: 3717, column: 12, scope: !8012)
!8021 = !DILocalVariable(name: "b", scope: !8022, file: !3, line: 3719, type: !1391)
!8022 = distinct !DILexicalBlock(scope: !8012, file: !3, line: 3718, column: 5)
!8023 = !DILocation(line: 3719, column: 19, scope: !8022)
!8024 = !DILocation(line: 3719, column: 23, scope: !8022)
!8025 = !DILocation(line: 3721, column: 32, scope: !8026)
!8026 = distinct !DILexicalBlock(scope: !8022, file: !3, line: 3721, column: 11)
!8027 = !DILocation(line: 3721, column: 11, scope: !8026)
!8028 = !DILocation(line: 3721, column: 11, scope: !8022)
!8029 = !DILocation(line: 3722, column: 2, scope: !8026)
!8030 = distinct !{!8030, !8017, !8031}
!8031 = !DILocation(line: 3725, column: 5, scope: !8012)
!8032 = !DILocation(line: 3724, column: 8, scope: !8022)
!8033 = !DILocation(line: 3726, column: 1, scope: !8012)
!8034 = distinct !DISubprogram(name: "sel_is_loop_preheader_p", scope: !3, file: !3, line: 6069, type: !2520, scopeLine: 6070, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8035 = !DILocalVariable(name: "bb", arg: 1, scope: !8034, file: !3, line: 6069, type: !1391)
!8036 = !DILocation(line: 6069, column: 38, scope: !8034)
!8037 = !DILocation(line: 6071, column: 7, scope: !8038)
!8038 = distinct !DILexicalBlock(scope: !8034, file: !3, line: 6071, column: 7)
!8039 = !DILocation(line: 6071, column: 7, scope: !8034)
!8040 = !DILocalVariable(name: "outer", scope: !8041, file: !3, line: 6073, type: !1433)
!8041 = distinct !DILexicalBlock(scope: !8038, file: !3, line: 6072, column: 5)
!8042 = !DILocation(line: 6073, column: 20, scope: !8041)
!8043 = !DILocation(line: 6075, column: 11, scope: !8044)
!8044 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 6075, column: 11)
!8045 = !DILocation(line: 6075, column: 11, scope: !8041)
!8046 = !DILocation(line: 6076, column: 9, scope: !8044)
!8047 = !DILocation(line: 6079, column: 11, scope: !8048)
!8048 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 6079, column: 11)
!8049 = !DILocation(line: 6079, column: 35, scope: !8048)
!8050 = !DILocation(line: 6079, column: 11, scope: !8041)
!8051 = !DILocation(line: 6080, column: 9, scope: !8048)
!8052 = !DILocation(line: 6085, column: 32, scope: !8053)
!8053 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 6085, column: 11)
!8054 = !DILocation(line: 6085, column: 51, scope: !8053)
!8055 = !DILocation(line: 6085, column: 11, scope: !8053)
!8056 = !DILocation(line: 6085, column: 11, scope: !8041)
!8057 = !DILocation(line: 6086, column: 2, scope: !8053)
!8058 = !DILocation(line: 6091, column: 32, scope: !8059)
!8059 = distinct !DILexicalBlock(scope: !8041, file: !3, line: 6091, column: 7)
!8060 = !DILocation(line: 6091, column: 20, scope: !8059)
!8061 = !DILocation(line: 6091, column: 18, scope: !8059)
!8062 = !DILocation(line: 6091, column: 12, scope: !8059)
!8063 = !DILocation(line: 6092, column: 5, scope: !8064)
!8064 = distinct !DILexicalBlock(scope: !8059, file: !3, line: 6091, column: 7)
!8065 = !DILocation(line: 6091, column: 7, scope: !8059)
!8066 = !DILocation(line: 6094, column: 42, scope: !8067)
!8067 = distinct !DILexicalBlock(scope: !8064, file: !3, line: 6094, column: 13)
!8068 = !DILocation(line: 6094, column: 13, scope: !8067)
!8069 = !DILocation(line: 6094, column: 49, scope: !8067)
!8070 = !DILocation(line: 6094, column: 52, scope: !8067)
!8071 = !DILocation(line: 6094, column: 59, scope: !8067)
!8072 = !DILocation(line: 6094, column: 68, scope: !8067)
!8073 = !DILocation(line: 6094, column: 65, scope: !8067)
!8074 = !DILocation(line: 6094, column: 13, scope: !8064)
!8075 = !DILocation(line: 6095, column: 11, scope: !8067)
!8076 = !DILocation(line: 6093, column: 25, scope: !8064)
!8077 = !DILocation(line: 6093, column: 13, scope: !8064)
!8078 = !DILocation(line: 6093, column: 11, scope: !8064)
!8079 = !DILocation(line: 6091, column: 7, scope: !8064)
!8080 = distinct !{!8080, !8065, !8081}
!8081 = !DILocation(line: 6095, column: 11, scope: !8059)
!8082 = !DILocation(line: 6096, column: 5, scope: !8041)
!8083 = !DILocation(line: 6098, column: 3, scope: !8034)
!8084 = !DILocation(line: 6099, column: 1, scope: !8034)
!8085 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_base_index", scope: !409, file: !409, line: 922, type: !8086, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8086 = !DISubroutineType(types: !8087)
!8087 = !{!8088, !8089, !7}
!8088 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2319, size: 64)
!8089 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2312, size: 64)
!8090 = !DILocalVariable(name: "vec_", arg: 1, scope: !8085, file: !409, line: 922, type: !8089)
!8091 = !DILocation(line: 922, column: 1, scope: !8085)
!8092 = !DILocalVariable(name: "ix_", arg: 2, scope: !8085, file: !409, line: 922, type: !7)
!8093 = !DILocation(line: 0, scope: !8085)
!8094 = distinct !DISubprogram(name: "get_seqno_by_preds", scope: !3, file: !3, line: 3862, type: !2387, scopeLine: 3863, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8095 = !DILocalVariable(name: "insn", arg: 1, scope: !8094, file: !3, line: 3862, type: !850)
!8096 = !DILocation(line: 3862, column: 25, scope: !8094)
!8097 = !DILocalVariable(name: "bb", scope: !8094, file: !3, line: 3864, type: !1391)
!8098 = !DILocation(line: 3864, column: 15, scope: !8094)
!8099 = !DILocation(line: 3864, column: 20, scope: !8094)
!8100 = !DILocalVariable(name: "tmp", scope: !8094, file: !3, line: 3865, type: !850)
!8101 = !DILocation(line: 3865, column: 7, scope: !8094)
!8102 = !DILocation(line: 3865, column: 13, scope: !8094)
!8103 = !DILocalVariable(name: "head", scope: !8094, file: !3, line: 3865, type: !850)
!8104 = !DILocation(line: 3865, column: 19, scope: !8094)
!8105 = !DILocation(line: 3865, column: 26, scope: !8094)
!8106 = !DILocalVariable(name: "preds", scope: !8094, file: !3, line: 3866, type: !2325)
!8107 = !DILocation(line: 3866, column: 11, scope: !8094)
!8108 = !DILocalVariable(name: "n", scope: !8094, file: !3, line: 3867, type: !874)
!8109 = !DILocation(line: 3867, column: 7, scope: !8094)
!8110 = !DILocalVariable(name: "i", scope: !8094, file: !3, line: 3867, type: !874)
!8111 = !DILocation(line: 3867, column: 10, scope: !8094)
!8112 = !DILocalVariable(name: "seqno", scope: !8094, file: !3, line: 3867, type: !874)
!8113 = !DILocation(line: 3867, column: 13, scope: !8094)
!8114 = !DILocation(line: 3869, column: 3, scope: !8094)
!8115 = !DILocation(line: 3869, column: 10, scope: !8094)
!8116 = !DILocation(line: 3869, column: 17, scope: !8094)
!8117 = !DILocation(line: 3869, column: 14, scope: !8094)
!8118 = !DILocation(line: 3870, column: 9, scope: !8119)
!8119 = distinct !DILexicalBlock(scope: !8094, file: !3, line: 3870, column: 9)
!8120 = !DILocation(line: 3870, column: 9, scope: !8094)
!8121 = !DILocation(line: 3871, column: 14, scope: !8119)
!8122 = !DILocation(line: 3871, column: 7, scope: !8119)
!8123 = !DILocation(line: 3873, column: 13, scope: !8119)
!8124 = !DILocation(line: 3873, column: 11, scope: !8119)
!8125 = distinct !{!8125, !8114, !8126}
!8126 = !DILocation(line: 3873, column: 13, scope: !8094)
!8127 = !DILocation(line: 3875, column: 14, scope: !8094)
!8128 = !DILocation(line: 3875, column: 3, scope: !8094)
!8129 = !DILocation(line: 3876, column: 10, scope: !8130)
!8130 = distinct !DILexicalBlock(scope: !8094, file: !3, line: 3876, column: 3)
!8131 = !DILocation(line: 3876, column: 21, scope: !8130)
!8132 = !DILocation(line: 3876, column: 8, scope: !8130)
!8133 = !DILocation(line: 3876, column: 27, scope: !8134)
!8134 = distinct !DILexicalBlock(scope: !8130, file: !3, line: 3876, column: 3)
!8135 = !DILocation(line: 3876, column: 31, scope: !8134)
!8136 = !DILocation(line: 3876, column: 29, scope: !8134)
!8137 = !DILocation(line: 3876, column: 3, scope: !8130)
!8138 = !DILocation(line: 3877, column: 13, scope: !8134)
!8139 = !DILocation(line: 3877, column: 11, scope: !8134)
!8140 = !DILocation(line: 3877, column: 5, scope: !8134)
!8141 = !DILocation(line: 3876, column: 35, scope: !8134)
!8142 = !DILocation(line: 3876, column: 3, scope: !8134)
!8143 = distinct !{!8143, !8137, !8144}
!8144 = !DILocation(line: 3877, column: 13, scope: !8130)
!8145 = !DILocation(line: 3879, column: 10, scope: !8094)
!8146 = !DILocation(line: 3879, column: 3, scope: !8094)
!8147 = !DILocation(line: 3880, column: 1, scope: !8094)
!8148 = distinct !DISubprogram(name: "cfg_preds", scope: !3, file: !3, line: 4607, type: !8149, scopeLine: 4608, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8149 = !DISubroutineType(types: !8150)
!8150 = !{null, !1391, !8151, !2051}
!8151 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2325, size: 64)
!8152 = !DILocalVariable(name: "bb", arg: 1, scope: !8148, file: !3, line: 4607, type: !1391)
!8153 = !DILocation(line: 4607, column: 24, scope: !8148)
!8154 = !DILocalVariable(name: "preds", arg: 2, scope: !8148, file: !3, line: 4607, type: !8151)
!8155 = !DILocation(line: 4607, column: 37, scope: !8148)
!8156 = !DILocalVariable(name: "n", arg: 3, scope: !8148, file: !3, line: 4607, type: !2051)
!8157 = !DILocation(line: 4607, column: 49, scope: !8148)
!8158 = !DILocalVariable(name: "size", scope: !8148, file: !3, line: 4609, type: !874)
!8159 = !DILocation(line: 4609, column: 7, scope: !8148)
!8160 = !DILocation(line: 4611, column: 4, scope: !8148)
!8161 = !DILocation(line: 4611, column: 10, scope: !8148)
!8162 = !DILocation(line: 4612, column: 4, scope: !8148)
!8163 = !DILocation(line: 4612, column: 6, scope: !8148)
!8164 = !DILocation(line: 4613, column: 16, scope: !8148)
!8165 = !DILocation(line: 4613, column: 20, scope: !8148)
!8166 = !DILocation(line: 4613, column: 27, scope: !8148)
!8167 = !DILocation(line: 4613, column: 3, scope: !8148)
!8168 = !DILocation(line: 4614, column: 1, scope: !8148)
!8169 = distinct !DISubprogram(name: "sel_extend_global_bb_info", scope: !3, file: !3, line: 3886, type: !2608, scopeLine: 3887, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8170 = !DILocation(line: 3888, column: 3, scope: !8169)
!8171 = !DILocation(line: 3890, column: 1, scope: !8169)
!8172 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_heap_safe_grow_cleared", scope: !409, file: !409, line: 889, type: !8173, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8173 = !DISubroutineType(types: !8174)
!8174 = !{null, !8175, !874}
!8175 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2252, size: 64)
!8176 = !DILocalVariable(name: "vec_", arg: 1, scope: !8172, file: !409, line: 889, type: !8175)
!8177 = !DILocation(line: 889, column: 1, scope: !8172)
!8178 = !DILocalVariable(name: "size_", arg: 2, scope: !8172, file: !409, line: 889, type: !874)
!8179 = !DILocalVariable(name: "oldsize", scope: !8172, file: !409, line: 889, type: !874)
!8180 = distinct !DISubprogram(name: "sel_finish_global_bb_info", scope: !3, file: !3, line: 3910, type: !2608, scopeLine: 3911, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8181 = !DILocation(line: 3912, column: 3, scope: !8180)
!8182 = !DILocation(line: 3913, column: 1, scope: !8180)
!8183 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_heap_free", scope: !409, file: !409, line: 889, type: !8184, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8184 = !DISubroutineType(types: !8185)
!8185 = !{null, !8175}
!8186 = !DILocalVariable(name: "vec_", arg: 1, scope: !8183, file: !409, line: 889, type: !8175)
!8187 = !DILocation(line: 889, column: 1, scope: !8183)
!8188 = !DILocation(line: 889, column: 1, scope: !8189)
!8189 = distinct !DILexicalBlock(scope: !8183, file: !409, line: 889, column: 1)
!8190 = distinct !DISubprogram(name: "init_lv_sets", scope: !3, file: !3, line: 4112, type: !2608, scopeLine: 4113, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8191 = !DILocalVariable(name: "bb", scope: !8190, file: !3, line: 4114, type: !1391)
!8192 = !DILocation(line: 4114, column: 15, scope: !8190)
!8193 = !DILocation(line: 4117, column: 3, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 4117, column: 3)
!8195 = !DILocation(line: 4117, column: 3, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8194, file: !3, line: 4117, column: 3)
!8197 = !DILocation(line: 4118, column: 18, scope: !8196)
!8198 = !DILocation(line: 4118, column: 5, scope: !8196)
!8199 = distinct !{!8199, !8193, !8200}
!8200 = !DILocation(line: 4118, column: 20, scope: !8194)
!8201 = !DILocation(line: 4121, column: 16, scope: !8190)
!8202 = !DILocation(line: 4121, column: 3, scope: !8190)
!8203 = !DILocation(line: 4122, column: 1, scope: !8190)
!8204 = distinct !DISubprogram(name: "init_lv_set", scope: !3, file: !3, line: 4091, type: !2478, scopeLine: 4092, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8205 = !DILocalVariable(name: "bb", arg: 1, scope: !8204, file: !3, line: 4091, type: !1391)
!8206 = !DILocation(line: 4091, column: 26, scope: !8204)
!8207 = !DILocation(line: 4093, column: 3, scope: !8204)
!8208 = !DILocation(line: 4095, column: 20, scope: !8204)
!8209 = !DILocation(line: 4095, column: 3, scope: !8204)
!8210 = !DILocation(line: 4095, column: 18, scope: !8204)
!8211 = !DILocation(line: 4096, column: 3, scope: !8204)
!8212 = !DILocation(line: 4097, column: 3, scope: !8204)
!8213 = !DILocation(line: 4097, column: 26, scope: !8204)
!8214 = !DILocation(line: 4098, column: 1, scope: !8204)
!8215 = distinct !DISubprogram(name: "free_lv_sets", scope: !3, file: !3, line: 4137, type: !2608, scopeLine: 4138, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8216 = !DILocalVariable(name: "bb", scope: !8215, file: !3, line: 4139, type: !1391)
!8217 = !DILocation(line: 4139, column: 15, scope: !8215)
!8218 = !DILocation(line: 4142, column: 16, scope: !8215)
!8219 = !DILocation(line: 4142, column: 3, scope: !8215)
!8220 = !DILocation(line: 4145, column: 3, scope: !8221)
!8221 = distinct !DILexicalBlock(scope: !8215, file: !3, line: 4145, column: 3)
!8222 = !DILocation(line: 4145, column: 3, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8221, file: !3, line: 4145, column: 3)
!8224 = !DILocation(line: 4146, column: 9, scope: !8225)
!8225 = distinct !DILexicalBlock(scope: !8223, file: !3, line: 4146, column: 9)
!8226 = !DILocation(line: 4146, column: 9, scope: !8223)
!8227 = !DILocation(line: 4147, column: 20, scope: !8225)
!8228 = !DILocation(line: 4147, column: 7, scope: !8225)
!8229 = distinct !{!8229, !8220, !8230}
!8230 = !DILocation(line: 4147, column: 22, scope: !8221)
!8231 = !DILocation(line: 4148, column: 1, scope: !8215)
!8232 = distinct !DISubprogram(name: "free_lv_set", scope: !3, file: !3, line: 4126, type: !2478, scopeLine: 4127, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8233 = !DILocalVariable(name: "bb", arg: 1, scope: !8232, file: !3, line: 4126, type: !1391)
!8234 = !DILocation(line: 4126, column: 26, scope: !8232)
!8235 = !DILocation(line: 4128, column: 3, scope: !8232)
!8236 = !DILocation(line: 4130, column: 26, scope: !8232)
!8237 = !DILocation(line: 4130, column: 3, scope: !8232)
!8238 = !DILocation(line: 4131, column: 3, scope: !8232)
!8239 = !DILocation(line: 4131, column: 18, scope: !8232)
!8240 = !DILocation(line: 4132, column: 3, scope: !8232)
!8241 = !DILocation(line: 4132, column: 26, scope: !8232)
!8242 = !DILocation(line: 4133, column: 1, scope: !8232)
!8243 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_base_index", scope: !409, file: !409, line: 888, type: !8244, scopeLine: 888, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8244 = !DISubroutineType(types: !8245)
!8245 = !{!8246, !8247, !7}
!8246 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2264, size: 64)
!8247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2257, size: 64)
!8248 = !DILocalVariable(name: "vec_", arg: 1, scope: !8243, file: !409, line: 888, type: !8247)
!8249 = !DILocation(line: 888, column: 1, scope: !8243)
!8250 = !DILocalVariable(name: "ix_", arg: 2, scope: !8243, file: !409, line: 888, type: !7)
!8251 = !DILocation(line: 0, scope: !8243)
!8252 = distinct !DISubprogram(name: "free_data_sets", scope: !3, file: !3, line: 4182, type: !2478, scopeLine: 4183, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8253 = !DILocalVariable(name: "bb", arg: 1, scope: !8252, file: !3, line: 4182, type: !1391)
!8254 = !DILocation(line: 4182, column: 29, scope: !8252)
!8255 = !DILocation(line: 4184, column: 16, scope: !8252)
!8256 = !DILocation(line: 4184, column: 3, scope: !8252)
!8257 = !DILocation(line: 4185, column: 16, scope: !8252)
!8258 = !DILocation(line: 4185, column: 3, scope: !8252)
!8259 = !DILocation(line: 4186, column: 1, scope: !8252)
!8260 = distinct !DISubprogram(name: "free_av_set", scope: !3, file: !3, line: 4174, type: !2478, scopeLine: 4175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8261 = !DILocalVariable(name: "bb", arg: 1, scope: !8260, file: !3, line: 4174, type: !1391)
!8262 = !DILocation(line: 4174, column: 26, scope: !8260)
!8263 = !DILocation(line: 4176, column: 18, scope: !8260)
!8264 = !DILocation(line: 4176, column: 3, scope: !8260)
!8265 = !DILocation(line: 4177, column: 3, scope: !8260)
!8266 = !DILocation(line: 4177, column: 20, scope: !8260)
!8267 = !DILocation(line: 4178, column: 1, scope: !8260)
!8268 = distinct !DISubprogram(name: "exchange_data_sets", scope: !3, file: !3, line: 4229, type: !2379, scopeLine: 4230, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8269 = !DILocalVariable(name: "to", arg: 1, scope: !8268, file: !3, line: 4229, type: !1391)
!8270 = !DILocation(line: 4229, column: 33, scope: !8268)
!8271 = !DILocalVariable(name: "from", arg: 2, scope: !8268, file: !3, line: 4229, type: !1391)
!8272 = !DILocation(line: 4229, column: 49, scope: !8268)
!8273 = !DILocation(line: 4231, column: 21, scope: !8268)
!8274 = !DILocation(line: 4231, column: 25, scope: !8268)
!8275 = !DILocation(line: 4231, column: 3, scope: !8268)
!8276 = !DILocation(line: 4232, column: 21, scope: !8268)
!8277 = !DILocation(line: 4232, column: 25, scope: !8268)
!8278 = !DILocation(line: 4232, column: 3, scope: !8268)
!8279 = !DILocation(line: 4233, column: 1, scope: !8268)
!8280 = distinct !DISubprogram(name: "exchange_lv_sets", scope: !3, file: !3, line: 4190, type: !2379, scopeLine: 4191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8281 = !DILocalVariable(name: "to", arg: 1, scope: !8280, file: !3, line: 4190, type: !1391)
!8282 = !DILocation(line: 4190, column: 31, scope: !8280)
!8283 = !DILocalVariable(name: "from", arg: 2, scope: !8280, file: !3, line: 4190, type: !1391)
!8284 = !DILocation(line: 4190, column: 47, scope: !8280)
!8285 = !DILocalVariable(name: "to_lv_set", scope: !8286, file: !3, line: 4193, type: !2053)
!8286 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 4192, column: 3)
!8287 = !DILocation(line: 4193, column: 12, scope: !8286)
!8288 = !DILocation(line: 4193, column: 24, scope: !8286)
!8289 = !DILocation(line: 4195, column: 22, scope: !8286)
!8290 = !DILocation(line: 4195, column: 5, scope: !8286)
!8291 = !DILocation(line: 4195, column: 20, scope: !8286)
!8292 = !DILocation(line: 4196, column: 24, scope: !8286)
!8293 = !DILocation(line: 4196, column: 5, scope: !8286)
!8294 = !DILocation(line: 4196, column: 22, scope: !8286)
!8295 = !DILocalVariable(name: "to_lv_set_valid_p", scope: !8296, file: !3, line: 4200, type: !1085)
!8296 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 4199, column: 3)
!8297 = !DILocation(line: 4200, column: 10, scope: !8296)
!8298 = !DILocation(line: 4200, column: 30, scope: !8296)
!8299 = !DILocation(line: 4202, column: 30, scope: !8296)
!8300 = !DILocation(line: 4202, column: 5, scope: !8296)
!8301 = !DILocation(line: 4202, column: 28, scope: !8296)
!8302 = !DILocation(line: 4203, column: 32, scope: !8296)
!8303 = !DILocation(line: 4203, column: 5, scope: !8296)
!8304 = !DILocation(line: 4203, column: 30, scope: !8296)
!8305 = !DILocation(line: 4205, column: 1, scope: !8280)
!8306 = distinct !DISubprogram(name: "exchange_av_sets", scope: !3, file: !3, line: 4210, type: !2379, scopeLine: 4211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8307 = !DILocalVariable(name: "to", arg: 1, scope: !8306, file: !3, line: 4210, type: !1391)
!8308 = !DILocation(line: 4210, column: 31, scope: !8306)
!8309 = !DILocalVariable(name: "from", arg: 2, scope: !8306, file: !3, line: 4210, type: !1391)
!8310 = !DILocation(line: 4210, column: 47, scope: !8306)
!8311 = !DILocalVariable(name: "to_av_set", scope: !8312, file: !3, line: 4213, type: !2109)
!8312 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 4212, column: 3)
!8313 = !DILocation(line: 4213, column: 14, scope: !8312)
!8314 = !DILocation(line: 4213, column: 26, scope: !8312)
!8315 = !DILocation(line: 4215, column: 22, scope: !8312)
!8316 = !DILocation(line: 4215, column: 5, scope: !8312)
!8317 = !DILocation(line: 4215, column: 20, scope: !8312)
!8318 = !DILocation(line: 4216, column: 24, scope: !8312)
!8319 = !DILocation(line: 4216, column: 5, scope: !8312)
!8320 = !DILocation(line: 4216, column: 22, scope: !8312)
!8321 = !DILocalVariable(name: "to_av_level", scope: !8322, file: !3, line: 4220, type: !874)
!8322 = distinct !DILexicalBlock(scope: !8306, file: !3, line: 4219, column: 3)
!8323 = !DILocation(line: 4220, column: 9, scope: !8322)
!8324 = !DILocation(line: 4220, column: 23, scope: !8322)
!8325 = !DILocation(line: 4222, column: 24, scope: !8322)
!8326 = !DILocation(line: 4222, column: 5, scope: !8322)
!8327 = !DILocation(line: 4222, column: 22, scope: !8322)
!8328 = !DILocation(line: 4223, column: 26, scope: !8322)
!8329 = !DILocation(line: 4223, column: 5, scope: !8322)
!8330 = !DILocation(line: 4223, column: 24, scope: !8322)
!8331 = !DILocation(line: 4225, column: 1, scope: !8306)
!8332 = distinct !DISubprogram(name: "copy_data_sets", scope: !3, file: !3, line: 4237, type: !2379, scopeLine: 4238, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8333 = !DILocalVariable(name: "to", arg: 1, scope: !8332, file: !3, line: 4237, type: !1391)
!8334 = !DILocation(line: 4237, column: 29, scope: !8332)
!8335 = !DILocalVariable(name: "from", arg: 2, scope: !8332, file: !3, line: 4237, type: !1391)
!8336 = !DILocation(line: 4237, column: 45, scope: !8332)
!8337 = !DILocation(line: 4239, column: 3, scope: !8332)
!8338 = !DILocation(line: 4240, column: 3, scope: !8332)
!8339 = !DILocation(line: 4242, column: 22, scope: !8332)
!8340 = !DILocation(line: 4242, column: 3, scope: !8332)
!8341 = !DILocation(line: 4242, column: 20, scope: !8332)
!8342 = !DILocation(line: 4243, column: 28, scope: !8332)
!8343 = !DILocation(line: 4243, column: 3, scope: !8332)
!8344 = !DILocation(line: 4243, column: 26, scope: !8332)
!8345 = !DILocation(line: 4245, column: 7, scope: !8346)
!8346 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 4245, column: 7)
!8347 = !DILocation(line: 4245, column: 7, scope: !8332)
!8348 = !DILocation(line: 4247, column: 37, scope: !8349)
!8349 = distinct !DILexicalBlock(scope: !8346, file: !3, line: 4246, column: 5)
!8350 = !DILocation(line: 4247, column: 24, scope: !8349)
!8351 = !DILocation(line: 4247, column: 7, scope: !8349)
!8352 = !DILocation(line: 4247, column: 22, scope: !8349)
!8353 = !DILocation(line: 4248, column: 5, scope: !8349)
!8354 = !DILocation(line: 4249, column: 7, scope: !8355)
!8355 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 4249, column: 7)
!8356 = !DILocation(line: 4249, column: 7, scope: !8332)
!8357 = !DILocation(line: 4251, column: 7, scope: !8358)
!8358 = distinct !DILexicalBlock(scope: !8355, file: !3, line: 4250, column: 5)
!8359 = !DILocation(line: 4252, column: 7, scope: !8358)
!8360 = !DILocation(line: 4253, column: 5, scope: !8358)
!8361 = !DILocation(line: 4254, column: 1, scope: !8332)
!8362 = distinct !DISubprogram(name: "get_av_set", scope: !3, file: !3, line: 4258, type: !8363, scopeLine: 4259, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8363 = !DISubroutineType(types: !8364)
!8364 = !{!2109, !2104}
!8365 = !DILocalVariable(name: "insn", arg: 1, scope: !8362, file: !3, line: 4258, type: !2104)
!8366 = !DILocation(line: 4258, column: 20, scope: !8362)
!8367 = !DILocalVariable(name: "av_set", scope: !8362, file: !3, line: 4260, type: !2109)
!8368 = !DILocation(line: 4260, column: 12, scope: !8362)
!8369 = !DILocation(line: 4262, column: 3, scope: !8362)
!8370 = !DILocation(line: 4264, column: 22, scope: !8371)
!8371 = distinct !DILexicalBlock(scope: !8362, file: !3, line: 4264, column: 7)
!8372 = !DILocation(line: 4264, column: 7, scope: !8371)
!8373 = !DILocation(line: 4264, column: 7, scope: !8362)
!8374 = !DILocation(line: 4265, column: 14, scope: !8371)
!8375 = !DILocation(line: 4265, column: 12, scope: !8371)
!8376 = !DILocation(line: 4265, column: 5, scope: !8371)
!8377 = !DILocation(line: 4267, column: 12, scope: !8371)
!8378 = !DILocation(line: 4269, column: 10, scope: !8362)
!8379 = !DILocation(line: 4269, column: 3, scope: !8362)
!8380 = distinct !DISubprogram(name: "get_av_level", scope: !3, file: !3, line: 4274, type: !8381, scopeLine: 4275, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8381 = !DISubroutineType(types: !8382)
!8382 = !{!874, !2104}
!8383 = !DILocalVariable(name: "insn", arg: 1, scope: !8380, file: !3, line: 4274, type: !2104)
!8384 = !DILocation(line: 4274, column: 22, scope: !8380)
!8385 = !DILocalVariable(name: "av_level", scope: !8380, file: !3, line: 4276, type: !874)
!8386 = !DILocation(line: 4276, column: 7, scope: !8380)
!8387 = !DILocation(line: 4278, column: 3, scope: !8380)
!8388 = !DILocation(line: 4280, column: 22, scope: !8389)
!8389 = distinct !DILexicalBlock(scope: !8380, file: !3, line: 4280, column: 7)
!8390 = !DILocation(line: 4280, column: 7, scope: !8389)
!8391 = !DILocation(line: 4280, column: 7, scope: !8380)
!8392 = !DILocation(line: 4281, column: 16, scope: !8389)
!8393 = !DILocation(line: 4281, column: 14, scope: !8389)
!8394 = !DILocation(line: 4281, column: 5, scope: !8389)
!8395 = !DILocation(line: 4283, column: 16, scope: !8389)
!8396 = !DILocation(line: 4283, column: 14, scope: !8389)
!8397 = !DILocation(line: 4285, column: 10, scope: !8380)
!8398 = !DILocation(line: 4285, column: 3, scope: !8380)
!8399 = distinct !DISubprogram(name: "sel_bb_head_p", scope: !3, file: !3, line: 4341, type: !6844, scopeLine: 4342, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8400 = !DILocalVariable(name: "insn", arg: 1, scope: !8399, file: !3, line: 4341, type: !2104)
!8401 = !DILocation(line: 4341, column: 23, scope: !8399)
!8402 = !DILocation(line: 4343, column: 23, scope: !8399)
!8403 = !DILocation(line: 4343, column: 10, scope: !8399)
!8404 = !DILocation(line: 4343, column: 49, scope: !8399)
!8405 = !DILocation(line: 4343, column: 46, scope: !8399)
!8406 = !DILocation(line: 4343, column: 3, scope: !8399)
!8407 = distinct !DISubprogram(name: "sel_bb_end_p", scope: !3, file: !3, line: 4360, type: !6844, scopeLine: 4361, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8408 = !DILocalVariable(name: "insn", arg: 1, scope: !8407, file: !3, line: 4360, type: !2104)
!8409 = !DILocation(line: 4360, column: 22, scope: !8407)
!8410 = !DILocation(line: 4362, column: 10, scope: !8407)
!8411 = !DILocation(line: 4362, column: 30, scope: !8407)
!8412 = !DILocation(line: 4362, column: 18, scope: !8407)
!8413 = !DILocation(line: 4362, column: 15, scope: !8407)
!8414 = !DILocation(line: 4362, column: 3, scope: !8407)
!8415 = distinct !DISubprogram(name: "fallthru_bb_of_jump", scope: !3, file: !3, line: 4384, type: !8416, scopeLine: 4385, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8416 = !DISubroutineType(types: !8417)
!8417 = !{!1391, !850}
!8418 = !DILocalVariable(name: "jump", arg: 1, scope: !8415, file: !3, line: 4384, type: !850)
!8419 = !DILocation(line: 4384, column: 26, scope: !8415)
!8420 = !DILocation(line: 4386, column: 8, scope: !8421)
!8421 = distinct !DILexicalBlock(scope: !8415, file: !3, line: 4386, column: 7)
!8422 = !DILocation(line: 4386, column: 7, scope: !8415)
!8423 = !DILocation(line: 4387, column: 5, scope: !8421)
!8424 = !DILocation(line: 4389, column: 25, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8415, file: !3, line: 4389, column: 7)
!8426 = !DILocation(line: 4389, column: 7, scope: !8425)
!8427 = !DILocation(line: 4389, column: 7, scope: !8415)
!8428 = !DILocation(line: 4390, column: 25, scope: !8425)
!8429 = !DILocation(line: 4390, column: 12, scope: !8425)
!8430 = !DILocation(line: 4390, column: 5, scope: !8425)
!8431 = !DILocation(line: 4392, column: 24, scope: !8432)
!8432 = distinct !DILexicalBlock(scope: !8415, file: !3, line: 4392, column: 7)
!8433 = !DILocation(line: 4392, column: 8, scope: !8432)
!8434 = !DILocation(line: 4392, column: 7, scope: !8415)
!8435 = !DILocation(line: 4393, column: 5, scope: !8432)
!8436 = !DILocation(line: 4397, column: 22, scope: !8437)
!8437 = distinct !DILexicalBlock(scope: !8415, file: !3, line: 4397, column: 7)
!8438 = !DILocation(line: 4397, column: 7, scope: !8437)
!8439 = !DILocation(line: 4397, column: 7, scope: !8415)
!8440 = !DILocation(line: 4398, column: 5, scope: !8437)
!8441 = !DILocation(line: 4400, column: 10, scope: !8415)
!8442 = !DILocation(line: 4400, column: 49, scope: !8415)
!8443 = !DILocation(line: 4400, column: 3, scope: !8415)
!8444 = !DILocation(line: 4401, column: 1, scope: !8415)
!8445 = distinct !DISubprogram(name: "single_succ_p", scope: !155, file: !155, line: 626, type: !2503, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8446 = !DILocalVariable(name: "bb", arg: 1, scope: !8445, file: !155, line: 626, type: !2498)
!8447 = !DILocation(line: 626, column: 34, scope: !8445)
!8448 = !DILocation(line: 628, column: 10, scope: !8445)
!8449 = !DILocation(line: 628, column: 33, scope: !8445)
!8450 = !DILocation(line: 628, column: 3, scope: !8445)
!8451 = distinct !DISubprogram(name: "sel_init_bbs", scope: !3, file: !3, line: 4412, type: !8452, scopeLine: 4413, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8452 = !DISubroutineType(types: !8453)
!8453 = !{null, !6854, !1391}
!8454 = !DILocalVariable(name: "bbs", arg: 1, scope: !8451, file: !3, line: 4412, type: !6854)
!8455 = !DILocation(line: 4412, column: 24, scope: !8451)
!8456 = !DILocalVariable(name: "bb", arg: 2, scope: !8451, file: !3, line: 4412, type: !1391)
!8457 = !DILocation(line: 4412, column: 41, scope: !8451)
!8458 = !DILocalVariable(name: "ssi", scope: !8451, file: !3, line: 4414, type: !6858)
!8459 = !DILocation(line: 4414, column: 36, scope: !8451)
!8460 = !DILocation(line: 4422, column: 21, scope: !8451)
!8461 = !DILocation(line: 4422, column: 26, scope: !8451)
!8462 = !DILocation(line: 4422, column: 30, scope: !8451)
!8463 = !DILocation(line: 4422, column: 3, scope: !8451)
!8464 = !DILocation(line: 4423, column: 1, scope: !8451)
!8465 = distinct !DISubprogram(name: "extend_bb_info", scope: !3, file: !3, line: 3902, type: !2608, scopeLine: 3903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8466 = !DILocation(line: 3904, column: 3, scope: !8465)
!8467 = !DILocation(line: 3905, column: 3, scope: !8465)
!8468 = !DILocation(line: 3906, column: 1, scope: !8465)
!8469 = distinct !DISubprogram(name: "init_bb", scope: !3, file: !3, line: 4405, type: !2478, scopeLine: 4406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8470 = !DILocalVariable(name: "bb", arg: 1, scope: !8469, file: !3, line: 4405, type: !1391)
!8471 = !DILocation(line: 4405, column: 22, scope: !8469)
!8472 = !DILocation(line: 4407, column: 26, scope: !8469)
!8473 = !DILocation(line: 4407, column: 17, scope: !8469)
!8474 = !DILocation(line: 4407, column: 31, scope: !8469)
!8475 = !DILocation(line: 4407, column: 3, scope: !8469)
!8476 = !DILocation(line: 4408, column: 23, scope: !8469)
!8477 = !DILocation(line: 4408, column: 3, scope: !8469)
!8478 = !DILocation(line: 4408, column: 21, scope: !8469)
!8479 = !DILocation(line: 4409, column: 1, scope: !8469)
!8480 = distinct !DISubprogram(name: "sel_finish_bbs", scope: !3, file: !3, line: 4457, type: !2608, scopeLine: 4458, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8481 = !DILocation(line: 4459, column: 3, scope: !8480)
!8482 = !DILocation(line: 4462, column: 7, scope: !8483)
!8483 = distinct !DILexicalBlock(scope: !8480, file: !3, line: 4462, column: 7)
!8484 = !DILocation(line: 4462, column: 7, scope: !8480)
!8485 = !DILocation(line: 4463, column: 5, scope: !8483)
!8486 = !DILocation(line: 4465, column: 3, scope: !8480)
!8487 = !DILocation(line: 4466, column: 1, scope: !8480)
!8488 = distinct !DISubprogram(name: "sel_restore_notes", scope: !3, file: !3, line: 4427, type: !2608, scopeLine: 4428, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8489 = !DILocalVariable(name: "bb", scope: !8488, file: !3, line: 4429, type: !874)
!8490 = !DILocation(line: 4429, column: 7, scope: !8488)
!8491 = !DILocalVariable(name: "insn", scope: !8488, file: !3, line: 4430, type: !2104)
!8492 = !DILocation(line: 4430, column: 10, scope: !8488)
!8493 = !DILocation(line: 4432, column: 11, scope: !8494)
!8494 = distinct !DILexicalBlock(scope: !8488, file: !3, line: 4432, column: 3)
!8495 = !DILocation(line: 4432, column: 8, scope: !8494)
!8496 = !DILocation(line: 4432, column: 16, scope: !8497)
!8497 = distinct !DILexicalBlock(scope: !8494, file: !3, line: 4432, column: 3)
!8498 = !DILocation(line: 4432, column: 21, scope: !8497)
!8499 = !DILocation(line: 4432, column: 19, scope: !8497)
!8500 = !DILocation(line: 4432, column: 3, scope: !8494)
!8501 = !DILocalVariable(name: "first", scope: !8502, file: !3, line: 4434, type: !1391)
!8502 = distinct !DILexicalBlock(scope: !8497, file: !3, line: 4433, column: 5)
!8503 = !DILocation(line: 4434, column: 19, scope: !8502)
!8504 = !DILocalVariable(name: "last", scope: !8502, file: !3, line: 4434, type: !1391)
!8505 = !DILocation(line: 4434, column: 26, scope: !8502)
!8506 = !DILocation(line: 4436, column: 15, scope: !8502)
!8507 = !DILocation(line: 4436, column: 13, scope: !8502)
!8508 = !DILocation(line: 4437, column: 14, scope: !8502)
!8509 = !DILocation(line: 4437, column: 32, scope: !8502)
!8510 = !DILocation(line: 4437, column: 12, scope: !8502)
!8511 = !DILocation(line: 4439, column: 7, scope: !8502)
!8512 = !DILocation(line: 4441, column: 16, scope: !8513)
!8513 = distinct !DILexicalBlock(scope: !8502, file: !3, line: 4440, column: 2)
!8514 = !DILocation(line: 4441, column: 14, scope: !8513)
!8515 = !DILocation(line: 4442, column: 31, scope: !8513)
!8516 = !DILocation(line: 4442, column: 4, scope: !8513)
!8517 = !DILocation(line: 4443, column: 4, scope: !8513)
!8518 = !DILocation(line: 4443, column: 25, scope: !8513)
!8519 = !DILocation(line: 4445, column: 4, scope: !8520)
!8520 = distinct !DILexicalBlock(scope: !8513, file: !3, line: 4445, column: 4)
!8521 = !DILocation(line: 4445, column: 4, scope: !8522)
!8522 = distinct !DILexicalBlock(scope: !8520, file: !3, line: 4445, column: 4)
!8523 = !DILocation(line: 0, scope: !8522)
!8524 = !DILocation(line: 4446, column: 10, scope: !8525)
!8525 = distinct !DILexicalBlock(scope: !8522, file: !3, line: 4446, column: 10)
!8526 = !DILocation(line: 4446, column: 10, scope: !8522)
!8527 = !DILocation(line: 4447, column: 22, scope: !8525)
!8528 = !DILocation(line: 4447, column: 8, scope: !8525)
!8529 = distinct !{!8529, !8519, !8530}
!8530 = !DILocation(line: 4447, column: 26, scope: !8520)
!8531 = !DILocation(line: 4449, column: 19, scope: !8513)
!8532 = !DILocation(line: 4449, column: 26, scope: !8513)
!8533 = !DILocation(line: 4449, column: 17, scope: !8513)
!8534 = !DILocation(line: 4450, column: 2, scope: !8513)
!8535 = !DILocation(line: 4451, column: 14, scope: !8502)
!8536 = !DILocation(line: 4451, column: 23, scope: !8502)
!8537 = !DILocation(line: 4451, column: 20, scope: !8502)
!8538 = distinct !{!8538, !8511, !8539}
!8539 = !DILocation(line: 4451, column: 27, scope: !8502)
!8540 = !DILocation(line: 4452, column: 5, scope: !8502)
!8541 = !DILocation(line: 4432, column: 42, scope: !8497)
!8542 = !DILocation(line: 4432, column: 3, scope: !8497)
!8543 = distinct !{!8543, !8500, !8544}
!8544 = !DILocation(line: 4452, column: 5, scope: !8494)
!8545 = !DILocation(line: 4453, column: 1, scope: !8488)
!8546 = distinct !DISubprogram(name: "sel_remove_loop_preheader", scope: !3, file: !3, line: 6128, type: !2608, scopeLine: 6129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8547 = !DILocalVariable(name: "i", scope: !8546, file: !3, line: 6130, type: !874)
!8548 = !DILocation(line: 6130, column: 7, scope: !8546)
!8549 = !DILocalVariable(name: "old_len", scope: !8546, file: !3, line: 6130, type: !874)
!8550 = !DILocation(line: 6130, column: 10, scope: !8546)
!8551 = !DILocalVariable(name: "cur_rgn", scope: !8546, file: !3, line: 6131, type: !874)
!8552 = !DILocation(line: 6131, column: 7, scope: !8546)
!8553 = !DILocation(line: 6131, column: 17, scope: !8546)
!8554 = !DILocalVariable(name: "bb", scope: !8546, file: !3, line: 6132, type: !1391)
!8555 = !DILocation(line: 6132, column: 15, scope: !8546)
!8556 = !DILocalVariable(name: "all_empty_p", scope: !8546, file: !3, line: 6133, type: !1085)
!8557 = !DILocation(line: 6133, column: 8, scope: !8546)
!8558 = !DILocalVariable(name: "preheader_blocks", scope: !8546, file: !3, line: 6134, type: !2086)
!8559 = !DILocation(line: 6134, column: 27, scope: !8546)
!8560 = !DILocation(line: 6135, column: 7, scope: !8546)
!8561 = !DILocation(line: 6137, column: 3, scope: !8546)
!8562 = !DILocation(line: 6138, column: 13, scope: !8546)
!8563 = !DILocation(line: 6138, column: 11, scope: !8546)
!8564 = !DILocation(line: 6141, column: 10, scope: !8565)
!8565 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 6141, column: 3)
!8566 = !DILocation(line: 6141, column: 8, scope: !8565)
!8567 = !DILocation(line: 6141, column: 15, scope: !8568)
!8568 = distinct !DILexicalBlock(scope: !8565, file: !3, line: 6141, column: 3)
!8569 = !DILocation(line: 6141, column: 19, scope: !8568)
!8570 = !DILocation(line: 6141, column: 17, scope: !8568)
!8571 = !DILocation(line: 6141, column: 3, scope: !8565)
!8572 = !DILocation(line: 6143, column: 12, scope: !8573)
!8573 = distinct !DILexicalBlock(scope: !8568, file: !3, line: 6142, column: 5)
!8574 = !DILocation(line: 6143, column: 10, scope: !8573)
!8575 = !DILocation(line: 6147, column: 36, scope: !8576)
!8576 = distinct !DILexicalBlock(scope: !8573, file: !3, line: 6147, column: 11)
!8577 = !DILocation(line: 6147, column: 11, scope: !8576)
!8578 = !DILocation(line: 6147, column: 11, scope: !8573)
!8579 = !DILocation(line: 6149, column: 11, scope: !8580)
!8580 = distinct !DILexicalBlock(scope: !8576, file: !3, line: 6148, column: 9)
!8581 = !DILocation(line: 6150, column: 15, scope: !8582)
!8582 = distinct !DILexicalBlock(scope: !8580, file: !3, line: 6150, column: 15)
!8583 = !DILocation(line: 6150, column: 39, scope: !8582)
!8584 = !DILocation(line: 6150, column: 30, scope: !8582)
!8585 = !DILocation(line: 6150, column: 27, scope: !8582)
!8586 = !DILocation(line: 6150, column: 15, scope: !8580)
!8587 = !DILocation(line: 6151, column: 25, scope: !8582)
!8588 = !DILocation(line: 6151, column: 13, scope: !8582)
!8589 = !DILocation(line: 6152, column: 9, scope: !8580)
!8590 = !DILocation(line: 6153, column: 5, scope: !8573)
!8591 = !DILocation(line: 6141, column: 45, scope: !8568)
!8592 = !DILocation(line: 6141, column: 3, scope: !8568)
!8593 = distinct !{!8593, !8571, !8594}
!8594 = !DILocation(line: 6153, column: 5, scope: !8565)
!8595 = !DILocation(line: 6156, column: 12, scope: !8596)
!8596 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 6156, column: 3)
!8597 = !DILocation(line: 6156, column: 55, scope: !8596)
!8598 = !DILocation(line: 6156, column: 10, scope: !8596)
!8599 = !DILocation(line: 6156, column: 8, scope: !8596)
!8600 = !DILocation(line: 6157, column: 8, scope: !8601)
!8601 = distinct !DILexicalBlock(scope: !8596, file: !3, line: 6156, column: 3)
!8602 = !DILocation(line: 6157, column: 13, scope: !8601)
!8603 = !DILocation(line: 6157, column: 10, scope: !8601)
!8604 = !DILocation(line: 6156, column: 3, scope: !8596)
!8605 = !DILocation(line: 6160, column: 13, scope: !8606)
!8606 = distinct !DILexicalBlock(scope: !8601, file: !3, line: 6159, column: 5)
!8607 = !DILocation(line: 6160, column: 10, scope: !8606)
!8608 = !DILocation(line: 6161, column: 22, scope: !8606)
!8609 = !DILocation(line: 6161, column: 7, scope: !8606)
!8610 = !DILocation(line: 6162, column: 5, scope: !8606)
!8611 = !DILocation(line: 6158, column: 9, scope: !8601)
!8612 = !DILocation(line: 6156, column: 3, scope: !8601)
!8613 = distinct !{!8613, !8604, !8614}
!8614 = !DILocation(line: 6162, column: 5, scope: !8596)
!8615 = !DILocation(line: 6164, column: 49, scope: !8616)
!8616 = distinct !DILexicalBlock(scope: !8546, file: !3, line: 6164, column: 7)
!8617 = !DILocation(line: 6164, column: 37, scope: !8616)
!8618 = !DILocation(line: 6164, column: 8, scope: !8616)
!8619 = !DILocation(line: 6164, column: 7, scope: !8546)
!8620 = !DILocation(line: 6166, column: 12, scope: !8621)
!8621 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 6166, column: 11)
!8622 = distinct !DILexicalBlock(scope: !8616, file: !3, line: 6165, column: 5)
!8623 = !DILocation(line: 6166, column: 11, scope: !8622)
!8624 = !DILocation(line: 6168, column: 9, scope: !8621)
!8625 = !DILocation(line: 6173, column: 18, scope: !8626)
!8626 = distinct !DILexicalBlock(scope: !8627, file: !3, line: 6173, column: 11)
!8627 = distinct !DILexicalBlock(scope: !8621, file: !3, line: 6170, column: 9)
!8628 = !DILocation(line: 6173, column: 16, scope: !8626)
!8629 = !DILocation(line: 6173, column: 23, scope: !8630)
!8630 = distinct !DILexicalBlock(scope: !8626, file: !3, line: 6173, column: 11)
!8631 = !DILocation(line: 6173, column: 11, scope: !8626)
!8632 = !DILocalVariable(name: "e", scope: !8633, file: !3, line: 6175, type: !1408)
!8633 = distinct !DILexicalBlock(scope: !8630, file: !3, line: 6174, column: 13)
!8634 = !DILocation(line: 6175, column: 20, scope: !8633)
!8635 = !DILocalVariable(name: "ei", scope: !8633, file: !3, line: 6176, type: !3114)
!8636 = !DILocation(line: 6176, column: 29, scope: !8633)
!8637 = !DILocalVariable(name: "prev_bb", scope: !8633, file: !3, line: 6177, type: !1391)
!8638 = !DILocation(line: 6177, column: 27, scope: !8633)
!8639 = !DILocation(line: 6177, column: 37, scope: !8633)
!8640 = !DILocation(line: 6177, column: 41, scope: !8633)
!8641 = !DILocalVariable(name: "next_bb", scope: !8633, file: !3, line: 6177, type: !1391)
!8642 = !DILocation(line: 6177, column: 50, scope: !8633)
!8643 = !DILocation(line: 6177, column: 60, scope: !8633)
!8644 = !DILocation(line: 6177, column: 64, scope: !8633)
!8645 = !DILocation(line: 6180, column: 25, scope: !8646)
!8646 = distinct !DILexicalBlock(scope: !8633, file: !3, line: 6180, column: 15)
!8647 = !DILocation(line: 6180, column: 20, scope: !8646)
!8648 = !DILocation(line: 6180, column: 52, scope: !8649)
!8649 = distinct !DILexicalBlock(scope: !8646, file: !3, line: 6180, column: 15)
!8650 = !DILocation(line: 6180, column: 50, scope: !8649)
!8651 = !DILocation(line: 6180, column: 15, scope: !8646)
!8652 = !DILocation(line: 6182, column: 26, scope: !8653)
!8653 = distinct !DILexicalBlock(scope: !8654, file: !3, line: 6182, column: 23)
!8654 = distinct !DILexicalBlock(scope: !8649, file: !3, line: 6181, column: 17)
!8655 = !DILocation(line: 6182, column: 29, scope: !8653)
!8656 = !DILocation(line: 6182, column: 35, scope: !8653)
!8657 = !DILocation(line: 6182, column: 23, scope: !8654)
!8658 = !DILocation(line: 6183, column: 47, scope: !8653)
!8659 = !DILocation(line: 6183, column: 50, scope: !8653)
!8660 = !DILocation(line: 6183, column: 54, scope: !8653)
!8661 = !DILocation(line: 6183, column: 21, scope: !8653)
!8662 = !DILocation(line: 6185, column: 41, scope: !8653)
!8663 = !DILocation(line: 6185, column: 44, scope: !8653)
!8664 = !DILocation(line: 6185, column: 48, scope: !8653)
!8665 = !DILocation(line: 6185, column: 21, scope: !8653)
!8666 = !DILocation(line: 6180, column: 15, scope: !8649)
!8667 = distinct !{!8667, !8651, !8668}
!8668 = !DILocation(line: 6186, column: 17, scope: !8646)
!8669 = !DILocation(line: 6187, column: 15, scope: !8633)
!8670 = !DILocation(line: 6188, column: 44, scope: !8633)
!8671 = !DILocation(line: 6188, column: 15, scope: !8633)
!8672 = !DILocation(line: 6194, column: 12, scope: !8673)
!8673 = distinct !DILexicalBlock(scope: !8633, file: !3, line: 6194, column: 12)
!8674 = !DILocation(line: 6194, column: 21, scope: !8673)
!8675 = !DILocation(line: 6194, column: 32, scope: !8673)
!8676 = !DILocation(line: 6194, column: 29, scope: !8673)
!8677 = !DILocation(line: 6195, column: 19, scope: !8673)
!8678 = !DILocation(line: 6195, column: 22, scope: !8673)
!8679 = !DILocation(line: 6195, column: 33, scope: !8673)
!8680 = !DILocation(line: 6195, column: 30, scope: !8673)
!8681 = !DILocation(line: 6196, column: 19, scope: !8673)
!8682 = !DILocation(line: 6196, column: 47, scope: !8673)
!8683 = !DILocation(line: 6196, column: 65, scope: !8673)
!8684 = !DILocation(line: 6196, column: 22, scope: !8673)
!8685 = !DILocation(line: 6194, column: 12, scope: !8633)
!8686 = !DILocation(line: 6198, column: 45, scope: !8687)
!8687 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 6197, column: 17)
!8688 = !DILocation(line: 6198, column: 69, scope: !8687)
!8689 = !DILocation(line: 6198, column: 19, scope: !8687)
!8690 = !DILocation(line: 6199, column: 23, scope: !8691)
!8691 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 6199, column: 23)
!8692 = !DILocation(line: 6199, column: 52, scope: !8691)
!8693 = !DILocation(line: 6199, column: 43, scope: !8691)
!8694 = !DILocation(line: 6199, column: 40, scope: !8691)
!8695 = !DILocation(line: 6199, column: 23, scope: !8687)
!8696 = !DILocation(line: 6200, column: 37, scope: !8691)
!8697 = !DILocation(line: 6200, column: 21, scope: !8691)
!8698 = !DILocation(line: 6201, column: 17, scope: !8687)
!8699 = !DILocation(line: 6202, column: 13, scope: !8633)
!8700 = !DILocation(line: 6173, column: 76, scope: !8630)
!8701 = !DILocation(line: 6173, column: 11, scope: !8630)
!8702 = distinct !{!8702, !8631, !8703}
!8703 = !DILocation(line: 6202, column: 13, scope: !8626)
!8704 = !DILocation(line: 6204, column: 7, scope: !8622)
!8705 = !DILocation(line: 6205, column: 5, scope: !8622)
!8706 = !DILocation(line: 6208, column: 5, scope: !8616)
!8707 = !DILocation(line: 6210, column: 1, scope: !8546)
!8708 = distinct !DISubprogram(name: "finish_region_bb_info", scope: !3, file: !3, line: 3917, type: !2608, scopeLine: 3918, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8709 = !DILocation(line: 3919, column: 3, scope: !8708)
!8710 = !DILocation(line: 3920, column: 1, scope: !8708)
!8711 = distinct !DISubprogram(name: "sel_insn_has_single_succ_p", scope: !3, file: !3, line: 4470, type: !8712, scopeLine: 4471, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8712 = !DISubroutineType(types: !8713)
!8713 = !{!1085, !2104, !874}
!8714 = !DILocalVariable(name: "insn", arg: 1, scope: !8711, file: !3, line: 4470, type: !2104)
!8715 = !DILocation(line: 4470, column: 36, scope: !8711)
!8716 = !DILocalVariable(name: "flags", arg: 2, scope: !8711, file: !3, line: 4470, type: !874)
!8717 = !DILocation(line: 4470, column: 46, scope: !8711)
!8718 = !DILocalVariable(name: "succ", scope: !8711, file: !3, line: 4472, type: !2104)
!8719 = !DILocation(line: 4472, column: 10, scope: !8711)
!8720 = !DILocalVariable(name: "si", scope: !8711, file: !3, line: 4473, type: !3107)
!8721 = !DILocation(line: 4473, column: 17, scope: !8711)
!8722 = !DILocalVariable(name: "first_p", scope: !8711, file: !3, line: 4474, type: !1085)
!8723 = !DILocation(line: 4474, column: 8, scope: !8711)
!8724 = !DILocation(line: 4476, column: 3, scope: !8725)
!8725 = distinct !DILexicalBlock(scope: !8711, file: !3, line: 4476, column: 3)
!8726 = !DILocation(line: 4476, column: 3, scope: !8727)
!8727 = distinct !DILexicalBlock(scope: !8725, file: !3, line: 4476, column: 3)
!8728 = !DILocation(line: 4478, column: 11, scope: !8729)
!8729 = distinct !DILexicalBlock(scope: !8730, file: !3, line: 4478, column: 11)
!8730 = distinct !DILexicalBlock(scope: !8727, file: !3, line: 4477, column: 5)
!8731 = !DILocation(line: 4478, column: 11, scope: !8730)
!8732 = !DILocation(line: 4479, column: 10, scope: !8729)
!8733 = !DILocation(line: 4479, column: 2, scope: !8729)
!8734 = !DILocation(line: 4481, column: 2, scope: !8729)
!8735 = !DILocation(line: 4482, column: 5, scope: !8730)
!8736 = distinct !{!8736, !8724, !8737}
!8737 = !DILocation(line: 4482, column: 5, scope: !8725)
!8738 = !DILocation(line: 4484, column: 3, scope: !8711)
!8739 = !DILocation(line: 4485, column: 1, scope: !8711)
!8740 = distinct !DISubprogram(name: "free_succs_info", scope: !3, file: !3, line: 4511, type: !8741, scopeLine: 4512, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8741 = !DISubroutineType(types: !8742)
!8742 = !{null, !2057}
!8743 = !DILocalVariable(name: "sinfo", arg: 1, scope: !8740, file: !3, line: 4511, type: !2057)
!8744 = !DILocation(line: 4511, column: 38, scope: !8740)
!8745 = !DILocation(line: 4513, column: 3, scope: !8740)
!8746 = !DILocation(line: 4515, column: 22, scope: !8740)
!8747 = !DILocation(line: 4518, column: 3, scope: !8740)
!8748 = !DILocation(line: 4520, column: 3, scope: !8740)
!8749 = !DILocation(line: 4522, column: 3, scope: !8740)
!8750 = !DILocation(line: 4524, column: 3, scope: !8740)
!8751 = !DILocation(line: 4524, column: 10, scope: !8740)
!8752 = !DILocation(line: 4524, column: 19, scope: !8740)
!8753 = !DILocation(line: 4525, column: 3, scope: !8740)
!8754 = !DILocation(line: 4525, column: 10, scope: !8740)
!8755 = !DILocation(line: 4525, column: 21, scope: !8740)
!8756 = !DILocation(line: 4526, column: 3, scope: !8740)
!8757 = !DILocation(line: 4526, column: 10, scope: !8740)
!8758 = !DILocation(line: 4526, column: 22, scope: !8740)
!8759 = !DILocation(line: 4527, column: 1, scope: !8740)
!8760 = distinct !DISubprogram(name: "VEC_rtx_base_block_remove", scope: !414, file: !414, line: 200, type: !8761, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8761 = !DISubroutineType(types: !8762)
!8762 = !{null, !4196, !7, !7}
!8763 = !DILocalVariable(name: "vec_", arg: 1, scope: !8760, file: !414, line: 200, type: !4196)
!8764 = !DILocation(line: 200, column: 1, scope: !8760)
!8765 = !DILocalVariable(name: "ix_", arg: 2, scope: !8760, file: !414, line: 200, type: !7)
!8766 = !DILocalVariable(name: "len_", arg: 3, scope: !8760, file: !414, line: 200, type: !7)
!8767 = !DILocalVariable(name: "slot_", scope: !8760, file: !414, line: 200, type: !2055)
!8768 = distinct !DISubprogram(name: "VEC_rtx_base_length", scope: !414, file: !414, line: 200, type: !8769, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8769 = !DISubroutineType(types: !8770)
!8770 = !{!7, !8771}
!8771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8772, size: 64)
!8772 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2041)
!8773 = !DILocalVariable(name: "vec_", arg: 1, scope: !8768, file: !414, line: 200, type: !8771)
!8774 = !DILocation(line: 200, column: 1, scope: !8768)
!8775 = distinct !DISubprogram(name: "VEC_int_base_block_remove", scope: !1374, file: !1374, line: 31, type: !8776, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8776 = !DISubroutineType(types: !8777)
!8777 = !{null, !8778, !7, !7}
!8778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2075, size: 64)
!8779 = !DILocalVariable(name: "vec_", arg: 1, scope: !8775, file: !1374, line: 31, type: !8778)
!8780 = !DILocation(line: 31, column: 1, scope: !8775)
!8781 = !DILocalVariable(name: "ix_", arg: 2, scope: !8775, file: !1374, line: 31, type: !7)
!8782 = !DILocalVariable(name: "len_", arg: 3, scope: !8775, file: !1374, line: 31, type: !7)
!8783 = !DILocalVariable(name: "slot_", scope: !8775, file: !1374, line: 31, type: !2051)
!8784 = distinct !DISubprogram(name: "VEC_int_base_length", scope: !1374, file: !1374, line: 31, type: !8785, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8785 = !DISubroutineType(types: !8786)
!8786 = !{!7, !4374}
!8787 = !DILocalVariable(name: "vec_", arg: 1, scope: !8784, file: !1374, line: 31, type: !4374)
!8788 = !DILocation(line: 31, column: 1, scope: !8784)
!8789 = distinct !DISubprogram(name: "compute_succs_info", scope: !3, file: !3, line: 4532, type: !8790, scopeLine: 4533, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8790 = !DISubroutineType(types: !8791)
!8791 = !{!2057, !2104, !2061}
!8792 = !DILocalVariable(name: "insn", arg: 1, scope: !8789, file: !3, line: 4532, type: !2104)
!8793 = !DILocation(line: 4532, column: 28, scope: !8789)
!8794 = !DILocalVariable(name: "flags", arg: 2, scope: !8789, file: !3, line: 4532, type: !2061)
!8795 = !DILocation(line: 4532, column: 40, scope: !8789)
!8796 = !DILocalVariable(name: "si", scope: !8789, file: !3, line: 4534, type: !3107)
!8797 = !DILocation(line: 4534, column: 17, scope: !8789)
!8798 = !DILocalVariable(name: "succ", scope: !8789, file: !3, line: 4535, type: !2104)
!8799 = !DILocation(line: 4535, column: 10, scope: !8789)
!8800 = !DILocalVariable(name: "sinfo", scope: !8789, file: !3, line: 4536, type: !2057)
!8801 = !DILocation(line: 4536, column: 22, scope: !8789)
!8802 = !DILocation(line: 4536, column: 30, scope: !8789)
!8803 = !DILocation(line: 4539, column: 3, scope: !8804)
!8804 = distinct !DILexicalBlock(scope: !8789, file: !3, line: 4539, column: 3)
!8805 = !DILocation(line: 4539, column: 3, scope: !8806)
!8806 = distinct !DILexicalBlock(scope: !8804, file: !3, line: 4539, column: 3)
!8807 = !DILocalVariable(name: "current_flags", scope: !8808, file: !3, line: 4543, type: !2061)
!8808 = distinct !DILexicalBlock(scope: !8806, file: !3, line: 4540, column: 5)
!8809 = !DILocation(line: 4543, column: 13, scope: !8808)
!8810 = !DILocation(line: 4543, column: 32, scope: !8808)
!8811 = !DILocation(line: 4543, column: 29, scope: !8808)
!8812 = !DILocation(line: 4543, column: 46, scope: !8808)
!8813 = !DILocation(line: 4545, column: 11, scope: !8814)
!8814 = distinct !DILexicalBlock(scope: !8808, file: !3, line: 4545, column: 11)
!8815 = !DILocation(line: 4545, column: 27, scope: !8814)
!8816 = !DILocation(line: 4545, column: 25, scope: !8814)
!8817 = !DILocation(line: 4545, column: 11, scope: !8808)
!8818 = !DILocation(line: 4547, column: 11, scope: !8819)
!8819 = distinct !DILexicalBlock(scope: !8814, file: !3, line: 4546, column: 9)
!8820 = !DILocation(line: 4548, column: 11, scope: !8819)
!8821 = !DILocation(line: 4554, column: 11, scope: !8819)
!8822 = !DILocation(line: 4554, column: 18, scope: !8819)
!8823 = !DILocation(line: 4554, column: 28, scope: !8819)
!8824 = !DILocation(line: 4555, column: 9, scope: !8819)
!8825 = !DILocation(line: 4557, column: 9, scope: !8814)
!8826 = !DILocation(line: 4560, column: 15, scope: !8827)
!8827 = distinct !DILexicalBlock(scope: !8808, file: !3, line: 4560, column: 11)
!8828 = !DILocation(line: 4560, column: 12, scope: !8827)
!8829 = !DILocation(line: 4560, column: 11, scope: !8808)
!8830 = !DILocation(line: 4561, column: 9, scope: !8827)
!8831 = !DILocation(line: 4561, column: 16, scope: !8827)
!8832 = !DILocation(line: 4561, column: 25, scope: !8827)
!8833 = !DILocation(line: 4563, column: 31, scope: !8827)
!8834 = !DILocation(line: 4563, column: 35, scope: !8827)
!8835 = !DILocation(line: 4563, column: 9, scope: !8827)
!8836 = !DILocation(line: 4563, column: 16, scope: !8827)
!8837 = !DILocation(line: 4563, column: 25, scope: !8827)
!8838 = !DILocation(line: 4565, column: 7, scope: !8808)
!8839 = !DILocation(line: 4565, column: 14, scope: !8808)
!8840 = !DILocation(line: 4565, column: 25, scope: !8808)
!8841 = !DILocation(line: 4566, column: 5, scope: !8808)
!8842 = distinct !{!8842, !8803, !8843}
!8843 = !DILocation(line: 4566, column: 5, scope: !8804)
!8844 = !DILocation(line: 4568, column: 10, scope: !8789)
!8845 = !DILocation(line: 4568, column: 3, scope: !8789)
!8846 = distinct !DISubprogram(name: "alloc_succs_info", scope: !3, file: !3, line: 4489, type: !8847, scopeLine: 4490, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8847 = !DISubroutineType(types: !8848)
!8848 = !{!2057}
!8849 = !DILocation(line: 4491, column: 23, scope: !8850)
!8850 = distinct !DILexicalBlock(scope: !8846, file: !3, line: 4491, column: 7)
!8851 = !DILocation(line: 4491, column: 46, scope: !8850)
!8852 = !DILocation(line: 4491, column: 27, scope: !8850)
!8853 = !DILocation(line: 4491, column: 7, scope: !8846)
!8854 = !DILocalVariable(name: "i", scope: !8855, file: !3, line: 4493, type: !874)
!8855 = distinct !DILexicalBlock(scope: !8850, file: !3, line: 4492, column: 5)
!8856 = !DILocation(line: 4493, column: 11, scope: !8855)
!8857 = !DILocation(line: 4495, column: 11, scope: !8858)
!8858 = distinct !DILexicalBlock(scope: !8855, file: !3, line: 4495, column: 11)
!8859 = !DILocation(line: 4495, column: 56, scope: !8858)
!8860 = !DILocation(line: 4495, column: 37, scope: !8858)
!8861 = !DILocation(line: 4495, column: 11, scope: !8855)
!8862 = !DILocation(line: 4496, column: 9, scope: !8858)
!8863 = !DILocation(line: 4498, column: 11, scope: !8855)
!8864 = !DILocation(line: 4498, column: 9, scope: !8855)
!8865 = !DILocation(line: 4499, column: 43, scope: !8855)
!8866 = !DILocation(line: 4499, column: 23, scope: !8855)
!8867 = !DILocation(line: 4499, column: 29, scope: !8855)
!8868 = !DILocation(line: 4499, column: 7, scope: !8855)
!8869 = !DILocation(line: 4499, column: 32, scope: !8855)
!8870 = !DILocation(line: 4499, column: 41, scope: !8855)
!8871 = !DILocation(line: 4500, column: 46, scope: !8855)
!8872 = !DILocation(line: 4500, column: 23, scope: !8855)
!8873 = !DILocation(line: 4500, column: 29, scope: !8855)
!8874 = !DILocation(line: 4500, column: 7, scope: !8855)
!8875 = !DILocation(line: 4500, column: 32, scope: !8855)
!8876 = !DILocation(line: 4500, column: 44, scope: !8855)
!8877 = !DILocation(line: 4501, column: 43, scope: !8855)
!8878 = !DILocation(line: 4501, column: 23, scope: !8855)
!8879 = !DILocation(line: 4501, column: 29, scope: !8855)
!8880 = !DILocation(line: 4501, column: 7, scope: !8855)
!8881 = !DILocation(line: 4501, column: 32, scope: !8855)
!8882 = !DILocation(line: 4501, column: 41, scope: !8855)
!8883 = !DILocation(line: 4502, column: 5, scope: !8855)
!8884 = !DILocation(line: 4504, column: 24, scope: !8850)
!8885 = !DILocation(line: 4506, column: 27, scope: !8846)
!8886 = !DILocation(line: 4506, column: 49, scope: !8846)
!8887 = !DILocation(line: 4506, column: 11, scope: !8846)
!8888 = !DILocation(line: 4506, column: 3, scope: !8846)
!8889 = distinct !DISubprogram(name: "VEC_rtx_heap_safe_push", scope: !414, file: !414, line: 201, type: !8890, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8890 = !DISubroutineType(types: !8891)
!8891 = !{!2055, !8892, !850}
!8892 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2064, size: 64)
!8893 = !DILocalVariable(name: "vec_", arg: 1, scope: !8889, file: !414, line: 201, type: !8892)
!8894 = !DILocation(line: 201, column: 1, scope: !8889)
!8895 = !DILocalVariable(name: "obj_", arg: 2, scope: !8889, file: !414, line: 201, type: !850)
!8896 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !1374, file: !1374, line: 32, type: !8897, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8897 = !DISubroutineType(types: !8898)
!8898 = !{!2051, !8899, !8900}
!8899 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2070, size: 64)
!8900 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !874)
!8901 = !DILocalVariable(name: "vec_", arg: 1, scope: !8896, file: !1374, line: 32, type: !8899)
!8902 = !DILocation(line: 32, column: 1, scope: !8896)
!8903 = !DILocalVariable(name: "obj_", arg: 2, scope: !8896, file: !1374, line: 32, type: !8900)
!8904 = distinct !DISubprogram(name: "bb_ends_ebb_p", scope: !3, file: !3, line: 4645, type: !2520, scopeLine: 4646, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8905 = !DILocalVariable(name: "bb", arg: 1, scope: !8904, file: !3, line: 4645, type: !1391)
!8906 = !DILocation(line: 4645, column: 28, scope: !8904)
!8907 = !DILocalVariable(name: "next_bb", scope: !8904, file: !3, line: 4647, type: !1391)
!8908 = !DILocation(line: 4647, column: 15, scope: !8904)
!8909 = !DILocation(line: 4647, column: 37, scope: !8904)
!8910 = !DILocation(line: 4647, column: 25, scope: !8904)
!8911 = !DILocalVariable(name: "e", scope: !8904, file: !3, line: 4648, type: !1408)
!8912 = !DILocation(line: 4648, column: 8, scope: !8904)
!8913 = !DILocalVariable(name: "ei", scope: !8904, file: !3, line: 4649, type: !3114)
!8914 = !DILocation(line: 4649, column: 17, scope: !8904)
!8915 = !DILocation(line: 4651, column: 7, scope: !8916)
!8916 = distinct !DILexicalBlock(scope: !8904, file: !3, line: 4651, column: 7)
!8917 = !DILocation(line: 4651, column: 18, scope: !8916)
!8918 = !DILocation(line: 4651, column: 15, scope: !8916)
!8919 = !DILocation(line: 4652, column: 7, scope: !8916)
!8920 = !DILocation(line: 4652, column: 24, scope: !8916)
!8921 = !DILocation(line: 4652, column: 42, scope: !8916)
!8922 = !DILocation(line: 4652, column: 51, scope: !8916)
!8923 = !DILocation(line: 4652, column: 10, scope: !8916)
!8924 = !DILocation(line: 4653, column: 7, scope: !8916)
!8925 = !DILocation(line: 4653, column: 11, scope: !8916)
!8926 = !DILocation(line: 4656, column: 4, scope: !8916)
!8927 = !DILocation(line: 4656, column: 23, scope: !8916)
!8928 = !DILocation(line: 4656, column: 8, scope: !8916)
!8929 = !DILocation(line: 4651, column: 7, scope: !8904)
!8930 = !DILocation(line: 4657, column: 5, scope: !8916)
!8931 = !DILocation(line: 4659, column: 29, scope: !8932)
!8932 = distinct !DILexicalBlock(scope: !8904, file: !3, line: 4659, column: 7)
!8933 = !DILocation(line: 4659, column: 8, scope: !8932)
!8934 = !DILocation(line: 4659, column: 7, scope: !8904)
!8935 = !DILocation(line: 4660, column: 5, scope: !8932)
!8936 = !DILocation(line: 4662, column: 3, scope: !8937)
!8937 = distinct !DILexicalBlock(scope: !8904, file: !3, line: 4662, column: 3)
!8938 = !DILocation(line: 4662, column: 3, scope: !8939)
!8939 = distinct !DILexicalBlock(scope: !8937, file: !3, line: 4662, column: 3)
!8940 = !DILocation(line: 4663, column: 10, scope: !8941)
!8941 = distinct !DILexicalBlock(scope: !8939, file: !3, line: 4663, column: 9)
!8942 = !DILocation(line: 4663, column: 13, scope: !8941)
!8943 = !DILocation(line: 4663, column: 19, scope: !8941)
!8944 = !DILocation(line: 4663, column: 36, scope: !8941)
!8945 = !DILocation(line: 4663, column: 9, scope: !8939)
!8946 = !DILocation(line: 4665, column: 2, scope: !8947)
!8947 = distinct !DILexicalBlock(scope: !8941, file: !3, line: 4664, column: 7)
!8948 = !DILocation(line: 4667, column: 2, scope: !8947)
!8949 = !DILocation(line: 4663, column: 39, scope: !8941)
!8950 = distinct !{!8950, !8936, !8951}
!8951 = !DILocation(line: 4668, column: 7, scope: !8937)
!8952 = !DILocation(line: 4670, column: 3, scope: !8904)
!8953 = !DILocation(line: 4671, column: 1, scope: !8904)
!8954 = distinct !DISubprogram(name: "bb_next_bb", scope: !409, file: !409, line: 1465, type: !2507, scopeLine: 1466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8955 = !DILocalVariable(name: "bb", arg: 1, scope: !8954, file: !409, line: 1465, type: !1391)
!8956 = !DILocation(line: 1465, column: 25, scope: !8954)
!8957 = !DILocation(line: 1467, column: 11, scope: !8954)
!8958 = !DILocation(line: 1467, column: 3, scope: !8954)
!8959 = !DILocation(line: 1470, column: 14, scope: !8960)
!8960 = distinct !DILexicalBlock(scope: !8954, file: !409, line: 1468, column: 5)
!8961 = !DILocation(line: 1470, column: 18, scope: !8960)
!8962 = !DILocation(line: 1470, column: 7, scope: !8960)
!8963 = !DILocation(line: 1473, column: 27, scope: !8960)
!8964 = !DILocation(line: 1473, column: 14, scope: !8960)
!8965 = !DILocation(line: 1473, column: 7, scope: !8960)
!8966 = !DILocation(line: 1476, column: 14, scope: !8960)
!8967 = !DILocation(line: 1476, column: 34, scope: !8960)
!8968 = !DILocation(line: 1476, column: 7, scope: !8960)
!8969 = !DILocation(line: 1479, column: 14, scope: !8960)
!8970 = !DILocation(line: 1479, column: 18, scope: !8960)
!8971 = !DILocation(line: 1479, column: 7, scope: !8960)
!8972 = !DILocation(line: 1483, column: 1, scope: !8954)
!8973 = distinct !DISubprogram(name: "single_pred_p", scope: !155, file: !155, line: 634, type: !2503, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8974 = !DILocalVariable(name: "bb", arg: 1, scope: !8973, file: !155, line: 634, type: !2498)
!8975 = !DILocation(line: 634, column: 34, scope: !8973)
!8976 = !DILocation(line: 636, column: 10, scope: !8973)
!8977 = !DILocation(line: 636, column: 33, scope: !8973)
!8978 = !DILocation(line: 636, column: 3, scope: !8973)
!8979 = distinct !DISubprogram(name: "ei_start_1", scope: !155, file: !155, line: 696, type: !8980, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8980 = !DISubroutineType(types: !8981)
!8981 = !{!3114, !3119}
!8982 = !DILocalVariable(name: "ev", arg: 1, scope: !8979, file: !155, line: 696, type: !3119)
!8983 = !DILocation(line: 696, column: 28, scope: !8979)
!8984 = !DILocalVariable(name: "i", scope: !8979, file: !155, line: 698, type: !3114)
!8985 = !DILocation(line: 698, column: 17, scope: !8979)
!8986 = !DILocation(line: 700, column: 5, scope: !8979)
!8987 = !DILocation(line: 700, column: 11, scope: !8979)
!8988 = !DILocation(line: 701, column: 17, scope: !8979)
!8989 = !DILocation(line: 701, column: 5, scope: !8979)
!8990 = !DILocation(line: 701, column: 15, scope: !8979)
!8991 = !DILocation(line: 703, column: 3, scope: !8979)
!8992 = distinct !DISubprogram(name: "ei_cond", scope: !155, file: !155, line: 771, type: !8993, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!8993 = !DISubroutineType(types: !8994)
!8994 = !{!1085, !3114, !2557}
!8995 = !DILocalVariable(name: "ei", arg: 1, scope: !8992, file: !155, line: 771, type: !3114)
!8996 = !DILocation(line: 771, column: 24, scope: !8992)
!8997 = !DILocalVariable(name: "p", arg: 2, scope: !8992, file: !155, line: 771, type: !2557)
!8998 = !DILocation(line: 771, column: 34, scope: !8992)
!8999 = !DILocation(line: 773, column: 8, scope: !9000)
!9000 = distinct !DILexicalBlock(scope: !8992, file: !155, line: 773, column: 7)
!9001 = !DILocation(line: 773, column: 7, scope: !8992)
!9002 = !DILocation(line: 775, column: 12, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !9000, file: !155, line: 774, column: 5)
!9004 = !DILocation(line: 775, column: 8, scope: !9003)
!9005 = !DILocation(line: 775, column: 10, scope: !9003)
!9006 = !DILocation(line: 776, column: 7, scope: !9003)
!9007 = !DILocation(line: 780, column: 8, scope: !9008)
!9008 = distinct !DILexicalBlock(scope: !9000, file: !155, line: 779, column: 5)
!9009 = !DILocation(line: 780, column: 10, scope: !9008)
!9010 = !DILocation(line: 781, column: 7, scope: !9008)
!9011 = !DILocation(line: 783, column: 1, scope: !8992)
!9012 = distinct !DISubprogram(name: "ei_next", scope: !155, file: !155, line: 736, type: !9013, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9013 = !DISubroutineType(types: !9014)
!9014 = !{null, !9015}
!9015 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3114, size: 64)
!9016 = !DILocalVariable(name: "i", arg: 1, scope: !9012, file: !155, line: 736, type: !9015)
!9017 = !DILocation(line: 736, column: 25, scope: !9012)
!9018 = !DILocation(line: 738, column: 3, scope: !9012)
!9019 = !DILocation(line: 739, column: 3, scope: !9012)
!9020 = !DILocation(line: 739, column: 6, scope: !9012)
!9021 = !DILocation(line: 739, column: 11, scope: !9012)
!9022 = !DILocation(line: 740, column: 1, scope: !9012)
!9023 = distinct !DISubprogram(name: "in_same_ebb_p", scope: !3, file: !3, line: 4676, type: !9024, scopeLine: 4677, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9024 = !DISubroutineType(types: !9025)
!9025 = !{!1085, !2104, !2104}
!9026 = !DILocalVariable(name: "insn", arg: 1, scope: !9023, file: !3, line: 4676, type: !2104)
!9027 = !DILocation(line: 4676, column: 23, scope: !9023)
!9028 = !DILocalVariable(name: "succ", arg: 2, scope: !9023, file: !3, line: 4676, type: !2104)
!9029 = !DILocation(line: 4676, column: 36, scope: !9023)
!9030 = !DILocalVariable(name: "ptr", scope: !9023, file: !3, line: 4678, type: !1391)
!9031 = !DILocation(line: 4678, column: 15, scope: !9023)
!9032 = !DILocation(line: 4678, column: 21, scope: !9023)
!9033 = !DILocation(line: 4680, column: 3, scope: !9023)
!9034 = !DILocation(line: 4682, column: 11, scope: !9035)
!9035 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 4682, column: 11)
!9036 = distinct !DILexicalBlock(scope: !9037, file: !3, line: 4681, column: 5)
!9037 = distinct !DILexicalBlock(scope: !9038, file: !3, line: 4680, column: 3)
!9038 = distinct !DILexicalBlock(scope: !9023, file: !3, line: 4680, column: 3)
!9039 = !DILocation(line: 4682, column: 18, scope: !9035)
!9040 = !DILocation(line: 4682, column: 15, scope: !9035)
!9041 = !DILocation(line: 4682, column: 11, scope: !9036)
!9042 = !DILocation(line: 4683, column: 9, scope: !9035)
!9043 = !DILocation(line: 4685, column: 26, scope: !9044)
!9044 = distinct !DILexicalBlock(scope: !9036, file: !3, line: 4685, column: 11)
!9045 = !DILocation(line: 4685, column: 11, scope: !9044)
!9046 = !DILocation(line: 4685, column: 11, scope: !9036)
!9047 = !DILocation(line: 4686, column: 9, scope: !9044)
!9048 = !DILocation(line: 4688, column: 25, scope: !9036)
!9049 = !DILocation(line: 4688, column: 13, scope: !9036)
!9050 = !DILocation(line: 4688, column: 11, scope: !9036)
!9051 = !DILocation(line: 4680, column: 3, scope: !9037)
!9052 = distinct !{!9052, !9053, !9054}
!9053 = !DILocation(line: 4680, column: 3, scope: !9038)
!9054 = !DILocation(line: 4689, column: 5, scope: !9038)
!9055 = !DILocation(line: 4693, column: 1, scope: !9023)
!9056 = distinct !DISubprogram(name: "clear_outdated_rtx_info", scope: !3, file: !3, line: 4729, type: !2478, scopeLine: 4730, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9057 = !DILocalVariable(name: "bb", arg: 1, scope: !9056, file: !3, line: 4729, type: !1391)
!9058 = !DILocation(line: 4729, column: 38, scope: !9056)
!9059 = !DILocalVariable(name: "insn", scope: !9056, file: !3, line: 4731, type: !850)
!9060 = !DILocation(line: 4731, column: 7, scope: !9056)
!9061 = !DILocation(line: 4733, column: 3, scope: !9062)
!9062 = distinct !DILexicalBlock(scope: !9056, file: !3, line: 4733, column: 3)
!9063 = !DILocation(line: 4733, column: 3, scope: !9064)
!9064 = distinct !DILexicalBlock(scope: !9062, file: !3, line: 4733, column: 3)
!9065 = !DILocation(line: 0, scope: !9064)
!9066 = !DILocation(line: 4734, column: 9, scope: !9067)
!9067 = distinct !DILexicalBlock(scope: !9064, file: !3, line: 4734, column: 9)
!9068 = !DILocation(line: 4734, column: 9, scope: !9064)
!9069 = !DILocation(line: 4736, column: 2, scope: !9070)
!9070 = distinct !DILexicalBlock(scope: !9067, file: !3, line: 4735, column: 7)
!9071 = !DILocation(line: 4736, column: 23, scope: !9070)
!9072 = !DILocation(line: 4737, column: 2, scope: !9070)
!9073 = !DILocation(line: 4737, column: 28, scope: !9070)
!9074 = !DILocation(line: 4738, column: 2, scope: !9070)
!9075 = !DILocation(line: 4738, column: 26, scope: !9070)
!9076 = !DILocation(line: 4739, column: 2, scope: !9070)
!9077 = !DILocation(line: 4739, column: 39, scope: !9070)
!9078 = !DILocation(line: 4744, column: 21, scope: !9070)
!9079 = !DILocation(line: 4744, column: 9, scope: !9070)
!9080 = !DILocation(line: 4745, column: 7, scope: !9070)
!9081 = distinct !{!9081, !9061, !9082}
!9082 = !DILocation(line: 4745, column: 7, scope: !9062)
!9083 = !DILocation(line: 4746, column: 1, scope: !9056)
!9084 = distinct !DISubprogram(name: "free_bb_note_pool", scope: !3, file: !3, line: 4781, type: !2608, scopeLine: 4782, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9085 = !DILocation(line: 4783, column: 3, scope: !9084)
!9086 = !DILocation(line: 4784, column: 1, scope: !9084)
!9087 = distinct !DISubprogram(name: "VEC_rtx_heap_free", scope: !414, file: !414, line: 201, type: !9088, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9088 = !DISubroutineType(types: !9089)
!9089 = !{null, !8892}
!9090 = !DILocalVariable(name: "vec_", arg: 1, scope: !9087, file: !414, line: 201, type: !8892)
!9091 = !DILocation(line: 201, column: 1, scope: !9087)
!9092 = !DILocation(line: 201, column: 1, scope: !9093)
!9093 = distinct !DILexicalBlock(scope: !9087, file: !414, line: 201, column: 1)
!9094 = distinct !DISubprogram(name: "alloc_sched_pools", scope: !3, file: !3, line: 4788, type: !2608, scopeLine: 4789, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9095 = !DILocalVariable(name: "succs_size", scope: !9094, file: !3, line: 4790, type: !874)
!9096 = !DILocation(line: 4790, column: 7, scope: !9094)
!9097 = !DILocation(line: 4792, column: 16, scope: !9094)
!9098 = !DILocation(line: 4792, column: 23, scope: !9094)
!9099 = !DILocation(line: 4792, column: 14, scope: !9094)
!9100 = !DILocation(line: 4793, column: 27, scope: !9094)
!9101 = !DILocation(line: 4793, column: 25, scope: !9094)
!9102 = !DILocation(line: 4794, column: 26, scope: !9094)
!9103 = !DILocation(line: 4794, column: 24, scope: !9094)
!9104 = !DILocation(line: 4795, column: 23, scope: !9094)
!9105 = !DILocation(line: 4796, column: 27, scope: !9094)
!9106 = !DILocation(line: 4798, column: 22, scope: !9094)
!9107 = !DILocation(line: 4798, column: 20, scope: !9094)
!9108 = !DILocation(line: 4800, column: 1, scope: !9094)
!9109 = distinct !DISubprogram(name: "free_sched_pools", scope: !3, file: !3, line: 4804, type: !2608, scopeLine: 4805, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9110 = !DILocalVariable(name: "i", scope: !9109, file: !3, line: 4806, type: !874)
!9111 = !DILocation(line: 4806, column: 7, scope: !9109)
!9112 = !DILocation(line: 4808, column: 20, scope: !9109)
!9113 = !DILocation(line: 4808, column: 3, scope: !9109)
!9114 = !DILocation(line: 4809, column: 3, scope: !9109)
!9115 = !DILocation(line: 4810, column: 10, scope: !9116)
!9116 = distinct !DILexicalBlock(scope: !9109, file: !3, line: 4810, column: 3)
!9117 = !DILocation(line: 4810, column: 8, scope: !9116)
!9118 = !DILocation(line: 4810, column: 15, scope: !9119)
!9119 = distinct !DILexicalBlock(scope: !9116, file: !3, line: 4810, column: 3)
!9120 = !DILocation(line: 4810, column: 35, scope: !9119)
!9121 = !DILocation(line: 4810, column: 17, scope: !9119)
!9122 = !DILocation(line: 4810, column: 3, scope: !9116)
!9123 = !DILocation(line: 4812, column: 7, scope: !9124)
!9124 = distinct !DILexicalBlock(scope: !9119, file: !3, line: 4811, column: 5)
!9125 = !DILocation(line: 4813, column: 7, scope: !9124)
!9126 = !DILocation(line: 4814, column: 7, scope: !9124)
!9127 = !DILocation(line: 4815, column: 5, scope: !9124)
!9128 = !DILocation(line: 4810, column: 45, scope: !9119)
!9129 = !DILocation(line: 4810, column: 3, scope: !9119)
!9130 = distinct !{!9130, !9122, !9131}
!9131 = !DILocation(line: 4815, column: 5, scope: !9116)
!9132 = !DILocation(line: 4816, column: 25, scope: !9109)
!9133 = !DILocation(line: 4816, column: 9, scope: !9109)
!9134 = !DILocation(line: 4816, column: 3, scope: !9109)
!9135 = !DILocation(line: 4817, column: 1, scope: !9109)
!9136 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !1374, file: !1374, line: 32, type: !9137, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9137 = !DISubroutineType(types: !9138)
!9138 = !{null, !8899}
!9139 = !DILocalVariable(name: "vec_", arg: 1, scope: !9136, file: !1374, line: 32, type: !8899)
!9140 = !DILocation(line: 32, column: 1, scope: !9136)
!9141 = !DILocation(line: 32, column: 1, scope: !9142)
!9142 = distinct !DILexicalBlock(scope: !9136, file: !1374, line: 32, column: 1)
!9143 = distinct !DISubprogram(name: "sel_remove_empty_bb", scope: !3, file: !3, line: 5055, type: !9144, scopeLine: 5057, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9144 = !DISubroutineType(types: !9145)
!9145 = !{null, !1391, !1085, !1085}
!9146 = !DILocalVariable(name: "empty_bb", arg: 1, scope: !9143, file: !3, line: 5055, type: !1391)
!9147 = !DILocation(line: 5055, column: 34, scope: !9143)
!9148 = !DILocalVariable(name: "merge_up_p", arg: 2, scope: !9143, file: !3, line: 5055, type: !1085)
!9149 = !DILocation(line: 5055, column: 49, scope: !9143)
!9150 = !DILocalVariable(name: "remove_from_cfg_p", arg: 3, scope: !9143, file: !3, line: 5056, type: !1085)
!9151 = !DILocation(line: 5056, column: 13, scope: !9143)
!9152 = !DILocalVariable(name: "merge_bb", scope: !9143, file: !3, line: 5058, type: !1391)
!9153 = !DILocation(line: 5058, column: 15, scope: !9143)
!9154 = !DILocation(line: 5060, column: 3, scope: !9143)
!9155 = !DILocation(line: 5062, column: 7, scope: !9156)
!9156 = distinct !DILexicalBlock(scope: !9143, file: !3, line: 5062, column: 7)
!9157 = !DILocation(line: 5062, column: 7, scope: !9143)
!9158 = !DILocation(line: 5064, column: 18, scope: !9159)
!9159 = distinct !DILexicalBlock(scope: !9156, file: !3, line: 5063, column: 5)
!9160 = !DILocation(line: 5064, column: 28, scope: !9159)
!9161 = !DILocation(line: 5064, column: 16, scope: !9159)
!9162 = !DILocation(line: 5065, column: 7, scope: !9159)
!9163 = !DILocation(line: 5067, column: 5, scope: !9159)
!9164 = !DILocalVariable(name: "e", scope: !9165, file: !3, line: 5070, type: !1408)
!9165 = distinct !DILexicalBlock(scope: !9156, file: !3, line: 5069, column: 5)
!9166 = !DILocation(line: 5070, column: 12, scope: !9165)
!9167 = !DILocalVariable(name: "ei", scope: !9165, file: !3, line: 5071, type: !3114)
!9168 = !DILocation(line: 5071, column: 21, scope: !9165)
!9169 = !DILocation(line: 5073, column: 30, scope: !9165)
!9170 = !DILocation(line: 5073, column: 18, scope: !9165)
!9171 = !DILocation(line: 5073, column: 16, scope: !9165)
!9172 = !DILocation(line: 5077, column: 17, scope: !9173)
!9173 = distinct !DILexicalBlock(scope: !9165, file: !3, line: 5077, column: 7)
!9174 = !DILocation(line: 5077, column: 12, scope: !9173)
!9175 = !DILocation(line: 5078, column: 17, scope: !9176)
!9176 = distinct !DILexicalBlock(scope: !9173, file: !3, line: 5077, column: 7)
!9177 = !DILocation(line: 5078, column: 15, scope: !9176)
!9178 = !DILocation(line: 5077, column: 7, scope: !9173)
!9179 = !DILocation(line: 5080, column: 18, scope: !9180)
!9180 = distinct !DILexicalBlock(scope: !9181, file: !3, line: 5080, column: 15)
!9181 = distinct !DILexicalBlock(scope: !9176, file: !3, line: 5079, column: 9)
!9182 = !DILocation(line: 5080, column: 21, scope: !9180)
!9183 = !DILocation(line: 5080, column: 27, scope: !9180)
!9184 = !DILocation(line: 5080, column: 15, scope: !9181)
!9185 = !DILocation(line: 5081, column: 43, scope: !9180)
!9186 = !DILocation(line: 5081, column: 46, scope: !9180)
!9187 = !DILocation(line: 5081, column: 13, scope: !9180)
!9188 = !DILocation(line: 5083, column: 13, scope: !9180)
!9189 = !DILocation(line: 5077, column: 7, scope: !9176)
!9190 = distinct !{!9190, !9178, !9191}
!9191 = !DILocation(line: 5084, column: 9, scope: !9173)
!9192 = !DILocation(line: 5086, column: 7, scope: !9165)
!9193 = !DILocation(line: 5090, column: 17, scope: !9143)
!9194 = !DILocation(line: 5090, column: 27, scope: !9143)
!9195 = !DILocation(line: 5090, column: 3, scope: !9143)
!9196 = !DILocation(line: 5091, column: 20, scope: !9143)
!9197 = !DILocation(line: 5091, column: 30, scope: !9143)
!9198 = !DILocation(line: 5091, column: 3, scope: !9143)
!9199 = !DILocation(line: 5092, column: 1, scope: !9143)
!9200 = distinct !DISubprogram(name: "ei_safe_edge", scope: !155, file: !155, line: 761, type: !9201, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9201 = !DISubroutineType(types: !9202)
!9202 = !{!1408, !3114}
!9203 = !DILocalVariable(name: "i", arg: 1, scope: !9200, file: !155, line: 761, type: !3114)
!9204 = !DILocation(line: 761, column: 29, scope: !9200)
!9205 = !DILocation(line: 763, column: 11, scope: !9200)
!9206 = !DILocation(line: 763, column: 10, scope: !9200)
!9207 = !DILocation(line: 763, column: 26, scope: !9200)
!9208 = !DILocation(line: 763, column: 3, scope: !9200)
!9209 = distinct !DISubprogram(name: "move_bb_info", scope: !3, file: !3, line: 5040, type: !2379, scopeLine: 5041, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9210 = !DILocalVariable(name: "merge_bb", arg: 1, scope: !9209, file: !3, line: 5040, type: !1391)
!9211 = !DILocation(line: 5040, column: 27, scope: !9209)
!9212 = !DILocalVariable(name: "empty_bb", arg: 2, scope: !9209, file: !3, line: 5040, type: !1391)
!9213 = !DILocation(line: 5040, column: 49, scope: !9209)
!9214 = !DILocation(line: 5042, column: 3, scope: !9209)
!9215 = !DILocation(line: 5044, column: 22, scope: !9209)
!9216 = !DILocation(line: 5045, column: 9, scope: !9209)
!9217 = !DILocation(line: 5044, column: 3, scope: !9209)
!9218 = !DILocation(line: 5046, column: 3, scope: !9209)
!9219 = !DILocation(line: 5046, column: 27, scope: !9209)
!9220 = !DILocation(line: 5048, column: 1, scope: !9209)
!9221 = distinct !DISubprogram(name: "remove_empty_bb", scope: !3, file: !3, line: 5097, type: !9222, scopeLine: 5098, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9222 = !DISubroutineType(types: !9223)
!9223 = !{null, !1391, !1085}
!9224 = !DILocalVariable(name: "empty_bb", arg: 1, scope: !9221, file: !3, line: 5097, type: !1391)
!9225 = !DILocation(line: 5097, column: 30, scope: !9221)
!9226 = !DILocalVariable(name: "remove_from_cfg_p", arg: 2, scope: !9221, file: !3, line: 5097, type: !1085)
!9227 = !DILocation(line: 5097, column: 45, scope: !9221)
!9228 = !DILocation(line: 5101, column: 3, scope: !9221)
!9229 = !DILocation(line: 5105, column: 7, scope: !9230)
!9230 = distinct !DILexicalBlock(scope: !9221, file: !3, line: 5105, column: 7)
!9231 = !DILocation(line: 5106, column: 7, scope: !9230)
!9232 = !DILocation(line: 5106, column: 11, scope: !9230)
!9233 = !DILocation(line: 5106, column: 40, scope: !9230)
!9234 = !DILocation(line: 5107, column: 4, scope: !9230)
!9235 = !DILocation(line: 5107, column: 7, scope: !9230)
!9236 = !DILocation(line: 5107, column: 36, scope: !9230)
!9237 = !DILocation(line: 5105, column: 7, scope: !9221)
!9238 = !DILocalVariable(name: "pred", scope: !9239, file: !3, line: 5109, type: !1391)
!9239 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 5108, column: 5)
!9240 = !DILocation(line: 5109, column: 19, scope: !9239)
!9241 = !DILocalVariable(name: "succ", scope: !9239, file: !3, line: 5110, type: !1391)
!9242 = !DILocation(line: 5110, column: 19, scope: !9239)
!9243 = !DILocation(line: 5113, column: 11, scope: !9244)
!9244 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 5113, column: 11)
!9245 = !DILocation(line: 5113, column: 40, scope: !9244)
!9246 = !DILocation(line: 5113, column: 11, scope: !9239)
!9247 = !DILocalVariable(name: "e", scope: !9248, file: !3, line: 5115, type: !1408)
!9248 = distinct !DILexicalBlock(scope: !9244, file: !3, line: 5114, column: 2)
!9249 = !DILocation(line: 5115, column: 9, scope: !9248)
!9250 = !DILocation(line: 5117, column: 4, scope: !9248)
!9251 = !DILocation(line: 5119, column: 8, scope: !9248)
!9252 = !DILocation(line: 5119, column: 6, scope: !9248)
!9253 = !DILocation(line: 5120, column: 11, scope: !9248)
!9254 = !DILocation(line: 5123, column: 11, scope: !9248)
!9255 = !DILocation(line: 5123, column: 21, scope: !9248)
!9256 = !DILocation(line: 5123, column: 9, scope: !9248)
!9257 = !DILocation(line: 5124, column: 2, scope: !9248)
!9258 = !DILocation(line: 5126, column: 7, scope: !9244)
!9259 = !DILocation(line: 5128, column: 11, scope: !9260)
!9260 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 5128, column: 11)
!9261 = !DILocation(line: 5128, column: 40, scope: !9260)
!9262 = !DILocation(line: 5128, column: 11, scope: !9239)
!9263 = !DILocation(line: 5132, column: 4, scope: !9264)
!9264 = distinct !DILexicalBlock(scope: !9260, file: !3, line: 5129, column: 2)
!9265 = !DILocation(line: 5133, column: 11, scope: !9264)
!9266 = !DILocation(line: 5133, column: 36, scope: !9264)
!9267 = !DILocation(line: 5133, column: 9, scope: !9264)
!9268 = !DILocation(line: 5134, column: 2, scope: !9264)
!9269 = !DILocation(line: 5136, column: 7, scope: !9260)
!9270 = !DILocation(line: 5138, column: 11, scope: !9271)
!9271 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 5138, column: 11)
!9272 = !DILocation(line: 5138, column: 40, scope: !9271)
!9273 = !DILocation(line: 5138, column: 44, scope: !9271)
!9274 = !DILocation(line: 5138, column: 47, scope: !9271)
!9275 = !DILocation(line: 5138, column: 52, scope: !9271)
!9276 = !DILocation(line: 5138, column: 11, scope: !9239)
!9277 = !DILocalVariable(name: "e", scope: !9278, file: !3, line: 5140, type: !1408)
!9278 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 5139, column: 9)
!9279 = !DILocation(line: 5140, column: 16, scope: !9278)
!9280 = !DILocation(line: 5140, column: 20, scope: !9278)
!9281 = !DILocation(line: 5142, column: 15, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9278, file: !3, line: 5142, column: 15)
!9283 = !DILocation(line: 5142, column: 18, scope: !9282)
!9284 = !DILocation(line: 5142, column: 24, scope: !9282)
!9285 = !DILocation(line: 5142, column: 15, scope: !9278)
!9286 = !DILocation(line: 5143, column: 39, scope: !9282)
!9287 = !DILocation(line: 5143, column: 42, scope: !9282)
!9288 = !DILocation(line: 5143, column: 13, scope: !9282)
!9289 = !DILocation(line: 5145, column: 43, scope: !9282)
!9290 = !DILocation(line: 5145, column: 68, scope: !9282)
!9291 = !DILocation(line: 5145, column: 13, scope: !9282)
!9292 = !DILocation(line: 5146, column: 9, scope: !9278)
!9293 = !DILocation(line: 5148, column: 11, scope: !9294)
!9294 = distinct !DILexicalBlock(scope: !9239, file: !3, line: 5148, column: 11)
!9295 = !DILocation(line: 5148, column: 40, scope: !9294)
!9296 = !DILocation(line: 5148, column: 44, scope: !9294)
!9297 = !DILocation(line: 5148, column: 47, scope: !9294)
!9298 = !DILocation(line: 5148, column: 52, scope: !9294)
!9299 = !DILocation(line: 5148, column: 11, scope: !9239)
!9300 = !DILocalVariable(name: "e", scope: !9301, file: !3, line: 5150, type: !1408)
!9301 = distinct !DILexicalBlock(scope: !9294, file: !3, line: 5149, column: 2)
!9302 = !DILocation(line: 5150, column: 9, scope: !9301)
!9303 = !DILocation(line: 5150, column: 13, scope: !9301)
!9304 = !DILocation(line: 5152, column: 19, scope: !9305)
!9305 = distinct !DILexicalBlock(scope: !9301, file: !3, line: 5152, column: 8)
!9306 = !DILocation(line: 5152, column: 25, scope: !9305)
!9307 = !DILocation(line: 5152, column: 28, scope: !9305)
!9308 = !DILocation(line: 5152, column: 8, scope: !9305)
!9309 = !DILocation(line: 5152, column: 34, scope: !9305)
!9310 = !DILocation(line: 5152, column: 8, scope: !9301)
!9311 = !DILocation(line: 5153, column: 26, scope: !9305)
!9312 = !DILocation(line: 5153, column: 29, scope: !9305)
!9313 = !DILocation(line: 5153, column: 6, scope: !9305)
!9314 = !DILocation(line: 5154, column: 2, scope: !9301)
!9315 = !DILocation(line: 5155, column: 5, scope: !9239)
!9316 = !DILocation(line: 5158, column: 18, scope: !9221)
!9317 = !DILocation(line: 5158, column: 28, scope: !9221)
!9318 = !DILocation(line: 5158, column: 3, scope: !9221)
!9319 = !DILocation(line: 5159, column: 1, scope: !9221)
!9320 = distinct !DISubprogram(name: "sel_split_edge", scope: !3, file: !3, line: 5295, type: !2511, scopeLine: 5296, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9321 = !DILocalVariable(name: "e", arg: 1, scope: !9320, file: !3, line: 5295, type: !1408)
!9322 = !DILocation(line: 5295, column: 22, scope: !9320)
!9323 = !DILocalVariable(name: "new_bb", scope: !9320, file: !3, line: 5297, type: !1391)
!9324 = !DILocation(line: 5297, column: 15, scope: !9320)
!9325 = !DILocalVariable(name: "src", scope: !9320, file: !3, line: 5297, type: !1391)
!9326 = !DILocation(line: 5297, column: 23, scope: !9320)
!9327 = !DILocalVariable(name: "other_bb", scope: !9320, file: !3, line: 5297, type: !1391)
!9328 = !DILocation(line: 5297, column: 28, scope: !9320)
!9329 = !DILocalVariable(name: "prev_max_uid", scope: !9320, file: !3, line: 5298, type: !874)
!9330 = !DILocation(line: 5298, column: 7, scope: !9320)
!9331 = !DILocalVariable(name: "jump", scope: !9320, file: !3, line: 5299, type: !850)
!9332 = !DILocation(line: 5299, column: 7, scope: !9320)
!9333 = !DILocation(line: 5301, column: 9, scope: !9320)
!9334 = !DILocation(line: 5301, column: 12, scope: !9320)
!9335 = !DILocation(line: 5301, column: 7, scope: !9320)
!9336 = !DILocation(line: 5302, column: 18, scope: !9320)
!9337 = !DILocation(line: 5302, column: 16, scope: !9320)
!9338 = !DILocation(line: 5303, column: 24, scope: !9320)
!9339 = !DILocation(line: 5303, column: 12, scope: !9320)
!9340 = !DILocation(line: 5303, column: 10, scope: !9320)
!9341 = !DILocation(line: 5305, column: 7, scope: !9342)
!9342 = distinct !DILexicalBlock(scope: !9320, file: !3, line: 5305, column: 7)
!9343 = !DILocation(line: 5306, column: 7, scope: !9342)
!9344 = !DILocation(line: 5306, column: 10, scope: !9342)
!9345 = !DILocation(line: 5305, column: 7, scope: !9320)
!9346 = !DILocalVariable(name: "i", scope: !9347, file: !3, line: 5308, type: !874)
!9347 = distinct !DILexicalBlock(scope: !9342, file: !3, line: 5307, column: 5)
!9348 = !DILocation(line: 5308, column: 11, scope: !9347)
!9349 = !DILocalVariable(name: "bb", scope: !9347, file: !3, line: 5309, type: !1391)
!9350 = !DILocation(line: 5309, column: 19, scope: !9347)
!9351 = !DILocation(line: 5313, column: 14, scope: !9352)
!9352 = distinct !DILexicalBlock(scope: !9347, file: !3, line: 5313, column: 7)
!9353 = !DILocation(line: 5313, column: 12, scope: !9352)
!9354 = !DILocation(line: 5314, column: 12, scope: !9355)
!9355 = distinct !DILexicalBlock(scope: !9352, file: !3, line: 5313, column: 7)
!9356 = !DILocation(line: 5313, column: 7, scope: !9352)
!9357 = !DILocation(line: 5315, column: 14, scope: !9358)
!9358 = distinct !DILexicalBlock(scope: !9355, file: !3, line: 5315, column: 13)
!9359 = !DILocation(line: 5315, column: 18, scope: !9358)
!9360 = !DILocation(line: 5315, column: 13, scope: !9355)
!9361 = !DILocation(line: 5317, column: 29, scope: !9362)
!9362 = distinct !DILexicalBlock(scope: !9358, file: !3, line: 5316, column: 11)
!9363 = !DILocation(line: 5317, column: 33, scope: !9362)
!9364 = !DILocation(line: 5317, column: 36, scope: !9362)
!9365 = !DILocation(line: 5317, column: 42, scope: !9362)
!9366 = !DILocation(line: 5317, column: 13, scope: !9362)
!9367 = !DILocation(line: 5319, column: 13, scope: !9362)
!9368 = !DILocation(line: 5320, column: 24, scope: !9362)
!9369 = !DILocation(line: 5320, column: 22, scope: !9362)
!9370 = !DILocation(line: 5321, column: 11, scope: !9362)
!9371 = !DILocation(line: 5314, column: 66, scope: !9355)
!9372 = !DILocation(line: 5313, column: 7, scope: !9355)
!9373 = distinct !{!9373, !9356, !9374}
!9374 = !DILocation(line: 5321, column: 11, scope: !9352)
!9375 = !DILocation(line: 5322, column: 5, scope: !9347)
!9376 = !DILocation(line: 5325, column: 3, scope: !9320)
!9377 = !DILocation(line: 5327, column: 25, scope: !9320)
!9378 = !DILocation(line: 5327, column: 30, scope: !9320)
!9379 = !DILocation(line: 5327, column: 38, scope: !9320)
!9380 = !DILocation(line: 5327, column: 10, scope: !9320)
!9381 = !DILocation(line: 5327, column: 8, scope: !9320)
!9382 = !DILocation(line: 5328, column: 7, scope: !9383)
!9383 = distinct !DILexicalBlock(scope: !9320, file: !3, line: 5328, column: 7)
!9384 = !DILocation(line: 5328, column: 7, scope: !9320)
!9385 = !DILocation(line: 5329, column: 24, scope: !9383)
!9386 = !DILocation(line: 5329, column: 5, scope: !9383)
!9387 = !DILocation(line: 5332, column: 7, scope: !9388)
!9388 = distinct !DILexicalBlock(scope: !9320, file: !3, line: 5332, column: 7)
!9389 = !DILocation(line: 5332, column: 16, scope: !9388)
!9390 = !DILocation(line: 5332, column: 36, scope: !9388)
!9391 = !DILocation(line: 5332, column: 20, scope: !9388)
!9392 = !DILocation(line: 5332, column: 7, scope: !9320)
!9393 = !DILocation(line: 5333, column: 32, scope: !9388)
!9394 = !DILocation(line: 5333, column: 19, scope: !9388)
!9395 = !DILocation(line: 5333, column: 5, scope: !9388)
!9396 = !DILocation(line: 5335, column: 10, scope: !9320)
!9397 = !DILocation(line: 5335, column: 3, scope: !9320)
!9398 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !155, file: !155, line: 281, type: !9399, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9399 = !DISubroutineType(types: !9400)
!9400 = !{!874, !7054, !7, !7045}
!9401 = !DILocalVariable(name: "vec_", arg: 1, scope: !9398, file: !155, line: 281, type: !7054)
!9402 = !DILocation(line: 281, column: 1, scope: !9398)
!9403 = !DILocalVariable(name: "ix_", arg: 2, scope: !9398, file: !155, line: 281, type: !7)
!9404 = !DILocalVariable(name: "ptr", arg: 3, scope: !9398, file: !155, line: 281, type: !7045)
!9405 = !DILocation(line: 281, column: 1, scope: !9406)
!9406 = distinct !DILexicalBlock(scope: !9398, file: !155, line: 281, column: 1)
!9407 = !DILocation(line: 281, column: 1, scope: !9408)
!9408 = distinct !DILexicalBlock(scope: !9406, file: !155, line: 281, column: 1)
!9409 = !DILocation(line: 281, column: 1, scope: !9410)
!9410 = distinct !DILexicalBlock(scope: !9406, file: !155, line: 281, column: 1)
!9411 = distinct !DISubprogram(name: "sel_add_bb", scope: !3, file: !3, line: 4971, type: !2478, scopeLine: 4972, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9412 = !DILocalVariable(name: "bb", arg: 1, scope: !9411, file: !3, line: 4971, type: !1391)
!9413 = !DILocation(line: 4971, column: 25, scope: !9411)
!9414 = !DILocation(line: 4974, column: 3, scope: !9411)
!9415 = !DILocation(line: 4975, column: 3, scope: !9411)
!9416 = !DILocation(line: 4976, column: 17, scope: !9411)
!9417 = !DILocation(line: 4976, column: 3, scope: !9411)
!9418 = !DILocation(line: 4981, column: 3, scope: !9411)
!9419 = !DILocation(line: 4983, column: 7, scope: !9420)
!9420 = distinct !DILexicalBlock(scope: !9411, file: !3, line: 4983, column: 7)
!9421 = !DILocation(line: 4983, column: 10, scope: !9420)
!9422 = !DILocation(line: 4983, column: 7, scope: !9411)
!9423 = !DILocation(line: 4985, column: 7, scope: !9424)
!9424 = distinct !DILexicalBlock(scope: !9420, file: !3, line: 4984, column: 5)
!9425 = !DILocation(line: 4988, column: 36, scope: !9424)
!9426 = !DILocation(line: 4988, column: 7, scope: !9424)
!9427 = !DILocation(line: 4992, column: 28, scope: !9428)
!9428 = distinct !DILexicalBlock(scope: !9424, file: !3, line: 4992, column: 11)
!9429 = !DILocation(line: 4992, column: 12, scope: !9428)
!9430 = !DILocation(line: 4992, column: 32, scope: !9428)
!9431 = !DILocation(line: 4992, column: 35, scope: !9428)
!9432 = !DILocation(line: 4992, column: 50, scope: !9428)
!9433 = !DILocation(line: 4992, column: 11, scope: !9424)
!9434 = !DILocation(line: 4993, column: 28, scope: !9428)
!9435 = !DILocation(line: 4993, column: 2, scope: !9428)
!9436 = !DILocation(line: 4995, column: 7, scope: !9424)
!9437 = !DILocation(line: 4996, column: 5, scope: !9424)
!9438 = !DILocalVariable(name: "i", scope: !9439, file: !3, line: 5000, type: !874)
!9439 = distinct !DILexicalBlock(scope: !9420, file: !3, line: 4999, column: 5)
!9440 = !DILocation(line: 5000, column: 11, scope: !9439)
!9441 = !DILocalVariable(name: "temp_bb", scope: !9439, file: !3, line: 5001, type: !1391)
!9442 = !DILocation(line: 5001, column: 19, scope: !9439)
!9443 = !DILocation(line: 5003, column: 14, scope: !9444)
!9444 = distinct !DILexicalBlock(scope: !9439, file: !3, line: 5003, column: 7)
!9445 = !DILocation(line: 5003, column: 12, scope: !9444)
!9446 = !DILocation(line: 5004, column: 12, scope: !9447)
!9447 = distinct !DILexicalBlock(scope: !9444, file: !3, line: 5003, column: 7)
!9448 = !DILocation(line: 5003, column: 7, scope: !9444)
!9449 = !DILocation(line: 5006, column: 40, scope: !9450)
!9450 = distinct !DILexicalBlock(scope: !9447, file: !3, line: 5005, column: 9)
!9451 = !DILocation(line: 5006, column: 11, scope: !9450)
!9452 = !DILocation(line: 5007, column: 21, scope: !9450)
!9453 = !DILocation(line: 5007, column: 19, scope: !9450)
!9454 = !DILocation(line: 5008, column: 9, scope: !9450)
!9455 = !DILocation(line: 5004, column: 66, scope: !9447)
!9456 = !DILocation(line: 5003, column: 7, scope: !9447)
!9457 = distinct !{!9457, !9448, !9458}
!9458 = !DILocation(line: 5008, column: 9, scope: !9444)
!9459 = !DILocation(line: 5012, column: 7, scope: !9439)
!9460 = !DILocation(line: 5013, column: 12, scope: !9439)
!9461 = !DILocation(line: 5013, column: 10, scope: !9439)
!9462 = !DILocation(line: 5015, column: 7, scope: !9439)
!9463 = !DILocation(line: 5018, column: 21, scope: !9411)
!9464 = !DILocation(line: 5018, column: 3, scope: !9411)
!9465 = !DILocation(line: 5019, column: 1, scope: !9411)
!9466 = distinct !DISubprogram(name: "find_new_jump", scope: !3, file: !3, line: 5274, type: !9467, scopeLine: 5275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9467 = !DISubroutineType(types: !9468)
!9468 = !{!850, !1391, !1391, !874}
!9469 = !DILocalVariable(name: "from", arg: 1, scope: !9466, file: !3, line: 5274, type: !1391)
!9470 = !DILocation(line: 5274, column: 28, scope: !9466)
!9471 = !DILocalVariable(name: "jump_bb", arg: 2, scope: !9466, file: !3, line: 5274, type: !1391)
!9472 = !DILocation(line: 5274, column: 46, scope: !9466)
!9473 = !DILocalVariable(name: "prev_max_uid", arg: 3, scope: !9466, file: !3, line: 5274, type: !874)
!9474 = !DILocation(line: 5274, column: 59, scope: !9466)
!9475 = !DILocalVariable(name: "jump", scope: !9466, file: !3, line: 5276, type: !850)
!9476 = !DILocation(line: 5276, column: 7, scope: !9466)
!9477 = !DILocation(line: 5279, column: 7, scope: !9478)
!9478 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5279, column: 7)
!9479 = !DILocation(line: 5279, column: 25, scope: !9478)
!9480 = !DILocation(line: 5279, column: 22, scope: !9478)
!9481 = !DILocation(line: 5279, column: 7, scope: !9466)
!9482 = !DILocation(line: 5280, column: 5, scope: !9478)
!9483 = !DILocation(line: 5283, column: 35, scope: !9484)
!9484 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5283, column: 7)
!9485 = !DILocation(line: 5283, column: 41, scope: !9484)
!9486 = !DILocation(line: 5283, column: 15, scope: !9484)
!9487 = !DILocation(line: 5283, column: 13, scope: !9484)
!9488 = !DILocation(line: 5283, column: 7, scope: !9466)
!9489 = !DILocation(line: 5284, column: 12, scope: !9484)
!9490 = !DILocation(line: 5284, column: 5, scope: !9484)
!9491 = !DILocation(line: 5286, column: 7, scope: !9492)
!9492 = distinct !DILexicalBlock(scope: !9466, file: !3, line: 5286, column: 7)
!9493 = !DILocation(line: 5286, column: 15, scope: !9492)
!9494 = !DILocation(line: 5287, column: 7, scope: !9492)
!9495 = !DILocation(line: 5287, column: 38, scope: !9492)
!9496 = !DILocation(line: 5287, column: 47, scope: !9492)
!9497 = !DILocation(line: 5287, column: 18, scope: !9492)
!9498 = !DILocation(line: 5287, column: 16, scope: !9492)
!9499 = !DILocation(line: 5286, column: 7, scope: !9466)
!9500 = !DILocation(line: 5288, column: 12, scope: !9492)
!9501 = !DILocation(line: 5288, column: 5, scope: !9492)
!9502 = !DILocation(line: 5289, column: 3, scope: !9466)
!9503 = !DILocation(line: 5290, column: 1, scope: !9466)
!9504 = distinct !DISubprogram(name: "sel_create_recovery_block", scope: !3, file: !3, line: 5358, type: !9505, scopeLine: 5359, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9505 = !DISubroutineType(types: !9506)
!9506 = !{!1391, !2104}
!9507 = !DILocalVariable(name: "orig_insn", arg: 1, scope: !9504, file: !3, line: 5358, type: !2104)
!9508 = !DILocation(line: 5358, column: 35, scope: !9504)
!9509 = !DILocalVariable(name: "first_bb", scope: !9504, file: !3, line: 5360, type: !1391)
!9510 = !DILocation(line: 5360, column: 15, scope: !9504)
!9511 = !DILocalVariable(name: "second_bb", scope: !9504, file: !3, line: 5360, type: !1391)
!9512 = !DILocation(line: 5360, column: 25, scope: !9504)
!9513 = !DILocalVariable(name: "recovery_block", scope: !9504, file: !3, line: 5360, type: !1391)
!9514 = !DILocation(line: 5360, column: 36, scope: !9504)
!9515 = !DILocalVariable(name: "before_recovery", scope: !9504, file: !3, line: 5361, type: !1391)
!9516 = !DILocation(line: 5361, column: 15, scope: !9504)
!9517 = !DILocalVariable(name: "jump", scope: !9504, file: !3, line: 5362, type: !850)
!9518 = !DILocation(line: 5362, column: 7, scope: !9504)
!9519 = !DILocation(line: 5364, column: 14, scope: !9504)
!9520 = !DILocation(line: 5364, column: 12, scope: !9504)
!9521 = !DILocation(line: 5365, column: 21, scope: !9522)
!9522 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 5365, column: 7)
!9523 = !DILocation(line: 5365, column: 7, scope: !9522)
!9524 = !DILocation(line: 5365, column: 7, scope: !9504)
!9525 = !DILocation(line: 5368, column: 7, scope: !9526)
!9526 = distinct !DILexicalBlock(scope: !9522, file: !3, line: 5366, column: 5)
!9527 = !DILocation(line: 5369, column: 32, scope: !9526)
!9528 = !DILocation(line: 5369, column: 19, scope: !9526)
!9529 = !DILocation(line: 5369, column: 17, scope: !9526)
!9530 = !DILocation(line: 5370, column: 5, scope: !9526)
!9531 = !DILocation(line: 5372, column: 17, scope: !9522)
!9532 = !DILocation(line: 5372, column: 36, scope: !9522)
!9533 = !DILocation(line: 5372, column: 46, scope: !9522)
!9534 = !DILocation(line: 5372, column: 15, scope: !9522)
!9535 = !DILocation(line: 5374, column: 20, scope: !9504)
!9536 = !DILocation(line: 5374, column: 18, scope: !9504)
!9537 = !DILocation(line: 5375, column: 7, scope: !9538)
!9538 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 5375, column: 7)
!9539 = !DILocation(line: 5375, column: 7, scope: !9504)
!9540 = !DILocation(line: 5376, column: 23, scope: !9538)
!9541 = !DILocation(line: 5376, column: 40, scope: !9538)
!9542 = !DILocation(line: 5376, column: 5, scope: !9538)
!9543 = !DILocation(line: 5378, column: 3, scope: !9504)
!9544 = !DILocation(line: 5379, column: 32, scope: !9504)
!9545 = !DILocation(line: 5379, column: 42, scope: !9504)
!9546 = !DILocation(line: 5379, column: 58, scope: !9504)
!9547 = !DILocation(line: 5379, column: 3, scope: !9504)
!9548 = !DILocation(line: 5380, column: 7, scope: !9549)
!9549 = distinct !DILexicalBlock(scope: !9504, file: !3, line: 5380, column: 7)
!9550 = !DILocation(line: 5380, column: 21, scope: !9549)
!9551 = !DILocation(line: 5380, column: 7, scope: !9504)
!9552 = !DILocation(line: 5381, column: 21, scope: !9549)
!9553 = !DILocation(line: 5381, column: 37, scope: !9549)
!9554 = !DILocation(line: 5381, column: 47, scope: !9549)
!9555 = !DILocation(line: 5381, column: 5, scope: !9549)
!9556 = !DILocation(line: 5383, column: 15, scope: !9504)
!9557 = !DILocation(line: 5383, column: 3, scope: !9504)
!9558 = !DILocation(line: 5385, column: 10, scope: !9504)
!9559 = !DILocation(line: 5385, column: 8, scope: !9504)
!9560 = !DILocation(line: 5386, column: 3, scope: !9504)
!9561 = !DILocation(line: 5387, column: 22, scope: !9504)
!9562 = !DILocation(line: 5387, column: 3, scope: !9504)
!9563 = !DILocation(line: 5389, column: 10, scope: !9504)
!9564 = !DILocation(line: 5389, column: 3, scope: !9504)
!9565 = distinct !DISubprogram(name: "copy_lv_set_from", scope: !3, file: !3, line: 4102, type: !2379, scopeLine: 4103, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9566 = !DILocalVariable(name: "bb", arg: 1, scope: !9565, file: !3, line: 4102, type: !1391)
!9567 = !DILocation(line: 4102, column: 31, scope: !9565)
!9568 = !DILocalVariable(name: "from_bb", arg: 2, scope: !9565, file: !3, line: 4102, type: !1391)
!9569 = !DILocation(line: 4102, column: 47, scope: !9565)
!9570 = !DILocation(line: 4104, column: 3, scope: !9565)
!9571 = !DILocation(line: 4106, column: 3, scope: !9565)
!9572 = !DILocation(line: 4107, column: 3, scope: !9565)
!9573 = !DILocation(line: 4107, column: 26, scope: !9565)
!9574 = !DILocation(line: 4108, column: 1, scope: !9565)
!9575 = distinct !DISubprogram(name: "sel_merge_blocks", scope: !3, file: !3, line: 5394, type: !2379, scopeLine: 5395, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9576 = !DILocalVariable(name: "a", arg: 1, scope: !9575, file: !3, line: 5394, type: !1391)
!9577 = !DILocation(line: 5394, column: 31, scope: !9575)
!9578 = !DILocalVariable(name: "b", arg: 2, scope: !9575, file: !3, line: 5394, type: !1391)
!9579 = !DILocation(line: 5394, column: 46, scope: !9575)
!9580 = !DILocation(line: 5396, column: 24, scope: !9575)
!9581 = !DILocation(line: 5396, column: 3, scope: !9575)
!9582 = !DILocation(line: 5397, column: 17, scope: !9575)
!9583 = !DILocation(line: 5397, column: 20, scope: !9575)
!9584 = !DILocation(line: 5397, column: 3, scope: !9575)
!9585 = !DILocation(line: 5399, column: 25, scope: !9575)
!9586 = !DILocation(line: 5399, column: 28, scope: !9575)
!9587 = !DILocation(line: 5399, column: 3, scope: !9575)
!9588 = !DILocation(line: 5400, column: 1, scope: !9575)
!9589 = distinct !DISubprogram(name: "change_loops_latches", scope: !3, file: !3, line: 5201, type: !2379, scopeLine: 5202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9590 = !DILocalVariable(name: "from", arg: 1, scope: !9589, file: !3, line: 5201, type: !1391)
!9591 = !DILocation(line: 5201, column: 35, scope: !9589)
!9592 = !DILocalVariable(name: "to", arg: 2, scope: !9589, file: !3, line: 5201, type: !1391)
!9593 = !DILocation(line: 5201, column: 53, scope: !9589)
!9594 = !DILocation(line: 5203, column: 3, scope: !9589)
!9595 = !DILocation(line: 5205, column: 7, scope: !9596)
!9596 = distinct !DILexicalBlock(scope: !9589, file: !3, line: 5205, column: 7)
!9597 = !DILocation(line: 5205, column: 7, scope: !9589)
!9598 = !DILocalVariable(name: "loop", scope: !9599, file: !3, line: 5207, type: !1433)
!9599 = distinct !DILexicalBlock(scope: !9596, file: !3, line: 5206, column: 5)
!9600 = !DILocation(line: 5207, column: 20, scope: !9599)
!9601 = !DILocation(line: 5209, column: 19, scope: !9602)
!9602 = distinct !DILexicalBlock(scope: !9599, file: !3, line: 5209, column: 7)
!9603 = !DILocation(line: 5209, column: 17, scope: !9602)
!9604 = !DILocation(line: 5209, column: 12, scope: !9602)
!9605 = !DILocation(line: 5209, column: 38, scope: !9606)
!9606 = distinct !DILexicalBlock(scope: !9602, file: !3, line: 5209, column: 7)
!9607 = !DILocation(line: 5209, column: 7, scope: !9602)
!9608 = !DILocation(line: 5210, column: 42, scope: !9609)
!9609 = distinct !DILexicalBlock(scope: !9606, file: !3, line: 5210, column: 13)
!9610 = !DILocation(line: 5210, column: 13, scope: !9609)
!9611 = !DILocation(line: 5210, column: 48, scope: !9609)
!9612 = !DILocation(line: 5210, column: 51, scope: !9609)
!9613 = !DILocation(line: 5210, column: 57, scope: !9609)
!9614 = !DILocation(line: 5210, column: 66, scope: !9609)
!9615 = !DILocation(line: 5210, column: 63, scope: !9609)
!9616 = !DILocation(line: 5210, column: 13, scope: !9606)
!9617 = !DILocation(line: 5212, column: 13, scope: !9618)
!9618 = distinct !DILexicalBlock(scope: !9609, file: !3, line: 5211, column: 11)
!9619 = !DILocation(line: 5213, column: 27, scope: !9618)
!9620 = !DILocation(line: 5213, column: 13, scope: !9618)
!9621 = !DILocation(line: 5213, column: 19, scope: !9618)
!9622 = !DILocation(line: 5213, column: 25, scope: !9618)
!9623 = !DILocation(line: 5214, column: 13, scope: !9618)
!9624 = !DILocation(line: 5215, column: 11, scope: !9618)
!9625 = !DILocation(line: 5209, column: 63, scope: !9606)
!9626 = !DILocation(line: 5209, column: 51, scope: !9606)
!9627 = !DILocation(line: 5209, column: 49, scope: !9606)
!9628 = !DILocation(line: 5209, column: 7, scope: !9606)
!9629 = distinct !{!9629, !9607, !9630}
!9630 = !DILocation(line: 5215, column: 11, scope: !9602)
!9631 = !DILocation(line: 5216, column: 5, scope: !9599)
!9632 = !DILocation(line: 5217, column: 1, scope: !9589)
!9633 = distinct !DISubprogram(name: "sel_redirect_edge_and_branch_force", scope: !3, file: !3, line: 5406, type: !9634, scopeLine: 5407, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9634 = !DISubroutineType(types: !9635)
!9635 = !{null, !1408, !1391}
!9636 = !DILocalVariable(name: "e", arg: 1, scope: !9633, file: !3, line: 5406, type: !1408)
!9637 = !DILocation(line: 5406, column: 42, scope: !9633)
!9638 = !DILocalVariable(name: "to", arg: 2, scope: !9633, file: !3, line: 5406, type: !1391)
!9639 = !DILocation(line: 5406, column: 57, scope: !9633)
!9640 = !DILocalVariable(name: "jump_bb", scope: !9633, file: !3, line: 5408, type: !1391)
!9641 = !DILocation(line: 5408, column: 15, scope: !9633)
!9642 = !DILocalVariable(name: "src", scope: !9633, file: !3, line: 5408, type: !1391)
!9643 = !DILocation(line: 5408, column: 24, scope: !9633)
!9644 = !DILocalVariable(name: "prev_max_uid", scope: !9633, file: !3, line: 5409, type: !874)
!9645 = !DILocation(line: 5409, column: 7, scope: !9633)
!9646 = !DILocalVariable(name: "jump", scope: !9633, file: !3, line: 5410, type: !850)
!9647 = !DILocation(line: 5410, column: 7, scope: !9633)
!9648 = !DILocation(line: 5412, column: 3, scope: !9633)
!9649 = !DILocation(line: 5414, column: 9, scope: !9633)
!9650 = !DILocation(line: 5414, column: 12, scope: !9633)
!9651 = !DILocation(line: 5414, column: 7, scope: !9633)
!9652 = !DILocation(line: 5415, column: 18, scope: !9633)
!9653 = !DILocation(line: 5415, column: 16, scope: !9633)
!9654 = !DILocation(line: 5416, column: 45, scope: !9633)
!9655 = !DILocation(line: 5416, column: 48, scope: !9633)
!9656 = !DILocation(line: 5416, column: 13, scope: !9633)
!9657 = !DILocation(line: 5416, column: 11, scope: !9633)
!9658 = !DILocation(line: 5418, column: 7, scope: !9659)
!9659 = distinct !DILexicalBlock(scope: !9633, file: !3, line: 5418, column: 7)
!9660 = !DILocation(line: 5418, column: 15, scope: !9659)
!9661 = !DILocation(line: 5418, column: 7, scope: !9633)
!9662 = !DILocation(line: 5419, column: 17, scope: !9659)
!9663 = !DILocation(line: 5419, column: 5, scope: !9659)
!9664 = !DILocation(line: 5423, column: 7, scope: !9665)
!9665 = distinct !DILexicalBlock(scope: !9633, file: !3, line: 5423, column: 7)
!9666 = !DILocation(line: 5424, column: 7, scope: !9665)
!9667 = !DILocation(line: 5424, column: 10, scope: !9665)
!9668 = !DILocation(line: 5423, column: 7, scope: !9633)
!9669 = !DILocation(line: 5425, column: 5, scope: !9665)
!9670 = !DILocation(line: 5427, column: 25, scope: !9633)
!9671 = !DILocation(line: 5427, column: 30, scope: !9633)
!9672 = !DILocation(line: 5427, column: 39, scope: !9633)
!9673 = !DILocation(line: 5427, column: 10, scope: !9633)
!9674 = !DILocation(line: 5427, column: 8, scope: !9633)
!9675 = !DILocation(line: 5428, column: 7, scope: !9676)
!9676 = distinct !DILexicalBlock(scope: !9633, file: !3, line: 5428, column: 7)
!9677 = !DILocation(line: 5428, column: 7, scope: !9633)
!9678 = !DILocation(line: 5429, column: 24, scope: !9676)
!9679 = !DILocation(line: 5429, column: 5, scope: !9676)
!9680 = !DILocation(line: 5430, column: 1, scope: !9633)
!9681 = distinct !DISubprogram(name: "sel_register_cfg_hooks", scope: !3, file: !3, line: 5481, type: !2608, scopeLine: 5482, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9682 = !DILocation(line: 5483, column: 21, scope: !9681)
!9683 = !DILocation(line: 5485, column: 20, scope: !9681)
!9684 = !DILocation(line: 5486, column: 19, scope: !9681)
!9685 = !DILocation(line: 5488, column: 36, scope: !9681)
!9686 = !DILocation(line: 5490, column: 3, scope: !9681)
!9687 = !DILocation(line: 5492, column: 22, scope: !9681)
!9688 = !DILocation(line: 5493, column: 21, scope: !9681)
!9689 = !DILocation(line: 5494, column: 25, scope: !9681)
!9690 = !DILocation(line: 5495, column: 1, scope: !9681)
!9691 = distinct !DISubprogram(name: "sel_split_block", scope: !3, file: !3, line: 5222, type: !2732, scopeLine: 5223, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9692 = !DILocalVariable(name: "bb", arg: 1, scope: !9691, file: !3, line: 5222, type: !1391)
!9693 = !DILocation(line: 5222, column: 30, scope: !9691)
!9694 = !DILocalVariable(name: "after", arg: 2, scope: !9691, file: !3, line: 5222, type: !850)
!9695 = !DILocation(line: 5222, column: 38, scope: !9691)
!9696 = !DILocalVariable(name: "new_bb", scope: !9691, file: !3, line: 5224, type: !1391)
!9697 = !DILocation(line: 5224, column: 15, scope: !9691)
!9698 = !DILocalVariable(name: "insn", scope: !9691, file: !3, line: 5225, type: !2104)
!9699 = !DILocation(line: 5225, column: 10, scope: !9691)
!9700 = !DILocation(line: 5227, column: 33, scope: !9691)
!9701 = !DILocation(line: 5227, column: 37, scope: !9691)
!9702 = !DILocation(line: 5227, column: 12, scope: !9691)
!9703 = !DILocation(line: 5227, column: 10, scope: !9691)
!9704 = !DILocation(line: 5228, column: 15, scope: !9691)
!9705 = !DILocation(line: 5228, column: 3, scope: !9691)
!9706 = !DILocation(line: 5233, column: 25, scope: !9691)
!9707 = !DILocation(line: 5233, column: 29, scope: !9691)
!9708 = !DILocation(line: 5233, column: 3, scope: !9691)
!9709 = !DILocation(line: 5236, column: 3, scope: !9710)
!9710 = distinct !DILexicalBlock(scope: !9691, file: !3, line: 5236, column: 3)
!9711 = !DILocation(line: 5236, column: 3, scope: !9712)
!9712 = distinct !DILexicalBlock(scope: !9710, file: !3, line: 5236, column: 3)
!9713 = !DILocation(line: 0, scope: !9712)
!9714 = !DILocation(line: 5237, column: 8, scope: !9715)
!9715 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 5237, column: 8)
!9716 = !DILocation(line: 5237, column: 8, scope: !9712)
!9717 = !DILocation(line: 5238, column: 46, scope: !9715)
!9718 = !DILocation(line: 5238, column: 54, scope: !9715)
!9719 = !DILocation(line: 5238, column: 6, scope: !9715)
!9720 = !DILocation(line: 5238, column: 44, scope: !9715)
!9721 = distinct !{!9721, !9709, !9722}
!9722 = !DILocation(line: 5238, column: 54, scope: !9710)
!9723 = !DILocation(line: 5240, column: 23, scope: !9724)
!9724 = distinct !DILexicalBlock(scope: !9691, file: !3, line: 5240, column: 7)
!9725 = !DILocation(line: 5240, column: 7, scope: !9724)
!9726 = !DILocation(line: 5240, column: 7, scope: !9691)
!9727 = !DILocation(line: 5242, column: 7, scope: !9728)
!9728 = distinct !DILexicalBlock(scope: !9724, file: !3, line: 5241, column: 5)
!9729 = !DILocation(line: 5247, column: 27, scope: !9728)
!9730 = !DILocation(line: 5247, column: 35, scope: !9728)
!9731 = !DILocation(line: 5247, column: 7, scope: !9728)
!9732 = !DILocation(line: 5248, column: 23, scope: !9728)
!9733 = !DILocation(line: 5248, column: 7, scope: !9728)
!9734 = !DILocation(line: 5249, column: 5, scope: !9728)
!9735 = !DILocation(line: 5251, column: 24, scope: !9736)
!9736 = distinct !DILexicalBlock(scope: !9691, file: !3, line: 5251, column: 7)
!9737 = !DILocation(line: 5251, column: 8, scope: !9736)
!9738 = !DILocation(line: 5252, column: 7, scope: !9736)
!9739 = !DILocation(line: 5252, column: 24, scope: !9736)
!9740 = !DILocation(line: 5252, column: 46, scope: !9736)
!9741 = !DILocation(line: 5252, column: 50, scope: !9736)
!9742 = !DILocation(line: 5252, column: 10, scope: !9736)
!9743 = !DILocation(line: 5251, column: 7, scope: !9691)
!9744 = !DILocation(line: 5253, column: 21, scope: !9736)
!9745 = !DILocation(line: 5253, column: 43, scope: !9736)
!9746 = !DILocation(line: 5253, column: 51, scope: !9736)
!9747 = !DILocation(line: 5253, column: 5, scope: !9736)
!9748 = !DILocation(line: 5255, column: 10, scope: !9691)
!9749 = !DILocation(line: 5255, column: 3, scope: !9691)
!9750 = distinct !DISubprogram(name: "sel_create_basic_block", scope: !3, file: !3, line: 5164, type: !2459, scopeLine: 5165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9751 = !DILocalVariable(name: "headp", arg: 1, scope: !9750, file: !3, line: 5164, type: !962)
!9752 = !DILocation(line: 5164, column: 31, scope: !9750)
!9753 = !DILocalVariable(name: "endp", arg: 2, scope: !9750, file: !3, line: 5164, type: !962)
!9754 = !DILocation(line: 5164, column: 44, scope: !9750)
!9755 = !DILocalVariable(name: "after", arg: 3, scope: !9750, file: !3, line: 5164, type: !1391)
!9756 = !DILocation(line: 5164, column: 62, scope: !9750)
!9757 = !DILocalVariable(name: "new_bb", scope: !9750, file: !3, line: 5166, type: !1391)
!9758 = !DILocation(line: 5166, column: 15, scope: !9750)
!9759 = !DILocalVariable(name: "new_bb_note", scope: !9750, file: !3, line: 5167, type: !2104)
!9760 = !DILocation(line: 5167, column: 10, scope: !9750)
!9761 = !DILocation(line: 5169, column: 3, scope: !9750)
!9762 = !DILocation(line: 5172, column: 17, scope: !9750)
!9763 = !DILocation(line: 5172, column: 15, scope: !9750)
!9764 = !DILocation(line: 5174, column: 7, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !9750, file: !3, line: 5174, column: 7)
!9766 = !DILocation(line: 5174, column: 19, scope: !9765)
!9767 = !DILocation(line: 5174, column: 7, scope: !9750)
!9768 = !DILocation(line: 5175, column: 29, scope: !9765)
!9769 = !DILocation(line: 5175, column: 49, scope: !9765)
!9770 = !DILocation(line: 5175, column: 56, scope: !9765)
!9771 = !DILocation(line: 5175, column: 62, scope: !9765)
!9772 = !DILocation(line: 5175, column: 14, scope: !9765)
!9773 = !DILocation(line: 5175, column: 12, scope: !9765)
!9774 = !DILocation(line: 5175, column: 5, scope: !9765)
!9775 = !DILocation(line: 5178, column: 52, scope: !9776)
!9776 = distinct !DILexicalBlock(scope: !9765, file: !3, line: 5177, column: 5)
!9777 = !DILocation(line: 5178, column: 46, scope: !9776)
!9778 = !DILocation(line: 5178, column: 65, scope: !9776)
!9779 = !DILocation(line: 5178, column: 59, scope: !9776)
!9780 = !DILocation(line: 5179, column: 11, scope: !9776)
!9781 = !DILocation(line: 5179, column: 24, scope: !9776)
!9782 = !DILocation(line: 5178, column: 16, scope: !9776)
!9783 = !DILocation(line: 5178, column: 14, scope: !9776)
!9784 = !DILocation(line: 5180, column: 7, scope: !9776)
!9785 = !DILocation(line: 5180, column: 15, scope: !9776)
!9786 = !DILocation(line: 5180, column: 19, scope: !9776)
!9787 = !DILocation(line: 5183, column: 3, scope: !9750)
!9788 = !DILocation(line: 5185, column: 10, scope: !9750)
!9789 = !DILocation(line: 5185, column: 3, scope: !9750)
!9790 = distinct !DISubprogram(name: "sel_init_only_bb", scope: !3, file: !3, line: 5190, type: !2379, scopeLine: 5191, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9791 = !DILocalVariable(name: "bb", arg: 1, scope: !9790, file: !3, line: 5190, type: !1391)
!9792 = !DILocation(line: 5190, column: 31, scope: !9790)
!9793 = !DILocalVariable(name: "after", arg: 2, scope: !9790, file: !3, line: 5190, type: !1391)
!9794 = !DILocation(line: 5190, column: 47, scope: !9790)
!9795 = !DILocation(line: 5192, column: 3, scope: !9790)
!9796 = !DILocation(line: 5194, column: 3, scope: !9790)
!9797 = !DILocation(line: 5195, column: 41, scope: !9790)
!9798 = !DILocation(line: 5195, column: 3, scope: !9790)
!9799 = !DILocation(line: 5196, column: 1, scope: !9790)
!9800 = distinct !DISubprogram(name: "sel_create_empty_bb", scope: !3, file: !3, line: 5340, type: !2507, scopeLine: 5341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9801 = !DILocalVariable(name: "after", arg: 1, scope: !9800, file: !3, line: 5340, type: !1391)
!9802 = !DILocation(line: 5340, column: 34, scope: !9800)
!9803 = !DILocalVariable(name: "new_bb", scope: !9800, file: !3, line: 5342, type: !1391)
!9804 = !DILocation(line: 5342, column: 15, scope: !9800)
!9805 = !DILocation(line: 5344, column: 37, scope: !9800)
!9806 = !DILocation(line: 5344, column: 12, scope: !9800)
!9807 = !DILocation(line: 5344, column: 10, scope: !9800)
!9808 = !DILocation(line: 5348, column: 3, scope: !9800)
!9809 = !DILocation(line: 5351, column: 3, scope: !9800)
!9810 = !DILocation(line: 5352, column: 10, scope: !9800)
!9811 = !DILocation(line: 5352, column: 3, scope: !9800)
!9812 = distinct !DISubprogram(name: "sel_unregister_cfg_hooks", scope: !3, file: !3, line: 5499, type: !2608, scopeLine: 5500, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9813 = !DILocation(line: 5501, column: 25, scope: !9812)
!9814 = !DILocation(line: 5502, column: 21, scope: !9812)
!9815 = !DILocation(line: 5503, column: 22, scope: !9812)
!9816 = !DILocation(line: 5505, column: 3, scope: !9812)
!9817 = !DILocation(line: 5506, column: 1, scope: !9812)
!9818 = distinct !DISubprogram(name: "recog_memoized", scope: !9819, file: !9819, line: 150, type: !2387, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9819 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!9820 = !DILocalVariable(name: "insn", arg: 1, scope: !9818, file: !9819, line: 150, type: !850)
!9821 = !DILocation(line: 150, column: 21, scope: !9818)
!9822 = !DILocation(line: 152, column: 7, scope: !9823)
!9823 = distinct !DILexicalBlock(scope: !9818, file: !9819, line: 152, column: 7)
!9824 = !DILocation(line: 152, column: 24, scope: !9823)
!9825 = !DILocation(line: 152, column: 7, scope: !9818)
!9826 = !DILocation(line: 153, column: 31, scope: !9823)
!9827 = !DILocation(line: 153, column: 47, scope: !9823)
!9828 = !DILocation(line: 153, column: 24, scope: !9823)
!9829 = !DILocation(line: 153, column: 5, scope: !9823)
!9830 = !DILocation(line: 153, column: 22, scope: !9823)
!9831 = !DILocation(line: 154, column: 10, scope: !9818)
!9832 = !DILocation(line: 154, column: 3, scope: !9818)
!9833 = distinct !DISubprogram(name: "vinsn_create", scope: !3, file: !3, line: 1227, type: !9834, scopeLine: 1228, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9834 = !DISubroutineType(types: !9835)
!9835 = !{!2151, !2104, !1085}
!9836 = !DILocalVariable(name: "insn", arg: 1, scope: !9833, file: !3, line: 1227, type: !2104)
!9837 = !DILocation(line: 1227, column: 22, scope: !9833)
!9838 = !DILocalVariable(name: "force_unique_p", arg: 2, scope: !9833, file: !3, line: 1227, type: !1085)
!9839 = !DILocation(line: 1227, column: 33, scope: !9833)
!9840 = !DILocalVariable(name: "vi", scope: !9833, file: !3, line: 1229, type: !2151)
!9841 = !DILocation(line: 1229, column: 11, scope: !9833)
!9842 = !DILocation(line: 1229, column: 16, scope: !9833)
!9843 = !DILocation(line: 1231, column: 15, scope: !9833)
!9844 = !DILocation(line: 1231, column: 19, scope: !9833)
!9845 = !DILocation(line: 1231, column: 25, scope: !9833)
!9846 = !DILocation(line: 1231, column: 3, scope: !9833)
!9847 = !DILocation(line: 1232, column: 10, scope: !9833)
!9848 = !DILocation(line: 1232, column: 3, scope: !9833)
!9849 = distinct !DISubprogram(name: "setup_nop_and_exit_insns", scope: !3, file: !3, line: 5606, type: !2608, scopeLine: 5607, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9850 = !DILocation(line: 5608, column: 3, scope: !9849)
!9851 = !DILocation(line: 5611, column: 17, scope: !9849)
!9852 = !DILocation(line: 5611, column: 15, scope: !9849)
!9853 = !DILocation(line: 5613, column: 3, scope: !9849)
!9854 = !DILocation(line: 5614, column: 14, scope: !9849)
!9855 = !DILocation(line: 5614, column: 3, scope: !9849)
!9856 = !DILocation(line: 5615, column: 15, scope: !9849)
!9857 = !DILocation(line: 5615, column: 13, scope: !9849)
!9858 = !DILocation(line: 5616, column: 3, scope: !9849)
!9859 = !DILocation(line: 5617, column: 3, scope: !9849)
!9860 = !DILocation(line: 5618, column: 1, scope: !9849)
!9861 = distinct !DISubprogram(name: "free_nop_and_exit_insns", scope: !3, file: !3, line: 5622, type: !2608, scopeLine: 5623, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9862 = !DILocation(line: 5624, column: 13, scope: !9861)
!9863 = !DILocation(line: 5625, column: 15, scope: !9861)
!9864 = !DILocation(line: 5626, column: 1, scope: !9861)
!9865 = distinct !DISubprogram(name: "setup_nop_vinsn", scope: !3, file: !3, line: 5630, type: !2608, scopeLine: 5631, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9866 = !DILocation(line: 5632, column: 29, scope: !9865)
!9867 = !DILocation(line: 5632, column: 15, scope: !9865)
!9868 = !DILocation(line: 5632, column: 13, scope: !9865)
!9869 = !DILocation(line: 5633, column: 17, scope: !9865)
!9870 = !DILocation(line: 5633, column: 3, scope: !9865)
!9871 = !DILocation(line: 5634, column: 1, scope: !9865)
!9872 = distinct !DISubprogram(name: "free_nop_vinsn", scope: !3, file: !3, line: 5638, type: !2608, scopeLine: 5639, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9873 = !DILocation(line: 5640, column: 3, scope: !9872)
!9874 = !DILocation(line: 5641, column: 17, scope: !9872)
!9875 = !DILocation(line: 5641, column: 3, scope: !9872)
!9876 = !DILocation(line: 5642, column: 13, scope: !9872)
!9877 = !DILocation(line: 5643, column: 1, scope: !9872)
!9878 = distinct !DISubprogram(name: "sel_set_sched_flags", scope: !3, file: !3, line: 5647, type: !2608, scopeLine: 5648, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9879 = !DILocation(line: 5653, column: 7, scope: !9880)
!9880 = distinct !DILexicalBlock(scope: !9878, file: !3, line: 5653, column: 7)
!9881 = !DILocation(line: 5653, column: 17, scope: !9880)
!9882 = !DILocation(line: 5653, column: 34, scope: !9880)
!9883 = !DILocation(line: 5653, column: 20, scope: !9880)
!9884 = !DILocation(line: 5653, column: 7, scope: !9878)
!9885 = !DILocation(line: 5654, column: 19, scope: !9880)
!9886 = !DILocation(line: 5654, column: 36, scope: !9880)
!9887 = !DILocation(line: 5654, column: 5, scope: !9880)
!9888 = !DILocation(line: 5655, column: 1, scope: !9878)
!9889 = distinct !DISubprogram(name: "sel_setup_sched_infos", scope: !3, file: !3, line: 5659, type: !2608, scopeLine: 5660, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9890 = !DILocation(line: 5661, column: 3, scope: !9889)
!9891 = !DILocation(line: 5663, column: 35, scope: !9889)
!9892 = !DILocation(line: 5663, column: 3, scope: !9889)
!9893 = !DILocation(line: 5666, column: 42, scope: !9889)
!9894 = !DILocation(line: 5667, column: 35, scope: !9889)
!9895 = !DILocation(line: 5669, column: 5, scope: !9889)
!9896 = !DILocation(line: 5670, column: 43, scope: !9889)
!9897 = !DILocation(line: 5671, column: 39, scope: !9889)
!9898 = !DILocation(line: 5673, column: 21, scope: !9889)
!9899 = !DILocation(line: 5675, column: 22, scope: !9889)
!9900 = !DILocation(line: 5677, column: 5, scope: !9889)
!9901 = !DILocation(line: 5676, column: 3, scope: !9889)
!9902 = !DILocation(line: 5676, column: 23, scope: !9889)
!9903 = !DILocation(line: 5676, column: 48, scope: !9889)
!9904 = !DILocation(line: 5679, column: 3, scope: !9889)
!9905 = !DILocation(line: 5680, column: 1, scope: !9889)
!9906 = distinct !DISubprogram(name: "sel_estimate_number_of_insns", scope: !3, file: !3, line: 3785, type: !2383, scopeLine: 3786, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9907 = !DILocalVariable(name: "bb", arg: 1, scope: !9906, file: !3, line: 3785, type: !1391)
!9908 = !DILocation(line: 3785, column: 43, scope: !9906)
!9909 = !DILocalVariable(name: "res", scope: !9906, file: !3, line: 3787, type: !874)
!9910 = !DILocation(line: 3787, column: 7, scope: !9906)
!9911 = !DILocalVariable(name: "insn", scope: !9906, file: !3, line: 3788, type: !2104)
!9912 = !DILocation(line: 3788, column: 10, scope: !9906)
!9913 = !DILocation(line: 3788, column: 17, scope: !9906)
!9914 = !DILocalVariable(name: "next_tail", scope: !9906, file: !3, line: 3788, type: !2104)
!9915 = !DILocation(line: 3788, column: 43, scope: !9906)
!9916 = !DILocation(line: 3788, column: 55, scope: !9906)
!9917 = !DILocation(line: 3790, column: 3, scope: !9906)
!9918 = !DILocation(line: 3790, column: 10, scope: !9919)
!9919 = distinct !DILexicalBlock(scope: !9920, file: !3, line: 3790, column: 3)
!9920 = distinct !DILexicalBlock(scope: !9906, file: !3, line: 3790, column: 3)
!9921 = !DILocation(line: 3790, column: 18, scope: !9919)
!9922 = !DILocation(line: 3790, column: 15, scope: !9919)
!9923 = !DILocation(line: 3790, column: 3, scope: !9920)
!9924 = !DILocation(line: 3791, column: 9, scope: !9925)
!9925 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 3791, column: 9)
!9926 = !DILocation(line: 3791, column: 9, scope: !9919)
!9927 = !DILocation(line: 3792, column: 10, scope: !9925)
!9928 = !DILocation(line: 3792, column: 7, scope: !9925)
!9929 = !DILocation(line: 3790, column: 36, scope: !9919)
!9930 = !DILocation(line: 3790, column: 34, scope: !9919)
!9931 = !DILocation(line: 3790, column: 3, scope: !9919)
!9932 = distinct !{!9932, !9923, !9933}
!9933 = !DILocation(line: 3792, column: 10, scope: !9920)
!9934 = !DILocation(line: 3794, column: 10, scope: !9906)
!9935 = !DILocation(line: 3794, column: 3, scope: !9906)
!9936 = distinct !DISubprogram(name: "sel_luid_for_non_insn", scope: !3, file: !3, line: 3799, type: !2387, scopeLine: 3800, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9937 = !DILocalVariable(name: "x", arg: 1, scope: !9936, file: !3, line: 3799, type: !850)
!9938 = !DILocation(line: 3799, column: 28, scope: !9936)
!9939 = !DILocation(line: 3801, column: 3, scope: !9936)
!9940 = !DILocation(line: 3803, column: 3, scope: !9936)
!9941 = distinct !DISubprogram(name: "make_region_from_loop_preheader", scope: !3, file: !3, line: 5817, type: !7094, scopeLine: 5818, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9942 = !DILocalVariable(name: "loop_blocks", arg: 1, scope: !9941, file: !3, line: 5817, type: !7096)
!9943 = !DILocation(line: 5817, column: 59, scope: !9941)
!9944 = !DILocalVariable(name: "i", scope: !9941, file: !3, line: 5819, type: !7)
!9945 = !DILocation(line: 5819, column: 16, scope: !9941)
!9946 = !DILocalVariable(name: "new_rgn_number", scope: !9941, file: !3, line: 5820, type: !874)
!9947 = !DILocation(line: 5820, column: 7, scope: !9941)
!9948 = !DILocalVariable(name: "bb", scope: !9941, file: !3, line: 5821, type: !1391)
!9949 = !DILocation(line: 5821, column: 15, scope: !9941)
!9950 = !DILocalVariable(name: "bb_ord_index", scope: !9941, file: !3, line: 5824, type: !874)
!9951 = !DILocation(line: 5824, column: 7, scope: !9941)
!9952 = !DILocation(line: 5826, column: 20, scope: !9941)
!9953 = !DILocation(line: 5826, column: 18, scope: !9941)
!9954 = !DILocation(line: 5828, column: 10, scope: !9955)
!9955 = distinct !DILexicalBlock(scope: !9941, file: !3, line: 5828, column: 3)
!9956 = !DILocation(line: 5828, column: 8, scope: !9955)
!9957 = !DILocation(line: 5828, column: 15, scope: !9958)
!9958 = distinct !DILexicalBlock(scope: !9955, file: !3, line: 5828, column: 3)
!9959 = !DILocation(line: 5828, column: 3, scope: !9955)
!9960 = !DILocation(line: 5830, column: 7, scope: !9961)
!9961 = distinct !DILexicalBlock(scope: !9958, file: !3, line: 5829, column: 5)
!9962 = !DILocation(line: 5832, column: 32, scope: !9961)
!9963 = !DILocation(line: 5832, column: 51, scope: !9961)
!9964 = !DILocation(line: 5832, column: 7, scope: !9961)
!9965 = !DILocation(line: 5833, column: 5, scope: !9961)
!9966 = !DILocation(line: 5828, column: 64, scope: !9958)
!9967 = !DILocation(line: 5828, column: 3, scope: !9958)
!9968 = distinct !{!9968, !9959, !9969}
!9969 = !DILocation(line: 5833, column: 5, scope: !9955)
!9970 = !DILocation(line: 5835, column: 3, scope: !9941)
!9971 = !DILocation(line: 5836, column: 3, scope: !9941)
!9972 = !DILocation(line: 5837, column: 1, scope: !9941)
!9973 = distinct !DISubprogram(name: "sel_create_new_region", scope: !3, file: !3, line: 5704, type: !2400, scopeLine: 5705, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9974 = !DILocalVariable(name: "new_rgn_number", scope: !9973, file: !3, line: 5706, type: !874)
!9975 = !DILocation(line: 5706, column: 7, scope: !9973)
!9976 = !DILocation(line: 5706, column: 24, scope: !9973)
!9977 = !DILocation(line: 5708, column: 3, scope: !9973)
!9978 = !DILocation(line: 5708, column: 34, scope: !9973)
!9979 = !DILocation(line: 5711, column: 7, scope: !9980)
!9980 = distinct !DILexicalBlock(scope: !9973, file: !3, line: 5711, column: 7)
!9981 = !DILocation(line: 5711, column: 22, scope: !9980)
!9982 = !DILocation(line: 5711, column: 7, scope: !9973)
!9983 = !DILocation(line: 5712, column: 35, scope: !9980)
!9984 = !DILocation(line: 5713, column: 7, scope: !9980)
!9985 = !DILocation(line: 5712, column: 67, scope: !9980)
!9986 = !DILocation(line: 5712, column: 5, scope: !9980)
!9987 = !DILocation(line: 5712, column: 33, scope: !9980)
!9988 = !DILocation(line: 5715, column: 5, scope: !9980)
!9989 = !DILocation(line: 5715, column: 33, scope: !9980)
!9990 = !DILocation(line: 5719, column: 37, scope: !9973)
!9991 = !DILocation(line: 5720, column: 5, scope: !9973)
!9992 = !DILocation(line: 5719, column: 65, scope: !9973)
!9993 = !DILocation(line: 5719, column: 3, scope: !9973)
!9994 = !DILocation(line: 5719, column: 35, scope: !9973)
!9995 = !DILocation(line: 5722, column: 13, scope: !9973)
!9996 = !DILocation(line: 5724, column: 10, scope: !9973)
!9997 = !DILocation(line: 5724, column: 3, scope: !9973)
!9998 = distinct !DISubprogram(name: "sel_add_block_to_region", scope: !3, file: !3, line: 5686, type: !9999, scopeLine: 5687, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!9999 = !DISubroutineType(types: !10000)
!10000 = !{null, !1391, !2051, !874}
!10001 = !DILocalVariable(name: "bb", arg: 1, scope: !9998, file: !3, line: 5686, type: !1391)
!10002 = !DILocation(line: 5686, column: 38, scope: !9998)
!10003 = !DILocalVariable(name: "bb_ord_index", arg: 2, scope: !9998, file: !3, line: 5686, type: !2051)
!10004 = !DILocation(line: 5686, column: 47, scope: !9998)
!10005 = !DILocalVariable(name: "rgn", arg: 3, scope: !9998, file: !3, line: 5686, type: !874)
!10006 = !DILocation(line: 5686, column: 65, scope: !9998)
!10007 = !DILocation(line: 5688, column: 3, scope: !9998)
!10008 = !DILocation(line: 5688, column: 23, scope: !9998)
!10009 = !DILocation(line: 5689, column: 3, scope: !9998)
!10010 = !DILocation(line: 5689, column: 28, scope: !9998)
!10011 = !DILocation(line: 5690, column: 3, scope: !9998)
!10012 = !DILocation(line: 5690, column: 26, scope: !9998)
!10013 = !DILocation(line: 5691, column: 32, scope: !9998)
!10014 = !DILocation(line: 5691, column: 3, scope: !9998)
!10015 = !DILocation(line: 5691, column: 30, scope: !9998)
!10016 = !DILocation(line: 5692, column: 30, scope: !9998)
!10017 = !DILocation(line: 5692, column: 29, scope: !9998)
!10018 = !DILocation(line: 5692, column: 3, scope: !9998)
!10019 = !DILocation(line: 5692, column: 27, scope: !9998)
!10020 = !DILocation(line: 5693, column: 52, scope: !9998)
!10021 = !DILocation(line: 5693, column: 56, scope: !9998)
!10022 = !DILocation(line: 5693, column: 3, scope: !9998)
!10023 = !DILocation(line: 5693, column: 16, scope: !9998)
!10024 = !DILocation(line: 5693, column: 36, scope: !9998)
!10025 = !DILocation(line: 5693, column: 35, scope: !9998)
!10026 = !DILocation(line: 5693, column: 33, scope: !9998)
!10027 = !DILocation(line: 5693, column: 50, scope: !9998)
!10028 = !DILocation(line: 5694, column: 5, scope: !9998)
!10029 = !DILocation(line: 5694, column: 18, scope: !9998)
!10030 = !DILocation(line: 5697, column: 26, scope: !9998)
!10031 = !DILocation(line: 5697, column: 45, scope: !9998)
!10032 = !DILocation(line: 5697, column: 43, scope: !9998)
!10033 = !DILocation(line: 5697, column: 3, scope: !9998)
!10034 = !DILocation(line: 5697, column: 24, scope: !9998)
!10035 = !DILocation(line: 5698, column: 1, scope: !9998)
!10036 = distinct !DISubprogram(name: "sel_init_pipelining", scope: !3, file: !3, line: 5867, type: !2608, scopeLine: 5868, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10037 = !DILocation(line: 5870, column: 3, scope: !10036)
!10038 = !DILocation(line: 5874, column: 21, scope: !10036)
!10039 = !DILocation(line: 5876, column: 37, scope: !10036)
!10040 = !DILocation(line: 5876, column: 22, scope: !10036)
!10041 = !DILocation(line: 5876, column: 20, scope: !10036)
!10042 = !DILocation(line: 5877, column: 17, scope: !10036)
!10043 = !DILocation(line: 5877, column: 3, scope: !10036)
!10044 = !DILocation(line: 5879, column: 3, scope: !10036)
!10045 = !DILocation(line: 5880, column: 1, scope: !10036)
!10046 = distinct !DISubprogram(name: "recompute_rev_top_order", scope: !3, file: !3, line: 4699, type: !2608, scopeLine: 4700, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10047 = !DILocalVariable(name: "postorder", scope: !10046, file: !3, line: 4701, type: !2051)
!10048 = !DILocation(line: 4701, column: 8, scope: !10046)
!10049 = !DILocalVariable(name: "n_blocks", scope: !10046, file: !3, line: 4702, type: !874)
!10050 = !DILocation(line: 4702, column: 7, scope: !10046)
!10051 = !DILocalVariable(name: "i", scope: !10046, file: !3, line: 4702, type: !874)
!10052 = !DILocation(line: 4702, column: 17, scope: !10046)
!10053 = !DILocation(line: 4704, column: 8, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10046, file: !3, line: 4704, column: 7)
!10055 = !DILocation(line: 4704, column: 28, scope: !10054)
!10056 = !DILocation(line: 4704, column: 31, scope: !10054)
!10057 = !DILocation(line: 4704, column: 57, scope: !10054)
!10058 = !DILocation(line: 4704, column: 55, scope: !10054)
!10059 = !DILocation(line: 4704, column: 7, scope: !10046)
!10060 = !DILocation(line: 4706, column: 33, scope: !10061)
!10061 = distinct !DILexicalBlock(scope: !10054, file: !3, line: 4705, column: 5)
!10062 = !DILocation(line: 4706, column: 31, scope: !10061)
!10063 = !DILocation(line: 4707, column: 29, scope: !10061)
!10064 = !DILocation(line: 4707, column: 27, scope: !10061)
!10065 = !DILocation(line: 4709, column: 5, scope: !10061)
!10066 = !DILocation(line: 4711, column: 15, scope: !10046)
!10067 = !DILocation(line: 4711, column: 13, scope: !10046)
!10068 = !DILocation(line: 4713, column: 34, scope: !10046)
!10069 = !DILocation(line: 4713, column: 14, scope: !10046)
!10070 = !DILocation(line: 4713, column: 12, scope: !10046)
!10071 = !DILocation(line: 4714, column: 3, scope: !10046)
!10072 = !DILocation(line: 4718, column: 10, scope: !10073)
!10073 = distinct !DILexicalBlock(scope: !10046, file: !3, line: 4718, column: 3)
!10074 = !DILocation(line: 4718, column: 8, scope: !10073)
!10075 = !DILocation(line: 4718, column: 15, scope: !10076)
!10076 = distinct !DILexicalBlock(scope: !10073, file: !3, line: 4718, column: 3)
!10077 = !DILocation(line: 4718, column: 19, scope: !10076)
!10078 = !DILocation(line: 4718, column: 17, scope: !10076)
!10079 = !DILocation(line: 4718, column: 3, scope: !10073)
!10080 = !DILocation(line: 4720, column: 7, scope: !10081)
!10081 = distinct !DILexicalBlock(scope: !10076, file: !3, line: 4719, column: 5)
!10082 = !DILocation(line: 4721, column: 43, scope: !10081)
!10083 = !DILocation(line: 4721, column: 7, scope: !10081)
!10084 = !DILocation(line: 4721, column: 27, scope: !10081)
!10085 = !DILocation(line: 4721, column: 37, scope: !10081)
!10086 = !DILocation(line: 4721, column: 41, scope: !10081)
!10087 = !DILocation(line: 4722, column: 5, scope: !10081)
!10088 = !DILocation(line: 4718, column: 30, scope: !10076)
!10089 = !DILocation(line: 4718, column: 3, scope: !10076)
!10090 = distinct !{!10090, !10079, !10091}
!10091 = !DILocation(line: 4722, column: 5, scope: !10073)
!10092 = !DILocation(line: 4724, column: 9, scope: !10046)
!10093 = !DILocation(line: 4724, column: 3, scope: !10046)
!10094 = !DILocation(line: 4725, column: 1, scope: !10046)
!10095 = distinct !DISubprogram(name: "get_loop_nest_for_rgn", scope: !3, file: !3, line: 5884, type: !10096, scopeLine: 5885, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10096 = !DISubroutineType(types: !10097)
!10097 = !{!1460, !7}
!10098 = !DILocalVariable(name: "rgn", arg: 1, scope: !10095, file: !3, line: 5884, type: !7)
!10099 = !DILocation(line: 5884, column: 37, scope: !10095)
!10100 = !DILocation(line: 5888, column: 7, scope: !10101)
!10101 = distinct !DILexicalBlock(scope: !10095, file: !3, line: 5888, column: 7)
!10102 = !DILocation(line: 5888, column: 13, scope: !10101)
!10103 = !DILocation(line: 5888, column: 11, scope: !10101)
!10104 = !DILocation(line: 5888, column: 7, scope: !10095)
!10105 = !DILocation(line: 5889, column: 12, scope: !10101)
!10106 = !DILocation(line: 5889, column: 5, scope: !10101)
!10107 = !DILocation(line: 5891, column: 5, scope: !10101)
!10108 = !DILocation(line: 5892, column: 1, scope: !10095)
!10109 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !142, file: !142, line: 85, type: !10110, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10110 = !DISubroutineType(types: !10111)
!10111 = !{!7, !10112}
!10112 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10113, size: 64)
!10113 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1453)
!10114 = !DILocalVariable(name: "vec_", arg: 1, scope: !10109, file: !142, line: 85, type: !10112)
!10115 = !DILocation(line: 85, column: 1, scope: !10109)
!10116 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !142, file: !142, line: 85, type: !10117, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10117 = !DISubroutineType(types: !10118)
!10118 = !{!1460, !10112, !7}
!10119 = !DILocalVariable(name: "vec_", arg: 1, scope: !10116, file: !142, line: 85, type: !10112)
!10120 = !DILocation(line: 85, column: 1, scope: !10116)
!10121 = !DILocalVariable(name: "ix_", arg: 2, scope: !10116, file: !142, line: 85, type: !7)
!10122 = !DILocation(line: 0, scope: !10116)
!10123 = distinct !DISubprogram(name: "considered_for_pipelining_p", scope: !3, file: !3, line: 5896, type: !10124, scopeLine: 5897, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10124 = !DISubroutineType(types: !10125)
!10125 = !{!1085, !1433}
!10126 = !DILocalVariable(name: "loop", arg: 1, scope: !10123, file: !3, line: 5896, type: !1433)
!10127 = !DILocation(line: 5896, column: 43, scope: !10123)
!10128 = !DILocation(line: 5898, column: 19, scope: !10129)
!10129 = distinct !DILexicalBlock(scope: !10123, file: !3, line: 5898, column: 7)
!10130 = !DILocation(line: 5898, column: 7, scope: !10129)
!10131 = !DILocation(line: 5898, column: 25, scope: !10129)
!10132 = !DILocation(line: 5898, column: 7, scope: !10123)
!10133 = !DILocation(line: 5899, column: 5, scope: !10129)
!10134 = !DILocation(line: 5907, column: 7, scope: !10135)
!10135 = distinct !DILexicalBlock(scope: !10123, file: !3, line: 5907, column: 7)
!10136 = !DILocation(line: 5907, column: 7, scope: !10123)
!10137 = !DILocalVariable(name: "rgn", scope: !10138, file: !3, line: 5909, type: !874)
!10138 = distinct !DILexicalBlock(scope: !10135, file: !3, line: 5908, column: 5)
!10139 = !DILocation(line: 5909, column: 11, scope: !10138)
!10140 = !DILocation(line: 5909, column: 17, scope: !10138)
!10141 = !DILocation(line: 5911, column: 7, scope: !10138)
!10142 = !DILocation(line: 5912, column: 7, scope: !10138)
!10143 = !DILocation(line: 5915, column: 3, scope: !10123)
!10144 = !DILocation(line: 5916, column: 1, scope: !10123)
!10145 = distinct !DISubprogram(name: "loop_depth", scope: !142, file: !142, line: 425, type: !10146, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10146 = !DISubroutineType(types: !10147)
!10147 = !{!7, !10148}
!10148 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10149, size: 64)
!10149 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1434)
!10150 = !DILocalVariable(name: "loop", arg: 1, scope: !10145, file: !142, line: 425, type: !10148)
!10151 = !DILocation(line: 425, column: 32, scope: !10145)
!10152 = !DILocation(line: 427, column: 10, scope: !10145)
!10153 = !DILocation(line: 427, column: 3, scope: !10145)
!10154 = distinct !DISubprogram(name: "sel_finish_pipelining", scope: !3, file: !3, line: 5996, type: !2608, scopeLine: 5997, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10155 = !DILocalVariable(name: "li", scope: !10154, file: !3, line: 5998, type: !10156)
!10156 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !142, line: 515, baseType: !10157)
!10157 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !142, line: 508, size: 128, elements: !10158)
!10158 = !{!10159, !10160}
!10159 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !10157, file: !142, line: 511, baseType: !2070, size: 64)
!10160 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !10157, file: !142, line: 514, baseType: !7, size: 32, offset: 64)
!10161 = !DILocation(line: 5998, column: 17, scope: !10154)
!10162 = !DILocalVariable(name: "loop", scope: !10154, file: !3, line: 5999, type: !1433)
!10163 = !DILocation(line: 5999, column: 16, scope: !10154)
!10164 = !DILocation(line: 6002, column: 3, scope: !10165)
!10165 = distinct !DILexicalBlock(scope: !10154, file: !3, line: 6002, column: 3)
!10166 = !DILocation(line: 6002, column: 3, scope: !10167)
!10167 = distinct !DILexicalBlock(scope: !10165, file: !3, line: 6002, column: 3)
!10168 = !DILocation(line: 6003, column: 5, scope: !10167)
!10169 = !DILocation(line: 6003, column: 11, scope: !10167)
!10170 = !DILocation(line: 6003, column: 15, scope: !10167)
!10171 = distinct !{!10171, !10164, !10172}
!10172 = !DILocation(line: 6003, column: 17, scope: !10165)
!10173 = !DILocation(line: 6005, column: 3, scope: !10154)
!10174 = !DILocation(line: 6007, column: 3, scope: !10154)
!10175 = !DILocation(line: 6009, column: 9, scope: !10154)
!10176 = !DILocation(line: 6009, column: 3, scope: !10154)
!10177 = !DILocation(line: 6010, column: 23, scope: !10154)
!10178 = !DILocation(line: 6011, column: 1, scope: !10154)
!10179 = distinct !DISubprogram(name: "fel_init", scope: !142, file: !142, line: 535, type: !10180, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10180 = !DISubroutineType(types: !10181)
!10181 = !{null, !10182, !10183, !7}
!10182 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10156, size: 64)
!10183 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1460, size: 64)
!10184 = !DILocalVariable(name: "li", arg: 1, scope: !10179, file: !142, line: 535, type: !10182)
!10185 = !DILocation(line: 535, column: 26, scope: !10179)
!10186 = !DILocalVariable(name: "loop", arg: 2, scope: !10179, file: !142, line: 535, type: !10183)
!10187 = !DILocation(line: 535, column: 38, scope: !10179)
!10188 = !DILocalVariable(name: "flags", arg: 3, scope: !10179, file: !142, line: 535, type: !7)
!10189 = !DILocation(line: 535, column: 53, scope: !10179)
!10190 = !DILocalVariable(name: "aloop", scope: !10179, file: !142, line: 537, type: !1433)
!10191 = !DILocation(line: 537, column: 16, scope: !10179)
!10192 = !DILocalVariable(name: "i", scope: !10179, file: !142, line: 538, type: !7)
!10193 = !DILocation(line: 538, column: 12, scope: !10179)
!10194 = !DILocalVariable(name: "mn", scope: !10179, file: !142, line: 539, type: !874)
!10195 = !DILocation(line: 539, column: 7, scope: !10179)
!10196 = !DILocation(line: 541, column: 3, scope: !10179)
!10197 = !DILocation(line: 541, column: 7, scope: !10179)
!10198 = !DILocation(line: 541, column: 11, scope: !10179)
!10199 = !DILocation(line: 542, column: 8, scope: !10200)
!10200 = distinct !DILexicalBlock(scope: !10179, file: !142, line: 542, column: 7)
!10201 = !DILocation(line: 542, column: 7, scope: !10179)
!10202 = !DILocation(line: 544, column: 7, scope: !10203)
!10203 = distinct !DILexicalBlock(scope: !10200, file: !142, line: 543, column: 5)
!10204 = !DILocation(line: 544, column: 11, scope: !10203)
!10205 = !DILocation(line: 544, column: 20, scope: !10203)
!10206 = !DILocation(line: 545, column: 8, scope: !10203)
!10207 = !DILocation(line: 545, column: 13, scope: !10203)
!10208 = !DILocation(line: 546, column: 7, scope: !10203)
!10209 = !DILocation(line: 549, column: 18, scope: !10179)
!10210 = !DILocation(line: 549, column: 3, scope: !10179)
!10211 = !DILocation(line: 549, column: 7, scope: !10179)
!10212 = !DILocation(line: 549, column: 16, scope: !10179)
!10213 = !DILocation(line: 550, column: 9, scope: !10179)
!10214 = !DILocation(line: 550, column: 15, scope: !10179)
!10215 = !DILocation(line: 550, column: 8, scope: !10179)
!10216 = !DILocation(line: 550, column: 6, scope: !10179)
!10217 = !DILocation(line: 552, column: 7, scope: !10218)
!10218 = distinct !DILexicalBlock(scope: !10179, file: !142, line: 552, column: 7)
!10219 = !DILocation(line: 552, column: 13, scope: !10218)
!10220 = !DILocation(line: 552, column: 7, scope: !10179)
!10221 = !DILocation(line: 554, column: 14, scope: !10222)
!10222 = distinct !DILexicalBlock(scope: !10223, file: !142, line: 554, column: 7)
!10223 = distinct !DILexicalBlock(scope: !10218, file: !142, line: 553, column: 5)
!10224 = !DILocation(line: 554, column: 12, scope: !10222)
!10225 = !DILocation(line: 554, column: 19, scope: !10226)
!10226 = distinct !DILexicalBlock(scope: !10222, file: !142, line: 554, column: 7)
!10227 = !DILocation(line: 554, column: 7, scope: !10222)
!10228 = !DILocation(line: 555, column: 6, scope: !10229)
!10229 = distinct !DILexicalBlock(scope: !10226, file: !142, line: 555, column: 6)
!10230 = !DILocation(line: 555, column: 12, scope: !10229)
!10231 = !DILocation(line: 556, column: 6, scope: !10229)
!10232 = !DILocation(line: 556, column: 9, scope: !10229)
!10233 = !DILocation(line: 556, column: 16, scope: !10229)
!10234 = !DILocation(line: 556, column: 22, scope: !10229)
!10235 = !DILocation(line: 557, column: 6, scope: !10229)
!10236 = !DILocation(line: 557, column: 9, scope: !10229)
!10237 = !DILocation(line: 557, column: 16, scope: !10229)
!10238 = !DILocation(line: 557, column: 23, scope: !10229)
!10239 = !DILocation(line: 557, column: 20, scope: !10229)
!10240 = !DILocation(line: 555, column: 6, scope: !10226)
!10241 = !DILocation(line: 558, column: 4, scope: !10229)
!10242 = !DILocation(line: 554, column: 75, scope: !10226)
!10243 = !DILocation(line: 554, column: 7, scope: !10226)
!10244 = distinct !{!10244, !10227, !10245}
!10245 = !DILocation(line: 558, column: 4, scope: !10222)
!10246 = !DILocation(line: 559, column: 5, scope: !10223)
!10247 = !DILocation(line: 560, column: 12, scope: !10248)
!10248 = distinct !DILexicalBlock(scope: !10218, file: !142, line: 560, column: 12)
!10249 = !DILocation(line: 560, column: 18, scope: !10248)
!10250 = !DILocation(line: 560, column: 12, scope: !10218)
!10251 = !DILocation(line: 563, column: 20, scope: !10252)
!10252 = distinct !DILexicalBlock(scope: !10253, file: !142, line: 563, column: 7)
!10253 = distinct !DILexicalBlock(scope: !10248, file: !142, line: 561, column: 5)
!10254 = !DILocation(line: 563, column: 35, scope: !10252)
!10255 = !DILocation(line: 563, column: 18, scope: !10252)
!10256 = !DILocation(line: 563, column: 12, scope: !10252)
!10257 = !DILocation(line: 564, column: 5, scope: !10258)
!10258 = distinct !DILexicalBlock(scope: !10252, file: !142, line: 563, column: 7)
!10259 = !DILocation(line: 564, column: 12, scope: !10258)
!10260 = !DILocation(line: 564, column: 18, scope: !10258)
!10261 = !DILocation(line: 563, column: 7, scope: !10252)
!10262 = !DILocation(line: 566, column: 2, scope: !10258)
!10263 = !DILocation(line: 565, column: 13, scope: !10258)
!10264 = !DILocation(line: 565, column: 20, scope: !10258)
!10265 = !DILocation(line: 565, column: 11, scope: !10258)
!10266 = !DILocation(line: 563, column: 7, scope: !10258)
!10267 = distinct !{!10267, !10261, !10268}
!10268 = !DILocation(line: 566, column: 2, scope: !10252)
!10269 = !DILocation(line: 568, column: 7, scope: !10253)
!10270 = !DILocation(line: 570, column: 8, scope: !10271)
!10271 = distinct !DILexicalBlock(scope: !10272, file: !142, line: 570, column: 8)
!10272 = distinct !DILexicalBlock(scope: !10253, file: !142, line: 569, column: 2)
!10273 = !DILocation(line: 570, column: 15, scope: !10271)
!10274 = !DILocation(line: 570, column: 22, scope: !10271)
!10275 = !DILocation(line: 570, column: 19, scope: !10271)
!10276 = !DILocation(line: 570, column: 8, scope: !10272)
!10277 = !DILocation(line: 571, column: 6, scope: !10271)
!10278 = !DILocation(line: 573, column: 8, scope: !10279)
!10279 = distinct !DILexicalBlock(scope: !10272, file: !142, line: 573, column: 8)
!10280 = !DILocation(line: 573, column: 15, scope: !10279)
!10281 = !DILocation(line: 573, column: 8, scope: !10272)
!10282 = !DILocation(line: 575, column: 21, scope: !10283)
!10283 = distinct !DILexicalBlock(scope: !10284, file: !142, line: 575, column: 8)
!10284 = distinct !DILexicalBlock(scope: !10279, file: !142, line: 574, column: 6)
!10285 = !DILocation(line: 575, column: 28, scope: !10283)
!10286 = !DILocation(line: 575, column: 19, scope: !10283)
!10287 = !DILocation(line: 575, column: 13, scope: !10283)
!10288 = !DILocation(line: 576, column: 6, scope: !10289)
!10289 = distinct !DILexicalBlock(scope: !10283, file: !142, line: 575, column: 8)
!10290 = !DILocation(line: 576, column: 13, scope: !10289)
!10291 = !DILocation(line: 576, column: 19, scope: !10289)
!10292 = !DILocation(line: 575, column: 8, scope: !10283)
!10293 = !DILocation(line: 578, column: 3, scope: !10289)
!10294 = !DILocation(line: 577, column: 14, scope: !10289)
!10295 = !DILocation(line: 577, column: 21, scope: !10289)
!10296 = !DILocation(line: 577, column: 12, scope: !10289)
!10297 = !DILocation(line: 575, column: 8, scope: !10289)
!10298 = distinct !{!10298, !10292, !10299}
!10299 = !DILocation(line: 578, column: 3, scope: !10283)
!10300 = !DILocation(line: 579, column: 6, scope: !10284)
!10301 = !DILocation(line: 580, column: 26, scope: !10302)
!10302 = distinct !DILexicalBlock(scope: !10279, file: !142, line: 580, column: 13)
!10303 = !DILocation(line: 580, column: 14, scope: !10302)
!10304 = !DILocation(line: 580, column: 13, scope: !10279)
!10305 = !DILocation(line: 581, column: 6, scope: !10302)
!10306 = !DILocation(line: 583, column: 26, scope: !10302)
!10307 = !DILocation(line: 583, column: 14, scope: !10302)
!10308 = !DILocation(line: 583, column: 12, scope: !10302)
!10309 = distinct !{!10309, !10269, !10310}
!10310 = !DILocation(line: 584, column: 2, scope: !10253)
!10311 = !DILocation(line: 585, column: 5, scope: !10253)
!10312 = !DILocation(line: 589, column: 15, scope: !10313)
!10313 = distinct !DILexicalBlock(scope: !10248, file: !142, line: 587, column: 5)
!10314 = !DILocation(line: 589, column: 30, scope: !10313)
!10315 = !DILocation(line: 589, column: 13, scope: !10313)
!10316 = !DILocation(line: 590, column: 7, scope: !10313)
!10317 = !DILocation(line: 592, column: 8, scope: !10318)
!10318 = distinct !DILexicalBlock(scope: !10319, file: !142, line: 592, column: 8)
!10319 = distinct !DILexicalBlock(scope: !10313, file: !142, line: 591, column: 2)
!10320 = !DILocation(line: 592, column: 15, scope: !10318)
!10321 = !DILocation(line: 592, column: 22, scope: !10318)
!10322 = !DILocation(line: 592, column: 19, scope: !10318)
!10323 = !DILocation(line: 592, column: 8, scope: !10319)
!10324 = !DILocation(line: 593, column: 6, scope: !10318)
!10325 = !DILocation(line: 595, column: 8, scope: !10326)
!10326 = distinct !DILexicalBlock(scope: !10319, file: !142, line: 595, column: 8)
!10327 = !DILocation(line: 595, column: 15, scope: !10326)
!10328 = !DILocation(line: 595, column: 21, scope: !10326)
!10329 = !DILocation(line: 595, column: 8, scope: !10319)
!10330 = !DILocation(line: 596, column: 14, scope: !10326)
!10331 = !DILocation(line: 596, column: 21, scope: !10326)
!10332 = !DILocation(line: 596, column: 12, scope: !10326)
!10333 = !DILocation(line: 596, column: 6, scope: !10326)
!10334 = !DILocation(line: 599, column: 8, scope: !10335)
!10335 = distinct !DILexicalBlock(scope: !10326, file: !142, line: 598, column: 6)
!10336 = !DILocation(line: 599, column: 15, scope: !10335)
!10337 = !DILocation(line: 599, column: 21, scope: !10335)
!10338 = !DILocation(line: 599, column: 29, scope: !10335)
!10339 = !DILocation(line: 599, column: 32, scope: !10335)
!10340 = !DILocation(line: 599, column: 39, scope: !10335)
!10341 = !DILocation(line: 599, column: 44, scope: !10335)
!10342 = !DILocation(line: 0, scope: !10335)
!10343 = !DILocation(line: 600, column: 23, scope: !10335)
!10344 = !DILocation(line: 600, column: 11, scope: !10335)
!10345 = !DILocation(line: 600, column: 9, scope: !10335)
!10346 = distinct !{!10346, !10334, !10347}
!10347 = !DILocation(line: 600, column: 28, scope: !10335)
!10348 = !DILocation(line: 601, column: 12, scope: !10349)
!10349 = distinct !DILexicalBlock(scope: !10335, file: !142, line: 601, column: 12)
!10350 = !DILocation(line: 601, column: 18, scope: !10349)
!10351 = !DILocation(line: 601, column: 12, scope: !10335)
!10352 = !DILocation(line: 602, column: 3, scope: !10349)
!10353 = !DILocation(line: 603, column: 16, scope: !10335)
!10354 = !DILocation(line: 603, column: 23, scope: !10335)
!10355 = !DILocation(line: 603, column: 14, scope: !10335)
!10356 = distinct !{!10356, !10316, !10357}
!10357 = !DILocation(line: 605, column: 2, scope: !10313)
!10358 = !DILocation(line: 608, column: 13, scope: !10179)
!10359 = !DILocation(line: 608, column: 17, scope: !10179)
!10360 = !DILocation(line: 608, column: 3, scope: !10179)
!10361 = !DILocation(line: 609, column: 1, scope: !10179)
!10362 = distinct !DISubprogram(name: "fel_next", scope: !142, file: !142, line: 518, type: !10363, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10363 = !DISubroutineType(types: !10364)
!10364 = !{null, !10182, !10183}
!10365 = !DILocalVariable(name: "li", arg: 1, scope: !10362, file: !142, line: 518, type: !10182)
!10366 = !DILocation(line: 518, column: 26, scope: !10362)
!10367 = !DILocalVariable(name: "loop", arg: 2, scope: !10362, file: !142, line: 518, type: !10183)
!10368 = !DILocation(line: 518, column: 38, scope: !10362)
!10369 = !DILocalVariable(name: "anum", scope: !10362, file: !142, line: 520, type: !874)
!10370 = !DILocation(line: 520, column: 7, scope: !10362)
!10371 = !DILocation(line: 522, column: 3, scope: !10362)
!10372 = !DILocation(line: 522, column: 10, scope: !10362)
!10373 = !DILocation(line: 524, column: 7, scope: !10374)
!10374 = distinct !DILexicalBlock(scope: !10362, file: !142, line: 523, column: 5)
!10375 = !DILocation(line: 524, column: 11, scope: !10374)
!10376 = !DILocation(line: 524, column: 14, scope: !10374)
!10377 = !DILocation(line: 525, column: 25, scope: !10374)
!10378 = !DILocation(line: 525, column: 15, scope: !10374)
!10379 = !DILocation(line: 525, column: 8, scope: !10374)
!10380 = !DILocation(line: 525, column: 13, scope: !10374)
!10381 = !DILocation(line: 526, column: 12, scope: !10382)
!10382 = distinct !DILexicalBlock(scope: !10374, file: !142, line: 526, column: 11)
!10383 = !DILocation(line: 526, column: 11, scope: !10382)
!10384 = !DILocation(line: 526, column: 11, scope: !10374)
!10385 = !DILocation(line: 527, column: 2, scope: !10382)
!10386 = distinct !{!10386, !10371, !10387}
!10387 = !DILocation(line: 528, column: 5, scope: !10362)
!10388 = !DILocation(line: 530, column: 3, scope: !10362)
!10389 = !DILocation(line: 531, column: 4, scope: !10362)
!10390 = !DILocation(line: 531, column: 9, scope: !10362)
!10391 = !DILocation(line: 532, column: 1, scope: !10362)
!10392 = distinct !DISubprogram(name: "VEC_loop_p_heap_free", scope: !142, file: !142, line: 86, type: !10393, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10393 = !DISubroutineType(types: !10394)
!10394 = !{null, !10395}
!10395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2328, size: 64)
!10396 = !DILocalVariable(name: "vec_", arg: 1, scope: !10392, file: !142, line: 86, type: !10395)
!10397 = !DILocation(line: 86, column: 1, scope: !10392)
!10398 = !DILocation(line: 86, column: 1, scope: !10399)
!10399 = distinct !DILexicalBlock(scope: !10392, file: !142, line: 86, column: 1)
!10400 = distinct !DISubprogram(name: "sel_find_rgns", scope: !3, file: !3, line: 6016, type: !2608, scopeLine: 6017, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10401 = !DILocation(line: 6018, column: 3, scope: !10400)
!10402 = !DILocation(line: 6019, column: 3, scope: !10400)
!10403 = !DILocation(line: 6021, column: 7, scope: !10404)
!10404 = distinct !DILexicalBlock(scope: !10400, file: !3, line: 6021, column: 7)
!10405 = !DILocation(line: 6021, column: 7, scope: !10400)
!10406 = !DILocalVariable(name: "loop", scope: !10407, file: !3, line: 6023, type: !1460)
!10407 = distinct !DILexicalBlock(scope: !10404, file: !3, line: 6022, column: 5)
!10408 = !DILocation(line: 6023, column: 14, scope: !10407)
!10409 = !DILocalVariable(name: "li", scope: !10407, file: !3, line: 6024, type: !10156)
!10410 = !DILocation(line: 6024, column: 21, scope: !10407)
!10411 = !DILocation(line: 6026, column: 7, scope: !10412)
!10412 = distinct !DILexicalBlock(scope: !10407, file: !3, line: 6026, column: 7)
!10413 = !DILocation(line: 6026, column: 7, scope: !10414)
!10414 = distinct !DILexicalBlock(scope: !10412, file: !3, line: 6026, column: 7)
!10415 = !DILocation(line: 6029, column: 31, scope: !10414)
!10416 = !DILocation(line: 6029, column: 2, scope: !10414)
!10417 = distinct !{!10417, !10411, !10418}
!10418 = !DILocation(line: 6029, column: 35, scope: !10412)
!10419 = !DILocation(line: 6030, column: 5, scope: !10407)
!10420 = !DILocation(line: 6035, column: 3, scope: !10400)
!10421 = !DILocation(line: 6038, column: 3, scope: !10400)
!10422 = !DILocation(line: 6039, column: 20, scope: !10400)
!10423 = !DILocation(line: 6040, column: 1, scope: !10400)
!10424 = distinct !DISubprogram(name: "make_regions_from_loop_nest", scope: !3, file: !3, line: 5844, type: !10124, scopeLine: 5845, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10425 = !DILocalVariable(name: "loop", arg: 1, scope: !10424, file: !3, line: 5844, type: !1433)
!10426 = !DILocation(line: 5844, column: 43, scope: !10424)
!10427 = !DILocalVariable(name: "cur_loop", scope: !10424, file: !3, line: 5846, type: !1433)
!10428 = !DILocation(line: 5846, column: 16, scope: !10424)
!10429 = !DILocalVariable(name: "rgn_number", scope: !10424, file: !3, line: 5847, type: !874)
!10430 = !DILocation(line: 5847, column: 7, scope: !10424)
!10431 = !DILocation(line: 5850, column: 19, scope: !10432)
!10432 = distinct !DILexicalBlock(scope: !10424, file: !3, line: 5850, column: 3)
!10433 = !DILocation(line: 5850, column: 25, scope: !10432)
!10434 = !DILocation(line: 5850, column: 17, scope: !10432)
!10435 = !DILocation(line: 5850, column: 8, scope: !10432)
!10436 = !DILocation(line: 5850, column: 32, scope: !10437)
!10437 = distinct !DILexicalBlock(scope: !10432, file: !3, line: 5850, column: 3)
!10438 = !DILocation(line: 5850, column: 3, scope: !10432)
!10439 = !DILocation(line: 5851, column: 11, scope: !10440)
!10440 = distinct !DILexicalBlock(scope: !10437, file: !3, line: 5851, column: 9)
!10441 = !DILocation(line: 5851, column: 9, scope: !10437)
!10442 = !DILocation(line: 5852, column: 7, scope: !10440)
!10443 = !DILocation(line: 5850, column: 53, scope: !10437)
!10444 = !DILocation(line: 5850, column: 63, scope: !10437)
!10445 = !DILocation(line: 5850, column: 51, scope: !10437)
!10446 = !DILocation(line: 5850, column: 3, scope: !10437)
!10447 = distinct !{!10447, !10438, !10448}
!10448 = !DILocation(line: 5852, column: 14, scope: !10432)
!10449 = !DILocation(line: 5856, column: 39, scope: !10424)
!10450 = !DILocation(line: 5856, column: 16, scope: !10424)
!10451 = !DILocation(line: 5856, column: 14, scope: !10424)
!10452 = !DILocation(line: 5858, column: 7, scope: !10453)
!10453 = distinct !DILexicalBlock(scope: !10424, file: !3, line: 5858, column: 7)
!10454 = !DILocation(line: 5858, column: 18, scope: !10453)
!10455 = !DILocation(line: 5858, column: 7, scope: !10424)
!10456 = !DILocation(line: 5859, column: 5, scope: !10453)
!10457 = !DILocation(line: 5861, column: 3, scope: !10424)
!10458 = !DILocation(line: 5862, column: 3, scope: !10424)
!10459 = !DILocation(line: 5863, column: 1, scope: !10424)
!10460 = distinct !DISubprogram(name: "make_regions_from_the_rest", scope: !3, file: !3, line: 5921, type: !2608, scopeLine: 5922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10461 = !DILocalVariable(name: "cur_rgn_blocks", scope: !10460, file: !3, line: 5923, type: !874)
!10462 = !DILocation(line: 5923, column: 7, scope: !10460)
!10463 = !DILocalVariable(name: "loop_hdr", scope: !10460, file: !3, line: 5924, type: !2051)
!10464 = !DILocation(line: 5924, column: 8, scope: !10460)
!10465 = !DILocalVariable(name: "i", scope: !10460, file: !3, line: 5925, type: !874)
!10466 = !DILocation(line: 5925, column: 7, scope: !10460)
!10467 = !DILocalVariable(name: "bb", scope: !10460, file: !3, line: 5927, type: !1391)
!10468 = !DILocation(line: 5927, column: 15, scope: !10460)
!10469 = !DILocalVariable(name: "e", scope: !10460, file: !3, line: 5928, type: !1408)
!10470 = !DILocation(line: 5928, column: 8, scope: !10460)
!10471 = !DILocalVariable(name: "ei", scope: !10460, file: !3, line: 5929, type: !3114)
!10472 = !DILocation(line: 5929, column: 17, scope: !10460)
!10473 = !DILocalVariable(name: "degree", scope: !10460, file: !3, line: 5930, type: !2051)
!10474 = !DILocation(line: 5930, column: 8, scope: !10460)
!10475 = !DILocation(line: 5933, column: 20, scope: !10460)
!10476 = !DILocation(line: 5933, column: 33, scope: !10460)
!10477 = !DILocation(line: 5933, column: 18, scope: !10460)
!10478 = !DILocation(line: 5942, column: 14, scope: !10460)
!10479 = !DILocation(line: 5942, column: 12, scope: !10460)
!10480 = !DILocation(line: 5943, column: 12, scope: !10460)
!10481 = !DILocation(line: 5943, column: 10, scope: !10460)
!10482 = !DILocation(line: 5948, column: 10, scope: !10483)
!10483 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 5948, column: 3)
!10484 = !DILocation(line: 5948, column: 8, scope: !10483)
!10485 = !DILocation(line: 5948, column: 15, scope: !10486)
!10486 = distinct !DILexicalBlock(scope: !10483, file: !3, line: 5948, column: 3)
!10487 = !DILocation(line: 5948, column: 19, scope: !10486)
!10488 = !DILocation(line: 5948, column: 17, scope: !10486)
!10489 = !DILocation(line: 5948, column: 3, scope: !10483)
!10490 = !DILocation(line: 5949, column: 5, scope: !10486)
!10491 = !DILocation(line: 5949, column: 14, scope: !10486)
!10492 = !DILocation(line: 5949, column: 17, scope: !10486)
!10493 = !DILocation(line: 5948, column: 38, scope: !10486)
!10494 = !DILocation(line: 5948, column: 3, scope: !10486)
!10495 = distinct !{!10495, !10489, !10496}
!10496 = !DILocation(line: 5949, column: 20, scope: !10483)
!10497 = !DILocation(line: 5951, column: 3, scope: !10498)
!10498 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 5951, column: 3)
!10499 = !DILocation(line: 5951, column: 3, scope: !10500)
!10500 = distinct !DILexicalBlock(scope: !10498, file: !3, line: 5951, column: 3)
!10501 = !DILocation(line: 5953, column: 11, scope: !10502)
!10502 = distinct !DILexicalBlock(scope: !10503, file: !3, line: 5953, column: 11)
!10503 = distinct !DILexicalBlock(scope: !10500, file: !3, line: 5952, column: 5)
!10504 = !DILocation(line: 5953, column: 15, scope: !10502)
!10505 = !DILocation(line: 5953, column: 27, scope: !10502)
!10506 = !DILocation(line: 5953, column: 31, scope: !10502)
!10507 = !DILocation(line: 5953, column: 35, scope: !10502)
!10508 = !DILocation(line: 5953, column: 48, scope: !10502)
!10509 = !DILocation(line: 5953, column: 30, scope: !10502)
!10510 = !DILocation(line: 5953, column: 52, scope: !10502)
!10511 = !DILocation(line: 5954, column: 4, scope: !10502)
!10512 = !DILocation(line: 5954, column: 9, scope: !10502)
!10513 = !DILocation(line: 5954, column: 13, scope: !10502)
!10514 = !DILocation(line: 5954, column: 19, scope: !10502)
!10515 = !DILocation(line: 5953, column: 11, scope: !10503)
!10516 = !DILocation(line: 5955, column: 24, scope: !10502)
!10517 = !DILocation(line: 5955, column: 28, scope: !10502)
!10518 = !DILocation(line: 5955, column: 41, scope: !10502)
!10519 = !DILocation(line: 5955, column: 2, scope: !10502)
!10520 = !DILocation(line: 5955, column: 11, scope: !10502)
!10521 = !DILocation(line: 5955, column: 15, scope: !10502)
!10522 = !DILocation(line: 5955, column: 22, scope: !10502)
!10523 = !DILocation(line: 5956, column: 5, scope: !10503)
!10524 = distinct !{!10524, !10497, !10525}
!10525 = !DILocation(line: 5956, column: 5, scope: !10498)
!10526 = !DILocation(line: 5961, column: 3, scope: !10527)
!10527 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 5961, column: 3)
!10528 = !DILocation(line: 5961, column: 3, scope: !10529)
!10529 = distinct !DILexicalBlock(scope: !10527, file: !3, line: 5961, column: 3)
!10530 = !DILocation(line: 5963, column: 7, scope: !10531)
!10531 = distinct !DILexicalBlock(scope: !10529, file: !3, line: 5962, column: 5)
!10532 = !DILocation(line: 5963, column: 14, scope: !10531)
!10533 = !DILocation(line: 5963, column: 18, scope: !10531)
!10534 = !DILocation(line: 5963, column: 25, scope: !10531)
!10535 = !DILocation(line: 5965, column: 12, scope: !10536)
!10536 = distinct !DILexicalBlock(scope: !10531, file: !3, line: 5965, column: 11)
!10537 = !DILocation(line: 5965, column: 11, scope: !10531)
!10538 = !DILocation(line: 5967, column: 4, scope: !10539)
!10539 = distinct !DILexicalBlock(scope: !10540, file: !3, line: 5967, column: 4)
!10540 = distinct !DILexicalBlock(scope: !10536, file: !3, line: 5966, column: 2)
!10541 = !DILocation(line: 5967, column: 4, scope: !10542)
!10542 = distinct !DILexicalBlock(scope: !10539, file: !3, line: 5967, column: 4)
!10543 = !DILocation(line: 5968, column: 11, scope: !10544)
!10544 = distinct !DILexicalBlock(scope: !10542, file: !3, line: 5968, column: 10)
!10545 = !DILocation(line: 5968, column: 10, scope: !10542)
!10546 = !DILocation(line: 5969, column: 8, scope: !10544)
!10547 = !DILocation(line: 5969, column: 15, scope: !10544)
!10548 = !DILocation(line: 5969, column: 19, scope: !10544)
!10549 = !DILocation(line: 5969, column: 25, scope: !10544)
!10550 = distinct !{!10550, !10538, !10551}
!10551 = !DILocation(line: 5969, column: 25, scope: !10539)
!10552 = !DILocation(line: 5970, column: 2, scope: !10540)
!10553 = !DILocation(line: 5972, column: 2, scope: !10536)
!10554 = !DILocation(line: 5972, column: 9, scope: !10536)
!10555 = !DILocation(line: 5972, column: 13, scope: !10536)
!10556 = !DILocation(line: 5972, column: 20, scope: !10536)
!10557 = !DILocation(line: 5973, column: 5, scope: !10531)
!10558 = distinct !{!10558, !10526, !10559}
!10559 = !DILocation(line: 5973, column: 5, scope: !10527)
!10560 = !DILocation(line: 5975, column: 16, scope: !10460)
!10561 = !DILocation(line: 5975, column: 41, scope: !10460)
!10562 = !DILocation(line: 5975, column: 59, scope: !10460)
!10563 = !DILocation(line: 5975, column: 3, scope: !10460)
!10564 = !DILocation(line: 5979, column: 3, scope: !10565)
!10565 = distinct !DILexicalBlock(scope: !10460, file: !3, line: 5979, column: 3)
!10566 = !DILocation(line: 5979, column: 3, scope: !10567)
!10567 = distinct !DILexicalBlock(scope: !10565, file: !3, line: 5979, column: 3)
!10568 = !DILocation(line: 5980, column: 9, scope: !10569)
!10569 = distinct !DILexicalBlock(scope: !10567, file: !3, line: 5980, column: 9)
!10570 = !DILocation(line: 5980, column: 16, scope: !10569)
!10571 = !DILocation(line: 5980, column: 20, scope: !10569)
!10572 = !DILocation(line: 5980, column: 27, scope: !10569)
!10573 = !DILocation(line: 5980, column: 9, scope: !10567)
!10574 = !DILocation(line: 5982, column: 33, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10569, file: !3, line: 5981, column: 7)
!10576 = !DILocation(line: 5982, column: 37, scope: !10575)
!10577 = !DILocation(line: 5982, column: 2, scope: !10575)
!10578 = !DILocation(line: 5982, column: 15, scope: !10575)
!10579 = !DILocation(line: 5982, column: 31, scope: !10575)
!10580 = !DILocation(line: 5983, column: 2, scope: !10575)
!10581 = !DILocation(line: 5983, column: 29, scope: !10575)
!10582 = !DILocation(line: 5984, column: 42, scope: !10575)
!10583 = !DILocation(line: 5984, column: 2, scope: !10575)
!10584 = !DILocation(line: 5984, column: 26, scope: !10575)
!10585 = !DILocation(line: 5985, column: 9, scope: !10575)
!10586 = !DILocation(line: 5985, column: 41, scope: !10575)
!10587 = !DILocation(line: 5986, column: 2, scope: !10575)
!10588 = !DILocation(line: 5986, column: 32, scope: !10575)
!10589 = !DILocation(line: 5987, column: 41, scope: !10575)
!10590 = !DILocation(line: 5987, column: 2, scope: !10575)
!10591 = !DILocation(line: 5987, column: 29, scope: !10575)
!10592 = !DILocation(line: 5988, column: 2, scope: !10575)
!10593 = !DILocation(line: 5988, column: 26, scope: !10575)
!10594 = !DILocation(line: 5989, column: 7, scope: !10575)
!10595 = !DILocation(line: 5980, column: 30, scope: !10569)
!10596 = distinct !{!10596, !10564, !10597}
!10597 = !DILocation(line: 5989, column: 7, scope: !10565)
!10598 = !DILocation(line: 5991, column: 9, scope: !10460)
!10599 = !DILocation(line: 5991, column: 3, scope: !10460)
!10600 = !DILocation(line: 5992, column: 9, scope: !10460)
!10601 = !DILocation(line: 5992, column: 3, scope: !10460)
!10602 = !DILocation(line: 5993, column: 1, scope: !10460)
!10603 = distinct !DISubprogram(name: "sel_add_loop_preheaders", scope: !3, file: !3, line: 6046, type: !2608, scopeLine: 6047, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10604 = !DILocalVariable(name: "i", scope: !10603, file: !3, line: 6048, type: !874)
!10605 = !DILocation(line: 6048, column: 7, scope: !10603)
!10606 = !DILocalVariable(name: "bb", scope: !10603, file: !3, line: 6049, type: !1391)
!10607 = !DILocation(line: 6049, column: 15, scope: !10603)
!10608 = !DILocalVariable(name: "preheader_blocks", scope: !10603, file: !3, line: 6050, type: !2086)
!10609 = !DILocation(line: 6050, column: 27, scope: !10603)
!10610 = !DILocation(line: 6051, column: 7, scope: !10603)
!10611 = !DILocation(line: 6053, column: 10, scope: !10612)
!10612 = distinct !DILexicalBlock(scope: !10603, file: !3, line: 6053, column: 3)
!10613 = !DILocation(line: 6053, column: 8, scope: !10612)
!10614 = !DILocation(line: 6054, column: 8, scope: !10615)
!10615 = distinct !DILexicalBlock(scope: !10612, file: !3, line: 6053, column: 3)
!10616 = !DILocation(line: 6053, column: 3, scope: !10612)
!10617 = !DILocation(line: 6057, column: 7, scope: !10618)
!10618 = distinct !DILexicalBlock(scope: !10615, file: !3, line: 6056, column: 5)
!10619 = !DILocation(line: 6058, column: 19, scope: !10618)
!10620 = !DILocation(line: 6058, column: 7, scope: !10618)
!10621 = !DILocation(line: 6059, column: 5, scope: !10618)
!10622 = !DILocation(line: 6055, column: 9, scope: !10615)
!10623 = !DILocation(line: 6053, column: 3, scope: !10615)
!10624 = distinct !{!10624, !10616, !10625}
!10625 = !DILocation(line: 6059, column: 5, scope: !10612)
!10626 = !DILocation(line: 6061, column: 3, scope: !10603)
!10627 = !DILocation(line: 6062, column: 1, scope: !10603)
!10628 = distinct !DISubprogram(name: "VEC_basic_block_heap_safe_push", scope: !155, file: !155, line: 283, type: !10629, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10629 = !DISubroutineType(types: !10630)
!10630 = !{!7045, !7096, !1391}
!10631 = !DILocalVariable(name: "vec_", arg: 1, scope: !10628, file: !155, line: 283, type: !7096)
!10632 = !DILocation(line: 283, column: 1, scope: !10628)
!10633 = !DILocalVariable(name: "obj_", arg: 2, scope: !10628, file: !155, line: 283, type: !1391)
!10634 = distinct !DISubprogram(name: "loop_outer", scope: !142, file: !142, line: 434, type: !10635, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10635 = !DISubroutineType(types: !10636)
!10636 = !{!1433, !10148}
!10637 = !DILocalVariable(name: "loop", arg: 1, scope: !10634, file: !142, line: 434, type: !10148)
!10638 = !DILocation(line: 434, column: 32, scope: !10634)
!10639 = !DILocalVariable(name: "n", scope: !10634, file: !142, line: 436, type: !7)
!10640 = !DILocation(line: 436, column: 12, scope: !10634)
!10641 = !DILocation(line: 436, column: 16, scope: !10634)
!10642 = !DILocation(line: 438, column: 7, scope: !10643)
!10643 = distinct !DILexicalBlock(scope: !10634, file: !142, line: 438, column: 7)
!10644 = !DILocation(line: 438, column: 9, scope: !10643)
!10645 = !DILocation(line: 438, column: 7, scope: !10634)
!10646 = !DILocation(line: 439, column: 5, scope: !10643)
!10647 = !DILocation(line: 441, column: 10, scope: !10634)
!10648 = !DILocation(line: 441, column: 3, scope: !10634)
!10649 = !DILocation(line: 442, column: 1, scope: !10634)
!10650 = distinct !DISubprogram(name: "_list_alloc", scope: !409, file: !409, line: 376, type: !10651, scopeLine: 377, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10651 = !DISubroutineType(types: !10652)
!10652 = !{!2091}
!10653 = !DILocation(line: 378, column: 32, scope: !10650)
!10654 = !DILocation(line: 378, column: 20, scope: !10650)
!10655 = !DILocation(line: 378, column: 10, scope: !10650)
!10656 = !DILocation(line: 378, column: 3, scope: !10650)
!10657 = distinct !DISubprogram(name: "fence_clear", scope: !3, file: !3, line: 570, type: !4004, scopeLine: 571, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10658 = !DILocalVariable(name: "f", arg: 1, scope: !10657, file: !3, line: 570, type: !2940)
!10659 = !DILocation(line: 570, column: 22, scope: !10657)
!10660 = !DILocalVariable(name: "s", scope: !10657, file: !3, line: 572, type: !2210)
!10661 = !DILocation(line: 572, column: 11, scope: !10657)
!10662 = !DILocation(line: 572, column: 15, scope: !10657)
!10663 = !DILocalVariable(name: "dc", scope: !10657, file: !3, line: 573, type: !2112)
!10664 = !DILocation(line: 573, column: 10, scope: !10657)
!10665 = !DILocation(line: 573, column: 15, scope: !10657)
!10666 = !DILocalVariable(name: "tc", scope: !10657, file: !3, line: 574, type: !962)
!10667 = !DILocation(line: 574, column: 9, scope: !10657)
!10668 = !DILocation(line: 574, column: 14, scope: !10657)
!10669 = !DILocation(line: 576, column: 3, scope: !10657)
!10670 = !DILocation(line: 578, column: 3, scope: !10657)
!10671 = !DILocation(line: 581, column: 7, scope: !10672)
!10672 = distinct !DILexicalBlock(scope: !10657, file: !3, line: 581, column: 7)
!10673 = !DILocation(line: 581, column: 9, scope: !10672)
!10674 = !DILocation(line: 581, column: 7, scope: !10657)
!10675 = !DILocation(line: 582, column: 11, scope: !10672)
!10676 = !DILocation(line: 582, column: 5, scope: !10672)
!10677 = !DILocation(line: 584, column: 7, scope: !10678)
!10678 = distinct !DILexicalBlock(scope: !10657, file: !3, line: 584, column: 7)
!10679 = !DILocation(line: 584, column: 10, scope: !10678)
!10680 = !DILocation(line: 584, column: 7, scope: !10657)
!10681 = !DILocation(line: 585, column: 26, scope: !10678)
!10682 = !DILocation(line: 585, column: 5, scope: !10678)
!10683 = !DILocation(line: 587, column: 7, scope: !10684)
!10684 = distinct !DILexicalBlock(scope: !10657, file: !3, line: 587, column: 7)
!10685 = !DILocation(line: 587, column: 10, scope: !10684)
!10686 = !DILocation(line: 587, column: 7, scope: !10657)
!10687 = !DILocation(line: 588, column: 28, scope: !10684)
!10688 = !DILocation(line: 588, column: 5, scope: !10684)
!10689 = !DILocation(line: 589, column: 3, scope: !10657)
!10690 = !DILocation(line: 590, column: 9, scope: !10657)
!10691 = !DILocation(line: 590, column: 3, scope: !10657)
!10692 = !DILocation(line: 591, column: 3, scope: !10657)
!10693 = !DILocation(line: 591, column: 25, scope: !10657)
!10694 = !DILocation(line: 592, column: 1, scope: !10657)
!10695 = distinct !DISubprogram(name: "delete_deps_context", scope: !3, file: !3, line: 477, type: !10696, scopeLine: 478, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10696 = !DISubroutineType(types: !10697)
!10697 = !{null, !2112}
!10698 = !DILocalVariable(name: "dc", arg: 1, scope: !10695, file: !3, line: 477, type: !2112)
!10699 = !DILocation(line: 477, column: 29, scope: !10695)
!10700 = !DILocation(line: 479, column: 23, scope: !10695)
!10701 = !DILocation(line: 479, column: 3, scope: !10695)
!10702 = !DILocation(line: 480, column: 9, scope: !10695)
!10703 = !DILocation(line: 480, column: 3, scope: !10695)
!10704 = !DILocation(line: 481, column: 1, scope: !10695)
!10705 = distinct !DISubprogram(name: "delete_target_context", scope: !3, file: !3, line: 386, type: !3053, scopeLine: 387, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10706 = !DILocalVariable(name: "tc", arg: 1, scope: !10705, file: !3, line: 386, type: !2217)
!10707 = !DILocation(line: 386, column: 29, scope: !10705)
!10708 = !DILocation(line: 388, column: 25, scope: !10705)
!10709 = !DILocation(line: 388, column: 3, scope: !10705)
!10710 = !DILocation(line: 390, column: 21, scope: !10711)
!10711 = distinct !DILexicalBlock(scope: !10705, file: !3, line: 390, column: 7)
!10712 = !DILocation(line: 390, column: 7, scope: !10711)
!10713 = !DILocation(line: 390, column: 7, scope: !10705)
!10714 = !DILocation(line: 391, column: 19, scope: !10711)
!10715 = !DILocation(line: 391, column: 39, scope: !10711)
!10716 = !DILocation(line: 391, column: 5, scope: !10711)
!10717 = !DILocation(line: 392, column: 1, scope: !10705)
!10718 = distinct !DISubprogram(name: "VEC_rtx_gc_free", scope: !414, file: !414, line: 202, type: !10719, scopeLine: 202, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10719 = !DISubroutineType(types: !10720)
!10720 = !{null, !10721}
!10721 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2036, size: 64)
!10722 = !DILocalVariable(name: "vec_", arg: 1, scope: !10718, file: !414, line: 202, type: !10721)
!10723 = !DILocation(line: 202, column: 1, scope: !10718)
!10724 = !DILocation(line: 202, column: 1, scope: !10725)
!10725 = distinct !DILexicalBlock(scope: !10718, file: !414, line: 202, column: 1)
!10726 = distinct !DISubprogram(name: "clear_deps_context", scope: !3, file: !3, line: 470, type: !10696, scopeLine: 471, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10727 = !DILocalVariable(name: "dc", arg: 1, scope: !10726, file: !3, line: 470, type: !2112)
!10728 = !DILocation(line: 470, column: 28, scope: !10726)
!10729 = !DILocation(line: 472, column: 14, scope: !10726)
!10730 = !DILocation(line: 472, column: 3, scope: !10726)
!10731 = !DILocation(line: 473, column: 1, scope: !10726)
!10732 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !155, file: !155, line: 150, type: !10733, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10733 = !DISubroutineType(types: !10734)
!10734 = !{!874, !7801, !7, !2557}
!10735 = !DILocalVariable(name: "vec_", arg: 1, scope: !10732, file: !155, line: 150, type: !7801)
!10736 = !DILocation(line: 150, column: 1, scope: !10732)
!10737 = !DILocalVariable(name: "ix_", arg: 2, scope: !10732, file: !155, line: 150, type: !7)
!10738 = !DILocalVariable(name: "ptr", arg: 3, scope: !10732, file: !155, line: 150, type: !2557)
!10739 = !DILocation(line: 150, column: 1, scope: !10740)
!10740 = distinct !DILexicalBlock(scope: !10732, file: !155, line: 150, column: 1)
!10741 = !DILocation(line: 150, column: 1, scope: !10742)
!10742 = distinct !DILexicalBlock(scope: !10740, file: !155, line: 150, column: 1)
!10743 = !DILocation(line: 150, column: 1, scope: !10744)
!10744 = distinct !DILexicalBlock(scope: !10740, file: !155, line: 150, column: 1)
!10745 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !155, file: !155, line: 152, type: !10746, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10746 = !DISubroutineType(types: !10747)
!10747 = !{null, !2544}
!10748 = !DILocalVariable(name: "vec_", arg: 1, scope: !10745, file: !155, line: 152, type: !2544)
!10749 = !DILocation(line: 152, column: 1, scope: !10745)
!10750 = !DILocation(line: 152, column: 1, scope: !10751)
!10751 = distinct !DILexicalBlock(scope: !10745, file: !155, line: 152, column: 1)
!10752 = distinct !DISubprogram(name: "get_all_loop_exits", scope: !409, file: !409, line: 1115, type: !10753, scopeLine: 1116, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10753 = !DISubroutineType(types: !10754)
!10754 = !{!2234, !1391}
!10755 = !DILocalVariable(name: "bb", arg: 1, scope: !10752, file: !409, line: 1115, type: !1391)
!10756 = !DILocation(line: 1115, column: 33, scope: !10752)
!10757 = !DILocalVariable(name: "exits", scope: !10752, file: !409, line: 1117, type: !2234)
!10758 = !DILocation(line: 1117, column: 20, scope: !10752)
!10759 = !DILocation(line: 1121, column: 3, scope: !10752)
!10760 = !DILocation(line: 1121, column: 33, scope: !10752)
!10761 = !DILocation(line: 1121, column: 10, scope: !10752)
!10762 = !DILocation(line: 1122, column: 3, scope: !10752)
!10763 = !DILocation(line: 1122, column: 27, scope: !10752)
!10764 = !DILocation(line: 1122, column: 6, scope: !10752)
!10765 = !DILocation(line: 0, scope: !10752)
!10766 = !DILocation(line: 1124, column: 25, scope: !10767)
!10767 = distinct !DILexicalBlock(scope: !10752, file: !409, line: 1123, column: 5)
!10768 = !DILocation(line: 1124, column: 12, scope: !10767)
!10769 = !DILocation(line: 1124, column: 10, scope: !10767)
!10770 = !DILocation(line: 1127, column: 7, scope: !10767)
!10771 = distinct !{!10771, !10759, !10772}
!10772 = !DILocation(line: 1128, column: 5, scope: !10752)
!10773 = !DILocation(line: 1131, column: 28, scope: !10774)
!10774 = distinct !DILexicalBlock(scope: !10752, file: !409, line: 1131, column: 7)
!10775 = !DILocation(line: 1131, column: 7, scope: !10774)
!10776 = !DILocation(line: 1131, column: 7, scope: !10752)
!10777 = !DILocalVariable(name: "this_loop", scope: !10778, file: !409, line: 1133, type: !1433)
!10778 = distinct !DILexicalBlock(scope: !10774, file: !409, line: 1132, column: 5)
!10779 = !DILocation(line: 1133, column: 20, scope: !10778)
!10780 = !DILocalVariable(name: "pred_loop", scope: !10778, file: !409, line: 1134, type: !1433)
!10781 = !DILocation(line: 1134, column: 20, scope: !10778)
!10782 = !DILocalVariable(name: "i", scope: !10778, file: !409, line: 1135, type: !874)
!10783 = !DILocation(line: 1135, column: 11, scope: !10778)
!10784 = !DILocalVariable(name: "e", scope: !10778, file: !409, line: 1136, type: !1408)
!10785 = !DILocation(line: 1136, column: 12, scope: !10778)
!10786 = !DILocation(line: 1138, column: 24, scope: !10787)
!10787 = distinct !DILexicalBlock(scope: !10778, file: !409, line: 1138, column: 7)
!10788 = !DILocation(line: 1138, column: 28, scope: !10787)
!10789 = !DILocation(line: 1138, column: 22, scope: !10787)
!10790 = !DILocation(line: 1138, column: 12, scope: !10787)
!10791 = !DILocation(line: 1139, column: 12, scope: !10792)
!10792 = distinct !DILexicalBlock(scope: !10787, file: !409, line: 1138, column: 7)
!10793 = !DILocation(line: 1139, column: 22, scope: !10792)
!10794 = !DILocation(line: 1139, column: 25, scope: !10792)
!10795 = !DILocation(line: 1139, column: 38, scope: !10792)
!10796 = !DILocation(line: 1139, column: 35, scope: !10792)
!10797 = !DILocation(line: 0, scope: !10792)
!10798 = !DILocation(line: 1138, column: 7, scope: !10787)
!10799 = !DILocation(line: 1141, column: 21, scope: !10792)
!10800 = !DILocation(line: 1141, column: 19, scope: !10792)
!10801 = !DILocation(line: 1141, column: 9, scope: !10792)
!10802 = !DILocation(line: 1140, column: 36, scope: !10792)
!10803 = !DILocation(line: 1140, column: 24, scope: !10792)
!10804 = !DILocation(line: 1140, column: 22, scope: !10792)
!10805 = !DILocation(line: 1138, column: 7, scope: !10792)
!10806 = distinct !{!10806, !10798, !10807}
!10807 = !DILocation(line: 1141, column: 21, scope: !10787)
!10808 = !DILocation(line: 1143, column: 19, scope: !10778)
!10809 = !DILocation(line: 1143, column: 17, scope: !10778)
!10810 = !DILocation(line: 1144, column: 7, scope: !10778)
!10811 = !DILocation(line: 1146, column: 49, scope: !10778)
!10812 = !DILocation(line: 1146, column: 15, scope: !10778)
!10813 = !DILocation(line: 1146, column: 13, scope: !10778)
!10814 = !DILocation(line: 1149, column: 14, scope: !10815)
!10815 = distinct !DILexicalBlock(scope: !10778, file: !409, line: 1149, column: 7)
!10816 = !DILocation(line: 1149, column: 12, scope: !10815)
!10817 = !DILocation(line: 1149, column: 19, scope: !10818)
!10818 = distinct !DILexicalBlock(scope: !10815, file: !409, line: 1149, column: 7)
!10819 = !DILocation(line: 1149, column: 7, scope: !10815)
!10820 = !DILocation(line: 1150, column: 27, scope: !10821)
!10821 = distinct !DILexicalBlock(scope: !10818, file: !409, line: 1150, column: 6)
!10822 = !DILocation(line: 1150, column: 30, scope: !10821)
!10823 = !DILocation(line: 1150, column: 6, scope: !10821)
!10824 = !DILocation(line: 1151, column: 6, scope: !10821)
!10825 = !DILocation(line: 1151, column: 30, scope: !10821)
!10826 = !DILocation(line: 1151, column: 33, scope: !10821)
!10827 = !DILocation(line: 1151, column: 9, scope: !10821)
!10828 = !DILocation(line: 1150, column: 6, scope: !10818)
!10829 = !DILocalVariable(name: "next_exits", scope: !10830, file: !409, line: 1153, type: !2234)
!10830 = distinct !DILexicalBlock(scope: !10821, file: !409, line: 1152, column: 4)
!10831 = !DILocation(line: 1153, column: 23, scope: !10830)
!10832 = !DILocation(line: 1153, column: 56, scope: !10830)
!10833 = !DILocation(line: 1153, column: 59, scope: !10830)
!10834 = !DILocation(line: 1153, column: 36, scope: !10830)
!10835 = !DILocation(line: 1155, column: 10, scope: !10836)
!10836 = distinct !DILexicalBlock(scope: !10830, file: !409, line: 1155, column: 10)
!10837 = !DILocation(line: 1155, column: 10, scope: !10830)
!10838 = !DILocalVariable(name: "j", scope: !10839, file: !409, line: 1157, type: !874)
!10839 = distinct !DILexicalBlock(scope: !10836, file: !409, line: 1156, column: 8)
!10840 = !DILocation(line: 1157, column: 7, scope: !10839)
!10841 = !DILocalVariable(name: "ne", scope: !10839, file: !409, line: 1158, type: !1408)
!10842 = !DILocation(line: 1158, column: 8, scope: !10839)
!10843 = !DILocation(line: 1162, column: 10, scope: !10844)
!10844 = distinct !DILexicalBlock(scope: !10839, file: !409, line: 1162, column: 3)
!10845 = !DILocation(line: 1162, column: 8, scope: !10844)
!10846 = !DILocation(line: 1162, column: 15, scope: !10847)
!10847 = distinct !DILexicalBlock(scope: !10844, file: !409, line: 1162, column: 3)
!10848 = !DILocation(line: 1162, column: 3, scope: !10844)
!10849 = !DILocation(line: 1163, column: 5, scope: !10847)
!10850 = !DILocation(line: 1162, column: 55, scope: !10847)
!10851 = !DILocation(line: 1162, column: 3, scope: !10847)
!10852 = distinct !{!10852, !10848, !10853}
!10853 = !DILocation(line: 1163, column: 5, scope: !10844)
!10854 = !DILocation(line: 1166, column: 3, scope: !10839)
!10855 = !DILocation(line: 1169, column: 4, scope: !10839)
!10856 = !DILocation(line: 1170, column: 3, scope: !10839)
!10857 = !DILocation(line: 1172, column: 4, scope: !10830)
!10858 = !DILocation(line: 1151, column: 37, scope: !10821)
!10859 = !DILocation(line: 1149, column: 53, scope: !10818)
!10860 = !DILocation(line: 1149, column: 7, scope: !10818)
!10861 = distinct !{!10861, !10819, !10862}
!10862 = !DILocation(line: 1172, column: 4, scope: !10815)
!10863 = !DILocation(line: 1173, column: 5, scope: !10778)
!10864 = !DILocation(line: 1175, column: 10, scope: !10752)
!10865 = !DILocation(line: 1175, column: 3, scope: !10752)
!10866 = distinct !DISubprogram(name: "sel_bb_empty_or_nop_p", scope: !409, file: !409, line: 1089, type: !2520, scopeLine: 1090, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10867 = !DILocalVariable(name: "bb", arg: 1, scope: !10866, file: !409, line: 1089, type: !1391)
!10868 = !DILocation(line: 1089, column: 36, scope: !10866)
!10869 = !DILocalVariable(name: "first", scope: !10866, file: !409, line: 1091, type: !2104)
!10870 = !DILocation(line: 1091, column: 10, scope: !10866)
!10871 = !DILocation(line: 1091, column: 31, scope: !10866)
!10872 = !DILocation(line: 1091, column: 18, scope: !10866)
!10873 = !DILocalVariable(name: "last", scope: !10866, file: !409, line: 1091, type: !2104)
!10874 = !DILocation(line: 1091, column: 36, scope: !10866)
!10875 = !DILocation(line: 1093, column: 7, scope: !10876)
!10876 = distinct !DILexicalBlock(scope: !10866, file: !409, line: 1093, column: 7)
!10877 = !DILocation(line: 1093, column: 13, scope: !10876)
!10878 = !DILocation(line: 1093, column: 7, scope: !10866)
!10879 = !DILocation(line: 1094, column: 5, scope: !10876)
!10880 = !DILocation(line: 1096, column: 8, scope: !10881)
!10881 = distinct !DILexicalBlock(scope: !10866, file: !409, line: 1096, column: 7)
!10882 = !DILocation(line: 1096, column: 7, scope: !10866)
!10883 = !DILocation(line: 1097, column: 5, scope: !10881)
!10884 = !DILocation(line: 1099, column: 7, scope: !10885)
!10885 = distinct !DILexicalBlock(scope: !10866, file: !409, line: 1099, column: 7)
!10886 = !DILocation(line: 1099, column: 13, scope: !10885)
!10887 = !DILocation(line: 1099, column: 10, scope: !10885)
!10888 = !DILocation(line: 1099, column: 7, scope: !10866)
!10889 = !DILocation(line: 1100, column: 5, scope: !10885)
!10890 = !DILocation(line: 1102, column: 22, scope: !10866)
!10891 = !DILocation(line: 1102, column: 10, scope: !10866)
!10892 = !DILocation(line: 1102, column: 8, scope: !10866)
!10893 = !DILocation(line: 1103, column: 7, scope: !10894)
!10894 = distinct !DILexicalBlock(scope: !10866, file: !409, line: 1103, column: 7)
!10895 = !DILocation(line: 1103, column: 16, scope: !10894)
!10896 = !DILocation(line: 1103, column: 13, scope: !10894)
!10897 = !DILocation(line: 1103, column: 7, scope: !10866)
!10898 = !DILocation(line: 1104, column: 5, scope: !10894)
!10899 = !DILocation(line: 1106, column: 3, scope: !10866)
!10900 = !DILocation(line: 1107, column: 1, scope: !10866)
!10901 = distinct !DISubprogram(name: "inner_loop_header_p", scope: !409, file: !409, line: 1033, type: !2520, scopeLine: 1034, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10902 = !DILocalVariable(name: "bb", arg: 1, scope: !10901, file: !409, line: 1033, type: !1391)
!10903 = !DILocation(line: 1033, column: 34, scope: !10901)
!10904 = !DILocalVariable(name: "inner_loop", scope: !10901, file: !409, line: 1035, type: !1433)
!10905 = !DILocation(line: 1035, column: 16, scope: !10901)
!10906 = !DILocation(line: 1037, column: 8, scope: !10907)
!10907 = distinct !DILexicalBlock(scope: !10901, file: !409, line: 1037, column: 7)
!10908 = !DILocation(line: 1037, column: 7, scope: !10901)
!10909 = !DILocation(line: 1038, column: 5, scope: !10907)
!10910 = !DILocation(line: 1040, column: 7, scope: !10911)
!10911 = distinct !DILexicalBlock(scope: !10901, file: !409, line: 1040, column: 7)
!10912 = !DILocation(line: 1040, column: 13, scope: !10911)
!10913 = !DILocation(line: 1040, column: 10, scope: !10911)
!10914 = !DILocation(line: 1040, column: 7, scope: !10901)
!10915 = !DILocation(line: 1041, column: 5, scope: !10911)
!10916 = !DILocation(line: 1043, column: 16, scope: !10901)
!10917 = !DILocation(line: 1043, column: 20, scope: !10901)
!10918 = !DILocation(line: 1043, column: 14, scope: !10901)
!10919 = !DILocation(line: 1044, column: 7, scope: !10920)
!10920 = distinct !DILexicalBlock(scope: !10901, file: !409, line: 1044, column: 7)
!10921 = !DILocation(line: 1044, column: 21, scope: !10920)
!10922 = !DILocation(line: 1044, column: 18, scope: !10920)
!10923 = !DILocation(line: 1044, column: 7, scope: !10901)
!10924 = !DILocation(line: 1045, column: 5, scope: !10920)
!10925 = !DILocation(line: 1048, column: 7, scope: !10926)
!10926 = distinct !DILexicalBlock(scope: !10901, file: !409, line: 1048, column: 7)
!10927 = !DILocation(line: 1048, column: 13, scope: !10926)
!10928 = !DILocation(line: 1048, column: 25, scope: !10926)
!10929 = !DILocation(line: 1048, column: 10, scope: !10926)
!10930 = !DILocation(line: 1049, column: 7, scope: !10926)
!10931 = !DILocation(line: 1049, column: 33, scope: !10926)
!10932 = !DILocation(line: 1049, column: 52, scope: !10926)
!10933 = !DILocation(line: 1049, column: 10, scope: !10926)
!10934 = !DILocation(line: 1048, column: 7, scope: !10901)
!10935 = !DILocation(line: 1052, column: 7, scope: !10936)
!10936 = distinct !DILexicalBlock(scope: !10926, file: !409, line: 1050, column: 5)
!10937 = !DILocation(line: 1053, column: 7, scope: !10936)
!10938 = !DILocation(line: 1056, column: 3, scope: !10901)
!10939 = !DILocation(line: 1057, column: 1, scope: !10901)
!10940 = distinct !DISubprogram(name: "get_loop_exit_edges_unique_dests", scope: !409, file: !409, line: 1061, type: !10941, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!10941 = !DISubroutineType(types: !10942)
!10942 = !{!2234, !10148}
!10943 = !DILocalVariable(name: "loop", arg: 1, scope: !10940, file: !409, line: 1061, type: !10148)
!10944 = !DILocation(line: 1061, column: 54, scope: !10940)
!10945 = !DILocalVariable(name: "edges", scope: !10940, file: !409, line: 1063, type: !2234)
!10946 = !DILocation(line: 1063, column: 21, scope: !10940)
!10947 = !DILocalVariable(name: "exit", scope: !10940, file: !409, line: 1064, type: !1482)
!10948 = !DILocation(line: 1064, column: 21, scope: !10940)
!10949 = !DILocation(line: 1066, column: 3, scope: !10940)
!10950 = !DILocation(line: 1069, column: 15, scope: !10951)
!10951 = distinct !DILexicalBlock(scope: !10940, file: !409, line: 1069, column: 3)
!10952 = !DILocation(line: 1069, column: 21, scope: !10951)
!10953 = !DILocation(line: 1069, column: 28, scope: !10951)
!10954 = !DILocation(line: 1069, column: 13, scope: !10951)
!10955 = !DILocation(line: 1069, column: 8, scope: !10951)
!10956 = !DILocation(line: 1069, column: 34, scope: !10957)
!10957 = distinct !DILexicalBlock(scope: !10951, file: !409, line: 1069, column: 3)
!10958 = !DILocation(line: 1069, column: 40, scope: !10957)
!10959 = !DILocation(line: 1069, column: 3, scope: !10951)
!10960 = !DILocalVariable(name: "i", scope: !10961, file: !409, line: 1071, type: !874)
!10961 = distinct !DILexicalBlock(scope: !10957, file: !409, line: 1070, column: 5)
!10962 = !DILocation(line: 1071, column: 11, scope: !10961)
!10963 = !DILocalVariable(name: "e", scope: !10961, file: !409, line: 1072, type: !1408)
!10964 = !DILocation(line: 1072, column: 12, scope: !10961)
!10965 = !DILocalVariable(name: "was_dest", scope: !10961, file: !409, line: 1073, type: !1085)
!10966 = !DILocation(line: 1073, column: 12, scope: !10961)
!10967 = !DILocation(line: 1075, column: 14, scope: !10968)
!10968 = distinct !DILexicalBlock(scope: !10961, file: !409, line: 1075, column: 7)
!10969 = !DILocation(line: 1075, column: 12, scope: !10968)
!10970 = !DILocation(line: 1075, column: 19, scope: !10971)
!10971 = distinct !DILexicalBlock(scope: !10968, file: !409, line: 1075, column: 7)
!10972 = !DILocation(line: 1075, column: 7, scope: !10968)
!10973 = !DILocation(line: 1076, column: 13, scope: !10974)
!10974 = distinct !DILexicalBlock(scope: !10971, file: !409, line: 1076, column: 13)
!10975 = !DILocation(line: 1076, column: 16, scope: !10974)
!10976 = !DILocation(line: 1076, column: 24, scope: !10974)
!10977 = !DILocation(line: 1076, column: 30, scope: !10974)
!10978 = !DILocation(line: 1076, column: 33, scope: !10974)
!10979 = !DILocation(line: 1076, column: 21, scope: !10974)
!10980 = !DILocation(line: 1076, column: 13, scope: !10971)
!10981 = !DILocation(line: 1078, column: 22, scope: !10982)
!10982 = distinct !DILexicalBlock(scope: !10974, file: !409, line: 1077, column: 11)
!10983 = !DILocation(line: 1079, column: 13, scope: !10982)
!10984 = !DILocation(line: 1075, column: 53, scope: !10971)
!10985 = !DILocation(line: 1075, column: 7, scope: !10971)
!10986 = distinct !{!10986, !10972, !10987}
!10987 = !DILocation(line: 1080, column: 11, scope: !10968)
!10988 = !DILocation(line: 1082, column: 12, scope: !10989)
!10989 = distinct !DILexicalBlock(scope: !10961, file: !409, line: 1082, column: 11)
!10990 = !DILocation(line: 1082, column: 11, scope: !10961)
!10991 = !DILocation(line: 1083, column: 9, scope: !10989)
!10992 = !DILocation(line: 1084, column: 5, scope: !10961)
!10993 = !DILocation(line: 1069, column: 50, scope: !10957)
!10994 = !DILocation(line: 1069, column: 56, scope: !10957)
!10995 = !DILocation(line: 1069, column: 48, scope: !10957)
!10996 = !DILocation(line: 1069, column: 3, scope: !10957)
!10997 = distinct !{!10997, !10959, !10998}
!10998 = !DILocation(line: 1084, column: 5, scope: !10951)
!10999 = !DILocation(line: 1085, column: 10, scope: !10940)
!11000 = !DILocation(line: 1085, column: 3, scope: !10940)
!11001 = distinct !DISubprogram(name: "VEC_edge_heap_safe_push", scope: !155, file: !155, line: 152, type: !11002, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11002 = !DISubroutineType(types: !11003)
!11003 = !{!2557, !2544, !1408}
!11004 = !DILocalVariable(name: "vec_", arg: 1, scope: !11001, file: !155, line: 152, type: !2544)
!11005 = !DILocation(line: 152, column: 1, scope: !11001)
!11006 = !DILocalVariable(name: "obj_", arg: 2, scope: !11001, file: !155, line: 152, type: !1408)
!11007 = distinct !DISubprogram(name: "VEC_edge_base_ordered_remove", scope: !155, file: !155, line: 150, type: !11008, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11008 = !DISubroutineType(types: !11009)
!11009 = !{!1408, !11010, !7}
!11010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1401, size: 64)
!11011 = !DILocalVariable(name: "vec_", arg: 1, scope: !11007, file: !155, line: 150, type: !11010)
!11012 = !DILocation(line: 150, column: 1, scope: !11007)
!11013 = !DILocalVariable(name: "ix_", arg: 2, scope: !11007, file: !155, line: 150, type: !7)
!11014 = !DILocalVariable(name: "slot_", scope: !11007, file: !155, line: 150, type: !2557)
!11015 = !DILocalVariable(name: "obj_", scope: !11007, file: !155, line: 150, type: !1408)
!11016 = distinct !DISubprogram(name: "VEC_edge_heap_reserve", scope: !155, file: !155, line: 152, type: !11017, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11017 = !DISubroutineType(types: !11018)
!11018 = !{!874, !2544, !874}
!11019 = !DILocalVariable(name: "vec_", arg: 1, scope: !11016, file: !155, line: 152, type: !2544)
!11020 = !DILocation(line: 152, column: 1, scope: !11016)
!11021 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11016, file: !155, line: 152, type: !874)
!11022 = !DILocalVariable(name: "extend", scope: !11016, file: !155, line: 152, type: !874)
!11023 = !DILocation(line: 152, column: 1, scope: !11024)
!11024 = distinct !DILexicalBlock(scope: !11016, file: !155, line: 152, column: 1)
!11025 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !155, file: !155, line: 150, type: !11026, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11026 = !DISubroutineType(types: !11027)
!11027 = !{!2557, !11010, !1408}
!11028 = !DILocalVariable(name: "vec_", arg: 1, scope: !11025, file: !155, line: 150, type: !11010)
!11029 = !DILocation(line: 150, column: 1, scope: !11025)
!11030 = !DILocalVariable(name: "obj_", arg: 2, scope: !11025, file: !155, line: 150, type: !1408)
!11031 = !DILocalVariable(name: "slot_", scope: !11025, file: !155, line: 150, type: !2557)
!11032 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !155, file: !155, line: 150, type: !11033, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11033 = !DISubroutineType(types: !11034)
!11034 = !{!874, !11010, !874}
!11035 = !DILocalVariable(name: "vec_", arg: 1, scope: !11032, file: !155, line: 150, type: !11010)
!11036 = !DILocation(line: 150, column: 1, scope: !11032)
!11037 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11032, file: !155, line: 150, type: !874)
!11038 = distinct !DISubprogram(name: "state_alloc", scope: !3, file: !3, line: 525, type: !3626, scopeLine: 526, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11039 = !DILocation(line: 527, column: 19, scope: !11038)
!11040 = !DILocation(line: 527, column: 10, scope: !11038)
!11041 = !DILocation(line: 527, column: 3, scope: !11038)
!11042 = distinct !DISubprogram(name: "alloc_deps_context", scope: !3, file: !3, line: 443, type: !3638, scopeLine: 444, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11043 = !DILocation(line: 445, column: 10, scope: !11042)
!11044 = !DILocation(line: 445, column: 3, scope: !11042)
!11045 = distinct !DISubprogram(name: "state_free", scope: !3, file: !3, line: 543, type: !11046, scopeLine: 544, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11046 = !DISubroutineType(types: !11047)
!11047 = !{null, !2210}
!11048 = !DILocalVariable(name: "state", arg: 1, scope: !11045, file: !3, line: 543, type: !2210)
!11049 = !DILocation(line: 543, column: 21, scope: !11045)
!11050 = !DILocation(line: 545, column: 9, scope: !11045)
!11051 = !DILocation(line: 545, column: 3, scope: !11045)
!11052 = !DILocation(line: 546, column: 1, scope: !11045)
!11053 = distinct !DISubprogram(name: "reset_deps_context", scope: !3, file: !3, line: 485, type: !10696, scopeLine: 486, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11054 = !DILocalVariable(name: "dc", arg: 1, scope: !11053, file: !3, line: 485, type: !2112)
!11055 = !DILocation(line: 485, column: 28, scope: !11053)
!11056 = !DILocation(line: 487, column: 23, scope: !11053)
!11057 = !DILocation(line: 487, column: 3, scope: !11053)
!11058 = !DILocation(line: 488, column: 14, scope: !11053)
!11059 = !DILocation(line: 488, column: 3, scope: !11053)
!11060 = !DILocation(line: 489, column: 1, scope: !11053)
!11061 = distinct !DISubprogram(name: "state_copy", scope: !3, file: !3, line: 550, type: !11062, scopeLine: 551, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11062 = !DISubroutineType(types: !11063)
!11063 = !{null, !2210, !2210}
!11064 = !DILocalVariable(name: "to", arg: 1, scope: !11061, file: !3, line: 550, type: !2210)
!11065 = !DILocation(line: 550, column: 21, scope: !11061)
!11066 = !DILocalVariable(name: "from", arg: 2, scope: !11061, file: !3, line: 550, type: !2210)
!11067 = !DILocation(line: 550, column: 33, scope: !11061)
!11068 = !DILocation(line: 552, column: 11, scope: !11061)
!11069 = !DILocation(line: 552, column: 15, scope: !11061)
!11070 = !DILocation(line: 552, column: 21, scope: !11061)
!11071 = !DILocation(line: 552, column: 3, scope: !11061)
!11072 = !DILocation(line: 553, column: 1, scope: !11061)
!11073 = distinct !DISubprogram(name: "copy_deps_context", scope: !3, file: !3, line: 435, type: !11074, scopeLine: 436, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11074 = !DISubroutineType(types: !11075)
!11075 = !{null, !2112, !2112}
!11076 = !DILocalVariable(name: "to", arg: 1, scope: !11073, file: !3, line: 435, type: !2112)
!11077 = !DILocation(line: 435, column: 27, scope: !11073)
!11078 = !DILocalVariable(name: "from", arg: 2, scope: !11073, file: !3, line: 435, type: !2112)
!11079 = !DILocation(line: 435, column: 38, scope: !11073)
!11080 = !DILocation(line: 437, column: 14, scope: !11073)
!11081 = !DILocation(line: 437, column: 3, scope: !11073)
!11082 = !DILocation(line: 438, column: 14, scope: !11073)
!11083 = !DILocation(line: 438, column: 18, scope: !11073)
!11084 = !DILocation(line: 438, column: 3, scope: !11073)
!11085 = !DILocation(line: 439, column: 1, scope: !11073)
!11086 = distinct !DISubprogram(name: "copy_target_context", scope: !3, file: !3, line: 397, type: !11087, scopeLine: 398, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11087 = !DISubroutineType(types: !11088)
!11088 = !{null, !2217, !2217}
!11089 = !DILocalVariable(name: "to", arg: 1, scope: !11086, file: !3, line: 397, type: !2217)
!11090 = !DILocation(line: 397, column: 27, scope: !11086)
!11091 = !DILocalVariable(name: "from", arg: 2, scope: !11086, file: !3, line: 397, type: !2217)
!11092 = !DILocation(line: 397, column: 36, scope: !11086)
!11093 = !DILocalVariable(name: "tmp", scope: !11086, file: !3, line: 399, type: !2217)
!11094 = !DILocation(line: 399, column: 8, scope: !11086)
!11095 = !DILocation(line: 399, column: 14, scope: !11086)
!11096 = !DILocation(line: 401, column: 23, scope: !11086)
!11097 = !DILocation(line: 401, column: 3, scope: !11086)
!11098 = !DILocation(line: 402, column: 24, scope: !11086)
!11099 = !DILocation(line: 402, column: 3, scope: !11086)
!11100 = !DILocation(line: 404, column: 23, scope: !11086)
!11101 = !DILocation(line: 404, column: 3, scope: !11086)
!11102 = !DILocation(line: 405, column: 26, scope: !11086)
!11103 = !DILocation(line: 405, column: 3, scope: !11086)
!11104 = !DILocation(line: 406, column: 1, scope: !11086)
!11105 = distinct !DISubprogram(name: "VEC_expr_history_def_base_length", scope: !409, file: !409, line: 101, type: !11106, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11106 = !DISubroutineType(types: !11107)
!11107 = !{!7, !11108}
!11108 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11109, size: 64)
!11109 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2185)
!11110 = !DILocalVariable(name: "vec_", arg: 1, scope: !11105, file: !409, line: 101, type: !11108)
!11111 = !DILocation(line: 101, column: 1, scope: !11105)
!11112 = distinct !DISubprogram(name: "VEC_expr_history_def_base_address", scope: !409, file: !409, line: 101, type: !11113, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11113 = !DISubroutineType(types: !11114)
!11114 = !{!5026, !5369}
!11115 = !DILocalVariable(name: "vec_", arg: 1, scope: !11112, file: !409, line: 101, type: !5369)
!11116 = !DILocation(line: 101, column: 1, scope: !11112)
!11117 = distinct !DISubprogram(name: "VEC_expr_history_def_heap_reserve", scope: !409, file: !409, line: 102, type: !11118, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11118 = !DISubroutineType(types: !11119)
!11119 = !{!874, !5293, !874}
!11120 = !DILocalVariable(name: "vec_", arg: 1, scope: !11117, file: !409, line: 102, type: !5293)
!11121 = !DILocation(line: 102, column: 1, scope: !11117)
!11122 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11117, file: !409, line: 102, type: !874)
!11123 = !DILocalVariable(name: "extend", scope: !11117, file: !409, line: 102, type: !874)
!11124 = !DILocation(line: 102, column: 1, scope: !11125)
!11125 = distinct !DILexicalBlock(scope: !11117, file: !409, line: 102, column: 1)
!11126 = distinct !DISubprogram(name: "VEC_expr_history_def_base_quick_insert", scope: !409, file: !409, line: 101, type: !11127, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11127 = !DISubroutineType(types: !11128)
!11128 = !{!5026, !5369, !7, !5377}
!11129 = !DILocalVariable(name: "vec_", arg: 1, scope: !11126, file: !409, line: 101, type: !5369)
!11130 = !DILocation(line: 101, column: 1, scope: !11126)
!11131 = !DILocalVariable(name: "ix_", arg: 2, scope: !11126, file: !409, line: 101, type: !7)
!11132 = !DILocalVariable(name: "obj_", arg: 3, scope: !11126, file: !409, line: 101, type: !5377)
!11133 = !DILocalVariable(name: "slot_", scope: !11126, file: !409, line: 101, type: !5026)
!11134 = !DILocation(line: 101, column: 1, scope: !11135)
!11135 = distinct !DILexicalBlock(scope: !11126, file: !409, line: 101, column: 1)
!11136 = distinct !DISubprogram(name: "VEC_expr_history_def_base_space", scope: !409, file: !409, line: 101, type: !11137, scopeLine: 101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11137 = !DISubroutineType(types: !11138)
!11138 = !{!874, !5369, !874}
!11139 = !DILocalVariable(name: "vec_", arg: 1, scope: !11136, file: !409, line: 101, type: !5369)
!11140 = !DILocation(line: 101, column: 1, scope: !11136)
!11141 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11136, file: !409, line: 101, type: !874)
!11142 = distinct !DISubprogram(name: "VEC_expr_history_def_heap_free", scope: !409, file: !409, line: 102, type: !5971, scopeLine: 102, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11143 = !DILocalVariable(name: "vec_", arg: 1, scope: !11142, file: !409, line: 102, type: !5293)
!11144 = !DILocation(line: 102, column: 1, scope: !11142)
!11145 = !DILocation(line: 102, column: 1, scope: !11146)
!11146 = distinct !DILexicalBlock(scope: !11142, file: !409, line: 102, column: 1)
!11147 = distinct !DISubprogram(name: "_list_iter_remove_nofree", scope: !409, file: !409, line: 454, type: !6327, scopeLine: 455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11148 = !DILocalVariable(name: "ip", arg: 1, scope: !11147, file: !409, line: 454, type: !6193)
!11149 = !DILocation(line: 454, column: 43, scope: !11147)
!11150 = !DILocation(line: 456, column: 3, scope: !11147)
!11151 = !DILocation(line: 457, column: 24, scope: !11147)
!11152 = !DILocation(line: 457, column: 28, scope: !11147)
!11153 = !DILocation(line: 457, column: 3, scope: !11147)
!11154 = !DILocation(line: 458, column: 3, scope: !11147)
!11155 = !DILocation(line: 458, column: 7, scope: !11147)
!11156 = !DILocation(line: 458, column: 17, scope: !11147)
!11157 = !DILocation(line: 459, column: 1, scope: !11147)
!11158 = distinct !DISubprogram(name: "_list_remove_nofree", scope: !409, file: !409, line: 391, type: !2835, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11159 = !DILocalVariable(name: "lp", arg: 1, scope: !11158, file: !409, line: 391, type: !2837)
!11160 = !DILocation(line: 391, column: 31, scope: !11158)
!11161 = !DILocalVariable(name: "n", scope: !11158, file: !409, line: 393, type: !2091)
!11162 = !DILocation(line: 393, column: 11, scope: !11158)
!11163 = !DILocation(line: 393, column: 16, scope: !11158)
!11164 = !DILocation(line: 393, column: 15, scope: !11158)
!11165 = !DILocation(line: 395, column: 9, scope: !11158)
!11166 = !DILocation(line: 395, column: 4, scope: !11158)
!11167 = !DILocation(line: 395, column: 7, scope: !11158)
!11168 = !DILocation(line: 396, column: 1, scope: !11158)
!11169 = distinct !DISubprogram(name: "invalidate_av_set", scope: !3, file: !3, line: 4153, type: !2478, scopeLine: 4154, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11170 = !DILocalVariable(name: "bb", arg: 1, scope: !11169, file: !3, line: 4153, type: !1391)
!11171 = !DILocation(line: 4153, column: 32, scope: !11169)
!11172 = !DILocation(line: 4155, column: 3, scope: !11169)
!11173 = !DILocation(line: 4158, column: 3, scope: !11169)
!11174 = !DILocation(line: 4158, column: 20, scope: !11169)
!11175 = !DILocation(line: 4159, column: 1, scope: !11169)
!11176 = distinct !DISubprogram(name: "VEC_haifa_insn_data_def_base_index", scope: !398, file: !398, line: 825, type: !11177, scopeLine: 825, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11177 = !DISubroutineType(types: !11178)
!11178 = !{!11179, !11222, !7}
!11179 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11180, size: 64)
!11180 = !DIDerivedType(tag: DW_TAG_typedef, name: "haifa_insn_data_def", file: !398, line: 822, baseType: !11181)
!11181 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_haifa_insn_data", file: !398, line: 751, size: 768, elements: !11182)
!11182 = !{!11183, !11184, !11185, !11186, !11187, !11188, !11189, !11190, !11191, !11192, !11193, !11194, !11195, !11196, !11197, !11205, !11206, !11214, !11221}
!11183 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !11181, file: !398, line: 758, baseType: !874, size: 32)
!11184 = !DIDerivedType(tag: DW_TAG_member, name: "priority", scope: !11181, file: !398, line: 761, baseType: !874, size: 32, offset: 32)
!11185 = !DIDerivedType(tag: DW_TAG_member, name: "tick", scope: !11181, file: !398, line: 765, baseType: !874, size: 32, offset: 64)
!11186 = !DIDerivedType(tag: DW_TAG_member, name: "inter_tick", scope: !11181, file: !398, line: 769, baseType: !874, size: 32, offset: 96)
!11187 = !DIDerivedType(tag: DW_TAG_member, name: "queue_index", scope: !11181, file: !398, line: 772, baseType: !874, size: 32, offset: 128)
!11188 = !DIDerivedType(tag: DW_TAG_member, name: "cost", scope: !11181, file: !398, line: 774, baseType: !2061, size: 16, offset: 160)
!11189 = !DIDerivedType(tag: DW_TAG_member, name: "fed_by_spec_load", scope: !11181, file: !398, line: 778, baseType: !7, size: 1, offset: 176, flags: DIFlagBitField, extraData: i64 176)
!11190 = !DIDerivedType(tag: DW_TAG_member, name: "is_load_insn", scope: !11181, file: !398, line: 779, baseType: !7, size: 1, offset: 177, flags: DIFlagBitField, extraData: i64 176)
!11191 = !DIDerivedType(tag: DW_TAG_member, name: "priority_status", scope: !11181, file: !398, line: 784, baseType: !1823, size: 8, offset: 184)
!11192 = !DIDerivedType(tag: DW_TAG_member, name: "todo_spec", scope: !11181, file: !398, line: 787, baseType: !2056, size: 32, offset: 192)
!11193 = !DIDerivedType(tag: DW_TAG_member, name: "done_spec", scope: !11181, file: !398, line: 790, baseType: !2056, size: 32, offset: 224)
!11194 = !DIDerivedType(tag: DW_TAG_member, name: "check_spec", scope: !11181, file: !398, line: 793, baseType: !2056, size: 32, offset: 256)
!11195 = !DIDerivedType(tag: DW_TAG_member, name: "recovery_block", scope: !11181, file: !398, line: 796, baseType: !1391, size: 64, offset: 320)
!11196 = !DIDerivedType(tag: DW_TAG_member, name: "orig_pat", scope: !11181, file: !398, line: 799, baseType: !850, size: 64, offset: 384)
!11197 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure", scope: !11181, file: !398, line: 804, baseType: !11198, size: 64, offset: 448)
!11198 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11199, size: 64)
!11199 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_pressure_data", file: !398, line: 711, size: 32, elements: !11200)
!11200 = !{!11201, !11202, !11203, !11204}
!11201 = !DIDerivedType(tag: DW_TAG_member, name: "clobber_increase", scope: !11199, file: !398, line: 714, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!11202 = !DIDerivedType(tag: DW_TAG_member, name: "set_increase", scope: !11199, file: !398, line: 717, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!11203 = !DIDerivedType(tag: DW_TAG_member, name: "unused_set_increase", scope: !11199, file: !398, line: 720, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!11204 = !DIDerivedType(tag: DW_TAG_member, name: "change", scope: !11199, file: !398, line: 722, baseType: !874, size: 8, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!11205 = !DIDerivedType(tag: DW_TAG_member, name: "max_reg_pressure", scope: !11181, file: !398, line: 810, baseType: !2051, size: 64, offset: 512)
!11206 = !DIDerivedType(tag: DW_TAG_member, name: "reg_use_list", scope: !11181, file: !398, line: 813, baseType: !11207, size: 64, offset: 576)
!11207 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11208, size: 64)
!11208 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_use_data", file: !398, line: 726, size: 256, elements: !11209)
!11209 = !{!11210, !11211, !11212, !11213}
!11210 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !11208, file: !398, line: 729, baseType: !874, size: 32)
!11211 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !11208, file: !398, line: 731, baseType: !850, size: 64, offset: 64)
!11212 = !DIDerivedType(tag: DW_TAG_member, name: "next_regno_use", scope: !11208, file: !398, line: 733, baseType: !11207, size: 64, offset: 128)
!11213 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_use", scope: !11208, file: !398, line: 735, baseType: !11207, size: 64, offset: 192)
!11214 = !DIDerivedType(tag: DW_TAG_member, name: "reg_set_list", scope: !11181, file: !398, line: 816, baseType: !11215, size: 64, offset: 640)
!11215 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11216, size: 64)
!11216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_set_data", file: !398, line: 741, size: 192, elements: !11217)
!11217 = !{!11218, !11219, !11220}
!11218 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !11216, file: !398, line: 744, baseType: !874, size: 32)
!11219 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !11216, file: !398, line: 746, baseType: !850, size: 64, offset: 64)
!11220 = !DIDerivedType(tag: DW_TAG_member, name: "next_insn_set", scope: !11216, file: !398, line: 748, baseType: !11215, size: 64, offset: 128)
!11221 = !DIDerivedType(tag: DW_TAG_member, name: "reg_pressure_excess_cost_change", scope: !11181, file: !398, line: 819, baseType: !874, size: 32, offset: 704)
!11222 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11223, size: 64)
!11223 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_haifa_insn_data_def_base", file: !398, line: 825, baseType: !11224)
!11224 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_haifa_insn_data_def_base", file: !398, line: 825, size: 832, elements: !11225)
!11225 = !{!11226, !11227, !11228}
!11226 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !11224, file: !398, line: 825, baseType: !7, size: 32)
!11227 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !11224, file: !398, line: 825, baseType: !7, size: 32, offset: 32)
!11228 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !11224, file: !398, line: 825, baseType: !11229, size: 768, offset: 64)
!11229 = !DICompositeType(tag: DW_TAG_array_type, baseType: !11180, size: 768, elements: !889)
!11230 = !DILocalVariable(name: "vec_", arg: 1, scope: !11176, file: !398, line: 825, type: !11222)
!11231 = !DILocation(line: 825, column: 1, scope: !11176)
!11232 = !DILocalVariable(name: "ix_", arg: 2, scope: !11176, file: !398, line: 825, type: !7)
!11233 = !DILocation(line: 0, scope: !11176)
!11234 = distinct !DISubprogram(name: "init_first_time_insn_data", scope: !3, file: !3, line: 2752, type: !3100, scopeLine: 2753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11235 = !DILocalVariable(name: "insn", arg: 1, scope: !11234, file: !3, line: 2752, type: !2104)
!11236 = !DILocation(line: 2752, column: 35, scope: !11234)
!11237 = !DILocation(line: 2756, column: 3, scope: !11234)
!11238 = !DILocation(line: 2759, column: 22, scope: !11234)
!11239 = !DILocation(line: 2759, column: 3, scope: !11234)
!11240 = !DILocation(line: 2759, column: 20, scope: !11234)
!11241 = !DILocation(line: 2760, column: 3, scope: !11234)
!11242 = !DILocation(line: 2760, column: 28, scope: !11234)
!11243 = !DILocation(line: 2762, column: 8, scope: !11244)
!11244 = distinct !DILexicalBlock(scope: !11234, file: !3, line: 2762, column: 7)
!11245 = !DILocation(line: 2762, column: 7, scope: !11234)
!11246 = !DILocation(line: 2764, column: 35, scope: !11247)
!11247 = distinct !DILexicalBlock(scope: !11244, file: !3, line: 2763, column: 5)
!11248 = !DILocation(line: 2764, column: 7, scope: !11247)
!11249 = !DILocation(line: 2764, column: 33, scope: !11247)
!11250 = !DILocation(line: 2765, column: 32, scope: !11247)
!11251 = !DILocation(line: 2765, column: 7, scope: !11247)
!11252 = !DILocation(line: 2765, column: 30, scope: !11247)
!11253 = !DILocation(line: 2767, column: 11, scope: !11247)
!11254 = !DILocation(line: 2766, column: 7, scope: !11247)
!11255 = !DILocation(line: 2767, column: 9, scope: !11247)
!11256 = !DILocation(line: 2769, column: 19, scope: !11247)
!11257 = !DILocation(line: 2769, column: 7, scope: !11247)
!11258 = !DILocation(line: 2770, column: 5, scope: !11247)
!11259 = !DILocation(line: 2771, column: 1, scope: !11234)
!11260 = distinct !DISubprogram(name: "hash_transformed_insns", scope: !3, file: !3, line: 2721, type: !1311, scopeLine: 2722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11261 = !DILocalVariable(name: "p", arg: 1, scope: !11260, file: !3, line: 2721, type: !1314)
!11262 = !DILocation(line: 2721, column: 37, scope: !11260)
!11263 = !DILocation(line: 2723, column: 10, scope: !11260)
!11264 = !DILocation(line: 2723, column: 3, scope: !11260)
!11265 = distinct !DISubprogram(name: "eq_transformed_insns", scope: !3, file: !3, line: 2728, type: !1319, scopeLine: 2729, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11266 = !DILocalVariable(name: "p", arg: 1, scope: !11265, file: !3, line: 2728, type: !1314)
!11267 = !DILocation(line: 2728, column: 35, scope: !11265)
!11268 = !DILocalVariable(name: "q", arg: 2, scope: !11265, file: !3, line: 2728, type: !1314)
!11269 = !DILocation(line: 2728, column: 50, scope: !11265)
!11270 = !DILocalVariable(name: "i1", scope: !11265, file: !3, line: 2730, type: !850)
!11271 = !DILocation(line: 2730, column: 7, scope: !11265)
!11272 = !DILocation(line: 2730, column: 12, scope: !11265)
!11273 = !DILocalVariable(name: "i2", scope: !11265, file: !3, line: 2731, type: !850)
!11274 = !DILocation(line: 2731, column: 7, scope: !11265)
!11275 = !DILocation(line: 2731, column: 12, scope: !11265)
!11276 = !DILocation(line: 2733, column: 7, scope: !11277)
!11277 = distinct !DILexicalBlock(scope: !11265, file: !3, line: 2733, column: 7)
!11278 = !DILocation(line: 2733, column: 24, scope: !11277)
!11279 = !DILocation(line: 2733, column: 21, scope: !11277)
!11280 = !DILocation(line: 2733, column: 7, scope: !11265)
!11281 = !DILocation(line: 2734, column: 5, scope: !11277)
!11282 = !DILocation(line: 2735, column: 23, scope: !11265)
!11283 = !DILocation(line: 2735, column: 37, scope: !11265)
!11284 = !DILocation(line: 2735, column: 10, scope: !11265)
!11285 = !DILocation(line: 2735, column: 3, scope: !11265)
!11286 = !DILocation(line: 2736, column: 1, scope: !11265)
!11287 = distinct !DISubprogram(name: "free_transformed_insns", scope: !3, file: !3, line: 2740, type: !1324, scopeLine: 2741, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11288 = !DILocalVariable(name: "p", arg: 1, scope: !11287, file: !3, line: 2740, type: !962)
!11289 = !DILocation(line: 2740, column: 31, scope: !11287)
!11290 = !DILocalVariable(name: "pti", scope: !11287, file: !3, line: 2742, type: !2251)
!11291 = !DILocation(line: 2742, column: 29, scope: !11287)
!11292 = !DILocation(line: 2742, column: 64, scope: !11287)
!11293 = !DILocation(line: 2742, column: 35, scope: !11287)
!11294 = !DILocation(line: 2744, column: 17, scope: !11287)
!11295 = !DILocation(line: 2744, column: 22, scope: !11287)
!11296 = !DILocation(line: 2744, column: 3, scope: !11287)
!11297 = !DILocation(line: 2745, column: 17, scope: !11287)
!11298 = !DILocation(line: 2745, column: 22, scope: !11287)
!11299 = !DILocation(line: 2745, column: 3, scope: !11287)
!11300 = !DILocation(line: 2746, column: 9, scope: !11287)
!11301 = !DILocation(line: 2746, column: 3, scope: !11287)
!11302 = !DILocation(line: 2747, column: 1, scope: !11287)
!11303 = distinct !DISubprogram(name: "free_first_time_insn_data", scope: !3, file: !3, line: 2801, type: !3100, scopeLine: 2802, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11304 = !DILocalVariable(name: "insn", arg: 1, scope: !11303, file: !3, line: 2801, type: !2104)
!11305 = !DILocation(line: 2801, column: 35, scope: !11303)
!11306 = !DILocation(line: 2803, column: 3, scope: !11303)
!11307 = !DILocation(line: 2805, column: 33, scope: !11303)
!11308 = !DILocation(line: 2805, column: 3, scope: !11303)
!11309 = !DILocation(line: 2806, column: 26, scope: !11303)
!11310 = !DILocation(line: 2806, column: 3, scope: !11303)
!11311 = !DILocation(line: 2807, column: 3, scope: !11303)
!11312 = !DILocation(line: 2807, column: 20, scope: !11303)
!11313 = !DILocation(line: 2808, column: 3, scope: !11303)
!11314 = !DILocation(line: 2808, column: 28, scope: !11303)
!11315 = !DILocation(line: 2809, column: 1, scope: !11303)
!11316 = distinct !DISubprogram(name: "has_dependence_start_insn", scope: !3, file: !3, line: 3004, type: !3100, scopeLine: 3005, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11317 = !DILocalVariable(name: "insn", arg: 1, scope: !11316, file: !3, line: 3004, type: !2104)
!11318 = !DILocation(line: 3004, column: 35, scope: !11316)
!11319 = !DILocation(line: 3006, column: 3, scope: !11316)
!11320 = !DILocation(line: 3008, column: 29, scope: !11316)
!11321 = !DILocation(line: 3009, column: 1, scope: !11316)
!11322 = distinct !DISubprogram(name: "has_dependence_finish_insn", scope: !3, file: !3, line: 3013, type: !2608, scopeLine: 3014, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11323 = !DILocation(line: 3015, column: 3, scope: !11322)
!11324 = !DILocation(line: 3017, column: 29, scope: !11322)
!11325 = !DILocation(line: 3018, column: 1, scope: !11322)
!11326 = distinct !DISubprogram(name: "has_dependence_start_lhs", scope: !3, file: !3, line: 3022, type: !2604, scopeLine: 3023, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11327 = !DILocalVariable(name: "lhs", arg: 1, scope: !11326, file: !3, line: 3022, type: !850)
!11328 = !DILocation(line: 3022, column: 31, scope: !11326)
!11329 = !DILocation(line: 3024, column: 3, scope: !11326)
!11330 = !DILocation(line: 3026, column: 7, scope: !11331)
!11331 = distinct !DILexicalBlock(scope: !11326, file: !3, line: 3026, column: 7)
!11332 = !DILocation(line: 3026, column: 43, scope: !11331)
!11333 = !DILocation(line: 3026, column: 7, scope: !11326)
!11334 = !DILocation(line: 3027, column: 31, scope: !11331)
!11335 = !DILocation(line: 3027, column: 5, scope: !11331)
!11336 = !DILocation(line: 3028, column: 1, scope: !11326)
!11337 = distinct !DISubprogram(name: "has_dependence_finish_lhs", scope: !3, file: !3, line: 3032, type: !2608, scopeLine: 3033, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11338 = !DILocation(line: 3034, column: 29, scope: !11337)
!11339 = !DILocation(line: 3035, column: 1, scope: !11337)
!11340 = distinct !DISubprogram(name: "has_dependence_start_rhs", scope: !3, file: !3, line: 3039, type: !2604, scopeLine: 3040, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11341 = !DILocalVariable(name: "rhs", arg: 1, scope: !11340, file: !3, line: 3039, type: !850)
!11342 = !DILocation(line: 3039, column: 31, scope: !11340)
!11343 = !DILocation(line: 3041, column: 3, scope: !11340)
!11344 = !DILocation(line: 3043, column: 7, scope: !11345)
!11345 = distinct !DILexicalBlock(scope: !11340, file: !3, line: 3043, column: 7)
!11346 = !DILocation(line: 3043, column: 43, scope: !11345)
!11347 = !DILocation(line: 3043, column: 7, scope: !11340)
!11348 = !DILocation(line: 3044, column: 31, scope: !11345)
!11349 = !DILocation(line: 3044, column: 5, scope: !11345)
!11350 = !DILocation(line: 3045, column: 1, scope: !11340)
!11351 = distinct !DISubprogram(name: "has_dependence_finish_rhs", scope: !3, file: !3, line: 3049, type: !2608, scopeLine: 3050, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11352 = !DILocation(line: 3051, column: 3, scope: !11351)
!11353 = !DILocation(line: 3054, column: 29, scope: !11351)
!11354 = !DILocation(line: 3055, column: 1, scope: !11351)
!11355 = distinct !DISubprogram(name: "has_dependence_note_reg_set", scope: !3, file: !3, line: 3059, type: !2616, scopeLine: 3060, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11356 = !DILocalVariable(name: "regno", arg: 1, scope: !11355, file: !3, line: 3059, type: !874)
!11357 = !DILocation(line: 3059, column: 34, scope: !11355)
!11358 = !DILocalVariable(name: "reg_last", scope: !11355, file: !3, line: 3061, type: !2131)
!11359 = !DILocation(line: 3061, column: 20, scope: !11355)
!11360 = !DILocation(line: 3061, column: 52, scope: !11355)
!11361 = !DILocation(line: 3061, column: 56, scope: !11355)
!11362 = !DILocation(line: 3061, column: 65, scope: !11355)
!11363 = !DILocation(line: 3061, column: 32, scope: !11355)
!11364 = !DILocation(line: 3063, column: 60, scope: !11365)
!11365 = distinct !DILexicalBlock(scope: !11355, file: !3, line: 3063, column: 7)
!11366 = !DILocation(line: 3064, column: 12, scope: !11365)
!11367 = !DILocation(line: 3063, column: 8, scope: !11365)
!11368 = !DILocation(line: 3063, column: 7, scope: !11355)
!11369 = !DILocalVariable(name: "dsp", scope: !11370, file: !3, line: 3067, type: !7206)
!11370 = distinct !DILexicalBlock(scope: !11365, file: !3, line: 3066, column: 5)
!11371 = !DILocation(line: 3067, column: 13, scope: !11370)
!11372 = !DILocation(line: 3067, column: 70, scope: !11370)
!11373 = !DILocation(line: 3067, column: 20, scope: !11370)
!11374 = !DILocation(line: 3069, column: 11, scope: !11375)
!11375 = distinct !DILexicalBlock(scope: !11370, file: !3, line: 3069, column: 11)
!11376 = !DILocation(line: 3069, column: 21, scope: !11375)
!11377 = !DILocation(line: 3069, column: 26, scope: !11375)
!11378 = !DILocation(line: 3070, column: 4, scope: !11375)
!11379 = !DILocation(line: 3070, column: 7, scope: !11375)
!11380 = !DILocation(line: 3070, column: 17, scope: !11375)
!11381 = !DILocation(line: 3070, column: 26, scope: !11375)
!11382 = !DILocation(line: 3069, column: 11, scope: !11370)
!11383 = !DILocation(line: 3071, column: 11, scope: !11375)
!11384 = !DILocation(line: 3071, column: 10, scope: !11375)
!11385 = !DILocation(line: 3071, column: 15, scope: !11375)
!11386 = !DILocation(line: 3071, column: 31, scope: !11375)
!11387 = !DILocation(line: 3071, column: 3, scope: !11375)
!11388 = !DILocation(line: 3071, column: 7, scope: !11375)
!11389 = !DILocation(line: 3071, column: 2, scope: !11375)
!11390 = !DILocation(line: 3073, column: 11, scope: !11391)
!11391 = distinct !DILexicalBlock(scope: !11370, file: !3, line: 3073, column: 11)
!11392 = !DILocation(line: 3073, column: 21, scope: !11391)
!11393 = !DILocation(line: 3073, column: 11, scope: !11370)
!11394 = !DILocation(line: 3074, column: 11, scope: !11391)
!11395 = !DILocation(line: 3074, column: 10, scope: !11391)
!11396 = !DILocation(line: 3074, column: 15, scope: !11391)
!11397 = !DILocation(line: 3074, column: 31, scope: !11391)
!11398 = !DILocation(line: 3074, column: 3, scope: !11391)
!11399 = !DILocation(line: 3074, column: 7, scope: !11391)
!11400 = !DILocation(line: 3074, column: 2, scope: !11391)
!11401 = !DILocation(line: 3075, column: 5, scope: !11370)
!11402 = !DILocation(line: 3076, column: 1, scope: !11355)
!11403 = distinct !DISubprogram(name: "has_dependence_note_reg_clobber", scope: !3, file: !3, line: 3080, type: !2616, scopeLine: 3081, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11404 = !DILocalVariable(name: "regno", arg: 1, scope: !11403, file: !3, line: 3080, type: !874)
!11405 = !DILocation(line: 3080, column: 38, scope: !11403)
!11406 = !DILocalVariable(name: "reg_last", scope: !11403, file: !3, line: 3082, type: !2131)
!11407 = !DILocation(line: 3082, column: 20, scope: !11403)
!11408 = !DILocation(line: 3082, column: 52, scope: !11403)
!11409 = !DILocation(line: 3082, column: 56, scope: !11403)
!11410 = !DILocation(line: 3082, column: 65, scope: !11403)
!11411 = !DILocation(line: 3082, column: 32, scope: !11403)
!11412 = !DILocation(line: 3084, column: 60, scope: !11413)
!11413 = distinct !DILexicalBlock(scope: !11403, file: !3, line: 3084, column: 7)
!11414 = !DILocation(line: 3085, column: 12, scope: !11413)
!11415 = !DILocation(line: 3084, column: 8, scope: !11413)
!11416 = !DILocation(line: 3084, column: 7, scope: !11403)
!11417 = !DILocalVariable(name: "dsp", scope: !11418, file: !3, line: 3088, type: !7206)
!11418 = distinct !DILexicalBlock(scope: !11413, file: !3, line: 3087, column: 5)
!11419 = !DILocation(line: 3088, column: 13, scope: !11418)
!11420 = !DILocation(line: 3088, column: 70, scope: !11418)
!11421 = !DILocation(line: 3088, column: 20, scope: !11418)
!11422 = !DILocation(line: 3090, column: 11, scope: !11423)
!11423 = distinct !DILexicalBlock(scope: !11418, file: !3, line: 3090, column: 11)
!11424 = !DILocation(line: 3090, column: 21, scope: !11423)
!11425 = !DILocation(line: 3090, column: 11, scope: !11418)
!11426 = !DILocation(line: 3091, column: 11, scope: !11423)
!11427 = !DILocation(line: 3091, column: 10, scope: !11423)
!11428 = !DILocation(line: 3091, column: 15, scope: !11423)
!11429 = !DILocation(line: 3091, column: 31, scope: !11423)
!11430 = !DILocation(line: 3091, column: 3, scope: !11423)
!11431 = !DILocation(line: 3091, column: 7, scope: !11423)
!11432 = !DILocation(line: 3091, column: 2, scope: !11423)
!11433 = !DILocation(line: 3093, column: 11, scope: !11434)
!11434 = distinct !DILexicalBlock(scope: !11418, file: !3, line: 3093, column: 11)
!11435 = !DILocation(line: 3093, column: 21, scope: !11434)
!11436 = !DILocation(line: 3093, column: 11, scope: !11418)
!11437 = !DILocation(line: 3094, column: 11, scope: !11434)
!11438 = !DILocation(line: 3094, column: 10, scope: !11434)
!11439 = !DILocation(line: 3094, column: 15, scope: !11434)
!11440 = !DILocation(line: 3094, column: 31, scope: !11434)
!11441 = !DILocation(line: 3094, column: 3, scope: !11434)
!11442 = !DILocation(line: 3094, column: 7, scope: !11434)
!11443 = !DILocation(line: 3094, column: 2, scope: !11434)
!11444 = !DILocation(line: 3095, column: 5, scope: !11418)
!11445 = !DILocation(line: 3096, column: 1, scope: !11403)
!11446 = distinct !DISubprogram(name: "has_dependence_note_reg_use", scope: !3, file: !3, line: 3100, type: !2616, scopeLine: 3101, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11447 = !DILocalVariable(name: "regno", arg: 1, scope: !11446, file: !3, line: 3100, type: !874)
!11448 = !DILocation(line: 3100, column: 34, scope: !11446)
!11449 = !DILocalVariable(name: "reg_last", scope: !11446, file: !3, line: 3102, type: !2131)
!11450 = !DILocation(line: 3102, column: 20, scope: !11446)
!11451 = !DILocation(line: 3102, column: 52, scope: !11446)
!11452 = !DILocation(line: 3102, column: 56, scope: !11446)
!11453 = !DILocation(line: 3102, column: 65, scope: !11446)
!11454 = !DILocation(line: 3102, column: 32, scope: !11446)
!11455 = !DILocation(line: 3104, column: 60, scope: !11456)
!11456 = distinct !DILexicalBlock(scope: !11446, file: !3, line: 3104, column: 7)
!11457 = !DILocation(line: 3105, column: 12, scope: !11456)
!11458 = !DILocation(line: 3104, column: 8, scope: !11456)
!11459 = !DILocation(line: 3104, column: 7, scope: !11446)
!11460 = !DILocalVariable(name: "dsp", scope: !11461, file: !3, line: 3108, type: !7206)
!11461 = distinct !DILexicalBlock(scope: !11456, file: !3, line: 3107, column: 5)
!11462 = !DILocation(line: 3108, column: 13, scope: !11461)
!11463 = !DILocation(line: 3108, column: 70, scope: !11461)
!11464 = !DILocation(line: 3108, column: 20, scope: !11461)
!11465 = !DILocation(line: 3110, column: 11, scope: !11466)
!11466 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 3110, column: 11)
!11467 = !DILocation(line: 3110, column: 21, scope: !11466)
!11468 = !DILocation(line: 3110, column: 11, scope: !11461)
!11469 = !DILocation(line: 3111, column: 11, scope: !11466)
!11470 = !DILocation(line: 3111, column: 10, scope: !11466)
!11471 = !DILocation(line: 3111, column: 15, scope: !11466)
!11472 = !DILocation(line: 3111, column: 31, scope: !11466)
!11473 = !DILocation(line: 3111, column: 3, scope: !11466)
!11474 = !DILocation(line: 3111, column: 7, scope: !11466)
!11475 = !DILocation(line: 3111, column: 2, scope: !11466)
!11476 = !DILocation(line: 3113, column: 11, scope: !11477)
!11477 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 3113, column: 11)
!11478 = !DILocation(line: 3113, column: 21, scope: !11477)
!11479 = !DILocation(line: 3113, column: 11, scope: !11461)
!11480 = !DILocation(line: 3114, column: 11, scope: !11477)
!11481 = !DILocation(line: 3114, column: 10, scope: !11477)
!11482 = !DILocation(line: 3114, column: 15, scope: !11477)
!11483 = !DILocation(line: 3114, column: 31, scope: !11477)
!11484 = !DILocation(line: 3114, column: 3, scope: !11477)
!11485 = !DILocation(line: 3114, column: 7, scope: !11477)
!11486 = !DILocation(line: 3114, column: 2, scope: !11477)
!11487 = !DILocation(line: 3117, column: 11, scope: !11488)
!11488 = distinct !DILexicalBlock(scope: !11461, file: !3, line: 3117, column: 11)
!11489 = !DILocation(line: 3117, column: 21, scope: !11488)
!11490 = !DILocation(line: 3117, column: 11, scope: !11461)
!11491 = !DILocalVariable(name: "pro_spec_checked_ds", scope: !11492, file: !3, line: 3119, type: !2056)
!11492 = distinct !DILexicalBlock(scope: !11488, file: !3, line: 3118, column: 2)
!11493 = !DILocation(line: 3119, column: 9, scope: !11492)
!11494 = !DILocation(line: 3121, column: 26, scope: !11492)
!11495 = !DILocation(line: 3121, column: 24, scope: !11492)
!11496 = !DILocation(line: 3122, column: 47, scope: !11492)
!11497 = !DILocation(line: 3122, column: 26, scope: !11492)
!11498 = !DILocation(line: 3122, column: 24, scope: !11492)
!11499 = !DILocation(line: 3124, column: 8, scope: !11500)
!11500 = distinct !DILexicalBlock(scope: !11492, file: !3, line: 3124, column: 8)
!11501 = !DILocation(line: 3124, column: 28, scope: !11500)
!11502 = !DILocation(line: 3124, column: 8, scope: !11492)
!11503 = !DILocation(line: 3126, column: 29, scope: !11500)
!11504 = !DILocation(line: 3126, column: 28, scope: !11500)
!11505 = !DILocation(line: 3126, column: 34, scope: !11500)
!11506 = !DILocation(line: 3126, column: 13, scope: !11500)
!11507 = !DILocation(line: 3126, column: 7, scope: !11500)
!11508 = !DILocation(line: 3126, column: 11, scope: !11500)
!11509 = !DILocation(line: 3126, column: 6, scope: !11500)
!11510 = !DILocation(line: 3128, column: 2, scope: !11492)
!11511 = !DILocation(line: 3129, column: 5, scope: !11461)
!11512 = !DILocation(line: 3130, column: 1, scope: !11446)
!11513 = distinct !DISubprogram(name: "has_dependence_note_mem_dep", scope: !3, file: !3, line: 3134, type: !11514, scopeLine: 3138, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11514 = !DISubroutineType(types: !11515)
!11515 = !{null, !850, !850, !2104, !2056}
!11516 = !DILocalVariable(name: "mem", arg: 1, scope: !11513, file: !3, line: 3134, type: !850)
!11517 = !DILocation(line: 3134, column: 34, scope: !11513)
!11518 = !DILocalVariable(name: "pending_mem", arg: 2, scope: !11513, file: !3, line: 3135, type: !850)
!11519 = !DILocation(line: 3135, column: 13, scope: !11513)
!11520 = !DILocalVariable(name: "pending_insn", arg: 3, scope: !11513, file: !3, line: 3136, type: !2104)
!11521 = !DILocation(line: 3136, column: 16, scope: !11513)
!11522 = !DILocalVariable(name: "ds", arg: 4, scope: !11513, file: !3, line: 3137, type: !2056)
!11523 = !DILocation(line: 3137, column: 14, scope: !11513)
!11524 = !DILocation(line: 3139, column: 60, scope: !11525)
!11525 = distinct !DILexicalBlock(scope: !11513, file: !3, line: 3139, column: 7)
!11526 = !DILocation(line: 3140, column: 12, scope: !11525)
!11527 = !DILocation(line: 3139, column: 8, scope: !11525)
!11528 = !DILocation(line: 3139, column: 7, scope: !11513)
!11529 = !DILocalVariable(name: "dsp", scope: !11530, file: !3, line: 3142, type: !7206)
!11530 = distinct !DILexicalBlock(scope: !11525, file: !3, line: 3141, column: 5)
!11531 = !DILocation(line: 3142, column: 13, scope: !11530)
!11532 = !DILocation(line: 3142, column: 70, scope: !11530)
!11533 = !DILocation(line: 3142, column: 20, scope: !11530)
!11534 = !DILocation(line: 3144, column: 29, scope: !11530)
!11535 = !DILocation(line: 3144, column: 34, scope: !11530)
!11536 = !DILocation(line: 3144, column: 33, scope: !11530)
!11537 = !DILocation(line: 3144, column: 39, scope: !11530)
!11538 = !DILocation(line: 3144, column: 52, scope: !11530)
!11539 = !DILocation(line: 3144, column: 14, scope: !11530)
!11540 = !DILocation(line: 3144, column: 8, scope: !11530)
!11541 = !DILocation(line: 3144, column: 12, scope: !11530)
!11542 = !DILocation(line: 3145, column: 5, scope: !11530)
!11543 = !DILocation(line: 3146, column: 1, scope: !11513)
!11544 = distinct !DISubprogram(name: "has_dependence_note_dep", scope: !3, file: !3, line: 3150, type: !11545, scopeLine: 3152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11545 = !DISubroutineType(types: !11546)
!11546 = !{null, !2104, !2056}
!11547 = !DILocalVariable(name: "pro", arg: 1, scope: !11544, file: !3, line: 3150, type: !2104)
!11548 = !DILocation(line: 3150, column: 33, scope: !11544)
!11549 = !DILocalVariable(name: "ds", arg: 2, scope: !11544, file: !3, line: 3151, type: !2056)
!11550 = !DILocation(line: 3151, column: 10, scope: !11544)
!11551 = !DILocation(line: 3153, column: 60, scope: !11552)
!11552 = distinct !DILexicalBlock(scope: !11544, file: !3, line: 3153, column: 7)
!11553 = !DILocation(line: 3154, column: 12, scope: !11552)
!11554 = !DILocation(line: 3153, column: 8, scope: !11552)
!11555 = !DILocation(line: 3153, column: 7, scope: !11544)
!11556 = !DILocalVariable(name: "dsp", scope: !11557, file: !3, line: 3156, type: !7206)
!11557 = distinct !DILexicalBlock(scope: !11552, file: !3, line: 3155, column: 5)
!11558 = !DILocation(line: 3156, column: 13, scope: !11557)
!11559 = !DILocation(line: 3156, column: 70, scope: !11557)
!11560 = !DILocation(line: 3156, column: 20, scope: !11557)
!11561 = !DILocation(line: 3158, column: 29, scope: !11557)
!11562 = !DILocation(line: 3158, column: 34, scope: !11557)
!11563 = !DILocation(line: 3158, column: 33, scope: !11557)
!11564 = !DILocation(line: 3158, column: 14, scope: !11557)
!11565 = !DILocation(line: 3158, column: 8, scope: !11557)
!11566 = !DILocation(line: 3158, column: 12, scope: !11557)
!11567 = !DILocation(line: 3159, column: 5, scope: !11557)
!11568 = !DILocation(line: 3160, column: 1, scope: !11544)
!11569 = distinct !DISubprogram(name: "tick_check_note_mem_dep", scope: !3, file: !3, line: 3365, type: !11514, scopeLine: 3366, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11570 = !DILocalVariable(name: "mem1", arg: 1, scope: !11569, file: !3, line: 3365, type: !850)
!11571 = !DILocation(line: 3365, column: 30, scope: !11569)
!11572 = !DILocalVariable(name: "mem2", arg: 2, scope: !11569, file: !3, line: 3365, type: !850)
!11573 = !DILocation(line: 3365, column: 40, scope: !11569)
!11574 = !DILocalVariable(name: "pro", arg: 3, scope: !11569, file: !3, line: 3365, type: !2104)
!11575 = !DILocation(line: 3365, column: 53, scope: !11569)
!11576 = !DILocalVariable(name: "ds", arg: 4, scope: !11569, file: !3, line: 3365, type: !2056)
!11577 = !DILocation(line: 3365, column: 63, scope: !11569)
!11578 = !DILocalVariable(name: "dw", scope: !11569, file: !3, line: 3367, type: !11579)
!11579 = !DIDerivedType(tag: DW_TAG_typedef, name: "dw_t", file: !398, line: 221, baseType: !874)
!11580 = !DILocation(line: 3367, column: 8, scope: !11569)
!11581 = !DILocation(line: 3369, column: 19, scope: !11569)
!11582 = !DILocation(line: 3369, column: 9, scope: !11569)
!11583 = !DILocation(line: 3369, column: 23, scope: !11569)
!11584 = !DILocation(line: 3370, column: 30, scope: !11569)
!11585 = !DILocation(line: 3370, column: 36, scope: !11569)
!11586 = !DILocation(line: 3370, column: 11, scope: !11569)
!11587 = !DILocation(line: 3369, column: 6, scope: !11569)
!11588 = !DILocation(line: 3373, column: 27, scope: !11569)
!11589 = !DILocation(line: 3373, column: 32, scope: !11569)
!11590 = !DILocation(line: 3373, column: 36, scope: !11569)
!11591 = !DILocation(line: 3373, column: 3, scope: !11569)
!11592 = !DILocation(line: 3374, column: 1, scope: !11569)
!11593 = distinct !DISubprogram(name: "tick_check_note_dep", scope: !3, file: !3, line: 3358, type: !11545, scopeLine: 3359, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11594 = !DILocalVariable(name: "pro", arg: 1, scope: !11593, file: !3, line: 3358, type: !2104)
!11595 = !DILocation(line: 3358, column: 29, scope: !11593)
!11596 = !DILocalVariable(name: "ds", arg: 2, scope: !11593, file: !3, line: 3358, type: !2056)
!11597 = !DILocation(line: 3358, column: 39, scope: !11593)
!11598 = !DILocation(line: 3360, column: 27, scope: !11593)
!11599 = !DILocation(line: 3360, column: 32, scope: !11593)
!11600 = !DILocation(line: 3360, column: 3, scope: !11593)
!11601 = !DILocation(line: 3361, column: 1, scope: !11593)
!11602 = distinct !DISubprogram(name: "tick_check_dep_with_dw", scope: !3, file: !3, line: 3315, type: !11603, scopeLine: 3316, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11603 = !DISubroutineType(types: !11604)
!11604 = !{null, !2104, !2056, !11579}
!11605 = !DILocalVariable(name: "pro_insn", arg: 1, scope: !11602, file: !3, line: 3315, type: !2104)
!11606 = !DILocation(line: 3315, column: 32, scope: !11602)
!11607 = !DILocalVariable(name: "ds", arg: 2, scope: !11602, file: !3, line: 3315, type: !2056)
!11608 = !DILocation(line: 3315, column: 47, scope: !11602)
!11609 = !DILocalVariable(name: "dw", arg: 3, scope: !11602, file: !3, line: 3315, type: !11579)
!11610 = !DILocation(line: 3315, column: 56, scope: !11602)
!11611 = !DILocalVariable(name: "con_expr", scope: !11602, file: !3, line: 3317, type: !2578)
!11612 = !DILocation(line: 3317, column: 10, scope: !11602)
!11613 = !DILocation(line: 3317, column: 37, scope: !11602)
!11614 = !DILocalVariable(name: "con_insn", scope: !11602, file: !3, line: 3318, type: !2104)
!11615 = !DILocation(line: 3318, column: 10, scope: !11602)
!11616 = !DILocation(line: 3318, column: 21, scope: !11602)
!11617 = !DILocation(line: 3320, column: 7, scope: !11618)
!11618 = distinct !DILexicalBlock(scope: !11602, file: !3, line: 3320, column: 7)
!11619 = !DILocation(line: 3320, column: 19, scope: !11618)
!11620 = !DILocation(line: 3320, column: 16, scope: !11618)
!11621 = !DILocation(line: 3320, column: 7, scope: !11602)
!11622 = !DILocalVariable(name: "dt", scope: !11623, file: !3, line: 3322, type: !761)
!11623 = distinct !DILexicalBlock(scope: !11618, file: !3, line: 3321, column: 5)
!11624 = !DILocation(line: 3322, column: 21, scope: !11623)
!11625 = !DILocalVariable(name: "tick", scope: !11623, file: !3, line: 3323, type: !874)
!11626 = !DILocation(line: 3323, column: 11, scope: !11623)
!11627 = !DILocation(line: 3326, column: 5, scope: !11628)
!11628 = distinct !DILexicalBlock(scope: !11623, file: !3, line: 3326, column: 4)
!11629 = !DILocation(line: 3329, column: 4, scope: !11628)
!11630 = !DILocation(line: 3329, column: 8, scope: !11628)
!11631 = !DILocation(line: 3330, column: 10, scope: !11628)
!11632 = !DILocation(line: 3330, column: 8, scope: !11628)
!11633 = !DILocation(line: 3330, column: 39, scope: !11628)
!11634 = !DILocation(line: 3326, column: 4, scope: !11623)
!11635 = !DILocation(line: 3332, column: 9, scope: !11628)
!11636 = !DILocation(line: 3334, column: 22, scope: !11623)
!11637 = !DILocation(line: 3334, column: 12, scope: !11623)
!11638 = !DILocation(line: 3334, column: 10, scope: !11623)
!11639 = !DILocation(line: 3335, column: 11, scope: !11640)
!11640 = distinct !DILexicalBlock(scope: !11623, file: !3, line: 3335, column: 11)
!11641 = !DILocation(line: 3335, column: 14, scope: !11640)
!11642 = !DILocation(line: 3335, column: 11, scope: !11623)
!11643 = !DILocation(line: 3336, column: 41, scope: !11640)
!11644 = !DILocation(line: 3336, column: 9, scope: !11640)
!11645 = !DILocation(line: 3338, column: 7, scope: !11623)
!11646 = !DILocalVariable(name: "_dep", scope: !11647, file: !3, line: 3341, type: !11648)
!11647 = distinct !DILexicalBlock(scope: !11623, file: !3, line: 3340, column: 7)
!11648 = !DIDerivedType(tag: DW_TAG_typedef, name: "dep_def", file: !398, line: 244, baseType: !4799)
!11649 = !DILocation(line: 3341, column: 10, scope: !11647)
!11650 = !DILocalVariable(name: "dep", scope: !11647, file: !3, line: 3341, type: !11651)
!11651 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11648, size: 64)
!11652 = !DILocation(line: 3341, column: 17, scope: !11647)
!11653 = !DILocation(line: 3343, column: 12, scope: !11647)
!11654 = !DILocation(line: 3343, column: 17, scope: !11647)
!11655 = !DILocation(line: 3343, column: 27, scope: !11647)
!11656 = !DILocation(line: 3343, column: 37, scope: !11647)
!11657 = !DILocation(line: 3343, column: 2, scope: !11647)
!11658 = !DILocation(line: 3345, column: 9, scope: !11647)
!11659 = !DILocation(line: 3345, column: 51, scope: !11647)
!11660 = !DILocation(line: 3345, column: 56, scope: !11647)
!11661 = !DILocation(line: 3345, column: 39, scope: !11647)
!11662 = !DILocation(line: 3345, column: 37, scope: !11647)
!11663 = !DILocation(line: 3345, column: 7, scope: !11647)
!11664 = !DILocation(line: 3350, column: 11, scope: !11665)
!11665 = distinct !DILexicalBlock(scope: !11623, file: !3, line: 3350, column: 11)
!11666 = !DILocation(line: 3350, column: 34, scope: !11665)
!11667 = !DILocation(line: 3350, column: 16, scope: !11665)
!11668 = !DILocation(line: 3351, column: 4, scope: !11665)
!11669 = !DILocation(line: 3351, column: 8, scope: !11665)
!11670 = !DILocation(line: 3351, column: 11, scope: !11665)
!11671 = !DILocation(line: 3351, column: 27, scope: !11665)
!11672 = !DILocation(line: 3351, column: 47, scope: !11665)
!11673 = !DILocation(line: 3351, column: 31, scope: !11665)
!11674 = !DILocation(line: 3350, column: 11, scope: !11623)
!11675 = !DILocation(line: 3352, column: 26, scope: !11665)
!11676 = !DILocation(line: 3352, column: 24, scope: !11665)
!11677 = !DILocation(line: 3352, column: 2, scope: !11665)
!11678 = !DILocation(line: 3353, column: 5, scope: !11623)
!11679 = !DILocation(line: 3354, column: 1, scope: !11602)
!11680 = distinct !DISubprogram(name: "single_pred_edge", scope: !155, file: !155, line: 653, type: !11681, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11681 = !DISubroutineType(types: !11682)
!11682 = !{!1408, !2498}
!11683 = !DILocalVariable(name: "bb", arg: 1, scope: !11680, file: !155, line: 653, type: !2498)
!11684 = !DILocation(line: 653, column: 37, scope: !11680)
!11685 = !DILocation(line: 655, column: 3, scope: !11680)
!11686 = !DILocation(line: 656, column: 10, scope: !11680)
!11687 = !DILocation(line: 656, column: 3, scope: !11680)
!11688 = distinct !DISubprogram(name: "single_succ_edge", scope: !155, file: !155, line: 643, type: !11681, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11689 = !DILocalVariable(name: "bb", arg: 1, scope: !11688, file: !155, line: 643, type: !2498)
!11690 = !DILocation(line: 643, column: 37, scope: !11688)
!11691 = !DILocation(line: 645, column: 3, scope: !11688)
!11692 = !DILocation(line: 646, column: 10, scope: !11688)
!11693 = !DILocation(line: 646, column: 3, scope: !11688)
!11694 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_base_length", scope: !409, file: !409, line: 888, type: !11695, scopeLine: 888, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11695 = !DISubroutineType(types: !11696)
!11696 = !{!7, !11697}
!11697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11698, size: 64)
!11698 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2257)
!11699 = !DILocalVariable(name: "vec_", arg: 1, scope: !11694, file: !409, line: 888, type: !11697)
!11700 = !DILocation(line: 888, column: 1, scope: !11694)
!11701 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_heap_safe_grow", scope: !409, file: !409, line: 889, type: !8173, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11702 = !DILocalVariable(name: "vec_", arg: 1, scope: !11701, file: !409, line: 889, type: !8175)
!11703 = !DILocation(line: 889, column: 1, scope: !11701)
!11704 = !DILocalVariable(name: "size_", arg: 2, scope: !11701, file: !409, line: 889, type: !874)
!11705 = !DILocation(line: 0, scope: !11701)
!11706 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_base_address", scope: !409, file: !409, line: 888, type: !11707, scopeLine: 888, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11707 = !DISubroutineType(types: !11708)
!11708 = !{!8246, !8247}
!11709 = !DILocalVariable(name: "vec_", arg: 1, scope: !11706, file: !409, line: 888, type: !8247)
!11710 = !DILocation(line: 888, column: 1, scope: !11706)
!11711 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_heap_reserve_exact", scope: !409, file: !409, line: 889, type: !11712, scopeLine: 889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11712 = !DISubroutineType(types: !11713)
!11713 = !{!874, !8175, !874}
!11714 = !DILocalVariable(name: "vec_", arg: 1, scope: !11711, file: !409, line: 889, type: !8175)
!11715 = !DILocation(line: 889, column: 1, scope: !11711)
!11716 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11711, file: !409, line: 889, type: !874)
!11717 = !DILocalVariable(name: "extend", scope: !11711, file: !409, line: 889, type: !874)
!11718 = !DILocation(line: 889, column: 1, scope: !11719)
!11719 = distinct !DILexicalBlock(scope: !11711, file: !409, line: 889, column: 1)
!11720 = distinct !DISubprogram(name: "VEC_sel_global_bb_info_def_base_space", scope: !409, file: !409, line: 888, type: !11721, scopeLine: 888, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11721 = !DISubroutineType(types: !11722)
!11722 = !{!874, !8247, !874}
!11723 = !DILocalVariable(name: "vec_", arg: 1, scope: !11720, file: !409, line: 888, type: !8247)
!11724 = !DILocation(line: 888, column: 1, scope: !11720)
!11725 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11720, file: !409, line: 888, type: !874)
!11726 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_base_length", scope: !409, file: !409, line: 762, type: !11727, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11727 = !DISubroutineType(types: !11728)
!11728 = !{!7, !11729}
!11729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11730, size: 64)
!11730 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2274)
!11731 = !DILocalVariable(name: "vec_", arg: 1, scope: !11726, file: !409, line: 762, type: !11729)
!11732 = !DILocation(line: 762, column: 1, scope: !11726)
!11733 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_base_space", scope: !409, file: !409, line: 762, type: !11734, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11734 = !DISubroutineType(types: !11735)
!11735 = !{!874, !4366, !874}
!11736 = !DILocalVariable(name: "vec_", arg: 1, scope: !11733, file: !409, line: 762, type: !4366)
!11737 = !DILocation(line: 762, column: 1, scope: !11733)
!11738 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11733, file: !409, line: 762, type: !874)
!11739 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_heap_safe_grow_cleared", scope: !409, file: !409, line: 763, type: !11740, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11740 = !DISubroutineType(types: !11741)
!11741 = !{null, !11742, !874}
!11742 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2269, size: 64)
!11743 = !DILocalVariable(name: "vec_", arg: 1, scope: !11739, file: !409, line: 763, type: !11742)
!11744 = !DILocation(line: 763, column: 1, scope: !11739)
!11745 = !DILocalVariable(name: "size_", arg: 2, scope: !11739, file: !409, line: 763, type: !874)
!11746 = !DILocalVariable(name: "oldsize", scope: !11739, file: !409, line: 763, type: !874)
!11747 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_heap_safe_grow", scope: !409, file: !409, line: 763, type: !11740, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11748 = !DILocalVariable(name: "vec_", arg: 1, scope: !11747, file: !409, line: 763, type: !11742)
!11749 = !DILocation(line: 763, column: 1, scope: !11747)
!11750 = !DILocalVariable(name: "size_", arg: 2, scope: !11747, file: !409, line: 763, type: !874)
!11751 = !DILocation(line: 0, scope: !11747)
!11752 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_base_address", scope: !409, file: !409, line: 762, type: !11753, scopeLine: 762, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11753 = !DISubroutineType(types: !11754)
!11754 = !{!2668, !4366}
!11755 = !DILocalVariable(name: "vec_", arg: 1, scope: !11752, file: !409, line: 762, type: !4366)
!11756 = !DILocation(line: 762, column: 1, scope: !11752)
!11757 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_heap_reserve_exact", scope: !409, file: !409, line: 763, type: !11758, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11758 = !DISubroutineType(types: !11759)
!11759 = !{!874, !11742, !874}
!11760 = !DILocalVariable(name: "vec_", arg: 1, scope: !11757, file: !409, line: 763, type: !11742)
!11761 = !DILocation(line: 763, column: 1, scope: !11757)
!11762 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11757, file: !409, line: 763, type: !874)
!11763 = !DILocalVariable(name: "extend", scope: !11757, file: !409, line: 763, type: !874)
!11764 = !DILocation(line: 763, column: 1, scope: !11765)
!11765 = distinct !DILexicalBlock(scope: !11757, file: !409, line: 763, column: 1)
!11766 = distinct !DISubprogram(name: "VEC_sel_insn_data_def_heap_free", scope: !409, file: !409, line: 763, type: !11767, scopeLine: 763, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11767 = !DISubroutineType(types: !11768)
!11768 = !{null, !11742}
!11769 = !DILocalVariable(name: "vec_", arg: 1, scope: !11766, file: !409, line: 763, type: !11742)
!11770 = !DILocation(line: 763, column: 1, scope: !11766)
!11771 = !DILocation(line: 763, column: 1, scope: !11772)
!11772 = distinct !DILexicalBlock(scope: !11766, file: !409, line: 763, column: 1)
!11773 = distinct !DISubprogram(name: "insn_is_the_only_one_in_bb_p", scope: !3, file: !3, line: 3487, type: !6844, scopeLine: 3488, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11774 = !DILocalVariable(name: "insn", arg: 1, scope: !11773, file: !3, line: 3487, type: !2104)
!11775 = !DILocation(line: 3487, column: 38, scope: !11773)
!11776 = !DILocation(line: 3489, column: 25, scope: !11773)
!11777 = !DILocation(line: 3489, column: 10, scope: !11773)
!11778 = !DILocation(line: 3489, column: 31, scope: !11773)
!11779 = !DILocation(line: 3489, column: 48, scope: !11773)
!11780 = !DILocation(line: 3489, column: 34, scope: !11773)
!11781 = !DILocation(line: 0, scope: !11773)
!11782 = !DILocation(line: 3489, column: 3, scope: !11773)
!11783 = distinct !DISubprogram(name: "create_initial_data_sets", scope: !3, file: !3, line: 4163, type: !2478, scopeLine: 4164, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11784 = !DILocalVariable(name: "bb", arg: 1, scope: !11783, file: !3, line: 4163, type: !1391)
!11785 = !DILocation(line: 4163, column: 39, scope: !11783)
!11786 = !DILocation(line: 4165, column: 7, scope: !11787)
!11787 = distinct !DILexicalBlock(scope: !11783, file: !3, line: 4165, column: 7)
!11788 = !DILocation(line: 4165, column: 7, scope: !11783)
!11789 = !DILocation(line: 4166, column: 5, scope: !11787)
!11790 = !DILocation(line: 4166, column: 28, scope: !11787)
!11791 = !DILocation(line: 4168, column: 22, scope: !11787)
!11792 = !DILocation(line: 4168, column: 5, scope: !11787)
!11793 = !DILocation(line: 4168, column: 20, scope: !11787)
!11794 = !DILocation(line: 4169, column: 22, scope: !11783)
!11795 = !DILocation(line: 4169, column: 3, scope: !11783)
!11796 = !DILocation(line: 4170, column: 1, scope: !11783)
!11797 = distinct !DISubprogram(name: "init_insn_data", scope: !3, file: !3, line: 4018, type: !3100, scopeLine: 4019, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11798 = !DILocalVariable(name: "insn", arg: 1, scope: !11797, file: !3, line: 4018, type: !2104)
!11799 = !DILocation(line: 4018, column: 24, scope: !11797)
!11800 = !DILocalVariable(name: "expr", scope: !11797, file: !3, line: 4020, type: !2578)
!11801 = !DILocation(line: 4020, column: 10, scope: !11797)
!11802 = !DILocalVariable(name: "ssid", scope: !11797, file: !3, line: 4021, type: !2667)
!11803 = !DILocation(line: 4021, column: 19, scope: !11797)
!11804 = !DILocation(line: 4021, column: 26, scope: !11797)
!11805 = !DILocation(line: 4025, column: 3, scope: !11797)
!11806 = !DILocation(line: 4027, column: 3, scope: !11797)
!11807 = !DILocation(line: 4029, column: 10, scope: !11797)
!11808 = !DILocation(line: 4029, column: 8, scope: !11797)
!11809 = !DILocation(line: 4030, column: 14, scope: !11797)
!11810 = !DILocation(line: 4030, column: 21, scope: !11797)
!11811 = !DILocation(line: 4030, column: 27, scope: !11797)
!11812 = !DILocation(line: 4030, column: 3, scope: !11797)
!11813 = !DILocation(line: 4031, column: 22, scope: !11797)
!11814 = !DILocation(line: 4031, column: 28, scope: !11797)
!11815 = !DILocation(line: 4031, column: 34, scope: !11797)
!11816 = !DILocation(line: 4031, column: 3, scope: !11797)
!11817 = !DILocation(line: 4033, column: 7, scope: !11818)
!11818 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 4033, column: 7)
!11819 = !DILocation(line: 4033, column: 7, scope: !11797)
!11820 = !DILocation(line: 4034, column: 27, scope: !11818)
!11821 = !DILocation(line: 4034, column: 47, scope: !11818)
!11822 = !DILocation(line: 4034, column: 53, scope: !11818)
!11823 = !DILocation(line: 4034, column: 33, scope: !11818)
!11824 = !DILocation(line: 4034, column: 5, scope: !11818)
!11825 = !DILocation(line: 4036, column: 29, scope: !11826)
!11826 = distinct !DILexicalBlock(scope: !11797, file: !3, line: 4036, column: 7)
!11827 = !DILocation(line: 4036, column: 7, scope: !11826)
!11828 = !DILocation(line: 4036, column: 7, scope: !11797)
!11829 = !DILocation(line: 4037, column: 32, scope: !11826)
!11830 = !DILocation(line: 4037, column: 5, scope: !11826)
!11831 = !DILocation(line: 4038, column: 1, scope: !11797)
!11832 = distinct !DISubprogram(name: "init_simplejump_data", scope: !3, file: !3, line: 4043, type: !3100, scopeLine: 4044, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11833 = !DILocalVariable(name: "insn", arg: 1, scope: !11832, file: !3, line: 4043, type: !2104)
!11834 = !DILocation(line: 4043, column: 30, scope: !11832)
!11835 = !DILocation(line: 4045, column: 14, scope: !11832)
!11836 = !DILocation(line: 4045, column: 46, scope: !11832)
!11837 = !DILocation(line: 4045, column: 32, scope: !11832)
!11838 = !DILocation(line: 4045, column: 3, scope: !11832)
!11839 = !DILocation(line: 4048, column: 44, scope: !11832)
!11840 = !DILocation(line: 4048, column: 23, scope: !11832)
!11841 = !DILocation(line: 4048, column: 3, scope: !11832)
!11842 = !DILocation(line: 4048, column: 21, scope: !11832)
!11843 = !DILocation(line: 4049, column: 30, scope: !11832)
!11844 = !DILocation(line: 4049, column: 3, scope: !11832)
!11845 = !DILocation(line: 4050, column: 1, scope: !11832)
!11846 = distinct !DISubprogram(name: "get_seqno_of_a_pred", scope: !3, file: !3, line: 3808, type: !8381, scopeLine: 3809, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11847 = !DILocalVariable(name: "insn", arg: 1, scope: !11846, file: !3, line: 3808, type: !2104)
!11848 = !DILocation(line: 3808, column: 29, scope: !11846)
!11849 = !DILocalVariable(name: "seqno", scope: !11846, file: !3, line: 3810, type: !874)
!11850 = !DILocation(line: 3810, column: 7, scope: !11846)
!11851 = !DILocation(line: 3812, column: 3, scope: !11846)
!11852 = !DILocation(line: 3814, column: 23, scope: !11853)
!11853 = distinct !DILexicalBlock(scope: !11846, file: !3, line: 3814, column: 7)
!11854 = !DILocation(line: 3814, column: 8, scope: !11853)
!11855 = !DILocation(line: 3814, column: 7, scope: !11846)
!11856 = !DILocation(line: 3815, column: 13, scope: !11853)
!11857 = !DILocation(line: 3815, column: 11, scope: !11853)
!11858 = !DILocation(line: 3815, column: 5, scope: !11853)
!11859 = !DILocalVariable(name: "bb", scope: !11860, file: !3, line: 3818, type: !1391)
!11860 = distinct !DILexicalBlock(scope: !11853, file: !3, line: 3817, column: 5)
!11861 = !DILocation(line: 3818, column: 19, scope: !11860)
!11862 = !DILocation(line: 3818, column: 24, scope: !11860)
!11863 = !DILocation(line: 3820, column: 26, scope: !11864)
!11864 = distinct !DILexicalBlock(scope: !11860, file: !3, line: 3820, column: 11)
!11865 = !DILocation(line: 3820, column: 11, scope: !11864)
!11866 = !DILocation(line: 3821, column: 4, scope: !11864)
!11867 = !DILocation(line: 3821, column: 42, scope: !11864)
!11868 = !DILocation(line: 3821, column: 29, scope: !11864)
!11869 = !DILocation(line: 3821, column: 8, scope: !11864)
!11870 = !DILocation(line: 3820, column: 11, scope: !11860)
!11871 = !DILocalVariable(name: "succ", scope: !11872, file: !3, line: 3826, type: !2104)
!11872 = distinct !DILexicalBlock(scope: !11864, file: !3, line: 3822, column: 2)
!11873 = !DILocation(line: 3826, column: 11, scope: !11872)
!11874 = !DILocalVariable(name: "si", scope: !11872, file: !3, line: 3827, type: !3107)
!11875 = !DILocation(line: 3827, column: 25, scope: !11872)
!11876 = !DILocalVariable(name: "first", scope: !11872, file: !3, line: 3828, type: !1085)
!11877 = !DILocation(line: 3828, column: 16, scope: !11872)
!11878 = !DILocation(line: 3830, column: 4, scope: !11872)
!11879 = !DILocation(line: 3832, column: 11, scope: !11880)
!11880 = distinct !DILexicalBlock(scope: !11872, file: !3, line: 3832, column: 11)
!11881 = !DILocation(line: 3832, column: 11, scope: !11882)
!11882 = distinct !DILexicalBlock(scope: !11880, file: !3, line: 3832, column: 11)
!11883 = !DILocation(line: 3835, column: 15, scope: !11884)
!11884 = distinct !DILexicalBlock(scope: !11882, file: !3, line: 3834, column: 13)
!11885 = !DILocation(line: 3836, column: 21, scope: !11884)
!11886 = !DILocation(line: 3837, column: 13, scope: !11884)
!11887 = distinct !{!11887, !11879, !11888}
!11888 = !DILocation(line: 3837, column: 13, scope: !11880)
!11889 = !DILocation(line: 3839, column: 4, scope: !11872)
!11890 = !DILocation(line: 3840, column: 12, scope: !11872)
!11891 = !DILocation(line: 3840, column: 10, scope: !11872)
!11892 = !DILocation(line: 3841, column: 2, scope: !11872)
!11893 = !DILocalVariable(name: "preds", scope: !11894, file: !3, line: 3844, type: !2325)
!11894 = distinct !DILexicalBlock(scope: !11864, file: !3, line: 3843, column: 2)
!11895 = !DILocation(line: 3844, column: 12, scope: !11894)
!11896 = !DILocalVariable(name: "n", scope: !11894, file: !3, line: 3845, type: !874)
!11897 = !DILocation(line: 3845, column: 8, scope: !11894)
!11898 = !DILocation(line: 3847, column: 15, scope: !11894)
!11899 = !DILocation(line: 3847, column: 4, scope: !11894)
!11900 = !DILocation(line: 3848, column: 4, scope: !11894)
!11901 = !DILocation(line: 3850, column: 12, scope: !11894)
!11902 = !DILocation(line: 3850, column: 10, scope: !11894)
!11903 = !DILocation(line: 3852, column: 10, scope: !11894)
!11904 = !DILocation(line: 3852, column: 4, scope: !11894)
!11905 = !DILocation(line: 3856, column: 10, scope: !11846)
!11906 = !DILocation(line: 3856, column: 3, scope: !11846)
!11907 = distinct !DISubprogram(name: "single_pred", scope: !155, file: !155, line: 672, type: !7869, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11908 = !DILocalVariable(name: "bb", arg: 1, scope: !11907, file: !155, line: 672, type: !2498)
!11909 = !DILocation(line: 672, column: 32, scope: !11907)
!11910 = !DILocation(line: 674, column: 28, scope: !11907)
!11911 = !DILocation(line: 674, column: 10, scope: !11907)
!11912 = !DILocation(line: 674, column: 33, scope: !11907)
!11913 = !DILocation(line: 674, column: 3, scope: !11907)
!11914 = distinct !DISubprogram(name: "df_lr_get_bb_info", scope: !796, file: !796, line: 1052, type: !11915, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11915 = !DISubroutineType(types: !11916)
!11916 = !{!2300, !7}
!11917 = !DILocalVariable(name: "index", arg: 1, scope: !11914, file: !796, line: 1052, type: !7)
!11918 = !DILocation(line: 1052, column: 33, scope: !11914)
!11919 = !DILocation(line: 1054, column: 7, scope: !11920)
!11920 = distinct !DILexicalBlock(scope: !11914, file: !796, line: 1054, column: 7)
!11921 = !DILocation(line: 1054, column: 15, scope: !11920)
!11922 = !DILocation(line: 1054, column: 22, scope: !11920)
!11923 = !DILocation(line: 1054, column: 13, scope: !11920)
!11924 = !DILocation(line: 1054, column: 7, scope: !11914)
!11925 = !DILocation(line: 1055, column: 37, scope: !11920)
!11926 = !DILocation(line: 1055, column: 44, scope: !11920)
!11927 = !DILocation(line: 1055, column: 55, scope: !11920)
!11928 = !DILocation(line: 1055, column: 12, scope: !11920)
!11929 = !DILocation(line: 1055, column: 5, scope: !11920)
!11930 = !DILocation(line: 1057, column: 5, scope: !11920)
!11931 = !DILocation(line: 1058, column: 1, scope: !11914)
!11932 = distinct !DISubprogram(name: "extend_region_bb_info", scope: !3, file: !3, line: 3894, type: !2608, scopeLine: 3895, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11933 = !DILocation(line: 3896, column: 3, scope: !11932)
!11934 = !DILocation(line: 3898, column: 1, scope: !11932)
!11935 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_heap_safe_grow_cleared", scope: !409, file: !409, line: 923, type: !11936, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11936 = !DISubroutineType(types: !11937)
!11937 = !{null, !11938, !874}
!11938 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2307, size: 64)
!11939 = !DILocalVariable(name: "vec_", arg: 1, scope: !11935, file: !409, line: 923, type: !11938)
!11940 = !DILocation(line: 923, column: 1, scope: !11935)
!11941 = !DILocalVariable(name: "size_", arg: 2, scope: !11935, file: !409, line: 923, type: !874)
!11942 = !DILocalVariable(name: "oldsize", scope: !11935, file: !409, line: 923, type: !874)
!11943 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_base_length", scope: !409, file: !409, line: 922, type: !11944, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11944 = !DISubroutineType(types: !11945)
!11945 = !{!7, !11946}
!11946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !11947, size: 64)
!11947 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2312)
!11948 = !DILocalVariable(name: "vec_", arg: 1, scope: !11943, file: !409, line: 922, type: !11946)
!11949 = !DILocation(line: 922, column: 1, scope: !11943)
!11950 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_heap_safe_grow", scope: !409, file: !409, line: 923, type: !11936, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11951 = !DILocalVariable(name: "vec_", arg: 1, scope: !11950, file: !409, line: 923, type: !11938)
!11952 = !DILocation(line: 923, column: 1, scope: !11950)
!11953 = !DILocalVariable(name: "size_", arg: 2, scope: !11950, file: !409, line: 923, type: !874)
!11954 = !DILocation(line: 0, scope: !11950)
!11955 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_base_address", scope: !409, file: !409, line: 922, type: !11956, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11956 = !DISubroutineType(types: !11957)
!11957 = !{!8088, !8089}
!11958 = !DILocalVariable(name: "vec_", arg: 1, scope: !11955, file: !409, line: 922, type: !8089)
!11959 = !DILocation(line: 922, column: 1, scope: !11955)
!11960 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_heap_reserve_exact", scope: !409, file: !409, line: 923, type: !11961, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11961 = !DISubroutineType(types: !11962)
!11962 = !{!874, !11938, !874}
!11963 = !DILocalVariable(name: "vec_", arg: 1, scope: !11960, file: !409, line: 923, type: !11938)
!11964 = !DILocation(line: 923, column: 1, scope: !11960)
!11965 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11960, file: !409, line: 923, type: !874)
!11966 = !DILocalVariable(name: "extend", scope: !11960, file: !409, line: 923, type: !874)
!11967 = !DILocation(line: 923, column: 1, scope: !11968)
!11968 = distinct !DILexicalBlock(scope: !11960, file: !409, line: 923, column: 1)
!11969 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_base_space", scope: !409, file: !409, line: 922, type: !11970, scopeLine: 922, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11970 = !DISubroutineType(types: !11971)
!11971 = !{!874, !8089, !874}
!11972 = !DILocalVariable(name: "vec_", arg: 1, scope: !11969, file: !409, line: 922, type: !8089)
!11973 = !DILocation(line: 922, column: 1, scope: !11969)
!11974 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11969, file: !409, line: 922, type: !874)
!11975 = distinct !DISubprogram(name: "VEC_sel_region_bb_info_def_heap_free", scope: !409, file: !409, line: 923, type: !11976, scopeLine: 923, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11976 = !DISubroutineType(types: !11977)
!11977 = !{null, !11938}
!11978 = !DILocalVariable(name: "vec_", arg: 1, scope: !11975, file: !409, line: 923, type: !11938)
!11979 = !DILocation(line: 923, column: 1, scope: !11975)
!11980 = !DILocation(line: 923, column: 1, scope: !11981)
!11981 = distinct !DILexicalBlock(scope: !11975, file: !409, line: 923, column: 1)
!11982 = distinct !DISubprogram(name: "VEC_rtx_heap_alloc", scope: !414, file: !414, line: 201, type: !11983, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11983 = !DISubroutineType(types: !11984)
!11984 = !{!2064, !874}
!11985 = !DILocalVariable(name: "alloc_", arg: 1, scope: !11982, file: !414, line: 201, type: !874)
!11986 = !DILocation(line: 201, column: 1, scope: !11982)
!11987 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !1374, file: !1374, line: 32, type: !11988, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11988 = !DISubroutineType(types: !11989)
!11989 = !{!2070, !874}
!11990 = !DILocalVariable(name: "alloc_", arg: 1, scope: !11987, file: !1374, line: 32, type: !874)
!11991 = !DILocation(line: 32, column: 1, scope: !11987)
!11992 = distinct !DISubprogram(name: "VEC_rtx_heap_reserve", scope: !414, file: !414, line: 201, type: !11993, scopeLine: 201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!11993 = !DISubroutineType(types: !11994)
!11994 = !{!874, !8892, !874}
!11995 = !DILocalVariable(name: "vec_", arg: 1, scope: !11992, file: !414, line: 201, type: !8892)
!11996 = !DILocation(line: 201, column: 1, scope: !11992)
!11997 = !DILocalVariable(name: "alloc_", arg: 2, scope: !11992, file: !414, line: 201, type: !874)
!11998 = !DILocalVariable(name: "extend", scope: !11992, file: !414, line: 201, type: !874)
!11999 = !DILocation(line: 201, column: 1, scope: !12000)
!12000 = distinct !DILexicalBlock(scope: !11992, file: !414, line: 201, column: 1)
!12001 = distinct !DISubprogram(name: "VEC_rtx_base_quick_push", scope: !414, file: !414, line: 200, type: !12002, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12002 = !DISubroutineType(types: !12003)
!12003 = !{!2055, !4196, !850}
!12004 = !DILocalVariable(name: "vec_", arg: 1, scope: !12001, file: !414, line: 200, type: !4196)
!12005 = !DILocation(line: 200, column: 1, scope: !12001)
!12006 = !DILocalVariable(name: "obj_", arg: 2, scope: !12001, file: !414, line: 200, type: !850)
!12007 = !DILocalVariable(name: "slot_", scope: !12001, file: !414, line: 200, type: !2055)
!12008 = distinct !DISubprogram(name: "VEC_rtx_base_space", scope: !414, file: !414, line: 200, type: !12009, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12009 = !DISubroutineType(types: !12010)
!12010 = !{!874, !4196, !874}
!12011 = !DILocalVariable(name: "vec_", arg: 1, scope: !12008, file: !414, line: 200, type: !4196)
!12012 = !DILocation(line: 200, column: 1, scope: !12008)
!12013 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12008, file: !414, line: 200, type: !874)
!12014 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !1374, file: !1374, line: 32, type: !12015, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12015 = !DISubroutineType(types: !12016)
!12016 = !{!874, !8899, !874}
!12017 = !DILocalVariable(name: "vec_", arg: 1, scope: !12014, file: !1374, line: 32, type: !8899)
!12018 = !DILocation(line: 32, column: 1, scope: !12014)
!12019 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12014, file: !1374, line: 32, type: !874)
!12020 = !DILocalVariable(name: "extend", scope: !12014, file: !1374, line: 32, type: !874)
!12021 = !DILocation(line: 32, column: 1, scope: !12022)
!12022 = distinct !DILexicalBlock(scope: !12014, file: !1374, line: 32, column: 1)
!12023 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !1374, file: !1374, line: 31, type: !12024, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12024 = !DISubroutineType(types: !12025)
!12025 = !{!2051, !8778, !874}
!12026 = !DILocalVariable(name: "vec_", arg: 1, scope: !12023, file: !1374, line: 31, type: !8778)
!12027 = !DILocation(line: 31, column: 1, scope: !12023)
!12028 = !DILocalVariable(name: "obj_", arg: 2, scope: !12023, file: !1374, line: 31, type: !874)
!12029 = !DILocalVariable(name: "slot_", scope: !12023, file: !1374, line: 31, type: !2051)
!12030 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !1374, file: !1374, line: 31, type: !12031, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12031 = !DISubroutineType(types: !12032)
!12032 = !{!874, !8778, !874}
!12033 = !DILocalVariable(name: "vec_", arg: 1, scope: !12030, file: !1374, line: 31, type: !8778)
!12034 = !DILocation(line: 31, column: 1, scope: !12030)
!12035 = !DILocalVariable(name: "alloc_", arg: 2, scope: !12030, file: !1374, line: 31, type: !874)
!12036 = distinct !DISubprogram(name: "cfg_preds_1", scope: !3, file: !3, line: 4574, type: !12037, scopeLine: 4575, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12037 = !DISubroutineType(types: !12038)
!12038 = !{null, !1391, !8151, !2051, !2051}
!12039 = !DILocalVariable(name: "bb", arg: 1, scope: !12036, file: !3, line: 4574, type: !1391)
!12040 = !DILocation(line: 4574, column: 26, scope: !12036)
!12041 = !DILocalVariable(name: "preds", arg: 2, scope: !12036, file: !3, line: 4574, type: !8151)
!12042 = !DILocation(line: 4574, column: 39, scope: !12036)
!12043 = !DILocalVariable(name: "n", arg: 3, scope: !12036, file: !3, line: 4574, type: !2051)
!12044 = !DILocation(line: 4574, column: 51, scope: !12036)
!12045 = !DILocalVariable(name: "size", arg: 4, scope: !12036, file: !3, line: 4574, type: !2051)
!12046 = !DILocation(line: 4574, column: 59, scope: !12036)
!12047 = !DILocalVariable(name: "e", scope: !12036, file: !3, line: 4576, type: !1408)
!12048 = !DILocation(line: 4576, column: 8, scope: !12036)
!12049 = !DILocalVariable(name: "ei", scope: !12036, file: !3, line: 4577, type: !3114)
!12050 = !DILocation(line: 4577, column: 17, scope: !12036)
!12051 = !DILocation(line: 4579, column: 3, scope: !12036)
!12052 = !DILocation(line: 4581, column: 3, scope: !12053)
!12053 = distinct !DILexicalBlock(scope: !12036, file: !3, line: 4581, column: 3)
!12054 = !DILocation(line: 4581, column: 3, scope: !12055)
!12055 = distinct !DILexicalBlock(scope: !12053, file: !3, line: 4581, column: 3)
!12056 = !DILocalVariable(name: "pred_bb", scope: !12057, file: !3, line: 4583, type: !1391)
!12057 = distinct !DILexicalBlock(scope: !12055, file: !3, line: 4582, column: 5)
!12058 = !DILocation(line: 4583, column: 19, scope: !12057)
!12059 = !DILocation(line: 4583, column: 29, scope: !12057)
!12060 = !DILocation(line: 4583, column: 32, scope: !12057)
!12061 = !DILocalVariable(name: "bb_end", scope: !12057, file: !3, line: 4584, type: !2104)
!12062 = !DILocation(line: 4584, column: 14, scope: !12057)
!12063 = !DILocation(line: 4584, column: 23, scope: !12057)
!12064 = !DILocation(line: 4587, column: 7, scope: !12057)
!12065 = !DILocation(line: 4589, column: 27, scope: !12066)
!12066 = distinct !DILexicalBlock(scope: !12057, file: !3, line: 4589, column: 11)
!12067 = !DILocation(line: 4589, column: 11, scope: !12066)
!12068 = !DILocation(line: 4589, column: 11, scope: !12057)
!12069 = !DILocation(line: 4590, column: 15, scope: !12066)
!12070 = !DILocation(line: 4590, column: 24, scope: !12066)
!12071 = !DILocation(line: 4590, column: 31, scope: !12066)
!12072 = !DILocation(line: 4590, column: 34, scope: !12066)
!12073 = !DILocation(line: 4590, column: 2, scope: !12066)
!12074 = !DILocation(line: 4593, column: 9, scope: !12075)
!12075 = distinct !DILexicalBlock(scope: !12076, file: !3, line: 4593, column: 8)
!12076 = distinct !DILexicalBlock(scope: !12066, file: !3, line: 4592, column: 2)
!12077 = !DILocation(line: 4593, column: 8, scope: !12075)
!12078 = !DILocation(line: 4593, column: 15, scope: !12075)
!12079 = !DILocation(line: 4593, column: 14, scope: !12075)
!12080 = !DILocation(line: 4593, column: 11, scope: !12075)
!12081 = !DILocation(line: 4593, column: 8, scope: !12076)
!12082 = !DILocation(line: 4594, column: 15, scope: !12075)
!12083 = !DILocation(line: 4594, column: 7, scope: !12075)
!12084 = !DILocation(line: 4594, column: 13, scope: !12075)
!12085 = !DILocation(line: 4594, column: 6, scope: !12075)
!12086 = !DILocation(line: 4596, column: 23, scope: !12076)
!12087 = !DILocation(line: 4596, column: 6, scope: !12076)
!12088 = !DILocation(line: 4596, column: 5, scope: !12076)
!12089 = !DILocation(line: 4596, column: 15, scope: !12076)
!12090 = !DILocation(line: 4596, column: 17, scope: !12076)
!12091 = !DILocation(line: 4596, column: 4, scope: !12076)
!12092 = !DILocation(line: 4596, column: 21, scope: !12076)
!12093 = !DILocation(line: 4598, column: 5, scope: !12057)
!12094 = distinct !{!12094, !12052, !12095}
!12095 = !DILocation(line: 4598, column: 5, scope: !12053)
!12096 = !DILocation(line: 4600, column: 3, scope: !12036)
!12097 = !DILocation(line: 4601, column: 1, scope: !12036)
!12098 = distinct !DISubprogram(name: "ei_end_p", scope: !155, file: !155, line: 721, type: !12099, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12099 = !DISubroutineType(types: !12100)
!12100 = !{!1085, !3114}
!12101 = !DILocalVariable(name: "i", arg: 1, scope: !12098, file: !155, line: 721, type: !3114)
!12102 = !DILocation(line: 721, column: 25, scope: !12098)
!12103 = !DILocation(line: 723, column: 13, scope: !12098)
!12104 = !DILocation(line: 723, column: 22, scope: !12098)
!12105 = !DILocation(line: 723, column: 19, scope: !12098)
!12106 = !DILocation(line: 723, column: 10, scope: !12098)
!12107 = !DILocation(line: 723, column: 3, scope: !12098)
!12108 = distinct !DISubprogram(name: "ei_edge", scope: !155, file: !155, line: 752, type: !9201, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12109 = !DILocalVariable(name: "i", arg: 1, scope: !12108, file: !155, line: 752, type: !3114)
!12110 = !DILocation(line: 752, column: 24, scope: !12108)
!12111 = !DILocation(line: 754, column: 10, scope: !12108)
!12112 = !DILocation(line: 754, column: 3, scope: !12108)
!12113 = distinct !DISubprogram(name: "ei_container", scope: !155, file: !155, line: 685, type: !12114, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12114 = !DISubroutineType(types: !12115)
!12115 = !{!1396, !3114}
!12116 = !DILocalVariable(name: "i", arg: 1, scope: !12113, file: !155, line: 685, type: !3114)
!12117 = !DILocation(line: 685, column: 29, scope: !12113)
!12118 = !DILocation(line: 687, column: 3, scope: !12113)
!12119 = !DILocation(line: 688, column: 13, scope: !12113)
!12120 = !DILocation(line: 688, column: 10, scope: !12113)
!12121 = !DILocation(line: 688, column: 3, scope: !12113)
!12122 = distinct !DISubprogram(name: "sel_remove_bb", scope: !3, file: !3, line: 5024, type: !9222, scopeLine: 5025, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12123 = !DILocalVariable(name: "bb", arg: 1, scope: !12122, file: !3, line: 5024, type: !1391)
!12124 = !DILocation(line: 5024, column: 28, scope: !12122)
!12125 = !DILocalVariable(name: "remove_from_cfg_p", arg: 2, scope: !12122, file: !3, line: 5024, type: !1085)
!12126 = !DILocation(line: 5024, column: 37, scope: !12122)
!12127 = !DILocation(line: 5026, column: 3, scope: !12122)
!12128 = !DILocation(line: 5028, column: 26, scope: !12122)
!12129 = !DILocation(line: 5028, column: 3, scope: !12122)
!12130 = !DILocation(line: 5029, column: 22, scope: !12122)
!12131 = !DILocation(line: 5029, column: 3, scope: !12122)
!12132 = !DILocation(line: 5030, column: 21, scope: !12122)
!12133 = !DILocation(line: 5030, column: 43, scope: !12122)
!12134 = !DILocation(line: 5030, column: 47, scope: !12122)
!12135 = !DILocation(line: 5030, column: 3, scope: !12122)
!12136 = !DILocation(line: 5032, column: 7, scope: !12137)
!12137 = distinct !DILexicalBlock(scope: !12122, file: !3, line: 5032, column: 7)
!12138 = !DILocation(line: 5032, column: 7, scope: !12122)
!12139 = !DILocation(line: 5033, column: 34, scope: !12137)
!12140 = !DILocation(line: 5033, column: 5, scope: !12137)
!12141 = !DILocation(line: 5035, column: 21, scope: !12122)
!12142 = !DILocation(line: 5035, column: 3, scope: !12122)
!12143 = !DILocation(line: 5036, column: 1, scope: !12122)
!12144 = distinct !DISubprogram(name: "remove_bb_from_region", scope: !3, file: !3, line: 4945, type: !2478, scopeLine: 4946, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12145 = !DILocalVariable(name: "bb", arg: 1, scope: !12144, file: !3, line: 4945, type: !1391)
!12146 = !DILocation(line: 4945, column: 36, scope: !12144)
!12147 = !DILocalVariable(name: "i", scope: !12144, file: !3, line: 4947, type: !874)
!12148 = !DILocation(line: 4947, column: 7, scope: !12144)
!12149 = !DILocalVariable(name: "pos", scope: !12144, file: !3, line: 4947, type: !874)
!12150 = !DILocation(line: 4947, column: 10, scope: !12144)
!12151 = !DILocalVariable(name: "bbi", scope: !12144, file: !3, line: 4947, type: !874)
!12152 = !DILocation(line: 4947, column: 15, scope: !12144)
!12153 = !DILocalVariable(name: "rgn", scope: !12144, file: !3, line: 4947, type: !874)
!12154 = !DILocation(line: 4947, column: 25, scope: !12144)
!12155 = !DILocation(line: 4949, column: 9, scope: !12144)
!12156 = !DILocation(line: 4949, column: 7, scope: !12144)
!12157 = !DILocation(line: 4950, column: 9, scope: !12144)
!12158 = !DILocation(line: 4950, column: 7, scope: !12144)
!12159 = !DILocation(line: 4951, column: 9, scope: !12144)
!12160 = !DILocation(line: 4951, column: 28, scope: !12144)
!12161 = !DILocation(line: 4951, column: 26, scope: !12144)
!12162 = !DILocation(line: 4951, column: 7, scope: !12144)
!12163 = !DILocation(line: 4953, column: 3, scope: !12144)
!12164 = !DILocation(line: 4956, column: 12, scope: !12165)
!12165 = distinct !DILexicalBlock(scope: !12144, file: !3, line: 4956, column: 3)
!12166 = !DILocation(line: 4956, column: 33, scope: !12165)
!12167 = !DILocation(line: 4956, column: 10, scope: !12165)
!12168 = !DILocation(line: 4956, column: 8, scope: !12165)
!12169 = !DILocation(line: 4956, column: 38, scope: !12170)
!12170 = distinct !DILexicalBlock(scope: !12165, file: !3, line: 4956, column: 3)
!12171 = !DILocation(line: 4956, column: 43, scope: !12170)
!12172 = !DILocation(line: 4956, column: 40, scope: !12170)
!12173 = !DILocation(line: 4956, column: 3, scope: !12165)
!12174 = !DILocation(line: 4957, column: 5, scope: !12170)
!12175 = !DILocation(line: 4957, column: 34, scope: !12170)
!12176 = !DILocation(line: 4956, column: 49, scope: !12170)
!12177 = !DILocation(line: 4956, column: 3, scope: !12170)
!12178 = distinct !{!12178, !12173, !12179}
!12179 = !DILocation(line: 4957, column: 34, scope: !12165)
!12180 = !DILocation(line: 4959, column: 12, scope: !12144)
!12181 = !DILocation(line: 4959, column: 27, scope: !12144)
!12182 = !DILocation(line: 4959, column: 25, scope: !12144)
!12183 = !DILocation(line: 4959, column: 3, scope: !12144)
!12184 = !DILocation(line: 4960, column: 12, scope: !12144)
!12185 = !DILocation(line: 4960, column: 27, scope: !12144)
!12186 = !DILocation(line: 4960, column: 25, scope: !12144)
!12187 = !DILocation(line: 4960, column: 31, scope: !12144)
!12188 = !DILocation(line: 4961, column: 13, scope: !12144)
!12189 = !DILocation(line: 4961, column: 39, scope: !12144)
!12190 = !DILocation(line: 4961, column: 37, scope: !12144)
!12191 = !DILocation(line: 4961, column: 12, scope: !12144)
!12192 = !DILocation(line: 4961, column: 44, scope: !12144)
!12193 = !DILocation(line: 4963, column: 3, scope: !12144)
!12194 = !DILocation(line: 4963, column: 22, scope: !12144)
!12195 = !DILocation(line: 4964, column: 12, scope: !12196)
!12196 = distinct !DILexicalBlock(scope: !12144, file: !3, line: 4964, column: 3)
!12197 = !DILocation(line: 4964, column: 16, scope: !12196)
!12198 = !DILocation(line: 4964, column: 10, scope: !12196)
!12199 = !DILocation(line: 4964, column: 8, scope: !12196)
!12200 = !DILocation(line: 4964, column: 21, scope: !12201)
!12201 = distinct !DILexicalBlock(scope: !12196, file: !3, line: 4964, column: 3)
!12202 = !DILocation(line: 4964, column: 26, scope: !12201)
!12203 = !DILocation(line: 4964, column: 23, scope: !12201)
!12204 = !DILocation(line: 4964, column: 3, scope: !12196)
!12205 = !DILocation(line: 4965, column: 5, scope: !12201)
!12206 = !DILocation(line: 4965, column: 19, scope: !12201)
!12207 = !DILocation(line: 4964, column: 39, scope: !12201)
!12208 = !DILocation(line: 4964, column: 3, scope: !12201)
!12209 = distinct !{!12209, !12204, !12210}
!12210 = !DILocation(line: 4965, column: 19, scope: !12196)
!12211 = !DILocation(line: 4966, column: 1, scope: !12144)
!12212 = distinct !DISubprogram(name: "return_bb_to_pool", scope: !3, file: !3, line: 4750, type: !2478, scopeLine: 4751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12213 = !DILocalVariable(name: "bb", arg: 1, scope: !12212, file: !3, line: 4750, type: !1391)
!12214 = !DILocation(line: 4750, column: 32, scope: !12212)
!12215 = !DILocalVariable(name: "note", scope: !12212, file: !3, line: 4752, type: !850)
!12216 = !DILocation(line: 4752, column: 7, scope: !12212)
!12217 = !DILocation(line: 4752, column: 23, scope: !12212)
!12218 = !DILocation(line: 4752, column: 14, scope: !12212)
!12219 = !DILocation(line: 4754, column: 3, scope: !12212)
!12220 = !DILocation(line: 4760, column: 1, scope: !12212)
!12221 = distinct !DISubprogram(name: "delete_and_free_basic_block", scope: !3, file: !3, line: 4888, type: !2478, scopeLine: 4889, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12222 = !DILocalVariable(name: "bb", arg: 1, scope: !12221, file: !3, line: 4888, type: !1391)
!12223 = !DILocation(line: 4888, column: 42, scope: !12221)
!12224 = !DILocation(line: 4890, column: 3, scope: !12221)
!12225 = !DILocation(line: 4892, column: 7, scope: !12226)
!12226 = distinct !DILexicalBlock(scope: !12221, file: !3, line: 4892, column: 7)
!12227 = !DILocation(line: 4892, column: 7, scope: !12221)
!12228 = !DILocation(line: 4893, column: 18, scope: !12226)
!12229 = !DILocation(line: 4893, column: 5, scope: !12226)
!12230 = !DILocation(line: 4895, column: 21, scope: !12221)
!12231 = !DILocation(line: 4895, column: 43, scope: !12221)
!12232 = !DILocation(line: 4895, column: 47, scope: !12221)
!12233 = !DILocation(line: 4895, column: 3, scope: !12221)
!12234 = !DILocation(line: 4900, column: 3, scope: !12221)
!12235 = !DILocation(line: 4905, column: 23, scope: !12221)
!12236 = !DILocation(line: 4905, column: 3, scope: !12221)
!12237 = !DILocation(line: 4906, column: 1, scope: !12221)
!12238 = distinct !DISubprogram(name: "VEC_basic_block_base_length", scope: !155, file: !155, line: 281, type: !12239, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12239 = !DISubroutineType(types: !12240)
!12240 = !{!7, !7054}
!12241 = !DILocalVariable(name: "vec_", arg: 1, scope: !12238, file: !155, line: 281, type: !7054)
!12242 = !DILocation(line: 281, column: 1, scope: !12238)
!12243 = distinct !DISubprogram(name: "add_block_to_current_region", scope: !3, file: !3, line: 4910, type: !2478, scopeLine: 4911, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12244 = !DILocalVariable(name: "bb", arg: 1, scope: !12243, file: !3, line: 4910, type: !1391)
!12245 = !DILocation(line: 4910, column: 42, scope: !12243)
!12246 = !DILocalVariable(name: "i", scope: !12243, file: !3, line: 4912, type: !874)
!12247 = !DILocation(line: 4912, column: 7, scope: !12243)
!12248 = !DILocalVariable(name: "pos", scope: !12243, file: !3, line: 4912, type: !874)
!12249 = !DILocation(line: 4912, column: 10, scope: !12243)
!12250 = !DILocalVariable(name: "bbi", scope: !12243, file: !3, line: 4912, type: !874)
!12251 = !DILocation(line: 4912, column: 15, scope: !12243)
!12252 = !DILocalVariable(name: "rgn", scope: !12243, file: !3, line: 4912, type: !874)
!12253 = !DILocation(line: 4912, column: 25, scope: !12243)
!12254 = !DILocation(line: 4914, column: 9, scope: !12243)
!12255 = !DILocation(line: 4914, column: 7, scope: !12243)
!12256 = !DILocation(line: 4915, column: 34, scope: !12243)
!12257 = !DILocation(line: 4915, column: 38, scope: !12243)
!12258 = !DILocation(line: 4915, column: 9, scope: !12243)
!12259 = !DILocation(line: 4915, column: 7, scope: !12243)
!12260 = !DILocation(line: 4916, column: 7, scope: !12243)
!12261 = !DILocation(line: 4917, column: 9, scope: !12243)
!12262 = !DILocation(line: 4917, column: 28, scope: !12243)
!12263 = !DILocation(line: 4917, column: 26, scope: !12243)
!12264 = !DILocation(line: 4917, column: 7, scope: !12243)
!12265 = !DILocation(line: 4919, column: 3, scope: !12243)
!12266 = !DILocation(line: 4923, column: 3, scope: !12243)
!12267 = !DILocation(line: 4925, column: 12, scope: !12268)
!12268 = distinct !DILexicalBlock(scope: !12243, file: !3, line: 4925, column: 3)
!12269 = !DILocation(line: 4925, column: 33, scope: !12268)
!12270 = !DILocation(line: 4925, column: 10, scope: !12268)
!12271 = !DILocation(line: 4925, column: 8, scope: !12268)
!12272 = !DILocation(line: 4925, column: 38, scope: !12273)
!12273 = distinct !DILexicalBlock(scope: !12268, file: !3, line: 4925, column: 3)
!12274 = !DILocation(line: 4925, column: 43, scope: !12273)
!12275 = !DILocation(line: 4925, column: 40, scope: !12273)
!12276 = !DILocation(line: 4925, column: 3, scope: !12268)
!12277 = !DILocation(line: 4926, column: 5, scope: !12273)
!12278 = !DILocation(line: 4926, column: 34, scope: !12273)
!12279 = !DILocation(line: 4925, column: 49, scope: !12273)
!12280 = !DILocation(line: 4925, column: 3, scope: !12273)
!12281 = distinct !{!12281, !12276, !12282}
!12282 = !DILocation(line: 4926, column: 34, scope: !12268)
!12283 = !DILocation(line: 4928, column: 12, scope: !12243)
!12284 = !DILocation(line: 4928, column: 27, scope: !12243)
!12285 = !DILocation(line: 4928, column: 25, scope: !12243)
!12286 = !DILocation(line: 4928, column: 31, scope: !12243)
!12287 = !DILocation(line: 4928, column: 3, scope: !12243)
!12288 = !DILocation(line: 4929, column: 12, scope: !12243)
!12289 = !DILocation(line: 4929, column: 27, scope: !12243)
!12290 = !DILocation(line: 4929, column: 25, scope: !12243)
!12291 = !DILocation(line: 4930, column: 13, scope: !12243)
!12292 = !DILocation(line: 4930, column: 39, scope: !12243)
!12293 = !DILocation(line: 4930, column: 37, scope: !12243)
!12294 = !DILocation(line: 4930, column: 12, scope: !12243)
!12295 = !DILocation(line: 4930, column: 44, scope: !12243)
!12296 = !DILocation(line: 4933, column: 23, scope: !12243)
!12297 = !DILocation(line: 4933, column: 27, scope: !12243)
!12298 = !DILocation(line: 4933, column: 3, scope: !12243)
!12299 = !DILocation(line: 4933, column: 16, scope: !12243)
!12300 = !DILocation(line: 4933, column: 21, scope: !12243)
!12301 = !DILocation(line: 4934, column: 29, scope: !12243)
!12302 = !DILocation(line: 4934, column: 3, scope: !12243)
!12303 = !DILocation(line: 4934, column: 27, scope: !12243)
!12304 = !DILocation(line: 4935, column: 32, scope: !12243)
!12305 = !DILocation(line: 4935, column: 3, scope: !12243)
!12306 = !DILocation(line: 4935, column: 30, scope: !12243)
!12307 = !DILocation(line: 4937, column: 3, scope: !12243)
!12308 = !DILocation(line: 4937, column: 22, scope: !12243)
!12309 = !DILocation(line: 4939, column: 12, scope: !12310)
!12310 = distinct !DILexicalBlock(scope: !12243, file: !3, line: 4939, column: 3)
!12311 = !DILocation(line: 4939, column: 16, scope: !12310)
!12312 = !DILocation(line: 4939, column: 10, scope: !12310)
!12313 = !DILocation(line: 4939, column: 8, scope: !12310)
!12314 = !DILocation(line: 4939, column: 21, scope: !12315)
!12315 = distinct !DILexicalBlock(scope: !12310, file: !3, line: 4939, column: 3)
!12316 = !DILocation(line: 4939, column: 26, scope: !12315)
!12317 = !DILocation(line: 4939, column: 23, scope: !12315)
!12318 = !DILocation(line: 4939, column: 3, scope: !12310)
!12319 = !DILocation(line: 4940, column: 5, scope: !12315)
!12320 = !DILocation(line: 4940, column: 19, scope: !12315)
!12321 = !DILocation(line: 4939, column: 39, scope: !12315)
!12322 = !DILocation(line: 4939, column: 3, scope: !12315)
!12323 = distinct !{!12323, !12318, !12324}
!12324 = !DILocation(line: 4940, column: 19, scope: !12310)
!12325 = !DILocation(line: 4941, column: 1, scope: !12243)
!12326 = distinct !DISubprogram(name: "find_place_to_insert_bb", scope: !3, file: !3, line: 4823, type: !12327, scopeLine: 4824, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12327 = !DISubroutineType(types: !12328)
!12328 = !{!874, !1391, !874}
!12329 = !DILocalVariable(name: "bb", arg: 1, scope: !12326, file: !3, line: 4823, type: !1391)
!12330 = !DILocation(line: 4823, column: 38, scope: !12326)
!12331 = !DILocalVariable(name: "rgn", arg: 2, scope: !12326, file: !3, line: 4823, type: !874)
!12332 = !DILocation(line: 4823, column: 46, scope: !12326)
!12333 = !DILocalVariable(name: "has_preds_outside_rgn", scope: !12326, file: !3, line: 4825, type: !1085)
!12334 = !DILocation(line: 4825, column: 8, scope: !12326)
!12335 = !DILocalVariable(name: "e", scope: !12326, file: !3, line: 4826, type: !1408)
!12336 = !DILocation(line: 4826, column: 8, scope: !12326)
!12337 = !DILocalVariable(name: "ei", scope: !12326, file: !3, line: 4827, type: !3114)
!12338 = !DILocation(line: 4827, column: 17, scope: !12326)
!12339 = !DILocation(line: 4830, column: 3, scope: !12340)
!12340 = distinct !DILexicalBlock(scope: !12326, file: !3, line: 4830, column: 3)
!12341 = !DILocation(line: 4830, column: 3, scope: !12342)
!12342 = distinct !DILexicalBlock(scope: !12340, file: !3, line: 4830, column: 3)
!12343 = !DILocation(line: 4831, column: 31, scope: !12344)
!12344 = distinct !DILexicalBlock(scope: !12342, file: !3, line: 4831, column: 9)
!12345 = !DILocation(line: 4831, column: 34, scope: !12344)
!12346 = !DILocation(line: 4831, column: 10, scope: !12344)
!12347 = !DILocation(line: 4831, column: 9, scope: !12342)
!12348 = !DILocation(line: 4833, column: 31, scope: !12349)
!12349 = distinct !DILexicalBlock(scope: !12344, file: !3, line: 4832, column: 7)
!12350 = !DILocation(line: 4834, column: 9, scope: !12349)
!12351 = !DILocation(line: 4831, column: 37, scope: !12344)
!12352 = distinct !{!12352, !12339, !12353}
!12353 = !DILocation(line: 4835, column: 7, scope: !12340)
!12354 = !DILocation(line: 4839, column: 7, scope: !12355)
!12355 = distinct !DILexicalBlock(scope: !12326, file: !3, line: 4839, column: 7)
!12356 = !DILocation(line: 4840, column: 7, scope: !12355)
!12357 = !DILocation(line: 4840, column: 11, scope: !12355)
!12358 = !DILocation(line: 4840, column: 33, scope: !12355)
!12359 = !DILocation(line: 4840, column: 36, scope: !12355)
!12360 = !DILocation(line: 4840, column: 59, scope: !12355)
!12361 = !DILocation(line: 4839, column: 7, scope: !12326)
!12362 = !DILocalVariable(name: "i", scope: !12363, file: !3, line: 4842, type: !874)
!12363 = distinct !DILexicalBlock(scope: !12355, file: !3, line: 4841, column: 5)
!12364 = !DILocation(line: 4842, column: 11, scope: !12363)
!12365 = !DILocalVariable(name: "bbi", scope: !12363, file: !3, line: 4842, type: !874)
!12366 = !DILocation(line: 4842, column: 14, scope: !12363)
!12367 = !DILocation(line: 4842, column: 20, scope: !12363)
!12368 = !DILocation(line: 4842, column: 24, scope: !12363)
!12369 = !DILocalVariable(name: "cur_bbi", scope: !12363, file: !3, line: 4842, type: !874)
!12370 = !DILocation(line: 4842, column: 31, scope: !12363)
!12371 = !DILocation(line: 4844, column: 7, scope: !12363)
!12372 = !DILocation(line: 4845, column: 16, scope: !12373)
!12373 = distinct !DILexicalBlock(scope: !12363, file: !3, line: 4845, column: 7)
!12374 = !DILocation(line: 4845, column: 36, scope: !12373)
!12375 = !DILocation(line: 4845, column: 14, scope: !12373)
!12376 = !DILocation(line: 4845, column: 12, scope: !12373)
!12377 = !DILocation(line: 4845, column: 41, scope: !12378)
!12378 = distinct !DILexicalBlock(scope: !12373, file: !3, line: 4845, column: 7)
!12379 = !DILocation(line: 4845, column: 43, scope: !12378)
!12380 = !DILocation(line: 4845, column: 7, scope: !12373)
!12381 = !DILocation(line: 4847, column: 21, scope: !12382)
!12382 = distinct !DILexicalBlock(scope: !12378, file: !3, line: 4846, column: 9)
!12383 = !DILocation(line: 4847, column: 19, scope: !12382)
!12384 = !DILocation(line: 4848, column: 15, scope: !12385)
!12385 = distinct !DILexicalBlock(scope: !12382, file: !3, line: 4848, column: 15)
!12386 = !DILocation(line: 4848, column: 35, scope: !12385)
!12387 = !DILocation(line: 4849, column: 17, scope: !12385)
!12388 = !DILocation(line: 4849, column: 37, scope: !12385)
!12389 = !DILocation(line: 4849, column: 15, scope: !12385)
!12390 = !DILocation(line: 4848, column: 15, scope: !12382)
!12391 = !DILocation(line: 4850, column: 13, scope: !12385)
!12392 = !DILocation(line: 4851, column: 9, scope: !12382)
!12393 = !DILocation(line: 4845, column: 50, scope: !12378)
!12394 = !DILocation(line: 4845, column: 7, scope: !12378)
!12395 = distinct !{!12395, !12380, !12396}
!12396 = !DILocation(line: 4851, column: 9, scope: !12373)
!12397 = !DILocation(line: 4855, column: 15, scope: !12363)
!12398 = !DILocation(line: 4855, column: 17, scope: !12363)
!12399 = !DILocation(line: 4855, column: 22, scope: !12363)
!12400 = !DILocation(line: 4855, column: 7, scope: !12363)
!12401 = !DILocation(line: 4857, column: 12, scope: !12402)
!12402 = distinct !DILexicalBlock(scope: !12355, file: !3, line: 4857, column: 12)
!12403 = !DILocation(line: 4857, column: 12, scope: !12355)
!12404 = !DILocation(line: 4861, column: 11, scope: !12405)
!12405 = distinct !DILexicalBlock(scope: !12402, file: !3, line: 4858, column: 5)
!12406 = !DILocation(line: 4861, column: 9, scope: !12405)
!12407 = !DILocation(line: 4862, column: 7, scope: !12405)
!12408 = !DILocation(line: 4865, column: 7, scope: !12405)
!12409 = !DILocation(line: 4872, column: 7, scope: !12410)
!12410 = distinct !DILexicalBlock(scope: !12326, file: !3, line: 4872, column: 7)
!12411 = !DILocation(line: 4872, column: 30, scope: !12410)
!12412 = !DILocation(line: 4872, column: 7, scope: !12326)
!12413 = !DILocalVariable(name: "pred_bbi", scope: !12414, file: !3, line: 4874, type: !874)
!12414 = distinct !DILexicalBlock(scope: !12410, file: !3, line: 4873, column: 5)
!12415 = !DILocation(line: 4874, column: 11, scope: !12414)
!12416 = !DILocation(line: 4876, column: 7, scope: !12414)
!12417 = !DILocation(line: 4878, column: 18, scope: !12414)
!12418 = !DILocation(line: 4878, column: 37, scope: !12414)
!12419 = !DILocation(line: 4878, column: 42, scope: !12414)
!12420 = !DILocation(line: 4878, column: 16, scope: !12414)
!12421 = !DILocation(line: 4879, column: 14, scope: !12414)
!12422 = !DILocation(line: 4879, column: 7, scope: !12414)
!12423 = !DILocation(line: 4883, column: 12, scope: !12410)
!12424 = !DILocation(line: 4883, column: 30, scope: !12410)
!12425 = !DILocation(line: 4883, column: 5, scope: !12410)
!12426 = !DILocation(line: 4884, column: 1, scope: !12326)
!12427 = distinct !DISubprogram(name: "check_for_new_jump", scope: !3, file: !3, line: 5261, type: !12428, scopeLine: 5262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12428 = !DISubroutineType(types: !12429)
!12429 = !{!850, !1391, !874}
!12430 = !DILocalVariable(name: "bb", arg: 1, scope: !12427, file: !3, line: 5261, type: !1391)
!12431 = !DILocation(line: 5261, column: 33, scope: !12427)
!12432 = !DILocalVariable(name: "prev_max_uid", arg: 2, scope: !12427, file: !3, line: 5261, type: !874)
!12433 = !DILocation(line: 5261, column: 41, scope: !12427)
!12434 = !DILocalVariable(name: "end", scope: !12427, file: !3, line: 5263, type: !850)
!12435 = !DILocation(line: 5263, column: 7, scope: !12427)
!12436 = !DILocation(line: 5265, column: 21, scope: !12427)
!12437 = !DILocation(line: 5265, column: 9, scope: !12427)
!12438 = !DILocation(line: 5265, column: 7, scope: !12427)
!12439 = !DILocation(line: 5266, column: 7, scope: !12440)
!12440 = distinct !DILexicalBlock(scope: !12427, file: !3, line: 5266, column: 7)
!12441 = !DILocation(line: 5266, column: 11, scope: !12440)
!12442 = !DILocation(line: 5266, column: 14, scope: !12440)
!12443 = !DILocation(line: 5266, column: 32, scope: !12440)
!12444 = !DILocation(line: 5266, column: 29, scope: !12440)
!12445 = !DILocation(line: 5266, column: 7, scope: !12427)
!12446 = !DILocation(line: 5267, column: 12, scope: !12440)
!12447 = !DILocation(line: 5267, column: 5, scope: !12440)
!12448 = !DILocation(line: 5268, column: 3, scope: !12427)
!12449 = !DILocation(line: 5269, column: 1, scope: !12427)
!12450 = distinct !DISubprogram(name: "get_bb_note_from_pool", scope: !3, file: !3, line: 4764, type: !12451, scopeLine: 4765, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12451 = !DISubroutineType(types: !12452)
!12452 = !{!850}
!12453 = !DILocation(line: 4766, column: 7, scope: !12454)
!12454 = distinct !DILexicalBlock(scope: !12450, file: !3, line: 4766, column: 7)
!12455 = !DILocation(line: 4766, column: 7, scope: !12450)
!12456 = !DILocation(line: 4767, column: 5, scope: !12454)
!12457 = !DILocalVariable(name: "note", scope: !12458, file: !3, line: 4770, type: !850)
!12458 = distinct !DILexicalBlock(scope: !12454, file: !3, line: 4769, column: 5)
!12459 = !DILocation(line: 4770, column: 11, scope: !12458)
!12460 = !DILocation(line: 4770, column: 18, scope: !12458)
!12461 = !DILocation(line: 4772, column: 7, scope: !12458)
!12462 = !DILocation(line: 4772, column: 24, scope: !12458)
!12463 = !DILocation(line: 4773, column: 7, scope: !12458)
!12464 = !DILocation(line: 4773, column: 24, scope: !12458)
!12465 = !DILocation(line: 4775, column: 14, scope: !12458)
!12466 = !DILocation(line: 4775, column: 7, scope: !12458)
!12467 = !DILocation(line: 4777, column: 1, scope: !12450)
!12468 = distinct !DISubprogram(name: "VEC_rtx_base_pop", scope: !414, file: !414, line: 200, type: !12469, scopeLine: 200, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12469 = !DISubroutineType(types: !12470)
!12470 = !{!850, !4196}
!12471 = !DILocalVariable(name: "vec_", arg: 1, scope: !12468, file: !414, line: 200, type: !4196)
!12472 = !DILocation(line: 200, column: 1, scope: !12468)
!12473 = !DILocalVariable(name: "obj_", scope: !12468, file: !414, line: 200, type: !850)
!12474 = distinct !DISubprogram(name: "vinsn_init", scope: !3, file: !3, line: 1171, type: !12475, scopeLine: 1172, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12475 = !DISubroutineType(types: !12476)
!12476 = !{null, !2151, !2104, !1085}
!12477 = !DILocalVariable(name: "vi", arg: 1, scope: !12474, file: !3, line: 1171, type: !2151)
!12478 = !DILocation(line: 1171, column: 21, scope: !12474)
!12479 = !DILocalVariable(name: "insn", arg: 2, scope: !12474, file: !3, line: 1171, type: !2104)
!12480 = !DILocation(line: 1171, column: 32, scope: !12474)
!12481 = !DILocalVariable(name: "force_unique_p", arg: 3, scope: !12474, file: !3, line: 1171, type: !1085)
!12482 = !DILocation(line: 1171, column: 43, scope: !12474)
!12483 = !DILocalVariable(name: "hrcf", scope: !12474, file: !3, line: 1173, type: !12484)
!12484 = !DIDerivedType(tag: DW_TAG_typedef, name: "hash_rtx_callback_function", file: !414, line: 1883, baseType: !12485)
!12485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12486, size: 64)
!12486 = !DISubroutineType(types: !12487)
!12487 = !{!874, !2710, !5, !2055, !7393}
!12488 = !DILocation(line: 1173, column: 30, scope: !12474)
!12489 = !DILocalVariable(name: "insn_class", scope: !12474, file: !3, line: 1174, type: !874)
!12490 = !DILocation(line: 1174, column: 7, scope: !12474)
!12491 = !DILocation(line: 1176, column: 25, scope: !12474)
!12492 = !DILocation(line: 1176, column: 3, scope: !12474)
!12493 = !DILocation(line: 1176, column: 23, scope: !12474)
!12494 = !DILocation(line: 1177, column: 3, scope: !12474)
!12495 = !DILocation(line: 1177, column: 20, scope: !12474)
!12496 = !DILocation(line: 1178, column: 3, scope: !12474)
!12497 = !DILocation(line: 1178, column: 7, scope: !12474)
!12498 = !DILocation(line: 1178, column: 12, scope: !12474)
!12499 = !DILocation(line: 1180, column: 7, scope: !12500)
!12500 = distinct !DILexicalBlock(scope: !12474, file: !3, line: 1180, column: 7)
!12501 = !DILocation(line: 1180, column: 46, scope: !12500)
!12502 = !DILocation(line: 1180, column: 7, scope: !12474)
!12503 = !DILocation(line: 1181, column: 22, scope: !12500)
!12504 = !DILocation(line: 1181, column: 37, scope: !12500)
!12505 = !DILocation(line: 1181, column: 43, scope: !12500)
!12506 = !DILocation(line: 1181, column: 5, scope: !12500)
!12507 = !DILocation(line: 1183, column: 19, scope: !12500)
!12508 = !DILocation(line: 1183, column: 34, scope: !12500)
!12509 = !DILocation(line: 1183, column: 40, scope: !12500)
!12510 = !DILocation(line: 1183, column: 5, scope: !12500)
!12511 = !DILocation(line: 1186, column: 24, scope: !12474)
!12512 = !DILocation(line: 1186, column: 10, scope: !12474)
!12513 = !DILocation(line: 1186, column: 8, scope: !12474)
!12514 = !DILocation(line: 1187, column: 7, scope: !12515)
!12515 = distinct !DILexicalBlock(scope: !12474, file: !3, line: 1187, column: 7)
!12516 = !DILocation(line: 1187, column: 7, scope: !12474)
!12517 = !DILocalVariable(name: "rhs", scope: !12518, file: !3, line: 1189, type: !850)
!12518 = distinct !DILexicalBlock(scope: !12515, file: !3, line: 1188, column: 5)
!12519 = !DILocation(line: 1189, column: 11, scope: !12518)
!12520 = !DILocation(line: 1189, column: 17, scope: !12518)
!12521 = !DILocation(line: 1191, column: 38, scope: !12518)
!12522 = !DILocation(line: 1191, column: 43, scope: !12518)
!12523 = !DILocation(line: 1192, column: 57, scope: !12518)
!12524 = !DILocation(line: 1191, column: 25, scope: !12518)
!12525 = !DILocation(line: 1191, column: 7, scope: !12518)
!12526 = !DILocation(line: 1191, column: 23, scope: !12518)
!12527 = !DILocation(line: 1193, column: 42, scope: !12518)
!12528 = !DILocation(line: 1195, column: 49, scope: !12518)
!12529 = !DILocation(line: 1193, column: 29, scope: !12518)
!12530 = !DILocation(line: 1193, column: 7, scope: !12518)
!12531 = !DILocation(line: 1193, column: 27, scope: !12518)
!12532 = !DILocation(line: 1196, column: 5, scope: !12518)
!12533 = !DILocation(line: 1199, column: 38, scope: !12534)
!12534 = distinct !DILexicalBlock(scope: !12515, file: !3, line: 1198, column: 5)
!12535 = !DILocation(line: 1200, column: 57, scope: !12534)
!12536 = !DILocation(line: 1199, column: 25, scope: !12534)
!12537 = !DILocation(line: 1199, column: 7, scope: !12534)
!12538 = !DILocation(line: 1199, column: 23, scope: !12534)
!12539 = !DILocation(line: 1201, column: 29, scope: !12534)
!12540 = !DILocation(line: 1201, column: 7, scope: !12534)
!12541 = !DILocation(line: 1201, column: 27, scope: !12534)
!12542 = !DILocation(line: 1204, column: 37, scope: !12474)
!12543 = !DILocation(line: 1204, column: 16, scope: !12474)
!12544 = !DILocation(line: 1204, column: 14, scope: !12474)
!12545 = !DILocation(line: 1205, column: 7, scope: !12546)
!12546 = distinct !DILexicalBlock(scope: !12474, file: !3, line: 1205, column: 7)
!12547 = !DILocation(line: 1205, column: 18, scope: !12546)
!12548 = !DILocation(line: 1206, column: 7, scope: !12546)
!12549 = !DILocation(line: 1206, column: 26, scope: !12546)
!12550 = !DILocation(line: 1206, column: 12, scope: !12546)
!12551 = !DILocation(line: 1207, column: 11, scope: !12546)
!12552 = !DILocation(line: 1207, column: 30, scope: !12546)
!12553 = !DILocation(line: 1207, column: 48, scope: !12546)
!12554 = !DILocation(line: 1207, column: 16, scope: !12546)
!12555 = !DILocation(line: 1207, column: 54, scope: !12546)
!12556 = !DILocation(line: 1208, column: 15, scope: !12546)
!12557 = !DILocation(line: 1205, column: 7, scope: !12474)
!12558 = !DILocation(line: 1209, column: 5, scope: !12546)
!12559 = !DILocation(line: 1209, column: 27, scope: !12546)
!12560 = !DILocation(line: 1211, column: 5, scope: !12546)
!12561 = !DILocation(line: 1211, column: 27, scope: !12546)
!12562 = !DILocation(line: 1212, column: 1, scope: !12474)
!12563 = distinct !DISubprogram(name: "init_id_from_df", scope: !3, file: !3, line: 2664, type: !12564, scopeLine: 2665, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12564 = !DISubroutineType(types: !12565)
!12565 = !{null, !2683, !2104, !1085}
!12566 = !DILocalVariable(name: "id", arg: 1, scope: !12563, file: !3, line: 2664, type: !2683)
!12567 = !DILocation(line: 2664, column: 26, scope: !12563)
!12568 = !DILocalVariable(name: "insn", arg: 2, scope: !12563, file: !3, line: 2664, type: !2104)
!12569 = !DILocation(line: 2664, column: 37, scope: !12563)
!12570 = !DILocalVariable(name: "force_unique_p", arg: 3, scope: !12563, file: !3, line: 2664, type: !1085)
!12571 = !DILocation(line: 2664, column: 48, scope: !12563)
!12572 = !DILocation(line: 2666, column: 3, scope: !12563)
!12573 = !DILocation(line: 2668, column: 22, scope: !12563)
!12574 = !DILocation(line: 2668, column: 26, scope: !12563)
!12575 = !DILocation(line: 2668, column: 32, scope: !12563)
!12576 = !DILocation(line: 2668, column: 3, scope: !12563)
!12577 = !DILocation(line: 2669, column: 21, scope: !12563)
!12578 = !DILocation(line: 2669, column: 25, scope: !12563)
!12579 = !DILocation(line: 2669, column: 31, scope: !12563)
!12580 = !DILocation(line: 2669, column: 3, scope: !12563)
!12581 = !DILocation(line: 2671, column: 7, scope: !12582)
!12582 = distinct !DILexicalBlock(scope: !12563, file: !3, line: 2671, column: 7)
!12583 = !DILocation(line: 2671, column: 7, scope: !12563)
!12584 = !DILocation(line: 2672, column: 5, scope: !12582)
!12585 = !DILocation(line: 2674, column: 30, scope: !12563)
!12586 = !DILocation(line: 2674, column: 34, scope: !12563)
!12587 = !DILocation(line: 2674, column: 3, scope: !12563)
!12588 = !DILocation(line: 2675, column: 22, scope: !12563)
!12589 = !DILocation(line: 2675, column: 26, scope: !12563)
!12590 = !DILocation(line: 2675, column: 3, scope: !12563)
!12591 = !DILocation(line: 2676, column: 1, scope: !12563)
!12592 = distinct !DISubprogram(name: "deps_init_id", scope: !3, file: !3, line: 2680, type: !12564, scopeLine: 2681, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12593 = !DILocalVariable(name: "id", arg: 1, scope: !12592, file: !3, line: 2680, type: !2683)
!12594 = !DILocation(line: 2680, column: 23, scope: !12592)
!12595 = !DILocalVariable(name: "insn", arg: 2, scope: !12592, file: !3, line: 2680, type: !2104)
!12596 = !DILocation(line: 2680, column: 34, scope: !12592)
!12597 = !DILocalVariable(name: "force_unique_p", arg: 3, scope: !12592, file: !3, line: 2680, type: !1085)
!12598 = !DILocation(line: 2680, column: 45, scope: !12592)
!12599 = !DILocalVariable(name: "_dc", scope: !12592, file: !3, line: 2682, type: !2114)
!12600 = !DILocation(line: 2682, column: 15, scope: !12592)
!12601 = !DILocalVariable(name: "dc", scope: !12592, file: !3, line: 2682, type: !2113)
!12602 = !DILocation(line: 2682, column: 21, scope: !12592)
!12603 = !DILocation(line: 2684, column: 27, scope: !12592)
!12604 = !DILocation(line: 2685, column: 26, scope: !12592)
!12605 = !DILocation(line: 2685, column: 24, scope: !12592)
!12606 = !DILocation(line: 2686, column: 38, scope: !12592)
!12607 = !DILocation(line: 2686, column: 36, scope: !12592)
!12608 = !DILocation(line: 2687, column: 33, scope: !12592)
!12609 = !DILocation(line: 2689, column: 14, scope: !12592)
!12610 = !DILocation(line: 2689, column: 3, scope: !12592)
!12611 = !DILocation(line: 2691, column: 3, scope: !12592)
!12612 = !DILocation(line: 2695, column: 7, scope: !12613)
!12613 = distinct !DILexicalBlock(scope: !12592, file: !3, line: 2695, column: 7)
!12614 = !DILocation(line: 2695, column: 17, scope: !12613)
!12615 = !DILocation(line: 2695, column: 7, scope: !12592)
!12616 = !DILocation(line: 2696, column: 53, scope: !12613)
!12617 = !DILocation(line: 2696, column: 5, scope: !12613)
!12618 = !DILocation(line: 2698, column: 19, scope: !12592)
!12619 = !DILocation(line: 2700, column: 22, scope: !12592)
!12620 = !DILocation(line: 2700, column: 26, scope: !12592)
!12621 = !DILocation(line: 2700, column: 3, scope: !12592)
!12622 = !DILocation(line: 2702, column: 14, scope: !12592)
!12623 = !DILocation(line: 2702, column: 3, scope: !12592)
!12624 = !DILocation(line: 2704, column: 24, scope: !12592)
!12625 = !DILocation(line: 2705, column: 1, scope: !12592)
!12626 = distinct !DISubprogram(name: "hash_with_unspec_callback", scope: !3, file: !3, line: 1116, type: !12486, scopeLine: 1118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12627 = !DILocalVariable(name: "x", arg: 1, scope: !12626, file: !3, line: 1116, type: !2710)
!12628 = !DILocation(line: 1116, column: 38, scope: !12626)
!12629 = !DILocalVariable(name: "mode", arg: 2, scope: !12626, file: !3, line: 1116, type: !5)
!12630 = !DILocation(line: 1116, column: 59, scope: !12626)
!12631 = !DILocalVariable(name: "nx", arg: 3, scope: !12626, file: !3, line: 1117, type: !2055)
!12632 = !DILocation(line: 1117, column: 33, scope: !12626)
!12633 = !DILocalVariable(name: "nmode", arg: 4, scope: !12626, file: !3, line: 1117, type: !7393)
!12634 = !DILocation(line: 1117, column: 56, scope: !12626)
!12635 = !DILocation(line: 1119, column: 7, scope: !12636)
!12636 = distinct !DILexicalBlock(scope: !12626, file: !3, line: 1119, column: 7)
!12637 = !DILocation(line: 1119, column: 20, scope: !12636)
!12638 = !DILocation(line: 1120, column: 7, scope: !12636)
!12639 = !DILocation(line: 1120, column: 24, scope: !12636)
!12640 = !DILocation(line: 1120, column: 10, scope: !12636)
!12641 = !DILocation(line: 1121, column: 7, scope: !12636)
!12642 = !DILocation(line: 1121, column: 24, scope: !12636)
!12643 = !DILocation(line: 1121, column: 36, scope: !12636)
!12644 = !DILocation(line: 1121, column: 10, scope: !12636)
!12645 = !DILocation(line: 1119, column: 7, scope: !12626)
!12646 = !DILocation(line: 1123, column: 13, scope: !12647)
!12647 = distinct !DILexicalBlock(scope: !12636, file: !3, line: 1122, column: 5)
!12648 = !DILocation(line: 1123, column: 8, scope: !12647)
!12649 = !DILocation(line: 1123, column: 11, scope: !12647)
!12650 = !DILocation(line: 1124, column: 8, scope: !12647)
!12651 = !DILocation(line: 1124, column: 14, scope: !12647)
!12652 = !DILocation(line: 1125, column: 7, scope: !12647)
!12653 = !DILocation(line: 1128, column: 3, scope: !12626)
!12654 = !DILocation(line: 1129, column: 1, scope: !12626)
!12655 = distinct !DISubprogram(name: "setup_id_for_insn", scope: !3, file: !3, line: 2364, type: !12564, scopeLine: 2365, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12656 = !DILocalVariable(name: "id", arg: 1, scope: !12655, file: !3, line: 2364, type: !2683)
!12657 = !DILocation(line: 2364, column: 28, scope: !12655)
!12658 = !DILocalVariable(name: "insn", arg: 2, scope: !12655, file: !3, line: 2364, type: !2104)
!12659 = !DILocation(line: 2364, column: 39, scope: !12655)
!12660 = !DILocalVariable(name: "force_unique_p", arg: 3, scope: !12655, file: !3, line: 2364, type: !1085)
!12661 = !DILocation(line: 2364, column: 50, scope: !12655)
!12662 = !DILocalVariable(name: "type", scope: !12655, file: !3, line: 2366, type: !874)
!12663 = !DILocation(line: 2366, column: 7, scope: !12655)
!12664 = !DILocation(line: 2371, column: 10, scope: !12655)
!12665 = !DILocation(line: 2371, column: 8, scope: !12655)
!12666 = !DILocation(line: 2374, column: 7, scope: !12667)
!12667 = distinct !DILexicalBlock(scope: !12655, file: !3, line: 2374, column: 7)
!12668 = !DILocation(line: 2374, column: 12, scope: !12667)
!12669 = !DILocation(line: 2374, column: 20, scope: !12667)
!12670 = !DILocation(line: 2374, column: 24, scope: !12667)
!12671 = !DILocation(line: 2374, column: 7, scope: !12655)
!12672 = !DILocation(line: 2375, column: 10, scope: !12667)
!12673 = !DILocation(line: 2375, column: 5, scope: !12667)
!12674 = !DILocation(line: 2376, column: 12, scope: !12675)
!12675 = distinct !DILexicalBlock(scope: !12667, file: !3, line: 2376, column: 12)
!12676 = !DILocation(line: 2376, column: 17, scope: !12675)
!12677 = !DILocation(line: 2376, column: 30, scope: !12675)
!12678 = !DILocation(line: 2376, column: 47, scope: !12675)
!12679 = !DILocation(line: 2376, column: 33, scope: !12675)
!12680 = !DILocation(line: 2376, column: 12, scope: !12667)
!12681 = !DILocation(line: 2377, column: 10, scope: !12675)
!12682 = !DILocation(line: 2377, column: 5, scope: !12675)
!12683 = !DILocation(line: 2378, column: 12, scope: !12684)
!12684 = distinct !DILexicalBlock(scope: !12675, file: !3, line: 2378, column: 12)
!12685 = !DILocation(line: 2378, column: 17, scope: !12684)
!12686 = !DILocation(line: 2378, column: 12, scope: !12675)
!12687 = !DILocation(line: 2379, column: 13, scope: !12684)
!12688 = !DILocation(line: 2379, column: 12, scope: !12684)
!12689 = !DILocation(line: 2379, column: 10, scope: !12684)
!12690 = !DILocation(line: 2379, column: 5, scope: !12684)
!12691 = !DILocation(line: 2381, column: 21, scope: !12655)
!12692 = !DILocation(line: 2381, column: 3, scope: !12655)
!12693 = !DILocation(line: 2381, column: 19, scope: !12655)
!12694 = !DILocation(line: 2382, column: 25, scope: !12655)
!12695 = !DILocation(line: 2382, column: 3, scope: !12655)
!12696 = !DILocation(line: 2382, column: 23, scope: !12655)
!12697 = !DILocation(line: 2383, column: 25, scope: !12655)
!12698 = !DILocation(line: 2383, column: 3, scope: !12655)
!12699 = !DILocation(line: 2383, column: 23, scope: !12655)
!12700 = !DILocation(line: 2384, column: 29, scope: !12655)
!12701 = !DILocation(line: 2384, column: 3, scope: !12655)
!12702 = !DILocation(line: 2384, column: 27, scope: !12655)
!12703 = !DILocation(line: 2385, column: 1, scope: !12655)
!12704 = distinct !DISubprogram(name: "setup_id_lhs_rhs", scope: !3, file: !3, line: 2541, type: !12564, scopeLine: 2542, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12705 = !DILocalVariable(name: "id", arg: 1, scope: !12704, file: !3, line: 2541, type: !2683)
!12706 = !DILocation(line: 2541, column: 27, scope: !12704)
!12707 = !DILocalVariable(name: "insn", arg: 2, scope: !12704, file: !3, line: 2541, type: !2104)
!12708 = !DILocation(line: 2541, column: 38, scope: !12704)
!12709 = !DILocalVariable(name: "force_unique_p", arg: 3, scope: !12704, file: !3, line: 2541, type: !1085)
!12710 = !DILocation(line: 2541, column: 49, scope: !12704)
!12711 = !DILocalVariable(name: "pat", scope: !12704, file: !3, line: 2543, type: !850)
!12712 = !DILocation(line: 2543, column: 7, scope: !12704)
!12713 = !DILocation(line: 2543, column: 13, scope: !12704)
!12714 = !DILocation(line: 2545, column: 7, scope: !12715)
!12715 = distinct !DILexicalBlock(scope: !12704, file: !3, line: 2545, column: 7)
!12716 = !DILocation(line: 2546, column: 7, scope: !12715)
!12717 = !DILocation(line: 2546, column: 10, scope: !12715)
!12718 = !DILocation(line: 2546, column: 25, scope: !12715)
!12719 = !DILocation(line: 2547, column: 7, scope: !12715)
!12720 = !DILocation(line: 2547, column: 11, scope: !12715)
!12721 = !DILocation(line: 2545, column: 7, scope: !12704)
!12722 = !DILocation(line: 2549, column: 24, scope: !12723)
!12723 = distinct !DILexicalBlock(scope: !12715, file: !3, line: 2548, column: 5)
!12724 = !DILocation(line: 2549, column: 7, scope: !12723)
!12725 = !DILocation(line: 2549, column: 22, scope: !12723)
!12726 = !DILocation(line: 2550, column: 24, scope: !12723)
!12727 = !DILocation(line: 2550, column: 7, scope: !12723)
!12728 = !DILocation(line: 2550, column: 22, scope: !12723)
!12729 = !DILocation(line: 2551, column: 5, scope: !12723)
!12730 = !DILocation(line: 2553, column: 22, scope: !12715)
!12731 = !DILocation(line: 2553, column: 37, scope: !12715)
!12732 = !DILocation(line: 2553, column: 5, scope: !12715)
!12733 = !DILocation(line: 2553, column: 20, scope: !12715)
!12734 = !DILocation(line: 2554, column: 1, scope: !12704)
!12735 = distinct !DISubprogram(name: "maybe_downgrade_id_to_use", scope: !3, file: !3, line: 2558, type: !12736, scopeLine: 2559, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12736 = !DISubroutineType(types: !12737)
!12737 = !{null, !2683, !2104}
!12738 = !DILocalVariable(name: "id", arg: 1, scope: !12735, file: !3, line: 2558, type: !2683)
!12739 = !DILocation(line: 2558, column: 36, scope: !12735)
!12740 = !DILocalVariable(name: "insn", arg: 2, scope: !12735, file: !3, line: 2558, type: !2104)
!12741 = !DILocation(line: 2558, column: 47, scope: !12735)
!12742 = !DILocalVariable(name: "must_be_use", scope: !12735, file: !3, line: 2560, type: !1085)
!12743 = !DILocation(line: 2560, column: 8, scope: !12735)
!12744 = !DILocalVariable(name: "uid", scope: !12735, file: !3, line: 2561, type: !7)
!12745 = !DILocation(line: 2561, column: 12, scope: !12735)
!12746 = !DILocation(line: 2561, column: 18, scope: !12735)
!12747 = !DILocalVariable(name: "rec", scope: !12735, file: !3, line: 2562, type: !12748)
!12748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12749, size: 64)
!12749 = !DIDerivedType(tag: DW_TAG_typedef, name: "df_ref", file: !796, line: 429, baseType: !12750)
!12750 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12751, size: 64)
!12751 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "df_ref_d", file: !796, line: 422, size: 704, elements: !12752)
!12752 = !{!12753, !12791, !12796, !12801}
!12753 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !12751, file: !796, line: 424, baseType: !12754, size: 512)
!12754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_base_ref", file: !796, line: 356, size: 512, elements: !12755)
!12755 = !{!12756, !12757, !12758, !12759, !12760, !12766, !12786, !12787, !12788, !12789, !12790}
!12756 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !12754, file: !796, line: 360, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!12757 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !12754, file: !796, line: 362, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!12758 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !12754, file: !796, line: 364, baseType: !874, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!12759 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !12754, file: !796, line: 365, baseType: !850, size: 64, offset: 64)
!12760 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !12754, file: !796, line: 366, baseType: !12761, size: 64, offset: 128)
!12761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12762, size: 64)
!12762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_link", file: !796, line: 449, size: 128, elements: !12763)
!12763 = !{!12764, !12765}
!12764 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !12762, file: !796, line: 451, baseType: !12749, size: 64)
!12765 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !12762, file: !796, line: 452, baseType: !12761, size: 64, offset: 64)
!12766 = !DIDerivedType(tag: DW_TAG_member, name: "insn_info", scope: !12754, file: !796, line: 370, baseType: !12767, size: 64, offset: 192)
!12767 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12768, size: 64)
!12768 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_insn_info", file: !796, line: 433, size: 384, elements: !12769)
!12769 = !{!12770, !12771, !12772, !12773, !12774, !12785}
!12770 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !12768, file: !796, line: 435, baseType: !850, size: 64)
!12771 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !12768, file: !796, line: 436, baseType: !12748, size: 64, offset: 64)
!12772 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !12768, file: !796, line: 437, baseType: !12748, size: 64, offset: 128)
!12773 = !DIDerivedType(tag: DW_TAG_member, name: "eq_uses", scope: !12768, file: !796, line: 439, baseType: !12748, size: 64, offset: 192)
!12774 = !DIDerivedType(tag: DW_TAG_member, name: "mw_hardregs", scope: !12768, file: !796, line: 440, baseType: !12775, size: 64, offset: 256)
!12775 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12776, size: 64)
!12776 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !12777, size: 64)
!12777 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_mw_hardreg", file: !796, line: 339, size: 192, elements: !12778)
!12778 = !{!12779, !12780, !12781, !12782, !12783, !12784}
!12779 = !DIDerivedType(tag: DW_TAG_member, name: "mw_reg", scope: !12777, file: !796, line: 341, baseType: !850, size: 64)
!12780 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !12777, file: !796, line: 344, baseType: !7, size: 16, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!12781 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !12777, file: !796, line: 346, baseType: !874, size: 16, offset: 80, flags: DIFlagBitField, extraData: i64 64)
!12782 = !DIDerivedType(tag: DW_TAG_member, name: "start_regno", scope: !12777, file: !796, line: 347, baseType: !7, size: 32, offset: 96)
!12783 = !DIDerivedType(tag: DW_TAG_member, name: "end_regno", scope: !12777, file: !796, line: 348, baseType: !7, size: 32, offset: 128)
!12784 = !DIDerivedType(tag: DW_TAG_member, name: "mw_order", scope: !12777, file: !796, line: 349, baseType: !7, size: 32, offset: 160)
!12785 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !12768, file: !796, line: 444, baseType: !874, size: 32, offset: 320)
!12786 = !DIDerivedType(tag: DW_TAG_member, name: "next_reg", scope: !12754, file: !796, line: 374, baseType: !12750, size: 64, offset: 256)
!12787 = !DIDerivedType(tag: DW_TAG_member, name: "prev_reg", scope: !12754, file: !796, line: 375, baseType: !12750, size: 64, offset: 320)
!12788 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !12754, file: !796, line: 376, baseType: !7, size: 32, offset: 384)
!12789 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !12754, file: !796, line: 379, baseType: !874, size: 32, offset: 416)
!12790 = !DIDerivedType(tag: DW_TAG_member, name: "ref_order", scope: !12754, file: !796, line: 382, baseType: !7, size: 32, offset: 448)
!12791 = !DIDerivedType(tag: DW_TAG_member, name: "regular_ref", scope: !12751, file: !796, line: 425, baseType: !12792, size: 576)
!12792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_regular_ref", file: !796, line: 398, size: 576, elements: !12793)
!12793 = !{!12794, !12795}
!12794 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !12792, file: !796, line: 400, baseType: !12754, size: 512)
!12795 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !12792, file: !796, line: 405, baseType: !2055, size: 64, offset: 512)
!12796 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_ref", scope: !12751, file: !796, line: 426, baseType: !12797, size: 576)
!12797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_artificial_ref", file: !796, line: 388, size: 576, elements: !12798)
!12798 = !{!12799, !12800}
!12799 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !12797, file: !796, line: 390, baseType: !12754, size: 512)
!12800 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !12797, file: !796, line: 394, baseType: !1391, size: 64, offset: 512)
!12801 = !DIDerivedType(tag: DW_TAG_member, name: "extract_ref", scope: !12751, file: !796, line: 427, baseType: !12802, size: 704)
!12802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_extract_ref", file: !796, line: 413, size: 704, elements: !12803)
!12803 = !{!12804, !12805, !12806, !12807}
!12804 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !12802, file: !796, line: 415, baseType: !12792, size: 576)
!12805 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !12802, file: !796, line: 416, baseType: !874, size: 32, offset: 576)
!12806 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !12802, file: !796, line: 417, baseType: !874, size: 32, offset: 608)
!12807 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !12802, file: !796, line: 418, baseType: !5, size: 32, offset: 640)
!12808 = !DILocation(line: 2562, column: 11, scope: !12735)
!12809 = !DILocalVariable(name: "lhs", scope: !12735, file: !3, line: 2563, type: !850)
!12810 = !DILocation(line: 2563, column: 7, scope: !12735)
!12811 = !DILocation(line: 2563, column: 13, scope: !12735)
!12812 = !DILocalVariable(name: "rhs", scope: !12735, file: !3, line: 2564, type: !850)
!12813 = !DILocation(line: 2564, column: 7, scope: !12735)
!12814 = !DILocation(line: 2564, column: 13, scope: !12735)
!12815 = !DILocation(line: 2567, column: 7, scope: !12816)
!12816 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 2567, column: 7)
!12817 = !DILocation(line: 2567, column: 23, scope: !12816)
!12818 = !DILocation(line: 2567, column: 7, scope: !12735)
!12819 = !DILocation(line: 2568, column: 5, scope: !12816)
!12820 = !DILocation(line: 2570, column: 8, scope: !12821)
!12821 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 2570, column: 7)
!12822 = !DILocation(line: 2570, column: 12, scope: !12821)
!12823 = !DILocation(line: 2570, column: 41, scope: !12821)
!12824 = !DILocation(line: 2570, column: 46, scope: !12821)
!12825 = !DILocation(line: 2570, column: 16, scope: !12821)
!12826 = !DILocation(line: 2570, column: 7, scope: !12735)
!12827 = !DILocation(line: 2572, column: 7, scope: !12828)
!12828 = distinct !DILexicalBlock(scope: !12821, file: !3, line: 2571, column: 5)
!12829 = !DILocation(line: 2572, column: 23, scope: !12828)
!12830 = !DILocation(line: 2573, column: 7, scope: !12828)
!12831 = !DILocation(line: 2576, column: 14, scope: !12832)
!12832 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 2576, column: 3)
!12833 = !DILocation(line: 2576, column: 12, scope: !12832)
!12834 = !DILocation(line: 2576, column: 8, scope: !12832)
!12835 = !DILocation(line: 2576, column: 39, scope: !12836)
!12836 = distinct !DILexicalBlock(scope: !12832, file: !3, line: 2576, column: 3)
!12837 = !DILocation(line: 2576, column: 38, scope: !12836)
!12838 = !DILocation(line: 2576, column: 3, scope: !12832)
!12839 = !DILocalVariable(name: "def", scope: !12840, file: !3, line: 2578, type: !12749)
!12840 = distinct !DILexicalBlock(scope: !12836, file: !3, line: 2577, column: 5)
!12841 = !DILocation(line: 2578, column: 14, scope: !12840)
!12842 = !DILocation(line: 2578, column: 21, scope: !12840)
!12843 = !DILocation(line: 2578, column: 20, scope: !12840)
!12844 = !DILocation(line: 2580, column: 11, scope: !12845)
!12845 = distinct !DILexicalBlock(scope: !12840, file: !3, line: 2580, column: 11)
!12846 = !DILocation(line: 2581, column: 11, scope: !12845)
!12847 = !DILocation(line: 2581, column: 14, scope: !12845)
!12848 = !DILocation(line: 2582, column: 11, scope: !12845)
!12849 = !DILocation(line: 2582, column: 34, scope: !12845)
!12850 = !DILocation(line: 2582, column: 52, scope: !12845)
!12851 = !DILocation(line: 2582, column: 14, scope: !12845)
!12852 = !DILocation(line: 2580, column: 11, scope: !12840)
!12853 = !DILocation(line: 2584, column: 23, scope: !12854)
!12854 = distinct !DILexicalBlock(scope: !12845, file: !3, line: 2583, column: 9)
!12855 = !DILocation(line: 2585, column: 11, scope: !12854)
!12856 = !DILocation(line: 2591, column: 11, scope: !12857)
!12857 = distinct !DILexicalBlock(scope: !12840, file: !3, line: 2591, column: 11)
!12858 = !DILocation(line: 2591, column: 11, scope: !12840)
!12859 = !DILocation(line: 2593, column: 16, scope: !12860)
!12860 = distinct !DILexicalBlock(scope: !12857, file: !3, line: 2592, column: 2)
!12861 = !DILocation(line: 2594, column: 4, scope: !12860)
!12862 = !DILocation(line: 2597, column: 5, scope: !12840)
!12863 = !DILocation(line: 2576, column: 47, scope: !12836)
!12864 = !DILocation(line: 2576, column: 3, scope: !12836)
!12865 = distinct !{!12865, !12838, !12866}
!12866 = !DILocation(line: 2597, column: 5, scope: !12832)
!12867 = !DILocation(line: 2599, column: 7, scope: !12868)
!12868 = distinct !DILexicalBlock(scope: !12735, file: !3, line: 2599, column: 7)
!12869 = !DILocation(line: 2599, column: 7, scope: !12735)
!12870 = !DILocation(line: 2600, column: 5, scope: !12868)
!12871 = !DILocation(line: 2600, column: 21, scope: !12868)
!12872 = !DILocation(line: 2601, column: 1, scope: !12735)
!12873 = distinct !DISubprogram(name: "setup_id_reg_sets", scope: !3, file: !3, line: 2605, type: !12736, scopeLine: 2606, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12874 = !DILocalVariable(name: "id", arg: 1, scope: !12873, file: !3, line: 2605, type: !2683)
!12875 = !DILocation(line: 2605, column: 28, scope: !12873)
!12876 = !DILocalVariable(name: "insn", arg: 2, scope: !12873, file: !3, line: 2605, type: !2104)
!12877 = !DILocation(line: 2605, column: 39, scope: !12873)
!12878 = !DILocalVariable(name: "uid", scope: !12873, file: !3, line: 2607, type: !7)
!12879 = !DILocation(line: 2607, column: 12, scope: !12873)
!12880 = !DILocation(line: 2607, column: 18, scope: !12873)
!12881 = !DILocalVariable(name: "rec", scope: !12873, file: !3, line: 2608, type: !12748)
!12882 = !DILocation(line: 2608, column: 11, scope: !12873)
!12883 = !DILocalVariable(name: "tmp", scope: !12873, file: !3, line: 2609, type: !2053)
!12884 = !DILocation(line: 2609, column: 10, scope: !12873)
!12885 = !DILocation(line: 2609, column: 16, scope: !12873)
!12886 = !DILocation(line: 2611, column: 14, scope: !12887)
!12887 = distinct !DILexicalBlock(scope: !12873, file: !3, line: 2611, column: 3)
!12888 = !DILocation(line: 2611, column: 12, scope: !12887)
!12889 = !DILocation(line: 2611, column: 8, scope: !12887)
!12890 = !DILocation(line: 2611, column: 39, scope: !12891)
!12891 = distinct !DILexicalBlock(scope: !12887, file: !3, line: 2611, column: 3)
!12892 = !DILocation(line: 2611, column: 38, scope: !12891)
!12893 = !DILocation(line: 2611, column: 3, scope: !12887)
!12894 = !DILocalVariable(name: "def", scope: !12895, file: !3, line: 2613, type: !12749)
!12895 = distinct !DILexicalBlock(scope: !12891, file: !3, line: 2612, column: 5)
!12896 = !DILocation(line: 2613, column: 14, scope: !12895)
!12897 = !DILocation(line: 2613, column: 21, scope: !12895)
!12898 = !DILocation(line: 2613, column: 20, scope: !12895)
!12899 = !DILocalVariable(name: "regno", scope: !12895, file: !3, line: 2614, type: !7)
!12900 = !DILocation(line: 2614, column: 20, scope: !12895)
!12901 = !DILocation(line: 2614, column: 28, scope: !12895)
!12902 = !DILocation(line: 2617, column: 11, scope: !12903)
!12903 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 2617, column: 11)
!12904 = !DILocation(line: 2617, column: 11, scope: !12895)
!12905 = !DILocation(line: 2619, column: 9, scope: !12903)
!12906 = !DILocation(line: 2620, column: 18, scope: !12907)
!12907 = distinct !DILexicalBlock(scope: !12903, file: !3, line: 2620, column: 16)
!12908 = !DILocation(line: 2620, column: 16, scope: !12903)
!12909 = !DILocation(line: 2622, column: 4, scope: !12910)
!12910 = distinct !DILexicalBlock(scope: !12907, file: !3, line: 2621, column: 9)
!12911 = !DILocation(line: 2627, column: 8, scope: !12912)
!12912 = distinct !DILexicalBlock(scope: !12910, file: !3, line: 2627, column: 8)
!12913 = !DILocation(line: 2627, column: 8, scope: !12910)
!12914 = !DILocation(line: 2628, column: 6, scope: !12912)
!12915 = !DILocation(line: 2630, column: 2, scope: !12910)
!12916 = !DILocation(line: 2632, column: 11, scope: !12917)
!12917 = distinct !DILexicalBlock(scope: !12895, file: !3, line: 2632, column: 11)
!12918 = !DILocation(line: 2633, column: 11, scope: !12917)
!12919 = !DILocation(line: 2633, column: 14, scope: !12917)
!12920 = !DILocation(line: 2633, column: 20, scope: !12917)
!12921 = !DILocation(line: 2632, column: 11, scope: !12895)
!12922 = !DILocation(line: 2634, column: 25, scope: !12917)
!12923 = !DILocation(line: 2634, column: 30, scope: !12917)
!12924 = !DILocation(line: 2634, column: 9, scope: !12917)
!12925 = !DILocation(line: 2635, column: 5, scope: !12895)
!12926 = !DILocation(line: 2611, column: 47, scope: !12891)
!12927 = !DILocation(line: 2611, column: 3, scope: !12891)
!12928 = distinct !{!12928, !12893, !12929}
!12929 = !DILocation(line: 2635, column: 5, scope: !12887)
!12930 = !DILocation(line: 2637, column: 14, scope: !12931)
!12931 = distinct !DILexicalBlock(scope: !12873, file: !3, line: 2637, column: 3)
!12932 = !DILocation(line: 2637, column: 12, scope: !12931)
!12933 = !DILocation(line: 2637, column: 8, scope: !12931)
!12934 = !DILocation(line: 2637, column: 39, scope: !12935)
!12935 = distinct !DILexicalBlock(scope: !12931, file: !3, line: 2637, column: 3)
!12936 = !DILocation(line: 2637, column: 38, scope: !12935)
!12937 = !DILocation(line: 2637, column: 3, scope: !12931)
!12938 = !DILocalVariable(name: "use", scope: !12939, file: !3, line: 2639, type: !12749)
!12939 = distinct !DILexicalBlock(scope: !12935, file: !3, line: 2638, column: 5)
!12940 = !DILocation(line: 2639, column: 14, scope: !12939)
!12941 = !DILocation(line: 2639, column: 21, scope: !12939)
!12942 = !DILocation(line: 2639, column: 20, scope: !12939)
!12943 = !DILocalVariable(name: "regno", scope: !12939, file: !3, line: 2640, type: !7)
!12944 = !DILocation(line: 2640, column: 20, scope: !12939)
!12945 = !DILocation(line: 2640, column: 28, scope: !12939)
!12946 = !DILocation(line: 2644, column: 25, scope: !12947)
!12947 = distinct !DILexicalBlock(scope: !12939, file: !3, line: 2644, column: 11)
!12948 = !DILocation(line: 2644, column: 30, scope: !12947)
!12949 = !DILocation(line: 2644, column: 11, scope: !12947)
!12950 = !DILocation(line: 2644, column: 11, scope: !12939)
!12951 = !DILocation(line: 2645, column: 27, scope: !12947)
!12952 = !DILocation(line: 2645, column: 32, scope: !12947)
!12953 = !DILocation(line: 2645, column: 9, scope: !12947)
!12954 = !DILocation(line: 2646, column: 18, scope: !12955)
!12955 = distinct !DILexicalBlock(scope: !12947, file: !3, line: 2646, column: 16)
!12956 = !DILocation(line: 2646, column: 16, scope: !12947)
!12957 = !DILocation(line: 2648, column: 4, scope: !12958)
!12958 = distinct !DILexicalBlock(scope: !12955, file: !3, line: 2647, column: 2)
!12959 = !DILocation(line: 2653, column: 8, scope: !12960)
!12960 = distinct !DILexicalBlock(scope: !12958, file: !3, line: 2653, column: 8)
!12961 = !DILocation(line: 2653, column: 8, scope: !12958)
!12962 = !DILocation(line: 2654, column: 6, scope: !12960)
!12963 = !DILocation(line: 2656, column: 2, scope: !12958)
!12964 = !DILocation(line: 2657, column: 5, scope: !12939)
!12965 = !DILocation(line: 2637, column: 47, scope: !12935)
!12966 = !DILocation(line: 2637, column: 3, scope: !12935)
!12967 = distinct !{!12967, !12937, !12968}
!12968 = !DILocation(line: 2657, column: 5, scope: !12931)
!12969 = !DILocation(line: 2659, column: 26, scope: !12873)
!12970 = !DILocation(line: 2659, column: 3, scope: !12873)
!12971 = !DILocation(line: 2660, column: 1, scope: !12873)
!12972 = distinct !DISubprogram(name: "lhs_and_rhs_separable_p", scope: !3, file: !3, line: 1133, type: !12973, scopeLine: 1134, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!12973 = !DISubroutineType(types: !12974)
!12974 = !{!1085, !850, !850}
!12975 = !DILocalVariable(name: "lhs", arg: 1, scope: !12972, file: !3, line: 1133, type: !850)
!12976 = !DILocation(line: 1133, column: 30, scope: !12972)
!12977 = !DILocalVariable(name: "rhs", arg: 2, scope: !12972, file: !3, line: 1133, type: !850)
!12978 = !DILocation(line: 1133, column: 39, scope: !12972)
!12979 = !DILocation(line: 1135, column: 7, scope: !12980)
!12980 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1135, column: 7)
!12981 = !DILocation(line: 1135, column: 11, scope: !12980)
!12982 = !DILocation(line: 1135, column: 19, scope: !12980)
!12983 = !DILocation(line: 1135, column: 22, scope: !12980)
!12984 = !DILocation(line: 1135, column: 26, scope: !12980)
!12985 = !DILocation(line: 1135, column: 7, scope: !12972)
!12986 = !DILocation(line: 1136, column: 5, scope: !12980)
!12987 = !DILocation(line: 1142, column: 7, scope: !12988)
!12988 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1142, column: 7)
!12989 = !DILocation(line: 1142, column: 7, scope: !12972)
!12990 = !DILocation(line: 1143, column: 5, scope: !12988)
!12991 = !DILocation(line: 1146, column: 7, scope: !12992)
!12992 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1146, column: 7)
!12993 = !DILocation(line: 1146, column: 7, scope: !12972)
!12994 = !DILocation(line: 1147, column: 7, scope: !12992)
!12995 = !DILocation(line: 1150, column: 7, scope: !12996)
!12996 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1150, column: 7)
!12997 = !DILocation(line: 1150, column: 7, scope: !12972)
!12998 = !DILocation(line: 1151, column: 5, scope: !12996)
!12999 = !DILocation(line: 1156, column: 7, scope: !13000)
!13000 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1156, column: 7)
!13001 = !DILocation(line: 1156, column: 7, scope: !12972)
!13002 = !DILocation(line: 1157, column: 5, scope: !13000)
!13003 = !DILocation(line: 1161, column: 8, scope: !13004)
!13004 = distinct !DILexicalBlock(scope: !12972, file: !3, line: 1161, column: 7)
!13005 = !DILocation(line: 1161, column: 20, scope: !13004)
!13006 = !DILocation(line: 1161, column: 24, scope: !13004)
!13007 = !DILocation(line: 1161, column: 7, scope: !12972)
!13008 = !DILocation(line: 1162, column: 5, scope: !13004)
!13009 = !DILocation(line: 1164, column: 3, scope: !12972)
!13010 = !DILocation(line: 1165, column: 1, scope: !12972)
!13011 = distinct !DISubprogram(name: "deps_init_id_start_insn", scope: !3, file: !3, line: 2389, type: !3100, scopeLine: 2390, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13012 = !DILocalVariable(name: "insn", arg: 1, scope: !13011, file: !3, line: 2389, type: !2104)
!13013 = !DILocation(line: 2389, column: 33, scope: !13011)
!13014 = !DILocation(line: 2391, column: 3, scope: !13011)
!13015 = !DILocation(line: 2393, column: 40, scope: !13011)
!13016 = !DILocation(line: 2393, column: 44, scope: !13011)
!13017 = !DILocation(line: 2394, column: 40, scope: !13011)
!13018 = !DILocation(line: 2393, column: 3, scope: !13011)
!13019 = !DILocation(line: 2395, column: 27, scope: !13011)
!13020 = !DILocation(line: 2396, column: 1, scope: !13011)
!13021 = distinct !DISubprogram(name: "deps_init_id_finish_insn", scope: !3, file: !3, line: 2487, type: !2608, scopeLine: 2488, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13022 = !DILocation(line: 2489, column: 3, scope: !13021)
!13023 = !DILocation(line: 2491, column: 7, scope: !13024)
!13024 = distinct !DILexicalBlock(scope: !13021, file: !3, line: 2491, column: 7)
!13025 = !DILocation(line: 2491, column: 41, scope: !13024)
!13026 = !DILocation(line: 2491, column: 7, scope: !13021)
!13027 = !DILocalVariable(name: "lhs", scope: !13028, file: !3, line: 2493, type: !850)
!13028 = distinct !DILexicalBlock(scope: !13024, file: !3, line: 2492, column: 5)
!13029 = !DILocation(line: 2493, column: 11, scope: !13028)
!13030 = !DILocation(line: 2493, column: 17, scope: !13028)
!13031 = !DILocalVariable(name: "rhs", scope: !13028, file: !3, line: 2494, type: !850)
!13032 = !DILocation(line: 2494, column: 11, scope: !13028)
!13033 = !DILocation(line: 2494, column: 17, scope: !13028)
!13034 = !DILocation(line: 2496, column: 11, scope: !13035)
!13035 = distinct !DILexicalBlock(scope: !13028, file: !3, line: 2496, column: 11)
!13036 = !DILocation(line: 2496, column: 15, scope: !13035)
!13037 = !DILocation(line: 2496, column: 23, scope: !13035)
!13038 = !DILocation(line: 2496, column: 26, scope: !13035)
!13039 = !DILocation(line: 2496, column: 30, scope: !13035)
!13040 = !DILocation(line: 2496, column: 38, scope: !13035)
!13041 = !DILocation(line: 2496, column: 67, scope: !13035)
!13042 = !DILocation(line: 2496, column: 72, scope: !13035)
!13043 = !DILocation(line: 2496, column: 42, scope: !13035)
!13044 = !DILocation(line: 2497, column: 4, scope: !13035)
!13045 = !DILocation(line: 2497, column: 25, scope: !13035)
!13046 = !DILocation(line: 2497, column: 7, scope: !13035)
!13047 = !DILocation(line: 2496, column: 11, scope: !13028)
!13048 = !DILocation(line: 2503, column: 4, scope: !13049)
!13049 = distinct !DILexicalBlock(scope: !13035, file: !3, line: 2498, column: 2)
!13050 = !DILocation(line: 2504, column: 4, scope: !13049)
!13051 = !DILocation(line: 2506, column: 4, scope: !13049)
!13052 = !DILocation(line: 2506, column: 38, scope: !13049)
!13053 = !DILocation(line: 2507, column: 2, scope: !13049)
!13054 = !DILocation(line: 2508, column: 5, scope: !13028)
!13055 = !DILocation(line: 2510, column: 27, scope: !13021)
!13056 = !DILocation(line: 2511, column: 1, scope: !13021)
!13057 = distinct !DISubprogram(name: "deps_init_id_start_lhs", scope: !3, file: !3, line: 2400, type: !2604, scopeLine: 2401, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13058 = !DILocalVariable(name: "lhs", arg: 1, scope: !13057, file: !3, line: 2400, type: !850)
!13059 = !DILocation(line: 2400, column: 29, scope: !13057)
!13060 = !DILocation(line: 2402, column: 3, scope: !13057)
!13061 = !DILocation(line: 2403, column: 3, scope: !13057)
!13062 = !DILocation(line: 2405, column: 7, scope: !13063)
!13063 = distinct !DILexicalBlock(scope: !13057, file: !3, line: 2405, column: 7)
!13064 = !DILocation(line: 2405, column: 41, scope: !13063)
!13065 = !DILocation(line: 2405, column: 7, scope: !13057)
!13066 = !DILocation(line: 2407, column: 42, scope: !13067)
!13067 = distinct !DILexicalBlock(scope: !13063, file: !3, line: 2406, column: 5)
!13068 = !DILocation(line: 2407, column: 7, scope: !13067)
!13069 = !DILocation(line: 2407, column: 40, scope: !13067)
!13070 = !DILocation(line: 2408, column: 31, scope: !13067)
!13071 = !DILocation(line: 2409, column: 5, scope: !13067)
!13072 = !DILocation(line: 2410, column: 1, scope: !13057)
!13073 = distinct !DISubprogram(name: "deps_init_id_finish_lhs", scope: !3, file: !3, line: 2414, type: !2608, scopeLine: 2415, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13074 = !DILocation(line: 2416, column: 27, scope: !13073)
!13075 = !DILocation(line: 2417, column: 1, scope: !13073)
!13076 = distinct !DISubprogram(name: "deps_init_id_start_rhs", scope: !3, file: !3, line: 2464, type: !2604, scopeLine: 2465, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13077 = !DILocalVariable(name: "rhs", arg: 1, scope: !13076, file: !3, line: 2464, type: !850)
!13078 = !DILocation(line: 2464, column: 29, scope: !13076)
!13079 = !DILocation(line: 2466, column: 3, scope: !13076)
!13080 = !DILocation(line: 2469, column: 7, scope: !13081)
!13081 = distinct !DILexicalBlock(scope: !13076, file: !3, line: 2469, column: 7)
!13082 = !DILocation(line: 2469, column: 40, scope: !13081)
!13083 = !DILocation(line: 2469, column: 7, scope: !13076)
!13084 = !DILocation(line: 2471, column: 42, scope: !13085)
!13085 = distinct !DILexicalBlock(scope: !13081, file: !3, line: 2470, column: 5)
!13086 = !DILocation(line: 2471, column: 7, scope: !13085)
!13087 = !DILocation(line: 2471, column: 40, scope: !13085)
!13088 = !DILocation(line: 2472, column: 31, scope: !13085)
!13089 = !DILocation(line: 2473, column: 5, scope: !13085)
!13090 = !DILocation(line: 2474, column: 1, scope: !13076)
!13091 = distinct !DISubprogram(name: "deps_init_id_finish_rhs", scope: !3, file: !3, line: 2478, type: !2608, scopeLine: 2479, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13092 = !DILocation(line: 2480, column: 3, scope: !13091)
!13093 = !DILocation(line: 2482, column: 27, scope: !13091)
!13094 = !DILocation(line: 2483, column: 1, scope: !13091)
!13095 = distinct !DISubprogram(name: "deps_init_id_note_reg_set", scope: !3, file: !3, line: 2421, type: !2616, scopeLine: 2422, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13096 = !DILocalVariable(name: "regno", arg: 1, scope: !13095, file: !3, line: 2421, type: !874)
!13097 = !DILocation(line: 2421, column: 32, scope: !13095)
!13098 = !DILocation(line: 2423, column: 23, scope: !13095)
!13099 = !DILocation(line: 2423, column: 3, scope: !13095)
!13100 = !DILocation(line: 2425, column: 25, scope: !13101)
!13101 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 2425, column: 7)
!13102 = !DILocation(line: 2425, column: 31, scope: !13101)
!13103 = !DILocation(line: 2425, column: 7, scope: !13095)
!13104 = !DILocation(line: 2426, column: 35, scope: !13101)
!13105 = !DILocation(line: 2426, column: 5, scope: !13101)
!13106 = !DILocation(line: 2428, column: 7, scope: !13107)
!13107 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 2428, column: 7)
!13108 = !DILocation(line: 2428, column: 41, scope: !13107)
!13109 = !DILocation(line: 2428, column: 7, scope: !13095)
!13110 = !DILocation(line: 2429, column: 5, scope: !13107)
!13111 = !DILocation(line: 2434, column: 7, scope: !13112)
!13112 = distinct !DILexicalBlock(scope: !13095, file: !3, line: 2434, column: 7)
!13113 = !DILocation(line: 2434, column: 7, scope: !13095)
!13114 = !DILocation(line: 2435, column: 35, scope: !13112)
!13115 = !DILocation(line: 2435, column: 5, scope: !13112)
!13116 = !DILocation(line: 2437, column: 1, scope: !13095)
!13117 = distinct !DISubprogram(name: "deps_init_id_note_reg_clobber", scope: !3, file: !3, line: 2441, type: !2616, scopeLine: 2442, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13118 = !DILocalVariable(name: "regno", arg: 1, scope: !13117, file: !3, line: 2441, type: !874)
!13119 = !DILocation(line: 2441, column: 36, scope: !13117)
!13120 = !DILocation(line: 2443, column: 27, scope: !13117)
!13121 = !DILocation(line: 2443, column: 3, scope: !13117)
!13122 = !DILocation(line: 2445, column: 25, scope: !13123)
!13123 = distinct !DILexicalBlock(scope: !13117, file: !3, line: 2445, column: 7)
!13124 = !DILocation(line: 2445, column: 31, scope: !13123)
!13125 = !DILocation(line: 2445, column: 7, scope: !13117)
!13126 = !DILocation(line: 2446, column: 35, scope: !13123)
!13127 = !DILocation(line: 2446, column: 5, scope: !13123)
!13128 = !DILocation(line: 2448, column: 7, scope: !13129)
!13129 = distinct !DILexicalBlock(scope: !13117, file: !3, line: 2448, column: 7)
!13130 = !DILocation(line: 2448, column: 41, scope: !13129)
!13131 = !DILocation(line: 2448, column: 7, scope: !13117)
!13132 = !DILocation(line: 2449, column: 5, scope: !13129)
!13133 = !DILocation(line: 2450, column: 1, scope: !13117)
!13134 = distinct !DISubprogram(name: "deps_init_id_note_reg_use", scope: !3, file: !3, line: 2454, type: !2616, scopeLine: 2455, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13135 = !DILocalVariable(name: "regno", arg: 1, scope: !13134, file: !3, line: 2454, type: !874)
!13136 = !DILocation(line: 2454, column: 32, scope: !13134)
!13137 = !DILocation(line: 2456, column: 23, scope: !13134)
!13138 = !DILocation(line: 2456, column: 3, scope: !13134)
!13139 = !DILocation(line: 2458, column: 7, scope: !13140)
!13140 = distinct !DILexicalBlock(scope: !13134, file: !3, line: 2458, column: 7)
!13141 = !DILocation(line: 2458, column: 41, scope: !13140)
!13142 = !DILocation(line: 2458, column: 7, scope: !13134)
!13143 = !DILocation(line: 2459, column: 5, scope: !13140)
!13144 = !DILocation(line: 2460, column: 1, scope: !13134)
!13145 = distinct !DISubprogram(name: "number_of_loops", scope: !142, file: !142, line: 459, type: !13146, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13146 = !DISubroutineType(types: !13147)
!13147 = !{!7}
!13148 = !DILocation(line: 461, column: 8, scope: !13149)
!13149 = distinct !DILexicalBlock(scope: !13145, file: !142, line: 461, column: 7)
!13150 = !DILocation(line: 461, column: 7, scope: !13145)
!13151 = !DILocation(line: 462, column: 5, scope: !13149)
!13152 = !DILocation(line: 464, column: 10, scope: !13145)
!13153 = !DILocation(line: 464, column: 3, scope: !13145)
!13154 = !DILocation(line: 465, column: 1, scope: !13145)
!13155 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !142, file: !142, line: 85, type: !13156, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13156 = !DISubroutineType(types: !13157)
!13157 = !{!874, !10112, !7, !10183}
!13158 = !DILocalVariable(name: "vec_", arg: 1, scope: !13155, file: !142, line: 85, type: !10112)
!13159 = !DILocation(line: 85, column: 1, scope: !13155)
!13160 = !DILocalVariable(name: "ix_", arg: 2, scope: !13155, file: !142, line: 85, type: !7)
!13161 = !DILocalVariable(name: "ptr", arg: 3, scope: !13155, file: !142, line: 85, type: !10183)
!13162 = !DILocation(line: 85, column: 1, scope: !13163)
!13163 = distinct !DILexicalBlock(scope: !13155, file: !142, line: 85, column: 1)
!13164 = !DILocation(line: 85, column: 1, scope: !13165)
!13165 = distinct !DILexicalBlock(scope: !13163, file: !142, line: 85, column: 1)
!13166 = !DILocation(line: 85, column: 1, scope: !13167)
!13167 = distinct !DILexicalBlock(scope: !13163, file: !142, line: 85, column: 1)
!13168 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !1374, file: !1374, line: 31, type: !13169, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13169 = !DISubroutineType(types: !13170)
!13170 = !{!874, !4374, !7, !2051}
!13171 = !DILocalVariable(name: "vec_", arg: 1, scope: !13168, file: !1374, line: 31, type: !4374)
!13172 = !DILocation(line: 31, column: 1, scope: !13168)
!13173 = !DILocalVariable(name: "ix_", arg: 2, scope: !13168, file: !1374, line: 31, type: !7)
!13174 = !DILocalVariable(name: "ptr", arg: 3, scope: !13168, file: !1374, line: 31, type: !2051)
!13175 = !DILocation(line: 31, column: 1, scope: !13176)
!13176 = distinct !DILexicalBlock(scope: !13168, file: !1374, line: 31, column: 1)
!13177 = !DILocation(line: 31, column: 1, scope: !13178)
!13178 = distinct !DILexicalBlock(scope: !13176, file: !1374, line: 31, column: 1)
!13179 = !DILocation(line: 31, column: 1, scope: !13180)
!13180 = distinct !DILexicalBlock(scope: !13176, file: !1374, line: 31, column: 1)
!13181 = distinct !DISubprogram(name: "get_loop", scope: !142, file: !142, line: 417, type: !13182, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13182 = !DISubroutineType(types: !13183)
!13183 = !{!1433, !7}
!13184 = !DILocalVariable(name: "num", arg: 1, scope: !13181, file: !142, line: 417, type: !7)
!13185 = !DILocation(line: 417, column: 20, scope: !13181)
!13186 = !DILocation(line: 419, column: 10, scope: !13181)
!13187 = !DILocation(line: 419, column: 3, scope: !13181)
!13188 = distinct !DISubprogram(name: "make_region_from_loop", scope: !3, file: !3, line: 5750, type: !13189, scopeLine: 5751, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13189 = !DISubroutineType(types: !13190)
!13190 = !{!874, !1433}
!13191 = !DILocalVariable(name: "loop", arg: 1, scope: !13188, file: !3, line: 5750, type: !1433)
!13192 = !DILocation(line: 5750, column: 37, scope: !13188)
!13193 = !DILocalVariable(name: "i", scope: !13188, file: !3, line: 5752, type: !7)
!13194 = !DILocation(line: 5752, column: 16, scope: !13188)
!13195 = !DILocalVariable(name: "new_rgn_number", scope: !13188, file: !3, line: 5753, type: !874)
!13196 = !DILocation(line: 5753, column: 7, scope: !13188)
!13197 = !DILocalVariable(name: "inner", scope: !13188, file: !3, line: 5754, type: !1433)
!13198 = !DILocation(line: 5754, column: 16, scope: !13188)
!13199 = !DILocalVariable(name: "bb_ord_index", scope: !13188, file: !3, line: 5757, type: !874)
!13200 = !DILocation(line: 5757, column: 7, scope: !13188)
!13201 = !DILocalVariable(name: "loop_blocks", scope: !13188, file: !3, line: 5758, type: !7045)
!13202 = !DILocation(line: 5758, column: 16, scope: !13188)
!13203 = !DILocalVariable(name: "preheader_block", scope: !13188, file: !3, line: 5759, type: !1391)
!13204 = !DILocation(line: 5759, column: 15, scope: !13188)
!13205 = !DILocation(line: 5761, column: 7, scope: !13206)
!13206 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 5761, column: 7)
!13207 = !DILocation(line: 5761, column: 13, scope: !13206)
!13208 = !DILocation(line: 5762, column: 20, scope: !13206)
!13209 = !DILocation(line: 5762, column: 7, scope: !13206)
!13210 = !DILocation(line: 5761, column: 7, scope: !13188)
!13211 = !DILocation(line: 5763, column: 5, scope: !13206)
!13212 = !DILocation(line: 5766, column: 16, scope: !13213)
!13213 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 5766, column: 3)
!13214 = !DILocation(line: 5766, column: 22, scope: !13213)
!13215 = !DILocation(line: 5766, column: 14, scope: !13213)
!13216 = !DILocation(line: 5766, column: 8, scope: !13213)
!13217 = !DILocation(line: 5766, column: 29, scope: !13218)
!13218 = distinct !DILexicalBlock(scope: !13213, file: !3, line: 5766, column: 3)
!13219 = !DILocation(line: 5766, column: 3, scope: !13213)
!13220 = !DILocation(line: 5767, column: 32, scope: !13221)
!13221 = distinct !DILexicalBlock(scope: !13218, file: !3, line: 5767, column: 9)
!13222 = !DILocation(line: 5767, column: 39, scope: !13221)
!13223 = !DILocation(line: 5767, column: 45, scope: !13221)
!13224 = !DILocation(line: 5767, column: 9, scope: !13221)
!13225 = !DILocation(line: 5767, column: 9, scope: !13218)
!13226 = !DILocation(line: 5768, column: 7, scope: !13221)
!13227 = !DILocation(line: 5767, column: 50, scope: !13221)
!13228 = !DILocation(line: 5766, column: 44, scope: !13218)
!13229 = !DILocation(line: 5766, column: 51, scope: !13218)
!13230 = !DILocation(line: 5766, column: 42, scope: !13218)
!13231 = !DILocation(line: 5766, column: 3, scope: !13218)
!13232 = distinct !{!13232, !13219, !13233}
!13233 = !DILocation(line: 5768, column: 15, scope: !13213)
!13234 = !DILocation(line: 5770, column: 34, scope: !13188)
!13235 = !DILocation(line: 5770, column: 18, scope: !13188)
!13236 = !DILocation(line: 5770, column: 3, scope: !13188)
!13237 = !DILocation(line: 5770, column: 9, scope: !13188)
!13238 = !DILocation(line: 5770, column: 16, scope: !13188)
!13239 = !DILocation(line: 5771, column: 13, scope: !13240)
!13240 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 5771, column: 7)
!13241 = !DILocation(line: 5771, column: 19, scope: !13240)
!13242 = !DILocation(line: 5771, column: 28, scope: !13240)
!13243 = !DILocation(line: 5771, column: 26, scope: !13240)
!13244 = !DILocation(line: 5771, column: 7, scope: !13188)
!13245 = !DILocation(line: 5772, column: 5, scope: !13240)
!13246 = !DILocation(line: 5774, column: 48, scope: !13188)
!13247 = !DILocation(line: 5774, column: 17, scope: !13188)
!13248 = !DILocation(line: 5774, column: 15, scope: !13188)
!13249 = !DILocation(line: 5776, column: 10, scope: !13250)
!13250 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 5776, column: 3)
!13251 = !DILocation(line: 5776, column: 8, scope: !13250)
!13252 = !DILocation(line: 5776, column: 15, scope: !13253)
!13253 = distinct !DILexicalBlock(scope: !13250, file: !3, line: 5776, column: 3)
!13254 = !DILocation(line: 5776, column: 19, scope: !13253)
!13255 = !DILocation(line: 5776, column: 25, scope: !13253)
!13256 = !DILocation(line: 5776, column: 17, scope: !13253)
!13257 = !DILocation(line: 5776, column: 3, scope: !13250)
!13258 = !DILocation(line: 5777, column: 9, scope: !13259)
!13259 = distinct !DILexicalBlock(scope: !13253, file: !3, line: 5777, column: 9)
!13260 = !DILocation(line: 5777, column: 21, scope: !13259)
!13261 = !DILocation(line: 5777, column: 25, scope: !13259)
!13262 = !DILocation(line: 5777, column: 31, scope: !13259)
!13263 = !DILocation(line: 5777, column: 9, scope: !13253)
!13264 = !DILocation(line: 5779, column: 8, scope: !13265)
!13265 = distinct !DILexicalBlock(scope: !13259, file: !3, line: 5778, column: 7)
!13266 = !DILocation(line: 5779, column: 2, scope: !13265)
!13267 = !DILocation(line: 5780, column: 2, scope: !13265)
!13268 = !DILocation(line: 5777, column: 33, scope: !13259)
!13269 = !DILocation(line: 5776, column: 37, scope: !13253)
!13270 = !DILocation(line: 5776, column: 3, scope: !13253)
!13271 = distinct !{!13271, !13257, !13272}
!13272 = !DILocation(line: 5781, column: 7, scope: !13250)
!13273 = !DILocation(line: 5783, column: 42, scope: !13188)
!13274 = !DILocation(line: 5783, column: 21, scope: !13188)
!13275 = !DILocation(line: 5783, column: 49, scope: !13188)
!13276 = !DILocation(line: 5783, column: 19, scope: !13188)
!13277 = !DILocation(line: 5784, column: 3, scope: !13188)
!13278 = !DILocation(line: 5785, column: 3, scope: !13188)
!13279 = !DILocation(line: 5787, column: 20, scope: !13188)
!13280 = !DILocation(line: 5787, column: 18, scope: !13188)
!13281 = !DILocation(line: 5789, column: 28, scope: !13188)
!13282 = !DILocation(line: 5789, column: 60, scope: !13188)
!13283 = !DILocation(line: 5789, column: 3, scope: !13188)
!13284 = !DILocation(line: 5790, column: 12, scope: !13188)
!13285 = !DILocation(line: 5790, column: 30, scope: !13188)
!13286 = !DILocation(line: 5790, column: 47, scope: !13188)
!13287 = !DILocation(line: 5790, column: 3, scope: !13188)
!13288 = !DILocation(line: 5792, column: 10, scope: !13289)
!13289 = distinct !DILexicalBlock(scope: !13188, file: !3, line: 5792, column: 3)
!13290 = !DILocation(line: 5792, column: 8, scope: !13289)
!13291 = !DILocation(line: 5792, column: 15, scope: !13292)
!13292 = distinct !DILexicalBlock(scope: !13289, file: !3, line: 5792, column: 3)
!13293 = !DILocation(line: 5792, column: 19, scope: !13292)
!13294 = !DILocation(line: 5792, column: 25, scope: !13292)
!13295 = !DILocation(line: 5792, column: 17, scope: !13292)
!13296 = !DILocation(line: 5792, column: 3, scope: !13289)
!13297 = !DILocation(line: 5799, column: 7, scope: !13298)
!13298 = distinct !DILexicalBlock(scope: !13292, file: !3, line: 5793, column: 5)
!13299 = !DILocation(line: 5801, column: 13, scope: !13300)
!13300 = distinct !DILexicalBlock(scope: !13298, file: !3, line: 5801, column: 11)
!13301 = !DILocation(line: 5801, column: 11, scope: !13298)
!13302 = !DILocation(line: 5803, column: 29, scope: !13303)
!13303 = distinct !DILexicalBlock(scope: !13300, file: !3, line: 5802, column: 2)
!13304 = !DILocation(line: 5803, column: 41, scope: !13303)
!13305 = !DILocation(line: 5804, column: 36, scope: !13303)
!13306 = !DILocation(line: 5803, column: 4, scope: !13303)
!13307 = !DILocation(line: 5805, column: 13, scope: !13303)
!13308 = !DILocation(line: 5805, column: 31, scope: !13303)
!13309 = !DILocation(line: 5805, column: 43, scope: !13303)
!13310 = !DILocation(line: 5805, column: 47, scope: !13303)
!13311 = !DILocation(line: 5805, column: 4, scope: !13303)
!13312 = !DILocation(line: 5806, column: 2, scope: !13303)
!13313 = !DILocation(line: 5807, column: 5, scope: !13298)
!13314 = !DILocation(line: 5792, column: 37, scope: !13292)
!13315 = !DILocation(line: 5792, column: 3, scope: !13292)
!13316 = distinct !{!13316, !13296, !13317}
!13317 = !DILocation(line: 5807, column: 5, scope: !13289)
!13318 = !DILocation(line: 5809, column: 9, scope: !13188)
!13319 = !DILocation(line: 5809, column: 3, scope: !13188)
!13320 = !DILocation(line: 5810, column: 3, scope: !13188)
!13321 = !DILocation(line: 5812, column: 10, scope: !13188)
!13322 = !DILocation(line: 5812, column: 3, scope: !13188)
!13323 = !DILocation(line: 5813, column: 1, scope: !13188)
!13324 = distinct !DISubprogram(name: "VEC_loop_p_heap_safe_push", scope: !142, file: !142, line: 86, type: !13325, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13325 = !DISubroutineType(types: !13326)
!13326 = !{!10183, !10395, !1460}
!13327 = !DILocalVariable(name: "vec_", arg: 1, scope: !13324, file: !142, line: 86, type: !10395)
!13328 = !DILocation(line: 86, column: 1, scope: !13324)
!13329 = !DILocalVariable(name: "obj_", arg: 2, scope: !13324, file: !142, line: 86, type: !1460)
!13330 = distinct !DISubprogram(name: "bb_top_order_comparator", scope: !3, file: !3, line: 5730, type: !1319, scopeLine: 5731, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13331 = !DILocalVariable(name: "x", arg: 1, scope: !13330, file: !3, line: 5730, type: !1314)
!13332 = !DILocation(line: 5730, column: 38, scope: !13330)
!13333 = !DILocalVariable(name: "y", arg: 2, scope: !13330, file: !3, line: 5730, type: !1314)
!13334 = !DILocation(line: 5730, column: 53, scope: !13330)
!13335 = !DILocalVariable(name: "bb1", scope: !13330, file: !3, line: 5732, type: !1391)
!13336 = !DILocation(line: 5732, column: 15, scope: !13330)
!13337 = !DILocation(line: 5732, column: 44, scope: !13330)
!13338 = !DILocation(line: 5732, column: 22, scope: !13330)
!13339 = !DILocation(line: 5732, column: 21, scope: !13330)
!13340 = !DILocalVariable(name: "bb2", scope: !13330, file: !3, line: 5733, type: !1391)
!13341 = !DILocation(line: 5733, column: 15, scope: !13330)
!13342 = !DILocation(line: 5733, column: 44, scope: !13330)
!13343 = !DILocation(line: 5733, column: 22, scope: !13330)
!13344 = !DILocation(line: 5733, column: 21, scope: !13330)
!13345 = !DILocation(line: 5735, column: 3, scope: !13330)
!13346 = !DILocation(line: 5741, column: 7, scope: !13347)
!13347 = distinct !DILexicalBlock(scope: !13330, file: !3, line: 5741, column: 7)
!13348 = !DILocation(line: 5741, column: 27, scope: !13347)
!13349 = !DILocation(line: 5741, column: 32, scope: !13347)
!13350 = !DILocation(line: 5741, column: 41, scope: !13347)
!13351 = !DILocation(line: 5741, column: 61, scope: !13347)
!13352 = !DILocation(line: 5741, column: 66, scope: !13347)
!13353 = !DILocation(line: 5741, column: 39, scope: !13347)
!13354 = !DILocation(line: 5741, column: 7, scope: !13330)
!13355 = !DILocation(line: 5742, column: 5, scope: !13347)
!13356 = !DILocation(line: 5744, column: 5, scope: !13347)
!13357 = !DILocation(line: 5745, column: 1, scope: !13330)
!13358 = distinct !DISubprogram(name: "SET_BIT", scope: !2528, file: !2528, line: 63, type: !13359, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13359 = !DISubroutineType(types: !13360)
!13360 = !{null, !2527, !7}
!13361 = !DILocalVariable(name: "map", arg: 1, scope: !13358, file: !2528, line: 63, type: !2527)
!13362 = !DILocation(line: 63, column: 18, scope: !13358)
!13363 = !DILocalVariable(name: "bitno", arg: 2, scope: !13358, file: !2528, line: 63, type: !7)
!13364 = !DILocation(line: 63, column: 36, scope: !13358)
!13365 = !DILocation(line: 65, column: 7, scope: !13366)
!13366 = distinct !DILexicalBlock(scope: !13358, file: !2528, line: 65, column: 7)
!13367 = !DILocation(line: 65, column: 12, scope: !13366)
!13368 = !DILocation(line: 65, column: 7, scope: !13358)
!13369 = !DILocalVariable(name: "oldbit", scope: !13370, file: !2528, line: 67, type: !1085)
!13370 = distinct !DILexicalBlock(scope: !13366, file: !2528, line: 66, column: 5)
!13371 = !DILocation(line: 67, column: 12, scope: !13370)
!13372 = !DILocation(line: 68, column: 16, scope: !13370)
!13373 = !DILocation(line: 68, column: 14, scope: !13370)
!13374 = !DILocation(line: 69, column: 12, scope: !13375)
!13375 = distinct !DILexicalBlock(scope: !13370, file: !2528, line: 69, column: 11)
!13376 = !DILocation(line: 69, column: 11, scope: !13370)
!13377 = !DILocation(line: 70, column: 2, scope: !13375)
!13378 = !DILocation(line: 70, column: 7, scope: !13375)
!13379 = !DILocation(line: 70, column: 16, scope: !13375)
!13380 = !DILocation(line: 70, column: 22, scope: !13375)
!13381 = !DILocation(line: 70, column: 41, scope: !13375)
!13382 = !DILocation(line: 71, column: 5, scope: !13370)
!13383 = !DILocation(line: 73, column: 33, scope: !13358)
!13384 = !DILocation(line: 73, column: 40, scope: !13358)
!13385 = !DILocation(line: 73, column: 29, scope: !13358)
!13386 = !DILocation(line: 72, column: 3, scope: !13358)
!13387 = !DILocation(line: 72, column: 8, scope: !13358)
!13388 = !DILocation(line: 72, column: 13, scope: !13358)
!13389 = !DILocation(line: 72, column: 19, scope: !13358)
!13390 = !DILocation(line: 73, column: 5, scope: !13358)
!13391 = !DILocation(line: 74, column: 1, scope: !13358)
!13392 = distinct !DISubprogram(name: "VEC_loop_p_heap_reserve", scope: !142, file: !142, line: 86, type: !13393, scopeLine: 86, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13393 = !DISubroutineType(types: !13394)
!13394 = !{!874, !10395, !874}
!13395 = !DILocalVariable(name: "vec_", arg: 1, scope: !13392, file: !142, line: 86, type: !10395)
!13396 = !DILocation(line: 86, column: 1, scope: !13392)
!13397 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13392, file: !142, line: 86, type: !874)
!13398 = !DILocalVariable(name: "extend", scope: !13392, file: !142, line: 86, type: !874)
!13399 = !DILocation(line: 86, column: 1, scope: !13400)
!13400 = distinct !DILexicalBlock(scope: !13392, file: !142, line: 86, column: 1)
!13401 = distinct !DISubprogram(name: "VEC_loop_p_base_quick_push", scope: !142, file: !142, line: 85, type: !13402, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13402 = !DISubroutineType(types: !13403)
!13403 = !{!10183, !13404, !1460}
!13404 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1453, size: 64)
!13405 = !DILocalVariable(name: "vec_", arg: 1, scope: !13401, file: !142, line: 85, type: !13404)
!13406 = !DILocation(line: 85, column: 1, scope: !13401)
!13407 = !DILocalVariable(name: "obj_", arg: 2, scope: !13401, file: !142, line: 85, type: !1460)
!13408 = !DILocalVariable(name: "slot_", scope: !13401, file: !142, line: 85, type: !10183)
!13409 = distinct !DISubprogram(name: "VEC_loop_p_base_space", scope: !142, file: !142, line: 85, type: !13410, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13410 = !DISubroutineType(types: !13411)
!13411 = !{!874, !13404, !874}
!13412 = !DILocalVariable(name: "vec_", arg: 1, scope: !13409, file: !142, line: 85, type: !13404)
!13413 = !DILocation(line: 85, column: 1, scope: !13409)
!13414 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13409, file: !142, line: 85, type: !874)
!13415 = distinct !DISubprogram(name: "VEC_basic_block_heap_reserve", scope: !155, file: !155, line: 283, type: !13416, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13416 = !DISubroutineType(types: !13417)
!13417 = !{!874, !7096, !874}
!13418 = !DILocalVariable(name: "vec_", arg: 1, scope: !13415, file: !155, line: 283, type: !7096)
!13419 = !DILocation(line: 283, column: 1, scope: !13415)
!13420 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13415, file: !155, line: 283, type: !874)
!13421 = !DILocalVariable(name: "extend", scope: !13415, file: !155, line: 283, type: !874)
!13422 = !DILocation(line: 283, column: 1, scope: !13423)
!13423 = distinct !DILexicalBlock(scope: !13415, file: !155, line: 283, column: 1)
!13424 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !155, file: !155, line: 281, type: !13425, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2750)
!13425 = !DISubroutineType(types: !13426)
!13426 = !{!874, !7046, !874}
!13427 = !DILocalVariable(name: "vec_", arg: 1, scope: !13424, file: !155, line: 281, type: !7046)
!13428 = !DILocation(line: 281, column: 1, scope: !13424)
!13429 = !DILocalVariable(name: "alloc_", arg: 2, scope: !13424, file: !155, line: 281, type: !874)
