; ModuleID = 'calls.c'
source_filename = "calls.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type opaque
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.rtl_data = type { %struct.expr_status, %struct.emit_status, %struct.varasm_status, %struct.incoming_args, %struct.function_subsections, %struct.rtl_eh, i32, %struct.rtx_def*, %struct.initial_value_struct*, %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i64, %struct.rtx_def*, %struct.VEC_temp_slot_p_gc*, %struct.temp_slot*, i32, i32, i32, i32, i32, i32, %struct.rtx_def*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.expr_status = type { i32, i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def* }
%struct.emit_status = type { i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack*, i32, i32, i32, i32, i8* }
%struct.sequence_stack = type { %struct.rtx_def*, %struct.rtx_def*, %struct.sequence_stack* }
%struct.varasm_status = type { %struct.rtx_constant_pool*, i32 }
%struct.rtx_constant_pool = type opaque
%struct.incoming_args = type { i32, i32, i32, %struct.rtx_def*, %struct.ix86_args, %struct.rtx_def* }
%struct.function_subsections = type { i8*, i8*, i8*, i8*, i8* }
%struct.rtl_eh = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.VEC_uchar_gc*, [2 x %struct.VEC_call_site_record_gc*] }
%struct.VEC_uchar_gc = type { %struct.VEC_uchar_base }
%struct.VEC_uchar_base = type { i32, i32, [1 x i8] }
%struct.VEC_call_site_record_gc = type { %struct.VEC_call_site_record_base }
%struct.VEC_call_site_record_base = type { i32, i32, [1 x %struct.call_site_record_d*] }
%struct.call_site_record_d = type opaque
%struct.initial_value_struct = type opaque
%struct.VEC_temp_slot_p_gc = type { %struct.VEC_temp_slot_p_base }
%struct.VEC_temp_slot_p_base = type { i32, i32, [1 x %struct.temp_slot*] }
%struct.temp_slot = type opaque
%struct.lang_hooks = type { i8*, i64, void (%union.tree_node*)*, i64 (i32)*, i32 (i32, i8**)*, void (%struct.diagnostic_context*)*, i32 (i64, i8*, i32)*, i8 (i8*, i64)*, i8 (i8**)*, i8 ()*, void ()*, void (i32)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void ()*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i8* (%union.tree_node*, i32)*, i32 (%union.tree_node*, %union.tree_node*)*, void (%struct.diagnostic_context*, i8*, %struct.diagnostic_info*)*, i64 (i64)*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.attribute_spec*, %struct.lang_hooks_for_tree_inlining, %struct.lang_hooks_for_callgraph, %struct.lang_hooks_for_tree_dump, %struct.lang_hooks_for_decls, %struct.lang_hooks_for_types, %struct.lang_hooks_for_lto, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node**, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void ()*, %union.tree_node* (%union.tree_node*, i8*, i8*)*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, i8 }
%struct.diagnostic_context = type opaque
%struct.diagnostic_info = type opaque
%struct.lang_hooks_for_tree_inlining = type { i8 (%union.tree_node*, %union.tree_node*)* }
%struct.lang_hooks_for_callgraph = type { %union.tree_node* (%union.tree_node**, i32*)* }
%struct.lang_hooks_for_tree_dump = type { i8 (i8*, %union.tree_node*)*, i32 (%union.tree_node*)* }
%struct.lang_hooks_for_decls = type { i32 ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i8 (%union.tree_node*)*, void ()*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i32 (%union.tree_node*)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*, i8)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)* }
%struct.lang_hooks_for_types = type { %union.tree_node* (i32)*, i32 (%union.tree_node*)*, %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, i8*)*, void (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%struct.gimplify_omp_ctx*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %struct.array_descr_info*)*, void (%union.tree_node*, %union.tree_node**, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i8 }
%struct.gimplify_omp_ctx = type opaque
%struct.array_descr_info = type opaque
%struct.lang_hooks_for_lto = type { void (i8*)*, void (i8*, i64, i8*)*, void ()* }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.gcc_debug_hooks = type { void (i8*)*, void (i8*)*, void ()*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (i32)*, void (i32, i32)*, void (i32, i32)*, i8 (%union.tree_node*)*, void (i32, i8*, i32, i8)*, void (i32, i8*)*, void (i32, i8*)*, void (i32, i8*)*, void (%union.tree_node*)*, void (i32)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%union.tree_node*, %union.tree_node*, %union.tree_node*, i8)*, void (%union.tree_node*)*, void (%union.tree_node*)*, void (%struct.rtx_def*)*, void (i32)*, void (%struct.rtx_def*)*, void ()*, void (%union.tree_node*)*, void (%union.tree_node*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void (i32)*, void (%union.tree_node*, %union.tree_node*)*, i32 }
%struct.tree_identifier = type { %struct.tree_common, %struct.ht_identifier }
%struct.ht_identifier = type { i8*, i32, i32 }
%struct.tree_exp = type { %struct.tree_common, i32, %union.tree_node*, [1 x %union.tree_node*] }
%struct.arg_data = type { %union.tree_node*, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32, %struct.locate_and_pad_arg_data, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def**, i32 }
%struct.locate_and_pad_arg_data = type { %struct.args_size, %struct.args_size, %struct.args_size, %struct.args_size, i32, i32 }
%struct.args_size = type { i64, %union.tree_node* }
%struct.call_expr_arg_iterator_d = type { %union.tree_node*, i32, i32 }
%struct.cgraph_rtl_info = type { i32 }
%struct.tree_type = type { %struct.tree_common, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32, i32, i32, i32, %union.tree_node*, %union.tree_node*, %union.tree_type_symtab, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_type* }
%union.tree_type_symtab = type { i8* }
%struct.lang_type = type opaque
%struct.tree_int_cst = type { %struct.tree_common, %struct.double_int }
%struct.double_int = type { i64, i64 }
%struct.rtvec_def = type { i32, [1 x %struct.rtx_def*] }
%struct.tree_list = type { %struct.tree_common, %union.tree_node*, %union.tree_node* }
%struct.__va_list_tag = type { i32, i32, i8*, i8* }
%struct.arg = type { %struct.rtx_def*, i32, %struct.rtx_def*, i32, %struct.locate_and_pad_arg_data, %struct.rtx_def* }

@.str = private unnamed_addr constant [8 x i8] c"calls.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@targetm = external dso_local global %struct.gcc_target, align 8
@tree_code_type = external dso_local constant [0 x i32], align 4
@mode_size = external dso_local global [87 x i8], align 16
@optab_table = external dso_local global [159 x %struct.optab_d], align 16
@expand_call.currently_expanding_call = internal global i32 0, align 4, !dbg !0
@target_flags = external dso_local global i32, align 4
@highest_outgoing_arg_in_use = internal global i32 0, align 4, !dbg !3510
@stack_usage_map = internal global i8* null, align 8, !dbg !3508
@x_rtl = external dso_local global %struct.rtl_data, align 8
@.str.2 = private unnamed_addr constant [34 x i8] c"function call has aggregate value\00", align 1
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@ix86_preferred_stack_boundary = external dso_local global i32, align 4
@cfun = external dso_local global %struct.function*, align 8
@stack_arg_under_construction = internal global i32 0, align 4, !dbg !3525
@global_rtl = external dso_local global [11 x %struct.rtx_def*], align 16
@flag_optimize_sibling_calls = external dso_local global i32, align 4
@current_function_decl = external dso_local global %union.tree_node*, align 8
@lang_hooks = external dso_local global %struct.lang_hooks, align 8
@flag_exceptions = external dso_local global i32, align 4
@stored_args_map = internal global %struct.simple_bitmap_def* null, align 8, !dbg !3512
@sizetype_tab = external dso_local global [4 x %union.tree_node*], align 16
@global_trees = external dso_local global [131 x %union.tree_node*], align 16
@ix86_isa_flags = external dso_local global i32, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"alloca\00", align 1
@.str.4 = private unnamed_addr constant [17 x i8] c"__builtin_alloca\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"uiltin_\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"setjmp\00", align 1
@.str.7 = private unnamed_addr constant [15 x i8] c"setjmp_syscall\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"sigsetjmp\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"savectx\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"siglongjmp\00", align 1
@.str.11 = private unnamed_addr constant [8 x i8] c"qsetjmp\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"vfork\00", align 1
@.str.13 = private unnamed_addr constant [11 x i8] c"getcontext\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"longjmp\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.15 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@integer_types = external dso_local global [11 x %union.tree_node*], align 16
@flag_stack_check = external dso_local global i32, align 4
@mode_class = external dso_local constant [87 x i8], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@optimize = external dso_local global i32, align 4
@rtx_format = external dso_local constant [139 x i8*], align 16
@rtx_length = external dso_local constant [139 x i8], align 16
@word_mode = external dso_local global i32, align 4
@flag_enable_icf_debug = external dso_local global i32, align 4
@debug_hooks = external dso_local global %struct.gcc_debug_hooks*, align 8
@flag_defer_pop = external dso_local global i32, align 4
@regclass_map = external dso_local constant [53 x i32], align 16
@generating_concat_p = external dso_local global i32, align 4
@virtuals_instantiated = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @prepare_call_address(%union.tree_node* %fndecl, %struct.rtx_def* %funexp, %struct.rtx_def* %static_chain_value, %struct.rtx_def** %call_fusage, i32 %reg_parm_seen, i32 %sibcallp) #0 !dbg !3531 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %funexp.addr = alloca %struct.rtx_def*, align 8
  %static_chain_value.addr = alloca %struct.rtx_def*, align 8
  %call_fusage.addr = alloca %struct.rtx_def**, align 8
  %reg_parm_seen.addr = alloca i32, align 4
  %sibcallp.addr = alloca i32, align 4
  %chain = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3534, metadata !DIExpression()), !dbg !3535
  store %struct.rtx_def* %funexp, %struct.rtx_def** %funexp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %funexp.addr, metadata !3536, metadata !DIExpression()), !dbg !3537
  store %struct.rtx_def* %static_chain_value, %struct.rtx_def** %static_chain_value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %static_chain_value.addr, metadata !3538, metadata !DIExpression()), !dbg !3539
  store %struct.rtx_def** %call_fusage, %struct.rtx_def*** %call_fusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %call_fusage.addr, metadata !3540, metadata !DIExpression()), !dbg !3541
  store i32 %reg_parm_seen, i32* %reg_parm_seen.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg_parm_seen.addr, metadata !3542, metadata !DIExpression()), !dbg !3543
  store i32 %sibcallp, i32* %sibcallp.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %sibcallp.addr, metadata !3544, metadata !DIExpression()), !dbg !3545
  %0 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !3546
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3546
  %bf.load = load i32, i32* %1, align 8, !dbg !3546
  %bf.clear = and i32 %bf.load, 65535, !dbg !3546
  %cmp = icmp ne i32 %bf.clear, 45, !dbg !3548
  br i1 %cmp, label %if.then, label %if.else, !dbg !3549

if.then:                                          ; preds = %entry
  %2 = load i32, i32* %reg_parm_seen.addr, align 4, !dbg !3550
  %tobool = icmp ne i32 %2, 0, !dbg !3550
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !3551

cond.true:                                        ; preds = %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !3552
  %call = call %struct.rtx_def* @memory_address_addr_space(i32 14, %struct.rtx_def* %3, i8 zeroext 0), !dbg !3552
  %call1 = call %struct.rtx_def* @force_not_mem(%struct.rtx_def* %call), !dbg !3553
  br label %cond.end, !dbg !3551

cond.false:                                       ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !3554
  %call2 = call %struct.rtx_def* @memory_address_addr_space(i32 14, %struct.rtx_def* %4, i8 zeroext 0), !dbg !3554
  br label %cond.end, !dbg !3551

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call1, %cond.true ], [ %call2, %cond.false ], !dbg !3551
  store %struct.rtx_def* %cond, %struct.rtx_def** %funexp.addr, align 8, !dbg !3555
  br label %if.end5, !dbg !3556

if.else:                                          ; preds = %entry
  %5 = load i32, i32* %sibcallp.addr, align 4, !dbg !3557
  %tobool3 = icmp ne i32 %5, 0, !dbg !3557
  br i1 %tobool3, label %if.end, label %if.then4, !dbg !3559

if.then4:                                         ; preds = %if.else
  br label %if.end, !dbg !3560

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end, %cond.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %static_chain_value.addr, align 8, !dbg !3562
  %cmp6 = icmp ne %struct.rtx_def* %6, null, !dbg !3564
  br i1 %cmp6, label %if.then7, label %if.end21, !dbg !3565

if.then7:                                         ; preds = %if.end5
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %chain, metadata !3566, metadata !DIExpression()), !dbg !3568
  %7 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3569
  %tobool8 = icmp ne %union.tree_node* %7, null, !dbg !3569
  br i1 %tobool8, label %cond.false10, label %cond.true9, !dbg !3569

cond.true9:                                       ; preds = %if.then7
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 193, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3569
  br label %cond.end11, !dbg !3569

cond.false10:                                     ; preds = %if.then7
  br label %cond.end11, !dbg !3569

cond.end11:                                       ; preds = %cond.false10, %cond.true9
  %cond12 = phi i32 [ 0, %cond.true9 ], [ 0, %cond.false10 ], !dbg !3569
  %8 = load %struct.rtx_def* (%union.tree_node*, i8)*, %struct.rtx_def* (%union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 21), align 8, !dbg !3570
  %9 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3571
  %call13 = call %struct.rtx_def* %8(%union.tree_node* %9, i8 zeroext 0), !dbg !3572
  store %struct.rtx_def* %call13, %struct.rtx_def** %chain, align 8, !dbg !3573
  %10 = load %struct.rtx_def*, %struct.rtx_def** %static_chain_value.addr, align 8, !dbg !3574
  %call14 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %10, i8 zeroext 0), !dbg !3574
  store %struct.rtx_def* %call14, %struct.rtx_def** %static_chain_value.addr, align 8, !dbg !3575
  %11 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !3576
  %12 = load %struct.rtx_def*, %struct.rtx_def** %static_chain_value.addr, align 8, !dbg !3577
  %call15 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %11, %struct.rtx_def* %12), !dbg !3578
  %13 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !3579
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !3579
  %bf.load16 = load i32, i32* %14, align 8, !dbg !3579
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !3579
  %cmp18 = icmp eq i32 %bf.clear17, 37, !dbg !3579
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !3581

if.then19:                                        ; preds = %cond.end11
  %15 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8, !dbg !3582
  %16 = load %struct.rtx_def*, %struct.rtx_def** %chain, align 8, !dbg !3583
  call void @use_reg(%struct.rtx_def** %15, %struct.rtx_def* %16), !dbg !3584
  br label %if.end20, !dbg !3584

if.end20:                                         ; preds = %if.then19, %cond.end11
  br label %if.end21, !dbg !3585

if.end21:                                         ; preds = %if.end20, %if.end5
  %17 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !3586
  ret %struct.rtx_def* %17, !dbg !3587
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local %struct.rtx_def* @force_not_mem(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

declare dso_local %struct.rtx_def* @convert_memory_address_addr_space(i32, %struct.rtx_def*, i8 zeroext) #2

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @use_reg(%struct.rtx_def**, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @setjmp_call_p(%union.tree_node* %fndecl) #0 !dbg !3588 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3594, metadata !DIExpression()), !dbg !3595
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3596
  %call = call i32 @special_function_p(%union.tree_node* %0, i32 0), !dbg !3597
  %and = and i32 %call, 128, !dbg !3598
  ret i32 %and, !dbg !3599
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @special_function_p(%union.tree_node* %fndecl, i32 %flags) #0 !dbg !3600 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %flags.addr = alloca i32, align 4
  %name17 = alloca i8*, align 8
  %tname = alloca i8*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !3603, metadata !DIExpression()), !dbg !3604
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3605, metadata !DIExpression()), !dbg !3606
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3607
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !3607
  br i1 %tobool, label %land.lhs.true, label %if.end196, !dbg !3609

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3610
  %decl_minimal = bitcast %union.tree_node* %1 to %struct.tree_decl_minimal*, !dbg !3610
  %name = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal, i32 0, i32 3, !dbg !3610
  %2 = load %union.tree_node*, %union.tree_node** %name, align 8, !dbg !3610
  %tobool1 = icmp ne %union.tree_node* %2, null, !dbg !3610
  br i1 %tobool1, label %land.lhs.true2, label %if.end196, !dbg !3611

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3612
  %decl_minimal3 = bitcast %union.tree_node* %3 to %struct.tree_decl_minimal*, !dbg !3612
  %name4 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal3, i32 0, i32 3, !dbg !3612
  %4 = load %union.tree_node*, %union.tree_node** %name4, align 8, !dbg !3612
  %identifier = bitcast %union.tree_node* %4 to %struct.tree_identifier*, !dbg !3612
  %id = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier, i32 0, i32 1, !dbg !3612
  %len = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id, i32 0, i32 1, !dbg !3612
  %5 = load i32, i32* %len, align 8, !dbg !3612
  %cmp = icmp ule i32 %5, 17, !dbg !3613
  br i1 %cmp, label %land.lhs.true5, label %if.end196, !dbg !3614

land.lhs.true5:                                   ; preds = %land.lhs.true2
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3615
  %decl_minimal6 = bitcast %union.tree_node* %6 to %struct.tree_decl_minimal*, !dbg !3615
  %context = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal6, i32 0, i32 4, !dbg !3615
  %7 = load %union.tree_node*, %union.tree_node** %context, align 8, !dbg !3615
  %cmp7 = icmp eq %union.tree_node* %7, null, !dbg !3616
  br i1 %cmp7, label %land.lhs.true11, label %lor.lhs.false, !dbg !3617

lor.lhs.false:                                    ; preds = %land.lhs.true5
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3618
  %decl_minimal8 = bitcast %union.tree_node* %8 to %struct.tree_decl_minimal*, !dbg !3618
  %context9 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal8, i32 0, i32 4, !dbg !3618
  %9 = load %union.tree_node*, %union.tree_node** %context9, align 8, !dbg !3618
  %base = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3618
  %10 = bitcast %struct.tree_base* %base to i64*, !dbg !3618
  %bf.load = load i64, i64* %10, align 8, !dbg !3618
  %bf.clear = and i64 %bf.load, 65535, !dbg !3618
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3618
  %cmp10 = icmp eq i32 %bf.cast, 40, !dbg !3619
  br i1 %cmp10, label %land.lhs.true11, label %if.end196, !dbg !3620

land.lhs.true11:                                  ; preds = %lor.lhs.false, %land.lhs.true5
  %11 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3621
  %base12 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !3621
  %12 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3621
  %bf.load13 = load i64, i64* %12, align 8, !dbg !3621
  %bf.lshr = lshr i64 %bf.load13, 27, !dbg !3621
  %bf.clear14 = and i64 %bf.lshr, 1, !dbg !3621
  %bf.cast15 = trunc i64 %bf.clear14 to i32, !dbg !3621
  %tobool16 = icmp ne i32 %bf.cast15, 0, !dbg !3621
  br i1 %tobool16, label %if.then, label %if.end196, !dbg !3622

if.then:                                          ; preds = %land.lhs.true11
  call void @llvm.dbg.declare(metadata i8** %name17, metadata !3623, metadata !DIExpression()), !dbg !3625
  %13 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3626
  %decl_minimal18 = bitcast %union.tree_node* %13 to %struct.tree_decl_minimal*, !dbg !3626
  %name19 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal18, i32 0, i32 3, !dbg !3626
  %14 = load %union.tree_node*, %union.tree_node** %name19, align 8, !dbg !3626
  %identifier20 = bitcast %union.tree_node* %14 to %struct.tree_identifier*, !dbg !3626
  %id21 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier20, i32 0, i32 1, !dbg !3626
  %str = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id21, i32 0, i32 0, !dbg !3626
  %15 = load i8*, i8** %str, align 8, !dbg !3626
  store i8* %15, i8** %name17, align 8, !dbg !3625
  call void @llvm.dbg.declare(metadata i8** %tname, metadata !3627, metadata !DIExpression()), !dbg !3628
  %16 = load i8*, i8** %name17, align 8, !dbg !3629
  store i8* %16, i8** %tname, align 8, !dbg !3628
  %17 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3630
  %decl_minimal22 = bitcast %union.tree_node* %17 to %struct.tree_decl_minimal*, !dbg !3630
  %name23 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal22, i32 0, i32 3, !dbg !3630
  %18 = load %union.tree_node*, %union.tree_node** %name23, align 8, !dbg !3630
  %identifier24 = bitcast %union.tree_node* %18 to %struct.tree_identifier*, !dbg !3630
  %id25 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier24, i32 0, i32 1, !dbg !3630
  %len26 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id25, i32 0, i32 1, !dbg !3630
  %19 = load i32, i32* %len26, align 8, !dbg !3630
  %cmp27 = icmp eq i32 %19, 6, !dbg !3632
  br i1 %cmp27, label %land.lhs.true28, label %lor.lhs.false33, !dbg !3633

land.lhs.true28:                                  ; preds = %if.then
  %20 = load i8*, i8** %name17, align 8, !dbg !3634
  %arrayidx = getelementptr inbounds i8, i8* %20, i64 0, !dbg !3634
  %21 = load i8, i8* %arrayidx, align 1, !dbg !3634
  %conv = sext i8 %21 to i32, !dbg !3634
  %cmp29 = icmp eq i32 %conv, 97, !dbg !3635
  br i1 %cmp29, label %land.lhs.true31, label %lor.lhs.false33, !dbg !3636

land.lhs.true31:                                  ; preds = %land.lhs.true28
  %22 = load i8*, i8** %name17, align 8, !dbg !3637
  %call = call i32 @strcmp(i8* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0)), !dbg !3638
  %tobool32 = icmp ne i32 %call, 0, !dbg !3638
  br i1 %tobool32, label %lor.lhs.false33, label %if.then49, !dbg !3639

lor.lhs.false33:                                  ; preds = %land.lhs.true31, %land.lhs.true28, %if.then
  %23 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !3640
  %decl_minimal34 = bitcast %union.tree_node* %23 to %struct.tree_decl_minimal*, !dbg !3640
  %name35 = getelementptr inbounds %struct.tree_decl_minimal, %struct.tree_decl_minimal* %decl_minimal34, i32 0, i32 3, !dbg !3640
  %24 = load %union.tree_node*, %union.tree_node** %name35, align 8, !dbg !3640
  %identifier36 = bitcast %union.tree_node* %24 to %struct.tree_identifier*, !dbg !3640
  %id37 = getelementptr inbounds %struct.tree_identifier, %struct.tree_identifier* %identifier36, i32 0, i32 1, !dbg !3640
  %len38 = getelementptr inbounds %struct.ht_identifier, %struct.ht_identifier* %id37, i32 0, i32 1, !dbg !3640
  %25 = load i32, i32* %len38, align 8, !dbg !3640
  %cmp39 = icmp eq i32 %25, 16, !dbg !3641
  br i1 %cmp39, label %land.lhs.true41, label %if.end, !dbg !3642

land.lhs.true41:                                  ; preds = %lor.lhs.false33
  %26 = load i8*, i8** %name17, align 8, !dbg !3643
  %arrayidx42 = getelementptr inbounds i8, i8* %26, i64 0, !dbg !3643
  %27 = load i8, i8* %arrayidx42, align 1, !dbg !3643
  %conv43 = sext i8 %27 to i32, !dbg !3643
  %cmp44 = icmp eq i32 %conv43, 95, !dbg !3644
  br i1 %cmp44, label %land.lhs.true46, label %if.end, !dbg !3645

land.lhs.true46:                                  ; preds = %land.lhs.true41
  %28 = load i8*, i8** %name17, align 8, !dbg !3646
  %call47 = call i32 @strcmp(i8* %28, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.4, i64 0, i64 0)), !dbg !3647
  %tobool48 = icmp ne i32 %call47, 0, !dbg !3647
  br i1 %tobool48, label %if.end, label %if.then49, !dbg !3648

if.then49:                                        ; preds = %land.lhs.true46, %land.lhs.true31
  %29 = load i32, i32* %flags.addr, align 4, !dbg !3649
  %or = or i32 %29, 32, !dbg !3649
  store i32 %or, i32* %flags.addr, align 4, !dbg !3649
  br label %if.end, !dbg !3650

if.end:                                           ; preds = %if.then49, %land.lhs.true46, %land.lhs.true41, %lor.lhs.false33
  %30 = load i8*, i8** %name17, align 8, !dbg !3651
  %arrayidx50 = getelementptr inbounds i8, i8* %30, i64 0, !dbg !3651
  %31 = load i8, i8* %arrayidx50, align 1, !dbg !3651
  %conv51 = sext i8 %31 to i32, !dbg !3651
  %cmp52 = icmp eq i32 %conv51, 95, !dbg !3653
  br i1 %cmp52, label %if.then54, label %if.end92, !dbg !3654

if.then54:                                        ; preds = %if.end
  %32 = load i8*, i8** %name17, align 8, !dbg !3655
  %arrayidx55 = getelementptr inbounds i8, i8* %32, i64 1, !dbg !3655
  %33 = load i8, i8* %arrayidx55, align 1, !dbg !3655
  %conv56 = sext i8 %33 to i32, !dbg !3655
  %cmp57 = icmp eq i32 %conv56, 95, !dbg !3658
  br i1 %cmp57, label %land.lhs.true59, label %if.else, !dbg !3659

land.lhs.true59:                                  ; preds = %if.then54
  %34 = load i8*, i8** %name17, align 8, !dbg !3660
  %arrayidx60 = getelementptr inbounds i8, i8* %34, i64 2, !dbg !3660
  %35 = load i8, i8* %arrayidx60, align 1, !dbg !3660
  %conv61 = sext i8 %35 to i32, !dbg !3660
  %cmp62 = icmp eq i32 %conv61, 98, !dbg !3661
  br i1 %cmp62, label %land.lhs.true64, label %if.else, !dbg !3662

land.lhs.true64:                                  ; preds = %land.lhs.true59
  %36 = load i8*, i8** %name17, align 8, !dbg !3663
  %add.ptr = getelementptr inbounds i8, i8* %36, i64 3, !dbg !3664
  %call65 = call i32 @strncmp(i8* %add.ptr, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i64 7), !dbg !3665
  %tobool66 = icmp ne i32 %call65, 0, !dbg !3665
  br i1 %tobool66, label %if.else, label %if.then67, !dbg !3666

if.then67:                                        ; preds = %land.lhs.true64
  %37 = load i8*, i8** %tname, align 8, !dbg !3667
  %add.ptr68 = getelementptr inbounds i8, i8* %37, i64 10, !dbg !3667
  store i8* %add.ptr68, i8** %tname, align 8, !dbg !3667
  br label %if.end91, !dbg !3668

if.else:                                          ; preds = %land.lhs.true64, %land.lhs.true59, %if.then54
  %38 = load i8*, i8** %name17, align 8, !dbg !3669
  %arrayidx69 = getelementptr inbounds i8, i8* %38, i64 1, !dbg !3669
  %39 = load i8, i8* %arrayidx69, align 1, !dbg !3669
  %conv70 = sext i8 %39 to i32, !dbg !3669
  %cmp71 = icmp eq i32 %conv70, 95, !dbg !3671
  br i1 %cmp71, label %land.lhs.true73, label %if.else80, !dbg !3672

land.lhs.true73:                                  ; preds = %if.else
  %40 = load i8*, i8** %name17, align 8, !dbg !3673
  %arrayidx74 = getelementptr inbounds i8, i8* %40, i64 2, !dbg !3673
  %41 = load i8, i8* %arrayidx74, align 1, !dbg !3673
  %conv75 = sext i8 %41 to i32, !dbg !3673
  %cmp76 = icmp eq i32 %conv75, 120, !dbg !3674
  br i1 %cmp76, label %if.then78, label %if.else80, !dbg !3675

if.then78:                                        ; preds = %land.lhs.true73
  %42 = load i8*, i8** %tname, align 8, !dbg !3676
  %add.ptr79 = getelementptr inbounds i8, i8* %42, i64 3, !dbg !3676
  store i8* %add.ptr79, i8** %tname, align 8, !dbg !3676
  br label %if.end90, !dbg !3677

if.else80:                                        ; preds = %land.lhs.true73, %if.else
  %43 = load i8*, i8** %name17, align 8, !dbg !3678
  %arrayidx81 = getelementptr inbounds i8, i8* %43, i64 1, !dbg !3678
  %44 = load i8, i8* %arrayidx81, align 1, !dbg !3678
  %conv82 = sext i8 %44 to i32, !dbg !3678
  %cmp83 = icmp eq i32 %conv82, 95, !dbg !3680
  br i1 %cmp83, label %if.then85, label %if.else87, !dbg !3681

if.then85:                                        ; preds = %if.else80
  %45 = load i8*, i8** %tname, align 8, !dbg !3682
  %add.ptr86 = getelementptr inbounds i8, i8* %45, i64 2, !dbg !3682
  store i8* %add.ptr86, i8** %tname, align 8, !dbg !3682
  br label %if.end89, !dbg !3683

if.else87:                                        ; preds = %if.else80
  %46 = load i8*, i8** %tname, align 8, !dbg !3684
  %add.ptr88 = getelementptr inbounds i8, i8* %46, i64 1, !dbg !3684
  store i8* %add.ptr88, i8** %tname, align 8, !dbg !3684
  br label %if.end89

if.end89:                                         ; preds = %if.else87, %if.then85
  br label %if.end90

if.end90:                                         ; preds = %if.end89, %if.then78
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.then67
  br label %if.end92, !dbg !3685

if.end92:                                         ; preds = %if.end91, %if.end
  %47 = load i8*, i8** %tname, align 8, !dbg !3686
  %arrayidx93 = getelementptr inbounds i8, i8* %47, i64 0, !dbg !3686
  %48 = load i8, i8* %arrayidx93, align 1, !dbg !3686
  %conv94 = sext i8 %48 to i32, !dbg !3686
  %cmp95 = icmp eq i32 %conv94, 115, !dbg !3688
  br i1 %cmp95, label %if.then97, label %if.else137, !dbg !3689

if.then97:                                        ; preds = %if.end92
  %49 = load i8*, i8** %tname, align 8, !dbg !3690
  %arrayidx98 = getelementptr inbounds i8, i8* %49, i64 1, !dbg !3690
  %50 = load i8, i8* %arrayidx98, align 1, !dbg !3690
  %conv99 = sext i8 %50 to i32, !dbg !3690
  %cmp100 = icmp eq i32 %conv99, 101, !dbg !3693
  br i1 %cmp100, label %land.lhs.true102, label %lor.lhs.false108, !dbg !3694

land.lhs.true102:                                 ; preds = %if.then97
  %51 = load i8*, i8** %tname, align 8, !dbg !3695
  %call103 = call i32 @strcmp(i8* %51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0)), !dbg !3696
  %tobool104 = icmp ne i32 %call103, 0, !dbg !3696
  br i1 %tobool104, label %lor.lhs.false105, label %if.then124, !dbg !3697

lor.lhs.false105:                                 ; preds = %land.lhs.true102
  %52 = load i8*, i8** %tname, align 8, !dbg !3698
  %call106 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0)), !dbg !3699
  %tobool107 = icmp ne i32 %call106, 0, !dbg !3699
  br i1 %tobool107, label %lor.lhs.false108, label %if.then124, !dbg !3700

lor.lhs.false108:                                 ; preds = %lor.lhs.false105, %if.then97
  %53 = load i8*, i8** %tname, align 8, !dbg !3701
  %arrayidx109 = getelementptr inbounds i8, i8* %53, i64 1, !dbg !3701
  %54 = load i8, i8* %arrayidx109, align 1, !dbg !3701
  %conv110 = sext i8 %54 to i32, !dbg !3701
  %cmp111 = icmp eq i32 %conv110, 105, !dbg !3702
  br i1 %cmp111, label %land.lhs.true113, label %lor.lhs.false116, !dbg !3703

land.lhs.true113:                                 ; preds = %lor.lhs.false108
  %55 = load i8*, i8** %tname, align 8, !dbg !3704
  %call114 = call i32 @strcmp(i8* %55, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0)), !dbg !3705
  %tobool115 = icmp ne i32 %call114, 0, !dbg !3705
  br i1 %tobool115, label %lor.lhs.false116, label %if.then124, !dbg !3706

lor.lhs.false116:                                 ; preds = %land.lhs.true113, %lor.lhs.false108
  %56 = load i8*, i8** %tname, align 8, !dbg !3707
  %arrayidx117 = getelementptr inbounds i8, i8* %56, i64 1, !dbg !3707
  %57 = load i8, i8* %arrayidx117, align 1, !dbg !3707
  %conv118 = sext i8 %57 to i32, !dbg !3707
  %cmp119 = icmp eq i32 %conv118, 97, !dbg !3708
  br i1 %cmp119, label %land.lhs.true121, label %if.end126, !dbg !3709

land.lhs.true121:                                 ; preds = %lor.lhs.false116
  %58 = load i8*, i8** %tname, align 8, !dbg !3710
  %call122 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0)), !dbg !3711
  %tobool123 = icmp ne i32 %call122, 0, !dbg !3711
  br i1 %tobool123, label %if.end126, label %if.then124, !dbg !3712

if.then124:                                       ; preds = %land.lhs.true121, %land.lhs.true113, %lor.lhs.false105, %land.lhs.true102
  %59 = load i32, i32* %flags.addr, align 4, !dbg !3713
  %or125 = or i32 %59, 128, !dbg !3713
  store i32 %or125, i32* %flags.addr, align 4, !dbg !3713
  br label %if.end126, !dbg !3714

if.end126:                                        ; preds = %if.then124, %land.lhs.true121, %lor.lhs.false116
  %60 = load i8*, i8** %tname, align 8, !dbg !3715
  %arrayidx127 = getelementptr inbounds i8, i8* %60, i64 1, !dbg !3715
  %61 = load i8, i8* %arrayidx127, align 1, !dbg !3715
  %conv128 = sext i8 %61 to i32, !dbg !3715
  %cmp129 = icmp eq i32 %conv128, 105, !dbg !3717
  br i1 %cmp129, label %land.lhs.true131, label %if.end136, !dbg !3718

land.lhs.true131:                                 ; preds = %if.end126
  %62 = load i8*, i8** %tname, align 8, !dbg !3719
  %call132 = call i32 @strcmp(i8* %62, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0)), !dbg !3720
  %tobool133 = icmp ne i32 %call132, 0, !dbg !3720
  br i1 %tobool133, label %if.end136, label %if.then134, !dbg !3721

if.then134:                                       ; preds = %land.lhs.true131
  %63 = load i32, i32* %flags.addr, align 4, !dbg !3722
  %or135 = or i32 %63, 8, !dbg !3722
  store i32 %or135, i32* %flags.addr, align 4, !dbg !3722
  br label %if.end136, !dbg !3723

if.end136:                                        ; preds = %if.then134, %land.lhs.true131, %if.end126
  br label %if.end195, !dbg !3724

if.else137:                                       ; preds = %if.end92
  %64 = load i8*, i8** %tname, align 8, !dbg !3725
  %arrayidx138 = getelementptr inbounds i8, i8* %64, i64 0, !dbg !3725
  %65 = load i8, i8* %arrayidx138, align 1, !dbg !3725
  %conv139 = sext i8 %65 to i32, !dbg !3725
  %cmp140 = icmp eq i32 %conv139, 113, !dbg !3727
  br i1 %cmp140, label %land.lhs.true142, label %lor.lhs.false150, !dbg !3728

land.lhs.true142:                                 ; preds = %if.else137
  %66 = load i8*, i8** %tname, align 8, !dbg !3729
  %arrayidx143 = getelementptr inbounds i8, i8* %66, i64 1, !dbg !3729
  %67 = load i8, i8* %arrayidx143, align 1, !dbg !3729
  %conv144 = sext i8 %67 to i32, !dbg !3729
  %cmp145 = icmp eq i32 %conv144, 115, !dbg !3730
  br i1 %cmp145, label %land.lhs.true147, label %lor.lhs.false150, !dbg !3731

land.lhs.true147:                                 ; preds = %land.lhs.true142
  %68 = load i8*, i8** %tname, align 8, !dbg !3732
  %call148 = call i32 @strcmp(i8* %68, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.11, i64 0, i64 0)), !dbg !3733
  %tobool149 = icmp ne i32 %call148, 0, !dbg !3733
  br i1 %tobool149, label %lor.lhs.false150, label %if.then176, !dbg !3734

lor.lhs.false150:                                 ; preds = %land.lhs.true147, %land.lhs.true142, %if.else137
  %69 = load i8*, i8** %tname, align 8, !dbg !3735
  %arrayidx151 = getelementptr inbounds i8, i8* %69, i64 0, !dbg !3735
  %70 = load i8, i8* %arrayidx151, align 1, !dbg !3735
  %conv152 = sext i8 %70 to i32, !dbg !3735
  %cmp153 = icmp eq i32 %conv152, 118, !dbg !3736
  br i1 %cmp153, label %land.lhs.true155, label %lor.lhs.false163, !dbg !3737

land.lhs.true155:                                 ; preds = %lor.lhs.false150
  %71 = load i8*, i8** %tname, align 8, !dbg !3738
  %arrayidx156 = getelementptr inbounds i8, i8* %71, i64 1, !dbg !3738
  %72 = load i8, i8* %arrayidx156, align 1, !dbg !3738
  %conv157 = sext i8 %72 to i32, !dbg !3738
  %cmp158 = icmp eq i32 %conv157, 102, !dbg !3739
  br i1 %cmp158, label %land.lhs.true160, label %lor.lhs.false163, !dbg !3740

land.lhs.true160:                                 ; preds = %land.lhs.true155
  %73 = load i8*, i8** %tname, align 8, !dbg !3741
  %call161 = call i32 @strcmp(i8* %73, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0)), !dbg !3742
  %tobool162 = icmp ne i32 %call161, 0, !dbg !3742
  br i1 %tobool162, label %lor.lhs.false163, label %if.then176, !dbg !3743

lor.lhs.false163:                                 ; preds = %land.lhs.true160, %land.lhs.true155, %lor.lhs.false150
  %74 = load i8*, i8** %tname, align 8, !dbg !3744
  %arrayidx164 = getelementptr inbounds i8, i8* %74, i64 0, !dbg !3744
  %75 = load i8, i8* %arrayidx164, align 1, !dbg !3744
  %conv165 = sext i8 %75 to i32, !dbg !3744
  %cmp166 = icmp eq i32 %conv165, 103, !dbg !3745
  br i1 %cmp166, label %land.lhs.true168, label %if.else178, !dbg !3746

land.lhs.true168:                                 ; preds = %lor.lhs.false163
  %76 = load i8*, i8** %tname, align 8, !dbg !3747
  %arrayidx169 = getelementptr inbounds i8, i8* %76, i64 1, !dbg !3747
  %77 = load i8, i8* %arrayidx169, align 1, !dbg !3747
  %conv170 = sext i8 %77 to i32, !dbg !3747
  %cmp171 = icmp eq i32 %conv170, 101, !dbg !3748
  br i1 %cmp171, label %land.lhs.true173, label %if.else178, !dbg !3749

land.lhs.true173:                                 ; preds = %land.lhs.true168
  %78 = load i8*, i8** %tname, align 8, !dbg !3750
  %call174 = call i32 @strcmp(i8* %78, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.13, i64 0, i64 0)), !dbg !3751
  %tobool175 = icmp ne i32 %call174, 0, !dbg !3751
  br i1 %tobool175, label %if.else178, label %if.then176, !dbg !3752

if.then176:                                       ; preds = %land.lhs.true173, %land.lhs.true160, %land.lhs.true147
  %79 = load i32, i32* %flags.addr, align 4, !dbg !3753
  %or177 = or i32 %79, 128, !dbg !3753
  store i32 %or177, i32* %flags.addr, align 4, !dbg !3753
  br label %if.end194, !dbg !3754

if.else178:                                       ; preds = %land.lhs.true173, %land.lhs.true168, %lor.lhs.false163
  %80 = load i8*, i8** %tname, align 8, !dbg !3755
  %arrayidx179 = getelementptr inbounds i8, i8* %80, i64 0, !dbg !3755
  %81 = load i8, i8* %arrayidx179, align 1, !dbg !3755
  %conv180 = sext i8 %81 to i32, !dbg !3755
  %cmp181 = icmp eq i32 %conv180, 108, !dbg !3757
  br i1 %cmp181, label %land.lhs.true183, label %if.end193, !dbg !3758

land.lhs.true183:                                 ; preds = %if.else178
  %82 = load i8*, i8** %tname, align 8, !dbg !3759
  %arrayidx184 = getelementptr inbounds i8, i8* %82, i64 1, !dbg !3759
  %83 = load i8, i8* %arrayidx184, align 1, !dbg !3759
  %conv185 = sext i8 %83 to i32, !dbg !3759
  %cmp186 = icmp eq i32 %conv185, 111, !dbg !3760
  br i1 %cmp186, label %land.lhs.true188, label %if.end193, !dbg !3761

land.lhs.true188:                                 ; preds = %land.lhs.true183
  %84 = load i8*, i8** %tname, align 8, !dbg !3762
  %call189 = call i32 @strcmp(i8* %84, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0)), !dbg !3763
  %tobool190 = icmp ne i32 %call189, 0, !dbg !3763
  br i1 %tobool190, label %if.end193, label %if.then191, !dbg !3764

if.then191:                                       ; preds = %land.lhs.true188
  %85 = load i32, i32* %flags.addr, align 4, !dbg !3765
  %or192 = or i32 %85, 8, !dbg !3765
  store i32 %or192, i32* %flags.addr, align 4, !dbg !3765
  br label %if.end193, !dbg !3766

if.end193:                                        ; preds = %if.then191, %land.lhs.true188, %land.lhs.true183, %if.else178
  br label %if.end194

if.end194:                                        ; preds = %if.end193, %if.then176
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.end136
  br label %if.end196, !dbg !3767

if.end196:                                        ; preds = %if.end195, %land.lhs.true11, %lor.lhs.false, %land.lhs.true2, %land.lhs.true, %entry
  %86 = load i32, i32* %flags.addr, align 4, !dbg !3768
  ret i32 %86, !dbg !3769
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @gimple_alloca_call_p(%union.gimple_statement_d* %stmt) #0 !dbg !3770 {
entry:
  %retval = alloca i8, align 1
  %stmt.addr = alloca %union.gimple_statement_d*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %stmt, %union.gimple_statement_d** %stmt.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %stmt.addr, metadata !3774, metadata !DIExpression()), !dbg !3775
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !3776, metadata !DIExpression()), !dbg !3777
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3778
  %call = call zeroext i8 @is_gimple_call(%union.gimple_statement_d* %0), !dbg !3780
  %tobool = icmp ne i8 %call, 0, !dbg !3780
  br i1 %tobool, label %if.end, label %if.then, !dbg !3781

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !3782
  br label %return, !dbg !3782

if.end:                                           ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %stmt.addr, align 8, !dbg !3783
  %call1 = call %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %1), !dbg !3784
  store %union.tree_node* %call1, %union.tree_node** %fndecl, align 8, !dbg !3785
  %2 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3786
  %tobool2 = icmp ne %union.tree_node* %2, null, !dbg !3786
  br i1 %tobool2, label %land.lhs.true, label %if.end6, !dbg !3788

land.lhs.true:                                    ; preds = %if.end
  %3 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !3789
  %call3 = call i32 @special_function_p(%union.tree_node* %3, i32 0), !dbg !3790
  %and = and i32 %call3, 32, !dbg !3791
  %tobool4 = icmp ne i32 %and, 0, !dbg !3791
  br i1 %tobool4, label %if.then5, label %if.end6, !dbg !3792

if.then5:                                         ; preds = %land.lhs.true
  store i8 1, i8* %retval, align 1, !dbg !3793
  br label %return, !dbg !3793

if.end6:                                          ; preds = %land.lhs.true, %if.end
  store i8 0, i8* %retval, align 1, !dbg !3794
  br label %return, !dbg !3794

return:                                           ; preds = %if.end6, %if.then5, %if.then
  %4 = load i8, i8* %retval, align 1, !dbg !3795
  ret i8 %4, !dbg !3795
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @is_gimple_call(%union.gimple_statement_d* %gs) #0 !dbg !3796 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3797, metadata !DIExpression()), !dbg !3798
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3799
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !3800
  %cmp = icmp eq i32 %call, 8, !dbg !3801
  %conv = zext i1 %cmp to i32, !dbg !3801
  %conv1 = trunc i32 %conv to i8, !dbg !3800
  ret i8 %conv1, !dbg !3802
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fndecl(%union.gimple_statement_d* %gs) #0 !dbg !3803 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3806, metadata !DIExpression()), !dbg !3807
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !3808, metadata !DIExpression()), !dbg !3809
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3810
  %call = call %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %0), !dbg !3811
  store %union.tree_node* %call, %union.tree_node** %addr, align 8, !dbg !3809
  %1 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !3812
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !3812
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !3812
  %bf.load = load i64, i64* %2, align 8, !dbg !3812
  %bf.clear = and i64 %bf.load, 65535, !dbg !3812
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3812
  %cmp = icmp eq i32 %bf.cast, 121, !dbg !3814
  br i1 %cmp, label %if.then, label %if.end, !dbg !3815

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !3816
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3816
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3816
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !3816
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3816
  store %union.tree_node* %4, %union.tree_node** %retval, align 8, !dbg !3817
  br label %return, !dbg !3817

if.end:                                           ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !3818
  br label %return, !dbg !3818

return:                                           ; preds = %if.end, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !3819
  ret %union.tree_node* %5, !dbg !3819
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @alloca_call_p(%union.tree_node* %exp) #0 !dbg !3820 {
entry:
  %retval = alloca i8, align 1
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !3823, metadata !DIExpression()), !dbg !3824
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3825
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3825
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3825
  %bf.load = load i64, i64* %1, align 8, !dbg !3825
  %bf.clear = and i64 %bf.load, 65535, !dbg !3825
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3825
  %cmp = icmp eq i32 %bf.cast, 59, !dbg !3827
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !3828

land.lhs.true:                                    ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3829
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !3829
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !3829
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3829
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3829
  %base2 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !3829
  %4 = bitcast %struct.tree_base* %base2 to i64*, !dbg !3829
  %bf.load3 = load i64, i64* %4, align 8, !dbg !3829
  %bf.clear4 = and i64 %bf.load3, 65535, !dbg !3829
  %bf.cast5 = trunc i64 %bf.clear4 to i32, !dbg !3829
  %cmp6 = icmp eq i32 %bf.cast5, 121, !dbg !3830
  br i1 %cmp6, label %land.lhs.true7, label %if.end, !dbg !3831

land.lhs.true7:                                   ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3832
  %exp8 = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !3832
  %operands9 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !3832
  %arrayidx10 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands9, i64 0, i64 1, !dbg !3832
  %6 = load %union.tree_node*, %union.tree_node** %arrayidx10, align 8, !dbg !3832
  %exp11 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !3832
  %operands12 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp11, i32 0, i32 3, !dbg !3832
  %arrayidx13 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands12, i64 0, i64 0, !dbg !3832
  %7 = load %union.tree_node*, %union.tree_node** %arrayidx13, align 8, !dbg !3832
  %base14 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3832
  %8 = bitcast %struct.tree_base* %base14 to i64*, !dbg !3832
  %bf.load15 = load i64, i64* %8, align 8, !dbg !3832
  %bf.clear16 = and i64 %bf.load15, 65535, !dbg !3832
  %bf.cast17 = trunc i64 %bf.clear16 to i32, !dbg !3832
  %cmp18 = icmp eq i32 %bf.cast17, 29, !dbg !3833
  br i1 %cmp18, label %land.lhs.true19, label %if.end, !dbg !3834

land.lhs.true19:                                  ; preds = %land.lhs.true7
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3835
  %exp20 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !3835
  %operands21 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp20, i32 0, i32 3, !dbg !3835
  %arrayidx22 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands21, i64 0, i64 1, !dbg !3835
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx22, align 8, !dbg !3835
  %exp23 = bitcast %union.tree_node* %10 to %struct.tree_exp*, !dbg !3835
  %operands24 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp23, i32 0, i32 3, !dbg !3835
  %arrayidx25 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands24, i64 0, i64 0, !dbg !3835
  %11 = load %union.tree_node*, %union.tree_node** %arrayidx25, align 8, !dbg !3835
  %call = call i32 @special_function_p(%union.tree_node* %11, i32 0), !dbg !3836
  %and = and i32 %call, 32, !dbg !3837
  %tobool = icmp ne i32 %and, 0, !dbg !3837
  br i1 %tobool, label %if.then, label %if.end, !dbg !3838

if.then:                                          ; preds = %land.lhs.true19
  store i8 1, i8* %retval, align 1, !dbg !3839
  br label %return, !dbg !3839

if.end:                                           ; preds = %land.lhs.true19, %land.lhs.true7, %land.lhs.true, %entry
  store i8 0, i8* %retval, align 1, !dbg !3840
  br label %return, !dbg !3840

return:                                           ; preds = %if.end, %if.then
  %12 = load i8, i8* %retval, align 1, !dbg !3841
  ret i8 %12, !dbg !3841
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @flags_from_decl_or_type(%union.tree_node* %exp) #0 !dbg !3842 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !3843, metadata !DIExpression()), !dbg !3844
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !3845, metadata !DIExpression()), !dbg !3846
  store i32 0, i32* %flags, align 4, !dbg !3846
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3847
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !3847
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !3847
  %bf.load = load i64, i64* %1, align 8, !dbg !3847
  %bf.clear = and i64 %bf.load, 65535, !dbg !3847
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3847
  %idxprom = sext i32 %bf.cast to i64, !dbg !3847
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !3847
  %2 = load i32, i32* %arrayidx, align 4, !dbg !3847
  %cmp = icmp eq i32 %2, 3, !dbg !3847
  br i1 %cmp, label %if.then, label %if.else, !dbg !3849

if.then:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3850
  %function_decl = bitcast %union.tree_node* %3 to %struct.tree_function_decl*, !dbg !3850
  %malloc_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl, i32 0, i32 5, !dbg !3850
  %bf.load1 = load i32, i32* %malloc_flag, align 8, !dbg !3850
  %bf.lshr = lshr i32 %bf.load1, 19, !dbg !3850
  %bf.clear2 = and i32 %bf.lshr, 1, !dbg !3850
  %tobool = icmp ne i32 %bf.clear2, 0, !dbg !3850
  br i1 %tobool, label %if.then3, label %if.end, !dbg !3853

if.then3:                                         ; preds = %if.then
  %4 = load i32, i32* %flags, align 4, !dbg !3854
  %or = or i32 %4, 16, !dbg !3854
  store i32 %or, i32* %flags, align 4, !dbg !3854
  br label %if.end, !dbg !3855

if.end:                                           ; preds = %if.then3, %if.then
  %5 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3856
  %function_decl4 = bitcast %union.tree_node* %5 to %struct.tree_function_decl*, !dbg !3856
  %returns_twice_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl4, i32 0, i32 5, !dbg !3856
  %bf.load5 = load i32, i32* %returns_twice_flag, align 8, !dbg !3856
  %bf.lshr6 = lshr i32 %bf.load5, 18, !dbg !3856
  %bf.clear7 = and i32 %bf.lshr6, 1, !dbg !3856
  %tobool8 = icmp ne i32 %bf.clear7, 0, !dbg !3856
  br i1 %tobool8, label %if.then9, label %if.end11, !dbg !3858

if.then9:                                         ; preds = %if.end
  %6 = load i32, i32* %flags, align 4, !dbg !3859
  %or10 = or i32 %6, 128, !dbg !3859
  store i32 %or10, i32* %flags, align 4, !dbg !3859
  br label %if.end11, !dbg !3860

if.end11:                                         ; preds = %if.then9, %if.end
  %7 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3861
  %base12 = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3861
  %8 = bitcast %struct.tree_base* %base12 to i64*, !dbg !3861
  %bf.load13 = load i64, i64* %8, align 8, !dbg !3861
  %bf.lshr14 = lshr i64 %bf.load13, 20, !dbg !3861
  %bf.clear15 = and i64 %bf.lshr14, 1, !dbg !3861
  %bf.cast16 = trunc i64 %bf.clear15 to i32, !dbg !3861
  %tobool17 = icmp ne i32 %bf.cast16, 0, !dbg !3861
  br i1 %tobool17, label %land.lhs.true, label %if.end26, !dbg !3863

land.lhs.true:                                    ; preds = %if.end11
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3864
  %base18 = bitcast %union.tree_node* %9 to %struct.tree_base*, !dbg !3864
  %10 = bitcast %struct.tree_base* %base18 to i64*, !dbg !3864
  %bf.load19 = load i64, i64* %10, align 8, !dbg !3864
  %bf.lshr20 = lshr i64 %bf.load19, 19, !dbg !3864
  %bf.clear21 = and i64 %bf.lshr20, 1, !dbg !3864
  %bf.cast22 = trunc i64 %bf.clear21 to i32, !dbg !3864
  %tobool23 = icmp ne i32 %bf.cast22, 0, !dbg !3864
  br i1 %tobool23, label %if.end26, label %if.then24, !dbg !3865

if.then24:                                        ; preds = %land.lhs.true
  %11 = load i32, i32* %flags, align 4, !dbg !3866
  %or25 = or i32 %11, 1, !dbg !3866
  store i32 %or25, i32* %flags, align 4, !dbg !3866
  br label %if.end26, !dbg !3867

if.end26:                                         ; preds = %if.then24, %land.lhs.true, %if.end11
  %12 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3868
  %function_decl27 = bitcast %union.tree_node* %12 to %struct.tree_function_decl*, !dbg !3868
  %pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl27, i32 0, i32 5, !dbg !3868
  %bf.load28 = load i32, i32* %pure_flag, align 8, !dbg !3868
  %bf.lshr29 = lshr i32 %bf.load28, 27, !dbg !3868
  %bf.clear30 = and i32 %bf.lshr29, 1, !dbg !3868
  %tobool31 = icmp ne i32 %bf.clear30, 0, !dbg !3868
  br i1 %tobool31, label %if.then32, label %if.end34, !dbg !3870

if.then32:                                        ; preds = %if.end26
  %13 = load i32, i32* %flags, align 4, !dbg !3871
  %or33 = or i32 %13, 2, !dbg !3871
  store i32 %or33, i32* %flags, align 4, !dbg !3871
  br label %if.end34, !dbg !3872

if.end34:                                         ; preds = %if.then32, %if.end26
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3873
  %function_decl35 = bitcast %union.tree_node* %14 to %struct.tree_function_decl*, !dbg !3873
  %looping_const_or_pure_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl35, i32 0, i32 5, !dbg !3873
  %bf.load36 = load i32, i32* %looping_const_or_pure_flag, align 8, !dbg !3873
  %bf.lshr37 = lshr i32 %bf.load36, 28, !dbg !3873
  %bf.clear38 = and i32 %bf.lshr37, 1, !dbg !3873
  %tobool39 = icmp ne i32 %bf.clear38, 0, !dbg !3873
  br i1 %tobool39, label %if.then40, label %if.end42, !dbg !3875

if.then40:                                        ; preds = %if.end34
  %15 = load i32, i32* %flags, align 4, !dbg !3876
  %or41 = or i32 %15, 4, !dbg !3876
  store i32 %or41, i32* %flags, align 4, !dbg !3876
  br label %if.end42, !dbg !3877

if.end42:                                         ; preds = %if.then40, %if.end34
  %16 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3878
  %function_decl43 = bitcast %union.tree_node* %16 to %struct.tree_function_decl*, !dbg !3878
  %novops_flag = getelementptr inbounds %struct.tree_function_decl, %struct.tree_function_decl* %function_decl43, i32 0, i32 5, !dbg !3878
  %bf.load44 = load i32, i32* %novops_flag, align 8, !dbg !3878
  %bf.lshr45 = lshr i32 %bf.load44, 17, !dbg !3878
  %bf.clear46 = and i32 %bf.lshr45, 1, !dbg !3878
  %tobool47 = icmp ne i32 %bf.clear46, 0, !dbg !3878
  br i1 %tobool47, label %if.then48, label %if.end50, !dbg !3880

if.then48:                                        ; preds = %if.end42
  %17 = load i32, i32* %flags, align 4, !dbg !3881
  %or49 = or i32 %17, 512, !dbg !3881
  store i32 %or49, i32* %flags, align 4, !dbg !3881
  br label %if.end50, !dbg !3882

if.end50:                                         ; preds = %if.then48, %if.end42
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3883
  %base51 = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !3883
  %19 = bitcast %struct.tree_base* %base51 to i64*, !dbg !3883
  %bf.load52 = load i64, i64* %19, align 8, !dbg !3883
  %bf.lshr53 = lshr i64 %bf.load52, 25, !dbg !3883
  %bf.clear54 = and i64 %bf.lshr53, 1, !dbg !3883
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !3883
  %tobool56 = icmp ne i32 %bf.cast55, 0, !dbg !3883
  br i1 %tobool56, label %if.then57, label %if.end59, !dbg !3885

if.then57:                                        ; preds = %if.end50
  %20 = load i32, i32* %flags, align 4, !dbg !3886
  %or58 = or i32 %20, 64, !dbg !3886
  store i32 %or58, i32* %flags, align 4, !dbg !3886
  br label %if.end59, !dbg !3887

if.end59:                                         ; preds = %if.then57, %if.end50
  %21 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3888
  %22 = load i32, i32* %flags, align 4, !dbg !3889
  %call = call i32 @special_function_p(%union.tree_node* %21, i32 %22), !dbg !3890
  store i32 %call, i32* %flags, align 4, !dbg !3891
  br label %if.end84, !dbg !3892

if.else:                                          ; preds = %entry
  %23 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3893
  %base60 = bitcast %union.tree_node* %23 to %struct.tree_base*, !dbg !3893
  %24 = bitcast %struct.tree_base* %base60 to i64*, !dbg !3893
  %bf.load61 = load i64, i64* %24, align 8, !dbg !3893
  %bf.clear62 = and i64 %bf.load61, 65535, !dbg !3893
  %bf.cast63 = trunc i64 %bf.clear62 to i32, !dbg !3893
  %idxprom64 = sext i32 %bf.cast63 to i64, !dbg !3893
  %arrayidx65 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom64, !dbg !3893
  %25 = load i32, i32* %arrayidx65, align 4, !dbg !3893
  %cmp66 = icmp eq i32 %25, 2, !dbg !3893
  br i1 %cmp66, label %land.lhs.true67, label %if.end83, !dbg !3895

land.lhs.true67:                                  ; preds = %if.else
  %26 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3896
  %base68 = bitcast %union.tree_node* %26 to %struct.tree_base*, !dbg !3896
  %27 = bitcast %struct.tree_base* %base68 to i64*, !dbg !3896
  %bf.load69 = load i64, i64* %27, align 8, !dbg !3896
  %bf.lshr70 = lshr i64 %bf.load69, 20, !dbg !3896
  %bf.clear71 = and i64 %bf.lshr70, 1, !dbg !3896
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !3896
  %tobool73 = icmp ne i32 %bf.cast72, 0, !dbg !3896
  br i1 %tobool73, label %land.lhs.true74, label %if.end83, !dbg !3897

land.lhs.true74:                                  ; preds = %land.lhs.true67
  %28 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3898
  %base75 = bitcast %union.tree_node* %28 to %struct.tree_base*, !dbg !3898
  %29 = bitcast %struct.tree_base* %base75 to i64*, !dbg !3898
  %bf.load76 = load i64, i64* %29, align 8, !dbg !3898
  %bf.lshr77 = lshr i64 %bf.load76, 19, !dbg !3898
  %bf.clear78 = and i64 %bf.lshr77, 1, !dbg !3898
  %bf.cast79 = trunc i64 %bf.clear78 to i32, !dbg !3898
  %tobool80 = icmp ne i32 %bf.cast79, 0, !dbg !3898
  br i1 %tobool80, label %if.end83, label %if.then81, !dbg !3899

if.then81:                                        ; preds = %land.lhs.true74
  %30 = load i32, i32* %flags, align 4, !dbg !3900
  %or82 = or i32 %30, 1, !dbg !3900
  store i32 %or82, i32* %flags, align 4, !dbg !3900
  br label %if.end83, !dbg !3901

if.end83:                                         ; preds = %if.then81, %land.lhs.true74, %land.lhs.true67, %if.else
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end59
  %31 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !3902
  %base85 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !3902
  %32 = bitcast %struct.tree_base* %base85 to i64*, !dbg !3902
  %bf.load86 = load i64, i64* %32, align 8, !dbg !3902
  %bf.lshr87 = lshr i64 %bf.load86, 19, !dbg !3902
  %bf.clear88 = and i64 %bf.lshr87, 1, !dbg !3902
  %bf.cast89 = trunc i64 %bf.clear88 to i32, !dbg !3902
  %tobool90 = icmp ne i32 %bf.cast89, 0, !dbg !3902
  br i1 %tobool90, label %if.then91, label %if.end93, !dbg !3904

if.then91:                                        ; preds = %if.end84
  %33 = load i32, i32* %flags, align 4, !dbg !3905
  %or92 = or i32 %33, 8, !dbg !3905
  store i32 %or92, i32* %flags, align 4, !dbg !3905
  br label %if.end93, !dbg !3906

if.end93:                                         ; preds = %if.then91, %if.end84
  %34 = load i32, i32* %flags, align 4, !dbg !3907
  ret i32 %34, !dbg !3908
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @call_expr_flags(%union.tree_node* %t) #0 !dbg !3909 {
entry:
  %t.addr = alloca %union.tree_node*, align 8
  %flags = alloca i32, align 4
  %decl = alloca %union.tree_node*, align 8
  store %union.tree_node* %t, %union.tree_node** %t.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %t.addr, metadata !3910, metadata !DIExpression()), !dbg !3911
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !3912, metadata !DIExpression()), !dbg !3913
  call void @llvm.dbg.declare(metadata %union.tree_node** %decl, metadata !3914, metadata !DIExpression()), !dbg !3915
  %0 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3916
  %call = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %0), !dbg !3917
  store %union.tree_node* %call, %union.tree_node** %decl, align 8, !dbg !3915
  %1 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3918
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !3918
  br i1 %tobool, label %if.then, label %if.else, !dbg !3920

if.then:                                          ; preds = %entry
  %2 = load %union.tree_node*, %union.tree_node** %decl, align 8, !dbg !3921
  %call1 = call i32 @flags_from_decl_or_type(%union.tree_node* %2), !dbg !3922
  store i32 %call1, i32* %flags, align 4, !dbg !3923
  br label %if.end8, !dbg !3924

if.else:                                          ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3925
  %exp = bitcast %union.tree_node* %3 to %struct.tree_exp*, !dbg !3925
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !3925
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !3925
  %4 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !3925
  %common = bitcast %union.tree_node* %4 to %struct.tree_common*, !dbg !3925
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !3925
  %5 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !3925
  store %union.tree_node* %5, %union.tree_node** %t.addr, align 8, !dbg !3927
  %6 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3928
  %tobool2 = icmp ne %union.tree_node* %6, null, !dbg !3928
  br i1 %tobool2, label %land.lhs.true, label %if.else7, !dbg !3930

land.lhs.true:                                    ; preds = %if.else
  %7 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3931
  %base = bitcast %union.tree_node* %7 to %struct.tree_base*, !dbg !3931
  %8 = bitcast %struct.tree_base* %base to i64*, !dbg !3931
  %bf.load = load i64, i64* %8, align 8, !dbg !3931
  %bf.clear = and i64 %bf.load, 65535, !dbg !3931
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !3931
  %cmp = icmp eq i32 %bf.cast, 10, !dbg !3932
  br i1 %cmp, label %if.then3, label %if.else7, !dbg !3933

if.then3:                                         ; preds = %land.lhs.true
  %9 = load %union.tree_node*, %union.tree_node** %t.addr, align 8, !dbg !3934
  %common4 = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !3934
  %type5 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common4, i32 0, i32 2, !dbg !3934
  %10 = load %union.tree_node*, %union.tree_node** %type5, align 8, !dbg !3934
  %call6 = call i32 @flags_from_decl_or_type(%union.tree_node* %10), !dbg !3935
  store i32 %call6, i32* %flags, align 4, !dbg !3936
  br label %if.end, !dbg !3937

if.else7:                                         ; preds = %land.lhs.true, %if.else
  store i32 0, i32* %flags, align 4, !dbg !3938
  br label %if.end

if.end:                                           ; preds = %if.else7, %if.then3
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %11 = load i32, i32* %flags, align 4, !dbg !3939
  ret i32 %11, !dbg !3940
}

declare dso_local %union.tree_node* @get_callee_fndecl(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @shift_return_value(i32 %mode, i8 zeroext %left_p, %struct.rtx_def* %value) #0 !dbg !3941 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %left_p.addr = alloca i8, align 1
  %value.addr = alloca %struct.rtx_def*, align 8
  %shift = alloca i64, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !3944, metadata !DIExpression()), !dbg !3945
  store i8 %left_p, i8* %left_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %left_p.addr, metadata !3946, metadata !DIExpression()), !dbg !3947
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !3948, metadata !DIExpression()), !dbg !3949
  call void @llvm.dbg.declare(metadata i64* %shift, metadata !3950, metadata !DIExpression()), !dbg !3951
  %0 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3952
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !3952
  %bf.load = load i32, i32* %1, align 8, !dbg !3952
  %bf.clear = and i32 %bf.load, 65535, !dbg !3952
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !3952
  br i1 %cmp, label %land.lhs.true, label %cond.true, !dbg !3952

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3952
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !3952
  %cmp1 = icmp ult i32 %call, 53, !dbg !3952
  br i1 %cmp1, label %cond.false, label %cond.true, !dbg !3952

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1863, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3952
  br label %cond.end, !dbg !3952

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !3952

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3952
  %3 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3953
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !3953
  %bf.load2 = load i32, i32* %4, align 8, !dbg !3953
  %bf.lshr = lshr i32 %bf.load2, 16, !dbg !3953
  %bf.clear3 = and i32 %bf.lshr, 255, !dbg !3953
  %idxprom = zext i32 %bf.clear3 to i64, !dbg !3953
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !3953
  %5 = load i8, i8* %arrayidx, align 1, !dbg !3953
  %conv = zext i8 %5 to i16, !dbg !3953
  %conv4 = zext i16 %conv to i32, !dbg !3953
  %mul = mul nsw i32 %conv4, 8, !dbg !3953
  %conv5 = trunc i32 %mul to i16, !dbg !3953
  %conv6 = zext i16 %conv5 to i32, !dbg !3953
  %6 = load i32, i32* %mode.addr, align 4, !dbg !3954
  %idxprom7 = zext i32 %6 to i64, !dbg !3954
  %arrayidx8 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom7, !dbg !3954
  %7 = load i8, i8* %arrayidx8, align 1, !dbg !3954
  %conv9 = zext i8 %7 to i16, !dbg !3954
  %conv10 = zext i16 %conv9 to i32, !dbg !3954
  %mul11 = mul nsw i32 %conv10, 8, !dbg !3954
  %conv12 = trunc i32 %mul11 to i16, !dbg !3954
  %conv13 = zext i16 %conv12 to i32, !dbg !3954
  %sub = sub nsw i32 %conv6, %conv13, !dbg !3955
  %conv14 = sext i32 %sub to i64, !dbg !3953
  store i64 %conv14, i64* %shift, align 8, !dbg !3956
  %8 = load i64, i64* %shift, align 8, !dbg !3957
  %cmp15 = icmp eq i64 %8, 0, !dbg !3959
  br i1 %cmp15, label %if.then, label %if.end, !dbg !3960

if.then:                                          ; preds = %cond.end
  store i8 0, i8* %retval, align 1, !dbg !3961
  br label %return, !dbg !3961

if.end:                                           ; preds = %cond.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3962
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !3962
  %bf.load17 = load i32, i32* %10, align 8, !dbg !3962
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !3962
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !3962
  %11 = load i8, i8* %left_p.addr, align 1, !dbg !3964
  %conv20 = zext i8 %11 to i32, !dbg !3964
  %tobool = icmp ne i32 %conv20, 0, !dbg !3964
  %12 = zext i1 %tobool to i64, !dbg !3964
  %cond21 = select i1 %tobool, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 44), %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 46), !dbg !3964
  %13 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3965
  %14 = load i64, i64* %shift, align 8, !dbg !3966
  %call22 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %14), !dbg !3966
  %15 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !3967
  %call23 = call zeroext i8 @force_expand_binop(i32 %bf.clear19, %struct.optab_d* %cond21, %struct.rtx_def* %13, %struct.rtx_def* %call22, %struct.rtx_def* %15, i32 1, i32 2), !dbg !3968
  %tobool24 = icmp ne i8 %call23, 0, !dbg !3968
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !3969

if.then25:                                        ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1873, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3970
  br label %if.end26, !dbg !3970

if.end26:                                         ; preds = %if.then25, %if.end
  store i8 1, i8* %retval, align 1, !dbg !3971
  br label %return, !dbg !3971

return:                                           ; preds = %if.end26, %if.then
  %16 = load i8, i8* %retval, align 1, !dbg !3972
  ret i8 %16, !dbg !3972
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !3973 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !3979, metadata !DIExpression()), !dbg !3980
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !3981
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !3981
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !3981
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !3981
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !3981
  %1 = load i32, i32* %rt_uint, align 8, !dbg !3981
  ret i32 %1, !dbg !3982
}

declare dso_local zeroext i8 @force_expand_binop(i32, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @expand_call(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %ignore) #0 !dbg !2 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %ignore.addr = alloca i32, align 4
  %funexp = alloca %struct.rtx_def*, align 8
  %normal_call_insns = alloca %struct.rtx_def*, align 8
  %tail_call_insns = alloca %struct.rtx_def*, align 8
  %funtype = alloca %union.tree_node*, align 8
  %type_arg_types = alloca %union.tree_node*, align 8
  %rettype = alloca %union.tree_node*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %try_tail_call = alloca i8, align 1
  %pass = alloca i32, align 4
  %valreg = alloca %struct.rtx_def*, align 8
  %structure_value_addr = alloca %struct.rtx_def*, align 8
  %structure_value_addr_parm = alloca i32, align 4
  %structure_value_addr_value = alloca %union.tree_node*, align 8
  %struct_value_size = alloca i64, align 8
  %pcc_struct_value = alloca i32, align 4
  %struct_value = alloca %struct.rtx_def*, align 8
  %num_actuals = alloca i32, align 4
  %n_named_args = alloca i32, align 4
  %num_complex_actuals = alloca i32, align 4
  %args = alloca %struct.arg_data*, align 8
  %args_size = alloca %struct.args_size, align 8
  %adjusted_args_size = alloca %struct.args_size, align 8
  %unadjusted_args_size = alloca i32, align 4
  %args_so_far = alloca %struct.ix86_args, align 4
  %reg_parm_seen = alloca i32, align 4
  %must_preallocate = alloca i32, align 4
  %reg_parm_stack_space = alloca i32, align 4
  %argblock = alloca %struct.rtx_def*, align 8
  %flags = alloca i32, align 4
  %low_to_save = alloca i32, align 4
  %high_to_save = alloca i32, align 4
  %save_area = alloca %struct.rtx_def*, align 8
  %initial_highest_arg_in_use = alloca i32, align 4
  %initial_stack_usage_map = alloca i8*, align 8
  %stack_usage_map_buf = alloca i8*, align 8
  %old_stack_allocated = alloca i32, align 4
  %old_stack_level = alloca %struct.rtx_def*, align 8
  %old_stack_arg_under_construction = alloca i32, align 4
  %old_pending_adj = alloca i32, align 4
  %old_inhibit_defer_pop = alloca i32, align 4
  %old_stack_pointer_delta = alloca i32, align 4
  %call_fusage = alloca %struct.rtx_def*, align 8
  %addr = alloca %union.tree_node*, align 8
  %i = alloca i32, align 4
  %preferred_stack_boundary = alloca i64, align 8
  %preferred_unit_stack_boundary = alloca i64, align 8
  %static_chain_value = alloca %struct.rtx_def*, align 8
  %volatilep = alloca i8, align 1
  %arg = alloca %union.tree_node*, align 8
  %iter = alloca %struct.call_expr_arg_iterator_d, align 8
  %d = alloca %struct.rtx_def*, align 8
  %i174 = alloca %struct.cgraph_rtl_info*, align 8
  %iter212 = alloca %struct.call_expr_arg_iterator_d, align 8
  %arg213 = alloca %union.tree_node*, align 8
  %type218 = alloca %union.tree_node*, align 8
  %temp = alloca %struct.rtx_def*, align 8
  %caller_mode = alloca i32, align 4
  %caller_promoted_mode = alloca i32, align 4
  %callee_mode = alloca i32, align 4
  %callee_promoted_mode = alloca i32, align 4
  %caller_unsignedp = alloca i32, align 4
  %callee_unsignedp = alloca i32, align 4
  %caller_res = alloca %union.tree_node*, align 8
  %sibcall_failure = alloca i32, align 4
  %save_pending_stack_adjust = alloca i32, align 4
  %save_stack_pointer_delta = alloca i32, align 4
  %insns = alloca %struct.rtx_def*, align 8
  %before_call = alloca %struct.rtx_def*, align 8
  %next_arg_reg = alloca %struct.rtx_def*, align 8
  %after_args = alloca %struct.rtx_def*, align 8
  %needed = alloca i32, align 4
  %push_size = alloca %struct.rtx_def*, align 8
  %elem = alloca %struct.rtx_def*, align 8
  %where = alloca %struct.rtx_def*, align 8
  %offset = alloca %struct.rtx_def*, align 8
  %before_arg = alloca %struct.rtx_def*, align 8
  %before_arg946 = alloca %struct.rtx_def*, align 8
  %temp1112 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  %insns1117 = alloca %struct.rtx_def*, align 8
  %last1141 = alloca %struct.rtx_def*, align 8
  %nt = alloca %union.tree_node*, align 8
  %may_overlap = alloca i8, align 1
  %val = alloca %struct.rtx_def*, align 8
  %type1467 = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %offset1473 = alloca i32, align 4
  %pmode = alloca i32, align 4
  %_rtx = alloca %struct.rtx_def*, align 8
  %save_mode = alloca i32, align 4
  %stack_area = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !3983, metadata !DIExpression()), !dbg !3984
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !3985, metadata !DIExpression()), !dbg !3986
  store i32 %ignore, i32* %ignore.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ignore.addr, metadata !3987, metadata !DIExpression()), !dbg !3988
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %funexp, metadata !3989, metadata !DIExpression()), !dbg !3990
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %normal_call_insns, metadata !3991, metadata !DIExpression()), !dbg !3992
  store %struct.rtx_def* null, %struct.rtx_def** %normal_call_insns, align 8, !dbg !3992
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tail_call_insns, metadata !3993, metadata !DIExpression()), !dbg !3994
  store %struct.rtx_def* null, %struct.rtx_def** %tail_call_insns, align 8, !dbg !3994
  call void @llvm.dbg.declare(metadata %union.tree_node** %funtype, metadata !3995, metadata !DIExpression()), !dbg !3996
  call void @llvm.dbg.declare(metadata %union.tree_node** %type_arg_types, metadata !3997, metadata !DIExpression()), !dbg !3998
  call void @llvm.dbg.declare(metadata %union.tree_node** %rettype, metadata !3999, metadata !DIExpression()), !dbg !4000
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !4001, metadata !DIExpression()), !dbg !4002
  store %union.tree_node* null, %union.tree_node** %fndecl, align 8, !dbg !4002
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !4003, metadata !DIExpression()), !dbg !4004
  call void @llvm.dbg.declare(metadata i8* %try_tail_call, metadata !4005, metadata !DIExpression()), !dbg !4006
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4007
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !4007
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !4007
  %bf.load = load i64, i64* %1, align 8, !dbg !4007
  %bf.lshr = lshr i64 %bf.load, 18, !dbg !4007
  %bf.clear = and i64 %bf.lshr, 1, !dbg !4007
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !4007
  %conv = trunc i32 %bf.cast to i8, !dbg !4007
  store i8 %conv, i8* %try_tail_call, align 1, !dbg !4006
  call void @llvm.dbg.declare(metadata i32* %pass, metadata !4008, metadata !DIExpression()), !dbg !4009
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %valreg, metadata !4010, metadata !DIExpression()), !dbg !4011
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %structure_value_addr, metadata !4012, metadata !DIExpression()), !dbg !4013
  store %struct.rtx_def* null, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4013
  call void @llvm.dbg.declare(metadata i32* %structure_value_addr_parm, metadata !4014, metadata !DIExpression()), !dbg !4015
  store i32 0, i32* %structure_value_addr_parm, align 4, !dbg !4015
  call void @llvm.dbg.declare(metadata %union.tree_node** %structure_value_addr_value, metadata !4016, metadata !DIExpression()), !dbg !4017
  store %union.tree_node* null, %union.tree_node** %structure_value_addr_value, align 8, !dbg !4017
  call void @llvm.dbg.declare(metadata i64* %struct_value_size, metadata !4018, metadata !DIExpression()), !dbg !4019
  store i64 0, i64* %struct_value_size, align 8, !dbg !4019
  call void @llvm.dbg.declare(metadata i32* %pcc_struct_value, metadata !4020, metadata !DIExpression()), !dbg !4021
  store i32 0, i32* %pcc_struct_value, align 4, !dbg !4021
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %struct_value, metadata !4022, metadata !DIExpression()), !dbg !4023
  store %struct.rtx_def* null, %struct.rtx_def** %struct_value, align 8, !dbg !4023
  call void @llvm.dbg.declare(metadata i32* %num_actuals, metadata !4024, metadata !DIExpression()), !dbg !4025
  call void @llvm.dbg.declare(metadata i32* %n_named_args, metadata !4026, metadata !DIExpression()), !dbg !4027
  call void @llvm.dbg.declare(metadata i32* %num_complex_actuals, metadata !4028, metadata !DIExpression()), !dbg !4029
  store i32 0, i32* %num_complex_actuals, align 4, !dbg !4029
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args, metadata !4030, metadata !DIExpression()), !dbg !4031
  call void @llvm.dbg.declare(metadata %struct.args_size* %args_size, metadata !4032, metadata !DIExpression()), !dbg !4033
  call void @llvm.dbg.declare(metadata %struct.args_size* %adjusted_args_size, metadata !4034, metadata !DIExpression()), !dbg !4035
  call void @llvm.dbg.declare(metadata i32* %unadjusted_args_size, metadata !4036, metadata !DIExpression()), !dbg !4037
  call void @llvm.dbg.declare(metadata %struct.ix86_args* %args_so_far, metadata !4038, metadata !DIExpression()), !dbg !4058
  call void @llvm.dbg.declare(metadata i32* %reg_parm_seen, metadata !4059, metadata !DIExpression()), !dbg !4060
  call void @llvm.dbg.declare(metadata i32* %must_preallocate, metadata !4061, metadata !DIExpression()), !dbg !4062
  %2 = load i32, i32* @target_flags, align 4, !dbg !4063
  %and = and i32 %2, 8192, !dbg !4063
  %cmp = icmp eq i32 %and, 0, !dbg !4063
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !4063

land.rhs:                                         ; preds = %entry
  %3 = load i32, i32* @target_flags, align 4, !dbg !4063
  %and2 = and i32 %3, 4, !dbg !4063
  %cmp3 = icmp ne i32 %and2, 0, !dbg !4063
  br i1 %cmp3, label %lor.end, label %lor.rhs, !dbg !4063

lor.rhs:                                          ; preds = %land.rhs
  %call = call i32 @ix86_cfun_abi(), !dbg !4063
  %cmp5 = icmp eq i32 %call, 1, !dbg !4063
  br label %lor.end, !dbg !4063

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %4 = phi i1 [ true, %land.rhs ], [ %cmp5, %lor.rhs ]
  %lnot = xor i1 %4, true, !dbg !4063
  br label %land.end

land.end:                                         ; preds = %lor.end, %entry
  %5 = phi i1 [ false, %entry ], [ %lnot, %lor.end ], !dbg !4064
  %lnot7 = xor i1 %5, true, !dbg !4065
  %lnot.ext = zext i1 %lnot7 to i32, !dbg !4065
  store i32 %lnot.ext, i32* %must_preallocate, align 4, !dbg !4062
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space, metadata !4066, metadata !DIExpression()), !dbg !4067
  store i32 0, i32* %reg_parm_stack_space, align 4, !dbg !4067
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock, metadata !4068, metadata !DIExpression()), !dbg !4069
  store %struct.rtx_def* null, %struct.rtx_def** %argblock, align 8, !dbg !4069
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !4070, metadata !DIExpression()), !dbg !4071
  store i32 0, i32* %flags, align 4, !dbg !4071
  call void @llvm.dbg.declare(metadata i32* %low_to_save, metadata !4072, metadata !DIExpression()), !dbg !4073
  call void @llvm.dbg.declare(metadata i32* %high_to_save, metadata !4074, metadata !DIExpression()), !dbg !4075
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %save_area, metadata !4076, metadata !DIExpression()), !dbg !4077
  store %struct.rtx_def* null, %struct.rtx_def** %save_area, align 8, !dbg !4077
  call void @llvm.dbg.declare(metadata i32* %initial_highest_arg_in_use, metadata !4078, metadata !DIExpression()), !dbg !4079
  %6 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4080
  store i32 %6, i32* %initial_highest_arg_in_use, align 4, !dbg !4079
  call void @llvm.dbg.declare(metadata i8** %initial_stack_usage_map, metadata !4081, metadata !DIExpression()), !dbg !4082
  %7 = load i8*, i8** @stack_usage_map, align 8, !dbg !4083
  store i8* %7, i8** %initial_stack_usage_map, align 8, !dbg !4082
  call void @llvm.dbg.declare(metadata i8** %stack_usage_map_buf, metadata !4084, metadata !DIExpression()), !dbg !4085
  store i8* null, i8** %stack_usage_map_buf, align 8, !dbg !4085
  call void @llvm.dbg.declare(metadata i32* %old_stack_allocated, metadata !4086, metadata !DIExpression()), !dbg !4087
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_stack_level, metadata !4088, metadata !DIExpression()), !dbg !4089
  store %struct.rtx_def* null, %struct.rtx_def** %old_stack_level, align 8, !dbg !4089
  call void @llvm.dbg.declare(metadata i32* %old_stack_arg_under_construction, metadata !4090, metadata !DIExpression()), !dbg !4091
  store i32 0, i32* %old_stack_arg_under_construction, align 4, !dbg !4091
  call void @llvm.dbg.declare(metadata i32* %old_pending_adj, metadata !4092, metadata !DIExpression()), !dbg !4093
  store i32 0, i32* %old_pending_adj, align 4, !dbg !4093
  call void @llvm.dbg.declare(metadata i32* %old_inhibit_defer_pop, metadata !4094, metadata !DIExpression()), !dbg !4095
  %8 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !4096
  store i32 %8, i32* %old_inhibit_defer_pop, align 4, !dbg !4095
  call void @llvm.dbg.declare(metadata i32* %old_stack_pointer_delta, metadata !4097, metadata !DIExpression()), !dbg !4098
  store i32 0, i32* %old_stack_pointer_delta, align 4, !dbg !4098
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_fusage, metadata !4099, metadata !DIExpression()), !dbg !4100
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr, metadata !4101, metadata !DIExpression()), !dbg !4102
  %9 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4103
  %exp8 = bitcast %union.tree_node* %9 to %struct.tree_exp*, !dbg !4103
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 3, !dbg !4103
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !4103
  %10 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !4103
  store %union.tree_node* %10, %union.tree_node** %addr, align 8, !dbg !4102
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4104, metadata !DIExpression()), !dbg !4105
  call void @llvm.dbg.declare(metadata i64* %preferred_stack_boundary, metadata !4106, metadata !DIExpression()), !dbg !4107
  call void @llvm.dbg.declare(metadata i64* %preferred_unit_stack_boundary, metadata !4108, metadata !DIExpression()), !dbg !4109
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %static_chain_value, metadata !4110, metadata !DIExpression()), !dbg !4111
  %11 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4112
  %base9 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !4112
  %12 = bitcast %struct.tree_base* %base9 to i64*, !dbg !4112
  %bf.load10 = load i64, i64* %12, align 8, !dbg !4112
  %bf.lshr11 = lshr i64 %bf.load10, 25, !dbg !4112
  %bf.clear12 = and i64 %bf.lshr11, 1, !dbg !4112
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !4112
  %tobool = icmp ne i32 %bf.cast13, 0, !dbg !4112
  br i1 %tobool, label %if.then, label %if.end, !dbg !4114

if.then:                                          ; preds = %land.end
  %13 = load i32, i32* %flags, align 4, !dbg !4115
  %or = or i32 %13, 64, !dbg !4115
  store i32 %or, i32* %flags, align 4, !dbg !4115
  br label %if.end, !dbg !4116

if.end:                                           ; preds = %if.then, %land.end
  %14 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4117
  %call14 = call %union.tree_node* @get_callee_fndecl(%union.tree_node* %14), !dbg !4118
  store %union.tree_node* %call14, %union.tree_node** %fndecl, align 8, !dbg !4119
  %15 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4120
  %tobool15 = icmp ne %union.tree_node* %15, null, !dbg !4120
  br i1 %tobool15, label %if.then16, label %if.else, !dbg !4122

if.then16:                                        ; preds = %if.end
  %16 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4123
  %common = bitcast %union.tree_node* %16 to %struct.tree_common*, !dbg !4123
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !4123
  %17 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !4123
  store %union.tree_node* %17, %union.tree_node** %fntype, align 8, !dbg !4125
  %18 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4126
  %call17 = call i32 @flags_from_decl_or_type(%union.tree_node* %18), !dbg !4127
  %19 = load i32, i32* %flags, align 4, !dbg !4128
  %or18 = or i32 %19, %call17, !dbg !4128
  store i32 %or18, i32* %flags, align 4, !dbg !4128
  br label %if.end25, !dbg !4129

if.else:                                          ; preds = %if.end
  %20 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4130
  %common19 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !4130
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !4130
  %21 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !4130
  %common21 = bitcast %union.tree_node* %21 to %struct.tree_common*, !dbg !4130
  %type22 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common21, i32 0, i32 2, !dbg !4130
  %22 = load %union.tree_node*, %union.tree_node** %type22, align 8, !dbg !4130
  store %union.tree_node* %22, %union.tree_node** %fntype, align 8, !dbg !4132
  %23 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4133
  %call23 = call i32 @flags_from_decl_or_type(%union.tree_node* %23), !dbg !4134
  %24 = load i32, i32* %flags, align 4, !dbg !4135
  %or24 = or i32 %24, %call23, !dbg !4135
  store i32 %or24, i32* %flags, align 4, !dbg !4135
  br label %if.end25

if.end25:                                         ; preds = %if.else, %if.then16
  %25 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4136
  %common26 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !4136
  %type27 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common26, i32 0, i32 2, !dbg !4136
  %26 = load %union.tree_node*, %union.tree_node** %type27, align 8, !dbg !4136
  store %union.tree_node* %26, %union.tree_node** %rettype, align 8, !dbg !4137
  %27 = load %struct.rtx_def* (%union.tree_node*, i32)*, %struct.rtx_def* (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 2), align 8, !dbg !4138
  %28 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4139
  %call28 = call %struct.rtx_def* %27(%union.tree_node* %28, i32 0), !dbg !4140
  store %struct.rtx_def* %call28, %struct.rtx_def** %struct_value, align 8, !dbg !4141
  %29 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4142
  %base29 = bitcast %union.tree_node* %29 to %struct.tree_base*, !dbg !4142
  %30 = bitcast %struct.tree_base* %base29 to i64*, !dbg !4142
  %bf.load30 = load i64, i64* %30, align 8, !dbg !4142
  %bf.clear31 = and i64 %bf.load30, 65535, !dbg !4142
  %bf.cast32 = trunc i64 %bf.clear31 to i32, !dbg !4142
  %cmp33 = icmp eq i32 %bf.cast32, 15, !dbg !4142
  br i1 %cmp33, label %if.then55, label %lor.lhs.false, !dbg !4142

lor.lhs.false:                                    ; preds = %if.end25
  %31 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4142
  %base35 = bitcast %union.tree_node* %31 to %struct.tree_base*, !dbg !4142
  %32 = bitcast %struct.tree_base* %base35 to i64*, !dbg !4142
  %bf.load36 = load i64, i64* %32, align 8, !dbg !4142
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !4142
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !4142
  %cmp39 = icmp eq i32 %bf.cast38, 16, !dbg !4142
  br i1 %cmp39, label %if.then55, label %lor.lhs.false41, !dbg !4142

lor.lhs.false41:                                  ; preds = %lor.lhs.false
  %33 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4142
  %base42 = bitcast %union.tree_node* %33 to %struct.tree_base*, !dbg !4142
  %34 = bitcast %struct.tree_base* %base42 to i64*, !dbg !4142
  %bf.load43 = load i64, i64* %34, align 8, !dbg !4142
  %bf.clear44 = and i64 %bf.load43, 65535, !dbg !4142
  %bf.cast45 = trunc i64 %bf.clear44 to i32, !dbg !4142
  %cmp46 = icmp eq i32 %bf.cast45, 17, !dbg !4142
  br i1 %cmp46, label %if.then55, label %lor.lhs.false48, !dbg !4142

lor.lhs.false48:                                  ; preds = %lor.lhs.false41
  %35 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4142
  %base49 = bitcast %union.tree_node* %35 to %struct.tree_base*, !dbg !4142
  %36 = bitcast %struct.tree_base* %base49 to i64*, !dbg !4142
  %bf.load50 = load i64, i64* %36, align 8, !dbg !4142
  %bf.clear51 = and i64 %bf.load50, 65535, !dbg !4142
  %bf.cast52 = trunc i64 %bf.clear51 to i32, !dbg !4142
  %cmp53 = icmp eq i32 %bf.cast52, 18, !dbg !4142
  br i1 %cmp53, label %if.then55, label %if.end57, !dbg !4144

if.then55:                                        ; preds = %lor.lhs.false48, %lor.lhs.false41, %lor.lhs.false, %if.end25
  %call56 = call zeroext i8 (i32, i8*, ...) @warning(i32 34, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0)), !dbg !4145
  br label %if.end57, !dbg !4145

if.end57:                                         ; preds = %if.then55, %lor.lhs.false48
  %37 = load i32, i32* %flags, align 4, !dbg !4146
  %and58 = and i32 %37, 3, !dbg !4148
  %tobool59 = icmp ne i32 %and58, 0, !dbg !4148
  br i1 %tobool59, label %land.lhs.true, label %if.end104, !dbg !4149

land.lhs.true:                                    ; preds = %if.end57
  %38 = load i32, i32* %flags, align 4, !dbg !4150
  %and60 = and i32 %38, 4, !dbg !4151
  %tobool61 = icmp ne i32 %and60, 0, !dbg !4151
  br i1 %tobool61, label %if.end104, label %land.lhs.true62, !dbg !4152

land.lhs.true62:                                  ; preds = %land.lhs.true
  %39 = load i32, i32* %ignore.addr, align 4, !dbg !4153
  %tobool63 = icmp ne i32 %39, 0, !dbg !4153
  br i1 %tobool63, label %if.then81, label %lor.lhs.false64, !dbg !4154

lor.lhs.false64:                                  ; preds = %land.lhs.true62
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4155
  %41 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4156
  %cmp65 = icmp eq %struct.rtx_def* %40, %41, !dbg !4157
  br i1 %cmp65, label %if.then81, label %lor.lhs.false67, !dbg !4158

lor.lhs.false67:                                  ; preds = %lor.lhs.false64
  %42 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4159
  %base68 = bitcast %union.tree_node* %42 to %struct.tree_base*, !dbg !4159
  %43 = bitcast %struct.tree_base* %base68 to i64*, !dbg !4159
  %bf.load69 = load i64, i64* %43, align 8, !dbg !4159
  %bf.clear70 = and i64 %bf.load69, 65535, !dbg !4159
  %bf.cast71 = trunc i64 %bf.clear70 to i32, !dbg !4159
  %cmp72 = icmp eq i32 %bf.cast71, 14, !dbg !4159
  br i1 %cmp72, label %cond.true, label %cond.false, !dbg !4159

cond.true:                                        ; preds = %lor.lhs.false67
  %44 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4159
  %call74 = call i32 @vector_type_mode(%union.tree_node* %44), !dbg !4159
  br label %cond.end, !dbg !4159

cond.false:                                       ; preds = %lor.lhs.false67
  %45 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4159
  %type75 = bitcast %union.tree_node* %45 to %struct.tree_type*, !dbg !4159
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type75, i32 0, i32 6, !dbg !4159
  %bf.load76 = load i32, i32* %mode, align 4, !dbg !4159
  %bf.lshr77 = lshr i32 %bf.load76, 16, !dbg !4159
  %bf.clear78 = and i32 %bf.lshr77, 255, !dbg !4159
  br label %cond.end, !dbg !4159

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call74, %cond.true ], [ %bf.clear78, %cond.false ], !dbg !4159
  %cmp79 = icmp eq i32 %cond, 0, !dbg !4160
  br i1 %cmp79, label %if.then81, label %if.end104, !dbg !4161

if.then81:                                        ; preds = %cond.end, %lor.lhs.false64, %land.lhs.true62
  call void @llvm.dbg.declare(metadata i8* %volatilep, metadata !4162, metadata !DIExpression()), !dbg !4164
  store i8 0, i8* %volatilep, align 1, !dbg !4164
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !4165, metadata !DIExpression()), !dbg !4166
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !4167, metadata !DIExpression()), !dbg !4174
  %46 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4175
  %call82 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %46, %struct.call_expr_arg_iterator_d* %iter), !dbg !4175
  store %union.tree_node* %call82, %union.tree_node** %arg, align 8, !dbg !4175
  br label %for.cond, !dbg !4175

for.cond:                                         ; preds = %for.inc, %if.then81
  %47 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4177
  %tobool83 = icmp ne %union.tree_node* %47, null, !dbg !4175
  br i1 %tobool83, label %for.body, label %for.end, !dbg !4175

for.body:                                         ; preds = %for.cond
  %48 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4179
  %base84 = bitcast %union.tree_node* %48 to %struct.tree_base*, !dbg !4179
  %49 = bitcast %struct.tree_base* %base84 to i64*, !dbg !4179
  %bf.load85 = load i64, i64* %49, align 8, !dbg !4179
  %bf.lshr86 = lshr i64 %bf.load85, 19, !dbg !4179
  %bf.clear87 = and i64 %bf.lshr86, 1, !dbg !4179
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !4179
  %tobool89 = icmp ne i32 %bf.cast88, 0, !dbg !4179
  br i1 %tobool89, label %if.then90, label %if.end91, !dbg !4181

if.then90:                                        ; preds = %for.body
  store i8 1, i8* %volatilep, align 1, !dbg !4182
  br label %for.end, !dbg !4184

if.end91:                                         ; preds = %for.body
  br label %for.inc, !dbg !4179

for.inc:                                          ; preds = %if.end91
  %call92 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !4177
  store %union.tree_node* %call92, %union.tree_node** %arg, align 8, !dbg !4177
  br label %for.cond, !dbg !4177, !llvm.loop !4185

for.end:                                          ; preds = %if.then90, %for.cond
  %50 = load i8, i8* %volatilep, align 1, !dbg !4187
  %tobool93 = icmp ne i8 %50, 0, !dbg !4187
  br i1 %tobool93, label %if.end103, label %if.then94, !dbg !4189

if.then94:                                        ; preds = %for.end
  %51 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4190
  %call95 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %51, %struct.call_expr_arg_iterator_d* %iter), !dbg !4190
  store %union.tree_node* %call95, %union.tree_node** %arg, align 8, !dbg !4190
  br label %for.cond96, !dbg !4190

for.cond96:                                       ; preds = %for.inc100, %if.then94
  %52 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4193
  %tobool97 = icmp ne %union.tree_node* %52, null, !dbg !4190
  br i1 %tobool97, label %for.body98, label %for.end102, !dbg !4190

for.body98:                                       ; preds = %for.cond96
  %53 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !4195
  %54 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4196
  %call99 = call %struct.rtx_def* @expand_expr(%union.tree_node* %53, %struct.rtx_def* %54, i32 0, i32 0), !dbg !4197
  br label %for.inc100, !dbg !4197

for.inc100:                                       ; preds = %for.body98
  %call101 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !4193
  store %union.tree_node* %call101, %union.tree_node** %arg, align 8, !dbg !4193
  br label %for.cond96, !dbg !4193, !llvm.loop !4198

for.end102:                                       ; preds = %for.cond96
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4200
  store %struct.rtx_def* %55, %struct.rtx_def** %retval, align 8, !dbg !4201
  br label %return, !dbg !4201

if.end103:                                        ; preds = %for.end
  br label %if.end104, !dbg !4202

if.end104:                                        ; preds = %if.end103, %cond.end, %land.lhs.true, %if.end57
  %56 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4203
  %tobool105 = icmp ne %union.tree_node* %56, null, !dbg !4203
  br i1 %tobool105, label %cond.false107, label %cond.true106, !dbg !4203

cond.true106:                                     ; preds = %if.end104
  %57 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4203
  br label %cond.end108, !dbg !4203

cond.false107:                                    ; preds = %if.end104
  %58 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4203
  br label %cond.end108, !dbg !4203

cond.end108:                                      ; preds = %cond.false107, %cond.true106
  %cond109 = phi %union.tree_node* [ %57, %cond.true106 ], [ %58, %cond.false107 ], !dbg !4203
  %call110 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %cond109), !dbg !4203
  store i32 %call110, i32* %reg_parm_stack_space, align 4, !dbg !4204
  %59 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4205
  %tobool111 = icmp ne %union.tree_node* %59, null, !dbg !4205
  br i1 %tobool111, label %cond.false113, label %cond.true112, !dbg !4205

cond.true112:                                     ; preds = %cond.end108
  %60 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4205
  br label %cond.end116, !dbg !4205

cond.false113:                                    ; preds = %cond.end108
  %61 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4205
  %common114 = bitcast %union.tree_node* %61 to %struct.tree_common*, !dbg !4205
  %type115 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common114, i32 0, i32 2, !dbg !4205
  %62 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !4205
  br label %cond.end116, !dbg !4205

cond.end116:                                      ; preds = %cond.false113, %cond.true112
  %cond117 = phi %union.tree_node* [ %60, %cond.true112 ], [ %62, %cond.false113 ], !dbg !4205
  %call118 = call i32 @ix86_function_type_abi(%union.tree_node* %cond117), !dbg !4205
  %cmp119 = icmp eq i32 %call118, 1, !dbg !4205
  br i1 %cmp119, label %if.end137, label %land.lhs.true121, !dbg !4207

land.lhs.true121:                                 ; preds = %cond.end116
  %63 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4208
  %cmp122 = icmp sgt i32 %63, 0, !dbg !4209
  br i1 %cmp122, label %land.lhs.true124, label %if.end137, !dbg !4210

land.lhs.true124:                                 ; preds = %land.lhs.true121
  %64 = load i32, i32* @target_flags, align 4, !dbg !4211
  %and125 = and i32 %64, 8192, !dbg !4211
  %cmp126 = icmp eq i32 %and125, 0, !dbg !4211
  br i1 %cmp126, label %land.lhs.true128, label %if.end137, !dbg !4211

land.lhs.true128:                                 ; preds = %land.lhs.true124
  %65 = load i32, i32* @target_flags, align 4, !dbg !4211
  %and129 = and i32 %65, 4, !dbg !4211
  %cmp130 = icmp ne i32 %and129, 0, !dbg !4211
  br i1 %cmp130, label %if.end137, label %lor.lhs.false132, !dbg !4211

lor.lhs.false132:                                 ; preds = %land.lhs.true128
  %call133 = call i32 @ix86_cfun_abi(), !dbg !4211
  %cmp134 = icmp eq i32 %call133, 1, !dbg !4211
  br i1 %cmp134, label %if.end137, label %if.then136, !dbg !4212

if.then136:                                       ; preds = %lor.lhs.false132
  store i32 1, i32* %must_preallocate, align 4, !dbg !4213
  br label %if.end137, !dbg !4214

if.end137:                                        ; preds = %if.then136, %lor.lhs.false132, %land.lhs.true128, %land.lhs.true124, %land.lhs.true121, %cond.end116
  %66 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4215
  %67 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4217
  %tobool138 = icmp ne %union.tree_node* %67, null, !dbg !4217
  br i1 %tobool138, label %cond.false140, label %cond.true139, !dbg !4218

cond.true139:                                     ; preds = %if.end137
  %68 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4219
  br label %cond.end141, !dbg !4218

cond.false140:                                    ; preds = %if.end137
  %69 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4220
  br label %cond.end141, !dbg !4218

cond.end141:                                      ; preds = %cond.false140, %cond.true139
  %cond142 = phi %union.tree_node* [ %68, %cond.true139 ], [ %69, %cond.false140 ], !dbg !4218
  %call143 = call i32 @aggregate_value_p(%union.tree_node* %66, %union.tree_node* %cond142), !dbg !4221
  %tobool144 = icmp ne i32 %call143, 0, !dbg !4221
  br i1 %tobool144, label %if.then145, label %if.end170, !dbg !4222

if.then145:                                       ; preds = %cond.end141
  %70 = load i32, i32* %flags, align 4, !dbg !4223
  %and146 = and i32 %70, -8, !dbg !4223
  store i32 %and146, i32* %flags, align 4, !dbg !4223
  %71 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4225
  %call147 = call i64 @int_size_in_bytes(%union.tree_node* %71), !dbg !4227
  store i64 %call147, i64* %struct_value_size, align 8, !dbg !4228
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4229
  %tobool148 = icmp ne %struct.rtx_def* %72, null, !dbg !4229
  br i1 %tobool148, label %land.lhs.true149, label %if.else163, !dbg !4231

land.lhs.true149:                                 ; preds = %if.then145
  %73 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4232
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !4232
  %bf.load150 = load i32, i32* %74, align 8, !dbg !4232
  %bf.clear151 = and i32 %bf.load150, 65535, !dbg !4232
  %cmp152 = icmp eq i32 %bf.clear151, 43, !dbg !4232
  br i1 %cmp152, label %land.lhs.true154, label %if.else163, !dbg !4233

land.lhs.true154:                                 ; preds = %land.lhs.true149
  %75 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4234
  %base155 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !4234
  %76 = bitcast %struct.tree_base* %base155 to i64*, !dbg !4234
  %bf.load156 = load i64, i64* %76, align 8, !dbg !4234
  %bf.lshr157 = lshr i64 %bf.load156, 28, !dbg !4234
  %bf.clear158 = and i64 %bf.lshr157, 1, !dbg !4234
  %bf.cast159 = trunc i64 %bf.clear158 to i32, !dbg !4234
  %tobool160 = icmp ne i32 %bf.cast159, 0, !dbg !4234
  br i1 %tobool160, label %if.then161, label %if.else163, !dbg !4235

if.then161:                                       ; preds = %land.lhs.true154
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !4236
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !4236
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4236
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4236
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**, !dbg !4236
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4236
  store %struct.rtx_def* %78, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4237
  br label %if.end169, !dbg !4238

if.else163:                                       ; preds = %land.lhs.true154, %land.lhs.true149, %if.then145
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %d, metadata !4239, metadata !DIExpression()), !dbg !4241
  %79 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4242
  %call164 = call %struct.rtx_def* @assign_temp(%union.tree_node* %79, i32 0, i32 1, i32 1), !dbg !4243
  store %struct.rtx_def* %call164, %struct.rtx_def** %d, align 8, !dbg !4241
  %80 = load %struct.rtx_def*, %struct.rtx_def** %d, align 8, !dbg !4244
  call void @mark_temp_addr_taken(%struct.rtx_def* %80), !dbg !4245
  %81 = load %struct.rtx_def*, %struct.rtx_def** %d, align 8, !dbg !4246
  %u165 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %81, i32 0, i32 1, !dbg !4246
  %fld166 = bitcast %union.u* %u165 to [1 x %union.rtunion_def]*, !dbg !4246
  %arrayidx167 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld166, i64 0, i64 0, !dbg !4246
  %rt_rtx168 = bitcast %union.rtunion_def* %arrayidx167 to %struct.rtx_def**, !dbg !4246
  %82 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx168, align 8, !dbg !4246
  store %struct.rtx_def* %82, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4247
  store %struct.rtx_def* null, %struct.rtx_def** %target.addr, align 8, !dbg !4248
  br label %if.end169

if.end169:                                        ; preds = %if.else163, %if.then161
  br label %if.end170, !dbg !4249

if.end170:                                        ; preds = %if.end169, %cond.end141
  %83 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !4250
  %conv171 = zext i32 %83 to i64, !dbg !4250
  store i64 %conv171, i64* %preferred_stack_boundary, align 8, !dbg !4251
  %84 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4252
  %tobool172 = icmp ne %union.tree_node* %84, null, !dbg !4252
  br i1 %tobool172, label %if.then173, label %if.end188, !dbg !4254

if.then173:                                       ; preds = %if.end170
  call void @llvm.dbg.declare(metadata %struct.cgraph_rtl_info** %i174, metadata !4255, metadata !DIExpression()), !dbg !4262
  %85 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4263
  %call175 = call %struct.cgraph_rtl_info* @cgraph_rtl_info(%union.tree_node* %85), !dbg !4264
  store %struct.cgraph_rtl_info* %call175, %struct.cgraph_rtl_info** %i174, align 8, !dbg !4262
  %86 = load %struct.cgraph_rtl_info*, %struct.cgraph_rtl_info** %i174, align 8, !dbg !4265
  %tobool176 = icmp ne %struct.cgraph_rtl_info* %86, null, !dbg !4265
  br i1 %tobool176, label %land.lhs.true177, label %if.end187, !dbg !4267

land.lhs.true177:                                 ; preds = %if.then173
  %87 = load %struct.cgraph_rtl_info*, %struct.cgraph_rtl_info** %i174, align 8, !dbg !4268
  %preferred_incoming_stack_boundary = getelementptr inbounds %struct.cgraph_rtl_info, %struct.cgraph_rtl_info* %87, i32 0, i32 0, !dbg !4269
  %88 = load i32, i32* %preferred_incoming_stack_boundary, align 4, !dbg !4269
  %tobool178 = icmp ne i32 %88, 0, !dbg !4268
  br i1 %tobool178, label %land.lhs.true179, label %if.end187, !dbg !4270

land.lhs.true179:                                 ; preds = %land.lhs.true177
  %89 = load %struct.cgraph_rtl_info*, %struct.cgraph_rtl_info** %i174, align 8, !dbg !4271
  %preferred_incoming_stack_boundary180 = getelementptr inbounds %struct.cgraph_rtl_info, %struct.cgraph_rtl_info* %89, i32 0, i32 0, !dbg !4272
  %90 = load i32, i32* %preferred_incoming_stack_boundary180, align 4, !dbg !4272
  %conv181 = zext i32 %90 to i64, !dbg !4271
  %91 = load i64, i64* %preferred_stack_boundary, align 8, !dbg !4273
  %cmp182 = icmp ult i64 %conv181, %91, !dbg !4274
  br i1 %cmp182, label %if.then184, label %if.end187, !dbg !4275

if.then184:                                       ; preds = %land.lhs.true179
  %92 = load %struct.cgraph_rtl_info*, %struct.cgraph_rtl_info** %i174, align 8, !dbg !4276
  %preferred_incoming_stack_boundary185 = getelementptr inbounds %struct.cgraph_rtl_info, %struct.cgraph_rtl_info* %92, i32 0, i32 0, !dbg !4277
  %93 = load i32, i32* %preferred_incoming_stack_boundary185, align 4, !dbg !4277
  %conv186 = zext i32 %93 to i64, !dbg !4276
  store i64 %conv186, i64* %preferred_stack_boundary, align 8, !dbg !4278
  br label %if.end187, !dbg !4279

if.end187:                                        ; preds = %if.then184, %land.lhs.true179, %land.lhs.true177, %if.then173
  br label %if.end188, !dbg !4280

if.end188:                                        ; preds = %if.end187, %if.end170
  %94 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4281
  %common189 = bitcast %union.tree_node* %94 to %struct.tree_common*, !dbg !4281
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !4281
  %95 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !4281
  store %union.tree_node* %95, %union.tree_node** %funtype, align 8, !dbg !4282
  %96 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4283
  %base191 = bitcast %union.tree_node* %96 to %struct.tree_base*, !dbg !4283
  %97 = bitcast %struct.tree_base* %base191 to i64*, !dbg !4283
  %bf.load192 = load i64, i64* %97, align 8, !dbg !4283
  %bf.clear193 = and i64 %bf.load192, 65535, !dbg !4283
  %bf.cast194 = trunc i64 %bf.clear193 to i32, !dbg !4283
  %cmp195 = icmp eq i32 %bf.cast194, 10, !dbg !4283
  br i1 %cmp195, label %cond.false205, label %lor.lhs.false197, !dbg !4283

lor.lhs.false197:                                 ; preds = %if.end188
  %98 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4283
  %base198 = bitcast %union.tree_node* %98 to %struct.tree_base*, !dbg !4283
  %99 = bitcast %struct.tree_base* %base198 to i64*, !dbg !4283
  %bf.load199 = load i64, i64* %99, align 8, !dbg !4283
  %bf.clear200 = and i64 %bf.load199, 65535, !dbg !4283
  %bf.cast201 = trunc i64 %bf.clear200 to i32, !dbg !4283
  %cmp202 = icmp eq i32 %bf.cast201, 12, !dbg !4283
  br i1 %cmp202, label %cond.false205, label %cond.true204, !dbg !4283

cond.true204:                                     ; preds = %lor.lhs.false197
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 2140, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4283
  br label %cond.end206, !dbg !4283

cond.false205:                                    ; preds = %lor.lhs.false197, %if.end188
  br label %cond.end206, !dbg !4283

cond.end206:                                      ; preds = %cond.false205, %cond.true204
  %cond207 = phi i32 [ 0, %cond.true204 ], [ 0, %cond.false205 ], !dbg !4283
  %100 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4284
  %common208 = bitcast %union.tree_node* %100 to %struct.tree_common*, !dbg !4284
  %type209 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common208, i32 0, i32 2, !dbg !4284
  %101 = load %union.tree_node*, %union.tree_node** %type209, align 8, !dbg !4284
  store %union.tree_node* %101, %union.tree_node** %funtype, align 8, !dbg !4285
  %102 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !4286
  %tobool210 = icmp ne i8 (%union.tree_node*)* %102, null, !dbg !4288
  br i1 %tobool210, label %if.then211, label %if.else240, !dbg !4289

if.then211:                                       ; preds = %cond.end206
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d* %iter212, metadata !4290, metadata !DIExpression()), !dbg !4292
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg213, metadata !4293, metadata !DIExpression()), !dbg !4294
  %103 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4295
  %call214 = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %103, %struct.call_expr_arg_iterator_d* %iter212), !dbg !4295
  store %union.tree_node* %call214, %union.tree_node** %arg213, align 8, !dbg !4295
  br label %for.cond215, !dbg !4295

for.cond215:                                      ; preds = %for.inc235, %if.then211
  %104 = load %union.tree_node*, %union.tree_node** %arg213, align 8, !dbg !4297
  %tobool216 = icmp ne %union.tree_node* %104, null, !dbg !4295
  br i1 %tobool216, label %for.body217, label %for.end237, !dbg !4295

for.body217:                                      ; preds = %for.cond215
  call void @llvm.dbg.declare(metadata %union.tree_node** %type218, metadata !4299, metadata !DIExpression()), !dbg !4301
  %105 = load %union.tree_node*, %union.tree_node** %arg213, align 8, !dbg !4302
  %common219 = bitcast %union.tree_node* %105 to %struct.tree_common*, !dbg !4302
  %type220 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common219, i32 0, i32 2, !dbg !4302
  %106 = load %union.tree_node*, %union.tree_node** %type220, align 8, !dbg !4302
  store %union.tree_node* %106, %union.tree_node** %type218, align 8, !dbg !4301
  %107 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !4303
  %tobool221 = icmp ne %union.tree_node* %107, null, !dbg !4303
  br i1 %tobool221, label %land.lhs.true222, label %if.end234, !dbg !4305

land.lhs.true222:                                 ; preds = %for.body217
  %108 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !4306
  %base223 = bitcast %union.tree_node* %108 to %struct.tree_base*, !dbg !4306
  %109 = bitcast %struct.tree_base* %base223 to i64*, !dbg !4306
  %bf.load224 = load i64, i64* %109, align 8, !dbg !4306
  %bf.clear225 = and i64 %bf.load224, 65535, !dbg !4306
  %bf.cast226 = trunc i64 %bf.clear225 to i32, !dbg !4306
  %cmp227 = icmp eq i32 %bf.cast226, 13, !dbg !4307
  br i1 %cmp227, label %land.lhs.true229, label %if.end234, !dbg !4308

land.lhs.true229:                                 ; preds = %land.lhs.true222
  %110 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !4309
  %111 = load %union.tree_node*, %union.tree_node** %type218, align 8, !dbg !4310
  %call230 = call zeroext i8 %110(%union.tree_node* %111), !dbg !4311
  %conv231 = zext i8 %call230 to i32, !dbg !4311
  %tobool232 = icmp ne i32 %conv231, 0, !dbg !4311
  br i1 %tobool232, label %if.then233, label %if.end234, !dbg !4312

if.then233:                                       ; preds = %land.lhs.true229
  %112 = load i32, i32* %num_complex_actuals, align 4, !dbg !4313
  %inc = add nsw i32 %112, 1, !dbg !4313
  store i32 %inc, i32* %num_complex_actuals, align 4, !dbg !4313
  br label %if.end234, !dbg !4314

if.end234:                                        ; preds = %if.then233, %land.lhs.true229, %land.lhs.true222, %for.body217
  br label %for.inc235, !dbg !4315

for.inc235:                                       ; preds = %if.end234
  %call236 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter212), !dbg !4297
  store %union.tree_node* %call236, %union.tree_node** %arg213, align 8, !dbg !4297
  br label %for.cond215, !dbg !4297, !llvm.loop !4316

for.end237:                                       ; preds = %for.cond215
  %113 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4318
  %type238 = bitcast %union.tree_node* %113 to %struct.tree_type*, !dbg !4318
  %values = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type238, i32 0, i32 1, !dbg !4318
  %114 = load %union.tree_node*, %union.tree_node** %values, align 8, !dbg !4318
  %call239 = call %union.tree_node* @split_complex_types(%union.tree_node* %114), !dbg !4319
  store %union.tree_node* %call239, %union.tree_node** %type_arg_types, align 8, !dbg !4320
  br label %if.end243, !dbg !4321

if.else240:                                       ; preds = %cond.end206
  %115 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4322
  %type241 = bitcast %union.tree_node* %115 to %struct.tree_type*, !dbg !4322
  %values242 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type241, i32 0, i32 1, !dbg !4322
  %116 = load %union.tree_node*, %union.tree_node** %values242, align 8, !dbg !4322
  store %union.tree_node* %116, %union.tree_node** %type_arg_types, align 8, !dbg !4323
  br label %if.end243

if.end243:                                        ; preds = %if.else240, %for.end237
  %117 = load i32, i32* %flags, align 4, !dbg !4324
  %and244 = and i32 %117, 32, !dbg !4326
  %tobool245 = icmp ne i32 %and244, 0, !dbg !4326
  br i1 %tobool245, label %if.then246, label %if.end249, !dbg !4327

if.then246:                                       ; preds = %if.end243
  %118 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4328
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %118, i64 0, !dbg !4328
  %calls_alloca = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !4329
  %bf.load247 = load i32, i32* %calls_alloca, align 8, !dbg !4330
  %bf.clear248 = and i32 %bf.load247, -524289, !dbg !4330
  %bf.set = or i32 %bf.clear248, 524288, !dbg !4330
  store i32 %bf.set, i32* %calls_alloca, align 8, !dbg !4330
  br label %if.end249, !dbg !4328

if.end249:                                        ; preds = %if.then246, %if.end243
  %119 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4331
  %tobool250 = icmp ne %struct.rtx_def* %119, null, !dbg !4331
  br i1 %tobool250, label %land.lhs.true251, label %if.end282, !dbg !4333

land.lhs.true251:                                 ; preds = %if.end249
  %120 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !4334
  %cmp252 = icmp eq %struct.rtx_def* %120, null, !dbg !4335
  br i1 %cmp252, label %if.then254, label %if.end282, !dbg !4336

if.then254:                                       ; preds = %land.lhs.true251
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp, metadata !4337, metadata !DIExpression()), !dbg !4339
  %121 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4340
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !4340
  %bf.load255 = load i32, i32* %122, align 8, !dbg !4340
  %bf.clear256 = and i32 %bf.load255, 65535, !dbg !4340
  %cmp257 = icmp eq i32 %bf.clear256, 37, !dbg !4340
  br i1 %cmp257, label %lor.lhs.false259, label %cond.true272, !dbg !4341

lor.lhs.false259:                                 ; preds = %if.then254
  %123 = load i32, i32* @target_flags, align 4, !dbg !4342
  %and260 = and i32 %123, 4, !dbg !4342
  %cmp261 = icmp ne i32 %and260, 0, !dbg !4342
  br i1 %cmp261, label %land.lhs.true267, label %lor.lhs.false263, !dbg !4342

lor.lhs.false263:                                 ; preds = %lor.lhs.false259
  %call264 = call i32 @ix86_cfun_abi(), !dbg !4342
  %cmp265 = icmp eq i32 %call264, 1, !dbg !4342
  br i1 %cmp265, label %land.lhs.true267, label %cond.false275, !dbg !4343

land.lhs.true267:                                 ; preds = %lor.lhs.false263, %lor.lhs.false259
  %124 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !4344
  %tobool268 = icmp ne i32 %124, 0, !dbg !4344
  br i1 %tobool268, label %land.lhs.true269, label %cond.false275, !dbg !4345

land.lhs.true269:                                 ; preds = %land.lhs.true267
  %125 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4346
  %126 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !4347
  %cmp270 = icmp eq %struct.rtx_def* %125, %126, !dbg !4348
  br i1 %cmp270, label %cond.true272, label %cond.false275, !dbg !4349

cond.true272:                                     ; preds = %land.lhs.true269, %if.then254
  %127 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4350
  %call273 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %127, i8 zeroext 0), !dbg !4350
  %call274 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %call273), !dbg !4351
  br label %cond.end276, !dbg !4349

cond.false275:                                    ; preds = %land.lhs.true269, %land.lhs.true267, %lor.lhs.false263
  %128 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4352
  br label %cond.end276, !dbg !4349

cond.end276:                                      ; preds = %cond.false275, %cond.true272
  %cond277 = phi %struct.rtx_def* [ %call274, %cond.true272 ], [ %128, %cond.false275 ], !dbg !4349
  store %struct.rtx_def* %cond277, %struct.rtx_def** %temp, align 8, !dbg !4339
  %129 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4353
  %common278 = bitcast %union.tree_node* %129 to %struct.tree_common*, !dbg !4353
  %type279 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common278, i32 0, i32 2, !dbg !4353
  %130 = load %union.tree_node*, %union.tree_node** %type279, align 8, !dbg !4353
  %call280 = call %union.tree_node* @build_pointer_type(%union.tree_node* %130), !dbg !4354
  %131 = load %struct.rtx_def*, %struct.rtx_def** %temp, align 8, !dbg !4355
  %call281 = call %union.tree_node* @make_tree(%union.tree_node* %call280, %struct.rtx_def* %131), !dbg !4356
  store %union.tree_node* %call281, %union.tree_node** %structure_value_addr_value, align 8, !dbg !4357
  store i32 1, i32* %structure_value_addr_parm, align 4, !dbg !4358
  br label %if.end282, !dbg !4359

if.end282:                                        ; preds = %cond.end276, %land.lhs.true251, %if.end249
  %132 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4360
  %exp283 = bitcast %union.tree_node* %132 to %struct.tree_exp*, !dbg !4360
  %operands284 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp283, i32 0, i32 3, !dbg !4360
  %arrayidx285 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands284, i64 0, i64 0, !dbg !4360
  %133 = load %union.tree_node*, %union.tree_node** %arrayidx285, align 8, !dbg !4360
  %int_cst = bitcast %union.tree_node* %133 to %struct.tree_int_cst*, !dbg !4360
  %int_cst286 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !4360
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst286, i32 0, i32 0, !dbg !4360
  %134 = load i64, i64* %low, align 8, !dbg !4360
  %conv287 = trunc i64 %134 to i32, !dbg !4360
  %sub = sub nsw i32 %conv287, 3, !dbg !4360
  %135 = load i32, i32* %num_complex_actuals, align 4, !dbg !4361
  %add = add nsw i32 %sub, %135, !dbg !4362
  %136 = load i32, i32* %structure_value_addr_parm, align 4, !dbg !4363
  %add288 = add nsw i32 %add, %136, !dbg !4364
  store i32 %add288, i32* %num_actuals, align 4, !dbg !4365
  %137 = load %union.tree_node*, %union.tree_node** %type_arg_types, align 8, !dbg !4366
  %cmp289 = icmp ne %union.tree_node* %137, null, !dbg !4368
  br i1 %cmp289, label %if.then291, label %if.else294, !dbg !4369

if.then291:                                       ; preds = %if.end282
  %138 = load %union.tree_node*, %union.tree_node** %type_arg_types, align 8, !dbg !4370
  %call292 = call i32 @list_length(%union.tree_node* %138), !dbg !4371
  %139 = load i32, i32* %structure_value_addr_parm, align 4, !dbg !4372
  %add293 = add nsw i32 %call292, %139, !dbg !4373
  store i32 %add293, i32* %n_named_args, align 4, !dbg !4374
  br label %if.end295, !dbg !4375

if.else294:                                       ; preds = %if.end282
  %140 = load i32, i32* %num_actuals, align 4, !dbg !4376
  store i32 %140, i32* %n_named_args, align 4, !dbg !4377
  br label %if.end295

if.end295:                                        ; preds = %if.else294, %if.then291
  %141 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4378
  %142 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4378
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* %141, %struct.rtx_def* null, %union.tree_node* %142), !dbg !4378
  %143 = load %union.tree_node*, %union.tree_node** %type_arg_types, align 8, !dbg !4379
  %cmp296 = icmp ne %union.tree_node* %143, null, !dbg !4381
  br i1 %cmp296, label %land.lhs.true298, label %if.else303, !dbg !4382

land.lhs.true298:                                 ; preds = %if.end295
  %144 = load i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 8), align 8, !dbg !4383
  %call299 = call zeroext i8 %144(%struct.ix86_args* %args_so_far), !dbg !4384
  %conv300 = zext i8 %call299 to i32, !dbg !4384
  %tobool301 = icmp ne i32 %conv300, 0, !dbg !4384
  br i1 %tobool301, label %if.then302, label %if.else303, !dbg !4385

if.then302:                                       ; preds = %land.lhs.true298
  br label %if.end312, !dbg !4385

if.else303:                                       ; preds = %land.lhs.true298, %if.end295
  %145 = load %union.tree_node*, %union.tree_node** %type_arg_types, align 8, !dbg !4386
  %cmp304 = icmp ne %union.tree_node* %145, null, !dbg !4388
  br i1 %cmp304, label %land.lhs.true306, label %if.else310, !dbg !4389

land.lhs.true306:                                 ; preds = %if.else303
  %146 = load i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 9), align 8, !dbg !4390
  %call307 = call zeroext i8 %146(%struct.ix86_args* %args_so_far), !dbg !4391
  %tobool308 = icmp ne i8 %call307, 0, !dbg !4391
  br i1 %tobool308, label %if.else310, label %if.then309, !dbg !4392

if.then309:                                       ; preds = %land.lhs.true306
  %147 = load i32, i32* %n_named_args, align 4, !dbg !4393
  %dec = add nsw i32 %147, -1, !dbg !4393
  store i32 %dec, i32* %n_named_args, align 4, !dbg !4393
  br label %if.end311, !dbg !4393

if.else310:                                       ; preds = %land.lhs.true306, %if.else303
  %148 = load i32, i32* %num_actuals, align 4, !dbg !4394
  store i32 %148, i32* %n_named_args, align 4, !dbg !4395
  br label %if.end311

if.end311:                                        ; preds = %if.else310, %if.then309
  br label %if.end312

if.end312:                                        ; preds = %if.end311, %if.then302
  %149 = load i32, i32* %num_actuals, align 4, !dbg !4396
  %conv313 = sext i32 %149 to i64, !dbg !4396
  %mul = mul i64 184, %conv313, !dbg !4396
  %150 = alloca i8, i64 %mul, align 16, !dbg !4396
  %151 = bitcast i8* %150 to %struct.arg_data*, !dbg !4396
  store %struct.arg_data* %151, %struct.arg_data** %args, align 8, !dbg !4397
  %152 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4398
  %153 = bitcast %struct.arg_data* %152 to i8*, !dbg !4399
  %154 = load i32, i32* %num_actuals, align 4, !dbg !4400
  %conv314 = sext i32 %154 to i64, !dbg !4400
  %mul315 = mul i64 %conv314, 184, !dbg !4401
  call void @llvm.memset.p0i8.i64(i8* align 8 %153, i8 0, i64 %mul315, i1 false), !dbg !4399
  %155 = load i32, i32* %num_actuals, align 4, !dbg !4402
  %156 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4403
  %157 = load i32, i32* %n_named_args, align 4, !dbg !4404
  %158 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4405
  %159 = load %union.tree_node*, %union.tree_node** %structure_value_addr_value, align 8, !dbg !4406
  %160 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4407
  %161 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4408
  %162 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4409
  %163 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4410
  %base316 = bitcast %union.tree_node* %163 to %struct.tree_base*, !dbg !4410
  %164 = bitcast %struct.tree_base* %base316 to i64*, !dbg !4410
  %bf.load317 = load i64, i64* %164, align 8, !dbg !4410
  %bf.lshr318 = lshr i64 %bf.load317, 29, !dbg !4410
  %bf.clear319 = and i64 %bf.lshr318, 1, !dbg !4410
  %bf.cast320 = trunc i64 %bf.clear319 to i32, !dbg !4410
  %conv321 = trunc i32 %bf.cast320 to i8, !dbg !4410
  call void @initialize_argument_information(i32 %155, %struct.arg_data* %156, %struct.args_size* %args_size, i32 %157, %union.tree_node* %158, %union.tree_node* %159, %union.tree_node* %160, %union.tree_node* %161, %struct.ix86_args* %args_so_far, i32 %162, %struct.rtx_def** %old_stack_level, i32* %old_pending_adj, i32* %must_preallocate, i32* %flags, i8* %try_tail_call, i8 zeroext %conv321), !dbg !4411
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 1, !dbg !4412
  %165 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !4412
  %tobool322 = icmp ne %union.tree_node* %165, null, !dbg !4414
  br i1 %tobool322, label %if.then323, label %if.end324, !dbg !4415

if.then323:                                       ; preds = %if.end312
  store i32 1, i32* %must_preallocate, align 4, !dbg !4416
  br label %if.end324, !dbg !4417

if.end324:                                        ; preds = %if.then323, %if.end312
  %166 = load i32, i32* %must_preallocate, align 4, !dbg !4418
  %167 = load i32, i32* %num_actuals, align 4, !dbg !4419
  %168 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4420
  %call325 = call i32 @finalize_must_preallocate(i32 %166, i32 %167, %struct.arg_data* %168, %struct.args_size* %args_size), !dbg !4421
  store i32 %call325, i32* %must_preallocate, align 4, !dbg !4422
  %169 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4423
  %tobool326 = icmp ne %struct.rtx_def* %169, null, !dbg !4423
  br i1 %tobool326, label %land.lhs.true327, label %if.end348, !dbg !4425

land.lhs.true327:                                 ; preds = %if.end324
  %170 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 8), align 16, !dbg !4426
  %171 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4427
  %call328 = call i32 @reg_mentioned_p(%struct.rtx_def* %170, %struct.rtx_def* %171), !dbg !4428
  %tobool329 = icmp ne i32 %call328, 0, !dbg !4428
  br i1 %tobool329, label %land.lhs.true333, label %lor.lhs.false330, !dbg !4429

lor.lhs.false330:                                 ; preds = %land.lhs.true327
  %172 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !4430
  %173 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4431
  %call331 = call i32 @reg_mentioned_p(%struct.rtx_def* %172, %struct.rtx_def* %173), !dbg !4432
  %tobool332 = icmp ne i32 %call331, 0, !dbg !4432
  br i1 %tobool332, label %land.lhs.true333, label %if.end348, !dbg !4433

land.lhs.true333:                                 ; preds = %lor.lhs.false330, %land.lhs.true327
  %var334 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 1, !dbg !4434
  %174 = load %union.tree_node*, %union.tree_node** %var334, align 8, !dbg !4434
  %tobool335 = icmp ne %union.tree_node* %174, null, !dbg !4435
  br i1 %tobool335, label %if.then346, label %lor.lhs.false336, !dbg !4436

lor.lhs.false336:                                 ; preds = %land.lhs.true333
  %175 = load i32, i32* @target_flags, align 4, !dbg !4437
  %and337 = and i32 %175, 4, !dbg !4437
  %cmp338 = icmp ne i32 %and337, 0, !dbg !4437
  br i1 %cmp338, label %if.end348, label %lor.lhs.false340, !dbg !4437

lor.lhs.false340:                                 ; preds = %lor.lhs.false336
  %call341 = call i32 @ix86_cfun_abi(), !dbg !4437
  %cmp342 = icmp eq i32 %call341, 1, !dbg !4437
  br i1 %cmp342, label %if.end348, label %land.lhs.true344, !dbg !4438

land.lhs.true344:                                 ; preds = %lor.lhs.false340
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !4439
  %176 = load i64, i64* %constant, align 8, !dbg !4439
  %tobool345 = icmp ne i64 %176, 0, !dbg !4440
  br i1 %tobool345, label %if.then346, label %if.end348, !dbg !4441

if.then346:                                       ; preds = %land.lhs.true344, %land.lhs.true333
  %177 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4442
  %call347 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %177), !dbg !4443
  store %struct.rtx_def* %call347, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4444
  br label %if.end348, !dbg !4445

if.end348:                                        ; preds = %if.then346, %land.lhs.true344, %lor.lhs.false340, %lor.lhs.false336, %lor.lhs.false330, %if.end324
  %178 = load i32, i32* @expand_call.currently_expanding_call, align 4, !dbg !4446
  %inc349 = add nsw i32 %178, 1, !dbg !4446
  store i32 %inc349, i32* @expand_call.currently_expanding_call, align 4, !dbg !4446
  %cmp350 = icmp ne i32 %178, 0, !dbg !4448
  br i1 %cmp350, label %if.then362, label %lor.lhs.false352, !dbg !4449

lor.lhs.false352:                                 ; preds = %if.end348
  %179 = load i32, i32* @flag_optimize_sibling_calls, align 4, !dbg !4450
  %tobool353 = icmp ne i32 %179, 0, !dbg !4450
  br i1 %tobool353, label %lor.lhs.false354, label %if.then362, !dbg !4451

lor.lhs.false354:                                 ; preds = %lor.lhs.false352
  %var355 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 1, !dbg !4452
  %180 = load %union.tree_node*, %union.tree_node** %var355, align 8, !dbg !4452
  %tobool356 = icmp ne %union.tree_node* %180, null, !dbg !4453
  br i1 %tobool356, label %if.then362, label %lor.lhs.false357, !dbg !4454

lor.lhs.false357:                                 ; preds = %lor.lhs.false354
  %call358 = call zeroext i8 @dbg_cnt(i32 37), !dbg !4455
  %conv359 = zext i8 %call358 to i32, !dbg !4455
  %cmp360 = icmp eq i32 %conv359, 0, !dbg !4456
  br i1 %cmp360, label %if.then362, label %if.end363, !dbg !4457

if.then362:                                       ; preds = %lor.lhs.false357, %lor.lhs.false354, %lor.lhs.false352, %if.end348
  store i8 0, i8* %try_tail_call, align 1, !dbg !4458
  br label %if.end363, !dbg !4459

if.end363:                                        ; preds = %if.then362, %lor.lhs.false357
  %181 = load i8, i8* %try_tail_call, align 1, !dbg !4460
  %tobool364 = icmp ne i8 %181, 0, !dbg !4460
  br i1 %tobool364, label %lor.lhs.false365, label %if.then424, !dbg !4462

lor.lhs.false365:                                 ; preds = %if.end363
  %182 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4463
  %cmp366 = icmp ne %struct.rtx_def* %182, null, !dbg !4464
  br i1 %cmp366, label %if.then424, label %lor.lhs.false368, !dbg !4465

lor.lhs.false368:                                 ; preds = %lor.lhs.false365
  %183 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4466
  %call369 = call i32 @ix86_function_type_abi(%union.tree_node* %183), !dbg !4466
  %cmp370 = icmp eq i32 %call369, 1, !dbg !4466
  %conv371 = zext i1 %cmp370 to i32, !dbg !4466
  %184 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4467
  %common372 = bitcast %union.tree_node* %184 to %struct.tree_common*, !dbg !4467
  %type373 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common372, i32 0, i32 2, !dbg !4467
  %185 = load %union.tree_node*, %union.tree_node** %type373, align 8, !dbg !4467
  %call374 = call i32 @ix86_function_type_abi(%union.tree_node* %185), !dbg !4467
  %cmp375 = icmp eq i32 %call374, 1, !dbg !4467
  %conv376 = zext i1 %cmp375 to i32, !dbg !4467
  %cmp377 = icmp ne i32 %conv371, %conv376, !dbg !4468
  br i1 %cmp377, label %if.then424, label %lor.lhs.false379, !dbg !4469

lor.lhs.false379:                                 ; preds = %lor.lhs.false368
  %186 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4470
  %187 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4471
  %call380 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* %187), !dbg !4471
  %cmp381 = icmp ne i32 %186, %call380, !dbg !4472
  br i1 %cmp381, label %if.then424, label %lor.lhs.false383, !dbg !4473

lor.lhs.false383:                                 ; preds = %lor.lhs.false379
  %188 = load i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 46), align 8, !dbg !4474
  %189 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4475
  %190 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4476
  %call384 = call zeroext i8 %188(%union.tree_node* %189, %union.tree_node* %190), !dbg !4477
  %tobool385 = icmp ne i8 %call384, 0, !dbg !4477
  br i1 %tobool385, label %lor.lhs.false386, label %if.then424, !dbg !4478

lor.lhs.false386:                                 ; preds = %lor.lhs.false383
  %191 = load i32, i32* %flags, align 4, !dbg !4479
  %and387 = and i32 %191, 136, !dbg !4480
  %tobool388 = icmp ne i32 %and387, 0, !dbg !4480
  br i1 %tobool388, label %if.then424, label %lor.lhs.false389, !dbg !4481

lor.lhs.false389:                                 ; preds = %lor.lhs.false386
  %192 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4482
  %common390 = bitcast %union.tree_node* %192 to %struct.tree_common*, !dbg !4482
  %type391 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common390, i32 0, i32 2, !dbg !4482
  %193 = load %union.tree_node*, %union.tree_node** %type391, align 8, !dbg !4482
  %common392 = bitcast %union.tree_node* %193 to %struct.tree_common*, !dbg !4482
  %type393 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common392, i32 0, i32 2, !dbg !4482
  %194 = load %union.tree_node*, %union.tree_node** %type393, align 8, !dbg !4482
  %base394 = bitcast %union.tree_node* %194 to %struct.tree_base*, !dbg !4482
  %195 = bitcast %struct.tree_base* %base394 to i64*, !dbg !4482
  %bf.load395 = load i64, i64* %195, align 8, !dbg !4482
  %bf.lshr396 = lshr i64 %bf.load395, 19, !dbg !4482
  %bf.clear397 = and i64 %bf.lshr396, 1, !dbg !4482
  %bf.cast398 = trunc i64 %bf.clear397 to i32, !dbg !4482
  %tobool399 = icmp ne i32 %bf.cast398, 0, !dbg !4482
  br i1 %tobool399, label %if.then424, label %lor.lhs.false400, !dbg !4483

lor.lhs.false400:                                 ; preds = %lor.lhs.false389
  %196 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4484
  %tobool401 = icmp ne %union.tree_node* %196, null, !dbg !4484
  br i1 %tobool401, label %land.lhs.true402, label %lor.lhs.false406, !dbg !4485

land.lhs.true402:                                 ; preds = %lor.lhs.false400
  %197 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4486
  %call403 = call %union.tree_node* @decl_function_context(%union.tree_node* %197), !dbg !4487
  %198 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4488
  %cmp404 = icmp eq %union.tree_node* %call403, %198, !dbg !4489
  br i1 %cmp404, label %if.then424, label %lor.lhs.false406, !dbg !4490

lor.lhs.false406:                                 ; preds = %land.lhs.true402, %lor.lhs.false400
  %constant407 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !4491
  %199 = load i64, i64* %constant407, align 8, !dbg !4491
  %200 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !4492
  %201 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 2), align 8, !dbg !4493
  %sub408 = sub nsw i32 %200, %201, !dbg !4494
  %conv409 = sext i32 %sub408 to i64, !dbg !4495
  %cmp410 = icmp sgt i64 %199, %conv409, !dbg !4496
  br i1 %cmp410, label %if.then424, label %lor.lhs.false412, !dbg !4497

lor.lhs.false412:                                 ; preds = %lor.lhs.false406
  %202 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4498
  %203 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4498
  %constant413 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !4498
  %204 = load i64, i64* %constant413, align 8, !dbg !4498
  %conv414 = trunc i64 %204 to i32, !dbg !4498
  %call415 = call i32 @ix86_return_pops_args(%union.tree_node* %202, %union.tree_node* %203, i32 %conv414), !dbg !4498
  %205 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4499
  %206 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4499
  %common416 = bitcast %union.tree_node* %206 to %struct.tree_common*, !dbg !4499
  %type417 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common416, i32 0, i32 2, !dbg !4499
  %207 = load %union.tree_node*, %union.tree_node** %type417, align 8, !dbg !4499
  %208 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 1), align 4, !dbg !4499
  %call418 = call i32 @ix86_return_pops_args(%union.tree_node* %205, %union.tree_node* %207, i32 %208), !dbg !4499
  %cmp419 = icmp ne i32 %call415, %call418, !dbg !4500
  br i1 %cmp419, label %if.then424, label %lor.lhs.false421, !dbg !4501

lor.lhs.false421:                                 ; preds = %lor.lhs.false412
  %209 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 33, i32 9), align 8, !dbg !4502
  %210 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4503
  %call422 = call zeroext i8 %209(%union.tree_node* %210), !dbg !4504
  %tobool423 = icmp ne i8 %call422, 0, !dbg !4504
  br i1 %tobool423, label %if.end425, label %if.then424, !dbg !4505

if.then424:                                       ; preds = %lor.lhs.false421, %lor.lhs.false412, %lor.lhs.false406, %land.lhs.true402, %lor.lhs.false389, %lor.lhs.false386, %lor.lhs.false383, %lor.lhs.false379, %lor.lhs.false368, %lor.lhs.false365, %if.end363
  store i8 0, i8* %try_tail_call, align 1, !dbg !4506
  br label %if.end425, !dbg !4507

if.end425:                                        ; preds = %if.then424, %lor.lhs.false421
  %211 = load i8, i8* %try_tail_call, align 1, !dbg !4508
  %tobool426 = icmp ne i8 %211, 0, !dbg !4508
  br i1 %tobool426, label %if.then427, label %if.end508, !dbg !4510

if.then427:                                       ; preds = %if.end425
  call void @llvm.dbg.declare(metadata i32* %caller_mode, metadata !4511, metadata !DIExpression()), !dbg !4513
  call void @llvm.dbg.declare(metadata i32* %caller_promoted_mode, metadata !4514, metadata !DIExpression()), !dbg !4515
  call void @llvm.dbg.declare(metadata i32* %callee_mode, metadata !4516, metadata !DIExpression()), !dbg !4517
  call void @llvm.dbg.declare(metadata i32* %callee_promoted_mode, metadata !4518, metadata !DIExpression()), !dbg !4519
  call void @llvm.dbg.declare(metadata i32* %caller_unsignedp, metadata !4520, metadata !DIExpression()), !dbg !4521
  call void @llvm.dbg.declare(metadata i32* %callee_unsignedp, metadata !4522, metadata !DIExpression()), !dbg !4523
  call void @llvm.dbg.declare(metadata %union.tree_node** %caller_res, metadata !4524, metadata !DIExpression()), !dbg !4525
  %212 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4526
  %decl_non_common = bitcast %union.tree_node* %212 to %struct.tree_decl_non_common*, !dbg !4526
  %result = getelementptr inbounds %struct.tree_decl_non_common, %struct.tree_decl_non_common* %decl_non_common, i32 0, i32 3, !dbg !4526
  %213 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !4526
  store %union.tree_node* %213, %union.tree_node** %caller_res, align 8, !dbg !4525
  %214 = load %union.tree_node*, %union.tree_node** %caller_res, align 8, !dbg !4527
  %common428 = bitcast %union.tree_node* %214 to %struct.tree_common*, !dbg !4527
  %type429 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common428, i32 0, i32 2, !dbg !4527
  %215 = load %union.tree_node*, %union.tree_node** %type429, align 8, !dbg !4527
  %base430 = bitcast %union.tree_node* %215 to %struct.tree_base*, !dbg !4527
  %216 = bitcast %struct.tree_base* %base430 to i64*, !dbg !4527
  %bf.load431 = load i64, i64* %216, align 8, !dbg !4527
  %bf.lshr432 = lshr i64 %bf.load431, 21, !dbg !4527
  %bf.clear433 = and i64 %bf.lshr432, 1, !dbg !4527
  %bf.cast434 = trunc i64 %bf.clear433 to i32, !dbg !4527
  store i32 %bf.cast434, i32* %caller_unsignedp, align 4, !dbg !4528
  %217 = load %union.tree_node*, %union.tree_node** %caller_res, align 8, !dbg !4529
  %decl_common = bitcast %union.tree_node* %217 to %struct.tree_decl_common*, !dbg !4529
  %mode435 = getelementptr inbounds %struct.tree_decl_common, %struct.tree_decl_common* %decl_common, i32 0, i32 2, !dbg !4529
  %218 = bitcast i40* %mode435 to i64*, !dbg !4529
  %bf.load436 = load i64, i64* %218, align 8, !dbg !4529
  %bf.clear437 = and i64 %bf.load436, 255, !dbg !4529
  %bf.cast438 = trunc i64 %bf.clear437 to i32, !dbg !4529
  store i32 %bf.cast438, i32* %caller_mode, align 4, !dbg !4530
  %219 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4531
  %common439 = bitcast %union.tree_node* %219 to %struct.tree_common*, !dbg !4531
  %type440 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common439, i32 0, i32 2, !dbg !4531
  %220 = load %union.tree_node*, %union.tree_node** %type440, align 8, !dbg !4531
  %base441 = bitcast %union.tree_node* %220 to %struct.tree_base*, !dbg !4531
  %221 = bitcast %struct.tree_base* %base441 to i64*, !dbg !4531
  %bf.load442 = load i64, i64* %221, align 8, !dbg !4531
  %bf.lshr443 = lshr i64 %bf.load442, 21, !dbg !4531
  %bf.clear444 = and i64 %bf.lshr443, 1, !dbg !4531
  %bf.cast445 = trunc i64 %bf.clear444 to i32, !dbg !4531
  store i32 %bf.cast445, i32* %callee_unsignedp, align 4, !dbg !4532
  %222 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4533
  %common446 = bitcast %union.tree_node* %222 to %struct.tree_common*, !dbg !4533
  %type447 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common446, i32 0, i32 2, !dbg !4533
  %223 = load %union.tree_node*, %union.tree_node** %type447, align 8, !dbg !4533
  %base448 = bitcast %union.tree_node* %223 to %struct.tree_base*, !dbg !4533
  %224 = bitcast %struct.tree_base* %base448 to i64*, !dbg !4533
  %bf.load449 = load i64, i64* %224, align 8, !dbg !4533
  %bf.clear450 = and i64 %bf.load449, 65535, !dbg !4533
  %bf.cast451 = trunc i64 %bf.clear450 to i32, !dbg !4533
  %cmp452 = icmp eq i32 %bf.cast451, 14, !dbg !4533
  br i1 %cmp452, label %cond.true454, label %cond.false458, !dbg !4533

cond.true454:                                     ; preds = %if.then427
  %225 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4533
  %common455 = bitcast %union.tree_node* %225 to %struct.tree_common*, !dbg !4533
  %type456 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common455, i32 0, i32 2, !dbg !4533
  %226 = load %union.tree_node*, %union.tree_node** %type456, align 8, !dbg !4533
  %call457 = call i32 @vector_type_mode(%union.tree_node* %226), !dbg !4533
  br label %cond.end466, !dbg !4533

cond.false458:                                    ; preds = %if.then427
  %227 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4533
  %common459 = bitcast %union.tree_node* %227 to %struct.tree_common*, !dbg !4533
  %type460 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common459, i32 0, i32 2, !dbg !4533
  %228 = load %union.tree_node*, %union.tree_node** %type460, align 8, !dbg !4533
  %type461 = bitcast %union.tree_node* %228 to %struct.tree_type*, !dbg !4533
  %mode462 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type461, i32 0, i32 6, !dbg !4533
  %bf.load463 = load i32, i32* %mode462, align 4, !dbg !4533
  %bf.lshr464 = lshr i32 %bf.load463, 16, !dbg !4533
  %bf.clear465 = and i32 %bf.lshr464, 255, !dbg !4533
  br label %cond.end466, !dbg !4533

cond.end466:                                      ; preds = %cond.false458, %cond.true454
  %cond467 = phi i32 [ %call457, %cond.true454 ], [ %bf.clear465, %cond.false458 ], !dbg !4533
  store i32 %cond467, i32* %callee_mode, align 4, !dbg !4534
  %229 = load %union.tree_node*, %union.tree_node** %caller_res, align 8, !dbg !4535
  %common468 = bitcast %union.tree_node* %229 to %struct.tree_common*, !dbg !4535
  %type469 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common468, i32 0, i32 2, !dbg !4535
  %230 = load %union.tree_node*, %union.tree_node** %type469, align 8, !dbg !4535
  %231 = load i32, i32* %caller_mode, align 4, !dbg !4536
  %232 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !4537
  %common470 = bitcast %union.tree_node* %232 to %struct.tree_common*, !dbg !4537
  %type471 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common470, i32 0, i32 2, !dbg !4537
  %233 = load %union.tree_node*, %union.tree_node** %type471, align 8, !dbg !4537
  %call472 = call i32 @promote_function_mode(%union.tree_node* %230, i32 %231, i32* %caller_unsignedp, %union.tree_node* %233, i32 1), !dbg !4538
  store i32 %call472, i32* %caller_promoted_mode, align 4, !dbg !4539
  %234 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4540
  %common473 = bitcast %union.tree_node* %234 to %struct.tree_common*, !dbg !4540
  %type474 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common473, i32 0, i32 2, !dbg !4540
  %235 = load %union.tree_node*, %union.tree_node** %type474, align 8, !dbg !4540
  %236 = load i32, i32* %callee_mode, align 4, !dbg !4541
  %237 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !4542
  %call475 = call i32 @promote_function_mode(%union.tree_node* %235, i32 %236, i32* %callee_unsignedp, %union.tree_node* %237, i32 1), !dbg !4543
  store i32 %call475, i32* %callee_promoted_mode, align 4, !dbg !4544
  %238 = load i32, i32* %caller_mode, align 4, !dbg !4545
  %cmp476 = icmp ne i32 %238, 0, !dbg !4547
  br i1 %cmp476, label %land.lhs.true478, label %if.end507, !dbg !4548

land.lhs.true478:                                 ; preds = %cond.end466
  %239 = load i32, i32* %caller_promoted_mode, align 4, !dbg !4549
  %240 = load i32, i32* %callee_promoted_mode, align 4, !dbg !4550
  %cmp479 = icmp ne i32 %239, %240, !dbg !4551
  br i1 %cmp479, label %if.then506, label %lor.lhs.false481, !dbg !4552

lor.lhs.false481:                                 ; preds = %land.lhs.true478
  %241 = load i32, i32* %caller_mode, align 4, !dbg !4553
  %242 = load i32, i32* %caller_promoted_mode, align 4, !dbg !4554
  %cmp482 = icmp ne i32 %241, %242, !dbg !4555
  br i1 %cmp482, label %land.lhs.true487, label %lor.lhs.false484, !dbg !4556

lor.lhs.false484:                                 ; preds = %lor.lhs.false481
  %243 = load i32, i32* %callee_mode, align 4, !dbg !4557
  %244 = load i32, i32* %callee_promoted_mode, align 4, !dbg !4558
  %cmp485 = icmp ne i32 %243, %244, !dbg !4559
  br i1 %cmp485, label %land.lhs.true487, label %if.end507, !dbg !4560

land.lhs.true487:                                 ; preds = %lor.lhs.false484, %lor.lhs.false481
  %245 = load i32, i32* %caller_unsignedp, align 4, !dbg !4561
  %246 = load i32, i32* %callee_unsignedp, align 4, !dbg !4562
  %cmp488 = icmp ne i32 %245, %246, !dbg !4563
  br i1 %cmp488, label %if.then506, label %lor.lhs.false490, !dbg !4564

lor.lhs.false490:                                 ; preds = %land.lhs.true487
  %247 = load i32, i32* %caller_mode, align 4, !dbg !4565
  %idxprom = zext i32 %247 to i64, !dbg !4565
  %arrayidx491 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !4565
  %248 = load i8, i8* %arrayidx491, align 1, !dbg !4565
  %conv492 = zext i8 %248 to i16, !dbg !4565
  %conv493 = zext i16 %conv492 to i32, !dbg !4565
  %mul494 = mul nsw i32 %conv493, 8, !dbg !4565
  %conv495 = trunc i32 %mul494 to i16, !dbg !4565
  %conv496 = zext i16 %conv495 to i32, !dbg !4565
  %249 = load i32, i32* %callee_mode, align 4, !dbg !4566
  %idxprom497 = zext i32 %249 to i64, !dbg !4566
  %arrayidx498 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom497, !dbg !4566
  %250 = load i8, i8* %arrayidx498, align 1, !dbg !4566
  %conv499 = zext i8 %250 to i16, !dbg !4566
  %conv500 = zext i16 %conv499 to i32, !dbg !4566
  %mul501 = mul nsw i32 %conv500, 8, !dbg !4566
  %conv502 = trunc i32 %mul501 to i16, !dbg !4566
  %conv503 = zext i16 %conv502 to i32, !dbg !4566
  %cmp504 = icmp slt i32 %conv496, %conv503, !dbg !4567
  br i1 %cmp504, label %if.then506, label %if.end507, !dbg !4568

if.then506:                                       ; preds = %lor.lhs.false490, %land.lhs.true487, %land.lhs.true478
  store i8 0, i8* %try_tail_call, align 1, !dbg !4569
  br label %if.end507, !dbg !4570

if.end507:                                        ; preds = %if.then506, %lor.lhs.false490, %lor.lhs.false484, %cond.end466
  br label %if.end508, !dbg !4571

if.end508:                                        ; preds = %if.end507, %if.end425
  %251 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !4572
  %conv509 = zext i32 %251 to i64, !dbg !4574
  %252 = load i64, i64* %preferred_stack_boundary, align 8, !dbg !4575
  %cmp510 = icmp ult i64 %conv509, %252, !dbg !4576
  br i1 %cmp510, label %if.then512, label %if.else514, !dbg !4577

if.then512:                                       ; preds = %if.end508
  %253 = load i64, i64* %preferred_stack_boundary, align 8, !dbg !4578
  %conv513 = trunc i64 %253 to i32, !dbg !4578
  store i32 %conv513, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !4579
  br label %if.end516, !dbg !4580

if.else514:                                       ; preds = %if.end508
  %254 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !4581
  %conv515 = zext i32 %254 to i64, !dbg !4582
  store i64 %conv515, i64* %preferred_stack_boundary, align 8, !dbg !4583
  br label %if.end516

if.end516:                                        ; preds = %if.else514, %if.then512
  %255 = load i64, i64* %preferred_stack_boundary, align 8, !dbg !4584
  %div = udiv i64 %255, 8, !dbg !4585
  store i64 %div, i64* %preferred_unit_stack_boundary, align 8, !dbg !4586
  %256 = load i8, i8* %try_tail_call, align 1, !dbg !4587
  %conv517 = zext i8 %256 to i32, !dbg !4587
  %tobool518 = icmp ne i32 %conv517, 0, !dbg !4587
  %257 = zext i1 %tobool518 to i64, !dbg !4587
  %cond519 = select i1 %tobool518, i32 0, i32 1, !dbg !4587
  store i32 %cond519, i32* %pass, align 4, !dbg !4589
  br label %for.cond520, !dbg !4590

for.cond520:                                      ; preds = %for.inc1655, %if.end516
  %258 = load i32, i32* %pass, align 4, !dbg !4591
  %cmp521 = icmp slt i32 %258, 2, !dbg !4593
  br i1 %cmp521, label %for.body523, label %for.end1657, !dbg !4594

for.body523:                                      ; preds = %for.cond520
  call void @llvm.dbg.declare(metadata i32* %sibcall_failure, metadata !4595, metadata !DIExpression()), !dbg !4597
  store i32 0, i32* %sibcall_failure, align 4, !dbg !4597
  call void @llvm.dbg.declare(metadata i32* %save_pending_stack_adjust, metadata !4598, metadata !DIExpression()), !dbg !4599
  store i32 0, i32* %save_pending_stack_adjust, align 4, !dbg !4599
  call void @llvm.dbg.declare(metadata i32* %save_stack_pointer_delta, metadata !4600, metadata !DIExpression()), !dbg !4601
  store i32 0, i32* %save_stack_pointer_delta, align 4, !dbg !4601
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns, metadata !4602, metadata !DIExpression()), !dbg !4603
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before_call, metadata !4604, metadata !DIExpression()), !dbg !4605
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_arg_reg, metadata !4606, metadata !DIExpression()), !dbg !4607
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %after_args, metadata !4608, metadata !DIExpression()), !dbg !4609
  %259 = load i32, i32* %pass, align 4, !dbg !4610
  %cmp524 = icmp eq i32 %259, 0, !dbg !4612
  br i1 %cmp524, label %if.then526, label %if.end527, !dbg !4613

if.then526:                                       ; preds = %for.body523
  %260 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4614
  store i32 %260, i32* %save_pending_stack_adjust, align 4, !dbg !4616
  %261 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !4617
  store i32 %261, i32* %save_stack_pointer_delta, align 4, !dbg !4618
  br label %if.end527, !dbg !4619

if.end527:                                        ; preds = %if.then526, %for.body523
  %262 = load i32, i32* %pass, align 4, !dbg !4620
  %tobool528 = icmp ne i32 %262, 0, !dbg !4620
  br i1 %tobool528, label %if.then529, label %if.else531, !dbg !4622

if.then529:                                       ; preds = %if.end527
  %263 = load i32, i32* %flags, align 4, !dbg !4623
  %and530 = and i32 %263, -257, !dbg !4623
  store i32 %and530, i32* %flags, align 4, !dbg !4623
  br label %if.end533, !dbg !4624

if.else531:                                       ; preds = %if.end527
  %264 = load i32, i32* %flags, align 4, !dbg !4625
  %or532 = or i32 %264, 256, !dbg !4625
  store i32 %or532, i32* %flags, align 4, !dbg !4625
  br label %if.end533

if.end533:                                        ; preds = %if.else531, %if.then529
  store %struct.rtx_def* null, %struct.rtx_def** %argblock, align 8, !dbg !4626
  store %struct.rtx_def* null, %struct.rtx_def** %call_fusage, align 8, !dbg !4627
  call void @start_sequence(), !dbg !4628
  %265 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4629
  %cmp534 = icmp sge i32 %265, 32, !dbg !4631
  br i1 %cmp534, label %if.then553, label %lor.lhs.false536, !dbg !4632

lor.lhs.false536:                                 ; preds = %if.end533
  %266 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4633
  %cmp537 = icmp sgt i32 %266, 0, !dbg !4634
  br i1 %cmp537, label %land.lhs.true539, label %lor.lhs.false542, !dbg !4635

land.lhs.true539:                                 ; preds = %lor.lhs.false536
  %267 = load i32, i32* %flags, align 4, !dbg !4636
  %and540 = and i32 %267, 32, !dbg !4637
  %tobool541 = icmp ne i32 %and540, 0, !dbg !4637
  br i1 %tobool541, label %if.then553, label %lor.lhs.false542, !dbg !4638

lor.lhs.false542:                                 ; preds = %land.lhs.true539, %lor.lhs.false536
  %268 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4639
  %cmp543 = icmp sgt i32 %268, 0, !dbg !4640
  br i1 %cmp543, label %land.lhs.true545, label %lor.lhs.false550, !dbg !4641

land.lhs.true545:                                 ; preds = %lor.lhs.false542
  %269 = load i32, i32* @flag_exceptions, align 4, !dbg !4642
  %tobool546 = icmp ne i32 %269, 0, !dbg !4642
  br i1 %tobool546, label %land.lhs.true547, label %lor.lhs.false550, !dbg !4643

land.lhs.true547:                                 ; preds = %land.lhs.true545
  %270 = load i32, i32* %flags, align 4, !dbg !4644
  %and548 = and i32 %270, 64, !dbg !4645
  %tobool549 = icmp ne i32 %and548, 0, !dbg !4645
  br i1 %tobool549, label %lor.lhs.false550, label %if.then553, !dbg !4646

lor.lhs.false550:                                 ; preds = %land.lhs.true547, %land.lhs.true545, %lor.lhs.false542
  %271 = load i32, i32* %pass, align 4, !dbg !4647
  %cmp551 = icmp eq i32 %271, 0, !dbg !4648
  br i1 %cmp551, label %if.then553, label %if.end554, !dbg !4649

if.then553:                                       ; preds = %lor.lhs.false550, %land.lhs.true547, %land.lhs.true539, %if.end533
  call void @do_pending_stack_adjust(), !dbg !4650
  br label %if.end554, !dbg !4650

if.end554:                                        ; preds = %if.then553, %lor.lhs.false550
  %272 = load i32, i32* %pass, align 4, !dbg !4651
  %tobool555 = icmp ne i32 %272, 0, !dbg !4651
  br i1 %tobool555, label %if.then556, label %if.end557, !dbg !4653

if.then556:                                       ; preds = %if.end554
  %273 = load i32, i32* %num_actuals, align 4, !dbg !4654
  %274 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4655
  call void @precompute_arguments(i32 %273, %struct.arg_data* %274), !dbg !4656
  br label %if.end557, !dbg !4656

if.end557:                                        ; preds = %if.then556, %if.end554
  %275 = load i32, i32* %pass, align 4, !dbg !4657
  %tobool558 = icmp ne i32 %275, 0, !dbg !4657
  br i1 %tobool558, label %land.lhs.true559, label %if.end563, !dbg !4659

land.lhs.true559:                                 ; preds = %if.end557
  %276 = load i32, i32* %flags, align 4, !dbg !4660
  %and560 = and i32 %276, 16, !dbg !4661
  %tobool561 = icmp ne i32 %and560, 0, !dbg !4661
  br i1 %tobool561, label %if.then562, label %if.end563, !dbg !4662

if.then562:                                       ; preds = %land.lhs.true559
  call void @start_sequence(), !dbg !4663
  br label %if.end563, !dbg !4663

if.end563:                                        ; preds = %if.then562, %land.lhs.true559, %if.end557
  %277 = load i32, i32* %pass, align 4, !dbg !4664
  %cmp564 = icmp eq i32 %277, 0, !dbg !4666
  br i1 %cmp564, label %land.lhs.true566, label %if.end569, !dbg !4667

land.lhs.true566:                                 ; preds = %if.end563
  %278 = load %union.tree_node*, %union.tree_node** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 9), align 8, !dbg !4668
  %tobool567 = icmp ne %union.tree_node* %278, null, !dbg !4669
  br i1 %tobool567, label %if.then568, label %if.end569, !dbg !4670

if.then568:                                       ; preds = %land.lhs.true566
  call void @stack_protect_epilogue(), !dbg !4671
  br label %if.end569, !dbg !4671

if.end569:                                        ; preds = %if.then568, %land.lhs.true566, %if.end563
  %279 = bitcast %struct.args_size* %adjusted_args_size to i8*, !dbg !4672
  %280 = bitcast %struct.args_size* %args_size to i8*, !dbg !4672
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %279, i8* align 8 %280, i64 16, i1 false), !dbg !4672
  %281 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4673
  %282 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4674
  %283 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4675
  %284 = load i32, i32* %pass, align 4, !dbg !4676
  %cmp570 = icmp eq i32 %284, 0, !dbg !4677
  br i1 %cmp570, label %cond.true572, label %cond.false573, !dbg !4676

cond.true572:                                     ; preds = %if.end569
  br label %cond.end574, !dbg !4676

cond.false573:                                    ; preds = %if.end569
  %285 = load i64, i64* %preferred_stack_boundary, align 8, !dbg !4678
  br label %cond.end574, !dbg !4676

cond.end574:                                      ; preds = %cond.false573, %cond.true572
  %cond575 = phi i64 [ 0, %cond.true572 ], [ %285, %cond.false573 ], !dbg !4676
  %conv576 = trunc i64 %cond575 to i32, !dbg !4679
  %call577 = call i32 @compute_argument_block_size(i32 %281, %struct.args_size* %adjusted_args_size, %union.tree_node* %282, %union.tree_node* %283, i32 %conv576), !dbg !4680
  store i32 %call577, i32* %unadjusted_args_size, align 4, !dbg !4681
  %286 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !4682
  %287 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4683
  %sub578 = sub nsw i32 %286, %287, !dbg !4684
  store i32 %sub578, i32* %old_stack_allocated, align 4, !dbg !4685
  %288 = load i32, i32* %pass, align 4, !dbg !4686
  %cmp579 = icmp eq i32 %288, 0, !dbg !4688
  br i1 %cmp579, label %if.then581, label %if.else587, !dbg !4689

if.then581:                                       ; preds = %cond.end574
  %289 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !4690
  store %struct.rtx_def* %289, %struct.rtx_def** %argblock, align 8, !dbg !4692
  %290 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4693
  %291 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 2), align 8, !dbg !4694
  %conv582 = sext i32 %291 to i64, !dbg !4695
  %call583 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %290, i64 %conv582), !dbg !4696
  store %struct.rtx_def* %call583, %struct.rtx_def** %argblock, align 8, !dbg !4697
  %constant584 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !4698
  %292 = load i64, i64* %constant584, align 8, !dbg !4698
  %conv585 = trunc i64 %292 to i32, !dbg !4699
  %call586 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %conv585), !dbg !4700
  store %struct.simple_bitmap_def* %call586, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !4701
  %293 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !4702
  call void @sbitmap_zero(%struct.simple_bitmap_def* %293), !dbg !4703
  br label %if.end701, !dbg !4704

if.else587:                                       ; preds = %cond.end574
  %var588 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !4705
  %294 = load %union.tree_node*, %union.tree_node** %var588, align 8, !dbg !4705
  %cmp589 = icmp ne %union.tree_node* %294, null, !dbg !4707
  br i1 %cmp589, label %if.then591, label %if.else621, !dbg !4708

if.then591:                                       ; preds = %if.else587
  %295 = load %struct.rtx_def*, %struct.rtx_def** %old_stack_level, align 8, !dbg !4709
  %cmp592 = icmp eq %struct.rtx_def* %295, null, !dbg !4712
  br i1 %cmp592, label %if.then594, label %if.end595, !dbg !4713

if.then594:                                       ; preds = %if.then591
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level, %struct.rtx_def* null), !dbg !4714
  %296 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !4716
  store i32 %296, i32* %old_stack_pointer_delta, align 4, !dbg !4717
  %297 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4718
  store i32 %297, i32* %old_pending_adj, align 4, !dbg !4719
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4720
  %298 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !4721
  store i32 %298, i32* %old_stack_arg_under_construction, align 4, !dbg !4722
  store i32 0, i32* @stack_arg_under_construction, align 4, !dbg !4723
  br label %if.end595, !dbg !4724

if.end595:                                        ; preds = %if.then594, %if.then591
  %var596 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !4725
  %299 = load %union.tree_node*, %union.tree_node** %var596, align 8, !dbg !4725
  %cmp597 = icmp eq %union.tree_node* %299, null, !dbg !4725
  br i1 %cmp597, label %cond.true599, label %cond.false602, !dbg !4725

cond.true599:                                     ; preds = %if.end595
  %constant600 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4725
  %300 = load i64, i64* %constant600, align 8, !dbg !4725
  %call601 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %300), !dbg !4725
  br label %cond.end618, !dbg !4725

cond.false602:                                    ; preds = %if.end595
  %var603 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !4725
  %301 = load %union.tree_node*, %union.tree_node** %var603, align 8, !dbg !4725
  %cmp604 = icmp eq %union.tree_node* %301, null, !dbg !4725
  br i1 %cmp604, label %cond.true606, label %cond.false609, !dbg !4725

cond.true606:                                     ; preds = %cond.false602
  %constant607 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4725
  %302 = load i64, i64* %constant607, align 8, !dbg !4725
  %call608 = call %union.tree_node* @size_int_kind(i64 %302, i32 1), !dbg !4725
  br label %cond.end615, !dbg !4725

cond.false609:                                    ; preds = %cond.false602
  %303 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !4725
  %var610 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !4725
  %304 = load %union.tree_node*, %union.tree_node** %var610, align 8, !dbg !4725
  %call611 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %303, %union.tree_node* %304), !dbg !4725
  %constant612 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4725
  %305 = load i64, i64* %constant612, align 8, !dbg !4725
  %call613 = call %union.tree_node* @size_int_kind(i64 %305, i32 1), !dbg !4725
  %call614 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call611, %union.tree_node* %call613), !dbg !4725
  br label %cond.end615, !dbg !4725

cond.end615:                                      ; preds = %cond.false609, %cond.true606
  %cond616 = phi %union.tree_node* [ %call608, %cond.true606 ], [ %call614, %cond.false609 ], !dbg !4725
  %call617 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond616), !dbg !4725
  br label %cond.end618, !dbg !4725

cond.end618:                                      ; preds = %cond.end615, %cond.true599
  %cond619 = phi %struct.rtx_def* [ %call601, %cond.true599 ], [ %call617, %cond.end615 ], !dbg !4725
  %call620 = call %struct.rtx_def* @push_block(%struct.rtx_def* %cond619, i32 0, i32 0), !dbg !4726
  store %struct.rtx_def* %call620, %struct.rtx_def** %argblock, align 8, !dbg !4727
  br label %if.end700, !dbg !4728

if.else621:                                       ; preds = %if.else587
  call void @llvm.dbg.declare(metadata i32* %needed, metadata !4729, metadata !DIExpression()), !dbg !4731
  %constant622 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4732
  %306 = load i64, i64* %constant622, align 8, !dbg !4732
  %conv623 = trunc i64 %306 to i32, !dbg !4733
  store i32 %conv623, i32* %needed, align 4, !dbg !4731
  %307 = load i32, i32* %needed, align 4, !dbg !4734
  %308 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 6), align 8, !dbg !4736
  %cmp624 = icmp sgt i32 %307, %308, !dbg !4737
  br i1 %cmp624, label %if.then626, label %if.end627, !dbg !4738

if.then626:                                       ; preds = %if.else621
  %309 = load i32, i32* %needed, align 4, !dbg !4739
  store i32 %309, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 6), align 8, !dbg !4740
  br label %if.end627, !dbg !4741

if.end627:                                        ; preds = %if.then626, %if.else621
  %310 = load i32, i32* %must_preallocate, align 4, !dbg !4742
  %tobool628 = icmp ne i32 %310, 0, !dbg !4742
  br i1 %tobool628, label %if.then629, label %if.end699, !dbg !4744

if.then629:                                       ; preds = %if.end627
  %311 = load i32, i32* @target_flags, align 4, !dbg !4745
  %and630 = and i32 %311, 4, !dbg !4745
  %cmp631 = icmp ne i32 %and630, 0, !dbg !4745
  br i1 %cmp631, label %if.then637, label %lor.lhs.false633, !dbg !4745

lor.lhs.false633:                                 ; preds = %if.then629
  %call634 = call i32 @ix86_cfun_abi(), !dbg !4745
  %cmp635 = icmp eq i32 %call634, 1, !dbg !4745
  br i1 %cmp635, label %if.then637, label %if.else675, !dbg !4748

if.then637:                                       ; preds = %lor.lhs.false633, %if.then629
  %312 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4749
  %tobool638 = icmp ne %union.tree_node* %312, null, !dbg !4749
  br i1 %tobool638, label %cond.false640, label %cond.true639, !dbg !4749

cond.true639:                                     ; preds = %if.then637
  %313 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4749
  br label %cond.end643, !dbg !4749

cond.false640:                                    ; preds = %if.then637
  %314 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4749
  %common641 = bitcast %union.tree_node* %314 to %struct.tree_common*, !dbg !4749
  %type642 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common641, i32 0, i32 2, !dbg !4749
  %315 = load %union.tree_node*, %union.tree_node** %type642, align 8, !dbg !4749
  br label %cond.end643, !dbg !4749

cond.end643:                                      ; preds = %cond.false640, %cond.true639
  %cond644 = phi %union.tree_node* [ %313, %cond.true639 ], [ %315, %cond.false640 ], !dbg !4749
  %call645 = call i32 @ix86_function_type_abi(%union.tree_node* %cond644), !dbg !4749
  %cmp646 = icmp eq i32 %call645, 1, !dbg !4749
  br i1 %cmp646, label %if.end650, label %if.then648, !dbg !4752

if.then648:                                       ; preds = %cond.end643
  %316 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4753
  %317 = load i32, i32* %needed, align 4, !dbg !4754
  %add649 = add nsw i32 %317, %316, !dbg !4754
  store i32 %add649, i32* %needed, align 4, !dbg !4754
  br label %if.end650, !dbg !4755

if.end650:                                        ; preds = %if.then648, %cond.end643
  %318 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4756
  %319 = load i32, i32* %needed, align 4, !dbg !4756
  %cmp651 = icmp sgt i32 %318, %319, !dbg !4756
  br i1 %cmp651, label %cond.true653, label %cond.false654, !dbg !4756

cond.true653:                                     ; preds = %if.end650
  %320 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4756
  br label %cond.end655, !dbg !4756

cond.false654:                                    ; preds = %if.end650
  %321 = load i32, i32* %needed, align 4, !dbg !4756
  br label %cond.end655, !dbg !4756

cond.end655:                                      ; preds = %cond.false654, %cond.true653
  %cond656 = phi i32 [ %320, %cond.true653 ], [ %321, %cond.false654 ], !dbg !4756
  store i32 %cond656, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4757
  %322 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4758
  %tobool657 = icmp ne i8* %322, null, !dbg !4758
  br i1 %tobool657, label %if.then658, label %if.end659, !dbg !4760

if.then658:                                       ; preds = %cond.end655
  %323 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4761
  call void @free(i8* %323), !dbg !4762
  br label %if.end659, !dbg !4762

if.end659:                                        ; preds = %if.then658, %cond.end655
  %324 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4763
  %conv660 = sext i32 %324 to i64, !dbg !4763
  %mul661 = mul i64 1, %conv660, !dbg !4763
  %call662 = call i8* @xmalloc(i64 %mul661), !dbg !4763
  store i8* %call662, i8** %stack_usage_map_buf, align 8, !dbg !4764
  %325 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4765
  store i8* %325, i8** @stack_usage_map, align 8, !dbg !4766
  %326 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4767
  %tobool663 = icmp ne i32 %326, 0, !dbg !4767
  br i1 %tobool663, label %if.then664, label %if.end666, !dbg !4769

if.then664:                                       ; preds = %if.end659
  %327 = load i8*, i8** @stack_usage_map, align 8, !dbg !4770
  %328 = load i8*, i8** %initial_stack_usage_map, align 8, !dbg !4771
  %329 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4772
  %conv665 = sext i32 %329 to i64, !dbg !4772
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %327, i8* align 1 %328, i64 %conv665, i1 false), !dbg !4773
  br label %if.end666, !dbg !4773

if.end666:                                        ; preds = %if.then664, %if.end659
  %330 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4774
  %331 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4776
  %cmp667 = icmp ne i32 %330, %331, !dbg !4777
  br i1 %cmp667, label %if.then669, label %if.end674, !dbg !4778

if.then669:                                       ; preds = %if.end666
  %332 = load i8*, i8** @stack_usage_map, align 8, !dbg !4779
  %333 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4780
  %idxprom670 = sext i32 %333 to i64, !dbg !4779
  %arrayidx671 = getelementptr inbounds i8, i8* %332, i64 %idxprom670, !dbg !4779
  %334 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4781
  %335 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !4782
  %sub672 = sub nsw i32 %334, %335, !dbg !4783
  %conv673 = sext i32 %sub672 to i64, !dbg !4784
  call void @llvm.memset.p0i8.i64(i8* align 1 %arrayidx671, i8 0, i64 %conv673, i1 false), !dbg !4785
  br label %if.end674, !dbg !4785

if.end674:                                        ; preds = %if.then669, %if.end666
  store i32 0, i32* %needed, align 4, !dbg !4786
  %336 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !4787
  store %struct.rtx_def* %336, %struct.rtx_def** %argblock, align 8, !dbg !4788
  br label %if.end698, !dbg !4789

if.else675:                                       ; preds = %lor.lhs.false633
  %337 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !4790
  %cmp676 = icmp eq i32 %337, 0, !dbg !4793
  br i1 %cmp676, label %if.then678, label %if.end688, !dbg !4794

if.then678:                                       ; preds = %if.else675
  %338 = load i32, i32* %unadjusted_args_size, align 4, !dbg !4795
  %339 = load i64, i64* %preferred_unit_stack_boundary, align 8, !dbg !4797
  %conv679 = trunc i64 %339 to i32, !dbg !4797
  %call680 = call i32 @combine_pending_stack_adjustment_and_call(i32 %338, %struct.args_size* %adjusted_args_size, i32 %conv679), !dbg !4798
  store i32 %call680, i32* %needed, align 4, !dbg !4799
  %340 = load i32, i32* %unadjusted_args_size, align 4, !dbg !4800
  %341 = load i32, i32* %needed, align 4, !dbg !4801
  %sub681 = sub nsw i32 %340, %341, !dbg !4802
  store i32 %sub681, i32* %needed, align 4, !dbg !4803
  %342 = load i32, i32* %needed, align 4, !dbg !4804
  %cmp682 = icmp slt i32 %342, 0, !dbg !4806
  br i1 %cmp682, label %if.then684, label %if.else686, !dbg !4807

if.then684:                                       ; preds = %if.then678
  %343 = load i32, i32* %needed, align 4, !dbg !4808
  %sub685 = sub nsw i32 0, %343, !dbg !4810
  store i32 %sub685, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4811
  call void @do_pending_stack_adjust(), !dbg !4812
  store i32 0, i32* %needed, align 4, !dbg !4813
  br label %if.end687, !dbg !4814

if.else686:                                       ; preds = %if.then678
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4815
  br label %if.end687

if.end687:                                        ; preds = %if.else686, %if.then684
  br label %if.end688, !dbg !4816

if.end688:                                        ; preds = %if.end687, %if.else675
  %344 = load i32, i32* %needed, align 4, !dbg !4817
  %cmp689 = icmp eq i32 %344, 0, !dbg !4819
  br i1 %cmp689, label %if.then691, label %if.else692, !dbg !4820

if.then691:                                       ; preds = %if.end688
  %345 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !4821
  store %struct.rtx_def* %345, %struct.rtx_def** %argblock, align 8, !dbg !4822
  br label %if.end696, !dbg !4823

if.else692:                                       ; preds = %if.end688
  %346 = load i32, i32* %needed, align 4, !dbg !4824
  %conv693 = sext i32 %346 to i64, !dbg !4824
  %call694 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv693), !dbg !4824
  %call695 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call694, i32 0, i32 0), !dbg !4826
  store %struct.rtx_def* %call695, %struct.rtx_def** %argblock, align 8, !dbg !4827
  br label %if.end696

if.end696:                                        ; preds = %if.else692, %if.then691
  %347 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4828
  %call697 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %347), !dbg !4829
  store %struct.rtx_def* %call697, %struct.rtx_def** %argblock, align 8, !dbg !4830
  br label %if.end698

if.end698:                                        ; preds = %if.end696, %if.end674
  br label %if.end699, !dbg !4831

if.end699:                                        ; preds = %if.end698, %if.end627
  br label %if.end700

if.end700:                                        ; preds = %if.end699, %cond.end618
  br label %if.end701

if.end701:                                        ; preds = %if.end700, %if.then581
  %348 = load i32, i32* @target_flags, align 4, !dbg !4832
  %and702 = and i32 %348, 4, !dbg !4832
  %cmp703 = icmp ne i32 %and702, 0, !dbg !4832
  br i1 %cmp703, label %if.then709, label %lor.lhs.false705, !dbg !4832

lor.lhs.false705:                                 ; preds = %if.end701
  %call706 = call i32 @ix86_cfun_abi(), !dbg !4832
  %cmp707 = icmp eq i32 %call706, 1, !dbg !4832
  br i1 %cmp707, label %if.then709, label %if.end754, !dbg !4834

if.then709:                                       ; preds = %lor.lhs.false705, %if.end701
  %349 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !4835
  %tobool710 = icmp ne i32 %349, 0, !dbg !4835
  br i1 %tobool710, label %if.then711, label %if.end740, !dbg !4838

if.then711:                                       ; preds = %if.then709
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %push_size, metadata !4839, metadata !DIExpression()), !dbg !4841
  %constant712 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4842
  %350 = load i64, i64* %constant712, align 8, !dbg !4842
  %351 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4842
  %tobool713 = icmp ne %union.tree_node* %351, null, !dbg !4842
  br i1 %tobool713, label %cond.false715, label %cond.true714, !dbg !4842

cond.true714:                                     ; preds = %if.then711
  %352 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4842
  br label %cond.end718, !dbg !4842

cond.false715:                                    ; preds = %if.then711
  %353 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4842
  %common716 = bitcast %union.tree_node* %353 to %struct.tree_common*, !dbg !4842
  %type717 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common716, i32 0, i32 2, !dbg !4842
  %354 = load %union.tree_node*, %union.tree_node** %type717, align 8, !dbg !4842
  br label %cond.end718, !dbg !4842

cond.end718:                                      ; preds = %cond.false715, %cond.true714
  %cond719 = phi %union.tree_node* [ %352, %cond.true714 ], [ %354, %cond.false715 ], !dbg !4842
  %call720 = call i32 @ix86_function_type_abi(%union.tree_node* %cond719), !dbg !4842
  %cmp721 = icmp eq i32 %call720, 1, !dbg !4842
  br i1 %cmp721, label %cond.true723, label %cond.false724, !dbg !4842

cond.true723:                                     ; preds = %cond.end718
  br label %cond.end725, !dbg !4842

cond.false724:                                    ; preds = %cond.end718
  %355 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !4842
  br label %cond.end725, !dbg !4842

cond.end725:                                      ; preds = %cond.false724, %cond.true723
  %cond726 = phi i32 [ 0, %cond.true723 ], [ %355, %cond.false724 ], !dbg !4842
  %conv727 = sext i32 %cond726 to i64, !dbg !4842
  %add728 = add nsw i64 %350, %conv727, !dbg !4842
  %call729 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %add728), !dbg !4842
  store %struct.rtx_def* %call729, %struct.rtx_def** %push_size, align 8, !dbg !4841
  %356 = load %struct.rtx_def*, %struct.rtx_def** %old_stack_level, align 8, !dbg !4843
  %cmp730 = icmp eq %struct.rtx_def* %356, null, !dbg !4845
  br i1 %cmp730, label %if.then732, label %if.end738, !dbg !4846

if.then732:                                       ; preds = %cond.end725
  call void @emit_stack_save(i32 0, %struct.rtx_def** %old_stack_level, %struct.rtx_def* null), !dbg !4847
  %357 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !4849
  store i32 %357, i32* %old_stack_pointer_delta, align 4, !dbg !4850
  %358 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4851
  store i32 %358, i32* %old_pending_adj, align 4, !dbg !4852
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4853
  %359 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !4854
  store i32 %359, i32* %old_stack_arg_under_construction, align 4, !dbg !4855
  store i32 0, i32* @stack_arg_under_construction, align 4, !dbg !4856
  %360 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4857
  %tobool733 = icmp ne i8* %360, null, !dbg !4857
  br i1 %tobool733, label %if.then734, label %if.end735, !dbg !4859

if.then734:                                       ; preds = %if.then732
  %361 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4860
  call void @free(i8* %361), !dbg !4861
  br label %if.end735, !dbg !4861

if.end735:                                        ; preds = %if.then734, %if.then732
  %362 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4862
  %conv736 = sext i32 %362 to i64, !dbg !4862
  %call737 = call i8* @xcalloc(i64 %conv736, i64 1), !dbg !4862
  store i8* %call737, i8** %stack_usage_map_buf, align 8, !dbg !4863
  %363 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !4864
  store i8* %363, i8** @stack_usage_map, align 8, !dbg !4865
  store i32 0, i32* @highest_outgoing_arg_in_use, align 4, !dbg !4866
  br label %if.end738, !dbg !4867

if.end738:                                        ; preds = %if.end735, %cond.end725
  %364 = load %struct.rtx_def*, %struct.rtx_def** %push_size, align 8, !dbg !4868
  %call739 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %364, %struct.rtx_def* null, i32 8), !dbg !4869
  br label %if.end740, !dbg !4870

if.end740:                                        ; preds = %if.end738, %if.then709
  store i32 0, i32* %i, align 4, !dbg !4871
  br label %for.cond741, !dbg !4873

for.cond741:                                      ; preds = %for.inc751, %if.end740
  %365 = load i32, i32* %i, align 4, !dbg !4874
  %366 = load i32, i32* %num_actuals, align 4, !dbg !4876
  %cmp742 = icmp slt i32 %365, %366, !dbg !4877
  br i1 %cmp742, label %for.body744, label %for.end753, !dbg !4878

for.body744:                                      ; preds = %for.cond741
  %367 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4879
  %368 = load i32, i32* %i, align 4, !dbg !4881
  %idxprom745 = sext i32 %368 to i64, !dbg !4879
  %arrayidx746 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %367, i64 %idxprom745, !dbg !4879
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx746, i32 0, i32 9, !dbg !4882
  %369 = load i32, i32* %pass_on_stack, align 8, !dbg !4882
  %tobool747 = icmp ne i32 %369, 0, !dbg !4879
  br i1 %tobool747, label %if.then748, label %if.end750, !dbg !4883

if.then748:                                       ; preds = %for.body744
  %370 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4884
  %call749 = call %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def* %370), !dbg !4886
  store %struct.rtx_def* %call749, %struct.rtx_def** %argblock, align 8, !dbg !4887
  br label %for.end753, !dbg !4888

if.end750:                                        ; preds = %for.body744
  br label %for.inc751, !dbg !4882

for.inc751:                                       ; preds = %if.end750
  %371 = load i32, i32* %i, align 4, !dbg !4889
  %inc752 = add nsw i32 %371, 1, !dbg !4889
  store i32 %inc752, i32* %i, align 4, !dbg !4889
  br label %for.cond741, !dbg !4890, !llvm.loop !4891

for.end753:                                       ; preds = %if.then748, %for.cond741
  br label %if.end754, !dbg !4893

if.end754:                                        ; preds = %for.end753, %lor.lhs.false705
  %372 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4894
  %373 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4895
  %374 = load i32, i32* %num_actuals, align 4, !dbg !4896
  call void @compute_argument_addresses(%struct.arg_data* %372, %struct.rtx_def* %373, i32 %374), !dbg !4897
  %375 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4898
  %cmp755 = icmp eq %struct.rtx_def* %375, null, !dbg !4900
  br i1 %cmp755, label %land.lhs.true757, label %if.end779, !dbg !4901

land.lhs.true757:                                 ; preds = %if.end754
  %constant758 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4902
  %376 = load i64, i64* %constant758, align 8, !dbg !4902
  %377 = load i32, i32* %unadjusted_args_size, align 4, !dbg !4903
  %conv759 = sext i32 %377 to i64, !dbg !4903
  %cmp760 = icmp ne i64 %376, %conv759, !dbg !4904
  br i1 %cmp760, label %if.then762, label %if.end779, !dbg !4905

if.then762:                                       ; preds = %land.lhs.true757
  %378 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4906
  %tobool763 = icmp ne i32 %378, 0, !dbg !4906
  br i1 %tobool763, label %land.lhs.true764, label %if.else769, !dbg !4909

land.lhs.true764:                                 ; preds = %if.then762
  %379 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !4910
  %tobool765 = icmp ne i32 %379, 0, !dbg !4910
  br i1 %tobool765, label %if.else769, label %if.then766, !dbg !4911

if.then766:                                       ; preds = %land.lhs.true764
  %380 = load i32, i32* %unadjusted_args_size, align 4, !dbg !4912
  %381 = load i64, i64* %preferred_unit_stack_boundary, align 8, !dbg !4914
  %conv767 = trunc i64 %381 to i32, !dbg !4914
  %call768 = call i32 @combine_pending_stack_adjustment_and_call(i32 %380, %struct.args_size* %adjusted_args_size, i32 %conv767), !dbg !4915
  store i32 %call768, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !4916
  call void @do_pending_stack_adjust(), !dbg !4917
  br label %if.end778, !dbg !4918

if.else769:                                       ; preds = %land.lhs.true764, %if.then762
  %382 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !4919
  %cmp770 = icmp eq %struct.rtx_def* %382, null, !dbg !4921
  br i1 %cmp770, label %if.then772, label %if.end777, !dbg !4922

if.then772:                                       ; preds = %if.else769
  %constant773 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !4923
  %383 = load i64, i64* %constant773, align 8, !dbg !4923
  %384 = load i32, i32* %unadjusted_args_size, align 4, !dbg !4923
  %conv774 = sext i32 %384 to i64, !dbg !4923
  %sub775 = sub nsw i64 %383, %conv774, !dbg !4923
  %call776 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub775), !dbg !4923
  call void @anti_adjust_stack(%struct.rtx_def* %call776), !dbg !4924
  br label %if.end777, !dbg !4924

if.end777:                                        ; preds = %if.then772, %if.else769
  br label %if.end778

if.end778:                                        ; preds = %if.end777, %if.then766
  br label %if.end779, !dbg !4925

if.end779:                                        ; preds = %if.end778, %land.lhs.true757, %if.end754
  %385 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !4926
  %add780 = add nsw i32 %385, 1, !dbg !4926
  store i32 %add780, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !4926
  %386 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4927
  %387 = load %union.tree_node*, %union.tree_node** %addr, align 8, !dbg !4928
  %call781 = call %struct.rtx_def* @rtx_for_function_call(%union.tree_node* %386, %union.tree_node* %387), !dbg !4929
  store %struct.rtx_def* %call781, %struct.rtx_def** %funexp, align 8, !dbg !4930
  store %struct.rtx_def* null, %struct.rtx_def** %valreg, align 8, !dbg !4931
  %388 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4932
  %base782 = bitcast %union.tree_node* %388 to %struct.tree_base*, !dbg !4932
  %389 = bitcast %struct.tree_base* %base782 to i64*, !dbg !4932
  %bf.load783 = load i64, i64* %389, align 8, !dbg !4932
  %bf.clear784 = and i64 %bf.load783, 65535, !dbg !4932
  %bf.cast785 = trunc i64 %bf.clear784 to i32, !dbg !4932
  %cmp786 = icmp eq i32 %bf.cast785, 14, !dbg !4932
  br i1 %cmp786, label %cond.true788, label %cond.false790, !dbg !4932

cond.true788:                                     ; preds = %if.end779
  %390 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4932
  %call789 = call i32 @vector_type_mode(%union.tree_node* %390), !dbg !4932
  br label %cond.end796, !dbg !4932

cond.false790:                                    ; preds = %if.end779
  %391 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4932
  %type791 = bitcast %union.tree_node* %391 to %struct.tree_type*, !dbg !4932
  %mode792 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type791, i32 0, i32 6, !dbg !4932
  %bf.load793 = load i32, i32* %mode792, align 4, !dbg !4932
  %bf.lshr794 = lshr i32 %bf.load793, 16, !dbg !4932
  %bf.clear795 = and i32 %bf.lshr794, 255, !dbg !4932
  br label %cond.end796, !dbg !4932

cond.end796:                                      ; preds = %cond.false790, %cond.true788
  %cond797 = phi i32 [ %call789, %cond.true788 ], [ %bf.clear795, %cond.false790 ], !dbg !4932
  %cmp798 = icmp ne i32 %cond797, 0, !dbg !4934
  br i1 %cmp798, label %land.lhs.true800, label %if.end846, !dbg !4935

land.lhs.true800:                                 ; preds = %cond.end796
  %392 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !4936
  %tobool801 = icmp ne %struct.rtx_def* %392, null, !dbg !4936
  br i1 %tobool801, label %if.end846, label %if.then802, !dbg !4937

if.then802:                                       ; preds = %land.lhs.true800
  %393 = load i32, i32* %pcc_struct_value, align 4, !dbg !4938
  %tobool803 = icmp ne i32 %393, 0, !dbg !4938
  br i1 %tobool803, label %if.then804, label %if.else809, !dbg !4941

if.then804:                                       ; preds = %if.then802
  %394 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4942
  %call805 = call %union.tree_node* @build_pointer_type(%union.tree_node* %394), !dbg !4943
  %395 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4944
  %396 = load i32, i32* %pass, align 4, !dbg !4945
  %cmp806 = icmp eq i32 %396, 0, !dbg !4946
  %conv807 = zext i1 %cmp806 to i32, !dbg !4946
  %call808 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %call805, %union.tree_node* %395, %union.tree_node* null, i32 %conv807), !dbg !4947
  store %struct.rtx_def* %call808, %struct.rtx_def** %valreg, align 8, !dbg !4948
  br label %if.end813, !dbg !4949

if.else809:                                       ; preds = %if.then802
  %397 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !4950
  %398 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !4951
  %399 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !4952
  %400 = load i32, i32* %pass, align 4, !dbg !4953
  %cmp810 = icmp eq i32 %400, 0, !dbg !4954
  %conv811 = zext i1 %cmp810 to i32, !dbg !4954
  %call812 = call %struct.rtx_def* @hard_function_value(%union.tree_node* %397, %union.tree_node* %398, %union.tree_node* %399, i32 %conv811), !dbg !4955
  store %struct.rtx_def* %call812, %struct.rtx_def** %valreg, align 8, !dbg !4956
  br label %if.end813

if.end813:                                        ; preds = %if.else809, %if.then804
  %401 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !4957
  %402 = bitcast %struct.rtx_def* %401 to i32*, !dbg !4957
  %bf.load814 = load i32, i32* %402, align 8, !dbg !4957
  %bf.clear815 = and i32 %bf.load814, 65535, !dbg !4957
  %cmp816 = icmp eq i32 %bf.clear815, 15, !dbg !4959
  br i1 %cmp816, label %if.then818, label %if.end845, !dbg !4960

if.then818:                                       ; preds = %if.end813
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %elem, metadata !4961, metadata !DIExpression()), !dbg !4963
  %403 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !4964
  %u819 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %403, i32 0, i32 1, !dbg !4964
  %fld820 = bitcast %union.u* %u819 to [1 x %union.rtunion_def]*, !dbg !4964
  %arrayidx821 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld820, i64 0, i64 0, !dbg !4964
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx821 to %struct.rtvec_def**, !dbg !4964
  %404 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !4964
  %elem822 = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %404, i32 0, i32 1, !dbg !4964
  %arrayidx823 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem822, i64 0, i64 0, !dbg !4964
  %405 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx823, align 8, !dbg !4964
  store %struct.rtx_def* %405, %struct.rtx_def** %elem, align 8, !dbg !4963
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %where, metadata !4965, metadata !DIExpression()), !dbg !4966
  %406 = load %struct.rtx_def*, %struct.rtx_def** %elem, align 8, !dbg !4967
  %u824 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %406, i32 0, i32 1, !dbg !4967
  %fld825 = bitcast %union.u* %u824 to [1 x %union.rtunion_def]*, !dbg !4967
  %arrayidx826 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld825, i64 0, i64 0, !dbg !4967
  %rt_rtx827 = bitcast %union.rtunion_def* %arrayidx826 to %struct.rtx_def**, !dbg !4967
  %407 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx827, align 8, !dbg !4967
  store %struct.rtx_def* %407, %struct.rtx_def** %where, align 8, !dbg !4966
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset, metadata !4968, metadata !DIExpression()), !dbg !4969
  %408 = load %struct.rtx_def*, %struct.rtx_def** %elem, align 8, !dbg !4970
  %u828 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %408, i32 0, i32 1, !dbg !4970
  %fld829 = bitcast %union.u* %u828 to [1 x %union.rtunion_def]*, !dbg !4970
  %arrayidx830 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld829, i64 0, i64 1, !dbg !4970
  %rt_rtx831 = bitcast %union.rtunion_def* %arrayidx830 to %struct.rtx_def**, !dbg !4970
  %409 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx831, align 8, !dbg !4970
  store %struct.rtx_def* %409, %struct.rtx_def** %offset, align 8, !dbg !4969
  %410 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !4971
  %411 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !4973
  %cmp832 = icmp eq %struct.rtx_def* %410, %411, !dbg !4974
  br i1 %cmp832, label %land.lhs.true834, label %if.end844, !dbg !4975

land.lhs.true834:                                 ; preds = %if.then818
  %412 = load %struct.rtx_def*, %struct.rtx_def** %where, align 8, !dbg !4976
  %413 = bitcast %struct.rtx_def* %412 to i32*, !dbg !4976
  %bf.load835 = load i32, i32* %413, align 8, !dbg !4976
  %bf.lshr836 = lshr i32 %bf.load835, 16, !dbg !4976
  %bf.clear837 = and i32 %bf.lshr836, 255, !dbg !4976
  %414 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !4977
  %415 = bitcast %struct.rtx_def* %414 to i32*, !dbg !4977
  %bf.load838 = load i32, i32* %415, align 8, !dbg !4977
  %bf.lshr839 = lshr i32 %bf.load838, 16, !dbg !4977
  %bf.clear840 = and i32 %bf.lshr839, 255, !dbg !4977
  %cmp841 = icmp eq i32 %bf.clear837, %bf.clear840, !dbg !4978
  br i1 %cmp841, label %if.then843, label %if.end844, !dbg !4979

if.then843:                                       ; preds = %land.lhs.true834
  %416 = load %struct.rtx_def*, %struct.rtx_def** %where, align 8, !dbg !4980
  store %struct.rtx_def* %416, %struct.rtx_def** %valreg, align 8, !dbg !4981
  br label %if.end844, !dbg !4982

if.end844:                                        ; preds = %if.then843, %land.lhs.true834, %if.then818
  br label %if.end845, !dbg !4983

if.end845:                                        ; preds = %if.end844, %if.end813
  br label %if.end846, !dbg !4984

if.end846:                                        ; preds = %if.end845, %land.lhs.true800, %cond.end796
  %417 = load i32, i32* %num_actuals, align 4, !dbg !4985
  %418 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !4986
  call void @precompute_register_parameters(i32 %417, %struct.arg_data* %418, i32* %reg_parm_seen), !dbg !4987
  %419 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4988
  %exp847 = bitcast %union.tree_node* %419 to %struct.tree_exp*, !dbg !4988
  %operands848 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp847, i32 0, i32 3, !dbg !4988
  %arrayidx849 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands848, i64 0, i64 2, !dbg !4988
  %420 = load %union.tree_node*, %union.tree_node** %arrayidx849, align 8, !dbg !4988
  %tobool850 = icmp ne %union.tree_node* %420, null, !dbg !4988
  br i1 %tobool850, label %if.then851, label %if.else856, !dbg !4990

if.then851:                                       ; preds = %if.end846
  %421 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !4991
  %exp852 = bitcast %union.tree_node* %421 to %struct.tree_exp*, !dbg !4991
  %operands853 = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp852, i32 0, i32 3, !dbg !4991
  %arrayidx854 = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands853, i64 0, i64 2, !dbg !4991
  %422 = load %union.tree_node*, %union.tree_node** %arrayidx854, align 8, !dbg !4991
  %call855 = call %struct.rtx_def* @expand_normal(%union.tree_node* %422), !dbg !4992
  store %struct.rtx_def* %call855, %struct.rtx_def** %static_chain_value, align 8, !dbg !4993
  br label %if.end857, !dbg !4994

if.else856:                                       ; preds = %if.end846
  store %struct.rtx_def* null, %struct.rtx_def** %static_chain_value, align 8, !dbg !4995
  br label %if.end857

if.end857:                                        ; preds = %if.else856, %if.then851
  %423 = load i32, i32* @target_flags, align 4, !dbg !4996
  %and858 = and i32 %423, 4, !dbg !4996
  %cmp859 = icmp ne i32 %and858, 0, !dbg !4996
  br i1 %cmp859, label %land.lhs.true865, label %lor.lhs.false861, !dbg !4996

lor.lhs.false861:                                 ; preds = %if.end857
  %call862 = call i32 @ix86_cfun_abi(), !dbg !4996
  %cmp863 = icmp eq i32 %call862, 1, !dbg !4996
  br i1 %cmp863, label %land.lhs.true865, label %if.end869, !dbg !4998

land.lhs.true865:                                 ; preds = %lor.lhs.false861, %if.end857
  %424 = load i32, i32* %pass, align 4, !dbg !4999
  %tobool866 = icmp ne i32 %424, 0, !dbg !4999
  br i1 %tobool866, label %if.then867, label %if.end869, !dbg !5000

if.then867:                                       ; preds = %land.lhs.true865
  %425 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !5001
  %426 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !5002
  %call868 = call %struct.rtx_def* @save_fixed_argument_area(i32 %425, %struct.rtx_def* %426, i32* %low_to_save, i32* %high_to_save), !dbg !5003
  store %struct.rtx_def* %call868, %struct.rtx_def** %save_area, align 8, !dbg !5004
  br label %if.end869, !dbg !5005

if.end869:                                        ; preds = %if.then867, %land.lhs.true865, %lor.lhs.false861
  store i32 0, i32* %i, align 4, !dbg !5006
  br label %for.cond870, !dbg !5008

for.cond870:                                      ; preds = %for.inc927, %if.end869
  %427 = load i32, i32* %i, align 4, !dbg !5009
  %428 = load i32, i32* %num_actuals, align 4, !dbg !5011
  %cmp871 = icmp slt i32 %427, %428, !dbg !5012
  br i1 %cmp871, label %for.body873, label %for.end929, !dbg !5013

for.body873:                                      ; preds = %for.cond870
  %429 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5014
  %430 = load i32, i32* %i, align 4, !dbg !5017
  %idxprom874 = sext i32 %430 to i64, !dbg !5014
  %arrayidx875 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %429, i64 %idxprom874, !dbg !5014
  %reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx875, i32 0, i32 4, !dbg !5018
  %431 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !5018
  %cmp876 = icmp eq %struct.rtx_def* %431, null, !dbg !5019
  br i1 %cmp876, label %if.then883, label %lor.lhs.false878, !dbg !5020

lor.lhs.false878:                                 ; preds = %for.body873
  %432 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5021
  %433 = load i32, i32* %i, align 4, !dbg !5022
  %idxprom879 = sext i32 %433 to i64, !dbg !5021
  %arrayidx880 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %432, i64 %idxprom879, !dbg !5021
  %pass_on_stack881 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx880, i32 0, i32 9, !dbg !5023
  %434 = load i32, i32* %pass_on_stack881, align 8, !dbg !5023
  %tobool882 = icmp ne i32 %434, 0, !dbg !5021
  br i1 %tobool882, label %if.then883, label %if.end902, !dbg !5024

if.then883:                                       ; preds = %lor.lhs.false878, %for.body873
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before_arg, metadata !5025, metadata !DIExpression()), !dbg !5027
  %call884 = call %struct.rtx_def* @get_last_insn(), !dbg !5028
  store %struct.rtx_def* %call884, %struct.rtx_def** %before_arg, align 8, !dbg !5027
  %435 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5029
  %436 = load i32, i32* %i, align 4, !dbg !5031
  %idxprom885 = sext i32 %436 to i64, !dbg !5029
  %arrayidx886 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %435, i64 %idxprom885, !dbg !5029
  %437 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !5032
  %438 = load i32, i32* %flags, align 4, !dbg !5033
  %var887 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !5034
  %439 = load %union.tree_node*, %union.tree_node** %var887, align 8, !dbg !5034
  %cmp888 = icmp ne %union.tree_node* %439, null, !dbg !5035
  %conv889 = zext i1 %cmp888 to i32, !dbg !5035
  %440 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !5036
  %call890 = call i32 @store_one_arg(%struct.arg_data* %arrayidx886, %struct.rtx_def* %437, i32 %438, i32 %conv889, i32 %440), !dbg !5037
  %tobool891 = icmp ne i32 %call890, 0, !dbg !5037
  br i1 %tobool891, label %if.then900, label %lor.lhs.false892, !dbg !5038

lor.lhs.false892:                                 ; preds = %if.then883
  %441 = load i32, i32* %pass, align 4, !dbg !5039
  %cmp893 = icmp eq i32 %441, 0, !dbg !5040
  br i1 %cmp893, label %land.lhs.true895, label %if.end901, !dbg !5041

land.lhs.true895:                                 ; preds = %lor.lhs.false892
  %442 = load %struct.rtx_def*, %struct.rtx_def** %before_arg, align 8, !dbg !5042
  %443 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5043
  %444 = load i32, i32* %i, align 4, !dbg !5044
  %idxprom896 = sext i32 %444 to i64, !dbg !5043
  %arrayidx897 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %443, i64 %idxprom896, !dbg !5043
  %call898 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %442, %struct.arg_data* %arrayidx897, i32 1), !dbg !5045
  %tobool899 = icmp ne i32 %call898, 0, !dbg !5045
  br i1 %tobool899, label %if.then900, label %if.end901, !dbg !5046

if.then900:                                       ; preds = %land.lhs.true895, %if.then883
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5047
  br label %if.end901, !dbg !5048

if.end901:                                        ; preds = %if.then900, %land.lhs.true895, %lor.lhs.false892
  br label %if.end902, !dbg !5049

if.end902:                                        ; preds = %if.end901, %lor.lhs.false878
  %445 = load i32, i32* %flags, align 4, !dbg !5050
  %and903 = and i32 %445, 1, !dbg !5052
  %tobool904 = icmp ne i32 %and903, 0, !dbg !5052
  br i1 %tobool904, label %land.lhs.true916, label %lor.lhs.false905, !dbg !5053

lor.lhs.false905:                                 ; preds = %if.end902
  %446 = load i32, i32* %flags, align 4, !dbg !5054
  %and906 = and i32 %446, 2, !dbg !5055
  %tobool907 = icmp ne i32 %and906, 0, !dbg !5055
  br i1 %tobool907, label %land.lhs.true908, label %if.end926, !dbg !5056

land.lhs.true908:                                 ; preds = %lor.lhs.false905
  %447 = load i32, i32* @target_flags, align 4, !dbg !5057
  %and909 = and i32 %447, 4, !dbg !5057
  %cmp910 = icmp ne i32 %and909, 0, !dbg !5057
  br i1 %cmp910, label %land.lhs.true916, label %lor.lhs.false912, !dbg !5057

lor.lhs.false912:                                 ; preds = %land.lhs.true908
  %call913 = call i32 @ix86_cfun_abi(), !dbg !5057
  %cmp914 = icmp eq i32 %call913, 1, !dbg !5057
  br i1 %cmp914, label %land.lhs.true916, label %if.end926, !dbg !5058

land.lhs.true916:                                 ; preds = %lor.lhs.false912, %land.lhs.true908, %if.end902
  %448 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5059
  %449 = load i32, i32* %i, align 4, !dbg !5060
  %idxprom917 = sext i32 %449 to i64, !dbg !5059
  %arrayidx918 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %448, i64 %idxprom917, !dbg !5059
  %stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx918, i32 0, i32 11, !dbg !5061
  %450 = load %struct.rtx_def*, %struct.rtx_def** %stack, align 8, !dbg !5061
  %tobool919 = icmp ne %struct.rtx_def* %450, null, !dbg !5059
  br i1 %tobool919, label %if.then920, label %if.end926, !dbg !5062

if.then920:                                       ; preds = %land.lhs.true916
  %451 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5063
  %452 = load i32, i32* %i, align 4, !dbg !5063
  %idxprom921 = sext i32 %452 to i64, !dbg !5063
  %arrayidx922 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %451, i64 %idxprom921, !dbg !5063
  %stack923 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx922, i32 0, i32 11, !dbg !5063
  %453 = load %struct.rtx_def*, %struct.rtx_def** %stack923, align 8, !dbg !5063
  %call924 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %453), !dbg !5063
  %454 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !5063
  %call925 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %call924, %struct.rtx_def* %454), !dbg !5063
  store %struct.rtx_def* %call925, %struct.rtx_def** %call_fusage, align 8, !dbg !5064
  br label %if.end926, !dbg !5065

if.end926:                                        ; preds = %if.then920, %land.lhs.true916, %lor.lhs.false912, %lor.lhs.false905
  br label %for.inc927, !dbg !5066

for.inc927:                                       ; preds = %if.end926
  %455 = load i32, i32* %i, align 4, !dbg !5067
  %inc928 = add nsw i32 %455, 1, !dbg !5067
  store i32 %inc928, i32* %i, align 4, !dbg !5067
  br label %for.cond870, !dbg !5068, !llvm.loop !5069

for.end929:                                       ; preds = %for.cond870
  %456 = load i32, i32* %reg_parm_seen, align 4, !dbg !5071
  %tobool930 = icmp ne i32 %456, 0, !dbg !5071
  br i1 %tobool930, label %if.then931, label %if.end969, !dbg !5073

if.then931:                                       ; preds = %for.end929
  store i32 0, i32* %i, align 4, !dbg !5074
  br label %for.cond932, !dbg !5076

for.cond932:                                      ; preds = %for.inc966, %if.then931
  %457 = load i32, i32* %i, align 4, !dbg !5077
  %458 = load i32, i32* %num_actuals, align 4, !dbg !5079
  %cmp933 = icmp slt i32 %457, %458, !dbg !5080
  br i1 %cmp933, label %for.body935, label %for.end968, !dbg !5081

for.body935:                                      ; preds = %for.cond932
  %459 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5082
  %460 = load i32, i32* %i, align 4, !dbg !5084
  %idxprom936 = sext i32 %460 to i64, !dbg !5082
  %arrayidx937 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %459, i64 %idxprom936, !dbg !5082
  %partial = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx937, i32 0, i32 8, !dbg !5085
  %461 = load i32, i32* %partial, align 4, !dbg !5085
  %cmp938 = icmp ne i32 %461, 0, !dbg !5086
  br i1 %cmp938, label %land.lhs.true940, label %if.end965, !dbg !5087

land.lhs.true940:                                 ; preds = %for.body935
  %462 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5088
  %463 = load i32, i32* %i, align 4, !dbg !5089
  %idxprom941 = sext i32 %463 to i64, !dbg !5088
  %arrayidx942 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %462, i64 %idxprom941, !dbg !5088
  %pass_on_stack943 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx942, i32 0, i32 9, !dbg !5090
  %464 = load i32, i32* %pass_on_stack943, align 8, !dbg !5090
  %tobool944 = icmp ne i32 %464, 0, !dbg !5088
  br i1 %tobool944, label %if.end965, label %if.then945, !dbg !5091

if.then945:                                       ; preds = %land.lhs.true940
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before_arg946, metadata !5092, metadata !DIExpression()), !dbg !5094
  %call947 = call %struct.rtx_def* @get_last_insn(), !dbg !5095
  store %struct.rtx_def* %call947, %struct.rtx_def** %before_arg946, align 8, !dbg !5094
  %465 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5096
  %466 = load i32, i32* %i, align 4, !dbg !5098
  %idxprom948 = sext i32 %466 to i64, !dbg !5096
  %arrayidx949 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %465, i64 %idxprom948, !dbg !5096
  %467 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !5099
  %468 = load i32, i32* %flags, align 4, !dbg !5100
  %var950 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 1, !dbg !5101
  %469 = load %union.tree_node*, %union.tree_node** %var950, align 8, !dbg !5101
  %cmp951 = icmp ne %union.tree_node* %469, null, !dbg !5102
  %conv952 = zext i1 %cmp951 to i32, !dbg !5102
  %470 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !5103
  %call953 = call i32 @store_one_arg(%struct.arg_data* %arrayidx949, %struct.rtx_def* %467, i32 %468, i32 %conv952, i32 %470), !dbg !5104
  %tobool954 = icmp ne i32 %call953, 0, !dbg !5104
  br i1 %tobool954, label %if.then963, label %lor.lhs.false955, !dbg !5105

lor.lhs.false955:                                 ; preds = %if.then945
  %471 = load i32, i32* %pass, align 4, !dbg !5106
  %cmp956 = icmp eq i32 %471, 0, !dbg !5107
  br i1 %cmp956, label %land.lhs.true958, label %if.end964, !dbg !5108

land.lhs.true958:                                 ; preds = %lor.lhs.false955
  %472 = load %struct.rtx_def*, %struct.rtx_def** %before_arg946, align 8, !dbg !5109
  %473 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5110
  %474 = load i32, i32* %i, align 4, !dbg !5111
  %idxprom959 = sext i32 %474 to i64, !dbg !5110
  %arrayidx960 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %473, i64 %idxprom959, !dbg !5110
  %call961 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %472, %struct.arg_data* %arrayidx960, i32 1), !dbg !5112
  %tobool962 = icmp ne i32 %call961, 0, !dbg !5112
  br i1 %tobool962, label %if.then963, label %if.end964, !dbg !5113

if.then963:                                       ; preds = %land.lhs.true958, %if.then945
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5114
  br label %if.end964, !dbg !5115

if.end964:                                        ; preds = %if.then963, %land.lhs.true958, %lor.lhs.false955
  br label %if.end965, !dbg !5116

if.end965:                                        ; preds = %if.end964, %land.lhs.true940, %for.body935
  br label %for.inc966, !dbg !5090

for.inc966:                                       ; preds = %if.end965
  %475 = load i32, i32* %i, align 4, !dbg !5117
  %inc967 = add nsw i32 %475, 1, !dbg !5117
  store i32 %inc967, i32* %i, align 4, !dbg !5117
  br label %for.cond932, !dbg !5118, !llvm.loop !5119

for.end968:                                       ; preds = %for.cond932
  br label %if.end969, !dbg !5120

if.end969:                                        ; preds = %for.end968, %for.end929
  %476 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5121
  %tobool970 = icmp ne %union.tree_node* %476, null, !dbg !5121
  br i1 %tobool970, label %cond.false972, label %cond.true971, !dbg !5121

cond.true971:                                     ; preds = %if.end969
  %477 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !5121
  br label %cond.end975, !dbg !5121

cond.false972:                                    ; preds = %if.end969
  %478 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5121
  %common973 = bitcast %union.tree_node* %478 to %struct.tree_common*, !dbg !5121
  %type974 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common973, i32 0, i32 2, !dbg !5121
  %479 = load %union.tree_node*, %union.tree_node** %type974, align 8, !dbg !5121
  br label %cond.end975, !dbg !5121

cond.end975:                                      ; preds = %cond.false972, %cond.true971
  %cond976 = phi %union.tree_node* [ %477, %cond.true971 ], [ %479, %cond.false972 ], !dbg !5121
  %call977 = call i32 @ix86_function_type_abi(%union.tree_node* %cond976), !dbg !5121
  %cmp978 = icmp eq i32 %call977, 1, !dbg !5121
  br i1 %cmp978, label %land.lhs.true980, label %if.end997, !dbg !5123

land.lhs.true980:                                 ; preds = %cond.end975
  %480 = load i32, i32* @target_flags, align 4, !dbg !5124
  %and981 = and i32 %480, 4, !dbg !5124
  %cmp982 = icmp ne i32 %and981, 0, !dbg !5124
  br i1 %cmp982, label %if.end997, label %lor.lhs.false984, !dbg !5124

lor.lhs.false984:                                 ; preds = %land.lhs.true980
  %call985 = call i32 @ix86_cfun_abi(), !dbg !5124
  %cmp986 = icmp eq i32 %call985, 1, !dbg !5124
  br i1 %cmp986, label %if.end997, label %land.lhs.true988, !dbg !5125

land.lhs.true988:                                 ; preds = %lor.lhs.false984
  %481 = load i32, i32* %must_preallocate, align 4, !dbg !5126
  %cmp989 = icmp eq i32 %481, 0, !dbg !5127
  br i1 %cmp989, label %land.lhs.true991, label %if.end997, !dbg !5128

land.lhs.true991:                                 ; preds = %land.lhs.true988
  %482 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !5129
  %cmp992 = icmp sgt i32 %482, 0, !dbg !5130
  br i1 %cmp992, label %if.then994, label %if.end997, !dbg !5131

if.then994:                                       ; preds = %land.lhs.true991
  %483 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !5132
  %conv995 = sext i32 %483 to i64, !dbg !5132
  %call996 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv995), !dbg !5132
  call void @anti_adjust_stack(%struct.rtx_def* %call996), !dbg !5133
  br label %if.end997, !dbg !5133

if.end997:                                        ; preds = %if.then994, %land.lhs.true991, %land.lhs.true988, %lor.lhs.false984, %land.lhs.true980, %cond.end975
  %484 = load i32, i32* %pass, align 4, !dbg !5134
  %cmp998 = icmp ne i32 %484, 0, !dbg !5136
  br i1 %cmp998, label %land.lhs.true1000, label %if.end1015, !dbg !5137

land.lhs.true1000:                                ; preds = %if.end997
  %485 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5138
  %tobool1001 = icmp ne %struct.rtx_def* %485, null, !dbg !5138
  br i1 %tobool1001, label %land.lhs.true1002, label %if.end1015, !dbg !5139

land.lhs.true1002:                                ; preds = %land.lhs.true1000
  %486 = load i32, i32* %structure_value_addr_parm, align 4, !dbg !5140
  %tobool1003 = icmp ne i32 %486, 0, !dbg !5140
  br i1 %tobool1003, label %if.end1015, label %if.then1004, !dbg !5141

if.then1004:                                      ; preds = %land.lhs.true1002
  %487 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5142
  %call1005 = call %struct.rtx_def* @convert_memory_address_addr_space(i32 16, %struct.rtx_def* %487, i8 zeroext 0), !dbg !5142
  store %struct.rtx_def* %call1005, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5144
  %488 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !5145
  %489 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5146
  %call1006 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %489, %struct.rtx_def* null), !dbg !5147
  %call1007 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %call1006), !dbg !5148
  %call1008 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %488, %struct.rtx_def* %call1007), !dbg !5149
  %490 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !5150
  %491 = bitcast %struct.rtx_def* %490 to i32*, !dbg !5150
  %bf.load1009 = load i32, i32* %491, align 8, !dbg !5150
  %bf.clear1010 = and i32 %bf.load1009, 65535, !dbg !5150
  %cmp1011 = icmp eq i32 %bf.clear1010, 37, !dbg !5150
  br i1 %cmp1011, label %if.then1013, label %if.end1014, !dbg !5152

if.then1013:                                      ; preds = %if.then1004
  %492 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !5153
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %492), !dbg !5154
  br label %if.end1014, !dbg !5154

if.end1014:                                       ; preds = %if.then1013, %if.then1004
  br label %if.end1015, !dbg !5155

if.end1015:                                       ; preds = %if.end1014, %land.lhs.true1002, %land.lhs.true1000, %if.end997
  %call1016 = call %struct.rtx_def* @get_last_insn(), !dbg !5156
  store %struct.rtx_def* %call1016, %struct.rtx_def** %after_args, align 8, !dbg !5157
  %493 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5158
  %494 = load %struct.rtx_def*, %struct.rtx_def** %funexp, align 8, !dbg !5159
  %495 = load %struct.rtx_def*, %struct.rtx_def** %static_chain_value, align 8, !dbg !5160
  %496 = load i32, i32* %reg_parm_seen, align 4, !dbg !5161
  %497 = load i32, i32* %pass, align 4, !dbg !5162
  %cmp1017 = icmp eq i32 %497, 0, !dbg !5163
  %conv1018 = zext i1 %cmp1017 to i32, !dbg !5163
  %call1019 = call %struct.rtx_def* @prepare_call_address(%union.tree_node* %493, %struct.rtx_def* %494, %struct.rtx_def* %495, %struct.rtx_def** %call_fusage, i32 %496, i32 %conv1018), !dbg !5164
  store %struct.rtx_def* %call1019, %struct.rtx_def** %funexp, align 8, !dbg !5165
  %498 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5166
  %499 = load i32, i32* %num_actuals, align 4, !dbg !5167
  %500 = load i32, i32* %flags, align 4, !dbg !5168
  %501 = load i32, i32* %pass, align 4, !dbg !5169
  %cmp1020 = icmp eq i32 %501, 0, !dbg !5170
  %conv1021 = zext i1 %cmp1020 to i32, !dbg !5170
  call void @load_register_parameters(%struct.arg_data* %498, i32 %499, %struct.rtx_def** %call_fusage, i32 %500, i32 %conv1021, i32* %sibcall_failure), !dbg !5171
  %call1022 = call %struct.rtx_def* @get_last_insn(), !dbg !5172
  store %struct.rtx_def* %call1022, %struct.rtx_def** %before_call, align 8, !dbg !5173
  %502 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !5174
  %call1023 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 0, %union.tree_node* %502, i32 1), !dbg !5174
  store %struct.rtx_def* %call1023, %struct.rtx_def** %next_arg_reg, align 8, !dbg !5175
  %503 = load i32, i32* %pass, align 4, !dbg !5176
  %tobool1024 = icmp ne i32 %503, 0, !dbg !5176
  br i1 %tobool1024, label %lor.lhs.false1025, label %cond.false1029, !dbg !5176

lor.lhs.false1025:                                ; preds = %if.end1015
  %504 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5176
  %conv1026 = sext i32 %504 to i64, !dbg !5176
  %505 = load i64, i64* %preferred_unit_stack_boundary, align 8, !dbg !5176
  %rem = urem i64 %conv1026, %505, !dbg !5176
  %tobool1027 = icmp ne i64 %rem, 0, !dbg !5176
  br i1 %tobool1027, label %cond.true1028, label %cond.false1029, !dbg !5176

cond.true1028:                                    ; preds = %lor.lhs.false1025
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 2840, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5176
  br label %cond.end1030, !dbg !5176

cond.false1029:                                   ; preds = %lor.lhs.false1025, %if.end1015
  br label %cond.end1030, !dbg !5176

cond.end1030:                                     ; preds = %cond.false1029, %cond.true1028
  %cond1031 = phi i32 [ 0, %cond.true1028 ], [ 0, %cond.false1029 ], !dbg !5176
  %506 = load %struct.rtx_def*, %struct.rtx_def** %funexp, align 8, !dbg !5177
  %507 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5178
  %508 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !5179
  %509 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !5180
  %510 = load i32, i32* %unadjusted_args_size, align 4, !dbg !5181
  %conv1032 = sext i32 %510 to i64, !dbg !5181
  %constant1033 = getelementptr inbounds %struct.args_size, %struct.args_size* %adjusted_args_size, i32 0, i32 0, !dbg !5182
  %511 = load i64, i64* %constant1033, align 8, !dbg !5182
  %512 = load i64, i64* %struct_value_size, align 8, !dbg !5183
  %513 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg, align 8, !dbg !5184
  %514 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5185
  %515 = load i32, i32* %old_inhibit_defer_pop, align 4, !dbg !5186
  %516 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !5187
  %517 = load i32, i32* %flags, align 4, !dbg !5188
  call void @emit_call_1(%struct.rtx_def* %506, %union.tree_node* %507, %union.tree_node* %508, %union.tree_node* %509, i64 %conv1032, i64 %511, i64 %512, %struct.rtx_def* %513, %struct.rtx_def* %514, i32 %515, %struct.rtx_def* %516, i32 %517, %struct.ix86_args* %args_so_far), !dbg !5189
  %518 = load i32, i32* %pass, align 4, !dbg !5190
  %cmp1034 = icmp eq i32 %518, 0, !dbg !5192
  br i1 %cmp1034, label %land.lhs.true1036, label %if.end1040, !dbg !5193

land.lhs.true1036:                                ; preds = %cond.end1030
  %519 = load %struct.rtx_def*, %struct.rtx_def** %after_args, align 8, !dbg !5194
  %call1037 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %519, %struct.arg_data* null, i32 0), !dbg !5195
  %tobool1038 = icmp ne i32 %call1037, 0, !dbg !5195
  br i1 %tobool1038, label %if.then1039, label %if.end1040, !dbg !5196

if.then1039:                                      ; preds = %land.lhs.true1036
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5197
  br label %if.end1040, !dbg !5198

if.end1040:                                       ; preds = %if.then1039, %land.lhs.true1036, %cond.end1030
  %520 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5199
  %tobool1041 = icmp ne %struct.rtx_def* %520, null, !dbg !5199
  br i1 %tobool1041, label %if.end1106, label %land.lhs.true1042, !dbg !5201

land.lhs.true1042:                                ; preds = %if.end1040
  %521 = load i32, i32* %pcc_struct_value, align 4, !dbg !5202
  %tobool1043 = icmp ne i32 %521, 0, !dbg !5202
  br i1 %tobool1043, label %if.end1106, label %land.lhs.true1044, !dbg !5203

land.lhs.true1044:                                ; preds = %land.lhs.true1042
  %522 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5204
  %base1045 = bitcast %union.tree_node* %522 to %struct.tree_base*, !dbg !5204
  %523 = bitcast %struct.tree_base* %base1045 to i64*, !dbg !5204
  %bf.load1046 = load i64, i64* %523, align 8, !dbg !5204
  %bf.clear1047 = and i64 %bf.load1046, 65535, !dbg !5204
  %bf.cast1048 = trunc i64 %bf.clear1047 to i32, !dbg !5204
  %cmp1049 = icmp eq i32 %bf.cast1048, 14, !dbg !5204
  br i1 %cmp1049, label %cond.true1051, label %cond.false1053, !dbg !5204

cond.true1051:                                    ; preds = %land.lhs.true1044
  %524 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5204
  %call1052 = call i32 @vector_type_mode(%union.tree_node* %524), !dbg !5204
  br label %cond.end1059, !dbg !5204

cond.false1053:                                   ; preds = %land.lhs.true1044
  %525 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5204
  %type1054 = bitcast %union.tree_node* %525 to %struct.tree_type*, !dbg !5204
  %mode1055 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1054, i32 0, i32 6, !dbg !5204
  %bf.load1056 = load i32, i32* %mode1055, align 4, !dbg !5204
  %bf.lshr1057 = lshr i32 %bf.load1056, 16, !dbg !5204
  %bf.clear1058 = and i32 %bf.lshr1057, 255, !dbg !5204
  br label %cond.end1059, !dbg !5204

cond.end1059:                                     ; preds = %cond.false1053, %cond.true1051
  %cond1060 = phi i32 [ %call1052, %cond.true1051 ], [ %bf.clear1058, %cond.false1053 ], !dbg !5204
  %cmp1061 = icmp ne i32 %cond1060, 1, !dbg !5205
  br i1 %cmp1061, label %land.lhs.true1063, label %if.end1106, !dbg !5206

land.lhs.true1063:                                ; preds = %cond.end1059
  %526 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 4), align 8, !dbg !5207
  %527 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5208
  %call1064 = call zeroext i8 %526(%union.tree_node* %527), !dbg !5209
  %conv1065 = zext i8 %call1064 to i32, !dbg !5209
  %tobool1066 = icmp ne i32 %conv1065, 0, !dbg !5209
  br i1 %tobool1066, label %if.then1067, label %if.end1106, !dbg !5210

if.then1067:                                      ; preds = %land.lhs.true1063
  %528 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5211
  %base1068 = bitcast %union.tree_node* %528 to %struct.tree_base*, !dbg !5211
  %529 = bitcast %struct.tree_base* %base1068 to i64*, !dbg !5211
  %bf.load1069 = load i64, i64* %529, align 8, !dbg !5211
  %bf.clear1070 = and i64 %bf.load1069, 65535, !dbg !5211
  %bf.cast1071 = trunc i64 %bf.clear1070 to i32, !dbg !5211
  %cmp1072 = icmp eq i32 %bf.cast1071, 14, !dbg !5211
  br i1 %cmp1072, label %cond.true1074, label %cond.false1076, !dbg !5211

cond.true1074:                                    ; preds = %if.then1067
  %530 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5211
  %call1075 = call i32 @vector_type_mode(%union.tree_node* %530), !dbg !5211
  br label %cond.end1082, !dbg !5211

cond.false1076:                                   ; preds = %if.then1067
  %531 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5211
  %type1077 = bitcast %union.tree_node* %531 to %struct.tree_type*, !dbg !5211
  %mode1078 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1077, i32 0, i32 6, !dbg !5211
  %bf.load1079 = load i32, i32* %mode1078, align 4, !dbg !5211
  %bf.lshr1080 = lshr i32 %bf.load1079, 16, !dbg !5211
  %bf.clear1081 = and i32 %bf.lshr1080, 255, !dbg !5211
  br label %cond.end1082, !dbg !5211

cond.end1082:                                     ; preds = %cond.false1076, %cond.true1074
  %cond1083 = phi i32 [ %call1075, %cond.true1074 ], [ %bf.clear1081, %cond.false1076 ], !dbg !5211
  %532 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5214
  %call1084 = call zeroext i8 @shift_return_value(i32 %cond1083, i8 zeroext 0, %struct.rtx_def* %532), !dbg !5215
  %tobool1085 = icmp ne i8 %call1084, 0, !dbg !5215
  br i1 %tobool1085, label %if.then1086, label %if.end1087, !dbg !5216

if.then1086:                                      ; preds = %cond.end1082
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5217
  br label %if.end1087, !dbg !5218

if.end1087:                                       ; preds = %if.then1086, %cond.end1082
  %533 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5219
  %base1088 = bitcast %union.tree_node* %533 to %struct.tree_base*, !dbg !5219
  %534 = bitcast %struct.tree_base* %base1088 to i64*, !dbg !5219
  %bf.load1089 = load i64, i64* %534, align 8, !dbg !5219
  %bf.clear1090 = and i64 %bf.load1089, 65535, !dbg !5219
  %bf.cast1091 = trunc i64 %bf.clear1090 to i32, !dbg !5219
  %cmp1092 = icmp eq i32 %bf.cast1091, 14, !dbg !5219
  br i1 %cmp1092, label %cond.true1094, label %cond.false1096, !dbg !5219

cond.true1094:                                    ; preds = %if.end1087
  %535 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5219
  %call1095 = call i32 @vector_type_mode(%union.tree_node* %535), !dbg !5219
  br label %cond.end1102, !dbg !5219

cond.false1096:                                   ; preds = %if.end1087
  %536 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5219
  %type1097 = bitcast %union.tree_node* %536 to %struct.tree_type*, !dbg !5219
  %mode1098 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1097, i32 0, i32 6, !dbg !5219
  %bf.load1099 = load i32, i32* %mode1098, align 4, !dbg !5219
  %bf.lshr1100 = lshr i32 %bf.load1099, 16, !dbg !5219
  %bf.clear1101 = and i32 %bf.lshr1100, 255, !dbg !5219
  br label %cond.end1102, !dbg !5219

cond.end1102:                                     ; preds = %cond.false1096, %cond.true1094
  %cond1103 = phi i32 [ %call1095, %cond.true1094 ], [ %bf.clear1101, %cond.false1096 ], !dbg !5219
  %537 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5220
  %call1104 = call i32 @rhs_regno(%struct.rtx_def* %537), !dbg !5220
  %call1105 = call %struct.rtx_def* @gen_rtx_REG(i32 %cond1103, i32 %call1104), !dbg !5221
  store %struct.rtx_def* %call1105, %struct.rtx_def** %valreg, align 8, !dbg !5222
  br label %if.end1106, !dbg !5223

if.end1106:                                       ; preds = %cond.end1102, %land.lhs.true1063, %cond.end1059, %land.lhs.true1042, %if.end1040
  %538 = load i32, i32* %pass, align 4, !dbg !5224
  %tobool1107 = icmp ne i32 %538, 0, !dbg !5224
  br i1 %tobool1107, label %land.lhs.true1108, label %if.end1134, !dbg !5226

land.lhs.true1108:                                ; preds = %if.end1106
  %539 = load i32, i32* %flags, align 4, !dbg !5227
  %and1109 = and i32 %539, 16, !dbg !5228
  %tobool1110 = icmp ne i32 %and1109, 0, !dbg !5228
  br i1 %tobool1110, label %if.then1111, label %if.end1134, !dbg !5229

if.then1111:                                      ; preds = %land.lhs.true1108
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %temp1112, metadata !5230, metadata !DIExpression()), !dbg !5232
  %540 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5233
  %541 = bitcast %struct.rtx_def* %540 to i32*, !dbg !5233
  %bf.load1113 = load i32, i32* %541, align 8, !dbg !5233
  %bf.lshr1114 = lshr i32 %bf.load1113, 16, !dbg !5233
  %bf.clear1115 = and i32 %bf.lshr1114, 255, !dbg !5233
  %call1116 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear1115), !dbg !5234
  store %struct.rtx_def* %call1116, %struct.rtx_def** %temp1112, align 8, !dbg !5232
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !5235, metadata !DIExpression()), !dbg !5236
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insns1117, metadata !5237, metadata !DIExpression()), !dbg !5238
  %542 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5239
  %base1118 = bitcast %union.tree_node* %542 to %struct.tree_base*, !dbg !5239
  %543 = bitcast %struct.tree_base* %base1118 to i64*, !dbg !5239
  %bf.load1119 = load i64, i64* %543, align 8, !dbg !5239
  %bf.clear1120 = and i64 %bf.load1119, 65535, !dbg !5239
  %bf.cast1121 = trunc i64 %bf.clear1120 to i32, !dbg !5239
  %cmp1122 = icmp eq i32 %bf.cast1121, 10, !dbg !5241
  br i1 %cmp1122, label %if.then1124, label %if.end1129, !dbg !5242

if.then1124:                                      ; preds = %if.then1111
  %544 = load %struct.rtx_def*, %struct.rtx_def** %temp1112, align 8, !dbg !5243
  %545 = load i32, i32* @ix86_isa_flags, align 4, !dbg !5244
  %and1125 = and i32 %545, 32, !dbg !5244
  %cmp1126 = icmp ne i32 %and1125, 0, !dbg !5244
  %546 = zext i1 %cmp1126 to i64, !dbg !5244
  %cond1128 = select i1 %cmp1126, i32 256, i32 128, !dbg !5244
  call void @mark_reg_pointer(%struct.rtx_def* %544, i32 %cond1128), !dbg !5245
  br label %if.end1129, !dbg !5245

if.end1129:                                       ; preds = %if.then1124, %if.then1111
  %547 = load %struct.rtx_def*, %struct.rtx_def** %temp1112, align 8, !dbg !5246
  %548 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5247
  %call1130 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %547, %struct.rtx_def* %548), !dbg !5248
  %call1131 = call %struct.rtx_def* @get_last_insn(), !dbg !5249
  store %struct.rtx_def* %call1131, %struct.rtx_def** %last, align 8, !dbg !5250
  %549 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !5251
  %550 = load %struct.rtx_def*, %struct.rtx_def** %temp1112, align 8, !dbg !5252
  call void @add_reg_note(%struct.rtx_def* %549, i32 15, %struct.rtx_def* %550), !dbg !5253
  %call1132 = call %struct.rtx_def* @get_insns(), !dbg !5254
  store %struct.rtx_def* %call1132, %struct.rtx_def** %insns1117, align 8, !dbg !5255
  call void @end_sequence(), !dbg !5256
  %551 = load %struct.rtx_def*, %struct.rtx_def** %insns1117, align 8, !dbg !5257
  %call1133 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %551), !dbg !5258
  %552 = load %struct.rtx_def*, %struct.rtx_def** %temp1112, align 8, !dbg !5259
  store %struct.rtx_def* %552, %struct.rtx_def** %valreg, align 8, !dbg !5260
  br label %if.end1134, !dbg !5261

if.end1134:                                       ; preds = %if.end1129, %land.lhs.true1108, %if.end1106
  %553 = load i32, i32* %flags, align 4, !dbg !5262
  %and1135 = and i32 %553, 8, !dbg !5264
  %tobool1136 = icmp ne i32 %and1135, 0, !dbg !5264
  br i1 %tobool1136, label %if.then1140, label %lor.lhs.false1137, !dbg !5265

lor.lhs.false1137:                                ; preds = %if.end1134
  %554 = load i32, i32* %pass, align 4, !dbg !5266
  %cmp1138 = icmp eq i32 %554, 0, !dbg !5267
  br i1 %cmp1138, label %if.then1140, label %if.end1164, !dbg !5268

if.then1140:                                      ; preds = %lor.lhs.false1137, %if.end1134
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last1141, metadata !5269, metadata !DIExpression()), !dbg !5271
  %call1142 = call %struct.rtx_def* @get_last_insn(), !dbg !5272
  store %struct.rtx_def* %call1142, %struct.rtx_def** %last1141, align 8, !dbg !5271
  br label %while.cond, !dbg !5273

while.cond:                                       ; preds = %cond.end1157, %if.then1140
  %555 = load %struct.rtx_def*, %struct.rtx_def** %last1141, align 8, !dbg !5274
  %556 = bitcast %struct.rtx_def* %555 to i32*, !dbg !5274
  %bf.load1143 = load i32, i32* %556, align 8, !dbg !5274
  %bf.clear1144 = and i32 %bf.load1143, 65535, !dbg !5274
  %cmp1145 = icmp eq i32 %bf.clear1144, 10, !dbg !5274
  %lnot1147 = xor i1 %cmp1145, true, !dbg !5275
  br i1 %lnot1147, label %while.body, label %while.end, !dbg !5273

while.body:                                       ; preds = %while.cond
  %557 = load %struct.rtx_def*, %struct.rtx_def** %last1141, align 8, !dbg !5276
  %u1149 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %557, i32 0, i32 1, !dbg !5276
  %fld1150 = bitcast %union.u* %u1149 to [1 x %union.rtunion_def]*, !dbg !5276
  %arrayidx1151 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1150, i64 0, i64 1, !dbg !5276
  %rt_rtx1152 = bitcast %union.rtunion_def* %arrayidx1151 to %struct.rtx_def**, !dbg !5276
  %558 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx1152, align 8, !dbg !5276
  store %struct.rtx_def* %558, %struct.rtx_def** %last1141, align 8, !dbg !5278
  %559 = load %struct.rtx_def*, %struct.rtx_def** %last1141, align 8, !dbg !5279
  %560 = load %struct.rtx_def*, %struct.rtx_def** %before_call, align 8, !dbg !5279
  %cmp1153 = icmp ne %struct.rtx_def* %559, %560, !dbg !5279
  br i1 %cmp1153, label %cond.false1156, label %cond.true1155, !dbg !5279

cond.true1155:                                    ; preds = %while.body
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 2908, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5279
  br label %cond.end1157, !dbg !5279

cond.false1156:                                   ; preds = %while.body
  br label %cond.end1157, !dbg !5279

cond.end1157:                                     ; preds = %cond.false1156, %cond.true1155
  %cond1158 = phi i32 [ 0, %cond.true1155 ], [ 0, %cond.false1156 ], !dbg !5279
  br label %while.cond, !dbg !5273, !llvm.loop !5280

while.end:                                        ; preds = %while.cond
  %561 = load %struct.rtx_def*, %struct.rtx_def** %last1141, align 8, !dbg !5282
  %call1159 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %561), !dbg !5283
  %562 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !5284
  %cmp1160 = icmp eq i32 %562, 0, !dbg !5286
  br i1 %cmp1160, label %if.then1162, label %if.end1163, !dbg !5287

if.then1162:                                      ; preds = %while.end
  %563 = load i32, i32* %old_stack_allocated, align 4, !dbg !5288
  store i32 %563, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5290
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !5291
  br label %if.end1163, !dbg !5292

if.end1163:                                       ; preds = %if.then1162, %while.end
  br label %if.end1164, !dbg !5293

if.end1164:                                       ; preds = %if.end1163, %lor.lhs.false1137
  %564 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5294
  %base1165 = bitcast %union.tree_node* %564 to %struct.tree_base*, !dbg !5294
  %565 = bitcast %struct.tree_base* %base1165 to i64*, !dbg !5294
  %bf.load1166 = load i64, i64* %565, align 8, !dbg !5294
  %bf.clear1167 = and i64 %bf.load1166, 65535, !dbg !5294
  %bf.cast1168 = trunc i64 %bf.clear1167 to i32, !dbg !5294
  %cmp1169 = icmp eq i32 %bf.cast1168, 14, !dbg !5294
  br i1 %cmp1169, label %cond.true1171, label %cond.false1173, !dbg !5294

cond.true1171:                                    ; preds = %if.end1164
  %566 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5294
  %call1172 = call i32 @vector_type_mode(%union.tree_node* %566), !dbg !5294
  br label %cond.end1179, !dbg !5294

cond.false1173:                                   ; preds = %if.end1164
  %567 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5294
  %type1174 = bitcast %union.tree_node* %567 to %struct.tree_type*, !dbg !5294
  %mode1175 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1174, i32 0, i32 6, !dbg !5294
  %bf.load1176 = load i32, i32* %mode1175, align 4, !dbg !5294
  %bf.lshr1177 = lshr i32 %bf.load1176, 16, !dbg !5294
  %bf.clear1178 = and i32 %bf.lshr1177, 255, !dbg !5294
  br label %cond.end1179, !dbg !5294

cond.end1179:                                     ; preds = %cond.false1173, %cond.true1171
  %cond1180 = phi i32 [ %call1172, %cond.true1171 ], [ %bf.clear1178, %cond.false1173 ], !dbg !5294
  %cmp1181 = icmp eq i32 %cond1180, 0, !dbg !5296
  br i1 %cmp1181, label %if.then1185, label %lor.lhs.false1183, !dbg !5297

lor.lhs.false1183:                                ; preds = %cond.end1179
  %568 = load i32, i32* %ignore.addr, align 4, !dbg !5298
  %tobool1184 = icmp ne i32 %568, 0, !dbg !5298
  br i1 %tobool1184, label %if.then1185, label %if.else1186, !dbg !5299

if.then1185:                                      ; preds = %lor.lhs.false1183, %cond.end1179
  %569 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !5300
  store %struct.rtx_def* %569, %struct.rtx_def** %target.addr, align 8, !dbg !5301
  br label %if.end1420, !dbg !5302

if.else1186:                                      ; preds = %lor.lhs.false1183
  %570 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5303
  %tobool1187 = icmp ne %struct.rtx_def* %570, null, !dbg !5303
  br i1 %tobool1187, label %if.then1188, label %if.else1232, !dbg !5305

if.then1188:                                      ; preds = %if.else1186
  %571 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5306
  %cmp1189 = icmp eq %struct.rtx_def* %571, null, !dbg !5309
  br i1 %cmp1189, label %if.then1196, label %lor.lhs.false1191, !dbg !5310

lor.lhs.false1191:                                ; preds = %if.then1188
  %572 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5311
  %573 = bitcast %struct.rtx_def* %572 to i32*, !dbg !5311
  %bf.load1192 = load i32, i32* %573, align 8, !dbg !5311
  %bf.clear1193 = and i32 %bf.load1192, 65535, !dbg !5311
  %cmp1194 = icmp eq i32 %bf.clear1193, 43, !dbg !5311
  br i1 %cmp1194, label %if.end1231, label %if.then1196, !dbg !5312

if.then1196:                                      ; preds = %lor.lhs.false1191, %if.then1188
  %574 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5313
  %base1197 = bitcast %union.tree_node* %574 to %struct.tree_base*, !dbg !5313
  %575 = bitcast %struct.tree_base* %base1197 to i64*, !dbg !5313
  %bf.load1198 = load i64, i64* %575, align 8, !dbg !5313
  %bf.clear1199 = and i64 %bf.load1198, 65535, !dbg !5313
  %bf.cast1200 = trunc i64 %bf.clear1199 to i32, !dbg !5313
  %cmp1201 = icmp eq i32 %bf.cast1200, 14, !dbg !5313
  br i1 %cmp1201, label %cond.true1203, label %cond.false1205, !dbg !5313

cond.true1203:                                    ; preds = %if.then1196
  %576 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5313
  %call1204 = call i32 @vector_type_mode(%union.tree_node* %576), !dbg !5313
  br label %cond.end1211, !dbg !5313

cond.false1205:                                   ; preds = %if.then1196
  %577 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5313
  %type1206 = bitcast %union.tree_node* %577 to %struct.tree_type*, !dbg !5313
  %mode1207 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1206, i32 0, i32 6, !dbg !5313
  %bf.load1208 = load i32, i32* %mode1207, align 4, !dbg !5313
  %bf.lshr1209 = lshr i32 %bf.load1208, 16, !dbg !5313
  %bf.clear1210 = and i32 %bf.lshr1209, 255, !dbg !5313
  br label %cond.end1211, !dbg !5313

cond.end1211:                                     ; preds = %cond.false1205, %cond.true1203
  %cond1212 = phi i32 [ %call1204, %cond.true1203 ], [ %bf.clear1210, %cond.false1205 ], !dbg !5313
  %578 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5315
  %base1213 = bitcast %union.tree_node* %578 to %struct.tree_base*, !dbg !5315
  %579 = bitcast %struct.tree_base* %base1213 to i64*, !dbg !5315
  %bf.load1214 = load i64, i64* %579, align 8, !dbg !5315
  %bf.clear1215 = and i64 %bf.load1214, 65535, !dbg !5315
  %bf.cast1216 = trunc i64 %bf.clear1215 to i32, !dbg !5315
  %cmp1217 = icmp eq i32 %bf.cast1216, 14, !dbg !5315
  br i1 %cmp1217, label %cond.true1219, label %cond.false1221, !dbg !5315

cond.true1219:                                    ; preds = %cond.end1211
  %580 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5315
  %call1220 = call i32 @vector_type_mode(%union.tree_node* %580), !dbg !5315
  br label %cond.end1227, !dbg !5315

cond.false1221:                                   ; preds = %cond.end1211
  %581 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5315
  %type1222 = bitcast %union.tree_node* %581 to %struct.tree_type*, !dbg !5315
  %mode1223 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1222, i32 0, i32 6, !dbg !5315
  %bf.load1224 = load i32, i32* %mode1223, align 4, !dbg !5315
  %bf.lshr1225 = lshr i32 %bf.load1224, 16, !dbg !5315
  %bf.clear1226 = and i32 %bf.lshr1225, 255, !dbg !5315
  br label %cond.end1227, !dbg !5315

cond.end1227:                                     ; preds = %cond.false1221, %cond.true1219
  %cond1228 = phi i32 [ %call1220, %cond.true1219 ], [ %bf.clear1226, %cond.false1221 ], !dbg !5315
  %582 = load %struct.rtx_def*, %struct.rtx_def** %structure_value_addr, align 8, !dbg !5315
  %call1229 = call %struct.rtx_def* @memory_address_addr_space(i32 %cond1228, %struct.rtx_def* %582, i8 zeroext 0), !dbg !5315
  %call1230 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond1212, %struct.rtx_def* %call1229), !dbg !5316
  store %struct.rtx_def* %call1230, %struct.rtx_def** %target.addr, align 8, !dbg !5317
  %583 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5318
  %584 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5319
  call void @set_mem_attributes(%struct.rtx_def* %583, %union.tree_node* %584, i32 1), !dbg !5320
  br label %if.end1231, !dbg !5321

if.end1231:                                       ; preds = %cond.end1227, %lor.lhs.false1191
  br label %if.end1419, !dbg !5322

if.else1232:                                      ; preds = %if.else1186
  %585 = load i32, i32* %pcc_struct_value, align 4, !dbg !5323
  %tobool1233 = icmp ne i32 %585, 0, !dbg !5323
  br i1 %tobool1233, label %if.then1234, label %if.else1253, !dbg !5325

if.then1234:                                      ; preds = %if.else1232
  %586 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5326
  %base1235 = bitcast %union.tree_node* %586 to %struct.tree_base*, !dbg !5326
  %587 = bitcast %struct.tree_base* %base1235 to i64*, !dbg !5326
  %bf.load1236 = load i64, i64* %587, align 8, !dbg !5326
  %bf.clear1237 = and i64 %bf.load1236, 65535, !dbg !5326
  %bf.cast1238 = trunc i64 %bf.clear1237 to i32, !dbg !5326
  %cmp1239 = icmp eq i32 %bf.cast1238, 14, !dbg !5326
  br i1 %cmp1239, label %cond.true1241, label %cond.false1243, !dbg !5326

cond.true1241:                                    ; preds = %if.then1234
  %588 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5326
  %call1242 = call i32 @vector_type_mode(%union.tree_node* %588), !dbg !5326
  br label %cond.end1249, !dbg !5326

cond.false1243:                                   ; preds = %if.then1234
  %589 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5326
  %type1244 = bitcast %union.tree_node* %589 to %struct.tree_type*, !dbg !5326
  %mode1245 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1244, i32 0, i32 6, !dbg !5326
  %bf.load1246 = load i32, i32* %mode1245, align 4, !dbg !5326
  %bf.lshr1247 = lshr i32 %bf.load1246, 16, !dbg !5326
  %bf.clear1248 = and i32 %bf.lshr1247, 255, !dbg !5326
  br label %cond.end1249, !dbg !5326

cond.end1249:                                     ; preds = %cond.false1243, %cond.true1241
  %cond1250 = phi i32 [ %call1242, %cond.true1241 ], [ %bf.clear1248, %cond.false1243 ], !dbg !5326
  %590 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5328
  %call1251 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %590), !dbg !5329
  %call1252 = call %struct.rtx_def* @gen_rtx_MEM(i32 %cond1250, %struct.rtx_def* %call1251), !dbg !5330
  store %struct.rtx_def* %call1252, %struct.rtx_def** %target.addr, align 8, !dbg !5331
  %591 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5332
  %592 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5333
  call void @set_mem_attributes(%struct.rtx_def* %591, %union.tree_node* %592, i32 1), !dbg !5334
  br label %if.end1418, !dbg !5335

if.else1253:                                      ; preds = %if.else1232
  %593 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5336
  %594 = bitcast %struct.rtx_def* %593 to i32*, !dbg !5336
  %bf.load1254 = load i32, i32* %594, align 8, !dbg !5336
  %bf.clear1255 = and i32 %bf.load1254, 65535, !dbg !5336
  %cmp1256 = icmp eq i32 %bf.clear1255, 15, !dbg !5338
  br i1 %cmp1256, label %if.then1258, label %if.else1297, !dbg !5339

if.then1258:                                      ; preds = %if.else1253
  %595 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5340
  %cmp1259 = icmp eq %struct.rtx_def* %595, null, !dbg !5343
  br i1 %cmp1259, label %if.then1261, label %if.end1290, !dbg !5344

if.then1261:                                      ; preds = %if.then1258
  call void @llvm.dbg.declare(metadata %union.tree_node** %nt, metadata !5345, metadata !DIExpression()), !dbg !5347
  %596 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5348
  %597 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5349
  %base1262 = bitcast %union.tree_node* %597 to %struct.tree_base*, !dbg !5349
  %598 = bitcast %struct.tree_base* %base1262 to i64*, !dbg !5349
  %bf.load1263 = load i64, i64* %598, align 8, !dbg !5349
  %bf.lshr1264 = lshr i64 %bf.load1263, 20, !dbg !5349
  %bf.clear1265 = and i64 %bf.lshr1264, 1, !dbg !5349
  %bf.cast1266 = trunc i64 %bf.clear1265 to i32, !dbg !5349
  %mul1267 = mul nsw i32 %bf.cast1266, 1, !dbg !5349
  %599 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5349
  %base1268 = bitcast %union.tree_node* %599 to %struct.tree_base*, !dbg !5349
  %600 = bitcast %struct.tree_base* %base1268 to i64*, !dbg !5349
  %bf.load1269 = load i64, i64* %600, align 8, !dbg !5349
  %bf.lshr1270 = lshr i64 %bf.load1269, 19, !dbg !5349
  %bf.clear1271 = and i64 %bf.lshr1270, 1, !dbg !5349
  %bf.cast1272 = trunc i64 %bf.clear1271 to i32, !dbg !5349
  %mul1273 = mul nsw i32 %bf.cast1272, 2, !dbg !5349
  %or1274 = or i32 %mul1267, %mul1273, !dbg !5349
  %601 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5349
  %type1275 = bitcast %union.tree_node* %601 to %struct.tree_type*, !dbg !5349
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1275, i32 0, i32 6, !dbg !5349
  %bf.load1276 = load i32, i32* %restrict_flag, align 4, !dbg !5349
  %bf.lshr1277 = lshr i32 %bf.load1276, 13, !dbg !5349
  %bf.clear1278 = and i32 %bf.lshr1277, 1, !dbg !5349
  %mul1279 = mul nsw i32 %bf.clear1278, 4, !dbg !5349
  %or1280 = or i32 %or1274, %mul1279, !dbg !5349
  %602 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5349
  %base1281 = bitcast %union.tree_node* %602 to %struct.tree_base*, !dbg !5349
  %603 = bitcast %struct.tree_base* %base1281 to i64*, !dbg !5349
  %bf.load1282 = load i64, i64* %603, align 8, !dbg !5349
  %bf.lshr1283 = lshr i64 %bf.load1282, 56, !dbg !5349
  %bf.cast1284 = trunc i64 %bf.lshr1283 to i32, !dbg !5349
  %and1285 = and i32 %bf.cast1284, 255, !dbg !5349
  %shl = shl i32 %and1285, 8, !dbg !5349
  %or1286 = or i32 %or1280, %shl, !dbg !5349
  %or1287 = or i32 %or1286, 1, !dbg !5350
  %call1288 = call %union.tree_node* @build_qualified_type(%union.tree_node* %596, i32 %or1287), !dbg !5351
  store %union.tree_node* %call1288, %union.tree_node** %nt, align 8, !dbg !5347
  %604 = load %union.tree_node*, %union.tree_node** %nt, align 8, !dbg !5352
  %call1289 = call %struct.rtx_def* @assign_temp(%union.tree_node* %604, i32 0, i32 1, i32 1), !dbg !5353
  store %struct.rtx_def* %call1289, %struct.rtx_def** %target.addr, align 8, !dbg !5354
  br label %if.end1290, !dbg !5355

if.end1290:                                       ; preds = %if.then1261, %if.then1258
  %605 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5356
  %606 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5358
  %call1291 = call i32 @rtx_equal_p(%struct.rtx_def* %605, %struct.rtx_def* %606), !dbg !5359
  %tobool1292 = icmp ne i32 %call1291, 0, !dbg !5359
  br i1 %tobool1292, label %if.end1296, label %if.then1293, !dbg !5360

if.then1293:                                      ; preds = %if.end1290
  %607 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5361
  %608 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5362
  %609 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5363
  %610 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5364
  %call1294 = call i64 @int_size_in_bytes(%union.tree_node* %610), !dbg !5365
  %conv1295 = trunc i64 %call1294 to i32, !dbg !5365
  call void @emit_group_store(%struct.rtx_def* %607, %struct.rtx_def* %608, %union.tree_node* %609, i32 %conv1295), !dbg !5366
  br label %if.end1296, !dbg !5366

if.end1296:                                       ; preds = %if.then1293, %if.end1290
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5367
  br label %if.end1417, !dbg !5368

if.else1297:                                      ; preds = %if.else1253
  %611 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5369
  %tobool1298 = icmp ne %struct.rtx_def* %611, null, !dbg !5369
  br i1 %tobool1298, label %land.lhs.true1299, label %if.else1383, !dbg !5371

land.lhs.true1299:                                ; preds = %if.else1297
  %612 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5372
  %613 = bitcast %struct.rtx_def* %612 to i32*, !dbg !5372
  %bf.load1300 = load i32, i32* %613, align 8, !dbg !5372
  %bf.lshr1301 = lshr i32 %bf.load1300, 16, !dbg !5372
  %bf.clear1302 = and i32 %bf.lshr1301, 255, !dbg !5372
  %614 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5373
  %base1303 = bitcast %union.tree_node* %614 to %struct.tree_base*, !dbg !5373
  %615 = bitcast %struct.tree_base* %base1303 to i64*, !dbg !5373
  %bf.load1304 = load i64, i64* %615, align 8, !dbg !5373
  %bf.clear1305 = and i64 %bf.load1304, 65535, !dbg !5373
  %bf.cast1306 = trunc i64 %bf.clear1305 to i32, !dbg !5373
  %cmp1307 = icmp eq i32 %bf.cast1306, 14, !dbg !5373
  br i1 %cmp1307, label %cond.true1309, label %cond.false1311, !dbg !5373

cond.true1309:                                    ; preds = %land.lhs.true1299
  %616 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5373
  %call1310 = call i32 @vector_type_mode(%union.tree_node* %616), !dbg !5373
  br label %cond.end1317, !dbg !5373

cond.false1311:                                   ; preds = %land.lhs.true1299
  %617 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5373
  %type1312 = bitcast %union.tree_node* %617 to %struct.tree_type*, !dbg !5373
  %mode1313 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1312, i32 0, i32 6, !dbg !5373
  %bf.load1314 = load i32, i32* %mode1313, align 4, !dbg !5373
  %bf.lshr1315 = lshr i32 %bf.load1314, 16, !dbg !5373
  %bf.clear1316 = and i32 %bf.lshr1315, 255, !dbg !5373
  br label %cond.end1317, !dbg !5373

cond.end1317:                                     ; preds = %cond.false1311, %cond.true1309
  %cond1318 = phi i32 [ %call1310, %cond.true1309 ], [ %bf.clear1316, %cond.false1311 ], !dbg !5373
  %cmp1319 = icmp eq i32 %bf.clear1302, %cond1318, !dbg !5374
  br i1 %cmp1319, label %land.lhs.true1321, label %if.else1383, !dbg !5375

land.lhs.true1321:                                ; preds = %cond.end1317
  %618 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5376
  %619 = bitcast %struct.rtx_def* %618 to i32*, !dbg !5376
  %bf.load1322 = load i32, i32* %619, align 8, !dbg !5376
  %bf.lshr1323 = lshr i32 %bf.load1322, 16, !dbg !5376
  %bf.clear1324 = and i32 %bf.lshr1323, 255, !dbg !5376
  %620 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5377
  %621 = bitcast %struct.rtx_def* %620 to i32*, !dbg !5377
  %bf.load1325 = load i32, i32* %621, align 8, !dbg !5377
  %bf.lshr1326 = lshr i32 %bf.load1325, 16, !dbg !5377
  %bf.clear1327 = and i32 %bf.lshr1326, 255, !dbg !5377
  %cmp1328 = icmp eq i32 %bf.clear1324, %bf.clear1327, !dbg !5378
  br i1 %cmp1328, label %if.then1330, label %if.else1383, !dbg !5379

if.then1330:                                      ; preds = %land.lhs.true1321
  call void @llvm.dbg.declare(metadata i8* %may_overlap, metadata !5380, metadata !DIExpression()), !dbg !5382
  store i8 0, i8* %may_overlap, align 1, !dbg !5382
  %622 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5383
  %623 = bitcast %struct.rtx_def* %622 to i32*, !dbg !5383
  %bf.load1331 = load i32, i32* %623, align 8, !dbg !5383
  %bf.clear1332 = and i32 %bf.load1331, 65535, !dbg !5383
  %cmp1333 = icmp eq i32 %bf.clear1332, 37, !dbg !5383
  br i1 %cmp1333, label %lor.lhs.false1335, label %if.then1339, !dbg !5385

lor.lhs.false1335:                                ; preds = %if.then1330
  %624 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5386
  %call1336 = call i32 @rhs_regno(%struct.rtx_def* %624), !dbg !5386
  %cmp1337 = icmp ult i32 %call1336, 53, !dbg !5386
  br i1 %cmp1337, label %if.then1339, label %if.end1341, !dbg !5387

if.then1339:                                      ; preds = %lor.lhs.false1335, %if.then1330
  %625 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5388
  %call1340 = call %struct.rtx_def* @avoid_likely_spilled_reg(%struct.rtx_def* %625), !dbg !5389
  store %struct.rtx_def* %call1340, %struct.rtx_def** %valreg, align 8, !dbg !5390
  br label %if.end1341, !dbg !5391

if.end1341:                                       ; preds = %if.then1339, %lor.lhs.false1335
  %626 = load i32, i32* @target_flags, align 4, !dbg !5392
  %and1342 = and i32 %626, 4, !dbg !5392
  %cmp1343 = icmp ne i32 %and1342, 0, !dbg !5392
  br i1 %cmp1343, label %land.lhs.true1349, label %lor.lhs.false1345, !dbg !5392

lor.lhs.false1345:                                ; preds = %if.end1341
  %call1346 = call i32 @ix86_cfun_abi(), !dbg !5392
  %cmp1347 = icmp eq i32 %call1346, 1, !dbg !5392
  br i1 %cmp1347, label %land.lhs.true1349, label %if.end1370, !dbg !5394

land.lhs.true1349:                                ; preds = %lor.lhs.false1345, %if.end1341
  %627 = load i32, i32* %pass, align 4, !dbg !5395
  %tobool1350 = icmp ne i32 %627, 0, !dbg !5395
  br i1 %tobool1350, label %land.lhs.true1351, label %if.end1370, !dbg !5396

land.lhs.true1351:                                ; preds = %land.lhs.true1349
  %628 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5397
  %629 = bitcast %struct.rtx_def* %628 to i32*, !dbg !5397
  %bf.load1352 = load i32, i32* %629, align 8, !dbg !5397
  %bf.clear1353 = and i32 %bf.load1352, 65535, !dbg !5397
  %cmp1354 = icmp eq i32 %bf.clear1353, 43, !dbg !5397
  br i1 %cmp1354, label %if.then1356, label %if.end1370, !dbg !5398

if.then1356:                                      ; preds = %land.lhs.true1351
  store i32 0, i32* %i, align 4, !dbg !5399
  br label %for.cond1357, !dbg !5401

for.cond1357:                                     ; preds = %for.inc1367, %if.then1356
  %630 = load i32, i32* %i, align 4, !dbg !5402
  %631 = load i32, i32* %num_actuals, align 4, !dbg !5404
  %cmp1358 = icmp slt i32 %630, %631, !dbg !5405
  br i1 %cmp1358, label %for.body1360, label %for.end1369, !dbg !5406

for.body1360:                                     ; preds = %for.cond1357
  %632 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5407
  %633 = load i32, i32* %i, align 4, !dbg !5409
  %idxprom1361 = sext i32 %633 to i64, !dbg !5407
  %arrayidx1362 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %632, i64 %idxprom1361, !dbg !5407
  %save_area1363 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1362, i32 0, i32 13, !dbg !5410
  %634 = load %struct.rtx_def*, %struct.rtx_def** %save_area1363, align 8, !dbg !5410
  %tobool1364 = icmp ne %struct.rtx_def* %634, null, !dbg !5407
  br i1 %tobool1364, label %if.then1365, label %if.end1366, !dbg !5411

if.then1365:                                      ; preds = %for.body1360
  store i8 1, i8* %may_overlap, align 1, !dbg !5412
  br label %for.end1369, !dbg !5414

if.end1366:                                       ; preds = %for.body1360
  br label %for.inc1367, !dbg !5410

for.inc1367:                                      ; preds = %if.end1366
  %635 = load i32, i32* %i, align 4, !dbg !5415
  %inc1368 = add nsw i32 %635, 1, !dbg !5415
  store i32 %inc1368, i32* %i, align 4, !dbg !5415
  br label %for.cond1357, !dbg !5416, !llvm.loop !5417

for.end1369:                                      ; preds = %if.then1365, %for.cond1357
  br label %if.end1370, !dbg !5418

if.end1370:                                       ; preds = %for.end1369, %land.lhs.true1351, %land.lhs.true1349, %lor.lhs.false1345
  %636 = load i8, i8* %may_overlap, align 1, !dbg !5419
  %tobool1371 = icmp ne i8 %636, 0, !dbg !5419
  br i1 %tobool1371, label %if.then1372, label %if.else1374, !dbg !5421

if.then1372:                                      ; preds = %if.end1370
  %637 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5422
  %call1373 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %637), !dbg !5423
  store %struct.rtx_def* %call1373, %struct.rtx_def** %target.addr, align 8, !dbg !5424
  br label %if.end1382, !dbg !5425

if.else1374:                                      ; preds = %if.end1370
  %638 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5426
  %639 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5428
  %call1375 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %638, %struct.rtx_def* %639), !dbg !5429
  %640 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5430
  %641 = bitcast %struct.rtx_def* %640 to i32*, !dbg !5430
  %bf.load1376 = load i32, i32* %641, align 8, !dbg !5430
  %bf.clear1377 = and i32 %bf.load1376, 65535, !dbg !5430
  %cmp1378 = icmp eq i32 %bf.clear1377, 43, !dbg !5430
  br i1 %cmp1378, label %if.then1380, label %if.end1381, !dbg !5432

if.then1380:                                      ; preds = %if.else1374
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5433
  br label %if.end1381, !dbg !5434

if.end1381:                                       ; preds = %if.then1380, %if.else1374
  br label %if.end1382

if.end1382:                                       ; preds = %if.end1381, %if.then1372
  br label %if.end1416, !dbg !5435

if.else1383:                                      ; preds = %land.lhs.true1321, %cond.end1317, %if.else1297
  %642 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5436
  %base1384 = bitcast %union.tree_node* %642 to %struct.tree_base*, !dbg !5436
  %643 = bitcast %struct.tree_base* %base1384 to i64*, !dbg !5436
  %bf.load1385 = load i64, i64* %643, align 8, !dbg !5436
  %bf.clear1386 = and i64 %bf.load1385, 65535, !dbg !5436
  %bf.cast1387 = trunc i64 %bf.clear1386 to i32, !dbg !5436
  %cmp1388 = icmp eq i32 %bf.cast1387, 14, !dbg !5436
  br i1 %cmp1388, label %cond.true1390, label %cond.false1392, !dbg !5436

cond.true1390:                                    ; preds = %if.else1383
  %644 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5436
  %call1391 = call i32 @vector_type_mode(%union.tree_node* %644), !dbg !5436
  br label %cond.end1398, !dbg !5436

cond.false1392:                                   ; preds = %if.else1383
  %645 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5436
  %type1393 = bitcast %union.tree_node* %645 to %struct.tree_type*, !dbg !5436
  %mode1394 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1393, i32 0, i32 6, !dbg !5436
  %bf.load1395 = load i32, i32* %mode1394, align 4, !dbg !5436
  %bf.lshr1396 = lshr i32 %bf.load1395, 16, !dbg !5436
  %bf.clear1397 = and i32 %bf.lshr1396, 255, !dbg !5436
  br label %cond.end1398, !dbg !5436

cond.end1398:                                     ; preds = %cond.false1392, %cond.true1390
  %cond1399 = phi i32 [ %call1391, %cond.true1390 ], [ %bf.clear1397, %cond.false1392 ], !dbg !5436
  %cmp1400 = icmp eq i32 %cond1399, 1, !dbg !5438
  br i1 %cmp1400, label %if.then1402, label %if.else1412, !dbg !5439

if.then1402:                                      ; preds = %cond.end1398
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !5440, metadata !DIExpression()), !dbg !5442
  %646 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5443
  store %struct.rtx_def* %646, %struct.rtx_def** %val, align 8, !dbg !5442
  %647 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5444
  %648 = bitcast %struct.rtx_def* %647 to i32*, !dbg !5444
  %bf.load1403 = load i32, i32* %648, align 8, !dbg !5444
  %bf.lshr1404 = lshr i32 %bf.load1403, 16, !dbg !5444
  %bf.clear1405 = and i32 %bf.lshr1404, 255, !dbg !5444
  %cmp1406 = icmp ne i32 %bf.clear1405, 1, !dbg !5446
  br i1 %cmp1406, label %if.then1408, label %if.end1410, !dbg !5447

if.then1408:                                      ; preds = %if.then1402
  %649 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5448
  %call1409 = call %struct.rtx_def* @avoid_likely_spilled_reg(%struct.rtx_def* %649), !dbg !5449
  store %struct.rtx_def* %call1409, %struct.rtx_def** %val, align 8, !dbg !5450
  br label %if.end1410, !dbg !5451

if.end1410:                                       ; preds = %if.then1408, %if.then1402
  %650 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5452
  %651 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !5453
  %652 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5454
  %call1411 = call %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def* %650, %struct.rtx_def* %651, %union.tree_node* %652), !dbg !5455
  store %struct.rtx_def* %call1411, %struct.rtx_def** %target.addr, align 8, !dbg !5456
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5457
  br label %if.end1415, !dbg !5458

if.else1412:                                      ; preds = %cond.end1398
  %653 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !5459
  %call1413 = call %struct.rtx_def* @avoid_likely_spilled_reg(%struct.rtx_def* %653), !dbg !5460
  %call1414 = call %struct.rtx_def* @copy_to_reg(%struct.rtx_def* %call1413), !dbg !5461
  store %struct.rtx_def* %call1414, %struct.rtx_def** %target.addr, align 8, !dbg !5462
  br label %if.end1415

if.end1415:                                       ; preds = %if.else1412, %if.end1410
  br label %if.end1416

if.end1416:                                       ; preds = %if.end1415, %if.end1382
  br label %if.end1417

if.end1417:                                       ; preds = %if.end1416, %if.end1296
  br label %if.end1418

if.end1418:                                       ; preds = %if.end1417, %cond.end1249
  br label %if.end1419

if.end1419:                                       ; preds = %if.end1418, %if.end1231
  br label %if.end1420

if.end1420:                                       ; preds = %if.end1419, %if.then1185
  %654 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5463
  %655 = bitcast %struct.rtx_def* %654 to i32*, !dbg !5463
  %bf.load1421 = load i32, i32* %655, align 8, !dbg !5463
  %bf.clear1422 = and i32 %bf.load1421, 65535, !dbg !5463
  %cmp1423 = icmp eq i32 %bf.clear1422, 37, !dbg !5463
  br i1 %cmp1423, label %land.lhs.true1425, label %if.end1533, !dbg !5465

land.lhs.true1425:                                ; preds = %if.end1420
  %656 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5466
  %base1426 = bitcast %union.tree_node* %656 to %struct.tree_base*, !dbg !5466
  %657 = bitcast %struct.tree_base* %base1426 to i64*, !dbg !5466
  %bf.load1427 = load i64, i64* %657, align 8, !dbg !5466
  %bf.clear1428 = and i64 %bf.load1427, 65535, !dbg !5466
  %bf.cast1429 = trunc i64 %bf.clear1428 to i32, !dbg !5466
  %cmp1430 = icmp eq i32 %bf.cast1429, 14, !dbg !5466
  br i1 %cmp1430, label %cond.true1432, label %cond.false1434, !dbg !5466

cond.true1432:                                    ; preds = %land.lhs.true1425
  %658 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5466
  %call1433 = call i32 @vector_type_mode(%union.tree_node* %658), !dbg !5466
  br label %cond.end1440, !dbg !5466

cond.false1434:                                   ; preds = %land.lhs.true1425
  %659 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5466
  %type1435 = bitcast %union.tree_node* %659 to %struct.tree_type*, !dbg !5466
  %mode1436 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1435, i32 0, i32 6, !dbg !5466
  %bf.load1437 = load i32, i32* %mode1436, align 4, !dbg !5466
  %bf.lshr1438 = lshr i32 %bf.load1437, 16, !dbg !5466
  %bf.clear1439 = and i32 %bf.lshr1438, 255, !dbg !5466
  br label %cond.end1440, !dbg !5466

cond.end1440:                                     ; preds = %cond.false1434, %cond.true1432
  %cond1441 = phi i32 [ %call1433, %cond.true1432 ], [ %bf.clear1439, %cond.false1434 ], !dbg !5466
  %cmp1442 = icmp ne i32 %cond1441, 1, !dbg !5467
  br i1 %cmp1442, label %land.lhs.true1444, label %if.end1533, !dbg !5468

land.lhs.true1444:                                ; preds = %cond.end1440
  %660 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5469
  %661 = bitcast %struct.rtx_def* %660 to i32*, !dbg !5469
  %bf.load1445 = load i32, i32* %661, align 8, !dbg !5469
  %bf.lshr1446 = lshr i32 %bf.load1445, 16, !dbg !5469
  %bf.clear1447 = and i32 %bf.lshr1446, 255, !dbg !5469
  %662 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5470
  %base1448 = bitcast %union.tree_node* %662 to %struct.tree_base*, !dbg !5470
  %663 = bitcast %struct.tree_base* %base1448 to i64*, !dbg !5470
  %bf.load1449 = load i64, i64* %663, align 8, !dbg !5470
  %bf.clear1450 = and i64 %bf.load1449, 65535, !dbg !5470
  %bf.cast1451 = trunc i64 %bf.clear1450 to i32, !dbg !5470
  %cmp1452 = icmp eq i32 %bf.cast1451, 14, !dbg !5470
  br i1 %cmp1452, label %cond.true1454, label %cond.false1456, !dbg !5470

cond.true1454:                                    ; preds = %land.lhs.true1444
  %664 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5470
  %call1455 = call i32 @vector_type_mode(%union.tree_node* %664), !dbg !5470
  br label %cond.end1462, !dbg !5470

cond.false1456:                                   ; preds = %land.lhs.true1444
  %665 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5470
  %type1457 = bitcast %union.tree_node* %665 to %struct.tree_type*, !dbg !5470
  %mode1458 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1457, i32 0, i32 6, !dbg !5470
  %bf.load1459 = load i32, i32* %mode1458, align 4, !dbg !5470
  %bf.lshr1460 = lshr i32 %bf.load1459, 16, !dbg !5470
  %bf.clear1461 = and i32 %bf.lshr1460, 255, !dbg !5470
  br label %cond.end1462, !dbg !5470

cond.end1462:                                     ; preds = %cond.false1456, %cond.true1454
  %cond1463 = phi i32 [ %call1455, %cond.true1454 ], [ %bf.clear1461, %cond.false1456 ], !dbg !5470
  %cmp1464 = icmp ne i32 %bf.clear1447, %cond1463, !dbg !5471
  br i1 %cmp1464, label %if.then1466, label %if.end1533, !dbg !5472

if.then1466:                                      ; preds = %cond.end1462
  call void @llvm.dbg.declare(metadata %union.tree_node** %type1467, metadata !5473, metadata !DIExpression()), !dbg !5475
  %666 = load %union.tree_node*, %union.tree_node** %rettype, align 8, !dbg !5476
  store %union.tree_node* %666, %union.tree_node** %type1467, align 8, !dbg !5475
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !5477, metadata !DIExpression()), !dbg !5478
  %667 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5479
  %base1468 = bitcast %union.tree_node* %667 to %struct.tree_base*, !dbg !5479
  %668 = bitcast %struct.tree_base* %base1468 to i64*, !dbg !5479
  %bf.load1469 = load i64, i64* %668, align 8, !dbg !5479
  %bf.lshr1470 = lshr i64 %bf.load1469, 21, !dbg !5479
  %bf.clear1471 = and i64 %bf.lshr1470, 1, !dbg !5479
  %bf.cast1472 = trunc i64 %bf.clear1471 to i32, !dbg !5479
  store i32 %bf.cast1472, i32* %unsignedp, align 4, !dbg !5478
  call void @llvm.dbg.declare(metadata i32* %offset1473, metadata !5480, metadata !DIExpression()), !dbg !5481
  store i32 0, i32* %offset1473, align 4, !dbg !5481
  call void @llvm.dbg.declare(metadata i32* %pmode, metadata !5482, metadata !DIExpression()), !dbg !5483
  %669 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5484
  %670 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5485
  %base1474 = bitcast %union.tree_node* %670 to %struct.tree_base*, !dbg !5485
  %671 = bitcast %struct.tree_base* %base1474 to i64*, !dbg !5485
  %bf.load1475 = load i64, i64* %671, align 8, !dbg !5485
  %bf.clear1476 = and i64 %bf.load1475, 65535, !dbg !5485
  %bf.cast1477 = trunc i64 %bf.clear1476 to i32, !dbg !5485
  %cmp1478 = icmp eq i32 %bf.cast1477, 14, !dbg !5485
  br i1 %cmp1478, label %cond.true1480, label %cond.false1482, !dbg !5485

cond.true1480:                                    ; preds = %if.then1466
  %672 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5485
  %call1481 = call i32 @vector_type_mode(%union.tree_node* %672), !dbg !5485
  br label %cond.end1488, !dbg !5485

cond.false1482:                                   ; preds = %if.then1466
  %673 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5485
  %type1483 = bitcast %union.tree_node* %673 to %struct.tree_type*, !dbg !5485
  %mode1484 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1483, i32 0, i32 6, !dbg !5485
  %bf.load1485 = load i32, i32* %mode1484, align 4, !dbg !5485
  %bf.lshr1486 = lshr i32 %bf.load1485, 16, !dbg !5485
  %bf.clear1487 = and i32 %bf.lshr1486, 255, !dbg !5485
  br label %cond.end1488, !dbg !5485

cond.end1488:                                     ; preds = %cond.false1482, %cond.true1480
  %cond1489 = phi i32 [ %call1481, %cond.true1480 ], [ %bf.clear1487, %cond.false1482 ], !dbg !5485
  %674 = load %union.tree_node*, %union.tree_node** %funtype, align 8, !dbg !5486
  %call1490 = call i32 @promote_function_mode(%union.tree_node* %669, i32 %cond1489, i32* %unsignedp, %union.tree_node* %674, i32 1), !dbg !5487
  store i32 %call1490, i32* %pmode, align 4, !dbg !5488
  %675 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5489
  %676 = bitcast %struct.rtx_def* %675 to i32*, !dbg !5489
  %bf.load1491 = load i32, i32* %676, align 8, !dbg !5489
  %bf.lshr1492 = lshr i32 %bf.load1491, 16, !dbg !5489
  %bf.clear1493 = and i32 %bf.lshr1492, 255, !dbg !5489
  %677 = load i32, i32* %pmode, align 4, !dbg !5489
  %cmp1494 = icmp eq i32 %bf.clear1493, %677, !dbg !5489
  br i1 %cmp1494, label %cond.false1497, label %cond.true1496, !dbg !5489

cond.true1496:                                    ; preds = %cond.end1488
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3042, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5489
  br label %cond.end1498, !dbg !5489

cond.false1497:                                   ; preds = %cond.end1488
  br label %cond.end1498, !dbg !5489

cond.end1498:                                     ; preds = %cond.false1497, %cond.true1496
  %cond1499 = phi i32 [ 0, %cond.true1496 ], [ 0, %cond.false1497 ], !dbg !5489
  %678 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5490
  %base1500 = bitcast %union.tree_node* %678 to %struct.tree_base*, !dbg !5490
  %679 = bitcast %struct.tree_base* %base1500 to i64*, !dbg !5490
  %bf.load1501 = load i64, i64* %679, align 8, !dbg !5490
  %bf.clear1502 = and i64 %bf.load1501, 65535, !dbg !5490
  %bf.cast1503 = trunc i64 %bf.clear1502 to i32, !dbg !5490
  %cmp1504 = icmp eq i32 %bf.cast1503, 14, !dbg !5490
  br i1 %cmp1504, label %cond.true1506, label %cond.false1508, !dbg !5490

cond.true1506:                                    ; preds = %cond.end1498
  %680 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5490
  %call1507 = call i32 @vector_type_mode(%union.tree_node* %680), !dbg !5490
  br label %cond.end1514, !dbg !5490

cond.false1508:                                   ; preds = %cond.end1498
  %681 = load %union.tree_node*, %union.tree_node** %type1467, align 8, !dbg !5490
  %type1509 = bitcast %union.tree_node* %681 to %struct.tree_type*, !dbg !5490
  %mode1510 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1509, i32 0, i32 6, !dbg !5490
  %bf.load1511 = load i32, i32* %mode1510, align 4, !dbg !5490
  %bf.lshr1512 = lshr i32 %bf.load1511, 16, !dbg !5490
  %bf.clear1513 = and i32 %bf.lshr1512, 255, !dbg !5490
  br label %cond.end1514, !dbg !5490

cond.end1514:                                     ; preds = %cond.false1508, %cond.true1506
  %cond1515 = phi i32 [ %call1507, %cond.true1506 ], [ %bf.clear1513, %cond.false1508 ], !dbg !5490
  %682 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5491
  %683 = load i32, i32* %offset1473, align 4, !dbg !5492
  %call1516 = call %struct.rtx_def* @gen_rtx_SUBREG(i32 %cond1515, %struct.rtx_def* %682, i32 %683), !dbg !5493
  store %struct.rtx_def* %call1516, %struct.rtx_def** %target.addr, align 8, !dbg !5494
  %684 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5495
  %685 = bitcast %struct.rtx_def* %684 to i32*, !dbg !5495
  %bf.load1517 = load i32, i32* %685, align 8, !dbg !5496
  %bf.clear1518 = and i32 %bf.load1517, -268435457, !dbg !5496
  %bf.set1519 = or i32 %bf.clear1518, 268435456, !dbg !5496
  store i32 %bf.set1519, i32* %685, align 8, !dbg !5496
  br label %do.body, !dbg !5497

do.body:                                          ; preds = %cond.end1514
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %_rtx, metadata !5498, metadata !DIExpression()), !dbg !5501
  %686 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5501
  store %struct.rtx_def* %686, %struct.rtx_def** %_rtx, align 8, !dbg !5501
  %687 = load i32, i32* %unsignedp, align 4, !dbg !5502
  %cmp1520 = icmp slt i32 %687, 0, !dbg !5502
  br i1 %cmp1520, label %if.then1522, label %if.else1526, !dbg !5501

if.then1522:                                      ; preds = %do.body
  %688 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !5502
  %689 = bitcast %struct.rtx_def* %688 to i32*, !dbg !5502
  %bf.load1523 = load i32, i32* %689, align 8, !dbg !5502
  %bf.clear1524 = and i32 %bf.load1523, -134217729, !dbg !5502
  %bf.set1525 = or i32 %bf.clear1524, 134217728, !dbg !5502
  store i32 %bf.set1525, i32* %689, align 8, !dbg !5502
  br label %if.end1532, !dbg !5502

if.else1526:                                      ; preds = %do.body
  %690 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !5504
  %691 = bitcast %struct.rtx_def* %690 to i32*, !dbg !5504
  %bf.load1527 = load i32, i32* %691, align 8, !dbg !5504
  %bf.clear1528 = and i32 %bf.load1527, -134217729, !dbg !5504
  store i32 %bf.clear1528, i32* %691, align 8, !dbg !5504
  %692 = load i32, i32* %unsignedp, align 4, !dbg !5504
  %693 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !5504
  %694 = bitcast %struct.rtx_def* %693 to i32*, !dbg !5504
  %bf.load1529 = load i32, i32* %694, align 8, !dbg !5504
  %bf.value = and i32 %692, 1, !dbg !5504
  %bf.shl = shl i32 %bf.value, 26, !dbg !5504
  %bf.clear1530 = and i32 %bf.load1529, -67108865, !dbg !5504
  %bf.set1531 = or i32 %bf.clear1530, %bf.shl, !dbg !5504
  store i32 %bf.set1531, i32* %694, align 8, !dbg !5504
  br label %if.end1532

if.end1532:                                       ; preds = %if.else1526, %if.then1522
  br label %do.end, !dbg !5501

do.end:                                           ; preds = %if.end1532
  br label %if.end1533, !dbg !5506

if.end1533:                                       ; preds = %do.end, %cond.end1462, %cond.end1440, %if.end1420
  %695 = load %struct.rtx_def*, %struct.rtx_def** %old_stack_level, align 8, !dbg !5507
  %tobool1534 = icmp ne %struct.rtx_def* %695, null, !dbg !5507
  br i1 %tobool1534, label %if.then1535, label %if.else1537, !dbg !5509

if.then1535:                                      ; preds = %if.end1533
  %696 = load %struct.rtx_def*, %struct.rtx_def** %old_stack_level, align 8, !dbg !5510
  call void @emit_stack_restore(i32 0, %struct.rtx_def* %696, %struct.rtx_def* null), !dbg !5512
  %697 = load i32, i32* %old_stack_pointer_delta, align 4, !dbg !5513
  store i32 %697, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5514
  %698 = load i32, i32* %old_pending_adj, align 4, !dbg !5515
  store i32 %698, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !5516
  %699 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5517
  %700 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !5518
  %sub1536 = sub nsw i32 %699, %700, !dbg !5519
  store i32 %sub1536, i32* %old_stack_allocated, align 4, !dbg !5520
  %701 = load i32, i32* %old_stack_arg_under_construction, align 4, !dbg !5521
  store i32 %701, i32* @stack_arg_under_construction, align 4, !dbg !5522
  %702 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !5523
  store i32 %702, i32* @highest_outgoing_arg_in_use, align 4, !dbg !5524
  %703 = load i8*, i8** %initial_stack_usage_map, align 8, !dbg !5525
  store i8* %703, i8** @stack_usage_map, align 8, !dbg !5526
  store i32 1, i32* %sibcall_failure, align 4, !dbg !5527
  br label %if.end1596, !dbg !5528

if.else1537:                                      ; preds = %if.end1533
  %704 = load i32, i32* @target_flags, align 4, !dbg !5529
  %and1538 = and i32 %704, 4, !dbg !5529
  %cmp1539 = icmp ne i32 %and1538, 0, !dbg !5529
  br i1 %cmp1539, label %land.lhs.true1545, label %lor.lhs.false1541, !dbg !5529

lor.lhs.false1541:                                ; preds = %if.else1537
  %call1542 = call i32 @ix86_cfun_abi(), !dbg !5529
  %cmp1543 = icmp eq i32 %call1542, 1, !dbg !5529
  br i1 %cmp1543, label %land.lhs.true1545, label %if.end1595, !dbg !5531

land.lhs.true1545:                                ; preds = %lor.lhs.false1541, %if.else1537
  %705 = load i32, i32* %pass, align 4, !dbg !5532
  %tobool1546 = icmp ne i32 %705, 0, !dbg !5532
  br i1 %tobool1546, label %if.then1547, label %if.end1595, !dbg !5533

if.then1547:                                      ; preds = %land.lhs.true1545
  %706 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !5534
  %tobool1548 = icmp ne %struct.rtx_def* %706, null, !dbg !5534
  br i1 %tobool1548, label %if.then1549, label %if.end1550, !dbg !5537

if.then1549:                                      ; preds = %if.then1547
  %707 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !5538
  %708 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !5539
  %709 = load i32, i32* %high_to_save, align 4, !dbg !5540
  %710 = load i32, i32* %low_to_save, align 4, !dbg !5541
  call void @restore_fixed_argument_area(%struct.rtx_def* %707, %struct.rtx_def* %708, i32 %709, i32 %710), !dbg !5542
  br label %if.end1550, !dbg !5542

if.end1550:                                       ; preds = %if.then1549, %if.then1547
  store i32 0, i32* %i, align 4, !dbg !5543
  br label %for.cond1551, !dbg !5545

for.cond1551:                                     ; preds = %for.inc1592, %if.end1550
  %711 = load i32, i32* %i, align 4, !dbg !5546
  %712 = load i32, i32* %num_actuals, align 4, !dbg !5548
  %cmp1552 = icmp slt i32 %711, %712, !dbg !5549
  br i1 %cmp1552, label %for.body1554, label %for.end1594, !dbg !5550

for.body1554:                                     ; preds = %for.cond1551
  %713 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5551
  %714 = load i32, i32* %i, align 4, !dbg !5553
  %idxprom1555 = sext i32 %714 to i64, !dbg !5551
  %arrayidx1556 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %713, i64 %idxprom1555, !dbg !5551
  %save_area1557 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1556, i32 0, i32 13, !dbg !5554
  %715 = load %struct.rtx_def*, %struct.rtx_def** %save_area1557, align 8, !dbg !5554
  %tobool1558 = icmp ne %struct.rtx_def* %715, null, !dbg !5551
  br i1 %tobool1558, label %if.then1559, label %if.end1591, !dbg !5555

if.then1559:                                      ; preds = %for.body1554
  call void @llvm.dbg.declare(metadata i32* %save_mode, metadata !5556, metadata !DIExpression()), !dbg !5558
  %716 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5559
  %717 = load i32, i32* %i, align 4, !dbg !5559
  %idxprom1560 = sext i32 %717 to i64, !dbg !5559
  %arrayidx1561 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %716, i64 %idxprom1560, !dbg !5559
  %save_area1562 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1561, i32 0, i32 13, !dbg !5559
  %718 = load %struct.rtx_def*, %struct.rtx_def** %save_area1562, align 8, !dbg !5559
  %719 = bitcast %struct.rtx_def* %718 to i32*, !dbg !5559
  %bf.load1563 = load i32, i32* %719, align 8, !dbg !5559
  %bf.lshr1564 = lshr i32 %bf.load1563, 16, !dbg !5559
  %bf.clear1565 = and i32 %bf.lshr1564, 255, !dbg !5559
  store i32 %bf.clear1565, i32* %save_mode, align 4, !dbg !5558
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area, metadata !5560, metadata !DIExpression()), !dbg !5561
  %720 = load i32, i32* %save_mode, align 4, !dbg !5562
  %721 = load i32, i32* %save_mode, align 4, !dbg !5563
  %722 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5563
  %723 = load i32, i32* %i, align 4, !dbg !5563
  %idxprom1566 = sext i32 %723 to i64, !dbg !5563
  %arrayidx1567 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %722, i64 %idxprom1566, !dbg !5563
  %stack_slot = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1567, i32 0, i32 12, !dbg !5563
  %724 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot, align 8, !dbg !5563
  %u1568 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %724, i32 0, i32 1, !dbg !5563
  %fld1569 = bitcast %union.u* %u1568 to [1 x %union.rtunion_def]*, !dbg !5563
  %arrayidx1570 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld1569, i64 0, i64 0, !dbg !5563
  %rt_rtx1571 = bitcast %union.rtunion_def* %arrayidx1570 to %struct.rtx_def**, !dbg !5563
  %725 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx1571, align 8, !dbg !5563
  %call1572 = call %struct.rtx_def* @memory_address_addr_space(i32 %721, %struct.rtx_def* %725, i8 zeroext 0), !dbg !5563
  %call1573 = call %struct.rtx_def* @gen_rtx_MEM(i32 %720, %struct.rtx_def* %call1572), !dbg !5564
  store %struct.rtx_def* %call1573, %struct.rtx_def** %stack_area, align 8, !dbg !5561
  %726 = load i32, i32* %save_mode, align 4, !dbg !5565
  %cmp1574 = icmp ne i32 %726, 1, !dbg !5567
  br i1 %cmp1574, label %if.then1576, label %if.else1581, !dbg !5568

if.then1576:                                      ; preds = %if.then1559
  %727 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !5569
  %728 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5570
  %729 = load i32, i32* %i, align 4, !dbg !5571
  %idxprom1577 = sext i32 %729 to i64, !dbg !5570
  %arrayidx1578 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %728, i64 %idxprom1577, !dbg !5570
  %save_area1579 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1578, i32 0, i32 13, !dbg !5572
  %730 = load %struct.rtx_def*, %struct.rtx_def** %save_area1579, align 8, !dbg !5572
  %call1580 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %727, %struct.rtx_def* %730), !dbg !5573
  br label %if.end1590, !dbg !5573

if.else1581:                                      ; preds = %if.then1559
  %731 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !5574
  %732 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5575
  %733 = load i32, i32* %i, align 4, !dbg !5576
  %idxprom1582 = sext i32 %733 to i64, !dbg !5575
  %arrayidx1583 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %732, i64 %idxprom1582, !dbg !5575
  %save_area1584 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1583, i32 0, i32 13, !dbg !5577
  %734 = load %struct.rtx_def*, %struct.rtx_def** %save_area1584, align 8, !dbg !5577
  %735 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5578
  %736 = load i32, i32* %i, align 4, !dbg !5578
  %idxprom1585 = sext i32 %736 to i64, !dbg !5578
  %arrayidx1586 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %735, i64 %idxprom1585, !dbg !5578
  %locate = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1586, i32 0, i32 10, !dbg !5578
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 0, !dbg !5578
  %constant1587 = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !5578
  %737 = load i64, i64* %constant1587, align 8, !dbg !5578
  %call1588 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %737), !dbg !5578
  %call1589 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %731, %struct.rtx_def* %734, %struct.rtx_def* %call1588, i32 2), !dbg !5579
  br label %if.end1590

if.end1590:                                       ; preds = %if.else1581, %if.then1576
  br label %if.end1591, !dbg !5580

if.end1591:                                       ; preds = %if.end1590, %for.body1554
  br label %for.inc1592, !dbg !5554

for.inc1592:                                      ; preds = %if.end1591
  %738 = load i32, i32* %i, align 4, !dbg !5581
  %inc1593 = add nsw i32 %738, 1, !dbg !5581
  store i32 %inc1593, i32* %i, align 4, !dbg !5581
  br label %for.cond1551, !dbg !5582, !llvm.loop !5583

for.end1594:                                      ; preds = %for.cond1551
  %739 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !5585
  store i32 %739, i32* @highest_outgoing_arg_in_use, align 4, !dbg !5586
  %740 = load i8*, i8** %initial_stack_usage_map, align 8, !dbg !5587
  store i8* %740, i8** @stack_usage_map, align 8, !dbg !5588
  br label %if.end1595, !dbg !5589

if.end1595:                                       ; preds = %for.end1594, %land.lhs.true1545, %lor.lhs.false1541
  br label %if.end1596

if.end1596:                                       ; preds = %if.end1595, %if.then1535
  %741 = load i32, i32* %flags, align 4, !dbg !5590
  %and1597 = and i32 %741, 32, !dbg !5592
  %tobool1598 = icmp ne i32 %and1597, 0, !dbg !5592
  br i1 %tobool1598, label %land.lhs.true1599, label %if.end1604, !dbg !5593

land.lhs.true1599:                                ; preds = %if.end1596
  %742 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5594
  %add.ptr1600 = getelementptr inbounds %struct.function, %struct.function* %742, i64 0, !dbg !5594
  %nonlocal_goto_save_area = getelementptr inbounds %struct.function, %struct.function* %add.ptr1600, i32 0, i32 8, !dbg !5595
  %743 = load %union.tree_node*, %union.tree_node** %nonlocal_goto_save_area, align 8, !dbg !5595
  %cmp1601 = icmp ne %union.tree_node* %743, null, !dbg !5596
  br i1 %cmp1601, label %if.then1603, label %if.end1604, !dbg !5597

if.then1603:                                      ; preds = %land.lhs.true1599
  call void @update_nonlocal_goto_save_area(), !dbg !5598
  br label %if.end1604, !dbg !5598

if.end1604:                                       ; preds = %if.then1603, %land.lhs.true1599, %if.end1596
  store i32 0, i32* %i, align 4, !dbg !5599
  br label %for.cond1605, !dbg !5601

for.cond1605:                                     ; preds = %for.inc1617, %if.end1604
  %744 = load i32, i32* %i, align 4, !dbg !5602
  %745 = load i32, i32* %num_actuals, align 4, !dbg !5604
  %cmp1606 = icmp slt i32 %744, %745, !dbg !5605
  br i1 %cmp1606, label %for.body1608, label %for.end1619, !dbg !5606

for.body1608:                                     ; preds = %for.cond1605
  %746 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5607
  %747 = load i32, i32* %i, align 4, !dbg !5609
  %idxprom1609 = sext i32 %747 to i64, !dbg !5607
  %arrayidx1610 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %746, i64 %idxprom1609, !dbg !5607
  %aligned_regs = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1610, i32 0, i32 14, !dbg !5610
  %748 = load %struct.rtx_def**, %struct.rtx_def*** %aligned_regs, align 8, !dbg !5610
  %tobool1611 = icmp ne %struct.rtx_def** %748, null, !dbg !5607
  br i1 %tobool1611, label %if.then1612, label %if.end1616, !dbg !5611

if.then1612:                                      ; preds = %for.body1608
  %749 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5612
  %750 = load i32, i32* %i, align 4, !dbg !5613
  %idxprom1613 = sext i32 %750 to i64, !dbg !5612
  %arrayidx1614 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %749, i64 %idxprom1613, !dbg !5612
  %aligned_regs1615 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1614, i32 0, i32 14, !dbg !5614
  %751 = load %struct.rtx_def**, %struct.rtx_def*** %aligned_regs1615, align 8, !dbg !5614
  %752 = bitcast %struct.rtx_def** %751 to i8*, !dbg !5612
  call void @free(i8* %752), !dbg !5615
  br label %if.end1616, !dbg !5615

if.end1616:                                       ; preds = %if.then1612, %for.body1608
  br label %for.inc1617, !dbg !5610

for.inc1617:                                      ; preds = %if.end1616
  %753 = load i32, i32* %i, align 4, !dbg !5616
  %inc1618 = add nsw i32 %753, 1, !dbg !5616
  store i32 %inc1618, i32* %i, align 4, !dbg !5616
  br label %for.cond1605, !dbg !5617, !llvm.loop !5618

for.end1619:                                      ; preds = %for.cond1605
  %call1620 = call %struct.rtx_def* @get_insns(), !dbg !5620
  store %struct.rtx_def* %call1620, %struct.rtx_def** %insns, align 8, !dbg !5621
  call void @end_sequence(), !dbg !5622
  %754 = load i32, i32* %pass, align 4, !dbg !5623
  %cmp1621 = icmp eq i32 %754, 0, !dbg !5625
  br i1 %cmp1621, label %if.then1623, label %if.else1639, !dbg !5626

if.then1623:                                      ; preds = %for.end1619
  %755 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !5627
  store %struct.rtx_def* %755, %struct.rtx_def** %tail_call_insns, align 8, !dbg !5629
  %756 = load i32, i32* %save_pending_stack_adjust, align 4, !dbg !5630
  store i32 %756, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !5631
  %757 = load i32, i32* %save_stack_pointer_delta, align 4, !dbg !5632
  store i32 %757, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5633
  store i32 0, i32* %i, align 4, !dbg !5634
  br label %for.cond1624, !dbg !5636

for.cond1624:                                     ; preds = %for.inc1636, %if.then1623
  %758 = load i32, i32* %i, align 4, !dbg !5637
  %759 = load i32, i32* %num_actuals, align 4, !dbg !5639
  %cmp1625 = icmp slt i32 %758, %759, !dbg !5640
  br i1 %cmp1625, label %for.body1627, label %for.end1638, !dbg !5641

for.body1627:                                     ; preds = %for.cond1624
  %760 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5642
  %761 = load i32, i32* %i, align 4, !dbg !5644
  %idxprom1628 = sext i32 %761 to i64, !dbg !5642
  %arrayidx1629 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %760, i64 %idxprom1628, !dbg !5642
  %value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1629, i32 0, i32 2, !dbg !5645
  store %struct.rtx_def* null, %struct.rtx_def** %value, align 8, !dbg !5646
  %762 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5647
  %763 = load i32, i32* %i, align 4, !dbg !5648
  %idxprom1630 = sext i32 %763 to i64, !dbg !5647
  %arrayidx1631 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %762, i64 %idxprom1630, !dbg !5647
  %aligned_regs1632 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1631, i32 0, i32 14, !dbg !5649
  store %struct.rtx_def** null, %struct.rtx_def*** %aligned_regs1632, align 8, !dbg !5650
  %764 = load %struct.arg_data*, %struct.arg_data** %args, align 8, !dbg !5651
  %765 = load i32, i32* %i, align 4, !dbg !5652
  %idxprom1633 = sext i32 %765 to i64, !dbg !5651
  %arrayidx1634 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %764, i64 %idxprom1633, !dbg !5651
  %stack1635 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx1634, i32 0, i32 11, !dbg !5653
  store %struct.rtx_def* null, %struct.rtx_def** %stack1635, align 8, !dbg !5654
  br label %for.inc1636, !dbg !5655

for.inc1636:                                      ; preds = %for.body1627
  %766 = load i32, i32* %i, align 4, !dbg !5656
  %inc1637 = add nsw i32 %766, 1, !dbg !5656
  store i32 %inc1637, i32* %i, align 4, !dbg !5656
  br label %for.cond1624, !dbg !5657, !llvm.loop !5658

for.end1638:                                      ; preds = %for.cond1624
  %767 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !5660
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %767, i32 0, i32 0, !dbg !5660
  %768 = load i8*, i8** %popcount, align 8, !dbg !5660
  call void @free(i8* %768), !dbg !5660
  %769 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !5660
  %770 = bitcast %struct.simple_bitmap_def* %769 to i8*, !dbg !5660
  call void @free(i8* %770), !dbg !5660
  br label %if.end1650, !dbg !5661

if.else1639:                                      ; preds = %for.end1619
  %771 = load %struct.rtx_def*, %struct.rtx_def** %insns, align 8, !dbg !5662
  store %struct.rtx_def* %771, %struct.rtx_def** %normal_call_insns, align 8, !dbg !5664
  %772 = load i32, i32* %flags, align 4, !dbg !5665
  %and1640 = and i32 %772, 8, !dbg !5665
  %tobool1641 = icmp ne i32 %and1640, 0, !dbg !5665
  br i1 %tobool1641, label %cond.false1647, label %lor.lhs.false1642, !dbg !5665

lor.lhs.false1642:                                ; preds = %if.else1639
  %773 = load i32, i32* %old_stack_allocated, align 4, !dbg !5665
  %774 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !5665
  %775 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !5665
  %sub1643 = sub nsw i32 %774, %775, !dbg !5665
  %cmp1644 = icmp eq i32 %773, %sub1643, !dbg !5665
  br i1 %cmp1644, label %cond.false1647, label %cond.true1646, !dbg !5665

cond.true1646:                                    ; preds = %lor.lhs.false1642
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5665
  br label %cond.end1648, !dbg !5665

cond.false1647:                                   ; preds = %lor.lhs.false1642, %if.else1639
  br label %cond.end1648, !dbg !5665

cond.end1648:                                     ; preds = %cond.false1647, %cond.true1646
  %cond1649 = phi i32 [ 0, %cond.true1646 ], [ 0, %cond.false1647 ], !dbg !5665
  br label %if.end1650

if.end1650:                                       ; preds = %cond.end1648, %for.end1638
  %776 = load i32, i32* %sibcall_failure, align 4, !dbg !5666
  %tobool1651 = icmp ne i32 %776, 0, !dbg !5666
  br i1 %tobool1651, label %if.then1652, label %if.else1653, !dbg !5668

if.then1652:                                      ; preds = %if.end1650
  store %struct.rtx_def* null, %struct.rtx_def** %tail_call_insns, align 8, !dbg !5669
  br label %if.end1654, !dbg !5670

if.else1653:                                      ; preds = %if.end1650
  br label %for.end1657, !dbg !5671

if.end1654:                                       ; preds = %if.then1652
  br label %for.inc1655, !dbg !5672

for.inc1655:                                      ; preds = %if.end1654
  %777 = load i32, i32* %pass, align 4, !dbg !5673
  %inc1656 = add nsw i32 %777, 1, !dbg !5673
  store i32 %inc1656, i32* %pass, align 4, !dbg !5673
  br label %for.cond520, !dbg !5674, !llvm.loop !5675

for.end1657:                                      ; preds = %if.else1653, %for.cond520
  %778 = load %struct.rtx_def*, %struct.rtx_def** %tail_call_insns, align 8, !dbg !5677
  %tobool1658 = icmp ne %struct.rtx_def* %778, null, !dbg !5677
  br i1 %tobool1658, label %if.then1659, label %if.else1661, !dbg !5679

if.then1659:                                      ; preds = %for.end1657
  %779 = load %struct.rtx_def*, %struct.rtx_def** %tail_call_insns, align 8, !dbg !5680
  %call1660 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %779), !dbg !5682
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 39), align 1, !dbg !5683
  br label %if.end1663, !dbg !5684

if.else1661:                                      ; preds = %for.end1657
  %780 = load %struct.rtx_def*, %struct.rtx_def** %normal_call_insns, align 8, !dbg !5685
  %call1662 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %780), !dbg !5686
  br label %if.end1663

if.end1663:                                       ; preds = %if.else1661, %if.then1659
  %781 = load i32, i32* @expand_call.currently_expanding_call, align 4, !dbg !5687
  %dec1664 = add nsw i32 %781, -1, !dbg !5687
  store i32 %dec1664, i32* @expand_call.currently_expanding_call, align 4, !dbg !5687
  %782 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !5688
  %tobool1665 = icmp ne i8* %782, null, !dbg !5688
  br i1 %tobool1665, label %if.then1666, label %if.end1667, !dbg !5690

if.then1666:                                      ; preds = %if.end1663
  %783 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !5691
  call void @free(i8* %783), !dbg !5692
  br label %if.end1667, !dbg !5692

if.end1667:                                       ; preds = %if.then1666, %if.end1663
  %784 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5693
  store %struct.rtx_def* %784, %struct.rtx_def** %retval, align 8, !dbg !5694
  br label %return, !dbg !5694

return:                                           ; preds = %if.end1667, %for.end102
  %785 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5695
  ret %struct.rtx_def* %785, !dbg !5695
}

declare dso_local i32 @ix86_cfun_abi() #2

declare dso_local zeroext i8 @warning(i32, i8*, ...) #2

declare dso_local i32 @vector_type_mode(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @first_call_expr_arg(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !5696 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !5700, metadata !DIExpression()), !dbg !5701
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !5702, metadata !DIExpression()), !dbg !5703
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5704
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5705
  call void @init_call_expr_arg_iterator(%union.tree_node* %0, %struct.call_expr_arg_iterator_d* %1), !dbg !5706
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5707
  %call = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %2), !dbg !5708
  ret %union.tree_node* %call, !dbg !5709
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter) #0 !dbg !5710 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  %result = alloca %union.tree_node*, align 8
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !5713, metadata !DIExpression()), !dbg !5714
  call void @llvm.dbg.declare(metadata %union.tree_node** %result, metadata !5715, metadata !DIExpression()), !dbg !5716
  %0 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5717
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %0, i32 0, i32 2, !dbg !5719
  %1 = load i32, i32* %i, align 4, !dbg !5719
  %2 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5720
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %2, i32 0, i32 1, !dbg !5721
  %3 = load i32, i32* %n, align 8, !dbg !5721
  %cmp = icmp sge i32 %1, %3, !dbg !5722
  br i1 %cmp, label %if.then, label %if.end, !dbg !5723

if.then:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !5724
  br label %return, !dbg !5724

if.end:                                           ; preds = %entry
  %4 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5725
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %4, i32 0, i32 0, !dbg !5725
  %5 = load %union.tree_node*, %union.tree_node** %t, align 8, !dbg !5725
  %exp = bitcast %union.tree_node* %5 to %struct.tree_exp*, !dbg !5725
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !5725
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5725
  %i1 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !5725
  %7 = load i32, i32* %i1, align 4, !dbg !5725
  %add = add nsw i32 %7, 3, !dbg !5725
  %idxprom = sext i32 %add to i64, !dbg !5725
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 %idxprom, !dbg !5725
  %8 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !5725
  store %union.tree_node* %8, %union.tree_node** %result, align 8, !dbg !5726
  %9 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !5727
  %i2 = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %9, i32 0, i32 2, !dbg !5728
  %10 = load i32, i32* %i2, align 4, !dbg !5729
  %inc = add nsw i32 %10, 1, !dbg !5729
  store i32 %inc, i32* %i2, align 4, !dbg !5729
  %11 = load %union.tree_node*, %union.tree_node** %result, align 8, !dbg !5730
  store %union.tree_node* %11, %union.tree_node** %retval, align 8, !dbg !5731
  br label %return, !dbg !5731

return:                                           ; preds = %if.end, %if.then
  %12 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5732
  ret %union.tree_node* %12, !dbg !5732
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_expr(%union.tree_node* %exp, %struct.rtx_def* %target, i32 %mode, i32 %modifier) #0 !dbg !5733 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %mode.addr = alloca i32, align 4
  %modifier.addr = alloca i32, align 4
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !5736, metadata !DIExpression()), !dbg !5737
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !5738, metadata !DIExpression()), !dbg !5739
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !5740, metadata !DIExpression()), !dbg !5741
  store i32 %modifier, i32* %modifier.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %modifier.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5744
  %1 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !5745
  %2 = load i32, i32* %mode.addr, align 4, !dbg !5746
  %3 = load i32, i32* %modifier.addr, align 4, !dbg !5747
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* %1, i32 %2, i32 %3, %struct.rtx_def** null), !dbg !5748
  ret %struct.rtx_def* %call, !dbg !5749
}

declare dso_local i32 @ix86_reg_parm_stack_space(%union.tree_node*) #2

declare dso_local i32 @ix86_function_type_abi(%union.tree_node*) #2

declare dso_local i32 @aggregate_value_p(%union.tree_node*, %union.tree_node*) #2

declare dso_local i64 @int_size_in_bytes(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @assign_temp(%union.tree_node*, i32, i32, i32) #2

declare dso_local void @mark_temp_addr_taken(%struct.rtx_def*) #2

declare dso_local %struct.cgraph_rtl_info* @cgraph_rtl_info(%union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @split_complex_types(%union.tree_node* %types) #0 !dbg !5750 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %types.addr = alloca %union.tree_node*, align 8
  %p = alloca %union.tree_node*, align 8
  %type = alloca %union.tree_node*, align 8
  %complex_type = alloca %union.tree_node*, align 8
  %next = alloca %union.tree_node*, align 8
  %imag = alloca %union.tree_node*, align 8
  store %union.tree_node* %types, %union.tree_node** %types.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %types.addr, metadata !5753, metadata !DIExpression()), !dbg !5754
  call void @llvm.dbg.declare(metadata %union.tree_node** %p, metadata !5755, metadata !DIExpression()), !dbg !5756
  %0 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !5757
  store %union.tree_node* %0, %union.tree_node** %p, align 8, !dbg !5759
  br label %for.cond, !dbg !5760

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5761
  %tobool = icmp ne %union.tree_node* %1, null, !dbg !5763
  br i1 %tobool, label %for.body, label %for.end, !dbg !5763

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !5764, metadata !DIExpression()), !dbg !5766
  %2 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5767
  %list = bitcast %union.tree_node* %2 to %struct.tree_list*, !dbg !5767
  %value = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list, i32 0, i32 2, !dbg !5767
  %3 = load %union.tree_node*, %union.tree_node** %value, align 8, !dbg !5767
  store %union.tree_node* %3, %union.tree_node** %type, align 8, !dbg !5766
  %4 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5768
  %base = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !5768
  %5 = bitcast %struct.tree_base* %base to i64*, !dbg !5768
  %bf.load = load i64, i64* %5, align 8, !dbg !5768
  %bf.clear = and i64 %bf.load, 65535, !dbg !5768
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5768
  %cmp = icmp eq i32 %bf.cast, 13, !dbg !5770
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5771

land.lhs.true:                                    ; preds = %for.body
  %6 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !5772
  %7 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5773
  %call = call zeroext i8 %6(%union.tree_node* %7), !dbg !5774
  %conv = zext i8 %call to i32, !dbg !5774
  %tobool1 = icmp ne i32 %conv, 0, !dbg !5774
  br i1 %tobool1, label %if.then, label %if.end, !dbg !5775

if.then:                                          ; preds = %land.lhs.true
  br label %found, !dbg !5776

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %for.inc, !dbg !5777

for.inc:                                          ; preds = %if.end
  %8 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5778
  %common = bitcast %union.tree_node* %8 to %struct.tree_common*, !dbg !5778
  %chain = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 1, !dbg !5778
  %9 = load %union.tree_node*, %union.tree_node** %chain, align 8, !dbg !5778
  store %union.tree_node* %9, %union.tree_node** %p, align 8, !dbg !5779
  br label %for.cond, !dbg !5780, !llvm.loop !5781

for.end:                                          ; preds = %for.cond
  %10 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !5783
  store %union.tree_node* %10, %union.tree_node** %retval, align 8, !dbg !5784
  br label %return, !dbg !5784

found:                                            ; preds = %if.then
  call void @llvm.dbg.label(metadata !5785), !dbg !5786
  %11 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !5787
  %call2 = call %union.tree_node* @copy_list(%union.tree_node* %11), !dbg !5788
  store %union.tree_node* %call2, %union.tree_node** %types.addr, align 8, !dbg !5789
  %12 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !5790
  store %union.tree_node* %12, %union.tree_node** %p, align 8, !dbg !5792
  br label %for.cond3, !dbg !5793

for.cond3:                                        ; preds = %for.inc35, %found
  %13 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5794
  %tobool4 = icmp ne %union.tree_node* %13, null, !dbg !5796
  br i1 %tobool4, label %for.body5, label %for.end38, !dbg !5796

for.body5:                                        ; preds = %for.cond3
  call void @llvm.dbg.declare(metadata %union.tree_node** %complex_type, metadata !5797, metadata !DIExpression()), !dbg !5799
  %14 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5800
  %list6 = bitcast %union.tree_node* %14 to %struct.tree_list*, !dbg !5800
  %value7 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list6, i32 0, i32 2, !dbg !5800
  %15 = load %union.tree_node*, %union.tree_node** %value7, align 8, !dbg !5800
  store %union.tree_node* %15, %union.tree_node** %complex_type, align 8, !dbg !5799
  %16 = load %union.tree_node*, %union.tree_node** %complex_type, align 8, !dbg !5801
  %base8 = bitcast %union.tree_node* %16 to %struct.tree_base*, !dbg !5801
  %17 = bitcast %struct.tree_base* %base8 to i64*, !dbg !5801
  %bf.load9 = load i64, i64* %17, align 8, !dbg !5801
  %bf.clear10 = and i64 %bf.load9, 65535, !dbg !5801
  %bf.cast11 = trunc i64 %bf.clear10 to i32, !dbg !5801
  %cmp12 = icmp eq i32 %bf.cast11, 13, !dbg !5803
  br i1 %cmp12, label %land.lhs.true14, label %if.end34, !dbg !5804

land.lhs.true14:                                  ; preds = %for.body5
  %18 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !5805
  %19 = load %union.tree_node*, %union.tree_node** %complex_type, align 8, !dbg !5806
  %call15 = call zeroext i8 %18(%union.tree_node* %19), !dbg !5807
  %conv16 = zext i8 %call15 to i32, !dbg !5807
  %tobool17 = icmp ne i32 %conv16, 0, !dbg !5807
  br i1 %tobool17, label %if.then18, label %if.end34, !dbg !5808

if.then18:                                        ; preds = %land.lhs.true14
  call void @llvm.dbg.declare(metadata %union.tree_node** %next, metadata !5809, metadata !DIExpression()), !dbg !5811
  call void @llvm.dbg.declare(metadata %union.tree_node** %imag, metadata !5812, metadata !DIExpression()), !dbg !5813
  %20 = load %union.tree_node*, %union.tree_node** %complex_type, align 8, !dbg !5814
  %common19 = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5814
  %type20 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common19, i32 0, i32 2, !dbg !5814
  %21 = load %union.tree_node*, %union.tree_node** %type20, align 8, !dbg !5814
  %22 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5815
  %list21 = bitcast %union.tree_node* %22 to %struct.tree_list*, !dbg !5815
  %value22 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list21, i32 0, i32 2, !dbg !5815
  store %union.tree_node* %21, %union.tree_node** %value22, align 8, !dbg !5816
  %23 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5817
  %common23 = bitcast %union.tree_node* %23 to %struct.tree_common*, !dbg !5817
  %chain24 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common23, i32 0, i32 1, !dbg !5817
  %24 = load %union.tree_node*, %union.tree_node** %chain24, align 8, !dbg !5817
  store %union.tree_node* %24, %union.tree_node** %next, align 8, !dbg !5818
  %25 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5819
  %list25 = bitcast %union.tree_node* %25 to %struct.tree_list*, !dbg !5819
  %value26 = getelementptr inbounds %struct.tree_list, %struct.tree_list* %list25, i32 0, i32 2, !dbg !5819
  %26 = load %union.tree_node*, %union.tree_node** %value26, align 8, !dbg !5819
  %call27 = call %union.tree_node* @build_tree_list_stat(%union.tree_node* null, %union.tree_node* %26), !dbg !5819
  store %union.tree_node* %call27, %union.tree_node** %imag, align 8, !dbg !5820
  %27 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !5821
  %28 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5822
  %common28 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5822
  %chain29 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common28, i32 0, i32 1, !dbg !5822
  store %union.tree_node* %27, %union.tree_node** %chain29, align 8, !dbg !5823
  %29 = load %union.tree_node*, %union.tree_node** %next, align 8, !dbg !5824
  %30 = load %union.tree_node*, %union.tree_node** %imag, align 8, !dbg !5825
  %common30 = bitcast %union.tree_node* %30 to %struct.tree_common*, !dbg !5825
  %chain31 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common30, i32 0, i32 1, !dbg !5825
  store %union.tree_node* %29, %union.tree_node** %chain31, align 8, !dbg !5826
  %31 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5827
  %common32 = bitcast %union.tree_node* %31 to %struct.tree_common*, !dbg !5827
  %chain33 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common32, i32 0, i32 1, !dbg !5827
  %32 = load %union.tree_node*, %union.tree_node** %chain33, align 8, !dbg !5827
  store %union.tree_node* %32, %union.tree_node** %p, align 8, !dbg !5828
  br label %if.end34, !dbg !5829

if.end34:                                         ; preds = %if.then18, %land.lhs.true14, %for.body5
  br label %for.inc35, !dbg !5830

for.inc35:                                        ; preds = %if.end34
  %33 = load %union.tree_node*, %union.tree_node** %p, align 8, !dbg !5831
  %common36 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !5831
  %chain37 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common36, i32 0, i32 1, !dbg !5831
  %34 = load %union.tree_node*, %union.tree_node** %chain37, align 8, !dbg !5831
  store %union.tree_node* %34, %union.tree_node** %p, align 8, !dbg !5832
  br label %for.cond3, !dbg !5833, !llvm.loop !5834

for.end38:                                        ; preds = %for.cond3
  %35 = load %union.tree_node*, %union.tree_node** %types.addr, align 8, !dbg !5836
  store %union.tree_node* %35, %union.tree_node** %retval, align 8, !dbg !5837
  br label %return, !dbg !5837

return:                                           ; preds = %for.end38, %for.end
  %36 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !5838
  ret %union.tree_node* %36, !dbg !5838
}

declare dso_local %struct.rtx_def* @copy_addr_to_reg(%struct.rtx_def*) #2

declare dso_local %union.tree_node* @make_tree(%union.tree_node*, %struct.rtx_def*) #2

declare dso_local %union.tree_node* @build_pointer_type(%union.tree_node*) #2

declare dso_local i32 @list_length(%union.tree_node*) #2

declare dso_local void @init_cumulative_args(%struct.ix86_args*, %union.tree_node*, %struct.rtx_def*, %union.tree_node*) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal void @initialize_argument_information(i32 %num_actuals, %struct.arg_data* %args, %struct.args_size* %args_size, i32 %n_named_args, %union.tree_node* %exp, %union.tree_node* %struct_value_addr_value, %union.tree_node* %fndecl, %union.tree_node* %fntype, %struct.ix86_args* %args_so_far, i32 %reg_parm_stack_space, %struct.rtx_def** %old_stack_level, i32* %old_pending_adj, i32* %must_preallocate, i32* %ecf_flags, i8* %may_tailcall, i8 zeroext %call_from_thunk_p) #0 !dbg !5839 {
entry:
  %num_actuals.addr = alloca i32, align 4
  %args.addr = alloca %struct.arg_data*, align 8
  %args_size.addr = alloca %struct.args_size*, align 8
  %n_named_args.addr = alloca i32, align 4
  %exp.addr = alloca %union.tree_node*, align 8
  %struct_value_addr_value.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fntype.addr = alloca %union.tree_node*, align 8
  %args_so_far.addr = alloca %struct.ix86_args*, align 8
  %reg_parm_stack_space.addr = alloca i32, align 4
  %old_stack_level.addr = alloca %struct.rtx_def**, align 8
  %old_pending_adj.addr = alloca i32*, align 8
  %must_preallocate.addr = alloca i32*, align 8
  %ecf_flags.addr = alloca i32*, align 8
  %may_tailcall.addr = alloca i8*, align 8
  %call_from_thunk_p.addr = alloca i8, align 1
  %loc = alloca i32, align 4
  %inc = alloca i32, align 4
  %argpos = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %iter = alloca %struct.call_expr_arg_iterator_d, align 8
  %arg = alloca %union.tree_node*, align 8
  %argtype = alloca %union.tree_node*, align 8
  %subtype = alloca %union.tree_node*, align 8
  %type46 = alloca %union.tree_node*, align 8
  %unsignedp = alloca i32, align 4
  %mode = alloca i32, align 4
  %callee_copies = alloca i8, align 1
  %base107 = alloca %union.tree_node*, align 8
  %copy = alloca %struct.rtx_def*, align 8
  %size_rtx = alloca %struct.rtx_def*, align 8
  %inc438 = alloca %union.tree_node*, align 8
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !5845, metadata !DIExpression()), !dbg !5846
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !5847, metadata !DIExpression()), !dbg !5848
  store %struct.args_size* %args_size, %struct.args_size** %args_size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %args_size.addr, metadata !5849, metadata !DIExpression()), !dbg !5850
  store i32 %n_named_args, i32* %n_named_args.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n_named_args.addr, metadata !5851, metadata !DIExpression()), !dbg !5852
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !5853, metadata !DIExpression()), !dbg !5854
  store %union.tree_node* %struct_value_addr_value, %union.tree_node** %struct_value_addr_value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %struct_value_addr_value.addr, metadata !5855, metadata !DIExpression()), !dbg !5856
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !5857, metadata !DIExpression()), !dbg !5858
  store %union.tree_node* %fntype, %union.tree_node** %fntype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype.addr, metadata !5859, metadata !DIExpression()), !dbg !5860
  store %struct.ix86_args* %args_so_far, %struct.ix86_args** %args_so_far.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ix86_args** %args_so_far.addr, metadata !5861, metadata !DIExpression()), !dbg !5862
  store i32 %reg_parm_stack_space, i32* %reg_parm_stack_space.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space.addr, metadata !5863, metadata !DIExpression()), !dbg !5864
  store %struct.rtx_def** %old_stack_level, %struct.rtx_def*** %old_stack_level.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %old_stack_level.addr, metadata !5865, metadata !DIExpression()), !dbg !5866
  store i32* %old_pending_adj, i32** %old_pending_adj.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %old_pending_adj.addr, metadata !5867, metadata !DIExpression()), !dbg !5868
  store i32* %must_preallocate, i32** %must_preallocate.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %must_preallocate.addr, metadata !5869, metadata !DIExpression()), !dbg !5870
  store i32* %ecf_flags, i32** %ecf_flags.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ecf_flags.addr, metadata !5871, metadata !DIExpression()), !dbg !5872
  store i8* %may_tailcall, i8** %may_tailcall.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %may_tailcall.addr, metadata !5873, metadata !DIExpression()), !dbg !5874
  store i8 %call_from_thunk_p, i8* %call_from_thunk_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %call_from_thunk_p.addr, metadata !5875, metadata !DIExpression()), !dbg !5876
  call void @llvm.dbg.declare(metadata i32* %loc, metadata !5877, metadata !DIExpression()), !dbg !5878
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5879
  %base = bitcast %union.tree_node* %0 to %struct.tree_base*, !dbg !5879
  %1 = bitcast %struct.tree_base* %base to i64*, !dbg !5879
  %bf.load = load i64, i64* %1, align 8, !dbg !5879
  %bf.clear = and i64 %bf.load, 65535, !dbg !5879
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !5879
  %idxprom = sext i32 %bf.cast to i64, !dbg !5879
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom, !dbg !5879
  %2 = load i32, i32* %arrayidx, align 4, !dbg !5879
  %cmp = icmp uge i32 %2, 4, !dbg !5879
  br i1 %cmp, label %land.lhs.true, label %cond.false, !dbg !5879

land.lhs.true:                                    ; preds = %entry
  %3 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5879
  %base1 = bitcast %union.tree_node* %3 to %struct.tree_base*, !dbg !5879
  %4 = bitcast %struct.tree_base* %base1 to i64*, !dbg !5879
  %bf.load2 = load i64, i64* %4, align 8, !dbg !5879
  %bf.clear3 = and i64 %bf.load2, 65535, !dbg !5879
  %bf.cast4 = trunc i64 %bf.clear3 to i32, !dbg !5879
  %idxprom5 = sext i32 %bf.cast4 to i64, !dbg !5879
  %arrayidx6 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom5, !dbg !5879
  %5 = load i32, i32* %arrayidx6, align 4, !dbg !5879
  %cmp7 = icmp ule i32 %5, 10, !dbg !5879
  br i1 %cmp7, label %cond.true, label %cond.false, !dbg !5879

cond.true:                                        ; preds = %land.lhs.true
  %6 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5879
  %exp8 = bitcast %union.tree_node* %6 to %struct.tree_exp*, !dbg !5879
  %locus = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp8, i32 0, i32 1, !dbg !5879
  %7 = load i32, i32* %locus, align 8, !dbg !5879
  br label %cond.end, !dbg !5879

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !5879

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %7, %cond.true ], [ 0, %cond.false ], !dbg !5879
  store i32 %cond, i32* %loc, align 4, !dbg !5878
  call void @llvm.dbg.declare(metadata i32* %inc, metadata !5880, metadata !DIExpression()), !dbg !5881
  call void @llvm.dbg.declare(metadata i32* %argpos, metadata !5882, metadata !DIExpression()), !dbg !5883
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5884, metadata !DIExpression()), !dbg !5885
  %8 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !5886
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %8, i32 0, i32 0, !dbg !5887
  store i64 0, i64* %constant, align 8, !dbg !5888
  %9 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !5889
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %9, i32 0, i32 1, !dbg !5890
  store %union.tree_node* null, %union.tree_node** %var, align 8, !dbg !5891
  %10 = load i32, i32* %num_actuals.addr, align 4, !dbg !5892
  %sub = sub nsw i32 %10, 1, !dbg !5895
  store i32 %sub, i32* %i, align 4, !dbg !5896
  store i32 -1, i32* %inc, align 4, !dbg !5897
  call void @llvm.dbg.declare(metadata i32* %j, metadata !5898, metadata !DIExpression()), !dbg !5900
  %11 = load i32, i32* %i, align 4, !dbg !5901
  store i32 %11, i32* %j, align 4, !dbg !5900
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d* %iter, metadata !5902, metadata !DIExpression()), !dbg !5903
  call void @llvm.dbg.declare(metadata %union.tree_node** %arg, metadata !5904, metadata !DIExpression()), !dbg !5905
  %12 = load %union.tree_node*, %union.tree_node** %struct_value_addr_value.addr, align 8, !dbg !5906
  %tobool = icmp ne %union.tree_node* %12, null, !dbg !5906
  br i1 %tobool, label %if.then, label %if.end, !dbg !5908

if.then:                                          ; preds = %cond.end
  %13 = load %union.tree_node*, %union.tree_node** %struct_value_addr_value.addr, align 8, !dbg !5909
  %14 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5911
  %15 = load i32, i32* %j, align 4, !dbg !5912
  %idxprom9 = sext i32 %15 to i64, !dbg !5911
  %arrayidx10 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %14, i64 %idxprom9, !dbg !5911
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx10, i32 0, i32 0, !dbg !5913
  store %union.tree_node* %13, %union.tree_node** %tree_value, align 8, !dbg !5914
  %16 = load i32, i32* %inc, align 4, !dbg !5915
  %17 = load i32, i32* %j, align 4, !dbg !5916
  %add = add nsw i32 %17, %16, !dbg !5916
  store i32 %add, i32* %j, align 4, !dbg !5916
  br label %if.end, !dbg !5917

if.end:                                           ; preds = %if.then, %cond.end
  %18 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !5918
  %call = call %union.tree_node* @first_call_expr_arg(%union.tree_node* %18, %struct.call_expr_arg_iterator_d* %iter), !dbg !5918
  store %union.tree_node* %call, %union.tree_node** %arg, align 8, !dbg !5918
  br label %for.cond, !dbg !5918

for.cond:                                         ; preds = %for.inc, %if.end
  %19 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5920
  %tobool11 = icmp ne %union.tree_node* %19, null, !dbg !5918
  br i1 %tobool11, label %for.body, label %for.end, !dbg !5918

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %argtype, metadata !5922, metadata !DIExpression()), !dbg !5924
  %20 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5925
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !5925
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !5925
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !5925
  store %union.tree_node* %21, %union.tree_node** %argtype, align 8, !dbg !5924
  %22 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !5926
  %tobool12 = icmp ne i8 (%union.tree_node*)* %22, null, !dbg !5928
  br i1 %tobool12, label %land.lhs.true13, label %if.else, !dbg !5929

land.lhs.true13:                                  ; preds = %for.body
  %23 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !5930
  %tobool14 = icmp ne %union.tree_node* %23, null, !dbg !5930
  br i1 %tobool14, label %land.lhs.true15, label %if.else, !dbg !5931

land.lhs.true15:                                  ; preds = %land.lhs.true13
  %24 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !5932
  %base16 = bitcast %union.tree_node* %24 to %struct.tree_base*, !dbg !5932
  %25 = bitcast %struct.tree_base* %base16 to i64*, !dbg !5932
  %bf.load17 = load i64, i64* %25, align 8, !dbg !5932
  %bf.clear18 = and i64 %bf.load17, 65535, !dbg !5932
  %bf.cast19 = trunc i64 %bf.clear18 to i32, !dbg !5932
  %cmp20 = icmp eq i32 %bf.cast19, 13, !dbg !5933
  br i1 %cmp20, label %land.lhs.true21, label %if.else, !dbg !5934

land.lhs.true21:                                  ; preds = %land.lhs.true15
  %26 = load i8 (%union.tree_node*)*, i8 (%union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 10), align 8, !dbg !5935
  %27 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !5936
  %call22 = call zeroext i8 %26(%union.tree_node* %27), !dbg !5937
  %conv = zext i8 %call22 to i32, !dbg !5937
  %tobool23 = icmp ne i32 %conv, 0, !dbg !5937
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !5938

if.then24:                                        ; preds = %land.lhs.true21
  call void @llvm.dbg.declare(metadata %union.tree_node** %subtype, metadata !5939, metadata !DIExpression()), !dbg !5941
  %28 = load %union.tree_node*, %union.tree_node** %argtype, align 8, !dbg !5942
  %common25 = bitcast %union.tree_node* %28 to %struct.tree_common*, !dbg !5942
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !5942
  %29 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !5942
  store %union.tree_node* %29, %union.tree_node** %subtype, align 8, !dbg !5941
  %30 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !5943
  %31 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5943
  %call27 = call %union.tree_node* @build1_stat(i32 43, %union.tree_node* %30, %union.tree_node* %31), !dbg !5943
  %32 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5944
  %33 = load i32, i32* %j, align 4, !dbg !5945
  %idxprom28 = sext i32 %33 to i64, !dbg !5944
  %arrayidx29 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %32, i64 %idxprom28, !dbg !5944
  %tree_value30 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx29, i32 0, i32 0, !dbg !5946
  store %union.tree_node* %call27, %union.tree_node** %tree_value30, align 8, !dbg !5947
  %34 = load i32, i32* %inc, align 4, !dbg !5948
  %35 = load i32, i32* %j, align 4, !dbg !5949
  %add31 = add nsw i32 %35, %34, !dbg !5949
  store i32 %add31, i32* %j, align 4, !dbg !5949
  %36 = load %union.tree_node*, %union.tree_node** %subtype, align 8, !dbg !5950
  %37 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5950
  %call32 = call %union.tree_node* @build1_stat(i32 44, %union.tree_node* %36, %union.tree_node* %37), !dbg !5950
  %38 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5951
  %39 = load i32, i32* %j, align 4, !dbg !5952
  %idxprom33 = sext i32 %39 to i64, !dbg !5951
  %arrayidx34 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %38, i64 %idxprom33, !dbg !5951
  %tree_value35 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx34, i32 0, i32 0, !dbg !5953
  store %union.tree_node* %call32, %union.tree_node** %tree_value35, align 8, !dbg !5954
  br label %if.end39, !dbg !5955

if.else:                                          ; preds = %land.lhs.true21, %land.lhs.true15, %land.lhs.true13, %for.body
  %40 = load %union.tree_node*, %union.tree_node** %arg, align 8, !dbg !5956
  %41 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5957
  %42 = load i32, i32* %j, align 4, !dbg !5958
  %idxprom36 = sext i32 %42 to i64, !dbg !5957
  %arrayidx37 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %41, i64 %idxprom36, !dbg !5957
  %tree_value38 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx37, i32 0, i32 0, !dbg !5959
  store %union.tree_node* %40, %union.tree_node** %tree_value38, align 8, !dbg !5960
  br label %if.end39

if.end39:                                         ; preds = %if.else, %if.then24
  %43 = load i32, i32* %inc, align 4, !dbg !5961
  %44 = load i32, i32* %j, align 4, !dbg !5962
  %add40 = add nsw i32 %44, %43, !dbg !5962
  store i32 %add40, i32* %j, align 4, !dbg !5962
  br label %for.inc, !dbg !5963

for.inc:                                          ; preds = %if.end39
  %call41 = call %union.tree_node* @next_call_expr_arg(%struct.call_expr_arg_iterator_d* %iter), !dbg !5920
  store %union.tree_node* %call41, %union.tree_node** %arg, align 8, !dbg !5920
  br label %for.cond, !dbg !5920, !llvm.loop !5964

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %argpos, align 4, !dbg !5966
  br label %for.cond42, !dbg !5968

for.cond42:                                       ; preds = %for.inc483, %for.end
  %45 = load i32, i32* %argpos, align 4, !dbg !5969
  %46 = load i32, i32* %num_actuals.addr, align 4, !dbg !5971
  %cmp43 = icmp slt i32 %45, %46, !dbg !5972
  br i1 %cmp43, label %for.body45, label %for.end486, !dbg !5973

for.body45:                                       ; preds = %for.cond42
  call void @llvm.dbg.declare(metadata %union.tree_node** %type46, metadata !5974, metadata !DIExpression()), !dbg !5976
  %47 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5977
  %48 = load i32, i32* %i, align 4, !dbg !5977
  %idxprom47 = sext i32 %48 to i64, !dbg !5977
  %arrayidx48 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %47, i64 %idxprom47, !dbg !5977
  %tree_value49 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx48, i32 0, i32 0, !dbg !5977
  %49 = load %union.tree_node*, %union.tree_node** %tree_value49, align 8, !dbg !5977
  %common50 = bitcast %union.tree_node* %49 to %struct.tree_common*, !dbg !5977
  %type51 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common50, i32 0, i32 2, !dbg !5977
  %50 = load %union.tree_node*, %union.tree_node** %type51, align 8, !dbg !5977
  store %union.tree_node* %50, %union.tree_node** %type46, align 8, !dbg !5976
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !5978, metadata !DIExpression()), !dbg !5979
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !5980, metadata !DIExpression()), !dbg !5981
  %51 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !5982
  %52 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 0), align 16, !dbg !5984
  %cmp52 = icmp eq %union.tree_node* %51, %52, !dbg !5985
  br i1 %cmp52, label %if.then57, label %lor.lhs.false, !dbg !5986

lor.lhs.false:                                    ; preds = %for.body45
  %53 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !5987
  %type54 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !5987
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type54, i32 0, i32 2, !dbg !5987
  %54 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !5987
  %cmp55 = icmp ne %union.tree_node* %54, null, !dbg !5987
  br i1 %cmp55, label %if.end61, label %if.then57, !dbg !5988

if.then57:                                        ; preds = %lor.lhs.false, %for.body45
  %55 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 13), align 8, !dbg !5989
  %56 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !5990
  %57 = load i32, i32* %i, align 4, !dbg !5991
  %idxprom58 = sext i32 %57 to i64, !dbg !5990
  %arrayidx59 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %56, i64 %idxprom58, !dbg !5990
  %tree_value60 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx59, i32 0, i32 0, !dbg !5992
  store %union.tree_node* %55, %union.tree_node** %tree_value60, align 8, !dbg !5993
  %58 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([11 x %union.tree_node*], [11 x %union.tree_node*]* @integer_types, i64 0, i64 5), align 8, !dbg !5994
  store %union.tree_node* %58, %union.tree_node** %type46, align 8, !dbg !5995
  br label %if.end61, !dbg !5990

if.end61:                                         ; preds = %if.then57, %lor.lhs.false
  %59 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !5996
  %base62 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !5996
  %60 = bitcast %struct.tree_base* %base62 to i64*, !dbg !5996
  %bf.load63 = load i64, i64* %60, align 8, !dbg !5996
  %bf.clear64 = and i64 %bf.load63, 65535, !dbg !5996
  %bf.cast65 = trunc i64 %bf.clear64 to i32, !dbg !5996
  %cmp66 = icmp eq i32 %bf.cast65, 17, !dbg !5998
  br i1 %cmp66, label %land.lhs.true75, label %lor.lhs.false68, !dbg !5999

lor.lhs.false68:                                  ; preds = %if.end61
  %61 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6000
  %base69 = bitcast %union.tree_node* %61 to %struct.tree_base*, !dbg !6000
  %62 = bitcast %struct.tree_base* %base69 to i64*, !dbg !6000
  %bf.load70 = load i64, i64* %62, align 8, !dbg !6000
  %bf.clear71 = and i64 %bf.load70, 65535, !dbg !6000
  %bf.cast72 = trunc i64 %bf.clear71 to i32, !dbg !6000
  %cmp73 = icmp eq i32 %bf.cast72, 16, !dbg !6001
  br i1 %cmp73, label %land.lhs.true75, label %if.end84, !dbg !6002

land.lhs.true75:                                  ; preds = %lor.lhs.false68, %if.end61
  %63 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6003
  %type76 = bitcast %union.tree_node* %63 to %struct.tree_type*, !dbg !6003
  %transparent_aggr_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type76, i32 0, i32 6, !dbg !6003
  %bf.load77 = load i32, i32* %transparent_aggr_flag, align 4, !dbg !6003
  %bf.lshr = lshr i32 %bf.load77, 12, !dbg !6003
  %bf.clear78 = and i32 %bf.lshr, 1, !dbg !6003
  %tobool79 = icmp ne i32 %bf.clear78, 0, !dbg !6003
  br i1 %tobool79, label %if.then80, label %if.end84, !dbg !6004

if.then80:                                        ; preds = %land.lhs.true75
  %64 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6005
  %call81 = call %union.tree_node* @first_field(%union.tree_node* %64), !dbg !6005
  %common82 = bitcast %union.tree_node* %call81 to %struct.tree_common*, !dbg !6005
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !6005
  %65 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !6005
  store %union.tree_node* %65, %union.tree_node** %type46, align 8, !dbg !6006
  br label %if.end84, !dbg !6007

if.end84:                                         ; preds = %if.then80, %land.lhs.true75, %lor.lhs.false68
  %66 = load %struct.ix86_args*, %struct.ix86_args** %args_so_far.addr, align 8, !dbg !6008
  %67 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6010
  %base85 = bitcast %union.tree_node* %67 to %struct.tree_base*, !dbg !6010
  %68 = bitcast %struct.tree_base* %base85 to i64*, !dbg !6010
  %bf.load86 = load i64, i64* %68, align 8, !dbg !6010
  %bf.clear87 = and i64 %bf.load86, 65535, !dbg !6010
  %bf.cast88 = trunc i64 %bf.clear87 to i32, !dbg !6010
  %cmp89 = icmp eq i32 %bf.cast88, 14, !dbg !6010
  br i1 %cmp89, label %cond.true91, label %cond.false93, !dbg !6010

cond.true91:                                      ; preds = %if.end84
  %69 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6010
  %call92 = call i32 @vector_type_mode(%union.tree_node* %69), !dbg !6010
  br label %cond.end99, !dbg !6010

cond.false93:                                     ; preds = %if.end84
  %70 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6010
  %type94 = bitcast %union.tree_node* %70 to %struct.tree_type*, !dbg !6010
  %mode95 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type94, i32 0, i32 6, !dbg !6010
  %bf.load96 = load i32, i32* %mode95, align 4, !dbg !6010
  %bf.lshr97 = lshr i32 %bf.load96, 16, !dbg !6010
  %bf.clear98 = and i32 %bf.lshr97, 255, !dbg !6010
  br label %cond.end99, !dbg !6010

cond.end99:                                       ; preds = %cond.false93, %cond.true91
  %cond100 = phi i32 [ %call92, %cond.true91 ], [ %bf.clear98, %cond.false93 ], !dbg !6010
  %71 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6011
  %72 = load i32, i32* %argpos, align 4, !dbg !6012
  %73 = load i32, i32* %n_named_args.addr, align 4, !dbg !6013
  %cmp101 = icmp slt i32 %72, %73, !dbg !6014
  %conv102 = zext i1 %cmp101 to i32, !dbg !6014
  %conv103 = trunc i32 %conv102 to i8, !dbg !6012
  %call104 = call zeroext i8 @pass_by_reference(%struct.ix86_args* %66, i32 %cond100, %union.tree_node* %71, i8 zeroext %conv103), !dbg !6015
  %tobool105 = icmp ne i8 %call104, 0, !dbg !6015
  br i1 %tobool105, label %if.then106, label %if.end276, !dbg !6016

if.then106:                                       ; preds = %cond.end99
  call void @llvm.dbg.declare(metadata i8* %callee_copies, metadata !6017, metadata !DIExpression()), !dbg !6019
  call void @llvm.dbg.declare(metadata %union.tree_node** %base107, metadata !6020, metadata !DIExpression()), !dbg !6021
  %74 = load %struct.ix86_args*, %struct.ix86_args** %args_so_far.addr, align 8, !dbg !6022
  %75 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6023
  %base108 = bitcast %union.tree_node* %75 to %struct.tree_base*, !dbg !6023
  %76 = bitcast %struct.tree_base* %base108 to i64*, !dbg !6023
  %bf.load109 = load i64, i64* %76, align 8, !dbg !6023
  %bf.clear110 = and i64 %bf.load109, 65535, !dbg !6023
  %bf.cast111 = trunc i64 %bf.clear110 to i32, !dbg !6023
  %cmp112 = icmp eq i32 %bf.cast111, 14, !dbg !6023
  br i1 %cmp112, label %cond.true114, label %cond.false116, !dbg !6023

cond.true114:                                     ; preds = %if.then106
  %77 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6023
  %call115 = call i32 @vector_type_mode(%union.tree_node* %77), !dbg !6023
  br label %cond.end122, !dbg !6023

cond.false116:                                    ; preds = %if.then106
  %78 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6023
  %type117 = bitcast %union.tree_node* %78 to %struct.tree_type*, !dbg !6023
  %mode118 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type117, i32 0, i32 6, !dbg !6023
  %bf.load119 = load i32, i32* %mode118, align 4, !dbg !6023
  %bf.lshr120 = lshr i32 %bf.load119, 16, !dbg !6023
  %bf.clear121 = and i32 %bf.lshr120, 255, !dbg !6023
  br label %cond.end122, !dbg !6023

cond.end122:                                      ; preds = %cond.false116, %cond.true114
  %cond123 = phi i32 [ %call115, %cond.true114 ], [ %bf.clear121, %cond.false116 ], !dbg !6023
  %79 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6024
  %80 = load i32, i32* %argpos, align 4, !dbg !6025
  %81 = load i32, i32* %n_named_args.addr, align 4, !dbg !6026
  %cmp124 = icmp slt i32 %80, %81, !dbg !6027
  %conv125 = zext i1 %cmp124 to i32, !dbg !6027
  %conv126 = trunc i32 %conv125 to i8, !dbg !6025
  %call127 = call zeroext i8 @reference_callee_copied(%struct.ix86_args* %74, i32 %cond123, %union.tree_node* %79, i8 zeroext %conv126), !dbg !6028
  store i8 %call127, i8* %callee_copies, align 1, !dbg !6029
  %82 = load i8, i8* %call_from_thunk_p.addr, align 1, !dbg !6030
  %conv128 = zext i8 %82 to i32, !dbg !6030
  %tobool129 = icmp ne i32 %conv128, 0, !dbg !6030
  br i1 %tobool129, label %if.then176, label %lor.lhs.false130, !dbg !6032

lor.lhs.false130:                                 ; preds = %cond.end122
  %83 = load i8, i8* %callee_copies, align 1, !dbg !6033
  %conv131 = zext i8 %83 to i32, !dbg !6033
  %tobool132 = icmp ne i32 %conv131, 0, !dbg !6033
  br i1 %tobool132, label %land.lhs.true133, label %if.else212, !dbg !6034

land.lhs.true133:                                 ; preds = %lor.lhs.false130
  %84 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6035
  %base134 = bitcast %union.tree_node* %84 to %struct.tree_base*, !dbg !6035
  %85 = bitcast %struct.tree_base* %base134 to i64*, !dbg !6035
  %bf.load135 = load i64, i64* %85, align 8, !dbg !6035
  %bf.lshr136 = lshr i64 %bf.load135, 18, !dbg !6035
  %bf.clear137 = and i64 %bf.lshr136, 1, !dbg !6035
  %bf.cast138 = trunc i64 %bf.clear137 to i32, !dbg !6035
  %tobool139 = icmp ne i32 %bf.cast138, 0, !dbg !6035
  br i1 %tobool139, label %if.else212, label %land.lhs.true140, !dbg !6036

land.lhs.true140:                                 ; preds = %land.lhs.true133
  %86 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6037
  %87 = load i32, i32* %i, align 4, !dbg !6038
  %idxprom141 = sext i32 %87 to i64, !dbg !6037
  %arrayidx142 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %86, i64 %idxprom141, !dbg !6037
  %tree_value143 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx142, i32 0, i32 0, !dbg !6039
  %88 = load %union.tree_node*, %union.tree_node** %tree_value143, align 8, !dbg !6039
  %call144 = call %union.tree_node* @get_base_address(%union.tree_node* %88), !dbg !6040
  store %union.tree_node* %call144, %union.tree_node** %base107, align 8, !dbg !6041
  %tobool145 = icmp ne %union.tree_node* %call144, null, !dbg !6041
  br i1 %tobool145, label %land.lhs.true146, label %if.else212, !dbg !6042

land.lhs.true146:                                 ; preds = %land.lhs.true140
  %89 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6043
  %base147 = bitcast %union.tree_node* %89 to %struct.tree_base*, !dbg !6043
  %90 = bitcast %struct.tree_base* %base147 to i64*, !dbg !6043
  %bf.load148 = load i64, i64* %90, align 8, !dbg !6043
  %bf.clear149 = and i64 %bf.load148, 65535, !dbg !6043
  %bf.cast150 = trunc i64 %bf.clear149 to i32, !dbg !6043
  %cmp151 = icmp ne i32 %bf.cast150, 141, !dbg !6044
  br i1 %cmp151, label %land.lhs.true153, label %if.else212, !dbg !6045

land.lhs.true153:                                 ; preds = %land.lhs.true146
  %91 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6046
  %base154 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !6046
  %92 = bitcast %struct.tree_base* %base154 to i64*, !dbg !6046
  %bf.load155 = load i64, i64* %92, align 8, !dbg !6046
  %bf.clear156 = and i64 %bf.load155, 65535, !dbg !6046
  %bf.cast157 = trunc i64 %bf.clear156 to i32, !dbg !6046
  %idxprom158 = sext i32 %bf.cast157 to i64, !dbg !6046
  %arrayidx159 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom158, !dbg !6046
  %93 = load i32, i32* %arrayidx159, align 4, !dbg !6046
  %cmp160 = icmp eq i32 %93, 3, !dbg !6046
  br i1 %cmp160, label %lor.lhs.false162, label %if.then176, !dbg !6047

lor.lhs.false162:                                 ; preds = %land.lhs.true153
  %94 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6048
  %decl_with_rtl = bitcast %union.tree_node* %94 to %struct.tree_decl_with_rtl*, !dbg !6048
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6048
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !6048
  %tobool163 = icmp ne %struct.rtx_def* %95, null, !dbg !6048
  br i1 %tobool163, label %cond.true164, label %cond.false167, !dbg !6048

cond.true164:                                     ; preds = %lor.lhs.false162
  %96 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6048
  %decl_with_rtl165 = bitcast %union.tree_node* %96 to %struct.tree_decl_with_rtl*, !dbg !6048
  %rtl166 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl165, i32 0, i32 1, !dbg !6048
  %97 = load %struct.rtx_def*, %struct.rtx_def** %rtl166, align 8, !dbg !6048
  br label %cond.end170, !dbg !6048

cond.false167:                                    ; preds = %lor.lhs.false162
  %98 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6048
  call void @make_decl_rtl(%union.tree_node* %98), !dbg !6048
  %99 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6048
  %decl_with_rtl168 = bitcast %union.tree_node* %99 to %struct.tree_decl_with_rtl*, !dbg !6048
  %rtl169 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl168, i32 0, i32 1, !dbg !6048
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rtl169, align 8, !dbg !6048
  br label %cond.end170, !dbg !6048

cond.end170:                                      ; preds = %cond.false167, %cond.true164
  %cond171 = phi %struct.rtx_def* [ %97, %cond.true164 ], [ %100, %cond.false167 ], !dbg !6048
  %101 = bitcast %struct.rtx_def* %cond171 to i32*, !dbg !6048
  %bf.load172 = load i32, i32* %101, align 8, !dbg !6048
  %bf.clear173 = and i32 %bf.load172, 65535, !dbg !6048
  %cmp174 = icmp eq i32 %bf.clear173, 43, !dbg !6048
  br i1 %cmp174, label %if.then176, label %if.else212, !dbg !6049

if.then176:                                       ; preds = %cond.end170, %land.lhs.true153, %cond.end122
  %102 = load i8, i8* %call_from_thunk_p.addr, align 1, !dbg !6050
  %tobool177 = icmp ne i8 %102, 0, !dbg !6050
  br i1 %tobool177, label %if.end195, label %land.lhs.true178, !dbg !6053

land.lhs.true178:                                 ; preds = %if.then176
  %103 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6054
  %base179 = bitcast %union.tree_node* %103 to %struct.tree_base*, !dbg !6054
  %104 = bitcast %struct.tree_base* %base179 to i64*, !dbg !6054
  %bf.load180 = load i64, i64* %104, align 8, !dbg !6054
  %bf.clear181 = and i64 %bf.load180, 65535, !dbg !6054
  %bf.cast182 = trunc i64 %bf.clear181 to i32, !dbg !6054
  %idxprom183 = sext i32 %bf.cast182 to i64, !dbg !6054
  %arrayidx184 = getelementptr inbounds [0 x i32], [0 x i32]* @tree_code_type, i64 0, i64 %idxprom183, !dbg !6054
  %105 = load i32, i32* %arrayidx184, align 4, !dbg !6054
  %cmp185 = icmp eq i32 %105, 3, !dbg !6054
  br i1 %cmp185, label %land.lhs.true187, label %if.end195, !dbg !6055

land.lhs.true187:                                 ; preds = %land.lhs.true178
  %106 = load %union.tree_node*, %union.tree_node** %base107, align 8, !dbg !6056
  %base188 = bitcast %union.tree_node* %106 to %struct.tree_base*, !dbg !6056
  %107 = bitcast %struct.tree_base* %base188 to i64*, !dbg !6056
  %bf.load189 = load i64, i64* %107, align 8, !dbg !6056
  %bf.lshr190 = lshr i64 %bf.load189, 26, !dbg !6056
  %bf.clear191 = and i64 %bf.lshr190, 1, !dbg !6056
  %bf.cast192 = trunc i64 %bf.clear191 to i32, !dbg !6056
  %tobool193 = icmp ne i32 %bf.cast192, 0, !dbg !6056
  br i1 %tobool193, label %if.end195, label %if.then194, !dbg !6057

if.then194:                                       ; preds = %land.lhs.true187
  %108 = load i8*, i8** %may_tailcall.addr, align 8, !dbg !6058
  store i8 0, i8* %108, align 1, !dbg !6059
  br label %if.end195, !dbg !6060

if.end195:                                        ; preds = %if.then194, %land.lhs.true187, %land.lhs.true178, %if.then176
  %109 = load i32, i32* %loc, align 4, !dbg !6061
  %110 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6062
  %111 = load i32, i32* %i, align 4, !dbg !6063
  %idxprom196 = sext i32 %111 to i64, !dbg !6062
  %arrayidx197 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %110, i64 %idxprom196, !dbg !6062
  %tree_value198 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx197, i32 0, i32 0, !dbg !6064
  %112 = load %union.tree_node*, %union.tree_node** %tree_value198, align 8, !dbg !6064
  %call199 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %109, %union.tree_node* %112), !dbg !6065
  %113 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6066
  %114 = load i32, i32* %i, align 4, !dbg !6067
  %idxprom200 = sext i32 %114 to i64, !dbg !6066
  %arrayidx201 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %113, i64 %idxprom200, !dbg !6066
  %tree_value202 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx201, i32 0, i32 0, !dbg !6068
  store %union.tree_node* %call199, %union.tree_node** %tree_value202, align 8, !dbg !6069
  %115 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6070
  %116 = load i32, i32* %i, align 4, !dbg !6070
  %idxprom203 = sext i32 %116 to i64, !dbg !6070
  %arrayidx204 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %115, i64 %idxprom203, !dbg !6070
  %tree_value205 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx204, i32 0, i32 0, !dbg !6070
  %117 = load %union.tree_node*, %union.tree_node** %tree_value205, align 8, !dbg !6070
  %common206 = bitcast %union.tree_node* %117 to %struct.tree_common*, !dbg !6070
  %type207 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common206, i32 0, i32 2, !dbg !6070
  %118 = load %union.tree_node*, %union.tree_node** %type207, align 8, !dbg !6070
  store %union.tree_node* %118, %union.tree_node** %type46, align 8, !dbg !6071
  %119 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6072
  %120 = load i32, i32* %119, align 4, !dbg !6074
  %and = and i32 %120, 1, !dbg !6075
  %tobool208 = icmp ne i32 %and, 0, !dbg !6075
  br i1 %tobool208, label %if.then209, label %if.end211, !dbg !6076

if.then209:                                       ; preds = %if.end195
  %121 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6077
  %122 = load i32, i32* %121, align 4, !dbg !6078
  %and210 = and i32 %122, -6, !dbg !6078
  store i32 %and210, i32* %121, align 4, !dbg !6078
  br label %if.end211, !dbg !6079

if.end211:                                        ; preds = %if.then209, %if.end195
  br label %if.end275, !dbg !6080

if.else212:                                       ; preds = %cond.end170, %land.lhs.true146, %land.lhs.true140, %land.lhs.true133, %lor.lhs.false130
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %copy, metadata !6081, metadata !DIExpression()), !dbg !6083
  %123 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6084
  %type213 = bitcast %union.tree_node* %123 to %struct.tree_type*, !dbg !6084
  %size214 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type213, i32 0, i32 2, !dbg !6084
  %124 = load %union.tree_node*, %union.tree_node** %size214, align 8, !dbg !6084
  %cmp215 = icmp ne %union.tree_node* %124, null, !dbg !6084
  br i1 %cmp215, label %lor.lhs.false217, label %if.then234, !dbg !6086

lor.lhs.false217:                                 ; preds = %if.else212
  %125 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6087
  %type218 = bitcast %union.tree_node* %125 to %struct.tree_type*, !dbg !6087
  %size_unit = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type218, i32 0, i32 3, !dbg !6087
  %126 = load %union.tree_node*, %union.tree_node** %size_unit, align 8, !dbg !6087
  %base219 = bitcast %union.tree_node* %126 to %struct.tree_base*, !dbg !6087
  %127 = bitcast %struct.tree_base* %base219 to i64*, !dbg !6087
  %bf.load220 = load i64, i64* %127, align 8, !dbg !6087
  %bf.clear221 = and i64 %bf.load220, 65535, !dbg !6087
  %bf.cast222 = trunc i64 %bf.clear221 to i32, !dbg !6087
  %cmp223 = icmp ne i32 %bf.cast222, 23, !dbg !6088
  br i1 %cmp223, label %if.then234, label %lor.lhs.false225, !dbg !6089

lor.lhs.false225:                                 ; preds = %lor.lhs.false217
  %128 = load i32, i32* @flag_stack_check, align 4, !dbg !6090
  %cmp226 = icmp eq i32 %128, 1, !dbg !6091
  br i1 %cmp226, label %land.lhs.true228, label %if.else246, !dbg !6092

land.lhs.true228:                                 ; preds = %lor.lhs.false225
  %129 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6093
  %type229 = bitcast %union.tree_node* %129 to %struct.tree_type*, !dbg !6093
  %size_unit230 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type229, i32 0, i32 3, !dbg !6093
  %130 = load %union.tree_node*, %union.tree_node** %size_unit230, align 8, !dbg !6093
  %call231 = call i32 @compare_tree_int(%union.tree_node* %130, i64 40), !dbg !6094
  %cmp232 = icmp sgt i32 %call231, 0, !dbg !6095
  br i1 %cmp232, label %if.then234, label %if.else246, !dbg !6096

if.then234:                                       ; preds = %land.lhs.true228, %lor.lhs.false217, %if.else212
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size_rtx, metadata !6097, metadata !DIExpression()), !dbg !6099
  %131 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6100
  %132 = load i32, i32* %i, align 4, !dbg !6101
  %idxprom235 = sext i32 %132 to i64, !dbg !6100
  %arrayidx236 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %131, i64 %idxprom235, !dbg !6100
  %tree_value237 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx236, i32 0, i32 0, !dbg !6102
  %133 = load %union.tree_node*, %union.tree_node** %tree_value237, align 8, !dbg !6102
  %call238 = call %struct.rtx_def* @expr_size(%union.tree_node* %133), !dbg !6103
  store %struct.rtx_def* %call238, %struct.rtx_def** %size_rtx, align 8, !dbg !6099
  %134 = load %struct.rtx_def**, %struct.rtx_def*** %old_stack_level.addr, align 8, !dbg !6104
  %135 = load %struct.rtx_def*, %struct.rtx_def** %134, align 8, !dbg !6106
  %cmp239 = icmp eq %struct.rtx_def* %135, null, !dbg !6107
  br i1 %cmp239, label %if.then241, label %if.end242, !dbg !6108

if.then241:                                       ; preds = %if.then234
  %136 = load %struct.rtx_def**, %struct.rtx_def*** %old_stack_level.addr, align 8, !dbg !6109
  call void @emit_stack_save(i32 0, %struct.rtx_def** %136, %struct.rtx_def* null), !dbg !6111
  %137 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !6112
  %138 = load i32*, i32** %old_pending_adj.addr, align 8, !dbg !6113
  store i32 %137, i32* %138, align 4, !dbg !6114
  store i32 0, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !6115
  br label %if.end242, !dbg !6116

if.end242:                                        ; preds = %if.then241, %if.then234
  %139 = load %struct.rtx_def*, %struct.rtx_def** %size_rtx, align 8, !dbg !6117
  %140 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6118
  %type243 = bitcast %union.tree_node* %140 to %struct.tree_type*, !dbg !6118
  %align = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type243, i32 0, i32 7, !dbg !6118
  %141 = load i32, i32* %align, align 8, !dbg !6118
  %call244 = call %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def* %139, %struct.rtx_def* null, i32 %141), !dbg !6119
  %call245 = call %struct.rtx_def* @gen_rtx_MEM(i32 1, %struct.rtx_def* %call244), !dbg !6120
  store %struct.rtx_def* %call245, %struct.rtx_def** %copy, align 8, !dbg !6121
  %142 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !6122
  %143 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6123
  call void @set_mem_attributes(%struct.rtx_def* %142, %union.tree_node* %143, i32 1), !dbg !6124
  br label %if.end248, !dbg !6125

if.else246:                                       ; preds = %land.lhs.true228, %lor.lhs.false225
  %144 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6126
  %call247 = call %struct.rtx_def* @assign_temp(%union.tree_node* %144, i32 0, i32 1, i32 0), !dbg !6127
  store %struct.rtx_def* %call247, %struct.rtx_def** %copy, align 8, !dbg !6128
  br label %if.end248

if.end248:                                        ; preds = %if.else246, %if.end242
  %145 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6129
  %146 = load i32, i32* %i, align 4, !dbg !6130
  %idxprom249 = sext i32 %146 to i64, !dbg !6129
  %arrayidx250 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %145, i64 %idxprom249, !dbg !6129
  %tree_value251 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx250, i32 0, i32 0, !dbg !6131
  %147 = load %union.tree_node*, %union.tree_node** %tree_value251, align 8, !dbg !6131
  %148 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !6132
  %call252 = call %struct.rtx_def* @store_expr(%union.tree_node* %147, %struct.rtx_def* %148, i32 0, i8 zeroext 0), !dbg !6133
  %149 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6134
  %150 = load i32, i32* %149, align 4, !dbg !6136
  %and253 = and i32 %150, 1, !dbg !6137
  %tobool254 = icmp ne i32 %and253, 0, !dbg !6137
  br i1 %tobool254, label %if.then255, label %if.end257, !dbg !6138

if.then255:                                       ; preds = %if.end248
  %151 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6139
  %152 = load i32, i32* %151, align 4, !dbg !6141
  %and256 = and i32 %152, -2, !dbg !6141
  store i32 %and256, i32* %151, align 4, !dbg !6141
  %153 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6142
  %154 = load i32, i32* %153, align 4, !dbg !6143
  %or = or i32 %154, 2, !dbg !6143
  store i32 %or, i32* %153, align 4, !dbg !6143
  br label %if.end257, !dbg !6144

if.end257:                                        ; preds = %if.then255, %if.end248
  %155 = load i8, i8* %callee_copies, align 1, !dbg !6145
  %tobool258 = icmp ne i8 %155, 0, !dbg !6145
  br i1 %tobool258, label %if.end264, label %land.lhs.true259, !dbg !6147

land.lhs.true259:                                 ; preds = %if.end257
  %156 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6148
  %157 = load i32, i32* %156, align 4, !dbg !6149
  %and260 = and i32 %157, 2, !dbg !6150
  %tobool261 = icmp ne i32 %and260, 0, !dbg !6150
  br i1 %tobool261, label %if.then262, label %if.end264, !dbg !6151

if.then262:                                       ; preds = %land.lhs.true259
  %158 = load i32*, i32** %ecf_flags.addr, align 8, !dbg !6152
  %159 = load i32, i32* %158, align 4, !dbg !6153
  %and263 = and i32 %159, -7, !dbg !6153
  store i32 %and263, i32* %158, align 4, !dbg !6153
  br label %if.end264, !dbg !6154

if.end264:                                        ; preds = %if.then262, %land.lhs.true259, %if.end257
  %160 = load i32, i32* %loc, align 4, !dbg !6155
  %161 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6156
  %162 = load %struct.rtx_def*, %struct.rtx_def** %copy, align 8, !dbg !6157
  %call265 = call %union.tree_node* @make_tree(%union.tree_node* %161, %struct.rtx_def* %162), !dbg !6158
  %call266 = call %union.tree_node* @build_fold_addr_expr_loc(i32 %160, %union.tree_node* %call265), !dbg !6159
  %163 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6160
  %164 = load i32, i32* %i, align 4, !dbg !6161
  %idxprom267 = sext i32 %164 to i64, !dbg !6160
  %arrayidx268 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %163, i64 %idxprom267, !dbg !6160
  %tree_value269 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx268, i32 0, i32 0, !dbg !6162
  store %union.tree_node* %call266, %union.tree_node** %tree_value269, align 8, !dbg !6163
  %165 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6164
  %166 = load i32, i32* %i, align 4, !dbg !6164
  %idxprom270 = sext i32 %166 to i64, !dbg !6164
  %arrayidx271 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %165, i64 %idxprom270, !dbg !6164
  %tree_value272 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx271, i32 0, i32 0, !dbg !6164
  %167 = load %union.tree_node*, %union.tree_node** %tree_value272, align 8, !dbg !6164
  %common273 = bitcast %union.tree_node* %167 to %struct.tree_common*, !dbg !6164
  %type274 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common273, i32 0, i32 2, !dbg !6164
  %168 = load %union.tree_node*, %union.tree_node** %type274, align 8, !dbg !6164
  store %union.tree_node* %168, %union.tree_node** %type46, align 8, !dbg !6165
  %169 = load i8*, i8** %may_tailcall.addr, align 8, !dbg !6166
  store i8 0, i8* %169, align 1, !dbg !6167
  br label %if.end275

if.end275:                                        ; preds = %if.end264, %if.end211
  br label %if.end276, !dbg !6168

if.end276:                                        ; preds = %if.end275, %cond.end99
  %170 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6169
  %base277 = bitcast %union.tree_node* %170 to %struct.tree_base*, !dbg !6169
  %171 = bitcast %struct.tree_base* %base277 to i64*, !dbg !6169
  %bf.load278 = load i64, i64* %171, align 8, !dbg !6169
  %bf.lshr279 = lshr i64 %bf.load278, 21, !dbg !6169
  %bf.clear280 = and i64 %bf.lshr279, 1, !dbg !6169
  %bf.cast281 = trunc i64 %bf.clear280 to i32, !dbg !6169
  store i32 %bf.cast281, i32* %unsignedp, align 4, !dbg !6170
  %172 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6171
  %173 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6172
  %base282 = bitcast %union.tree_node* %173 to %struct.tree_base*, !dbg !6172
  %174 = bitcast %struct.tree_base* %base282 to i64*, !dbg !6172
  %bf.load283 = load i64, i64* %174, align 8, !dbg !6172
  %bf.clear284 = and i64 %bf.load283, 65535, !dbg !6172
  %bf.cast285 = trunc i64 %bf.clear284 to i32, !dbg !6172
  %cmp286 = icmp eq i32 %bf.cast285, 14, !dbg !6172
  br i1 %cmp286, label %cond.true288, label %cond.false290, !dbg !6172

cond.true288:                                     ; preds = %if.end276
  %175 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6172
  %call289 = call i32 @vector_type_mode(%union.tree_node* %175), !dbg !6172
  br label %cond.end296, !dbg !6172

cond.false290:                                    ; preds = %if.end276
  %176 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6172
  %type291 = bitcast %union.tree_node* %176 to %struct.tree_type*, !dbg !6172
  %mode292 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type291, i32 0, i32 6, !dbg !6172
  %bf.load293 = load i32, i32* %mode292, align 4, !dbg !6172
  %bf.lshr294 = lshr i32 %bf.load293, 16, !dbg !6172
  %bf.clear295 = and i32 %bf.lshr294, 255, !dbg !6172
  br label %cond.end296, !dbg !6172

cond.end296:                                      ; preds = %cond.false290, %cond.true288
  %cond297 = phi i32 [ %call289, %cond.true288 ], [ %bf.clear295, %cond.false290 ], !dbg !6172
  %177 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6173
  %tobool298 = icmp ne %union.tree_node* %177, null, !dbg !6173
  br i1 %tobool298, label %cond.true299, label %cond.false302, !dbg !6173

cond.true299:                                     ; preds = %cond.end296
  %178 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6174
  %common300 = bitcast %union.tree_node* %178 to %struct.tree_common*, !dbg !6174
  %type301 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common300, i32 0, i32 2, !dbg !6174
  %179 = load %union.tree_node*, %union.tree_node** %type301, align 8, !dbg !6174
  br label %cond.end303, !dbg !6173

cond.false302:                                    ; preds = %cond.end296
  %180 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6175
  br label %cond.end303, !dbg !6173

cond.end303:                                      ; preds = %cond.false302, %cond.true299
  %cond304 = phi %union.tree_node* [ %179, %cond.true299 ], [ %180, %cond.false302 ], !dbg !6173
  %call305 = call i32 @promote_function_mode(%union.tree_node* %172, i32 %cond297, i32* %unsignedp, %union.tree_node* %cond304, i32 0), !dbg !6176
  store i32 %call305, i32* %mode, align 4, !dbg !6177
  %181 = load i32, i32* %unsignedp, align 4, !dbg !6178
  %182 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6179
  %183 = load i32, i32* %i, align 4, !dbg !6180
  %idxprom306 = sext i32 %183 to i64, !dbg !6179
  %arrayidx307 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %182, i64 %idxprom306, !dbg !6179
  %unsignedp308 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx307, i32 0, i32 7, !dbg !6181
  store i32 %181, i32* %unsignedp308, align 8, !dbg !6182
  %184 = load i32, i32* %mode, align 4, !dbg !6183
  %185 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6184
  %186 = load i32, i32* %i, align 4, !dbg !6185
  %idxprom309 = sext i32 %186 to i64, !dbg !6184
  %arrayidx310 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %185, i64 %idxprom309, !dbg !6184
  %mode311 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx310, i32 0, i32 1, !dbg !6186
  store i32 %184, i32* %mode311, align 8, !dbg !6187
  %187 = load %struct.ix86_args*, %struct.ix86_args** %args_so_far.addr, align 8, !dbg !6188
  %188 = load i32, i32* %mode, align 4, !dbg !6188
  %189 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6188
  %190 = load i32, i32* %argpos, align 4, !dbg !6188
  %191 = load i32, i32* %n_named_args.addr, align 4, !dbg !6188
  %cmp312 = icmp slt i32 %190, %191, !dbg !6188
  %conv313 = zext i1 %cmp312 to i32, !dbg !6188
  %call314 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %187, i32 %188, %union.tree_node* %189, i32 %conv313), !dbg !6188
  %192 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6189
  %193 = load i32, i32* %i, align 4, !dbg !6190
  %idxprom315 = sext i32 %193 to i64, !dbg !6189
  %arrayidx316 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %192, i64 %idxprom315, !dbg !6189
  %reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx316, i32 0, i32 4, !dbg !6191
  store %struct.rtx_def* %call314, %struct.rtx_def** %reg, align 8, !dbg !6192
  %194 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6193
  %195 = load i32, i32* %i, align 4, !dbg !6194
  %idxprom317 = sext i32 %195 to i64, !dbg !6193
  %arrayidx318 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %194, i64 %idxprom317, !dbg !6193
  %reg319 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx318, i32 0, i32 4, !dbg !6195
  %196 = load %struct.rtx_def*, %struct.rtx_def** %reg319, align 8, !dbg !6195
  %197 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6196
  %198 = load i32, i32* %i, align 4, !dbg !6197
  %idxprom320 = sext i32 %198 to i64, !dbg !6196
  %arrayidx321 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %197, i64 %idxprom320, !dbg !6196
  %tail_call_reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx321, i32 0, i32 5, !dbg !6198
  store %struct.rtx_def* %196, %struct.rtx_def** %tail_call_reg, align 8, !dbg !6199
  %199 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6200
  %200 = load i32, i32* %i, align 4, !dbg !6202
  %idxprom322 = sext i32 %200 to i64, !dbg !6200
  %arrayidx323 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %199, i64 %idxprom322, !dbg !6200
  %reg324 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx323, i32 0, i32 4, !dbg !6203
  %201 = load %struct.rtx_def*, %struct.rtx_def** %reg324, align 8, !dbg !6203
  %tobool325 = icmp ne %struct.rtx_def* %201, null, !dbg !6200
  br i1 %tobool325, label %if.then326, label %if.end333, !dbg !6204

if.then326:                                       ; preds = %cond.end303
  %202 = load i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 13), align 8, !dbg !6205
  %203 = load %struct.ix86_args*, %struct.ix86_args** %args_so_far.addr, align 8, !dbg !6206
  %204 = load i32, i32* %mode, align 4, !dbg !6207
  %205 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6208
  %206 = load i32, i32* %argpos, align 4, !dbg !6209
  %207 = load i32, i32* %n_named_args.addr, align 4, !dbg !6210
  %cmp327 = icmp slt i32 %206, %207, !dbg !6211
  %conv328 = zext i1 %cmp327 to i32, !dbg !6211
  %conv329 = trunc i32 %conv328 to i8, !dbg !6209
  %call330 = call i32 %202(%struct.ix86_args* %203, i32 %204, %union.tree_node* %205, i8 zeroext %conv329), !dbg !6212
  %208 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6213
  %209 = load i32, i32* %i, align 4, !dbg !6214
  %idxprom331 = sext i32 %209 to i64, !dbg !6213
  %arrayidx332 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %208, i64 %idxprom331, !dbg !6213
  %partial = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx332, i32 0, i32 8, !dbg !6215
  store i32 %call330, i32* %partial, align 4, !dbg !6216
  br label %if.end333, !dbg !6213

if.end333:                                        ; preds = %if.then326, %cond.end303
  %210 = load i8 (i32, %union.tree_node*)*, i8 (i32, %union.tree_node*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 11), align 8, !dbg !6217
  %211 = load i32, i32* %mode, align 4, !dbg !6218
  %212 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6219
  %call334 = call zeroext i8 %210(i32 %211, %union.tree_node* %212), !dbg !6220
  %conv335 = zext i8 %call334 to i32, !dbg !6220
  %213 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6221
  %214 = load i32, i32* %i, align 4, !dbg !6222
  %idxprom336 = sext i32 %214 to i64, !dbg !6221
  %arrayidx337 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %213, i64 %idxprom336, !dbg !6221
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx337, i32 0, i32 9, !dbg !6223
  store i32 %conv335, i32* %pass_on_stack, align 8, !dbg !6224
  %215 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6225
  %216 = load i32, i32* %i, align 4, !dbg !6227
  %idxprom338 = sext i32 %216 to i64, !dbg !6225
  %arrayidx339 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %215, i64 %idxprom338, !dbg !6225
  %reg340 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx339, i32 0, i32 4, !dbg !6228
  %217 = load %struct.rtx_def*, %struct.rtx_def** %reg340, align 8, !dbg !6228
  %tobool341 = icmp ne %struct.rtx_def* %217, null, !dbg !6225
  br i1 %tobool341, label %land.lhs.true342, label %if.end365, !dbg !6229

land.lhs.true342:                                 ; preds = %if.end333
  %218 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6230
  %219 = load i32, i32* %i, align 4, !dbg !6230
  %idxprom343 = sext i32 %219 to i64, !dbg !6230
  %arrayidx344 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %218, i64 %idxprom343, !dbg !6230
  %reg345 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx344, i32 0, i32 4, !dbg !6230
  %220 = load %struct.rtx_def*, %struct.rtx_def** %reg345, align 8, !dbg !6230
  %221 = bitcast %struct.rtx_def* %220 to i32*, !dbg !6230
  %bf.load346 = load i32, i32* %221, align 8, !dbg !6230
  %bf.clear347 = and i32 %bf.load346, 65535, !dbg !6230
  %cmp348 = icmp eq i32 %bf.clear347, 15, !dbg !6231
  br i1 %cmp348, label %land.lhs.true350, label %if.end365, !dbg !6232

land.lhs.true350:                                 ; preds = %land.lhs.true342
  %222 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6233
  %223 = load i32, i32* %i, align 4, !dbg !6233
  %idxprom351 = sext i32 %223 to i64, !dbg !6233
  %arrayidx352 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %222, i64 %idxprom351, !dbg !6233
  %reg353 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx352, i32 0, i32 4, !dbg !6233
  %224 = load %struct.rtx_def*, %struct.rtx_def** %reg353, align 8, !dbg !6233
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %224, i32 0, i32 1, !dbg !6233
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6233
  %arrayidx354 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6233
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx354 to %struct.rtvec_def**, !dbg !6233
  %225 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !6233
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %225, i32 0, i32 1, !dbg !6233
  %arrayidx355 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 0, !dbg !6233
  %226 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx355, align 8, !dbg !6233
  %u356 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %226, i32 0, i32 1, !dbg !6233
  %fld357 = bitcast %union.u* %u356 to [1 x %union.rtunion_def]*, !dbg !6233
  %arrayidx358 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld357, i64 0, i64 0, !dbg !6233
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx358 to %struct.rtx_def**, !dbg !6233
  %227 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6233
  %cmp359 = icmp eq %struct.rtx_def* %227, null, !dbg !6234
  br i1 %cmp359, label %if.then361, label %if.end365, !dbg !6235

if.then361:                                       ; preds = %land.lhs.true350
  %228 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6236
  %229 = load i32, i32* %i, align 4, !dbg !6237
  %idxprom362 = sext i32 %229 to i64, !dbg !6236
  %arrayidx363 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %228, i64 %idxprom362, !dbg !6236
  %pass_on_stack364 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx363, i32 0, i32 9, !dbg !6238
  store i32 1, i32* %pass_on_stack364, align 8, !dbg !6239
  br label %if.end365, !dbg !6236

if.end365:                                        ; preds = %if.then361, %land.lhs.true350, %land.lhs.true342, %if.end333
  %230 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6240
  %base366 = bitcast %union.tree_node* %230 to %struct.tree_base*, !dbg !6240
  %231 = bitcast %struct.tree_base* %base366 to i64*, !dbg !6240
  %bf.load367 = load i64, i64* %231, align 8, !dbg !6240
  %bf.lshr368 = lshr i64 %bf.load367, 18, !dbg !6240
  %bf.clear369 = and i64 %bf.lshr368, 1, !dbg !6240
  %bf.cast370 = trunc i64 %bf.clear369 to i32, !dbg !6240
  %tobool371 = icmp ne i32 %bf.cast370, 0, !dbg !6240
  br i1 %tobool371, label %if.then383, label %lor.lhs.false372, !dbg !6242

lor.lhs.false372:                                 ; preds = %if.end365
  %232 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6243
  %233 = load i32, i32* %i, align 4, !dbg !6244
  %idxprom373 = sext i32 %233 to i64, !dbg !6243
  %arrayidx374 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %232, i64 %idxprom373, !dbg !6243
  %pass_on_stack375 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx374, i32 0, i32 9, !dbg !6245
  %234 = load i32, i32* %pass_on_stack375, align 8, !dbg !6245
  %tobool376 = icmp ne i32 %234, 0, !dbg !6243
  br i1 %tobool376, label %land.lhs.true377, label %if.end384, !dbg !6246

land.lhs.true377:                                 ; preds = %lor.lhs.false372
  %235 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6247
  %236 = load i32, i32* %i, align 4, !dbg !6248
  %idxprom378 = sext i32 %236 to i64, !dbg !6247
  %arrayidx379 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %235, i64 %idxprom378, !dbg !6247
  %reg380 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx379, i32 0, i32 4, !dbg !6249
  %237 = load %struct.rtx_def*, %struct.rtx_def** %reg380, align 8, !dbg !6249
  %cmp381 = icmp ne %struct.rtx_def* %237, null, !dbg !6250
  br i1 %cmp381, label %if.then383, label %if.end384, !dbg !6251

if.then383:                                       ; preds = %land.lhs.true377, %if.end365
  %238 = load i32*, i32** %must_preallocate.addr, align 8, !dbg !6252
  store i32 1, i32* %238, align 4, !dbg !6253
  br label %if.end384, !dbg !6254

if.end384:                                        ; preds = %if.then383, %land.lhs.true377, %lor.lhs.false372
  %239 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6255
  %240 = load i32, i32* %i, align 4, !dbg !6257
  %idxprom385 = sext i32 %240 to i64, !dbg !6255
  %arrayidx386 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %239, i64 %idxprom385, !dbg !6255
  %reg387 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx386, i32 0, i32 4, !dbg !6258
  %241 = load %struct.rtx_def*, %struct.rtx_def** %reg387, align 8, !dbg !6258
  %cmp388 = icmp eq %struct.rtx_def* %241, null, !dbg !6259
  br i1 %cmp388, label %if.then404, label %lor.lhs.false390, !dbg !6260

lor.lhs.false390:                                 ; preds = %if.end384
  %242 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6261
  %243 = load i32, i32* %i, align 4, !dbg !6262
  %idxprom391 = sext i32 %243 to i64, !dbg !6261
  %arrayidx392 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %242, i64 %idxprom391, !dbg !6261
  %partial393 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx392, i32 0, i32 8, !dbg !6263
  %244 = load i32, i32* %partial393, align 4, !dbg !6263
  %cmp394 = icmp ne i32 %244, 0, !dbg !6264
  br i1 %cmp394, label %if.then404, label %lor.lhs.false396, !dbg !6265

lor.lhs.false396:                                 ; preds = %lor.lhs.false390
  %245 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6266
  %cmp397 = icmp sgt i32 %245, 0, !dbg !6267
  br i1 %cmp397, label %if.then404, label %lor.lhs.false399, !dbg !6268

lor.lhs.false399:                                 ; preds = %lor.lhs.false396
  %246 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6269
  %247 = load i32, i32* %i, align 4, !dbg !6270
  %idxprom400 = sext i32 %247 to i64, !dbg !6269
  %arrayidx401 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %246, i64 %idxprom400, !dbg !6269
  %pass_on_stack402 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx401, i32 0, i32 9, !dbg !6271
  %248 = load i32, i32* %pass_on_stack402, align 8, !dbg !6271
  %tobool403 = icmp ne i32 %248, 0, !dbg !6269
  br i1 %tobool403, label %if.then404, label %if.end423, !dbg !6272

if.then404:                                       ; preds = %lor.lhs.false399, %lor.lhs.false396, %lor.lhs.false390, %if.end384
  %249 = load i32, i32* %mode, align 4, !dbg !6273
  %250 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6274
  %251 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6275
  %252 = load i32, i32* %i, align 4, !dbg !6276
  %idxprom405 = sext i32 %252 to i64, !dbg !6275
  %arrayidx406 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %251, i64 %idxprom405, !dbg !6275
  %reg407 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx406, i32 0, i32 4, !dbg !6277
  %253 = load %struct.rtx_def*, %struct.rtx_def** %reg407, align 8, !dbg !6277
  %cmp408 = icmp ne %struct.rtx_def* %253, null, !dbg !6278
  %conv409 = zext i1 %cmp408 to i32, !dbg !6278
  %254 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6279
  %255 = load i32, i32* %i, align 4, !dbg !6280
  %idxprom410 = sext i32 %255 to i64, !dbg !6279
  %arrayidx411 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %254, i64 %idxprom410, !dbg !6279
  %pass_on_stack412 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx411, i32 0, i32 9, !dbg !6281
  %256 = load i32, i32* %pass_on_stack412, align 8, !dbg !6281
  %tobool413 = icmp ne i32 %256, 0, !dbg !6279
  br i1 %tobool413, label %cond.true414, label %cond.false415, !dbg !6279

cond.true414:                                     ; preds = %if.then404
  br label %cond.end419, !dbg !6279

cond.false415:                                    ; preds = %if.then404
  %257 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6282
  %258 = load i32, i32* %i, align 4, !dbg !6283
  %idxprom416 = sext i32 %258 to i64, !dbg !6282
  %arrayidx417 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %257, i64 %idxprom416, !dbg !6282
  %partial418 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx417, i32 0, i32 8, !dbg !6284
  %259 = load i32, i32* %partial418, align 4, !dbg !6284
  br label %cond.end419, !dbg !6279

cond.end419:                                      ; preds = %cond.false415, %cond.true414
  %cond420 = phi i32 [ 0, %cond.true414 ], [ %259, %cond.false415 ], !dbg !6279
  %260 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6285
  %261 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6286
  %262 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6287
  %263 = load i32, i32* %i, align 4, !dbg !6288
  %idxprom421 = sext i32 %263 to i64, !dbg !6287
  %arrayidx422 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %262, i64 %idxprom421, !dbg !6287
  %locate = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx422, i32 0, i32 10, !dbg !6289
  call void @locate_and_pad_parm(i32 %249, %union.tree_node* %250, i32 %conv409, i32 %cond420, %union.tree_node* %260, %struct.args_size* %261, %struct.locate_and_pad_arg_data* %locate), !dbg !6290
  br label %if.end423, !dbg !6290

if.end423:                                        ; preds = %cond.end419, %lor.lhs.false399
  %264 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6291
  %265 = load i32, i32* %i, align 4, !dbg !6292
  %idxprom424 = sext i32 %265 to i64, !dbg !6291
  %arrayidx425 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %264, i64 %idxprom424, !dbg !6291
  %locate426 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx425, i32 0, i32 10, !dbg !6293
  %size427 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate426, i32 0, i32 0, !dbg !6294
  %constant428 = getelementptr inbounds %struct.args_size, %struct.args_size* %size427, i32 0, i32 0, !dbg !6295
  %266 = load i64, i64* %constant428, align 8, !dbg !6295
  %267 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6296
  %constant429 = getelementptr inbounds %struct.args_size, %struct.args_size* %267, i32 0, i32 0, !dbg !6297
  %268 = load i64, i64* %constant429, align 8, !dbg !6298
  %add430 = add nsw i64 %268, %266, !dbg !6298
  store i64 %add430, i64* %constant429, align 8, !dbg !6298
  %269 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6299
  %270 = load i32, i32* %i, align 4, !dbg !6301
  %idxprom431 = sext i32 %270 to i64, !dbg !6299
  %arrayidx432 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %269, i64 %idxprom431, !dbg !6299
  %locate433 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx432, i32 0, i32 10, !dbg !6302
  %size434 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate433, i32 0, i32 0, !dbg !6303
  %var435 = getelementptr inbounds %struct.args_size, %struct.args_size* %size434, i32 0, i32 1, !dbg !6304
  %271 = load %union.tree_node*, %union.tree_node** %var435, align 8, !dbg !6304
  %tobool436 = icmp ne %union.tree_node* %271, null, !dbg !6299
  br i1 %tobool436, label %if.then437, label %if.end464, !dbg !6305

if.then437:                                       ; preds = %if.end423
  br label %do.body, !dbg !6306

do.body:                                          ; preds = %if.then437
  call void @llvm.dbg.declare(metadata %union.tree_node** %inc438, metadata !6307, metadata !DIExpression()), !dbg !6309
  %272 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6309
  %273 = load i32, i32* %i, align 4, !dbg !6309
  %idxprom439 = sext i32 %273 to i64, !dbg !6309
  %arrayidx440 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %272, i64 %idxprom439, !dbg !6309
  %locate441 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx440, i32 0, i32 10, !dbg !6309
  %size442 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate441, i32 0, i32 0, !dbg !6309
  %var443 = getelementptr inbounds %struct.args_size, %struct.args_size* %size442, i32 0, i32 1, !dbg !6309
  %274 = load %union.tree_node*, %union.tree_node** %var443, align 8, !dbg !6309
  store %union.tree_node* %274, %union.tree_node** %inc438, align 8, !dbg !6309
  %275 = load %union.tree_node*, %union.tree_node** %inc438, align 8, !dbg !6310
  %call444 = call i32 @host_integerp(%union.tree_node* %275, i32 0), !dbg !6310
  %tobool445 = icmp ne i32 %call444, 0, !dbg !6310
  br i1 %tobool445, label %if.then446, label %if.else450, !dbg !6309

if.then446:                                       ; preds = %do.body
  %276 = load %union.tree_node*, %union.tree_node** %inc438, align 8, !dbg !6310
  %call447 = call i64 @tree_low_cst(%union.tree_node* %276, i32 0), !dbg !6310
  %277 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6310
  %constant448 = getelementptr inbounds %struct.args_size, %struct.args_size* %277, i32 0, i32 0, !dbg !6310
  %278 = load i64, i64* %constant448, align 8, !dbg !6310
  %add449 = add nsw i64 %278, %call447, !dbg !6310
  store i64 %add449, i64* %constant448, align 8, !dbg !6310
  br label %if.end463, !dbg !6310

if.else450:                                       ; preds = %do.body
  %279 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6312
  %var451 = getelementptr inbounds %struct.args_size, %struct.args_size* %279, i32 0, i32 1, !dbg !6312
  %280 = load %union.tree_node*, %union.tree_node** %var451, align 8, !dbg !6312
  %cmp452 = icmp eq %union.tree_node* %280, null, !dbg !6312
  br i1 %cmp452, label %if.then454, label %if.else457, !dbg !6310

if.then454:                                       ; preds = %if.else450
  %281 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !6312
  %282 = load %union.tree_node*, %union.tree_node** %inc438, align 8, !dbg !6312
  %call455 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %281, %union.tree_node* %282), !dbg !6312
  %283 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6312
  %var456 = getelementptr inbounds %struct.args_size, %struct.args_size* %283, i32 0, i32 1, !dbg !6312
  store %union.tree_node* %call455, %union.tree_node** %var456, align 8, !dbg !6312
  br label %if.end462, !dbg !6312

if.else457:                                       ; preds = %if.else450
  %284 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6312
  %var458 = getelementptr inbounds %struct.args_size, %struct.args_size* %284, i32 0, i32 1, !dbg !6312
  %285 = load %union.tree_node*, %union.tree_node** %var458, align 8, !dbg !6312
  %286 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !6312
  %287 = load %union.tree_node*, %union.tree_node** %inc438, align 8, !dbg !6312
  %call459 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %286, %union.tree_node* %287), !dbg !6312
  %call460 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %285, %union.tree_node* %call459), !dbg !6312
  %288 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6312
  %var461 = getelementptr inbounds %struct.args_size, %struct.args_size* %288, i32 0, i32 1, !dbg !6312
  store %union.tree_node* %call460, %union.tree_node** %var461, align 8, !dbg !6312
  br label %if.end462

if.end462:                                        ; preds = %if.else457, %if.then454
  br label %if.end463

if.end463:                                        ; preds = %if.end462, %if.then446
  br label %do.end, !dbg !6309

do.end:                                           ; preds = %if.end463
  br label %if.end464, !dbg !6309

if.end464:                                        ; preds = %do.end, %if.end423
  %289 = load %struct.ix86_args*, %struct.ix86_args** %args_so_far.addr, align 8, !dbg !6314
  %290 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6314
  %base465 = bitcast %union.tree_node* %290 to %struct.tree_base*, !dbg !6314
  %291 = bitcast %struct.tree_base* %base465 to i64*, !dbg !6314
  %bf.load466 = load i64, i64* %291, align 8, !dbg !6314
  %bf.clear467 = and i64 %bf.load466, 65535, !dbg !6314
  %bf.cast468 = trunc i64 %bf.clear467 to i32, !dbg !6314
  %cmp469 = icmp eq i32 %bf.cast468, 14, !dbg !6314
  br i1 %cmp469, label %cond.true471, label %cond.false473, !dbg !6314

cond.true471:                                     ; preds = %if.end464
  %292 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6314
  %call472 = call i32 @vector_type_mode(%union.tree_node* %292), !dbg !6314
  br label %cond.end479, !dbg !6314

cond.false473:                                    ; preds = %if.end464
  %293 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6314
  %type474 = bitcast %union.tree_node* %293 to %struct.tree_type*, !dbg !6314
  %mode475 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type474, i32 0, i32 6, !dbg !6314
  %bf.load476 = load i32, i32* %mode475, align 4, !dbg !6314
  %bf.lshr477 = lshr i32 %bf.load476, 16, !dbg !6314
  %bf.clear478 = and i32 %bf.lshr477, 255, !dbg !6314
  br label %cond.end479, !dbg !6314

cond.end479:                                      ; preds = %cond.false473, %cond.true471
  %cond480 = phi i32 [ %call472, %cond.true471 ], [ %bf.clear478, %cond.false473 ], !dbg !6314
  %294 = load %union.tree_node*, %union.tree_node** %type46, align 8, !dbg !6314
  %295 = load i32, i32* %argpos, align 4, !dbg !6314
  %296 = load i32, i32* %n_named_args.addr, align 4, !dbg !6314
  %cmp481 = icmp slt i32 %295, %296, !dbg !6314
  %conv482 = zext i1 %cmp481 to i32, !dbg !6314
  call void @function_arg_advance(%struct.ix86_args* %289, i32 %cond480, %union.tree_node* %294, i32 %conv482), !dbg !6314
  br label %for.inc483, !dbg !6315

for.inc483:                                       ; preds = %cond.end479
  %297 = load i32, i32* %inc, align 4, !dbg !6316
  %298 = load i32, i32* %i, align 4, !dbg !6317
  %add484 = add nsw i32 %298, %297, !dbg !6317
  store i32 %add484, i32* %i, align 4, !dbg !6317
  %299 = load i32, i32* %argpos, align 4, !dbg !6318
  %inc485 = add nsw i32 %299, 1, !dbg !6318
  store i32 %inc485, i32* %argpos, align 4, !dbg !6318
  br label %for.cond42, !dbg !6319, !llvm.loop !6320

for.end486:                                       ; preds = %for.cond42
  ret void, !dbg !6322
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @finalize_must_preallocate(i32 %must_preallocate, i32 %num_actuals, %struct.arg_data* %args, %struct.args_size* %args_size) #0 !dbg !6323 {
entry:
  %must_preallocate.addr = alloca i32, align 4
  %num_actuals.addr = alloca i32, align 4
  %args.addr = alloca %struct.arg_data*, align 8
  %args_size.addr = alloca %struct.args_size*, align 8
  %partial_seen = alloca i32, align 4
  %copy_to_evaluate_size = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %must_preallocate, i32* %must_preallocate.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %must_preallocate.addr, metadata !6326, metadata !DIExpression()), !dbg !6327
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !6328, metadata !DIExpression()), !dbg !6329
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !6330, metadata !DIExpression()), !dbg !6331
  store %struct.args_size* %args_size, %struct.args_size** %args_size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %args_size.addr, metadata !6332, metadata !DIExpression()), !dbg !6333
  %0 = load i32, i32* %must_preallocate.addr, align 4, !dbg !6334
  %tobool = icmp ne i32 %0, 0, !dbg !6334
  br i1 %tobool, label %if.end87, label %if.then, !dbg !6336

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i32* %partial_seen, metadata !6337, metadata !DIExpression()), !dbg !6339
  store i32 0, i32* %partial_seen, align 4, !dbg !6339
  call void @llvm.dbg.declare(metadata i32* %copy_to_evaluate_size, metadata !6340, metadata !DIExpression()), !dbg !6341
  store i32 0, i32* %copy_to_evaluate_size, align 4, !dbg !6341
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6342, metadata !DIExpression()), !dbg !6343
  store i32 0, i32* %i, align 4, !dbg !6344
  br label %for.cond, !dbg !6346

for.cond:                                         ; preds = %for.inc, %if.then
  %1 = load i32, i32* %i, align 4, !dbg !6347
  %2 = load i32, i32* %num_actuals.addr, align 4, !dbg !6349
  %cmp = icmp slt i32 %1, %2, !dbg !6350
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6351

land.rhs:                                         ; preds = %for.cond
  %3 = load i32, i32* %must_preallocate.addr, align 4, !dbg !6352
  %tobool1 = icmp ne i32 %3, 0, !dbg !6353
  %lnot = xor i1 %tobool1, true, !dbg !6353
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %4 = phi i1 [ false, %for.cond ], [ %lnot, %land.rhs ], !dbg !6354
  br i1 %4, label %for.body, label %for.end, !dbg !6355

for.body:                                         ; preds = %land.end
  %5 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6356
  %6 = load i32, i32* %i, align 4, !dbg !6359
  %idxprom = sext i32 %6 to i64, !dbg !6356
  %arrayidx = getelementptr inbounds %struct.arg_data, %struct.arg_data* %5, i64 %idxprom, !dbg !6356
  %partial = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx, i32 0, i32 8, !dbg !6360
  %7 = load i32, i32* %partial, align 4, !dbg !6360
  %cmp2 = icmp sgt i32 %7, 0, !dbg !6361
  br i1 %cmp2, label %land.lhs.true, label %if.else, !dbg !6362

land.lhs.true:                                    ; preds = %for.body
  %8 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6363
  %9 = load i32, i32* %i, align 4, !dbg !6364
  %idxprom3 = sext i32 %9 to i64, !dbg !6363
  %arrayidx4 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %8, i64 %idxprom3, !dbg !6363
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx4, i32 0, i32 9, !dbg !6365
  %10 = load i32, i32* %pass_on_stack, align 8, !dbg !6365
  %tobool5 = icmp ne i32 %10, 0, !dbg !6363
  br i1 %tobool5, label %if.else, label %if.then6, !dbg !6366

if.then6:                                         ; preds = %land.lhs.true
  store i32 1, i32* %partial_seen, align 4, !dbg !6367
  br label %if.end13, !dbg !6368

if.else:                                          ; preds = %land.lhs.true, %for.body
  %11 = load i32, i32* %partial_seen, align 4, !dbg !6369
  %tobool7 = icmp ne i32 %11, 0, !dbg !6369
  br i1 %tobool7, label %land.lhs.true8, label %if.end, !dbg !6371

land.lhs.true8:                                   ; preds = %if.else
  %12 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6372
  %13 = load i32, i32* %i, align 4, !dbg !6373
  %idxprom9 = sext i32 %13 to i64, !dbg !6372
  %arrayidx10 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %12, i64 %idxprom9, !dbg !6372
  %reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx10, i32 0, i32 4, !dbg !6374
  %14 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6374
  %cmp11 = icmp eq %struct.rtx_def* %14, null, !dbg !6375
  br i1 %cmp11, label %if.then12, label %if.end, !dbg !6376

if.then12:                                        ; preds = %land.lhs.true8
  store i32 1, i32* %must_preallocate.addr, align 4, !dbg !6377
  br label %if.end, !dbg !6378

if.end:                                           ; preds = %if.then12, %land.lhs.true8, %if.else
  br label %if.end13

if.end13:                                         ; preds = %if.end, %if.then6
  %15 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6379
  %16 = load i32, i32* %i, align 4, !dbg !6379
  %idxprom14 = sext i32 %16 to i64, !dbg !6379
  %arrayidx15 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %15, i64 %idxprom14, !dbg !6379
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx15, i32 0, i32 0, !dbg !6379
  %17 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !6379
  %common = bitcast %union.tree_node* %17 to %struct.tree_common*, !dbg !6379
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6379
  %18 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6379
  %base = bitcast %union.tree_node* %18 to %struct.tree_base*, !dbg !6379
  %19 = bitcast %struct.tree_base* %base to i64*, !dbg !6379
  %bf.load = load i64, i64* %19, align 8, !dbg !6379
  %bf.clear = and i64 %bf.load, 65535, !dbg !6379
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6379
  %cmp16 = icmp eq i32 %bf.cast, 14, !dbg !6379
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !6379

cond.true:                                        ; preds = %if.end13
  %20 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6379
  %21 = load i32, i32* %i, align 4, !dbg !6379
  %idxprom17 = sext i32 %21 to i64, !dbg !6379
  %arrayidx18 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %20, i64 %idxprom17, !dbg !6379
  %tree_value19 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx18, i32 0, i32 0, !dbg !6379
  %22 = load %union.tree_node*, %union.tree_node** %tree_value19, align 8, !dbg !6379
  %common20 = bitcast %union.tree_node* %22 to %struct.tree_common*, !dbg !6379
  %type21 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common20, i32 0, i32 2, !dbg !6379
  %23 = load %union.tree_node*, %union.tree_node** %type21, align 8, !dbg !6379
  %call = call i32 @vector_type_mode(%union.tree_node* %23), !dbg !6379
  br label %cond.end, !dbg !6379

cond.false:                                       ; preds = %if.end13
  %24 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6379
  %25 = load i32, i32* %i, align 4, !dbg !6379
  %idxprom22 = sext i32 %25 to i64, !dbg !6379
  %arrayidx23 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %24, i64 %idxprom22, !dbg !6379
  %tree_value24 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx23, i32 0, i32 0, !dbg !6379
  %26 = load %union.tree_node*, %union.tree_node** %tree_value24, align 8, !dbg !6379
  %common25 = bitcast %union.tree_node* %26 to %struct.tree_common*, !dbg !6379
  %type26 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common25, i32 0, i32 2, !dbg !6379
  %27 = load %union.tree_node*, %union.tree_node** %type26, align 8, !dbg !6379
  %type27 = bitcast %union.tree_node* %27 to %struct.tree_type*, !dbg !6379
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type27, i32 0, i32 6, !dbg !6379
  %bf.load28 = load i32, i32* %mode, align 4, !dbg !6379
  %bf.lshr = lshr i32 %bf.load28, 16, !dbg !6379
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !6379
  br label %cond.end, !dbg !6379

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %bf.clear29, %cond.false ], !dbg !6379
  %cmp30 = icmp eq i32 %cond, 1, !dbg !6381
  br i1 %cmp30, label %land.lhs.true31, label %if.end77, !dbg !6382

land.lhs.true31:                                  ; preds = %cond.end
  %28 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6383
  %29 = load i32, i32* %i, align 4, !dbg !6383
  %idxprom32 = sext i32 %29 to i64, !dbg !6383
  %arrayidx33 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %28, i64 %idxprom32, !dbg !6383
  %tree_value34 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx33, i32 0, i32 0, !dbg !6383
  %30 = load %union.tree_node*, %union.tree_node** %tree_value34, align 8, !dbg !6383
  %base35 = bitcast %union.tree_node* %30 to %struct.tree_base*, !dbg !6383
  %31 = bitcast %struct.tree_base* %base35 to i64*, !dbg !6383
  %bf.load36 = load i64, i64* %31, align 8, !dbg !6383
  %bf.clear37 = and i64 %bf.load36, 65535, !dbg !6383
  %bf.cast38 = trunc i64 %bf.clear37 to i32, !dbg !6383
  %cmp39 = icmp eq i32 %bf.cast38, 59, !dbg !6384
  br i1 %cmp39, label %if.then69, label %lor.lhs.false, !dbg !6385

lor.lhs.false:                                    ; preds = %land.lhs.true31
  %32 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6386
  %33 = load i32, i32* %i, align 4, !dbg !6386
  %idxprom40 = sext i32 %33 to i64, !dbg !6386
  %arrayidx41 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %32, i64 %idxprom40, !dbg !6386
  %tree_value42 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx41, i32 0, i32 0, !dbg !6386
  %34 = load %union.tree_node*, %union.tree_node** %tree_value42, align 8, !dbg !6386
  %base43 = bitcast %union.tree_node* %34 to %struct.tree_base*, !dbg !6386
  %35 = bitcast %struct.tree_base* %base43 to i64*, !dbg !6386
  %bf.load44 = load i64, i64* %35, align 8, !dbg !6386
  %bf.clear45 = and i64 %bf.load44, 65535, !dbg !6386
  %bf.cast46 = trunc i64 %bf.clear45 to i32, !dbg !6386
  %cmp47 = icmp eq i32 %bf.cast46, 55, !dbg !6387
  br i1 %cmp47, label %if.then69, label %lor.lhs.false48, !dbg !6388

lor.lhs.false48:                                  ; preds = %lor.lhs.false
  %36 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6389
  %37 = load i32, i32* %i, align 4, !dbg !6389
  %idxprom49 = sext i32 %37 to i64, !dbg !6389
  %arrayidx50 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %36, i64 %idxprom49, !dbg !6389
  %tree_value51 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx50, i32 0, i32 0, !dbg !6389
  %38 = load %union.tree_node*, %union.tree_node** %tree_value51, align 8, !dbg !6389
  %base52 = bitcast %union.tree_node* %38 to %struct.tree_base*, !dbg !6389
  %39 = bitcast %struct.tree_base* %base52 to i64*, !dbg !6389
  %bf.load53 = load i64, i64* %39, align 8, !dbg !6389
  %bf.clear54 = and i64 %bf.load53, 65535, !dbg !6389
  %bf.cast55 = trunc i64 %bf.clear54 to i32, !dbg !6389
  %cmp56 = icmp eq i32 %bf.cast55, 56, !dbg !6390
  br i1 %cmp56, label %if.then69, label %lor.lhs.false57, !dbg !6391

lor.lhs.false57:                                  ; preds = %lor.lhs.false48
  %40 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6392
  %41 = load i32, i32* %i, align 4, !dbg !6392
  %idxprom58 = sext i32 %41 to i64, !dbg !6392
  %arrayidx59 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %40, i64 %idxprom58, !dbg !6392
  %tree_value60 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx59, i32 0, i32 0, !dbg !6392
  %42 = load %union.tree_node*, %union.tree_node** %tree_value60, align 8, !dbg !6392
  %common61 = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !6392
  %type62 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common61, i32 0, i32 2, !dbg !6392
  %43 = load %union.tree_node*, %union.tree_node** %type62, align 8, !dbg !6392
  %base63 = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !6392
  %44 = bitcast %struct.tree_base* %base63 to i64*, !dbg !6392
  %bf.load64 = load i64, i64* %44, align 8, !dbg !6392
  %bf.lshr65 = lshr i64 %bf.load64, 18, !dbg !6392
  %bf.clear66 = and i64 %bf.lshr65, 1, !dbg !6392
  %bf.cast67 = trunc i64 %bf.clear66 to i32, !dbg !6392
  %tobool68 = icmp ne i32 %bf.cast67, 0, !dbg !6392
  br i1 %tobool68, label %if.then69, label %if.end77, !dbg !6393

if.then69:                                        ; preds = %lor.lhs.false57, %lor.lhs.false48, %lor.lhs.false, %land.lhs.true31
  %45 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6394
  %46 = load i32, i32* %i, align 4, !dbg !6394
  %idxprom70 = sext i32 %46 to i64, !dbg !6394
  %arrayidx71 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %45, i64 %idxprom70, !dbg !6394
  %tree_value72 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx71, i32 0, i32 0, !dbg !6394
  %47 = load %union.tree_node*, %union.tree_node** %tree_value72, align 8, !dbg !6394
  %common73 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !6394
  %type74 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common73, i32 0, i32 2, !dbg !6394
  %48 = load %union.tree_node*, %union.tree_node** %type74, align 8, !dbg !6394
  %call75 = call i64 @int_size_in_bytes(%union.tree_node* %48), !dbg !6395
  %49 = load i32, i32* %copy_to_evaluate_size, align 4, !dbg !6396
  %conv = sext i32 %49 to i64, !dbg !6396
  %add = add nsw i64 %conv, %call75, !dbg !6396
  %conv76 = trunc i64 %add to i32, !dbg !6396
  store i32 %conv76, i32* %copy_to_evaluate_size, align 4, !dbg !6396
  br label %if.end77, !dbg !6397

if.end77:                                         ; preds = %if.then69, %lor.lhs.false57, %cond.end
  br label %for.inc, !dbg !6398

for.inc:                                          ; preds = %if.end77
  %50 = load i32, i32* %i, align 4, !dbg !6399
  %inc = add nsw i32 %50, 1, !dbg !6399
  store i32 %inc, i32* %i, align 4, !dbg !6399
  br label %for.cond, !dbg !6400, !llvm.loop !6401

for.end:                                          ; preds = %land.end
  %51 = load i32, i32* %copy_to_evaluate_size, align 4, !dbg !6403
  %mul = mul nsw i32 %51, 2, !dbg !6405
  %conv78 = sext i32 %mul to i64, !dbg !6403
  %52 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6406
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %52, i32 0, i32 0, !dbg !6407
  %53 = load i64, i64* %constant, align 8, !dbg !6407
  %cmp79 = icmp sge i64 %conv78, %53, !dbg !6408
  br i1 %cmp79, label %land.lhs.true81, label %if.end86, !dbg !6409

land.lhs.true81:                                  ; preds = %for.end
  %54 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6410
  %constant82 = getelementptr inbounds %struct.args_size, %struct.args_size* %54, i32 0, i32 0, !dbg !6411
  %55 = load i64, i64* %constant82, align 8, !dbg !6411
  %cmp83 = icmp sgt i64 %55, 0, !dbg !6412
  br i1 %cmp83, label %if.then85, label %if.end86, !dbg !6413

if.then85:                                        ; preds = %land.lhs.true81
  store i32 1, i32* %must_preallocate.addr, align 4, !dbg !6414
  br label %if.end86, !dbg !6415

if.end86:                                         ; preds = %if.then85, %land.lhs.true81, %for.end
  br label %if.end87, !dbg !6416

if.end87:                                         ; preds = %if.end86, %entry
  %56 = load i32, i32* %must_preallocate.addr, align 4, !dbg !6417
  ret i32 %56, !dbg !6418
}

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @copy_to_reg(%struct.rtx_def*) #2

declare dso_local zeroext i8 @dbg_cnt(i32) #2

declare dso_local %union.tree_node* @decl_function_context(%union.tree_node*) #2

declare dso_local i32 @ix86_return_pops_args(%union.tree_node*, %union.tree_node*, i32) #2

declare dso_local i32 @promote_function_mode(%union.tree_node*, i32, i32*, %union.tree_node*, i32) #2

declare dso_local void @start_sequence() #2

declare dso_local void @do_pending_stack_adjust() #2

; Function Attrs: noinline nounwind uwtable
define internal void @precompute_arguments(i32 %num_actuals, %struct.arg_data* %args) #0 !dbg !6419 {
entry:
  %num_actuals.addr = alloca i32, align 4
  %args.addr = alloca %struct.arg_data*, align 8
  %i = alloca i32, align 4
  %type = alloca %union.tree_node*, align 8
  %mode = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  %_rtx = alloca %struct.rtx_def*, align 8
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !6422, metadata !DIExpression()), !dbg !6423
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !6424, metadata !DIExpression()), !dbg !6425
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6426, metadata !DIExpression()), !dbg !6427
  %0 = load i32, i32* @target_flags, align 4, !dbg !6428
  %and = and i32 %0, 4, !dbg !6428
  %cmp = icmp ne i32 %and, 0, !dbg !6428
  br i1 %cmp, label %if.end, label %lor.lhs.false, !dbg !6428

lor.lhs.false:                                    ; preds = %entry
  %call = call i32 @ix86_cfun_abi(), !dbg !6428
  %cmp1 = icmp eq i32 %call, 1, !dbg !6428
  br i1 %cmp1, label %if.end, label %if.then, !dbg !6430

if.then:                                          ; preds = %lor.lhs.false
  br label %for.end, !dbg !6431

if.end:                                           ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %i, align 4, !dbg !6432
  br label %for.cond, !dbg !6434

for.cond:                                         ; preds = %for.inc, %if.end
  %1 = load i32, i32* %i, align 4, !dbg !6435
  %2 = load i32, i32* %num_actuals.addr, align 4, !dbg !6437
  %cmp2 = icmp slt i32 %1, %2, !dbg !6438
  br i1 %cmp2, label %for.body, label %for.end, !dbg !6439

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %union.tree_node** %type, metadata !6440, metadata !DIExpression()), !dbg !6442
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6443, metadata !DIExpression()), !dbg !6444
  %3 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6445
  %4 = load i32, i32* %i, align 4, !dbg !6445
  %idxprom = sext i32 %4 to i64, !dbg !6445
  %arrayidx = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3, i64 %idxprom, !dbg !6445
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx, i32 0, i32 0, !dbg !6445
  %5 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !6445
  %base = bitcast %union.tree_node* %5 to %struct.tree_base*, !dbg !6445
  %6 = bitcast %struct.tree_base* %base to i64*, !dbg !6445
  %bf.load = load i64, i64* %6, align 8, !dbg !6445
  %bf.clear = and i64 %bf.load, 65535, !dbg !6445
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6445
  %cmp3 = icmp ne i32 %bf.cast, 59, !dbg !6447
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6448

if.then4:                                         ; preds = %for.body
  br label %for.inc, !dbg !6449

if.end5:                                          ; preds = %for.body
  %7 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6450
  %8 = load i32, i32* %i, align 4, !dbg !6450
  %idxprom6 = sext i32 %8 to i64, !dbg !6450
  %arrayidx7 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %7, i64 %idxprom6, !dbg !6450
  %tree_value8 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx7, i32 0, i32 0, !dbg !6450
  %9 = load %union.tree_node*, %union.tree_node** %tree_value8, align 8, !dbg !6450
  %common = bitcast %union.tree_node* %9 to %struct.tree_common*, !dbg !6450
  %type9 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6450
  %10 = load %union.tree_node*, %union.tree_node** %type9, align 8, !dbg !6450
  store %union.tree_node* %10, %union.tree_node** %type, align 8, !dbg !6451
  %11 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6452
  %base10 = bitcast %union.tree_node* %11 to %struct.tree_base*, !dbg !6452
  %12 = bitcast %struct.tree_base* %base10 to i64*, !dbg !6452
  %bf.load11 = load i64, i64* %12, align 8, !dbg !6452
  %bf.lshr = lshr i64 %bf.load11, 18, !dbg !6452
  %bf.clear12 = and i64 %bf.lshr, 1, !dbg !6452
  %bf.cast13 = trunc i64 %bf.clear12 to i32, !dbg !6452
  %tobool = icmp ne i32 %bf.cast13, 0, !dbg !6452
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6452

cond.true:                                        ; preds = %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1308, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6452
  br label %cond.end, !dbg !6452

cond.false:                                       ; preds = %if.end5
  br label %cond.end, !dbg !6452

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6452
  %13 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6453
  %14 = load i32, i32* %i, align 4, !dbg !6454
  %idxprom14 = sext i32 %14 to i64, !dbg !6453
  %arrayidx15 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %13, i64 %idxprom14, !dbg !6453
  %tree_value16 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx15, i32 0, i32 0, !dbg !6455
  %15 = load %union.tree_node*, %union.tree_node** %tree_value16, align 8, !dbg !6455
  %call17 = call %struct.rtx_def* @expand_normal(%union.tree_node* %15), !dbg !6456
  %16 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6457
  %17 = load i32, i32* %i, align 4, !dbg !6458
  %idxprom18 = sext i32 %17 to i64, !dbg !6457
  %arrayidx19 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %16, i64 %idxprom18, !dbg !6457
  %value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx19, i32 0, i32 2, !dbg !6459
  store %struct.rtx_def* %call17, %struct.rtx_def** %value, align 8, !dbg !6460
  %18 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6461
  %19 = load i32, i32* %i, align 4, !dbg !6462
  %idxprom20 = sext i32 %19 to i64, !dbg !6461
  %arrayidx21 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %18, i64 %idxprom20, !dbg !6461
  %initial_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx21, i32 0, i32 3, !dbg !6463
  store %struct.rtx_def* %call17, %struct.rtx_def** %initial_value, align 8, !dbg !6464
  %20 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6465
  %base22 = bitcast %union.tree_node* %20 to %struct.tree_base*, !dbg !6465
  %21 = bitcast %struct.tree_base* %base22 to i64*, !dbg !6465
  %bf.load23 = load i64, i64* %21, align 8, !dbg !6465
  %bf.clear24 = and i64 %bf.load23, 65535, !dbg !6465
  %bf.cast25 = trunc i64 %bf.clear24 to i32, !dbg !6465
  %cmp26 = icmp eq i32 %bf.cast25, 14, !dbg !6465
  br i1 %cmp26, label %cond.true27, label %cond.false29, !dbg !6465

cond.true27:                                      ; preds = %cond.end
  %22 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6465
  %call28 = call i32 @vector_type_mode(%union.tree_node* %22), !dbg !6465
  br label %cond.end35, !dbg !6465

cond.false29:                                     ; preds = %cond.end
  %23 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6465
  %type30 = bitcast %union.tree_node* %23 to %struct.tree_type*, !dbg !6465
  %mode31 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type30, i32 0, i32 6, !dbg !6465
  %bf.load32 = load i32, i32* %mode31, align 4, !dbg !6465
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !6465
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !6465
  br label %cond.end35, !dbg !6465

cond.end35:                                       ; preds = %cond.false29, %cond.true27
  %cond36 = phi i32 [ %call28, %cond.true27 ], [ %bf.clear34, %cond.false29 ], !dbg !6465
  store i32 %cond36, i32* %mode, align 4, !dbg !6466
  %24 = load i32, i32* %mode, align 4, !dbg !6467
  %25 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6469
  %26 = load i32, i32* %i, align 4, !dbg !6470
  %idxprom37 = sext i32 %26 to i64, !dbg !6469
  %arrayidx38 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %25, i64 %idxprom37, !dbg !6469
  %mode39 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx38, i32 0, i32 1, !dbg !6471
  %27 = load i32, i32* %mode39, align 8, !dbg !6471
  %cmp40 = icmp ne i32 %24, %27, !dbg !6472
  br i1 %cmp40, label %if.then41, label %if.end113, !dbg !6473

if.then41:                                        ; preds = %cond.end35
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !6474, metadata !DIExpression()), !dbg !6476
  %28 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6477
  %29 = load i32, i32* %i, align 4, !dbg !6478
  %idxprom42 = sext i32 %29 to i64, !dbg !6477
  %arrayidx43 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %28, i64 %idxprom42, !dbg !6477
  %unsignedp44 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx43, i32 0, i32 7, !dbg !6479
  %30 = load i32, i32* %unsignedp44, align 8, !dbg !6479
  store i32 %30, i32* %unsignedp, align 4, !dbg !6476
  %31 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6480
  %32 = load i32, i32* %i, align 4, !dbg !6481
  %idxprom45 = sext i32 %32 to i64, !dbg !6480
  %arrayidx46 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %31, i64 %idxprom45, !dbg !6480
  %mode47 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx46, i32 0, i32 1, !dbg !6482
  %33 = load i32, i32* %mode47, align 8, !dbg !6482
  %34 = load i32, i32* %mode, align 4, !dbg !6483
  %35 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6484
  %36 = load i32, i32* %i, align 4, !dbg !6485
  %idxprom48 = sext i32 %36 to i64, !dbg !6484
  %arrayidx49 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %35, i64 %idxprom48, !dbg !6484
  %value50 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx49, i32 0, i32 2, !dbg !6486
  %37 = load %struct.rtx_def*, %struct.rtx_def** %value50, align 8, !dbg !6486
  %38 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6487
  %39 = load i32, i32* %i, align 4, !dbg !6488
  %idxprom51 = sext i32 %39 to i64, !dbg !6487
  %arrayidx52 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %38, i64 %idxprom51, !dbg !6487
  %unsignedp53 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx52, i32 0, i32 7, !dbg !6489
  %40 = load i32, i32* %unsignedp53, align 8, !dbg !6489
  %call54 = call %struct.rtx_def* @convert_modes(i32 %33, i32 %34, %struct.rtx_def* %37, i32 %40), !dbg !6490
  %41 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6491
  %42 = load i32, i32* %i, align 4, !dbg !6492
  %idxprom55 = sext i32 %42 to i64, !dbg !6491
  %arrayidx56 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %41, i64 %idxprom55, !dbg !6491
  %value57 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx56, i32 0, i32 2, !dbg !6493
  store %struct.rtx_def* %call54, %struct.rtx_def** %value57, align 8, !dbg !6494
  %43 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6495
  %44 = load i32, i32* %i, align 4, !dbg !6495
  %idxprom58 = sext i32 %44 to i64, !dbg !6495
  %arrayidx59 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %43, i64 %idxprom58, !dbg !6495
  %value60 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx59, i32 0, i32 2, !dbg !6495
  %45 = load %struct.rtx_def*, %struct.rtx_def** %value60, align 8, !dbg !6495
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !6495
  %bf.load61 = load i32, i32* %46, align 8, !dbg !6495
  %bf.clear62 = and i32 %bf.load61, 65535, !dbg !6495
  %cmp63 = icmp eq i32 %bf.clear62, 37, !dbg !6495
  br i1 %cmp63, label %land.lhs.true, label %if.end112, !dbg !6497

land.lhs.true:                                    ; preds = %if.then41
  %47 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6498
  %48 = load i32, i32* %i, align 4, !dbg !6498
  %idxprom64 = sext i32 %48 to i64, !dbg !6498
  %arrayidx65 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %47, i64 %idxprom64, !dbg !6498
  %mode66 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx65, i32 0, i32 1, !dbg !6498
  %49 = load i32, i32* %mode66, align 8, !dbg !6498
  %idxprom67 = zext i32 %49 to i64, !dbg !6498
  %arrayidx68 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom67, !dbg !6498
  %50 = load i8, i8* %arrayidx68, align 1, !dbg !6498
  %conv = zext i8 %50 to i32, !dbg !6498
  %cmp69 = icmp eq i32 %conv, 2, !dbg !6499
  br i1 %cmp69, label %land.lhs.true71, label %if.end112, !dbg !6500

land.lhs.true71:                                  ; preds = %land.lhs.true
  %51 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6501
  %52 = load i32, i32* %mode, align 4, !dbg !6502
  %call72 = call i32 @promote_mode(%union.tree_node* %51, i32 %52, i32* %unsignedp), !dbg !6503
  %53 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6504
  %54 = load i32, i32* %i, align 4, !dbg !6505
  %idxprom73 = sext i32 %54 to i64, !dbg !6504
  %arrayidx74 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %53, i64 %idxprom73, !dbg !6504
  %mode75 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx74, i32 0, i32 1, !dbg !6506
  %55 = load i32, i32* %mode75, align 8, !dbg !6506
  %cmp76 = icmp ne i32 %call72, %55, !dbg !6507
  br i1 %cmp76, label %if.then78, label %if.end112, !dbg !6508

if.then78:                                        ; preds = %land.lhs.true71
  %56 = load i32, i32* %mode, align 4, !dbg !6509
  %57 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6511
  %58 = load i32, i32* %i, align 4, !dbg !6512
  %idxprom79 = sext i32 %58 to i64, !dbg !6511
  %arrayidx80 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %57, i64 %idxprom79, !dbg !6511
  %value81 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx80, i32 0, i32 2, !dbg !6513
  %59 = load %struct.rtx_def*, %struct.rtx_def** %value81, align 8, !dbg !6513
  %call82 = call %struct.rtx_def* @gen_lowpart_SUBREG(i32 %56, %struct.rtx_def* %59), !dbg !6514
  %60 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6515
  %61 = load i32, i32* %i, align 4, !dbg !6516
  %idxprom83 = sext i32 %61 to i64, !dbg !6515
  %arrayidx84 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %60, i64 %idxprom83, !dbg !6515
  %initial_value85 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx84, i32 0, i32 3, !dbg !6517
  store %struct.rtx_def* %call82, %struct.rtx_def** %initial_value85, align 8, !dbg !6518
  %62 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6519
  %63 = load i32, i32* %i, align 4, !dbg !6519
  %idxprom86 = sext i32 %63 to i64, !dbg !6519
  %arrayidx87 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %62, i64 %idxprom86, !dbg !6519
  %initial_value88 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx87, i32 0, i32 3, !dbg !6519
  %64 = load %struct.rtx_def*, %struct.rtx_def** %initial_value88, align 8, !dbg !6519
  %65 = bitcast %struct.rtx_def* %64 to i32*, !dbg !6519
  %bf.load89 = load i32, i32* %65, align 8, !dbg !6520
  %bf.clear90 = and i32 %bf.load89, -268435457, !dbg !6520
  %bf.set = or i32 %bf.clear90, 268435456, !dbg !6520
  store i32 %bf.set, i32* %65, align 8, !dbg !6520
  br label %do.body, !dbg !6521

do.body:                                          ; preds = %if.then78
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %_rtx, metadata !6522, metadata !DIExpression()), !dbg !6524
  %66 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6524
  %67 = load i32, i32* %i, align 4, !dbg !6524
  %idxprom91 = sext i32 %67 to i64, !dbg !6524
  %arrayidx92 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %66, i64 %idxprom91, !dbg !6524
  %initial_value93 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx92, i32 0, i32 3, !dbg !6524
  %68 = load %struct.rtx_def*, %struct.rtx_def** %initial_value93, align 8, !dbg !6524
  store %struct.rtx_def* %68, %struct.rtx_def** %_rtx, align 8, !dbg !6524
  %69 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6525
  %70 = load i32, i32* %i, align 4, !dbg !6525
  %idxprom94 = sext i32 %70 to i64, !dbg !6525
  %arrayidx95 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %69, i64 %idxprom94, !dbg !6525
  %unsignedp96 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx95, i32 0, i32 7, !dbg !6525
  %71 = load i32, i32* %unsignedp96, align 8, !dbg !6525
  %cmp97 = icmp slt i32 %71, 0, !dbg !6525
  br i1 %cmp97, label %if.then99, label %if.else, !dbg !6524

if.then99:                                        ; preds = %do.body
  %72 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !6525
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !6525
  %bf.load100 = load i32, i32* %73, align 8, !dbg !6525
  %bf.clear101 = and i32 %bf.load100, -134217729, !dbg !6525
  %bf.set102 = or i32 %bf.clear101, 134217728, !dbg !6525
  store i32 %bf.set102, i32* %73, align 8, !dbg !6525
  br label %if.end111, !dbg !6525

if.else:                                          ; preds = %do.body
  %74 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !6527
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !6527
  %bf.load103 = load i32, i32* %75, align 8, !dbg !6527
  %bf.clear104 = and i32 %bf.load103, -134217729, !dbg !6527
  store i32 %bf.clear104, i32* %75, align 8, !dbg !6527
  %76 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6527
  %77 = load i32, i32* %i, align 4, !dbg !6527
  %idxprom105 = sext i32 %77 to i64, !dbg !6527
  %arrayidx106 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %76, i64 %idxprom105, !dbg !6527
  %unsignedp107 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx106, i32 0, i32 7, !dbg !6527
  %78 = load i32, i32* %unsignedp107, align 8, !dbg !6527
  %79 = load %struct.rtx_def*, %struct.rtx_def** %_rtx, align 8, !dbg !6527
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !6527
  %bf.load108 = load i32, i32* %80, align 8, !dbg !6527
  %bf.value = and i32 %78, 1, !dbg !6527
  %bf.shl = shl i32 %bf.value, 26, !dbg !6527
  %bf.clear109 = and i32 %bf.load108, -67108865, !dbg !6527
  %bf.set110 = or i32 %bf.clear109, %bf.shl, !dbg !6527
  store i32 %bf.set110, i32* %80, align 8, !dbg !6527
  br label %if.end111

if.end111:                                        ; preds = %if.else, %if.then99
  br label %do.end, !dbg !6524

do.end:                                           ; preds = %if.end111
  br label %if.end112, !dbg !6529

if.end112:                                        ; preds = %do.end, %land.lhs.true71, %land.lhs.true, %if.then41
  br label %if.end113, !dbg !6530

if.end113:                                        ; preds = %if.end112, %cond.end35
  br label %for.inc, !dbg !6531

for.inc:                                          ; preds = %if.end113, %if.then4
  %81 = load i32, i32* %i, align 4, !dbg !6532
  %inc = add nsw i32 %81, 1, !dbg !6532
  store i32 %inc, i32* %i, align 4, !dbg !6532
  br label %for.cond, !dbg !6533, !llvm.loop !6534

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !6536
}

declare dso_local void @stack_protect_epilogue() #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @compute_argument_block_size(i32 %reg_parm_stack_space, %struct.args_size* %args_size, %union.tree_node* %fndecl, %union.tree_node* %fntype, i32 %preferred_stack_boundary) #0 !dbg !6537 {
entry:
  %reg_parm_stack_space.addr = alloca i32, align 4
  %args_size.addr = alloca %struct.args_size*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %fntype.addr = alloca %union.tree_node*, align 8
  %preferred_stack_boundary.addr = alloca i32, align 4
  %unadjusted_args_size = alloca i32, align 4
  store i32 %reg_parm_stack_space, i32* %reg_parm_stack_space.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space.addr, metadata !6540, metadata !DIExpression()), !dbg !6541
  store %struct.args_size* %args_size, %struct.args_size** %args_size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %args_size.addr, metadata !6542, metadata !DIExpression()), !dbg !6543
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6544, metadata !DIExpression()), !dbg !6545
  store %union.tree_node* %fntype, %union.tree_node** %fntype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype.addr, metadata !6546, metadata !DIExpression()), !dbg !6547
  store i32 %preferred_stack_boundary, i32* %preferred_stack_boundary.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %preferred_stack_boundary.addr, metadata !6548, metadata !DIExpression()), !dbg !6549
  call void @llvm.dbg.declare(metadata i32* %unadjusted_args_size, metadata !6550, metadata !DIExpression()), !dbg !6551
  %0 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6552
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %0, i32 0, i32 0, !dbg !6553
  %1 = load i64, i64* %constant, align 8, !dbg !6553
  %conv = trunc i64 %1 to i32, !dbg !6552
  store i32 %conv, i32* %unadjusted_args_size, align 4, !dbg !6551
  %2 = load i32, i32* @target_flags, align 4, !dbg !6554
  %and = and i32 %2, 4, !dbg !6554
  %cmp = icmp ne i32 %and, 0, !dbg !6554
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6554

lor.lhs.false:                                    ; preds = %entry
  %call = call i32 @ix86_cfun_abi(), !dbg !6554
  %cmp2 = icmp eq i32 %call, 1, !dbg !6554
  br i1 %cmp2, label %land.lhs.true, label %if.end, !dbg !6556

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %3 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6557
  %cmp4 = icmp sgt i32 %3, 32, !dbg !6558
  br i1 %cmp4, label %if.then, label %if.end, !dbg !6559

if.then:                                          ; preds = %land.lhs.true
  store i32 32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6560
  br label %if.end, !dbg !6561

if.end:                                           ; preds = %if.then, %land.lhs.true, %lor.lhs.false
  %4 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6562
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %4, i32 0, i32 1, !dbg !6564
  %5 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6564
  %tobool = icmp ne %union.tree_node* %5, null, !dbg !6562
  br i1 %tobool, label %if.then6, label %if.else, !dbg !6565

if.then6:                                         ; preds = %if.end
  %6 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6566
  %var7 = getelementptr inbounds %struct.args_size, %struct.args_size* %6, i32 0, i32 1, !dbg !6566
  %7 = load %union.tree_node*, %union.tree_node** %var7, align 8, !dbg !6566
  %cmp8 = icmp eq %union.tree_node* %7, null, !dbg !6566
  br i1 %cmp8, label %cond.true, label %cond.false, !dbg !6566

cond.true:                                        ; preds = %if.then6
  %8 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6566
  %constant10 = getelementptr inbounds %struct.args_size, %struct.args_size* %8, i32 0, i32 0, !dbg !6566
  %9 = load i64, i64* %constant10, align 8, !dbg !6566
  %call11 = call %union.tree_node* @size_int_kind(i64 %9, i32 1), !dbg !6566
  br label %cond.end, !dbg !6566

cond.false:                                       ; preds = %if.then6
  %10 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !6566
  %11 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6566
  %var12 = getelementptr inbounds %struct.args_size, %struct.args_size* %11, i32 0, i32 1, !dbg !6566
  %12 = load %union.tree_node*, %union.tree_node** %var12, align 8, !dbg !6566
  %call13 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %10, %union.tree_node* %12), !dbg !6566
  %13 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6566
  %constant14 = getelementptr inbounds %struct.args_size, %struct.args_size* %13, i32 0, i32 0, !dbg !6566
  %14 = load i64, i64* %constant14, align 8, !dbg !6566
  %call15 = call %union.tree_node* @size_int_kind(i64 %14, i32 1), !dbg !6566
  %call16 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call13, %union.tree_node* %call15), !dbg !6566
  br label %cond.end, !dbg !6566

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %union.tree_node* [ %call11, %cond.true ], [ %call16, %cond.false ], !dbg !6566
  %15 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6568
  %var17 = getelementptr inbounds %struct.args_size, %struct.args_size* %15, i32 0, i32 1, !dbg !6569
  store %union.tree_node* %cond, %union.tree_node** %var17, align 8, !dbg !6570
  %16 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6571
  %constant18 = getelementptr inbounds %struct.args_size, %struct.args_size* %16, i32 0, i32 0, !dbg !6572
  store i64 0, i64* %constant18, align 8, !dbg !6573
  %17 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6574
  %div = sdiv i32 %17, 8, !dbg !6574
  store i32 %div, i32* %preferred_stack_boundary.addr, align 4, !dbg !6574
  %18 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6575
  %cmp19 = icmp sgt i32 %18, 1, !dbg !6577
  br i1 %cmp19, label %if.then21, label %if.end31, !dbg !6578

if.then21:                                        ; preds = %cond.end
  %19 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !6579
  %20 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6579
  %sub = sub nsw i32 %20, 1, !dbg !6579
  %and22 = and i32 %19, %sub, !dbg !6579
  %tobool23 = icmp ne i32 %and22, 0, !dbg !6579
  br i1 %tobool23, label %cond.true24, label %cond.false25, !dbg !6579

cond.true24:                                      ; preds = %if.then21
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1231, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6579
  br label %cond.end26, !dbg !6579

cond.false25:                                     ; preds = %if.then21
  br label %cond.end26, !dbg !6579

cond.end26:                                       ; preds = %cond.false25, %cond.true24
  %cond27 = phi i32 [ 0, %cond.true24 ], [ 0, %cond.false25 ], !dbg !6579
  %21 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6581
  %var28 = getelementptr inbounds %struct.args_size, %struct.args_size* %21, i32 0, i32 1, !dbg !6581
  %22 = load %union.tree_node*, %union.tree_node** %var28, align 8, !dbg !6581
  %23 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6581
  %call29 = call %union.tree_node* @round_up_loc(i32 0, %union.tree_node* %22, i32 %23), !dbg !6581
  %24 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6582
  %var30 = getelementptr inbounds %struct.args_size, %struct.args_size* %24, i32 0, i32 1, !dbg !6583
  store %union.tree_node* %call29, %union.tree_node** %var30, align 8, !dbg !6584
  br label %if.end31, !dbg !6585

if.end31:                                         ; preds = %cond.end26, %cond.end
  %25 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6586
  %cmp32 = icmp sgt i32 %25, 0, !dbg !6588
  br i1 %cmp32, label %if.then34, label %if.end55, !dbg !6589

if.then34:                                        ; preds = %if.end31
  %26 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6590
  %var35 = getelementptr inbounds %struct.args_size, %struct.args_size* %26, i32 0, i32 1, !dbg !6590
  %27 = load %union.tree_node*, %union.tree_node** %var35, align 8, !dbg !6590
  %28 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6590
  %conv36 = sext i32 %28 to i64, !dbg !6590
  %call37 = call %union.tree_node* @size_int_kind(i64 %conv36, i32 1), !dbg !6590
  %call38 = call %union.tree_node* @size_binop_loc(i32 0, i32 81, %union.tree_node* %27, %union.tree_node* %call37), !dbg !6590
  %29 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6592
  %var39 = getelementptr inbounds %struct.args_size, %struct.args_size* %29, i32 0, i32 1, !dbg !6593
  store %union.tree_node* %call38, %union.tree_node** %var39, align 8, !dbg !6594
  %30 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6595
  %tobool40 = icmp ne %union.tree_node* %30, null, !dbg !6595
  br i1 %tobool40, label %cond.false42, label %cond.true41, !dbg !6595

cond.true41:                                      ; preds = %if.then34
  %31 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6595
  br label %cond.end43, !dbg !6595

cond.false42:                                     ; preds = %if.then34
  %32 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6595
  %common = bitcast %union.tree_node* %32 to %struct.tree_common*, !dbg !6595
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6595
  %33 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6595
  br label %cond.end43, !dbg !6595

cond.end43:                                       ; preds = %cond.false42, %cond.true41
  %cond44 = phi %union.tree_node* [ %31, %cond.true41 ], [ %33, %cond.false42 ], !dbg !6595
  %call45 = call i32 @ix86_function_type_abi(%union.tree_node* %cond44), !dbg !6595
  %cmp46 = icmp eq i32 %call45, 1, !dbg !6595
  br i1 %cmp46, label %if.end54, label %if.then48, !dbg !6597

if.then48:                                        ; preds = %cond.end43
  %34 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6598
  %var49 = getelementptr inbounds %struct.args_size, %struct.args_size* %34, i32 0, i32 1, !dbg !6598
  %35 = load %union.tree_node*, %union.tree_node** %var49, align 8, !dbg !6598
  %36 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6598
  %conv50 = sext i32 %36 to i64, !dbg !6598
  %call51 = call %union.tree_node* @size_int_kind(i64 %conv50, i32 1), !dbg !6598
  %call52 = call %union.tree_node* @size_binop_loc(i32 0, i32 64, %union.tree_node* %35, %union.tree_node* %call51), !dbg !6598
  %37 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6599
  %var53 = getelementptr inbounds %struct.args_size, %struct.args_size* %37, i32 0, i32 1, !dbg !6600
  store %union.tree_node* %call52, %union.tree_node** %var53, align 8, !dbg !6601
  br label %if.end54, !dbg !6599

if.end54:                                         ; preds = %if.then48, %cond.end43
  br label %if.end55, !dbg !6602

if.end55:                                         ; preds = %if.end54, %if.end31
  br label %if.end98, !dbg !6603

if.else:                                          ; preds = %if.end
  %38 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6604
  %div56 = sdiv i32 %38, 8, !dbg !6604
  store i32 %div56, i32* %preferred_stack_boundary.addr, align 4, !dbg !6604
  %39 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6606
  %cmp57 = icmp slt i32 %39, 1, !dbg !6608
  br i1 %cmp57, label %if.then59, label %if.end60, !dbg !6609

if.then59:                                        ; preds = %if.else
  store i32 1, i32* %preferred_stack_boundary.addr, align 4, !dbg !6610
  br label %if.end60, !dbg !6611

if.end60:                                         ; preds = %if.then59, %if.else
  %40 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6612
  %constant61 = getelementptr inbounds %struct.args_size, %struct.args_size* %40, i32 0, i32 0, !dbg !6613
  %41 = load i64, i64* %constant61, align 8, !dbg !6613
  %42 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !6614
  %conv62 = sext i32 %42 to i64, !dbg !6614
  %add = add nsw i64 %41, %conv62, !dbg !6615
  %43 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6616
  %conv63 = sext i32 %43 to i64, !dbg !6616
  %add64 = add nsw i64 %add, %conv63, !dbg !6617
  %sub65 = sub nsw i64 %add64, 1, !dbg !6618
  %44 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6619
  %conv66 = sext i32 %44 to i64, !dbg !6619
  %div67 = sdiv i64 %sub65, %conv66, !dbg !6620
  %45 = load i32, i32* %preferred_stack_boundary.addr, align 4, !dbg !6621
  %conv68 = sext i32 %45 to i64, !dbg !6621
  %mul = mul nsw i64 %div67, %conv68, !dbg !6622
  %46 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !6623
  %conv69 = sext i32 %46 to i64, !dbg !6623
  %sub70 = sub nsw i64 %mul, %conv69, !dbg !6624
  %47 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6625
  %constant71 = getelementptr inbounds %struct.args_size, %struct.args_size* %47, i32 0, i32 0, !dbg !6626
  store i64 %sub70, i64* %constant71, align 8, !dbg !6627
  %48 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6628
  %constant72 = getelementptr inbounds %struct.args_size, %struct.args_size* %48, i32 0, i32 0, !dbg !6628
  %49 = load i64, i64* %constant72, align 8, !dbg !6628
  %50 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6628
  %conv73 = sext i32 %50 to i64, !dbg !6628
  %cmp74 = icmp sgt i64 %49, %conv73, !dbg !6628
  br i1 %cmp74, label %cond.true76, label %cond.false78, !dbg !6628

cond.true76:                                      ; preds = %if.end60
  %51 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6628
  %constant77 = getelementptr inbounds %struct.args_size, %struct.args_size* %51, i32 0, i32 0, !dbg !6628
  %52 = load i64, i64* %constant77, align 8, !dbg !6628
  br label %cond.end80, !dbg !6628

cond.false78:                                     ; preds = %if.end60
  %53 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6628
  %conv79 = sext i32 %53 to i64, !dbg !6628
  br label %cond.end80, !dbg !6628

cond.end80:                                       ; preds = %cond.false78, %cond.true76
  %cond81 = phi i64 [ %52, %cond.true76 ], [ %conv79, %cond.false78 ], !dbg !6628
  %54 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6629
  %constant82 = getelementptr inbounds %struct.args_size, %struct.args_size* %54, i32 0, i32 0, !dbg !6630
  store i64 %cond81, i64* %constant82, align 8, !dbg !6631
  %55 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6632
  %tobool83 = icmp ne %union.tree_node* %55, null, !dbg !6632
  br i1 %tobool83, label %cond.false85, label %cond.true84, !dbg !6632

cond.true84:                                      ; preds = %cond.end80
  %56 = load %union.tree_node*, %union.tree_node** %fntype.addr, align 8, !dbg !6632
  br label %cond.end88, !dbg !6632

cond.false85:                                     ; preds = %cond.end80
  %57 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6632
  %common86 = bitcast %union.tree_node* %57 to %struct.tree_common*, !dbg !6632
  %type87 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common86, i32 0, i32 2, !dbg !6632
  %58 = load %union.tree_node*, %union.tree_node** %type87, align 8, !dbg !6632
  br label %cond.end88, !dbg !6632

cond.end88:                                       ; preds = %cond.false85, %cond.true84
  %cond89 = phi %union.tree_node* [ %56, %cond.true84 ], [ %58, %cond.false85 ], !dbg !6632
  %call90 = call i32 @ix86_function_type_abi(%union.tree_node* %cond89), !dbg !6632
  %cmp91 = icmp eq i32 %call90, 1, !dbg !6632
  br i1 %cmp91, label %if.end97, label %if.then93, !dbg !6634

if.then93:                                        ; preds = %cond.end88
  %59 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !6635
  %conv94 = sext i32 %59 to i64, !dbg !6635
  %60 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6636
  %constant95 = getelementptr inbounds %struct.args_size, %struct.args_size* %60, i32 0, i32 0, !dbg !6637
  %61 = load i64, i64* %constant95, align 8, !dbg !6638
  %sub96 = sub nsw i64 %61, %conv94, !dbg !6638
  store i64 %sub96, i64* %constant95, align 8, !dbg !6638
  br label %if.end97, !dbg !6636

if.end97:                                         ; preds = %if.then93, %cond.end88
  br label %if.end98

if.end98:                                         ; preds = %if.end97, %if.end55
  %62 = load i32, i32* %unadjusted_args_size, align 4, !dbg !6639
  ret i32 %62, !dbg !6640
}

declare dso_local %struct.rtx_def* @plus_constant(%struct.rtx_def*, i64) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

declare dso_local void @emit_stack_save(i32, %struct.rtx_def**, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @push_block(%struct.rtx_def*, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @expand_normal(%union.tree_node* %exp) #0 !dbg !6641 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !6644, metadata !DIExpression()), !dbg !6645
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !6646
  %call = call %struct.rtx_def* @expand_expr_real(%union.tree_node* %0, %struct.rtx_def* null, i32 0, i32 0, %struct.rtx_def** null), !dbg !6647
  ret %struct.rtx_def* %call, !dbg !6648
}

declare dso_local %union.tree_node* @size_int_kind(i64, i32) #2

declare dso_local %union.tree_node* @size_binop_loc(i32, i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @fold_convert_loc(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @free(i8*) #2

declare dso_local i8* @xmalloc(i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @combine_pending_stack_adjustment_and_call(i32 %unadjusted_args_size, %struct.args_size* %args_size, i32 %preferred_unit_stack_boundary) #0 !dbg !6649 {
entry:
  %unadjusted_args_size.addr = alloca i32, align 4
  %args_size.addr = alloca %struct.args_size*, align 8
  %preferred_unit_stack_boundary.addr = alloca i32, align 4
  %adjustment = alloca i64, align 8
  %unadjusted_alignment = alloca i64, align 8
  store i32 %unadjusted_args_size, i32* %unadjusted_args_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %unadjusted_args_size.addr, metadata !6652, metadata !DIExpression()), !dbg !6653
  store %struct.args_size* %args_size, %struct.args_size** %args_size.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.args_size** %args_size.addr, metadata !6654, metadata !DIExpression()), !dbg !6655
  store i32 %preferred_unit_stack_boundary, i32* %preferred_unit_stack_boundary.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %preferred_unit_stack_boundary.addr, metadata !6656, metadata !DIExpression()), !dbg !6657
  call void @llvm.dbg.declare(metadata i64* %adjustment, metadata !6658, metadata !DIExpression()), !dbg !6659
  call void @llvm.dbg.declare(metadata i64* %unadjusted_alignment, metadata !6660, metadata !DIExpression()), !dbg !6661
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !6662
  %1 = load i32, i32* %unadjusted_args_size.addr, align 4, !dbg !6663
  %add = add nsw i32 %0, %1, !dbg !6664
  %2 = load i32, i32* %preferred_unit_stack_boundary.addr, align 4, !dbg !6665
  %rem = urem i32 %add, %2, !dbg !6666
  %conv = zext i32 %rem to i64, !dbg !6667
  store i64 %conv, i64* %unadjusted_alignment, align 8, !dbg !6668
  %3 = load i64, i64* %unadjusted_alignment, align 8, !dbg !6669
  %4 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !6670
  %5 = load i32, i32* %preferred_unit_stack_boundary.addr, align 4, !dbg !6671
  %rem1 = urem i32 %4, %5, !dbg !6672
  %conv2 = zext i32 %rem1 to i64, !dbg !6673
  %sub = sub i64 %3, %conv2, !dbg !6674
  store i64 %sub, i64* %unadjusted_alignment, align 8, !dbg !6675
  %6 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !6676
  %conv3 = sext i32 %6 to i64, !dbg !6676
  store i64 %conv3, i64* %adjustment, align 8, !dbg !6677
  %7 = load i32, i32* %preferred_unit_stack_boundary.addr, align 4, !dbg !6678
  %cmp = icmp ugt i32 %7, 1, !dbg !6680
  br i1 %cmp, label %if.then, label %if.end12, !dbg !6681

if.then:                                          ; preds = %entry
  %8 = load i64, i64* %unadjusted_alignment, align 8, !dbg !6682
  %cmp5 = icmp ugt i64 %8, 0, !dbg !6685
  br i1 %cmp5, label %if.then7, label %if.else, !dbg !6686

if.then7:                                         ; preds = %if.then
  %9 = load i32, i32* %preferred_unit_stack_boundary.addr, align 4, !dbg !6687
  %conv8 = zext i32 %9 to i64, !dbg !6687
  %10 = load i64, i64* %unadjusted_alignment, align 8, !dbg !6688
  %sub9 = sub i64 %conv8, %10, !dbg !6689
  %11 = load i64, i64* %adjustment, align 8, !dbg !6690
  %sub10 = sub i64 %11, %sub9, !dbg !6690
  store i64 %sub10, i64* %adjustment, align 8, !dbg !6690
  br label %if.end, !dbg !6691

if.else:                                          ; preds = %if.then
  %12 = load i64, i64* %unadjusted_alignment, align 8, !dbg !6692
  %13 = load i64, i64* %adjustment, align 8, !dbg !6693
  %add11 = add i64 %13, %12, !dbg !6693
  store i64 %add11, i64* %adjustment, align 8, !dbg !6693
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then7
  br label %if.end12, !dbg !6694

if.end12:                                         ; preds = %if.end, %entry
  %14 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !6695
  %conv13 = sext i32 %14 to i64, !dbg !6695
  %15 = load i64, i64* %adjustment, align 8, !dbg !6696
  %sub14 = sub nsw i64 %conv13, %15, !dbg !6697
  %16 = load i32, i32* %unadjusted_args_size.addr, align 4, !dbg !6698
  %conv15 = sext i32 %16 to i64, !dbg !6698
  %add16 = add nsw i64 %sub14, %conv15, !dbg !6699
  %17 = load %struct.args_size*, %struct.args_size** %args_size.addr, align 8, !dbg !6700
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %17, i32 0, i32 0, !dbg !6701
  store i64 %add16, i64* %constant, align 8, !dbg !6702
  %18 = load i64, i64* %adjustment, align 8, !dbg !6703
  %conv17 = trunc i64 %18 to i32, !dbg !6703
  ret i32 %conv17, !dbg !6704
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.rtx_def* @allocate_dynamic_stack_space(%struct.rtx_def*, %struct.rtx_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @compute_argument_addresses(%struct.arg_data* %args, %struct.rtx_def* %argblock, i32 %num_actuals) #0 !dbg !6705 {
entry:
  %args.addr = alloca %struct.arg_data*, align 8
  %argblock.addr = alloca %struct.rtx_def*, align 8
  %num_actuals.addr = alloca i32, align 4
  %arg_reg = alloca %struct.rtx_def*, align 8
  %i = alloca i32, align 4
  %arg_offset = alloca i32, align 4
  %offset = alloca %struct.rtx_def*, align 8
  %slot_offset = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %align = alloca i32, align 4
  %boundary = alloca i32, align 4
  %units_on_stack = alloca i32, align 4
  %partial_mode = alloca i32, align 4
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !6708, metadata !DIExpression()), !dbg !6709
  store %struct.rtx_def* %argblock, %struct.rtx_def** %argblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock.addr, metadata !6710, metadata !DIExpression()), !dbg !6711
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !6712, metadata !DIExpression()), !dbg !6713
  %0 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !6714
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !6714
  br i1 %tobool, label %if.then, label %if.end242, !dbg !6716

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %arg_reg, metadata !6717, metadata !DIExpression()), !dbg !6719
  %1 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !6720
  store %struct.rtx_def* %1, %struct.rtx_def** %arg_reg, align 8, !dbg !6719
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6721, metadata !DIExpression()), !dbg !6722
  call void @llvm.dbg.declare(metadata i32* %arg_offset, metadata !6723, metadata !DIExpression()), !dbg !6724
  store i32 0, i32* %arg_offset, align 4, !dbg !6724
  %2 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !6725
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6725
  %bf.load = load i32, i32* %3, align 8, !dbg !6725
  %bf.clear = and i32 %bf.load, 65535, !dbg !6725
  %cmp = icmp eq i32 %bf.clear, 49, !dbg !6727
  br i1 %cmp, label %if.then1, label %if.end, !dbg !6728

if.then1:                                         ; preds = %if.then
  %4 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !6729
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6729
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6729
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6729
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6729
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6729
  store %struct.rtx_def* %5, %struct.rtx_def** %arg_reg, align 8, !dbg !6730
  %6 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !6731
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !6731
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !6731
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !6731
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !6731
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !6731
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !6731
  %hwint = bitcast %union.u* %u6 to [1 x i64]*, !dbg !6731
  %arrayidx7 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6731
  %8 = load i64, i64* %arrayidx7, align 8, !dbg !6731
  %conv = trunc i64 %8 to i32, !dbg !6731
  store i32 %conv, i32* %arg_offset, align 4, !dbg !6732
  br label %if.end, !dbg !6733

if.end:                                           ; preds = %if.then1, %if.then
  store i32 0, i32* %i, align 4, !dbg !6734
  br label %for.cond, !dbg !6736

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load i32, i32* %i, align 4, !dbg !6737
  %10 = load i32, i32* %num_actuals.addr, align 4, !dbg !6739
  %cmp8 = icmp slt i32 %9, %10, !dbg !6740
  br i1 %cmp8, label %for.body, label %for.end, !dbg !6741

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %offset, metadata !6742, metadata !DIExpression()), !dbg !6744
  %11 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %12 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom = sext i32 %12 to i64, !dbg !6745
  %arrayidx10 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %11, i64 %idxprom, !dbg !6745
  %locate = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx10, i32 0, i32 10, !dbg !6745
  %offset11 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 1, !dbg !6745
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %offset11, i32 0, i32 1, !dbg !6745
  %13 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !6745
  %cmp12 = icmp eq %union.tree_node* %13, null, !dbg !6745
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !6745

cond.true:                                        ; preds = %for.body
  %14 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %15 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom14 = sext i32 %15 to i64, !dbg !6745
  %arrayidx15 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %14, i64 %idxprom14, !dbg !6745
  %locate16 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx15, i32 0, i32 10, !dbg !6745
  %offset17 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate16, i32 0, i32 1, !dbg !6745
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %offset17, i32 0, i32 0, !dbg !6745
  %16 = load i64, i64* %constant, align 8, !dbg !6745
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %16), !dbg !6745
  br label %cond.end47, !dbg !6745

cond.false:                                       ; preds = %for.body
  %17 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %18 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom18 = sext i32 %18 to i64, !dbg !6745
  %arrayidx19 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %17, i64 %idxprom18, !dbg !6745
  %locate20 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx19, i32 0, i32 10, !dbg !6745
  %offset21 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate20, i32 0, i32 1, !dbg !6745
  %var22 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset21, i32 0, i32 1, !dbg !6745
  %19 = load %union.tree_node*, %union.tree_node** %var22, align 8, !dbg !6745
  %cmp23 = icmp eq %union.tree_node* %19, null, !dbg !6745
  br i1 %cmp23, label %cond.true25, label %cond.false32, !dbg !6745

cond.true25:                                      ; preds = %cond.false
  %20 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %21 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom26 = sext i32 %21 to i64, !dbg !6745
  %arrayidx27 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %20, i64 %idxprom26, !dbg !6745
  %locate28 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx27, i32 0, i32 10, !dbg !6745
  %offset29 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate28, i32 0, i32 1, !dbg !6745
  %constant30 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset29, i32 0, i32 0, !dbg !6745
  %22 = load i64, i64* %constant30, align 8, !dbg !6745
  %call31 = call %union.tree_node* @size_int_kind(i64 %22, i32 1), !dbg !6745
  br label %cond.end, !dbg !6745

cond.false32:                                     ; preds = %cond.false
  %23 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !6745
  %24 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %25 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom33 = sext i32 %25 to i64, !dbg !6745
  %arrayidx34 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %24, i64 %idxprom33, !dbg !6745
  %locate35 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx34, i32 0, i32 10, !dbg !6745
  %offset36 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate35, i32 0, i32 1, !dbg !6745
  %var37 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset36, i32 0, i32 1, !dbg !6745
  %26 = load %union.tree_node*, %union.tree_node** %var37, align 8, !dbg !6745
  %call38 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %23, %union.tree_node* %26), !dbg !6745
  %27 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6745
  %28 = load i32, i32* %i, align 4, !dbg !6745
  %idxprom39 = sext i32 %28 to i64, !dbg !6745
  %arrayidx40 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %27, i64 %idxprom39, !dbg !6745
  %locate41 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx40, i32 0, i32 10, !dbg !6745
  %offset42 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate41, i32 0, i32 1, !dbg !6745
  %constant43 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset42, i32 0, i32 0, !dbg !6745
  %29 = load i64, i64* %constant43, align 8, !dbg !6745
  %call44 = call %union.tree_node* @size_int_kind(i64 %29, i32 1), !dbg !6745
  %call45 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call38, %union.tree_node* %call44), !dbg !6745
  br label %cond.end, !dbg !6745

cond.end:                                         ; preds = %cond.false32, %cond.true25
  %cond = phi %union.tree_node* [ %call31, %cond.true25 ], [ %call45, %cond.false32 ], !dbg !6745
  %call46 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond), !dbg !6745
  br label %cond.end47, !dbg !6745

cond.end47:                                       ; preds = %cond.end, %cond.true
  %cond48 = phi %struct.rtx_def* [ %call, %cond.true ], [ %call46, %cond.end ], !dbg !6745
  store %struct.rtx_def* %cond48, %struct.rtx_def** %offset, align 8, !dbg !6744
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %slot_offset, metadata !6746, metadata !DIExpression()), !dbg !6747
  %30 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %31 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom49 = sext i32 %31 to i64, !dbg !6748
  %arrayidx50 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %30, i64 %idxprom49, !dbg !6748
  %locate51 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx50, i32 0, i32 10, !dbg !6748
  %slot_offset52 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate51, i32 0, i32 2, !dbg !6748
  %var53 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset52, i32 0, i32 1, !dbg !6748
  %32 = load %union.tree_node*, %union.tree_node** %var53, align 8, !dbg !6748
  %cmp54 = icmp eq %union.tree_node* %32, null, !dbg !6748
  br i1 %cmp54, label %cond.true56, label %cond.false63, !dbg !6748

cond.true56:                                      ; preds = %cond.end47
  %33 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %34 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom57 = sext i32 %34 to i64, !dbg !6748
  %arrayidx58 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %33, i64 %idxprom57, !dbg !6748
  %locate59 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx58, i32 0, i32 10, !dbg !6748
  %slot_offset60 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate59, i32 0, i32 2, !dbg !6748
  %constant61 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset60, i32 0, i32 0, !dbg !6748
  %35 = load i64, i64* %constant61, align 8, !dbg !6748
  %call62 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %35), !dbg !6748
  br label %cond.end95, !dbg !6748

cond.false63:                                     ; preds = %cond.end47
  %36 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %37 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom64 = sext i32 %37 to i64, !dbg !6748
  %arrayidx65 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %36, i64 %idxprom64, !dbg !6748
  %locate66 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx65, i32 0, i32 10, !dbg !6748
  %slot_offset67 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate66, i32 0, i32 2, !dbg !6748
  %var68 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset67, i32 0, i32 1, !dbg !6748
  %38 = load %union.tree_node*, %union.tree_node** %var68, align 8, !dbg !6748
  %cmp69 = icmp eq %union.tree_node* %38, null, !dbg !6748
  br i1 %cmp69, label %cond.true71, label %cond.false78, !dbg !6748

cond.true71:                                      ; preds = %cond.false63
  %39 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %40 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom72 = sext i32 %40 to i64, !dbg !6748
  %arrayidx73 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %39, i64 %idxprom72, !dbg !6748
  %locate74 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx73, i32 0, i32 10, !dbg !6748
  %slot_offset75 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate74, i32 0, i32 2, !dbg !6748
  %constant76 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset75, i32 0, i32 0, !dbg !6748
  %41 = load i64, i64* %constant76, align 8, !dbg !6748
  %call77 = call %union.tree_node* @size_int_kind(i64 %41, i32 1), !dbg !6748
  br label %cond.end92, !dbg !6748

cond.false78:                                     ; preds = %cond.false63
  %42 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !6748
  %43 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %44 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom79 = sext i32 %44 to i64, !dbg !6748
  %arrayidx80 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %43, i64 %idxprom79, !dbg !6748
  %locate81 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx80, i32 0, i32 10, !dbg !6748
  %slot_offset82 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate81, i32 0, i32 2, !dbg !6748
  %var83 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset82, i32 0, i32 1, !dbg !6748
  %45 = load %union.tree_node*, %union.tree_node** %var83, align 8, !dbg !6748
  %call84 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %42, %union.tree_node* %45), !dbg !6748
  %46 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6748
  %47 = load i32, i32* %i, align 4, !dbg !6748
  %idxprom85 = sext i32 %47 to i64, !dbg !6748
  %arrayidx86 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %46, i64 %idxprom85, !dbg !6748
  %locate87 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx86, i32 0, i32 10, !dbg !6748
  %slot_offset88 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate87, i32 0, i32 2, !dbg !6748
  %constant89 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset88, i32 0, i32 0, !dbg !6748
  %48 = load i64, i64* %constant89, align 8, !dbg !6748
  %call90 = call %union.tree_node* @size_int_kind(i64 %48, i32 1), !dbg !6748
  %call91 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call84, %union.tree_node* %call90), !dbg !6748
  br label %cond.end92, !dbg !6748

cond.end92:                                       ; preds = %cond.false78, %cond.true71
  %cond93 = phi %union.tree_node* [ %call77, %cond.true71 ], [ %call91, %cond.false78 ], !dbg !6748
  %call94 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond93), !dbg !6748
  br label %cond.end95, !dbg !6748

cond.end95:                                       ; preds = %cond.end92, %cond.true56
  %cond96 = phi %struct.rtx_def* [ %call62, %cond.true56 ], [ %call94, %cond.end92 ], !dbg !6748
  store %struct.rtx_def* %cond96, %struct.rtx_def** %slot_offset, align 8, !dbg !6747
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !6749, metadata !DIExpression()), !dbg !6750
  call void @llvm.dbg.declare(metadata i32* %align, metadata !6751, metadata !DIExpression()), !dbg !6752
  call void @llvm.dbg.declare(metadata i32* %boundary, metadata !6753, metadata !DIExpression()), !dbg !6754
  call void @llvm.dbg.declare(metadata i32* %units_on_stack, metadata !6755, metadata !DIExpression()), !dbg !6756
  store i32 0, i32* %units_on_stack, align 4, !dbg !6756
  call void @llvm.dbg.declare(metadata i32* %partial_mode, metadata !6757, metadata !DIExpression()), !dbg !6758
  store i32 0, i32* %partial_mode, align 4, !dbg !6758
  %49 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6759
  %50 = load i32, i32* %i, align 4, !dbg !6761
  %idxprom97 = sext i32 %50 to i64, !dbg !6759
  %arrayidx98 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %49, i64 %idxprom97, !dbg !6759
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx98, i32 0, i32 9, !dbg !6762
  %51 = load i32, i32* %pass_on_stack, align 8, !dbg !6762
  %tobool99 = icmp ne i32 %51, 0, !dbg !6759
  br i1 %tobool99, label %if.end110, label %land.lhs.true, !dbg !6763

land.lhs.true:                                    ; preds = %cond.end95
  %52 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6764
  %53 = load i32, i32* %i, align 4, !dbg !6765
  %idxprom100 = sext i32 %53 to i64, !dbg !6764
  %arrayidx101 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %52, i64 %idxprom100, !dbg !6764
  %reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx101, i32 0, i32 4, !dbg !6766
  %54 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !6766
  %cmp102 = icmp ne %struct.rtx_def* %54, null, !dbg !6767
  br i1 %cmp102, label %land.lhs.true104, label %if.end110, !dbg !6768

land.lhs.true104:                                 ; preds = %land.lhs.true
  %55 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6769
  %56 = load i32, i32* %i, align 4, !dbg !6770
  %idxprom105 = sext i32 %56 to i64, !dbg !6769
  %arrayidx106 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %55, i64 %idxprom105, !dbg !6769
  %partial = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx106, i32 0, i32 8, !dbg !6771
  %57 = load i32, i32* %partial, align 4, !dbg !6771
  %cmp107 = icmp eq i32 %57, 0, !dbg !6772
  br i1 %cmp107, label %if.then109, label %if.end110, !dbg !6773

if.then109:                                       ; preds = %land.lhs.true104
  br label %for.inc, !dbg !6774

if.end110:                                        ; preds = %land.lhs.true104, %land.lhs.true, %cond.end95
  %58 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6775
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !6775
  %bf.load111 = load i32, i32* %59, align 8, !dbg !6775
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !6775
  %cmp113 = icmp eq i32 %bf.clear112, 30, !dbg !6775
  br i1 %cmp113, label %if.then115, label %if.else, !dbg !6777

if.then115:                                       ; preds = %if.end110
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arg_reg, align 8, !dbg !6778
  %61 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6779
  %u116 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !6779
  %hwint117 = bitcast %union.u* %u116 to [1 x i64]*, !dbg !6779
  %arrayidx118 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint117, i64 0, i64 0, !dbg !6779
  %62 = load i64, i64* %arrayidx118, align 8, !dbg !6779
  %call119 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %60, i64 %62), !dbg !6780
  store %struct.rtx_def* %call119, %struct.rtx_def** %addr, align 8, !dbg !6781
  br label %if.end121, !dbg !6782

if.else:                                          ; preds = %if.end110
  %63 = load %struct.rtx_def*, %struct.rtx_def** %arg_reg, align 8, !dbg !6783
  %64 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6783
  %call120 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 16, %struct.rtx_def* %63, %struct.rtx_def* %64), !dbg !6783
  store %struct.rtx_def* %call120, %struct.rtx_def** %addr, align 8, !dbg !6784
  br label %if.end121

if.end121:                                        ; preds = %if.else, %if.then115
  %65 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6785
  %66 = load i32, i32* %arg_offset, align 4, !dbg !6786
  %conv122 = sext i32 %66 to i64, !dbg !6786
  %call123 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %65, i64 %conv122), !dbg !6787
  store %struct.rtx_def* %call123, %struct.rtx_def** %addr, align 8, !dbg !6788
  %67 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6789
  %68 = load i32, i32* %i, align 4, !dbg !6791
  %idxprom124 = sext i32 %68 to i64, !dbg !6789
  %arrayidx125 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %67, i64 %idxprom124, !dbg !6789
  %partial126 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx125, i32 0, i32 8, !dbg !6792
  %69 = load i32, i32* %partial126, align 4, !dbg !6792
  %cmp127 = icmp ne i32 %69, 0, !dbg !6793
  br i1 %cmp127, label %if.then129, label %if.else144, !dbg !6794

if.then129:                                       ; preds = %if.end121
  %70 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6795
  %71 = load i32, i32* %i, align 4, !dbg !6797
  %idxprom130 = sext i32 %71 to i64, !dbg !6795
  %arrayidx131 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %70, i64 %idxprom130, !dbg !6795
  %locate132 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx131, i32 0, i32 10, !dbg !6798
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate132, i32 0, i32 0, !dbg !6799
  %constant133 = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !6800
  %72 = load i64, i64* %constant133, align 8, !dbg !6800
  %conv134 = trunc i64 %72 to i32, !dbg !6795
  store i32 %conv134, i32* %units_on_stack, align 4, !dbg !6801
  %73 = load i32, i32* %units_on_stack, align 4, !dbg !6802
  %mul = mul i32 %73, 8, !dbg !6803
  %call135 = call i32 @mode_for_size(i32 %mul, i32 2, i32 1), !dbg !6804
  store i32 %call135, i32* %partial_mode, align 4, !dbg !6805
  %74 = load i32, i32* %partial_mode, align 4, !dbg !6806
  %75 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6807
  %call136 = call %struct.rtx_def* @gen_rtx_MEM(i32 %74, %struct.rtx_def* %75), !dbg !6808
  %76 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6809
  %77 = load i32, i32* %i, align 4, !dbg !6810
  %idxprom137 = sext i32 %77 to i64, !dbg !6809
  %arrayidx138 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %76, i64 %idxprom137, !dbg !6809
  %stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx138, i32 0, i32 11, !dbg !6811
  store %struct.rtx_def* %call136, %struct.rtx_def** %stack, align 8, !dbg !6812
  %78 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6813
  %79 = load i32, i32* %i, align 4, !dbg !6814
  %idxprom139 = sext i32 %79 to i64, !dbg !6813
  %arrayidx140 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %78, i64 %idxprom139, !dbg !6813
  %stack141 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx140, i32 0, i32 11, !dbg !6815
  %80 = load %struct.rtx_def*, %struct.rtx_def** %stack141, align 8, !dbg !6815
  %81 = load i32, i32* %units_on_stack, align 4, !dbg !6816
  %conv142 = zext i32 %81 to i64, !dbg !6816
  %call143 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv142), !dbg !6816
  call void @set_mem_size(%struct.rtx_def* %80, %struct.rtx_def* %call143), !dbg !6817
  br label %if.end156, !dbg !6818

if.else144:                                       ; preds = %if.end121
  %82 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6819
  %83 = load i32, i32* %i, align 4, !dbg !6821
  %idxprom145 = sext i32 %83 to i64, !dbg !6819
  %arrayidx146 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %82, i64 %idxprom145, !dbg !6819
  %mode = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx146, i32 0, i32 1, !dbg !6822
  %84 = load i32, i32* %mode, align 8, !dbg !6822
  %85 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6823
  %call147 = call %struct.rtx_def* @gen_rtx_MEM(i32 %84, %struct.rtx_def* %85), !dbg !6824
  %86 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6825
  %87 = load i32, i32* %i, align 4, !dbg !6826
  %idxprom148 = sext i32 %87 to i64, !dbg !6825
  %arrayidx149 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %86, i64 %idxprom148, !dbg !6825
  %stack150 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx149, i32 0, i32 11, !dbg !6827
  store %struct.rtx_def* %call147, %struct.rtx_def** %stack150, align 8, !dbg !6828
  %88 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6829
  %89 = load i32, i32* %i, align 4, !dbg !6830
  %idxprom151 = sext i32 %89 to i64, !dbg !6829
  %arrayidx152 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %88, i64 %idxprom151, !dbg !6829
  %stack153 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx152, i32 0, i32 11, !dbg !6831
  %90 = load %struct.rtx_def*, %struct.rtx_def** %stack153, align 8, !dbg !6831
  %91 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6832
  %92 = load i32, i32* %i, align 4, !dbg !6832
  %idxprom154 = sext i32 %92 to i64, !dbg !6832
  %arrayidx155 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %91, i64 %idxprom154, !dbg !6832
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx155, i32 0, i32 0, !dbg !6832
  %93 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !6832
  %common = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !6832
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !6832
  %94 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !6832
  call void @set_mem_attributes(%struct.rtx_def* %90, %union.tree_node* %94, i32 1), !dbg !6833
  br label %if.end156

if.end156:                                        ; preds = %if.else144, %if.then129
  store i32 8, i32* %align, align 4, !dbg !6834
  %95 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6835
  %96 = load i32, i32* %i, align 4, !dbg !6836
  %idxprom157 = sext i32 %96 to i64, !dbg !6835
  %arrayidx158 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %95, i64 %idxprom157, !dbg !6835
  %locate159 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx158, i32 0, i32 10, !dbg !6837
  %boundary160 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate159, i32 0, i32 5, !dbg !6838
  %97 = load i32, i32* %boundary160, align 4, !dbg !6838
  store i32 %97, i32* %boundary, align 4, !dbg !6839
  %98 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6840
  %99 = load i32, i32* %i, align 4, !dbg !6842
  %idxprom161 = sext i32 %99 to i64, !dbg !6840
  %arrayidx162 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %98, i64 %idxprom161, !dbg !6840
  %locate163 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx162, i32 0, i32 10, !dbg !6843
  %where_pad = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate163, i32 0, i32 4, !dbg !6844
  %100 = load i32, i32* %where_pad, align 8, !dbg !6844
  %cmp164 = icmp ne i32 %100, 2, !dbg !6845
  br i1 %cmp164, label %if.then166, label %if.else167, !dbg !6846

if.then166:                                       ; preds = %if.end156
  %101 = load i32, i32* %boundary, align 4, !dbg !6847
  store i32 %101, i32* %align, align 4, !dbg !6848
  br label %if.end180, !dbg !6849

if.else167:                                       ; preds = %if.end156
  %102 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6850
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !6850
  %bf.load168 = load i32, i32* %103, align 8, !dbg !6850
  %bf.clear169 = and i32 %bf.load168, 65535, !dbg !6850
  %cmp170 = icmp eq i32 %bf.clear169, 30, !dbg !6850
  br i1 %cmp170, label %if.then172, label %if.end179, !dbg !6852

if.then172:                                       ; preds = %if.else167
  %104 = load %struct.rtx_def*, %struct.rtx_def** %offset, align 8, !dbg !6853
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !6853
  %hwint174 = bitcast %union.u* %u173 to [1 x i64]*, !dbg !6853
  %arrayidx175 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint174, i64 0, i64 0, !dbg !6853
  %105 = load i64, i64* %arrayidx175, align 8, !dbg !6853
  %mul176 = mul nsw i64 %105, 8, !dbg !6855
  %106 = load i32, i32* %boundary, align 4, !dbg !6856
  %conv177 = zext i32 %106 to i64, !dbg !6856
  %or = or i64 %mul176, %conv177, !dbg !6857
  %conv178 = trunc i64 %or to i32, !dbg !6853
  store i32 %conv178, i32* %align, align 4, !dbg !6858
  %107 = load i32, i32* %align, align 4, !dbg !6859
  %108 = load i32, i32* %align, align 4, !dbg !6860
  %sub = sub i32 0, %108, !dbg !6861
  %and = and i32 %107, %sub, !dbg !6862
  store i32 %and, i32* %align, align 4, !dbg !6863
  br label %if.end179, !dbg !6864

if.end179:                                        ; preds = %if.then172, %if.else167
  br label %if.end180

if.end180:                                        ; preds = %if.end179, %if.then166
  %109 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6865
  %110 = load i32, i32* %i, align 4, !dbg !6866
  %idxprom181 = sext i32 %110 to i64, !dbg !6865
  %arrayidx182 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %109, i64 %idxprom181, !dbg !6865
  %stack183 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx182, i32 0, i32 11, !dbg !6867
  %111 = load %struct.rtx_def*, %struct.rtx_def** %stack183, align 8, !dbg !6867
  %112 = load i32, i32* %align, align 4, !dbg !6868
  call void @set_mem_align(%struct.rtx_def* %111, i32 %112), !dbg !6869
  %113 = load %struct.rtx_def*, %struct.rtx_def** %slot_offset, align 8, !dbg !6870
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !6870
  %bf.load184 = load i32, i32* %114, align 8, !dbg !6870
  %bf.clear185 = and i32 %bf.load184, 65535, !dbg !6870
  %cmp186 = icmp eq i32 %bf.clear185, 30, !dbg !6870
  br i1 %cmp186, label %if.then188, label %if.else193, !dbg !6872

if.then188:                                       ; preds = %if.end180
  %115 = load %struct.rtx_def*, %struct.rtx_def** %arg_reg, align 8, !dbg !6873
  %116 = load %struct.rtx_def*, %struct.rtx_def** %slot_offset, align 8, !dbg !6874
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !6874
  %hwint190 = bitcast %union.u* %u189 to [1 x i64]*, !dbg !6874
  %arrayidx191 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint190, i64 0, i64 0, !dbg !6874
  %117 = load i64, i64* %arrayidx191, align 8, !dbg !6874
  %call192 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %115, i64 %117), !dbg !6875
  store %struct.rtx_def* %call192, %struct.rtx_def** %addr, align 8, !dbg !6876
  br label %if.end195, !dbg !6877

if.else193:                                       ; preds = %if.end180
  %118 = load %struct.rtx_def*, %struct.rtx_def** %arg_reg, align 8, !dbg !6878
  %119 = load %struct.rtx_def*, %struct.rtx_def** %slot_offset, align 8, !dbg !6878
  %call194 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 16, %struct.rtx_def* %118, %struct.rtx_def* %119), !dbg !6878
  store %struct.rtx_def* %call194, %struct.rtx_def** %addr, align 8, !dbg !6879
  br label %if.end195

if.end195:                                        ; preds = %if.else193, %if.then188
  %120 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6880
  %121 = load i32, i32* %arg_offset, align 4, !dbg !6881
  %conv196 = sext i32 %121 to i64, !dbg !6881
  %call197 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %120, i64 %conv196), !dbg !6882
  store %struct.rtx_def* %call197, %struct.rtx_def** %addr, align 8, !dbg !6883
  %122 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6884
  %123 = load i32, i32* %i, align 4, !dbg !6886
  %idxprom198 = sext i32 %123 to i64, !dbg !6884
  %arrayidx199 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %122, i64 %idxprom198, !dbg !6884
  %partial200 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx199, i32 0, i32 8, !dbg !6887
  %124 = load i32, i32* %partial200, align 4, !dbg !6887
  %cmp201 = icmp ne i32 %124, 0, !dbg !6888
  br i1 %cmp201, label %if.then203, label %if.else212, !dbg !6889

if.then203:                                       ; preds = %if.end195
  %125 = load i32, i32* %partial_mode, align 4, !dbg !6890
  %126 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6892
  %call204 = call %struct.rtx_def* @gen_rtx_MEM(i32 %125, %struct.rtx_def* %126), !dbg !6893
  %127 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6894
  %128 = load i32, i32* %i, align 4, !dbg !6895
  %idxprom205 = sext i32 %128 to i64, !dbg !6894
  %arrayidx206 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %127, i64 %idxprom205, !dbg !6894
  %stack_slot = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx206, i32 0, i32 12, !dbg !6896
  store %struct.rtx_def* %call204, %struct.rtx_def** %stack_slot, align 8, !dbg !6897
  %129 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6898
  %130 = load i32, i32* %i, align 4, !dbg !6899
  %idxprom207 = sext i32 %130 to i64, !dbg !6898
  %arrayidx208 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %129, i64 %idxprom207, !dbg !6898
  %stack_slot209 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx208, i32 0, i32 12, !dbg !6900
  %131 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot209, align 8, !dbg !6900
  %132 = load i32, i32* %units_on_stack, align 4, !dbg !6901
  %conv210 = zext i32 %132 to i64, !dbg !6901
  %call211 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv210), !dbg !6901
  call void @set_mem_size(%struct.rtx_def* %131, %struct.rtx_def* %call211), !dbg !6902
  br label %if.end228, !dbg !6903

if.else212:                                       ; preds = %if.end195
  %133 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6904
  %134 = load i32, i32* %i, align 4, !dbg !6906
  %idxprom213 = sext i32 %134 to i64, !dbg !6904
  %arrayidx214 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %133, i64 %idxprom213, !dbg !6904
  %mode215 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx214, i32 0, i32 1, !dbg !6907
  %135 = load i32, i32* %mode215, align 8, !dbg !6907
  %136 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6908
  %call216 = call %struct.rtx_def* @gen_rtx_MEM(i32 %135, %struct.rtx_def* %136), !dbg !6909
  %137 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6910
  %138 = load i32, i32* %i, align 4, !dbg !6911
  %idxprom217 = sext i32 %138 to i64, !dbg !6910
  %arrayidx218 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %137, i64 %idxprom217, !dbg !6910
  %stack_slot219 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx218, i32 0, i32 12, !dbg !6912
  store %struct.rtx_def* %call216, %struct.rtx_def** %stack_slot219, align 8, !dbg !6913
  %139 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6914
  %140 = load i32, i32* %i, align 4, !dbg !6915
  %idxprom220 = sext i32 %140 to i64, !dbg !6914
  %arrayidx221 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %139, i64 %idxprom220, !dbg !6914
  %stack_slot222 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx221, i32 0, i32 12, !dbg !6916
  %141 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot222, align 8, !dbg !6916
  %142 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6917
  %143 = load i32, i32* %i, align 4, !dbg !6917
  %idxprom223 = sext i32 %143 to i64, !dbg !6917
  %arrayidx224 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %142, i64 %idxprom223, !dbg !6917
  %tree_value225 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx224, i32 0, i32 0, !dbg !6917
  %144 = load %union.tree_node*, %union.tree_node** %tree_value225, align 8, !dbg !6917
  %common226 = bitcast %union.tree_node* %144 to %struct.tree_common*, !dbg !6917
  %type227 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common226, i32 0, i32 2, !dbg !6917
  %145 = load %union.tree_node*, %union.tree_node** %type227, align 8, !dbg !6917
  call void @set_mem_attributes(%struct.rtx_def* %141, %union.tree_node* %145, i32 1), !dbg !6918
  br label %if.end228

if.end228:                                        ; preds = %if.else212, %if.then203
  %146 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6919
  %147 = load i32, i32* %i, align 4, !dbg !6920
  %idxprom229 = sext i32 %147 to i64, !dbg !6919
  %arrayidx230 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %146, i64 %idxprom229, !dbg !6919
  %stack_slot231 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx230, i32 0, i32 12, !dbg !6921
  %148 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot231, align 8, !dbg !6921
  %149 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6922
  %150 = load i32, i32* %i, align 4, !dbg !6923
  %idxprom232 = sext i32 %150 to i64, !dbg !6922
  %arrayidx233 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %149, i64 %idxprom232, !dbg !6922
  %locate234 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx233, i32 0, i32 10, !dbg !6924
  %boundary235 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate234, i32 0, i32 5, !dbg !6925
  %151 = load i32, i32* %boundary235, align 4, !dbg !6925
  call void @set_mem_align(%struct.rtx_def* %148, i32 %151), !dbg !6926
  %152 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6927
  %153 = load i32, i32* %i, align 4, !dbg !6928
  %idxprom236 = sext i32 %153 to i64, !dbg !6927
  %arrayidx237 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %152, i64 %idxprom236, !dbg !6927
  %stack238 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx237, i32 0, i32 11, !dbg !6929
  %154 = load %struct.rtx_def*, %struct.rtx_def** %stack238, align 8, !dbg !6929
  call void @set_mem_alias_set(%struct.rtx_def* %154, i32 0), !dbg !6930
  %155 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !6931
  %156 = load i32, i32* %i, align 4, !dbg !6932
  %idxprom239 = sext i32 %156 to i64, !dbg !6931
  %arrayidx240 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %155, i64 %idxprom239, !dbg !6931
  %stack_slot241 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx240, i32 0, i32 12, !dbg !6933
  %157 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot241, align 8, !dbg !6933
  call void @set_mem_alias_set(%struct.rtx_def* %157, i32 0), !dbg !6934
  br label %for.inc, !dbg !6935

for.inc:                                          ; preds = %if.end228, %if.then109
  %158 = load i32, i32* %i, align 4, !dbg !6936
  %inc = add nsw i32 %158, 1, !dbg !6936
  store i32 %inc, i32* %i, align 4, !dbg !6936
  br label %for.cond, !dbg !6937, !llvm.loop !6938

for.end:                                          ; preds = %for.cond
  br label %if.end242, !dbg !6940

if.end242:                                        ; preds = %for.end, %entry
  ret void, !dbg !6941
}

declare dso_local void @anti_adjust_stack(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @rtx_for_function_call(%union.tree_node* %fndecl, %union.tree_node* %addr) #0 !dbg !6942 {
entry:
  %fndecl.addr = alloca %union.tree_node*, align 8
  %addr.addr = alloca %union.tree_node*, align 8
  %funexp = alloca %struct.rtx_def*, align 8
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !6945, metadata !DIExpression()), !dbg !6946
  store %union.tree_node* %addr, %union.tree_node** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %addr.addr, metadata !6947, metadata !DIExpression()), !dbg !6948
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %funexp, metadata !6949, metadata !DIExpression()), !dbg !6950
  %0 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6951
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !6951
  br i1 %tobool, label %if.then, label %if.else, !dbg !6953

if.then:                                          ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6954
  %base = bitcast %union.tree_node* %1 to %struct.tree_base*, !dbg !6954
  %2 = bitcast %struct.tree_base* %base to i64*, !dbg !6954
  %bf.load = load i64, i64* %2, align 8, !dbg !6954
  %bf.lshr = lshr i64 %bf.load, 24, !dbg !6954
  %bf.clear = and i64 %bf.lshr, 1, !dbg !6954
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !6954
  %tobool1 = icmp ne i32 %bf.cast, 0, !dbg !6954
  br i1 %tobool1, label %if.end, label %land.lhs.true, !dbg !6957

land.lhs.true:                                    ; preds = %if.then
  %3 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6958
  %4 = load %union.tree_node*, %union.tree_node** @current_function_decl, align 8, !dbg !6959
  %cmp = icmp ne %union.tree_node* %3, %4, !dbg !6960
  br i1 %cmp, label %if.then2, label %if.end, !dbg !6961

if.then2:                                         ; preds = %land.lhs.true
  %5 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6962
  call void @assemble_external(%union.tree_node* %5), !dbg !6964
  %6 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6965
  %base3 = bitcast %union.tree_node* %6 to %struct.tree_base*, !dbg !6965
  %7 = bitcast %struct.tree_base* %base3 to i64*, !dbg !6965
  %bf.load4 = load i64, i64* %7, align 8, !dbg !6966
  %bf.clear5 = and i64 %bf.load4, -16777217, !dbg !6966
  %bf.set = or i64 %bf.clear5, 16777216, !dbg !6966
  store i64 %bf.set, i64* %7, align 8, !dbg !6966
  br label %if.end, !dbg !6967

if.end:                                           ; preds = %if.then2, %land.lhs.true, %if.then
  %8 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6968
  %decl_with_rtl = bitcast %union.tree_node* %8 to %struct.tree_decl_with_rtl*, !dbg !6968
  %rtl = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl, i32 0, i32 1, !dbg !6968
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rtl, align 8, !dbg !6968
  %tobool6 = icmp ne %struct.rtx_def* %9, null, !dbg !6968
  br i1 %tobool6, label %cond.true, label %cond.false, !dbg !6968

cond.true:                                        ; preds = %if.end
  %10 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6968
  %decl_with_rtl7 = bitcast %union.tree_node* %10 to %struct.tree_decl_with_rtl*, !dbg !6968
  %rtl8 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl7, i32 0, i32 1, !dbg !6968
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rtl8, align 8, !dbg !6968
  br label %cond.end, !dbg !6968

cond.false:                                       ; preds = %if.end
  %12 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6968
  call void @make_decl_rtl(%union.tree_node* %12), !dbg !6968
  %13 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !6968
  %decl_with_rtl9 = bitcast %union.tree_node* %13 to %struct.tree_decl_with_rtl*, !dbg !6968
  %rtl10 = getelementptr inbounds %struct.tree_decl_with_rtl, %struct.tree_decl_with_rtl* %decl_with_rtl9, i32 0, i32 1, !dbg !6968
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rtl10, align 8, !dbg !6968
  br label %cond.end, !dbg !6968

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %11, %cond.true ], [ %14, %cond.false ], !dbg !6968
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %cond, i32 0, i32 1, !dbg !6968
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6968
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6968
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6968
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6968
  store %struct.rtx_def* %15, %struct.rtx_def** %funexp, align 8, !dbg !6969
  br label %if.end11, !dbg !6970

if.else:                                          ; preds = %entry
  call void @push_temp_slots(), !dbg !6971
  %16 = load %union.tree_node*, %union.tree_node** %addr.addr, align 8, !dbg !6973
  %call = call %struct.rtx_def* @expand_normal(%union.tree_node* %16), !dbg !6974
  store %struct.rtx_def* %call, %struct.rtx_def** %funexp, align 8, !dbg !6975
  call void @pop_temp_slots(), !dbg !6976
  br label %if.end11

if.end11:                                         ; preds = %if.else, %cond.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %funexp, align 8, !dbg !6977
  ret %struct.rtx_def* %17, !dbg !6978
}

declare dso_local %struct.rtx_def* @hard_function_value(%union.tree_node*, %union.tree_node*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @precompute_register_parameters(i32 %num_actuals, %struct.arg_data* %args, i32* %reg_parm_seen) #0 !dbg !6979 {
entry:
  %num_actuals.addr = alloca i32, align 4
  %args.addr = alloca %struct.arg_data*, align 8
  %reg_parm_seen.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %type115 = alloca %union.tree_node*, align 8
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !6982, metadata !DIExpression()), !dbg !6983
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !6984, metadata !DIExpression()), !dbg !6985
  store i32* %reg_parm_seen, i32** %reg_parm_seen.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %reg_parm_seen.addr, metadata !6986, metadata !DIExpression()), !dbg !6987
  call void @llvm.dbg.declare(metadata i32* %i, metadata !6988, metadata !DIExpression()), !dbg !6989
  %0 = load i32*, i32** %reg_parm_seen.addr, align 8, !dbg !6990
  store i32 0, i32* %0, align 4, !dbg !6991
  store i32 0, i32* %i, align 4, !dbg !6992
  br label %for.cond, !dbg !6994

for.cond:                                         ; preds = %for.inc, %entry
  %1 = load i32, i32* %i, align 4, !dbg !6995
  %2 = load i32, i32* %num_actuals.addr, align 4, !dbg !6997
  %cmp = icmp slt i32 %1, %2, !dbg !6998
  br i1 %cmp, label %for.body, label %for.end, !dbg !6999

for.body:                                         ; preds = %for.cond
  %3 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7000
  %4 = load i32, i32* %i, align 4, !dbg !7002
  %idxprom = sext i32 %4 to i64, !dbg !7000
  %arrayidx = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3, i64 %idxprom, !dbg !7000
  %reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx, i32 0, i32 4, !dbg !7003
  %5 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7003
  %cmp1 = icmp ne %struct.rtx_def* %5, null, !dbg !7004
  br i1 %cmp1, label %land.lhs.true, label %if.end185, !dbg !7005

land.lhs.true:                                    ; preds = %for.body
  %6 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7006
  %7 = load i32, i32* %i, align 4, !dbg !7007
  %idxprom2 = sext i32 %7 to i64, !dbg !7006
  %arrayidx3 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %6, i64 %idxprom2, !dbg !7006
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx3, i32 0, i32 9, !dbg !7008
  %8 = load i32, i32* %pass_on_stack, align 8, !dbg !7008
  %tobool = icmp ne i32 %8, 0, !dbg !7006
  br i1 %tobool, label %if.end185, label %if.then, !dbg !7009

if.then:                                          ; preds = %land.lhs.true
  %9 = load i32*, i32** %reg_parm_seen.addr, align 8, !dbg !7010
  store i32 1, i32* %9, align 4, !dbg !7012
  %10 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7013
  %11 = load i32, i32* %i, align 4, !dbg !7015
  %idxprom4 = sext i32 %11 to i64, !dbg !7013
  %arrayidx5 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %10, i64 %idxprom4, !dbg !7013
  %value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx5, i32 0, i32 2, !dbg !7016
  %12 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7016
  %cmp6 = icmp eq %struct.rtx_def* %12, null, !dbg !7017
  br i1 %cmp6, label %if.then7, label %if.end, !dbg !7018

if.then7:                                         ; preds = %if.then
  call void @push_temp_slots(), !dbg !7019
  %13 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7021
  %14 = load i32, i32* %i, align 4, !dbg !7022
  %idxprom8 = sext i32 %14 to i64, !dbg !7021
  %arrayidx9 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %13, i64 %idxprom8, !dbg !7021
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx9, i32 0, i32 0, !dbg !7023
  %15 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !7023
  %call = call %struct.rtx_def* @expand_normal(%union.tree_node* %15), !dbg !7024
  %16 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7025
  %17 = load i32, i32* %i, align 4, !dbg !7026
  %idxprom10 = sext i32 %17 to i64, !dbg !7025
  %arrayidx11 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %16, i64 %idxprom10, !dbg !7025
  %value12 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx11, i32 0, i32 2, !dbg !7027
  store %struct.rtx_def* %call, %struct.rtx_def** %value12, align 8, !dbg !7028
  %18 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7029
  %19 = load i32, i32* %i, align 4, !dbg !7030
  %idxprom13 = sext i32 %19 to i64, !dbg !7029
  %arrayidx14 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %18, i64 %idxprom13, !dbg !7029
  %value15 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx14, i32 0, i32 2, !dbg !7031
  %20 = load %struct.rtx_def*, %struct.rtx_def** %value15, align 8, !dbg !7031
  call void @preserve_temp_slots(%struct.rtx_def* %20), !dbg !7032
  call void @pop_temp_slots(), !dbg !7033
  br label %if.end, !dbg !7034

if.end:                                           ; preds = %if.then7, %if.then
  %21 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7035
  %22 = load i32, i32* %i, align 4, !dbg !7035
  %idxprom16 = sext i32 %22 to i64, !dbg !7035
  %arrayidx17 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %21, i64 %idxprom16, !dbg !7035
  %value18 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx17, i32 0, i32 2, !dbg !7035
  %23 = load %struct.rtx_def*, %struct.rtx_def** %value18, align 8, !dbg !7035
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !7035
  %bf.load = load i32, i32* %24, align 8, !dbg !7035
  %bf.clear = and i32 %bf.load, 65535, !dbg !7035
  %idxprom19 = sext i32 %bf.clear to i64, !dbg !7035
  %arrayidx20 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom19, !dbg !7035
  %25 = load i32, i32* %arrayidx20, align 4, !dbg !7035
  %cmp21 = icmp eq i32 %25, 9, !dbg !7035
  br i1 %cmp21, label %land.lhs.true22, label %if.end38, !dbg !7037

land.lhs.true22:                                  ; preds = %if.end
  %26 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7038
  %27 = load i32, i32* %i, align 4, !dbg !7038
  %idxprom23 = sext i32 %27 to i64, !dbg !7038
  %arrayidx24 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %26, i64 %idxprom23, !dbg !7038
  %value25 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx24, i32 0, i32 2, !dbg !7038
  %28 = load %struct.rtx_def*, %struct.rtx_def** %value25, align 8, !dbg !7038
  %call26 = call zeroext i8 @legitimate_constant_p(%struct.rtx_def* %28), !dbg !7038
  %tobool27 = icmp ne i8 %call26, 0, !dbg !7038
  br i1 %tobool27, label %if.end38, label %if.then28, !dbg !7039

if.then28:                                        ; preds = %land.lhs.true22
  %29 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7040
  %30 = load i32, i32* %i, align 4, !dbg !7041
  %idxprom29 = sext i32 %30 to i64, !dbg !7040
  %arrayidx30 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %29, i64 %idxprom29, !dbg !7040
  %mode = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx30, i32 0, i32 1, !dbg !7042
  %31 = load i32, i32* %mode, align 8, !dbg !7042
  %32 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7043
  %33 = load i32, i32* %i, align 4, !dbg !7044
  %idxprom31 = sext i32 %33 to i64, !dbg !7043
  %arrayidx32 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %32, i64 %idxprom31, !dbg !7043
  %value33 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx32, i32 0, i32 2, !dbg !7045
  %34 = load %struct.rtx_def*, %struct.rtx_def** %value33, align 8, !dbg !7045
  %call34 = call %struct.rtx_def* @force_reg(i32 %31, %struct.rtx_def* %34), !dbg !7046
  %35 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7047
  %36 = load i32, i32* %i, align 4, !dbg !7048
  %idxprom35 = sext i32 %36 to i64, !dbg !7047
  %arrayidx36 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %35, i64 %idxprom35, !dbg !7047
  %value37 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx36, i32 0, i32 2, !dbg !7049
  store %struct.rtx_def* %call34, %struct.rtx_def** %value37, align 8, !dbg !7050
  br label %if.end38, !dbg !7047

if.end38:                                         ; preds = %if.then28, %land.lhs.true22, %if.end
  %37 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7051
  %38 = load i32, i32* %i, align 4, !dbg !7053
  %idxprom39 = sext i32 %38 to i64, !dbg !7051
  %arrayidx40 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %37, i64 %idxprom39, !dbg !7051
  %mode41 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx40, i32 0, i32 1, !dbg !7054
  %39 = load i32, i32* %mode41, align 8, !dbg !7054
  %40 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7055
  %41 = load i32, i32* %i, align 4, !dbg !7055
  %idxprom42 = sext i32 %41 to i64, !dbg !7055
  %arrayidx43 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %40, i64 %idxprom42, !dbg !7055
  %tree_value44 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx43, i32 0, i32 0, !dbg !7055
  %42 = load %union.tree_node*, %union.tree_node** %tree_value44, align 8, !dbg !7055
  %common = bitcast %union.tree_node* %42 to %struct.tree_common*, !dbg !7055
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7055
  %43 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7055
  %base = bitcast %union.tree_node* %43 to %struct.tree_base*, !dbg !7055
  %44 = bitcast %struct.tree_base* %base to i64*, !dbg !7055
  %bf.load45 = load i64, i64* %44, align 8, !dbg !7055
  %bf.clear46 = and i64 %bf.load45, 65535, !dbg !7055
  %bf.cast = trunc i64 %bf.clear46 to i32, !dbg !7055
  %cmp47 = icmp eq i32 %bf.cast, 14, !dbg !7055
  br i1 %cmp47, label %cond.true, label %cond.false, !dbg !7055

cond.true:                                        ; preds = %if.end38
  %45 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7055
  %46 = load i32, i32* %i, align 4, !dbg !7055
  %idxprom48 = sext i32 %46 to i64, !dbg !7055
  %arrayidx49 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %45, i64 %idxprom48, !dbg !7055
  %tree_value50 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx49, i32 0, i32 0, !dbg !7055
  %47 = load %union.tree_node*, %union.tree_node** %tree_value50, align 8, !dbg !7055
  %common51 = bitcast %union.tree_node* %47 to %struct.tree_common*, !dbg !7055
  %type52 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common51, i32 0, i32 2, !dbg !7055
  %48 = load %union.tree_node*, %union.tree_node** %type52, align 8, !dbg !7055
  %call53 = call i32 @vector_type_mode(%union.tree_node* %48), !dbg !7055
  br label %cond.end, !dbg !7055

cond.false:                                       ; preds = %if.end38
  %49 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7055
  %50 = load i32, i32* %i, align 4, !dbg !7055
  %idxprom54 = sext i32 %50 to i64, !dbg !7055
  %arrayidx55 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %49, i64 %idxprom54, !dbg !7055
  %tree_value56 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx55, i32 0, i32 0, !dbg !7055
  %51 = load %union.tree_node*, %union.tree_node** %tree_value56, align 8, !dbg !7055
  %common57 = bitcast %union.tree_node* %51 to %struct.tree_common*, !dbg !7055
  %type58 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common57, i32 0, i32 2, !dbg !7055
  %52 = load %union.tree_node*, %union.tree_node** %type58, align 8, !dbg !7055
  %type59 = bitcast %union.tree_node* %52 to %struct.tree_type*, !dbg !7055
  %mode60 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type59, i32 0, i32 6, !dbg !7055
  %bf.load61 = load i32, i32* %mode60, align 4, !dbg !7055
  %bf.lshr = lshr i32 %bf.load61, 16, !dbg !7055
  %bf.clear62 = and i32 %bf.lshr, 255, !dbg !7055
  br label %cond.end, !dbg !7055

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call53, %cond.true ], [ %bf.clear62, %cond.false ], !dbg !7055
  %cmp63 = icmp ne i32 %39, %cond, !dbg !7056
  br i1 %cmp63, label %if.then64, label %if.end107, !dbg !7057

if.then64:                                        ; preds = %cond.end
  %53 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7058
  %54 = load i32, i32* %i, align 4, !dbg !7059
  %idxprom65 = sext i32 %54 to i64, !dbg !7058
  %arrayidx66 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %53, i64 %idxprom65, !dbg !7058
  %mode67 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx66, i32 0, i32 1, !dbg !7060
  %55 = load i32, i32* %mode67, align 8, !dbg !7060
  %56 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7061
  %57 = load i32, i32* %i, align 4, !dbg !7061
  %idxprom68 = sext i32 %57 to i64, !dbg !7061
  %arrayidx69 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %56, i64 %idxprom68, !dbg !7061
  %tree_value70 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx69, i32 0, i32 0, !dbg !7061
  %58 = load %union.tree_node*, %union.tree_node** %tree_value70, align 8, !dbg !7061
  %common71 = bitcast %union.tree_node* %58 to %struct.tree_common*, !dbg !7061
  %type72 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common71, i32 0, i32 2, !dbg !7061
  %59 = load %union.tree_node*, %union.tree_node** %type72, align 8, !dbg !7061
  %base73 = bitcast %union.tree_node* %59 to %struct.tree_base*, !dbg !7061
  %60 = bitcast %struct.tree_base* %base73 to i64*, !dbg !7061
  %bf.load74 = load i64, i64* %60, align 8, !dbg !7061
  %bf.clear75 = and i64 %bf.load74, 65535, !dbg !7061
  %bf.cast76 = trunc i64 %bf.clear75 to i32, !dbg !7061
  %cmp77 = icmp eq i32 %bf.cast76, 14, !dbg !7061
  br i1 %cmp77, label %cond.true78, label %cond.false85, !dbg !7061

cond.true78:                                      ; preds = %if.then64
  %61 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7061
  %62 = load i32, i32* %i, align 4, !dbg !7061
  %idxprom79 = sext i32 %62 to i64, !dbg !7061
  %arrayidx80 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %61, i64 %idxprom79, !dbg !7061
  %tree_value81 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx80, i32 0, i32 0, !dbg !7061
  %63 = load %union.tree_node*, %union.tree_node** %tree_value81, align 8, !dbg !7061
  %common82 = bitcast %union.tree_node* %63 to %struct.tree_common*, !dbg !7061
  %type83 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common82, i32 0, i32 2, !dbg !7061
  %64 = load %union.tree_node*, %union.tree_node** %type83, align 8, !dbg !7061
  %call84 = call i32 @vector_type_mode(%union.tree_node* %64), !dbg !7061
  br label %cond.end96, !dbg !7061

cond.false85:                                     ; preds = %if.then64
  %65 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7061
  %66 = load i32, i32* %i, align 4, !dbg !7061
  %idxprom86 = sext i32 %66 to i64, !dbg !7061
  %arrayidx87 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %65, i64 %idxprom86, !dbg !7061
  %tree_value88 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx87, i32 0, i32 0, !dbg !7061
  %67 = load %union.tree_node*, %union.tree_node** %tree_value88, align 8, !dbg !7061
  %common89 = bitcast %union.tree_node* %67 to %struct.tree_common*, !dbg !7061
  %type90 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common89, i32 0, i32 2, !dbg !7061
  %68 = load %union.tree_node*, %union.tree_node** %type90, align 8, !dbg !7061
  %type91 = bitcast %union.tree_node* %68 to %struct.tree_type*, !dbg !7061
  %mode92 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type91, i32 0, i32 6, !dbg !7061
  %bf.load93 = load i32, i32* %mode92, align 4, !dbg !7061
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !7061
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !7061
  br label %cond.end96, !dbg !7061

cond.end96:                                       ; preds = %cond.false85, %cond.true78
  %cond97 = phi i32 [ %call84, %cond.true78 ], [ %bf.clear95, %cond.false85 ], !dbg !7061
  %69 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7062
  %70 = load i32, i32* %i, align 4, !dbg !7063
  %idxprom98 = sext i32 %70 to i64, !dbg !7062
  %arrayidx99 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %69, i64 %idxprom98, !dbg !7062
  %value100 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx99, i32 0, i32 2, !dbg !7064
  %71 = load %struct.rtx_def*, %struct.rtx_def** %value100, align 8, !dbg !7064
  %72 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7065
  %73 = load i32, i32* %i, align 4, !dbg !7066
  %idxprom101 = sext i32 %73 to i64, !dbg !7065
  %arrayidx102 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %72, i64 %idxprom101, !dbg !7065
  %unsignedp = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx102, i32 0, i32 7, !dbg !7067
  %74 = load i32, i32* %unsignedp, align 8, !dbg !7067
  %call103 = call %struct.rtx_def* @convert_modes(i32 %55, i32 %cond97, %struct.rtx_def* %71, i32 %74), !dbg !7068
  %75 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7069
  %76 = load i32, i32* %i, align 4, !dbg !7070
  %idxprom104 = sext i32 %76 to i64, !dbg !7069
  %arrayidx105 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %75, i64 %idxprom104, !dbg !7069
  %value106 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx105, i32 0, i32 2, !dbg !7071
  store %struct.rtx_def* %call103, %struct.rtx_def** %value106, align 8, !dbg !7072
  br label %if.end107, !dbg !7069

if.end107:                                        ; preds = %cond.end96, %cond.end
  %77 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7073
  %78 = load i32, i32* %i, align 4, !dbg !7073
  %idxprom108 = sext i32 %78 to i64, !dbg !7073
  %arrayidx109 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %77, i64 %idxprom108, !dbg !7073
  %reg110 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx109, i32 0, i32 4, !dbg !7073
  %79 = load %struct.rtx_def*, %struct.rtx_def** %reg110, align 8, !dbg !7073
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !7073
  %bf.load111 = load i32, i32* %80, align 8, !dbg !7073
  %bf.clear112 = and i32 %bf.load111, 65535, !dbg !7073
  %cmp113 = icmp eq i32 %bf.clear112, 15, !dbg !7075
  br i1 %cmp113, label %if.then114, label %if.else, !dbg !7076

if.then114:                                       ; preds = %if.end107
  call void @llvm.dbg.declare(metadata %union.tree_node** %type115, metadata !7077, metadata !DIExpression()), !dbg !7079
  %81 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7080
  %82 = load i32, i32* %i, align 4, !dbg !7080
  %idxprom116 = sext i32 %82 to i64, !dbg !7080
  %arrayidx117 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %81, i64 %idxprom116, !dbg !7080
  %tree_value118 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx117, i32 0, i32 0, !dbg !7080
  %83 = load %union.tree_node*, %union.tree_node** %tree_value118, align 8, !dbg !7080
  %common119 = bitcast %union.tree_node* %83 to %struct.tree_common*, !dbg !7080
  %type120 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common119, i32 0, i32 2, !dbg !7080
  %84 = load %union.tree_node*, %union.tree_node** %type120, align 8, !dbg !7080
  store %union.tree_node* %84, %union.tree_node** %type115, align 8, !dbg !7079
  %85 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7081
  %86 = load i32, i32* %i, align 4, !dbg !7082
  %idxprom121 = sext i32 %86 to i64, !dbg !7081
  %arrayidx122 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %85, i64 %idxprom121, !dbg !7081
  %reg123 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx122, i32 0, i32 4, !dbg !7083
  %87 = load %struct.rtx_def*, %struct.rtx_def** %reg123, align 8, !dbg !7083
  %88 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7084
  %89 = load i32, i32* %i, align 4, !dbg !7085
  %idxprom124 = sext i32 %89 to i64, !dbg !7084
  %arrayidx125 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %88, i64 %idxprom124, !dbg !7084
  %value126 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx125, i32 0, i32 2, !dbg !7086
  %90 = load %struct.rtx_def*, %struct.rtx_def** %value126, align 8, !dbg !7086
  %91 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !7087
  %92 = load %union.tree_node*, %union.tree_node** %type115, align 8, !dbg !7088
  %call127 = call i64 @int_size_in_bytes(%union.tree_node* %92), !dbg !7089
  %conv = trunc i64 %call127 to i32, !dbg !7089
  %call128 = call %struct.rtx_def* @emit_group_load_into_temps(%struct.rtx_def* %87, %struct.rtx_def* %90, %union.tree_node* %91, i32 %conv), !dbg !7090
  %93 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7091
  %94 = load i32, i32* %i, align 4, !dbg !7092
  %idxprom129 = sext i32 %94 to i64, !dbg !7091
  %arrayidx130 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %93, i64 %idxprom129, !dbg !7091
  %parallel_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx130, i32 0, i32 6, !dbg !7093
  store %struct.rtx_def* %call128, %struct.rtx_def** %parallel_value, align 8, !dbg !7094
  br label %if.end184, !dbg !7095

if.else:                                          ; preds = %if.end107
  %95 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7096
  %96 = load i32, i32* %i, align 4, !dbg !7096
  %idxprom131 = sext i32 %96 to i64, !dbg !7096
  %arrayidx132 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %95, i64 %idxprom131, !dbg !7096
  %value133 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx132, i32 0, i32 2, !dbg !7096
  %97 = load %struct.rtx_def*, %struct.rtx_def** %value133, align 8, !dbg !7096
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !7096
  %bf.load134 = load i32, i32* %98, align 8, !dbg !7096
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !7096
  %cmp136 = icmp eq i32 %bf.clear135, 37, !dbg !7096
  br i1 %cmp136, label %if.end183, label %lor.lhs.false, !dbg !7098

lor.lhs.false:                                    ; preds = %if.else
  %99 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7099
  %100 = load i32, i32* %i, align 4, !dbg !7099
  %idxprom138 = sext i32 %100 to i64, !dbg !7099
  %arrayidx139 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %99, i64 %idxprom138, !dbg !7099
  %value140 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx139, i32 0, i32 2, !dbg !7099
  %101 = load %struct.rtx_def*, %struct.rtx_def** %value140, align 8, !dbg !7099
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !7099
  %bf.load141 = load i32, i32* %102, align 8, !dbg !7099
  %bf.clear142 = and i32 %bf.load141, 65535, !dbg !7099
  %cmp143 = icmp eq i32 %bf.clear142, 39, !dbg !7100
  br i1 %cmp143, label %land.lhs.true145, label %land.lhs.true154, !dbg !7101

land.lhs.true145:                                 ; preds = %lor.lhs.false
  %103 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7102
  %104 = load i32, i32* %i, align 4, !dbg !7102
  %idxprom146 = sext i32 %104 to i64, !dbg !7102
  %arrayidx147 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %103, i64 %idxprom146, !dbg !7102
  %value148 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx147, i32 0, i32 2, !dbg !7102
  %105 = load %struct.rtx_def*, %struct.rtx_def** %value148, align 8, !dbg !7102
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !7102
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7102
  %arrayidx149 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7102
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx149 to %struct.rtx_def**, !dbg !7102
  %106 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7102
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !7102
  %bf.load150 = load i32, i32* %107, align 8, !dbg !7102
  %bf.clear151 = and i32 %bf.load150, 65535, !dbg !7102
  %cmp152 = icmp eq i32 %bf.clear151, 37, !dbg !7102
  br i1 %cmp152, label %if.end183, label %land.lhs.true154, !dbg !7103

land.lhs.true154:                                 ; preds = %land.lhs.true145, %lor.lhs.false
  %108 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7104
  %109 = load i32, i32* %i, align 4, !dbg !7105
  %idxprom155 = sext i32 %109 to i64, !dbg !7104
  %arrayidx156 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %108, i64 %idxprom155, !dbg !7104
  %mode157 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx156, i32 0, i32 1, !dbg !7106
  %110 = load i32, i32* %mode157, align 8, !dbg !7106
  %cmp158 = icmp ne i32 %110, 1, !dbg !7107
  br i1 %cmp158, label %land.lhs.true160, label %if.end183, !dbg !7108

land.lhs.true160:                                 ; preds = %land.lhs.true154
  %111 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7109
  %112 = load i32, i32* %i, align 4, !dbg !7110
  %idxprom161 = sext i32 %112 to i64, !dbg !7109
  %arrayidx162 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %111, i64 %idxprom161, !dbg !7109
  %value163 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx162, i32 0, i32 2, !dbg !7111
  %113 = load %struct.rtx_def*, %struct.rtx_def** %value163, align 8, !dbg !7111
  %call164 = call zeroext i8 @optimize_insn_for_speed_p(), !dbg !7112
  %call165 = call i32 @rtx_cost(%struct.rtx_def* %113, i32 23, i8 zeroext %call164), !dbg !7113
  %cmp166 = icmp sgt i32 %call165, 4, !dbg !7114
  br i1 %cmp166, label %land.lhs.true168, label %if.end183, !dbg !7115

land.lhs.true168:                                 ; preds = %land.lhs.true160
  %114 = load i32*, i32** %reg_parm_seen.addr, align 8, !dbg !7116
  %115 = load i32, i32* %114, align 4, !dbg !7117
  %tobool169 = icmp ne i32 %115, 0, !dbg !7117
  br i1 %tobool169, label %if.then172, label %lor.lhs.false170, !dbg !7118

lor.lhs.false170:                                 ; preds = %land.lhs.true168
  %116 = load i32, i32* @optimize, align 4, !dbg !7119
  %tobool171 = icmp ne i32 %116, 0, !dbg !7119
  br i1 %tobool171, label %if.then172, label %if.end183, !dbg !7120

if.then172:                                       ; preds = %lor.lhs.false170, %land.lhs.true168
  %117 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7121
  %118 = load i32, i32* %i, align 4, !dbg !7122
  %idxprom173 = sext i32 %118 to i64, !dbg !7121
  %arrayidx174 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %117, i64 %idxprom173, !dbg !7121
  %mode175 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx174, i32 0, i32 1, !dbg !7123
  %119 = load i32, i32* %mode175, align 8, !dbg !7123
  %120 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7124
  %121 = load i32, i32* %i, align 4, !dbg !7125
  %idxprom176 = sext i32 %121 to i64, !dbg !7124
  %arrayidx177 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %120, i64 %idxprom176, !dbg !7124
  %value178 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx177, i32 0, i32 2, !dbg !7126
  %122 = load %struct.rtx_def*, %struct.rtx_def** %value178, align 8, !dbg !7126
  %call179 = call %struct.rtx_def* @copy_to_mode_reg(i32 %119, %struct.rtx_def* %122), !dbg !7127
  %123 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7128
  %124 = load i32, i32* %i, align 4, !dbg !7129
  %idxprom180 = sext i32 %124 to i64, !dbg !7128
  %arrayidx181 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %123, i64 %idxprom180, !dbg !7128
  %value182 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx181, i32 0, i32 2, !dbg !7130
  store %struct.rtx_def* %call179, %struct.rtx_def** %value182, align 8, !dbg !7131
  br label %if.end183, !dbg !7128

if.end183:                                        ; preds = %if.then172, %lor.lhs.false170, %land.lhs.true160, %land.lhs.true154, %land.lhs.true145, %if.else
  br label %if.end184

if.end184:                                        ; preds = %if.end183, %if.then114
  br label %if.end185, !dbg !7132

if.end185:                                        ; preds = %if.end184, %land.lhs.true, %for.body
  br label %for.inc, !dbg !7008

for.inc:                                          ; preds = %if.end185
  %125 = load i32, i32* %i, align 4, !dbg !7133
  %inc = add nsw i32 %125, 1, !dbg !7133
  store i32 %inc, i32* %i, align 4, !dbg !7133
  br label %for.cond, !dbg !7134, !llvm.loop !7135

for.end:                                          ; preds = %for.cond
  ret void, !dbg !7137
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @save_fixed_argument_area(i32 %reg_parm_stack_space, %struct.rtx_def* %argblock, i32* %low_to_save, i32* %high_to_save) #0 !dbg !7138 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %reg_parm_stack_space.addr = alloca i32, align 4
  %argblock.addr = alloca %struct.rtx_def*, align 8
  %low_to_save.addr = alloca i32*, align 8
  %high_to_save.addr = alloca i32*, align 8
  %low = alloca i32, align 4
  %high = alloca i32, align 4
  %num_to_save = alloca i32, align 4
  %save_mode = alloca i32, align 4
  %delta = alloca i32, align 4
  %stack_area = alloca %struct.rtx_def*, align 8
  %save_area = alloca %struct.rtx_def*, align 8
  store i32 %reg_parm_stack_space, i32* %reg_parm_stack_space.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space.addr, metadata !7141, metadata !DIExpression()), !dbg !7142
  store %struct.rtx_def* %argblock, %struct.rtx_def** %argblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock.addr, metadata !7143, metadata !DIExpression()), !dbg !7144
  store i32* %low_to_save, i32** %low_to_save.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %low_to_save.addr, metadata !7145, metadata !DIExpression()), !dbg !7146
  store i32* %high_to_save, i32** %high_to_save.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %high_to_save.addr, metadata !7147, metadata !DIExpression()), !dbg !7148
  call void @llvm.dbg.declare(metadata i32* %low, metadata !7149, metadata !DIExpression()), !dbg !7150
  call void @llvm.dbg.declare(metadata i32* %high, metadata !7151, metadata !DIExpression()), !dbg !7152
  %0 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !7153
  store i32 %0, i32* %high, align 4, !dbg !7154
  %1 = load i32, i32* %high, align 4, !dbg !7155
  %2 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !7157
  %cmp = icmp sgt i32 %1, %2, !dbg !7158
  br i1 %cmp, label %if.then, label %if.end, !dbg !7159

if.then:                                          ; preds = %entry
  %3 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !7160
  store i32 %3, i32* %high, align 4, !dbg !7161
  br label %if.end, !dbg !7162

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* %low, align 4, !dbg !7163
  br label %for.cond, !dbg !7165

for.cond:                                         ; preds = %for.inc, %if.end
  %4 = load i32, i32* %low, align 4, !dbg !7166
  %5 = load i32, i32* %high, align 4, !dbg !7168
  %cmp1 = icmp slt i32 %4, %5, !dbg !7169
  br i1 %cmp1, label %for.body, label %for.end, !dbg !7170

for.body:                                         ; preds = %for.cond
  %6 = load i8*, i8** @stack_usage_map, align 8, !dbg !7171
  %7 = load i32, i32* %low, align 4, !dbg !7173
  %idxprom = sext i32 %7 to i64, !dbg !7171
  %arrayidx = getelementptr inbounds i8, i8* %6, i64 %idxprom, !dbg !7171
  %8 = load i8, i8* %arrayidx, align 1, !dbg !7171
  %conv = sext i8 %8 to i32, !dbg !7171
  %cmp2 = icmp ne i32 %conv, 0, !dbg !7174
  br i1 %cmp2, label %if.then4, label %if.end48, !dbg !7175

if.then4:                                         ; preds = %for.body
  call void @llvm.dbg.declare(metadata i32* %num_to_save, metadata !7176, metadata !DIExpression()), !dbg !7178
  call void @llvm.dbg.declare(metadata i32* %save_mode, metadata !7179, metadata !DIExpression()), !dbg !7180
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !7181, metadata !DIExpression()), !dbg !7182
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area, metadata !7183, metadata !DIExpression()), !dbg !7184
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %save_area, metadata !7185, metadata !DIExpression()), !dbg !7186
  br label %while.cond, !dbg !7187

while.cond:                                       ; preds = %while.body, %if.then4
  %9 = load i8*, i8** @stack_usage_map, align 8, !dbg !7188
  %10 = load i32, i32* %high, align 4, !dbg !7189
  %dec = add nsw i32 %10, -1, !dbg !7189
  store i32 %dec, i32* %high, align 4, !dbg !7189
  %idxprom5 = sext i32 %dec to i64, !dbg !7188
  %arrayidx6 = getelementptr inbounds i8, i8* %9, i64 %idxprom5, !dbg !7188
  %11 = load i8, i8* %arrayidx6, align 1, !dbg !7188
  %conv7 = sext i8 %11 to i32, !dbg !7188
  %cmp8 = icmp eq i32 %conv7, 0, !dbg !7190
  br i1 %cmp8, label %while.body, label %while.end, !dbg !7187

while.body:                                       ; preds = %while.cond
  br label %while.cond, !dbg !7187, !llvm.loop !7191

while.end:                                        ; preds = %while.cond
  %12 = load i32, i32* %low, align 4, !dbg !7193
  %13 = load i32*, i32** %low_to_save.addr, align 8, !dbg !7194
  store i32 %12, i32* %13, align 4, !dbg !7195
  %14 = load i32, i32* %high, align 4, !dbg !7196
  %15 = load i32*, i32** %high_to_save.addr, align 8, !dbg !7197
  store i32 %14, i32* %15, align 4, !dbg !7198
  %16 = load i32, i32* %high, align 4, !dbg !7199
  %17 = load i32, i32* %low, align 4, !dbg !7200
  %sub = sub nsw i32 %16, %17, !dbg !7201
  %add = add nsw i32 %sub, 1, !dbg !7202
  store i32 %add, i32* %num_to_save, align 4, !dbg !7203
  %18 = load i32, i32* %num_to_save, align 4, !dbg !7204
  %mul = mul nsw i32 %18, 8, !dbg !7205
  %call = call i32 @mode_for_size(i32 %mul, i32 2, i32 1), !dbg !7206
  store i32 %call, i32* %save_mode, align 4, !dbg !7207
  %19 = load i32, i32* %low, align 4, !dbg !7208
  %20 = load i32, i32* %save_mode, align 4, !dbg !7210
  %idxprom10 = zext i32 %20 to i64, !dbg !7210
  %arrayidx11 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom10, !dbg !7210
  %21 = load i8, i8* %arrayidx11, align 1, !dbg !7210
  %conv12 = zext i8 %21 to i16, !dbg !7210
  %conv13 = zext i16 %conv12 to i32, !dbg !7210
  %22 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7210
  %and = and i32 %22, 32, !dbg !7210
  %cmp14 = icmp ne i32 %and, 0, !dbg !7210
  %23 = zext i1 %cmp14 to i64, !dbg !7210
  %cond = select i1 %cmp14, i32 256, i32 128, !dbg !7210
  %div = sdiv i32 %cond, 4, !dbg !7210
  %cmp16 = icmp slt i32 %conv13, %div, !dbg !7210
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !7210

cond.true:                                        ; preds = %while.end
  %24 = load i32, i32* %save_mode, align 4, !dbg !7210
  %idxprom18 = zext i32 %24 to i64, !dbg !7210
  %arrayidx19 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom18, !dbg !7210
  %25 = load i8, i8* %arrayidx19, align 1, !dbg !7210
  %conv20 = zext i8 %25 to i16, !dbg !7210
  %conv21 = zext i16 %conv20 to i32, !dbg !7210
  br label %cond.end, !dbg !7210

cond.false:                                       ; preds = %while.end
  %26 = load i32, i32* @ix86_isa_flags, align 4, !dbg !7210
  %and22 = and i32 %26, 32, !dbg !7210
  %cmp23 = icmp ne i32 %and22, 0, !dbg !7210
  %27 = zext i1 %cmp23 to i64, !dbg !7210
  %cond25 = select i1 %cmp23, i32 256, i32 128, !dbg !7210
  %div26 = sdiv i32 %cond25, 4, !dbg !7210
  br label %cond.end, !dbg !7210

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond27 = phi i32 [ %conv21, %cond.true ], [ %div26, %cond.false ], !dbg !7210
  %sub28 = sub nsw i32 %cond27, 1, !dbg !7211
  %and29 = and i32 %19, %sub28, !dbg !7212
  %tobool = icmp ne i32 %and29, 0, !dbg !7212
  br i1 %tobool, label %if.then30, label %if.end31, !dbg !7213

if.then30:                                        ; preds = %cond.end
  store i32 1, i32* %save_mode, align 4, !dbg !7214
  br label %if.end31, !dbg !7215

if.end31:                                         ; preds = %if.then30, %cond.end
  %28 = load i32, i32* %low, align 4, !dbg !7216
  store i32 %28, i32* %delta, align 4, !dbg !7217
  %29 = load i32, i32* %save_mode, align 4, !dbg !7218
  %30 = load i32, i32* %save_mode, align 4, !dbg !7219
  %31 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !7219
  %32 = load i32, i32* %delta, align 4, !dbg !7219
  %conv32 = sext i32 %32 to i64, !dbg !7219
  %call33 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %31, i64 %conv32), !dbg !7219
  %call34 = call %struct.rtx_def* @memory_address_addr_space(i32 %30, %struct.rtx_def* %call33, i8 zeroext 0), !dbg !7219
  %call35 = call %struct.rtx_def* @gen_rtx_MEM(i32 %29, %struct.rtx_def* %call34), !dbg !7220
  store %struct.rtx_def* %call35, %struct.rtx_def** %stack_area, align 8, !dbg !7221
  %33 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !7222
  call void @set_mem_align(%struct.rtx_def* %33, i32 32), !dbg !7223
  %34 = load i32, i32* %save_mode, align 4, !dbg !7224
  %cmp36 = icmp eq i32 %34, 1, !dbg !7226
  br i1 %cmp36, label %if.then38, label %if.else, !dbg !7227

if.then38:                                        ; preds = %if.end31
  %35 = load i32, i32* %num_to_save, align 4, !dbg !7228
  %conv39 = sext i32 %35 to i64, !dbg !7228
  %call40 = call %struct.rtx_def* @assign_stack_temp(i32 1, i64 %conv39, i32 0), !dbg !7230
  store %struct.rtx_def* %call40, %struct.rtx_def** %save_area, align 8, !dbg !7231
  %36 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !7232
  %call41 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %36), !dbg !7233
  %37 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !7234
  %38 = load i32, i32* %num_to_save, align 4, !dbg !7235
  %conv42 = sext i32 %38 to i64, !dbg !7235
  %call43 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv42), !dbg !7235
  %call44 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call41, %struct.rtx_def* %37, %struct.rtx_def* %call43, i32 2), !dbg !7236
  br label %if.end47, !dbg !7237

if.else:                                          ; preds = %if.end31
  %39 = load i32, i32* %save_mode, align 4, !dbg !7238
  %call45 = call %struct.rtx_def* @gen_reg_rtx(i32 %39), !dbg !7240
  store %struct.rtx_def* %call45, %struct.rtx_def** %save_area, align 8, !dbg !7241
  %40 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !7242
  %41 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !7243
  %call46 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %40, %struct.rtx_def* %41), !dbg !7244
  br label %if.end47

if.end47:                                         ; preds = %if.else, %if.then38
  %42 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !7245
  store %struct.rtx_def* %42, %struct.rtx_def** %retval, align 8, !dbg !7246
  br label %return, !dbg !7246

if.end48:                                         ; preds = %for.body
  br label %for.inc, !dbg !7247

for.inc:                                          ; preds = %if.end48
  %43 = load i32, i32* %low, align 4, !dbg !7248
  %inc = add nsw i32 %43, 1, !dbg !7248
  store i32 %inc, i32* %low, align 4, !dbg !7248
  br label %for.cond, !dbg !7249, !llvm.loop !7250

for.end:                                          ; preds = %for.cond
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !7252
  br label %return, !dbg !7252

return:                                           ; preds = %for.end, %if.end47
  %44 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !7253
  ret %struct.rtx_def* %44, !dbg !7253
}

declare dso_local %struct.rtx_def* @get_last_insn() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @store_one_arg(%struct.arg_data* %arg, %struct.rtx_def* %argblock, i32 %flags, i32 %variable_size, i32 %reg_parm_stack_space) #0 !dbg !7254 {
entry:
  %retval = alloca i32, align 4
  %arg.addr = alloca %struct.arg_data*, align 8
  %argblock.addr = alloca %struct.rtx_def*, align 8
  %flags.addr = alloca i32, align 4
  %variable_size.addr = alloca i32, align 4
  %reg_parm_stack_space.addr = alloca i32, align 4
  %pval = alloca %union.tree_node*, align 8
  %reg = alloca %struct.rtx_def*, align 8
  %partial = alloca i32, align 4
  %used = alloca i32, align 4
  %i = alloca i32, align 4
  %lower_bound = alloca i32, align 4
  %upper_bound = alloca i32, align 4
  %sibcall_failure = alloca i32, align 4
  %size42 = alloca i32, align 4
  %save_mode = alloca i32, align 4
  %adr = alloca %struct.rtx_def*, align 8
  %stack_area = alloca %struct.rtx_def*, align 8
  %ot = alloca %union.tree_node*, align 8
  %nt = alloca %union.tree_node*, align 8
  %size256 = alloca i32, align 4
  %parm_align = alloca i32, align 4
  %parm_align348 = alloca i32, align 4
  %excess = alloca i32, align 4
  %size_rtx = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %i435 = alloca i32, align 4
  %type662 = alloca %union.tree_node*, align 8
  store %struct.arg_data* %arg, %struct.arg_data** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %arg.addr, metadata !7257, metadata !DIExpression()), !dbg !7258
  store %struct.rtx_def* %argblock, %struct.rtx_def** %argblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock.addr, metadata !7259, metadata !DIExpression()), !dbg !7260
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7261, metadata !DIExpression()), !dbg !7262
  store i32 %variable_size, i32* %variable_size.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %variable_size.addr, metadata !7263, metadata !DIExpression()), !dbg !7264
  store i32 %reg_parm_stack_space, i32* %reg_parm_stack_space.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space.addr, metadata !7265, metadata !DIExpression()), !dbg !7266
  call void @llvm.dbg.declare(metadata %union.tree_node** %pval, metadata !7267, metadata !DIExpression()), !dbg !7268
  %0 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7269
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %0, i32 0, i32 0, !dbg !7270
  %1 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !7270
  store %union.tree_node* %1, %union.tree_node** %pval, align 8, !dbg !7268
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !7271, metadata !DIExpression()), !dbg !7272
  store %struct.rtx_def* null, %struct.rtx_def** %reg, align 8, !dbg !7272
  call void @llvm.dbg.declare(metadata i32* %partial, metadata !7273, metadata !DIExpression()), !dbg !7274
  store i32 0, i32* %partial, align 4, !dbg !7274
  call void @llvm.dbg.declare(metadata i32* %used, metadata !7275, metadata !DIExpression()), !dbg !7276
  store i32 0, i32* %used, align 4, !dbg !7276
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7277, metadata !DIExpression()), !dbg !7278
  call void @llvm.dbg.declare(metadata i32* %lower_bound, metadata !7279, metadata !DIExpression()), !dbg !7280
  store i32 0, i32* %lower_bound, align 4, !dbg !7280
  call void @llvm.dbg.declare(metadata i32* %upper_bound, metadata !7281, metadata !DIExpression()), !dbg !7282
  store i32 0, i32* %upper_bound, align 4, !dbg !7282
  call void @llvm.dbg.declare(metadata i32* %sibcall_failure, metadata !7283, metadata !DIExpression()), !dbg !7284
  store i32 0, i32* %sibcall_failure, align 4, !dbg !7284
  %2 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7285
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !7285
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !7285
  %bf.load = load i64, i64* %3, align 8, !dbg !7285
  %bf.clear = and i64 %bf.load, 65535, !dbg !7285
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !7285
  %cmp = icmp eq i32 %bf.cast, 0, !dbg !7287
  br i1 %cmp, label %if.then, label %if.end, !dbg !7288

if.then:                                          ; preds = %entry
  store i32 1, i32* %retval, align 4, !dbg !7289
  br label %return, !dbg !7289

if.end:                                           ; preds = %entry
  call void @push_temp_slots(), !dbg !7290
  %4 = load i32, i32* @target_flags, align 4, !dbg !7291
  %and = and i32 %4, 4, !dbg !7291
  %cmp1 = icmp ne i32 %and, 0, !dbg !7291
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !7291

lor.lhs.false:                                    ; preds = %if.end
  %call = call i32 @ix86_cfun_abi(), !dbg !7291
  %cmp2 = icmp eq i32 %call, 1, !dbg !7291
  br i1 %cmp2, label %land.lhs.true, label %if.end101, !dbg !7293

land.lhs.true:                                    ; preds = %lor.lhs.false, %if.end
  %5 = load i32, i32* %flags.addr, align 4, !dbg !7294
  %and3 = and i32 %5, 256, !dbg !7295
  %tobool = icmp ne i32 %and3, 0, !dbg !7295
  br i1 %tobool, label %if.end101, label %if.then4, !dbg !7296

if.then4:                                         ; preds = %land.lhs.true
  %6 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !7297
  %tobool5 = icmp ne %struct.rtx_def* %6, null, !dbg !7297
  br i1 %tobool5, label %land.lhs.true6, label %if.end100, !dbg !7300

land.lhs.true6:                                   ; preds = %if.then4
  %7 = load i32, i32* %variable_size.addr, align 4, !dbg !7301
  %tobool7 = icmp ne i32 %7, 0, !dbg !7301
  br i1 %tobool7, label %if.end100, label %land.lhs.true8, !dbg !7302

land.lhs.true8:                                   ; preds = %land.lhs.true6
  %8 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7303
  %stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %8, i32 0, i32 11, !dbg !7304
  %9 = load %struct.rtx_def*, %struct.rtx_def** %stack, align 8, !dbg !7304
  %tobool9 = icmp ne %struct.rtx_def* %9, null, !dbg !7303
  br i1 %tobool9, label %if.then10, label %if.end100, !dbg !7305

if.then10:                                        ; preds = %land.lhs.true8
  %10 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7306
  %stack_slot = getelementptr inbounds %struct.arg_data, %struct.arg_data* %10, i32 0, i32 12, !dbg !7306
  %11 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot, align 8, !dbg !7306
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7306
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7306
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7306
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7306
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7306
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !7306
  %bf.load11 = load i32, i32* %13, align 8, !dbg !7306
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7306
  %cmp13 = icmp eq i32 %bf.clear12, 49, !dbg !7309
  br i1 %cmp13, label %if.then14, label %if.else, !dbg !7310

if.then14:                                        ; preds = %if.then10
  %14 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7311
  %stack_slot15 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %14, i32 0, i32 12, !dbg !7311
  %15 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot15, align 8, !dbg !7311
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !7311
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7311
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 0, !dbg !7311
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !7311
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !7311
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7311
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !7311
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 1, !dbg !7311
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !7311
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !7311
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7311
  %hwint = bitcast %union.u* %u24 to [1 x i64]*, !dbg !7311
  %arrayidx25 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7311
  %18 = load i64, i64* %arrayidx25, align 8, !dbg !7311
  %conv = trunc i64 %18 to i32, !dbg !7311
  store i32 %conv, i32* %lower_bound, align 4, !dbg !7312
  br label %if.end26, !dbg !7313

if.else:                                          ; preds = %if.then10
  store i32 0, i32* %lower_bound, align 4, !dbg !7314
  br label %if.end26

if.end26:                                         ; preds = %if.else, %if.then14
  %19 = load i32, i32* %lower_bound, align 4, !dbg !7315
  %conv27 = sext i32 %19 to i64, !dbg !7315
  %20 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7316
  %locate = getelementptr inbounds %struct.arg_data, %struct.arg_data* %20, i32 0, i32 10, !dbg !7317
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 0, !dbg !7318
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !7319
  %21 = load i64, i64* %constant, align 8, !dbg !7319
  %add = add nsw i64 %conv27, %21, !dbg !7320
  %conv28 = trunc i64 %add to i32, !dbg !7315
  store i32 %conv28, i32* %upper_bound, align 4, !dbg !7321
  %22 = load i32, i32* %lower_bound, align 4, !dbg !7322
  store i32 %22, i32* %i, align 4, !dbg !7323
  %23 = load i32, i32* %i, align 4, !dbg !7324
  %24 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !7326
  %cmp29 = icmp slt i32 %23, %24, !dbg !7327
  br i1 %cmp29, label %if.then31, label %if.end32, !dbg !7328

if.then31:                                        ; preds = %if.end26
  %25 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !7329
  store i32 %25, i32* %i, align 4, !dbg !7330
  br label %if.end32, !dbg !7331

if.end32:                                         ; preds = %if.then31, %if.end26
  br label %while.cond, !dbg !7332

while.cond:                                       ; preds = %while.body, %if.end32
  %26 = load i32, i32* %i, align 4, !dbg !7333
  %27 = load i32, i32* %upper_bound, align 4, !dbg !7334
  %cmp33 = icmp slt i32 %26, %27, !dbg !7335
  br i1 %cmp33, label %land.rhs, label %land.end, !dbg !7336

land.rhs:                                         ; preds = %while.cond
  %28 = load i8*, i8** @stack_usage_map, align 8, !dbg !7337
  %29 = load i32, i32* %i, align 4, !dbg !7338
  %idxprom = sext i32 %29 to i64, !dbg !7337
  %arrayidx35 = getelementptr inbounds i8, i8* %28, i64 %idxprom, !dbg !7337
  %30 = load i8, i8* %arrayidx35, align 1, !dbg !7337
  %conv36 = sext i8 %30 to i32, !dbg !7337
  %cmp37 = icmp eq i32 %conv36, 0, !dbg !7339
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %31 = phi i1 [ false, %while.cond ], [ %cmp37, %land.rhs ], !dbg !7340
  br i1 %31, label %while.body, label %while.end, !dbg !7332

while.body:                                       ; preds = %land.end
  %32 = load i32, i32* %i, align 4, !dbg !7341
  %inc = add nsw i32 %32, 1, !dbg !7341
  store i32 %inc, i32* %i, align 4, !dbg !7341
  br label %while.cond, !dbg !7332, !llvm.loop !7342

while.end:                                        ; preds = %land.end
  %33 = load i32, i32* %i, align 4, !dbg !7343
  %34 = load i32, i32* %upper_bound, align 4, !dbg !7345
  %cmp39 = icmp slt i32 %33, %34, !dbg !7346
  br i1 %cmp39, label %if.then41, label %if.end99, !dbg !7347

if.then41:                                        ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %size42, metadata !7348, metadata !DIExpression()), !dbg !7350
  %35 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7351
  %locate43 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %35, i32 0, i32 10, !dbg !7352
  %size44 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate43, i32 0, i32 0, !dbg !7353
  %constant45 = getelementptr inbounds %struct.args_size, %struct.args_size* %size44, i32 0, i32 0, !dbg !7354
  %36 = load i64, i64* %constant45, align 8, !dbg !7354
  %mul = mul nsw i64 %36, 8, !dbg !7355
  %conv46 = trunc i64 %mul to i32, !dbg !7351
  store i32 %conv46, i32* %size42, align 4, !dbg !7350
  call void @llvm.dbg.declare(metadata i32* %save_mode, metadata !7356, metadata !DIExpression()), !dbg !7357
  %37 = load i32, i32* %size42, align 4, !dbg !7358
  %call47 = call i32 @mode_for_size(i32 %37, i32 2, i32 1), !dbg !7359
  store i32 %call47, i32* %save_mode, align 4, !dbg !7357
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adr, metadata !7360, metadata !DIExpression()), !dbg !7361
  %38 = load i32, i32* %save_mode, align 4, !dbg !7362
  %39 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7362
  %stack_slot48 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %39, i32 0, i32 12, !dbg !7362
  %40 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot48, align 8, !dbg !7362
  %u49 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !7362
  %fld50 = bitcast %union.u* %u49 to [1 x %union.rtunion_def]*, !dbg !7362
  %arrayidx51 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld50, i64 0, i64 0, !dbg !7362
  %rt_rtx52 = bitcast %union.rtunion_def* %arrayidx51 to %struct.rtx_def**, !dbg !7362
  %41 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx52, align 8, !dbg !7362
  %call53 = call %struct.rtx_def* @memory_address_addr_space(i32 %38, %struct.rtx_def* %41, i8 zeroext 0), !dbg !7362
  store %struct.rtx_def* %call53, %struct.rtx_def** %adr, align 8, !dbg !7361
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area, metadata !7363, metadata !DIExpression()), !dbg !7364
  %42 = load i32, i32* %save_mode, align 4, !dbg !7365
  %43 = load %struct.rtx_def*, %struct.rtx_def** %adr, align 8, !dbg !7366
  %call54 = call %struct.rtx_def* @gen_rtx_MEM(i32 %42, %struct.rtx_def* %43), !dbg !7367
  store %struct.rtx_def* %call54, %struct.rtx_def** %stack_area, align 8, !dbg !7364
  %44 = load i32, i32* %save_mode, align 4, !dbg !7368
  %cmp55 = icmp eq i32 %44, 1, !dbg !7370
  br i1 %cmp55, label %if.then57, label %if.else93, !dbg !7371

if.then57:                                        ; preds = %if.then41
  call void @llvm.dbg.declare(metadata %union.tree_node** %ot, metadata !7372, metadata !DIExpression()), !dbg !7374
  %45 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7375
  %tree_value58 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %45, i32 0, i32 0, !dbg !7375
  %46 = load %union.tree_node*, %union.tree_node** %tree_value58, align 8, !dbg !7375
  %common = bitcast %union.tree_node* %46 to %struct.tree_common*, !dbg !7375
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7375
  %47 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7375
  store %union.tree_node* %47, %union.tree_node** %ot, align 8, !dbg !7374
  call void @llvm.dbg.declare(metadata %union.tree_node** %nt, metadata !7376, metadata !DIExpression()), !dbg !7377
  %48 = load %union.tree_node*, %union.tree_node** %ot, align 8, !dbg !7378
  %49 = load %union.tree_node*, %union.tree_node** %ot, align 8, !dbg !7379
  %base59 = bitcast %union.tree_node* %49 to %struct.tree_base*, !dbg !7379
  %50 = bitcast %struct.tree_base* %base59 to i64*, !dbg !7379
  %bf.load60 = load i64, i64* %50, align 8, !dbg !7379
  %bf.lshr = lshr i64 %bf.load60, 20, !dbg !7379
  %bf.clear61 = and i64 %bf.lshr, 1, !dbg !7379
  %bf.cast62 = trunc i64 %bf.clear61 to i32, !dbg !7379
  %mul63 = mul nsw i32 %bf.cast62, 1, !dbg !7379
  %51 = load %union.tree_node*, %union.tree_node** %ot, align 8, !dbg !7379
  %base64 = bitcast %union.tree_node* %51 to %struct.tree_base*, !dbg !7379
  %52 = bitcast %struct.tree_base* %base64 to i64*, !dbg !7379
  %bf.load65 = load i64, i64* %52, align 8, !dbg !7379
  %bf.lshr66 = lshr i64 %bf.load65, 19, !dbg !7379
  %bf.clear67 = and i64 %bf.lshr66, 1, !dbg !7379
  %bf.cast68 = trunc i64 %bf.clear67 to i32, !dbg !7379
  %mul69 = mul nsw i32 %bf.cast68, 2, !dbg !7379
  %or = or i32 %mul63, %mul69, !dbg !7379
  %53 = load %union.tree_node*, %union.tree_node** %ot, align 8, !dbg !7379
  %type70 = bitcast %union.tree_node* %53 to %struct.tree_type*, !dbg !7379
  %restrict_flag = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type70, i32 0, i32 6, !dbg !7379
  %bf.load71 = load i32, i32* %restrict_flag, align 4, !dbg !7379
  %bf.lshr72 = lshr i32 %bf.load71, 13, !dbg !7379
  %bf.clear73 = and i32 %bf.lshr72, 1, !dbg !7379
  %mul74 = mul nsw i32 %bf.clear73, 4, !dbg !7379
  %or75 = or i32 %or, %mul74, !dbg !7379
  %54 = load %union.tree_node*, %union.tree_node** %ot, align 8, !dbg !7379
  %base76 = bitcast %union.tree_node* %54 to %struct.tree_base*, !dbg !7379
  %55 = bitcast %struct.tree_base* %base76 to i64*, !dbg !7379
  %bf.load77 = load i64, i64* %55, align 8, !dbg !7379
  %bf.lshr78 = lshr i64 %bf.load77, 56, !dbg !7379
  %bf.cast79 = trunc i64 %bf.lshr78 to i32, !dbg !7379
  %and80 = and i32 %bf.cast79, 255, !dbg !7379
  %shl = shl i32 %and80, 8, !dbg !7379
  %or81 = or i32 %or75, %shl, !dbg !7379
  %or82 = or i32 %or81, 1, !dbg !7380
  %call83 = call %union.tree_node* @build_qualified_type(%union.tree_node* %48, i32 %or82), !dbg !7381
  store %union.tree_node* %call83, %union.tree_node** %nt, align 8, !dbg !7377
  %56 = load %union.tree_node*, %union.tree_node** %nt, align 8, !dbg !7382
  %call84 = call %struct.rtx_def* @assign_temp(%union.tree_node* %56, i32 0, i32 1, i32 1), !dbg !7383
  %57 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7384
  %save_area = getelementptr inbounds %struct.arg_data, %struct.arg_data* %57, i32 0, i32 13, !dbg !7385
  store %struct.rtx_def* %call84, %struct.rtx_def** %save_area, align 8, !dbg !7386
  %58 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7387
  %save_area85 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %58, i32 0, i32 13, !dbg !7388
  %59 = load %struct.rtx_def*, %struct.rtx_def** %save_area85, align 8, !dbg !7388
  call void @preserve_temp_slots(%struct.rtx_def* %59), !dbg !7389
  %60 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7390
  %save_area86 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %60, i32 0, i32 13, !dbg !7391
  %61 = load %struct.rtx_def*, %struct.rtx_def** %save_area86, align 8, !dbg !7391
  %call87 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %61), !dbg !7392
  %62 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !7393
  %63 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7394
  %locate88 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %63, i32 0, i32 10, !dbg !7394
  %size89 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate88, i32 0, i32 0, !dbg !7394
  %constant90 = getelementptr inbounds %struct.args_size, %struct.args_size* %size89, i32 0, i32 0, !dbg !7394
  %64 = load i64, i64* %constant90, align 8, !dbg !7394
  %call91 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %64), !dbg !7394
  %call92 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call87, %struct.rtx_def* %62, %struct.rtx_def* %call91, i32 2), !dbg !7395
  br label %if.end98, !dbg !7396

if.else93:                                        ; preds = %if.then41
  %65 = load i32, i32* %save_mode, align 4, !dbg !7397
  %call94 = call %struct.rtx_def* @gen_reg_rtx(i32 %65), !dbg !7399
  %66 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7400
  %save_area95 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %66, i32 0, i32 13, !dbg !7401
  store %struct.rtx_def* %call94, %struct.rtx_def** %save_area95, align 8, !dbg !7402
  %67 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7403
  %save_area96 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %67, i32 0, i32 13, !dbg !7404
  %68 = load %struct.rtx_def*, %struct.rtx_def** %save_area96, align 8, !dbg !7404
  %69 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !7405
  %call97 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %68, %struct.rtx_def* %69), !dbg !7406
  br label %if.end98

if.end98:                                         ; preds = %if.else93, %if.then57
  br label %if.end99, !dbg !7407

if.end99:                                         ; preds = %if.end98, %while.end
  br label %if.end100, !dbg !7408

if.end100:                                        ; preds = %if.end99, %land.lhs.true8, %land.lhs.true6, %if.then4
  br label %if.end101, !dbg !7409

if.end101:                                        ; preds = %if.end100, %land.lhs.true, %lor.lhs.false
  %70 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7410
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %70, i32 0, i32 9, !dbg !7412
  %71 = load i32, i32* %pass_on_stack, align 8, !dbg !7412
  %tobool102 = icmp ne i32 %71, 0, !dbg !7410
  br i1 %tobool102, label %if.end111, label %if.then103, !dbg !7413

if.then103:                                       ; preds = %if.end101
  %72 = load i32, i32* %flags.addr, align 4, !dbg !7414
  %and104 = and i32 %72, 256, !dbg !7417
  %tobool105 = icmp ne i32 %and104, 0, !dbg !7417
  br i1 %tobool105, label %if.then106, label %if.else107, !dbg !7418

if.then106:                                       ; preds = %if.then103
  %73 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7419
  %tail_call_reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %73, i32 0, i32 5, !dbg !7420
  %74 = load %struct.rtx_def*, %struct.rtx_def** %tail_call_reg, align 8, !dbg !7420
  store %struct.rtx_def* %74, %struct.rtx_def** %reg, align 8, !dbg !7421
  br label %if.end109, !dbg !7422

if.else107:                                       ; preds = %if.then103
  %75 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7423
  %reg108 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %75, i32 0, i32 4, !dbg !7424
  %76 = load %struct.rtx_def*, %struct.rtx_def** %reg108, align 8, !dbg !7424
  store %struct.rtx_def* %76, %struct.rtx_def** %reg, align 8, !dbg !7425
  br label %if.end109

if.end109:                                        ; preds = %if.else107, %if.then106
  %77 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7426
  %partial110 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %77, i32 0, i32 8, !dbg !7427
  %78 = load i32, i32* %partial110, align 4, !dbg !7427
  store i32 %78, i32* %partial, align 4, !dbg !7428
  br label %if.end111, !dbg !7429

if.end111:                                        ; preds = %if.end109, %if.end101
  %79 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7430
  %cmp112 = icmp eq %struct.rtx_def* %79, null, !dbg !7430
  br i1 %cmp112, label %cond.false, label %lor.lhs.false114, !dbg !7430

lor.lhs.false114:                                 ; preds = %if.end111
  %80 = load i32, i32* %partial, align 4, !dbg !7430
  %cmp115 = icmp ne i32 %80, 0, !dbg !7430
  br i1 %cmp115, label %cond.false, label %cond.true, !dbg !7430

cond.true:                                        ; preds = %lor.lhs.false114
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 4085, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7430
  br label %cond.end, !dbg !7430

cond.false:                                       ; preds = %lor.lhs.false114, %if.end111
  br label %cond.end, !dbg !7430

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !7430
  %81 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7431
  %n_aligned_regs = getelementptr inbounds %struct.arg_data, %struct.arg_data* %81, i32 0, i32 15, !dbg !7433
  %82 = load i32, i32* %n_aligned_regs, align 8, !dbg !7433
  %cmp117 = icmp ne i32 %82, 0, !dbg !7434
  br i1 %cmp117, label %if.then119, label %if.end120, !dbg !7435

if.then119:                                       ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %reg, align 8, !dbg !7436
  br label %if.end120, !dbg !7437

if.end120:                                        ; preds = %if.then119, %cond.end
  %83 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7438
  %value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %83, i32 0, i32 2, !dbg !7440
  %84 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7440
  %cmp121 = icmp eq %struct.rtx_def* %84, null, !dbg !7441
  br i1 %cmp121, label %if.then123, label %if.end219, !dbg !7442

if.then123:                                       ; preds = %if.end120
  %85 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7443
  %pass_on_stack124 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %85, i32 0, i32 9, !dbg !7446
  %86 = load i32, i32* %pass_on_stack124, align 8, !dbg !7446
  %tobool125 = icmp ne i32 %86, 0, !dbg !7443
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !7447

if.then126:                                       ; preds = %if.then123
  %87 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !7448
  %inc127 = add nsw i32 %87, 1, !dbg !7448
  store i32 %inc127, i32* @stack_arg_under_construction, align 4, !dbg !7448
  br label %if.end128, !dbg !7449

if.end128:                                        ; preds = %if.then126, %if.then123
  %88 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7450
  %89 = load i32, i32* %partial, align 4, !dbg !7451
  %tobool129 = icmp ne i32 %89, 0, !dbg !7451
  br i1 %tobool129, label %cond.true155, label %lor.lhs.false130, !dbg !7452

lor.lhs.false130:                                 ; preds = %if.end128
  %90 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7453
  %common131 = bitcast %union.tree_node* %90 to %struct.tree_common*, !dbg !7453
  %type132 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common131, i32 0, i32 2, !dbg !7453
  %91 = load %union.tree_node*, %union.tree_node** %type132, align 8, !dbg !7453
  %base133 = bitcast %union.tree_node* %91 to %struct.tree_base*, !dbg !7453
  %92 = bitcast %struct.tree_base* %base133 to i64*, !dbg !7453
  %bf.load134 = load i64, i64* %92, align 8, !dbg !7453
  %bf.clear135 = and i64 %bf.load134, 65535, !dbg !7453
  %bf.cast136 = trunc i64 %bf.clear135 to i32, !dbg !7453
  %cmp137 = icmp eq i32 %bf.cast136, 14, !dbg !7453
  br i1 %cmp137, label %cond.true139, label %cond.false143, !dbg !7453

cond.true139:                                     ; preds = %lor.lhs.false130
  %93 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7453
  %common140 = bitcast %union.tree_node* %93 to %struct.tree_common*, !dbg !7453
  %type141 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common140, i32 0, i32 2, !dbg !7453
  %94 = load %union.tree_node*, %union.tree_node** %type141, align 8, !dbg !7453
  %call142 = call i32 @vector_type_mode(%union.tree_node* %94), !dbg !7453
  br label %cond.end150, !dbg !7453

cond.false143:                                    ; preds = %lor.lhs.false130
  %95 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7453
  %common144 = bitcast %union.tree_node* %95 to %struct.tree_common*, !dbg !7453
  %type145 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common144, i32 0, i32 2, !dbg !7453
  %96 = load %union.tree_node*, %union.tree_node** %type145, align 8, !dbg !7453
  %type146 = bitcast %union.tree_node* %96 to %struct.tree_type*, !dbg !7453
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type146, i32 0, i32 6, !dbg !7453
  %bf.load147 = load i32, i32* %mode, align 4, !dbg !7453
  %bf.lshr148 = lshr i32 %bf.load147, 16, !dbg !7453
  %bf.clear149 = and i32 %bf.lshr148, 255, !dbg !7453
  br label %cond.end150, !dbg !7453

cond.end150:                                      ; preds = %cond.false143, %cond.true139
  %cond151 = phi i32 [ %call142, %cond.true139 ], [ %bf.clear149, %cond.false143 ], !dbg !7453
  %97 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7454
  %mode152 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %97, i32 0, i32 1, !dbg !7455
  %98 = load i32, i32* %mode152, align 8, !dbg !7455
  %cmp153 = icmp ne i32 %cond151, %98, !dbg !7456
  br i1 %cmp153, label %cond.true155, label %cond.false156, !dbg !7457

cond.true155:                                     ; preds = %cond.end150, %if.end128
  br label %cond.end158, !dbg !7457

cond.false156:                                    ; preds = %cond.end150
  %99 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7458
  %stack157 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %99, i32 0, i32 11, !dbg !7459
  %100 = load %struct.rtx_def*, %struct.rtx_def** %stack157, align 8, !dbg !7459
  br label %cond.end158, !dbg !7457

cond.end158:                                      ; preds = %cond.false156, %cond.true155
  %cond159 = phi %struct.rtx_def* [ null, %cond.true155 ], [ %100, %cond.false156 ], !dbg !7457
  %call160 = call %struct.rtx_def* @expand_expr(%union.tree_node* %88, %struct.rtx_def* %cond159, i32 0, i32 1), !dbg !7460
  %101 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7461
  %value161 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %101, i32 0, i32 2, !dbg !7462
  store %struct.rtx_def* %call160, %struct.rtx_def** %value161, align 8, !dbg !7463
  %102 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7464
  %mode162 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %102, i32 0, i32 1, !dbg !7466
  %103 = load i32, i32* %mode162, align 8, !dbg !7466
  %104 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7467
  %common163 = bitcast %union.tree_node* %104 to %struct.tree_common*, !dbg !7467
  %type164 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common163, i32 0, i32 2, !dbg !7467
  %105 = load %union.tree_node*, %union.tree_node** %type164, align 8, !dbg !7467
  %base165 = bitcast %union.tree_node* %105 to %struct.tree_base*, !dbg !7467
  %106 = bitcast %struct.tree_base* %base165 to i64*, !dbg !7467
  %bf.load166 = load i64, i64* %106, align 8, !dbg !7467
  %bf.clear167 = and i64 %bf.load166, 65535, !dbg !7467
  %bf.cast168 = trunc i64 %bf.clear167 to i32, !dbg !7467
  %cmp169 = icmp eq i32 %bf.cast168, 14, !dbg !7467
  br i1 %cmp169, label %cond.true171, label %cond.false175, !dbg !7467

cond.true171:                                     ; preds = %cond.end158
  %107 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7467
  %common172 = bitcast %union.tree_node* %107 to %struct.tree_common*, !dbg !7467
  %type173 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common172, i32 0, i32 2, !dbg !7467
  %108 = load %union.tree_node*, %union.tree_node** %type173, align 8, !dbg !7467
  %call174 = call i32 @vector_type_mode(%union.tree_node* %108), !dbg !7467
  br label %cond.end183, !dbg !7467

cond.false175:                                    ; preds = %cond.end158
  %109 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7467
  %common176 = bitcast %union.tree_node* %109 to %struct.tree_common*, !dbg !7467
  %type177 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common176, i32 0, i32 2, !dbg !7467
  %110 = load %union.tree_node*, %union.tree_node** %type177, align 8, !dbg !7467
  %type178 = bitcast %union.tree_node* %110 to %struct.tree_type*, !dbg !7467
  %mode179 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type178, i32 0, i32 6, !dbg !7467
  %bf.load180 = load i32, i32* %mode179, align 4, !dbg !7467
  %bf.lshr181 = lshr i32 %bf.load180, 16, !dbg !7467
  %bf.clear182 = and i32 %bf.lshr181, 255, !dbg !7467
  br label %cond.end183, !dbg !7467

cond.end183:                                      ; preds = %cond.false175, %cond.true171
  %cond184 = phi i32 [ %call174, %cond.true171 ], [ %bf.clear182, %cond.false175 ], !dbg !7467
  %cmp185 = icmp ne i32 %103, %cond184, !dbg !7468
  br i1 %cmp185, label %if.then187, label %if.end214, !dbg !7469

if.then187:                                       ; preds = %cond.end183
  %111 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7470
  %mode188 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %111, i32 0, i32 1, !dbg !7471
  %112 = load i32, i32* %mode188, align 8, !dbg !7471
  %113 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7472
  %common189 = bitcast %union.tree_node* %113 to %struct.tree_common*, !dbg !7472
  %type190 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common189, i32 0, i32 2, !dbg !7472
  %114 = load %union.tree_node*, %union.tree_node** %type190, align 8, !dbg !7472
  %base191 = bitcast %union.tree_node* %114 to %struct.tree_base*, !dbg !7472
  %115 = bitcast %struct.tree_base* %base191 to i64*, !dbg !7472
  %bf.load192 = load i64, i64* %115, align 8, !dbg !7472
  %bf.clear193 = and i64 %bf.load192, 65535, !dbg !7472
  %bf.cast194 = trunc i64 %bf.clear193 to i32, !dbg !7472
  %cmp195 = icmp eq i32 %bf.cast194, 14, !dbg !7472
  br i1 %cmp195, label %cond.true197, label %cond.false201, !dbg !7472

cond.true197:                                     ; preds = %if.then187
  %116 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7472
  %common198 = bitcast %union.tree_node* %116 to %struct.tree_common*, !dbg !7472
  %type199 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common198, i32 0, i32 2, !dbg !7472
  %117 = load %union.tree_node*, %union.tree_node** %type199, align 8, !dbg !7472
  %call200 = call i32 @vector_type_mode(%union.tree_node* %117), !dbg !7472
  br label %cond.end209, !dbg !7472

cond.false201:                                    ; preds = %if.then187
  %118 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7472
  %common202 = bitcast %union.tree_node* %118 to %struct.tree_common*, !dbg !7472
  %type203 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common202, i32 0, i32 2, !dbg !7472
  %119 = load %union.tree_node*, %union.tree_node** %type203, align 8, !dbg !7472
  %type204 = bitcast %union.tree_node* %119 to %struct.tree_type*, !dbg !7472
  %mode205 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type204, i32 0, i32 6, !dbg !7472
  %bf.load206 = load i32, i32* %mode205, align 4, !dbg !7472
  %bf.lshr207 = lshr i32 %bf.load206, 16, !dbg !7472
  %bf.clear208 = and i32 %bf.lshr207, 255, !dbg !7472
  br label %cond.end209, !dbg !7472

cond.end209:                                      ; preds = %cond.false201, %cond.true197
  %cond210 = phi i32 [ %call200, %cond.true197 ], [ %bf.clear208, %cond.false201 ], !dbg !7472
  %120 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7473
  %value211 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %120, i32 0, i32 2, !dbg !7474
  %121 = load %struct.rtx_def*, %struct.rtx_def** %value211, align 8, !dbg !7474
  %122 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7475
  %unsignedp = getelementptr inbounds %struct.arg_data, %struct.arg_data* %122, i32 0, i32 7, !dbg !7476
  %123 = load i32, i32* %unsignedp, align 8, !dbg !7476
  %call212 = call %struct.rtx_def* @convert_modes(i32 %112, i32 %cond210, %struct.rtx_def* %121, i32 %123), !dbg !7477
  %124 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7478
  %value213 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %124, i32 0, i32 2, !dbg !7479
  store %struct.rtx_def* %call212, %struct.rtx_def** %value213, align 8, !dbg !7480
  br label %if.end214, !dbg !7478

if.end214:                                        ; preds = %cond.end209, %cond.end183
  %125 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7481
  %pass_on_stack215 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %125, i32 0, i32 9, !dbg !7483
  %126 = load i32, i32* %pass_on_stack215, align 8, !dbg !7483
  %tobool216 = icmp ne i32 %126, 0, !dbg !7481
  br i1 %tobool216, label %if.then217, label %if.end218, !dbg !7484

if.then217:                                       ; preds = %if.end214
  %127 = load i32, i32* @stack_arg_under_construction, align 4, !dbg !7485
  %dec = add nsw i32 %127, -1, !dbg !7485
  store i32 %dec, i32* @stack_arg_under_construction, align 4, !dbg !7485
  br label %if.end218, !dbg !7486

if.end218:                                        ; preds = %if.then217, %if.end214
  br label %if.end219, !dbg !7487

if.end219:                                        ; preds = %if.end218, %if.end120
  %128 = load i32, i32* %flags.addr, align 4, !dbg !7488
  %and220 = and i32 %128, 256, !dbg !7490
  %tobool221 = icmp ne i32 %and220, 0, !dbg !7490
  br i1 %tobool221, label %land.lhs.true222, label %if.end241, !dbg !7491

land.lhs.true222:                                 ; preds = %if.end219
  %129 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7492
  %value223 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %129, i32 0, i32 2, !dbg !7492
  %130 = load %struct.rtx_def*, %struct.rtx_def** %value223, align 8, !dbg !7492
  %131 = bitcast %struct.rtx_def* %130 to i32*, !dbg !7492
  %bf.load224 = load i32, i32* %131, align 8, !dbg !7492
  %bf.clear225 = and i32 %bf.load224, 65535, !dbg !7492
  %cmp226 = icmp eq i32 %bf.clear225, 43, !dbg !7492
  br i1 %cmp226, label %land.lhs.true228, label %if.end241, !dbg !7493

land.lhs.true228:                                 ; preds = %land.lhs.true222
  %132 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7494
  %value229 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %132, i32 0, i32 2, !dbg !7494
  %133 = load %struct.rtx_def*, %struct.rtx_def** %value229, align 8, !dbg !7494
  %u230 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !7494
  %fld231 = bitcast %union.u* %u230 to [1 x %union.rtunion_def]*, !dbg !7494
  %arrayidx232 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld231, i64 0, i64 0, !dbg !7494
  %rt_rtx233 = bitcast %union.rtunion_def* %arrayidx232 to %struct.rtx_def**, !dbg !7494
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx233, align 8, !dbg !7494
  %135 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7495
  %locate234 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %135, i32 0, i32 10, !dbg !7496
  %size235 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate234, i32 0, i32 0, !dbg !7497
  %constant236 = getelementptr inbounds %struct.args_size, %struct.args_size* %size235, i32 0, i32 0, !dbg !7498
  %136 = load i64, i64* %constant236, align 8, !dbg !7498
  %call237 = call zeroext i8 @mem_overlaps_already_clobbered_arg_p(%struct.rtx_def* %134, i64 %136), !dbg !7499
  %conv238 = zext i8 %call237 to i32, !dbg !7499
  %tobool239 = icmp ne i32 %conv238, 0, !dbg !7499
  br i1 %tobool239, label %if.then240, label %if.end241, !dbg !7500

if.then240:                                       ; preds = %land.lhs.true228
  store i32 1, i32* %sibcall_failure, align 4, !dbg !7501
  br label %if.end241, !dbg !7502

if.end241:                                        ; preds = %if.then240, %land.lhs.true228, %land.lhs.true222, %if.end219
  %137 = load i32, i32* %flags.addr, align 4, !dbg !7503
  %and242 = and i32 %137, 32, !dbg !7505
  %tobool243 = icmp ne i32 %and242, 0, !dbg !7505
  br i1 %tobool243, label %if.then244, label %if.end245, !dbg !7506

if.then244:                                       ; preds = %if.end241
  call void @do_pending_stack_adjust(), !dbg !7507
  br label %if.end245, !dbg !7507

if.end245:                                        ; preds = %if.then244, %if.end241
  %138 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7508
  %value246 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %138, i32 0, i32 2, !dbg !7510
  %139 = load %struct.rtx_def*, %struct.rtx_def** %value246, align 8, !dbg !7510
  %140 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7511
  %stack247 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %140, i32 0, i32 11, !dbg !7512
  %141 = load %struct.rtx_def*, %struct.rtx_def** %stack247, align 8, !dbg !7512
  %cmp248 = icmp eq %struct.rtx_def* %139, %141, !dbg !7513
  br i1 %cmp248, label %if.then250, label %if.else251, !dbg !7514

if.then250:                                       ; preds = %if.end245
  br label %if.end652, !dbg !7514

if.else251:                                       ; preds = %if.end245
  %142 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7515
  %mode252 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %142, i32 0, i32 1, !dbg !7517
  %143 = load i32, i32* %mode252, align 8, !dbg !7517
  %cmp253 = icmp ne i32 %143, 1, !dbg !7518
  br i1 %cmp253, label %if.then255, label %if.else347, !dbg !7519

if.then255:                                       ; preds = %if.else251
  call void @llvm.dbg.declare(metadata i32* %size256, metadata !7520, metadata !DIExpression()), !dbg !7522
  call void @llvm.dbg.declare(metadata i32* %parm_align, metadata !7523, metadata !DIExpression()), !dbg !7524
  %144 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7525
  %mode257 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %144, i32 0, i32 1, !dbg !7525
  %145 = load i32, i32* %mode257, align 8, !dbg !7525
  %idxprom258 = zext i32 %145 to i64, !dbg !7525
  %arrayidx259 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom258, !dbg !7525
  %146 = load i8, i8* %arrayidx259, align 1, !dbg !7525
  %conv260 = zext i8 %146 to i16, !dbg !7525
  %conv261 = zext i16 %conv260 to i32, !dbg !7525
  store i32 %conv261, i32* %size256, align 4, !dbg !7526
  %147 = load i32, i32* %size256, align 4, !dbg !7527
  %add262 = add nsw i32 %147, 3, !dbg !7527
  %and263 = and i32 %add262, -4, !dbg !7527
  store i32 %and263, i32* %size256, align 4, !dbg !7528
  %148 = load i32, i32* %size256, align 4, !dbg !7529
  store i32 %148, i32* %used, align 4, !dbg !7530
  %149 = load i32, i32* %size256, align 4, !dbg !7531
  %add264 = add nsw i32 %149, 4, !dbg !7533
  %sub = sub nsw i32 %add264, 1, !dbg !7534
  %div = sdiv i32 %sub, 4, !dbg !7535
  %mul265 = mul nsw i32 %div, 4, !dbg !7536
  store i32 %mul265, i32* %used, align 4, !dbg !7537
  %150 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7538
  %locate266 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %150, i32 0, i32 10, !dbg !7539
  %boundary = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate266, i32 0, i32 5, !dbg !7540
  %151 = load i32, i32* %boundary, align 4, !dbg !7540
  store i32 %151, i32* %parm_align, align 4, !dbg !7541
  %152 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7542
  %value267 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %152, i32 0, i32 2, !dbg !7543
  %153 = load %struct.rtx_def*, %struct.rtx_def** %value267, align 8, !dbg !7543
  %154 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7544
  %mode268 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %154, i32 0, i32 1, !dbg !7545
  %155 = load i32, i32* %mode268, align 8, !dbg !7545
  %156 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7546
  %common269 = bitcast %union.tree_node* %156 to %struct.tree_common*, !dbg !7546
  %type270 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common269, i32 0, i32 2, !dbg !7546
  %157 = load %union.tree_node*, %union.tree_node** %type270, align 8, !dbg !7546
  %158 = load i32, i32* %parm_align, align 4, !dbg !7547
  %159 = load i32, i32* %partial, align 4, !dbg !7548
  %160 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7549
  %161 = load i32, i32* %used, align 4, !dbg !7550
  %162 = load i32, i32* %size256, align 4, !dbg !7551
  %sub271 = sub nsw i32 %161, %162, !dbg !7552
  %163 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !7553
  %164 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate272 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %164, i32 0, i32 10, !dbg !7554
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate272, i32 0, i32 1, !dbg !7554
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %offset, i32 0, i32 1, !dbg !7554
  %165 = load %union.tree_node*, %union.tree_node** %var, align 8, !dbg !7554
  %cmp273 = icmp eq %union.tree_node* %165, null, !dbg !7554
  br i1 %cmp273, label %cond.true275, label %cond.false280, !dbg !7554

cond.true275:                                     ; preds = %if.then255
  %166 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate276 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %166, i32 0, i32 10, !dbg !7554
  %offset277 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate276, i32 0, i32 1, !dbg !7554
  %constant278 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset277, i32 0, i32 0, !dbg !7554
  %167 = load i64, i64* %constant278, align 8, !dbg !7554
  %call279 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %167), !dbg !7554
  br label %cond.end304, !dbg !7554

cond.false280:                                    ; preds = %if.then255
  %168 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate281 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %168, i32 0, i32 10, !dbg !7554
  %offset282 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate281, i32 0, i32 1, !dbg !7554
  %var283 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset282, i32 0, i32 1, !dbg !7554
  %169 = load %union.tree_node*, %union.tree_node** %var283, align 8, !dbg !7554
  %cmp284 = icmp eq %union.tree_node* %169, null, !dbg !7554
  br i1 %cmp284, label %cond.true286, label %cond.false291, !dbg !7554

cond.true286:                                     ; preds = %cond.false280
  %170 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate287 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %170, i32 0, i32 10, !dbg !7554
  %offset288 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate287, i32 0, i32 1, !dbg !7554
  %constant289 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset288, i32 0, i32 0, !dbg !7554
  %171 = load i64, i64* %constant289, align 8, !dbg !7554
  %call290 = call %union.tree_node* @size_int_kind(i64 %171, i32 1), !dbg !7554
  br label %cond.end301, !dbg !7554

cond.false291:                                    ; preds = %cond.false280
  %172 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7554
  %173 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate292 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %173, i32 0, i32 10, !dbg !7554
  %offset293 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate292, i32 0, i32 1, !dbg !7554
  %var294 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset293, i32 0, i32 1, !dbg !7554
  %174 = load %union.tree_node*, %union.tree_node** %var294, align 8, !dbg !7554
  %call295 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %172, %union.tree_node* %174), !dbg !7554
  %175 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7554
  %locate296 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %175, i32 0, i32 10, !dbg !7554
  %offset297 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate296, i32 0, i32 1, !dbg !7554
  %constant298 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset297, i32 0, i32 0, !dbg !7554
  %176 = load i64, i64* %constant298, align 8, !dbg !7554
  %call299 = call %union.tree_node* @size_int_kind(i64 %176, i32 1), !dbg !7554
  %call300 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call295, %union.tree_node* %call299), !dbg !7554
  br label %cond.end301, !dbg !7554

cond.end301:                                      ; preds = %cond.false291, %cond.true286
  %cond302 = phi %union.tree_node* [ %call290, %cond.true286 ], [ %call300, %cond.false291 ], !dbg !7554
  %call303 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond302), !dbg !7554
  br label %cond.end304, !dbg !7554

cond.end304:                                      ; preds = %cond.end301, %cond.true275
  %cond305 = phi %struct.rtx_def* [ %call279, %cond.true275 ], [ %call303, %cond.end301 ], !dbg !7554
  %177 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !7555
  %178 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate306 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %178, i32 0, i32 10, !dbg !7556
  %alignment_pad = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate306, i32 0, i32 3, !dbg !7556
  %var307 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad, i32 0, i32 1, !dbg !7556
  %179 = load %union.tree_node*, %union.tree_node** %var307, align 8, !dbg !7556
  %cmp308 = icmp eq %union.tree_node* %179, null, !dbg !7556
  br i1 %cmp308, label %cond.true310, label %cond.false315, !dbg !7556

cond.true310:                                     ; preds = %cond.end304
  %180 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate311 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %180, i32 0, i32 10, !dbg !7556
  %alignment_pad312 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate311, i32 0, i32 3, !dbg !7556
  %constant313 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad312, i32 0, i32 0, !dbg !7556
  %181 = load i64, i64* %constant313, align 8, !dbg !7556
  %call314 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %181), !dbg !7556
  br label %cond.end339, !dbg !7556

cond.false315:                                    ; preds = %cond.end304
  %182 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate316 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %182, i32 0, i32 10, !dbg !7556
  %alignment_pad317 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate316, i32 0, i32 3, !dbg !7556
  %var318 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad317, i32 0, i32 1, !dbg !7556
  %183 = load %union.tree_node*, %union.tree_node** %var318, align 8, !dbg !7556
  %cmp319 = icmp eq %union.tree_node* %183, null, !dbg !7556
  br i1 %cmp319, label %cond.true321, label %cond.false326, !dbg !7556

cond.true321:                                     ; preds = %cond.false315
  %184 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate322 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %184, i32 0, i32 10, !dbg !7556
  %alignment_pad323 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate322, i32 0, i32 3, !dbg !7556
  %constant324 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad323, i32 0, i32 0, !dbg !7556
  %185 = load i64, i64* %constant324, align 8, !dbg !7556
  %call325 = call %union.tree_node* @size_int_kind(i64 %185, i32 1), !dbg !7556
  br label %cond.end336, !dbg !7556

cond.false326:                                    ; preds = %cond.false315
  %186 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7556
  %187 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate327 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %187, i32 0, i32 10, !dbg !7556
  %alignment_pad328 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate327, i32 0, i32 3, !dbg !7556
  %var329 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad328, i32 0, i32 1, !dbg !7556
  %188 = load %union.tree_node*, %union.tree_node** %var329, align 8, !dbg !7556
  %call330 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %186, %union.tree_node* %188), !dbg !7556
  %189 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7556
  %locate331 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %189, i32 0, i32 10, !dbg !7556
  %alignment_pad332 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate331, i32 0, i32 3, !dbg !7556
  %constant333 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad332, i32 0, i32 0, !dbg !7556
  %190 = load i64, i64* %constant333, align 8, !dbg !7556
  %call334 = call %union.tree_node* @size_int_kind(i64 %190, i32 1), !dbg !7556
  %call335 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call330, %union.tree_node* %call334), !dbg !7556
  br label %cond.end336, !dbg !7556

cond.end336:                                      ; preds = %cond.false326, %cond.true321
  %cond337 = phi %union.tree_node* [ %call325, %cond.true321 ], [ %call335, %cond.false326 ], !dbg !7556
  %call338 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond337), !dbg !7556
  br label %cond.end339, !dbg !7556

cond.end339:                                      ; preds = %cond.end336, %cond.true310
  %cond340 = phi %struct.rtx_def* [ %call314, %cond.true310 ], [ %call338, %cond.end336 ], !dbg !7556
  call void @emit_push_insn(%struct.rtx_def* %153, i32 %155, %union.tree_node* %157, %struct.rtx_def* null, i32 %158, i32 %159, %struct.rtx_def* %160, i32 %sub271, %struct.rtx_def* %163, %struct.rtx_def* %cond305, i32 %177, %struct.rtx_def* %cond340), !dbg !7557
  %191 = load i32, i32* %partial, align 4, !dbg !7558
  %cmp341 = icmp eq i32 %191, 0, !dbg !7560
  br i1 %cmp341, label %if.then343, label %if.end346, !dbg !7561

if.then343:                                       ; preds = %cond.end339
  %192 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7562
  %stack344 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %192, i32 0, i32 11, !dbg !7563
  %193 = load %struct.rtx_def*, %struct.rtx_def** %stack344, align 8, !dbg !7563
  %194 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7564
  %value345 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %194, i32 0, i32 2, !dbg !7565
  store %struct.rtx_def* %193, %struct.rtx_def** %value345, align 8, !dbg !7566
  br label %if.end346, !dbg !7564

if.end346:                                        ; preds = %if.then343, %cond.end339
  br label %if.end651, !dbg !7567

if.else347:                                       ; preds = %if.else251
  call void @llvm.dbg.declare(metadata i32* %parm_align348, metadata !7568, metadata !DIExpression()), !dbg !7570
  call void @llvm.dbg.declare(metadata i32* %excess, metadata !7571, metadata !DIExpression()), !dbg !7572
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %size_rtx, metadata !7573, metadata !DIExpression()), !dbg !7574
  %195 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7575
  %locate349 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %195, i32 0, i32 10, !dbg !7577
  %size350 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate349, i32 0, i32 0, !dbg !7578
  %var351 = getelementptr inbounds %struct.args_size, %struct.args_size* %size350, i32 0, i32 1, !dbg !7579
  %196 = load %union.tree_node*, %union.tree_node** %var351, align 8, !dbg !7579
  %cmp352 = icmp ne %union.tree_node* %196, null, !dbg !7580
  br i1 %cmp352, label %if.then354, label %if.else391, !dbg !7581

if.then354:                                       ; preds = %if.else347
  store i32 0, i32* %excess, align 4, !dbg !7582
  %197 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate355 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %197, i32 0, i32 10, !dbg !7584
  %size356 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate355, i32 0, i32 0, !dbg !7584
  %var357 = getelementptr inbounds %struct.args_size, %struct.args_size* %size356, i32 0, i32 1, !dbg !7584
  %198 = load %union.tree_node*, %union.tree_node** %var357, align 8, !dbg !7584
  %cmp358 = icmp eq %union.tree_node* %198, null, !dbg !7584
  br i1 %cmp358, label %cond.true360, label %cond.false365, !dbg !7584

cond.true360:                                     ; preds = %if.then354
  %199 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate361 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %199, i32 0, i32 10, !dbg !7584
  %size362 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate361, i32 0, i32 0, !dbg !7584
  %constant363 = getelementptr inbounds %struct.args_size, %struct.args_size* %size362, i32 0, i32 0, !dbg !7584
  %200 = load i64, i64* %constant363, align 8, !dbg !7584
  %call364 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %200), !dbg !7584
  br label %cond.end389, !dbg !7584

cond.false365:                                    ; preds = %if.then354
  %201 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate366 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %201, i32 0, i32 10, !dbg !7584
  %size367 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate366, i32 0, i32 0, !dbg !7584
  %var368 = getelementptr inbounds %struct.args_size, %struct.args_size* %size367, i32 0, i32 1, !dbg !7584
  %202 = load %union.tree_node*, %union.tree_node** %var368, align 8, !dbg !7584
  %cmp369 = icmp eq %union.tree_node* %202, null, !dbg !7584
  br i1 %cmp369, label %cond.true371, label %cond.false376, !dbg !7584

cond.true371:                                     ; preds = %cond.false365
  %203 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate372 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %203, i32 0, i32 10, !dbg !7584
  %size373 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate372, i32 0, i32 0, !dbg !7584
  %constant374 = getelementptr inbounds %struct.args_size, %struct.args_size* %size373, i32 0, i32 0, !dbg !7584
  %204 = load i64, i64* %constant374, align 8, !dbg !7584
  %call375 = call %union.tree_node* @size_int_kind(i64 %204, i32 1), !dbg !7584
  br label %cond.end386, !dbg !7584

cond.false376:                                    ; preds = %cond.false365
  %205 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7584
  %206 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate377 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %206, i32 0, i32 10, !dbg !7584
  %size378 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate377, i32 0, i32 0, !dbg !7584
  %var379 = getelementptr inbounds %struct.args_size, %struct.args_size* %size378, i32 0, i32 1, !dbg !7584
  %207 = load %union.tree_node*, %union.tree_node** %var379, align 8, !dbg !7584
  %call380 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %205, %union.tree_node* %207), !dbg !7584
  %208 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7584
  %locate381 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %208, i32 0, i32 10, !dbg !7584
  %size382 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate381, i32 0, i32 0, !dbg !7584
  %constant383 = getelementptr inbounds %struct.args_size, %struct.args_size* %size382, i32 0, i32 0, !dbg !7584
  %209 = load i64, i64* %constant383, align 8, !dbg !7584
  %call384 = call %union.tree_node* @size_int_kind(i64 %209, i32 1), !dbg !7584
  %call385 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call380, %union.tree_node* %call384), !dbg !7584
  br label %cond.end386, !dbg !7584

cond.end386:                                      ; preds = %cond.false376, %cond.true371
  %cond387 = phi %union.tree_node* [ %call375, %cond.true371 ], [ %call385, %cond.false376 ], !dbg !7584
  %call388 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond387), !dbg !7584
  br label %cond.end389, !dbg !7584

cond.end389:                                      ; preds = %cond.end386, %cond.true360
  %cond390 = phi %struct.rtx_def* [ %call364, %cond.true360 ], [ %call388, %cond.end386 ], !dbg !7584
  store %struct.rtx_def* %cond390, %struct.rtx_def** %size_rtx, align 8, !dbg !7585
  br label %if.end422, !dbg !7586

if.else391:                                       ; preds = %if.else347
  %210 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7587
  %locate392 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %210, i32 0, i32 10, !dbg !7589
  %size393 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate392, i32 0, i32 0, !dbg !7590
  %constant394 = getelementptr inbounds %struct.args_size, %struct.args_size* %size393, i32 0, i32 0, !dbg !7591
  %211 = load i64, i64* %constant394, align 8, !dbg !7591
  %212 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7592
  %common395 = bitcast %union.tree_node* %212 to %struct.tree_common*, !dbg !7592
  %type396 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common395, i32 0, i32 2, !dbg !7592
  %213 = load %union.tree_node*, %union.tree_node** %type396, align 8, !dbg !7592
  %call397 = call i64 @int_size_in_bytes(%union.tree_node* %213), !dbg !7593
  %sub398 = sub nsw i64 %211, %call397, !dbg !7594
  %214 = load i32, i32* %partial, align 4, !dbg !7595
  %conv399 = sext i32 %214 to i64, !dbg !7595
  %add400 = add nsw i64 %sub398, %conv399, !dbg !7596
  %conv401 = trunc i64 %add400 to i32, !dbg !7597
  store i32 %conv401, i32* %excess, align 4, !dbg !7598
  %215 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7599
  %common402 = bitcast %union.tree_node* %215 to %struct.tree_common*, !dbg !7599
  %type403 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common402, i32 0, i32 2, !dbg !7599
  %216 = load %union.tree_node*, %union.tree_node** %type403, align 8, !dbg !7599
  %call404 = call %union.tree_node* @size_in_bytes(%union.tree_node* %216), !dbg !7600
  %217 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7601
  %base405 = bitcast %union.tree_node* %217 to %struct.tree_base*, !dbg !7601
  %218 = bitcast %struct.tree_base* %base405 to i64*, !dbg !7601
  %bf.load406 = load i64, i64* %218, align 8, !dbg !7601
  %bf.clear407 = and i64 %bf.load406, 65535, !dbg !7601
  %bf.cast408 = trunc i64 %bf.clear407 to i32, !dbg !7601
  %cmp409 = icmp eq i32 %bf.cast408, 14, !dbg !7601
  br i1 %cmp409, label %cond.true411, label %cond.false413, !dbg !7601

cond.true411:                                     ; preds = %if.else391
  %219 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7601
  %call412 = call i32 @vector_type_mode(%union.tree_node* %219), !dbg !7601
  br label %cond.end419, !dbg !7601

cond.false413:                                    ; preds = %if.else391
  %220 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 0), align 16, !dbg !7601
  %type414 = bitcast %union.tree_node* %220 to %struct.tree_type*, !dbg !7601
  %mode415 = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type414, i32 0, i32 6, !dbg !7601
  %bf.load416 = load i32, i32* %mode415, align 4, !dbg !7601
  %bf.lshr417 = lshr i32 %bf.load416, 16, !dbg !7601
  %bf.clear418 = and i32 %bf.lshr417, 255, !dbg !7601
  br label %cond.end419, !dbg !7601

cond.end419:                                      ; preds = %cond.false413, %cond.true411
  %cond420 = phi i32 [ %call412, %cond.true411 ], [ %bf.clear418, %cond.false413 ], !dbg !7601
  %call421 = call %struct.rtx_def* @expand_expr(%union.tree_node* %call404, %struct.rtx_def* null, i32 %cond420, i32 0), !dbg !7602
  store %struct.rtx_def* %call421, %struct.rtx_def** %size_rtx, align 8, !dbg !7603
  br label %if.end422

if.end422:                                        ; preds = %cond.end419, %cond.end389
  %221 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7604
  %locate423 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %221, i32 0, i32 10, !dbg !7605
  %boundary424 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate423, i32 0, i32 5, !dbg !7606
  %222 = load i32, i32* %boundary424, align 4, !dbg !7606
  store i32 %222, i32* %parm_align348, align 4, !dbg !7607
  %223 = load i32, i32* %flags.addr, align 4, !dbg !7608
  %and425 = and i32 %223, 256, !dbg !7610
  %tobool426 = icmp ne i32 %and425, 0, !dbg !7610
  br i1 %tobool426, label %land.lhs.true427, label %if.end568, !dbg !7611

land.lhs.true427:                                 ; preds = %if.end422
  %224 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7612
  %value428 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %224, i32 0, i32 2, !dbg !7612
  %225 = load %struct.rtx_def*, %struct.rtx_def** %value428, align 8, !dbg !7612
  %226 = bitcast %struct.rtx_def* %225 to i32*, !dbg !7612
  %bf.load429 = load i32, i32* %226, align 8, !dbg !7612
  %bf.clear430 = and i32 %bf.load429, 65535, !dbg !7612
  %cmp431 = icmp eq i32 %bf.clear430, 43, !dbg !7612
  br i1 %cmp431, label %if.then433, label %if.end568, !dbg !7613

if.then433:                                       ; preds = %land.lhs.true427
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !7614, metadata !DIExpression()), !dbg !7616
  %227 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7617
  %value434 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %227, i32 0, i32 2, !dbg !7618
  %228 = load %struct.rtx_def*, %struct.rtx_def** %value434, align 8, !dbg !7618
  store %struct.rtx_def* %228, %struct.rtx_def** %x, align 8, !dbg !7616
  call void @llvm.dbg.declare(metadata i32* %i435, metadata !7619, metadata !DIExpression()), !dbg !7620
  store i32 0, i32* %i435, align 4, !dbg !7620
  %229 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7621
  %u436 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1, !dbg !7621
  %fld437 = bitcast %union.u* %u436 to [1 x %union.rtunion_def]*, !dbg !7621
  %arrayidx438 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld437, i64 0, i64 0, !dbg !7621
  %rt_rtx439 = bitcast %union.rtunion_def* %arrayidx438 to %struct.rtx_def**, !dbg !7621
  %230 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx439, align 8, !dbg !7621
  %231 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !7623
  %cmp440 = icmp eq %struct.rtx_def* %230, %231, !dbg !7624
  br i1 %cmp440, label %if.then475, label %lor.lhs.false442, !dbg !7625

lor.lhs.false442:                                 ; preds = %if.then433
  %232 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7626
  %u443 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1, !dbg !7626
  %fld444 = bitcast %union.u* %u443 to [1 x %union.rtunion_def]*, !dbg !7626
  %arrayidx445 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld444, i64 0, i64 0, !dbg !7626
  %rt_rtx446 = bitcast %union.rtunion_def* %arrayidx445 to %struct.rtx_def**, !dbg !7626
  %233 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx446, align 8, !dbg !7626
  %234 = bitcast %struct.rtx_def* %233 to i32*, !dbg !7626
  %bf.load447 = load i32, i32* %234, align 8, !dbg !7626
  %bf.clear448 = and i32 %bf.load447, 65535, !dbg !7626
  %cmp449 = icmp eq i32 %bf.clear448, 49, !dbg !7627
  br i1 %cmp449, label %land.lhs.true451, label %if.end567, !dbg !7628

land.lhs.true451:                                 ; preds = %lor.lhs.false442
  %235 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7629
  %u452 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %235, i32 0, i32 1, !dbg !7629
  %fld453 = bitcast %union.u* %u452 to [1 x %union.rtunion_def]*, !dbg !7629
  %arrayidx454 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld453, i64 0, i64 0, !dbg !7629
  %rt_rtx455 = bitcast %union.rtunion_def* %arrayidx454 to %struct.rtx_def**, !dbg !7629
  %236 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx455, align 8, !dbg !7629
  %u456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1, !dbg !7629
  %fld457 = bitcast %union.u* %u456 to [1 x %union.rtunion_def]*, !dbg !7629
  %arrayidx458 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld457, i64 0, i64 0, !dbg !7629
  %rt_rtx459 = bitcast %union.rtunion_def* %arrayidx458 to %struct.rtx_def**, !dbg !7629
  %237 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx459, align 8, !dbg !7629
  %238 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !7630
  %cmp460 = icmp eq %struct.rtx_def* %237, %238, !dbg !7631
  br i1 %cmp460, label %land.lhs.true462, label %if.end567, !dbg !7632

land.lhs.true462:                                 ; preds = %land.lhs.true451
  %239 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7633
  %u463 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1, !dbg !7633
  %fld464 = bitcast %union.u* %u463 to [1 x %union.rtunion_def]*, !dbg !7633
  %arrayidx465 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld464, i64 0, i64 0, !dbg !7633
  %rt_rtx466 = bitcast %union.rtunion_def* %arrayidx465 to %struct.rtx_def**, !dbg !7633
  %240 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx466, align 8, !dbg !7633
  %u467 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %240, i32 0, i32 1, !dbg !7633
  %fld468 = bitcast %union.u* %u467 to [1 x %union.rtunion_def]*, !dbg !7633
  %arrayidx469 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld468, i64 0, i64 1, !dbg !7633
  %rt_rtx470 = bitcast %union.rtunion_def* %arrayidx469 to %struct.rtx_def**, !dbg !7633
  %241 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx470, align 8, !dbg !7633
  %242 = bitcast %struct.rtx_def* %241 to i32*, !dbg !7633
  %bf.load471 = load i32, i32* %242, align 8, !dbg !7633
  %bf.clear472 = and i32 %bf.load471, 65535, !dbg !7633
  %cmp473 = icmp eq i32 %bf.clear472, 30, !dbg !7633
  br i1 %cmp473, label %if.then475, label %if.end567, !dbg !7634

if.then475:                                       ; preds = %land.lhs.true462, %if.then433
  %243 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7635
  %u476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %243, i32 0, i32 1, !dbg !7635
  %fld477 = bitcast %union.u* %u476 to [1 x %union.rtunion_def]*, !dbg !7635
  %arrayidx478 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld477, i64 0, i64 0, !dbg !7635
  %rt_rtx479 = bitcast %union.rtunion_def* %arrayidx478 to %struct.rtx_def**, !dbg !7635
  %244 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx479, align 8, !dbg !7635
  %245 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !7638
  %cmp480 = icmp ne %struct.rtx_def* %244, %245, !dbg !7639
  br i1 %cmp480, label %if.then482, label %if.end495, !dbg !7640

if.then482:                                       ; preds = %if.then475
  %246 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7641
  %u483 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1, !dbg !7641
  %fld484 = bitcast %union.u* %u483 to [1 x %union.rtunion_def]*, !dbg !7641
  %arrayidx485 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld484, i64 0, i64 0, !dbg !7641
  %rt_rtx486 = bitcast %union.rtunion_def* %arrayidx485 to %struct.rtx_def**, !dbg !7641
  %247 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx486, align 8, !dbg !7641
  %u487 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %247, i32 0, i32 1, !dbg !7641
  %fld488 = bitcast %union.u* %u487 to [1 x %union.rtunion_def]*, !dbg !7641
  %arrayidx489 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld488, i64 0, i64 1, !dbg !7641
  %rt_rtx490 = bitcast %union.rtunion_def* %arrayidx489 to %struct.rtx_def**, !dbg !7641
  %248 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx490, align 8, !dbg !7641
  %u491 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %248, i32 0, i32 1, !dbg !7641
  %hwint492 = bitcast %union.u* %u491 to [1 x i64]*, !dbg !7641
  %arrayidx493 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint492, i64 0, i64 0, !dbg !7641
  %249 = load i64, i64* %arrayidx493, align 8, !dbg !7641
  %conv494 = trunc i64 %249 to i32, !dbg !7641
  store i32 %conv494, i32* %i435, align 4, !dbg !7642
  br label %if.end495, !dbg !7643

if.end495:                                        ; preds = %if.then482, %if.then475
  %250 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7644
  %locate496 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %250, i32 0, i32 10, !dbg !7644
  %offset497 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate496, i32 0, i32 1, !dbg !7644
  %var498 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset497, i32 0, i32 1, !dbg !7644
  %251 = load %union.tree_node*, %union.tree_node** %var498, align 8, !dbg !7644
  %tobool499 = icmp ne %union.tree_node* %251, null, !dbg !7644
  br i1 %tobool499, label %cond.true511, label %land.lhs.true500, !dbg !7644

land.lhs.true500:                                 ; preds = %if.end495
  %252 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7644
  %locate501 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %252, i32 0, i32 10, !dbg !7644
  %size502 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate501, i32 0, i32 0, !dbg !7644
  %var503 = getelementptr inbounds %struct.args_size, %struct.args_size* %size502, i32 0, i32 1, !dbg !7644
  %253 = load %union.tree_node*, %union.tree_node** %var503, align 8, !dbg !7644
  %cmp504 = icmp eq %union.tree_node* %253, null, !dbg !7644
  br i1 %cmp504, label %land.lhs.true506, label %cond.true511, !dbg !7644

land.lhs.true506:                                 ; preds = %land.lhs.true500
  %254 = load %struct.rtx_def*, %struct.rtx_def** %size_rtx, align 8, !dbg !7644
  %255 = bitcast %struct.rtx_def* %254 to i32*, !dbg !7644
  %bf.load507 = load i32, i32* %255, align 8, !dbg !7644
  %bf.clear508 = and i32 %bf.load507, 65535, !dbg !7644
  %cmp509 = icmp eq i32 %bf.clear508, 30, !dbg !7644
  br i1 %cmp509, label %cond.false512, label %cond.true511, !dbg !7644

cond.true511:                                     ; preds = %land.lhs.true506, %land.lhs.true500, %if.end495
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 4270, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7644
  br label %cond.end513, !dbg !7644

cond.false512:                                    ; preds = %land.lhs.true506
  br label %cond.end513, !dbg !7644

cond.end513:                                      ; preds = %cond.false512, %cond.true511
  %cond514 = phi i32 [ 0, %cond.true511 ], [ 0, %cond.false512 ], !dbg !7644
  %256 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7645
  %locate515 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %256, i32 0, i32 10, !dbg !7647
  %offset516 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate515, i32 0, i32 1, !dbg !7648
  %constant517 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset516, i32 0, i32 0, !dbg !7649
  %257 = load i64, i64* %constant517, align 8, !dbg !7649
  %258 = load i32, i32* %i435, align 4, !dbg !7650
  %conv518 = sext i32 %258 to i64, !dbg !7650
  %cmp519 = icmp sgt i64 %257, %conv518, !dbg !7651
  br i1 %cmp519, label %if.then521, label %if.else534, !dbg !7652

if.then521:                                       ; preds = %cond.end513
  %259 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7653
  %locate522 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %259, i32 0, i32 10, !dbg !7656
  %offset523 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate522, i32 0, i32 1, !dbg !7657
  %constant524 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset523, i32 0, i32 0, !dbg !7658
  %260 = load i64, i64* %constant524, align 8, !dbg !7658
  %261 = load i32, i32* %i435, align 4, !dbg !7659
  %conv525 = sext i32 %261 to i64, !dbg !7659
  %262 = load %struct.rtx_def*, %struct.rtx_def** %size_rtx, align 8, !dbg !7660
  %u526 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %262, i32 0, i32 1, !dbg !7660
  %hwint527 = bitcast %union.u* %u526 to [1 x i64]*, !dbg !7660
  %arrayidx528 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint527, i64 0, i64 0, !dbg !7660
  %263 = load i64, i64* %arrayidx528, align 8, !dbg !7660
  %add529 = add nsw i64 %conv525, %263, !dbg !7661
  %cmp530 = icmp slt i64 %260, %add529, !dbg !7662
  br i1 %cmp530, label %if.then532, label %if.end533, !dbg !7663

if.then532:                                       ; preds = %if.then521
  store i32 1, i32* %sibcall_failure, align 4, !dbg !7664
  br label %if.end533, !dbg !7665

if.end533:                                        ; preds = %if.then532, %if.then521
  br label %if.end566, !dbg !7666

if.else534:                                       ; preds = %cond.end513
  %264 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7667
  %locate535 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %264, i32 0, i32 10, !dbg !7669
  %offset536 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate535, i32 0, i32 1, !dbg !7670
  %constant537 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset536, i32 0, i32 0, !dbg !7671
  %265 = load i64, i64* %constant537, align 8, !dbg !7671
  %266 = load i32, i32* %i435, align 4, !dbg !7672
  %conv538 = sext i32 %266 to i64, !dbg !7672
  %cmp539 = icmp slt i64 %265, %conv538, !dbg !7673
  br i1 %cmp539, label %if.then541, label %if.else554, !dbg !7674

if.then541:                                       ; preds = %if.else534
  %267 = load i32, i32* %i435, align 4, !dbg !7675
  %conv542 = sext i32 %267 to i64, !dbg !7675
  %268 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7678
  %locate543 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %268, i32 0, i32 10, !dbg !7679
  %offset544 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate543, i32 0, i32 1, !dbg !7680
  %constant545 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset544, i32 0, i32 0, !dbg !7681
  %269 = load i64, i64* %constant545, align 8, !dbg !7681
  %270 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7682
  %locate546 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %270, i32 0, i32 10, !dbg !7683
  %size547 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate546, i32 0, i32 0, !dbg !7684
  %constant548 = getelementptr inbounds %struct.args_size, %struct.args_size* %size547, i32 0, i32 0, !dbg !7685
  %271 = load i64, i64* %constant548, align 8, !dbg !7685
  %add549 = add nsw i64 %269, %271, !dbg !7686
  %cmp550 = icmp slt i64 %conv542, %add549, !dbg !7687
  br i1 %cmp550, label %if.then552, label %if.end553, !dbg !7688

if.then552:                                       ; preds = %if.then541
  store i32 1, i32* %sibcall_failure, align 4, !dbg !7689
  br label %if.end553, !dbg !7690

if.end553:                                        ; preds = %if.then552, %if.then541
  br label %if.end565, !dbg !7691

if.else554:                                       ; preds = %if.else534
  %272 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7692
  %locate555 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %272, i32 0, i32 10, !dbg !7695
  %size556 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate555, i32 0, i32 0, !dbg !7696
  %constant557 = getelementptr inbounds %struct.args_size, %struct.args_size* %size556, i32 0, i32 0, !dbg !7697
  %273 = load i64, i64* %constant557, align 8, !dbg !7697
  %274 = load %struct.rtx_def*, %struct.rtx_def** %size_rtx, align 8, !dbg !7698
  %u558 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %274, i32 0, i32 1, !dbg !7698
  %hwint559 = bitcast %union.u* %u558 to [1 x i64]*, !dbg !7698
  %arrayidx560 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint559, i64 0, i64 0, !dbg !7698
  %275 = load i64, i64* %arrayidx560, align 8, !dbg !7698
  %cmp561 = icmp ne i64 %273, %275, !dbg !7699
  br i1 %cmp561, label %if.then563, label %if.end564, !dbg !7700

if.then563:                                       ; preds = %if.else554
  store i32 1, i32* %sibcall_failure, align 4, !dbg !7701
  br label %if.end564, !dbg !7702

if.end564:                                        ; preds = %if.then563, %if.else554
  br label %if.end565

if.end565:                                        ; preds = %if.end564, %if.end553
  br label %if.end566

if.end566:                                        ; preds = %if.end565, %if.end533
  br label %if.end567, !dbg !7703

if.end567:                                        ; preds = %if.end566, %land.lhs.true462, %land.lhs.true451, %lor.lhs.false442
  br label %if.end568, !dbg !7704

if.end568:                                        ; preds = %if.end567, %land.lhs.true427, %if.end422
  %276 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7705
  %value569 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %276, i32 0, i32 2, !dbg !7706
  %277 = load %struct.rtx_def*, %struct.rtx_def** %value569, align 8, !dbg !7706
  %278 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7707
  %mode570 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %278, i32 0, i32 1, !dbg !7708
  %279 = load i32, i32* %mode570, align 8, !dbg !7708
  %280 = load %union.tree_node*, %union.tree_node** %pval, align 8, !dbg !7709
  %common571 = bitcast %union.tree_node* %280 to %struct.tree_common*, !dbg !7709
  %type572 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common571, i32 0, i32 2, !dbg !7709
  %281 = load %union.tree_node*, %union.tree_node** %type572, align 8, !dbg !7709
  %282 = load %struct.rtx_def*, %struct.rtx_def** %size_rtx, align 8, !dbg !7710
  %283 = load i32, i32* %parm_align348, align 4, !dbg !7711
  %284 = load i32, i32* %partial, align 4, !dbg !7712
  %285 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7713
  %286 = load i32, i32* %excess, align 4, !dbg !7714
  %287 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !7715
  %288 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate573 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %288, i32 0, i32 10, !dbg !7716
  %offset574 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate573, i32 0, i32 1, !dbg !7716
  %var575 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset574, i32 0, i32 1, !dbg !7716
  %289 = load %union.tree_node*, %union.tree_node** %var575, align 8, !dbg !7716
  %cmp576 = icmp eq %union.tree_node* %289, null, !dbg !7716
  br i1 %cmp576, label %cond.true578, label %cond.false583, !dbg !7716

cond.true578:                                     ; preds = %if.end568
  %290 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate579 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %290, i32 0, i32 10, !dbg !7716
  %offset580 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate579, i32 0, i32 1, !dbg !7716
  %constant581 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset580, i32 0, i32 0, !dbg !7716
  %291 = load i64, i64* %constant581, align 8, !dbg !7716
  %call582 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %291), !dbg !7716
  br label %cond.end607, !dbg !7716

cond.false583:                                    ; preds = %if.end568
  %292 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate584 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %292, i32 0, i32 10, !dbg !7716
  %offset585 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate584, i32 0, i32 1, !dbg !7716
  %var586 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset585, i32 0, i32 1, !dbg !7716
  %293 = load %union.tree_node*, %union.tree_node** %var586, align 8, !dbg !7716
  %cmp587 = icmp eq %union.tree_node* %293, null, !dbg !7716
  br i1 %cmp587, label %cond.true589, label %cond.false594, !dbg !7716

cond.true589:                                     ; preds = %cond.false583
  %294 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate590 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %294, i32 0, i32 10, !dbg !7716
  %offset591 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate590, i32 0, i32 1, !dbg !7716
  %constant592 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset591, i32 0, i32 0, !dbg !7716
  %295 = load i64, i64* %constant592, align 8, !dbg !7716
  %call593 = call %union.tree_node* @size_int_kind(i64 %295, i32 1), !dbg !7716
  br label %cond.end604, !dbg !7716

cond.false594:                                    ; preds = %cond.false583
  %296 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7716
  %297 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate595 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %297, i32 0, i32 10, !dbg !7716
  %offset596 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate595, i32 0, i32 1, !dbg !7716
  %var597 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset596, i32 0, i32 1, !dbg !7716
  %298 = load %union.tree_node*, %union.tree_node** %var597, align 8, !dbg !7716
  %call598 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %296, %union.tree_node* %298), !dbg !7716
  %299 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7716
  %locate599 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %299, i32 0, i32 10, !dbg !7716
  %offset600 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate599, i32 0, i32 1, !dbg !7716
  %constant601 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset600, i32 0, i32 0, !dbg !7716
  %300 = load i64, i64* %constant601, align 8, !dbg !7716
  %call602 = call %union.tree_node* @size_int_kind(i64 %300, i32 1), !dbg !7716
  %call603 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call598, %union.tree_node* %call602), !dbg !7716
  br label %cond.end604, !dbg !7716

cond.end604:                                      ; preds = %cond.false594, %cond.true589
  %cond605 = phi %union.tree_node* [ %call593, %cond.true589 ], [ %call603, %cond.false594 ], !dbg !7716
  %call606 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond605), !dbg !7716
  br label %cond.end607, !dbg !7716

cond.end607:                                      ; preds = %cond.end604, %cond.true578
  %cond608 = phi %struct.rtx_def* [ %call582, %cond.true578 ], [ %call606, %cond.end604 ], !dbg !7716
  %301 = load i32, i32* %reg_parm_stack_space.addr, align 4, !dbg !7717
  %302 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate609 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %302, i32 0, i32 10, !dbg !7718
  %alignment_pad610 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate609, i32 0, i32 3, !dbg !7718
  %var611 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad610, i32 0, i32 1, !dbg !7718
  %303 = load %union.tree_node*, %union.tree_node** %var611, align 8, !dbg !7718
  %cmp612 = icmp eq %union.tree_node* %303, null, !dbg !7718
  br i1 %cmp612, label %cond.true614, label %cond.false619, !dbg !7718

cond.true614:                                     ; preds = %cond.end607
  %304 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate615 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %304, i32 0, i32 10, !dbg !7718
  %alignment_pad616 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate615, i32 0, i32 3, !dbg !7718
  %constant617 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad616, i32 0, i32 0, !dbg !7718
  %305 = load i64, i64* %constant617, align 8, !dbg !7718
  %call618 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %305), !dbg !7718
  br label %cond.end643, !dbg !7718

cond.false619:                                    ; preds = %cond.end607
  %306 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate620 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %306, i32 0, i32 10, !dbg !7718
  %alignment_pad621 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate620, i32 0, i32 3, !dbg !7718
  %var622 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad621, i32 0, i32 1, !dbg !7718
  %307 = load %union.tree_node*, %union.tree_node** %var622, align 8, !dbg !7718
  %cmp623 = icmp eq %union.tree_node* %307, null, !dbg !7718
  br i1 %cmp623, label %cond.true625, label %cond.false630, !dbg !7718

cond.true625:                                     ; preds = %cond.false619
  %308 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate626 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %308, i32 0, i32 10, !dbg !7718
  %alignment_pad627 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate626, i32 0, i32 3, !dbg !7718
  %constant628 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad627, i32 0, i32 0, !dbg !7718
  %309 = load i64, i64* %constant628, align 8, !dbg !7718
  %call629 = call %union.tree_node* @size_int_kind(i64 %309, i32 1), !dbg !7718
  br label %cond.end640, !dbg !7718

cond.false630:                                    ; preds = %cond.false619
  %310 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !7718
  %311 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate631 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %311, i32 0, i32 10, !dbg !7718
  %alignment_pad632 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate631, i32 0, i32 3, !dbg !7718
  %var633 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad632, i32 0, i32 1, !dbg !7718
  %312 = load %union.tree_node*, %union.tree_node** %var633, align 8, !dbg !7718
  %call634 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %310, %union.tree_node* %312), !dbg !7718
  %313 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7718
  %locate635 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %313, i32 0, i32 10, !dbg !7718
  %alignment_pad636 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate635, i32 0, i32 3, !dbg !7718
  %constant637 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad636, i32 0, i32 0, !dbg !7718
  %314 = load i64, i64* %constant637, align 8, !dbg !7718
  %call638 = call %union.tree_node* @size_int_kind(i64 %314, i32 1), !dbg !7718
  %call639 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call634, %union.tree_node* %call638), !dbg !7718
  br label %cond.end640, !dbg !7718

cond.end640:                                      ; preds = %cond.false630, %cond.true625
  %cond641 = phi %union.tree_node* [ %call629, %cond.true625 ], [ %call639, %cond.false630 ], !dbg !7718
  %call642 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond641), !dbg !7718
  br label %cond.end643, !dbg !7718

cond.end643:                                      ; preds = %cond.end640, %cond.true614
  %cond644 = phi %struct.rtx_def* [ %call618, %cond.true614 ], [ %call642, %cond.end640 ], !dbg !7718
  call void @emit_push_insn(%struct.rtx_def* %277, i32 %279, %union.tree_node* %281, %struct.rtx_def* %282, i32 %283, i32 %284, %struct.rtx_def* %285, i32 %286, %struct.rtx_def* %287, %struct.rtx_def* %cond608, i32 %301, %struct.rtx_def* %cond644), !dbg !7719
  %315 = load i32, i32* %partial, align 4, !dbg !7720
  %cmp645 = icmp eq i32 %315, 0, !dbg !7722
  br i1 %cmp645, label %if.then647, label %if.end650, !dbg !7723

if.then647:                                       ; preds = %cond.end643
  %316 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7724
  %stack_slot648 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %316, i32 0, i32 12, !dbg !7725
  %317 = load %struct.rtx_def*, %struct.rtx_def** %stack_slot648, align 8, !dbg !7725
  %318 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7726
  %value649 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %318, i32 0, i32 2, !dbg !7727
  store %struct.rtx_def* %317, %struct.rtx_def** %value649, align 8, !dbg !7728
  br label %if.end650, !dbg !7726

if.end650:                                        ; preds = %if.then647, %cond.end643
  br label %if.end651

if.end651:                                        ; preds = %if.end650, %if.end346
  br label %if.end652

if.end652:                                        ; preds = %if.end651, %if.then250
  %319 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7729
  %reg653 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %319, i32 0, i32 4, !dbg !7731
  %320 = load %struct.rtx_def*, %struct.rtx_def** %reg653, align 8, !dbg !7731
  %tobool654 = icmp ne %struct.rtx_def* %320, null, !dbg !7729
  br i1 %tobool654, label %land.lhs.true655, label %if.end671, !dbg !7732

land.lhs.true655:                                 ; preds = %if.end652
  %321 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7733
  %reg656 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %321, i32 0, i32 4, !dbg !7733
  %322 = load %struct.rtx_def*, %struct.rtx_def** %reg656, align 8, !dbg !7733
  %323 = bitcast %struct.rtx_def* %322 to i32*, !dbg !7733
  %bf.load657 = load i32, i32* %323, align 8, !dbg !7733
  %bf.clear658 = and i32 %bf.load657, 65535, !dbg !7733
  %cmp659 = icmp eq i32 %bf.clear658, 15, !dbg !7734
  br i1 %cmp659, label %if.then661, label %if.end671, !dbg !7735

if.then661:                                       ; preds = %land.lhs.true655
  call void @llvm.dbg.declare(metadata %union.tree_node** %type662, metadata !7736, metadata !DIExpression()), !dbg !7738
  %324 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7739
  %tree_value663 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %324, i32 0, i32 0, !dbg !7739
  %325 = load %union.tree_node*, %union.tree_node** %tree_value663, align 8, !dbg !7739
  %common664 = bitcast %union.tree_node* %325 to %struct.tree_common*, !dbg !7739
  %type665 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common664, i32 0, i32 2, !dbg !7739
  %326 = load %union.tree_node*, %union.tree_node** %type665, align 8, !dbg !7739
  store %union.tree_node* %326, %union.tree_node** %type662, align 8, !dbg !7738
  %327 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7740
  %reg666 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %327, i32 0, i32 4, !dbg !7741
  %328 = load %struct.rtx_def*, %struct.rtx_def** %reg666, align 8, !dbg !7741
  %329 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7742
  %value667 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %329, i32 0, i32 2, !dbg !7743
  %330 = load %struct.rtx_def*, %struct.rtx_def** %value667, align 8, !dbg !7743
  %331 = load %union.tree_node*, %union.tree_node** %type662, align 8, !dbg !7744
  %332 = load %union.tree_node*, %union.tree_node** %type662, align 8, !dbg !7745
  %call668 = call i64 @int_size_in_bytes(%union.tree_node* %332), !dbg !7746
  %conv669 = trunc i64 %call668 to i32, !dbg !7746
  %call670 = call %struct.rtx_def* @emit_group_load_into_temps(%struct.rtx_def* %328, %struct.rtx_def* %330, %union.tree_node* %331, i32 %conv669), !dbg !7747
  %333 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7748
  %parallel_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %333, i32 0, i32 6, !dbg !7749
  store %struct.rtx_def* %call670, %struct.rtx_def** %parallel_value, align 8, !dbg !7750
  br label %if.end671, !dbg !7751

if.end671:                                        ; preds = %if.then661, %land.lhs.true655, %if.end652
  %334 = load i32, i32* @target_flags, align 4, !dbg !7752
  %and672 = and i32 %334, 4, !dbg !7752
  %cmp673 = icmp ne i32 %and672, 0, !dbg !7752
  br i1 %cmp673, label %land.lhs.true679, label %lor.lhs.false675, !dbg !7752

lor.lhs.false675:                                 ; preds = %if.end671
  %call676 = call i32 @ix86_cfun_abi(), !dbg !7752
  %cmp677 = icmp eq i32 %call676, 1, !dbg !7752
  br i1 %cmp677, label %land.lhs.true679, label %if.end695, !dbg !7754

land.lhs.true679:                                 ; preds = %lor.lhs.false675, %if.end671
  %335 = load i32, i32* %flags.addr, align 4, !dbg !7755
  %and680 = and i32 %335, 256, !dbg !7756
  %tobool681 = icmp ne i32 %and680, 0, !dbg !7756
  br i1 %tobool681, label %if.end695, label %land.lhs.true682, !dbg !7757

land.lhs.true682:                                 ; preds = %land.lhs.true679
  %336 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !7758
  %tobool683 = icmp ne %struct.rtx_def* %336, null, !dbg !7758
  br i1 %tobool683, label %land.lhs.true684, label %if.end695, !dbg !7759

land.lhs.true684:                                 ; preds = %land.lhs.true682
  %337 = load i32, i32* %variable_size.addr, align 4, !dbg !7760
  %tobool685 = icmp ne i32 %337, 0, !dbg !7760
  br i1 %tobool685, label %if.end695, label %land.lhs.true686, !dbg !7761

land.lhs.true686:                                 ; preds = %land.lhs.true684
  %338 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7762
  %stack687 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %338, i32 0, i32 11, !dbg !7763
  %339 = load %struct.rtx_def*, %struct.rtx_def** %stack687, align 8, !dbg !7763
  %tobool688 = icmp ne %struct.rtx_def* %339, null, !dbg !7762
  br i1 %tobool688, label %if.then689, label %if.end695, !dbg !7764

if.then689:                                       ; preds = %land.lhs.true686
  %340 = load i32, i32* %lower_bound, align 4, !dbg !7765
  store i32 %340, i32* %i, align 4, !dbg !7767
  br label %for.cond, !dbg !7768

for.cond:                                         ; preds = %for.inc, %if.then689
  %341 = load i32, i32* %i, align 4, !dbg !7769
  %342 = load i32, i32* %upper_bound, align 4, !dbg !7771
  %cmp690 = icmp slt i32 %341, %342, !dbg !7772
  br i1 %cmp690, label %for.body, label %for.end, !dbg !7773

for.body:                                         ; preds = %for.cond
  %343 = load i8*, i8** @stack_usage_map, align 8, !dbg !7774
  %344 = load i32, i32* %i, align 4, !dbg !7775
  %idxprom692 = sext i32 %344 to i64, !dbg !7774
  %arrayidx693 = getelementptr inbounds i8, i8* %343, i64 %idxprom692, !dbg !7774
  store i8 1, i8* %arrayidx693, align 1, !dbg !7776
  br label %for.inc, !dbg !7774

for.inc:                                          ; preds = %for.body
  %345 = load i32, i32* %i, align 4, !dbg !7777
  %inc694 = add nsw i32 %345, 1, !dbg !7777
  store i32 %inc694, i32* %i, align 4, !dbg !7777
  br label %for.cond, !dbg !7778, !llvm.loop !7779

for.end:                                          ; preds = %for.cond
  br label %if.end695, !dbg !7780

if.end695:                                        ; preds = %for.end, %land.lhs.true686, %land.lhs.true684, %land.lhs.true682, %land.lhs.true679, %lor.lhs.false675
  %346 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7781
  %add696 = add nsw i32 %346, 1, !dbg !7781
  store i32 %add696, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !7781
  call void @preserve_temp_slots(%struct.rtx_def* null), !dbg !7782
  call void @free_temp_slots(), !dbg !7783
  call void @pop_temp_slots(), !dbg !7784
  %347 = load i32, i32* %sibcall_failure, align 4, !dbg !7785
  store i32 %347, i32* %retval, align 4, !dbg !7786
  br label %return, !dbg !7786

return:                                           ; preds = %if.end695, %if.then
  %348 = load i32, i32* %retval, align 4, !dbg !7787
  ret i32 %348, !dbg !7787
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_sibcall_argument_overlap(%struct.rtx_def* %insn, %struct.arg_data* %arg, i32 %mark_stored_args_map) #0 !dbg !7788 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  %arg.addr = alloca %struct.arg_data*, align 8
  %mark_stored_args_map.addr = alloca i32, align 4
  %low = alloca i32, align 4
  %high = alloca i32, align 4
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !7791, metadata !DIExpression()), !dbg !7792
  store %struct.arg_data* %arg, %struct.arg_data** %arg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %arg.addr, metadata !7793, metadata !DIExpression()), !dbg !7794
  store i32 %mark_stored_args_map, i32* %mark_stored_args_map.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mark_stored_args_map.addr, metadata !7795, metadata !DIExpression()), !dbg !7796
  call void @llvm.dbg.declare(metadata i32* %low, metadata !7797, metadata !DIExpression()), !dbg !7798
  call void @llvm.dbg.declare(metadata i32* %high, metadata !7799, metadata !DIExpression()), !dbg !7800
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7801
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !7803
  br i1 %cmp, label %if.then, label %if.else, !dbg !7804

if.then:                                          ; preds = %entry
  %call = call %struct.rtx_def* @get_insns(), !dbg !7805
  store %struct.rtx_def* %call, %struct.rtx_def** %insn.addr, align 8, !dbg !7806
  br label %if.end, !dbg !7807

if.else:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7808
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %1, i32 0, i32 1, !dbg !7808
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7808
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !7808
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7808
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7808
  store %struct.rtx_def* %2, %struct.rtx_def** %insn.addr, align 8, !dbg !7809
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  br label %for.cond, !dbg !7810

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7811
  %tobool = icmp ne %struct.rtx_def* %3, null, !dbg !7814
  br i1 %tobool, label %for.body, label %for.end, !dbg !7814

for.body:                                         ; preds = %for.cond
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7815
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7815
  %bf.load = load i32, i32* %5, align 8, !dbg !7815
  %bf.clear = and i32 %bf.load, 65535, !dbg !7815
  %cmp1 = icmp eq i32 %bf.clear, 8, !dbg !7815
  br i1 %cmp1, label %land.lhs.true, label %lor.lhs.false, !dbg !7815

lor.lhs.false:                                    ; preds = %for.body
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7815
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !7815
  %bf.load2 = load i32, i32* %7, align 8, !dbg !7815
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !7815
  %cmp4 = icmp eq i32 %bf.clear3, 7, !dbg !7815
  br i1 %cmp4, label %land.lhs.true, label %lor.lhs.false5, !dbg !7815

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7815
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !7815
  %bf.load6 = load i32, i32* %9, align 8, !dbg !7815
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !7815
  %cmp8 = icmp eq i32 %bf.clear7, 9, !dbg !7815
  br i1 %cmp8, label %land.lhs.true, label %lor.lhs.false9, !dbg !7815

lor.lhs.false9:                                   ; preds = %lor.lhs.false5
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7815
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !7815
  %bf.load10 = load i32, i32* %11, align 8, !dbg !7815
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !7815
  %cmp12 = icmp eq i32 %bf.clear11, 10, !dbg !7815
  br i1 %cmp12, label %land.lhs.true, label %if.end20, !dbg !7817

land.lhs.true:                                    ; preds = %lor.lhs.false9, %lor.lhs.false5, %lor.lhs.false, %for.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7818
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !7818
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !7818
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 5, !dbg !7818
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !7818
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !7818
  %call17 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %13), !dbg !7819
  %tobool18 = icmp ne i32 %call17, 0, !dbg !7819
  br i1 %tobool18, label %if.then19, label %if.end20, !dbg !7820

if.then19:                                        ; preds = %land.lhs.true
  br label %for.end, !dbg !7821

if.end20:                                         ; preds = %land.lhs.true, %lor.lhs.false9
  br label %for.inc, !dbg !7822

for.inc:                                          ; preds = %if.end20
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7823
  %u21 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !7823
  %fld22 = bitcast %union.u* %u21 to [1 x %union.rtunion_def]*, !dbg !7823
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld22, i64 0, i64 2, !dbg !7823
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !7823
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !7823
  store %struct.rtx_def* %15, %struct.rtx_def** %insn.addr, align 8, !dbg !7824
  br label %for.cond, !dbg !7825, !llvm.loop !7826

for.end:                                          ; preds = %if.then19, %for.cond
  %16 = load i32, i32* %mark_stored_args_map.addr, align 4, !dbg !7828
  %tobool25 = icmp ne i32 %16, 0, !dbg !7828
  br i1 %tobool25, label %if.then26, label %if.end37, !dbg !7830

if.then26:                                        ; preds = %for.end
  %17 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7831
  %locate = getelementptr inbounds %struct.arg_data, %struct.arg_data* %17, i32 0, i32 10, !dbg !7833
  %slot_offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate, i32 0, i32 2, !dbg !7834
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset, i32 0, i32 0, !dbg !7835
  %18 = load i64, i64* %constant, align 8, !dbg !7835
  %conv = trunc i64 %18 to i32, !dbg !7831
  store i32 %conv, i32* %low, align 4, !dbg !7836
  %19 = load i32, i32* %low, align 4, !dbg !7837
  %conv27 = sext i32 %19 to i64, !dbg !7837
  %20 = load %struct.arg_data*, %struct.arg_data** %arg.addr, align 8, !dbg !7839
  %locate28 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %20, i32 0, i32 10, !dbg !7840
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate28, i32 0, i32 0, !dbg !7841
  %constant29 = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !7842
  %21 = load i64, i64* %constant29, align 8, !dbg !7842
  %add = add nsw i64 %conv27, %21, !dbg !7843
  %conv30 = trunc i64 %add to i32, !dbg !7837
  store i32 %conv30, i32* %high, align 4, !dbg !7844
  br label %for.cond31, !dbg !7845

for.cond31:                                       ; preds = %for.inc35, %if.then26
  %22 = load i32, i32* %low, align 4, !dbg !7846
  %23 = load i32, i32* %high, align 4, !dbg !7848
  %cmp32 = icmp slt i32 %22, %23, !dbg !7849
  br i1 %cmp32, label %for.body34, label %for.end36, !dbg !7850

for.body34:                                       ; preds = %for.cond31
  %24 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !7851
  %25 = load i32, i32* %low, align 4, !dbg !7852
  call void @SET_BIT(%struct.simple_bitmap_def* %24, i32 %25), !dbg !7853
  br label %for.inc35, !dbg !7853

for.inc35:                                        ; preds = %for.body34
  %26 = load i32, i32* %low, align 4, !dbg !7854
  %inc = add nsw i32 %26, 1, !dbg !7854
  store i32 %inc, i32* %low, align 4, !dbg !7854
  br label %for.cond31, !dbg !7855, !llvm.loop !7856

for.end36:                                        ; preds = %for.cond31
  br label %if.end37, !dbg !7858

if.end37:                                         ; preds = %for.end36, %for.end
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !7859
  %cmp38 = icmp ne %struct.rtx_def* %27, null, !dbg !7860
  %conv39 = zext i1 %cmp38 to i32, !dbg !7860
  ret i32 %conv39, !dbg !7861
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_e_stat(i32, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @force_operand(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @load_register_parameters(%struct.arg_data* %args, i32 %num_actuals, %struct.rtx_def** %call_fusage, i32 %flags, i32 %is_sibcall, i32* %sibcall_failure) #0 !dbg !7862 {
entry:
  %args.addr = alloca %struct.arg_data*, align 8
  %num_actuals.addr = alloca i32, align 4
  %call_fusage.addr = alloca %struct.rtx_def**, align 8
  %flags.addr = alloca i32, align 4
  %is_sibcall.addr = alloca i32, align 4
  %sibcall_failure.addr = alloca i32*, align 8
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %reg = alloca %struct.rtx_def*, align 8
  %partial = alloca i32, align 4
  %nregs = alloca i32, align 4
  %size = alloca i32, align 4
  %before_arg = alloca %struct.rtx_def*, align 8
  %mem = alloca %struct.rtx_def*, align 8
  %tem = alloca %struct.rtx_def*, align 8
  %ri = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %shift = alloca i32, align 4
  %dir = alloca i32, align 4
  store %struct.arg_data* %args, %struct.arg_data** %args.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.arg_data** %args.addr, metadata !7865, metadata !DIExpression()), !dbg !7866
  store i32 %num_actuals, i32* %num_actuals.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num_actuals.addr, metadata !7867, metadata !DIExpression()), !dbg !7868
  store %struct.rtx_def** %call_fusage, %struct.rtx_def*** %call_fusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %call_fusage.addr, metadata !7869, metadata !DIExpression()), !dbg !7870
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !7871, metadata !DIExpression()), !dbg !7872
  store i32 %is_sibcall, i32* %is_sibcall.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %is_sibcall.addr, metadata !7873, metadata !DIExpression()), !dbg !7874
  store i32* %sibcall_failure, i32** %sibcall_failure.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %sibcall_failure.addr, metadata !7875, metadata !DIExpression()), !dbg !7876
  call void @llvm.dbg.declare(metadata i32* %i, metadata !7877, metadata !DIExpression()), !dbg !7878
  call void @llvm.dbg.declare(metadata i32* %j, metadata !7879, metadata !DIExpression()), !dbg !7880
  store i32 0, i32* %i, align 4, !dbg !7881
  br label %for.cond, !dbg !7883

for.cond:                                         ; preds = %for.inc176, %entry
  %0 = load i32, i32* %i, align 4, !dbg !7884
  %1 = load i32, i32* %num_actuals.addr, align 4, !dbg !7886
  %cmp = icmp slt i32 %0, %1, !dbg !7887
  br i1 %cmp, label %for.body, label %for.end178, !dbg !7888

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg, metadata !7889, metadata !DIExpression()), !dbg !7891
  %2 = load i32, i32* %flags.addr, align 4, !dbg !7892
  %and = and i32 %2, 256, !dbg !7893
  %tobool = icmp ne i32 %and, 0, !dbg !7893
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !7894

cond.true:                                        ; preds = %for.body
  %3 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7895
  %4 = load i32, i32* %i, align 4, !dbg !7896
  %idxprom = sext i32 %4 to i64, !dbg !7895
  %arrayidx = getelementptr inbounds %struct.arg_data, %struct.arg_data* %3, i64 %idxprom, !dbg !7895
  %tail_call_reg = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx, i32 0, i32 5, !dbg !7897
  %5 = load %struct.rtx_def*, %struct.rtx_def** %tail_call_reg, align 8, !dbg !7897
  br label %cond.end, !dbg !7894

cond.false:                                       ; preds = %for.body
  %6 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7898
  %7 = load i32, i32* %i, align 4, !dbg !7899
  %idxprom1 = sext i32 %7 to i64, !dbg !7898
  %arrayidx2 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %6, i64 %idxprom1, !dbg !7898
  %reg3 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx2, i32 0, i32 4, !dbg !7900
  %8 = load %struct.rtx_def*, %struct.rtx_def** %reg3, align 8, !dbg !7900
  br label %cond.end, !dbg !7894

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %5, %cond.true ], [ %8, %cond.false ], !dbg !7894
  store %struct.rtx_def* %cond, %struct.rtx_def** %reg, align 8, !dbg !7891
  %9 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7901
  %tobool4 = icmp ne %struct.rtx_def* %9, null, !dbg !7901
  br i1 %tobool4, label %if.then, label %if.end175, !dbg !7903

if.then:                                          ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i32* %partial, metadata !7904, metadata !DIExpression()), !dbg !7906
  %10 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7907
  %11 = load i32, i32* %i, align 4, !dbg !7908
  %idxprom5 = sext i32 %11 to i64, !dbg !7907
  %arrayidx6 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %10, i64 %idxprom5, !dbg !7907
  %partial7 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx6, i32 0, i32 8, !dbg !7909
  %12 = load i32, i32* %partial7, align 4, !dbg !7909
  store i32 %12, i32* %partial, align 4, !dbg !7906
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !7910, metadata !DIExpression()), !dbg !7911
  call void @llvm.dbg.declare(metadata i32* %size, metadata !7912, metadata !DIExpression()), !dbg !7913
  store i32 0, i32* %size, align 4, !dbg !7913
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before_arg, metadata !7914, metadata !DIExpression()), !dbg !7915
  %call = call %struct.rtx_def* @get_last_insn(), !dbg !7916
  store %struct.rtx_def* %call, %struct.rtx_def** %before_arg, align 8, !dbg !7915
  store i32 -1, i32* %nregs, align 4, !dbg !7917
  %13 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7918
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7918
  %bf.load = load i32, i32* %14, align 8, !dbg !7918
  %bf.clear = and i32 %bf.load, 65535, !dbg !7918
  %cmp8 = icmp eq i32 %bf.clear, 15, !dbg !7920
  br i1 %cmp8, label %if.then9, label %if.else, !dbg !7921

if.then9:                                         ; preds = %if.then
  br label %if.end59, !dbg !7921

if.else:                                          ; preds = %if.then
  %15 = load i32, i32* %partial, align 4, !dbg !7922
  %tobool10 = icmp ne i32 %15, 0, !dbg !7922
  br i1 %tobool10, label %if.then11, label %if.else17, !dbg !7924

if.then11:                                        ; preds = %if.else
  %16 = load i32, i32* %partial, align 4, !dbg !7925
  %rem = srem i32 %16, 4, !dbg !7925
  %cmp12 = icmp eq i32 %rem, 0, !dbg !7925
  br i1 %cmp12, label %cond.false14, label %cond.true13, !dbg !7925

cond.true13:                                      ; preds = %if.then11
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 1608, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !7925
  br label %cond.end15, !dbg !7925

cond.false14:                                     ; preds = %if.then11
  br label %cond.end15, !dbg !7925

cond.end15:                                       ; preds = %cond.false14, %cond.true13
  %cond16 = phi i32 [ 0, %cond.true13 ], [ 0, %cond.false14 ], !dbg !7925
  %17 = load i32, i32* %partial, align 4, !dbg !7927
  %div = sdiv i32 %17, 4, !dbg !7928
  store i32 %div, i32* %nregs, align 4, !dbg !7929
  br label %if.end58, !dbg !7930

if.else17:                                        ; preds = %if.else
  %18 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7931
  %19 = load i32, i32* %i, align 4, !dbg !7931
  %idxprom18 = sext i32 %19 to i64, !dbg !7931
  %arrayidx19 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %18, i64 %idxprom18, !dbg !7931
  %tree_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx19, i32 0, i32 0, !dbg !7931
  %20 = load %union.tree_node*, %union.tree_node** %tree_value, align 8, !dbg !7931
  %common = bitcast %union.tree_node* %20 to %struct.tree_common*, !dbg !7931
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !7931
  %21 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !7931
  %base = bitcast %union.tree_node* %21 to %struct.tree_base*, !dbg !7931
  %22 = bitcast %struct.tree_base* %base to i64*, !dbg !7931
  %bf.load20 = load i64, i64* %22, align 8, !dbg !7931
  %bf.clear21 = and i64 %bf.load20, 65535, !dbg !7931
  %bf.cast = trunc i64 %bf.clear21 to i32, !dbg !7931
  %cmp22 = icmp eq i32 %bf.cast, 14, !dbg !7931
  br i1 %cmp22, label %cond.true23, label %cond.false30, !dbg !7931

cond.true23:                                      ; preds = %if.else17
  %23 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7931
  %24 = load i32, i32* %i, align 4, !dbg !7931
  %idxprom24 = sext i32 %24 to i64, !dbg !7931
  %arrayidx25 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %23, i64 %idxprom24, !dbg !7931
  %tree_value26 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx25, i32 0, i32 0, !dbg !7931
  %25 = load %union.tree_node*, %union.tree_node** %tree_value26, align 8, !dbg !7931
  %common27 = bitcast %union.tree_node* %25 to %struct.tree_common*, !dbg !7931
  %type28 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common27, i32 0, i32 2, !dbg !7931
  %26 = load %union.tree_node*, %union.tree_node** %type28, align 8, !dbg !7931
  %call29 = call i32 @vector_type_mode(%union.tree_node* %26), !dbg !7931
  br label %cond.end39, !dbg !7931

cond.false30:                                     ; preds = %if.else17
  %27 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7931
  %28 = load i32, i32* %i, align 4, !dbg !7931
  %idxprom31 = sext i32 %28 to i64, !dbg !7931
  %arrayidx32 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %27, i64 %idxprom31, !dbg !7931
  %tree_value33 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx32, i32 0, i32 0, !dbg !7931
  %29 = load %union.tree_node*, %union.tree_node** %tree_value33, align 8, !dbg !7931
  %common34 = bitcast %union.tree_node* %29 to %struct.tree_common*, !dbg !7931
  %type35 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common34, i32 0, i32 2, !dbg !7931
  %30 = load %union.tree_node*, %union.tree_node** %type35, align 8, !dbg !7931
  %type36 = bitcast %union.tree_node* %30 to %struct.tree_type*, !dbg !7931
  %mode = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type36, i32 0, i32 6, !dbg !7931
  %bf.load37 = load i32, i32* %mode, align 4, !dbg !7931
  %bf.lshr = lshr i32 %bf.load37, 16, !dbg !7931
  %bf.clear38 = and i32 %bf.lshr, 255, !dbg !7931
  br label %cond.end39, !dbg !7931

cond.end39:                                       ; preds = %cond.false30, %cond.true23
  %cond40 = phi i32 [ %call29, %cond.true23 ], [ %bf.clear38, %cond.false30 ], !dbg !7931
  %cmp41 = icmp eq i32 %cond40, 1, !dbg !7933
  br i1 %cmp41, label %if.then42, label %if.else50, !dbg !7934

if.then42:                                        ; preds = %cond.end39
  %31 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7935
  %32 = load i32, i32* %i, align 4, !dbg !7935
  %idxprom43 = sext i32 %32 to i64, !dbg !7935
  %arrayidx44 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %31, i64 %idxprom43, !dbg !7935
  %tree_value45 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx44, i32 0, i32 0, !dbg !7935
  %33 = load %union.tree_node*, %union.tree_node** %tree_value45, align 8, !dbg !7935
  %common46 = bitcast %union.tree_node* %33 to %struct.tree_common*, !dbg !7935
  %type47 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common46, i32 0, i32 2, !dbg !7935
  %34 = load %union.tree_node*, %union.tree_node** %type47, align 8, !dbg !7935
  %call48 = call i64 @int_size_in_bytes(%union.tree_node* %34), !dbg !7937
  %conv = trunc i64 %call48 to i32, !dbg !7937
  store i32 %conv, i32* %size, align 4, !dbg !7938
  %35 = load i32, i32* %size, align 4, !dbg !7939
  %add = add nsw i32 %35, 3, !dbg !7940
  %div49 = sdiv i32 %add, 4, !dbg !7941
  store i32 %div49, i32* %nregs, align 4, !dbg !7942
  br label %if.end, !dbg !7943

if.else50:                                        ; preds = %cond.end39
  %36 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7944
  %37 = load i32, i32* %i, align 4, !dbg !7944
  %idxprom51 = sext i32 %37 to i64, !dbg !7944
  %arrayidx52 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %36, i64 %idxprom51, !dbg !7944
  %mode53 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx52, i32 0, i32 1, !dbg !7944
  %38 = load i32, i32* %mode53, align 8, !dbg !7944
  %idxprom54 = zext i32 %38 to i64, !dbg !7944
  %arrayidx55 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom54, !dbg !7944
  %39 = load i8, i8* %arrayidx55, align 1, !dbg !7944
  %conv56 = zext i8 %39 to i16, !dbg !7944
  %conv57 = zext i16 %conv56 to i32, !dbg !7944
  store i32 %conv57, i32* %size, align 4, !dbg !7945
  br label %if.end

if.end:                                           ; preds = %if.else50, %if.then42
  br label %if.end58

if.end58:                                         ; preds = %if.end, %cond.end15
  br label %if.end59

if.end59:                                         ; preds = %if.end58, %if.then9
  %40 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7946
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !7946
  %bf.load60 = load i32, i32* %41, align 8, !dbg !7946
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !7946
  %cmp62 = icmp eq i32 %bf.clear61, 15, !dbg !7948
  br i1 %cmp62, label %if.then64, label %if.else67, !dbg !7949

if.then64:                                        ; preds = %if.end59
  %42 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7950
  %43 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7951
  %44 = load i32, i32* %i, align 4, !dbg !7952
  %idxprom65 = sext i32 %44 to i64, !dbg !7951
  %arrayidx66 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %43, i64 %idxprom65, !dbg !7951
  %parallel_value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx66, i32 0, i32 6, !dbg !7953
  %45 = load %struct.rtx_def*, %struct.rtx_def** %parallel_value, align 8, !dbg !7953
  call void @emit_group_move(%struct.rtx_def* %42, %struct.rtx_def* %45), !dbg !7954
  br label %if.end149, !dbg !7954

if.else67:                                        ; preds = %if.end59
  %46 = load i32, i32* %nregs, align 4, !dbg !7955
  %cmp68 = icmp eq i32 %46, -1, !dbg !7957
  br i1 %cmp68, label %if.then70, label %if.else74, !dbg !7958

if.then70:                                        ; preds = %if.else67
  %47 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7959
  %48 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7961
  %49 = load i32, i32* %i, align 4, !dbg !7962
  %idxprom71 = sext i32 %49 to i64, !dbg !7961
  %arrayidx72 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %48, i64 %idxprom71, !dbg !7961
  %value = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx72, i32 0, i32 2, !dbg !7963
  %50 = load %struct.rtx_def*, %struct.rtx_def** %value, align 8, !dbg !7963
  %call73 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %47, %struct.rtx_def* %50), !dbg !7964
  br label %if.end148, !dbg !7965

if.else74:                                        ; preds = %if.else67
  %51 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7966
  %52 = load i32, i32* %i, align 4, !dbg !7968
  %idxprom75 = sext i32 %52 to i64, !dbg !7966
  %arrayidx76 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %51, i64 %idxprom75, !dbg !7966
  %n_aligned_regs = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx76, i32 0, i32 15, !dbg !7969
  %53 = load i32, i32* %n_aligned_regs, align 8, !dbg !7969
  %cmp77 = icmp ne i32 %53, 0, !dbg !7970
  br i1 %cmp77, label %if.then79, label %if.else95, !dbg !7971

if.then79:                                        ; preds = %if.else74
  store i32 0, i32* %j, align 4, !dbg !7972
  br label %for.cond80, !dbg !7974

for.cond80:                                       ; preds = %for.inc, %if.then79
  %54 = load i32, i32* %j, align 4, !dbg !7975
  %55 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7977
  %56 = load i32, i32* %i, align 4, !dbg !7978
  %idxprom81 = sext i32 %56 to i64, !dbg !7977
  %arrayidx82 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %55, i64 %idxprom81, !dbg !7977
  %n_aligned_regs83 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx82, i32 0, i32 15, !dbg !7979
  %57 = load i32, i32* %n_aligned_regs83, align 8, !dbg !7979
  %cmp84 = icmp slt i32 %54, %57, !dbg !7980
  br i1 %cmp84, label %for.body86, label %for.end, !dbg !7981

for.body86:                                       ; preds = %for.cond80
  %58 = load i32, i32* @word_mode, align 4, !dbg !7982
  %59 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !7983
  %call87 = call i32 @rhs_regno(%struct.rtx_def* %59), !dbg !7983
  %60 = load i32, i32* %j, align 4, !dbg !7984
  %add88 = add i32 %call87, %60, !dbg !7985
  %call89 = call %struct.rtx_def* @gen_rtx_REG(i32 %58, i32 %add88), !dbg !7986
  %61 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !7987
  %62 = load i32, i32* %i, align 4, !dbg !7988
  %idxprom90 = sext i32 %62 to i64, !dbg !7987
  %arrayidx91 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %61, i64 %idxprom90, !dbg !7987
  %aligned_regs = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx91, i32 0, i32 14, !dbg !7989
  %63 = load %struct.rtx_def**, %struct.rtx_def*** %aligned_regs, align 8, !dbg !7989
  %64 = load i32, i32* %j, align 4, !dbg !7990
  %idxprom92 = sext i32 %64 to i64, !dbg !7987
  %arrayidx93 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %63, i64 %idxprom92, !dbg !7987
  %65 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx93, align 8, !dbg !7987
  %call94 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %call89, %struct.rtx_def* %65), !dbg !7991
  br label %for.inc, !dbg !7991

for.inc:                                          ; preds = %for.body86
  %66 = load i32, i32* %j, align 4, !dbg !7992
  %inc = add nsw i32 %66, 1, !dbg !7992
  store i32 %inc, i32* %j, align 4, !dbg !7992
  br label %for.cond80, !dbg !7993, !llvm.loop !7994

for.end:                                          ; preds = %for.cond80
  br label %if.end147, !dbg !7995

if.else95:                                        ; preds = %if.else74
  %67 = load i32, i32* %partial, align 4, !dbg !7996
  %cmp96 = icmp eq i32 %67, 0, !dbg !7998
  br i1 %cmp96, label %if.then101, label %lor.lhs.false, !dbg !7999

lor.lhs.false:                                    ; preds = %if.else95
  %68 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8000
  %69 = load i32, i32* %i, align 4, !dbg !8001
  %idxprom98 = sext i32 %69 to i64, !dbg !8000
  %arrayidx99 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %68, i64 %idxprom98, !dbg !8000
  %pass_on_stack = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx99, i32 0, i32 9, !dbg !8002
  %70 = load i32, i32* %pass_on_stack, align 8, !dbg !8002
  %tobool100 = icmp ne i32 %70, 0, !dbg !8000
  br i1 %tobool100, label %if.then101, label %if.end146, !dbg !8003

if.then101:                                       ; preds = %lor.lhs.false, %if.else95
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem, metadata !8004, metadata !DIExpression()), !dbg !8006
  %71 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8007
  %72 = load i32, i32* %i, align 4, !dbg !8008
  %idxprom102 = sext i32 %72 to i64, !dbg !8007
  %arrayidx103 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %71, i64 %idxprom102, !dbg !8007
  %value104 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx103, i32 0, i32 2, !dbg !8009
  %73 = load %struct.rtx_def*, %struct.rtx_def** %value104, align 8, !dbg !8009
  %call105 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %73), !dbg !8010
  store %struct.rtx_def* %call105, %struct.rtx_def** %mem, align 8, !dbg !8006
  %74 = load i32, i32* %is_sibcall.addr, align 4, !dbg !8011
  %tobool106 = icmp ne i32 %74, 0, !dbg !8011
  br i1 %tobool106, label %land.lhs.true, label %if.end116, !dbg !8013

land.lhs.true:                                    ; preds = %if.then101
  %75 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8014
  %76 = load i32, i32* %i, align 4, !dbg !8014
  %idxprom107 = sext i32 %76 to i64, !dbg !8014
  %arrayidx108 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %75, i64 %idxprom107, !dbg !8014
  %value109 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx108, i32 0, i32 2, !dbg !8014
  %77 = load %struct.rtx_def*, %struct.rtx_def** %value109, align 8, !dbg !8014
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !8014
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8014
  %arrayidx110 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8014
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx110 to %struct.rtx_def**, !dbg !8014
  %78 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8014
  %79 = load i32, i32* %size, align 4, !dbg !8015
  %conv111 = sext i32 %79 to i64, !dbg !8015
  %call112 = call zeroext i8 @mem_overlaps_already_clobbered_arg_p(%struct.rtx_def* %78, i64 %conv111), !dbg !8016
  %conv113 = zext i8 %call112 to i32, !dbg !8016
  %tobool114 = icmp ne i32 %conv113, 0, !dbg !8016
  br i1 %tobool114, label %if.then115, label %if.end116, !dbg !8017

if.then115:                                       ; preds = %land.lhs.true
  %80 = load i32*, i32** %sibcall_failure.addr, align 8, !dbg !8018
  store i32 1, i32* %80, align 4, !dbg !8019
  br label %if.end116, !dbg !8020

if.end116:                                        ; preds = %if.then115, %land.lhs.true, %if.then101
  %81 = load i32, i32* %nregs, align 4, !dbg !8021
  %cmp117 = icmp eq i32 %81, 1, !dbg !8023
  br i1 %cmp117, label %land.lhs.true119, label %if.else140, !dbg !8024

land.lhs.true119:                                 ; preds = %if.end116
  %82 = load i32, i32* %size, align 4, !dbg !8025
  %cmp120 = icmp slt i32 %82, 4, !dbg !8026
  br i1 %cmp120, label %land.lhs.true122, label %if.else140, !dbg !8027

land.lhs.true122:                                 ; preds = %land.lhs.true119
  br i1 false, label %if.then123, label %if.else140, !dbg !8028

if.then123:                                       ; preds = %land.lhs.true122
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tem, metadata !8029, metadata !DIExpression()), !dbg !8031
  %83 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !8032
  %84 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8033
  %85 = load i32, i32* %i, align 4, !dbg !8034
  %idxprom124 = sext i32 %85 to i64, !dbg !8033
  %arrayidx125 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %84, i64 %idxprom124, !dbg !8033
  %mode126 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx125, i32 0, i32 1, !dbg !8035
  %86 = load i32, i32* %mode126, align 8, !dbg !8035
  %call127 = call %struct.rtx_def* @operand_subword_force(%struct.rtx_def* %83, i32 0, i32 %86), !dbg !8036
  store %struct.rtx_def* %call127, %struct.rtx_def** %tem, align 8, !dbg !8031
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %ri, metadata !8037, metadata !DIExpression()), !dbg !8038
  %87 = load i32, i32* @word_mode, align 4, !dbg !8039
  %88 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8040
  %call128 = call i32 @rhs_regno(%struct.rtx_def* %88), !dbg !8040
  %call129 = call %struct.rtx_def* @gen_rtx_REG(i32 %87, i32 %call128), !dbg !8041
  store %struct.rtx_def* %call129, %struct.rtx_def** %ri, align 8, !dbg !8038
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !8042, metadata !DIExpression()), !dbg !8043
  %89 = load i32, i32* @word_mode, align 4, !dbg !8044
  %call130 = call %struct.rtx_def* @gen_reg_rtx(i32 %89), !dbg !8045
  store %struct.rtx_def* %call130, %struct.rtx_def** %x, align 8, !dbg !8043
  call void @llvm.dbg.declare(metadata i32* %shift, metadata !8046, metadata !DIExpression()), !dbg !8047
  %90 = load i32, i32* %size, align 4, !dbg !8048
  %sub = sub nsw i32 4, %90, !dbg !8049
  %mul = mul nsw i32 %sub, 8, !dbg !8050
  store i32 %mul, i32* %shift, align 4, !dbg !8047
  call void @llvm.dbg.declare(metadata i32* %dir, metadata !8051, metadata !DIExpression()), !dbg !8052
  store i32 83, i32* %dir, align 4, !dbg !8052
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8053
  %92 = load %struct.rtx_def*, %struct.rtx_def** %tem, align 8, !dbg !8054
  %call131 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %91, %struct.rtx_def* %92), !dbg !8055
  %93 = load i32, i32* %dir, align 4, !dbg !8056
  %94 = load i32, i32* @word_mode, align 4, !dbg !8057
  %95 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8058
  %96 = load i32, i32* %shift, align 4, !dbg !8059
  %conv132 = sext i32 %96 to i64, !dbg !8059
  %call133 = call %union.tree_node* @build_int_cst(%union.tree_node* null, i64 %conv132), !dbg !8060
  %97 = load %struct.rtx_def*, %struct.rtx_def** %ri, align 8, !dbg !8061
  %call134 = call %struct.rtx_def* @expand_shift(i32 %93, i32 %94, %struct.rtx_def* %95, %union.tree_node* %call133, %struct.rtx_def* %97, i32 1), !dbg !8062
  store %struct.rtx_def* %call134, %struct.rtx_def** %x, align 8, !dbg !8063
  %98 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8064
  %99 = load %struct.rtx_def*, %struct.rtx_def** %ri, align 8, !dbg !8066
  %cmp135 = icmp ne %struct.rtx_def* %98, %99, !dbg !8067
  br i1 %cmp135, label %if.then137, label %if.end139, !dbg !8068

if.then137:                                       ; preds = %if.then123
  %100 = load %struct.rtx_def*, %struct.rtx_def** %ri, align 8, !dbg !8069
  %101 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8070
  %call138 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %100, %struct.rtx_def* %101), !dbg !8071
  br label %if.end139, !dbg !8071

if.end139:                                        ; preds = %if.then137, %if.then123
  br label %if.end145, !dbg !8072

if.else140:                                       ; preds = %land.lhs.true122, %land.lhs.true119, %if.end116
  %102 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8073
  %call141 = call i32 @rhs_regno(%struct.rtx_def* %102), !dbg !8073
  %103 = load %struct.rtx_def*, %struct.rtx_def** %mem, align 8, !dbg !8074
  %104 = load i32, i32* %nregs, align 4, !dbg !8075
  %105 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8076
  %106 = load i32, i32* %i, align 4, !dbg !8077
  %idxprom142 = sext i32 %106 to i64, !dbg !8076
  %arrayidx143 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %105, i64 %idxprom142, !dbg !8076
  %mode144 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %arrayidx143, i32 0, i32 1, !dbg !8078
  %107 = load i32, i32* %mode144, align 8, !dbg !8078
  call void @move_block_to_reg(i32 %call141, %struct.rtx_def* %103, i32 %104, i32 %107), !dbg !8079
  br label %if.end145

if.end145:                                        ; preds = %if.else140, %if.end139
  br label %if.end146, !dbg !8080

if.end146:                                        ; preds = %if.end145, %lor.lhs.false
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %for.end
  br label %if.end148

if.end148:                                        ; preds = %if.end147, %if.then70
  br label %if.end149

if.end149:                                        ; preds = %if.end148, %if.then64
  %108 = load i32, i32* %is_sibcall.addr, align 4, !dbg !8081
  %tobool150 = icmp ne i32 %108, 0, !dbg !8081
  br i1 %tobool150, label %land.lhs.true151, label %if.end157, !dbg !8083

land.lhs.true151:                                 ; preds = %if.end149
  %109 = load %struct.rtx_def*, %struct.rtx_def** %before_arg, align 8, !dbg !8084
  %110 = load %struct.arg_data*, %struct.arg_data** %args.addr, align 8, !dbg !8085
  %111 = load i32, i32* %i, align 4, !dbg !8086
  %idxprom152 = sext i32 %111 to i64, !dbg !8085
  %arrayidx153 = getelementptr inbounds %struct.arg_data, %struct.arg_data* %110, i64 %idxprom152, !dbg !8085
  %call154 = call i32 @check_sibcall_argument_overlap(%struct.rtx_def* %109, %struct.arg_data* %arrayidx153, i32 0), !dbg !8087
  %tobool155 = icmp ne i32 %call154, 0, !dbg !8087
  br i1 %tobool155, label %if.then156, label %if.end157, !dbg !8088

if.then156:                                       ; preds = %land.lhs.true151
  %112 = load i32*, i32** %sibcall_failure.addr, align 8, !dbg !8089
  store i32 1, i32* %112, align 4, !dbg !8090
  br label %if.end157, !dbg !8091

if.end157:                                        ; preds = %if.then156, %land.lhs.true151, %if.end149
  %113 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8092
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !8092
  %bf.load158 = load i32, i32* %114, align 8, !dbg !8092
  %bf.clear159 = and i32 %bf.load158, 65535, !dbg !8092
  %cmp160 = icmp eq i32 %bf.clear159, 15, !dbg !8094
  br i1 %cmp160, label %if.then162, label %if.else163, !dbg !8095

if.then162:                                       ; preds = %if.end157
  %115 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8, !dbg !8096
  %116 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8097
  call void @use_group_regs(%struct.rtx_def** %115, %struct.rtx_def* %116), !dbg !8098
  br label %if.end174, !dbg !8098

if.else163:                                       ; preds = %if.end157
  %117 = load i32, i32* %nregs, align 4, !dbg !8099
  %cmp164 = icmp eq i32 %117, -1, !dbg !8101
  br i1 %cmp164, label %if.then166, label %if.else167, !dbg !8102

if.then166:                                       ; preds = %if.else163
  %118 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8, !dbg !8103
  %119 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8104
  call void @use_reg(%struct.rtx_def** %118, %struct.rtx_def* %119), !dbg !8105
  br label %if.end173, !dbg !8105

if.else167:                                       ; preds = %if.else163
  %120 = load i32, i32* %nregs, align 4, !dbg !8106
  %cmp168 = icmp sgt i32 %120, 0, !dbg !8108
  br i1 %cmp168, label %if.then170, label %if.end172, !dbg !8109

if.then170:                                       ; preds = %if.else167
  %121 = load %struct.rtx_def**, %struct.rtx_def*** %call_fusage.addr, align 8, !dbg !8110
  %122 = load %struct.rtx_def*, %struct.rtx_def** %reg, align 8, !dbg !8111
  %call171 = call i32 @rhs_regno(%struct.rtx_def* %122), !dbg !8111
  %123 = load i32, i32* %nregs, align 4, !dbg !8112
  call void @use_regs(%struct.rtx_def** %121, i32 %call171, i32 %123), !dbg !8113
  br label %if.end172, !dbg !8113

if.end172:                                        ; preds = %if.then170, %if.else167
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.then166
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.then162
  br label %if.end175, !dbg !8114

if.end175:                                        ; preds = %if.end174, %cond.end
  br label %for.inc176, !dbg !8115

for.inc176:                                       ; preds = %if.end175
  %124 = load i32, i32* %i, align 4, !dbg !8116
  %inc177 = add nsw i32 %124, 1, !dbg !8116
  store i32 %inc177, i32* %i, align 4, !dbg !8116
  br label %for.cond, !dbg !8117, !llvm.loop !8118

for.end178:                                       ; preds = %for.cond
  ret void, !dbg !8120
}

declare dso_local %struct.rtx_def* @function_arg(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @emit_call_1(%struct.rtx_def* %funexp, %union.tree_node* %fntree, %union.tree_node* %fndecl, %union.tree_node* %funtype, i64 %stack_size, i64 %rounded_stack_size, i64 %struct_value_size, %struct.rtx_def* %next_arg_reg, %struct.rtx_def* %valreg, i32 %old_inhibit_defer_pop, %struct.rtx_def* %call_fusage, i32 %ecf_flags, %struct.ix86_args* %args_so_far) #0 !dbg !8121 {
entry:
  %funexp.addr = alloca %struct.rtx_def*, align 8
  %fntree.addr = alloca %union.tree_node*, align 8
  %fndecl.addr = alloca %union.tree_node*, align 8
  %funtype.addr = alloca %union.tree_node*, align 8
  %stack_size.addr = alloca i64, align 8
  %rounded_stack_size.addr = alloca i64, align 8
  %struct_value_size.addr = alloca i64, align 8
  %next_arg_reg.addr = alloca %struct.rtx_def*, align 8
  %valreg.addr = alloca %struct.rtx_def*, align 8
  %old_inhibit_defer_pop.addr = alloca i32, align 4
  %call_fusage.addr = alloca %struct.rtx_def*, align 8
  %ecf_flags.addr = alloca i32, align 4
  %args_so_far.addr = alloca %struct.ix86_args*, align 8
  %rounded_stack_size_rtx = alloca %struct.rtx_def*, align 8
  %call_insn = alloca %struct.rtx_def*, align 8
  %already_popped = alloca i32, align 4
  %n_popped = alloca i64, align 8
  %n_pop = alloca %struct.rtx_def*, align 8
  %pat = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %funexp, %struct.rtx_def** %funexp.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %funexp.addr, metadata !8124, metadata !DIExpression()), !dbg !8125
  store %union.tree_node* %fntree, %union.tree_node** %fntree.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntree.addr, metadata !8126, metadata !DIExpression()), !dbg !8127
  store %union.tree_node* %fndecl, %union.tree_node** %fndecl.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl.addr, metadata !8128, metadata !DIExpression()), !dbg !8129
  store %union.tree_node* %funtype, %union.tree_node** %funtype.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %funtype.addr, metadata !8130, metadata !DIExpression()), !dbg !8131
  store i64 %stack_size, i64* %stack_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %stack_size.addr, metadata !8132, metadata !DIExpression()), !dbg !8133
  store i64 %rounded_stack_size, i64* %rounded_stack_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %rounded_stack_size.addr, metadata !8134, metadata !DIExpression()), !dbg !8135
  store i64 %struct_value_size, i64* %struct_value_size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %struct_value_size.addr, metadata !8136, metadata !DIExpression()), !dbg !8137
  store %struct.rtx_def* %next_arg_reg, %struct.rtx_def** %next_arg_reg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %next_arg_reg.addr, metadata !8138, metadata !DIExpression()), !dbg !8139
  store %struct.rtx_def* %valreg, %struct.rtx_def** %valreg.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %valreg.addr, metadata !8140, metadata !DIExpression()), !dbg !8141
  store i32 %old_inhibit_defer_pop, i32* %old_inhibit_defer_pop.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %old_inhibit_defer_pop.addr, metadata !8142, metadata !DIExpression()), !dbg !8143
  store %struct.rtx_def* %call_fusage, %struct.rtx_def** %call_fusage.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_fusage.addr, metadata !8144, metadata !DIExpression()), !dbg !8145
  store i32 %ecf_flags, i32* %ecf_flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ecf_flags.addr, metadata !8146, metadata !DIExpression()), !dbg !8147
  store %struct.ix86_args* %args_so_far, %struct.ix86_args** %args_so_far.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ix86_args** %args_so_far.addr, metadata !8148, metadata !DIExpression()), !dbg !8149
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %rounded_stack_size_rtx, metadata !8150, metadata !DIExpression()), !dbg !8151
  %0 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8152
  %call = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %0), !dbg !8152
  store %struct.rtx_def* %call, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8151
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_insn, metadata !8153, metadata !DIExpression()), !dbg !8154
  call void @llvm.dbg.declare(metadata i32* %already_popped, metadata !8155, metadata !DIExpression()), !dbg !8156
  store i32 0, i32* %already_popped, align 4, !dbg !8156
  call void @llvm.dbg.declare(metadata i64* %n_popped, metadata !8157, metadata !DIExpression()), !dbg !8158
  %1 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8159
  %2 = load %union.tree_node*, %union.tree_node** %funtype.addr, align 8, !dbg !8159
  %3 = load i64, i64* %stack_size.addr, align 8, !dbg !8159
  %conv = trunc i64 %3 to i32, !dbg !8159
  %call1 = call i32 @ix86_return_pops_args(%union.tree_node* %1, %union.tree_node* %2, i32 %conv), !dbg !8159
  %conv2 = sext i32 %call1 to i64, !dbg !8159
  store i64 %conv2, i64* %n_popped, align 8, !dbg !8158
  %4 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8160
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !8160
  %bf.load = load i32, i32* %5, align 8, !dbg !8160
  %bf.clear = and i32 %bf.load, 65535, !dbg !8160
  %cmp = icmp ne i32 %bf.clear, 45, !dbg !8162
  br i1 %cmp, label %if.then, label %if.end, !dbg !8163

if.then:                                          ; preds = %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8164
  %call4 = call %struct.rtx_def* @memory_address_addr_space(i32 14, %struct.rtx_def* %6, i8 zeroext 0), !dbg !8164
  store %struct.rtx_def* %call4, %struct.rtx_def** %funexp.addr, align 8, !dbg !8165
  br label %if.end, !dbg !8166

if.end:                                           ; preds = %if.then, %entry
  %7 = load i64, i64* %n_popped, align 8, !dbg !8167
  %cmp5 = icmp sgt i64 %7, 0, !dbg !8169
  br i1 %cmp5, label %if.then7, label %if.else16, !dbg !8170

if.then7:                                         ; preds = %if.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %n_pop, metadata !8171, metadata !DIExpression()), !dbg !8173
  %8 = load i64, i64* %n_popped, align 8, !dbg !8174
  %call8 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %8), !dbg !8174
  store %struct.rtx_def* %call8, %struct.rtx_def** %n_pop, align 8, !dbg !8173
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pat, metadata !8175, metadata !DIExpression()), !dbg !8176
  %9 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8177
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !8177
  br i1 %tobool, label %if.then9, label %if.else, !dbg !8179

if.then9:                                         ; preds = %if.then7
  %10 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8180
  %11 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8180
  %call10 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %11), !dbg !8180
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8180
  %13 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8180
  %14 = load %struct.rtx_def*, %struct.rtx_def** %n_pop, align 8, !dbg !8180
  %call11 = call %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def* %10, %struct.rtx_def* %call10, %struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !8180
  store %struct.rtx_def* %call11, %struct.rtx_def** %pat, align 8, !dbg !8181
  br label %if.end14, !dbg !8182

if.else:                                          ; preds = %if.then7
  %15 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8183
  %call12 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %15), !dbg !8183
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8183
  %17 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8183
  %18 = load %struct.rtx_def*, %struct.rtx_def** %n_pop, align 8, !dbg !8183
  %call13 = call %struct.rtx_def* @gen_call_pop(%struct.rtx_def* %call12, %struct.rtx_def* %16, %struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !8183
  store %struct.rtx_def* %call13, %struct.rtx_def** %pat, align 8, !dbg !8184
  br label %if.end14

if.end14:                                         ; preds = %if.else, %if.then9
  %19 = load %struct.rtx_def*, %struct.rtx_def** %pat, align 8, !dbg !8185
  %call15 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %19), !dbg !8186
  store i32 1, i32* %already_popped, align 4, !dbg !8187
  br label %if.end41, !dbg !8188

if.else16:                                        ; preds = %if.end
  %20 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8189
  %and = and i32 %20, 256, !dbg !8191
  %tobool17 = icmp ne i32 %and, 0, !dbg !8191
  br i1 %tobool17, label %if.then18, label %if.else29, !dbg !8192

if.then18:                                        ; preds = %if.else16
  %21 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8193
  %tobool19 = icmp ne %struct.rtx_def* %21, null, !dbg !8193
  br i1 %tobool19, label %if.then20, label %if.else24, !dbg !8196

if.then20:                                        ; preds = %if.then18
  %22 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8197
  %23 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8197
  %call21 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %23), !dbg !8197
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8197
  %25 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8197
  %call22 = call %struct.rtx_def* @gen_sibcall_value(%struct.rtx_def* %22, %struct.rtx_def* %call21, %struct.rtx_def* %24, %struct.rtx_def* %25), !dbg !8197
  %call23 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call22), !dbg !8198
  br label %if.end28, !dbg !8198

if.else24:                                        ; preds = %if.then18
  %26 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8199
  %call25 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %26), !dbg !8199
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8199
  %28 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8199
  %call26 = call %struct.rtx_def* @gen_sibcall(%struct.rtx_def* %call25, %struct.rtx_def* %27, %struct.rtx_def* %28), !dbg !8199
  %call27 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call26), !dbg !8200
  br label %if.end28

if.end28:                                         ; preds = %if.else24, %if.then20
  br label %if.end40, !dbg !8201

if.else29:                                        ; preds = %if.else16
  %29 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8202
  %tobool30 = icmp ne %struct.rtx_def* %29, null, !dbg !8202
  br i1 %tobool30, label %if.then31, label %if.else35, !dbg !8206

if.then31:                                        ; preds = %if.else29
  %30 = load %struct.rtx_def*, %struct.rtx_def** %valreg.addr, align 8, !dbg !8207
  %31 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8207
  %call32 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %31), !dbg !8207
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8207
  %33 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8207
  %call33 = call %struct.rtx_def* @gen_call_value(%struct.rtx_def* %30, %struct.rtx_def* %call32, %struct.rtx_def* %32, %struct.rtx_def* %33), !dbg !8207
  %call34 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call33), !dbg !8208
  br label %if.end39, !dbg !8208

if.else35:                                        ; preds = %if.else29
  %34 = load %struct.rtx_def*, %struct.rtx_def** %funexp.addr, align 8, !dbg !8209
  %call36 = call %struct.rtx_def* @gen_rtx_MEM(i32 14, %struct.rtx_def* %34), !dbg !8209
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8209
  %36 = load %struct.rtx_def*, %struct.rtx_def** %next_arg_reg.addr, align 8, !dbg !8209
  %call37 = call %struct.rtx_def* @gen_call(%struct.rtx_def* %call36, %struct.rtx_def* %35, %struct.rtx_def* %36), !dbg !8209
  %call38 = call %struct.rtx_def* @emit_call_insn(%struct.rtx_def* %call37), !dbg !8210
  br label %if.end39

if.end39:                                         ; preds = %if.else35, %if.then31
  br label %if.end40

if.end40:                                         ; preds = %if.end39, %if.end28
  br label %if.end41

if.end41:                                         ; preds = %if.end40, %if.end14
  %call42 = call %struct.rtx_def* @last_call_insn(), !dbg !8211
  store %struct.rtx_def* %call42, %struct.rtx_def** %call_insn, align 8, !dbg !8212
  %37 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8213
  %38 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage.addr, align 8, !dbg !8214
  call void @add_function_usage_to(%struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !8215
  %39 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8216
  %and43 = and i32 %39, 1, !dbg !8218
  %tobool44 = icmp ne i32 %and43, 0, !dbg !8218
  br i1 %tobool44, label %if.then45, label %if.end48, !dbg !8219

if.then45:                                        ; preds = %if.end41
  %40 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8220
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !8220
  %bf.load46 = load i32, i32* %41, align 8, !dbg !8221
  %bf.clear47 = and i32 %bf.load46, -67108865, !dbg !8221
  %bf.set = or i32 %bf.clear47, 67108864, !dbg !8221
  store i32 %bf.set, i32* %41, align 8, !dbg !8221
  br label %if.end48, !dbg !8220

if.end48:                                         ; preds = %if.then45, %if.end41
  %42 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8222
  %and49 = and i32 %42, 2, !dbg !8224
  %tobool50 = icmp ne i32 %and49, 0, !dbg !8224
  br i1 %tobool50, label %if.then51, label %if.end55, !dbg !8225

if.then51:                                        ; preds = %if.end48
  %43 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8226
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !8226
  %bf.load52 = load i32, i32* %44, align 8, !dbg !8227
  %bf.clear53 = and i32 %bf.load52, 2147483647, !dbg !8227
  %bf.set54 = or i32 %bf.clear53, -2147483648, !dbg !8227
  store i32 %bf.set54, i32* %44, align 8, !dbg !8227
  br label %if.end55, !dbg !8226

if.end55:                                         ; preds = %if.then51, %if.end48
  %45 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8228
  %and56 = and i32 %45, 4, !dbg !8230
  %tobool57 = icmp ne i32 %and56, 0, !dbg !8230
  br i1 %tobool57, label %if.then58, label %if.end62, !dbg !8231

if.then58:                                        ; preds = %if.end55
  %46 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8232
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !8232
  %bf.load59 = load i32, i32* %47, align 8, !dbg !8233
  %bf.clear60 = and i32 %bf.load59, -33554433, !dbg !8233
  %bf.set61 = or i32 %bf.clear60, 33554432, !dbg !8233
  store i32 %bf.set61, i32* %47, align 8, !dbg !8233
  br label %if.end62, !dbg !8232

if.end62:                                         ; preds = %if.then58, %if.end55
  %48 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8234
  %49 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8235
  call void @make_reg_eh_region_note(%struct.rtx_def* %48, i32 %49, i32 0), !dbg !8236
  %50 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8237
  %and63 = and i32 %50, 8, !dbg !8239
  %tobool64 = icmp ne i32 %and63, 0, !dbg !8239
  br i1 %tobool64, label %if.then65, label %if.end66, !dbg !8240

if.then65:                                        ; preds = %if.end62
  %51 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8241
  %52 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8242
  call void @add_reg_note(%struct.rtx_def* %51, i32 27, %struct.rtx_def* %52), !dbg !8243
  br label %if.end66, !dbg !8243

if.end66:                                         ; preds = %if.then65, %if.end62
  %53 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8244
  %and67 = and i32 %53, 128, !dbg !8246
  %tobool68 = icmp ne i32 %and67, 0, !dbg !8246
  br i1 %tobool68, label %if.then69, label %if.end73, !dbg !8247

if.then69:                                        ; preds = %if.end66
  %54 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8248
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8250
  call void @add_reg_note(%struct.rtx_def* %54, i32 30, %struct.rtx_def* %55), !dbg !8251
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !8252
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !8252
  %calls_setjmp = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 20, !dbg !8253
  %bf.load70 = load i32, i32* %calls_setjmp, align 8, !dbg !8254
  %bf.clear71 = and i32 %bf.load70, -262145, !dbg !8254
  %bf.set72 = or i32 %bf.clear71, 262144, !dbg !8254
  store i32 %bf.set72, i32* %calls_setjmp, align 8, !dbg !8254
  br label %if.end73, !dbg !8255

if.end73:                                         ; preds = %if.then69, %if.end66
  %57 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8256
  %and74 = and i32 %57, 256, !dbg !8257
  %cmp75 = icmp ne i32 %and74, 0, !dbg !8258
  %conv76 = zext i1 %cmp75 to i32, !dbg !8258
  %58 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8259
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !8259
  %bf.load77 = load i32, i32* %59, align 8, !dbg !8260
  %bf.value = and i32 %conv76, 1, !dbg !8260
  %bf.shl = shl i32 %bf.value, 24, !dbg !8260
  %bf.clear78 = and i32 %bf.load77, -16777217, !dbg !8260
  %bf.set79 = or i32 %bf.clear78, %bf.shl, !dbg !8260
  store i32 %bf.set79, i32* %59, align 8, !dbg !8260
  %60 = load i32, i32* @flag_enable_icf_debug, align 4, !dbg !8261
  %tobool80 = icmp ne i32 %60, 0, !dbg !8261
  br i1 %tobool80, label %land.lhs.true, label %if.end85, !dbg !8263

land.lhs.true:                                    ; preds = %if.end73
  %61 = load %union.tree_node*, %union.tree_node** %fndecl.addr, align 8, !dbg !8264
  %cmp81 = icmp eq %union.tree_node* %61, null, !dbg !8265
  br i1 %cmp81, label %if.then83, label %if.end85, !dbg !8266

if.then83:                                        ; preds = %land.lhs.true
  %62 = load %struct.gcc_debug_hooks*, %struct.gcc_debug_hooks** @debug_hooks, align 8, !dbg !8267
  %virtual_call_token = getelementptr inbounds %struct.gcc_debug_hooks, %struct.gcc_debug_hooks* %62, i32 0, i32 27, !dbg !8268
  %63 = load void (%union.tree_node*, i32)*, void (%union.tree_node*, i32)** %virtual_call_token, align 8, !dbg !8268
  %64 = load %union.tree_node*, %union.tree_node** %fntree.addr, align 8, !dbg !8269
  %exp = bitcast %union.tree_node* %64 to %struct.tree_exp*, !dbg !8269
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp, i32 0, i32 3, !dbg !8269
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 1, !dbg !8269
  %65 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !8269
  %66 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8270
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !8270
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8270
  %arrayidx84 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8270
  %rt_int = bitcast %union.rtunion_def* %arrayidx84 to i32*, !dbg !8270
  %67 = load i32, i32* %rt_int, align 8, !dbg !8270
  call void %63(%union.tree_node* %65, i32 %67), !dbg !8271
  br label %if.end85, !dbg !8271

if.end85:                                         ; preds = %if.then83, %land.lhs.true, %if.end73
  %68 = load i32, i32* %old_inhibit_defer_pop.addr, align 4, !dbg !8272
  store i32 %68, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !8273
  %69 = load i64, i64* %n_popped, align 8, !dbg !8274
  %cmp86 = icmp sgt i64 %69, 0, !dbg !8276
  br i1 %cmp86, label %if.then88, label %if.end105, !dbg !8277

if.then88:                                        ; preds = %if.end85
  %70 = load i32, i32* %already_popped, align 4, !dbg !8278
  %tobool89 = icmp ne i32 %70, 0, !dbg !8278
  br i1 %tobool89, label %if.end100, label %if.then90, !dbg !8281

if.then90:                                        ; preds = %if.then88
  %71 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !8282
  %call91 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %71), !dbg !8282
  %72 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8282
  %u92 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !8282
  %fld93 = bitcast %union.u* %u92 to [1 x %union.rtunion_def]*, !dbg !8282
  %arrayidx94 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld93, i64 0, i64 8, !dbg !8282
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx94 to %struct.rtx_def**, !dbg !8282
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8282
  %call95 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %call91, %struct.rtx_def* %73), !dbg !8282
  %74 = load %struct.rtx_def*, %struct.rtx_def** %call_insn, align 8, !dbg !8283
  %u96 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %74, i32 0, i32 1, !dbg !8283
  %fld97 = bitcast %union.u* %u96 to [1 x %union.rtunion_def]*, !dbg !8283
  %arrayidx98 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld97, i64 0, i64 8, !dbg !8283
  %rt_rtx99 = bitcast %union.rtunion_def* %arrayidx98 to %struct.rtx_def**, !dbg !8283
  store %struct.rtx_def* %call95, %struct.rtx_def** %rt_rtx99, align 8, !dbg !8284
  br label %if.end100, !dbg !8283

if.end100:                                        ; preds = %if.then90, %if.then88
  %75 = load i64, i64* %n_popped, align 8, !dbg !8285
  %76 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8286
  %sub = sub nsw i64 %76, %75, !dbg !8286
  store i64 %sub, i64* %rounded_stack_size.addr, align 8, !dbg !8286
  %77 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8287
  %call101 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %77), !dbg !8287
  store %struct.rtx_def* %call101, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8288
  %78 = load i64, i64* %n_popped, align 8, !dbg !8289
  %79 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8290
  %conv102 = sext i32 %79 to i64, !dbg !8290
  %sub103 = sub nsw i64 %conv102, %78, !dbg !8290
  %conv104 = trunc i64 %sub103 to i32, !dbg !8290
  store i32 %conv104, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8290
  store i8 1, i8* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 45), align 1, !dbg !8291
  br label %if.end105, !dbg !8293

if.end105:                                        ; preds = %if.end100, %if.end85
  %80 = load i32, i32* @target_flags, align 4, !dbg !8294
  %and106 = and i32 %80, 4, !dbg !8294
  %cmp107 = icmp ne i32 %and106, 0, !dbg !8294
  br i1 %cmp107, label %if.else137, label %lor.lhs.false, !dbg !8294

lor.lhs.false:                                    ; preds = %if.end105
  %call109 = call i32 @ix86_cfun_abi(), !dbg !8294
  %cmp110 = icmp eq i32 %call109, 1, !dbg !8294
  br i1 %cmp110, label %if.else137, label %if.then112, !dbg !8296

if.then112:                                       ; preds = %lor.lhs.false
  %81 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8297
  %cmp113 = icmp ne i64 %81, 0, !dbg !8300
  br i1 %cmp113, label %if.then115, label %if.end136, !dbg !8301

if.then115:                                       ; preds = %if.then112
  %82 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8302
  %and116 = and i32 %82, 8, !dbg !8305
  %tobool117 = icmp ne i32 %and116, 0, !dbg !8305
  br i1 %tobool117, label %if.then118, label %if.else122, !dbg !8306

if.then118:                                       ; preds = %if.then115
  %83 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8307
  %84 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8308
  %conv119 = sext i32 %84 to i64, !dbg !8308
  %sub120 = sub nsw i64 %conv119, %83, !dbg !8308
  %conv121 = trunc i64 %sub120 to i32, !dbg !8308
  store i32 %conv121, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8308
  br label %if.end135, !dbg !8309

if.else122:                                       ; preds = %if.then115
  %85 = load i32, i32* @flag_defer_pop, align 4, !dbg !8310
  %tobool123 = icmp ne i32 %85, 0, !dbg !8310
  br i1 %tobool123, label %land.lhs.true124, label %if.else133, !dbg !8312

land.lhs.true124:                                 ; preds = %if.else122
  %86 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !8313
  %cmp125 = icmp eq i32 %86, 0, !dbg !8314
  br i1 %cmp125, label %land.lhs.true127, label %if.else133, !dbg !8315

land.lhs.true127:                                 ; preds = %land.lhs.true124
  %87 = load i32, i32* %ecf_flags.addr, align 4, !dbg !8316
  %and128 = and i32 %87, 3, !dbg !8317
  %tobool129 = icmp ne i32 %and128, 0, !dbg !8317
  br i1 %tobool129, label %if.else133, label %if.then130, !dbg !8318

if.then130:                                       ; preds = %land.lhs.true127
  %88 = load i64, i64* %rounded_stack_size.addr, align 8, !dbg !8319
  %89 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !8320
  %conv131 = sext i32 %89 to i64, !dbg !8320
  %add = add nsw i64 %conv131, %88, !dbg !8320
  %conv132 = trunc i64 %add to i32, !dbg !8320
  store i32 %conv132, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 0), align 8, !dbg !8320
  br label %if.end134, !dbg !8321

if.else133:                                       ; preds = %land.lhs.true127, %land.lhs.true124, %if.else122
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rounded_stack_size_rtx, align 8, !dbg !8322
  call void @adjust_stack(%struct.rtx_def* %90), !dbg !8323
  br label %if.end134

if.end134:                                        ; preds = %if.else133, %if.then130
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.then118
  br label %if.end136, !dbg !8324

if.end136:                                        ; preds = %if.end135, %if.then112
  br label %if.end142, !dbg !8325

if.else137:                                       ; preds = %lor.lhs.false, %if.end105
  %91 = load i64, i64* %n_popped, align 8, !dbg !8326
  %tobool138 = icmp ne i64 %91, 0, !dbg !8326
  br i1 %tobool138, label %if.then139, label %if.end141, !dbg !8328

if.then139:                                       ; preds = %if.else137
  %92 = load i64, i64* %n_popped, align 8, !dbg !8329
  %call140 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %92), !dbg !8329
  call void @anti_adjust_stack(%struct.rtx_def* %call140), !dbg !8330
  br label %if.end141, !dbg !8330

if.end141:                                        ; preds = %if.then139, %if.else137
  br label %if.end142

if.end142:                                        ; preds = %if.end141, %if.end136
  ret void, !dbg !8331
}

declare dso_local %struct.rtx_def* @gen_rtx_REG(i32, i32) #2

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #2

declare dso_local void @mark_reg_pointer(%struct.rtx_def*, i32) #2

declare dso_local void @add_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @get_insns() #2

declare dso_local void @end_sequence() #2

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #2

declare dso_local void @set_mem_attributes(%struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local %union.tree_node* @build_qualified_type(%union.tree_node*, i32) #2

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @emit_group_store(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @avoid_likely_spilled_reg(%struct.rtx_def* %x) #0 !dbg !8332 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %new_rtx = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8335, metadata !DIExpression()), !dbg !8336
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_rtx, metadata !8337, metadata !DIExpression()), !dbg !8338
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8339
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8339
  %bf.load = load i32, i32* %1, align 8, !dbg !8339
  %bf.clear = and i32 %bf.load, 65535, !dbg !8339
  %cmp = icmp eq i32 %bf.clear, 37, !dbg !8339
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8341

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8342
  %call = call i32 @rhs_regno(%struct.rtx_def* %2), !dbg !8342
  %cmp1 = icmp ult i32 %call, 53, !dbg !8342
  br i1 %cmp1, label %land.lhs.true2, label %if.end, !dbg !8343

land.lhs.true2:                                   ; preds = %land.lhs.true
  %3 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call3 = call i32 @rhs_regno(%struct.rtx_def* %3), !dbg !8344
  %idxprom = zext i32 %call3 to i64, !dbg !8344
  %arrayidx = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom, !dbg !8344
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8344
  %cmp4 = icmp eq i32 %4, 1, !dbg !8344
  br i1 %cmp4, label %if.then, label %lor.lhs.false, !dbg !8344

lor.lhs.false:                                    ; preds = %land.lhs.true2
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call5 = call i32 @rhs_regno(%struct.rtx_def* %5), !dbg !8344
  %idxprom6 = zext i32 %call5 to i64, !dbg !8344
  %arrayidx7 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom6, !dbg !8344
  %6 = load i32, i32* %arrayidx7, align 4, !dbg !8344
  %cmp8 = icmp eq i32 %6, 2, !dbg !8344
  br i1 %cmp8, label %if.then, label %lor.lhs.false9, !dbg !8344

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call10 = call i32 @rhs_regno(%struct.rtx_def* %7), !dbg !8344
  %idxprom11 = zext i32 %call10 to i64, !dbg !8344
  %arrayidx12 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom11, !dbg !8344
  %8 = load i32, i32* %arrayidx12, align 4, !dbg !8344
  %cmp13 = icmp eq i32 %8, 3, !dbg !8344
  br i1 %cmp13, label %if.then, label %lor.lhs.false14, !dbg !8344

lor.lhs.false14:                                  ; preds = %lor.lhs.false9
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call15 = call i32 @rhs_regno(%struct.rtx_def* %9), !dbg !8344
  %idxprom16 = zext i32 %call15 to i64, !dbg !8344
  %arrayidx17 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom16, !dbg !8344
  %10 = load i32, i32* %arrayidx17, align 4, !dbg !8344
  %cmp18 = icmp eq i32 %10, 4, !dbg !8344
  br i1 %cmp18, label %if.then, label %lor.lhs.false19, !dbg !8344

lor.lhs.false19:                                  ; preds = %lor.lhs.false14
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call20 = call i32 @rhs_regno(%struct.rtx_def* %11), !dbg !8344
  %idxprom21 = zext i32 %call20 to i64, !dbg !8344
  %arrayidx22 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom21, !dbg !8344
  %12 = load i32, i32* %arrayidx22, align 4, !dbg !8344
  %cmp23 = icmp eq i32 %12, 7, !dbg !8344
  br i1 %cmp23, label %if.then, label %lor.lhs.false24, !dbg !8344

lor.lhs.false24:                                  ; preds = %lor.lhs.false19
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call25 = call i32 @rhs_regno(%struct.rtx_def* %13), !dbg !8344
  %idxprom26 = zext i32 %call25 to i64, !dbg !8344
  %arrayidx27 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom26, !dbg !8344
  %14 = load i32, i32* %arrayidx27, align 4, !dbg !8344
  %cmp28 = icmp eq i32 %14, 5, !dbg !8344
  br i1 %cmp28, label %if.then, label %lor.lhs.false29, !dbg !8344

lor.lhs.false29:                                  ; preds = %lor.lhs.false24
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call30 = call i32 @rhs_regno(%struct.rtx_def* %15), !dbg !8344
  %idxprom31 = zext i32 %call30 to i64, !dbg !8344
  %arrayidx32 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom31, !dbg !8344
  %16 = load i32, i32* %arrayidx32, align 4, !dbg !8344
  %cmp33 = icmp eq i32 %16, 6, !dbg !8344
  br i1 %cmp33, label %if.then, label %lor.lhs.false34, !dbg !8344

lor.lhs.false34:                                  ; preds = %lor.lhs.false29
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call35 = call i32 @rhs_regno(%struct.rtx_def* %17), !dbg !8344
  %idxprom36 = zext i32 %call35 to i64, !dbg !8344
  %arrayidx37 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom36, !dbg !8344
  %18 = load i32, i32* %arrayidx37, align 4, !dbg !8344
  %cmp38 = icmp eq i32 %18, 17, !dbg !8344
  br i1 %cmp38, label %if.then, label %lor.lhs.false39, !dbg !8344

lor.lhs.false39:                                  ; preds = %lor.lhs.false34
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call40 = call i32 @rhs_regno(%struct.rtx_def* %19), !dbg !8344
  %idxprom41 = zext i32 %call40 to i64, !dbg !8344
  %arrayidx42 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom41, !dbg !8344
  %20 = load i32, i32* %arrayidx42, align 4, !dbg !8344
  %cmp43 = icmp eq i32 %20, 14, !dbg !8344
  br i1 %cmp43, label %if.then, label %lor.lhs.false44, !dbg !8344

lor.lhs.false44:                                  ; preds = %lor.lhs.false39
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8344
  %call45 = call i32 @rhs_regno(%struct.rtx_def* %21), !dbg !8344
  %idxprom46 = zext i32 %call45 to i64, !dbg !8344
  %arrayidx47 = getelementptr inbounds [53 x i32], [53 x i32]* @regclass_map, i64 0, i64 %idxprom46, !dbg !8344
  %22 = load i32, i32* %arrayidx47, align 4, !dbg !8344
  %cmp48 = icmp eq i32 %22, 15, !dbg !8344
  br i1 %cmp48, label %if.then, label %if.end, !dbg !8345

if.then:                                          ; preds = %lor.lhs.false44, %lor.lhs.false39, %lor.lhs.false34, %lor.lhs.false29, %lor.lhs.false24, %lor.lhs.false19, %lor.lhs.false14, %lor.lhs.false9, %lor.lhs.false, %land.lhs.true2
  store i32 0, i32* @generating_concat_p, align 4, !dbg !8346
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8348
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !8348
  %bf.load49 = load i32, i32* %24, align 8, !dbg !8348
  %bf.lshr = lshr i32 %bf.load49, 16, !dbg !8348
  %bf.clear50 = and i32 %bf.lshr, 255, !dbg !8348
  %call51 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear50), !dbg !8349
  store %struct.rtx_def* %call51, %struct.rtx_def** %new_rtx, align 8, !dbg !8350
  store i32 1, i32* @generating_concat_p, align 4, !dbg !8351
  %25 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !8352
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8353
  %call52 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %25, %struct.rtx_def* %26), !dbg !8354
  %27 = load %struct.rtx_def*, %struct.rtx_def** %new_rtx, align 8, !dbg !8355
  store %struct.rtx_def* %27, %struct.rtx_def** %retval, align 8, !dbg !8356
  br label %return, !dbg !8356

if.end:                                           ; preds = %lor.lhs.false44, %land.lhs.true, %entry
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8357
  store %struct.rtx_def* %28, %struct.rtx_def** %retval, align 8, !dbg !8358
  br label %return, !dbg !8358

return:                                           ; preds = %if.end, %if.then
  %29 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8359
  ret %struct.rtx_def* %29, !dbg !8359
}

declare dso_local %struct.rtx_def* @copy_blkmode_from_reg(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*) #2

declare dso_local %struct.rtx_def* @gen_rtx_SUBREG(i32, %struct.rtx_def*, i32) #2

declare dso_local void @emit_stack_restore(i32, %struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @restore_fixed_argument_area(%struct.rtx_def* %save_area, %struct.rtx_def* %argblock, i32 %high_to_save, i32 %low_to_save) #0 !dbg !8360 {
entry:
  %save_area.addr = alloca %struct.rtx_def*, align 8
  %argblock.addr = alloca %struct.rtx_def*, align 8
  %high_to_save.addr = alloca i32, align 4
  %low_to_save.addr = alloca i32, align 4
  %save_mode = alloca i32, align 4
  %delta = alloca i32, align 4
  %stack_area = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %save_area, %struct.rtx_def** %save_area.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %save_area.addr, metadata !8363, metadata !DIExpression()), !dbg !8364
  store %struct.rtx_def* %argblock, %struct.rtx_def** %argblock.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock.addr, metadata !8365, metadata !DIExpression()), !dbg !8366
  store i32 %high_to_save, i32* %high_to_save.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %high_to_save.addr, metadata !8367, metadata !DIExpression()), !dbg !8368
  store i32 %low_to_save, i32* %low_to_save.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %low_to_save.addr, metadata !8369, metadata !DIExpression()), !dbg !8370
  call void @llvm.dbg.declare(metadata i32* %save_mode, metadata !8371, metadata !DIExpression()), !dbg !8372
  %0 = load %struct.rtx_def*, %struct.rtx_def** %save_area.addr, align 8, !dbg !8373
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8373
  %bf.load = load i32, i32* %1, align 8, !dbg !8373
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8373
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8373
  store i32 %bf.clear, i32* %save_mode, align 4, !dbg !8372
  call void @llvm.dbg.declare(metadata i32* %delta, metadata !8374, metadata !DIExpression()), !dbg !8375
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area, metadata !8376, metadata !DIExpression()), !dbg !8377
  %2 = load i32, i32* %low_to_save.addr, align 4, !dbg !8378
  store i32 %2, i32* %delta, align 4, !dbg !8379
  %3 = load i32, i32* %save_mode, align 4, !dbg !8380
  %4 = load i32, i32* %save_mode, align 4, !dbg !8381
  %5 = load %struct.rtx_def*, %struct.rtx_def** %argblock.addr, align 8, !dbg !8381
  %6 = load i32, i32* %delta, align 4, !dbg !8381
  %conv = sext i32 %6 to i64, !dbg !8381
  %call = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %5, i64 %conv), !dbg !8381
  %call1 = call %struct.rtx_def* @memory_address_addr_space(i32 %4, %struct.rtx_def* %call, i8 zeroext 0), !dbg !8381
  %call2 = call %struct.rtx_def* @gen_rtx_MEM(i32 %3, %struct.rtx_def* %call1), !dbg !8382
  store %struct.rtx_def* %call2, %struct.rtx_def** %stack_area, align 8, !dbg !8383
  %7 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !8384
  call void @set_mem_align(%struct.rtx_def* %7, i32 32), !dbg !8385
  %8 = load i32, i32* %save_mode, align 4, !dbg !8386
  %cmp = icmp ne i32 %8, 1, !dbg !8388
  br i1 %cmp, label %if.then, label %if.else, !dbg !8389

if.then:                                          ; preds = %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !8390
  %10 = load %struct.rtx_def*, %struct.rtx_def** %save_area.addr, align 8, !dbg !8391
  %call4 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %9, %struct.rtx_def* %10), !dbg !8392
  br label %if.end, !dbg !8392

if.else:                                          ; preds = %entry
  %11 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !8393
  %12 = load %struct.rtx_def*, %struct.rtx_def** %save_area.addr, align 8, !dbg !8394
  %call5 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %12), !dbg !8395
  %13 = load i32, i32* %high_to_save.addr, align 4, !dbg !8396
  %14 = load i32, i32* %low_to_save.addr, align 4, !dbg !8396
  %sub = sub nsw i32 %13, %14, !dbg !8396
  %add = add nsw i32 %sub, 1, !dbg !8396
  %conv6 = sext i32 %add to i64, !dbg !8396
  %call7 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %conv6), !dbg !8396
  %call8 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %11, %struct.rtx_def* %call5, %struct.rtx_def* %call7, i32 2), !dbg !8397
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void, !dbg !8398
}

declare dso_local %struct.rtx_def* @emit_block_move(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32) #2

declare dso_local void @update_nonlocal_goto_save_area() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @fixup_tail_calls() #0 !dbg !8399 {
entry:
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8402, metadata !DIExpression()), !dbg !8403
  %call = call %struct.rtx_def* @get_insns(), !dbg !8404
  store %struct.rtx_def* %call, %struct.rtx_def** %insn, align 8, !dbg !8406
  br label %for.cond, !dbg !8407

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8408
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !8410
  br i1 %tobool, label %for.body, label %for.end, !dbg !8410

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !8411, metadata !DIExpression()), !dbg !8413
  %1 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8414
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !8414
  %bf.load = load i32, i32* %2, align 8, !dbg !8414
  %bf.clear = and i32 %bf.load, 65535, !dbg !8414
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !8414
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8416

land.lhs.true:                                    ; preds = %for.body
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8417
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !8417
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8417
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !8417
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8417
  %4 = load i32, i32* %rt_int, align 8, !dbg !8417
  %cmp1 = icmp eq i32 %4, 4, !dbg !8418
  br i1 %cmp1, label %if.then, label %if.end, !dbg !8419

if.then:                                          ; preds = %land.lhs.true
  br label %for.end, !dbg !8420

if.end:                                           ; preds = %land.lhs.true, %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8421
  %call2 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %5, i32 3, %struct.rtx_def* null), !dbg !8422
  store %struct.rtx_def* %call2, %struct.rtx_def** %note, align 8, !dbg !8423
  %6 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8424
  %tobool3 = icmp ne %struct.rtx_def* %6, null, !dbg !8424
  br i1 %tobool3, label %if.then4, label %if.end5, !dbg !8426

if.then4:                                         ; preds = %if.end
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8427
  %8 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8428
  call void @remove_note(%struct.rtx_def* %7, %struct.rtx_def* %8), !dbg !8429
  br label %if.end5, !dbg !8429

if.end5:                                          ; preds = %if.then4, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8430
  %call6 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 3, %struct.rtx_def* null), !dbg !8431
  store %struct.rtx_def* %call6, %struct.rtx_def** %note, align 8, !dbg !8432
  %10 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !8433
  %tobool7 = icmp ne %struct.rtx_def* %10, null, !dbg !8433
  br i1 %tobool7, label %cond.true, label %cond.false, !dbg !8433

cond.true:                                        ; preds = %if.end5
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3207, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8433
  br label %cond.end, !dbg !8433

cond.false:                                       ; preds = %if.end5
  br label %cond.end, !dbg !8433

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8433
  br label %for.inc, !dbg !8434

for.inc:                                          ; preds = %cond.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8435
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8435
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8435
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 2, !dbg !8435
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8435
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8435
  store %struct.rtx_def* %12, %struct.rtx_def** %insn, align 8, !dbg !8436
  br label %for.cond, !dbg !8437, !llvm.loop !8438

for.end:                                          ; preds = %if.then, %for.cond
  ret void, !dbg !8440
}

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @emit_library_call(%struct.rtx_def* %orgfun, i32 %fn_type, i32 %outmode, i32 %nargs, ...) #0 !dbg !8441 {
entry:
  %orgfun.addr = alloca %struct.rtx_def*, align 8
  %fn_type.addr = alloca i32, align 4
  %outmode.addr = alloca i32, align 4
  %nargs.addr = alloca i32, align 4
  %p = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.rtx_def* %orgfun, %struct.rtx_def** %orgfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orgfun.addr, metadata !8444, metadata !DIExpression()), !dbg !8445
  store i32 %fn_type, i32* %fn_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fn_type.addr, metadata !8446, metadata !DIExpression()), !dbg !8447
  store i32 %outmode, i32* %outmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outmode.addr, metadata !8448, metadata !DIExpression()), !dbg !8449
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !8450, metadata !DIExpression()), !dbg !8451
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %p, metadata !8452, metadata !DIExpression()), !dbg !8459
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !8460
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !8460
  call void @llvm.va_start(i8* %arraydecay1), !dbg !8460
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orgfun.addr, align 8, !dbg !8461
  %1 = load i32, i32* %fn_type.addr, align 4, !dbg !8462
  %2 = load i32, i32* %outmode.addr, align 4, !dbg !8463
  %3 = load i32, i32* %nargs.addr, align 4, !dbg !8464
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !8465
  %call = call %struct.rtx_def* @emit_library_call_value_1(i32 0, %struct.rtx_def* %0, %struct.rtx_def* null, i32 %1, i32 %2, i32 %3, %struct.__va_list_tag* %arraydecay2), !dbg !8466
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !8467
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !8467
  call void @llvm.va_end(i8* %arraydecay34), !dbg !8467
  ret void, !dbg !8468
}

; Function Attrs: nounwind
declare void @llvm.va_start(i8*) #4

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @emit_library_call_value_1(i32 %retval1, %struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, %struct.__va_list_tag* %p) #0 !dbg !3489 {
entry:
  %retval.addr = alloca i32, align 4
  %orgfun.addr = alloca %struct.rtx_def*, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %fn_type.addr = alloca i32, align 4
  %outmode.addr = alloca i32, align 4
  %nargs.addr = alloca i32, align 4
  %p.addr = alloca %struct.__va_list_tag*, align 8
  %args_size = alloca %struct.args_size, align 8
  %original_args_size = alloca %struct.args_size, align 8
  %argnum = alloca i32, align 4
  %fun = alloca %struct.rtx_def*, align 8
  %fndecl = alloca %union.tree_node*, align 8
  %fntype = alloca %union.tree_node*, align 8
  %inc = alloca i32, align 4
  %count = alloca i32, align 4
  %argblock = alloca %struct.rtx_def*, align 8
  %args_so_far = alloca %struct.ix86_args, align 4
  %argvec = alloca %struct.arg*, align 8
  %old_inhibit_defer_pop = alloca i32, align 4
  %call_fusage = alloca %struct.rtx_def*, align 8
  %mem_value = alloca %struct.rtx_def*, align 8
  %valreg = alloca %struct.rtx_def*, align 8
  %pcc_struct_value = alloca i32, align 4
  %struct_value_size = alloca i32, align 4
  %flags = alloca i32, align 4
  %reg_parm_stack_space = alloca i32, align 4
  %needed = alloca i32, align 4
  %before_call = alloca %struct.rtx_def*, align 8
  %tfom = alloca %union.tree_node*, align 8
  %low_to_save = alloca i32, align 4
  %high_to_save = alloca i32, align 4
  %save_area = alloca %struct.rtx_def*, align 8
  %initial_highest_arg_in_use = alloca i32, align 4
  %initial_stack_usage_map = alloca i8*, align 8
  %stack_usage_map_buf = alloca i8*, align 8
  %struct_value = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  %val = alloca %struct.rtx_def*, align 8
  %mode107 = alloca i32, align 4
  %slot = alloca %struct.rtx_def*, align 8
  %must_copy = alloca i32, align 4
  %mode390 = alloca i32, align 4
  %val394 = alloca %struct.rtx_def*, align 8
  %reg398 = alloca %struct.rtx_def*, align 8
  %partial402 = alloca i32, align 4
  %parm_align = alloca i32, align 4
  %lower_bound = alloca i32, align 4
  %upper_bound = alloca i32, align 4
  %i = alloca i32, align 4
  %size451 = alloca i32, align 4
  %save_mode = alloca i32, align 4
  %adr = alloca %struct.rtx_def*, align 8
  %stack_area = alloca %struct.rtx_def*, align 8
  %use = alloca %struct.rtx_def*, align 8
  %mode627 = alloca i32, align 4
  %val631 = alloca %struct.rtx_def*, align 8
  %reg635 = alloca %struct.rtx_def*, align 8
  %partial639 = alloca i32, align 4
  %reg674 = alloca %struct.rtx_def*, align 8
  %partial690 = alloca i32, align 4
  %nregs = alloca i32, align 4
  %last = alloca %struct.rtx_def*, align 8
  %unsignedp = alloca i32, align 4
  %save_mode881 = alloca i32, align 4
  %adr888 = alloca %struct.rtx_def*, align 8
  %stack_area895 = alloca %struct.rtx_def*, align 8
  store i32 %retval1, i32* %retval.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %retval.addr, metadata !8469, metadata !DIExpression()), !dbg !8470
  store %struct.rtx_def* %orgfun, %struct.rtx_def** %orgfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orgfun.addr, metadata !8471, metadata !DIExpression()), !dbg !8472
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !8473, metadata !DIExpression()), !dbg !8474
  store i32 %fn_type, i32* %fn_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fn_type.addr, metadata !8475, metadata !DIExpression()), !dbg !8476
  store i32 %outmode, i32* %outmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outmode.addr, metadata !8477, metadata !DIExpression()), !dbg !8478
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !8479, metadata !DIExpression()), !dbg !8480
  store %struct.__va_list_tag* %p, %struct.__va_list_tag** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.__va_list_tag** %p.addr, metadata !8481, metadata !DIExpression()), !dbg !8482
  call void @llvm.dbg.declare(metadata %struct.args_size* %args_size, metadata !8483, metadata !DIExpression()), !dbg !8484
  call void @llvm.dbg.declare(metadata %struct.args_size* %original_args_size, metadata !8485, metadata !DIExpression()), !dbg !8486
  call void @llvm.dbg.declare(metadata i32* %argnum, metadata !8487, metadata !DIExpression()), !dbg !8488
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %fun, metadata !8489, metadata !DIExpression()), !dbg !8490
  call void @llvm.dbg.declare(metadata %union.tree_node** %fndecl, metadata !8491, metadata !DIExpression()), !dbg !8492
  store %union.tree_node* null, %union.tree_node** %fndecl, align 8, !dbg !8492
  call void @llvm.dbg.declare(metadata %union.tree_node** %fntype, metadata !8493, metadata !DIExpression()), !dbg !8494
  store %union.tree_node* null, %union.tree_node** %fntype, align 8, !dbg !8494
  call void @llvm.dbg.declare(metadata i32* %inc, metadata !8495, metadata !DIExpression()), !dbg !8496
  call void @llvm.dbg.declare(metadata i32* %count, metadata !8497, metadata !DIExpression()), !dbg !8498
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %argblock, metadata !8499, metadata !DIExpression()), !dbg !8500
  store %struct.rtx_def* null, %struct.rtx_def** %argblock, align 8, !dbg !8500
  call void @llvm.dbg.declare(metadata %struct.ix86_args* %args_so_far, metadata !8501, metadata !DIExpression()), !dbg !8502
  call void @llvm.dbg.declare(metadata %struct.arg** %argvec, metadata !8503, metadata !DIExpression()), !dbg !8504
  call void @llvm.dbg.declare(metadata i32* %old_inhibit_defer_pop, metadata !8505, metadata !DIExpression()), !dbg !8506
  %0 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !8507
  store i32 %0, i32* %old_inhibit_defer_pop, align 4, !dbg !8506
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %call_fusage, metadata !8508, metadata !DIExpression()), !dbg !8509
  store %struct.rtx_def* null, %struct.rtx_def** %call_fusage, align 8, !dbg !8509
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem_value, metadata !8510, metadata !DIExpression()), !dbg !8511
  store %struct.rtx_def* null, %struct.rtx_def** %mem_value, align 8, !dbg !8511
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %valreg, metadata !8512, metadata !DIExpression()), !dbg !8513
  call void @llvm.dbg.declare(metadata i32* %pcc_struct_value, metadata !8514, metadata !DIExpression()), !dbg !8515
  store i32 0, i32* %pcc_struct_value, align 4, !dbg !8515
  call void @llvm.dbg.declare(metadata i32* %struct_value_size, metadata !8516, metadata !DIExpression()), !dbg !8517
  store i32 0, i32* %struct_value_size, align 4, !dbg !8517
  call void @llvm.dbg.declare(metadata i32* %flags, metadata !8518, metadata !DIExpression()), !dbg !8519
  call void @llvm.dbg.declare(metadata i32* %reg_parm_stack_space, metadata !8520, metadata !DIExpression()), !dbg !8521
  store i32 0, i32* %reg_parm_stack_space, align 4, !dbg !8521
  call void @llvm.dbg.declare(metadata i32* %needed, metadata !8522, metadata !DIExpression()), !dbg !8523
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %before_call, metadata !8524, metadata !DIExpression()), !dbg !8525
  call void @llvm.dbg.declare(metadata %union.tree_node** %tfom, metadata !8526, metadata !DIExpression()), !dbg !8527
  call void @llvm.dbg.declare(metadata i32* %low_to_save, metadata !8528, metadata !DIExpression()), !dbg !8529
  store i32 0, i32* %low_to_save, align 4, !dbg !8529
  call void @llvm.dbg.declare(metadata i32* %high_to_save, metadata !8530, metadata !DIExpression()), !dbg !8531
  store i32 0, i32* %high_to_save, align 4, !dbg !8531
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %save_area, metadata !8532, metadata !DIExpression()), !dbg !8533
  store %struct.rtx_def* null, %struct.rtx_def** %save_area, align 8, !dbg !8533
  call void @llvm.dbg.declare(metadata i32* %initial_highest_arg_in_use, metadata !8534, metadata !DIExpression()), !dbg !8535
  %1 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !8536
  store i32 %1, i32* %initial_highest_arg_in_use, align 4, !dbg !8535
  call void @llvm.dbg.declare(metadata i8** %initial_stack_usage_map, metadata !8537, metadata !DIExpression()), !dbg !8538
  %2 = load i8*, i8** @stack_usage_map, align 8, !dbg !8539
  store i8* %2, i8** %initial_stack_usage_map, align 8, !dbg !8538
  call void @llvm.dbg.declare(metadata i8** %stack_usage_map_buf, metadata !8540, metadata !DIExpression()), !dbg !8541
  store i8* null, i8** %stack_usage_map_buf, align 8, !dbg !8541
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %struct_value, metadata !8542, metadata !DIExpression()), !dbg !8543
  %3 = load %struct.rtx_def* (%union.tree_node*, i32)*, %struct.rtx_def* (%union.tree_node*, i32)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 2), align 8, !dbg !8544
  %call = call %struct.rtx_def* %3(%union.tree_node* null, i32 0), !dbg !8545
  store %struct.rtx_def* %call, %struct.rtx_def** %struct_value, align 8, !dbg !8543
  %call2 = call i32 @ix86_reg_parm_stack_space(%union.tree_node* null), !dbg !8546
  store i32 %call2, i32* %reg_parm_stack_space, align 4, !dbg !8547
  store i32 64, i32* %flags, align 4, !dbg !8548
  %4 = load i32, i32* %fn_type.addr, align 4, !dbg !8549
  switch i32 %4, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb3
    i32 2, label %sw.bb4
    i32 3, label %sw.bb6
    i32 4, label %sw.bb8
    i32 5, label %sw.bb9
  ], !dbg !8550

sw.bb:                                            ; preds = %entry
  br label %sw.epilog, !dbg !8551

sw.bb3:                                           ; preds = %entry
  %5 = load i32, i32* %flags, align 4, !dbg !8553
  %or = or i32 %5, 1, !dbg !8553
  store i32 %or, i32* %flags, align 4, !dbg !8553
  br label %sw.epilog, !dbg !8554

sw.bb4:                                           ; preds = %entry
  %6 = load i32, i32* %flags, align 4, !dbg !8555
  %or5 = or i32 %6, 2, !dbg !8555
  store i32 %or5, i32* %flags, align 4, !dbg !8555
  br label %sw.epilog, !dbg !8556

sw.bb6:                                           ; preds = %entry
  %7 = load i32, i32* %flags, align 4, !dbg !8557
  %or7 = or i32 %7, 8, !dbg !8557
  store i32 %or7, i32* %flags, align 4, !dbg !8557
  br label %sw.epilog, !dbg !8558

sw.bb8:                                           ; preds = %entry
  store i32 8, i32* %flags, align 4, !dbg !8559
  br label %sw.epilog, !dbg !8560

sw.bb9:                                           ; preds = %entry
  store i32 128, i32* %flags, align 4, !dbg !8561
  br label %sw.epilog, !dbg !8562

sw.epilog:                                        ; preds = %entry, %sw.bb9, %sw.bb8, %sw.bb6, %sw.bb4, %sw.bb3, %sw.bb
  %8 = load %struct.rtx_def*, %struct.rtx_def** %orgfun.addr, align 8, !dbg !8563
  store %struct.rtx_def* %8, %struct.rtx_def** %fun, align 8, !dbg !8564
  %9 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !8565
  %10 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !8567
  %cmp = icmp ult i32 %9, %10, !dbg !8568
  br i1 %cmp, label %if.then, label %if.end, !dbg !8569

if.then:                                          ; preds = %sw.epilog
  %11 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !8570
  store i32 %11, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 23), align 8, !dbg !8571
  br label %if.end, !dbg !8572

if.end:                                           ; preds = %if.then, %sw.epilog
  %12 = load i32, i32* %outmode.addr, align 4, !dbg !8573
  %cmp10 = icmp ne i32 %12, 0, !dbg !8575
  br i1 %cmp10, label %if.then11, label %if.else24, !dbg !8576

if.then11:                                        ; preds = %if.end
  %13 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !8577
  %14 = load i32, i32* %outmode.addr, align 4, !dbg !8579
  %call12 = call %union.tree_node* %13(i32 %14, i32 0), !dbg !8580
  store %union.tree_node* %call12, %union.tree_node** %tfom, align 8, !dbg !8581
  %15 = load %union.tree_node*, %union.tree_node** %tfom, align 8, !dbg !8582
  %call13 = call i32 @aggregate_value_p(%union.tree_node* %15, %union.tree_node* null), !dbg !8584
  %tobool = icmp ne i32 %call13, 0, !dbg !8584
  br i1 %tobool, label %if.then14, label %if.end23, !dbg !8585

if.then14:                                        ; preds = %if.then11
  %16 = load i32, i32* %outmode.addr, align 4, !dbg !8586
  %idxprom = zext i32 %16 to i64, !dbg !8586
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !8586
  %17 = load i8, i8* %arrayidx, align 1, !dbg !8586
  %conv = zext i8 %17 to i16, !dbg !8586
  %conv15 = zext i16 %conv to i32, !dbg !8586
  store i32 %conv15, i32* %struct_value_size, align 4, !dbg !8588
  %18 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !8589
  %cmp16 = icmp ne %struct.rtx_def* %18, null, !dbg !8591
  br i1 %cmp16, label %land.lhs.true, label %if.else, !dbg !8592

land.lhs.true:                                    ; preds = %if.then14
  %19 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !8593
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !8593
  %bf.load = load i32, i32* %20, align 8, !dbg !8593
  %bf.clear = and i32 %bf.load, 65535, !dbg !8593
  %cmp18 = icmp eq i32 %bf.clear, 43, !dbg !8593
  br i1 %cmp18, label %if.then20, label %if.else, !dbg !8594

if.then20:                                        ; preds = %land.lhs.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !8595
  store %struct.rtx_def* %21, %struct.rtx_def** %mem_value, align 8, !dbg !8596
  br label %if.end22, !dbg !8597

if.else:                                          ; preds = %land.lhs.true, %if.then14
  %22 = load %union.tree_node*, %union.tree_node** %tfom, align 8, !dbg !8598
  %call21 = call %struct.rtx_def* @assign_temp(%union.tree_node* %22, i32 0, i32 1, i32 1), !dbg !8599
  store %struct.rtx_def* %call21, %struct.rtx_def** %mem_value, align 8, !dbg !8600
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then20
  %23 = load i32, i32* %flags, align 4, !dbg !8601
  %and = and i32 %23, -8, !dbg !8601
  store i32 %and, i32* %flags, align 4, !dbg !8601
  br label %if.end23, !dbg !8602

if.end23:                                         ; preds = %if.end22, %if.then11
  br label %if.end25, !dbg !8603

if.else24:                                        ; preds = %if.end
  %24 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !8604
  store %union.tree_node* %24, %union.tree_node** %tfom, align 8, !dbg !8605
  br label %if.end25

if.end25:                                         ; preds = %if.else24, %if.end23
  %25 = load i32, i32* %nargs.addr, align 4, !dbg !8606
  %add = add nsw i32 %25, 1, !dbg !8606
  %conv26 = sext i32 %add to i64, !dbg !8606
  %mul = mul i64 112, %conv26, !dbg !8606
  %26 = alloca i8, i64 %mul, align 16, !dbg !8606
  %27 = bitcast i8* %26 to %struct.arg*, !dbg !8606
  store %struct.arg* %27, %struct.arg** %argvec, align 8, !dbg !8607
  %28 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8608
  %29 = bitcast %struct.arg* %28 to i8*, !dbg !8609
  %30 = load i32, i32* %nargs.addr, align 4, !dbg !8610
  %add27 = add nsw i32 %30, 1, !dbg !8611
  %conv28 = sext i32 %add27 to i64, !dbg !8612
  %mul29 = mul i64 %conv28, 112, !dbg !8613
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 %mul29, i1 false), !dbg !8609
  %31 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8, !dbg !8614
  call void @init_cumulative_args(%struct.ix86_args* %args_so_far, %union.tree_node* null, %struct.rtx_def* %31, %union.tree_node* null), !dbg !8614
  %constant = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8615
  store i64 0, i64* %constant, align 8, !dbg !8616
  %var = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 1, !dbg !8617
  store %union.tree_node* null, %union.tree_node** %var, align 8, !dbg !8618
  store i32 0, i32* %count, align 4, !dbg !8619
  call void @push_temp_slots(), !dbg !8620
  %32 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !8621
  %tobool30 = icmp ne %struct.rtx_def* %32, null, !dbg !8621
  br i1 %tobool30, label %land.lhs.true31, label %if.end104, !dbg !8623

land.lhs.true31:                                  ; preds = %if.end25
  %33 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !8624
  %cmp32 = icmp eq %struct.rtx_def* %33, null, !dbg !8625
  br i1 %cmp32, label %land.lhs.true34, label %if.end104, !dbg !8626

land.lhs.true34:                                  ; preds = %land.lhs.true31
  %34 = load i32, i32* %pcc_struct_value, align 4, !dbg !8627
  %tobool35 = icmp ne i32 %34, 0, !dbg !8627
  br i1 %tobool35, label %if.end104, label %if.then36, !dbg !8628

if.then36:                                        ; preds = %land.lhs.true34
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !8629, metadata !DIExpression()), !dbg !8631
  %35 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !8632
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !8632
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8632
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8632
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx37 to %struct.rtx_def**, !dbg !8632
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8632
  store %struct.rtx_def* %36, %struct.rtx_def** %addr, align 8, !dbg !8631
  %37 = load i32, i32* %nargs.addr, align 4, !dbg !8633
  %inc38 = add nsw i32 %37, 1, !dbg !8633
  store i32 %inc38, i32* %nargs.addr, align 4, !dbg !8633
  %38 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8634
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !8634
  %bf.load39 = load i32, i32* %39, align 8, !dbg !8634
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !8634
  %cmp41 = icmp eq i32 %bf.clear40, 37, !dbg !8634
  br i1 %cmp41, label %if.end61, label %land.lhs.true43, !dbg !8636

land.lhs.true43:                                  ; preds = %if.then36
  %40 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8637
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !8637
  %bf.load44 = load i32, i32* %41, align 8, !dbg !8637
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !8637
  %cmp46 = icmp eq i32 %bf.clear45, 43, !dbg !8637
  br i1 %cmp46, label %if.end61, label %land.lhs.true48, !dbg !8638

land.lhs.true48:                                  ; preds = %land.lhs.true43
  %42 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8639
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !8639
  %bf.load49 = load i32, i32* %43, align 8, !dbg !8639
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !8639
  %idxprom51 = sext i32 %bf.clear50 to i64, !dbg !8639
  %arrayidx52 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom51, !dbg !8639
  %44 = load i32, i32* %arrayidx52, align 4, !dbg !8639
  %cmp53 = icmp eq i32 %44, 9, !dbg !8639
  br i1 %cmp53, label %land.lhs.true55, label %if.then59, !dbg !8640

land.lhs.true55:                                  ; preds = %land.lhs.true48
  %45 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8641
  %call56 = call zeroext i8 @legitimate_constant_p(%struct.rtx_def* %45), !dbg !8641
  %conv57 = zext i8 %call56 to i32, !dbg !8641
  %tobool58 = icmp ne i32 %conv57, 0, !dbg !8641
  br i1 %tobool58, label %if.end61, label %if.then59, !dbg !8642

if.then59:                                        ; preds = %land.lhs.true55, %land.lhs.true48
  %46 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8643
  %call60 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %46, %struct.rtx_def* null), !dbg !8644
  store %struct.rtx_def* %call60, %struct.rtx_def** %addr, align 8, !dbg !8645
  br label %if.end61, !dbg !8646

if.end61:                                         ; preds = %if.then59, %land.lhs.true55, %land.lhs.true43, %if.then36
  %47 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !8647
  %48 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8648
  %49 = load i32, i32* %count, align 4, !dbg !8649
  %idxprom62 = sext i32 %49 to i64, !dbg !8648
  %arrayidx63 = getelementptr inbounds %struct.arg, %struct.arg* %48, i64 %idxprom62, !dbg !8648
  %value64 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx63, i32 0, i32 0, !dbg !8650
  store %struct.rtx_def* %47, %struct.rtx_def** %value64, align 8, !dbg !8651
  %50 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8652
  %51 = load i32, i32* %count, align 4, !dbg !8653
  %idxprom65 = sext i32 %51 to i64, !dbg !8652
  %arrayidx66 = getelementptr inbounds %struct.arg, %struct.arg* %50, i64 %idxprom65, !dbg !8652
  %mode = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx66, i32 0, i32 1, !dbg !8654
  store i32 16, i32* %mode, align 8, !dbg !8655
  %52 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8656
  %53 = load i32, i32* %count, align 4, !dbg !8657
  %idxprom67 = sext i32 %53 to i64, !dbg !8656
  %arrayidx68 = getelementptr inbounds %struct.arg, %struct.arg* %52, i64 %idxprom67, !dbg !8656
  %partial = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx68, i32 0, i32 3, !dbg !8658
  store i32 0, i32* %partial, align 8, !dbg !8659
  %call69 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 16, %union.tree_node* null, i32 1), !dbg !8660
  %54 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8661
  %55 = load i32, i32* %count, align 4, !dbg !8662
  %idxprom70 = sext i32 %55 to i64, !dbg !8661
  %arrayidx71 = getelementptr inbounds %struct.arg, %struct.arg* %54, i64 %idxprom70, !dbg !8661
  %reg = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx71, i32 0, i32 2, !dbg !8663
  store %struct.rtx_def* %call69, %struct.rtx_def** %reg, align 8, !dbg !8664
  %56 = load i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 13), align 8, !dbg !8665
  %call72 = call i32 %56(%struct.ix86_args* %args_so_far, i32 16, %union.tree_node* null, i8 zeroext 1), !dbg !8665
  %cmp73 = icmp eq i32 %call72, 0, !dbg !8665
  br i1 %cmp73, label %cond.false, label %cond.true, !dbg !8665

cond.true:                                        ; preds = %if.end61
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3422, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8665
  br label %cond.end, !dbg !8665

cond.false:                                       ; preds = %if.end61
  br label %cond.end, !dbg !8665

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !8665
  %57 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8666
  %58 = load i32, i32* %count, align 4, !dbg !8667
  %idxprom75 = sext i32 %58 to i64, !dbg !8666
  %arrayidx76 = getelementptr inbounds %struct.arg, %struct.arg* %57, i64 %idxprom75, !dbg !8666
  %reg77 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx76, i32 0, i32 2, !dbg !8668
  %59 = load %struct.rtx_def*, %struct.rtx_def** %reg77, align 8, !dbg !8668
  %cmp78 = icmp ne %struct.rtx_def* %59, null, !dbg !8669
  %conv79 = zext i1 %cmp78 to i32, !dbg !8669
  %60 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8670
  %61 = load i32, i32* %count, align 4, !dbg !8671
  %idxprom80 = sext i32 %61 to i64, !dbg !8670
  %arrayidx81 = getelementptr inbounds %struct.arg, %struct.arg* %60, i64 %idxprom80, !dbg !8670
  %locate = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx81, i32 0, i32 4, !dbg !8672
  call void @locate_and_pad_parm(i32 16, %union.tree_node* null, i32 %conv79, i32 0, %union.tree_node* null, %struct.args_size* %args_size, %struct.locate_and_pad_arg_data* %locate), !dbg !8673
  %62 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8674
  %63 = load i32, i32* %count, align 4, !dbg !8676
  %idxprom82 = sext i32 %63 to i64, !dbg !8674
  %arrayidx83 = getelementptr inbounds %struct.arg, %struct.arg* %62, i64 %idxprom82, !dbg !8674
  %reg84 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx83, i32 0, i32 2, !dbg !8677
  %64 = load %struct.rtx_def*, %struct.rtx_def** %reg84, align 8, !dbg !8677
  %cmp85 = icmp eq %struct.rtx_def* %64, null, !dbg !8678
  br i1 %cmp85, label %if.then95, label %lor.lhs.false, !dbg !8679

lor.lhs.false:                                    ; preds = %cond.end
  %65 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8680
  %66 = load i32, i32* %count, align 4, !dbg !8681
  %idxprom87 = sext i32 %66 to i64, !dbg !8680
  %arrayidx88 = getelementptr inbounds %struct.arg, %struct.arg* %65, i64 %idxprom87, !dbg !8680
  %partial89 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx88, i32 0, i32 3, !dbg !8682
  %67 = load i32, i32* %partial89, align 8, !dbg !8682
  %cmp90 = icmp ne i32 %67, 0, !dbg !8683
  br i1 %cmp90, label %if.then95, label %lor.lhs.false92, !dbg !8684

lor.lhs.false92:                                  ; preds = %lor.lhs.false
  %68 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8685
  %cmp93 = icmp sgt i32 %68, 0, !dbg !8686
  br i1 %cmp93, label %if.then95, label %if.end102, !dbg !8687

if.then95:                                        ; preds = %lor.lhs.false92, %lor.lhs.false, %cond.end
  %69 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8688
  %70 = load i32, i32* %count, align 4, !dbg !8689
  %idxprom96 = sext i32 %70 to i64, !dbg !8688
  %arrayidx97 = getelementptr inbounds %struct.arg, %struct.arg* %69, i64 %idxprom96, !dbg !8688
  %locate98 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx97, i32 0, i32 4, !dbg !8690
  %size = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate98, i32 0, i32 0, !dbg !8691
  %constant99 = getelementptr inbounds %struct.args_size, %struct.args_size* %size, i32 0, i32 0, !dbg !8692
  %71 = load i64, i64* %constant99, align 8, !dbg !8692
  %constant100 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8693
  %72 = load i64, i64* %constant100, align 8, !dbg !8694
  %add101 = add nsw i64 %72, %71, !dbg !8694
  store i64 %add101, i64* %constant100, align 8, !dbg !8694
  br label %if.end102, !dbg !8695

if.end102:                                        ; preds = %if.then95, %lor.lhs.false92
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 16, %union.tree_node* null, i32 1), !dbg !8696
  %73 = load i32, i32* %count, align 4, !dbg !8697
  %inc103 = add nsw i32 %73, 1, !dbg !8697
  store i32 %inc103, i32* %count, align 4, !dbg !8697
  br label %if.end104, !dbg !8698

if.end104:                                        ; preds = %if.end102, %land.lhs.true34, %land.lhs.true31, %if.end25
  br label %for.cond, !dbg !8699

for.cond:                                         ; preds = %for.inc, %if.end104
  %74 = load i32, i32* %count, align 4, !dbg !8700
  %75 = load i32, i32* %nargs.addr, align 4, !dbg !8703
  %cmp105 = icmp slt i32 %74, %75, !dbg !8704
  br i1 %cmp105, label %for.body, label %for.end, !dbg !8705

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val, metadata !8706, metadata !DIExpression()), !dbg !8708
  %76 = load %struct.__va_list_tag*, %struct.__va_list_tag** %p.addr, align 8, !dbg !8709
  %gp_offset_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %76, i32 0, i32 0, !dbg !8709
  %gp_offset = load i32, i32* %gp_offset_p, align 8, !dbg !8709
  %fits_in_gp = icmp ule i32 %gp_offset, 40, !dbg !8709
  br i1 %fits_in_gp, label %vaarg.in_reg, label %vaarg.in_mem, !dbg !8709

vaarg.in_reg:                                     ; preds = %for.body
  %77 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %76, i32 0, i32 3, !dbg !8709
  %reg_save_area = load i8*, i8** %77, align 8, !dbg !8709
  %78 = getelementptr i8, i8* %reg_save_area, i32 %gp_offset, !dbg !8709
  %79 = bitcast i8* %78 to %struct.rtx_def**, !dbg !8709
  %80 = add i32 %gp_offset, 8, !dbg !8709
  store i32 %80, i32* %gp_offset_p, align 8, !dbg !8709
  br label %vaarg.end, !dbg !8709

vaarg.in_mem:                                     ; preds = %for.body
  %overflow_arg_area_p = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %76, i32 0, i32 2, !dbg !8709
  %overflow_arg_area = load i8*, i8** %overflow_arg_area_p, align 8, !dbg !8709
  %81 = bitcast i8* %overflow_arg_area to %struct.rtx_def**, !dbg !8709
  %overflow_arg_area.next = getelementptr i8, i8* %overflow_arg_area, i32 8, !dbg !8709
  store i8* %overflow_arg_area.next, i8** %overflow_arg_area_p, align 8, !dbg !8709
  br label %vaarg.end, !dbg !8709

vaarg.end:                                        ; preds = %vaarg.in_mem, %vaarg.in_reg
  %vaarg.addr = phi %struct.rtx_def** [ %79, %vaarg.in_reg ], [ %81, %vaarg.in_mem ], !dbg !8709
  %82 = load %struct.rtx_def*, %struct.rtx_def** %vaarg.addr, align 8, !dbg !8709
  store %struct.rtx_def* %82, %struct.rtx_def** %val, align 8, !dbg !8708
  call void @llvm.dbg.declare(metadata i32* %mode107, metadata !8710, metadata !DIExpression()), !dbg !8711
  %83 = load %struct.__va_list_tag*, %struct.__va_list_tag** %p.addr, align 8, !dbg !8712
  %gp_offset_p108 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %83, i32 0, i32 0, !dbg !8712
  %gp_offset109 = load i32, i32* %gp_offset_p108, align 8, !dbg !8712
  %fits_in_gp110 = icmp ule i32 %gp_offset109, 40, !dbg !8712
  br i1 %fits_in_gp110, label %vaarg.in_reg111, label %vaarg.in_mem113, !dbg !8712

vaarg.in_reg111:                                  ; preds = %vaarg.end
  %84 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %83, i32 0, i32 3, !dbg !8712
  %reg_save_area112 = load i8*, i8** %84, align 8, !dbg !8712
  %85 = getelementptr i8, i8* %reg_save_area112, i32 %gp_offset109, !dbg !8712
  %86 = bitcast i8* %85 to i32*, !dbg !8712
  %87 = add i32 %gp_offset109, 8, !dbg !8712
  store i32 %87, i32* %gp_offset_p108, align 8, !dbg !8712
  br label %vaarg.end117, !dbg !8712

vaarg.in_mem113:                                  ; preds = %vaarg.end
  %overflow_arg_area_p114 = getelementptr inbounds %struct.__va_list_tag, %struct.__va_list_tag* %83, i32 0, i32 2, !dbg !8712
  %overflow_arg_area115 = load i8*, i8** %overflow_arg_area_p114, align 8, !dbg !8712
  %88 = bitcast i8* %overflow_arg_area115 to i32*, !dbg !8712
  %overflow_arg_area.next116 = getelementptr i8, i8* %overflow_arg_area115, i32 8, !dbg !8712
  store i8* %overflow_arg_area.next116, i8** %overflow_arg_area_p114, align 8, !dbg !8712
  br label %vaarg.end117, !dbg !8712

vaarg.end117:                                     ; preds = %vaarg.in_mem113, %vaarg.in_reg111
  %vaarg.addr118 = phi i32* [ %86, %vaarg.in_reg111 ], [ %88, %vaarg.in_mem113 ], !dbg !8712
  %89 = load i32, i32* %vaarg.addr118, align 4, !dbg !8712
  store i32 %89, i32* %mode107, align 4, !dbg !8711
  %90 = load i32, i32* %mode107, align 4, !dbg !8713
  %cmp119 = icmp ne i32 %90, 1, !dbg !8713
  br i1 %cmp119, label %land.lhs.true121, label %cond.true132, !dbg !8713

land.lhs.true121:                                 ; preds = %vaarg.end117
  %91 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8713
  %92 = bitcast %struct.rtx_def* %91 to i32*, !dbg !8713
  %bf.load122 = load i32, i32* %92, align 8, !dbg !8713
  %bf.lshr = lshr i32 %bf.load122, 16, !dbg !8713
  %bf.clear123 = and i32 %bf.lshr, 255, !dbg !8713
  %93 = load i32, i32* %mode107, align 4, !dbg !8713
  %cmp124 = icmp eq i32 %bf.clear123, %93, !dbg !8713
  br i1 %cmp124, label %cond.false133, label %lor.lhs.false126, !dbg !8713

lor.lhs.false126:                                 ; preds = %land.lhs.true121
  %94 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8713
  %95 = bitcast %struct.rtx_def* %94 to i32*, !dbg !8713
  %bf.load127 = load i32, i32* %95, align 8, !dbg !8713
  %bf.lshr128 = lshr i32 %bf.load127, 16, !dbg !8713
  %bf.clear129 = and i32 %bf.lshr128, 255, !dbg !8713
  %cmp130 = icmp eq i32 %bf.clear129, 0, !dbg !8713
  br i1 %cmp130, label %cond.false133, label %cond.true132, !dbg !8713

cond.true132:                                     ; preds = %lor.lhs.false126, %vaarg.end117
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3449, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8713
  br label %cond.end134, !dbg !8713

cond.false133:                                    ; preds = %lor.lhs.false126, %land.lhs.true121
  br label %cond.end134, !dbg !8713

cond.end134:                                      ; preds = %cond.false133, %cond.true132
  %cond135 = phi i32 [ 0, %cond.true132 ], [ 0, %cond.false133 ], !dbg !8713
  %96 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8714
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !8714
  %bf.load136 = load i32, i32* %97, align 8, !dbg !8714
  %bf.clear137 = and i32 %bf.load136, 65535, !dbg !8714
  %cmp138 = icmp eq i32 %bf.clear137, 37, !dbg !8714
  br i1 %cmp138, label %if.end158, label %land.lhs.true140, !dbg !8716

land.lhs.true140:                                 ; preds = %cond.end134
  %98 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8717
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !8717
  %bf.load141 = load i32, i32* %99, align 8, !dbg !8717
  %bf.clear142 = and i32 %bf.load141, 65535, !dbg !8717
  %cmp143 = icmp eq i32 %bf.clear142, 43, !dbg !8717
  br i1 %cmp143, label %if.end158, label %land.lhs.true145, !dbg !8718

land.lhs.true145:                                 ; preds = %land.lhs.true140
  %100 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8719
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !8719
  %bf.load146 = load i32, i32* %101, align 8, !dbg !8719
  %bf.clear147 = and i32 %bf.load146, 65535, !dbg !8719
  %idxprom148 = sext i32 %bf.clear147 to i64, !dbg !8719
  %arrayidx149 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom148, !dbg !8719
  %102 = load i32, i32* %arrayidx149, align 4, !dbg !8719
  %cmp150 = icmp eq i32 %102, 9, !dbg !8719
  br i1 %cmp150, label %land.lhs.true152, label %if.then156, !dbg !8720

land.lhs.true152:                                 ; preds = %land.lhs.true145
  %103 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8721
  %call153 = call zeroext i8 @legitimate_constant_p(%struct.rtx_def* %103), !dbg !8721
  %conv154 = zext i8 %call153 to i32, !dbg !8721
  %tobool155 = icmp ne i32 %conv154, 0, !dbg !8721
  br i1 %tobool155, label %if.end158, label %if.then156, !dbg !8722

if.then156:                                       ; preds = %land.lhs.true152, %land.lhs.true145
  %104 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8723
  %call157 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %104, %struct.rtx_def* null), !dbg !8724
  store %struct.rtx_def* %call157, %struct.rtx_def** %val, align 8, !dbg !8725
  br label %if.end158, !dbg !8726

if.end158:                                        ; preds = %if.then156, %land.lhs.true152, %land.lhs.true140, %cond.end134
  %105 = load i32, i32* %mode107, align 4, !dbg !8727
  %call159 = call zeroext i8 @pass_by_reference(%struct.ix86_args* %args_so_far, i32 %105, %union.tree_node* null, i8 zeroext 1), !dbg !8729
  %tobool160 = icmp ne i8 %call159, 0, !dbg !8729
  br i1 %tobool160, label %if.then161, label %if.end194, !dbg !8730

if.then161:                                       ; preds = %if.end158
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %slot, metadata !8731, metadata !DIExpression()), !dbg !8733
  call void @llvm.dbg.declare(metadata i32* %must_copy, metadata !8734, metadata !DIExpression()), !dbg !8735
  %106 = load i32, i32* %mode107, align 4, !dbg !8736
  %call162 = call zeroext i8 @reference_callee_copied(%struct.ix86_args* %args_so_far, i32 %106, %union.tree_node* null, i8 zeroext 1), !dbg !8737
  %tobool163 = icmp ne i8 %call162, 0, !dbg !8738
  %lnot = xor i1 %tobool163, true, !dbg !8738
  %lnot.ext = zext i1 %lnot to i32, !dbg !8738
  store i32 %lnot.ext, i32* %must_copy, align 4, !dbg !8735
  %107 = load i32, i32* %flags, align 4, !dbg !8739
  %and164 = and i32 %107, 1, !dbg !8741
  %tobool165 = icmp ne i32 %and164, 0, !dbg !8741
  br i1 %tobool165, label %if.then166, label %if.end169, !dbg !8742

if.then166:                                       ; preds = %if.then161
  %108 = load i32, i32* %flags, align 4, !dbg !8743
  %and167 = and i32 %108, -2, !dbg !8743
  store i32 %and167, i32* %flags, align 4, !dbg !8743
  %109 = load i32, i32* %flags, align 4, !dbg !8745
  %or168 = or i32 %109, 2, !dbg !8745
  store i32 %or168, i32* %flags, align 4, !dbg !8745
  br label %if.end169, !dbg !8746

if.end169:                                        ; preds = %if.then166, %if.then161
  %110 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8747
  %111 = bitcast %struct.rtx_def* %110 to i32*, !dbg !8747
  %bf.load170 = load i32, i32* %111, align 8, !dbg !8747
  %bf.clear171 = and i32 %bf.load170, 65535, !dbg !8747
  %cmp172 = icmp eq i32 %bf.clear171, 43, !dbg !8747
  br i1 %cmp172, label %land.lhs.true174, label %if.else177, !dbg !8749

land.lhs.true174:                                 ; preds = %if.end169
  %112 = load i32, i32* %must_copy, align 4, !dbg !8750
  %tobool175 = icmp ne i32 %112, 0, !dbg !8750
  br i1 %tobool175, label %if.else177, label %if.then176, !dbg !8751

if.then176:                                       ; preds = %land.lhs.true174
  %113 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8752
  store %struct.rtx_def* %113, %struct.rtx_def** %slot, align 8, !dbg !8753
  br label %if.end181, !dbg !8754

if.else177:                                       ; preds = %land.lhs.true174, %if.end169
  %114 = load %union.tree_node* (i32, i32)*, %union.tree_node* (i32, i32)** getelementptr inbounds (%struct.lang_hooks, %struct.lang_hooks* @lang_hooks, i32 0, i32 34, i32 2), align 8, !dbg !8755
  %115 = load i32, i32* %mode107, align 4, !dbg !8757
  %call178 = call %union.tree_node* %114(i32 %115, i32 0), !dbg !8758
  %call179 = call %struct.rtx_def* @assign_temp(%union.tree_node* %call178, i32 0, i32 1, i32 1), !dbg !8759
  store %struct.rtx_def* %call179, %struct.rtx_def** %slot, align 8, !dbg !8760
  %116 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !8761
  %117 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8762
  %call180 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %116, %struct.rtx_def* %117), !dbg !8763
  br label %if.end181

if.end181:                                        ; preds = %if.else177, %if.then176
  %118 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !8764
  %call182 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %118), !dbg !8764
  %119 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !8764
  %call183 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %call182, %struct.rtx_def* %119), !dbg !8764
  store %struct.rtx_def* %call183, %struct.rtx_def** %call_fusage, align 8, !dbg !8765
  %120 = load i32, i32* %must_copy, align 4, !dbg !8766
  %tobool184 = icmp ne i32 %120, 0, !dbg !8766
  br i1 %tobool184, label %if.then185, label %if.end188, !dbg !8768

if.then185:                                       ; preds = %if.end181
  %121 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !8769
  %call186 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 25, i32 0, %struct.rtx_def* %121), !dbg !8769
  %122 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !8769
  %call187 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %call186, %struct.rtx_def* %122), !dbg !8769
  store %struct.rtx_def* %call187, %struct.rtx_def** %call_fusage, align 8, !dbg !8770
  br label %if.end188, !dbg !8771

if.end188:                                        ; preds = %if.then185, %if.end181
  store i32 16, i32* %mode107, align 4, !dbg !8772
  %123 = load %struct.rtx_def*, %struct.rtx_def** %slot, align 8, !dbg !8773
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !8773
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !8773
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 0, !dbg !8773
  %rt_rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**, !dbg !8773
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx192, align 8, !dbg !8773
  %call193 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %124, %struct.rtx_def* null), !dbg !8774
  store %struct.rtx_def* %call193, %struct.rtx_def** %val, align 8, !dbg !8775
  br label %if.end194, !dbg !8776

if.end194:                                        ; preds = %if.end188, %if.end158
  %125 = load %struct.rtx_def*, %struct.rtx_def** %val, align 8, !dbg !8777
  %126 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8778
  %127 = load i32, i32* %count, align 4, !dbg !8779
  %idxprom195 = sext i32 %127 to i64, !dbg !8778
  %arrayidx196 = getelementptr inbounds %struct.arg, %struct.arg* %126, i64 %idxprom195, !dbg !8778
  %value197 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx196, i32 0, i32 0, !dbg !8780
  store %struct.rtx_def* %125, %struct.rtx_def** %value197, align 8, !dbg !8781
  %128 = load i32, i32* %mode107, align 4, !dbg !8782
  %129 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8783
  %130 = load i32, i32* %count, align 4, !dbg !8784
  %idxprom198 = sext i32 %130 to i64, !dbg !8783
  %arrayidx199 = getelementptr inbounds %struct.arg, %struct.arg* %129, i64 %idxprom198, !dbg !8783
  %mode200 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx199, i32 0, i32 1, !dbg !8785
  store i32 %128, i32* %mode200, align 8, !dbg !8786
  %131 = load i32, i32* %mode107, align 4, !dbg !8787
  %call201 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 %131, %union.tree_node* null, i32 1), !dbg !8787
  %132 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8788
  %133 = load i32, i32* %count, align 4, !dbg !8789
  %idxprom202 = sext i32 %133 to i64, !dbg !8788
  %arrayidx203 = getelementptr inbounds %struct.arg, %struct.arg* %132, i64 %idxprom202, !dbg !8788
  %reg204 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx203, i32 0, i32 2, !dbg !8790
  store %struct.rtx_def* %call201, %struct.rtx_def** %reg204, align 8, !dbg !8791
  %134 = load i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 88, i32 13), align 8, !dbg !8792
  %135 = load i32, i32* %mode107, align 4, !dbg !8793
  %call205 = call i32 %134(%struct.ix86_args* %args_so_far, i32 %135, %union.tree_node* null, i8 zeroext 1), !dbg !8794
  %136 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8795
  %137 = load i32, i32* %count, align 4, !dbg !8796
  %idxprom206 = sext i32 %137 to i64, !dbg !8795
  %arrayidx207 = getelementptr inbounds %struct.arg, %struct.arg* %136, i64 %idxprom206, !dbg !8795
  %partial208 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx207, i32 0, i32 3, !dbg !8797
  store i32 %call205, i32* %partial208, align 8, !dbg !8798
  %138 = load i32, i32* %mode107, align 4, !dbg !8799
  %139 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8800
  %140 = load i32, i32* %count, align 4, !dbg !8801
  %idxprom209 = sext i32 %140 to i64, !dbg !8800
  %arrayidx210 = getelementptr inbounds %struct.arg, %struct.arg* %139, i64 %idxprom209, !dbg !8800
  %reg211 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx210, i32 0, i32 2, !dbg !8802
  %141 = load %struct.rtx_def*, %struct.rtx_def** %reg211, align 8, !dbg !8802
  %cmp212 = icmp ne %struct.rtx_def* %141, null, !dbg !8803
  %conv213 = zext i1 %cmp212 to i32, !dbg !8803
  %142 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8804
  %143 = load i32, i32* %count, align 4, !dbg !8805
  %idxprom214 = sext i32 %143 to i64, !dbg !8804
  %arrayidx215 = getelementptr inbounds %struct.arg, %struct.arg* %142, i64 %idxprom214, !dbg !8804
  %partial216 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx215, i32 0, i32 3, !dbg !8806
  %144 = load i32, i32* %partial216, align 8, !dbg !8806
  %145 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8807
  %146 = load i32, i32* %count, align 4, !dbg !8808
  %idxprom217 = sext i32 %146 to i64, !dbg !8807
  %arrayidx218 = getelementptr inbounds %struct.arg, %struct.arg* %145, i64 %idxprom217, !dbg !8807
  %locate219 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx218, i32 0, i32 4, !dbg !8809
  call void @locate_and_pad_parm(i32 %138, %union.tree_node* null, i32 %conv213, i32 %144, %union.tree_node* null, %struct.args_size* %args_size, %struct.locate_and_pad_arg_data* %locate219), !dbg !8810
  %147 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8811
  %148 = load i32, i32* %count, align 4, !dbg !8811
  %idxprom220 = sext i32 %148 to i64, !dbg !8811
  %arrayidx221 = getelementptr inbounds %struct.arg, %struct.arg* %147, i64 %idxprom220, !dbg !8811
  %locate222 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx221, i32 0, i32 4, !dbg !8811
  %size223 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate222, i32 0, i32 0, !dbg !8811
  %var224 = getelementptr inbounds %struct.args_size, %struct.args_size* %size223, i32 0, i32 1, !dbg !8811
  %149 = load %union.tree_node*, %union.tree_node** %var224, align 8, !dbg !8811
  %tobool225 = icmp ne %union.tree_node* %149, null, !dbg !8811
  br i1 %tobool225, label %cond.true226, label %cond.false227, !dbg !8811

cond.true226:                                     ; preds = %if.end194
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3509, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !8811
  br label %cond.end228, !dbg !8811

cond.false227:                                    ; preds = %if.end194
  br label %cond.end228, !dbg !8811

cond.end228:                                      ; preds = %cond.false227, %cond.true226
  %cond229 = phi i32 [ 0, %cond.true226 ], [ 0, %cond.false227 ], !dbg !8811
  %150 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8812
  %151 = load i32, i32* %count, align 4, !dbg !8814
  %idxprom230 = sext i32 %151 to i64, !dbg !8812
  %arrayidx231 = getelementptr inbounds %struct.arg, %struct.arg* %150, i64 %idxprom230, !dbg !8812
  %reg232 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx231, i32 0, i32 2, !dbg !8815
  %152 = load %struct.rtx_def*, %struct.rtx_def** %reg232, align 8, !dbg !8815
  %cmp233 = icmp eq %struct.rtx_def* %152, null, !dbg !8816
  br i1 %cmp233, label %if.then244, label %lor.lhs.false235, !dbg !8817

lor.lhs.false235:                                 ; preds = %cond.end228
  %153 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8818
  %154 = load i32, i32* %count, align 4, !dbg !8819
  %idxprom236 = sext i32 %154 to i64, !dbg !8818
  %arrayidx237 = getelementptr inbounds %struct.arg, %struct.arg* %153, i64 %idxprom236, !dbg !8818
  %partial238 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx237, i32 0, i32 3, !dbg !8820
  %155 = load i32, i32* %partial238, align 8, !dbg !8820
  %cmp239 = icmp ne i32 %155, 0, !dbg !8821
  br i1 %cmp239, label %if.then244, label %lor.lhs.false241, !dbg !8822

lor.lhs.false241:                                 ; preds = %lor.lhs.false235
  %156 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8823
  %cmp242 = icmp sgt i32 %156, 0, !dbg !8824
  br i1 %cmp242, label %if.then244, label %if.end252, !dbg !8825

if.then244:                                       ; preds = %lor.lhs.false241, %lor.lhs.false235, %cond.end228
  %157 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8826
  %158 = load i32, i32* %count, align 4, !dbg !8827
  %idxprom245 = sext i32 %158 to i64, !dbg !8826
  %arrayidx246 = getelementptr inbounds %struct.arg, %struct.arg* %157, i64 %idxprom245, !dbg !8826
  %locate247 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx246, i32 0, i32 4, !dbg !8828
  %size248 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate247, i32 0, i32 0, !dbg !8829
  %constant249 = getelementptr inbounds %struct.args_size, %struct.args_size* %size248, i32 0, i32 0, !dbg !8830
  %159 = load i64, i64* %constant249, align 8, !dbg !8830
  %constant250 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8831
  %160 = load i64, i64* %constant250, align 8, !dbg !8832
  %add251 = add nsw i64 %160, %159, !dbg !8832
  store i64 %add251, i64* %constant250, align 8, !dbg !8832
  br label %if.end252, !dbg !8833

if.end252:                                        ; preds = %if.then244, %lor.lhs.false241
  %161 = load i32, i32* %mode107, align 4, !dbg !8834
  call void @function_arg_advance(%struct.ix86_args* %args_so_far, i32 %161, %union.tree_node* null, i32 1), !dbg !8834
  br label %for.inc, !dbg !8835

for.inc:                                          ; preds = %if.end252
  %162 = load i32, i32* %count, align 4, !dbg !8836
  %inc253 = add nsw i32 %162, 1, !dbg !8836
  store i32 %inc253, i32* %count, align 4, !dbg !8836
  br label %for.cond, !dbg !8837, !llvm.loop !8838

for.end:                                          ; preds = %for.cond
  %163 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8, !dbg !8840
  call void @assemble_external_libcall(%struct.rtx_def* %163), !dbg !8841
  %164 = bitcast %struct.args_size* %original_args_size to i8*, !dbg !8842
  %165 = bitcast %struct.args_size* %args_size to i8*, !dbg !8842
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %164, i8* align 8 %165, i64 16, i1 false), !dbg !8842
  %constant254 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8843
  %166 = load i64, i64* %constant254, align 8, !dbg !8843
  %167 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8844
  %conv255 = sext i32 %167 to i64, !dbg !8844
  %add256 = add nsw i64 %166, %conv255, !dbg !8845
  %168 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !8846
  %div = udiv i32 %168, 8, !dbg !8846
  %conv257 = zext i32 %div to i64, !dbg !8846
  %add258 = add nsw i64 %add256, %conv257, !dbg !8847
  %sub = sub nsw i64 %add258, 1, !dbg !8848
  %169 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !8849
  %div259 = udiv i32 %169, 8, !dbg !8849
  %conv260 = zext i32 %div259 to i64, !dbg !8849
  %div261 = sdiv i64 %sub, %conv260, !dbg !8850
  %170 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !8851
  %div262 = udiv i32 %170, 8, !dbg !8851
  %conv263 = zext i32 %div262 to i64, !dbg !8851
  %mul264 = mul nsw i64 %div261, %conv263, !dbg !8852
  %171 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !8853
  %conv265 = sext i32 %171 to i64, !dbg !8853
  %sub266 = sub nsw i64 %mul264, %conv265, !dbg !8854
  %constant267 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8855
  store i64 %sub266, i64* %constant267, align 8, !dbg !8856
  %constant268 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8857
  %172 = load i64, i64* %constant268, align 8, !dbg !8857
  %173 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8857
  %conv269 = sext i32 %173 to i64, !dbg !8857
  %cmp270 = icmp sgt i64 %172, %conv269, !dbg !8857
  br i1 %cmp270, label %cond.true272, label %cond.false274, !dbg !8857

cond.true272:                                     ; preds = %for.end
  %constant273 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8857
  %174 = load i64, i64* %constant273, align 8, !dbg !8857
  br label %cond.end276, !dbg !8857

cond.false274:                                    ; preds = %for.end
  %175 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8857
  %conv275 = sext i32 %175 to i64, !dbg !8857
  br label %cond.end276, !dbg !8857

cond.end276:                                      ; preds = %cond.false274, %cond.true272
  %cond277 = phi i64 [ %174, %cond.true272 ], [ %conv275, %cond.false274 ], !dbg !8857
  %constant278 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8858
  store i64 %cond277, i64* %constant278, align 8, !dbg !8859
  %176 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8860
  %tobool279 = icmp ne %union.tree_node* %176, null, !dbg !8860
  br i1 %tobool279, label %cond.false281, label %cond.true280, !dbg !8860

cond.true280:                                     ; preds = %cond.end276
  %177 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !8860
  br label %cond.end282, !dbg !8860

cond.false281:                                    ; preds = %cond.end276
  %178 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8860
  %common = bitcast %union.tree_node* %178 to %struct.tree_common*, !dbg !8860
  %type = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common, i32 0, i32 2, !dbg !8860
  %179 = load %union.tree_node*, %union.tree_node** %type, align 8, !dbg !8860
  br label %cond.end282, !dbg !8860

cond.end282:                                      ; preds = %cond.false281, %cond.true280
  %cond283 = phi %union.tree_node* [ %177, %cond.true280 ], [ %179, %cond.false281 ], !dbg !8860
  %call284 = call i32 @ix86_function_type_abi(%union.tree_node* %cond283), !dbg !8860
  %cmp285 = icmp eq i32 %call284, 1, !dbg !8860
  br i1 %cmp285, label %if.end291, label %if.then287, !dbg !8862

if.then287:                                       ; preds = %cond.end282
  %180 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8863
  %conv288 = sext i32 %180 to i64, !dbg !8863
  %constant289 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8864
  %181 = load i64, i64* %constant289, align 8, !dbg !8865
  %sub290 = sub nsw i64 %181, %conv288, !dbg !8865
  store i64 %sub290, i64* %constant289, align 8, !dbg !8865
  br label %if.end291, !dbg !8866

if.end291:                                        ; preds = %if.then287, %cond.end282
  %constant292 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8867
  %182 = load i64, i64* %constant292, align 8, !dbg !8867
  %183 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 6), align 8, !dbg !8869
  %conv293 = sext i32 %183 to i64, !dbg !8870
  %cmp294 = icmp sgt i64 %182, %conv293, !dbg !8871
  br i1 %cmp294, label %if.then296, label %if.end299, !dbg !8872

if.then296:                                       ; preds = %if.end291
  %constant297 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8873
  %184 = load i64, i64* %constant297, align 8, !dbg !8873
  %conv298 = trunc i64 %184 to i32, !dbg !8874
  store i32 %conv298, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 6), align 8, !dbg !8875
  br label %if.end299, !dbg !8876

if.end299:                                        ; preds = %if.then296, %if.end291
  %185 = load i32, i32* @target_flags, align 4, !dbg !8877
  %and300 = and i32 %185, 4, !dbg !8877
  %cmp301 = icmp ne i32 %and300, 0, !dbg !8877
  br i1 %cmp301, label %if.then307, label %lor.lhs.false303, !dbg !8877

lor.lhs.false303:                                 ; preds = %if.end299
  %call304 = call i32 @ix86_cfun_abi(), !dbg !8877
  %cmp305 = icmp eq i32 %call304, 1, !dbg !8877
  br i1 %cmp305, label %if.then307, label %if.else349, !dbg !8879

if.then307:                                       ; preds = %lor.lhs.false303, %if.end299
  %constant308 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8880
  %186 = load i64, i64* %constant308, align 8, !dbg !8880
  %conv309 = trunc i64 %186 to i32, !dbg !8882
  store i32 %conv309, i32* %needed, align 4, !dbg !8883
  %187 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8884
  %tobool310 = icmp ne %union.tree_node* %187, null, !dbg !8884
  br i1 %tobool310, label %cond.false312, label %cond.true311, !dbg !8884

cond.true311:                                     ; preds = %if.then307
  %188 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !8884
  br label %cond.end315, !dbg !8884

cond.false312:                                    ; preds = %if.then307
  %189 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !8884
  %common313 = bitcast %union.tree_node* %189 to %struct.tree_common*, !dbg !8884
  %type314 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common313, i32 0, i32 2, !dbg !8884
  %190 = load %union.tree_node*, %union.tree_node** %type314, align 8, !dbg !8884
  br label %cond.end315, !dbg !8884

cond.end315:                                      ; preds = %cond.false312, %cond.true311
  %cond316 = phi %union.tree_node* [ %188, %cond.true311 ], [ %190, %cond.false312 ], !dbg !8884
  %call317 = call i32 @ix86_function_type_abi(%union.tree_node* %cond316), !dbg !8884
  %cmp318 = icmp eq i32 %call317, 1, !dbg !8884
  br i1 %cmp318, label %if.end322, label %if.then320, !dbg !8886

if.then320:                                       ; preds = %cond.end315
  %191 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8887
  %192 = load i32, i32* %needed, align 4, !dbg !8888
  %add321 = add nsw i32 %192, %191, !dbg !8888
  store i32 %add321, i32* %needed, align 4, !dbg !8888
  br label %if.end322, !dbg !8889

if.end322:                                        ; preds = %if.then320, %cond.end315
  %193 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8890
  %194 = load i32, i32* %needed, align 4, !dbg !8890
  %cmp323 = icmp sgt i32 %193, %194, !dbg !8890
  br i1 %cmp323, label %cond.true325, label %cond.false326, !dbg !8890

cond.true325:                                     ; preds = %if.end322
  %195 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8890
  br label %cond.end327, !dbg !8890

cond.false326:                                    ; preds = %if.end322
  %196 = load i32, i32* %needed, align 4, !dbg !8890
  br label %cond.end327, !dbg !8890

cond.end327:                                      ; preds = %cond.false326, %cond.true325
  %cond328 = phi i32 [ %195, %cond.true325 ], [ %196, %cond.false326 ], !dbg !8890
  store i32 %cond328, i32* @highest_outgoing_arg_in_use, align 4, !dbg !8891
  %197 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !8892
  %conv329 = sext i32 %197 to i64, !dbg !8892
  %mul330 = mul i64 1, %conv329, !dbg !8892
  %call331 = call i8* @xmalloc(i64 %mul330), !dbg !8892
  store i8* %call331, i8** %stack_usage_map_buf, align 8, !dbg !8893
  %198 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !8894
  store i8* %198, i8** @stack_usage_map, align 8, !dbg !8895
  %199 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8896
  %tobool332 = icmp ne i32 %199, 0, !dbg !8896
  br i1 %tobool332, label %if.then333, label %if.end335, !dbg !8898

if.then333:                                       ; preds = %cond.end327
  %200 = load i8*, i8** @stack_usage_map, align 8, !dbg !8899
  %201 = load i8*, i8** %initial_stack_usage_map, align 8, !dbg !8900
  %202 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8901
  %conv334 = sext i32 %202 to i64, !dbg !8901
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %200, i8* align 1 %201, i64 %conv334, i1 false), !dbg !8902
  br label %if.end335, !dbg !8902

if.end335:                                        ; preds = %if.then333, %cond.end327
  %203 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8903
  %204 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !8905
  %cmp336 = icmp ne i32 %203, %204, !dbg !8906
  br i1 %cmp336, label %if.then338, label %if.end343, !dbg !8907

if.then338:                                       ; preds = %if.end335
  %205 = load i8*, i8** @stack_usage_map, align 8, !dbg !8908
  %206 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8909
  %idxprom339 = sext i32 %206 to i64, !dbg !8908
  %arrayidx340 = getelementptr inbounds i8, i8* %205, i64 %idxprom339, !dbg !8908
  %207 = load i32, i32* @highest_outgoing_arg_in_use, align 4, !dbg !8910
  %208 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !8911
  %sub341 = sub nsw i32 %207, %208, !dbg !8912
  %conv342 = sext i32 %sub341 to i64, !dbg !8910
  call void @llvm.memset.p0i8.i64(i8* align 1 %arrayidx340, i8 0, i64 %conv342, i1 false), !dbg !8913
  br label %if.end343, !dbg !8913

if.end343:                                        ; preds = %if.then338, %if.end335
  store i32 0, i32* %needed, align 4, !dbg !8914
  %209 = load i32, i32* @virtuals_instantiated, align 4, !dbg !8915
  %tobool344 = icmp ne i32 %209, 0, !dbg !8915
  br i1 %tobool344, label %if.then345, label %if.else347, !dbg !8917

if.then345:                                       ; preds = %if.end343
  %210 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 2), align 16, !dbg !8918
  %call346 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %210, i64 0), !dbg !8919
  store %struct.rtx_def* %call346, %struct.rtx_def** %argblock, align 8, !dbg !8920
  br label %if.end348, !dbg !8921

if.else347:                                       ; preds = %if.end343
  %211 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !8922
  store %struct.rtx_def* %211, %struct.rtx_def** %argblock, align 8, !dbg !8923
  br label %if.end348

if.end348:                                        ; preds = %if.else347, %if.then345
  br label %if.end366, !dbg !8924

if.else349:                                       ; preds = %lor.lhs.false303
  %212 = load i32, i32* @target_flags, align 4, !dbg !8925
  %and350 = and i32 %212, 8192, !dbg !8925
  %cmp351 = icmp eq i32 %and350, 0, !dbg !8925
  br i1 %cmp351, label %land.lhs.true353, label %if.then361, !dbg !8925

land.lhs.true353:                                 ; preds = %if.else349
  %213 = load i32, i32* @target_flags, align 4, !dbg !8925
  %and354 = and i32 %213, 4, !dbg !8925
  %cmp355 = icmp ne i32 %and354, 0, !dbg !8925
  br i1 %cmp355, label %if.then361, label %lor.lhs.false357, !dbg !8925

lor.lhs.false357:                                 ; preds = %land.lhs.true353
  %call358 = call i32 @ix86_cfun_abi(), !dbg !8925
  %cmp359 = icmp eq i32 %call358, 1, !dbg !8925
  br i1 %cmp359, label %if.then361, label %if.end365, !dbg !8928

if.then361:                                       ; preds = %lor.lhs.false357, %land.lhs.true353, %if.else349
  %constant362 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8929
  %214 = load i64, i64* %constant362, align 8, !dbg !8929
  %call363 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %214), !dbg !8929
  %call364 = call %struct.rtx_def* @push_block(%struct.rtx_def* %call363, i32 0, i32 0), !dbg !8930
  store %struct.rtx_def* %call364, %struct.rtx_def** %argblock, align 8, !dbg !8931
  br label %if.end365, !dbg !8932

if.end365:                                        ; preds = %if.then361, %lor.lhs.false357
  br label %if.end366

if.end366:                                        ; preds = %if.end365, %if.end348
  %215 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !8933
  %cmp367 = icmp eq %struct.rtx_def* %215, null, !dbg !8935
  br i1 %cmp367, label %if.then369, label %if.end374, !dbg !8936

if.then369:                                       ; preds = %if.end366
  %constant370 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !8937
  %216 = load i64, i64* %constant370, align 8, !dbg !8937
  %constant371 = getelementptr inbounds %struct.args_size, %struct.args_size* %original_args_size, i32 0, i32 0, !dbg !8937
  %217 = load i64, i64* %constant371, align 8, !dbg !8937
  %sub372 = sub nsw i64 %216, %217, !dbg !8937
  %call373 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub372), !dbg !8937
  call void @anti_adjust_stack(%struct.rtx_def* %call373), !dbg !8938
  br label %if.end374, !dbg !8938

if.end374:                                        ; preds = %if.then369, %if.end366
  store i32 -1, i32* %inc, align 4, !dbg !8939
  %218 = load i32, i32* %nargs.addr, align 4, !dbg !8942
  %sub375 = sub nsw i32 %218, 1, !dbg !8943
  store i32 %sub375, i32* %argnum, align 4, !dbg !8944
  %219 = load i32, i32* @target_flags, align 4, !dbg !8945
  %and376 = and i32 %219, 4, !dbg !8945
  %cmp377 = icmp ne i32 %and376, 0, !dbg !8945
  br i1 %cmp377, label %if.then383, label %lor.lhs.false379, !dbg !8945

lor.lhs.false379:                                 ; preds = %if.end374
  %call380 = call i32 @ix86_cfun_abi(), !dbg !8945
  %cmp381 = icmp eq i32 %call380, 1, !dbg !8945
  br i1 %cmp381, label %if.then383, label %if.end385, !dbg !8947

if.then383:                                       ; preds = %lor.lhs.false379, %if.end374
  %220 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !8948
  %221 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !8950
  %call384 = call %struct.rtx_def* @save_fixed_argument_area(i32 %220, %struct.rtx_def* %221, i32* %low_to_save, i32* %high_to_save), !dbg !8951
  store %struct.rtx_def* %call384, %struct.rtx_def** %save_area, align 8, !dbg !8952
  br label %if.end385, !dbg !8953

if.end385:                                        ; preds = %if.then383, %lor.lhs.false379
  store i32 0, i32* %count, align 4, !dbg !8954
  br label %for.cond386, !dbg !8956

for.cond386:                                      ; preds = %for.inc608, %if.end385
  %222 = load i32, i32* %count, align 4, !dbg !8957
  %223 = load i32, i32* %nargs.addr, align 4, !dbg !8959
  %cmp387 = icmp slt i32 %222, %223, !dbg !8960
  br i1 %cmp387, label %for.body389, label %for.end611, !dbg !8961

for.body389:                                      ; preds = %for.cond386
  call void @llvm.dbg.declare(metadata i32* %mode390, metadata !8962, metadata !DIExpression()), !dbg !8964
  %224 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8965
  %225 = load i32, i32* %argnum, align 4, !dbg !8966
  %idxprom391 = sext i32 %225 to i64, !dbg !8965
  %arrayidx392 = getelementptr inbounds %struct.arg, %struct.arg* %224, i64 %idxprom391, !dbg !8965
  %mode393 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx392, i32 0, i32 1, !dbg !8967
  %226 = load i32, i32* %mode393, align 8, !dbg !8967
  store i32 %226, i32* %mode390, align 4, !dbg !8964
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val394, metadata !8968, metadata !DIExpression()), !dbg !8969
  %227 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8970
  %228 = load i32, i32* %argnum, align 4, !dbg !8971
  %idxprom395 = sext i32 %228 to i64, !dbg !8970
  %arrayidx396 = getelementptr inbounds %struct.arg, %struct.arg* %227, i64 %idxprom395, !dbg !8970
  %value397 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx396, i32 0, i32 0, !dbg !8972
  %229 = load %struct.rtx_def*, %struct.rtx_def** %value397, align 8, !dbg !8972
  store %struct.rtx_def* %229, %struct.rtx_def** %val394, align 8, !dbg !8969
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg398, metadata !8973, metadata !DIExpression()), !dbg !8974
  %230 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8975
  %231 = load i32, i32* %argnum, align 4, !dbg !8976
  %idxprom399 = sext i32 %231 to i64, !dbg !8975
  %arrayidx400 = getelementptr inbounds %struct.arg, %struct.arg* %230, i64 %idxprom399, !dbg !8975
  %reg401 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx400, i32 0, i32 2, !dbg !8977
  %232 = load %struct.rtx_def*, %struct.rtx_def** %reg401, align 8, !dbg !8977
  store %struct.rtx_def* %232, %struct.rtx_def** %reg398, align 8, !dbg !8974
  call void @llvm.dbg.declare(metadata i32* %partial402, metadata !8978, metadata !DIExpression()), !dbg !8979
  %233 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8980
  %234 = load i32, i32* %argnum, align 4, !dbg !8981
  %idxprom403 = sext i32 %234 to i64, !dbg !8980
  %arrayidx404 = getelementptr inbounds %struct.arg, %struct.arg* %233, i64 %idxprom403, !dbg !8980
  %partial405 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx404, i32 0, i32 3, !dbg !8982
  %235 = load i32, i32* %partial405, align 8, !dbg !8982
  store i32 %235, i32* %partial402, align 4, !dbg !8979
  call void @llvm.dbg.declare(metadata i32* %parm_align, metadata !8983, metadata !DIExpression()), !dbg !8984
  %236 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !8985
  %237 = load i32, i32* %argnum, align 4, !dbg !8986
  %idxprom406 = sext i32 %237 to i64, !dbg !8985
  %arrayidx407 = getelementptr inbounds %struct.arg, %struct.arg* %236, i64 %idxprom406, !dbg !8985
  %locate408 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx407, i32 0, i32 4, !dbg !8987
  %boundary = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate408, i32 0, i32 5, !dbg !8988
  %238 = load i32, i32* %boundary, align 4, !dbg !8988
  store i32 %238, i32* %parm_align, align 4, !dbg !8984
  call void @llvm.dbg.declare(metadata i32* %lower_bound, metadata !8989, metadata !DIExpression()), !dbg !8990
  store i32 0, i32* %lower_bound, align 4, !dbg !8990
  call void @llvm.dbg.declare(metadata i32* %upper_bound, metadata !8991, metadata !DIExpression()), !dbg !8992
  store i32 0, i32* %upper_bound, align 4, !dbg !8992
  call void @llvm.dbg.declare(metadata i32* %i, metadata !8993, metadata !DIExpression()), !dbg !8994
  %239 = load %struct.rtx_def*, %struct.rtx_def** %reg398, align 8, !dbg !8995
  %cmp409 = icmp ne %struct.rtx_def* %239, null, !dbg !8997
  br i1 %cmp409, label %land.lhs.true411, label %if.then414, !dbg !8998

land.lhs.true411:                                 ; preds = %for.body389
  %240 = load i32, i32* %partial402, align 4, !dbg !8999
  %cmp412 = icmp eq i32 %240, 0, !dbg !9000
  br i1 %cmp412, label %if.end607, label %if.then414, !dbg !9001

if.then414:                                       ; preds = %land.lhs.true411, %for.body389
  %241 = load i32, i32* @target_flags, align 4, !dbg !9002
  %and415 = and i32 %241, 4, !dbg !9002
  %cmp416 = icmp ne i32 %and415, 0, !dbg !9002
  br i1 %cmp416, label %if.then422, label %lor.lhs.false418, !dbg !9002

lor.lhs.false418:                                 ; preds = %if.then414
  %call419 = call i32 @ix86_cfun_abi(), !dbg !9002
  %cmp420 = icmp eq i32 %call419, 1, !dbg !9002
  br i1 %cmp420, label %if.then422, label %if.end501, !dbg !9005

if.then422:                                       ; preds = %lor.lhs.false418, %if.then414
  %242 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9006
  %243 = load i32, i32* %argnum, align 4, !dbg !9008
  %idxprom423 = sext i32 %243 to i64, !dbg !9006
  %arrayidx424 = getelementptr inbounds %struct.arg, %struct.arg* %242, i64 %idxprom423, !dbg !9006
  %locate425 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx424, i32 0, i32 4, !dbg !9009
  %slot_offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate425, i32 0, i32 2, !dbg !9010
  %constant426 = getelementptr inbounds %struct.args_size, %struct.args_size* %slot_offset, i32 0, i32 0, !dbg !9011
  %244 = load i64, i64* %constant426, align 8, !dbg !9011
  %conv427 = trunc i64 %244 to i32, !dbg !9006
  store i32 %conv427, i32* %lower_bound, align 4, !dbg !9012
  %245 = load i32, i32* %lower_bound, align 4, !dbg !9013
  %conv428 = sext i32 %245 to i64, !dbg !9013
  %246 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9014
  %247 = load i32, i32* %argnum, align 4, !dbg !9015
  %idxprom429 = sext i32 %247 to i64, !dbg !9014
  %arrayidx430 = getelementptr inbounds %struct.arg, %struct.arg* %246, i64 %idxprom429, !dbg !9014
  %locate431 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx430, i32 0, i32 4, !dbg !9016
  %size432 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate431, i32 0, i32 0, !dbg !9017
  %constant433 = getelementptr inbounds %struct.args_size, %struct.args_size* %size432, i32 0, i32 0, !dbg !9018
  %248 = load i64, i64* %constant433, align 8, !dbg !9018
  %add434 = add nsw i64 %conv428, %248, !dbg !9019
  %conv435 = trunc i64 %add434 to i32, !dbg !9013
  store i32 %conv435, i32* %upper_bound, align 4, !dbg !9020
  %249 = load i32, i32* %lower_bound, align 4, !dbg !9021
  store i32 %249, i32* %i, align 4, !dbg !9022
  %250 = load i32, i32* %i, align 4, !dbg !9023
  %251 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !9025
  %cmp436 = icmp slt i32 %250, %251, !dbg !9026
  br i1 %cmp436, label %if.then438, label %if.end439, !dbg !9027

if.then438:                                       ; preds = %if.then422
  %252 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !9028
  store i32 %252, i32* %i, align 4, !dbg !9029
  br label %if.end439, !dbg !9030

if.end439:                                        ; preds = %if.then438, %if.then422
  br label %while.cond, !dbg !9031

while.cond:                                       ; preds = %while.body, %if.end439
  %253 = load i32, i32* %i, align 4, !dbg !9032
  %254 = load i32, i32* %upper_bound, align 4, !dbg !9033
  %cmp440 = icmp slt i32 %253, %254, !dbg !9034
  br i1 %cmp440, label %land.rhs, label %land.end, !dbg !9035

land.rhs:                                         ; preds = %while.cond
  %255 = load i8*, i8** @stack_usage_map, align 8, !dbg !9036
  %256 = load i32, i32* %i, align 4, !dbg !9037
  %idxprom442 = sext i32 %256 to i64, !dbg !9036
  %arrayidx443 = getelementptr inbounds i8, i8* %255, i64 %idxprom442, !dbg !9036
  %257 = load i8, i8* %arrayidx443, align 1, !dbg !9036
  %conv444 = sext i8 %257 to i32, !dbg !9036
  %cmp445 = icmp eq i32 %conv444, 0, !dbg !9038
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %258 = phi i1 [ false, %while.cond ], [ %cmp445, %land.rhs ], !dbg !9039
  br i1 %258, label %while.body, label %while.end, !dbg !9031

while.body:                                       ; preds = %land.end
  %259 = load i32, i32* %i, align 4, !dbg !9040
  %inc447 = add nsw i32 %259, 1, !dbg !9040
  store i32 %inc447, i32* %i, align 4, !dbg !9040
  br label %while.cond, !dbg !9031, !llvm.loop !9041

while.end:                                        ; preds = %land.end
  %260 = load i32, i32* %i, align 4, !dbg !9042
  %261 = load i32, i32* %upper_bound, align 4, !dbg !9044
  %cmp448 = icmp slt i32 %260, %261, !dbg !9045
  br i1 %cmp448, label %if.then450, label %if.end500, !dbg !9046

if.then450:                                       ; preds = %while.end
  call void @llvm.dbg.declare(metadata i32* %size451, metadata !9047, metadata !DIExpression()), !dbg !9049
  %262 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9050
  %263 = load i32, i32* %argnum, align 4, !dbg !9051
  %idxprom452 = sext i32 %263 to i64, !dbg !9050
  %arrayidx453 = getelementptr inbounds %struct.arg, %struct.arg* %262, i64 %idxprom452, !dbg !9050
  %locate454 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx453, i32 0, i32 4, !dbg !9052
  %size455 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate454, i32 0, i32 0, !dbg !9053
  %constant456 = getelementptr inbounds %struct.args_size, %struct.args_size* %size455, i32 0, i32 0, !dbg !9054
  %264 = load i64, i64* %constant456, align 8, !dbg !9054
  %mul457 = mul nsw i64 %264, 8, !dbg !9055
  %conv458 = trunc i64 %mul457 to i32, !dbg !9050
  store i32 %conv458, i32* %size451, align 4, !dbg !9049
  call void @llvm.dbg.declare(metadata i32* %save_mode, metadata !9056, metadata !DIExpression()), !dbg !9057
  %265 = load i32, i32* %size451, align 4, !dbg !9058
  %call459 = call i32 @mode_for_size(i32 %265, i32 2, i32 1), !dbg !9059
  store i32 %call459, i32* %save_mode, align 4, !dbg !9057
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adr, metadata !9060, metadata !DIExpression()), !dbg !9061
  %266 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9062
  %267 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9063
  %268 = load i32, i32* %argnum, align 4, !dbg !9064
  %idxprom460 = sext i32 %268 to i64, !dbg !9063
  %arrayidx461 = getelementptr inbounds %struct.arg, %struct.arg* %267, i64 %idxprom460, !dbg !9063
  %locate462 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx461, i32 0, i32 4, !dbg !9065
  %offset = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate462, i32 0, i32 1, !dbg !9066
  %constant463 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset, i32 0, i32 0, !dbg !9067
  %269 = load i64, i64* %constant463, align 8, !dbg !9067
  %call464 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %266, i64 %269), !dbg !9068
  store %struct.rtx_def* %call464, %struct.rtx_def** %adr, align 8, !dbg !9061
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area, metadata !9069, metadata !DIExpression()), !dbg !9070
  %270 = load i32, i32* %save_mode, align 4, !dbg !9071
  %271 = load i32, i32* %save_mode, align 4, !dbg !9072
  %272 = load %struct.rtx_def*, %struct.rtx_def** %adr, align 8, !dbg !9072
  %call465 = call %struct.rtx_def* @memory_address_addr_space(i32 %271, %struct.rtx_def* %272, i8 zeroext 0), !dbg !9072
  %call466 = call %struct.rtx_def* @gen_rtx_MEM(i32 %270, %struct.rtx_def* %call465), !dbg !9073
  store %struct.rtx_def* %call466, %struct.rtx_def** %stack_area, align 8, !dbg !9070
  %273 = load i32, i32* %save_mode, align 4, !dbg !9074
  %cmp467 = icmp eq i32 %273, 1, !dbg !9076
  br i1 %cmp467, label %if.then469, label %if.else490, !dbg !9077

if.then469:                                       ; preds = %if.then450
  %274 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9078
  %275 = load i32, i32* %argnum, align 4, !dbg !9080
  %idxprom470 = sext i32 %275 to i64, !dbg !9078
  %arrayidx471 = getelementptr inbounds %struct.arg, %struct.arg* %274, i64 %idxprom470, !dbg !9078
  %locate472 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx471, i32 0, i32 4, !dbg !9081
  %size473 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate472, i32 0, i32 0, !dbg !9082
  %constant474 = getelementptr inbounds %struct.args_size, %struct.args_size* %size473, i32 0, i32 0, !dbg !9083
  %276 = load i64, i64* %constant474, align 8, !dbg !9083
  %call475 = call %struct.rtx_def* @assign_stack_temp(i32 1, i64 %276, i32 0), !dbg !9084
  %277 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9085
  %278 = load i32, i32* %argnum, align 4, !dbg !9086
  %idxprom476 = sext i32 %278 to i64, !dbg !9085
  %arrayidx477 = getelementptr inbounds %struct.arg, %struct.arg* %277, i64 %idxprom476, !dbg !9085
  %save_area478 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx477, i32 0, i32 5, !dbg !9087
  store %struct.rtx_def* %call475, %struct.rtx_def** %save_area478, align 8, !dbg !9088
  %279 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9089
  %280 = load i32, i32* %argnum, align 4, !dbg !9090
  %idxprom479 = sext i32 %280 to i64, !dbg !9089
  %arrayidx480 = getelementptr inbounds %struct.arg, %struct.arg* %279, i64 %idxprom479, !dbg !9089
  %save_area481 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx480, i32 0, i32 5, !dbg !9091
  %281 = load %struct.rtx_def*, %struct.rtx_def** %save_area481, align 8, !dbg !9091
  %call482 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %281), !dbg !9092
  %282 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !9093
  %283 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9094
  %284 = load i32, i32* %argnum, align 4, !dbg !9094
  %idxprom483 = sext i32 %284 to i64, !dbg !9094
  %arrayidx484 = getelementptr inbounds %struct.arg, %struct.arg* %283, i64 %idxprom483, !dbg !9094
  %locate485 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx484, i32 0, i32 4, !dbg !9094
  %size486 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate485, i32 0, i32 0, !dbg !9094
  %constant487 = getelementptr inbounds %struct.args_size, %struct.args_size* %size486, i32 0, i32 0, !dbg !9094
  %285 = load i64, i64* %constant487, align 8, !dbg !9094
  %call488 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %285), !dbg !9094
  %call489 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %call482, %struct.rtx_def* %282, %struct.rtx_def* %call488, i32 2), !dbg !9095
  br label %if.end499, !dbg !9096

if.else490:                                       ; preds = %if.then450
  %286 = load i32, i32* %save_mode, align 4, !dbg !9097
  %call491 = call %struct.rtx_def* @gen_reg_rtx(i32 %286), !dbg !9099
  %287 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9100
  %288 = load i32, i32* %argnum, align 4, !dbg !9101
  %idxprom492 = sext i32 %288 to i64, !dbg !9100
  %arrayidx493 = getelementptr inbounds %struct.arg, %struct.arg* %287, i64 %idxprom492, !dbg !9100
  %save_area494 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx493, i32 0, i32 5, !dbg !9102
  store %struct.rtx_def* %call491, %struct.rtx_def** %save_area494, align 8, !dbg !9103
  %289 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9104
  %290 = load i32, i32* %argnum, align 4, !dbg !9105
  %idxprom495 = sext i32 %290 to i64, !dbg !9104
  %arrayidx496 = getelementptr inbounds %struct.arg, %struct.arg* %289, i64 %idxprom495, !dbg !9104
  %save_area497 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx496, i32 0, i32 5, !dbg !9106
  %291 = load %struct.rtx_def*, %struct.rtx_def** %save_area497, align 8, !dbg !9106
  %292 = load %struct.rtx_def*, %struct.rtx_def** %stack_area, align 8, !dbg !9107
  %call498 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %291, %struct.rtx_def* %292), !dbg !9108
  br label %if.end499

if.end499:                                        ; preds = %if.else490, %if.then469
  br label %if.end500, !dbg !9109

if.end500:                                        ; preds = %if.end499, %while.end
  br label %if.end501, !dbg !9110

if.end501:                                        ; preds = %if.end500, %lor.lhs.false418
  %293 = load %struct.rtx_def*, %struct.rtx_def** %val394, align 8, !dbg !9111
  %294 = load i32, i32* %mode390, align 4, !dbg !9112
  %295 = load i32, i32* %parm_align, align 4, !dbg !9113
  %296 = load i32, i32* %partial402, align 4, !dbg !9114
  %297 = load %struct.rtx_def*, %struct.rtx_def** %reg398, align 8, !dbg !9115
  %298 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9116
  %299 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9117
  %300 = load i32, i32* %argnum, align 4, !dbg !9117
  %idxprom502 = sext i32 %300 to i64, !dbg !9117
  %arrayidx503 = getelementptr inbounds %struct.arg, %struct.arg* %299, i64 %idxprom502, !dbg !9117
  %locate504 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx503, i32 0, i32 4, !dbg !9117
  %offset505 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate504, i32 0, i32 1, !dbg !9117
  %constant506 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset505, i32 0, i32 0, !dbg !9117
  %301 = load i64, i64* %constant506, align 8, !dbg !9117
  %call507 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %301), !dbg !9117
  %302 = load i32, i32* %reg_parm_stack_space, align 4, !dbg !9118
  %303 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %304 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom508 = sext i32 %304 to i64, !dbg !9119
  %arrayidx509 = getelementptr inbounds %struct.arg, %struct.arg* %303, i64 %idxprom508, !dbg !9119
  %locate510 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx509, i32 0, i32 4, !dbg !9119
  %alignment_pad = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate510, i32 0, i32 3, !dbg !9119
  %var511 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad, i32 0, i32 1, !dbg !9119
  %305 = load %union.tree_node*, %union.tree_node** %var511, align 8, !dbg !9119
  %cmp512 = icmp eq %union.tree_node* %305, null, !dbg !9119
  br i1 %cmp512, label %cond.true514, label %cond.false521, !dbg !9119

cond.true514:                                     ; preds = %if.end501
  %306 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %307 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom515 = sext i32 %307 to i64, !dbg !9119
  %arrayidx516 = getelementptr inbounds %struct.arg, %struct.arg* %306, i64 %idxprom515, !dbg !9119
  %locate517 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx516, i32 0, i32 4, !dbg !9119
  %alignment_pad518 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate517, i32 0, i32 3, !dbg !9119
  %constant519 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad518, i32 0, i32 0, !dbg !9119
  %308 = load i64, i64* %constant519, align 8, !dbg !9119
  %call520 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %308), !dbg !9119
  br label %cond.end553, !dbg !9119

cond.false521:                                    ; preds = %if.end501
  %309 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %310 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom522 = sext i32 %310 to i64, !dbg !9119
  %arrayidx523 = getelementptr inbounds %struct.arg, %struct.arg* %309, i64 %idxprom522, !dbg !9119
  %locate524 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx523, i32 0, i32 4, !dbg !9119
  %alignment_pad525 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate524, i32 0, i32 3, !dbg !9119
  %var526 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad525, i32 0, i32 1, !dbg !9119
  %311 = load %union.tree_node*, %union.tree_node** %var526, align 8, !dbg !9119
  %cmp527 = icmp eq %union.tree_node* %311, null, !dbg !9119
  br i1 %cmp527, label %cond.true529, label %cond.false536, !dbg !9119

cond.true529:                                     ; preds = %cond.false521
  %312 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %313 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom530 = sext i32 %313 to i64, !dbg !9119
  %arrayidx531 = getelementptr inbounds %struct.arg, %struct.arg* %312, i64 %idxprom530, !dbg !9119
  %locate532 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx531, i32 0, i32 4, !dbg !9119
  %alignment_pad533 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate532, i32 0, i32 3, !dbg !9119
  %constant534 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad533, i32 0, i32 0, !dbg !9119
  %314 = load i64, i64* %constant534, align 8, !dbg !9119
  %call535 = call %union.tree_node* @size_int_kind(i64 %314, i32 1), !dbg !9119
  br label %cond.end550, !dbg !9119

cond.false536:                                    ; preds = %cond.false521
  %315 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([4 x %union.tree_node*], [4 x %union.tree_node*]* @sizetype_tab, i64 0, i64 1), align 8, !dbg !9119
  %316 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %317 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom537 = sext i32 %317 to i64, !dbg !9119
  %arrayidx538 = getelementptr inbounds %struct.arg, %struct.arg* %316, i64 %idxprom537, !dbg !9119
  %locate539 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx538, i32 0, i32 4, !dbg !9119
  %alignment_pad540 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate539, i32 0, i32 3, !dbg !9119
  %var541 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad540, i32 0, i32 1, !dbg !9119
  %318 = load %union.tree_node*, %union.tree_node** %var541, align 8, !dbg !9119
  %call542 = call %union.tree_node* @fold_convert_loc(i32 0, %union.tree_node* %315, %union.tree_node* %318), !dbg !9119
  %319 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9119
  %320 = load i32, i32* %argnum, align 4, !dbg !9119
  %idxprom543 = sext i32 %320 to i64, !dbg !9119
  %arrayidx544 = getelementptr inbounds %struct.arg, %struct.arg* %319, i64 %idxprom543, !dbg !9119
  %locate545 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx544, i32 0, i32 4, !dbg !9119
  %alignment_pad546 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate545, i32 0, i32 3, !dbg !9119
  %constant547 = getelementptr inbounds %struct.args_size, %struct.args_size* %alignment_pad546, i32 0, i32 0, !dbg !9119
  %321 = load i64, i64* %constant547, align 8, !dbg !9119
  %call548 = call %union.tree_node* @size_int_kind(i64 %321, i32 1), !dbg !9119
  %call549 = call %union.tree_node* @size_binop_loc(i32 0, i32 63, %union.tree_node* %call542, %union.tree_node* %call548), !dbg !9119
  br label %cond.end550, !dbg !9119

cond.end550:                                      ; preds = %cond.false536, %cond.true529
  %cond551 = phi %union.tree_node* [ %call535, %cond.true529 ], [ %call549, %cond.false536 ], !dbg !9119
  %call552 = call %struct.rtx_def* @expand_normal(%union.tree_node* %cond551), !dbg !9119
  br label %cond.end553, !dbg !9119

cond.end553:                                      ; preds = %cond.end550, %cond.true514
  %cond554 = phi %struct.rtx_def* [ %call520, %cond.true514 ], [ %call552, %cond.end550 ], !dbg !9119
  call void @emit_push_insn(%struct.rtx_def* %293, i32 %294, %union.tree_node* null, %struct.rtx_def* null, i32 %295, i32 %296, %struct.rtx_def* %297, i32 0, %struct.rtx_def* %298, %struct.rtx_def* %call507, i32 %302, %struct.rtx_def* %cond554), !dbg !9120
  %322 = load i32, i32* @target_flags, align 4, !dbg !9121
  %and555 = and i32 %322, 4, !dbg !9121
  %cmp556 = icmp ne i32 %and555, 0, !dbg !9121
  br i1 %cmp556, label %if.then562, label %lor.lhs.false558, !dbg !9121

lor.lhs.false558:                                 ; preds = %cond.end553
  %call559 = call i32 @ix86_cfun_abi(), !dbg !9121
  %cmp560 = icmp eq i32 %call559, 1, !dbg !9121
  br i1 %cmp560, label %if.then562, label %if.end572, !dbg !9123

if.then562:                                       ; preds = %lor.lhs.false558, %cond.end553
  %323 = load i32, i32* %lower_bound, align 4, !dbg !9124
  store i32 %323, i32* %i, align 4, !dbg !9126
  br label %for.cond563, !dbg !9127

for.cond563:                                      ; preds = %for.inc569, %if.then562
  %324 = load i32, i32* %i, align 4, !dbg !9128
  %325 = load i32, i32* %upper_bound, align 4, !dbg !9130
  %cmp564 = icmp slt i32 %324, %325, !dbg !9131
  br i1 %cmp564, label %for.body566, label %for.end571, !dbg !9132

for.body566:                                      ; preds = %for.cond563
  %326 = load i8*, i8** @stack_usage_map, align 8, !dbg !9133
  %327 = load i32, i32* %i, align 4, !dbg !9134
  %idxprom567 = sext i32 %327 to i64, !dbg !9133
  %arrayidx568 = getelementptr inbounds i8, i8* %326, i64 %idxprom567, !dbg !9133
  store i8 1, i8* %arrayidx568, align 1, !dbg !9135
  br label %for.inc569, !dbg !9133

for.inc569:                                       ; preds = %for.body566
  %328 = load i32, i32* %i, align 4, !dbg !9136
  %inc570 = add nsw i32 %328, 1, !dbg !9136
  store i32 %inc570, i32* %i, align 4, !dbg !9136
  br label %for.cond563, !dbg !9137, !llvm.loop !9138

for.end571:                                       ; preds = %for.cond563
  br label %if.end572, !dbg !9139

if.end572:                                        ; preds = %for.end571, %lor.lhs.false558
  %329 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9140
  %add573 = add nsw i32 %329, 1, !dbg !9140
  store i32 %add573, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9140
  %330 = load i32, i32* %flags, align 4, !dbg !9141
  %and574 = and i32 %330, 1, !dbg !9143
  %tobool575 = icmp ne i32 %and574, 0, !dbg !9143
  br i1 %tobool575, label %if.then587, label %lor.lhs.false576, !dbg !9144

lor.lhs.false576:                                 ; preds = %if.end572
  %331 = load i32, i32* %flags, align 4, !dbg !9145
  %and577 = and i32 %331, 2, !dbg !9146
  %tobool578 = icmp ne i32 %and577, 0, !dbg !9146
  br i1 %tobool578, label %land.lhs.true579, label %if.end606, !dbg !9147

land.lhs.true579:                                 ; preds = %lor.lhs.false576
  %332 = load i32, i32* @target_flags, align 4, !dbg !9148
  %and580 = and i32 %332, 4, !dbg !9148
  %cmp581 = icmp ne i32 %and580, 0, !dbg !9148
  br i1 %cmp581, label %if.then587, label %lor.lhs.false583, !dbg !9148

lor.lhs.false583:                                 ; preds = %land.lhs.true579
  %call584 = call i32 @ix86_cfun_abi(), !dbg !9148
  %cmp585 = icmp eq i32 %call584, 1, !dbg !9148
  br i1 %cmp585, label %if.then587, label %if.end606, !dbg !9149

if.then587:                                       ; preds = %lor.lhs.false583, %land.lhs.true579, %if.end572
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %use, metadata !9150, metadata !DIExpression()), !dbg !9152
  %333 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9153
  %tobool588 = icmp ne %struct.rtx_def* %333, null, !dbg !9153
  br i1 %tobool588, label %if.then589, label %if.else596, !dbg !9155

if.then589:                                       ; preds = %if.then587
  %334 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9156
  %335 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9157
  %336 = load i32, i32* %argnum, align 4, !dbg !9158
  %idxprom590 = sext i32 %336 to i64, !dbg !9157
  %arrayidx591 = getelementptr inbounds %struct.arg, %struct.arg* %335, i64 %idxprom590, !dbg !9157
  %locate592 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx591, i32 0, i32 4, !dbg !9159
  %offset593 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate592, i32 0, i32 1, !dbg !9160
  %constant594 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset593, i32 0, i32 0, !dbg !9161
  %337 = load i64, i64* %constant594, align 8, !dbg !9161
  %call595 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %334, i64 %337), !dbg !9162
  store %struct.rtx_def* %call595, %struct.rtx_def** %use, align 8, !dbg !9163
  br label %if.end599, !dbg !9164

if.else596:                                       ; preds = %if.then587
  %338 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([11 x %struct.rtx_def*], [11 x %struct.rtx_def*]* @global_rtl, i64 0, i64 9), align 8, !dbg !9165
  %call597 = call %struct.rtx_def* @gen_rtx_fmt_0_stat(i32 38, i32 16), !dbg !9165
  %call598 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 49, i32 16, %struct.rtx_def* %338, %struct.rtx_def* %call597), !dbg !9165
  store %struct.rtx_def* %call598, %struct.rtx_def** %use, align 8, !dbg !9166
  br label %if.end599

if.end599:                                        ; preds = %if.else596, %if.then589
  %339 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9167
  %340 = load i32, i32* %argnum, align 4, !dbg !9168
  %idxprom600 = sext i32 %340 to i64, !dbg !9167
  %arrayidx601 = getelementptr inbounds %struct.arg, %struct.arg* %339, i64 %idxprom600, !dbg !9167
  %mode602 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx601, i32 0, i32 1, !dbg !9169
  %341 = load i32, i32* %mode602, align 8, !dbg !9169
  %342 = load %struct.rtx_def*, %struct.rtx_def** %use, align 8, !dbg !9170
  %call603 = call %struct.rtx_def* @gen_rtx_MEM(i32 %341, %struct.rtx_def* %342), !dbg !9171
  store %struct.rtx_def* %call603, %struct.rtx_def** %use, align 8, !dbg !9172
  %343 = load %struct.rtx_def*, %struct.rtx_def** %use, align 8, !dbg !9173
  %call604 = call %struct.rtx_def* @gen_rtx_fmt_e_stat(i32 24, i32 0, %struct.rtx_def* %343), !dbg !9173
  store %struct.rtx_def* %call604, %struct.rtx_def** %use, align 8, !dbg !9174
  %344 = load %struct.rtx_def*, %struct.rtx_def** %use, align 8, !dbg !9175
  %345 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !9175
  %call605 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 3, i32 0, %struct.rtx_def* %344, %struct.rtx_def* %345), !dbg !9175
  store %struct.rtx_def* %call605, %struct.rtx_def** %call_fusage, align 8, !dbg !9176
  br label %if.end606, !dbg !9177

if.end606:                                        ; preds = %if.end599, %lor.lhs.false583, %lor.lhs.false576
  br label %if.end607, !dbg !9178

if.end607:                                        ; preds = %if.end606, %land.lhs.true411
  br label %for.inc608, !dbg !9179

for.inc608:                                       ; preds = %if.end607
  %346 = load i32, i32* %count, align 4, !dbg !9180
  %inc609 = add nsw i32 %346, 1, !dbg !9180
  store i32 %inc609, i32* %count, align 4, !dbg !9180
  %347 = load i32, i32* %inc, align 4, !dbg !9181
  %348 = load i32, i32* %argnum, align 4, !dbg !9182
  %add610 = add nsw i32 %348, %347, !dbg !9182
  store i32 %add610, i32* %argnum, align 4, !dbg !9182
  br label %for.cond386, !dbg !9183, !llvm.loop !9184

for.end611:                                       ; preds = %for.cond386
  %349 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9186
  %cmp612 = icmp eq %struct.rtx_def* %349, null, !dbg !9188
  br i1 %cmp612, label %land.lhs.true614, label %if.end620, !dbg !9189

land.lhs.true614:                                 ; preds = %for.end611
  br i1 true, label %if.end620, label %if.then615, !dbg !9190

if.then615:                                       ; preds = %land.lhs.true614
  %constant616 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !9191
  %350 = load i64, i64* %constant616, align 8, !dbg !9191
  %constant617 = getelementptr inbounds %struct.args_size, %struct.args_size* %original_args_size, i32 0, i32 0, !dbg !9191
  %351 = load i64, i64* %constant617, align 8, !dbg !9191
  %sub618 = sub nsw i64 %350, %351, !dbg !9191
  %call619 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub618), !dbg !9191
  call void @anti_adjust_stack(%struct.rtx_def* %call619), !dbg !9192
  br label %if.end620, !dbg !9192

if.end620:                                        ; preds = %if.then615, %land.lhs.true614, %for.end611
  %352 = load i32, i32* %nargs.addr, align 4, !dbg !9193
  %sub621 = sub nsw i32 %352, 1, !dbg !9195
  store i32 %sub621, i32* %argnum, align 4, !dbg !9196
  %353 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8, !dbg !9197
  %call622 = call %struct.rtx_def* @prepare_call_address(%union.tree_node* null, %struct.rtx_def* %353, %struct.rtx_def* null, %struct.rtx_def** %call_fusage, i32 0, i32 0), !dbg !9198
  store %struct.rtx_def* %call622, %struct.rtx_def** %fun, align 8, !dbg !9199
  store i32 0, i32* %count, align 4, !dbg !9200
  br label %for.cond623, !dbg !9202

for.cond623:                                      ; preds = %for.inc666, %if.end620
  %354 = load i32, i32* %count, align 4, !dbg !9203
  %355 = load i32, i32* %nargs.addr, align 4, !dbg !9205
  %cmp624 = icmp slt i32 %354, %355, !dbg !9206
  br i1 %cmp624, label %for.body626, label %for.end669, !dbg !9207

for.body626:                                      ; preds = %for.cond623
  call void @llvm.dbg.declare(metadata i32* %mode627, metadata !9208, metadata !DIExpression()), !dbg !9210
  %356 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9211
  %357 = load i32, i32* %argnum, align 4, !dbg !9212
  %idxprom628 = sext i32 %357 to i64, !dbg !9211
  %arrayidx629 = getelementptr inbounds %struct.arg, %struct.arg* %356, i64 %idxprom628, !dbg !9211
  %mode630 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx629, i32 0, i32 1, !dbg !9213
  %358 = load i32, i32* %mode630, align 8, !dbg !9213
  store i32 %358, i32* %mode627, align 4, !dbg !9210
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %val631, metadata !9214, metadata !DIExpression()), !dbg !9215
  %359 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9216
  %360 = load i32, i32* %argnum, align 4, !dbg !9217
  %idxprom632 = sext i32 %360 to i64, !dbg !9216
  %arrayidx633 = getelementptr inbounds %struct.arg, %struct.arg* %359, i64 %idxprom632, !dbg !9216
  %value634 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx633, i32 0, i32 0, !dbg !9218
  %361 = load %struct.rtx_def*, %struct.rtx_def** %value634, align 8, !dbg !9218
  store %struct.rtx_def* %361, %struct.rtx_def** %val631, align 8, !dbg !9215
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg635, metadata !9219, metadata !DIExpression()), !dbg !9220
  %362 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9221
  %363 = load i32, i32* %argnum, align 4, !dbg !9222
  %idxprom636 = sext i32 %363 to i64, !dbg !9221
  %arrayidx637 = getelementptr inbounds %struct.arg, %struct.arg* %362, i64 %idxprom636, !dbg !9221
  %reg638 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx637, i32 0, i32 2, !dbg !9223
  %364 = load %struct.rtx_def*, %struct.rtx_def** %reg638, align 8, !dbg !9223
  store %struct.rtx_def* %364, %struct.rtx_def** %reg635, align 8, !dbg !9220
  call void @llvm.dbg.declare(metadata i32* %partial639, metadata !9224, metadata !DIExpression()), !dbg !9225
  %365 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9226
  %366 = load i32, i32* %argnum, align 4, !dbg !9227
  %idxprom640 = sext i32 %366 to i64, !dbg !9226
  %arrayidx641 = getelementptr inbounds %struct.arg, %struct.arg* %365, i64 %idxprom640, !dbg !9226
  %partial642 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx641, i32 0, i32 3, !dbg !9228
  %367 = load i32, i32* %partial642, align 8, !dbg !9228
  store i32 %367, i32* %partial639, align 4, !dbg !9225
  %368 = load %struct.rtx_def*, %struct.rtx_def** %reg635, align 8, !dbg !9229
  %cmp643 = icmp ne %struct.rtx_def* %368, null, !dbg !9231
  br i1 %cmp643, label %land.lhs.true645, label %if.else655, !dbg !9232

land.lhs.true645:                                 ; preds = %for.body626
  %369 = load %struct.rtx_def*, %struct.rtx_def** %reg635, align 8, !dbg !9233
  %370 = bitcast %struct.rtx_def* %369 to i32*, !dbg !9233
  %bf.load646 = load i32, i32* %370, align 8, !dbg !9233
  %bf.clear647 = and i32 %bf.load646, 65535, !dbg !9233
  %cmp648 = icmp eq i32 %bf.clear647, 15, !dbg !9234
  br i1 %cmp648, label %if.then650, label %if.else655, !dbg !9235

if.then650:                                       ; preds = %land.lhs.true645
  %371 = load %struct.rtx_def*, %struct.rtx_def** %reg635, align 8, !dbg !9236
  %372 = load %struct.rtx_def*, %struct.rtx_def** %val631, align 8, !dbg !9237
  %373 = load i32, i32* %mode627, align 4, !dbg !9238
  %idxprom651 = zext i32 %373 to i64, !dbg !9238
  %arrayidx652 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom651, !dbg !9238
  %374 = load i8, i8* %arrayidx652, align 1, !dbg !9238
  %conv653 = zext i8 %374 to i16, !dbg !9238
  %conv654 = zext i16 %conv653 to i32, !dbg !9238
  call void @emit_group_load(%struct.rtx_def* %371, %struct.rtx_def* %372, %union.tree_node* null, i32 %conv654), !dbg !9239
  br label %if.end664, !dbg !9239

if.else655:                                       ; preds = %land.lhs.true645, %for.body626
  %375 = load %struct.rtx_def*, %struct.rtx_def** %reg635, align 8, !dbg !9240
  %cmp656 = icmp ne %struct.rtx_def* %375, null, !dbg !9242
  br i1 %cmp656, label %land.lhs.true658, label %if.end663, !dbg !9243

land.lhs.true658:                                 ; preds = %if.else655
  %376 = load i32, i32* %partial639, align 4, !dbg !9244
  %cmp659 = icmp eq i32 %376, 0, !dbg !9245
  br i1 %cmp659, label %if.then661, label %if.end663, !dbg !9246

if.then661:                                       ; preds = %land.lhs.true658
  %377 = load %struct.rtx_def*, %struct.rtx_def** %reg635, align 8, !dbg !9247
  %378 = load %struct.rtx_def*, %struct.rtx_def** %val631, align 8, !dbg !9248
  %call662 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %377, %struct.rtx_def* %378), !dbg !9249
  br label %if.end663, !dbg !9249

if.end663:                                        ; preds = %if.then661, %land.lhs.true658, %if.else655
  br label %if.end664

if.end664:                                        ; preds = %if.end663, %if.then650
  %379 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9250
  %add665 = add nsw i32 %379, 1, !dbg !9250
  store i32 %add665, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9250
  br label %for.inc666, !dbg !9251

for.inc666:                                       ; preds = %if.end664
  %380 = load i32, i32* %count, align 4, !dbg !9252
  %inc667 = add nsw i32 %380, 1, !dbg !9252
  store i32 %inc667, i32* %count, align 4, !dbg !9252
  %381 = load i32, i32* %inc, align 4, !dbg !9253
  %382 = load i32, i32* %argnum, align 4, !dbg !9254
  %add668 = add nsw i32 %382, %381, !dbg !9254
  store i32 %add668, i32* %argnum, align 4, !dbg !9254
  br label %for.cond623, !dbg !9255, !llvm.loop !9256

for.end669:                                       ; preds = %for.cond623
  store i32 0, i32* %count, align 4, !dbg !9258
  br label %for.cond670, !dbg !9260

for.cond670:                                      ; preds = %for.inc708, %for.end669
  %383 = load i32, i32* %count, align 4, !dbg !9261
  %384 = load i32, i32* %nargs.addr, align 4, !dbg !9263
  %cmp671 = icmp slt i32 %383, %384, !dbg !9264
  br i1 %cmp671, label %for.body673, label %for.end710, !dbg !9265

for.body673:                                      ; preds = %for.cond670
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %reg674, metadata !9266, metadata !DIExpression()), !dbg !9268
  %385 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9269
  %386 = load i32, i32* %count, align 4, !dbg !9270
  %idxprom675 = sext i32 %386 to i64, !dbg !9269
  %arrayidx676 = getelementptr inbounds %struct.arg, %struct.arg* %385, i64 %idxprom675, !dbg !9269
  %reg677 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx676, i32 0, i32 2, !dbg !9271
  %387 = load %struct.rtx_def*, %struct.rtx_def** %reg677, align 8, !dbg !9271
  store %struct.rtx_def* %387, %struct.rtx_def** %reg674, align 8, !dbg !9268
  %388 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9272
  %cmp678 = icmp ne %struct.rtx_def* %388, null, !dbg !9274
  br i1 %cmp678, label %land.lhs.true680, label %if.else686, !dbg !9275

land.lhs.true680:                                 ; preds = %for.body673
  %389 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9276
  %390 = bitcast %struct.rtx_def* %389 to i32*, !dbg !9276
  %bf.load681 = load i32, i32* %390, align 8, !dbg !9276
  %bf.clear682 = and i32 %bf.load681, 65535, !dbg !9276
  %cmp683 = icmp eq i32 %bf.clear682, 15, !dbg !9277
  br i1 %cmp683, label %if.then685, label %if.else686, !dbg !9278

if.then685:                                       ; preds = %land.lhs.true680
  %391 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9279
  call void @use_group_regs(%struct.rtx_def** %call_fusage, %struct.rtx_def* %391), !dbg !9280
  br label %if.end707, !dbg !9280

if.else686:                                       ; preds = %land.lhs.true680, %for.body673
  %392 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9281
  %cmp687 = icmp ne %struct.rtx_def* %392, null, !dbg !9283
  br i1 %cmp687, label %if.then689, label %if.end706, !dbg !9284

if.then689:                                       ; preds = %if.else686
  call void @llvm.dbg.declare(metadata i32* %partial690, metadata !9285, metadata !DIExpression()), !dbg !9287
  %393 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9288
  %394 = load i32, i32* %count, align 4, !dbg !9289
  %idxprom691 = sext i32 %394 to i64, !dbg !9288
  %arrayidx692 = getelementptr inbounds %struct.arg, %struct.arg* %393, i64 %idxprom691, !dbg !9288
  %partial693 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx692, i32 0, i32 3, !dbg !9290
  %395 = load i32, i32* %partial693, align 8, !dbg !9290
  store i32 %395, i32* %partial690, align 4, !dbg !9287
  %396 = load i32, i32* %partial690, align 4, !dbg !9291
  %tobool694 = icmp ne i32 %396, 0, !dbg !9291
  br i1 %tobool694, label %if.then695, label %if.else704, !dbg !9293

if.then695:                                       ; preds = %if.then689
  call void @llvm.dbg.declare(metadata i32* %nregs, metadata !9294, metadata !DIExpression()), !dbg !9296
  %397 = load i32, i32* %partial690, align 4, !dbg !9297
  %rem = srem i32 %397, 4, !dbg !9297
  %cmp696 = icmp eq i32 %rem, 0, !dbg !9297
  br i1 %cmp696, label %cond.false699, label %cond.true698, !dbg !9297

cond.true698:                                     ; preds = %if.then695
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3780, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9297
  br label %cond.end700, !dbg !9297

cond.false699:                                    ; preds = %if.then695
  br label %cond.end700, !dbg !9297

cond.end700:                                      ; preds = %cond.false699, %cond.true698
  %cond701 = phi i32 [ 0, %cond.true698 ], [ 0, %cond.false699 ], !dbg !9297
  %398 = load i32, i32* %partial690, align 4, !dbg !9298
  %div702 = sdiv i32 %398, 4, !dbg !9299
  store i32 %div702, i32* %nregs, align 4, !dbg !9300
  %399 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9301
  %call703 = call i32 @rhs_regno(%struct.rtx_def* %399), !dbg !9301
  %400 = load i32, i32* %nregs, align 4, !dbg !9302
  call void @use_regs(%struct.rtx_def** %call_fusage, i32 %call703, i32 %400), !dbg !9303
  br label %if.end705, !dbg !9304

if.else704:                                       ; preds = %if.then689
  %401 = load %struct.rtx_def*, %struct.rtx_def** %reg674, align 8, !dbg !9305
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %401), !dbg !9306
  br label %if.end705

if.end705:                                        ; preds = %if.else704, %cond.end700
  br label %if.end706, !dbg !9307

if.end706:                                        ; preds = %if.end705, %if.else686
  br label %if.end707

if.end707:                                        ; preds = %if.end706, %if.then685
  br label %for.inc708, !dbg !9308

for.inc708:                                       ; preds = %if.end707
  %402 = load i32, i32* %count, align 4, !dbg !9309
  %inc709 = add nsw i32 %402, 1, !dbg !9309
  store i32 %inc709, i32* %count, align 4, !dbg !9309
  br label %for.cond670, !dbg !9310, !llvm.loop !9311

for.end710:                                       ; preds = %for.cond670
  %403 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9313
  %cmp711 = icmp ne %struct.rtx_def* %403, null, !dbg !9315
  br i1 %cmp711, label %land.lhs.true713, label %if.end732, !dbg !9316

land.lhs.true713:                                 ; preds = %for.end710
  %404 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !9317
  %cmp714 = icmp ne %struct.rtx_def* %404, null, !dbg !9318
  br i1 %cmp714, label %land.lhs.true716, label %if.end732, !dbg !9319

land.lhs.true716:                                 ; preds = %land.lhs.true713
  %405 = load i32, i32* %pcc_struct_value, align 4, !dbg !9320
  %tobool717 = icmp ne i32 %405, 0, !dbg !9320
  br i1 %tobool717, label %if.end732, label %if.then718, !dbg !9321

if.then718:                                       ; preds = %land.lhs.true716
  %406 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !9322
  %407 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9324
  %u719 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %407, i32 0, i32 1, !dbg !9324
  %fld720 = bitcast %union.u* %u719 to [1 x %union.rtunion_def]*, !dbg !9324
  %arrayidx721 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld720, i64 0, i64 0, !dbg !9324
  %rt_rtx722 = bitcast %union.rtunion_def* %arrayidx721 to %struct.rtx_def**, !dbg !9324
  %408 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx722, align 8, !dbg !9324
  %call723 = call %struct.rtx_def* @force_operand(%struct.rtx_def* %408, %struct.rtx_def* null), !dbg !9325
  %call724 = call %struct.rtx_def* @force_reg(i32 16, %struct.rtx_def* %call723), !dbg !9326
  %call725 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %406, %struct.rtx_def* %call724), !dbg !9327
  %409 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !9328
  %410 = bitcast %struct.rtx_def* %409 to i32*, !dbg !9328
  %bf.load726 = load i32, i32* %410, align 8, !dbg !9328
  %bf.clear727 = and i32 %bf.load726, 65535, !dbg !9328
  %cmp728 = icmp eq i32 %bf.clear727, 37, !dbg !9328
  br i1 %cmp728, label %if.then730, label %if.end731, !dbg !9330

if.then730:                                       ; preds = %if.then718
  %411 = load %struct.rtx_def*, %struct.rtx_def** %struct_value, align 8, !dbg !9331
  call void @use_reg(%struct.rtx_def** %call_fusage, %struct.rtx_def* %411), !dbg !9332
  br label %if.end731, !dbg !9332

if.end731:                                        ; preds = %if.then730, %if.then718
  br label %if.end732, !dbg !9333

if.end732:                                        ; preds = %if.end731, %land.lhs.true716, %land.lhs.true713, %for.end710
  %412 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9334
  %add733 = add nsw i32 %412, 1, !dbg !9334
  store i32 %add733, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9334
  %413 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9335
  %cmp734 = icmp eq %struct.rtx_def* %413, null, !dbg !9336
  br i1 %cmp734, label %land.lhs.true736, label %cond.false741, !dbg !9337

land.lhs.true736:                                 ; preds = %if.end732
  %414 = load i32, i32* %outmode.addr, align 4, !dbg !9338
  %cmp737 = icmp ne i32 %414, 0, !dbg !9339
  br i1 %cmp737, label %cond.true739, label %cond.false741, !dbg !9335

cond.true739:                                     ; preds = %land.lhs.true736
  %415 = load i32, i32* %outmode.addr, align 4, !dbg !9340
  %416 = load %struct.rtx_def*, %struct.rtx_def** %orgfun.addr, align 8, !dbg !9341
  %call740 = call %struct.rtx_def* @hard_libcall_value(i32 %415, %struct.rtx_def* %416), !dbg !9342
  br label %cond.end742, !dbg !9335

cond.false741:                                    ; preds = %land.lhs.true736, %if.end732
  br label %cond.end742, !dbg !9335

cond.end742:                                      ; preds = %cond.false741, %cond.true739
  %cond743 = phi %struct.rtx_def* [ %call740, %cond.true739 ], [ null, %cond.false741 ], !dbg !9335
  store %struct.rtx_def* %cond743, %struct.rtx_def** %valreg, align 8, !dbg !9343
  %417 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 2), align 8, !dbg !9344
  %418 = load i32, i32* @ix86_preferred_stack_boundary, align 4, !dbg !9344
  %div744 = udiv i32 %418, 8, !dbg !9344
  %sub745 = sub i32 %div744, 1, !dbg !9344
  %and746 = and i32 %417, %sub745, !dbg !9344
  %tobool747 = icmp ne i32 %and746, 0, !dbg !9344
  br i1 %tobool747, label %cond.true748, label %cond.false749, !dbg !9344

cond.true748:                                     ; preds = %cond.end742
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3808, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9344
  br label %cond.end750, !dbg !9344

cond.false749:                                    ; preds = %cond.end742
  br label %cond.end750, !dbg !9344

cond.end750:                                      ; preds = %cond.false749, %cond.true748
  %cond751 = phi i32 [ 0, %cond.true748 ], [ 0, %cond.false749 ], !dbg !9344
  %call752 = call %struct.rtx_def* @get_last_insn(), !dbg !9345
  store %struct.rtx_def* %call752, %struct.rtx_def** %before_call, align 8, !dbg !9346
  %419 = load %struct.rtx_def*, %struct.rtx_def** %fun, align 8, !dbg !9347
  %420 = load %struct.rtx_def*, %struct.rtx_def** %orgfun.addr, align 8, !dbg !9348
  %u753 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %420, i32 0, i32 1, !dbg !9348
  %fld754 = bitcast %union.u* %u753 to [1 x %union.rtunion_def]*, !dbg !9348
  %arrayidx755 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld754, i64 0, i64 0, !dbg !9348
  %rt_str = bitcast %union.rtunion_def* %arrayidx755 to i8**, !dbg !9348
  %421 = load i8*, i8** %rt_str, align 8, !dbg !9348
  %call756 = call %union.tree_node* @get_identifier(i8* %421), !dbg !9349
  %422 = load %union.tree_node*, %union.tree_node** %tfom, align 8, !dbg !9350
  %call757 = call %union.tree_node* @build_function_type(%union.tree_node* %422, %union.tree_node* null), !dbg !9351
  %constant758 = getelementptr inbounds %struct.args_size, %struct.args_size* %original_args_size, i32 0, i32 0, !dbg !9352
  %423 = load i64, i64* %constant758, align 8, !dbg !9352
  %constant759 = getelementptr inbounds %struct.args_size, %struct.args_size* %args_size, i32 0, i32 0, !dbg !9353
  %424 = load i64, i64* %constant759, align 8, !dbg !9353
  %425 = load i32, i32* %struct_value_size, align 4, !dbg !9354
  %conv760 = sext i32 %425 to i64, !dbg !9354
  %426 = load %union.tree_node*, %union.tree_node** getelementptr inbounds ([131 x %union.tree_node*], [131 x %union.tree_node*]* @global_trees, i64 0, i64 38), align 16, !dbg !9355
  %call761 = call %struct.rtx_def* @function_arg(%struct.ix86_args* %args_so_far, i32 0, %union.tree_node* %426, i32 1), !dbg !9355
  %427 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9356
  %428 = load i32, i32* %old_inhibit_defer_pop, align 4, !dbg !9357
  %add762 = add nsw i32 %428, 1, !dbg !9358
  %429 = load %struct.rtx_def*, %struct.rtx_def** %call_fusage, align 8, !dbg !9359
  %430 = load i32, i32* %flags, align 4, !dbg !9360
  call void @emit_call_1(%struct.rtx_def* %419, %union.tree_node* null, %union.tree_node* %call756, %union.tree_node* %call757, i64 %423, i64 %424, i64 %conv760, %struct.rtx_def* %call761, %struct.rtx_def* %427, i32 %add762, %struct.rtx_def* %429, i32 %430, %struct.ix86_args* %args_so_far), !dbg !9361
  %431 = load i32, i32* %flags, align 4, !dbg !9362
  %and763 = and i32 %431, 8, !dbg !9364
  %tobool764 = icmp ne i32 %and763, 0, !dbg !9364
  br i1 %tobool764, label %if.then765, label %if.end787, !dbg !9365

if.then765:                                       ; preds = %cond.end750
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !9366, metadata !DIExpression()), !dbg !9368
  %call766 = call %struct.rtx_def* @get_last_insn(), !dbg !9369
  store %struct.rtx_def* %call766, %struct.rtx_def** %last, align 8, !dbg !9368
  br label %while.cond767, !dbg !9370

while.cond767:                                    ; preds = %cond.end783, %if.then765
  %432 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9371
  %433 = bitcast %struct.rtx_def* %432 to i32*, !dbg !9371
  %bf.load768 = load i32, i32* %433, align 8, !dbg !9371
  %bf.clear769 = and i32 %bf.load768, 65535, !dbg !9371
  %cmp770 = icmp eq i32 %bf.clear769, 10, !dbg !9371
  %lnot772 = xor i1 %cmp770, true, !dbg !9372
  br i1 %lnot772, label %while.body774, label %while.end785, !dbg !9370

while.body774:                                    ; preds = %while.cond767
  %434 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9373
  %u775 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %434, i32 0, i32 1, !dbg !9373
  %fld776 = bitcast %union.u* %u775 to [1 x %union.rtunion_def]*, !dbg !9373
  %arrayidx777 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld776, i64 0, i64 1, !dbg !9373
  %rt_rtx778 = bitcast %union.rtunion_def* %arrayidx777 to %struct.rtx_def**, !dbg !9373
  %435 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx778, align 8, !dbg !9373
  store %struct.rtx_def* %435, %struct.rtx_def** %last, align 8, !dbg !9375
  %436 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9376
  %437 = load %struct.rtx_def*, %struct.rtx_def** %before_call, align 8, !dbg !9376
  %cmp779 = icmp ne %struct.rtx_def* %436, %437, !dbg !9376
  br i1 %cmp779, label %cond.false782, label %cond.true781, !dbg !9376

cond.true781:                                     ; preds = %while.body774
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3844, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9376
  br label %cond.end783, !dbg !9376

cond.false782:                                    ; preds = %while.body774
  br label %cond.end783, !dbg !9376

cond.end783:                                      ; preds = %cond.false782, %cond.true781
  %cond784 = phi i32 [ 0, %cond.true781 ], [ 0, %cond.false782 ], !dbg !9376
  br label %while.cond767, !dbg !9370, !llvm.loop !9377

while.end785:                                     ; preds = %while.cond767
  %438 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !9379
  %call786 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %438), !dbg !9380
  br label %if.end787, !dbg !9381

if.end787:                                        ; preds = %while.end785, %cond.end750
  %439 = load i32, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9382
  %sub788 = sub nsw i32 %439, 1, !dbg !9382
  store i32 %sub788, i32* getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 0, i32 1), align 4, !dbg !9382
  call void @pop_temp_slots(), !dbg !9383
  %440 = load i32, i32* %outmode.addr, align 4, !dbg !9384
  %cmp789 = icmp ne i32 %440, 0, !dbg !9386
  br i1 %cmp789, label %land.lhs.true791, label %if.end860, !dbg !9387

land.lhs.true791:                                 ; preds = %if.end787
  %441 = load i32, i32* %retval.addr, align 4, !dbg !9388
  %tobool792 = icmp ne i32 %441, 0, !dbg !9388
  br i1 %tobool792, label %if.then793, label %if.end860, !dbg !9389

if.then793:                                       ; preds = %land.lhs.true791
  %442 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9390
  %tobool794 = icmp ne %struct.rtx_def* %442, null, !dbg !9390
  br i1 %tobool794, label %if.then795, label %if.else805, !dbg !9393

if.then795:                                       ; preds = %if.then793
  %443 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9394
  %cmp796 = icmp eq %struct.rtx_def* %443, null, !dbg !9397
  br i1 %cmp796, label %if.then798, label %if.end799, !dbg !9398

if.then798:                                       ; preds = %if.then795
  %444 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9399
  store %struct.rtx_def* %444, %struct.rtx_def** %value.addr, align 8, !dbg !9400
  br label %if.end799, !dbg !9401

if.end799:                                        ; preds = %if.then798, %if.then795
  %445 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9402
  %446 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9404
  %cmp800 = icmp ne %struct.rtx_def* %445, %446, !dbg !9405
  br i1 %cmp800, label %if.then802, label %if.end804, !dbg !9406

if.then802:                                       ; preds = %if.end799
  %447 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9407
  %448 = load %struct.rtx_def*, %struct.rtx_def** %mem_value, align 8, !dbg !9408
  %call803 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %447, %struct.rtx_def* %448), !dbg !9409
  br label %if.end804, !dbg !9409

if.end804:                                        ; preds = %if.then802, %if.end799
  br label %if.end859, !dbg !9410

if.else805:                                       ; preds = %if.then793
  %449 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9411
  %450 = bitcast %struct.rtx_def* %449 to i32*, !dbg !9411
  %bf.load806 = load i32, i32* %450, align 8, !dbg !9411
  %bf.clear807 = and i32 %bf.load806, 65535, !dbg !9411
  %cmp808 = icmp eq i32 %bf.clear807, 15, !dbg !9413
  br i1 %cmp808, label %if.then810, label %if.else820, !dbg !9414

if.then810:                                       ; preds = %if.else805
  %451 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9415
  %cmp811 = icmp eq %struct.rtx_def* %451, null, !dbg !9418
  br i1 %cmp811, label %if.then813, label %if.end815, !dbg !9419

if.then813:                                       ; preds = %if.then810
  %452 = load i32, i32* %outmode.addr, align 4, !dbg !9420
  %call814 = call %struct.rtx_def* @gen_reg_rtx(i32 %452), !dbg !9421
  store %struct.rtx_def* %call814, %struct.rtx_def** %value.addr, align 8, !dbg !9422
  br label %if.end815, !dbg !9423

if.end815:                                        ; preds = %if.then813, %if.then810
  %453 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9424
  %454 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9425
  %455 = load i32, i32* %outmode.addr, align 4, !dbg !9426
  %idxprom816 = zext i32 %455 to i64, !dbg !9426
  %arrayidx817 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom816, !dbg !9426
  %456 = load i8, i8* %arrayidx817, align 1, !dbg !9426
  %conv818 = zext i8 %456 to i16, !dbg !9426
  %conv819 = zext i16 %conv818 to i32, !dbg !9426
  call void @emit_group_store(%struct.rtx_def* %453, %struct.rtx_def* %454, %union.tree_node* null, i32 %conv819), !dbg !9427
  br label %if.end858, !dbg !9428

if.else820:                                       ; preds = %if.else805
  %457 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9429
  %458 = bitcast %struct.rtx_def* %457 to i32*, !dbg !9429
  %bf.load821 = load i32, i32* %458, align 8, !dbg !9429
  %bf.lshr822 = lshr i32 %bf.load821, 16, !dbg !9429
  %bf.clear823 = and i32 %bf.lshr822, 255, !dbg !9429
  %459 = load i32, i32* %outmode.addr, align 4, !dbg !9432
  %cmp824 = icmp ne i32 %bf.clear823, %459, !dbg !9433
  br i1 %cmp824, label %if.then826, label %if.end851, !dbg !9434

if.then826:                                       ; preds = %if.else820
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !9435, metadata !DIExpression()), !dbg !9437
  %460 = load %union.tree_node*, %union.tree_node** %tfom, align 8, !dbg !9438
  %base = bitcast %union.tree_node* %460 to %struct.tree_base*, !dbg !9438
  %461 = bitcast %struct.tree_base* %base to i64*, !dbg !9438
  %bf.load827 = load i64, i64* %461, align 8, !dbg !9438
  %bf.lshr828 = lshr i64 %bf.load827, 21, !dbg !9438
  %bf.clear829 = and i64 %bf.lshr828, 1, !dbg !9438
  %bf.cast = trunc i64 %bf.clear829 to i32, !dbg !9438
  store i32 %bf.cast, i32* %unsignedp, align 4, !dbg !9437
  %462 = load %union.tree_node*, %union.tree_node** %tfom, align 8, !dbg !9439
  %463 = load i32, i32* %outmode.addr, align 4, !dbg !9439
  %464 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9439
  %tobool830 = icmp ne %union.tree_node* %464, null, !dbg !9439
  br i1 %tobool830, label %cond.true831, label %cond.false834, !dbg !9439

cond.true831:                                     ; preds = %if.then826
  %465 = load %union.tree_node*, %union.tree_node** %fndecl, align 8, !dbg !9439
  %common832 = bitcast %union.tree_node* %465 to %struct.tree_common*, !dbg !9439
  %type833 = getelementptr inbounds %struct.tree_common, %struct.tree_common* %common832, i32 0, i32 2, !dbg !9439
  %466 = load %union.tree_node*, %union.tree_node** %type833, align 8, !dbg !9439
  br label %cond.end835, !dbg !9439

cond.false834:                                    ; preds = %if.then826
  %467 = load %union.tree_node*, %union.tree_node** %fntype, align 8, !dbg !9439
  br label %cond.end835, !dbg !9439

cond.end835:                                      ; preds = %cond.false834, %cond.true831
  %cond836 = phi %union.tree_node* [ %466, %cond.true831 ], [ %467, %cond.false834 ], !dbg !9439
  %call837 = call i32 @promote_function_mode(%union.tree_node* %462, i32 %463, i32* %unsignedp, %union.tree_node* %cond836, i32 1), !dbg !9439
  %468 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9439
  %469 = bitcast %struct.rtx_def* %468 to i32*, !dbg !9439
  %bf.load838 = load i32, i32* %469, align 8, !dbg !9439
  %bf.lshr839 = lshr i32 %bf.load838, 16, !dbg !9439
  %bf.clear840 = and i32 %bf.lshr839, 255, !dbg !9439
  %cmp841 = icmp eq i32 %call837, %bf.clear840, !dbg !9439
  br i1 %cmp841, label %cond.false844, label %cond.true843, !dbg !9439

cond.true843:                                     ; preds = %cond.end835
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 3880, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9439
  br label %cond.end845, !dbg !9439

cond.false844:                                    ; preds = %cond.end835
  br label %cond.end845, !dbg !9439

cond.end845:                                      ; preds = %cond.false844, %cond.true843
  %cond846 = phi i32 [ 0, %cond.true843 ], [ 0, %cond.false844 ], !dbg !9439
  %470 = load i32, i32* %outmode.addr, align 4, !dbg !9440
  %471 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9441
  %472 = bitcast %struct.rtx_def* %471 to i32*, !dbg !9441
  %bf.load847 = load i32, i32* %472, align 8, !dbg !9441
  %bf.lshr848 = lshr i32 %bf.load847, 16, !dbg !9441
  %bf.clear849 = and i32 %bf.lshr848, 255, !dbg !9441
  %473 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9442
  %call850 = call %struct.rtx_def* @convert_modes(i32 %470, i32 %bf.clear849, %struct.rtx_def* %473, i32 0), !dbg !9443
  store %struct.rtx_def* %call850, %struct.rtx_def** %valreg, align 8, !dbg !9444
  br label %if.end851, !dbg !9445

if.end851:                                        ; preds = %cond.end845, %if.else820
  %474 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9446
  %cmp852 = icmp ne %struct.rtx_def* %474, null, !dbg !9448
  br i1 %cmp852, label %if.then854, label %if.else856, !dbg !9449

if.then854:                                       ; preds = %if.end851
  %475 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9450
  %476 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9451
  %call855 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %475, %struct.rtx_def* %476), !dbg !9452
  br label %if.end857, !dbg !9452

if.else856:                                       ; preds = %if.end851
  %477 = load %struct.rtx_def*, %struct.rtx_def** %valreg, align 8, !dbg !9453
  store %struct.rtx_def* %477, %struct.rtx_def** %value.addr, align 8, !dbg !9454
  br label %if.end857

if.end857:                                        ; preds = %if.else856, %if.then854
  br label %if.end858

if.end858:                                        ; preds = %if.end857, %if.end815
  br label %if.end859

if.end859:                                        ; preds = %if.end858, %if.end804
  br label %if.end860, !dbg !9455

if.end860:                                        ; preds = %if.end859, %land.lhs.true791, %if.end787
  %478 = load i32, i32* @target_flags, align 4, !dbg !9456
  %and861 = and i32 %478, 4, !dbg !9456
  %cmp862 = icmp ne i32 %and861, 0, !dbg !9456
  br i1 %cmp862, label %if.then868, label %lor.lhs.false864, !dbg !9456

lor.lhs.false864:                                 ; preds = %if.end860
  %call865 = call i32 @ix86_cfun_abi(), !dbg !9456
  %cmp866 = icmp eq i32 %call865, 1, !dbg !9456
  br i1 %cmp866, label %if.then868, label %if.end922, !dbg !9458

if.then868:                                       ; preds = %lor.lhs.false864, %if.end860
  %479 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !9459
  %tobool869 = icmp ne %struct.rtx_def* %479, null, !dbg !9459
  br i1 %tobool869, label %if.then870, label %if.end871, !dbg !9462

if.then870:                                       ; preds = %if.then868
  %480 = load %struct.rtx_def*, %struct.rtx_def** %save_area, align 8, !dbg !9463
  %481 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9464
  %482 = load i32, i32* %high_to_save, align 4, !dbg !9465
  %483 = load i32, i32* %low_to_save, align 4, !dbg !9466
  call void @restore_fixed_argument_area(%struct.rtx_def* %480, %struct.rtx_def* %481, i32 %482, i32 %483), !dbg !9467
  br label %if.end871, !dbg !9467

if.end871:                                        ; preds = %if.then870, %if.then868
  store i32 0, i32* %count, align 4, !dbg !9468
  br label %for.cond872, !dbg !9470

for.cond872:                                      ; preds = %for.inc919, %if.end871
  %484 = load i32, i32* %count, align 4, !dbg !9471
  %485 = load i32, i32* %nargs.addr, align 4, !dbg !9473
  %cmp873 = icmp slt i32 %484, %485, !dbg !9474
  br i1 %cmp873, label %for.body875, label %for.end921, !dbg !9475

for.body875:                                      ; preds = %for.cond872
  %486 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9476
  %487 = load i32, i32* %count, align 4, !dbg !9478
  %idxprom876 = sext i32 %487 to i64, !dbg !9476
  %arrayidx877 = getelementptr inbounds %struct.arg, %struct.arg* %486, i64 %idxprom876, !dbg !9476
  %save_area878 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx877, i32 0, i32 5, !dbg !9479
  %488 = load %struct.rtx_def*, %struct.rtx_def** %save_area878, align 8, !dbg !9479
  %tobool879 = icmp ne %struct.rtx_def* %488, null, !dbg !9476
  br i1 %tobool879, label %if.then880, label %if.end918, !dbg !9480

if.then880:                                       ; preds = %for.body875
  call void @llvm.dbg.declare(metadata i32* %save_mode881, metadata !9481, metadata !DIExpression()), !dbg !9483
  %489 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9484
  %490 = load i32, i32* %count, align 4, !dbg !9484
  %idxprom882 = sext i32 %490 to i64, !dbg !9484
  %arrayidx883 = getelementptr inbounds %struct.arg, %struct.arg* %489, i64 %idxprom882, !dbg !9484
  %save_area884 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx883, i32 0, i32 5, !dbg !9484
  %491 = load %struct.rtx_def*, %struct.rtx_def** %save_area884, align 8, !dbg !9484
  %492 = bitcast %struct.rtx_def* %491 to i32*, !dbg !9484
  %bf.load885 = load i32, i32* %492, align 8, !dbg !9484
  %bf.lshr886 = lshr i32 %bf.load885, 16, !dbg !9484
  %bf.clear887 = and i32 %bf.lshr886, 255, !dbg !9484
  store i32 %bf.clear887, i32* %save_mode881, align 4, !dbg !9483
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %adr888, metadata !9485, metadata !DIExpression()), !dbg !9486
  %493 = load %struct.rtx_def*, %struct.rtx_def** %argblock, align 8, !dbg !9487
  %494 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9488
  %495 = load i32, i32* %count, align 4, !dbg !9489
  %idxprom889 = sext i32 %495 to i64, !dbg !9488
  %arrayidx890 = getelementptr inbounds %struct.arg, %struct.arg* %494, i64 %idxprom889, !dbg !9488
  %locate891 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx890, i32 0, i32 4, !dbg !9490
  %offset892 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate891, i32 0, i32 1, !dbg !9491
  %constant893 = getelementptr inbounds %struct.args_size, %struct.args_size* %offset892, i32 0, i32 0, !dbg !9492
  %496 = load i64, i64* %constant893, align 8, !dbg !9492
  %call894 = call %struct.rtx_def* @plus_constant(%struct.rtx_def* %493, i64 %496), !dbg !9493
  store %struct.rtx_def* %call894, %struct.rtx_def** %adr888, align 8, !dbg !9486
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %stack_area895, metadata !9494, metadata !DIExpression()), !dbg !9495
  %497 = load i32, i32* %save_mode881, align 4, !dbg !9496
  %498 = load i32, i32* %save_mode881, align 4, !dbg !9497
  %499 = load %struct.rtx_def*, %struct.rtx_def** %adr888, align 8, !dbg !9497
  %call896 = call %struct.rtx_def* @memory_address_addr_space(i32 %498, %struct.rtx_def* %499, i8 zeroext 0), !dbg !9497
  %call897 = call %struct.rtx_def* @gen_rtx_MEM(i32 %497, %struct.rtx_def* %call896), !dbg !9498
  store %struct.rtx_def* %call897, %struct.rtx_def** %stack_area895, align 8, !dbg !9495
  %500 = load i32, i32* %save_mode881, align 4, !dbg !9499
  %cmp898 = icmp eq i32 %500, 1, !dbg !9501
  br i1 %cmp898, label %if.then900, label %if.else912, !dbg !9502

if.then900:                                       ; preds = %if.then880
  %501 = load %struct.rtx_def*, %struct.rtx_def** %stack_area895, align 8, !dbg !9503
  %502 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9504
  %503 = load i32, i32* %count, align 4, !dbg !9505
  %idxprom901 = sext i32 %503 to i64, !dbg !9504
  %arrayidx902 = getelementptr inbounds %struct.arg, %struct.arg* %502, i64 %idxprom901, !dbg !9504
  %save_area903 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx902, i32 0, i32 5, !dbg !9506
  %504 = load %struct.rtx_def*, %struct.rtx_def** %save_area903, align 8, !dbg !9506
  %call904 = call %struct.rtx_def* @validize_mem(%struct.rtx_def* %504), !dbg !9507
  %505 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9508
  %506 = load i32, i32* %count, align 4, !dbg !9508
  %idxprom905 = sext i32 %506 to i64, !dbg !9508
  %arrayidx906 = getelementptr inbounds %struct.arg, %struct.arg* %505, i64 %idxprom905, !dbg !9508
  %locate907 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx906, i32 0, i32 4, !dbg !9508
  %size908 = getelementptr inbounds %struct.locate_and_pad_arg_data, %struct.locate_and_pad_arg_data* %locate907, i32 0, i32 0, !dbg !9508
  %constant909 = getelementptr inbounds %struct.args_size, %struct.args_size* %size908, i32 0, i32 0, !dbg !9508
  %507 = load i64, i64* %constant909, align 8, !dbg !9508
  %call910 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %507), !dbg !9508
  %call911 = call %struct.rtx_def* @emit_block_move(%struct.rtx_def* %501, %struct.rtx_def* %call904, %struct.rtx_def* %call910, i32 2), !dbg !9509
  br label %if.end917, !dbg !9509

if.else912:                                       ; preds = %if.then880
  %508 = load %struct.rtx_def*, %struct.rtx_def** %stack_area895, align 8, !dbg !9510
  %509 = load %struct.arg*, %struct.arg** %argvec, align 8, !dbg !9511
  %510 = load i32, i32* %count, align 4, !dbg !9512
  %idxprom913 = sext i32 %510 to i64, !dbg !9511
  %arrayidx914 = getelementptr inbounds %struct.arg, %struct.arg* %509, i64 %idxprom913, !dbg !9511
  %save_area915 = getelementptr inbounds %struct.arg, %struct.arg* %arrayidx914, i32 0, i32 5, !dbg !9513
  %511 = load %struct.rtx_def*, %struct.rtx_def** %save_area915, align 8, !dbg !9513
  %call916 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %508, %struct.rtx_def* %511), !dbg !9514
  br label %if.end917

if.end917:                                        ; preds = %if.else912, %if.then900
  br label %if.end918, !dbg !9515

if.end918:                                        ; preds = %if.end917, %for.body875
  br label %for.inc919, !dbg !9479

for.inc919:                                       ; preds = %if.end918
  %512 = load i32, i32* %count, align 4, !dbg !9516
  %inc920 = add nsw i32 %512, 1, !dbg !9516
  store i32 %inc920, i32* %count, align 4, !dbg !9516
  br label %for.cond872, !dbg !9517, !llvm.loop !9518

for.end921:                                       ; preds = %for.cond872
  %513 = load i32, i32* %initial_highest_arg_in_use, align 4, !dbg !9520
  store i32 %513, i32* @highest_outgoing_arg_in_use, align 4, !dbg !9521
  %514 = load i8*, i8** %initial_stack_usage_map, align 8, !dbg !9522
  store i8* %514, i8** @stack_usage_map, align 8, !dbg !9523
  br label %if.end922, !dbg !9524

if.end922:                                        ; preds = %for.end921, %lor.lhs.false864
  %515 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !9525
  %tobool923 = icmp ne i8* %515, null, !dbg !9525
  br i1 %tobool923, label %if.then924, label %if.end925, !dbg !9527

if.then924:                                       ; preds = %if.end922
  %516 = load i8*, i8** %stack_usage_map_buf, align 8, !dbg !9528
  call void @free(i8* %516), !dbg !9529
  br label %if.end925, !dbg !9529

if.end925:                                        ; preds = %if.then924, %if.end922
  %517 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9530
  ret %struct.rtx_def* %517, !dbg !9531
}

; Function Attrs: nounwind
declare void @llvm.va_end(i8*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.rtx_def* @emit_library_call_value(%struct.rtx_def* %orgfun, %struct.rtx_def* %value, i32 %fn_type, i32 %outmode, i32 %nargs, ...) #0 !dbg !9532 {
entry:
  %orgfun.addr = alloca %struct.rtx_def*, align 8
  %value.addr = alloca %struct.rtx_def*, align 8
  %fn_type.addr = alloca i32, align 4
  %outmode.addr = alloca i32, align 4
  %nargs.addr = alloca i32, align 4
  %result = alloca %struct.rtx_def*, align 8
  %p = alloca [1 x %struct.__va_list_tag], align 16
  store %struct.rtx_def* %orgfun, %struct.rtx_def** %orgfun.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orgfun.addr, metadata !9535, metadata !DIExpression()), !dbg !9536
  store %struct.rtx_def* %value, %struct.rtx_def** %value.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %value.addr, metadata !9537, metadata !DIExpression()), !dbg !9538
  store i32 %fn_type, i32* %fn_type.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %fn_type.addr, metadata !9539, metadata !DIExpression()), !dbg !9540
  store i32 %outmode, i32* %outmode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %outmode.addr, metadata !9541, metadata !DIExpression()), !dbg !9542
  store i32 %nargs, i32* %nargs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nargs.addr, metadata !9543, metadata !DIExpression()), !dbg !9544
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !9545, metadata !DIExpression()), !dbg !9546
  call void @llvm.dbg.declare(metadata [1 x %struct.__va_list_tag]* %p, metadata !9547, metadata !DIExpression()), !dbg !9548
  %arraydecay = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !9549
  %arraydecay1 = bitcast %struct.__va_list_tag* %arraydecay to i8*, !dbg !9549
  call void @llvm.va_start(i8* %arraydecay1), !dbg !9549
  %0 = load %struct.rtx_def*, %struct.rtx_def** %orgfun.addr, align 8, !dbg !9550
  %1 = load %struct.rtx_def*, %struct.rtx_def** %value.addr, align 8, !dbg !9551
  %2 = load i32, i32* %fn_type.addr, align 4, !dbg !9552
  %3 = load i32, i32* %outmode.addr, align 4, !dbg !9553
  %4 = load i32, i32* %nargs.addr, align 4, !dbg !9554
  %arraydecay2 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !9555
  %call = call %struct.rtx_def* @emit_library_call_value_1(i32 1, %struct.rtx_def* %0, %struct.rtx_def* %1, i32 %2, i32 %3, i32 %4, %struct.__va_list_tag* %arraydecay2), !dbg !9556
  store %struct.rtx_def* %call, %struct.rtx_def** %result, align 8, !dbg !9557
  %arraydecay3 = getelementptr inbounds [1 x %struct.__va_list_tag], [1 x %struct.__va_list_tag]* %p, i64 0, i64 0, !dbg !9558
  %arraydecay34 = bitcast %struct.__va_list_tag* %arraydecay3 to i8*, !dbg !9558
  call void @llvm.va_end(i8* %arraydecay34), !dbg !9558
  %5 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !9559
  ret %struct.rtx_def* %5, !dbg !9560
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @must_pass_in_stack_var_size(i32 %mode, %union.tree_node* %type) #0 !dbg !9561 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9564, metadata !DIExpression()), !dbg !9565
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9566, metadata !DIExpression()), !dbg !9567
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9568
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9568
  br i1 %tobool, label %if.end, label %if.then, !dbg !9570

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9571
  br label %return, !dbg !9571

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9572
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !9572
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !9572
  %2 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9572
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9572
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9572
  %bf.load = load i64, i64* %3, align 8, !dbg !9572
  %bf.clear = and i64 %bf.load, 65535, !dbg !9572
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9572
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !9574
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !9575

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !9576
  br label %return, !dbg !9576

if.end3:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9577
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9577
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9577
  %bf.load5 = load i64, i64* %5, align 8, !dbg !9577
  %bf.lshr = lshr i64 %bf.load5, 18, !dbg !9577
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !9577
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9577
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !9577
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !9579

if.then9:                                         ; preds = %if.end3
  store i8 1, i8* %retval, align 1, !dbg !9580
  br label %return, !dbg !9580

if.end10:                                         ; preds = %if.end3
  store i8 0, i8* %retval, align 1, !dbg !9581
  br label %return, !dbg !9581

return:                                           ; preds = %if.end10, %if.then9, %if.then2, %if.then
  %6 = load i8, i8* %retval, align 1, !dbg !9582
  ret i8 %6, !dbg !9582
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @must_pass_in_stack_var_size_or_pad(i32 %mode, %union.tree_node* %type) #0 !dbg !9583 {
entry:
  %retval = alloca i8, align 1
  %mode.addr = alloca i32, align 4
  %type.addr = alloca %union.tree_node*, align 8
  store i32 %mode, i32* %mode.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mode.addr, metadata !9584, metadata !DIExpression()), !dbg !9585
  store %union.tree_node* %type, %union.tree_node** %type.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %type.addr, metadata !9586, metadata !DIExpression()), !dbg !9587
  %0 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9588
  %tobool = icmp ne %union.tree_node* %0, null, !dbg !9588
  br i1 %tobool, label %if.end, label %if.then, !dbg !9590

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !9591
  br label %return, !dbg !9591

if.end:                                           ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9592
  %type1 = bitcast %union.tree_node* %1 to %struct.tree_type*, !dbg !9592
  %size = getelementptr inbounds %struct.tree_type, %struct.tree_type* %type1, i32 0, i32 2, !dbg !9592
  %2 = load %union.tree_node*, %union.tree_node** %size, align 8, !dbg !9592
  %base = bitcast %union.tree_node* %2 to %struct.tree_base*, !dbg !9592
  %3 = bitcast %struct.tree_base* %base to i64*, !dbg !9592
  %bf.load = load i64, i64* %3, align 8, !dbg !9592
  %bf.clear = and i64 %bf.load, 65535, !dbg !9592
  %bf.cast = trunc i64 %bf.clear to i32, !dbg !9592
  %cmp = icmp ne i32 %bf.cast, 23, !dbg !9594
  br i1 %cmp, label %if.then2, label %if.end3, !dbg !9595

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !9596
  br label %return, !dbg !9596

if.end3:                                          ; preds = %if.end
  %4 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9597
  %base4 = bitcast %union.tree_node* %4 to %struct.tree_base*, !dbg !9597
  %5 = bitcast %struct.tree_base* %base4 to i64*, !dbg !9597
  %bf.load5 = load i64, i64* %5, align 8, !dbg !9597
  %bf.lshr = lshr i64 %bf.load5, 18, !dbg !9597
  %bf.clear6 = and i64 %bf.lshr, 1, !dbg !9597
  %bf.cast7 = trunc i64 %bf.clear6 to i32, !dbg !9597
  %tobool8 = icmp ne i32 %bf.cast7, 0, !dbg !9597
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !9599

if.then9:                                         ; preds = %if.end3
  store i8 1, i8* %retval, align 1, !dbg !9600
  br label %return, !dbg !9600

if.end10:                                         ; preds = %if.end3
  %6 = load i32, i32* %mode.addr, align 4, !dbg !9601
  %cmp11 = icmp eq i32 %6, 1, !dbg !9603
  br i1 %cmp11, label %land.lhs.true, label %if.end15, !dbg !9604

land.lhs.true:                                    ; preds = %if.end10
  %7 = load %union.tree_node*, %union.tree_node** %type.addr, align 8, !dbg !9605
  %call = call i64 @int_size_in_bytes(%union.tree_node* %7), !dbg !9606
  %rem = srem i64 %call, 4, !dbg !9607
  %tobool12 = icmp ne i64 %rem, 0, !dbg !9607
  br i1 %tobool12, label %land.lhs.true13, label %if.end15, !dbg !9608

land.lhs.true13:                                  ; preds = %land.lhs.true
  br i1 false, label %if.then14, label %if.end15, !dbg !9609

if.then14:                                        ; preds = %land.lhs.true13
  store i8 1, i8* %retval, align 1, !dbg !9610
  br label %return, !dbg !9610

if.end15:                                         ; preds = %land.lhs.true13, %land.lhs.true, %if.end10
  store i8 0, i8* %retval, align 1, !dbg !9611
  br label %return, !dbg !9611

return:                                           ; preds = %if.end15, %if.then14, %if.then9, %if.then2, %if.then
  %8 = load i8, i8* %retval, align 1, !dbg !9612
  ret i8 %8, !dbg !9612
}

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i32 @strncmp(i8*, i8*, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !9613 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9616, metadata !DIExpression()), !dbg !9617
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9618
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !9619
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !9620
  %bf.load = load i32, i32* %1, align 8, !dbg !9620
  %bf.clear = and i32 %bf.load, 255, !dbg !9620
  ret i32 %bf.clear, !dbg !9621
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_call_fn(%union.gimple_statement_d* %gs) #0 !dbg !9622 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9623, metadata !DIExpression()), !dbg !9624
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9625
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 1), !dbg !9626
  ret %union.tree_node* %call, !dbg !9627
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !9628 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9631, metadata !DIExpression()), !dbg !9632
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !9633, metadata !DIExpression()), !dbg !9634
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9635
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !9637
  %tobool = icmp ne i8 %call, 0, !dbg !9637
  br i1 %tobool, label %if.then, label %if.else, !dbg !9638

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9639
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !9641
  %2 = load i32, i32* %i.addr, align 4, !dbg !9642
  %idxprom = zext i32 %2 to i64, !dbg !9641
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !9641
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9641
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !9643
  br label %return, !dbg !9643

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !9644
  br label %return, !dbg !9644

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !9645
  ret %union.tree_node* %4, !dbg !9645
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !9646 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !9647, metadata !DIExpression()), !dbg !9648
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9649
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9650
  %cmp = icmp uge i32 %call, 1, !dbg !9651
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !9652

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !9653
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !9654
  %cmp2 = icmp ule i32 %call1, 9, !dbg !9655
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !9656
  %land.ext = zext i1 %2 to i32, !dbg !9652
  %conv = trunc i32 %land.ext to i8, !dbg !9650
  ret i8 %conv, !dbg !9657
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !9658 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9661, metadata !DIExpression()), !dbg !9662
  call void @llvm.dbg.declare(metadata i64* %off, metadata !9663, metadata !DIExpression()), !dbg !9664
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9665
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !9666
  %idxprom = zext i32 %call to i64, !dbg !9667
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !9667
  %1 = load i64, i64* %arrayidx, align 8, !dbg !9667
  store i64 %1, i64* %off, align 8, !dbg !9668
  %2 = load i64, i64* %off, align 8, !dbg !9669
  %cmp = icmp ne i64 %2, 0, !dbg !9669
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !9669

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !9669
  br label %cond.end, !dbg !9669

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9669

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9669
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9670
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !9671
  %5 = load i64, i64* %off, align 8, !dbg !9672
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !9673
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !9674
  ret %union.tree_node** %6, !dbg !9675
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !9676 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !9679, metadata !DIExpression()), !dbg !9680
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !9681
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !9682
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !9683
  ret i32 %call1, !dbg !9684
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !9685 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !9688, metadata !DIExpression()), !dbg !9689
  %0 = load i32, i32* %code.addr, align 4, !dbg !9690
  %idxprom = zext i32 %0 to i64, !dbg !9691
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !9691
  %1 = load i32, i32* %arrayidx, align 4, !dbg !9691
  ret i32 %1, !dbg !9692
}

; Function Attrs: noinline nounwind uwtable
define internal void @init_call_expr_arg_iterator(%union.tree_node* %exp, %struct.call_expr_arg_iterator_d* %iter) #0 !dbg !9693 {
entry:
  %exp.addr = alloca %union.tree_node*, align 8
  %iter.addr = alloca %struct.call_expr_arg_iterator_d*, align 8
  store %union.tree_node* %exp, %union.tree_node** %exp.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %exp.addr, metadata !9696, metadata !DIExpression()), !dbg !9697
  store %struct.call_expr_arg_iterator_d* %iter, %struct.call_expr_arg_iterator_d** %iter.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.call_expr_arg_iterator_d** %iter.addr, metadata !9698, metadata !DIExpression()), !dbg !9699
  %0 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9700
  %1 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9701
  %t = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %1, i32 0, i32 0, !dbg !9702
  store %union.tree_node* %0, %union.tree_node** %t, align 8, !dbg !9703
  %2 = load %union.tree_node*, %union.tree_node** %exp.addr, align 8, !dbg !9704
  %exp1 = bitcast %union.tree_node* %2 to %struct.tree_exp*, !dbg !9704
  %operands = getelementptr inbounds %struct.tree_exp, %struct.tree_exp* %exp1, i32 0, i32 3, !dbg !9704
  %arrayidx = getelementptr inbounds [1 x %union.tree_node*], [1 x %union.tree_node*]* %operands, i64 0, i64 0, !dbg !9704
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !9704
  %int_cst = bitcast %union.tree_node* %3 to %struct.tree_int_cst*, !dbg !9704
  %int_cst2 = getelementptr inbounds %struct.tree_int_cst, %struct.tree_int_cst* %int_cst, i32 0, i32 1, !dbg !9704
  %low = getelementptr inbounds %struct.double_int, %struct.double_int* %int_cst2, i32 0, i32 0, !dbg !9704
  %4 = load i64, i64* %low, align 8, !dbg !9704
  %conv = trunc i64 %4 to i32, !dbg !9704
  %sub = sub nsw i32 %conv, 3, !dbg !9704
  %5 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9705
  %n = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %5, i32 0, i32 1, !dbg !9706
  store i32 %sub, i32* %n, align 8, !dbg !9707
  %6 = load %struct.call_expr_arg_iterator_d*, %struct.call_expr_arg_iterator_d** %iter.addr, align 8, !dbg !9708
  %i = getelementptr inbounds %struct.call_expr_arg_iterator_d, %struct.call_expr_arg_iterator_d* %6, i32 0, i32 2, !dbg !9709
  store i32 0, i32* %i, align 4, !dbg !9710
  ret void, !dbg !9711
}

declare dso_local %struct.rtx_def* @expand_expr_real(%union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def**) #2

declare dso_local %union.tree_node* @build1_stat(i32, %union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @first_field(%union.tree_node*) #2

declare dso_local zeroext i8 @pass_by_reference(%struct.ix86_args*, i32, %union.tree_node*, i8 zeroext) #2

declare dso_local zeroext i8 @reference_callee_copied(%struct.ix86_args*, i32, %union.tree_node*, i8 zeroext) #2

declare dso_local %union.tree_node* @get_base_address(%union.tree_node*) #2

declare dso_local void @make_decl_rtl(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_fold_addr_expr_loc(i32, %union.tree_node*) #2

declare dso_local i32 @compare_tree_int(%union.tree_node*, i64) #2

declare dso_local %struct.rtx_def* @expr_size(%union.tree_node*) #2

declare dso_local %struct.rtx_def* @store_expr(%union.tree_node*, %struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local void @locate_and_pad_parm(i32, %union.tree_node*, i32, i32, %union.tree_node*, %struct.args_size*, %struct.locate_and_pad_arg_data*) #2

declare dso_local i32 @host_integerp(%union.tree_node*, i32) #2

declare dso_local i64 @tree_low_cst(%union.tree_node*, i32) #2

declare dso_local void @function_arg_advance(%struct.ix86_args*, i32, %union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @convert_modes(i32, i32, %struct.rtx_def*, i32) #2

declare dso_local i32 @promote_mode(%union.tree_node*, i32, i32*) #2

declare dso_local %struct.rtx_def* @gen_lowpart_SUBREG(i32, %struct.rtx_def*) #2

declare dso_local %union.tree_node* @round_up_loc(i32, %union.tree_node*, i32) #2

declare dso_local i32 @mode_for_size(i32, i32, i32) #2

declare dso_local void @set_mem_size(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @set_mem_align(%struct.rtx_def*, i32) #2

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #2

declare dso_local void @assemble_external(%union.tree_node*) #2

declare dso_local void @push_temp_slots() #2

declare dso_local void @pop_temp_slots() #2

declare dso_local void @preserve_temp_slots(%struct.rtx_def*) #2

declare dso_local zeroext i8 @legitimate_constant_p(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_group_load_into_temps(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #2

declare dso_local zeroext i8 @optimize_insn_for_speed_p() #2

declare dso_local %struct.rtx_def* @copy_to_mode_reg(i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @assign_stack_temp(i32, i64, i32) #2

declare dso_local %struct.rtx_def* @validize_mem(%struct.rtx_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %x) #0 !dbg !9712 {
entry:
  %retval = alloca i32, align 4
  %x.addr = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %fmt = alloca i8*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !9715, metadata !DIExpression()), !dbg !9716
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9717, metadata !DIExpression()), !dbg !9718
  call void @llvm.dbg.declare(metadata i32* %i, metadata !9719, metadata !DIExpression()), !dbg !9720
  call void @llvm.dbg.declare(metadata i32* %j, metadata !9721, metadata !DIExpression()), !dbg !9722
  call void @llvm.dbg.declare(metadata i8** %fmt, metadata !9723, metadata !DIExpression()), !dbg !9724
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9725
  %cmp = icmp eq %struct.rtx_def* %0, null, !dbg !9727
  br i1 %cmp, label %if.then, label %if.end, !dbg !9728

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !9729
  br label %return, !dbg !9729

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9730
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !9730
  %bf.load = load i32, i32* %2, align 8, !dbg !9730
  %bf.clear = and i32 %bf.load, 65535, !dbg !9730
  store i32 %bf.clear, i32* %code, align 4, !dbg !9731
  %3 = load i32, i32* %code, align 4, !dbg !9732
  %cmp1 = icmp eq i32 %3, 43, !dbg !9734
  br i1 %cmp1, label %if.then2, label %if.end8, !dbg !9735

if.then2:                                         ; preds = %if.end
  %4 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9736
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9736
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9736
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9736
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9736
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9736
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9737
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9737
  %bf.load3 = load i32, i32* %7, align 8, !dbg !9737
  %bf.lshr = lshr i32 %bf.load3, 16, !dbg !9737
  %bf.clear4 = and i32 %bf.lshr, 255, !dbg !9737
  %idxprom = zext i32 %bf.clear4 to i64, !dbg !9737
  %arrayidx5 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom, !dbg !9737
  %8 = load i8, i8* %arrayidx5, align 1, !dbg !9737
  %conv = zext i8 %8 to i16, !dbg !9737
  %conv6 = zext i16 %conv to i64, !dbg !9737
  %call = call zeroext i8 @mem_overlaps_already_clobbered_arg_p(%struct.rtx_def* %5, i64 %conv6), !dbg !9738
  %conv7 = zext i8 %call to i32, !dbg !9738
  store i32 %conv7, i32* %retval, align 4, !dbg !9739
  br label %return, !dbg !9739

if.end8:                                          ; preds = %if.end
  %9 = load i32, i32* %code, align 4, !dbg !9740
  %idxprom9 = sext i32 %9 to i64, !dbg !9740
  %arrayidx10 = getelementptr inbounds [139 x i8*], [139 x i8*]* @rtx_format, i64 0, i64 %idxprom9, !dbg !9740
  %10 = load i8*, i8** %arrayidx10, align 8, !dbg !9740
  store i8* %10, i8** %fmt, align 8, !dbg !9741
  store i32 0, i32* %i, align 4, !dbg !9742
  br label %for.cond, !dbg !9744

for.cond:                                         ; preds = %for.inc53, %if.end8
  %11 = load i32, i32* %i, align 4, !dbg !9745
  %12 = load i32, i32* %code, align 4, !dbg !9747
  %idxprom11 = sext i32 %12 to i64, !dbg !9747
  %arrayidx12 = getelementptr inbounds [139 x i8], [139 x i8]* @rtx_length, i64 0, i64 %idxprom11, !dbg !9747
  %13 = load i8, i8* %arrayidx12, align 1, !dbg !9747
  %conv13 = zext i8 %13 to i32, !dbg !9747
  %cmp14 = icmp slt i32 %11, %conv13, !dbg !9748
  br i1 %cmp14, label %for.body, label %for.end55, !dbg !9749

for.body:                                         ; preds = %for.cond
  %14 = load i8*, i8** %fmt, align 8, !dbg !9750
  %15 = load i8, i8* %14, align 1, !dbg !9753
  %conv16 = sext i8 %15 to i32, !dbg !9753
  %cmp17 = icmp eq i32 %conv16, 101, !dbg !9754
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !9755

if.then19:                                        ; preds = %for.body
  %16 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9756
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !9756
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !9756
  %17 = load i32, i32* %i, align 4, !dbg !9756
  %idxprom22 = sext i32 %17 to i64, !dbg !9756
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 %idxprom22, !dbg !9756
  %rt_rtx24 = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !9756
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx24, align 8, !dbg !9756
  %call25 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %18), !dbg !9759
  %tobool = icmp ne i32 %call25, 0, !dbg !9759
  br i1 %tobool, label %if.then26, label %if.end27, !dbg !9760

if.then26:                                        ; preds = %if.then19
  store i32 1, i32* %retval, align 4, !dbg !9761
  br label %return, !dbg !9761

if.end27:                                         ; preds = %if.then19
  br label %if.end52, !dbg !9762

if.else:                                          ; preds = %for.body
  %19 = load i8*, i8** %fmt, align 8, !dbg !9763
  %20 = load i8, i8* %19, align 1, !dbg !9765
  %conv28 = sext i8 %20 to i32, !dbg !9765
  %cmp29 = icmp eq i32 %conv28, 69, !dbg !9766
  br i1 %cmp29, label %if.then31, label %if.end51, !dbg !9767

if.then31:                                        ; preds = %if.else
  store i32 0, i32* %j, align 4, !dbg !9768
  br label %for.cond32, !dbg !9771

for.cond32:                                       ; preds = %for.inc, %if.then31
  %21 = load i32, i32* %j, align 4, !dbg !9772
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9774
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !9774
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !9774
  %23 = load i32, i32* %i, align 4, !dbg !9774
  %idxprom35 = sext i32 %23 to i64, !dbg !9774
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 %idxprom35, !dbg !9774
  %rt_rtvec = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtvec_def**, !dbg !9774
  %24 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec, align 8, !dbg !9774
  %num_elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %24, i32 0, i32 0, !dbg !9774
  %25 = load i32, i32* %num_elem, align 8, !dbg !9774
  %cmp37 = icmp slt i32 %21, %25, !dbg !9775
  br i1 %cmp37, label %for.body39, label %for.end, !dbg !9776

for.body39:                                       ; preds = %for.cond32
  %26 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !9777
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !9777
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !9777
  %27 = load i32, i32* %i, align 4, !dbg !9777
  %idxprom42 = sext i32 %27 to i64, !dbg !9777
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 %idxprom42, !dbg !9777
  %rt_rtvec44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtvec_def**, !dbg !9777
  %28 = load %struct.rtvec_def*, %struct.rtvec_def** %rt_rtvec44, align 8, !dbg !9777
  %elem = getelementptr inbounds %struct.rtvec_def, %struct.rtvec_def* %28, i32 0, i32 1, !dbg !9777
  %29 = load i32, i32* %j, align 4, !dbg !9777
  %idxprom45 = sext i32 %29 to i64, !dbg !9777
  %arrayidx46 = getelementptr inbounds [1 x %struct.rtx_def*], [1 x %struct.rtx_def*]* %elem, i64 0, i64 %idxprom45, !dbg !9777
  %30 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx46, align 8, !dbg !9777
  %call47 = call i32 @check_sibcall_argument_overlap_1(%struct.rtx_def* %30), !dbg !9779
  %tobool48 = icmp ne i32 %call47, 0, !dbg !9779
  br i1 %tobool48, label %if.then49, label %if.end50, !dbg !9780

if.then49:                                        ; preds = %for.body39
  store i32 1, i32* %retval, align 4, !dbg !9781
  br label %return, !dbg !9781

if.end50:                                         ; preds = %for.body39
  br label %for.inc, !dbg !9782

for.inc:                                          ; preds = %if.end50
  %31 = load i32, i32* %j, align 4, !dbg !9783
  %inc = add nsw i32 %31, 1, !dbg !9783
  store i32 %inc, i32* %j, align 4, !dbg !9783
  br label %for.cond32, !dbg !9784, !llvm.loop !9785

for.end:                                          ; preds = %for.cond32
  br label %if.end51, !dbg !9787

if.end51:                                         ; preds = %for.end, %if.else
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end27
  br label %for.inc53, !dbg !9788

for.inc53:                                        ; preds = %if.end52
  %32 = load i32, i32* %i, align 4, !dbg !9789
  %inc54 = add nsw i32 %32, 1, !dbg !9789
  store i32 %inc54, i32* %i, align 4, !dbg !9789
  %33 = load i8*, i8** %fmt, align 8, !dbg !9790
  %incdec.ptr = getelementptr inbounds i8, i8* %33, i32 1, !dbg !9790
  store i8* %incdec.ptr, i8** %fmt, align 8, !dbg !9790
  br label %for.cond, !dbg !9791, !llvm.loop !9792

for.end55:                                        ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !9794
  br label %return, !dbg !9794

return:                                           ; preds = %for.end55, %if.then49, %if.then26, %if.then2, %if.then
  %34 = load i32, i32* %retval, align 4, !dbg !9795
  ret i32 %34, !dbg !9795
}

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !9796 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !9799, metadata !DIExpression()), !dbg !9800
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !9801, metadata !DIExpression()), !dbg !9802
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9803
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !9805
  %1 = load i8*, i8** %popcount, align 8, !dbg !9805
  %tobool = icmp ne i8* %1, null, !dbg !9803
  br i1 %tobool, label %if.then, label %if.end7, !dbg !9806

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !9807, metadata !DIExpression()), !dbg !9809
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9810
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !9810
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !9810
  %div = udiv i32 %3, 64, !dbg !9810
  %idxprom = zext i32 %div to i64, !dbg !9810
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !9810
  %4 = load i64, i64* %arrayidx, align 8, !dbg !9810
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !9810
  %rem = urem i32 %5, 64, !dbg !9810
  %sh_prom = zext i32 %rem to i64, !dbg !9810
  %shr = lshr i64 %4, %sh_prom, !dbg !9810
  %and = and i64 %shr, 1, !dbg !9810
  %conv = trunc i64 %and to i8, !dbg !9810
  store i8 %conv, i8* %oldbit, align 1, !dbg !9811
  %6 = load i8, i8* %oldbit, align 1, !dbg !9812
  %tobool1 = icmp ne i8 %6, 0, !dbg !9812
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !9814

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9815
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !9816
  %8 = load i8*, i8** %popcount3, align 8, !dbg !9816
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !9817
  %div4 = udiv i32 %9, 64, !dbg !9818
  %idxprom5 = zext i32 %div4 to i64, !dbg !9815
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !9815
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !9819
  %inc = add i8 %10, 1, !dbg !9819
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !9819
  br label %if.end, !dbg !9815

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !9820

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !9821
  %rem8 = urem i32 %11, 64, !dbg !9822
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !9823
  %shl = shl i64 1, %sh_prom9, !dbg !9823
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !9824
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !9825
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !9826
  %div11 = udiv i32 %13, 64, !dbg !9827
  %idxprom12 = zext i32 %div11 to i64, !dbg !9824
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !9824
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !9828
  %or = or i64 %14, %shl, !dbg !9828
  store i64 %or, i64* %arrayidx13, align 8, !dbg !9828
  ret void, !dbg !9829
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @mem_overlaps_already_clobbered_arg_p(%struct.rtx_def* %addr, i64 %size) #0 !dbg !9830 {
entry:
  %retval = alloca i8, align 1
  %addr.addr = alloca %struct.rtx_def*, align 8
  %size.addr = alloca i64, align 8
  %i = alloca i64, align 8
  %k = alloca i64, align 8
  store %struct.rtx_def* %addr, %struct.rtx_def** %addr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr.addr, metadata !9833, metadata !DIExpression()), !dbg !9834
  store i64 %size, i64* %size.addr, align 8
  call void @llvm.dbg.declare(metadata i64* %size.addr, metadata !9835, metadata !DIExpression()), !dbg !9836
  call void @llvm.dbg.declare(metadata i64* %i, metadata !9837, metadata !DIExpression()), !dbg !9838
  %0 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9839
  %1 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !9841
  %cmp = icmp eq %struct.rtx_def* %0, %1, !dbg !9842
  br i1 %cmp, label %if.then, label %if.else, !dbg !9843

if.then:                                          ; preds = %entry
  store i64 0, i64* %i, align 8, !dbg !9844
  br label %if.end35, !dbg !9845

if.else:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9846
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !9846
  %bf.load = load i32, i32* %3, align 8, !dbg !9846
  %bf.clear = and i32 %bf.load, 65535, !dbg !9846
  %cmp1 = icmp eq i32 %bf.clear, 49, !dbg !9848
  br i1 %cmp1, label %land.lhs.true, label %if.else18, !dbg !9849

land.lhs.true:                                    ; preds = %if.else
  %4 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9850
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9850
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9850
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9850
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9850
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9850
  %6 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !9851
  %cmp2 = icmp eq %struct.rtx_def* %5, %6, !dbg !9852
  br i1 %cmp2, label %land.lhs.true3, label %if.else18, !dbg !9853

land.lhs.true3:                                   ; preds = %land.lhs.true
  %7 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9854
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !9854
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !9854
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 1, !dbg !9854
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !9854
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !9854
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !9854
  %bf.load8 = load i32, i32* %9, align 8, !dbg !9854
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9854
  %cmp10 = icmp eq i32 %bf.clear9, 30, !dbg !9854
  br i1 %cmp10, label %if.then11, label %if.else18, !dbg !9855

if.then11:                                        ; preds = %land.lhs.true3
  %10 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9856
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !9856
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !9856
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 1, !dbg !9856
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !9856
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !9856
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9856
  %hwint = bitcast %union.u* %u16 to [1 x i64]*, !dbg !9856
  %arrayidx17 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !9856
  %12 = load i64, i64* %arrayidx17, align 8, !dbg !9856
  store i64 %12, i64* %i, align 8, !dbg !9857
  br label %if.end, !dbg !9858

if.else18:                                        ; preds = %land.lhs.true3, %land.lhs.true, %if.else
  %13 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9859
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !9859
  %bf.load19 = load i32, i32* %14, align 8, !dbg !9859
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !9859
  %cmp21 = icmp eq i32 %bf.clear20, 49, !dbg !9861
  br i1 %cmp21, label %land.lhs.true22, label %if.else34, !dbg !9862

land.lhs.true22:                                  ; preds = %if.else18
  %15 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9863
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !9863
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !9863
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !9863
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !9863
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !9863
  %17 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !9864
  %cmp27 = icmp eq %struct.rtx_def* %16, %17, !dbg !9865
  br i1 %cmp27, label %if.then33, label %lor.lhs.false, !dbg !9866

lor.lhs.false:                                    ; preds = %land.lhs.true22
  %18 = load %struct.rtx_def*, %struct.rtx_def** %addr.addr, align 8, !dbg !9867
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !9867
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !9867
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !9867
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !9867
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !9867
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds (%struct.rtl_data, %struct.rtl_data* @x_rtl, i32 0, i32 3, i32 5), align 8, !dbg !9868
  %cmp32 = icmp eq %struct.rtx_def* %19, %20, !dbg !9869
  br i1 %cmp32, label %if.then33, label %if.else34, !dbg !9870

if.then33:                                        ; preds = %lor.lhs.false, %land.lhs.true22
  store i8 1, i8* %retval, align 1, !dbg !9871
  br label %return, !dbg !9871

if.else34:                                        ; preds = %lor.lhs.false, %if.else18
  store i8 0, i8* %retval, align 1, !dbg !9872
  br label %return, !dbg !9872

if.end:                                           ; preds = %if.then11
  br label %if.end35

if.end35:                                         ; preds = %if.end, %if.then
  %21 = load i64, i64* %size.addr, align 8, !dbg !9873
  %cmp36 = icmp ugt i64 %21, 0, !dbg !9875
  br i1 %cmp36, label %if.then37, label %if.end47, !dbg !9876

if.then37:                                        ; preds = %if.end35
  call void @llvm.dbg.declare(metadata i64* %k, metadata !9877, metadata !DIExpression()), !dbg !9879
  store i64 0, i64* %k, align 8, !dbg !9880
  br label %for.cond, !dbg !9882

for.cond:                                         ; preds = %for.inc, %if.then37
  %22 = load i64, i64* %k, align 8, !dbg !9883
  %23 = load i64, i64* %size.addr, align 8, !dbg !9885
  %cmp38 = icmp ult i64 %22, %23, !dbg !9886
  br i1 %cmp38, label %for.body, label %for.end, !dbg !9887

for.body:                                         ; preds = %for.cond
  %24 = load i64, i64* %i, align 8, !dbg !9888
  %25 = load i64, i64* %k, align 8, !dbg !9890
  %add = add i64 %24, %25, !dbg !9891
  %26 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !9892
  %n_bits = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %26, i32 0, i32 1, !dbg !9893
  %27 = load i32, i32* %n_bits, align 8, !dbg !9893
  %conv = zext i32 %27 to i64, !dbg !9892
  %cmp39 = icmp ult i64 %add, %conv, !dbg !9894
  br i1 %cmp39, label %land.lhs.true41, label %if.end46, !dbg !9895

land.lhs.true41:                                  ; preds = %for.body
  %28 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** @stored_args_map, align 8, !dbg !9896
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %28, i32 0, i32 3, !dbg !9896
  %29 = load i64, i64* %i, align 8, !dbg !9896
  %30 = load i64, i64* %k, align 8, !dbg !9896
  %add42 = add i64 %29, %30, !dbg !9896
  %div = udiv i64 %add42, 64, !dbg !9896
  %arrayidx43 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %div, !dbg !9896
  %31 = load i64, i64* %arrayidx43, align 8, !dbg !9896
  %32 = load i64, i64* %i, align 8, !dbg !9896
  %33 = load i64, i64* %k, align 8, !dbg !9896
  %add44 = add i64 %32, %33, !dbg !9896
  %rem = urem i64 %add44, 64, !dbg !9896
  %shr = lshr i64 %31, %rem, !dbg !9896
  %and = and i64 %shr, 1, !dbg !9896
  %tobool = icmp ne i64 %and, 0, !dbg !9896
  br i1 %tobool, label %if.then45, label %if.end46, !dbg !9897

if.then45:                                        ; preds = %land.lhs.true41
  store i8 1, i8* %retval, align 1, !dbg !9898
  br label %return, !dbg !9898

if.end46:                                         ; preds = %land.lhs.true41, %for.body
  br label %for.inc, !dbg !9896

for.inc:                                          ; preds = %if.end46
  %34 = load i64, i64* %k, align 8, !dbg !9899
  %inc = add i64 %34, 1, !dbg !9899
  store i64 %inc, i64* %k, align 8, !dbg !9899
  br label %for.cond, !dbg !9900, !llvm.loop !9901

for.end:                                          ; preds = %for.cond
  br label %if.end47, !dbg !9903

if.end47:                                         ; preds = %for.end, %if.end35
  store i8 0, i8* %retval, align 1, !dbg !9904
  br label %return, !dbg !9904

return:                                           ; preds = %if.end47, %if.then45, %if.else34, %if.then33
  %35 = load i8, i8* %retval, align 1, !dbg !9905
  ret i8 %35, !dbg !9905
}

declare dso_local void @emit_group_move(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @operand_subword_force(%struct.rtx_def*, i32, i32) #2

declare dso_local %struct.rtx_def* @expand_shift(i32, i32, %struct.rtx_def*, %union.tree_node*, %struct.rtx_def*, i32) #2

declare dso_local %union.tree_node* @build_int_cst(%union.tree_node*, i64) #2

declare dso_local void @move_block_to_reg(i32, %struct.rtx_def*, i32, i32) #2

declare dso_local void @use_group_regs(%struct.rtx_def**, %struct.rtx_def*) #2

declare dso_local void @use_regs(%struct.rtx_def**, i32, i32) #2

declare dso_local %struct.rtx_def* @gen_call_value_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_call_pop(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @emit_call_insn(%struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_sibcall_value(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_sibcall(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_call_value(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_call(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @last_call_insn() #2

declare dso_local void @add_function_usage_to(%struct.rtx_def*, %struct.rtx_def*) #2

declare dso_local void @make_reg_eh_region_note(%struct.rtx_def*, i32, i32) #2

declare dso_local void @adjust_stack(%struct.rtx_def*) #2

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

declare dso_local %union.tree_node* @copy_list(%union.tree_node*) #2

declare dso_local %union.tree_node* @build_tree_list_stat(%union.tree_node*, %union.tree_node*) #2

declare dso_local void @assemble_external_libcall(%struct.rtx_def*) #2

declare dso_local void @emit_push_insn(%struct.rtx_def*, i32, %union.tree_node*, %struct.rtx_def*, i32, i32, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*) #2

declare dso_local %struct.rtx_def* @gen_rtx_fmt_0_stat(i32, i32) #2

declare dso_local void @emit_group_load(%struct.rtx_def*, %struct.rtx_def*, %union.tree_node*, i32) #2

declare dso_local %struct.rtx_def* @hard_libcall_value(i32, %struct.rtx_def*) #2

declare dso_local %union.tree_node* @get_identifier(i8*) #2

declare dso_local %union.tree_node* @build_function_type(%union.tree_node*, %union.tree_node*) #2

declare dso_local %union.tree_node* @size_in_bytes(%union.tree_node*) #2

declare dso_local void @free_temp_slots() #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { nounwind }

!llvm.dbg.cu = !{!1818}
!llvm.module.flags = !{!3527, !3528, !3529}
!llvm.ident = !{!3530}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "currently_expanding_call", scope: !2, file: !3, line: 1912, type: !32, isLocal: true, isDefinition: true)
!2 = distinct !DISubprogram(name: "expand_call", scope: !3, file: !3, line: 1909, type: !4, scopeLine: 1910, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3 = !DIFile(filename: "calls.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !DISubroutineType(types: !5)
!5 = !{!6, !258, !6, !32}
!6 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !7, line: 50, baseType: !8)
!7 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9, size: 64)
!9 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !10, line: 240, size: 384, elements: !11)
!10 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!11 = !{!12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23}
!12 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !9, file: !10, line: 242, baseType: !13, size: 16, flags: DIFlagBitField, extraData: i64 0)
!13 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!14 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !9, file: !10, line: 245, baseType: !13, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!15 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !9, file: !10, line: 252, baseType: !13, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!16 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !9, file: !10, line: 257, baseType: !13, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!17 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !9, file: !10, line: 265, baseType: !13, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!18 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !9, file: !10, line: 277, baseType: !13, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!19 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !9, file: !10, line: 291, baseType: !13, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!20 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !9, file: !10, line: 298, baseType: !13, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!21 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !9, file: !10, line: 305, baseType: !13, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!22 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !9, file: !10, line: 310, baseType: !13, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!23 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !9, file: !10, line: 321, baseType: !24, size: 320, offset: 64)
!24 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !10, line: 315, size: 320, elements: !25)
!25 = !{!26, !1753, !1755, !1816, !1817}
!26 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !24, file: !10, line: 316, baseType: !27, size: 64)
!27 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 64, elements: !47)
!28 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !10, line: 183, baseType: !29)
!29 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !10, line: 166, size: 64, elements: !30)
!30 = !{!31, !33, !34, !38, !39, !49, !178, !190, !193, !257, !1731, !1732, !1743, !1750}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !29, file: !10, line: 168, baseType: !32, size: 32)
!32 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!33 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !29, file: !10, line: 169, baseType: !13, size: 32)
!34 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !29, file: !10, line: 170, baseType: !35, size: 64)
!35 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !36, size: 64)
!36 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !37)
!37 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!38 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !29, file: !10, line: 171, baseType: !6, size: 64)
!39 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !29, file: !10, line: 172, baseType: !40, size: 64)
!40 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !7, line: 53, baseType: !41)
!41 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !42, size: 64)
!42 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !10, line: 359, size: 128, elements: !43)
!43 = !{!44, !45}
!44 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !42, file: !10, line: 360, baseType: !32, size: 32)
!45 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !42, file: !10, line: 361, baseType: !46, size: 64, offset: 64)
!46 = !DICompositeType(tag: DW_TAG_array_type, baseType: !6, size: 64, elements: !47)
!47 = !{!48}
!48 = !DISubrange(count: 1)
!49 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !29, file: !10, line: 173, baseType: !50, size: 32)
!50 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !51, line: 7, baseType: !13, size: 32, elements: !52)
!51 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!52 = !{!53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177}
!53 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!54 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!55 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!56 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!57 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!58 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!59 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!60 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!61 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!62 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!63 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!64 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!65 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!66 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!67 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!68 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!69 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!70 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!71 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!72 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!73 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!74 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!75 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!76 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!77 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!78 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!79 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!80 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!81 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!82 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!83 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!84 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!85 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!86 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!87 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!88 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!89 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!90 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!91 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!92 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!93 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!94 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!95 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!96 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!97 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!98 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!99 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!100 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!101 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!102 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!103 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!104 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!105 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!106 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!107 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!108 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!109 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!110 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!111 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!112 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!113 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!114 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!115 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!116 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!117 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!118 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!119 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!120 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!121 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!122 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!123 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!124 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!125 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!126 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!127 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!128 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!129 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!130 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!131 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!132 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!133 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!134 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!135 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!136 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!137 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!138 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!139 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!140 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!141 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!142 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!143 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!144 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!145 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!146 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!147 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!148 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!149 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!150 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!151 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!152 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!153 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!154 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!155 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!156 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!157 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!158 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!159 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!160 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!161 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!162 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!163 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!164 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!165 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!166 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!167 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!168 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!169 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!170 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!171 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!172 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!173 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!174 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!175 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!176 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!177 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!178 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !29, file: !10, line: 174, baseType: !179, size: 32)
!179 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !10, line: 133, baseType: !180)
!180 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !10, line: 115, size: 32, elements: !181)
!181 = !{!182, !183, !184, !185, !186, !187, !188, !189}
!182 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !180, file: !10, line: 118, baseType: !13, size: 8, flags: DIFlagBitField, extraData: i64 0)
!183 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !180, file: !10, line: 120, baseType: !13, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!184 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !180, file: !10, line: 121, baseType: !13, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!185 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !180, file: !10, line: 123, baseType: !13, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!186 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !180, file: !10, line: 125, baseType: !13, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!187 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !180, file: !10, line: 127, baseType: !13, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!188 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !180, file: !10, line: 130, baseType: !13, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!189 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !180, file: !10, line: 132, baseType: !13, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!190 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !29, file: !10, line: 175, baseType: !191, size: 64)
!191 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !192, size: 64)
!192 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !10, line: 175, flags: DIFlagFwdDecl)
!193 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !29, file: !10, line: 176, baseType: !194, size: 64)
!194 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !195, size: 64)
!195 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !196, line: 75, size: 256, elements: !197)
!196 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!197 = !{!198, !213, !214, !215}
!198 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !195, file: !196, line: 76, baseType: !199, size: 64)
!199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !200, size: 64)
!200 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !196, line: 68, baseType: !201)
!201 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !196, line: 63, size: 320, elements: !202)
!202 = !{!203, !205, !206, !207}
!203 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !201, file: !196, line: 64, baseType: !204, size: 64)
!204 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !201, size: 64)
!205 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !201, file: !196, line: 65, baseType: !204, size: 64, offset: 64)
!206 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !201, file: !196, line: 66, baseType: !13, size: 32, offset: 128)
!207 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !201, file: !196, line: 67, baseType: !208, size: 128, offset: 192)
!208 = !DICompositeType(tag: DW_TAG_array_type, baseType: !209, size: 128, elements: !211)
!209 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !196, line: 29, baseType: !210)
!210 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!211 = !{!212}
!212 = !DISubrange(count: 2)
!213 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !195, file: !196, line: 77, baseType: !199, size: 64, offset: 64)
!214 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !195, file: !196, line: 78, baseType: !13, size: 32, offset: 128)
!215 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !195, file: !196, line: 79, baseType: !216, size: 64, offset: 192)
!216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !217, size: 64)
!217 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !196, line: 49, baseType: !218)
!218 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !196, line: 45, size: 832, elements: !219)
!219 = !{!220, !221, !222}
!220 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !218, file: !196, line: 46, baseType: !204, size: 64)
!221 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !218, file: !196, line: 47, baseType: !194, size: 64, offset: 64)
!222 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !218, file: !196, line: 48, baseType: !223, size: 704, offset: 128)
!223 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !224, line: 164, size: 704, elements: !225)
!224 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!225 = !{!226, !228, !239, !240, !241, !242, !243, !244, !249, !253, !254, !255, !256}
!226 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !223, file: !224, line: 166, baseType: !227, size: 64)
!227 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!228 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !223, file: !224, line: 167, baseType: !229, size: 64, offset: 64)
!229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !230, size: 64)
!230 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !224, line: 157, size: 192, elements: !231)
!231 = !{!232, !234, !235}
!232 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !230, file: !224, line: 159, baseType: !233, size: 64)
!233 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !37, size: 64)
!234 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !230, file: !224, line: 160, baseType: !229, size: 64, offset: 64)
!235 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !230, file: !224, line: 161, baseType: !236, size: 32, offset: 128)
!236 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 32, elements: !237)
!237 = !{!238}
!238 = !DISubrange(count: 4)
!239 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !223, file: !224, line: 168, baseType: !233, size: 64, offset: 128)
!240 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !223, file: !224, line: 169, baseType: !233, size: 64, offset: 192)
!241 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !223, file: !224, line: 170, baseType: !233, size: 64, offset: 256)
!242 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !223, file: !224, line: 171, baseType: !227, size: 64, offset: 320)
!243 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !223, file: !224, line: 172, baseType: !32, size: 32, offset: 384)
!244 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !223, file: !224, line: 176, baseType: !245, size: 64, offset: 448)
!245 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !246, size: 64)
!246 = !DISubroutineType(types: !247)
!247 = !{!229, !248, !227}
!248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!249 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !223, file: !224, line: 177, baseType: !250, size: 64, offset: 512)
!250 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !251, size: 64)
!251 = !DISubroutineType(types: !252)
!252 = !{null, !248, !229}
!253 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !223, file: !224, line: 178, baseType: !248, size: 64, offset: 576)
!254 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !223, file: !224, line: 179, baseType: !13, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!255 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !223, file: !224, line: 180, baseType: !13, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!256 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !223, file: !224, line: 184, baseType: !13, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!257 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !29, file: !10, line: 177, baseType: !258, size: 64)
!258 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !7, line: 56, baseType: !259)
!259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !260, size: 64)
!260 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !261, line: 3371, size: 1792, elements: !262)
!261 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!262 = !{!263, !296, !302, !313, !332, !343, !348, !355, !361, !375, !387, !425, !430, !458, !475, !476, !481, !490, !496, !501, !505, !509, !1348, !1397, !1403, !1409, !1416, !1429, !1443, !1460, !1472, !1494, !1541, !1713}
!263 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !260, file: !261, line: 3372, baseType: !264, size: 64)
!264 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !261, line: 360, size: 64, elements: !265)
!265 = !{!266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295}
!266 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !264, file: !261, line: 361, baseType: !13, size: 16, flags: DIFlagBitField, extraData: i64 0)
!267 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !264, file: !261, line: 363, baseType: !13, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!268 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !264, file: !261, line: 364, baseType: !13, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!269 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !264, file: !261, line: 365, baseType: !13, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!270 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !264, file: !261, line: 366, baseType: !13, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!271 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !264, file: !261, line: 367, baseType: !13, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!272 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !264, file: !261, line: 368, baseType: !13, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!273 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !264, file: !261, line: 369, baseType: !13, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!274 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !264, file: !261, line: 370, baseType: !13, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!275 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !264, file: !261, line: 372, baseType: !13, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!276 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !264, file: !261, line: 373, baseType: !13, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!277 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !264, file: !261, line: 374, baseType: !13, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!278 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !264, file: !261, line: 375, baseType: !13, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!279 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !264, file: !261, line: 376, baseType: !13, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!280 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !264, file: !261, line: 377, baseType: !13, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!281 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !264, file: !261, line: 378, baseType: !13, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!282 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !264, file: !261, line: 379, baseType: !13, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!283 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !264, file: !261, line: 381, baseType: !13, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!284 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !264, file: !261, line: 382, baseType: !13, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!285 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !264, file: !261, line: 383, baseType: !13, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!286 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !264, file: !261, line: 384, baseType: !13, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!287 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !264, file: !261, line: 385, baseType: !13, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!288 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !264, file: !261, line: 386, baseType: !13, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!289 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !264, file: !261, line: 387, baseType: !13, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!290 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !264, file: !261, line: 388, baseType: !13, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!291 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !264, file: !261, line: 390, baseType: !13, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!292 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !264, file: !261, line: 391, baseType: !13, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!293 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !264, file: !261, line: 392, baseType: !13, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!294 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !264, file: !261, line: 394, baseType: !13, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!295 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !264, file: !261, line: 399, baseType: !13, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!296 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !260, file: !261, line: 3373, baseType: !297, size: 192)
!297 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !261, line: 402, size: 192, elements: !298)
!298 = !{!299, !300, !301}
!299 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !297, file: !261, line: 403, baseType: !264, size: 64)
!300 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !297, file: !261, line: 404, baseType: !258, size: 64, offset: 64)
!301 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !297, file: !261, line: 405, baseType: !258, size: 64, offset: 128)
!302 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !260, file: !261, line: 3374, baseType: !303, size: 320)
!303 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !261, line: 1384, size: 320, elements: !304)
!304 = !{!305, !306}
!305 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !303, file: !261, line: 1385, baseType: !297, size: 192)
!306 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !303, file: !261, line: 1386, baseType: !307, size: 128, offset: 192)
!307 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !308, line: 58, baseType: !309)
!308 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!309 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !308, line: 54, size: 128, elements: !310)
!310 = !{!311, !312}
!311 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !309, file: !308, line: 56, baseType: !210, size: 64)
!312 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !309, file: !308, line: 57, baseType: !227, size: 64, offset: 64)
!313 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !260, file: !261, line: 3375, baseType: !314, size: 256)
!314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !261, line: 1397, size: 256, elements: !315)
!315 = !{!316, !317}
!316 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !314, file: !261, line: 1398, baseType: !297, size: 192)
!317 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !314, file: !261, line: 1399, baseType: !318, size: 64, offset: 192)
!318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !319, size: 64)
!319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !320, line: 52, size: 256, elements: !321)
!320 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!321 = !{!322, !323, !324, !325, !326, !327, !328}
!322 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !319, file: !320, line: 56, baseType: !13, size: 2, flags: DIFlagBitField, extraData: i64 0)
!323 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !319, file: !320, line: 57, baseType: !13, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!324 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !319, file: !320, line: 58, baseType: !13, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!325 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !319, file: !320, line: 59, baseType: !13, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!326 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !319, file: !320, line: 60, baseType: !13, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!327 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !319, file: !320, line: 61, baseType: !13, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!328 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !319, file: !320, line: 62, baseType: !329, size: 192, offset: 64)
!329 = !DICompositeType(tag: DW_TAG_array_type, baseType: !210, size: 192, elements: !330)
!330 = !{!331}
!331 = !DISubrange(count: 3)
!332 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !260, file: !261, line: 3376, baseType: !333, size: 256)
!333 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !261, line: 1408, size: 256, elements: !334)
!334 = !{!335, !336}
!335 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !333, file: !261, line: 1409, baseType: !297, size: 192)
!336 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !333, file: !261, line: 1410, baseType: !337, size: 64, offset: 192)
!337 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !338, size: 64)
!338 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !339, line: 27, size: 192, elements: !340)
!339 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!340 = !{!341, !342}
!341 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !338, file: !339, line: 29, baseType: !307, size: 128)
!342 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !338, file: !339, line: 30, baseType: !50, size: 32, offset: 128)
!343 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !260, file: !261, line: 3377, baseType: !344, size: 256)
!344 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !261, line: 1437, size: 256, elements: !345)
!345 = !{!346, !347}
!346 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !344, file: !261, line: 1438, baseType: !297, size: 192)
!347 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !344, file: !261, line: 1439, baseType: !258, size: 64, offset: 192)
!348 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !260, file: !261, line: 3378, baseType: !349, size: 256)
!349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !261, line: 1418, size: 256, elements: !350)
!350 = !{!351, !352, !353}
!351 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !349, file: !261, line: 1419, baseType: !297, size: 192)
!352 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !349, file: !261, line: 1420, baseType: !32, size: 32, offset: 192)
!353 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !349, file: !261, line: 1421, baseType: !354, size: 8, offset: 224)
!354 = !DICompositeType(tag: DW_TAG_array_type, baseType: !37, size: 8, elements: !47)
!355 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !260, file: !261, line: 3379, baseType: !356, size: 320)
!356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !261, line: 1428, size: 320, elements: !357)
!357 = !{!358, !359, !360}
!358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !356, file: !261, line: 1429, baseType: !297, size: 192)
!359 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !356, file: !261, line: 1430, baseType: !258, size: 64, offset: 192)
!360 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !356, file: !261, line: 1431, baseType: !258, size: 64, offset: 256)
!361 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !260, file: !261, line: 3380, baseType: !362, size: 320)
!362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !261, line: 1460, size: 320, elements: !363)
!363 = !{!364, !365}
!364 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !362, file: !261, line: 1461, baseType: !297, size: 192)
!365 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !362, file: !261, line: 1462, baseType: !366, size: 128, offset: 192)
!366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !367, line: 31, size: 128, elements: !368)
!367 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!368 = !{!369, !373, !374}
!369 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !366, file: !367, line: 32, baseType: !370, size: 64)
!370 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !371, size: 64)
!371 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !372)
!372 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!373 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !366, file: !367, line: 33, baseType: !13, size: 32, offset: 64)
!374 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !366, file: !367, line: 34, baseType: !13, size: 32, offset: 96)
!375 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !260, file: !261, line: 3381, baseType: !376, size: 384)
!376 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !261, line: 2507, size: 384, elements: !377)
!377 = !{!378, !379, !384, !385, !386}
!378 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !376, file: !261, line: 2508, baseType: !297, size: 192)
!379 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !376, file: !261, line: 2509, baseType: !380, size: 32, offset: 192)
!380 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !381, line: 58, baseType: !382)
!381 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!382 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !383, line: 44, baseType: !13)
!383 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!384 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !376, file: !261, line: 2510, baseType: !13, size: 32, offset: 224)
!385 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !376, file: !261, line: 2511, baseType: !258, size: 64, offset: 256)
!386 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !376, file: !261, line: 2512, baseType: !258, size: 64, offset: 320)
!387 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !260, file: !261, line: 3382, baseType: !388, size: 896)
!388 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !261, line: 2652, size: 896, elements: !389)
!389 = !{!390, !391, !392, !393, !394, !395, !396, !397, !398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422}
!390 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !388, file: !261, line: 2653, baseType: !376, size: 384)
!391 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !388, file: !261, line: 2654, baseType: !258, size: 64, offset: 384)
!392 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !388, file: !261, line: 2656, baseType: !13, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!393 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !388, file: !261, line: 2658, baseType: !13, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!394 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !388, file: !261, line: 2659, baseType: !13, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!395 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !388, file: !261, line: 2660, baseType: !13, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!396 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !388, file: !261, line: 2661, baseType: !13, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!397 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !388, file: !261, line: 2662, baseType: !13, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!398 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !388, file: !261, line: 2663, baseType: !13, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!399 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !388, file: !261, line: 2664, baseType: !13, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!400 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !388, file: !261, line: 2666, baseType: !13, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!401 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !388, file: !261, line: 2667, baseType: !13, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!402 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !388, file: !261, line: 2668, baseType: !13, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!403 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !388, file: !261, line: 2669, baseType: !13, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!404 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !388, file: !261, line: 2670, baseType: !13, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!405 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !388, file: !261, line: 2671, baseType: !13, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!406 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !388, file: !261, line: 2672, baseType: !13, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!407 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !388, file: !261, line: 2673, baseType: !13, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!408 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !388, file: !261, line: 2674, baseType: !13, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!409 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !388, file: !261, line: 2678, baseType: !13, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!410 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !388, file: !261, line: 2682, baseType: !13, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!411 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !388, file: !261, line: 2685, baseType: !13, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!412 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !388, file: !261, line: 2688, baseType: !13, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!413 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !388, file: !261, line: 2690, baseType: !13, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!414 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !388, file: !261, line: 2692, baseType: !13, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!415 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !388, file: !261, line: 2695, baseType: !13, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!416 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !388, file: !261, line: 2698, baseType: !13, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!417 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !388, file: !261, line: 2703, baseType: !13, size: 32, offset: 512)
!418 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !388, file: !261, line: 2705, baseType: !258, size: 64, offset: 576)
!419 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !388, file: !261, line: 2706, baseType: !258, size: 64, offset: 640)
!420 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !388, file: !261, line: 2707, baseType: !258, size: 64, offset: 704)
!421 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !388, file: !261, line: 2708, baseType: !258, size: 64, offset: 768)
!422 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !388, file: !261, line: 2711, baseType: !423, size: 64, offset: 832)
!423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !424, size: 64)
!424 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !261, line: 2711, flags: DIFlagFwdDecl)
!425 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !260, file: !261, line: 3383, baseType: !426, size: 960)
!426 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !261, line: 2756, size: 960, elements: !427)
!427 = !{!428, !429}
!428 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !426, file: !261, line: 2757, baseType: !388, size: 896)
!429 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !426, file: !261, line: 2758, baseType: !6, size: 64, offset: 896)
!430 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !260, file: !261, line: 3384, baseType: !431, size: 1472)
!431 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !261, line: 3114, size: 1472, elements: !432)
!432 = !{!433, !454, !455, !456, !457}
!433 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !431, file: !261, line: 3115, baseType: !434, size: 1216)
!434 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !261, line: 2984, size: 1216, elements: !435)
!435 = !{!436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453}
!436 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !434, file: !261, line: 2985, baseType: !426, size: 960)
!437 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !434, file: !261, line: 2986, baseType: !258, size: 64, offset: 960)
!438 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !434, file: !261, line: 2987, baseType: !258, size: 64, offset: 1024)
!439 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !434, file: !261, line: 2988, baseType: !258, size: 64, offset: 1088)
!440 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !434, file: !261, line: 2991, baseType: !13, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!441 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !434, file: !261, line: 2992, baseType: !13, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!442 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !434, file: !261, line: 2993, baseType: !13, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!443 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !434, file: !261, line: 2994, baseType: !13, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!444 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !434, file: !261, line: 2995, baseType: !13, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!445 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !434, file: !261, line: 2996, baseType: !13, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!446 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !434, file: !261, line: 2998, baseType: !13, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!447 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !434, file: !261, line: 3000, baseType: !13, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!448 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !434, file: !261, line: 3002, baseType: !13, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!449 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !434, file: !261, line: 3003, baseType: !13, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!450 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !434, file: !261, line: 3004, baseType: !13, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!451 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !434, file: !261, line: 3005, baseType: !13, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!452 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !434, file: !261, line: 3007, baseType: !13, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!453 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !434, file: !261, line: 3010, baseType: !13, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!454 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !431, file: !261, line: 3117, baseType: !258, size: 64, offset: 1216)
!455 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !431, file: !261, line: 3119, baseType: !258, size: 64, offset: 1280)
!456 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !431, file: !261, line: 3121, baseType: !258, size: 64, offset: 1344)
!457 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !431, file: !261, line: 3123, baseType: !258, size: 64, offset: 1408)
!458 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !260, file: !261, line: 3385, baseType: !459, size: 1088)
!459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !261, line: 2874, size: 1088, elements: !460)
!460 = !{!461, !462, !463}
!461 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !459, file: !261, line: 2875, baseType: !426, size: 960)
!462 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !459, file: !261, line: 2876, baseType: !6, size: 64, offset: 960)
!463 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !459, file: !261, line: 2877, baseType: !464, size: 64, offset: 1024)
!464 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !465, size: 64)
!465 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !466, line: 172, size: 128, elements: !467)
!466 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!467 = !{!468, !469, !470, !471, !472, !473, !474}
!468 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !465, file: !466, line: 174, baseType: !13, size: 1, flags: DIFlagBitField, extraData: i64 0)
!469 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !465, file: !466, line: 178, baseType: !13, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!470 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !465, file: !466, line: 183, baseType: !13, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!471 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !465, file: !466, line: 187, baseType: !13, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!472 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !465, file: !466, line: 192, baseType: !13, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!473 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !465, file: !466, line: 195, baseType: !13, size: 32, offset: 32)
!474 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !465, file: !466, line: 199, baseType: !258, size: 64, offset: 64)
!475 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !260, file: !261, line: 3386, baseType: !434, size: 1216)
!476 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !260, file: !261, line: 3387, baseType: !477, size: 1280)
!477 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !261, line: 3093, size: 1280, elements: !478)
!478 = !{!479, !480}
!479 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !477, file: !261, line: 3094, baseType: !434, size: 1216)
!480 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !477, file: !261, line: 3095, baseType: !464, size: 64, offset: 1216)
!481 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !260, file: !261, line: 3388, baseType: !482, size: 1216)
!482 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !261, line: 2824, size: 1216, elements: !483)
!483 = !{!484, !485, !486, !487, !488, !489}
!484 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !482, file: !261, line: 2825, baseType: !388, size: 896)
!485 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !482, file: !261, line: 2827, baseType: !258, size: 64, offset: 896)
!486 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !482, file: !261, line: 2828, baseType: !258, size: 64, offset: 960)
!487 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !482, file: !261, line: 2829, baseType: !258, size: 64, offset: 1024)
!488 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !482, file: !261, line: 2830, baseType: !258, size: 64, offset: 1088)
!489 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !482, file: !261, line: 2831, baseType: !258, size: 64, offset: 1152)
!490 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !260, file: !261, line: 3389, baseType: !491, size: 1024)
!491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !261, line: 2850, size: 1024, elements: !492)
!492 = !{!493, !494, !495}
!493 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !491, file: !261, line: 2851, baseType: !426, size: 960)
!494 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !491, file: !261, line: 2852, baseType: !32, size: 32, offset: 960)
!495 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !491, file: !261, line: 2853, baseType: !32, size: 32, offset: 992)
!496 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !260, file: !261, line: 3390, baseType: !497, size: 1024)
!497 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !261, line: 2857, size: 1024, elements: !498)
!498 = !{!499, !500}
!499 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !497, file: !261, line: 2858, baseType: !426, size: 960)
!500 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !497, file: !261, line: 2859, baseType: !464, size: 64, offset: 960)
!501 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !260, file: !261, line: 3391, baseType: !502, size: 960)
!502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !261, line: 2862, size: 960, elements: !503)
!503 = !{!504}
!504 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !502, file: !261, line: 2863, baseType: !426, size: 960)
!505 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !260, file: !261, line: 3392, baseType: !506, size: 1472)
!506 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !261, line: 3304, size: 1472, elements: !507)
!507 = !{!508}
!508 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !506, file: !261, line: 3305, baseType: !431, size: 1472)
!509 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !260, file: !261, line: 3393, baseType: !510, size: 1792)
!510 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !261, line: 3248, size: 1792, elements: !511)
!511 = !{!512, !513, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347}
!512 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !510, file: !261, line: 3249, baseType: !431, size: 1472)
!513 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !510, file: !261, line: 3251, baseType: !514, size: 64, offset: 1472)
!514 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !515, size: 64)
!515 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !516, line: 463, size: 1152, elements: !517)
!516 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!517 = !{!518, !689, !1207, !1208, !1263, !1266, !1267, !1268, !1269, !1270, !1271, !1300, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326}
!518 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !515, file: !516, line: 464, baseType: !519, size: 64)
!519 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !520, size: 64)
!520 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !521, line: 194, size: 384, elements: !522)
!521 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!522 = !{!523, !578, !591, !605, !657, !670}
!523 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !520, file: !521, line: 197, baseType: !524, size: 64)
!524 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !521, line: 182, baseType: !525)
!525 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !526, size: 64)
!526 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !521, line: 116, size: 704, elements: !527)
!527 = !{!528, !529, !530, !531, !532, !539, !566, !575, !576, !577}
!528 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !526, file: !521, line: 119, baseType: !525, size: 64)
!529 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !526, file: !521, line: 122, baseType: !525, size: 64, offset: 64)
!530 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !526, file: !521, line: 123, baseType: !525, size: 64, offset: 128)
!531 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !526, file: !521, line: 126, baseType: !32, size: 32, offset: 192)
!532 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !526, file: !521, line: 129, baseType: !533, size: 32, offset: 224)
!533 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !521, line: 30, baseType: !13, size: 32, elements: !534)
!534 = !{!535, !536, !537, !538}
!535 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!536 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!537 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!538 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!539 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !526, file: !521, line: 165, baseType: !540, size: 192, offset: 256)
!540 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !521, line: 132, size: 192, elements: !541)
!541 = !{!542, !555, !561}
!542 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !540, file: !521, line: 137, baseType: !543, size: 128)
!543 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !521, line: 133, size: 128, elements: !544)
!544 = !{!545, !554}
!545 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !543, file: !521, line: 135, baseType: !546, size: 64)
!546 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !547, size: 64)
!547 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !521, line: 93, size: 320, elements: !548)
!548 = !{!549, !550, !551, !552, !553}
!549 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !547, file: !521, line: 96, baseType: !546, size: 64)
!550 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !547, file: !521, line: 97, baseType: !546, size: 64, offset: 64)
!551 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !547, file: !521, line: 101, baseType: !258, size: 64, offset: 128)
!552 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !547, file: !521, line: 106, baseType: !258, size: 64, offset: 192)
!553 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !547, file: !521, line: 111, baseType: !258, size: 64, offset: 256)
!554 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !543, file: !521, line: 136, baseType: !546, size: 64, offset: 64)
!555 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !540, file: !521, line: 151, baseType: !556, size: 192)
!556 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !521, line: 139, size: 192, elements: !557)
!557 = !{!558, !559, !560}
!558 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !556, file: !521, line: 141, baseType: !258, size: 64)
!559 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !556, file: !521, line: 145, baseType: !258, size: 64, offset: 64)
!560 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !556, file: !521, line: 150, baseType: !32, size: 32, offset: 128)
!561 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !540, file: !521, line: 164, baseType: !562, size: 128)
!562 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !521, line: 153, size: 128, elements: !563)
!563 = !{!564, !565}
!564 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !562, file: !521, line: 161, baseType: !258, size: 64)
!565 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !562, file: !521, line: 163, baseType: !380, size: 32, offset: 64)
!566 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !526, file: !521, line: 168, baseType: !567, size: 64, offset: 448)
!567 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !568, size: 64)
!568 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !521, line: 67, size: 320, elements: !569)
!569 = !{!570, !571, !572, !573, !574}
!570 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !568, file: !521, line: 70, baseType: !567, size: 64)
!571 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !568, file: !521, line: 73, baseType: !525, size: 64, offset: 64)
!572 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !568, file: !521, line: 78, baseType: !258, size: 64, offset: 128)
!573 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !568, file: !521, line: 85, baseType: !6, size: 64, offset: 192)
!574 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !568, file: !521, line: 88, baseType: !32, size: 32, offset: 256)
!575 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !526, file: !521, line: 173, baseType: !6, size: 64, offset: 512)
!576 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !526, file: !521, line: 173, baseType: !6, size: 64, offset: 576)
!577 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !526, file: !521, line: 177, baseType: !372, size: 8, offset: 640)
!578 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !520, file: !521, line: 200, baseType: !579, size: 64, offset: 64)
!579 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !580, size: 64)
!580 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !521, line: 185, baseType: !581)
!581 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !521, line: 185, size: 128, elements: !582)
!582 = !{!583}
!583 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !581, file: !521, line: 185, baseType: !584, size: 128)
!584 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !521, line: 184, baseType: !585)
!585 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !521, line: 184, size: 128, elements: !586)
!586 = !{!587, !588, !589}
!587 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !585, file: !521, line: 184, baseType: !13, size: 32)
!588 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !585, file: !521, line: 184, baseType: !13, size: 32, offset: 32)
!589 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !585, file: !521, line: 184, baseType: !590, size: 64, offset: 64)
!590 = !DICompositeType(tag: DW_TAG_array_type, baseType: !524, size: 64, elements: !47)
!591 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !520, file: !521, line: 203, baseType: !592, size: 64, offset: 128)
!592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !593, size: 64)
!593 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !521, line: 189, baseType: !594)
!594 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !521, line: 189, size: 128, elements: !595)
!595 = !{!596}
!596 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !594, file: !521, line: 189, baseType: !597, size: 128)
!597 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !521, line: 188, baseType: !598)
!598 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !521, line: 188, size: 128, elements: !599)
!599 = !{!600, !601, !602}
!600 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !598, file: !521, line: 188, baseType: !13, size: 32)
!601 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !598, file: !521, line: 188, baseType: !13, size: 32, offset: 32)
!602 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !598, file: !521, line: 188, baseType: !603, size: 64, offset: 64)
!603 = !DICompositeType(tag: DW_TAG_array_type, baseType: !604, size: 64, elements: !47)
!604 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !521, line: 180, baseType: !567)
!605 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !520, file: !521, line: 207, baseType: !606, size: 64, offset: 192)
!606 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !607, line: 144, baseType: !608)
!607 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !609, size: 64)
!609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !607, line: 100, size: 896, elements: !610)
!610 = !{!611, !619, !624, !629, !631, !634, !635, !636, !637, !638, !643, !645, !646, !651, !656}
!611 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !609, file: !607, line: 102, baseType: !612, size: 64)
!612 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !607, line: 52, baseType: !613)
!613 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !614, size: 64)
!614 = !DISubroutineType(types: !615)
!615 = !{!616, !617}
!616 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !607, line: 47, baseType: !13)
!617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !618, size: 64)
!618 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!619 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !609, file: !607, line: 105, baseType: !620, size: 64, offset: 64)
!620 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !607, line: 59, baseType: !621)
!621 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !622, size: 64)
!622 = !DISubroutineType(types: !623)
!623 = !{!32, !617, !617}
!624 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !609, file: !607, line: 108, baseType: !625, size: 64, offset: 128)
!625 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !607, line: 63, baseType: !626)
!626 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !627, size: 64)
!627 = !DISubroutineType(types: !628)
!628 = !{null, !248}
!629 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !609, file: !607, line: 111, baseType: !630, size: 64, offset: 192)
!630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !248, size: 64)
!631 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !609, file: !607, line: 114, baseType: !632, size: 64, offset: 256)
!632 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !633, line: 46, baseType: !210)
!633 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!634 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !609, file: !607, line: 117, baseType: !632, size: 64, offset: 320)
!635 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !609, file: !607, line: 120, baseType: !632, size: 64, offset: 384)
!636 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !609, file: !607, line: 124, baseType: !13, size: 32, offset: 448)
!637 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !609, file: !607, line: 128, baseType: !13, size: 32, offset: 480)
!638 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !609, file: !607, line: 131, baseType: !639, size: 64, offset: 512)
!639 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !607, line: 75, baseType: !640)
!640 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !641, size: 64)
!641 = !DISubroutineType(types: !642)
!642 = !{!248, !632, !632}
!643 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !609, file: !607, line: 132, baseType: !644, size: 64, offset: 576)
!644 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !607, line: 78, baseType: !626)
!645 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !609, file: !607, line: 135, baseType: !248, size: 64, offset: 640)
!646 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !609, file: !607, line: 136, baseType: !647, size: 64, offset: 704)
!647 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !607, line: 82, baseType: !648)
!648 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !649, size: 64)
!649 = !DISubroutineType(types: !650)
!650 = !{!248, !248, !632, !632}
!651 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !609, file: !607, line: 137, baseType: !652, size: 64, offset: 768)
!652 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !607, line: 83, baseType: !653)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!654 = !DISubroutineType(types: !655)
!655 = !{null, !248, !248}
!656 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !609, file: !607, line: 141, baseType: !13, size: 32, offset: 832)
!657 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !520, file: !521, line: 211, baseType: !658, size: 64, offset: 256)
!658 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !659, size: 64)
!659 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !261, line: 183, baseType: !660)
!660 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !261, line: 183, size: 128, elements: !661)
!661 = !{!662}
!662 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !660, file: !261, line: 183, baseType: !663, size: 128)
!663 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !261, line: 182, baseType: !664)
!664 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !261, line: 182, size: 128, elements: !665)
!665 = !{!666, !667, !668}
!666 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !664, file: !261, line: 182, baseType: !13, size: 32)
!667 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !664, file: !261, line: 182, baseType: !13, size: 32, offset: 32)
!668 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !664, file: !261, line: 182, baseType: !669, size: 64, offset: 64)
!669 = !DICompositeType(tag: DW_TAG_array_type, baseType: !258, size: 64, elements: !47)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !520, file: !521, line: 220, baseType: !671, size: 64, offset: 320)
!671 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !521, line: 217, size: 64, elements: !672)
!672 = !{!673, !674}
!673 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !671, file: !521, line: 218, baseType: !658, size: 64)
!674 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !671, file: !521, line: 219, baseType: !675, size: 64)
!675 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !676, size: 64)
!676 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !677, line: 29, baseType: !678)
!677 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!678 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !677, line: 29, size: 96, elements: !679)
!679 = !{!680}
!680 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !678, file: !677, line: 29, baseType: !681, size: 96)
!681 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !677, line: 27, baseType: !682)
!682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !677, line: 27, size: 96, elements: !683)
!683 = !{!684, !685, !686}
!684 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !682, file: !677, line: 27, baseType: !13, size: 32)
!685 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !682, file: !677, line: 27, baseType: !13, size: 32, offset: 32)
!686 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !682, file: !677, line: 27, baseType: !687, size: 8, offset: 64)
!687 = !DICompositeType(tag: DW_TAG_array_type, baseType: !688, size: 8, elements: !47)
!688 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !677, line: 26, baseType: !372)
!689 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !515, file: !516, line: 467, baseType: !690, size: 64, offset: 64)
!690 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !691, size: 64)
!691 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !692, line: 374, size: 640, elements: !693)
!692 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!693 = !{!694, !1172, !1173, !1186, !1187, !1188, !1189, !1190, !1196, !1203, !1205, !1206}
!694 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !691, file: !692, line: 377, baseType: !695, size: 64)
!695 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !7, line: 111, baseType: !696)
!696 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !697, size: 64)
!697 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !692, line: 217, size: 832, elements: !698)
!698 = !{!699, !1137, !1138, !1139, !1142, !1146, !1147, !1148, !1166, !1167, !1168, !1169, !1170, !1171}
!699 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !697, file: !692, line: 219, baseType: !700, size: 64)
!700 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !701, size: 64)
!701 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !692, line: 151, baseType: !702)
!702 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !692, line: 151, size: 128, elements: !703)
!703 = !{!704}
!704 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !702, file: !692, line: 151, baseType: !705, size: 128)
!705 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !692, line: 150, baseType: !706)
!706 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !692, line: 150, size: 128, elements: !707)
!707 = !{!708, !709, !710}
!708 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !706, file: !692, line: 150, baseType: !13, size: 32)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !706, file: !692, line: 150, baseType: !13, size: 32, offset: 32)
!710 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !706, file: !692, line: 150, baseType: !711, size: 64, offset: 64)
!711 = !DICompositeType(tag: DW_TAG_array_type, baseType: !712, size: 64, elements: !47)
!712 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !7, line: 108, baseType: !713)
!713 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !714, size: 64)
!714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !692, line: 122, size: 512, elements: !715)
!715 = !{!716, !717, !718, !1129, !1130, !1131, !1132, !1133, !1134, !1135}
!716 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !714, file: !692, line: 124, baseType: !696, size: 64)
!717 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !714, file: !692, line: 125, baseType: !696, size: 64, offset: 64)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !714, file: !692, line: 131, baseType: !719, size: 64, offset: 128)
!719 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !692, line: 128, size: 64, elements: !720)
!720 = !{!721, !1128}
!721 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !719, file: !692, line: 129, baseType: !722, size: 64)
!722 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !7, line: 66, baseType: !723)
!723 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !724, size: 64)
!724 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !725, line: 143, size: 192, elements: !726)
!725 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!726 = !{!727, !1126, !1127}
!727 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !724, file: !725, line: 145, baseType: !728, size: 64)
!728 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !7, line: 69, baseType: !729)
!729 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !730, size: 64)
!730 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !725, line: 136, size: 192, elements: !731)
!731 = !{!732, !1124, !1125}
!732 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !730, file: !725, line: 137, baseType: !733, size: 64)
!733 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !7, line: 58, baseType: !734)
!734 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !735, size: 64)
!735 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !725, line: 737, size: 768, elements: !736)
!736 = !{!737, !754, !787, !793, !798, !803, !810, !816, !822, !827, !841, !846, !852, !857, !867, !872, !1082, !1089, !1096, !1102, !1107, !1113, !1119}
!737 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !735, file: !725, line: 738, baseType: !738, size: 256)
!738 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !725, line: 271, size: 256, elements: !739)
!739 = !{!740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753}
!740 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !738, file: !725, line: 274, baseType: !13, size: 8, flags: DIFlagBitField, extraData: i64 0)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !738, file: !725, line: 277, baseType: !13, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !738, file: !725, line: 281, baseType: !13, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !738, file: !725, line: 284, baseType: !13, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !738, file: !725, line: 291, baseType: !13, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !738, file: !725, line: 295, baseType: !13, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !738, file: !725, line: 298, baseType: !13, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !738, file: !725, line: 301, baseType: !13, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!748 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !738, file: !725, line: 307, baseType: !13, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!749 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !738, file: !725, line: 312, baseType: !13, size: 32, offset: 32)
!750 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !738, file: !725, line: 316, baseType: !380, size: 32, offset: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !738, file: !725, line: 319, baseType: !13, size: 32, offset: 96)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !738, file: !725, line: 323, baseType: !696, size: 64, offset: 128)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !738, file: !725, line: 327, baseType: !258, size: 64, offset: 192)
!754 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !735, file: !725, line: 739, baseType: !755, size: 448)
!755 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !725, line: 350, size: 448, elements: !756)
!756 = !{!757, !786}
!757 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !755, file: !725, line: 353, baseType: !758, size: 384)
!758 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !725, line: 333, size: 384, elements: !759)
!759 = !{!760, !761, !769}
!760 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !758, file: !725, line: 336, baseType: !738, size: 256)
!761 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !758, file: !725, line: 343, baseType: !762, size: 64, offset: 256)
!762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !763, size: 64)
!763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !764, line: 37, size: 128, elements: !765)
!764 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!765 = !{!766, !767}
!766 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !763, file: !764, line: 39, baseType: !762, size: 64)
!767 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !763, file: !764, line: 40, baseType: !768, size: 64, offset: 64)
!768 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !258, size: 64)
!769 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !758, file: !725, line: 344, baseType: !770, size: 64, offset: 320)
!770 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !771, size: 64)
!771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !764, line: 45, size: 320, elements: !772)
!772 = !{!773, !774}
!773 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !771, file: !764, line: 47, baseType: !770, size: 64)
!774 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !771, file: !764, line: 48, baseType: !775, size: 256, offset: 64)
!775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !261, line: 1883, size: 256, elements: !776)
!776 = !{!777, !779, !780, !785}
!777 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !775, file: !261, line: 1884, baseType: !778, size: 64)
!778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !775, size: 64)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !775, file: !261, line: 1885, baseType: !778, size: 64, offset: 64)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !775, file: !261, line: 1891, baseType: !781, size: 64, offset: 128)
!781 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !775, file: !261, line: 1891, size: 64, elements: !782)
!782 = !{!783, !784}
!783 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !781, file: !261, line: 1891, baseType: !733, size: 64)
!784 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !781, file: !261, line: 1891, baseType: !258, size: 64)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !775, file: !261, line: 1892, baseType: !768, size: 64, offset: 192)
!786 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !755, file: !725, line: 359, baseType: !669, size: 64, offset: 384)
!787 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !735, file: !725, line: 740, baseType: !788, size: 512)
!788 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !725, line: 365, size: 512, elements: !789)
!789 = !{!790, !791, !792}
!790 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !788, file: !725, line: 368, baseType: !758, size: 384)
!791 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !788, file: !725, line: 373, baseType: !258, size: 64, offset: 384)
!792 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !788, file: !725, line: 374, baseType: !258, size: 64, offset: 448)
!793 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !735, file: !725, line: 741, baseType: !794, size: 576)
!794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !725, line: 380, size: 576, elements: !795)
!795 = !{!796, !797}
!796 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !794, file: !725, line: 383, baseType: !788, size: 512)
!797 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !794, file: !725, line: 389, baseType: !669, size: 64, offset: 512)
!798 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !735, file: !725, line: 742, baseType: !799, size: 320)
!799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !725, line: 395, size: 320, elements: !800)
!800 = !{!801, !802}
!801 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !799, file: !725, line: 397, baseType: !738, size: 256)
!802 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !799, file: !725, line: 400, baseType: !722, size: 64, offset: 256)
!803 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !735, file: !725, line: 743, baseType: !804, size: 448)
!804 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !725, line: 406, size: 448, elements: !805)
!805 = !{!806, !807, !808, !809}
!806 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !804, file: !725, line: 408, baseType: !738, size: 256)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !804, file: !725, line: 412, baseType: !258, size: 64, offset: 256)
!808 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !804, file: !725, line: 420, baseType: !258, size: 64, offset: 320)
!809 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !804, file: !725, line: 423, baseType: !722, size: 64, offset: 384)
!810 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !735, file: !725, line: 744, baseType: !811, size: 384)
!811 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !725, line: 429, size: 384, elements: !812)
!812 = !{!813, !814, !815}
!813 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !811, file: !725, line: 431, baseType: !738, size: 256)
!814 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !811, file: !725, line: 434, baseType: !258, size: 64, offset: 256)
!815 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !811, file: !725, line: 437, baseType: !722, size: 64, offset: 320)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !735, file: !725, line: 745, baseType: !817, size: 384)
!817 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !725, line: 443, size: 384, elements: !818)
!818 = !{!819, !820, !821}
!819 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !817, file: !725, line: 445, baseType: !738, size: 256)
!820 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !817, file: !725, line: 449, baseType: !258, size: 64, offset: 256)
!821 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !817, file: !725, line: 453, baseType: !722, size: 64, offset: 320)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !735, file: !725, line: 746, baseType: !823, size: 320)
!823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !725, line: 459, size: 320, elements: !824)
!824 = !{!825, !826}
!825 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !823, file: !725, line: 461, baseType: !738, size: 256)
!826 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !823, file: !725, line: 464, baseType: !258, size: 64, offset: 256)
!827 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !735, file: !725, line: 747, baseType: !828, size: 768)
!828 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !725, line: 469, size: 768, elements: !829)
!829 = !{!830, !831, !832, !833, !834}
!830 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !828, file: !725, line: 471, baseType: !738, size: 256)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !828, file: !725, line: 474, baseType: !13, size: 32, offset: 256)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !828, file: !725, line: 475, baseType: !13, size: 32, offset: 288)
!833 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !828, file: !725, line: 478, baseType: !258, size: 64, offset: 320)
!834 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !828, file: !725, line: 481, baseType: !835, size: 384, offset: 384)
!835 = !DICompositeType(tag: DW_TAG_array_type, baseType: !836, size: 384, elements: !47)
!836 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !261, line: 1917, size: 384, elements: !837)
!837 = !{!838, !839, !840}
!838 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !836, file: !261, line: 1920, baseType: !775, size: 256)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !836, file: !261, line: 1921, baseType: !258, size: 64, offset: 256)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !836, file: !261, line: 1922, baseType: !380, size: 32, offset: 320)
!841 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !735, file: !725, line: 748, baseType: !842, size: 320)
!842 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !725, line: 487, size: 320, elements: !843)
!843 = !{!844, !845}
!844 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !842, file: !725, line: 490, baseType: !738, size: 256)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !842, file: !725, line: 494, baseType: !32, size: 32, offset: 256)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !735, file: !725, line: 749, baseType: !847, size: 384)
!847 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !725, line: 500, size: 384, elements: !848)
!848 = !{!849, !850, !851}
!849 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !847, file: !725, line: 502, baseType: !738, size: 256)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !847, file: !725, line: 506, baseType: !722, size: 64, offset: 256)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !847, file: !725, line: 510, baseType: !722, size: 64, offset: 320)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !735, file: !725, line: 750, baseType: !853, size: 320)
!853 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !725, line: 529, size: 320, elements: !854)
!854 = !{!855, !856}
!855 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !853, file: !725, line: 531, baseType: !738, size: 256)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !853, file: !725, line: 540, baseType: !722, size: 64, offset: 256)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !735, file: !725, line: 751, baseType: !858, size: 704)
!858 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !725, line: 546, size: 704, elements: !859)
!859 = !{!860, !861, !862, !863, !864, !865, !866}
!860 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !858, file: !725, line: 549, baseType: !788, size: 512)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !858, file: !725, line: 553, baseType: !35, size: 64, offset: 512)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !858, file: !725, line: 557, baseType: !372, size: 8, offset: 576)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !858, file: !725, line: 558, baseType: !372, size: 8, offset: 584)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !858, file: !725, line: 559, baseType: !372, size: 8, offset: 592)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !858, file: !725, line: 560, baseType: !372, size: 8, offset: 600)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !858, file: !725, line: 566, baseType: !669, size: 64, offset: 640)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !735, file: !725, line: 752, baseType: !868, size: 384)
!868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !725, line: 571, size: 384, elements: !869)
!869 = !{!870, !871}
!870 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !868, file: !725, line: 573, baseType: !799, size: 320)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !868, file: !725, line: 577, baseType: !258, size: 64, offset: 320)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !735, file: !725, line: 753, baseType: !873, size: 576)
!873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !725, line: 600, size: 576, elements: !874)
!874 = !{!875, !876, !877, !878, !1081}
!875 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !873, file: !725, line: 602, baseType: !799, size: 320)
!876 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !873, file: !725, line: 605, baseType: !258, size: 64, offset: 320)
!877 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !873, file: !725, line: 609, baseType: !632, size: 64, offset: 384)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !873, file: !725, line: 612, baseType: !879, size: 64, offset: 448)
!879 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !880, size: 64)
!880 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !725, line: 581, size: 320, elements: !881)
!881 = !{!882, !1077, !1078, !1079, !1080}
!882 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !880, file: !725, line: 583, baseType: !883, size: 32)
!883 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !261, line: 39, baseType: !13, size: 32, elements: !884)
!884 = !{!885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076}
!885 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!886 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!887 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!888 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!889 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!890 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!891 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!892 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!893 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!894 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!895 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!896 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!897 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!898 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!899 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!900 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!901 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!902 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!903 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!904 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!905 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!906 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!907 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!908 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!909 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!910 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!911 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!912 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!913 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!914 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!915 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!916 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!917 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!918 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!919 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!920 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!921 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!922 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!923 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!924 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!925 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!926 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!927 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!928 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!929 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!930 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!931 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!932 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!933 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!934 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!935 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!936 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!937 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!938 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!939 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!940 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!941 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!942 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!943 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!944 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!945 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!946 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!947 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!948 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!949 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!950 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!951 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!952 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!953 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!954 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!955 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!956 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!957 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!958 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!959 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!960 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!961 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!962 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!963 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!964 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!965 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!966 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!967 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!968 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!969 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!970 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!971 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!972 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!973 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!974 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!975 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!976 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!977 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!978 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!979 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!980 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!981 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!982 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!983 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!984 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!985 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!986 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!987 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!988 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!989 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!990 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!991 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!992 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!993 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!994 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!995 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!996 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!997 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!998 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!999 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!1000 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!1001 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!1002 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!1003 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!1004 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!1005 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!1006 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!1007 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!1008 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!1009 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!1010 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!1011 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!1012 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!1013 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!1014 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!1015 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!1016 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!1017 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!1018 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!1019 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!1020 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!1021 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!1022 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!1023 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!1024 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!1025 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!1026 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!1027 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!1028 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!1029 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!1030 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!1031 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!1032 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!1033 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!1034 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!1035 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!1036 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!1037 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!1038 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!1039 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!1040 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!1041 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!1042 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!1043 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!1044 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!1045 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!1046 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!1047 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!1048 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!1049 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!1050 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!1051 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!1052 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!1053 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!1054 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!1055 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!1056 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!1057 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!1058 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!1059 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!1060 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!1061 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!1062 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!1063 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!1064 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!1065 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!1066 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!1067 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!1068 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!1069 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!1070 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!1071 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!1072 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!1073 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!1074 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!1075 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!1076 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!1077 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !880, file: !725, line: 586, baseType: !258, size: 64, offset: 64)
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !880, file: !725, line: 589, baseType: !258, size: 64, offset: 128)
!1079 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !880, file: !725, line: 592, baseType: !258, size: 64, offset: 192)
!1080 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !880, file: !725, line: 595, baseType: !258, size: 64, offset: 256)
!1081 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !873, file: !725, line: 616, baseType: !722, size: 64, offset: 512)
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !735, file: !725, line: 754, baseType: !1083, size: 512)
!1083 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !725, line: 622, size: 512, elements: !1084)
!1084 = !{!1085, !1086, !1087, !1088}
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1083, file: !725, line: 624, baseType: !799, size: 320)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1083, file: !725, line: 628, baseType: !258, size: 64, offset: 320)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1083, file: !725, line: 632, baseType: !258, size: 64, offset: 384)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1083, file: !725, line: 636, baseType: !258, size: 64, offset: 448)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !735, file: !725, line: 755, baseType: !1090, size: 704)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !725, line: 642, size: 704, elements: !1091)
!1091 = !{!1092, !1093, !1094, !1095}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1090, file: !725, line: 644, baseType: !1083, size: 512)
!1093 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1090, file: !725, line: 648, baseType: !258, size: 64, offset: 512)
!1094 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1090, file: !725, line: 652, baseType: !258, size: 64, offset: 576)
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1090, file: !725, line: 653, baseType: !258, size: 64, offset: 640)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !735, file: !725, line: 756, baseType: !1097, size: 448)
!1097 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !725, line: 663, size: 448, elements: !1098)
!1098 = !{!1099, !1100, !1101}
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1097, file: !725, line: 665, baseType: !799, size: 320)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1097, file: !725, line: 668, baseType: !258, size: 64, offset: 320)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1097, file: !725, line: 673, baseType: !258, size: 64, offset: 384)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !735, file: !725, line: 757, baseType: !1103, size: 384)
!1103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !725, line: 694, size: 384, elements: !1104)
!1104 = !{!1105, !1106}
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1103, file: !725, line: 696, baseType: !799, size: 320)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1103, file: !725, line: 699, baseType: !258, size: 64, offset: 320)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !735, file: !725, line: 758, baseType: !1108, size: 384)
!1108 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !725, line: 681, size: 384, elements: !1109)
!1109 = !{!1110, !1111, !1112}
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1108, file: !725, line: 683, baseType: !738, size: 256)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1108, file: !725, line: 686, baseType: !258, size: 64, offset: 256)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1108, file: !725, line: 689, baseType: !258, size: 64, offset: 320)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !735, file: !725, line: 759, baseType: !1114, size: 384)
!1114 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !725, line: 707, size: 384, elements: !1115)
!1115 = !{!1116, !1117, !1118}
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1114, file: !725, line: 709, baseType: !738, size: 256)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1114, file: !725, line: 712, baseType: !258, size: 64, offset: 256)
!1118 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1114, file: !725, line: 712, baseType: !258, size: 64, offset: 320)
!1119 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !735, file: !725, line: 760, baseType: !1120, size: 320)
!1120 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !725, line: 718, size: 320, elements: !1121)
!1121 = !{!1122, !1123}
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1120, file: !725, line: 720, baseType: !738, size: 256)
!1123 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1120, file: !725, line: 723, baseType: !258, size: 64, offset: 256)
!1124 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !730, file: !725, line: 138, baseType: !729, size: 64, offset: 64)
!1125 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !730, file: !725, line: 139, baseType: !729, size: 64, offset: 128)
!1126 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !724, file: !725, line: 146, baseType: !728, size: 64, offset: 64)
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !724, file: !725, line: 152, baseType: !722, size: 64, offset: 128)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !719, file: !692, line: 130, baseType: !6, size: 64)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !714, file: !692, line: 134, baseType: !248, size: 64, offset: 192)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !714, file: !692, line: 137, baseType: !258, size: 64, offset: 256)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !714, file: !692, line: 138, baseType: !380, size: 32, offset: 320)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !714, file: !692, line: 142, baseType: !13, size: 32, offset: 352)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !714, file: !692, line: 144, baseType: !32, size: 32, offset: 384)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !714, file: !692, line: 145, baseType: !32, size: 32, offset: 416)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !714, file: !692, line: 146, baseType: !1136, size: 64, offset: 448)
!1136 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !692, line: 119, baseType: !227)
!1137 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !697, file: !692, line: 220, baseType: !700, size: 64, offset: 64)
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !697, file: !692, line: 223, baseType: !248, size: 64, offset: 128)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !697, file: !692, line: 226, baseType: !1140, size: 64, offset: 192)
!1140 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1141, size: 64)
!1141 = !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !692, line: 185, flags: DIFlagFwdDecl)
!1142 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !697, file: !692, line: 229, baseType: !1143, size: 128, offset: 256)
!1143 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1144, size: 128, elements: !211)
!1144 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1145, size: 64)
!1145 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !692, line: 229, flags: DIFlagFwdDecl)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !697, file: !692, line: 232, baseType: !696, size: 64, offset: 384)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !697, file: !692, line: 233, baseType: !696, size: 64, offset: 448)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !697, file: !692, line: 238, baseType: !1149, size: 64, offset: 512)
!1149 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !692, line: 235, size: 64, elements: !1150)
!1150 = !{!1151, !1157}
!1151 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !1149, file: !692, line: 236, baseType: !1152, size: 64)
!1152 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1153, size: 64)
!1153 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !692, line: 273, size: 128, elements: !1154)
!1154 = !{!1155, !1156}
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !1153, file: !692, line: 275, baseType: !722, size: 64)
!1156 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !1153, file: !692, line: 278, baseType: !722, size: 64, offset: 64)
!1157 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !1149, file: !692, line: 237, baseType: !1158, size: 64)
!1158 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1159, size: 64)
!1159 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !692, line: 259, size: 320, elements: !1160)
!1160 = !{!1161, !1162, !1163, !1164, !1165}
!1161 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !1159, file: !692, line: 261, baseType: !6, size: 64)
!1162 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !1159, file: !692, line: 262, baseType: !6, size: 64, offset: 64)
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1159, file: !692, line: 266, baseType: !6, size: 64, offset: 128)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !1159, file: !692, line: 267, baseType: !6, size: 64, offset: 192)
!1165 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !1159, file: !692, line: 270, baseType: !32, size: 32, offset: 256)
!1166 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !697, file: !692, line: 241, baseType: !1136, size: 64, offset: 576)
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !697, file: !692, line: 244, baseType: !32, size: 32, offset: 640)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !697, file: !692, line: 247, baseType: !32, size: 32, offset: 672)
!1169 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !697, file: !692, line: 250, baseType: !32, size: 32, offset: 704)
!1170 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !697, file: !692, line: 253, baseType: !32, size: 32, offset: 736)
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !697, file: !692, line: 256, baseType: !32, size: 32, offset: 768)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !691, file: !692, line: 378, baseType: !695, size: 64, offset: 64)
!1173 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !691, file: !692, line: 381, baseType: !1174, size: 64, offset: 128)
!1174 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1175, size: 64)
!1175 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !692, line: 282, baseType: !1176)
!1176 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !692, line: 282, size: 128, elements: !1177)
!1177 = !{!1178}
!1178 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1176, file: !692, line: 282, baseType: !1179, size: 128)
!1179 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !692, line: 281, baseType: !1180)
!1180 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !692, line: 281, size: 128, elements: !1181)
!1181 = !{!1182, !1183, !1184}
!1182 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1180, file: !692, line: 281, baseType: !13, size: 32)
!1183 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1180, file: !692, line: 281, baseType: !13, size: 32, offset: 32)
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1180, file: !692, line: 281, baseType: !1185, size: 64, offset: 64)
!1185 = !DICompositeType(tag: DW_TAG_array_type, baseType: !695, size: 64, elements: !47)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !691, file: !692, line: 384, baseType: !32, size: 32, offset: 192)
!1187 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !691, file: !692, line: 387, baseType: !32, size: 32, offset: 224)
!1188 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !691, file: !692, line: 390, baseType: !32, size: 32, offset: 256)
!1189 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !691, file: !692, line: 394, baseType: !1174, size: 64, offset: 320)
!1190 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !691, file: !692, line: 396, baseType: !1191, size: 32, offset: 384)
!1191 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !692, line: 363, baseType: !13, size: 32, elements: !1192)
!1192 = !{!1193, !1194, !1195}
!1193 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!1194 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!1195 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !691, file: !692, line: 399, baseType: !1197, size: 64, offset: 416)
!1197 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1198, size: 64, elements: !211)
!1198 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !692, line: 355, baseType: !13, size: 32, elements: !1199)
!1199 = !{!1200, !1201, !1202}
!1200 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!1201 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!1202 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !691, file: !692, line: 402, baseType: !1204, size: 64, offset: 480)
!1204 = !DICompositeType(tag: DW_TAG_array_type, baseType: !13, size: 64, elements: !211)
!1205 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !691, file: !692, line: 406, baseType: !32, size: 32, offset: 544)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !691, file: !692, line: 409, baseType: !32, size: 32, offset: 576)
!1207 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !515, file: !516, line: 470, baseType: !723, size: 64, offset: 128)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !515, file: !516, line: 473, baseType: !1209, size: 64, offset: 192)
!1209 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1210, size: 64)
!1210 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !466, line: 39, size: 1152, elements: !1211)
!1211 = !{!1212, !1213, !1226, !1227, !1228, !1240, !1241, !1245, !1246, !1247, !1248, !1249}
!1212 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1210, file: !466, line: 41, baseType: !606, size: 64)
!1213 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1210, file: !466, line: 48, baseType: !1214, size: 64, offset: 64)
!1214 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1215, size: 64)
!1215 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !725, line: 35, baseType: !1216)
!1216 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !725, line: 35, size: 128, elements: !1217)
!1217 = !{!1218}
!1218 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1216, file: !725, line: 35, baseType: !1219, size: 128)
!1219 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !725, line: 33, baseType: !1220)
!1220 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !725, line: 33, size: 128, elements: !1221)
!1221 = !{!1222, !1223, !1224}
!1222 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1220, file: !725, line: 33, baseType: !13, size: 32)
!1223 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1220, file: !725, line: 33, baseType: !13, size: 32, offset: 32)
!1224 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1220, file: !725, line: 33, baseType: !1225, size: 64, offset: 64)
!1225 = !DICompositeType(tag: DW_TAG_array_type, baseType: !733, size: 64, elements: !47)
!1226 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1210, file: !466, line: 51, baseType: !658, size: 64, offset: 128)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1210, file: !466, line: 54, baseType: !258, size: 64, offset: 192)
!1228 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1210, file: !466, line: 57, baseType: !1229, size: 128, offset: 256)
!1229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1230, line: 31, size: 128, elements: !1231)
!1230 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1231 = !{!1232, !1233, !1234, !1235, !1236, !1237, !1238}
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1229, file: !1230, line: 35, baseType: !13, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1233 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1229, file: !1230, line: 39, baseType: !13, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1234 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1229, file: !1230, line: 42, baseType: !13, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1235 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1229, file: !1230, line: 46, baseType: !13, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1236 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1229, file: !1230, line: 50, baseType: !13, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1229, file: !1230, line: 53, baseType: !13, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1238 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1229, file: !1230, line: 56, baseType: !1239, size: 64, offset: 64)
!1239 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !7, line: 47, baseType: !194)
!1240 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1210, file: !466, line: 60, baseType: !1229, size: 128, offset: 384)
!1241 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1210, file: !466, line: 64, baseType: !1242, size: 64, offset: 512)
!1242 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1243, size: 64)
!1243 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1244, line: 33, flags: DIFlagFwdDecl)
!1244 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1210, file: !466, line: 67, baseType: !258, size: 64, offset: 576)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1210, file: !466, line: 73, baseType: !606, size: 64, offset: 640)
!1247 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1210, file: !466, line: 77, baseType: !1239, size: 64, offset: 704)
!1248 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1210, file: !466, line: 80, baseType: !13, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1249 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1210, file: !466, line: 82, baseType: !1250, size: 320, offset: 832)
!1250 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !764, line: 62, size: 320, elements: !1251)
!1251 = !{!1252, !1258, !1259, !1260, !1261, !1262}
!1252 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1250, file: !764, line: 63, baseType: !1253, size: 64)
!1253 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1254, size: 64)
!1254 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !764, line: 56, size: 128, elements: !1255)
!1255 = !{!1256, !1257}
!1256 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1254, file: !764, line: 57, baseType: !1253, size: 64)
!1257 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1254, file: !764, line: 58, baseType: !354, size: 8, offset: 64)
!1258 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1250, file: !764, line: 64, baseType: !13, size: 32, offset: 64)
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1250, file: !764, line: 66, baseType: !13, size: 32, offset: 96)
!1260 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1250, file: !764, line: 68, baseType: !372, size: 8, offset: 128)
!1261 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1250, file: !764, line: 70, baseType: !762, size: 64, offset: 192)
!1262 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1250, file: !764, line: 71, baseType: !770, size: 64, offset: 256)
!1263 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !515, file: !516, line: 476, baseType: !1264, size: 64, offset: 256)
!1264 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1265, size: 64)
!1265 = !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !516, line: 476, flags: DIFlagFwdDecl)
!1266 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !515, file: !516, line: 479, baseType: !606, size: 64, offset: 320)
!1267 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !515, file: !516, line: 484, baseType: !258, size: 64, offset: 384)
!1268 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !515, file: !516, line: 488, baseType: !258, size: 64, offset: 448)
!1269 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !515, file: !516, line: 493, baseType: !258, size: 64, offset: 512)
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !515, file: !516, line: 496, baseType: !258, size: 64, offset: 576)
!1271 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !515, file: !516, line: 501, baseType: !1272, size: 64, offset: 640)
!1272 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1273, size: 64)
!1273 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !1274, line: 2355, size: 576, elements: !1275)
!1274 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1275 = !{!1276, !1279, !1280, !1281, !1282, !1284, !1285, !1290, !1295, !1296, !1297, !1298, !1299}
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1273, file: !1274, line: 2356, baseType: !1277, size: 64)
!1277 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1278, size: 64)
!1278 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !1274, line: 2356, flags: DIFlagFwdDecl)
!1279 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1273, file: !1274, line: 2357, baseType: !35, size: 64, offset: 64)
!1280 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1273, file: !1274, line: 2358, baseType: !32, size: 32, offset: 128)
!1281 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1273, file: !1274, line: 2359, baseType: !32, size: 32, offset: 160)
!1282 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1273, file: !1274, line: 2360, baseType: !1283, size: 128, offset: 192)
!1283 = !DICompositeType(tag: DW_TAG_array_type, baseType: !32, size: 128, elements: !237)
!1284 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1273, file: !1274, line: 2364, baseType: !32, size: 32, offset: 320)
!1285 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1273, file: !1274, line: 2367, baseType: !1286, size: 128, offset: 384)
!1286 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !1274, line: 2349, size: 128, elements: !1287)
!1287 = !{!1288, !1289}
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1286, file: !1274, line: 2351, baseType: !6, size: 64)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1286, file: !1274, line: 2352, baseType: !227, size: 64, offset: 64)
!1290 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1273, file: !1274, line: 2371, baseType: !1291, size: 32, offset: 512)
!1291 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !1274, line: 474, baseType: !13, size: 32, elements: !1292)
!1292 = !{!1293, !1294}
!1293 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!1294 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!1295 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1273, file: !1274, line: 2374, baseType: !13, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1273, file: !1274, line: 2377, baseType: !13, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1273, file: !1274, line: 2381, baseType: !13, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1273, file: !1274, line: 2392, baseType: !13, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1273, file: !1274, line: 2396, baseType: !13, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !515, file: !516, line: 504, baseType: !1301, size: 64, offset: 704)
!1301 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1302, size: 64)
!1302 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !516, line: 504, flags: DIFlagFwdDecl)
!1303 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !515, file: !516, line: 507, baseType: !606, size: 64, offset: 768)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !515, file: !516, line: 510, baseType: !32, size: 32, offset: 832)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !515, file: !516, line: 513, baseType: !32, size: 32, offset: 864)
!1306 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !515, file: !516, line: 516, baseType: !380, size: 32, offset: 896)
!1307 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !515, file: !516, line: 519, baseType: !380, size: 32, offset: 928)
!1308 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !515, file: !516, line: 522, baseType: !13, size: 32, offset: 960)
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !515, file: !516, line: 523, baseType: !13, size: 32, offset: 992)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !515, file: !516, line: 528, baseType: !35, size: 64, offset: 1024)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !515, file: !516, line: 535, baseType: !13, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !515, file: !516, line: 539, baseType: !13, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !515, file: !516, line: 543, baseType: !13, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1314 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !515, file: !516, line: 546, baseType: !13, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1315 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !515, file: !516, line: 550, baseType: !13, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1316 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !515, file: !516, line: 554, baseType: !13, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !515, file: !516, line: 559, baseType: !13, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1318 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !515, file: !516, line: 562, baseType: !13, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1319 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !515, file: !516, line: 571, baseType: !13, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1320 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !515, file: !516, line: 573, baseType: !13, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !515, file: !516, line: 574, baseType: !13, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !515, file: !516, line: 581, baseType: !13, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !515, file: !516, line: 585, baseType: !13, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !515, file: !516, line: 588, baseType: !13, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !515, file: !516, line: 592, baseType: !13, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !515, file: !516, line: 598, baseType: !13, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1327 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !510, file: !261, line: 3254, baseType: !258, size: 64, offset: 1536)
!1328 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !510, file: !261, line: 3257, baseType: !258, size: 64, offset: 1600)
!1329 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !510, file: !261, line: 3258, baseType: !258, size: 64, offset: 1664)
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !510, file: !261, line: 3264, baseType: !13, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !510, file: !261, line: 3265, baseType: !13, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1332 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !510, file: !261, line: 3267, baseType: !13, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !510, file: !261, line: 3268, baseType: !13, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1334 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !510, file: !261, line: 3269, baseType: !13, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1335 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !510, file: !261, line: 3271, baseType: !13, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1336 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !510, file: !261, line: 3272, baseType: !13, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !510, file: !261, line: 3273, baseType: !13, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !510, file: !261, line: 3274, baseType: !13, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1339 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !510, file: !261, line: 3275, baseType: !13, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1340 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !510, file: !261, line: 3276, baseType: !13, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !510, file: !261, line: 3277, baseType: !13, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1342 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !510, file: !261, line: 3279, baseType: !13, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !510, file: !261, line: 3280, baseType: !13, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !510, file: !261, line: 3281, baseType: !13, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1345 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !510, file: !261, line: 3282, baseType: !13, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1346 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !510, file: !261, line: 3283, baseType: !13, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !510, file: !261, line: 3284, baseType: !13, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !260, file: !261, line: 3394, baseType: !1349, size: 1344)
!1349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !261, line: 2279, size: 1344, elements: !1350)
!1350 = !{!1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1376, !1377, !1378, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394}
!1351 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1349, file: !261, line: 2280, baseType: !297, size: 192)
!1352 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1349, file: !261, line: 2281, baseType: !258, size: 64, offset: 192)
!1353 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1349, file: !261, line: 2282, baseType: !258, size: 64, offset: 256)
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1349, file: !261, line: 2283, baseType: !258, size: 64, offset: 320)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1349, file: !261, line: 2284, baseType: !258, size: 64, offset: 384)
!1356 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1349, file: !261, line: 2285, baseType: !13, size: 32, offset: 448)
!1357 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1349, file: !261, line: 2287, baseType: !13, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1358 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1349, file: !261, line: 2288, baseType: !13, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1359 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1349, file: !261, line: 2289, baseType: !13, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1349, file: !261, line: 2290, baseType: !13, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1361 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1349, file: !261, line: 2291, baseType: !13, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1362 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1349, file: !261, line: 2292, baseType: !13, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1363 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1349, file: !261, line: 2294, baseType: !13, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1349, file: !261, line: 2296, baseType: !13, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1349, file: !261, line: 2297, baseType: !13, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1349, file: !261, line: 2298, baseType: !13, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1367 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1349, file: !261, line: 2299, baseType: !13, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1368 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1349, file: !261, line: 2300, baseType: !13, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1369 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1349, file: !261, line: 2301, baseType: !13, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1370 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1349, file: !261, line: 2302, baseType: !13, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1371 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1349, file: !261, line: 2303, baseType: !13, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1349, file: !261, line: 2305, baseType: !13, size: 32, offset: 512)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1349, file: !261, line: 2306, baseType: !1374, size: 32, offset: 544)
!1374 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1375, line: 31, baseType: !32)
!1375 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1349, file: !261, line: 2307, baseType: !258, size: 64, offset: 576)
!1377 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1349, file: !261, line: 2308, baseType: !258, size: 64, offset: 640)
!1378 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1349, file: !261, line: 2314, baseType: !1379, size: 64, offset: 704)
!1379 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !261, line: 2309, size: 64, elements: !1380)
!1380 = !{!1381, !1382, !1383}
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1379, file: !261, line: 2310, baseType: !32, size: 32)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1379, file: !261, line: 2311, baseType: !35, size: 64)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1379, file: !261, line: 2312, baseType: !1384, size: 64)
!1384 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1385, size: 64)
!1385 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !261, line: 2277, flags: DIFlagFwdDecl)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1349, file: !261, line: 2315, baseType: !258, size: 64, offset: 768)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1349, file: !261, line: 2316, baseType: !258, size: 64, offset: 832)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1349, file: !261, line: 2317, baseType: !258, size: 64, offset: 896)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1349, file: !261, line: 2318, baseType: !258, size: 64, offset: 960)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1349, file: !261, line: 2319, baseType: !258, size: 64, offset: 1024)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1349, file: !261, line: 2320, baseType: !258, size: 64, offset: 1088)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1349, file: !261, line: 2321, baseType: !258, size: 64, offset: 1152)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1349, file: !261, line: 2322, baseType: !258, size: 64, offset: 1216)
!1394 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1349, file: !261, line: 2324, baseType: !1395, size: 64, offset: 1280)
!1395 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1396, size: 64)
!1396 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !261, line: 2324, flags: DIFlagFwdDecl)
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !260, file: !261, line: 3395, baseType: !1398, size: 320)
!1398 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !261, line: 1469, size: 320, elements: !1399)
!1399 = !{!1400, !1401, !1402}
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1398, file: !261, line: 1470, baseType: !297, size: 192)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1398, file: !261, line: 1471, baseType: !258, size: 64, offset: 192)
!1402 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1398, file: !261, line: 1472, baseType: !258, size: 64, offset: 256)
!1403 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !260, file: !261, line: 3396, baseType: !1404, size: 320)
!1404 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !261, line: 1482, size: 320, elements: !1405)
!1405 = !{!1406, !1407, !1408}
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1404, file: !261, line: 1483, baseType: !297, size: 192)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1404, file: !261, line: 1484, baseType: !32, size: 32, offset: 192)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1404, file: !261, line: 1485, baseType: !669, size: 64, offset: 256)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !260, file: !261, line: 3397, baseType: !1410, size: 384)
!1410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !261, line: 1829, size: 384, elements: !1411)
!1411 = !{!1412, !1413, !1414, !1415}
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1410, file: !261, line: 1830, baseType: !297, size: 192)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1410, file: !261, line: 1831, baseType: !380, size: 32, offset: 192)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1410, file: !261, line: 1832, baseType: !258, size: 64, offset: 256)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1410, file: !261, line: 1835, baseType: !669, size: 64, offset: 320)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !260, file: !261, line: 3398, baseType: !1417, size: 704)
!1417 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !261, line: 1898, size: 704, elements: !1418)
!1418 = !{!1419, !1420, !1421, !1422, !1423, !1428}
!1419 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1417, file: !261, line: 1899, baseType: !297, size: 192)
!1420 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1417, file: !261, line: 1902, baseType: !258, size: 64, offset: 192)
!1421 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1417, file: !261, line: 1905, baseType: !733, size: 64, offset: 256)
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1417, file: !261, line: 1908, baseType: !13, size: 32, offset: 320)
!1423 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1417, file: !261, line: 1911, baseType: !1424, size: 64, offset: 384)
!1424 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1425, size: 64)
!1425 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !466, line: 117, size: 128, elements: !1426)
!1426 = !{!1427}
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1425, file: !466, line: 120, baseType: !1229, size: 128)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1417, file: !261, line: 1914, baseType: !775, size: 256, offset: 448)
!1429 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !260, file: !261, line: 3399, baseType: !1430, size: 704)
!1430 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !261, line: 2008, size: 704, elements: !1431)
!1431 = !{!1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442}
!1432 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1430, file: !261, line: 2009, baseType: !297, size: 192)
!1433 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1430, file: !261, line: 2011, baseType: !13, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1430, file: !261, line: 2012, baseType: !13, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1430, file: !261, line: 2014, baseType: !380, size: 32, offset: 224)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1430, file: !261, line: 2016, baseType: !258, size: 64, offset: 256)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1430, file: !261, line: 2017, baseType: !658, size: 64, offset: 320)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1430, file: !261, line: 2019, baseType: !258, size: 64, offset: 384)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1430, file: !261, line: 2020, baseType: !258, size: 64, offset: 448)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1430, file: !261, line: 2021, baseType: !258, size: 64, offset: 512)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1430, file: !261, line: 2022, baseType: !258, size: 64, offset: 576)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1430, file: !261, line: 2023, baseType: !258, size: 64, offset: 640)
!1443 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !260, file: !261, line: 3400, baseType: !1444, size: 832)
!1444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !261, line: 2430, size: 832, elements: !1445)
!1445 = !{!1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455}
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1444, file: !261, line: 2431, baseType: !297, size: 192)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1444, file: !261, line: 2433, baseType: !258, size: 64, offset: 192)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1444, file: !261, line: 2434, baseType: !258, size: 64, offset: 256)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1444, file: !261, line: 2435, baseType: !258, size: 64, offset: 320)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1444, file: !261, line: 2436, baseType: !258, size: 64, offset: 384)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1444, file: !261, line: 2437, baseType: !658, size: 64, offset: 448)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1444, file: !261, line: 2438, baseType: !258, size: 64, offset: 512)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1444, file: !261, line: 2440, baseType: !258, size: 64, offset: 576)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1444, file: !261, line: 2441, baseType: !258, size: 64, offset: 640)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1444, file: !261, line: 2443, baseType: !1456, size: 128, offset: 704)
!1456 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !261, line: 182, baseType: !1457)
!1457 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !261, line: 182, size: 128, elements: !1458)
!1458 = !{!1459}
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1457, file: !261, line: 182, baseType: !663, size: 128)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !260, file: !261, line: 3401, baseType: !1461, size: 320)
!1461 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !261, line: 3327, size: 320, elements: !1462)
!1462 = !{!1463, !1464, !1471}
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1461, file: !261, line: 3329, baseType: !297, size: 192)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1461, file: !261, line: 3330, baseType: !1465, size: 64, offset: 192)
!1465 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1466, size: 64)
!1466 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !261, line: 3320, size: 192, elements: !1467)
!1467 = !{!1468, !1469, !1470}
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1466, file: !261, line: 3322, baseType: !1465, size: 64)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1466, file: !261, line: 3323, baseType: !1465, size: 64, offset: 64)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1466, file: !261, line: 3324, baseType: !258, size: 64, offset: 128)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1461, file: !261, line: 3331, baseType: !1465, size: 64, offset: 256)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !260, file: !261, line: 3402, baseType: !1473, size: 256)
!1473 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !261, line: 1540, size: 256, elements: !1474)
!1474 = !{!1475, !1476}
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1473, file: !261, line: 1541, baseType: !297, size: 192)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1473, file: !261, line: 1542, baseType: !1477, size: 64, offset: 192)
!1477 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1478, size: 64)
!1478 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !261, line: 1538, baseType: !1479)
!1479 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !261, line: 1538, size: 192, elements: !1480)
!1480 = !{!1481}
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1479, file: !261, line: 1538, baseType: !1482, size: 192)
!1482 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !261, line: 1537, baseType: !1483)
!1483 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !261, line: 1537, size: 192, elements: !1484)
!1484 = !{!1485, !1486, !1487}
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1483, file: !261, line: 1537, baseType: !13, size: 32)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1483, file: !261, line: 1537, baseType: !13, size: 32, offset: 32)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1483, file: !261, line: 1537, baseType: !1488, size: 128, offset: 64)
!1488 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1489, size: 128, elements: !47)
!1489 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !261, line: 1535, baseType: !1490)
!1490 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !261, line: 1532, size: 128, elements: !1491)
!1491 = !{!1492, !1493}
!1492 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1490, file: !261, line: 1533, baseType: !258, size: 64)
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1490, file: !261, line: 1534, baseType: !258, size: 64, offset: 64)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !260, file: !261, line: 3403, baseType: !1495, size: 512)
!1495 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !261, line: 1938, size: 512, elements: !1496)
!1496 = !{!1497, !1498, !1499, !1518, !1538, !1539, !1540}
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1495, file: !261, line: 1939, baseType: !297, size: 192)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1495, file: !261, line: 1940, baseType: !380, size: 32, offset: 192)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1495, file: !261, line: 1941, baseType: !1500, size: 32, offset: 224)
!1500 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !261, line: 280, baseType: !13, size: 32, elements: !1501)
!1501 = !{!1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517}
!1502 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!1503 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!1504 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!1505 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!1506 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!1507 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!1508 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!1509 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!1510 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!1511 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!1512 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!1513 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!1514 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!1515 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!1516 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!1517 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1495, file: !261, line: 1946, baseType: !1519, size: 32, offset: 256)
!1519 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !261, line: 1942, size: 32, elements: !1520)
!1520 = !{!1521, !1529, !1537}
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1519, file: !261, line: 1943, baseType: !1522, size: 32)
!1522 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !261, line: 1817, baseType: !13, size: 32, elements: !1523)
!1523 = !{!1524, !1525, !1526, !1527, !1528}
!1524 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!1525 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!1526 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!1527 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!1528 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1519, file: !261, line: 1944, baseType: !1530, size: 32)
!1530 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !261, line: 1805, baseType: !13, size: 32, elements: !1531)
!1531 = !{!1532, !1533, !1534, !1535, !1536}
!1532 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!1533 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!1534 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!1535 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!1536 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1519, file: !261, line: 1945, baseType: !883, size: 32)
!1538 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1495, file: !261, line: 1950, baseType: !722, size: 64, offset: 320)
!1539 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1495, file: !261, line: 1951, baseType: !722, size: 64, offset: 384)
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1495, file: !261, line: 1953, baseType: !669, size: 64, offset: 448)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !260, file: !261, line: 3404, baseType: !1542, size: 1664)
!1542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !261, line: 3337, size: 1664, elements: !1543)
!1543 = !{!1544, !1545}
!1544 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1542, file: !261, line: 3338, baseType: !297, size: 192)
!1545 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1542, file: !261, line: 3341, baseType: !1546, size: 1472, offset: 192)
!1546 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1547, line: 410, size: 1472, elements: !1548)
!1547 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1548 = !{!1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712}
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1546, file: !1547, line: 412, baseType: !32, size: 32)
!1550 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1546, file: !1547, line: 413, baseType: !32, size: 32, offset: 32)
!1551 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1546, file: !1547, line: 414, baseType: !32, size: 32, offset: 64)
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1546, file: !1547, line: 415, baseType: !32, size: 32, offset: 96)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1546, file: !1547, line: 416, baseType: !32, size: 32, offset: 128)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1546, file: !1547, line: 417, baseType: !32, size: 32, offset: 160)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1546, file: !1547, line: 418, baseType: !372, size: 8, offset: 192)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1546, file: !1547, line: 419, baseType: !372, size: 8, offset: 200)
!1557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1546, file: !1547, line: 420, baseType: !1558, size: 8, offset: 208)
!1558 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1546, file: !1547, line: 421, baseType: !1558, size: 8, offset: 216)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1546, file: !1547, line: 422, baseType: !1558, size: 8, offset: 224)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1546, file: !1547, line: 423, baseType: !1558, size: 8, offset: 232)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1546, file: !1547, line: 424, baseType: !1558, size: 8, offset: 240)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1546, file: !1547, line: 425, baseType: !1558, size: 8, offset: 248)
!1564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1546, file: !1547, line: 426, baseType: !1558, size: 8, offset: 256)
!1565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1546, file: !1547, line: 427, baseType: !1558, size: 8, offset: 264)
!1566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1546, file: !1547, line: 428, baseType: !1558, size: 8, offset: 272)
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1546, file: !1547, line: 429, baseType: !1558, size: 8, offset: 280)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1546, file: !1547, line: 430, baseType: !1558, size: 8, offset: 288)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1546, file: !1547, line: 431, baseType: !1558, size: 8, offset: 296)
!1570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1546, file: !1547, line: 432, baseType: !1558, size: 8, offset: 304)
!1571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1546, file: !1547, line: 433, baseType: !1558, size: 8, offset: 312)
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1546, file: !1547, line: 434, baseType: !1558, size: 8, offset: 320)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1546, file: !1547, line: 435, baseType: !1558, size: 8, offset: 328)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1546, file: !1547, line: 436, baseType: !1558, size: 8, offset: 336)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1546, file: !1547, line: 437, baseType: !1558, size: 8, offset: 344)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1546, file: !1547, line: 438, baseType: !1558, size: 8, offset: 352)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1546, file: !1547, line: 439, baseType: !1558, size: 8, offset: 360)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1546, file: !1547, line: 440, baseType: !1558, size: 8, offset: 368)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1546, file: !1547, line: 441, baseType: !1558, size: 8, offset: 376)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1546, file: !1547, line: 442, baseType: !1558, size: 8, offset: 384)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1546, file: !1547, line: 443, baseType: !1558, size: 8, offset: 392)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1546, file: !1547, line: 444, baseType: !1558, size: 8, offset: 400)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1546, file: !1547, line: 445, baseType: !1558, size: 8, offset: 408)
!1584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1546, file: !1547, line: 446, baseType: !1558, size: 8, offset: 416)
!1585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1546, file: !1547, line: 447, baseType: !1558, size: 8, offset: 424)
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1546, file: !1547, line: 448, baseType: !1558, size: 8, offset: 432)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1546, file: !1547, line: 449, baseType: !1558, size: 8, offset: 440)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1546, file: !1547, line: 450, baseType: !1558, size: 8, offset: 448)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1546, file: !1547, line: 451, baseType: !1558, size: 8, offset: 456)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1546, file: !1547, line: 452, baseType: !1558, size: 8, offset: 464)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1546, file: !1547, line: 453, baseType: !1558, size: 8, offset: 472)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1546, file: !1547, line: 454, baseType: !1558, size: 8, offset: 480)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1546, file: !1547, line: 455, baseType: !1558, size: 8, offset: 488)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1546, file: !1547, line: 456, baseType: !1558, size: 8, offset: 496)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1546, file: !1547, line: 457, baseType: !1558, size: 8, offset: 504)
!1596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1546, file: !1547, line: 458, baseType: !1558, size: 8, offset: 512)
!1597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1546, file: !1547, line: 459, baseType: !1558, size: 8, offset: 520)
!1598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1546, file: !1547, line: 460, baseType: !1558, size: 8, offset: 528)
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1546, file: !1547, line: 461, baseType: !1558, size: 8, offset: 536)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1546, file: !1547, line: 462, baseType: !1558, size: 8, offset: 544)
!1601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1546, file: !1547, line: 463, baseType: !1558, size: 8, offset: 552)
!1602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1546, file: !1547, line: 464, baseType: !1558, size: 8, offset: 560)
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1546, file: !1547, line: 465, baseType: !1558, size: 8, offset: 568)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1546, file: !1547, line: 466, baseType: !1558, size: 8, offset: 576)
!1605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1546, file: !1547, line: 467, baseType: !1558, size: 8, offset: 584)
!1606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1546, file: !1547, line: 468, baseType: !1558, size: 8, offset: 592)
!1607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1546, file: !1547, line: 469, baseType: !1558, size: 8, offset: 600)
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1546, file: !1547, line: 470, baseType: !1558, size: 8, offset: 608)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1546, file: !1547, line: 471, baseType: !1558, size: 8, offset: 616)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1546, file: !1547, line: 472, baseType: !1558, size: 8, offset: 624)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1546, file: !1547, line: 473, baseType: !1558, size: 8, offset: 632)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1546, file: !1547, line: 474, baseType: !1558, size: 8, offset: 640)
!1613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1546, file: !1547, line: 475, baseType: !1558, size: 8, offset: 648)
!1614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1546, file: !1547, line: 476, baseType: !1558, size: 8, offset: 656)
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1546, file: !1547, line: 477, baseType: !1558, size: 8, offset: 664)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1546, file: !1547, line: 478, baseType: !1558, size: 8, offset: 672)
!1617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1546, file: !1547, line: 479, baseType: !1558, size: 8, offset: 680)
!1618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1546, file: !1547, line: 480, baseType: !1558, size: 8, offset: 688)
!1619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1546, file: !1547, line: 481, baseType: !1558, size: 8, offset: 696)
!1620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1546, file: !1547, line: 482, baseType: !1558, size: 8, offset: 704)
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1546, file: !1547, line: 483, baseType: !1558, size: 8, offset: 712)
!1622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1546, file: !1547, line: 484, baseType: !1558, size: 8, offset: 720)
!1623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1546, file: !1547, line: 485, baseType: !1558, size: 8, offset: 728)
!1624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1546, file: !1547, line: 486, baseType: !1558, size: 8, offset: 736)
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1546, file: !1547, line: 487, baseType: !1558, size: 8, offset: 744)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1546, file: !1547, line: 488, baseType: !1558, size: 8, offset: 752)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1546, file: !1547, line: 489, baseType: !1558, size: 8, offset: 760)
!1628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1546, file: !1547, line: 490, baseType: !1558, size: 8, offset: 768)
!1629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1546, file: !1547, line: 491, baseType: !1558, size: 8, offset: 776)
!1630 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1546, file: !1547, line: 492, baseType: !1558, size: 8, offset: 784)
!1631 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1546, file: !1547, line: 493, baseType: !1558, size: 8, offset: 792)
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1546, file: !1547, line: 494, baseType: !1558, size: 8, offset: 800)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1546, file: !1547, line: 495, baseType: !1558, size: 8, offset: 808)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1546, file: !1547, line: 496, baseType: !1558, size: 8, offset: 816)
!1635 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1546, file: !1547, line: 497, baseType: !1558, size: 8, offset: 824)
!1636 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1546, file: !1547, line: 498, baseType: !1558, size: 8, offset: 832)
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1546, file: !1547, line: 499, baseType: !1558, size: 8, offset: 840)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1546, file: !1547, line: 500, baseType: !1558, size: 8, offset: 848)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1546, file: !1547, line: 501, baseType: !1558, size: 8, offset: 856)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1546, file: !1547, line: 502, baseType: !1558, size: 8, offset: 864)
!1641 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1546, file: !1547, line: 503, baseType: !1558, size: 8, offset: 872)
!1642 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1546, file: !1547, line: 504, baseType: !1558, size: 8, offset: 880)
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1546, file: !1547, line: 505, baseType: !1558, size: 8, offset: 888)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1546, file: !1547, line: 506, baseType: !1558, size: 8, offset: 896)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1546, file: !1547, line: 507, baseType: !1558, size: 8, offset: 904)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1546, file: !1547, line: 508, baseType: !1558, size: 8, offset: 912)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1546, file: !1547, line: 509, baseType: !1558, size: 8, offset: 920)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1546, file: !1547, line: 510, baseType: !1558, size: 8, offset: 928)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1546, file: !1547, line: 511, baseType: !1558, size: 8, offset: 936)
!1650 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1546, file: !1547, line: 512, baseType: !1558, size: 8, offset: 944)
!1651 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1546, file: !1547, line: 513, baseType: !1558, size: 8, offset: 952)
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1546, file: !1547, line: 514, baseType: !1558, size: 8, offset: 960)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1546, file: !1547, line: 515, baseType: !1558, size: 8, offset: 968)
!1654 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1546, file: !1547, line: 516, baseType: !1558, size: 8, offset: 976)
!1655 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1546, file: !1547, line: 517, baseType: !1558, size: 8, offset: 984)
!1656 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1546, file: !1547, line: 518, baseType: !1558, size: 8, offset: 992)
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1546, file: !1547, line: 519, baseType: !1558, size: 8, offset: 1000)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1546, file: !1547, line: 520, baseType: !1558, size: 8, offset: 1008)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1546, file: !1547, line: 521, baseType: !1558, size: 8, offset: 1016)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1546, file: !1547, line: 522, baseType: !1558, size: 8, offset: 1024)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1546, file: !1547, line: 523, baseType: !1558, size: 8, offset: 1032)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1546, file: !1547, line: 524, baseType: !1558, size: 8, offset: 1040)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1546, file: !1547, line: 525, baseType: !1558, size: 8, offset: 1048)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1546, file: !1547, line: 526, baseType: !1558, size: 8, offset: 1056)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1546, file: !1547, line: 527, baseType: !1558, size: 8, offset: 1064)
!1666 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1546, file: !1547, line: 528, baseType: !1558, size: 8, offset: 1072)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1546, file: !1547, line: 529, baseType: !1558, size: 8, offset: 1080)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1546, file: !1547, line: 530, baseType: !1558, size: 8, offset: 1088)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1546, file: !1547, line: 531, baseType: !1558, size: 8, offset: 1096)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1546, file: !1547, line: 532, baseType: !1558, size: 8, offset: 1104)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1546, file: !1547, line: 533, baseType: !1558, size: 8, offset: 1112)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1546, file: !1547, line: 534, baseType: !1558, size: 8, offset: 1120)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1546, file: !1547, line: 535, baseType: !1558, size: 8, offset: 1128)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1546, file: !1547, line: 536, baseType: !1558, size: 8, offset: 1136)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1546, file: !1547, line: 537, baseType: !1558, size: 8, offset: 1144)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1546, file: !1547, line: 538, baseType: !1558, size: 8, offset: 1152)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1546, file: !1547, line: 539, baseType: !1558, size: 8, offset: 1160)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1546, file: !1547, line: 540, baseType: !1558, size: 8, offset: 1168)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1546, file: !1547, line: 541, baseType: !1558, size: 8, offset: 1176)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1546, file: !1547, line: 542, baseType: !1558, size: 8, offset: 1184)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1546, file: !1547, line: 543, baseType: !1558, size: 8, offset: 1192)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1546, file: !1547, line: 544, baseType: !1558, size: 8, offset: 1200)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1546, file: !1547, line: 545, baseType: !1558, size: 8, offset: 1208)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1546, file: !1547, line: 546, baseType: !1558, size: 8, offset: 1216)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1546, file: !1547, line: 547, baseType: !1558, size: 8, offset: 1224)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1546, file: !1547, line: 548, baseType: !1558, size: 8, offset: 1232)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1546, file: !1547, line: 549, baseType: !1558, size: 8, offset: 1240)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1546, file: !1547, line: 550, baseType: !1558, size: 8, offset: 1248)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1546, file: !1547, line: 551, baseType: !1558, size: 8, offset: 1256)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1546, file: !1547, line: 552, baseType: !1558, size: 8, offset: 1264)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1546, file: !1547, line: 553, baseType: !1558, size: 8, offset: 1272)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1546, file: !1547, line: 554, baseType: !1558, size: 8, offset: 1280)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1546, file: !1547, line: 555, baseType: !1558, size: 8, offset: 1288)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1546, file: !1547, line: 556, baseType: !1558, size: 8, offset: 1296)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1546, file: !1547, line: 557, baseType: !1558, size: 8, offset: 1304)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1546, file: !1547, line: 558, baseType: !1558, size: 8, offset: 1312)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1546, file: !1547, line: 559, baseType: !1558, size: 8, offset: 1320)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1546, file: !1547, line: 560, baseType: !1558, size: 8, offset: 1328)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1546, file: !1547, line: 561, baseType: !1558, size: 8, offset: 1336)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1546, file: !1547, line: 562, baseType: !1558, size: 8, offset: 1344)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1546, file: !1547, line: 563, baseType: !1558, size: 8, offset: 1352)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1546, file: !1547, line: 564, baseType: !1558, size: 8, offset: 1360)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1546, file: !1547, line: 565, baseType: !1558, size: 8, offset: 1368)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1546, file: !1547, line: 566, baseType: !1558, size: 8, offset: 1376)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1546, file: !1547, line: 567, baseType: !1558, size: 8, offset: 1384)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1546, file: !1547, line: 568, baseType: !1558, size: 8, offset: 1392)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1546, file: !1547, line: 569, baseType: !1558, size: 8, offset: 1400)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1546, file: !1547, line: 570, baseType: !1558, size: 8, offset: 1408)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1546, file: !1547, line: 571, baseType: !1558, size: 8, offset: 1416)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1546, file: !1547, line: 572, baseType: !1558, size: 8, offset: 1424)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1546, file: !1547, line: 573, baseType: !1558, size: 8, offset: 1432)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1546, file: !1547, line: 574, baseType: !1558, size: 8, offset: 1440)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !260, file: !261, line: 3405, baseType: !1714, size: 384)
!1714 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !261, line: 3352, size: 384, elements: !1715)
!1715 = !{!1716, !1717}
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1714, file: !261, line: 3353, baseType: !297, size: 192)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1714, file: !261, line: 3356, baseType: !1718, size: 192, offset: 192)
!1718 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1547, line: 578, size: 192, elements: !1719)
!1719 = !{!1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730}
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1718, file: !1547, line: 580, baseType: !32, size: 32)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1718, file: !1547, line: 581, baseType: !32, size: 32, offset: 32)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1718, file: !1547, line: 582, baseType: !32, size: 32, offset: 64)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1718, file: !1547, line: 583, baseType: !32, size: 32, offset: 96)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1718, file: !1547, line: 584, baseType: !372, size: 8, offset: 128)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1718, file: !1547, line: 585, baseType: !372, size: 8, offset: 136)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1718, file: !1547, line: 586, baseType: !372, size: 8, offset: 144)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1718, file: !1547, line: 587, baseType: !372, size: 8, offset: 152)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1718, file: !1547, line: 588, baseType: !372, size: 8, offset: 160)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1718, file: !1547, line: 589, baseType: !372, size: 8, offset: 168)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1718, file: !1547, line: 590, baseType: !372, size: 8, offset: 176)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !29, file: !10, line: 178, baseType: !696, size: 64)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !29, file: !10, line: 179, baseType: !1733, size: 64)
!1733 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1734, size: 64)
!1734 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !10, line: 150, baseType: !1735)
!1735 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !10, line: 142, size: 320, elements: !1736)
!1736 = !{!1737, !1738, !1739, !1740, !1741, !1742}
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1735, file: !10, line: 144, baseType: !258, size: 64)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1735, file: !10, line: 145, baseType: !6, size: 64, offset: 64)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1735, file: !10, line: 146, baseType: !6, size: 64, offset: 128)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1735, file: !10, line: 147, baseType: !1374, size: 32, offset: 192)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1735, file: !10, line: 148, baseType: !13, size: 32, offset: 224)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1735, file: !10, line: 149, baseType: !372, size: 8, offset: 256)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !29, file: !10, line: 180, baseType: !1744, size: 64)
!1744 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1745, size: 64)
!1745 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !10, line: 162, baseType: !1746)
!1746 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !10, line: 159, size: 128, elements: !1747)
!1747 = !{!1748, !1749}
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1746, file: !10, line: 160, baseType: !258, size: 64)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1746, file: !10, line: 161, baseType: !227, size: 64, offset: 64)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !29, file: !10, line: 181, baseType: !1751, size: 64)
!1751 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1752, size: 64)
!1752 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !10, line: 181, flags: DIFlagFwdDecl)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !24, file: !10, line: 317, baseType: !1754, size: 64)
!1754 = !DICompositeType(tag: DW_TAG_array_type, baseType: !227, size: 64, elements: !47)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !24, file: !10, line: 318, baseType: !1756, size: 320)
!1756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !10, line: 188, size: 320, elements: !1757)
!1757 = !{!1758, !1760, !1815}
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1756, file: !10, line: 190, baseType: !1759, size: 192)
!1759 = !DICompositeType(tag: DW_TAG_array_type, baseType: !28, size: 192, elements: !330)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1756, file: !10, line: 193, baseType: !1761, size: 64, offset: 192)
!1761 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1762, size: 64)
!1762 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !10, line: 206, size: 320, elements: !1763)
!1763 = !{!1764, !1800, !1801, !1802, !1814}
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1762, file: !10, line: 208, baseType: !1765, size: 64)
!1765 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1766, size: 64)
!1766 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !7, line: 62, baseType: !1767)
!1767 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1768, line: 538, size: 256, elements: !1769)
!1768 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1769 = !{!1770, !1774, !1780, !1791}
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1767, file: !1768, line: 539, baseType: !1771, size: 32)
!1771 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1768, line: 482, size: 32, elements: !1772)
!1772 = !{!1773}
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1771, file: !1768, line: 484, baseType: !13, size: 32)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1767, file: !1768, line: 540, baseType: !1775, size: 192)
!1775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1768, line: 488, size: 192, elements: !1776)
!1776 = !{!1777, !1778, !1779}
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1775, file: !1768, line: 489, baseType: !1771, size: 32)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1775, file: !1768, line: 492, baseType: !35, size: 64, offset: 64)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1775, file: !1768, line: 496, baseType: !258, size: 64, offset: 128)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1767, file: !1768, line: 541, baseType: !1781, size: 256)
!1781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1768, line: 504, size: 256, elements: !1782)
!1782 = !{!1783, !1784, !1789, !1790}
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1781, file: !1768, line: 505, baseType: !1771, size: 32)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1781, file: !1768, line: 509, baseType: !1785, size: 64, offset: 64)
!1785 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1768, line: 501, baseType: !1786)
!1786 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1787, size: 64)
!1787 = !DISubroutineType(types: !1788)
!1788 = !{null, !617}
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1781, file: !1768, line: 510, baseType: !617, size: 64, offset: 128)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1781, file: !1768, line: 513, baseType: !1765, size: 64, offset: 192)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1767, file: !1768, line: 542, baseType: !1792, size: 128)
!1792 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1768, line: 530, size: 128, elements: !1793)
!1793 = !{!1794, !1795}
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1792, file: !1768, line: 531, baseType: !1771, size: 32)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1792, file: !1768, line: 534, baseType: !1796, size: 64, offset: 64)
!1796 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1768, line: 525, baseType: !1797)
!1797 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1798, size: 64)
!1798 = !DISubroutineType(types: !1799)
!1799 = !{!372, !258, !35, !210, !210}
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1762, file: !10, line: 211, baseType: !13, size: 32, offset: 64)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1762, file: !10, line: 214, baseType: !227, size: 64, offset: 128)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1762, file: !10, line: 224, baseType: !1803, size: 64, offset: 192)
!1803 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1804, size: 64)
!1804 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !10, line: 202, baseType: !1805)
!1805 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !10, line: 202, size: 128, elements: !1806)
!1806 = !{!1807}
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1805, file: !10, line: 202, baseType: !1808, size: 128)
!1808 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !10, line: 200, baseType: !1809)
!1809 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !10, line: 200, size: 128, elements: !1810)
!1810 = !{!1811, !1812, !1813}
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1809, file: !10, line: 200, baseType: !13, size: 32)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1809, file: !10, line: 200, baseType: !13, size: 32, offset: 32)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1809, file: !10, line: 200, baseType: !46, size: 64, offset: 64)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1762, file: !10, line: 234, baseType: !1803, size: 64, offset: 256)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1756, file: !10, line: 197, baseType: !227, size: 64, offset: 256)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !24, file: !10, line: 319, baseType: !319, size: 256)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !24, file: !10, line: 320, baseType: !338, size: 192)
!1818 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !1819, retainedTypes: !3451, globals: !3507, splitDebugInlining: false, nameTableKind: None)
!1819 = !{!50, !533, !883, !1191, !1198, !1291, !1500, !1522, !1530, !1820, !1962, !1975, !2138, !2146, !2151, !3024, !3033, !3047, !3089, !3094, !3101, !3235, !3269, !3275, !3291, !3299, !3337, !3363, !3377, !3384, !3406, !3421}
!1820 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !10, line: 45, baseType: !13, size: 32, elements: !1821)
!1821 = !{!1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961}
!1822 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!1823 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!1824 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!1825 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!1826 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!1827 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!1828 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!1829 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!1830 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!1831 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!1832 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!1833 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!1835 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!1836 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!1837 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!1838 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!1839 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!1840 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!1841 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!1842 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!1843 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!1844 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!1845 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!1846 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!1847 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!1848 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!1849 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!1850 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!1851 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!1852 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!1853 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!1854 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!1855 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!1856 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!1857 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!1858 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!1859 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!1860 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!1861 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!1862 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!1863 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!1864 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!1865 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!1866 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!1867 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!1868 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!1869 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!1870 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!1871 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!1872 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!1873 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!1874 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!1875 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!1876 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!1877 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!1878 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!1879 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!1880 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!1881 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!1882 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!1883 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!1884 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!1885 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!1886 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!1887 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!1888 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!1889 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!1890 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!1891 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!1892 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!1893 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!1894 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!1895 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!1896 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!1897 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!1898 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!1899 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!1900 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!1901 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!1902 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!1903 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!1904 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!1905 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!1906 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!1907 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!1908 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!1909 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!1910 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!1911 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!1912 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!1913 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!1914 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!1915 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!1916 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!1917 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!1918 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!1919 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!1920 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!1921 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!1922 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!1923 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!1924 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!1925 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!1926 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!1927 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!1928 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!1929 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!1930 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!1931 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!1932 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!1933 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!1934 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!1935 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!1936 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!1937 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!1938 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!1939 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!1940 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!1941 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!1942 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!1943 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!1944 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!1945 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!1946 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!1947 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!1948 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!1949 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!1950 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!1951 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!1952 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!1953 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!1954 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!1955 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!1956 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!1957 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!1958 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!1959 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!1960 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!1961 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!1962 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code_class", file: !261, line: 58, baseType: !13, size: 32, elements: !1963)
!1963 = !{!1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974}
!1964 = !DIEnumerator(name: "tcc_exceptional", value: 0, isUnsigned: true)
!1965 = !DIEnumerator(name: "tcc_constant", value: 1, isUnsigned: true)
!1966 = !DIEnumerator(name: "tcc_type", value: 2, isUnsigned: true)
!1967 = !DIEnumerator(name: "tcc_declaration", value: 3, isUnsigned: true)
!1968 = !DIEnumerator(name: "tcc_reference", value: 4, isUnsigned: true)
!1969 = !DIEnumerator(name: "tcc_comparison", value: 5, isUnsigned: true)
!1970 = !DIEnumerator(name: "tcc_unary", value: 6, isUnsigned: true)
!1971 = !DIEnumerator(name: "tcc_binary", value: 7, isUnsigned: true)
!1972 = !DIEnumerator(name: "tcc_statement", value: 8, isUnsigned: true)
!1973 = !DIEnumerator(name: "tcc_vl_exp", value: 9, isUnsigned: true)
!1974 = !DIEnumerator(name: "tcc_expression", value: 10, isUnsigned: true)
!1975 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !1976, line: 76, baseType: !13, size: 32, elements: !1977)
!1976 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1977 = !{!1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137}
!1978 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!1979 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!1980 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!1981 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!1982 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!1983 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!1984 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!1985 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!1986 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!1987 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!1988 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!1989 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!1990 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!1991 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!1992 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!1993 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!1994 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!1995 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!1996 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!1997 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!1998 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!1999 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!2000 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!2001 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!2002 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!2003 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!2004 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!2005 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!2006 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!2007 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!2008 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!2009 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!2010 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!2011 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!2012 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!2013 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!2014 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!2015 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!2016 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!2017 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!2018 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!2019 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!2020 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!2021 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!2022 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!2023 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!2024 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!2025 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!2026 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!2027 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!2028 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!2029 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!2030 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!2031 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!2032 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!2033 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!2034 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!2035 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!2036 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!2037 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!2038 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!2039 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!2040 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!2041 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!2042 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!2043 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!2044 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!2045 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!2046 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!2047 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!2048 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!2049 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!2050 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!2051 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!2052 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!2053 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!2054 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!2055 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!2056 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!2057 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!2058 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!2059 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!2060 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!2061 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!2062 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!2063 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!2064 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!2065 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!2066 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!2067 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!2068 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!2069 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!2070 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!2071 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!2072 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!2073 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!2074 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!2075 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!2076 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!2077 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!2078 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!2079 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!2080 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!2081 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!2082 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!2083 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!2084 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!2085 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!2086 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!2087 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!2088 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!2089 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!2090 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!2091 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!2092 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!2093 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!2094 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!2095 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!2096 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!2097 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!2098 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!2099 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!2100 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!2101 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!2102 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!2103 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!2104 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!2105 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!2106 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!2107 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!2108 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!2109 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!2110 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!2111 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!2112 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!2113 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!2114 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!2115 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!2116 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!2117 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!2118 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!2119 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!2120 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!2121 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!2122 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!2123 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!2124 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!2125 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!2126 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!2127 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!2128 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!2129 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!2130 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!2131 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!2132 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!2133 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!2134 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!2135 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!2136 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!2137 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!2138 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !2139, line: 291, baseType: !13, size: 32, elements: !2140)
!2139 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2140 = !{!2141, !2142, !2143, !2144, !2145}
!2141 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!2142 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!2143 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!2144 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!2145 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!2146 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "direction", file: !2139, line: 95, baseType: !13, size: 32, elements: !2147)
!2147 = !{!2148, !2149, !2150}
!2148 = !DIEnumerator(name: "none", value: 0, isUnsigned: true)
!2149 = !DIEnumerator(name: "upward", value: 1, isUnsigned: true)
!2150 = !DIEnumerator(name: "downward", value: 2, isUnsigned: true)
!2151 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_code", file: !1547, line: 723, baseType: !13, size: 32, elements: !2152)
!2152 = !{!2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300, !2301, !2302, !2303, !2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443, !2444, !2445, !2446, !2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465, !2466, !2467, !2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499, !2500, !2501, !2502, !2503, !2504, !2505, !2506, !2507, !2508, !2509, !2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522, !2523, !2524, !2525, !2526, !2527, !2528, !2529, !2530, !2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542, !2543, !2544, !2545, !2546, !2547, !2548, !2549, !2550, !2551, !2552, !2553, !2554, !2555, !2556, !2557, !2558, !2559, !2560, !2561, !2562, !2563, !2564, !2565, !2566, !2567, !2568, !2569, !2570, !2571, !2572, !2573, !2574, !2575, !2576, !2577, !2578, !2579, !2580, !2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591, !2592, !2593, !2594, !2595, !2596, !2597, !2598, !2599, !2600, !2601, !2602, !2603, !2604, !2605, !2606, !2607, !2608, !2609, !2610, !2611, !2612, !2613, !2614, !2615, !2616, !2617, !2618, !2619, !2620, !2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628, !2629, !2630, !2631, !2632, !2633, !2634, !2635, !2636, !2637, !2638, !2639, !2640, !2641, !2642, !2643, !2644, !2645, !2646, !2647, !2648, !2649, !2650, !2651, !2652, !2653, !2654, !2655, !2656, !2657, !2658, !2659, !2660, !2661, !2662, !2663, !2664, !2665, !2666, !2667, !2668, !2669, !2670, !2671, !2672, !2673, !2674, !2675, !2676, !2677, !2678, !2679, !2680, !2681, !2682, !2683, !2684, !2685, !2686, !2687, !2688, !2689, !2690, !2691, !2692, !2693, !2694, !2695, !2696, !2697, !2698, !2699, !2700, !2701, !2702, !2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732, !2733, !2734, !2735, !2736, !2737, !2738, !2739, !2740, !2741, !2742, !2743, !2744, !2745, !2746, !2747, !2748, !2749, !2750, !2751, !2752, !2753, !2754, !2755, !2756, !2757, !2758, !2759, !2760, !2761, !2762, !2763, !2764, !2765, !2766, !2767, !2768, !2769, !2770, !2771, !2772, !2773, !2774, !2775, !2776, !2777, !2778, !2779, !2780, !2781, !2782, !2783, !2784, !2785, !2786, !2787, !2788, !2789, !2790, !2791, !2792, !2793, !2794, !2795, !2796, !2797, !2798, !2799, !2800, !2801, !2802, !2803, !2804, !2805, !2806, !2807, !2808, !2809, !2810, !2811, !2812, !2813, !2814, !2815, !2816, !2817, !2818, !2819, !2820, !2821, !2822, !2823, !2824, !2825, !2826, !2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859, !2860, !2861, !2862, !2863, !2864, !2865, !2866, !2867, !2868, !2869, !2870, !2871, !2872, !2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890, !2891, !2892, !2893, !2894, !2895, !2896, !2897, !2898, !2899, !2900, !2901, !2902, !2903, !2904, !2905, !2906, !2907, !2908, !2909, !2910, !2911, !2912, !2913, !2914, !2915, !2916, !2917, !2918, !2919, !2920, !2921, !2922, !2923, !2924, !2925, !2926, !2927, !2928, !2929, !2930, !2931, !2932, !2933, !2934, !2935, !2936, !2937, !2938, !2939, !2940, !2941, !2942, !2943, !2944, !2945, !2946, !2947, !2948, !2949, !2950, !2951, !2952, !2953, !2954, !2955, !2956, !2957, !2958, !2959, !2960, !2961, !2962, !2963, !2964, !2965, !2966, !2967, !2968, !2969, !2970, !2971, !2972, !2973, !2974, !2975, !2976, !2977, !2978, !2979, !2980, !2981, !2982, !2983, !2984, !2985, !2986, !2987, !2988, !2989, !2990, !2991, !2992, !2993, !2994, !2995, !2996, !2997, !2998, !2999, !3000, !3001, !3002, !3003, !3004, !3005, !3006, !3007, !3008, !3009, !3010, !3011, !3012, !3013, !3014, !3015, !3016, !3017, !3018, !3019, !3020, !3021, !3022, !3023}
!2153 = !DIEnumerator(name: "OPT__help", value: 0, isUnsigned: true)
!2154 = !DIEnumerator(name: "OPT__help_", value: 1, isUnsigned: true)
!2155 = !DIEnumerator(name: "OPT__output_pch_", value: 2, isUnsigned: true)
!2156 = !DIEnumerator(name: "OPT__param", value: 3, isUnsigned: true)
!2157 = !DIEnumerator(name: "OPT__target_help", value: 4, isUnsigned: true)
!2158 = !DIEnumerator(name: "OPT__version", value: 5, isUnsigned: true)
!2159 = !DIEnumerator(name: "OPT_A", value: 6, isUnsigned: true)
!2160 = !DIEnumerator(name: "OPT_C", value: 7, isUnsigned: true)
!2161 = !DIEnumerator(name: "OPT_CC", value: 8, isUnsigned: true)
!2162 = !DIEnumerator(name: "OPT_D", value: 9, isUnsigned: true)
!2163 = !DIEnumerator(name: "OPT_E", value: 10, isUnsigned: true)
!2164 = !DIEnumerator(name: "OPT_F", value: 11, isUnsigned: true)
!2165 = !DIEnumerator(name: "OPT_G", value: 12, isUnsigned: true)
!2166 = !DIEnumerator(name: "OPT_H", value: 13, isUnsigned: true)
!2167 = !DIEnumerator(name: "OPT_I", value: 14, isUnsigned: true)
!2168 = !DIEnumerator(name: "OPT_J", value: 15, isUnsigned: true)
!2169 = !DIEnumerator(name: "OPT_M", value: 16, isUnsigned: true)
!2170 = !DIEnumerator(name: "OPT_MD", value: 17, isUnsigned: true)
!2171 = !DIEnumerator(name: "OPT_MD_", value: 18, isUnsigned: true)
!2172 = !DIEnumerator(name: "OPT_MF", value: 19, isUnsigned: true)
!2173 = !DIEnumerator(name: "OPT_MG", value: 20, isUnsigned: true)
!2174 = !DIEnumerator(name: "OPT_MM", value: 21, isUnsigned: true)
!2175 = !DIEnumerator(name: "OPT_MMD", value: 22, isUnsigned: true)
!2176 = !DIEnumerator(name: "OPT_MMD_", value: 23, isUnsigned: true)
!2177 = !DIEnumerator(name: "OPT_MP", value: 24, isUnsigned: true)
!2178 = !DIEnumerator(name: "OPT_MQ", value: 25, isUnsigned: true)
!2179 = !DIEnumerator(name: "OPT_MT", value: 26, isUnsigned: true)
!2180 = !DIEnumerator(name: "OPT_O", value: 27, isUnsigned: true)
!2181 = !DIEnumerator(name: "OPT_Os", value: 28, isUnsigned: true)
!2182 = !DIEnumerator(name: "OPT_P", value: 29, isUnsigned: true)
!2183 = !DIEnumerator(name: "OPT_U", value: 30, isUnsigned: true)
!2184 = !DIEnumerator(name: "OPT_W", value: 31, isUnsigned: true)
!2185 = !DIEnumerator(name: "OPT_Wabi", value: 32, isUnsigned: true)
!2186 = !DIEnumerator(name: "OPT_Waddress", value: 33, isUnsigned: true)
!2187 = !DIEnumerator(name: "OPT_Waggregate_return", value: 34, isUnsigned: true)
!2188 = !DIEnumerator(name: "OPT_Waliasing", value: 35, isUnsigned: true)
!2189 = !DIEnumerator(name: "OPT_Walign_commons", value: 36, isUnsigned: true)
!2190 = !DIEnumerator(name: "OPT_Wall", value: 37, isUnsigned: true)
!2191 = !DIEnumerator(name: "OPT_Wall_deprecation", value: 38, isUnsigned: true)
!2192 = !DIEnumerator(name: "OPT_Wall_javadoc", value: 39, isUnsigned: true)
!2193 = !DIEnumerator(name: "OPT_Wampersand", value: 40, isUnsigned: true)
!2194 = !DIEnumerator(name: "OPT_Warray_bounds", value: 41, isUnsigned: true)
!2195 = !DIEnumerator(name: "OPT_Warray_temporaries", value: 42, isUnsigned: true)
!2196 = !DIEnumerator(name: "OPT_Wassert_identifier", value: 43, isUnsigned: true)
!2197 = !DIEnumerator(name: "OPT_Wassign_intercept", value: 44, isUnsigned: true)
!2198 = !DIEnumerator(name: "OPT_Wattributes", value: 45, isUnsigned: true)
!2199 = !DIEnumerator(name: "OPT_Wbad_function_cast", value: 46, isUnsigned: true)
!2200 = !DIEnumerator(name: "OPT_Wboxing", value: 47, isUnsigned: true)
!2201 = !DIEnumerator(name: "OPT_Wbuiltin_macro_redefined", value: 48, isUnsigned: true)
!2202 = !DIEnumerator(name: "OPT_Wc___compat", value: 49, isUnsigned: true)
!2203 = !DIEnumerator(name: "OPT_Wc__0x_compat", value: 50, isUnsigned: true)
!2204 = !DIEnumerator(name: "OPT_Wcast_align", value: 51, isUnsigned: true)
!2205 = !DIEnumerator(name: "OPT_Wcast_qual", value: 52, isUnsigned: true)
!2206 = !DIEnumerator(name: "OPT_Wchar_concat", value: 53, isUnsigned: true)
!2207 = !DIEnumerator(name: "OPT_Wchar_subscripts", value: 54, isUnsigned: true)
!2208 = !DIEnumerator(name: "OPT_Wcharacter_truncation", value: 55, isUnsigned: true)
!2209 = !DIEnumerator(name: "OPT_Wclobbered", value: 56, isUnsigned: true)
!2210 = !DIEnumerator(name: "OPT_Wcomment", value: 57, isUnsigned: true)
!2211 = !DIEnumerator(name: "OPT_Wcomments", value: 58, isUnsigned: true)
!2212 = !DIEnumerator(name: "OPT_Wcondition_assign", value: 59, isUnsigned: true)
!2213 = !DIEnumerator(name: "OPT_Wconstructor_name", value: 60, isUnsigned: true)
!2214 = !DIEnumerator(name: "OPT_Wconversion", value: 61, isUnsigned: true)
!2215 = !DIEnumerator(name: "OPT_Wconversion_null", value: 62, isUnsigned: true)
!2216 = !DIEnumerator(name: "OPT_Wcoverage_mismatch", value: 63, isUnsigned: true)
!2217 = !DIEnumerator(name: "OPT_Wctor_dtor_privacy", value: 64, isUnsigned: true)
!2218 = !DIEnumerator(name: "OPT_Wdeclaration_after_statement", value: 65, isUnsigned: true)
!2219 = !DIEnumerator(name: "OPT_Wdep_ann", value: 66, isUnsigned: true)
!2220 = !DIEnumerator(name: "OPT_Wdeprecated", value: 67, isUnsigned: true)
!2221 = !DIEnumerator(name: "OPT_Wdeprecated_declarations", value: 68, isUnsigned: true)
!2222 = !DIEnumerator(name: "OPT_Wdisabled_optimization", value: 69, isUnsigned: true)
!2223 = !DIEnumerator(name: "OPT_Wdiscouraged", value: 70, isUnsigned: true)
!2224 = !DIEnumerator(name: "OPT_Wdiv_by_zero", value: 71, isUnsigned: true)
!2225 = !DIEnumerator(name: "OPT_Weffc__", value: 72, isUnsigned: true)
!2226 = !DIEnumerator(name: "OPT_Wempty_block", value: 73, isUnsigned: true)
!2227 = !DIEnumerator(name: "OPT_Wempty_body", value: 74, isUnsigned: true)
!2228 = !DIEnumerator(name: "OPT_Wendif_labels", value: 75, isUnsigned: true)
!2229 = !DIEnumerator(name: "OPT_Wenum_compare", value: 76, isUnsigned: true)
!2230 = !DIEnumerator(name: "OPT_Wenum_identifier", value: 77, isUnsigned: true)
!2231 = !DIEnumerator(name: "OPT_Wenum_switch", value: 78, isUnsigned: true)
!2232 = !DIEnumerator(name: "OPT_Werror", value: 79, isUnsigned: true)
!2233 = !DIEnumerator(name: "OPT_Werror_implicit_function_declaration", value: 80, isUnsigned: true)
!2234 = !DIEnumerator(name: "OPT_Werror_", value: 81, isUnsigned: true)
!2235 = !DIEnumerator(name: "OPT_Wextra", value: 82, isUnsigned: true)
!2236 = !DIEnumerator(name: "OPT_Wextraneous_semicolon", value: 83, isUnsigned: true)
!2237 = !DIEnumerator(name: "OPT_Wfallthrough", value: 84, isUnsigned: true)
!2238 = !DIEnumerator(name: "OPT_Wfatal_errors", value: 85, isUnsigned: true)
!2239 = !DIEnumerator(name: "OPT_Wfield_hiding", value: 86, isUnsigned: true)
!2240 = !DIEnumerator(name: "OPT_Wfinal_bound", value: 87, isUnsigned: true)
!2241 = !DIEnumerator(name: "OPT_Wfinally", value: 88, isUnsigned: true)
!2242 = !DIEnumerator(name: "OPT_Wfloat_equal", value: 89, isUnsigned: true)
!2243 = !DIEnumerator(name: "OPT_Wforbidden", value: 90, isUnsigned: true)
!2244 = !DIEnumerator(name: "OPT_Wformat", value: 91, isUnsigned: true)
!2245 = !DIEnumerator(name: "OPT_Wformat_contains_nul", value: 92, isUnsigned: true)
!2246 = !DIEnumerator(name: "OPT_Wformat_extra_args", value: 93, isUnsigned: true)
!2247 = !DIEnumerator(name: "OPT_Wformat_nonliteral", value: 94, isUnsigned: true)
!2248 = !DIEnumerator(name: "OPT_Wformat_security", value: 95, isUnsigned: true)
!2249 = !DIEnumerator(name: "OPT_Wformat_y2k", value: 96, isUnsigned: true)
!2250 = !DIEnumerator(name: "OPT_Wformat_zero_length", value: 97, isUnsigned: true)
!2251 = !DIEnumerator(name: "OPT_Wformat_", value: 98, isUnsigned: true)
!2252 = !DIEnumerator(name: "OPT_Wframe_larger_than_", value: 99, isUnsigned: true)
!2253 = !DIEnumerator(name: "OPT_Whiding", value: 100, isUnsigned: true)
!2254 = !DIEnumerator(name: "OPT_Wignored_qualifiers", value: 101, isUnsigned: true)
!2255 = !DIEnumerator(name: "OPT_Wimplicit", value: 102, isUnsigned: true)
!2256 = !DIEnumerator(name: "OPT_Wimplicit_function_declaration", value: 103, isUnsigned: true)
!2257 = !DIEnumerator(name: "OPT_Wimplicit_int", value: 104, isUnsigned: true)
!2258 = !DIEnumerator(name: "OPT_Wimplicit_interface", value: 105, isUnsigned: true)
!2259 = !DIEnumerator(name: "OPT_Wimplicit_procedure", value: 106, isUnsigned: true)
!2260 = !DIEnumerator(name: "OPT_Wimport", value: 107, isUnsigned: true)
!2261 = !DIEnumerator(name: "OPT_Windirect_static", value: 108, isUnsigned: true)
!2262 = !DIEnumerator(name: "OPT_Winit_self", value: 109, isUnsigned: true)
!2263 = !DIEnumerator(name: "OPT_Winline", value: 110, isUnsigned: true)
!2264 = !DIEnumerator(name: "OPT_Wint_to_pointer_cast", value: 111, isUnsigned: true)
!2265 = !DIEnumerator(name: "OPT_Wintf_annotation", value: 112, isUnsigned: true)
!2266 = !DIEnumerator(name: "OPT_Wintf_non_inherited", value: 113, isUnsigned: true)
!2267 = !DIEnumerator(name: "OPT_Wintrinsic_shadow", value: 114, isUnsigned: true)
!2268 = !DIEnumerator(name: "OPT_Wintrinsics_std", value: 115, isUnsigned: true)
!2269 = !DIEnumerator(name: "OPT_Winvalid_offsetof", value: 116, isUnsigned: true)
!2270 = !DIEnumerator(name: "OPT_Winvalid_pch", value: 117, isUnsigned: true)
!2271 = !DIEnumerator(name: "OPT_Wjavadoc", value: 118, isUnsigned: true)
!2272 = !DIEnumerator(name: "OPT_Wjump_misses_init", value: 119, isUnsigned: true)
!2273 = !DIEnumerator(name: "OPT_Wlarger_than_", value: 120, isUnsigned: true)
!2274 = !DIEnumerator(name: "OPT_Wlarger_than_eq", value: 121, isUnsigned: true)
!2275 = !DIEnumerator(name: "OPT_Wline_truncation", value: 122, isUnsigned: true)
!2276 = !DIEnumerator(name: "OPT_Wlocal_hiding", value: 123, isUnsigned: true)
!2277 = !DIEnumerator(name: "OPT_Wlogical_op", value: 124, isUnsigned: true)
!2278 = !DIEnumerator(name: "OPT_Wlong_long", value: 125, isUnsigned: true)
!2279 = !DIEnumerator(name: "OPT_Wmain", value: 126, isUnsigned: true)
!2280 = !DIEnumerator(name: "OPT_Wmasked_catch_block", value: 127, isUnsigned: true)
!2281 = !DIEnumerator(name: "OPT_Wmissing_braces", value: 128, isUnsigned: true)
!2282 = !DIEnumerator(name: "OPT_Wmissing_declarations", value: 129, isUnsigned: true)
!2283 = !DIEnumerator(name: "OPT_Wmissing_field_initializers", value: 130, isUnsigned: true)
!2284 = !DIEnumerator(name: "OPT_Wmissing_format_attribute", value: 131, isUnsigned: true)
!2285 = !DIEnumerator(name: "OPT_Wmissing_include_dirs", value: 132, isUnsigned: true)
!2286 = !DIEnumerator(name: "OPT_Wmissing_noreturn", value: 133, isUnsigned: true)
!2287 = !DIEnumerator(name: "OPT_Wmissing_parameter_type", value: 134, isUnsigned: true)
!2288 = !DIEnumerator(name: "OPT_Wmissing_prototypes", value: 135, isUnsigned: true)
!2289 = !DIEnumerator(name: "OPT_Wmudflap", value: 136, isUnsigned: true)
!2290 = !DIEnumerator(name: "OPT_Wmultichar", value: 137, isUnsigned: true)
!2291 = !DIEnumerator(name: "OPT_Wnested_externs", value: 138, isUnsigned: true)
!2292 = !DIEnumerator(name: "OPT_Wnls", value: 139, isUnsigned: true)
!2293 = !DIEnumerator(name: "OPT_Wno_effect_assign", value: 140, isUnsigned: true)
!2294 = !DIEnumerator(name: "OPT_Wnon_template_friend", value: 141, isUnsigned: true)
!2295 = !DIEnumerator(name: "OPT_Wnon_virtual_dtor", value: 142, isUnsigned: true)
!2296 = !DIEnumerator(name: "OPT_Wnonnull", value: 143, isUnsigned: true)
!2297 = !DIEnumerator(name: "OPT_Wnormalized_", value: 144, isUnsigned: true)
!2298 = !DIEnumerator(name: "OPT_Wnull", value: 145, isUnsigned: true)
!2299 = !DIEnumerator(name: "OPT_Wold_style_cast", value: 146, isUnsigned: true)
!2300 = !DIEnumerator(name: "OPT_Wold_style_declaration", value: 147, isUnsigned: true)
!2301 = !DIEnumerator(name: "OPT_Wold_style_definition", value: 148, isUnsigned: true)
!2302 = !DIEnumerator(name: "OPT_Wout_of_date", value: 149, isUnsigned: true)
!2303 = !DIEnumerator(name: "OPT_Wover_ann", value: 150, isUnsigned: true)
!2304 = !DIEnumerator(name: "OPT_Woverflow", value: 151, isUnsigned: true)
!2305 = !DIEnumerator(name: "OPT_Woverlength_strings", value: 152, isUnsigned: true)
!2306 = !DIEnumerator(name: "OPT_Woverloaded_virtual", value: 153, isUnsigned: true)
!2307 = !DIEnumerator(name: "OPT_Woverride_init", value: 154, isUnsigned: true)
!2308 = !DIEnumerator(name: "OPT_Wpacked", value: 155, isUnsigned: true)
!2309 = !DIEnumerator(name: "OPT_Wpacked_bitfield_compat", value: 156, isUnsigned: true)
!2310 = !DIEnumerator(name: "OPT_Wpadded", value: 157, isUnsigned: true)
!2311 = !DIEnumerator(name: "OPT_Wparam_assign", value: 158, isUnsigned: true)
!2312 = !DIEnumerator(name: "OPT_Wparentheses", value: 159, isUnsigned: true)
!2313 = !DIEnumerator(name: "OPT_Wpkg_default_method", value: 160, isUnsigned: true)
!2314 = !DIEnumerator(name: "OPT_Wpmf_conversions", value: 161, isUnsigned: true)
!2315 = !DIEnumerator(name: "OPT_Wpointer_arith", value: 162, isUnsigned: true)
!2316 = !DIEnumerator(name: "OPT_Wpointer_sign", value: 163, isUnsigned: true)
!2317 = !DIEnumerator(name: "OPT_Wpointer_to_int_cast", value: 164, isUnsigned: true)
!2318 = !DIEnumerator(name: "OPT_Wpragmas", value: 165, isUnsigned: true)
!2319 = !DIEnumerator(name: "OPT_Wprotocol", value: 166, isUnsigned: true)
!2320 = !DIEnumerator(name: "OPT_Wpsabi", value: 167, isUnsigned: true)
!2321 = !DIEnumerator(name: "OPT_Wraw", value: 168, isUnsigned: true)
!2322 = !DIEnumerator(name: "OPT_Wredundant_decls", value: 169, isUnsigned: true)
!2323 = !DIEnumerator(name: "OPT_Wredundant_modifiers", value: 170, isUnsigned: true)
!2324 = !DIEnumerator(name: "OPT_Wreorder", value: 171, isUnsigned: true)
!2325 = !DIEnumerator(name: "OPT_Wreturn_type", value: 172, isUnsigned: true)
!2326 = !DIEnumerator(name: "OPT_Wselector", value: 173, isUnsigned: true)
!2327 = !DIEnumerator(name: "OPT_Wsequence_point", value: 174, isUnsigned: true)
!2328 = !DIEnumerator(name: "OPT_Wserial", value: 175, isUnsigned: true)
!2329 = !DIEnumerator(name: "OPT_Wshadow", value: 176, isUnsigned: true)
!2330 = !DIEnumerator(name: "OPT_Wsign_compare", value: 177, isUnsigned: true)
!2331 = !DIEnumerator(name: "OPT_Wsign_conversion", value: 178, isUnsigned: true)
!2332 = !DIEnumerator(name: "OPT_Wsign_promo", value: 179, isUnsigned: true)
!2333 = !DIEnumerator(name: "OPT_Wspecial_param_hiding", value: 180, isUnsigned: true)
!2334 = !DIEnumerator(name: "OPT_Wstack_protector", value: 181, isUnsigned: true)
!2335 = !DIEnumerator(name: "OPT_Wstatic_access", value: 182, isUnsigned: true)
!2336 = !DIEnumerator(name: "OPT_Wstatic_receiver", value: 183, isUnsigned: true)
!2337 = !DIEnumerator(name: "OPT_Wstrict_aliasing", value: 184, isUnsigned: true)
!2338 = !DIEnumerator(name: "OPT_Wstrict_aliasing_", value: 185, isUnsigned: true)
!2339 = !DIEnumerator(name: "OPT_Wstrict_null_sentinel", value: 186, isUnsigned: true)
!2340 = !DIEnumerator(name: "OPT_Wstrict_overflow", value: 187, isUnsigned: true)
!2341 = !DIEnumerator(name: "OPT_Wstrict_overflow_", value: 188, isUnsigned: true)
!2342 = !DIEnumerator(name: "OPT_Wstrict_prototypes", value: 189, isUnsigned: true)
!2343 = !DIEnumerator(name: "OPT_Wstrict_selector_match", value: 190, isUnsigned: true)
!2344 = !DIEnumerator(name: "OPT_Wsuppress", value: 191, isUnsigned: true)
!2345 = !DIEnumerator(name: "OPT_Wsurprising", value: 192, isUnsigned: true)
!2346 = !DIEnumerator(name: "OPT_Wswitch", value: 193, isUnsigned: true)
!2347 = !DIEnumerator(name: "OPT_Wswitch_default", value: 194, isUnsigned: true)
!2348 = !DIEnumerator(name: "OPT_Wswitch_enum", value: 195, isUnsigned: true)
!2349 = !DIEnumerator(name: "OPT_Wsync_nand", value: 196, isUnsigned: true)
!2350 = !DIEnumerator(name: "OPT_Wsynth", value: 197, isUnsigned: true)
!2351 = !DIEnumerator(name: "OPT_Wsynthetic_access", value: 198, isUnsigned: true)
!2352 = !DIEnumerator(name: "OPT_Wsystem_headers", value: 199, isUnsigned: true)
!2353 = !DIEnumerator(name: "OPT_Wtabs", value: 200, isUnsigned: true)
!2354 = !DIEnumerator(name: "OPT_Wtasks", value: 201, isUnsigned: true)
!2355 = !DIEnumerator(name: "OPT_Wtraditional", value: 202, isUnsigned: true)
!2356 = !DIEnumerator(name: "OPT_Wtraditional_conversion", value: 203, isUnsigned: true)
!2357 = !DIEnumerator(name: "OPT_Wtrigraphs", value: 204, isUnsigned: true)
!2358 = !DIEnumerator(name: "OPT_Wtype_hiding", value: 205, isUnsigned: true)
!2359 = !DIEnumerator(name: "OPT_Wtype_limits", value: 206, isUnsigned: true)
!2360 = !DIEnumerator(name: "OPT_Wuncheck", value: 207, isUnsigned: true)
!2361 = !DIEnumerator(name: "OPT_Wundeclared_selector", value: 208, isUnsigned: true)
!2362 = !DIEnumerator(name: "OPT_Wundef", value: 209, isUnsigned: true)
!2363 = !DIEnumerator(name: "OPT_Wunderflow", value: 210, isUnsigned: true)
!2364 = !DIEnumerator(name: "OPT_Wuninitialized", value: 211, isUnsigned: true)
!2365 = !DIEnumerator(name: "OPT_Wunknown_pragmas", value: 212, isUnsigned: true)
!2366 = !DIEnumerator(name: "OPT_Wunnecessary_else", value: 213, isUnsigned: true)
!2367 = !DIEnumerator(name: "OPT_Wunqualified_field", value: 214, isUnsigned: true)
!2368 = !DIEnumerator(name: "OPT_Wunreachable_code", value: 215, isUnsigned: true)
!2369 = !DIEnumerator(name: "OPT_Wunsafe_loop_optimizations", value: 216, isUnsigned: true)
!2370 = !DIEnumerator(name: "OPT_Wunsuffixed_float_constants", value: 217, isUnsigned: true)
!2371 = !DIEnumerator(name: "OPT_Wunused", value: 218, isUnsigned: true)
!2372 = !DIEnumerator(name: "OPT_Wunused_argument", value: 219, isUnsigned: true)
!2373 = !DIEnumerator(name: "OPT_Wunused_function", value: 220, isUnsigned: true)
!2374 = !DIEnumerator(name: "OPT_Wunused_import", value: 221, isUnsigned: true)
!2375 = !DIEnumerator(name: "OPT_Wunused_label", value: 222, isUnsigned: true)
!2376 = !DIEnumerator(name: "OPT_Wunused_local", value: 223, isUnsigned: true)
!2377 = !DIEnumerator(name: "OPT_Wunused_macros", value: 224, isUnsigned: true)
!2378 = !DIEnumerator(name: "OPT_Wunused_parameter", value: 225, isUnsigned: true)
!2379 = !DIEnumerator(name: "OPT_Wunused_private", value: 226, isUnsigned: true)
!2380 = !DIEnumerator(name: "OPT_Wunused_result", value: 227, isUnsigned: true)
!2381 = !DIEnumerator(name: "OPT_Wunused_thrown", value: 228, isUnsigned: true)
!2382 = !DIEnumerator(name: "OPT_Wunused_value", value: 229, isUnsigned: true)
!2383 = !DIEnumerator(name: "OPT_Wunused_variable", value: 230, isUnsigned: true)
!2384 = !DIEnumerator(name: "OPT_Wuseless_type_check", value: 231, isUnsigned: true)
!2385 = !DIEnumerator(name: "OPT_Wvarargs_cast", value: 232, isUnsigned: true)
!2386 = !DIEnumerator(name: "OPT_Wvariadic_macros", value: 233, isUnsigned: true)
!2387 = !DIEnumerator(name: "OPT_Wvla", value: 234, isUnsigned: true)
!2388 = !DIEnumerator(name: "OPT_Wvolatile_register_var", value: 235, isUnsigned: true)
!2389 = !DIEnumerator(name: "OPT_Wwarning_token", value: 236, isUnsigned: true)
!2390 = !DIEnumerator(name: "OPT_Wwrite_strings", value: 237, isUnsigned: true)
!2391 = !DIEnumerator(name: "OPT_ansi", value: 238, isUnsigned: true)
!2392 = !DIEnumerator(name: "OPT_aux_info", value: 239, isUnsigned: true)
!2393 = !DIEnumerator(name: "OPT_aux_info_", value: 240, isUnsigned: true)
!2394 = !DIEnumerator(name: "OPT_auxbase", value: 241, isUnsigned: true)
!2395 = !DIEnumerator(name: "OPT_auxbase_strip", value: 242, isUnsigned: true)
!2396 = !DIEnumerator(name: "OPT_cpp", value: 243, isUnsigned: true)
!2397 = !DIEnumerator(name: "OPT_d", value: 244, isUnsigned: true)
!2398 = !DIEnumerator(name: "OPT_dumpbase", value: 245, isUnsigned: true)
!2399 = !DIEnumerator(name: "OPT_dumpdir", value: 246, isUnsigned: true)
!2400 = !DIEnumerator(name: "OPT_fCLASSPATH_", value: 247, isUnsigned: true)
!2401 = !DIEnumerator(name: "OPT_fPIC", value: 248, isUnsigned: true)
!2402 = !DIEnumerator(name: "OPT_fPIE", value: 249, isUnsigned: true)
!2403 = !DIEnumerator(name: "OPT_fRTS_", value: 250, isUnsigned: true)
!2404 = !DIEnumerator(name: "OPT_fabi_version_", value: 251, isUnsigned: true)
!2405 = !DIEnumerator(name: "OPT_faccess_control", value: 252, isUnsigned: true)
!2406 = !DIEnumerator(name: "OPT_falign_commons", value: 253, isUnsigned: true)
!2407 = !DIEnumerator(name: "OPT_falign_functions", value: 254, isUnsigned: true)
!2408 = !DIEnumerator(name: "OPT_falign_functions_", value: 255, isUnsigned: true)
!2409 = !DIEnumerator(name: "OPT_falign_jumps", value: 256, isUnsigned: true)
!2410 = !DIEnumerator(name: "OPT_falign_jumps_", value: 257, isUnsigned: true)
!2411 = !DIEnumerator(name: "OPT_falign_labels", value: 258, isUnsigned: true)
!2412 = !DIEnumerator(name: "OPT_falign_labels_", value: 259, isUnsigned: true)
!2413 = !DIEnumerator(name: "OPT_falign_loops", value: 260, isUnsigned: true)
!2414 = !DIEnumerator(name: "OPT_falign_loops_", value: 261, isUnsigned: true)
!2415 = !DIEnumerator(name: "OPT_fall_intrinsics", value: 262, isUnsigned: true)
!2416 = !DIEnumerator(name: "OPT_fall_virtual", value: 263, isUnsigned: true)
!2417 = !DIEnumerator(name: "OPT_fallow_leading_underscore", value: 264, isUnsigned: true)
!2418 = !DIEnumerator(name: "OPT_falt_external_templates", value: 265, isUnsigned: true)
!2419 = !DIEnumerator(name: "OPT_fargument_alias", value: 266, isUnsigned: true)
!2420 = !DIEnumerator(name: "OPT_fargument_noalias", value: 267, isUnsigned: true)
!2421 = !DIEnumerator(name: "OPT_fargument_noalias_anything", value: 268, isUnsigned: true)
!2422 = !DIEnumerator(name: "OPT_fargument_noalias_global", value: 269, isUnsigned: true)
!2423 = !DIEnumerator(name: "OPT_fasm", value: 270, isUnsigned: true)
!2424 = !DIEnumerator(name: "OPT_fassert", value: 271, isUnsigned: true)
!2425 = !DIEnumerator(name: "OPT_fassociative_math", value: 272, isUnsigned: true)
!2426 = !DIEnumerator(name: "OPT_fassume_compiled", value: 273, isUnsigned: true)
!2427 = !DIEnumerator(name: "OPT_fassume_compiled_", value: 274, isUnsigned: true)
!2428 = !DIEnumerator(name: "OPT_fasynchronous_unwind_tables", value: 275, isUnsigned: true)
!2429 = !DIEnumerator(name: "OPT_fauto_inc_dec", value: 276, isUnsigned: true)
!2430 = !DIEnumerator(name: "OPT_fautomatic", value: 277, isUnsigned: true)
!2431 = !DIEnumerator(name: "OPT_faux_classpath", value: 278, isUnsigned: true)
!2432 = !DIEnumerator(name: "OPT_fbackslash", value: 279, isUnsigned: true)
!2433 = !DIEnumerator(name: "OPT_fbacktrace", value: 280, isUnsigned: true)
!2434 = !DIEnumerator(name: "OPT_fblas_matmul_limit_", value: 281, isUnsigned: true)
!2435 = !DIEnumerator(name: "OPT_fbootclasspath_", value: 282, isUnsigned: true)
!2436 = !DIEnumerator(name: "OPT_fbootstrap_classes", value: 283, isUnsigned: true)
!2437 = !DIEnumerator(name: "OPT_fbounds_check", value: 284, isUnsigned: true)
!2438 = !DIEnumerator(name: "OPT_fbranch_count_reg", value: 285, isUnsigned: true)
!2439 = !DIEnumerator(name: "OPT_fbranch_probabilities", value: 286, isUnsigned: true)
!2440 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize", value: 287, isUnsigned: true)
!2441 = !DIEnumerator(name: "OPT_fbranch_target_load_optimize2", value: 288, isUnsigned: true)
!2442 = !DIEnumerator(name: "OPT_fbtr_bb_exclusive", value: 289, isUnsigned: true)
!2443 = !DIEnumerator(name: "OPT_fbuiltin", value: 290, isUnsigned: true)
!2444 = !DIEnumerator(name: "OPT_fbuiltin_", value: 291, isUnsigned: true)
!2445 = !DIEnumerator(name: "OPT_fcall_saved_", value: 292, isUnsigned: true)
!2446 = !DIEnumerator(name: "OPT_fcall_used_", value: 293, isUnsigned: true)
!2447 = !DIEnumerator(name: "OPT_fcaller_saves", value: 294, isUnsigned: true)
!2448 = !DIEnumerator(name: "OPT_fcheck_array_temporaries", value: 295, isUnsigned: true)
!2449 = !DIEnumerator(name: "OPT_fcheck_data_deps", value: 296, isUnsigned: true)
!2450 = !DIEnumerator(name: "OPT_fcheck_new", value: 297, isUnsigned: true)
!2451 = !DIEnumerator(name: "OPT_fcheck_references", value: 298, isUnsigned: true)
!2452 = !DIEnumerator(name: "OPT_fcheck_", value: 299, isUnsigned: true)
!2453 = !DIEnumerator(name: "OPT_fclasspath_", value: 300, isUnsigned: true)
!2454 = !DIEnumerator(name: "OPT_fcommon", value: 301, isUnsigned: true)
!2455 = !DIEnumerator(name: "OPT_fcompare_debug_second", value: 302, isUnsigned: true)
!2456 = !DIEnumerator(name: "OPT_fcompare_debug_", value: 303, isUnsigned: true)
!2457 = !DIEnumerator(name: "OPT_fcompile_resource_", value: 304, isUnsigned: true)
!2458 = !DIEnumerator(name: "OPT_fcond_mismatch", value: 305, isUnsigned: true)
!2459 = !DIEnumerator(name: "OPT_fconserve_space", value: 306, isUnsigned: true)
!2460 = !DIEnumerator(name: "OPT_fconserve_stack", value: 307, isUnsigned: true)
!2461 = !DIEnumerator(name: "OPT_fconstant_string_class_", value: 308, isUnsigned: true)
!2462 = !DIEnumerator(name: "OPT_fconvert_big_endian", value: 309, isUnsigned: true)
!2463 = !DIEnumerator(name: "OPT_fconvert_little_endian", value: 310, isUnsigned: true)
!2464 = !DIEnumerator(name: "OPT_fconvert_native", value: 311, isUnsigned: true)
!2465 = !DIEnumerator(name: "OPT_fconvert_swap", value: 312, isUnsigned: true)
!2466 = !DIEnumerator(name: "OPT_fcprop_registers", value: 313, isUnsigned: true)
!2467 = !DIEnumerator(name: "OPT_fcray_pointer", value: 314, isUnsigned: true)
!2468 = !DIEnumerator(name: "OPT_fcrossjumping", value: 315, isUnsigned: true)
!2469 = !DIEnumerator(name: "OPT_fcse_follow_jumps", value: 316, isUnsigned: true)
!2470 = !DIEnumerator(name: "OPT_fcse_skip_blocks", value: 317, isUnsigned: true)
!2471 = !DIEnumerator(name: "OPT_fcx_fortran_rules", value: 318, isUnsigned: true)
!2472 = !DIEnumerator(name: "OPT_fcx_limited_range", value: 319, isUnsigned: true)
!2473 = !DIEnumerator(name: "OPT_fd_lines_as_code", value: 320, isUnsigned: true)
!2474 = !DIEnumerator(name: "OPT_fd_lines_as_comments", value: 321, isUnsigned: true)
!2475 = !DIEnumerator(name: "OPT_fdata_sections", value: 322, isUnsigned: true)
!2476 = !DIEnumerator(name: "OPT_fdbg_cnt_list", value: 323, isUnsigned: true)
!2477 = !DIEnumerator(name: "OPT_fdbg_cnt_", value: 324, isUnsigned: true)
!2478 = !DIEnumerator(name: "OPT_fdce", value: 325, isUnsigned: true)
!2479 = !DIEnumerator(name: "OPT_fdebug_prefix_map_", value: 326, isUnsigned: true)
!2480 = !DIEnumerator(name: "OPT_fdeduce_init_list", value: 327, isUnsigned: true)
!2481 = !DIEnumerator(name: "OPT_fdefault_double_8", value: 328, isUnsigned: true)
!2482 = !DIEnumerator(name: "OPT_fdefault_inline", value: 329, isUnsigned: true)
!2483 = !DIEnumerator(name: "OPT_fdefault_integer_8", value: 330, isUnsigned: true)
!2484 = !DIEnumerator(name: "OPT_fdefault_real_8", value: 331, isUnsigned: true)
!2485 = !DIEnumerator(name: "OPT_fdefer_pop", value: 332, isUnsigned: true)
!2486 = !DIEnumerator(name: "OPT_fdelayed_branch", value: 333, isUnsigned: true)
!2487 = !DIEnumerator(name: "OPT_fdelete_null_pointer_checks", value: 334, isUnsigned: true)
!2488 = !DIEnumerator(name: "OPT_fdiagnostics_show_location_", value: 335, isUnsigned: true)
!2489 = !DIEnumerator(name: "OPT_fdiagnostics_show_option", value: 336, isUnsigned: true)
!2490 = !DIEnumerator(name: "OPT_fdirectives_only", value: 337, isUnsigned: true)
!2491 = !DIEnumerator(name: "OPT_fdisable_assertions", value: 338, isUnsigned: true)
!2492 = !DIEnumerator(name: "OPT_fdisable_assertions_", value: 339, isUnsigned: true)
!2493 = !DIEnumerator(name: "OPT_fdollar_ok", value: 340, isUnsigned: true)
!2494 = !DIEnumerator(name: "OPT_fdollars_in_identifiers", value: 341, isUnsigned: true)
!2495 = !DIEnumerator(name: "OPT_fdse", value: 342, isUnsigned: true)
!2496 = !DIEnumerator(name: "OPT_fdump_", value: 343, isUnsigned: true)
!2497 = !DIEnumerator(name: "OPT_fdump_core", value: 344, isUnsigned: true)
!2498 = !DIEnumerator(name: "OPT_fdump_final_insns_", value: 345, isUnsigned: true)
!2499 = !DIEnumerator(name: "OPT_fdump_noaddr", value: 346, isUnsigned: true)
!2500 = !DIEnumerator(name: "OPT_fdump_parse_tree", value: 347, isUnsigned: true)
!2501 = !DIEnumerator(name: "OPT_fdump_unnumbered", value: 348, isUnsigned: true)
!2502 = !DIEnumerator(name: "OPT_fdump_unnumbered_links", value: 349, isUnsigned: true)
!2503 = !DIEnumerator(name: "OPT_fdwarf2_cfi_asm", value: 350, isUnsigned: true)
!2504 = !DIEnumerator(name: "OPT_fearly_inlining", value: 351, isUnsigned: true)
!2505 = !DIEnumerator(name: "OPT_felide_constructors", value: 352, isUnsigned: true)
!2506 = !DIEnumerator(name: "OPT_feliminate_dwarf2_dups", value: 353, isUnsigned: true)
!2507 = !DIEnumerator(name: "OPT_feliminate_unused_debug_symbols", value: 354, isUnsigned: true)
!2508 = !DIEnumerator(name: "OPT_feliminate_unused_debug_types", value: 355, isUnsigned: true)
!2509 = !DIEnumerator(name: "OPT_femit_class_debug_always", value: 356, isUnsigned: true)
!2510 = !DIEnumerator(name: "OPT_femit_class_file", value: 357, isUnsigned: true)
!2511 = !DIEnumerator(name: "OPT_femit_class_files", value: 358, isUnsigned: true)
!2512 = !DIEnumerator(name: "OPT_femit_struct_debug_baseonly", value: 359, isUnsigned: true)
!2513 = !DIEnumerator(name: "OPT_femit_struct_debug_detailed_", value: 360, isUnsigned: true)
!2514 = !DIEnumerator(name: "OPT_femit_struct_debug_reduced", value: 361, isUnsigned: true)
!2515 = !DIEnumerator(name: "OPT_fenable_assertions", value: 362, isUnsigned: true)
!2516 = !DIEnumerator(name: "OPT_fenable_assertions_", value: 363, isUnsigned: true)
!2517 = !DIEnumerator(name: "OPT_fenable_icf_debug", value: 364, isUnsigned: true)
!2518 = !DIEnumerator(name: "OPT_fencoding_", value: 365, isUnsigned: true)
!2519 = !DIEnumerator(name: "OPT_fenforce_eh_specs", value: 366, isUnsigned: true)
!2520 = !DIEnumerator(name: "OPT_fenum_int_equiv", value: 367, isUnsigned: true)
!2521 = !DIEnumerator(name: "OPT_fexceptions", value: 368, isUnsigned: true)
!2522 = !DIEnumerator(name: "OPT_fexcess_precision_", value: 369, isUnsigned: true)
!2523 = !DIEnumerator(name: "OPT_fexec_charset_", value: 370, isUnsigned: true)
!2524 = !DIEnumerator(name: "OPT_fexpensive_optimizations", value: 371, isUnsigned: true)
!2525 = !DIEnumerator(name: "OPT_fextdirs_", value: 372, isUnsigned: true)
!2526 = !DIEnumerator(name: "OPT_fextended_identifiers", value: 373, isUnsigned: true)
!2527 = !DIEnumerator(name: "OPT_fexternal_blas", value: 374, isUnsigned: true)
!2528 = !DIEnumerator(name: "OPT_fexternal_templates", value: 375, isUnsigned: true)
!2529 = !DIEnumerator(name: "OPT_ff2c", value: 376, isUnsigned: true)
!2530 = !DIEnumerator(name: "OPT_ffast_math", value: 377, isUnsigned: true)
!2531 = !DIEnumerator(name: "OPT_ffilelist_file", value: 378, isUnsigned: true)
!2532 = !DIEnumerator(name: "OPT_ffinite_math_only", value: 379, isUnsigned: true)
!2533 = !DIEnumerator(name: "OPT_ffixed_", value: 380, isUnsigned: true)
!2534 = !DIEnumerator(name: "OPT_ffixed_form", value: 381, isUnsigned: true)
!2535 = !DIEnumerator(name: "OPT_ffixed_line_length_", value: 382, isUnsigned: true)
!2536 = !DIEnumerator(name: "OPT_ffixed_line_length_none", value: 383, isUnsigned: true)
!2537 = !DIEnumerator(name: "OPT_ffloat_store", value: 384, isUnsigned: true)
!2538 = !DIEnumerator(name: "OPT_ffor_scope", value: 385, isUnsigned: true)
!2539 = !DIEnumerator(name: "OPT_fforce_addr", value: 386, isUnsigned: true)
!2540 = !DIEnumerator(name: "OPT_fforce_classes_archive_check", value: 387, isUnsigned: true)
!2541 = !DIEnumerator(name: "OPT_fforward_propagate", value: 388, isUnsigned: true)
!2542 = !DIEnumerator(name: "OPT_ffpe_trap_", value: 389, isUnsigned: true)
!2543 = !DIEnumerator(name: "OPT_ffree_form", value: 390, isUnsigned: true)
!2544 = !DIEnumerator(name: "OPT_ffree_line_length_", value: 391, isUnsigned: true)
!2545 = !DIEnumerator(name: "OPT_ffree_line_length_none", value: 392, isUnsigned: true)
!2546 = !DIEnumerator(name: "OPT_ffreestanding", value: 393, isUnsigned: true)
!2547 = !DIEnumerator(name: "OPT_ffriend_injection", value: 394, isUnsigned: true)
!2548 = !DIEnumerator(name: "OPT_ffunction_cse", value: 395, isUnsigned: true)
!2549 = !DIEnumerator(name: "OPT_ffunction_sections", value: 396, isUnsigned: true)
!2550 = !DIEnumerator(name: "OPT_fgcse", value: 397, isUnsigned: true)
!2551 = !DIEnumerator(name: "OPT_fgcse_after_reload", value: 398, isUnsigned: true)
!2552 = !DIEnumerator(name: "OPT_fgcse_las", value: 399, isUnsigned: true)
!2553 = !DIEnumerator(name: "OPT_fgcse_lm", value: 400, isUnsigned: true)
!2554 = !DIEnumerator(name: "OPT_fgcse_sm", value: 401, isUnsigned: true)
!2555 = !DIEnumerator(name: "OPT_fgnu_keywords", value: 402, isUnsigned: true)
!2556 = !DIEnumerator(name: "OPT_fgnu_runtime", value: 403, isUnsigned: true)
!2557 = !DIEnumerator(name: "OPT_fgnu89_inline", value: 404, isUnsigned: true)
!2558 = !DIEnumerator(name: "OPT_fgraphite", value: 405, isUnsigned: true)
!2559 = !DIEnumerator(name: "OPT_fgraphite_identity", value: 406, isUnsigned: true)
!2560 = !DIEnumerator(name: "OPT_fguess_branch_probability", value: 407, isUnsigned: true)
!2561 = !DIEnumerator(name: "OPT_fguiding_decls", value: 408, isUnsigned: true)
!2562 = !DIEnumerator(name: "OPT_fhandle_exceptions", value: 409, isUnsigned: true)
!2563 = !DIEnumerator(name: "OPT_fhash_synchronization", value: 410, isUnsigned: true)
!2564 = !DIEnumerator(name: "OPT_fhelp", value: 411, isUnsigned: true)
!2565 = !DIEnumerator(name: "OPT_fhelp_", value: 412, isUnsigned: true)
!2566 = !DIEnumerator(name: "OPT_fhonor_std", value: 413, isUnsigned: true)
!2567 = !DIEnumerator(name: "OPT_fhosted", value: 414, isUnsigned: true)
!2568 = !DIEnumerator(name: "OPT_fhuge_objects", value: 415, isUnsigned: true)
!2569 = !DIEnumerator(name: "OPT_fident", value: 416, isUnsigned: true)
!2570 = !DIEnumerator(name: "OPT_fif_conversion", value: 417, isUnsigned: true)
!2571 = !DIEnumerator(name: "OPT_fif_conversion2", value: 418, isUnsigned: true)
!2572 = !DIEnumerator(name: "OPT_fimplement_inlines", value: 419, isUnsigned: true)
!2573 = !DIEnumerator(name: "OPT_fimplicit_inline_templates", value: 420, isUnsigned: true)
!2574 = !DIEnumerator(name: "OPT_fimplicit_none", value: 421, isUnsigned: true)
!2575 = !DIEnumerator(name: "OPT_fimplicit_templates", value: 422, isUnsigned: true)
!2576 = !DIEnumerator(name: "OPT_findirect_classes", value: 423, isUnsigned: true)
!2577 = !DIEnumerator(name: "OPT_findirect_dispatch", value: 424, isUnsigned: true)
!2578 = !DIEnumerator(name: "OPT_findirect_inlining", value: 425, isUnsigned: true)
!2579 = !DIEnumerator(name: "OPT_finhibit_size_directive", value: 426, isUnsigned: true)
!2580 = !DIEnumerator(name: "OPT_finit_character_", value: 427, isUnsigned: true)
!2581 = !DIEnumerator(name: "OPT_finit_integer_", value: 428, isUnsigned: true)
!2582 = !DIEnumerator(name: "OPT_finit_local_zero", value: 429, isUnsigned: true)
!2583 = !DIEnumerator(name: "OPT_finit_logical_", value: 430, isUnsigned: true)
!2584 = !DIEnumerator(name: "OPT_finit_real_", value: 431, isUnsigned: true)
!2585 = !DIEnumerator(name: "OPT_finline", value: 432, isUnsigned: true)
!2586 = !DIEnumerator(name: "OPT_finline_functions", value: 433, isUnsigned: true)
!2587 = !DIEnumerator(name: "OPT_finline_functions_called_once", value: 434, isUnsigned: true)
!2588 = !DIEnumerator(name: "OPT_finline_limit_", value: 435, isUnsigned: true)
!2589 = !DIEnumerator(name: "OPT_finline_limit_eq", value: 436, isUnsigned: true)
!2590 = !DIEnumerator(name: "OPT_finline_small_functions", value: 437, isUnsigned: true)
!2591 = !DIEnumerator(name: "OPT_finput_charset_", value: 438, isUnsigned: true)
!2592 = !DIEnumerator(name: "OPT_finstrument_functions", value: 439, isUnsigned: true)
!2593 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_file_list_", value: 440, isUnsigned: true)
!2594 = !DIEnumerator(name: "OPT_finstrument_functions_exclude_function_list_", value: 441, isUnsigned: true)
!2595 = !DIEnumerator(name: "OPT_fintrinsic_modules_path", value: 442, isUnsigned: true)
!2596 = !DIEnumerator(name: "OPT_fipa_cp", value: 443, isUnsigned: true)
!2597 = !DIEnumerator(name: "OPT_fipa_cp_clone", value: 444, isUnsigned: true)
!2598 = !DIEnumerator(name: "OPT_fipa_matrix_reorg", value: 445, isUnsigned: true)
!2599 = !DIEnumerator(name: "OPT_fipa_pta", value: 446, isUnsigned: true)
!2600 = !DIEnumerator(name: "OPT_fipa_pure_const", value: 447, isUnsigned: true)
!2601 = !DIEnumerator(name: "OPT_fipa_reference", value: 448, isUnsigned: true)
!2602 = !DIEnumerator(name: "OPT_fipa_sra", value: 449, isUnsigned: true)
!2603 = !DIEnumerator(name: "OPT_fipa_struct_reorg", value: 450, isUnsigned: true)
!2604 = !DIEnumerator(name: "OPT_fipa_type_escape", value: 451, isUnsigned: true)
!2605 = !DIEnumerator(name: "OPT_fira_algorithm_", value: 452, isUnsigned: true)
!2606 = !DIEnumerator(name: "OPT_fira_coalesce", value: 453, isUnsigned: true)
!2607 = !DIEnumerator(name: "OPT_fira_loop_pressure", value: 454, isUnsigned: true)
!2608 = !DIEnumerator(name: "OPT_fira_region_", value: 455, isUnsigned: true)
!2609 = !DIEnumerator(name: "OPT_fira_share_save_slots", value: 456, isUnsigned: true)
!2610 = !DIEnumerator(name: "OPT_fira_share_spill_slots", value: 457, isUnsigned: true)
!2611 = !DIEnumerator(name: "OPT_fira_verbose_", value: 458, isUnsigned: true)
!2612 = !DIEnumerator(name: "OPT_fivopts", value: 459, isUnsigned: true)
!2613 = !DIEnumerator(name: "OPT_fjni", value: 460, isUnsigned: true)
!2614 = !DIEnumerator(name: "OPT_fjump_tables", value: 461, isUnsigned: true)
!2615 = !DIEnumerator(name: "OPT_fkeep_inline_functions", value: 462, isUnsigned: true)
!2616 = !DIEnumerator(name: "OPT_fkeep_static_consts", value: 463, isUnsigned: true)
!2617 = !DIEnumerator(name: "OPT_flabels_ok", value: 464, isUnsigned: true)
!2618 = !DIEnumerator(name: "OPT_flax_vector_conversions", value: 465, isUnsigned: true)
!2619 = !DIEnumerator(name: "OPT_fleading_underscore", value: 466, isUnsigned: true)
!2620 = !DIEnumerator(name: "OPT_floop_block", value: 467, isUnsigned: true)
!2621 = !DIEnumerator(name: "OPT_floop_interchange", value: 468, isUnsigned: true)
!2622 = !DIEnumerator(name: "OPT_floop_optimize", value: 469, isUnsigned: true)
!2623 = !DIEnumerator(name: "OPT_floop_parallelize_all", value: 470, isUnsigned: true)
!2624 = !DIEnumerator(name: "OPT_floop_strip_mine", value: 471, isUnsigned: true)
!2625 = !DIEnumerator(name: "OPT_flto", value: 472, isUnsigned: true)
!2626 = !DIEnumerator(name: "OPT_flto_compression_level_", value: 473, isUnsigned: true)
!2627 = !DIEnumerator(name: "OPT_flto_report", value: 474, isUnsigned: true)
!2628 = !DIEnumerator(name: "OPT_fltrans", value: 475, isUnsigned: true)
!2629 = !DIEnumerator(name: "OPT_fltrans_output_list_", value: 476, isUnsigned: true)
!2630 = !DIEnumerator(name: "OPT_fmath_errno", value: 477, isUnsigned: true)
!2631 = !DIEnumerator(name: "OPT_fmax_array_constructor_", value: 478, isUnsigned: true)
!2632 = !DIEnumerator(name: "OPT_fmax_errors_", value: 479, isUnsigned: true)
!2633 = !DIEnumerator(name: "OPT_fmax_identifier_length_", value: 480, isUnsigned: true)
!2634 = !DIEnumerator(name: "OPT_fmax_stack_var_size_", value: 481, isUnsigned: true)
!2635 = !DIEnumerator(name: "OPT_fmax_subrecord_length_", value: 482, isUnsigned: true)
!2636 = !DIEnumerator(name: "OPT_fmem_report", value: 483, isUnsigned: true)
!2637 = !DIEnumerator(name: "OPT_fmerge_all_constants", value: 484, isUnsigned: true)
!2638 = !DIEnumerator(name: "OPT_fmerge_constants", value: 485, isUnsigned: true)
!2639 = !DIEnumerator(name: "OPT_fmerge_debug_strings", value: 486, isUnsigned: true)
!2640 = !DIEnumerator(name: "OPT_fmessage_length_", value: 487, isUnsigned: true)
!2641 = !DIEnumerator(name: "OPT_fmodule_private", value: 488, isUnsigned: true)
!2642 = !DIEnumerator(name: "OPT_fmodulo_sched", value: 489, isUnsigned: true)
!2643 = !DIEnumerator(name: "OPT_fmodulo_sched_allow_regmoves", value: 490, isUnsigned: true)
!2644 = !DIEnumerator(name: "OPT_fmove_loop_invariants", value: 491, isUnsigned: true)
!2645 = !DIEnumerator(name: "OPT_fms_extensions", value: 492, isUnsigned: true)
!2646 = !DIEnumerator(name: "OPT_fmudflap", value: 493, isUnsigned: true)
!2647 = !DIEnumerator(name: "OPT_fmudflapir", value: 494, isUnsigned: true)
!2648 = !DIEnumerator(name: "OPT_fmudflapth", value: 495, isUnsigned: true)
!2649 = !DIEnumerator(name: "OPT_fname_mangling_version_", value: 496, isUnsigned: true)
!2650 = !DIEnumerator(name: "OPT_fnew_abi", value: 497, isUnsigned: true)
!2651 = !DIEnumerator(name: "OPT_fnext_runtime", value: 498, isUnsigned: true)
!2652 = !DIEnumerator(name: "OPT_fnil_receivers", value: 499, isUnsigned: true)
!2653 = !DIEnumerator(name: "OPT_fnon_call_exceptions", value: 500, isUnsigned: true)
!2654 = !DIEnumerator(name: "OPT_fnonansi_builtins", value: 501, isUnsigned: true)
!2655 = !DIEnumerator(name: "OPT_fnonnull_objects", value: 502, isUnsigned: true)
!2656 = !DIEnumerator(name: "OPT_fobjc_call_cxx_cdtors", value: 503, isUnsigned: true)
!2657 = !DIEnumerator(name: "OPT_fobjc_direct_dispatch", value: 504, isUnsigned: true)
!2658 = !DIEnumerator(name: "OPT_fobjc_exceptions", value: 505, isUnsigned: true)
!2659 = !DIEnumerator(name: "OPT_fobjc_gc", value: 506, isUnsigned: true)
!2660 = !DIEnumerator(name: "OPT_fobjc_sjlj_exceptions", value: 507, isUnsigned: true)
!2661 = !DIEnumerator(name: "OPT_fomit_frame_pointer", value: 508, isUnsigned: true)
!2662 = !DIEnumerator(name: "OPT_fopenmp", value: 509, isUnsigned: true)
!2663 = !DIEnumerator(name: "OPT_foperator_names", value: 510, isUnsigned: true)
!2664 = !DIEnumerator(name: "OPT_foptimize_register_move", value: 511, isUnsigned: true)
!2665 = !DIEnumerator(name: "OPT_foptimize_sibling_calls", value: 512, isUnsigned: true)
!2666 = !DIEnumerator(name: "OPT_foptimize_static_class_initialization", value: 513, isUnsigned: true)
!2667 = !DIEnumerator(name: "OPT_foptional_diags", value: 514, isUnsigned: true)
!2668 = !DIEnumerator(name: "OPT_foutput_class_dir_", value: 515, isUnsigned: true)
!2669 = !DIEnumerator(name: "OPT_fpack_derived", value: 516, isUnsigned: true)
!2670 = !DIEnumerator(name: "OPT_fpack_struct", value: 517, isUnsigned: true)
!2671 = !DIEnumerator(name: "OPT_fpack_struct_", value: 518, isUnsigned: true)
!2672 = !DIEnumerator(name: "OPT_fpcc_struct_return", value: 519, isUnsigned: true)
!2673 = !DIEnumerator(name: "OPT_fpch_deps", value: 520, isUnsigned: true)
!2674 = !DIEnumerator(name: "OPT_fpch_preprocess", value: 521, isUnsigned: true)
!2675 = !DIEnumerator(name: "OPT_fpeel_loops", value: 522, isUnsigned: true)
!2676 = !DIEnumerator(name: "OPT_fpeephole", value: 523, isUnsigned: true)
!2677 = !DIEnumerator(name: "OPT_fpeephole2", value: 524, isUnsigned: true)
!2678 = !DIEnumerator(name: "OPT_fpermissive", value: 525, isUnsigned: true)
!2679 = !DIEnumerator(name: "OPT_fpic", value: 526, isUnsigned: true)
!2680 = !DIEnumerator(name: "OPT_fpie", value: 527, isUnsigned: true)
!2681 = !DIEnumerator(name: "OPT_fplugin_arg_", value: 528, isUnsigned: true)
!2682 = !DIEnumerator(name: "OPT_fplugin_", value: 529, isUnsigned: true)
!2683 = !DIEnumerator(name: "OPT_fpost_ipa_mem_report", value: 530, isUnsigned: true)
!2684 = !DIEnumerator(name: "OPT_fpre_ipa_mem_report", value: 531, isUnsigned: true)
!2685 = !DIEnumerator(name: "OPT_fpredictive_commoning", value: 532, isUnsigned: true)
!2686 = !DIEnumerator(name: "OPT_fprefetch_loop_arrays", value: 533, isUnsigned: true)
!2687 = !DIEnumerator(name: "OPT_fpreprocessed", value: 534, isUnsigned: true)
!2688 = !DIEnumerator(name: "OPT_fpretty_templates", value: 535, isUnsigned: true)
!2689 = !DIEnumerator(name: "OPT_fprofile", value: 536, isUnsigned: true)
!2690 = !DIEnumerator(name: "OPT_fprofile_arcs", value: 537, isUnsigned: true)
!2691 = !DIEnumerator(name: "OPT_fprofile_correction", value: 538, isUnsigned: true)
!2692 = !DIEnumerator(name: "OPT_fprofile_dir_", value: 539, isUnsigned: true)
!2693 = !DIEnumerator(name: "OPT_fprofile_generate", value: 540, isUnsigned: true)
!2694 = !DIEnumerator(name: "OPT_fprofile_generate_", value: 541, isUnsigned: true)
!2695 = !DIEnumerator(name: "OPT_fprofile_use", value: 542, isUnsigned: true)
!2696 = !DIEnumerator(name: "OPT_fprofile_use_", value: 543, isUnsigned: true)
!2697 = !DIEnumerator(name: "OPT_fprofile_values", value: 544, isUnsigned: true)
!2698 = !DIEnumerator(name: "OPT_fprotect_parens", value: 545, isUnsigned: true)
!2699 = !DIEnumerator(name: "OPT_frandom_seed", value: 546, isUnsigned: true)
!2700 = !DIEnumerator(name: "OPT_frandom_seed_", value: 547, isUnsigned: true)
!2701 = !DIEnumerator(name: "OPT_frange_check", value: 548, isUnsigned: true)
!2702 = !DIEnumerator(name: "OPT_freciprocal_math", value: 549, isUnsigned: true)
!2703 = !DIEnumerator(name: "OPT_frecord_gcc_switches", value: 550, isUnsigned: true)
!2704 = !DIEnumerator(name: "OPT_frecord_marker_4", value: 551, isUnsigned: true)
!2705 = !DIEnumerator(name: "OPT_frecord_marker_8", value: 552, isUnsigned: true)
!2706 = !DIEnumerator(name: "OPT_frecursive", value: 553, isUnsigned: true)
!2707 = !DIEnumerator(name: "OPT_freduced_reflection", value: 554, isUnsigned: true)
!2708 = !DIEnumerator(name: "OPT_freg_struct_return", value: 555, isUnsigned: true)
!2709 = !DIEnumerator(name: "OPT_fregmove", value: 556, isUnsigned: true)
!2710 = !DIEnumerator(name: "OPT_frename_registers", value: 557, isUnsigned: true)
!2711 = !DIEnumerator(name: "OPT_freorder_blocks", value: 558, isUnsigned: true)
!2712 = !DIEnumerator(name: "OPT_freorder_blocks_and_partition", value: 559, isUnsigned: true)
!2713 = !DIEnumerator(name: "OPT_freorder_functions", value: 560, isUnsigned: true)
!2714 = !DIEnumerator(name: "OPT_frepack_arrays", value: 561, isUnsigned: true)
!2715 = !DIEnumerator(name: "OPT_freplace_objc_classes", value: 562, isUnsigned: true)
!2716 = !DIEnumerator(name: "OPT_frepo", value: 563, isUnsigned: true)
!2717 = !DIEnumerator(name: "OPT_frerun_cse_after_loop", value: 564, isUnsigned: true)
!2718 = !DIEnumerator(name: "OPT_frerun_loop_opt", value: 565, isUnsigned: true)
!2719 = !DIEnumerator(name: "OPT_freschedule_modulo_scheduled_loops", value: 566, isUnsigned: true)
!2720 = !DIEnumerator(name: "OPT_fresolution", value: 567, isUnsigned: true)
!2721 = !DIEnumerator(name: "OPT_frounding_math", value: 568, isUnsigned: true)
!2722 = !DIEnumerator(name: "OPT_frtti", value: 569, isUnsigned: true)
!2723 = !DIEnumerator(name: "OPT_fsaw_java_file", value: 570, isUnsigned: true)
!2724 = !DIEnumerator(name: "OPT_fsched_critical_path_heuristic", value: 571, isUnsigned: true)
!2725 = !DIEnumerator(name: "OPT_fsched_dep_count_heuristic", value: 572, isUnsigned: true)
!2726 = !DIEnumerator(name: "OPT_fsched_group_heuristic", value: 573, isUnsigned: true)
!2727 = !DIEnumerator(name: "OPT_fsched_interblock", value: 574, isUnsigned: true)
!2728 = !DIEnumerator(name: "OPT_fsched_last_insn_heuristic", value: 575, isUnsigned: true)
!2729 = !DIEnumerator(name: "OPT_fsched_pressure", value: 576, isUnsigned: true)
!2730 = !DIEnumerator(name: "OPT_fsched_rank_heuristic", value: 577, isUnsigned: true)
!2731 = !DIEnumerator(name: "OPT_fsched_spec", value: 578, isUnsigned: true)
!2732 = !DIEnumerator(name: "OPT_fsched_spec_insn_heuristic", value: 579, isUnsigned: true)
!2733 = !DIEnumerator(name: "OPT_fsched_spec_load", value: 580, isUnsigned: true)
!2734 = !DIEnumerator(name: "OPT_fsched_spec_load_dangerous", value: 581, isUnsigned: true)
!2735 = !DIEnumerator(name: "OPT_fsched_stalled_insns", value: 582, isUnsigned: true)
!2736 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep", value: 583, isUnsigned: true)
!2737 = !DIEnumerator(name: "OPT_fsched_stalled_insns_dep_", value: 584, isUnsigned: true)
!2738 = !DIEnumerator(name: "OPT_fsched_stalled_insns_", value: 585, isUnsigned: true)
!2739 = !DIEnumerator(name: "OPT_fsched_verbose_", value: 586, isUnsigned: true)
!2740 = !DIEnumerator(name: "OPT_fsched2_use_superblocks", value: 587, isUnsigned: true)
!2741 = !DIEnumerator(name: "OPT_fsched2_use_traces", value: 588, isUnsigned: true)
!2742 = !DIEnumerator(name: "OPT_fschedule_insns", value: 589, isUnsigned: true)
!2743 = !DIEnumerator(name: "OPT_fschedule_insns2", value: 590, isUnsigned: true)
!2744 = !DIEnumerator(name: "OPT_fsecond_underscore", value: 591, isUnsigned: true)
!2745 = !DIEnumerator(name: "OPT_fsection_anchors", value: 592, isUnsigned: true)
!2746 = !DIEnumerator(name: "OPT_fsee", value: 593, isUnsigned: true)
!2747 = !DIEnumerator(name: "OPT_fsel_sched_pipelining", value: 594, isUnsigned: true)
!2748 = !DIEnumerator(name: "OPT_fsel_sched_pipelining_outer_loops", value: 595, isUnsigned: true)
!2749 = !DIEnumerator(name: "OPT_fsel_sched_reschedule_pipelined", value: 596, isUnsigned: true)
!2750 = !DIEnumerator(name: "OPT_fselective_scheduling", value: 597, isUnsigned: true)
!2751 = !DIEnumerator(name: "OPT_fselective_scheduling2", value: 598, isUnsigned: true)
!2752 = !DIEnumerator(name: "OPT_fshort_double", value: 599, isUnsigned: true)
!2753 = !DIEnumerator(name: "OPT_fshort_enums", value: 600, isUnsigned: true)
!2754 = !DIEnumerator(name: "OPT_fshort_wchar", value: 601, isUnsigned: true)
!2755 = !DIEnumerator(name: "OPT_fshow_column", value: 602, isUnsigned: true)
!2756 = !DIEnumerator(name: "OPT_fsign_zero", value: 603, isUnsigned: true)
!2757 = !DIEnumerator(name: "OPT_fsignaling_nans", value: 604, isUnsigned: true)
!2758 = !DIEnumerator(name: "OPT_fsigned_bitfields", value: 605, isUnsigned: true)
!2759 = !DIEnumerator(name: "OPT_fsigned_char", value: 606, isUnsigned: true)
!2760 = !DIEnumerator(name: "OPT_fsigned_zeros", value: 607, isUnsigned: true)
!2761 = !DIEnumerator(name: "OPT_fsingle_precision_constant", value: 608, isUnsigned: true)
!2762 = !DIEnumerator(name: "OPT_fsource_filename_", value: 609, isUnsigned: true)
!2763 = !DIEnumerator(name: "OPT_fsource_", value: 610, isUnsigned: true)
!2764 = !DIEnumerator(name: "OPT_fsplit_ivs_in_unroller", value: 611, isUnsigned: true)
!2765 = !DIEnumerator(name: "OPT_fsplit_wide_types", value: 612, isUnsigned: true)
!2766 = !DIEnumerator(name: "OPT_fsquangle", value: 613, isUnsigned: true)
!2767 = !DIEnumerator(name: "OPT_fstack_check", value: 614, isUnsigned: true)
!2768 = !DIEnumerator(name: "OPT_fstack_check_", value: 615, isUnsigned: true)
!2769 = !DIEnumerator(name: "OPT_fstack_limit", value: 616, isUnsigned: true)
!2770 = !DIEnumerator(name: "OPT_fstack_limit_register_", value: 617, isUnsigned: true)
!2771 = !DIEnumerator(name: "OPT_fstack_limit_symbol_", value: 618, isUnsigned: true)
!2772 = !DIEnumerator(name: "OPT_fstack_protector", value: 619, isUnsigned: true)
!2773 = !DIEnumerator(name: "OPT_fstack_protector_all", value: 620, isUnsigned: true)
!2774 = !DIEnumerator(name: "OPT_fstats", value: 621, isUnsigned: true)
!2775 = !DIEnumerator(name: "OPT_fstore_check", value: 622, isUnsigned: true)
!2776 = !DIEnumerator(name: "OPT_fstrength_reduce", value: 623, isUnsigned: true)
!2777 = !DIEnumerator(name: "OPT_fstrict_aliasing", value: 624, isUnsigned: true)
!2778 = !DIEnumerator(name: "OPT_fstrict_overflow", value: 625, isUnsigned: true)
!2779 = !DIEnumerator(name: "OPT_fstrict_prototype", value: 626, isUnsigned: true)
!2780 = !DIEnumerator(name: "OPT_fsyntax_only", value: 627, isUnsigned: true)
!2781 = !DIEnumerator(name: "OPT_ftabstop_", value: 628, isUnsigned: true)
!2782 = !DIEnumerator(name: "OPT_ftarget_help", value: 629, isUnsigned: true)
!2783 = !DIEnumerator(name: "OPT_ftarget_", value: 630, isUnsigned: true)
!2784 = !DIEnumerator(name: "OPT_ftemplate_depth_", value: 631, isUnsigned: true)
!2785 = !DIEnumerator(name: "OPT_ftemplate_depth_eq", value: 632, isUnsigned: true)
!2786 = !DIEnumerator(name: "OPT_ftest_coverage", value: 633, isUnsigned: true)
!2787 = !DIEnumerator(name: "OPT_fthis_is_variable", value: 634, isUnsigned: true)
!2788 = !DIEnumerator(name: "OPT_fthread_jumps", value: 635, isUnsigned: true)
!2789 = !DIEnumerator(name: "OPT_fthreadsafe_statics", value: 636, isUnsigned: true)
!2790 = !DIEnumerator(name: "OPT_ftime_report", value: 637, isUnsigned: true)
!2791 = !DIEnumerator(name: "OPT_ftls_model_", value: 638, isUnsigned: true)
!2792 = !DIEnumerator(name: "OPT_ftoplevel_reorder", value: 639, isUnsigned: true)
!2793 = !DIEnumerator(name: "OPT_ftracer", value: 640, isUnsigned: true)
!2794 = !DIEnumerator(name: "OPT_ftrapping_math", value: 641, isUnsigned: true)
!2795 = !DIEnumerator(name: "OPT_ftrapv", value: 642, isUnsigned: true)
!2796 = !DIEnumerator(name: "OPT_ftree_builtin_call_dce", value: 643, isUnsigned: true)
!2797 = !DIEnumerator(name: "OPT_ftree_ccp", value: 644, isUnsigned: true)
!2798 = !DIEnumerator(name: "OPT_ftree_ch", value: 645, isUnsigned: true)
!2799 = !DIEnumerator(name: "OPT_ftree_copy_prop", value: 646, isUnsigned: true)
!2800 = !DIEnumerator(name: "OPT_ftree_copyrename", value: 647, isUnsigned: true)
!2801 = !DIEnumerator(name: "OPT_ftree_cselim", value: 648, isUnsigned: true)
!2802 = !DIEnumerator(name: "OPT_ftree_dce", value: 649, isUnsigned: true)
!2803 = !DIEnumerator(name: "OPT_ftree_dominator_opts", value: 650, isUnsigned: true)
!2804 = !DIEnumerator(name: "OPT_ftree_dse", value: 651, isUnsigned: true)
!2805 = !DIEnumerator(name: "OPT_ftree_forwprop", value: 652, isUnsigned: true)
!2806 = !DIEnumerator(name: "OPT_ftree_fre", value: 653, isUnsigned: true)
!2807 = !DIEnumerator(name: "OPT_ftree_loop_distribution", value: 654, isUnsigned: true)
!2808 = !DIEnumerator(name: "OPT_ftree_loop_im", value: 655, isUnsigned: true)
!2809 = !DIEnumerator(name: "OPT_ftree_loop_ivcanon", value: 656, isUnsigned: true)
!2810 = !DIEnumerator(name: "OPT_ftree_loop_linear", value: 657, isUnsigned: true)
!2811 = !DIEnumerator(name: "OPT_ftree_loop_optimize", value: 658, isUnsigned: true)
!2812 = !DIEnumerator(name: "OPT_ftree_lrs", value: 659, isUnsigned: true)
!2813 = !DIEnumerator(name: "OPT_ftree_parallelize_loops_", value: 660, isUnsigned: true)
!2814 = !DIEnumerator(name: "OPT_ftree_phiprop", value: 661, isUnsigned: true)
!2815 = !DIEnumerator(name: "OPT_ftree_pre", value: 662, isUnsigned: true)
!2816 = !DIEnumerator(name: "OPT_ftree_pta", value: 663, isUnsigned: true)
!2817 = !DIEnumerator(name: "OPT_ftree_reassoc", value: 664, isUnsigned: true)
!2818 = !DIEnumerator(name: "OPT_ftree_salias", value: 665, isUnsigned: true)
!2819 = !DIEnumerator(name: "OPT_ftree_scev_cprop", value: 666, isUnsigned: true)
!2820 = !DIEnumerator(name: "OPT_ftree_sink", value: 667, isUnsigned: true)
!2821 = !DIEnumerator(name: "OPT_ftree_slp_vectorize", value: 668, isUnsigned: true)
!2822 = !DIEnumerator(name: "OPT_ftree_sra", value: 669, isUnsigned: true)
!2823 = !DIEnumerator(name: "OPT_ftree_store_ccp", value: 670, isUnsigned: true)
!2824 = !DIEnumerator(name: "OPT_ftree_store_copy_prop", value: 671, isUnsigned: true)
!2825 = !DIEnumerator(name: "OPT_ftree_switch_conversion", value: 672, isUnsigned: true)
!2826 = !DIEnumerator(name: "OPT_ftree_ter", value: 673, isUnsigned: true)
!2827 = !DIEnumerator(name: "OPT_ftree_vect_loop_version", value: 674, isUnsigned: true)
!2828 = !DIEnumerator(name: "OPT_ftree_vectorize", value: 675, isUnsigned: true)
!2829 = !DIEnumerator(name: "OPT_ftree_vectorizer_verbose_", value: 676, isUnsigned: true)
!2830 = !DIEnumerator(name: "OPT_ftree_vrp", value: 677, isUnsigned: true)
!2831 = !DIEnumerator(name: "OPT_funderscoring", value: 678, isUnsigned: true)
!2832 = !DIEnumerator(name: "OPT_funit_at_a_time", value: 679, isUnsigned: true)
!2833 = !DIEnumerator(name: "OPT_funroll_all_loops", value: 680, isUnsigned: true)
!2834 = !DIEnumerator(name: "OPT_funroll_loops", value: 681, isUnsigned: true)
!2835 = !DIEnumerator(name: "OPT_funsafe_loop_optimizations", value: 682, isUnsigned: true)
!2836 = !DIEnumerator(name: "OPT_funsafe_math_optimizations", value: 683, isUnsigned: true)
!2837 = !DIEnumerator(name: "OPT_funsigned_bitfields", value: 684, isUnsigned: true)
!2838 = !DIEnumerator(name: "OPT_funsigned_char", value: 685, isUnsigned: true)
!2839 = !DIEnumerator(name: "OPT_funswitch_loops", value: 686, isUnsigned: true)
!2840 = !DIEnumerator(name: "OPT_funwind_tables", value: 687, isUnsigned: true)
!2841 = !DIEnumerator(name: "OPT_fuse_atomic_builtins", value: 688, isUnsigned: true)
!2842 = !DIEnumerator(name: "OPT_fuse_boehm_gc", value: 689, isUnsigned: true)
!2843 = !DIEnumerator(name: "OPT_fuse_cxa_atexit", value: 690, isUnsigned: true)
!2844 = !DIEnumerator(name: "OPT_fuse_cxa_get_exception_ptr", value: 691, isUnsigned: true)
!2845 = !DIEnumerator(name: "OPT_fuse_divide_subroutine", value: 692, isUnsigned: true)
!2846 = !DIEnumerator(name: "OPT_fuse_linker_plugin", value: 693, isUnsigned: true)
!2847 = !DIEnumerator(name: "OPT_fvar_tracking", value: 694, isUnsigned: true)
!2848 = !DIEnumerator(name: "OPT_fvar_tracking_assignments", value: 695, isUnsigned: true)
!2849 = !DIEnumerator(name: "OPT_fvar_tracking_assignments_toggle", value: 696, isUnsigned: true)
!2850 = !DIEnumerator(name: "OPT_fvar_tracking_uninit", value: 697, isUnsigned: true)
!2851 = !DIEnumerator(name: "OPT_fvariable_expansion_in_unroller", value: 698, isUnsigned: true)
!2852 = !DIEnumerator(name: "OPT_fvect_cost_model", value: 699, isUnsigned: true)
!2853 = !DIEnumerator(name: "OPT_fverbose_asm", value: 700, isUnsigned: true)
!2854 = !DIEnumerator(name: "OPT_fversion", value: 701, isUnsigned: true)
!2855 = !DIEnumerator(name: "OPT_fvisibility_inlines_hidden", value: 702, isUnsigned: true)
!2856 = !DIEnumerator(name: "OPT_fvisibility_ms_compat", value: 703, isUnsigned: true)
!2857 = !DIEnumerator(name: "OPT_fvisibility_", value: 704, isUnsigned: true)
!2858 = !DIEnumerator(name: "OPT_fvpt", value: 705, isUnsigned: true)
!2859 = !DIEnumerator(name: "OPT_fvtable_gc", value: 706, isUnsigned: true)
!2860 = !DIEnumerator(name: "OPT_fvtable_thunks", value: 707, isUnsigned: true)
!2861 = !DIEnumerator(name: "OPT_fweak", value: 708, isUnsigned: true)
!2862 = !DIEnumerator(name: "OPT_fweb", value: 709, isUnsigned: true)
!2863 = !DIEnumerator(name: "OPT_fwhole_file", value: 710, isUnsigned: true)
!2864 = !DIEnumerator(name: "OPT_fwhole_program", value: 711, isUnsigned: true)
!2865 = !DIEnumerator(name: "OPT_fwhopr", value: 712, isUnsigned: true)
!2866 = !DIEnumerator(name: "OPT_fwide_exec_charset_", value: 713, isUnsigned: true)
!2867 = !DIEnumerator(name: "OPT_fworking_directory", value: 714, isUnsigned: true)
!2868 = !DIEnumerator(name: "OPT_fwpa", value: 715, isUnsigned: true)
!2869 = !DIEnumerator(name: "OPT_fwrapv", value: 716, isUnsigned: true)
!2870 = !DIEnumerator(name: "OPT_fxref", value: 717, isUnsigned: true)
!2871 = !DIEnumerator(name: "OPT_fzero_initialized_in_bss", value: 718, isUnsigned: true)
!2872 = !DIEnumerator(name: "OPT_fzero_link", value: 719, isUnsigned: true)
!2873 = !DIEnumerator(name: "OPT_g", value: 720, isUnsigned: true)
!2874 = !DIEnumerator(name: "OPT_gant", value: 721, isUnsigned: true)
!2875 = !DIEnumerator(name: "OPT_gcoff", value: 722, isUnsigned: true)
!2876 = !DIEnumerator(name: "OPT_gdwarfplus", value: 723, isUnsigned: true)
!2877 = !DIEnumerator(name: "OPT_gdwarf_", value: 724, isUnsigned: true)
!2878 = !DIEnumerator(name: "OPT_gen_decls", value: 725, isUnsigned: true)
!2879 = !DIEnumerator(name: "OPT_ggdb", value: 726, isUnsigned: true)
!2880 = !DIEnumerator(name: "OPT_gnat", value: 727, isUnsigned: true)
!2881 = !DIEnumerator(name: "OPT_gnatO", value: 728, isUnsigned: true)
!2882 = !DIEnumerator(name: "OPT_gno_strict_dwarf", value: 729, isUnsigned: true)
!2883 = !DIEnumerator(name: "OPT_gstabs", value: 730, isUnsigned: true)
!2884 = !DIEnumerator(name: "OPT_gstabs_", value: 731, isUnsigned: true)
!2885 = !DIEnumerator(name: "OPT_gstrict_dwarf", value: 732, isUnsigned: true)
!2886 = !DIEnumerator(name: "OPT_gtoggle", value: 733, isUnsigned: true)
!2887 = !DIEnumerator(name: "OPT_gvms", value: 734, isUnsigned: true)
!2888 = !DIEnumerator(name: "OPT_gxcoff", value: 735, isUnsigned: true)
!2889 = !DIEnumerator(name: "OPT_gxcoff_", value: 736, isUnsigned: true)
!2890 = !DIEnumerator(name: "OPT_idirafter", value: 737, isUnsigned: true)
!2891 = !DIEnumerator(name: "OPT_imacros", value: 738, isUnsigned: true)
!2892 = !DIEnumerator(name: "OPT_imultilib", value: 739, isUnsigned: true)
!2893 = !DIEnumerator(name: "OPT_include", value: 740, isUnsigned: true)
!2894 = !DIEnumerator(name: "OPT_iprefix", value: 741, isUnsigned: true)
!2895 = !DIEnumerator(name: "OPT_iquote", value: 742, isUnsigned: true)
!2896 = !DIEnumerator(name: "OPT_isysroot", value: 743, isUnsigned: true)
!2897 = !DIEnumerator(name: "OPT_isystem", value: 744, isUnsigned: true)
!2898 = !DIEnumerator(name: "OPT_iwithprefix", value: 745, isUnsigned: true)
!2899 = !DIEnumerator(name: "OPT_iwithprefixbefore", value: 746, isUnsigned: true)
!2900 = !DIEnumerator(name: "OPT_lang_asm", value: 747, isUnsigned: true)
!2901 = !DIEnumerator(name: "OPT_lang_objc", value: 748, isUnsigned: true)
!2902 = !DIEnumerator(name: "OPT_m128bit_long_double", value: 749, isUnsigned: true)
!2903 = !DIEnumerator(name: "OPT_m32", value: 750, isUnsigned: true)
!2904 = !DIEnumerator(name: "OPT_m3dnow", value: 751, isUnsigned: true)
!2905 = !DIEnumerator(name: "OPT_m3dnowa", value: 752, isUnsigned: true)
!2906 = !DIEnumerator(name: "OPT_m64", value: 753, isUnsigned: true)
!2907 = !DIEnumerator(name: "OPT_m80387", value: 754, isUnsigned: true)
!2908 = !DIEnumerator(name: "OPT_m96bit_long_double", value: 755, isUnsigned: true)
!2909 = !DIEnumerator(name: "OPT_mabi_", value: 756, isUnsigned: true)
!2910 = !DIEnumerator(name: "OPT_mabm", value: 757, isUnsigned: true)
!2911 = !DIEnumerator(name: "OPT_maccumulate_outgoing_args", value: 758, isUnsigned: true)
!2912 = !DIEnumerator(name: "OPT_maes", value: 759, isUnsigned: true)
!2913 = !DIEnumerator(name: "OPT_malign_double", value: 760, isUnsigned: true)
!2914 = !DIEnumerator(name: "OPT_malign_functions_", value: 761, isUnsigned: true)
!2915 = !DIEnumerator(name: "OPT_malign_jumps_", value: 762, isUnsigned: true)
!2916 = !DIEnumerator(name: "OPT_malign_loops_", value: 763, isUnsigned: true)
!2917 = !DIEnumerator(name: "OPT_malign_stringops", value: 764, isUnsigned: true)
!2918 = !DIEnumerator(name: "OPT_march_", value: 765, isUnsigned: true)
!2919 = !DIEnumerator(name: "OPT_masm_", value: 766, isUnsigned: true)
!2920 = !DIEnumerator(name: "OPT_mavx", value: 767, isUnsigned: true)
!2921 = !DIEnumerator(name: "OPT_mbranch_cost_", value: 768, isUnsigned: true)
!2922 = !DIEnumerator(name: "OPT_mcld", value: 769, isUnsigned: true)
!2923 = !DIEnumerator(name: "OPT_mcmodel_", value: 770, isUnsigned: true)
!2924 = !DIEnumerator(name: "OPT_mcrc32", value: 771, isUnsigned: true)
!2925 = !DIEnumerator(name: "OPT_mcx16", value: 772, isUnsigned: true)
!2926 = !DIEnumerator(name: "OPT_mfancy_math_387", value: 773, isUnsigned: true)
!2927 = !DIEnumerator(name: "OPT_mfma", value: 774, isUnsigned: true)
!2928 = !DIEnumerator(name: "OPT_mfma4", value: 775, isUnsigned: true)
!2929 = !DIEnumerator(name: "OPT_mforce_drap", value: 776, isUnsigned: true)
!2930 = !DIEnumerator(name: "OPT_mfp_ret_in_387", value: 777, isUnsigned: true)
!2931 = !DIEnumerator(name: "OPT_mfpmath_", value: 778, isUnsigned: true)
!2932 = !DIEnumerator(name: "OPT_mfused_madd", value: 779, isUnsigned: true)
!2933 = !DIEnumerator(name: "OPT_mglibc", value: 780, isUnsigned: true)
!2934 = !DIEnumerator(name: "OPT_mhard_float", value: 781, isUnsigned: true)
!2935 = !DIEnumerator(name: "OPT_mieee_fp", value: 782, isUnsigned: true)
!2936 = !DIEnumerator(name: "OPT_mincoming_stack_boundary_", value: 783, isUnsigned: true)
!2937 = !DIEnumerator(name: "OPT_minline_all_stringops", value: 784, isUnsigned: true)
!2938 = !DIEnumerator(name: "OPT_minline_stringops_dynamically", value: 785, isUnsigned: true)
!2939 = !DIEnumerator(name: "OPT_mintel_syntax", value: 786, isUnsigned: true)
!2940 = !DIEnumerator(name: "OPT_mlarge_data_threshold_", value: 787, isUnsigned: true)
!2941 = !DIEnumerator(name: "OPT_mlwp", value: 788, isUnsigned: true)
!2942 = !DIEnumerator(name: "OPT_mmmx", value: 789, isUnsigned: true)
!2943 = !DIEnumerator(name: "OPT_mmovbe", value: 790, isUnsigned: true)
!2944 = !DIEnumerator(name: "OPT_mms_bitfields", value: 791, isUnsigned: true)
!2945 = !DIEnumerator(name: "OPT_mno_align_stringops", value: 792, isUnsigned: true)
!2946 = !DIEnumerator(name: "OPT_mno_fancy_math_387", value: 793, isUnsigned: true)
!2947 = !DIEnumerator(name: "OPT_mno_push_args", value: 794, isUnsigned: true)
!2948 = !DIEnumerator(name: "OPT_mno_red_zone", value: 795, isUnsigned: true)
!2949 = !DIEnumerator(name: "OPT_mno_sse4", value: 796, isUnsigned: true)
!2950 = !DIEnumerator(name: "OPT_momit_leaf_frame_pointer", value: 797, isUnsigned: true)
!2951 = !DIEnumerator(name: "OPT_mpc", value: 798, isUnsigned: true)
!2952 = !DIEnumerator(name: "OPT_mpclmul", value: 799, isUnsigned: true)
!2953 = !DIEnumerator(name: "OPT_mpopcnt", value: 800, isUnsigned: true)
!2954 = !DIEnumerator(name: "OPT_mpreferred_stack_boundary_", value: 801, isUnsigned: true)
!2955 = !DIEnumerator(name: "OPT_mpush_args", value: 802, isUnsigned: true)
!2956 = !DIEnumerator(name: "OPT_mrecip", value: 803, isUnsigned: true)
!2957 = !DIEnumerator(name: "OPT_mred_zone", value: 804, isUnsigned: true)
!2958 = !DIEnumerator(name: "OPT_mregparm_", value: 805, isUnsigned: true)
!2959 = !DIEnumerator(name: "OPT_mrtd", value: 806, isUnsigned: true)
!2960 = !DIEnumerator(name: "OPT_msahf", value: 807, isUnsigned: true)
!2961 = !DIEnumerator(name: "OPT_msoft_float", value: 808, isUnsigned: true)
!2962 = !DIEnumerator(name: "OPT_msse", value: 809, isUnsigned: true)
!2963 = !DIEnumerator(name: "OPT_msse2", value: 810, isUnsigned: true)
!2964 = !DIEnumerator(name: "OPT_msse2avx", value: 811, isUnsigned: true)
!2965 = !DIEnumerator(name: "OPT_msse3", value: 812, isUnsigned: true)
!2966 = !DIEnumerator(name: "OPT_msse4", value: 813, isUnsigned: true)
!2967 = !DIEnumerator(name: "OPT_msse4_1", value: 814, isUnsigned: true)
!2968 = !DIEnumerator(name: "OPT_msse4_2", value: 815, isUnsigned: true)
!2969 = !DIEnumerator(name: "OPT_msse4a", value: 816, isUnsigned: true)
!2970 = !DIEnumerator(name: "OPT_msseregparm", value: 817, isUnsigned: true)
!2971 = !DIEnumerator(name: "OPT_mssse3", value: 818, isUnsigned: true)
!2972 = !DIEnumerator(name: "OPT_mstack_arg_probe", value: 819, isUnsigned: true)
!2973 = !DIEnumerator(name: "OPT_mstackrealign", value: 820, isUnsigned: true)
!2974 = !DIEnumerator(name: "OPT_mstringop_strategy_", value: 821, isUnsigned: true)
!2975 = !DIEnumerator(name: "OPT_mtls_dialect_", value: 822, isUnsigned: true)
!2976 = !DIEnumerator(name: "OPT_mtls_direct_seg_refs", value: 823, isUnsigned: true)
!2977 = !DIEnumerator(name: "OPT_mtune_", value: 824, isUnsigned: true)
!2978 = !DIEnumerator(name: "OPT_muclibc", value: 825, isUnsigned: true)
!2979 = !DIEnumerator(name: "OPT_mveclibabi_", value: 826, isUnsigned: true)
!2980 = !DIEnumerator(name: "OPT_mxop", value: 827, isUnsigned: true)
!2981 = !DIEnumerator(name: "OPT_nocpp", value: 828, isUnsigned: true)
!2982 = !DIEnumerator(name: "OPT_nostdinc", value: 829, isUnsigned: true)
!2983 = !DIEnumerator(name: "OPT_nostdinc__", value: 830, isUnsigned: true)
!2984 = !DIEnumerator(name: "OPT_nostdlib", value: 831, isUnsigned: true)
!2985 = !DIEnumerator(name: "OPT_o", value: 832, isUnsigned: true)
!2986 = !DIEnumerator(name: "OPT_p", value: 833, isUnsigned: true)
!2987 = !DIEnumerator(name: "OPT_pedantic", value: 834, isUnsigned: true)
!2988 = !DIEnumerator(name: "OPT_pedantic_errors", value: 835, isUnsigned: true)
!2989 = !DIEnumerator(name: "OPT_pie", value: 836, isUnsigned: true)
!2990 = !DIEnumerator(name: "OPT_print_objc_runtime_info", value: 837, isUnsigned: true)
!2991 = !DIEnumerator(name: "OPT_print_pch_checksum", value: 838, isUnsigned: true)
!2992 = !DIEnumerator(name: "OPT_quiet", value: 839, isUnsigned: true)
!2993 = !DIEnumerator(name: "OPT_remap", value: 840, isUnsigned: true)
!2994 = !DIEnumerator(name: "OPT_shared", value: 841, isUnsigned: true)
!2995 = !DIEnumerator(name: "OPT_static_libgfortran", value: 842, isUnsigned: true)
!2996 = !DIEnumerator(name: "OPT_std_c__0x", value: 843, isUnsigned: true)
!2997 = !DIEnumerator(name: "OPT_std_c__98", value: 844, isUnsigned: true)
!2998 = !DIEnumerator(name: "OPT_std_c89", value: 845, isUnsigned: true)
!2999 = !DIEnumerator(name: "OPT_std_c90", value: 846, isUnsigned: true)
!3000 = !DIEnumerator(name: "OPT_std_c99", value: 847, isUnsigned: true)
!3001 = !DIEnumerator(name: "OPT_std_c9x", value: 848, isUnsigned: true)
!3002 = !DIEnumerator(name: "OPT_std_f2003", value: 849, isUnsigned: true)
!3003 = !DIEnumerator(name: "OPT_std_f2008", value: 850, isUnsigned: true)
!3004 = !DIEnumerator(name: "OPT_std_f95", value: 851, isUnsigned: true)
!3005 = !DIEnumerator(name: "OPT_std_gnu", value: 852, isUnsigned: true)
!3006 = !DIEnumerator(name: "OPT_std_gnu__0x", value: 853, isUnsigned: true)
!3007 = !DIEnumerator(name: "OPT_std_gnu__98", value: 854, isUnsigned: true)
!3008 = !DIEnumerator(name: "OPT_std_gnu89", value: 855, isUnsigned: true)
!3009 = !DIEnumerator(name: "OPT_std_gnu90", value: 856, isUnsigned: true)
!3010 = !DIEnumerator(name: "OPT_std_gnu99", value: 857, isUnsigned: true)
!3011 = !DIEnumerator(name: "OPT_std_gnu9x", value: 858, isUnsigned: true)
!3012 = !DIEnumerator(name: "OPT_std_iso9899_1990", value: 859, isUnsigned: true)
!3013 = !DIEnumerator(name: "OPT_std_iso9899_199409", value: 860, isUnsigned: true)
!3014 = !DIEnumerator(name: "OPT_std_iso9899_1999", value: 861, isUnsigned: true)
!3015 = !DIEnumerator(name: "OPT_std_iso9899_199x", value: 862, isUnsigned: true)
!3016 = !DIEnumerator(name: "OPT_std_legacy", value: 863, isUnsigned: true)
!3017 = !DIEnumerator(name: "OPT_traditional_cpp", value: 864, isUnsigned: true)
!3018 = !DIEnumerator(name: "OPT_trigraphs", value: 865, isUnsigned: true)
!3019 = !DIEnumerator(name: "OPT_undef", value: 866, isUnsigned: true)
!3020 = !DIEnumerator(name: "OPT_v", value: 867, isUnsigned: true)
!3021 = !DIEnumerator(name: "OPT_version", value: 868, isUnsigned: true)
!3022 = !DIEnumerator(name: "OPT_w", value: 869, isUnsigned: true)
!3023 = !DIEnumerator(name: "N_OPTS", value: 870, isUnsigned: true)
!3024 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "expand_modifier", file: !2139, line: 52, baseType: !13, size: 32, elements: !3025)
!3025 = !{!3026, !3027, !3028, !3029, !3030, !3031, !3032}
!3026 = !DIEnumerator(name: "EXPAND_NORMAL", value: 0, isUnsigned: true)
!3027 = !DIEnumerator(name: "EXPAND_STACK_PARM", value: 1, isUnsigned: true)
!3028 = !DIEnumerator(name: "EXPAND_SUM", value: 2, isUnsigned: true)
!3029 = !DIEnumerator(name: "EXPAND_CONST_ADDRESS", value: 3, isUnsigned: true)
!3030 = !DIEnumerator(name: "EXPAND_INITIALIZER", value: 4, isUnsigned: true)
!3031 = !DIEnumerator(name: "EXPAND_WRITE", value: 5, isUnsigned: true)
!3032 = !DIEnumerator(name: "EXPAND_MEMORY", value: 6, isUnsigned: true)
!3033 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "global_rtl_index", file: !10, line: 1994, baseType: !13, size: 32, elements: !3034)
!3034 = !{!3035, !3036, !3037, !3038, !3039, !3040, !3041, !3042, !3043, !3044, !3045, !3046}
!3035 = !DIEnumerator(name: "GR_PC", value: 0, isUnsigned: true)
!3036 = !DIEnumerator(name: "GR_CC0", value: 1, isUnsigned: true)
!3037 = !DIEnumerator(name: "GR_STACK_POINTER", value: 2, isUnsigned: true)
!3038 = !DIEnumerator(name: "GR_FRAME_POINTER", value: 3, isUnsigned: true)
!3039 = !DIEnumerator(name: "GR_HARD_FRAME_POINTER", value: 4, isUnsigned: true)
!3040 = !DIEnumerator(name: "GR_ARG_POINTER", value: 5, isUnsigned: true)
!3041 = !DIEnumerator(name: "GR_VIRTUAL_INCOMING_ARGS", value: 6, isUnsigned: true)
!3042 = !DIEnumerator(name: "GR_VIRTUAL_STACK_ARGS", value: 7, isUnsigned: true)
!3043 = !DIEnumerator(name: "GR_VIRTUAL_STACK_DYNAMIC", value: 8, isUnsigned: true)
!3044 = !DIEnumerator(name: "GR_VIRTUAL_OUTGOING_ARGS", value: 9, isUnsigned: true)
!3045 = !DIEnumerator(name: "GR_VIRTUAL_CFA", value: 10, isUnsigned: true)
!3046 = !DIEnumerator(name: "GR_MAX", value: 11, isUnsigned: true)
!3047 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !3048, line: 27, baseType: !13, size: 32, elements: !3049)
!3048 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3049 = !{!3050, !3051, !3052, !3053, !3054, !3055, !3056, !3057, !3058, !3059, !3060, !3061, !3062, !3063, !3064, !3065, !3066, !3067, !3068, !3069, !3070, !3071, !3072, !3073, !3074, !3075, !3076, !3077, !3078, !3079, !3080, !3081, !3082, !3083, !3084, !3085, !3086, !3087, !3088}
!3050 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!3051 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!3052 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!3053 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!3054 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!3055 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!3056 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!3057 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!3058 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!3059 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!3060 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!3061 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!3062 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!3063 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!3064 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!3065 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!3066 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!3067 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!3068 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!3069 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!3070 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!3071 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!3072 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!3073 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!3074 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!3075 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!3076 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!3077 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!3078 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!3079 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!3080 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!3081 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!3082 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!3083 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!3084 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!3085 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!3086 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!3087 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!3088 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!3089 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "save_level", file: !2139, line: 769, baseType: !13, size: 32, elements: !3090)
!3090 = !{!3091, !3092, !3093}
!3091 = !DIEnumerator(name: "SAVE_BLOCK", value: 0, isUnsigned: true)
!3092 = !DIEnumerator(name: "SAVE_FUNCTION", value: 1, isUnsigned: true)
!3093 = !DIEnumerator(name: "SAVE_NONLOCAL", value: 2, isUnsigned: true)
!3094 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "size_type_kind", file: !261, line: 4288, baseType: !13, size: 32, elements: !3095)
!3095 = !{!3096, !3097, !3098, !3099, !3100}
!3096 = !DIEnumerator(name: "SIZETYPE", value: 0, isUnsigned: true)
!3097 = !DIEnumerator(name: "SSIZETYPE", value: 1, isUnsigned: true)
!3098 = !DIEnumerator(name: "BITSIZETYPE", value: 2, isUnsigned: true)
!3099 = !DIEnumerator(name: "SBITSIZETYPE", value: 3, isUnsigned: true)
!3100 = !DIEnumerator(name: "TYPE_KIND_LAST", value: 4, isUnsigned: true)
!3101 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_index", file: !261, line: 3410, baseType: !13, size: 32, elements: !3102)
!3102 = !{!3103, !3104, !3105, !3106, !3107, !3108, !3109, !3110, !3111, !3112, !3113, !3114, !3115, !3116, !3117, !3118, !3119, !3120, !3121, !3122, !3123, !3124, !3125, !3126, !3127, !3128, !3129, !3130, !3131, !3132, !3133, !3134, !3135, !3136, !3137, !3138, !3139, !3140, !3141, !3142, !3143, !3144, !3145, !3146, !3147, !3148, !3149, !3150, !3151, !3152, !3153, !3154, !3155, !3156, !3157, !3158, !3159, !3160, !3161, !3162, !3163, !3164, !3165, !3166, !3167, !3168, !3169, !3170, !3171, !3172, !3173, !3174, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3188, !3189, !3190, !3191, !3192, !3193, !3194, !3195, !3196, !3197, !3198, !3199, !3200, !3201, !3202, !3203, !3204, !3205, !3206, !3207, !3208, !3209, !3210, !3211, !3212, !3213, !3214, !3215, !3216, !3217, !3218, !3219, !3220, !3221, !3222, !3223, !3224, !3225, !3226, !3227, !3228, !3229, !3230, !3231, !3232, !3233, !3234}
!3103 = !DIEnumerator(name: "TI_ERROR_MARK", value: 0, isUnsigned: true)
!3104 = !DIEnumerator(name: "TI_INTQI_TYPE", value: 1, isUnsigned: true)
!3105 = !DIEnumerator(name: "TI_INTHI_TYPE", value: 2, isUnsigned: true)
!3106 = !DIEnumerator(name: "TI_INTSI_TYPE", value: 3, isUnsigned: true)
!3107 = !DIEnumerator(name: "TI_INTDI_TYPE", value: 4, isUnsigned: true)
!3108 = !DIEnumerator(name: "TI_INTTI_TYPE", value: 5, isUnsigned: true)
!3109 = !DIEnumerator(name: "TI_UINTQI_TYPE", value: 6, isUnsigned: true)
!3110 = !DIEnumerator(name: "TI_UINTHI_TYPE", value: 7, isUnsigned: true)
!3111 = !DIEnumerator(name: "TI_UINTSI_TYPE", value: 8, isUnsigned: true)
!3112 = !DIEnumerator(name: "TI_UINTDI_TYPE", value: 9, isUnsigned: true)
!3113 = !DIEnumerator(name: "TI_UINTTI_TYPE", value: 10, isUnsigned: true)
!3114 = !DIEnumerator(name: "TI_UINT32_TYPE", value: 11, isUnsigned: true)
!3115 = !DIEnumerator(name: "TI_UINT64_TYPE", value: 12, isUnsigned: true)
!3116 = !DIEnumerator(name: "TI_INTEGER_ZERO", value: 13, isUnsigned: true)
!3117 = !DIEnumerator(name: "TI_INTEGER_ONE", value: 14, isUnsigned: true)
!3118 = !DIEnumerator(name: "TI_INTEGER_MINUS_ONE", value: 15, isUnsigned: true)
!3119 = !DIEnumerator(name: "TI_NULL_POINTER", value: 16, isUnsigned: true)
!3120 = !DIEnumerator(name: "TI_SIZE_ZERO", value: 17, isUnsigned: true)
!3121 = !DIEnumerator(name: "TI_SIZE_ONE", value: 18, isUnsigned: true)
!3122 = !DIEnumerator(name: "TI_BITSIZE_ZERO", value: 19, isUnsigned: true)
!3123 = !DIEnumerator(name: "TI_BITSIZE_ONE", value: 20, isUnsigned: true)
!3124 = !DIEnumerator(name: "TI_BITSIZE_UNIT", value: 21, isUnsigned: true)
!3125 = !DIEnumerator(name: "TI_PUBLIC", value: 22, isUnsigned: true)
!3126 = !DIEnumerator(name: "TI_PROTECTED", value: 23, isUnsigned: true)
!3127 = !DIEnumerator(name: "TI_PRIVATE", value: 24, isUnsigned: true)
!3128 = !DIEnumerator(name: "TI_BOOLEAN_FALSE", value: 25, isUnsigned: true)
!3129 = !DIEnumerator(name: "TI_BOOLEAN_TRUE", value: 26, isUnsigned: true)
!3130 = !DIEnumerator(name: "TI_COMPLEX_INTEGER_TYPE", value: 27, isUnsigned: true)
!3131 = !DIEnumerator(name: "TI_COMPLEX_FLOAT_TYPE", value: 28, isUnsigned: true)
!3132 = !DIEnumerator(name: "TI_COMPLEX_DOUBLE_TYPE", value: 29, isUnsigned: true)
!3133 = !DIEnumerator(name: "TI_COMPLEX_LONG_DOUBLE_TYPE", value: 30, isUnsigned: true)
!3134 = !DIEnumerator(name: "TI_FLOAT_TYPE", value: 31, isUnsigned: true)
!3135 = !DIEnumerator(name: "TI_DOUBLE_TYPE", value: 32, isUnsigned: true)
!3136 = !DIEnumerator(name: "TI_LONG_DOUBLE_TYPE", value: 33, isUnsigned: true)
!3137 = !DIEnumerator(name: "TI_FLOAT_PTR_TYPE", value: 34, isUnsigned: true)
!3138 = !DIEnumerator(name: "TI_DOUBLE_PTR_TYPE", value: 35, isUnsigned: true)
!3139 = !DIEnumerator(name: "TI_LONG_DOUBLE_PTR_TYPE", value: 36, isUnsigned: true)
!3140 = !DIEnumerator(name: "TI_INTEGER_PTR_TYPE", value: 37, isUnsigned: true)
!3141 = !DIEnumerator(name: "TI_VOID_TYPE", value: 38, isUnsigned: true)
!3142 = !DIEnumerator(name: "TI_PTR_TYPE", value: 39, isUnsigned: true)
!3143 = !DIEnumerator(name: "TI_CONST_PTR_TYPE", value: 40, isUnsigned: true)
!3144 = !DIEnumerator(name: "TI_SIZE_TYPE", value: 41, isUnsigned: true)
!3145 = !DIEnumerator(name: "TI_PID_TYPE", value: 42, isUnsigned: true)
!3146 = !DIEnumerator(name: "TI_PTRDIFF_TYPE", value: 43, isUnsigned: true)
!3147 = !DIEnumerator(name: "TI_VA_LIST_TYPE", value: 44, isUnsigned: true)
!3148 = !DIEnumerator(name: "TI_VA_LIST_GPR_COUNTER_FIELD", value: 45, isUnsigned: true)
!3149 = !DIEnumerator(name: "TI_VA_LIST_FPR_COUNTER_FIELD", value: 46, isUnsigned: true)
!3150 = !DIEnumerator(name: "TI_BOOLEAN_TYPE", value: 47, isUnsigned: true)
!3151 = !DIEnumerator(name: "TI_FILEPTR_TYPE", value: 48, isUnsigned: true)
!3152 = !DIEnumerator(name: "TI_DFLOAT32_TYPE", value: 49, isUnsigned: true)
!3153 = !DIEnumerator(name: "TI_DFLOAT64_TYPE", value: 50, isUnsigned: true)
!3154 = !DIEnumerator(name: "TI_DFLOAT128_TYPE", value: 51, isUnsigned: true)
!3155 = !DIEnumerator(name: "TI_DFLOAT32_PTR_TYPE", value: 52, isUnsigned: true)
!3156 = !DIEnumerator(name: "TI_DFLOAT64_PTR_TYPE", value: 53, isUnsigned: true)
!3157 = !DIEnumerator(name: "TI_DFLOAT128_PTR_TYPE", value: 54, isUnsigned: true)
!3158 = !DIEnumerator(name: "TI_VOID_LIST_NODE", value: 55, isUnsigned: true)
!3159 = !DIEnumerator(name: "TI_MAIN_IDENTIFIER", value: 56, isUnsigned: true)
!3160 = !DIEnumerator(name: "TI_SAT_SFRACT_TYPE", value: 57, isUnsigned: true)
!3161 = !DIEnumerator(name: "TI_SAT_FRACT_TYPE", value: 58, isUnsigned: true)
!3162 = !DIEnumerator(name: "TI_SAT_LFRACT_TYPE", value: 59, isUnsigned: true)
!3163 = !DIEnumerator(name: "TI_SAT_LLFRACT_TYPE", value: 60, isUnsigned: true)
!3164 = !DIEnumerator(name: "TI_SAT_USFRACT_TYPE", value: 61, isUnsigned: true)
!3165 = !DIEnumerator(name: "TI_SAT_UFRACT_TYPE", value: 62, isUnsigned: true)
!3166 = !DIEnumerator(name: "TI_SAT_ULFRACT_TYPE", value: 63, isUnsigned: true)
!3167 = !DIEnumerator(name: "TI_SAT_ULLFRACT_TYPE", value: 64, isUnsigned: true)
!3168 = !DIEnumerator(name: "TI_SFRACT_TYPE", value: 65, isUnsigned: true)
!3169 = !DIEnumerator(name: "TI_FRACT_TYPE", value: 66, isUnsigned: true)
!3170 = !DIEnumerator(name: "TI_LFRACT_TYPE", value: 67, isUnsigned: true)
!3171 = !DIEnumerator(name: "TI_LLFRACT_TYPE", value: 68, isUnsigned: true)
!3172 = !DIEnumerator(name: "TI_USFRACT_TYPE", value: 69, isUnsigned: true)
!3173 = !DIEnumerator(name: "TI_UFRACT_TYPE", value: 70, isUnsigned: true)
!3174 = !DIEnumerator(name: "TI_ULFRACT_TYPE", value: 71, isUnsigned: true)
!3175 = !DIEnumerator(name: "TI_ULLFRACT_TYPE", value: 72, isUnsigned: true)
!3176 = !DIEnumerator(name: "TI_SAT_SACCUM_TYPE", value: 73, isUnsigned: true)
!3177 = !DIEnumerator(name: "TI_SAT_ACCUM_TYPE", value: 74, isUnsigned: true)
!3178 = !DIEnumerator(name: "TI_SAT_LACCUM_TYPE", value: 75, isUnsigned: true)
!3179 = !DIEnumerator(name: "TI_SAT_LLACCUM_TYPE", value: 76, isUnsigned: true)
!3180 = !DIEnumerator(name: "TI_SAT_USACCUM_TYPE", value: 77, isUnsigned: true)
!3181 = !DIEnumerator(name: "TI_SAT_UACCUM_TYPE", value: 78, isUnsigned: true)
!3182 = !DIEnumerator(name: "TI_SAT_ULACCUM_TYPE", value: 79, isUnsigned: true)
!3183 = !DIEnumerator(name: "TI_SAT_ULLACCUM_TYPE", value: 80, isUnsigned: true)
!3184 = !DIEnumerator(name: "TI_SACCUM_TYPE", value: 81, isUnsigned: true)
!3185 = !DIEnumerator(name: "TI_ACCUM_TYPE", value: 82, isUnsigned: true)
!3186 = !DIEnumerator(name: "TI_LACCUM_TYPE", value: 83, isUnsigned: true)
!3187 = !DIEnumerator(name: "TI_LLACCUM_TYPE", value: 84, isUnsigned: true)
!3188 = !DIEnumerator(name: "TI_USACCUM_TYPE", value: 85, isUnsigned: true)
!3189 = !DIEnumerator(name: "TI_UACCUM_TYPE", value: 86, isUnsigned: true)
!3190 = !DIEnumerator(name: "TI_ULACCUM_TYPE", value: 87, isUnsigned: true)
!3191 = !DIEnumerator(name: "TI_ULLACCUM_TYPE", value: 88, isUnsigned: true)
!3192 = !DIEnumerator(name: "TI_QQ_TYPE", value: 89, isUnsigned: true)
!3193 = !DIEnumerator(name: "TI_HQ_TYPE", value: 90, isUnsigned: true)
!3194 = !DIEnumerator(name: "TI_SQ_TYPE", value: 91, isUnsigned: true)
!3195 = !DIEnumerator(name: "TI_DQ_TYPE", value: 92, isUnsigned: true)
!3196 = !DIEnumerator(name: "TI_TQ_TYPE", value: 93, isUnsigned: true)
!3197 = !DIEnumerator(name: "TI_UQQ_TYPE", value: 94, isUnsigned: true)
!3198 = !DIEnumerator(name: "TI_UHQ_TYPE", value: 95, isUnsigned: true)
!3199 = !DIEnumerator(name: "TI_USQ_TYPE", value: 96, isUnsigned: true)
!3200 = !DIEnumerator(name: "TI_UDQ_TYPE", value: 97, isUnsigned: true)
!3201 = !DIEnumerator(name: "TI_UTQ_TYPE", value: 98, isUnsigned: true)
!3202 = !DIEnumerator(name: "TI_SAT_QQ_TYPE", value: 99, isUnsigned: true)
!3203 = !DIEnumerator(name: "TI_SAT_HQ_TYPE", value: 100, isUnsigned: true)
!3204 = !DIEnumerator(name: "TI_SAT_SQ_TYPE", value: 101, isUnsigned: true)
!3205 = !DIEnumerator(name: "TI_SAT_DQ_TYPE", value: 102, isUnsigned: true)
!3206 = !DIEnumerator(name: "TI_SAT_TQ_TYPE", value: 103, isUnsigned: true)
!3207 = !DIEnumerator(name: "TI_SAT_UQQ_TYPE", value: 104, isUnsigned: true)
!3208 = !DIEnumerator(name: "TI_SAT_UHQ_TYPE", value: 105, isUnsigned: true)
!3209 = !DIEnumerator(name: "TI_SAT_USQ_TYPE", value: 106, isUnsigned: true)
!3210 = !DIEnumerator(name: "TI_SAT_UDQ_TYPE", value: 107, isUnsigned: true)
!3211 = !DIEnumerator(name: "TI_SAT_UTQ_TYPE", value: 108, isUnsigned: true)
!3212 = !DIEnumerator(name: "TI_HA_TYPE", value: 109, isUnsigned: true)
!3213 = !DIEnumerator(name: "TI_SA_TYPE", value: 110, isUnsigned: true)
!3214 = !DIEnumerator(name: "TI_DA_TYPE", value: 111, isUnsigned: true)
!3215 = !DIEnumerator(name: "TI_TA_TYPE", value: 112, isUnsigned: true)
!3216 = !DIEnumerator(name: "TI_UHA_TYPE", value: 113, isUnsigned: true)
!3217 = !DIEnumerator(name: "TI_USA_TYPE", value: 114, isUnsigned: true)
!3218 = !DIEnumerator(name: "TI_UDA_TYPE", value: 115, isUnsigned: true)
!3219 = !DIEnumerator(name: "TI_UTA_TYPE", value: 116, isUnsigned: true)
!3220 = !DIEnumerator(name: "TI_SAT_HA_TYPE", value: 117, isUnsigned: true)
!3221 = !DIEnumerator(name: "TI_SAT_SA_TYPE", value: 118, isUnsigned: true)
!3222 = !DIEnumerator(name: "TI_SAT_DA_TYPE", value: 119, isUnsigned: true)
!3223 = !DIEnumerator(name: "TI_SAT_TA_TYPE", value: 120, isUnsigned: true)
!3224 = !DIEnumerator(name: "TI_SAT_UHA_TYPE", value: 121, isUnsigned: true)
!3225 = !DIEnumerator(name: "TI_SAT_USA_TYPE", value: 122, isUnsigned: true)
!3226 = !DIEnumerator(name: "TI_SAT_UDA_TYPE", value: 123, isUnsigned: true)
!3227 = !DIEnumerator(name: "TI_SAT_UTA_TYPE", value: 124, isUnsigned: true)
!3228 = !DIEnumerator(name: "TI_OPTIMIZATION_DEFAULT", value: 125, isUnsigned: true)
!3229 = !DIEnumerator(name: "TI_OPTIMIZATION_CURRENT", value: 126, isUnsigned: true)
!3230 = !DIEnumerator(name: "TI_TARGET_OPTION_DEFAULT", value: 127, isUnsigned: true)
!3231 = !DIEnumerator(name: "TI_TARGET_OPTION_CURRENT", value: 128, isUnsigned: true)
!3232 = !DIEnumerator(name: "TI_CURRENT_TARGET_PRAGMA", value: 129, isUnsigned: true)
!3233 = !DIEnumerator(name: "TI_CURRENT_OPTIMIZE_PRAGMA", value: 130, isUnsigned: true)
!3234 = !DIEnumerator(name: "TI_MAX", value: 131, isUnsigned: true)
!3235 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !10, line: 836, baseType: !13, size: 32, elements: !3236)
!3236 = !{!3237, !3238, !3239, !3240, !3241, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265, !3266, !3267, !3268}
!3237 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!3238 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!3239 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!3240 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!3241 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!3242 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!3243 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!3244 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!3245 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!3246 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!3247 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!3248 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!3249 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!3250 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!3251 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!3252 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!3253 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!3254 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!3255 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!3256 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!3257 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!3258 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!3259 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!3260 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!3261 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!3262 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!3263 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!3264 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!3265 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!3266 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!3267 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!3268 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!3269 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "block_op_methods", file: !2139, line: 412, baseType: !13, size: 32, elements: !3270)
!3270 = !{!3271, !3272, !3273, !3274}
!3271 = !DIEnumerator(name: "BLOCK_OP_NORMAL", value: 0, isUnsigned: true)
!3272 = !DIEnumerator(name: "BLOCK_OP_NO_LIBCALL", value: 1, isUnsigned: true)
!3273 = !DIEnumerator(name: "BLOCK_OP_CALL_PARM", value: 2, isUnsigned: true)
!3274 = !DIEnumerator(name: "BLOCK_OP_TAILCALL", value: 3, isUnsigned: true)
!3275 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_note", file: !10, line: 956, baseType: !13, size: 32, elements: !3276)
!3276 = !{!3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286, !3287, !3288, !3289, !3290}
!3277 = !DIEnumerator(name: "NOTE_INSN_DELETED", value: 0, isUnsigned: true)
!3278 = !DIEnumerator(name: "NOTE_INSN_DELETED_LABEL", value: 1, isUnsigned: true)
!3279 = !DIEnumerator(name: "NOTE_INSN_BLOCK_BEG", value: 2, isUnsigned: true)
!3280 = !DIEnumerator(name: "NOTE_INSN_BLOCK_END", value: 3, isUnsigned: true)
!3281 = !DIEnumerator(name: "NOTE_INSN_FUNCTION_BEG", value: 4, isUnsigned: true)
!3282 = !DIEnumerator(name: "NOTE_INSN_PROLOGUE_END", value: 5, isUnsigned: true)
!3283 = !DIEnumerator(name: "NOTE_INSN_EPILOGUE_BEG", value: 6, isUnsigned: true)
!3284 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_BEG", value: 7, isUnsigned: true)
!3285 = !DIEnumerator(name: "NOTE_INSN_EH_REGION_END", value: 8, isUnsigned: true)
!3286 = !DIEnumerator(name: "NOTE_INSN_VAR_LOCATION", value: 9, isUnsigned: true)
!3287 = !DIEnumerator(name: "NOTE_INSN_BASIC_BLOCK", value: 10, isUnsigned: true)
!3288 = !DIEnumerator(name: "NOTE_INSN_SWITCH_TEXT_SECTIONS", value: 11, isUnsigned: true)
!3289 = !DIEnumerator(name: "NOTE_INSN_CFA_RESTORE_STATE", value: 12, isUnsigned: true)
!3290 = !DIEnumerator(name: "NOTE_INSN_MAX", value: 13, isUnsigned: true)
!3291 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "libcall_type", file: !10, line: 2360, baseType: !13, size: 32, elements: !3292)
!3292 = !{!3293, !3294, !3295, !3296, !3297, !3298}
!3293 = !DIEnumerator(name: "LCT_NORMAL", value: 0, isUnsigned: true)
!3294 = !DIEnumerator(name: "LCT_CONST", value: 1, isUnsigned: true)
!3295 = !DIEnumerator(name: "LCT_PURE", value: 2, isUnsigned: true)
!3296 = !DIEnumerator(name: "LCT_NORETURN", value: 3, isUnsigned: true)
!3297 = !DIEnumerator(name: "LCT_THROW", value: 4, isUnsigned: true)
!3298 = !DIEnumerator(name: "LCT_RETURNS_TWICE", value: 5, isUnsigned: true)
!3299 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !725, line: 51, baseType: !13, size: 32, elements: !3300)
!3300 = !{!3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3313, !3314, !3315, !3316, !3317, !3318, !3319, !3320, !3321, !3322, !3323, !3324, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333, !3334, !3335, !3336}
!3301 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!3302 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!3303 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!3304 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!3305 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!3306 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!3307 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!3308 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!3309 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!3310 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!3311 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!3312 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!3313 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!3314 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!3315 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!3316 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!3317 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!3318 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!3319 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!3320 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!3321 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!3322 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!3323 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!3324 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!3325 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!3326 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!3327 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!3328 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!3329 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!3330 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!3331 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!3332 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!3333 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!3334 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!3335 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!3336 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!3337 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !725, line: 727, baseType: !13, size: 32, elements: !3338)
!3338 = !{!3339, !3340, !3341, !3342, !3343, !3344, !3345, !3346, !3347, !3348, !3349, !3350, !3351, !3352, !3353, !3354, !3355, !3356, !3357, !3358, !3359, !3360, !3361, !3362}
!3339 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!3340 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!3341 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!3342 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!3343 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!3344 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!3345 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!3346 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!3347 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!3348 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!3349 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!3350 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!3351 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!3352 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!3353 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!3354 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!3355 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!3356 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!3357 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!3358 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!3359 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!3360 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!3361 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!3362 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!3363 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "integer_type_kind", file: !261, line: 3745, baseType: !13, size: 32, elements: !3364)
!3364 = !{!3365, !3366, !3367, !3368, !3369, !3370, !3371, !3372, !3373, !3374, !3375, !3376}
!3365 = !DIEnumerator(name: "itk_char", value: 0, isUnsigned: true)
!3366 = !DIEnumerator(name: "itk_signed_char", value: 1, isUnsigned: true)
!3367 = !DIEnumerator(name: "itk_unsigned_char", value: 2, isUnsigned: true)
!3368 = !DIEnumerator(name: "itk_short", value: 3, isUnsigned: true)
!3369 = !DIEnumerator(name: "itk_unsigned_short", value: 4, isUnsigned: true)
!3370 = !DIEnumerator(name: "itk_int", value: 5, isUnsigned: true)
!3371 = !DIEnumerator(name: "itk_unsigned_int", value: 6, isUnsigned: true)
!3372 = !DIEnumerator(name: "itk_long", value: 7, isUnsigned: true)
!3373 = !DIEnumerator(name: "itk_unsigned_long", value: 8, isUnsigned: true)
!3374 = !DIEnumerator(name: "itk_long_long", value: 9, isUnsigned: true)
!3375 = !DIEnumerator(name: "itk_unsigned_long_long", value: 10, isUnsigned: true)
!3376 = !DIEnumerator(name: "itk_none", value: 11, isUnsigned: true)
!3377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "stack_check_type", file: !3378, line: 310, baseType: !13, size: 32, elements: !3379)
!3378 = !DIFile(filename: "./flags.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3379 = !{!3380, !3381, !3382, !3383}
!3380 = !DIEnumerator(name: "NO_STACK_CHECK", value: 0, isUnsigned: true)
!3381 = !DIEnumerator(name: "GENERIC_STACK_CHECK", value: 1, isUnsigned: true)
!3382 = !DIEnumerator(name: "STATIC_BUILTIN_STACK_CHECK", value: 2, isUnsigned: true)
!3383 = !DIEnumerator(name: "FULL_BUILTIN_STACK_CHECK", value: 3, isUnsigned: true)
!3384 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !3385, line: 36, baseType: !13, size: 32, elements: !3386)
!3385 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3386 = !{!3387, !3388, !3389, !3390, !3391, !3392, !3393, !3394, !3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404, !3405}
!3387 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!3388 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!3389 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!3390 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!3391 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!3392 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!3393 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!3394 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!3395 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!3396 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!3397 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!3398 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!3399 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!3400 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!3401 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!3402 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!3403 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!3404 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!3405 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!3406 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !10, line: 60, baseType: !13, size: 32, elements: !3407)
!3407 = !{!3408, !3409, !3410, !3411, !3412, !3413, !3414, !3415, !3416, !3417, !3418, !3419, !3420}
!3408 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!3409 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!3410 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!3411 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!3412 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!3413 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!3414 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!3415 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!3416 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!3417 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!3418 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!3419 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!3420 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!3421 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_class", file: !1274, line: 1188, baseType: !13, size: 32, elements: !3422)
!3422 = !{!3423, !3424, !3425, !3426, !3427, !3428, !3429, !3430, !3431, !3432, !3433, !3434, !3435, !3436, !3437, !3438, !3439, !3440, !3441, !3442, !3443, !3444, !3445, !3446, !3447, !3448, !3449, !3450}
!3423 = !DIEnumerator(name: "NO_REGS", value: 0, isUnsigned: true)
!3424 = !DIEnumerator(name: "AREG", value: 1, isUnsigned: true)
!3425 = !DIEnumerator(name: "DREG", value: 2, isUnsigned: true)
!3426 = !DIEnumerator(name: "CREG", value: 3, isUnsigned: true)
!3427 = !DIEnumerator(name: "BREG", value: 4, isUnsigned: true)
!3428 = !DIEnumerator(name: "SIREG", value: 5, isUnsigned: true)
!3429 = !DIEnumerator(name: "DIREG", value: 6, isUnsigned: true)
!3430 = !DIEnumerator(name: "AD_REGS", value: 7, isUnsigned: true)
!3431 = !DIEnumerator(name: "CLOBBERED_REGS", value: 8, isUnsigned: true)
!3432 = !DIEnumerator(name: "Q_REGS", value: 9, isUnsigned: true)
!3433 = !DIEnumerator(name: "NON_Q_REGS", value: 10, isUnsigned: true)
!3434 = !DIEnumerator(name: "INDEX_REGS", value: 11, isUnsigned: true)
!3435 = !DIEnumerator(name: "LEGACY_REGS", value: 12, isUnsigned: true)
!3436 = !DIEnumerator(name: "GENERAL_REGS", value: 13, isUnsigned: true)
!3437 = !DIEnumerator(name: "FP_TOP_REG", value: 14, isUnsigned: true)
!3438 = !DIEnumerator(name: "FP_SECOND_REG", value: 15, isUnsigned: true)
!3439 = !DIEnumerator(name: "FLOAT_REGS", value: 16, isUnsigned: true)
!3440 = !DIEnumerator(name: "SSE_FIRST_REG", value: 17, isUnsigned: true)
!3441 = !DIEnumerator(name: "SSE_REGS", value: 18, isUnsigned: true)
!3442 = !DIEnumerator(name: "MMX_REGS", value: 19, isUnsigned: true)
!3443 = !DIEnumerator(name: "FP_TOP_SSE_REGS", value: 20, isUnsigned: true)
!3444 = !DIEnumerator(name: "FP_SECOND_SSE_REGS", value: 21, isUnsigned: true)
!3445 = !DIEnumerator(name: "FLOAT_SSE_REGS", value: 22, isUnsigned: true)
!3446 = !DIEnumerator(name: "FLOAT_INT_REGS", value: 23, isUnsigned: true)
!3447 = !DIEnumerator(name: "INT_SSE_REGS", value: 24, isUnsigned: true)
!3448 = !DIEnumerator(name: "FLOAT_INT_SSE_REGS", value: 25, isUnsigned: true)
!3449 = !DIEnumerator(name: "ALL_REGS", value: 26, isUnsigned: true)
!3450 = !DIEnumerator(name: "LIM_REG_CLASSES", value: 27, isUnsigned: true)
!3451 = !{!1820, !883, !32, !3452, !50, !6, !258, !248, !3453, !382, !233, !35, !734, !3485, !768, !3384, !13, !210, !3487}
!3452 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3453 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3454, size: 64)
!3454 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "arg_data", file: !3, line: 53, size: 1472, elements: !3455)
!3455 = !{!3456, !3457, !3458, !3459, !3460, !3461, !3462, !3463, !3464, !3465, !3466, !3479, !3480, !3481, !3482, !3484}
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "tree_value", scope: !3454, file: !3, line: 56, baseType: !258, size: 64)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3454, file: !3, line: 58, baseType: !50, size: 32, offset: 64)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3454, file: !3, line: 60, baseType: !6, size: 64, offset: 128)
!3459 = !DIDerivedType(tag: DW_TAG_member, name: "initial_value", scope: !3454, file: !3, line: 62, baseType: !6, size: 64, offset: 192)
!3460 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3454, file: !3, line: 66, baseType: !6, size: 64, offset: 256)
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "tail_call_reg", scope: !3454, file: !3, line: 70, baseType: !6, size: 64, offset: 320)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "parallel_value", scope: !3454, file: !3, line: 73, baseType: !6, size: 64, offset: 384)
!3463 = !DIDerivedType(tag: DW_TAG_member, name: "unsignedp", scope: !3454, file: !3, line: 76, baseType: !32, size: 32, offset: 448)
!3464 = !DIDerivedType(tag: DW_TAG_member, name: "partial", scope: !3454, file: !3, line: 79, baseType: !32, size: 32, offset: 480)
!3465 = !DIDerivedType(tag: DW_TAG_member, name: "pass_on_stack", scope: !3454, file: !3, line: 84, baseType: !32, size: 32, offset: 512)
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "locate", scope: !3454, file: !3, line: 86, baseType: !3467, size: 576, offset: 576)
!3467 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "locate_and_pad_arg_data", file: !2139, line: 110, size: 576, elements: !3468)
!3468 = !{!3469, !3474, !3475, !3476, !3477, !3478}
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3467, file: !2139, line: 115, baseType: !3470, size: 128)
!3470 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "args_size", file: !2139, line: 102, size: 128, elements: !3471)
!3471 = !{!3472, !3473}
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "constant", scope: !3470, file: !2139, line: 104, baseType: !227, size: 64)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3470, file: !2139, line: 105, baseType: !258, size: 64, offset: 64)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3467, file: !2139, line: 117, baseType: !3470, size: 128, offset: 128)
!3475 = !DIDerivedType(tag: DW_TAG_member, name: "slot_offset", scope: !3467, file: !2139, line: 120, baseType: !3470, size: 128, offset: 256)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_pad", scope: !3467, file: !2139, line: 123, baseType: !3470, size: 128, offset: 384)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "where_pad", scope: !3467, file: !2139, line: 125, baseType: !2146, size: 32, offset: 512)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "boundary", scope: !3467, file: !2139, line: 127, baseType: !13, size: 32, offset: 544)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "stack", scope: !3454, file: !3, line: 89, baseType: !6, size: 64, offset: 1152)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "stack_slot", scope: !3454, file: !3, line: 93, baseType: !6, size: 64, offset: 1216)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "save_area", scope: !3454, file: !3, line: 95, baseType: !6, size: 64, offset: 1280)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "aligned_regs", scope: !3454, file: !3, line: 100, baseType: !3483, size: 64, offset: 1344)
!3483 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6, size: 64)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "n_aligned_regs", scope: !3454, file: !3, line: 101, baseType: !32, size: 32, offset: 1408)
!3485 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3486, size: 64)
!3486 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !735)
!3487 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3488, size: 64)
!3488 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "arg", scope: !3489, file: !3, line: 3280, size: 896, elements: !3500)
!3489 = distinct !DISubprogram(name: "emit_library_call_value_1", scope: !3, file: !3, line: 3262, type: !3490, scopeLine: 3265, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3490 = !DISubroutineType(types: !3491)
!3491 = !{!6, !32, !6, !6, !3291, !50, !32, !3492}
!3492 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3493, size: 64)
!3493 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "__va_list_tag", file: !3, line: 3943, size: 192, elements: !3494)
!3494 = !{!3495, !3496, !3497, !3498}
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "gp_offset", scope: !3493, file: !3, line: 3943, baseType: !13, size: 32)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "fp_offset", scope: !3493, file: !3, line: 3943, baseType: !13, size: 32, offset: 32)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "overflow_arg_area", scope: !3493, file: !3, line: 3943, baseType: !248, size: 64, offset: 64)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "reg_save_area", scope: !3493, file: !3, line: 3943, baseType: !248, size: 64, offset: 128)
!3499 = !{}
!3500 = !{!3501, !3502, !3503, !3504, !3505, !3506}
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3488, file: !3, line: 3282, baseType: !6, size: 64)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3488, file: !3, line: 3283, baseType: !50, size: 32, offset: 64)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3488, file: !3, line: 3284, baseType: !6, size: 64, offset: 128)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "partial", scope: !3488, file: !3, line: 3285, baseType: !32, size: 32, offset: 192)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "locate", scope: !3488, file: !3, line: 3286, baseType: !3467, size: 576, offset: 256)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "save_area", scope: !3488, file: !3, line: 3287, baseType: !6, size: 64, offset: 832)
!3507 = !{!0, !3508, !3510, !3512, !3525}
!3508 = !DIGlobalVariableExpression(var: !3509, expr: !DIExpression())
!3509 = distinct !DIGlobalVariable(name: "stack_usage_map", scope: !1818, file: !3, line: 108, type: !233, isLocal: true, isDefinition: true)
!3510 = !DIGlobalVariableExpression(var: !3511, expr: !DIExpression())
!3511 = distinct !DIGlobalVariable(name: "highest_outgoing_arg_in_use", scope: !1818, file: !3, line: 111, type: !32, isLocal: true, isDefinition: true)
!3512 = !DIGlobalVariableExpression(var: !3513, expr: !DIExpression())
!3513 = distinct !DIGlobalVariable(name: "stored_args_map", scope: !1818, file: !3, line: 118, type: !3514, isLocal: true, isDefinition: true)
!3514 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !3515, line: 45, baseType: !3516)
!3515 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3517, size: 64)
!3517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !3515, line: 39, size: 192, elements: !3518)
!3518 = !{!3519, !3521, !3522, !3523}
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !3517, file: !3515, line: 41, baseType: !3520, size: 64)
!3520 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !372, size: 64)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !3517, file: !3515, line: 42, baseType: !13, size: 32, offset: 64)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3517, file: !3515, line: 43, baseType: !13, size: 32, offset: 96)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !3517, file: !3515, line: 44, baseType: !3524, size: 64, offset: 128)
!3524 = !DICompositeType(tag: DW_TAG_array_type, baseType: !210, size: 64, elements: !47)
!3525 = !DIGlobalVariableExpression(var: !3526, expr: !DIExpression())
!3526 = distinct !DIGlobalVariable(name: "stack_arg_under_construction", scope: !1818, file: !3, line: 125, type: !32, isLocal: true, isDefinition: true)
!3527 = !{i32 7, !"Dwarf Version", i32 4}
!3528 = !{i32 2, !"Debug Info Version", i32 3}
!3529 = !{i32 1, !"wchar_size", i32 4}
!3530 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3531 = distinct !DISubprogram(name: "prepare_call_address", scope: !3, file: !3, line: 170, type: !3532, scopeLine: 172, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3532 = !DISubroutineType(types: !3533)
!3533 = !{!6, !258, !6, !6, !3483, !32, !32}
!3534 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3531, file: !3, line: 170, type: !258)
!3535 = !DILocation(line: 170, column: 28, scope: !3531)
!3536 = !DILocalVariable(name: "funexp", arg: 2, scope: !3531, file: !3, line: 170, type: !6)
!3537 = !DILocation(line: 170, column: 40, scope: !3531)
!3538 = !DILocalVariable(name: "static_chain_value", arg: 3, scope: !3531, file: !3, line: 170, type: !6)
!3539 = !DILocation(line: 170, column: 52, scope: !3531)
!3540 = !DILocalVariable(name: "call_fusage", arg: 4, scope: !3531, file: !3, line: 171, type: !3483)
!3541 = !DILocation(line: 171, column: 14, scope: !3531)
!3542 = !DILocalVariable(name: "reg_parm_seen", arg: 5, scope: !3531, file: !3, line: 171, type: !32)
!3543 = !DILocation(line: 171, column: 31, scope: !3531)
!3544 = !DILocalVariable(name: "sibcallp", arg: 6, scope: !3531, file: !3, line: 171, type: !32)
!3545 = !DILocation(line: 171, column: 50, scope: !3531)
!3546 = !DILocation(line: 175, column: 7, scope: !3547)
!3547 = distinct !DILexicalBlock(scope: !3531, file: !3, line: 175, column: 7)
!3548 = !DILocation(line: 175, column: 25, scope: !3547)
!3549 = !DILocation(line: 175, column: 7, scope: !3531)
!3550 = !DILocation(line: 178, column: 42, scope: !3547)
!3551 = !DILocation(line: 178, column: 15, scope: !3547)
!3552 = !DILocation(line: 179, column: 25, scope: !3547)
!3553 = !DILocation(line: 179, column: 10, scope: !3547)
!3554 = !DILocation(line: 180, column: 10, scope: !3547)
!3555 = !DILocation(line: 178, column: 12, scope: !3547)
!3556 = !DILocation(line: 178, column: 5, scope: !3547)
!3557 = !DILocation(line: 181, column: 14, scope: !3558)
!3558 = distinct !DILexicalBlock(scope: !3547, file: !3, line: 181, column: 12)
!3559 = !DILocation(line: 181, column: 12, scope: !3547)
!3560 = !DILocation(line: 187, column: 5, scope: !3561)
!3561 = distinct !DILexicalBlock(scope: !3558, file: !3, line: 182, column: 5)
!3562 = !DILocation(line: 189, column: 7, scope: !3563)
!3563 = distinct !DILexicalBlock(scope: !3531, file: !3, line: 189, column: 7)
!3564 = !DILocation(line: 189, column: 26, scope: !3563)
!3565 = !DILocation(line: 189, column: 7, scope: !3531)
!3566 = !DILocalVariable(name: "chain", scope: !3567, file: !3, line: 191, type: !6)
!3567 = distinct !DILexicalBlock(scope: !3563, file: !3, line: 190, column: 5)
!3568 = !DILocation(line: 191, column: 11, scope: !3567)
!3569 = !DILocation(line: 193, column: 7, scope: !3567)
!3570 = !DILocation(line: 194, column: 29, scope: !3567)
!3571 = !DILocation(line: 194, column: 43, scope: !3567)
!3572 = !DILocation(line: 194, column: 15, scope: !3567)
!3573 = !DILocation(line: 194, column: 13, scope: !3567)
!3574 = !DILocation(line: 195, column: 28, scope: !3567)
!3575 = !DILocation(line: 195, column: 26, scope: !3567)
!3576 = !DILocation(line: 197, column: 23, scope: !3567)
!3577 = !DILocation(line: 197, column: 30, scope: !3567)
!3578 = !DILocation(line: 197, column: 7, scope: !3567)
!3579 = !DILocation(line: 198, column: 11, scope: !3580)
!3580 = distinct !DILexicalBlock(scope: !3567, file: !3, line: 198, column: 11)
!3581 = !DILocation(line: 198, column: 11, scope: !3567)
!3582 = !DILocation(line: 199, column: 11, scope: !3580)
!3583 = !DILocation(line: 199, column: 24, scope: !3580)
!3584 = !DILocation(line: 199, column: 2, scope: !3580)
!3585 = !DILocation(line: 200, column: 5, scope: !3567)
!3586 = !DILocation(line: 202, column: 10, scope: !3531)
!3587 = !DILocation(line: 202, column: 3, scope: !3531)
!3588 = distinct !DISubprogram(name: "setjmp_call_p", scope: !3, file: !3, line: 545, type: !3589, scopeLine: 546, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3589 = !DISubroutineType(types: !3590)
!3590 = !{!32, !3591}
!3591 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_tree", file: !7, line: 59, baseType: !3592)
!3592 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3593, size: 64)
!3593 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !260)
!3594 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3588, file: !3, line: 545, type: !3591)
!3595 = !DILocation(line: 545, column: 27, scope: !3588)
!3596 = !DILocation(line: 547, column: 30, scope: !3588)
!3597 = !DILocation(line: 547, column: 10, scope: !3588)
!3598 = !DILocation(line: 547, column: 41, scope: !3588)
!3599 = !DILocation(line: 547, column: 3, scope: !3588)
!3600 = distinct !DISubprogram(name: "special_function_p", scope: !3, file: !3, line: 467, type: !3601, scopeLine: 468, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3601 = !DISubroutineType(types: !3602)
!3602 = !{!32, !3591, !32}
!3603 = !DILocalVariable(name: "fndecl", arg: 1, scope: !3600, file: !3, line: 467, type: !3591)
!3604 = !DILocation(line: 467, column: 32, scope: !3600)
!3605 = !DILocalVariable(name: "flags", arg: 2, scope: !3600, file: !3, line: 467, type: !32)
!3606 = !DILocation(line: 467, column: 44, scope: !3600)
!3607 = !DILocation(line: 469, column: 7, scope: !3608)
!3608 = distinct !DILexicalBlock(scope: !3600, file: !3, line: 469, column: 7)
!3609 = !DILocation(line: 469, column: 14, scope: !3608)
!3610 = !DILocation(line: 469, column: 17, scope: !3608)
!3611 = !DILocation(line: 470, column: 7, scope: !3608)
!3612 = !DILocation(line: 470, column: 10, scope: !3608)
!3613 = !DILocation(line: 470, column: 49, scope: !3608)
!3614 = !DILocation(line: 478, column: 7, scope: !3608)
!3615 = !DILocation(line: 478, column: 11, scope: !3608)
!3616 = !DILocation(line: 478, column: 33, scope: !3608)
!3617 = !DILocation(line: 479, column: 4, scope: !3608)
!3618 = !DILocation(line: 479, column: 7, scope: !3608)
!3619 = !DILocation(line: 479, column: 41, scope: !3608)
!3620 = !DILocation(line: 480, column: 7, scope: !3608)
!3621 = !DILocation(line: 480, column: 10, scope: !3608)
!3622 = !DILocation(line: 469, column: 7, scope: !3600)
!3623 = !DILocalVariable(name: "name", scope: !3624, file: !3, line: 482, type: !35)
!3624 = distinct !DILexicalBlock(scope: !3608, file: !3, line: 481, column: 5)
!3625 = !DILocation(line: 482, column: 19, scope: !3624)
!3626 = !DILocation(line: 482, column: 26, scope: !3624)
!3627 = !DILocalVariable(name: "tname", scope: !3624, file: !3, line: 483, type: !35)
!3628 = !DILocation(line: 483, column: 19, scope: !3624)
!3629 = !DILocation(line: 483, column: 27, scope: !3624)
!3630 = !DILocation(line: 488, column: 13, scope: !3631)
!3631 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 488, column: 11)
!3632 = !DILocation(line: 488, column: 52, scope: !3631)
!3633 = !DILocation(line: 489, column: 6, scope: !3631)
!3634 = !DILocation(line: 489, column: 9, scope: !3631)
!3635 = !DILocation(line: 489, column: 17, scope: !3631)
!3636 = !DILocation(line: 490, column: 6, scope: !3631)
!3637 = !DILocation(line: 490, column: 19, scope: !3631)
!3638 = !DILocation(line: 490, column: 11, scope: !3631)
!3639 = !DILocation(line: 491, column: 5, scope: !3631)
!3640 = !DILocation(line: 491, column: 9, scope: !3631)
!3641 = !DILocation(line: 491, column: 48, scope: !3631)
!3642 = !DILocation(line: 492, column: 9, scope: !3631)
!3643 = !DILocation(line: 492, column: 12, scope: !3631)
!3644 = !DILocation(line: 492, column: 20, scope: !3631)
!3645 = !DILocation(line: 493, column: 9, scope: !3631)
!3646 = !DILocation(line: 493, column: 22, scope: !3631)
!3647 = !DILocation(line: 493, column: 14, scope: !3631)
!3648 = !DILocation(line: 488, column: 11, scope: !3624)
!3649 = !DILocation(line: 494, column: 8, scope: !3631)
!3650 = !DILocation(line: 494, column: 2, scope: !3631)
!3651 = !DILocation(line: 497, column: 11, scope: !3652)
!3652 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 497, column: 11)
!3653 = !DILocation(line: 497, column: 19, scope: !3652)
!3654 = !DILocation(line: 497, column: 11, scope: !3624)
!3655 = !DILocation(line: 499, column: 8, scope: !3656)
!3656 = distinct !DILexicalBlock(scope: !3657, file: !3, line: 499, column: 8)
!3657 = distinct !DILexicalBlock(scope: !3652, file: !3, line: 498, column: 2)
!3658 = !DILocation(line: 499, column: 16, scope: !3656)
!3659 = !DILocation(line: 500, column: 8, scope: !3656)
!3660 = !DILocation(line: 500, column: 11, scope: !3656)
!3661 = !DILocation(line: 500, column: 19, scope: !3656)
!3662 = !DILocation(line: 501, column: 8, scope: !3656)
!3663 = !DILocation(line: 501, column: 21, scope: !3656)
!3664 = !DILocation(line: 501, column: 26, scope: !3656)
!3665 = !DILocation(line: 501, column: 12, scope: !3656)
!3666 = !DILocation(line: 499, column: 8, scope: !3657)
!3667 = !DILocation(line: 502, column: 12, scope: !3656)
!3668 = !DILocation(line: 502, column: 6, scope: !3656)
!3669 = !DILocation(line: 503, column: 13, scope: !3670)
!3670 = distinct !DILexicalBlock(scope: !3656, file: !3, line: 503, column: 13)
!3671 = !DILocation(line: 503, column: 21, scope: !3670)
!3672 = !DILocation(line: 503, column: 28, scope: !3670)
!3673 = !DILocation(line: 503, column: 31, scope: !3670)
!3674 = !DILocation(line: 503, column: 39, scope: !3670)
!3675 = !DILocation(line: 503, column: 13, scope: !3656)
!3676 = !DILocation(line: 504, column: 12, scope: !3670)
!3677 = !DILocation(line: 504, column: 6, scope: !3670)
!3678 = !DILocation(line: 505, column: 13, scope: !3679)
!3679 = distinct !DILexicalBlock(scope: !3670, file: !3, line: 505, column: 13)
!3680 = !DILocation(line: 505, column: 21, scope: !3679)
!3681 = !DILocation(line: 505, column: 13, scope: !3670)
!3682 = !DILocation(line: 506, column: 12, scope: !3679)
!3683 = !DILocation(line: 506, column: 6, scope: !3679)
!3684 = !DILocation(line: 508, column: 12, scope: !3679)
!3685 = !DILocation(line: 509, column: 2, scope: !3657)
!3686 = !DILocation(line: 511, column: 11, scope: !3687)
!3687 = distinct !DILexicalBlock(scope: !3624, file: !3, line: 511, column: 11)
!3688 = !DILocation(line: 511, column: 20, scope: !3687)
!3689 = !DILocation(line: 511, column: 11, scope: !3624)
!3690 = !DILocation(line: 513, column: 9, scope: !3691)
!3691 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 513, column: 8)
!3692 = distinct !DILexicalBlock(scope: !3687, file: !3, line: 512, column: 2)
!3693 = !DILocation(line: 513, column: 18, scope: !3691)
!3694 = !DILocation(line: 514, column: 9, scope: !3691)
!3695 = !DILocation(line: 514, column: 23, scope: !3691)
!3696 = !DILocation(line: 514, column: 15, scope: !3691)
!3697 = !DILocation(line: 515, column: 6, scope: !3691)
!3698 = !DILocation(line: 515, column: 19, scope: !3691)
!3699 = !DILocation(line: 515, column: 11, scope: !3691)
!3700 = !DILocation(line: 516, column: 8, scope: !3691)
!3701 = !DILocation(line: 516, column: 12, scope: !3691)
!3702 = !DILocation(line: 516, column: 21, scope: !3691)
!3703 = !DILocation(line: 517, column: 5, scope: !3691)
!3704 = !DILocation(line: 517, column: 18, scope: !3691)
!3705 = !DILocation(line: 517, column: 10, scope: !3691)
!3706 = !DILocation(line: 518, column: 8, scope: !3691)
!3707 = !DILocation(line: 518, column: 12, scope: !3691)
!3708 = !DILocation(line: 518, column: 21, scope: !3691)
!3709 = !DILocation(line: 519, column: 5, scope: !3691)
!3710 = !DILocation(line: 519, column: 18, scope: !3691)
!3711 = !DILocation(line: 519, column: 10, scope: !3691)
!3712 = !DILocation(line: 513, column: 8, scope: !3692)
!3713 = !DILocation(line: 520, column: 12, scope: !3691)
!3714 = !DILocation(line: 520, column: 6, scope: !3691)
!3715 = !DILocation(line: 522, column: 8, scope: !3716)
!3716 = distinct !DILexicalBlock(scope: !3692, file: !3, line: 522, column: 8)
!3717 = !DILocation(line: 522, column: 17, scope: !3716)
!3718 = !DILocation(line: 523, column: 8, scope: !3716)
!3719 = !DILocation(line: 523, column: 21, scope: !3716)
!3720 = !DILocation(line: 523, column: 13, scope: !3716)
!3721 = !DILocation(line: 522, column: 8, scope: !3692)
!3722 = !DILocation(line: 524, column: 12, scope: !3716)
!3723 = !DILocation(line: 524, column: 6, scope: !3716)
!3724 = !DILocation(line: 525, column: 2, scope: !3692)
!3725 = !DILocation(line: 526, column: 17, scope: !3726)
!3726 = distinct !DILexicalBlock(scope: !3687, file: !3, line: 526, column: 16)
!3727 = !DILocation(line: 526, column: 26, scope: !3726)
!3728 = !DILocation(line: 526, column: 33, scope: !3726)
!3729 = !DILocation(line: 526, column: 36, scope: !3726)
!3730 = !DILocation(line: 526, column: 45, scope: !3726)
!3731 = !DILocation(line: 527, column: 3, scope: !3726)
!3732 = !DILocation(line: 527, column: 16, scope: !3726)
!3733 = !DILocation(line: 527, column: 8, scope: !3726)
!3734 = !DILocation(line: 528, column: 9, scope: !3726)
!3735 = !DILocation(line: 528, column: 13, scope: !3726)
!3736 = !DILocation(line: 528, column: 22, scope: !3726)
!3737 = !DILocation(line: 528, column: 29, scope: !3726)
!3738 = !DILocation(line: 528, column: 32, scope: !3726)
!3739 = !DILocation(line: 528, column: 41, scope: !3726)
!3740 = !DILocation(line: 529, column: 6, scope: !3726)
!3741 = !DILocation(line: 529, column: 19, scope: !3726)
!3742 = !DILocation(line: 529, column: 11, scope: !3726)
!3743 = !DILocation(line: 530, column: 9, scope: !3726)
!3744 = !DILocation(line: 530, column: 13, scope: !3726)
!3745 = !DILocation(line: 530, column: 22, scope: !3726)
!3746 = !DILocation(line: 530, column: 29, scope: !3726)
!3747 = !DILocation(line: 530, column: 32, scope: !3726)
!3748 = !DILocation(line: 530, column: 41, scope: !3726)
!3749 = !DILocation(line: 531, column: 6, scope: !3726)
!3750 = !DILocation(line: 531, column: 18, scope: !3726)
!3751 = !DILocation(line: 531, column: 10, scope: !3726)
!3752 = !DILocation(line: 526, column: 16, scope: !3687)
!3753 = !DILocation(line: 532, column: 8, scope: !3726)
!3754 = !DILocation(line: 532, column: 2, scope: !3726)
!3755 = !DILocation(line: 534, column: 16, scope: !3756)
!3756 = distinct !DILexicalBlock(scope: !3726, file: !3, line: 534, column: 16)
!3757 = !DILocation(line: 534, column: 25, scope: !3756)
!3758 = !DILocation(line: 534, column: 32, scope: !3756)
!3759 = !DILocation(line: 534, column: 35, scope: !3756)
!3760 = !DILocation(line: 534, column: 44, scope: !3756)
!3761 = !DILocation(line: 535, column: 9, scope: !3756)
!3762 = !DILocation(line: 535, column: 22, scope: !3756)
!3763 = !DILocation(line: 535, column: 14, scope: !3756)
!3764 = !DILocation(line: 534, column: 16, scope: !3726)
!3765 = !DILocation(line: 536, column: 8, scope: !3756)
!3766 = !DILocation(line: 536, column: 2, scope: !3756)
!3767 = !DILocation(line: 537, column: 5, scope: !3624)
!3768 = !DILocation(line: 539, column: 10, scope: !3600)
!3769 = !DILocation(line: 539, column: 3, scope: !3600)
!3770 = distinct !DISubprogram(name: "gimple_alloca_call_p", scope: !3, file: !3, line: 554, type: !3771, scopeLine: 555, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3771 = !DISubroutineType(types: !3772)
!3772 = !{!372, !3773}
!3773 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !7, line: 60, baseType: !3485)
!3774 = !DILocalVariable(name: "stmt", arg: 1, scope: !3770, file: !3, line: 554, type: !3773)
!3775 = !DILocation(line: 554, column: 36, scope: !3770)
!3776 = !DILocalVariable(name: "fndecl", scope: !3770, file: !3, line: 556, type: !258)
!3777 = !DILocation(line: 556, column: 8, scope: !3770)
!3778 = !DILocation(line: 558, column: 24, scope: !3779)
!3779 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 558, column: 7)
!3780 = !DILocation(line: 558, column: 8, scope: !3779)
!3781 = !DILocation(line: 558, column: 7, scope: !3770)
!3782 = !DILocation(line: 559, column: 5, scope: !3779)
!3783 = !DILocation(line: 561, column: 32, scope: !3770)
!3784 = !DILocation(line: 561, column: 12, scope: !3770)
!3785 = !DILocation(line: 561, column: 10, scope: !3770)
!3786 = !DILocation(line: 562, column: 7, scope: !3787)
!3787 = distinct !DILexicalBlock(scope: !3770, file: !3, line: 562, column: 7)
!3788 = !DILocation(line: 562, column: 14, scope: !3787)
!3789 = !DILocation(line: 562, column: 38, scope: !3787)
!3790 = !DILocation(line: 562, column: 18, scope: !3787)
!3791 = !DILocation(line: 562, column: 49, scope: !3787)
!3792 = !DILocation(line: 562, column: 7, scope: !3770)
!3793 = !DILocation(line: 563, column: 5, scope: !3787)
!3794 = !DILocation(line: 565, column: 3, scope: !3770)
!3795 = !DILocation(line: 566, column: 1, scope: !3770)
!3796 = distinct !DISubprogram(name: "is_gimple_call", scope: !725, file: !725, line: 1870, type: !3771, scopeLine: 1871, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3797 = !DILocalVariable(name: "gs", arg: 1, scope: !3796, file: !725, line: 1870, type: !3773)
!3798 = !DILocation(line: 1870, column: 30, scope: !3796)
!3799 = !DILocation(line: 1872, column: 23, scope: !3796)
!3800 = !DILocation(line: 1872, column: 10, scope: !3796)
!3801 = !DILocation(line: 1872, column: 27, scope: !3796)
!3802 = !DILocation(line: 1872, column: 3, scope: !3796)
!3803 = distinct !DISubprogram(name: "gimple_call_fndecl", scope: !725, file: !725, line: 1954, type: !3804, scopeLine: 1955, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3804 = !DISubroutineType(types: !3805)
!3805 = !{!258, !3773}
!3806 = !DILocalVariable(name: "gs", arg: 1, scope: !3803, file: !725, line: 1954, type: !3773)
!3807 = !DILocation(line: 1954, column: 34, scope: !3803)
!3808 = !DILocalVariable(name: "addr", scope: !3803, file: !725, line: 1956, type: !258)
!3809 = !DILocation(line: 1956, column: 8, scope: !3803)
!3810 = !DILocation(line: 1956, column: 31, scope: !3803)
!3811 = !DILocation(line: 1956, column: 15, scope: !3803)
!3812 = !DILocation(line: 1957, column: 7, scope: !3813)
!3813 = distinct !DILexicalBlock(scope: !3803, file: !725, line: 1957, column: 7)
!3814 = !DILocation(line: 1957, column: 24, scope: !3813)
!3815 = !DILocation(line: 1957, column: 7, scope: !3803)
!3816 = !DILocation(line: 1958, column: 12, scope: !3813)
!3817 = !DILocation(line: 1958, column: 5, scope: !3813)
!3818 = !DILocation(line: 1959, column: 3, scope: !3803)
!3819 = !DILocation(line: 1960, column: 1, scope: !3803)
!3820 = distinct !DISubprogram(name: "alloca_call_p", scope: !3, file: !3, line: 571, type: !3821, scopeLine: 572, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3821 = !DISubroutineType(types: !3822)
!3822 = !{!372, !3591}
!3823 = !DILocalVariable(name: "exp", arg: 1, scope: !3820, file: !3, line: 571, type: !3591)
!3824 = !DILocation(line: 571, column: 27, scope: !3820)
!3825 = !DILocation(line: 573, column: 7, scope: !3826)
!3826 = distinct !DILexicalBlock(scope: !3820, file: !3, line: 573, column: 7)
!3827 = !DILocation(line: 573, column: 23, scope: !3826)
!3828 = !DILocation(line: 574, column: 7, scope: !3826)
!3829 = !DILocation(line: 574, column: 10, scope: !3826)
!3830 = !DILocation(line: 574, column: 41, scope: !3826)
!3831 = !DILocation(line: 575, column: 7, scope: !3826)
!3832 = !DILocation(line: 575, column: 11, scope: !3826)
!3833 = !DILocation(line: 575, column: 60, scope: !3826)
!3834 = !DILocation(line: 576, column: 7, scope: !3826)
!3835 = !DILocation(line: 576, column: 31, scope: !3826)
!3836 = !DILocation(line: 576, column: 11, scope: !3826)
!3837 = !DILocation(line: 577, column: 4, scope: !3826)
!3838 = !DILocation(line: 573, column: 7, scope: !3820)
!3839 = !DILocation(line: 578, column: 5, scope: !3826)
!3840 = !DILocation(line: 579, column: 3, scope: !3820)
!3841 = !DILocation(line: 580, column: 1, scope: !3820)
!3842 = distinct !DISubprogram(name: "flags_from_decl_or_type", scope: !3, file: !3, line: 585, type: !3589, scopeLine: 586, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3843 = !DILocalVariable(name: "exp", arg: 1, scope: !3842, file: !3, line: 585, type: !3591)
!3844 = !DILocation(line: 585, column: 37, scope: !3842)
!3845 = !DILocalVariable(name: "flags", scope: !3842, file: !3, line: 587, type: !32)
!3846 = !DILocation(line: 587, column: 7, scope: !3842)
!3847 = !DILocation(line: 589, column: 7, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 589, column: 7)
!3849 = !DILocation(line: 589, column: 7, scope: !3842)
!3850 = !DILocation(line: 592, column: 11, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 592, column: 11)
!3852 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 590, column: 5)
!3853 = !DILocation(line: 592, column: 11, scope: !3852)
!3854 = !DILocation(line: 593, column: 8, scope: !3851)
!3855 = !DILocation(line: 593, column: 2, scope: !3851)
!3856 = !DILocation(line: 596, column: 11, scope: !3857)
!3857 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 596, column: 11)
!3858 = !DILocation(line: 596, column: 11, scope: !3852)
!3859 = !DILocation(line: 597, column: 8, scope: !3857)
!3860 = !DILocation(line: 597, column: 2, scope: !3857)
!3861 = !DILocation(line: 600, column: 11, scope: !3862)
!3862 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 600, column: 11)
!3863 = !DILocation(line: 600, column: 31, scope: !3862)
!3864 = !DILocation(line: 600, column: 36, scope: !3862)
!3865 = !DILocation(line: 600, column: 11, scope: !3852)
!3866 = !DILocation(line: 601, column: 8, scope: !3862)
!3867 = !DILocation(line: 601, column: 2, scope: !3862)
!3868 = !DILocation(line: 602, column: 11, scope: !3869)
!3869 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 602, column: 11)
!3870 = !DILocation(line: 602, column: 11, scope: !3852)
!3871 = !DILocation(line: 603, column: 8, scope: !3869)
!3872 = !DILocation(line: 603, column: 2, scope: !3869)
!3873 = !DILocation(line: 604, column: 11, scope: !3874)
!3874 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 604, column: 11)
!3875 = !DILocation(line: 604, column: 11, scope: !3852)
!3876 = !DILocation(line: 605, column: 8, scope: !3874)
!3877 = !DILocation(line: 605, column: 2, scope: !3874)
!3878 = !DILocation(line: 607, column: 11, scope: !3879)
!3879 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 607, column: 11)
!3880 = !DILocation(line: 607, column: 11, scope: !3852)
!3881 = !DILocation(line: 608, column: 8, scope: !3879)
!3882 = !DILocation(line: 608, column: 2, scope: !3879)
!3883 = !DILocation(line: 610, column: 11, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3852, file: !3, line: 610, column: 11)
!3885 = !DILocation(line: 610, column: 11, scope: !3852)
!3886 = !DILocation(line: 611, column: 8, scope: !3884)
!3887 = !DILocation(line: 611, column: 2, scope: !3884)
!3888 = !DILocation(line: 613, column: 35, scope: !3852)
!3889 = !DILocation(line: 613, column: 40, scope: !3852)
!3890 = !DILocation(line: 613, column: 15, scope: !3852)
!3891 = !DILocation(line: 613, column: 13, scope: !3852)
!3892 = !DILocation(line: 614, column: 5, scope: !3852)
!3893 = !DILocation(line: 615, column: 12, scope: !3894)
!3894 = distinct !DILexicalBlock(scope: !3848, file: !3, line: 615, column: 12)
!3895 = !DILocation(line: 615, column: 25, scope: !3894)
!3896 = !DILocation(line: 615, column: 28, scope: !3894)
!3897 = !DILocation(line: 615, column: 48, scope: !3894)
!3898 = !DILocation(line: 615, column: 53, scope: !3894)
!3899 = !DILocation(line: 615, column: 12, scope: !3848)
!3900 = !DILocation(line: 616, column: 11, scope: !3894)
!3901 = !DILocation(line: 616, column: 5, scope: !3894)
!3902 = !DILocation(line: 618, column: 7, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3842, file: !3, line: 618, column: 7)
!3904 = !DILocation(line: 618, column: 7, scope: !3842)
!3905 = !DILocation(line: 619, column: 11, scope: !3903)
!3906 = !DILocation(line: 619, column: 5, scope: !3903)
!3907 = !DILocation(line: 621, column: 10, scope: !3842)
!3908 = !DILocation(line: 621, column: 3, scope: !3842)
!3909 = distinct !DISubprogram(name: "call_expr_flags", scope: !3, file: !3, line: 627, type: !3589, scopeLine: 628, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3910 = !DILocalVariable(name: "t", arg: 1, scope: !3909, file: !3, line: 627, type: !3591)
!3911 = !DILocation(line: 627, column: 29, scope: !3909)
!3912 = !DILocalVariable(name: "flags", scope: !3909, file: !3, line: 629, type: !32)
!3913 = !DILocation(line: 629, column: 7, scope: !3909)
!3914 = !DILocalVariable(name: "decl", scope: !3909, file: !3, line: 630, type: !258)
!3915 = !DILocation(line: 630, column: 8, scope: !3909)
!3916 = !DILocation(line: 630, column: 34, scope: !3909)
!3917 = !DILocation(line: 630, column: 15, scope: !3909)
!3918 = !DILocation(line: 632, column: 7, scope: !3919)
!3919 = distinct !DILexicalBlock(scope: !3909, file: !3, line: 632, column: 7)
!3920 = !DILocation(line: 632, column: 7, scope: !3909)
!3921 = !DILocation(line: 633, column: 38, scope: !3919)
!3922 = !DILocation(line: 633, column: 13, scope: !3919)
!3923 = !DILocation(line: 633, column: 11, scope: !3919)
!3924 = !DILocation(line: 633, column: 5, scope: !3919)
!3925 = !DILocation(line: 636, column: 11, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3919, file: !3, line: 635, column: 5)
!3927 = !DILocation(line: 636, column: 9, scope: !3926)
!3928 = !DILocation(line: 637, column: 11, scope: !3929)
!3929 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 637, column: 11)
!3930 = !DILocation(line: 637, column: 13, scope: !3929)
!3931 = !DILocation(line: 637, column: 16, scope: !3929)
!3932 = !DILocation(line: 637, column: 30, scope: !3929)
!3933 = !DILocation(line: 637, column: 11, scope: !3926)
!3934 = !DILocation(line: 638, column: 35, scope: !3929)
!3935 = !DILocation(line: 638, column: 10, scope: !3929)
!3936 = !DILocation(line: 638, column: 8, scope: !3929)
!3937 = !DILocation(line: 638, column: 2, scope: !3929)
!3938 = !DILocation(line: 640, column: 8, scope: !3929)
!3939 = !DILocation(line: 643, column: 10, scope: !3909)
!3940 = !DILocation(line: 643, column: 3, scope: !3909)
!3941 = distinct !DISubprogram(name: "shift_return_value", scope: !3, file: !3, line: 1859, type: !3942, scopeLine: 1860, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3942 = !DISubroutineType(types: !3943)
!3943 = !{!372, !50, !372, !6}
!3944 = !DILocalVariable(name: "mode", arg: 1, scope: !3941, file: !3, line: 1859, type: !50)
!3945 = !DILocation(line: 1859, column: 39, scope: !3941)
!3946 = !DILocalVariable(name: "left_p", arg: 2, scope: !3941, file: !3, line: 1859, type: !372)
!3947 = !DILocation(line: 1859, column: 50, scope: !3941)
!3948 = !DILocalVariable(name: "value", arg: 3, scope: !3941, file: !3, line: 1859, type: !6)
!3949 = !DILocation(line: 1859, column: 62, scope: !3941)
!3950 = !DILocalVariable(name: "shift", scope: !3941, file: !3, line: 1861, type: !227)
!3951 = !DILocation(line: 1861, column: 17, scope: !3941)
!3952 = !DILocation(line: 1863, column: 3, scope: !3941)
!3953 = !DILocation(line: 1864, column: 11, scope: !3941)
!3954 = !DILocation(line: 1864, column: 49, scope: !3941)
!3955 = !DILocation(line: 1864, column: 47, scope: !3941)
!3956 = !DILocation(line: 1864, column: 9, scope: !3941)
!3957 = !DILocation(line: 1865, column: 7, scope: !3958)
!3958 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 1865, column: 7)
!3959 = !DILocation(line: 1865, column: 13, scope: !3958)
!3960 = !DILocation(line: 1865, column: 7, scope: !3941)
!3961 = !DILocation(line: 1866, column: 5, scope: !3958)
!3962 = !DILocation(line: 1871, column: 28, scope: !3963)
!3963 = distinct !DILexicalBlock(scope: !3941, file: !3, line: 1871, column: 7)
!3964 = !DILocation(line: 1871, column: 46, scope: !3963)
!3965 = !DILocation(line: 1872, column: 7, scope: !3963)
!3966 = !DILocation(line: 1872, column: 14, scope: !3963)
!3967 = !DILocation(line: 1872, column: 31, scope: !3963)
!3968 = !DILocation(line: 1871, column: 8, scope: !3963)
!3969 = !DILocation(line: 1871, column: 7, scope: !3941)
!3970 = !DILocation(line: 1873, column: 5, scope: !3963)
!3971 = !DILocation(line: 1874, column: 3, scope: !3941)
!3972 = !DILocation(line: 1875, column: 1, scope: !3941)
!3973 = distinct !DISubprogram(name: "rhs_regno", scope: !10, file: !10, line: 1051, type: !3974, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!3974 = !DISubroutineType(types: !3975)
!3975 = !{!13, !3976}
!3976 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !7, line: 51, baseType: !3977)
!3977 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3978, size: 64)
!3978 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !9)
!3979 = !DILocalVariable(name: "x", arg: 1, scope: !3973, file: !10, line: 1051, type: !3976)
!3980 = !DILocation(line: 1051, column: 22, scope: !3973)
!3981 = !DILocation(line: 1053, column: 10, scope: !3973)
!3982 = !DILocation(line: 1053, column: 3, scope: !3973)
!3983 = !DILocalVariable(name: "exp", arg: 1, scope: !2, file: !3, line: 1909, type: !258)
!3984 = !DILocation(line: 1909, column: 19, scope: !2)
!3985 = !DILocalVariable(name: "target", arg: 2, scope: !2, file: !3, line: 1909, type: !6)
!3986 = !DILocation(line: 1909, column: 28, scope: !2)
!3987 = !DILocalVariable(name: "ignore", arg: 3, scope: !2, file: !3, line: 1909, type: !32)
!3988 = !DILocation(line: 1909, column: 40, scope: !2)
!3989 = !DILocalVariable(name: "funexp", scope: !2, file: !3, line: 1915, type: !6)
!3990 = !DILocation(line: 1915, column: 7, scope: !2)
!3991 = !DILocalVariable(name: "normal_call_insns", scope: !2, file: !3, line: 1917, type: !6)
!3992 = !DILocation(line: 1917, column: 7, scope: !2)
!3993 = !DILocalVariable(name: "tail_call_insns", scope: !2, file: !3, line: 1919, type: !6)
!3994 = !DILocation(line: 1919, column: 7, scope: !2)
!3995 = !DILocalVariable(name: "funtype", scope: !2, file: !3, line: 1921, type: !258)
!3996 = !DILocation(line: 1921, column: 8, scope: !2)
!3997 = !DILocalVariable(name: "type_arg_types", scope: !2, file: !3, line: 1922, type: !258)
!3998 = !DILocation(line: 1922, column: 8, scope: !2)
!3999 = !DILocalVariable(name: "rettype", scope: !2, file: !3, line: 1923, type: !258)
!4000 = !DILocation(line: 1923, column: 8, scope: !2)
!4001 = !DILocalVariable(name: "fndecl", scope: !2, file: !3, line: 1926, type: !258)
!4002 = !DILocation(line: 1926, column: 8, scope: !2)
!4003 = !DILocalVariable(name: "fntype", scope: !2, file: !3, line: 1928, type: !258)
!4004 = !DILocation(line: 1928, column: 8, scope: !2)
!4005 = !DILocalVariable(name: "try_tail_call", scope: !2, file: !3, line: 1929, type: !372)
!4006 = !DILocation(line: 1929, column: 8, scope: !2)
!4007 = !DILocation(line: 1929, column: 24, scope: !2)
!4008 = !DILocalVariable(name: "pass", scope: !2, file: !3, line: 1930, type: !32)
!4009 = !DILocation(line: 1930, column: 7, scope: !2)
!4010 = !DILocalVariable(name: "valreg", scope: !2, file: !3, line: 1934, type: !6)
!4011 = !DILocation(line: 1934, column: 7, scope: !2)
!4012 = !DILocalVariable(name: "structure_value_addr", scope: !2, file: !3, line: 1937, type: !6)
!4013 = !DILocation(line: 1937, column: 7, scope: !2)
!4014 = !DILocalVariable(name: "structure_value_addr_parm", scope: !2, file: !3, line: 1941, type: !32)
!4015 = !DILocation(line: 1941, column: 7, scope: !2)
!4016 = !DILocalVariable(name: "structure_value_addr_value", scope: !2, file: !3, line: 1943, type: !258)
!4017 = !DILocation(line: 1943, column: 8, scope: !2)
!4018 = !DILocalVariable(name: "struct_value_size", scope: !2, file: !3, line: 1947, type: !227)
!4019 = !DILocation(line: 1947, column: 17, scope: !2)
!4020 = !DILocalVariable(name: "pcc_struct_value", scope: !2, file: !3, line: 1950, type: !32)
!4021 = !DILocation(line: 1950, column: 7, scope: !2)
!4022 = !DILocalVariable(name: "struct_value", scope: !2, file: !3, line: 1951, type: !6)
!4023 = !DILocation(line: 1951, column: 7, scope: !2)
!4024 = !DILocalVariable(name: "num_actuals", scope: !2, file: !3, line: 1954, type: !32)
!4025 = !DILocation(line: 1954, column: 7, scope: !2)
!4026 = !DILocalVariable(name: "n_named_args", scope: !2, file: !3, line: 1957, type: !32)
!4027 = !DILocation(line: 1957, column: 7, scope: !2)
!4028 = !DILocalVariable(name: "num_complex_actuals", scope: !2, file: !3, line: 1959, type: !32)
!4029 = !DILocation(line: 1959, column: 7, scope: !2)
!4030 = !DILocalVariable(name: "args", scope: !2, file: !3, line: 1964, type: !3453)
!4031 = !DILocation(line: 1964, column: 20, scope: !2)
!4032 = !DILocalVariable(name: "args_size", scope: !2, file: !3, line: 1967, type: !3470)
!4033 = !DILocation(line: 1967, column: 20, scope: !2)
!4034 = !DILocalVariable(name: "adjusted_args_size", scope: !2, file: !3, line: 1968, type: !3470)
!4035 = !DILocation(line: 1968, column: 20, scope: !2)
!4036 = !DILocalVariable(name: "unadjusted_args_size", scope: !2, file: !3, line: 1970, type: !32)
!4037 = !DILocation(line: 1970, column: 7, scope: !2)
!4038 = !DILocalVariable(name: "args_so_far", scope: !2, file: !3, line: 1972, type: !4039)
!4039 = !DIDerivedType(tag: DW_TAG_typedef, name: "CUMULATIVE_ARGS", file: !1274, line: 1598, baseType: !4040)
!4040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ix86_args", file: !1274, line: 1579, size: 512, elements: !4041)
!4041 = !{!4042, !4043, !4044, !4045, !4046, !4047, !4048, !4049, !4050, !4051, !4052, !4053, !4054, !4055, !4056, !4057}
!4042 = !DIDerivedType(tag: DW_TAG_member, name: "words", scope: !4040, file: !1274, line: 1580, baseType: !32, size: 32)
!4043 = !DIDerivedType(tag: DW_TAG_member, name: "nregs", scope: !4040, file: !1274, line: 1581, baseType: !32, size: 32, offset: 32)
!4044 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !4040, file: !1274, line: 1582, baseType: !32, size: 32, offset: 64)
!4045 = !DIDerivedType(tag: DW_TAG_member, name: "fastcall", scope: !4040, file: !1274, line: 1583, baseType: !32, size: 32, offset: 96)
!4046 = !DIDerivedType(tag: DW_TAG_member, name: "sse_words", scope: !4040, file: !1274, line: 1584, baseType: !32, size: 32, offset: 128)
!4047 = !DIDerivedType(tag: DW_TAG_member, name: "sse_nregs", scope: !4040, file: !1274, line: 1585, baseType: !32, size: 32, offset: 160)
!4048 = !DIDerivedType(tag: DW_TAG_member, name: "warn_avx", scope: !4040, file: !1274, line: 1586, baseType: !32, size: 32, offset: 192)
!4049 = !DIDerivedType(tag: DW_TAG_member, name: "warn_sse", scope: !4040, file: !1274, line: 1587, baseType: !32, size: 32, offset: 224)
!4050 = !DIDerivedType(tag: DW_TAG_member, name: "warn_mmx", scope: !4040, file: !1274, line: 1588, baseType: !32, size: 32, offset: 256)
!4051 = !DIDerivedType(tag: DW_TAG_member, name: "sse_regno", scope: !4040, file: !1274, line: 1589, baseType: !32, size: 32, offset: 288)
!4052 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_words", scope: !4040, file: !1274, line: 1590, baseType: !32, size: 32, offset: 320)
!4053 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_nregs", scope: !4040, file: !1274, line: 1591, baseType: !32, size: 32, offset: 352)
!4054 = !DIDerivedType(tag: DW_TAG_member, name: "mmx_regno", scope: !4040, file: !1274, line: 1592, baseType: !32, size: 32, offset: 384)
!4055 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_vaarg", scope: !4040, file: !1274, line: 1593, baseType: !32, size: 32, offset: 416)
!4056 = !DIDerivedType(tag: DW_TAG_member, name: "float_in_sse", scope: !4040, file: !1274, line: 1594, baseType: !32, size: 32, offset: 448)
!4057 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !4040, file: !1274, line: 1596, baseType: !1291, size: 32, offset: 480)
!4058 = !DILocation(line: 1972, column: 19, scope: !2)
!4059 = !DILocalVariable(name: "reg_parm_seen", scope: !2, file: !3, line: 1974, type: !32)
!4060 = !DILocation(line: 1974, column: 7, scope: !2)
!4061 = !DILocalVariable(name: "must_preallocate", scope: !2, file: !3, line: 1983, type: !32)
!4062 = !DILocation(line: 1983, column: 7, scope: !2)
!4063 = !DILocation(line: 1983, column: 27, scope: !2)
!4064 = !DILocation(line: 0, scope: !2)
!4065 = !DILocation(line: 1983, column: 26, scope: !2)
!4066 = !DILocalVariable(name: "reg_parm_stack_space", scope: !2, file: !3, line: 1986, type: !32)
!4067 = !DILocation(line: 1986, column: 7, scope: !2)
!4068 = !DILocalVariable(name: "argblock", scope: !2, file: !3, line: 1990, type: !6)
!4069 = !DILocation(line: 1990, column: 7, scope: !2)
!4070 = !DILocalVariable(name: "flags", scope: !2, file: !3, line: 1993, type: !32)
!4071 = !DILocation(line: 1993, column: 7, scope: !2)
!4072 = !DILocalVariable(name: "low_to_save", scope: !2, file: !3, line: 1997, type: !32)
!4073 = !DILocation(line: 1997, column: 7, scope: !2)
!4074 = !DILocalVariable(name: "high_to_save", scope: !2, file: !3, line: 1997, type: !32)
!4075 = !DILocation(line: 1997, column: 20, scope: !2)
!4076 = !DILocalVariable(name: "save_area", scope: !2, file: !3, line: 1998, type: !6)
!4077 = !DILocation(line: 1998, column: 7, scope: !2)
!4078 = !DILocalVariable(name: "initial_highest_arg_in_use", scope: !2, file: !3, line: 2001, type: !32)
!4079 = !DILocation(line: 2001, column: 7, scope: !2)
!4080 = !DILocation(line: 2001, column: 36, scope: !2)
!4081 = !DILocalVariable(name: "initial_stack_usage_map", scope: !2, file: !3, line: 2002, type: !233)
!4082 = !DILocation(line: 2002, column: 9, scope: !2)
!4083 = !DILocation(line: 2002, column: 35, scope: !2)
!4084 = !DILocalVariable(name: "stack_usage_map_buf", scope: !2, file: !3, line: 2003, type: !233)
!4085 = !DILocation(line: 2003, column: 9, scope: !2)
!4086 = !DILocalVariable(name: "old_stack_allocated", scope: !2, file: !3, line: 2005, type: !32)
!4087 = !DILocation(line: 2005, column: 7, scope: !2)
!4088 = !DILocalVariable(name: "old_stack_level", scope: !2, file: !3, line: 2008, type: !6)
!4089 = !DILocation(line: 2008, column: 7, scope: !2)
!4090 = !DILocalVariable(name: "old_stack_arg_under_construction", scope: !2, file: !3, line: 2009, type: !32)
!4091 = !DILocation(line: 2009, column: 7, scope: !2)
!4092 = !DILocalVariable(name: "old_pending_adj", scope: !2, file: !3, line: 2010, type: !32)
!4093 = !DILocation(line: 2010, column: 7, scope: !2)
!4094 = !DILocalVariable(name: "old_inhibit_defer_pop", scope: !2, file: !3, line: 2011, type: !32)
!4095 = !DILocation(line: 2011, column: 7, scope: !2)
!4096 = !DILocation(line: 2011, column: 31, scope: !2)
!4097 = !DILocalVariable(name: "old_stack_pointer_delta", scope: !2, file: !3, line: 2016, type: !32)
!4098 = !DILocation(line: 2016, column: 7, scope: !2)
!4099 = !DILocalVariable(name: "call_fusage", scope: !2, file: !3, line: 2018, type: !6)
!4100 = !DILocation(line: 2018, column: 7, scope: !2)
!4101 = !DILocalVariable(name: "addr", scope: !2, file: !3, line: 2019, type: !258)
!4102 = !DILocation(line: 2019, column: 8, scope: !2)
!4103 = !DILocation(line: 2019, column: 15, scope: !2)
!4104 = !DILocalVariable(name: "i", scope: !2, file: !3, line: 2020, type: !32)
!4105 = !DILocation(line: 2020, column: 7, scope: !2)
!4106 = !DILocalVariable(name: "preferred_stack_boundary", scope: !2, file: !3, line: 2022, type: !210)
!4107 = !DILocation(line: 2022, column: 26, scope: !2)
!4108 = !DILocalVariable(name: "preferred_unit_stack_boundary", scope: !2, file: !3, line: 2024, type: !210)
!4109 = !DILocation(line: 2024, column: 26, scope: !2)
!4110 = !DILocalVariable(name: "static_chain_value", scope: !2, file: !3, line: 2026, type: !6)
!4111 = !DILocation(line: 2026, column: 7, scope: !2)
!4112 = !DILocation(line: 2028, column: 7, scope: !4113)
!4113 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2028, column: 7)
!4114 = !DILocation(line: 2028, column: 7, scope: !2)
!4115 = !DILocation(line: 2029, column: 11, scope: !4113)
!4116 = !DILocation(line: 2029, column: 5, scope: !4113)
!4117 = !DILocation(line: 2033, column: 31, scope: !2)
!4118 = !DILocation(line: 2033, column: 12, scope: !2)
!4119 = !DILocation(line: 2033, column: 10, scope: !2)
!4120 = !DILocation(line: 2034, column: 7, scope: !4121)
!4121 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2034, column: 7)
!4122 = !DILocation(line: 2034, column: 7, scope: !2)
!4123 = !DILocation(line: 2036, column: 16, scope: !4124)
!4124 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 2035, column: 5)
!4125 = !DILocation(line: 2036, column: 14, scope: !4124)
!4126 = !DILocation(line: 2037, column: 41, scope: !4124)
!4127 = !DILocation(line: 2037, column: 16, scope: !4124)
!4128 = !DILocation(line: 2037, column: 13, scope: !4124)
!4129 = !DILocation(line: 2038, column: 5, scope: !4124)
!4130 = !DILocation(line: 2041, column: 16, scope: !4131)
!4131 = distinct !DILexicalBlock(scope: !4121, file: !3, line: 2040, column: 5)
!4132 = !DILocation(line: 2041, column: 14, scope: !4131)
!4133 = !DILocation(line: 2042, column: 41, scope: !4131)
!4134 = !DILocation(line: 2042, column: 16, scope: !4131)
!4135 = !DILocation(line: 2042, column: 13, scope: !4131)
!4136 = !DILocation(line: 2044, column: 13, scope: !2)
!4137 = !DILocation(line: 2044, column: 11, scope: !2)
!4138 = !DILocation(line: 2046, column: 32, scope: !2)
!4139 = !DILocation(line: 2046, column: 50, scope: !2)
!4140 = !DILocation(line: 2046, column: 18, scope: !2)
!4141 = !DILocation(line: 2046, column: 16, scope: !2)
!4142 = !DILocation(line: 2050, column: 7, scope: !4143)
!4143 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2050, column: 7)
!4144 = !DILocation(line: 2050, column: 7, scope: !2)
!4145 = !DILocation(line: 2051, column: 5, scope: !4143)
!4146 = !DILocation(line: 2057, column: 8, scope: !4147)
!4147 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2057, column: 7)
!4148 = !DILocation(line: 2057, column: 14, scope: !4147)
!4149 = !DILocation(line: 2058, column: 7, scope: !4147)
!4150 = !DILocation(line: 2058, column: 13, scope: !4147)
!4151 = !DILocation(line: 2058, column: 19, scope: !4147)
!4152 = !DILocation(line: 2059, column: 7, scope: !4147)
!4153 = !DILocation(line: 2059, column: 11, scope: !4147)
!4154 = !DILocation(line: 2059, column: 18, scope: !4147)
!4155 = !DILocation(line: 2059, column: 21, scope: !4147)
!4156 = !DILocation(line: 2059, column: 31, scope: !4147)
!4157 = !DILocation(line: 2059, column: 28, scope: !4147)
!4158 = !DILocation(line: 2060, column: 4, scope: !4147)
!4159 = !DILocation(line: 2060, column: 7, scope: !4147)
!4160 = !DILocation(line: 2060, column: 27, scope: !4147)
!4161 = !DILocation(line: 2057, column: 7, scope: !2)
!4162 = !DILocalVariable(name: "volatilep", scope: !4163, file: !3, line: 2062, type: !372)
!4163 = distinct !DILexicalBlock(scope: !4147, file: !3, line: 2061, column: 5)
!4164 = !DILocation(line: 2062, column: 12, scope: !4163)
!4165 = !DILocalVariable(name: "arg", scope: !4163, file: !3, line: 2063, type: !258)
!4166 = !DILocation(line: 2063, column: 12, scope: !4163)
!4167 = !DILocalVariable(name: "iter", scope: !4163, file: !3, line: 2064, type: !4168)
!4168 = !DIDerivedType(tag: DW_TAG_typedef, name: "call_expr_arg_iterator", file: !261, line: 5364, baseType: !4169)
!4169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "call_expr_arg_iterator_d", file: !261, line: 5360, size: 128, elements: !4170)
!4170 = !{!4171, !4172, !4173}
!4171 = !DIDerivedType(tag: DW_TAG_member, name: "t", scope: !4169, file: !261, line: 5361, baseType: !258, size: 64)
!4172 = !DIDerivedType(tag: DW_TAG_member, name: "n", scope: !4169, file: !261, line: 5362, baseType: !32, size: 32, offset: 64)
!4173 = !DIDerivedType(tag: DW_TAG_member, name: "i", scope: !4169, file: !261, line: 5363, baseType: !32, size: 32, offset: 96)
!4174 = !DILocation(line: 2064, column: 30, scope: !4163)
!4175 = !DILocation(line: 2066, column: 7, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 2066, column: 7)
!4177 = !DILocation(line: 2066, column: 7, scope: !4178)
!4178 = distinct !DILexicalBlock(scope: !4176, file: !3, line: 2066, column: 7)
!4179 = !DILocation(line: 2067, column: 6, scope: !4180)
!4180 = distinct !DILexicalBlock(scope: !4178, file: !3, line: 2067, column: 6)
!4181 = !DILocation(line: 2067, column: 6, scope: !4178)
!4182 = !DILocation(line: 2069, column: 16, scope: !4183)
!4183 = distinct !DILexicalBlock(scope: !4180, file: !3, line: 2068, column: 4)
!4184 = !DILocation(line: 2070, column: 6, scope: !4183)
!4185 = distinct !{!4185, !4175, !4186}
!4186 = !DILocation(line: 2071, column: 4, scope: !4176)
!4187 = !DILocation(line: 2073, column: 13, scope: !4188)
!4188 = distinct !DILexicalBlock(scope: !4163, file: !3, line: 2073, column: 11)
!4189 = !DILocation(line: 2073, column: 11, scope: !4163)
!4190 = !DILocation(line: 2075, column: 4, scope: !4191)
!4191 = distinct !DILexicalBlock(scope: !4192, file: !3, line: 2075, column: 4)
!4192 = distinct !DILexicalBlock(scope: !4188, file: !3, line: 2074, column: 2)
!4193 = !DILocation(line: 2075, column: 4, scope: !4194)
!4194 = distinct !DILexicalBlock(scope: !4191, file: !3, line: 2075, column: 4)
!4195 = !DILocation(line: 2076, column: 19, scope: !4194)
!4196 = !DILocation(line: 2076, column: 24, scope: !4194)
!4197 = !DILocation(line: 2076, column: 6, scope: !4194)
!4198 = distinct !{!4198, !4190, !4199}
!4199 = !DILocation(line: 2076, column: 59, scope: !4191)
!4200 = !DILocation(line: 2077, column: 11, scope: !4192)
!4201 = !DILocation(line: 2077, column: 4, scope: !4192)
!4202 = !DILocation(line: 2079, column: 5, scope: !4163)
!4203 = !DILocation(line: 2082, column: 26, scope: !2)
!4204 = !DILocation(line: 2082, column: 24, scope: !2)
!4205 = !DILocation(line: 2085, column: 9, scope: !4206)
!4206 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2085, column: 7)
!4207 = !DILocation(line: 2086, column: 7, scope: !4206)
!4208 = !DILocation(line: 2086, column: 10, scope: !4206)
!4209 = !DILocation(line: 2086, column: 31, scope: !4206)
!4210 = !DILocation(line: 2086, column: 35, scope: !4206)
!4211 = !DILocation(line: 2086, column: 38, scope: !4206)
!4212 = !DILocation(line: 2085, column: 7, scope: !2)
!4213 = !DILocation(line: 2087, column: 22, scope: !4206)
!4214 = !DILocation(line: 2087, column: 5, scope: !4206)
!4215 = !DILocation(line: 2092, column: 26, scope: !4216)
!4216 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2092, column: 7)
!4217 = !DILocation(line: 2092, column: 33, scope: !4216)
!4218 = !DILocation(line: 2092, column: 32, scope: !4216)
!4219 = !DILocation(line: 2092, column: 42, scope: !4216)
!4220 = !DILocation(line: 2092, column: 51, scope: !4216)
!4221 = !DILocation(line: 2092, column: 7, scope: !4216)
!4222 = !DILocation(line: 2092, column: 7, scope: !2)
!4223 = !DILocation(line: 2095, column: 13, scope: !4224)
!4224 = distinct !DILexicalBlock(scope: !4216, file: !3, line: 2093, column: 5)
!4225 = !DILocation(line: 2103, column: 41, scope: !4226)
!4226 = distinct !DILexicalBlock(scope: !4224, file: !3, line: 2102, column: 7)
!4227 = !DILocation(line: 2103, column: 22, scope: !4226)
!4228 = !DILocation(line: 2103, column: 20, scope: !4226)
!4229 = !DILocation(line: 2105, column: 6, scope: !4230)
!4230 = distinct !DILexicalBlock(scope: !4226, file: !3, line: 2105, column: 6)
!4231 = !DILocation(line: 2105, column: 13, scope: !4230)
!4232 = !DILocation(line: 2105, column: 16, scope: !4230)
!4233 = !DILocation(line: 2105, column: 31, scope: !4230)
!4234 = !DILocation(line: 2105, column: 34, scope: !4230)
!4235 = !DILocation(line: 2105, column: 6, scope: !4226)
!4236 = !DILocation(line: 2106, column: 27, scope: !4230)
!4237 = !DILocation(line: 2106, column: 25, scope: !4230)
!4238 = !DILocation(line: 2106, column: 4, scope: !4230)
!4239 = !DILocalVariable(name: "d", scope: !4240, file: !3, line: 2112, type: !6)
!4240 = distinct !DILexicalBlock(scope: !4230, file: !3, line: 2108, column: 4)
!4241 = !DILocation(line: 2112, column: 10, scope: !4240)
!4242 = !DILocation(line: 2112, column: 27, scope: !4240)
!4243 = !DILocation(line: 2112, column: 14, scope: !4240)
!4244 = !DILocation(line: 2114, column: 28, scope: !4240)
!4245 = !DILocation(line: 2114, column: 6, scope: !4240)
!4246 = !DILocation(line: 2115, column: 29, scope: !4240)
!4247 = !DILocation(line: 2115, column: 27, scope: !4240)
!4248 = !DILocation(line: 2116, column: 13, scope: !4240)
!4249 = !DILocation(line: 2120, column: 5, scope: !4224)
!4250 = !DILocation(line: 2123, column: 30, scope: !2)
!4251 = !DILocation(line: 2123, column: 28, scope: !2)
!4252 = !DILocation(line: 2124, column: 7, scope: !4253)
!4253 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2124, column: 7)
!4254 = !DILocation(line: 2124, column: 7, scope: !2)
!4255 = !DILocalVariable(name: "i", scope: !4256, file: !3, line: 2126, type: !4257)
!4256 = distinct !DILexicalBlock(scope: !4253, file: !3, line: 2125, column: 5)
!4257 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4258, size: 64)
!4258 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cgraph_rtl_info", file: !4259, line: 150, size: 32, elements: !4260)
!4259 = !DIFile(filename: "./cgraph.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4260 = !{!4261}
!4261 = !DIDerivedType(tag: DW_TAG_member, name: "preferred_incoming_stack_boundary", scope: !4258, file: !4259, line: 151, baseType: !13, size: 32)
!4262 = !DILocation(line: 2126, column: 31, scope: !4256)
!4263 = !DILocation(line: 2126, column: 52, scope: !4256)
!4264 = !DILocation(line: 2126, column: 35, scope: !4256)
!4265 = !DILocation(line: 2132, column: 11, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4256, file: !3, line: 2132, column: 11)
!4267 = !DILocation(line: 2133, column: 4, scope: !4266)
!4268 = !DILocation(line: 2133, column: 7, scope: !4266)
!4269 = !DILocation(line: 2133, column: 10, scope: !4266)
!4270 = !DILocation(line: 2134, column: 4, scope: !4266)
!4271 = !DILocation(line: 2134, column: 7, scope: !4266)
!4272 = !DILocation(line: 2134, column: 10, scope: !4266)
!4273 = !DILocation(line: 2134, column: 46, scope: !4266)
!4274 = !DILocation(line: 2134, column: 44, scope: !4266)
!4275 = !DILocation(line: 2132, column: 11, scope: !4256)
!4276 = !DILocation(line: 2135, column: 29, scope: !4266)
!4277 = !DILocation(line: 2135, column: 32, scope: !4266)
!4278 = !DILocation(line: 2135, column: 27, scope: !4266)
!4279 = !DILocation(line: 2135, column: 2, scope: !4266)
!4280 = !DILocation(line: 2136, column: 5, scope: !4256)
!4281 = !DILocation(line: 2139, column: 13, scope: !2)
!4282 = !DILocation(line: 2139, column: 11, scope: !2)
!4283 = !DILocation(line: 2140, column: 3, scope: !2)
!4284 = !DILocation(line: 2141, column: 13, scope: !2)
!4285 = !DILocation(line: 2141, column: 11, scope: !2)
!4286 = !DILocation(line: 2146, column: 21, scope: !4287)
!4287 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2146, column: 7)
!4288 = !DILocation(line: 2146, column: 7, scope: !4287)
!4289 = !DILocation(line: 2146, column: 7, scope: !2)
!4290 = !DILocalVariable(name: "iter", scope: !4291, file: !3, line: 2148, type: !4168)
!4291 = distinct !DILexicalBlock(scope: !4287, file: !3, line: 2147, column: 5)
!4292 = !DILocation(line: 2148, column: 30, scope: !4291)
!4293 = !DILocalVariable(name: "arg", scope: !4291, file: !3, line: 2149, type: !258)
!4294 = !DILocation(line: 2149, column: 12, scope: !4291)
!4295 = !DILocation(line: 2150, column: 7, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4291, file: !3, line: 2150, column: 7)
!4297 = !DILocation(line: 2150, column: 7, scope: !4298)
!4298 = distinct !DILexicalBlock(scope: !4296, file: !3, line: 2150, column: 7)
!4299 = !DILocalVariable(name: "type", scope: !4300, file: !3, line: 2152, type: !258)
!4300 = distinct !DILexicalBlock(scope: !4298, file: !3, line: 2151, column: 2)
!4301 = !DILocation(line: 2152, column: 9, scope: !4300)
!4302 = !DILocation(line: 2152, column: 16, scope: !4300)
!4303 = !DILocation(line: 2153, column: 8, scope: !4304)
!4304 = distinct !DILexicalBlock(scope: !4300, file: !3, line: 2153, column: 8)
!4305 = !DILocation(line: 2153, column: 13, scope: !4304)
!4306 = !DILocation(line: 2153, column: 16, scope: !4304)
!4307 = !DILocation(line: 2153, column: 33, scope: !4304)
!4308 = !DILocation(line: 2154, column: 8, scope: !4304)
!4309 = !DILocation(line: 2154, column: 25, scope: !4304)
!4310 = !DILocation(line: 2154, column: 44, scope: !4304)
!4311 = !DILocation(line: 2154, column: 11, scope: !4304)
!4312 = !DILocation(line: 2153, column: 8, scope: !4300)
!4313 = !DILocation(line: 2155, column: 25, scope: !4304)
!4314 = !DILocation(line: 2155, column: 6, scope: !4304)
!4315 = !DILocation(line: 2156, column: 2, scope: !4300)
!4316 = distinct !{!4316, !4295, !4317}
!4317 = !DILocation(line: 2156, column: 2, scope: !4296)
!4318 = !DILocation(line: 2157, column: 45, scope: !4291)
!4319 = !DILocation(line: 2157, column: 24, scope: !4291)
!4320 = !DILocation(line: 2157, column: 22, scope: !4291)
!4321 = !DILocation(line: 2158, column: 5, scope: !4291)
!4322 = !DILocation(line: 2160, column: 22, scope: !4287)
!4323 = !DILocation(line: 2160, column: 20, scope: !4287)
!4324 = !DILocation(line: 2162, column: 7, scope: !4325)
!4325 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2162, column: 7)
!4326 = !DILocation(line: 2162, column: 13, scope: !4325)
!4327 = !DILocation(line: 2162, column: 7, scope: !2)
!4328 = !DILocation(line: 2163, column: 5, scope: !4325)
!4329 = !DILocation(line: 2163, column: 11, scope: !4325)
!4330 = !DILocation(line: 2163, column: 24, scope: !4325)
!4331 = !DILocation(line: 2168, column: 7, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2168, column: 7)
!4333 = !DILocation(line: 2168, column: 28, scope: !4332)
!4334 = !DILocation(line: 2168, column: 31, scope: !4332)
!4335 = !DILocation(line: 2168, column: 44, scope: !4332)
!4336 = !DILocation(line: 2168, column: 7, scope: !2)
!4337 = !DILocalVariable(name: "temp", scope: !4338, file: !3, line: 2175, type: !6)
!4338 = distinct !DILexicalBlock(scope: !4332, file: !3, line: 2169, column: 5)
!4339 = !DILocation(line: 2175, column: 11, scope: !4338)
!4340 = !DILocation(line: 2175, column: 20, scope: !4338)
!4341 = !DILocation(line: 2176, column: 5, scope: !4338)
!4342 = !DILocation(line: 2176, column: 9, scope: !4338)
!4343 = !DILocation(line: 2177, column: 9, scope: !4338)
!4344 = !DILocation(line: 2177, column: 12, scope: !4338)
!4345 = !DILocation(line: 2178, column: 9, scope: !4338)
!4346 = !DILocation(line: 2178, column: 12, scope: !4338)
!4347 = !DILocation(line: 2178, column: 36, scope: !4338)
!4348 = !DILocation(line: 2178, column: 33, scope: !4338)
!4349 = !DILocation(line: 2175, column: 19, scope: !4338)
!4350 = !DILocation(line: 2179, column: 25, scope: !4338)
!4351 = !DILocation(line: 2179, column: 7, scope: !4338)
!4352 = !DILocation(line: 2181, column: 7, scope: !4338)
!4353 = !DILocation(line: 2184, column: 33, scope: !4338)
!4354 = !DILocation(line: 2184, column: 13, scope: !4338)
!4355 = !DILocation(line: 2184, column: 55, scope: !4338)
!4356 = !DILocation(line: 2184, column: 2, scope: !4338)
!4357 = !DILocation(line: 2183, column: 34, scope: !4338)
!4358 = !DILocation(line: 2185, column: 33, scope: !4338)
!4359 = !DILocation(line: 2186, column: 5, scope: !4338)
!4360 = !DILocation(line: 2190, column: 5, scope: !2)
!4361 = !DILocation(line: 2190, column: 29, scope: !2)
!4362 = !DILocation(line: 2190, column: 27, scope: !2)
!4363 = !DILocation(line: 2190, column: 51, scope: !2)
!4364 = !DILocation(line: 2190, column: 49, scope: !2)
!4365 = !DILocation(line: 2189, column: 15, scope: !2)
!4366 = !DILocation(line: 2195, column: 7, scope: !4367)
!4367 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2195, column: 7)
!4368 = !DILocation(line: 2195, column: 22, scope: !4367)
!4369 = !DILocation(line: 2195, column: 7, scope: !2)
!4370 = !DILocation(line: 2197, column: 23, scope: !4367)
!4371 = !DILocation(line: 2197, column: 10, scope: !4367)
!4372 = !DILocation(line: 2199, column: 5, scope: !4367)
!4373 = !DILocation(line: 2199, column: 3, scope: !4367)
!4374 = !DILocation(line: 2197, column: 7, scope: !4367)
!4375 = !DILocation(line: 2196, column: 5, scope: !4367)
!4376 = !DILocation(line: 2202, column: 20, scope: !4367)
!4377 = !DILocation(line: 2202, column: 18, scope: !4367)
!4378 = !DILocation(line: 2210, column: 3, scope: !2)
!4379 = !DILocation(line: 2230, column: 7, scope: !4380)
!4380 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2230, column: 7)
!4381 = !DILocation(line: 2230, column: 22, scope: !4380)
!4382 = !DILocation(line: 2231, column: 7, scope: !4380)
!4383 = !DILocation(line: 2231, column: 24, scope: !4380)
!4384 = !DILocation(line: 2231, column: 10, scope: !4380)
!4385 = !DILocation(line: 2230, column: 7, scope: !2)
!4386 = !DILocation(line: 2233, column: 12, scope: !4387)
!4387 = distinct !DILexicalBlock(scope: !4380, file: !3, line: 2233, column: 12)
!4388 = !DILocation(line: 2233, column: 27, scope: !4387)
!4389 = !DILocation(line: 2234, column: 5, scope: !4387)
!4390 = !DILocation(line: 2234, column: 24, scope: !4387)
!4391 = !DILocation(line: 2234, column: 10, scope: !4387)
!4392 = !DILocation(line: 2233, column: 12, scope: !4380)
!4393 = !DILocation(line: 2236, column: 5, scope: !4387)
!4394 = !DILocation(line: 2239, column: 20, scope: !4387)
!4395 = !DILocation(line: 2239, column: 18, scope: !4387)
!4396 = !DILocation(line: 2242, column: 10, scope: !2)
!4397 = !DILocation(line: 2242, column: 8, scope: !2)
!4398 = !DILocation(line: 2243, column: 11, scope: !2)
!4399 = !DILocation(line: 2243, column: 3, scope: !2)
!4400 = !DILocation(line: 2243, column: 20, scope: !2)
!4401 = !DILocation(line: 2243, column: 32, scope: !2)
!4402 = !DILocation(line: 2247, column: 36, scope: !2)
!4403 = !DILocation(line: 2247, column: 49, scope: !2)
!4404 = !DILocation(line: 2248, column: 8, scope: !2)
!4405 = !DILocation(line: 2248, column: 22, scope: !2)
!4406 = !DILocation(line: 2249, column: 8, scope: !2)
!4407 = !DILocation(line: 2249, column: 36, scope: !2)
!4408 = !DILocation(line: 2249, column: 44, scope: !2)
!4409 = !DILocation(line: 2250, column: 22, scope: !2)
!4410 = !DILocation(line: 2253, column: 24, scope: !2)
!4411 = !DILocation(line: 2247, column: 3, scope: !2)
!4412 = !DILocation(line: 2255, column: 17, scope: !4413)
!4413 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2255, column: 7)
!4414 = !DILocation(line: 2255, column: 7, scope: !4413)
!4415 = !DILocation(line: 2255, column: 7, scope: !2)
!4416 = !DILocation(line: 2256, column: 22, scope: !4413)
!4417 = !DILocation(line: 2256, column: 5, scope: !4413)
!4418 = !DILocation(line: 2259, column: 49, scope: !2)
!4419 = !DILocation(line: 2260, column: 7, scope: !2)
!4420 = !DILocation(line: 2260, column: 20, scope: !2)
!4421 = !DILocation(line: 2259, column: 22, scope: !2)
!4422 = !DILocation(line: 2259, column: 20, scope: !2)
!4423 = !DILocation(line: 2267, column: 7, scope: !4424)
!4424 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2267, column: 7)
!4425 = !DILocation(line: 2268, column: 7, scope: !4424)
!4426 = !DILocation(line: 2268, column: 28, scope: !4424)
!4427 = !DILocation(line: 2268, column: 55, scope: !4424)
!4428 = !DILocation(line: 2268, column: 11, scope: !4424)
!4429 = !DILocation(line: 2269, column: 4, scope: !4424)
!4430 = !DILocation(line: 2269, column: 24, scope: !4424)
!4431 = !DILocation(line: 2270, column: 10, scope: !4424)
!4432 = !DILocation(line: 2269, column: 7, scope: !4424)
!4433 = !DILocation(line: 2271, column: 7, scope: !4424)
!4434 = !DILocation(line: 2271, column: 21, scope: !4424)
!4435 = !DILocation(line: 2271, column: 11, scope: !4424)
!4436 = !DILocation(line: 2272, column: 4, scope: !4424)
!4437 = !DILocation(line: 2272, column: 9, scope: !4424)
!4438 = !DILocation(line: 2272, column: 34, scope: !4424)
!4439 = !DILocation(line: 2272, column: 47, scope: !4424)
!4440 = !DILocation(line: 2272, column: 37, scope: !4424)
!4441 = !DILocation(line: 2267, column: 7, scope: !2)
!4442 = !DILocation(line: 2273, column: 41, scope: !4424)
!4443 = !DILocation(line: 2273, column: 28, scope: !4424)
!4444 = !DILocation(line: 2273, column: 26, scope: !4424)
!4445 = !DILocation(line: 2273, column: 5, scope: !4424)
!4446 = !DILocation(line: 2280, column: 31, scope: !4447)
!4447 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2280, column: 7)
!4448 = !DILocation(line: 2280, column: 34, scope: !4447)
!4449 = !DILocation(line: 2281, column: 7, scope: !4447)
!4450 = !DILocation(line: 2281, column: 11, scope: !4447)
!4451 = !DILocation(line: 2282, column: 7, scope: !4447)
!4452 = !DILocation(line: 2282, column: 20, scope: !4447)
!4453 = !DILocation(line: 2282, column: 10, scope: !4447)
!4454 = !DILocation(line: 2283, column: 7, scope: !4447)
!4455 = !DILocation(line: 2283, column: 10, scope: !4447)
!4456 = !DILocation(line: 2283, column: 30, scope: !4447)
!4457 = !DILocation(line: 2280, column: 7, scope: !2)
!4458 = !DILocation(line: 2284, column: 19, scope: !4447)
!4459 = !DILocation(line: 2284, column: 5, scope: !4447)
!4460 = !DILocation(line: 2293, column: 11, scope: !4461)
!4461 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2289, column: 7)
!4462 = !DILocation(line: 2298, column: 7, scope: !4461)
!4463 = !DILocation(line: 2298, column: 10, scope: !4461)
!4464 = !DILocation(line: 2298, column: 31, scope: !4461)
!4465 = !DILocation(line: 2301, column: 7, scope: !4461)
!4466 = !DILocation(line: 2301, column: 11, scope: !4461)
!4467 = !DILocation(line: 2302, column: 7, scope: !4461)
!4468 = !DILocation(line: 2302, column: 4, scope: !4461)
!4469 = !DILocation(line: 2303, column: 7, scope: !4461)
!4470 = !DILocation(line: 2303, column: 11, scope: !4461)
!4471 = !DILocation(line: 2303, column: 35, scope: !4461)
!4472 = !DILocation(line: 2303, column: 32, scope: !4461)
!4473 = !DILocation(line: 2307, column: 7, scope: !4461)
!4474 = !DILocation(line: 2307, column: 19, scope: !4461)
!4475 = !DILocation(line: 2307, column: 44, scope: !4461)
!4476 = !DILocation(line: 2307, column: 52, scope: !4461)
!4477 = !DILocation(line: 2307, column: 11, scope: !4461)
!4478 = !DILocation(line: 2310, column: 7, scope: !4461)
!4479 = !DILocation(line: 2310, column: 11, scope: !4461)
!4480 = !DILocation(line: 2310, column: 17, scope: !4461)
!4481 = !DILocation(line: 2311, column: 7, scope: !4461)
!4482 = !DILocation(line: 2311, column: 10, scope: !4461)
!4483 = !DILocation(line: 2315, column: 7, scope: !4461)
!4484 = !DILocation(line: 2315, column: 11, scope: !4461)
!4485 = !DILocation(line: 2315, column: 18, scope: !4461)
!4486 = !DILocation(line: 2315, column: 44, scope: !4461)
!4487 = !DILocation(line: 2315, column: 21, scope: !4461)
!4488 = !DILocation(line: 2315, column: 55, scope: !4461)
!4489 = !DILocation(line: 2315, column: 52, scope: !4461)
!4490 = !DILocation(line: 2320, column: 7, scope: !4461)
!4491 = !DILocation(line: 2320, column: 20, scope: !4461)
!4492 = !DILocation(line: 2320, column: 43, scope: !4461)
!4493 = !DILocation(line: 2321, column: 24, scope: !4461)
!4494 = !DILocation(line: 2321, column: 11, scope: !4461)
!4495 = !DILocation(line: 2320, column: 31, scope: !4461)
!4496 = !DILocation(line: 2320, column: 29, scope: !4461)
!4497 = !DILocation(line: 2324, column: 7, scope: !4461)
!4498 = !DILocation(line: 2324, column: 11, scope: !4461)
!4499 = !DILocation(line: 2325, column: 7, scope: !4461)
!4500 = !DILocation(line: 2325, column: 4, scope: !4461)
!4501 = !DILocation(line: 2328, column: 7, scope: !4461)
!4502 = !DILocation(line: 2328, column: 28, scope: !4461)
!4503 = !DILocation(line: 2328, column: 44, scope: !4461)
!4504 = !DILocation(line: 2328, column: 11, scope: !4461)
!4505 = !DILocation(line: 2289, column: 7, scope: !2)
!4506 = !DILocation(line: 2329, column: 19, scope: !4461)
!4507 = !DILocation(line: 2329, column: 5, scope: !4461)
!4508 = !DILocation(line: 2333, column: 7, scope: !4509)
!4509 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2333, column: 7)
!4510 = !DILocation(line: 2333, column: 7, scope: !2)
!4511 = !DILocalVariable(name: "caller_mode", scope: !4512, file: !3, line: 2335, type: !50)
!4512 = distinct !DILexicalBlock(scope: !4509, file: !3, line: 2334, column: 5)
!4513 = !DILocation(line: 2335, column: 25, scope: !4512)
!4514 = !DILocalVariable(name: "caller_promoted_mode", scope: !4512, file: !3, line: 2335, type: !50)
!4515 = !DILocation(line: 2335, column: 38, scope: !4512)
!4516 = !DILocalVariable(name: "callee_mode", scope: !4512, file: !3, line: 2336, type: !50)
!4517 = !DILocation(line: 2336, column: 25, scope: !4512)
!4518 = !DILocalVariable(name: "callee_promoted_mode", scope: !4512, file: !3, line: 2336, type: !50)
!4519 = !DILocation(line: 2336, column: 38, scope: !4512)
!4520 = !DILocalVariable(name: "caller_unsignedp", scope: !4512, file: !3, line: 2337, type: !32)
!4521 = !DILocation(line: 2337, column: 11, scope: !4512)
!4522 = !DILocalVariable(name: "callee_unsignedp", scope: !4512, file: !3, line: 2337, type: !32)
!4523 = !DILocation(line: 2337, column: 29, scope: !4512)
!4524 = !DILocalVariable(name: "caller_res", scope: !4512, file: !3, line: 2338, type: !258)
!4525 = !DILocation(line: 2338, column: 12, scope: !4512)
!4526 = !DILocation(line: 2338, column: 25, scope: !4512)
!4527 = !DILocation(line: 2340, column: 26, scope: !4512)
!4528 = !DILocation(line: 2340, column: 24, scope: !4512)
!4529 = !DILocation(line: 2341, column: 21, scope: !4512)
!4530 = !DILocation(line: 2341, column: 19, scope: !4512)
!4531 = !DILocation(line: 2342, column: 26, scope: !4512)
!4532 = !DILocation(line: 2342, column: 24, scope: !4512)
!4533 = !DILocation(line: 2343, column: 21, scope: !4512)
!4534 = !DILocation(line: 2343, column: 19, scope: !4512)
!4535 = !DILocation(line: 2345, column: 27, scope: !4512)
!4536 = !DILocation(line: 2345, column: 51, scope: !4512)
!4537 = !DILocation(line: 2347, column: 6, scope: !4512)
!4538 = !DILocation(line: 2345, column: 4, scope: !4512)
!4539 = !DILocation(line: 2345, column: 2, scope: !4512)
!4540 = !DILocation(line: 2349, column: 27, scope: !4512)
!4541 = !DILocation(line: 2349, column: 48, scope: !4512)
!4542 = !DILocation(line: 2351, column: 6, scope: !4512)
!4543 = !DILocation(line: 2349, column: 4, scope: !4512)
!4544 = !DILocation(line: 2349, column: 2, scope: !4512)
!4545 = !DILocation(line: 2352, column: 11, scope: !4546)
!4546 = distinct !DILexicalBlock(scope: !4512, file: !3, line: 2352, column: 11)
!4547 = !DILocation(line: 2352, column: 23, scope: !4546)
!4548 = !DILocation(line: 2353, column: 4, scope: !4546)
!4549 = !DILocation(line: 2353, column: 8, scope: !4546)
!4550 = !DILocation(line: 2353, column: 32, scope: !4546)
!4551 = !DILocation(line: 2353, column: 29, scope: !4546)
!4552 = !DILocation(line: 2354, column: 8, scope: !4546)
!4553 = !DILocation(line: 2354, column: 13, scope: !4546)
!4554 = !DILocation(line: 2354, column: 28, scope: !4546)
!4555 = !DILocation(line: 2354, column: 25, scope: !4546)
!4556 = !DILocation(line: 2355, column: 6, scope: !4546)
!4557 = !DILocation(line: 2355, column: 9, scope: !4546)
!4558 = !DILocation(line: 2355, column: 24, scope: !4546)
!4559 = !DILocation(line: 2355, column: 21, scope: !4546)
!4560 = !DILocation(line: 2356, column: 5, scope: !4546)
!4561 = !DILocation(line: 2356, column: 9, scope: !4546)
!4562 = !DILocation(line: 2356, column: 29, scope: !4546)
!4563 = !DILocation(line: 2356, column: 26, scope: !4546)
!4564 = !DILocation(line: 2357, column: 9, scope: !4546)
!4565 = !DILocation(line: 2357, column: 12, scope: !4546)
!4566 = !DILocation(line: 2358, column: 7, scope: !4546)
!4567 = !DILocation(line: 2358, column: 5, scope: !4546)
!4568 = !DILocation(line: 2352, column: 11, scope: !4512)
!4569 = !DILocation(line: 2359, column: 16, scope: !4546)
!4570 = !DILocation(line: 2359, column: 2, scope: !4546)
!4571 = !DILocation(line: 2360, column: 5, scope: !4512)
!4572 = !DILocation(line: 2365, column: 13, scope: !4573)
!4573 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2365, column: 7)
!4574 = !DILocation(line: 2365, column: 7, scope: !4573)
!4575 = !DILocation(line: 2365, column: 40, scope: !4573)
!4576 = !DILocation(line: 2365, column: 38, scope: !4573)
!4577 = !DILocation(line: 2365, column: 7, scope: !2)
!4578 = !DILocation(line: 2366, column: 38, scope: !4573)
!4579 = !DILocation(line: 2366, column: 36, scope: !4573)
!4580 = !DILocation(line: 2366, column: 5, scope: !4573)
!4581 = !DILocation(line: 2368, column: 38, scope: !4573)
!4582 = !DILocation(line: 2368, column: 32, scope: !4573)
!4583 = !DILocation(line: 2368, column: 30, scope: !4573)
!4584 = !DILocation(line: 2370, column: 35, scope: !2)
!4585 = !DILocation(line: 2370, column: 60, scope: !2)
!4586 = !DILocation(line: 2370, column: 33, scope: !2)
!4587 = !DILocation(line: 2375, column: 15, scope: !4588)
!4588 = distinct !DILexicalBlock(scope: !2, file: !3, line: 2375, column: 3)
!4589 = !DILocation(line: 2375, column: 13, scope: !4588)
!4590 = !DILocation(line: 2375, column: 8, scope: !4588)
!4591 = !DILocation(line: 2375, column: 38, scope: !4592)
!4592 = distinct !DILexicalBlock(scope: !4588, file: !3, line: 2375, column: 3)
!4593 = !DILocation(line: 2375, column: 43, scope: !4592)
!4594 = !DILocation(line: 2375, column: 3, scope: !4588)
!4595 = !DILocalVariable(name: "sibcall_failure", scope: !4596, file: !3, line: 2377, type: !32)
!4596 = distinct !DILexicalBlock(scope: !4592, file: !3, line: 2376, column: 5)
!4597 = !DILocation(line: 2377, column: 11, scope: !4596)
!4598 = !DILocalVariable(name: "save_pending_stack_adjust", scope: !4596, file: !3, line: 2382, type: !32)
!4599 = !DILocation(line: 2382, column: 11, scope: !4596)
!4600 = !DILocalVariable(name: "save_stack_pointer_delta", scope: !4596, file: !3, line: 2383, type: !32)
!4601 = !DILocation(line: 2383, column: 11, scope: !4596)
!4602 = !DILocalVariable(name: "insns", scope: !4596, file: !3, line: 2384, type: !6)
!4603 = !DILocation(line: 2384, column: 11, scope: !4596)
!4604 = !DILocalVariable(name: "before_call", scope: !4596, file: !3, line: 2385, type: !6)
!4605 = !DILocation(line: 2385, column: 11, scope: !4596)
!4606 = !DILocalVariable(name: "next_arg_reg", scope: !4596, file: !3, line: 2385, type: !6)
!4607 = !DILocation(line: 2385, column: 24, scope: !4596)
!4608 = !DILocalVariable(name: "after_args", scope: !4596, file: !3, line: 2385, type: !6)
!4609 = !DILocation(line: 2385, column: 38, scope: !4596)
!4610 = !DILocation(line: 2387, column: 11, scope: !4611)
!4611 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2387, column: 11)
!4612 = !DILocation(line: 2387, column: 16, scope: !4611)
!4613 = !DILocation(line: 2387, column: 11, scope: !4596)
!4614 = !DILocation(line: 2391, column: 32, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4611, file: !3, line: 2388, column: 2)
!4616 = !DILocation(line: 2391, column: 30, scope: !4615)
!4617 = !DILocation(line: 2392, column: 31, scope: !4615)
!4618 = !DILocation(line: 2392, column: 29, scope: !4615)
!4619 = !DILocation(line: 2393, column: 2, scope: !4615)
!4620 = !DILocation(line: 2394, column: 11, scope: !4621)
!4621 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2394, column: 11)
!4622 = !DILocation(line: 2394, column: 11, scope: !4596)
!4623 = !DILocation(line: 2395, column: 8, scope: !4621)
!4624 = !DILocation(line: 2395, column: 2, scope: !4621)
!4625 = !DILocation(line: 2397, column: 8, scope: !4621)
!4626 = !DILocation(line: 2401, column: 16, scope: !4596)
!4627 = !DILocation(line: 2402, column: 19, scope: !4596)
!4628 = !DILocation(line: 2408, column: 7, scope: !4596)
!4629 = !DILocation(line: 2416, column: 11, scope: !4630)
!4630 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2416, column: 11)
!4631 = !DILocation(line: 2416, column: 32, scope: !4630)
!4632 = !DILocation(line: 2417, column: 4, scope: !4630)
!4633 = !DILocation(line: 2417, column: 8, scope: !4630)
!4634 = !DILocation(line: 2417, column: 29, scope: !4630)
!4635 = !DILocation(line: 2418, column: 8, scope: !4630)
!4636 = !DILocation(line: 2418, column: 12, scope: !4630)
!4637 = !DILocation(line: 2418, column: 18, scope: !4630)
!4638 = !DILocation(line: 2419, column: 4, scope: !4630)
!4639 = !DILocation(line: 2419, column: 8, scope: !4630)
!4640 = !DILocation(line: 2419, column: 29, scope: !4630)
!4641 = !DILocation(line: 2420, column: 8, scope: !4630)
!4642 = !DILocation(line: 2420, column: 11, scope: !4630)
!4643 = !DILocation(line: 2420, column: 27, scope: !4630)
!4644 = !DILocation(line: 2420, column: 32, scope: !4630)
!4645 = !DILocation(line: 2420, column: 38, scope: !4630)
!4646 = !DILocation(line: 2421, column: 4, scope: !4630)
!4647 = !DILocation(line: 2421, column: 7, scope: !4630)
!4648 = !DILocation(line: 2421, column: 12, scope: !4630)
!4649 = !DILocation(line: 2416, column: 11, scope: !4596)
!4650 = !DILocation(line: 2422, column: 2, scope: !4630)
!4651 = !DILocation(line: 2425, column: 11, scope: !4652)
!4652 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2425, column: 11)
!4653 = !DILocation(line: 2425, column: 11, scope: !4596)
!4654 = !DILocation(line: 2426, column: 24, scope: !4652)
!4655 = !DILocation(line: 2426, column: 37, scope: !4652)
!4656 = !DILocation(line: 2426, column: 2, scope: !4652)
!4657 = !DILocation(line: 2430, column: 11, scope: !4658)
!4658 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2430, column: 11)
!4659 = !DILocation(line: 2430, column: 16, scope: !4658)
!4660 = !DILocation(line: 2430, column: 20, scope: !4658)
!4661 = !DILocation(line: 2430, column: 26, scope: !4658)
!4662 = !DILocation(line: 2430, column: 11, scope: !4596)
!4663 = !DILocation(line: 2431, column: 2, scope: !4658)
!4664 = !DILocation(line: 2433, column: 11, scope: !4665)
!4665 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2433, column: 11)
!4666 = !DILocation(line: 2433, column: 16, scope: !4665)
!4667 = !DILocation(line: 2433, column: 21, scope: !4665)
!4668 = !DILocation(line: 2433, column: 30, scope: !4665)
!4669 = !DILocation(line: 2433, column: 24, scope: !4665)
!4670 = !DILocation(line: 2433, column: 11, scope: !4596)
!4671 = !DILocation(line: 2434, column: 2, scope: !4665)
!4672 = !DILocation(line: 2436, column: 28, scope: !4596)
!4673 = !DILocation(line: 2443, column: 33, scope: !4596)
!4674 = !DILocation(line: 2445, column: 12, scope: !4596)
!4675 = !DILocation(line: 2445, column: 20, scope: !4596)
!4676 = !DILocation(line: 2446, column: 13, scope: !4596)
!4677 = !DILocation(line: 2446, column: 18, scope: !4596)
!4678 = !DILocation(line: 2447, column: 8, scope: !4596)
!4679 = !DILocation(line: 2446, column: 12, scope: !4596)
!4680 = !DILocation(line: 2443, column: 4, scope: !4596)
!4681 = !DILocation(line: 2443, column: 2, scope: !4596)
!4682 = !DILocation(line: 2449, column: 29, scope: !4596)
!4683 = !DILocation(line: 2449, column: 51, scope: !4596)
!4684 = !DILocation(line: 2449, column: 49, scope: !4596)
!4685 = !DILocation(line: 2449, column: 27, scope: !4596)
!4686 = !DILocation(line: 2453, column: 11, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2453, column: 11)
!4688 = !DILocation(line: 2453, column: 16, scope: !4687)
!4689 = !DILocation(line: 2453, column: 11, scope: !4596)
!4690 = !DILocation(line: 2455, column: 26, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 2454, column: 2)
!4692 = !DILocation(line: 2455, column: 13, scope: !4691)
!4693 = !DILocation(line: 2458, column: 23, scope: !4691)
!4694 = !DILocation(line: 2458, column: 44, scope: !4691)
!4695 = !DILocation(line: 2458, column: 33, scope: !4691)
!4696 = !DILocation(line: 2458, column: 8, scope: !4691)
!4697 = !DILocation(line: 2458, column: 6, scope: !4691)
!4698 = !DILocation(line: 2462, column: 47, scope: !4691)
!4699 = !DILocation(line: 2462, column: 37, scope: !4691)
!4700 = !DILocation(line: 2462, column: 22, scope: !4691)
!4701 = !DILocation(line: 2462, column: 20, scope: !4691)
!4702 = !DILocation(line: 2463, column: 18, scope: !4691)
!4703 = !DILocation(line: 2463, column: 4, scope: !4691)
!4704 = !DILocation(line: 2464, column: 2, scope: !4691)
!4705 = !DILocation(line: 2468, column: 35, scope: !4706)
!4706 = distinct !DILexicalBlock(scope: !4687, file: !3, line: 2468, column: 16)
!4707 = !DILocation(line: 2468, column: 39, scope: !4706)
!4708 = !DILocation(line: 2468, column: 16, scope: !4687)
!4709 = !DILocation(line: 2470, column: 8, scope: !4710)
!4710 = distinct !DILexicalBlock(scope: !4711, file: !3, line: 2470, column: 8)
!4711 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 2469, column: 2)
!4712 = !DILocation(line: 2470, column: 24, scope: !4710)
!4713 = !DILocation(line: 2470, column: 8, scope: !4711)
!4714 = !DILocation(line: 2472, column: 8, scope: !4715)
!4715 = distinct !DILexicalBlock(scope: !4710, file: !3, line: 2471, column: 6)
!4716 = !DILocation(line: 2473, column: 34, scope: !4715)
!4717 = !DILocation(line: 2473, column: 32, scope: !4715)
!4718 = !DILocation(line: 2474, column: 26, scope: !4715)
!4719 = !DILocation(line: 2474, column: 24, scope: !4715)
!4720 = !DILocation(line: 2475, column: 29, scope: !4715)
!4721 = !DILocation(line: 2479, column: 43, scope: !4715)
!4722 = !DILocation(line: 2479, column: 41, scope: !4715)
!4723 = !DILocation(line: 2480, column: 37, scope: !4715)
!4724 = !DILocation(line: 2481, column: 6, scope: !4715)
!4725 = !DILocation(line: 2482, column: 27, scope: !4711)
!4726 = !DILocation(line: 2482, column: 15, scope: !4711)
!4727 = !DILocation(line: 2482, column: 13, scope: !4711)
!4728 = !DILocation(line: 2483, column: 2, scope: !4711)
!4729 = !DILocalVariable(name: "needed", scope: !4730, file: !3, line: 2491, type: !32)
!4730 = distinct !DILexicalBlock(scope: !4706, file: !3, line: 2485, column: 2)
!4731 = !DILocation(line: 2491, column: 8, scope: !4730)
!4732 = !DILocation(line: 2491, column: 36, scope: !4730)
!4733 = !DILocation(line: 2491, column: 17, scope: !4730)
!4734 = !DILocation(line: 2497, column: 8, scope: !4735)
!4735 = distinct !DILexicalBlock(scope: !4730, file: !3, line: 2497, column: 8)
!4736 = !DILocation(line: 2497, column: 23, scope: !4735)
!4737 = !DILocation(line: 2497, column: 15, scope: !4735)
!4738 = !DILocation(line: 2497, column: 8, scope: !4730)
!4739 = !DILocation(line: 2498, column: 33, scope: !4735)
!4740 = !DILocation(line: 2498, column: 31, scope: !4735)
!4741 = !DILocation(line: 2498, column: 6, scope: !4735)
!4742 = !DILocation(line: 2500, column: 8, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4730, file: !3, line: 2500, column: 8)
!4744 = !DILocation(line: 2500, column: 8, scope: !4730)
!4745 = !DILocation(line: 2502, column: 12, scope: !4746)
!4746 = distinct !DILexicalBlock(scope: !4747, file: !3, line: 2502, column: 12)
!4747 = distinct !DILexicalBlock(scope: !4743, file: !3, line: 2501, column: 6)
!4748 = !DILocation(line: 2502, column: 12, scope: !4747)
!4749 = !DILocation(line: 2521, column: 11, scope: !4750)
!4750 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2521, column: 9)
!4751 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 2503, column: 3)
!4752 = !DILocation(line: 2521, column: 9, scope: !4751)
!4753 = !DILocation(line: 2522, column: 17, scope: !4750)
!4754 = !DILocation(line: 2522, column: 14, scope: !4750)
!4755 = !DILocation(line: 2522, column: 7, scope: !4750)
!4756 = !DILocation(line: 2528, column: 35, scope: !4751)
!4757 = !DILocation(line: 2528, column: 33, scope: !4751)
!4758 = !DILocation(line: 2531, column: 9, scope: !4759)
!4759 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2531, column: 9)
!4760 = !DILocation(line: 2531, column: 9, scope: !4751)
!4761 = !DILocation(line: 2532, column: 13, scope: !4759)
!4762 = !DILocation(line: 2532, column: 7, scope: !4759)
!4763 = !DILocation(line: 2533, column: 27, scope: !4751)
!4764 = !DILocation(line: 2533, column: 25, scope: !4751)
!4765 = !DILocation(line: 2534, column: 23, scope: !4751)
!4766 = !DILocation(line: 2534, column: 21, scope: !4751)
!4767 = !DILocation(line: 2536, column: 9, scope: !4768)
!4768 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2536, column: 9)
!4769 = !DILocation(line: 2536, column: 9, scope: !4751)
!4770 = !DILocation(line: 2537, column: 15, scope: !4768)
!4771 = !DILocation(line: 2537, column: 32, scope: !4768)
!4772 = !DILocation(line: 2538, column: 8, scope: !4768)
!4773 = !DILocation(line: 2537, column: 7, scope: !4768)
!4774 = !DILocation(line: 2540, column: 9, scope: !4775)
!4775 = distinct !DILexicalBlock(scope: !4751, file: !3, line: 2540, column: 9)
!4776 = !DILocation(line: 2540, column: 39, scope: !4775)
!4777 = !DILocation(line: 2540, column: 36, scope: !4775)
!4778 = !DILocation(line: 2540, column: 9, scope: !4751)
!4779 = !DILocation(line: 2541, column: 16, scope: !4775)
!4780 = !DILocation(line: 2541, column: 32, scope: !4775)
!4781 = !DILocation(line: 2542, column: 8, scope: !4775)
!4782 = !DILocation(line: 2543, column: 10, scope: !4775)
!4783 = !DILocation(line: 2543, column: 8, scope: !4775)
!4784 = !DILocation(line: 2542, column: 7, scope: !4775)
!4785 = !DILocation(line: 2541, column: 7, scope: !4775)
!4786 = !DILocation(line: 2544, column: 12, scope: !4751)
!4787 = !DILocation(line: 2551, column: 16, scope: !4751)
!4788 = !DILocation(line: 2551, column: 14, scope: !4751)
!4789 = !DILocation(line: 2552, column: 3, scope: !4751)
!4790 = !DILocation(line: 2555, column: 9, scope: !4791)
!4791 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 2555, column: 9)
!4792 = distinct !DILexicalBlock(scope: !4746, file: !3, line: 2554, column: 3)
!4793 = !DILocation(line: 2555, column: 27, scope: !4791)
!4794 = !DILocation(line: 2555, column: 9, scope: !4792)
!4795 = !DILocation(line: 2561, column: 8, scope: !4796)
!4796 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 2556, column: 7)
!4797 = !DILocation(line: 2563, column: 8, scope: !4796)
!4798 = !DILocation(line: 2560, column: 7, scope: !4796)
!4799 = !DILocation(line: 2560, column: 4, scope: !4796)
!4800 = !DILocation(line: 2569, column: 18, scope: !4796)
!4801 = !DILocation(line: 2569, column: 41, scope: !4796)
!4802 = !DILocation(line: 2569, column: 39, scope: !4796)
!4803 = !DILocation(line: 2569, column: 16, scope: !4796)
!4804 = !DILocation(line: 2571, column: 13, scope: !4805)
!4805 = distinct !DILexicalBlock(scope: !4796, file: !3, line: 2571, column: 13)
!4806 = !DILocation(line: 2571, column: 20, scope: !4805)
!4807 = !DILocation(line: 2571, column: 13, scope: !4796)
!4808 = !DILocation(line: 2576, column: 30, scope: !4809)
!4809 = distinct !DILexicalBlock(scope: !4805, file: !3, line: 2572, column: 4)
!4810 = !DILocation(line: 2576, column: 29, scope: !4809)
!4811 = !DILocation(line: 2576, column: 27, scope: !4809)
!4812 = !DILocation(line: 2577, column: 6, scope: !4809)
!4813 = !DILocation(line: 2578, column: 13, scope: !4809)
!4814 = !DILocation(line: 2579, column: 4, scope: !4809)
!4815 = !DILocation(line: 2583, column: 25, scope: !4805)
!4816 = !DILocation(line: 2584, column: 7, scope: !4796)
!4817 = !DILocation(line: 2588, column: 9, scope: !4818)
!4818 = distinct !DILexicalBlock(scope: !4792, file: !3, line: 2588, column: 9)
!4819 = !DILocation(line: 2588, column: 16, scope: !4818)
!4820 = !DILocation(line: 2588, column: 9, scope: !4792)
!4821 = !DILocation(line: 2589, column: 18, scope: !4818)
!4822 = !DILocation(line: 2589, column: 16, scope: !4818)
!4823 = !DILocation(line: 2589, column: 7, scope: !4818)
!4824 = !DILocation(line: 2592, column: 32, scope: !4825)
!4825 = distinct !DILexicalBlock(scope: !4818, file: !3, line: 2591, column: 7)
!4826 = !DILocation(line: 2592, column: 20, scope: !4825)
!4827 = !DILocation(line: 2592, column: 18, scope: !4825)
!4828 = !DILocation(line: 2605, column: 29, scope: !4792)
!4829 = !DILocation(line: 2605, column: 16, scope: !4792)
!4830 = !DILocation(line: 2605, column: 14, scope: !4792)
!4831 = !DILocation(line: 2607, column: 6, scope: !4747)
!4832 = !DILocation(line: 2610, column: 11, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2610, column: 11)
!4834 = !DILocation(line: 2610, column: 11, scope: !4596)
!4835 = !DILocation(line: 2616, column: 8, scope: !4836)
!4836 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 2616, column: 8)
!4837 = distinct !DILexicalBlock(scope: !4833, file: !3, line: 2611, column: 2)
!4838 = !DILocation(line: 2616, column: 8, scope: !4837)
!4839 = !DILocalVariable(name: "push_size", scope: !4840, file: !3, line: 2618, type: !6)
!4840 = distinct !DILexicalBlock(scope: !4836, file: !3, line: 2617, column: 6)
!4841 = !DILocation(line: 2618, column: 12, scope: !4840)
!4842 = !DILocation(line: 2619, column: 5, scope: !4840)
!4843 = !DILocation(line: 2623, column: 12, scope: !4844)
!4844 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 2623, column: 12)
!4845 = !DILocation(line: 2623, column: 28, scope: !4844)
!4846 = !DILocation(line: 2623, column: 12, scope: !4840)
!4847 = !DILocation(line: 2625, column: 5, scope: !4848)
!4848 = distinct !DILexicalBlock(scope: !4844, file: !3, line: 2624, column: 3)
!4849 = !DILocation(line: 2627, column: 31, scope: !4848)
!4850 = !DILocation(line: 2627, column: 29, scope: !4848)
!4851 = !DILocation(line: 2628, column: 23, scope: !4848)
!4852 = !DILocation(line: 2628, column: 21, scope: !4848)
!4853 = !DILocation(line: 2629, column: 26, scope: !4848)
!4854 = !DILocation(line: 2635, column: 9, scope: !4848)
!4855 = !DILocation(line: 2635, column: 7, scope: !4848)
!4856 = !DILocation(line: 2636, column: 34, scope: !4848)
!4857 = !DILocation(line: 2638, column: 9, scope: !4858)
!4858 = distinct !DILexicalBlock(scope: !4848, file: !3, line: 2638, column: 9)
!4859 = !DILocation(line: 2638, column: 9, scope: !4848)
!4860 = !DILocation(line: 2639, column: 13, scope: !4858)
!4861 = !DILocation(line: 2639, column: 7, scope: !4858)
!4862 = !DILocation(line: 2640, column: 27, scope: !4848)
!4863 = !DILocation(line: 2640, column: 25, scope: !4848)
!4864 = !DILocation(line: 2641, column: 23, scope: !4848)
!4865 = !DILocation(line: 2641, column: 21, scope: !4848)
!4866 = !DILocation(line: 2642, column: 33, scope: !4848)
!4867 = !DILocation(line: 2643, column: 3, scope: !4848)
!4868 = !DILocation(line: 2644, column: 38, scope: !4840)
!4869 = !DILocation(line: 2644, column: 8, scope: !4840)
!4870 = !DILocation(line: 2646, column: 6, scope: !4840)
!4871 = !DILocation(line: 2650, column: 11, scope: !4872)
!4872 = distinct !DILexicalBlock(scope: !4837, file: !3, line: 2650, column: 4)
!4873 = !DILocation(line: 2650, column: 9, scope: !4872)
!4874 = !DILocation(line: 2650, column: 16, scope: !4875)
!4875 = distinct !DILexicalBlock(scope: !4872, file: !3, line: 2650, column: 4)
!4876 = !DILocation(line: 2650, column: 20, scope: !4875)
!4877 = !DILocation(line: 2650, column: 18, scope: !4875)
!4878 = !DILocation(line: 2650, column: 4, scope: !4872)
!4879 = !DILocation(line: 2651, column: 10, scope: !4880)
!4880 = distinct !DILexicalBlock(scope: !4875, file: !3, line: 2651, column: 10)
!4881 = !DILocation(line: 2651, column: 15, scope: !4880)
!4882 = !DILocation(line: 2651, column: 18, scope: !4880)
!4883 = !DILocation(line: 2651, column: 10, scope: !4875)
!4884 = !DILocation(line: 2653, column: 32, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4880, file: !3, line: 2652, column: 8)
!4886 = !DILocation(line: 2653, column: 14, scope: !4885)
!4887 = !DILocation(line: 2653, column: 12, scope: !4885)
!4888 = !DILocation(line: 2654, column: 3, scope: !4885)
!4889 = !DILocation(line: 2650, column: 34, scope: !4875)
!4890 = !DILocation(line: 2650, column: 4, scope: !4875)
!4891 = distinct !{!4891, !4878, !4892}
!4892 = !DILocation(line: 2655, column: 8, scope: !4872)
!4893 = !DILocation(line: 2656, column: 2, scope: !4837)
!4894 = !DILocation(line: 2658, column: 35, scope: !4596)
!4895 = !DILocation(line: 2658, column: 41, scope: !4596)
!4896 = !DILocation(line: 2658, column: 51, scope: !4596)
!4897 = !DILocation(line: 2658, column: 7, scope: !4596)
!4898 = !DILocation(line: 2662, column: 33, scope: !4899)
!4899 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2662, column: 11)
!4900 = !DILocation(line: 2662, column: 42, scope: !4899)
!4901 = !DILocation(line: 2663, column: 4, scope: !4899)
!4902 = !DILocation(line: 2663, column: 26, scope: !4899)
!4903 = !DILocation(line: 2663, column: 38, scope: !4899)
!4904 = !DILocation(line: 2663, column: 35, scope: !4899)
!4905 = !DILocation(line: 2662, column: 11, scope: !4596)
!4906 = !DILocation(line: 2667, column: 8, scope: !4907)
!4907 = distinct !DILexicalBlock(scope: !4908, file: !3, line: 2667, column: 8)
!4908 = distinct !DILexicalBlock(scope: !4899, file: !3, line: 2664, column: 2)
!4909 = !DILocation(line: 2668, column: 8, scope: !4907)
!4910 = !DILocation(line: 2668, column: 13, scope: !4907)
!4911 = !DILocation(line: 2667, column: 8, scope: !4908)
!4912 = !DILocation(line: 2672, column: 7, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 2669, column: 6)
!4914 = !DILocation(line: 2674, column: 7, scope: !4913)
!4915 = !DILocation(line: 2671, column: 6, scope: !4913)
!4916 = !DILocation(line: 2671, column: 3, scope: !4913)
!4917 = !DILocation(line: 2675, column: 8, scope: !4913)
!4918 = !DILocation(line: 2676, column: 6, scope: !4913)
!4919 = !DILocation(line: 2677, column: 13, scope: !4920)
!4920 = distinct !DILexicalBlock(scope: !4907, file: !3, line: 2677, column: 13)
!4921 = !DILocation(line: 2677, column: 22, scope: !4920)
!4922 = !DILocation(line: 2677, column: 13, scope: !4907)
!4923 = !DILocation(line: 2678, column: 25, scope: !4920)
!4924 = !DILocation(line: 2678, column: 6, scope: !4920)
!4925 = !DILocation(line: 2680, column: 2, scope: !4908)
!4926 = !DILocation(line: 2683, column: 7, scope: !4596)
!4927 = !DILocation(line: 2685, column: 39, scope: !4596)
!4928 = !DILocation(line: 2685, column: 47, scope: !4596)
!4929 = !DILocation(line: 2685, column: 16, scope: !4596)
!4930 = !DILocation(line: 2685, column: 14, scope: !4596)
!4931 = !DILocation(line: 2688, column: 14, scope: !4596)
!4932 = !DILocation(line: 2689, column: 11, scope: !4933)
!4933 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2689, column: 11)
!4934 = !DILocation(line: 2689, column: 31, scope: !4933)
!4935 = !DILocation(line: 2690, column: 4, scope: !4933)
!4936 = !DILocation(line: 2690, column: 9, scope: !4933)
!4937 = !DILocation(line: 2689, column: 11, scope: !4596)
!4938 = !DILocation(line: 2692, column: 8, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 2692, column: 8)
!4940 = distinct !DILexicalBlock(scope: !4933, file: !3, line: 2691, column: 2)
!4941 = !DILocation(line: 2692, column: 8, scope: !4940)
!4942 = !DILocation(line: 2693, column: 56, scope: !4939)
!4943 = !DILocation(line: 2693, column: 36, scope: !4939)
!4944 = !DILocation(line: 2694, column: 8, scope: !4939)
!4945 = !DILocation(line: 2694, column: 23, scope: !4939)
!4946 = !DILocation(line: 2694, column: 28, scope: !4939)
!4947 = !DILocation(line: 2693, column: 15, scope: !4939)
!4948 = !DILocation(line: 2693, column: 13, scope: !4939)
!4949 = !DILocation(line: 2693, column: 6, scope: !4939)
!4950 = !DILocation(line: 2696, column: 36, scope: !4939)
!4951 = !DILocation(line: 2696, column: 45, scope: !4939)
!4952 = !DILocation(line: 2696, column: 53, scope: !4939)
!4953 = !DILocation(line: 2697, column: 9, scope: !4939)
!4954 = !DILocation(line: 2697, column: 14, scope: !4939)
!4955 = !DILocation(line: 2696, column: 15, scope: !4939)
!4956 = !DILocation(line: 2696, column: 13, scope: !4939)
!4957 = !DILocation(line: 2702, column: 8, scope: !4958)
!4958 = distinct !DILexicalBlock(scope: !4940, file: !3, line: 2702, column: 8)
!4959 = !DILocation(line: 2702, column: 26, scope: !4958)
!4960 = !DILocation(line: 2702, column: 8, scope: !4940)
!4961 = !DILocalVariable(name: "elem", scope: !4962, file: !3, line: 2704, type: !6)
!4962 = distinct !DILexicalBlock(scope: !4958, file: !3, line: 2703, column: 6)
!4963 = !DILocation(line: 2704, column: 12, scope: !4962)
!4964 = !DILocation(line: 2704, column: 19, scope: !4962)
!4965 = !DILocalVariable(name: "where", scope: !4962, file: !3, line: 2705, type: !6)
!4966 = !DILocation(line: 2705, column: 12, scope: !4962)
!4967 = !DILocation(line: 2705, column: 20, scope: !4962)
!4968 = !DILocalVariable(name: "offset", scope: !4962, file: !3, line: 2706, type: !6)
!4969 = !DILocation(line: 2706, column: 12, scope: !4962)
!4970 = !DILocation(line: 2706, column: 21, scope: !4962)
!4971 = !DILocation(line: 2707, column: 12, scope: !4972)
!4972 = distinct !DILexicalBlock(scope: !4962, file: !3, line: 2707, column: 12)
!4973 = !DILocation(line: 2707, column: 22, scope: !4972)
!4974 = !DILocation(line: 2707, column: 19, scope: !4972)
!4975 = !DILocation(line: 2708, column: 5, scope: !4972)
!4976 = !DILocation(line: 2708, column: 8, scope: !4972)
!4977 = !DILocation(line: 2708, column: 28, scope: !4972)
!4978 = !DILocation(line: 2708, column: 25, scope: !4972)
!4979 = !DILocation(line: 2707, column: 12, scope: !4962)
!4980 = !DILocation(line: 2709, column: 12, scope: !4972)
!4981 = !DILocation(line: 2709, column: 10, scope: !4972)
!4982 = !DILocation(line: 2709, column: 3, scope: !4972)
!4983 = !DILocation(line: 2710, column: 6, scope: !4962)
!4984 = !DILocation(line: 2711, column: 2, scope: !4940)
!4985 = !DILocation(line: 2715, column: 39, scope: !4596)
!4986 = !DILocation(line: 2715, column: 52, scope: !4596)
!4987 = !DILocation(line: 2715, column: 7, scope: !4596)
!4988 = !DILocation(line: 2717, column: 11, scope: !4989)
!4989 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2717, column: 11)
!4990 = !DILocation(line: 2717, column: 11, scope: !4596)
!4991 = !DILocation(line: 2718, column: 38, scope: !4989)
!4992 = !DILocation(line: 2718, column: 23, scope: !4989)
!4993 = !DILocation(line: 2718, column: 21, scope: !4989)
!4994 = !DILocation(line: 2718, column: 2, scope: !4989)
!4995 = !DILocation(line: 2720, column: 21, scope: !4989)
!4996 = !DILocation(line: 2725, column: 11, scope: !4997)
!4997 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2725, column: 11)
!4998 = !DILocation(line: 2725, column: 36, scope: !4997)
!4999 = !DILocation(line: 2725, column: 39, scope: !4997)
!5000 = !DILocation(line: 2725, column: 11, scope: !4596)
!5001 = !DILocation(line: 2726, column: 40, scope: !4997)
!5002 = !DILocation(line: 2726, column: 62, scope: !4997)
!5003 = !DILocation(line: 2726, column: 14, scope: !4997)
!5004 = !DILocation(line: 2726, column: 12, scope: !4997)
!5005 = !DILocation(line: 2726, column: 2, scope: !4997)
!5006 = !DILocation(line: 2736, column: 14, scope: !5007)
!5007 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2736, column: 7)
!5008 = !DILocation(line: 2736, column: 12, scope: !5007)
!5009 = !DILocation(line: 2736, column: 19, scope: !5010)
!5010 = distinct !DILexicalBlock(scope: !5007, file: !3, line: 2736, column: 7)
!5011 = !DILocation(line: 2736, column: 23, scope: !5010)
!5012 = !DILocation(line: 2736, column: 21, scope: !5010)
!5013 = !DILocation(line: 2736, column: 7, scope: !5007)
!5014 = !DILocation(line: 2738, column: 8, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !5016, file: !3, line: 2738, column: 8)
!5016 = distinct !DILexicalBlock(scope: !5010, file: !3, line: 2737, column: 2)
!5017 = !DILocation(line: 2738, column: 13, scope: !5015)
!5018 = !DILocation(line: 2738, column: 16, scope: !5015)
!5019 = !DILocation(line: 2738, column: 20, scope: !5015)
!5020 = !DILocation(line: 2738, column: 25, scope: !5015)
!5021 = !DILocation(line: 2738, column: 28, scope: !5015)
!5022 = !DILocation(line: 2738, column: 33, scope: !5015)
!5023 = !DILocation(line: 2738, column: 36, scope: !5015)
!5024 = !DILocation(line: 2738, column: 8, scope: !5016)
!5025 = !DILocalVariable(name: "before_arg", scope: !5026, file: !3, line: 2740, type: !6)
!5026 = distinct !DILexicalBlock(scope: !5015, file: !3, line: 2739, column: 6)
!5027 = !DILocation(line: 2740, column: 12, scope: !5026)
!5028 = !DILocation(line: 2740, column: 25, scope: !5026)
!5029 = !DILocation(line: 2742, column: 28, scope: !5030)
!5030 = distinct !DILexicalBlock(scope: !5026, file: !3, line: 2742, column: 12)
!5031 = !DILocation(line: 2742, column: 33, scope: !5030)
!5032 = !DILocation(line: 2742, column: 37, scope: !5030)
!5033 = !DILocation(line: 2742, column: 47, scope: !5030)
!5034 = !DILocation(line: 2743, column: 25, scope: !5030)
!5035 = !DILocation(line: 2743, column: 29, scope: !5030)
!5036 = !DILocation(line: 2744, column: 6, scope: !5030)
!5037 = !DILocation(line: 2742, column: 12, scope: !5030)
!5038 = !DILocation(line: 2745, column: 5, scope: !5030)
!5039 = !DILocation(line: 2745, column: 9, scope: !5030)
!5040 = !DILocation(line: 2745, column: 14, scope: !5030)
!5041 = !DILocation(line: 2746, column: 9, scope: !5030)
!5042 = !DILocation(line: 2746, column: 44, scope: !5030)
!5043 = !DILocation(line: 2747, column: 10, scope: !5030)
!5044 = !DILocation(line: 2747, column: 15, scope: !5030)
!5045 = !DILocation(line: 2746, column: 12, scope: !5030)
!5046 = !DILocation(line: 2742, column: 12, scope: !5026)
!5047 = !DILocation(line: 2748, column: 19, scope: !5030)
!5048 = !DILocation(line: 2748, column: 3, scope: !5030)
!5049 = !DILocation(line: 2749, column: 8, scope: !5026)
!5050 = !DILocation(line: 2751, column: 10, scope: !5051)
!5051 = distinct !DILexicalBlock(scope: !5016, file: !3, line: 2751, column: 8)
!5052 = !DILocation(line: 2751, column: 16, scope: !5051)
!5053 = !DILocation(line: 2752, column: 9, scope: !5051)
!5054 = !DILocation(line: 2752, column: 14, scope: !5051)
!5055 = !DILocation(line: 2752, column: 20, scope: !5051)
!5056 = !DILocation(line: 2752, column: 32, scope: !5051)
!5057 = !DILocation(line: 2752, column: 35, scope: !5051)
!5058 = !DILocation(line: 2753, column: 8, scope: !5051)
!5059 = !DILocation(line: 2753, column: 11, scope: !5051)
!5060 = !DILocation(line: 2753, column: 16, scope: !5051)
!5061 = !DILocation(line: 2753, column: 19, scope: !5051)
!5062 = !DILocation(line: 2751, column: 8, scope: !5016)
!5063 = !DILocation(line: 2754, column: 20, scope: !5051)
!5064 = !DILocation(line: 2754, column: 18, scope: !5051)
!5065 = !DILocation(line: 2754, column: 6, scope: !5051)
!5066 = !DILocation(line: 2758, column: 2, scope: !5016)
!5067 = !DILocation(line: 2736, column: 37, scope: !5010)
!5068 = !DILocation(line: 2736, column: 7, scope: !5010)
!5069 = distinct !{!5069, !5013, !5070}
!5070 = !DILocation(line: 2758, column: 2, scope: !5007)
!5071 = !DILocation(line: 2769, column: 11, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2769, column: 11)
!5073 = !DILocation(line: 2769, column: 11, scope: !4596)
!5074 = !DILocation(line: 2770, column: 9, scope: !5075)
!5075 = distinct !DILexicalBlock(scope: !5072, file: !3, line: 2770, column: 2)
!5076 = !DILocation(line: 2770, column: 7, scope: !5075)
!5077 = !DILocation(line: 2770, column: 14, scope: !5078)
!5078 = distinct !DILexicalBlock(scope: !5075, file: !3, line: 2770, column: 2)
!5079 = !DILocation(line: 2770, column: 18, scope: !5078)
!5080 = !DILocation(line: 2770, column: 16, scope: !5078)
!5081 = !DILocation(line: 2770, column: 2, scope: !5075)
!5082 = !DILocation(line: 2771, column: 8, scope: !5083)
!5083 = distinct !DILexicalBlock(scope: !5078, file: !3, line: 2771, column: 8)
!5084 = !DILocation(line: 2771, column: 13, scope: !5083)
!5085 = !DILocation(line: 2771, column: 16, scope: !5083)
!5086 = !DILocation(line: 2771, column: 24, scope: !5083)
!5087 = !DILocation(line: 2771, column: 29, scope: !5083)
!5088 = !DILocation(line: 2771, column: 34, scope: !5083)
!5089 = !DILocation(line: 2771, column: 39, scope: !5083)
!5090 = !DILocation(line: 2771, column: 42, scope: !5083)
!5091 = !DILocation(line: 2771, column: 8, scope: !5078)
!5092 = !DILocalVariable(name: "before_arg", scope: !5093, file: !3, line: 2773, type: !6)
!5093 = distinct !DILexicalBlock(scope: !5083, file: !3, line: 2772, column: 6)
!5094 = !DILocation(line: 2773, column: 12, scope: !5093)
!5095 = !DILocation(line: 2773, column: 25, scope: !5093)
!5096 = !DILocation(line: 2775, column: 28, scope: !5097)
!5097 = distinct !DILexicalBlock(scope: !5093, file: !3, line: 2775, column: 12)
!5098 = !DILocation(line: 2775, column: 33, scope: !5097)
!5099 = !DILocation(line: 2775, column: 37, scope: !5097)
!5100 = !DILocation(line: 2775, column: 47, scope: !5097)
!5101 = !DILocation(line: 2776, column: 25, scope: !5097)
!5102 = !DILocation(line: 2776, column: 29, scope: !5097)
!5103 = !DILocation(line: 2777, column: 6, scope: !5097)
!5104 = !DILocation(line: 2775, column: 12, scope: !5097)
!5105 = !DILocation(line: 2778, column: 5, scope: !5097)
!5106 = !DILocation(line: 2778, column: 9, scope: !5097)
!5107 = !DILocation(line: 2778, column: 14, scope: !5097)
!5108 = !DILocation(line: 2779, column: 9, scope: !5097)
!5109 = !DILocation(line: 2779, column: 44, scope: !5097)
!5110 = !DILocation(line: 2780, column: 10, scope: !5097)
!5111 = !DILocation(line: 2780, column: 15, scope: !5097)
!5112 = !DILocation(line: 2779, column: 12, scope: !5097)
!5113 = !DILocation(line: 2775, column: 12, scope: !5093)
!5114 = !DILocation(line: 2781, column: 19, scope: !5097)
!5115 = !DILocation(line: 2781, column: 3, scope: !5097)
!5116 = !DILocation(line: 2782, column: 6, scope: !5093)
!5117 = !DILocation(line: 2770, column: 32, scope: !5078)
!5118 = !DILocation(line: 2770, column: 2, scope: !5078)
!5119 = distinct !{!5119, !5081, !5120}
!5120 = !DILocation(line: 2782, column: 6, scope: !5075)
!5121 = !DILocation(line: 2793, column: 11, scope: !5122)
!5122 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2793, column: 11)
!5123 = !DILocation(line: 2794, column: 11, scope: !5122)
!5124 = !DILocation(line: 2794, column: 15, scope: !5122)
!5125 = !DILocation(line: 2795, column: 4, scope: !5122)
!5126 = !DILocation(line: 2795, column: 7, scope: !5122)
!5127 = !DILocation(line: 2795, column: 24, scope: !5122)
!5128 = !DILocation(line: 2795, column: 29, scope: !5122)
!5129 = !DILocation(line: 2795, column: 32, scope: !5122)
!5130 = !DILocation(line: 2795, column: 53, scope: !5122)
!5131 = !DILocation(line: 2793, column: 11, scope: !4596)
!5132 = !DILocation(line: 2796, column: 21, scope: !5122)
!5133 = !DILocation(line: 2796, column: 2, scope: !5122)
!5134 = !DILocation(line: 2800, column: 11, scope: !5135)
!5135 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2800, column: 11)
!5136 = !DILocation(line: 2800, column: 16, scope: !5135)
!5137 = !DILocation(line: 2800, column: 21, scope: !5135)
!5138 = !DILocation(line: 2800, column: 24, scope: !5135)
!5139 = !DILocation(line: 2800, column: 45, scope: !5135)
!5140 = !DILocation(line: 2800, column: 50, scope: !5135)
!5141 = !DILocation(line: 2800, column: 11, scope: !4596)
!5142 = !DILocation(line: 2803, column: 8, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5135, file: !3, line: 2801, column: 2)
!5144 = !DILocation(line: 2803, column: 6, scope: !5143)
!5145 = !DILocation(line: 2804, column: 20, scope: !5143)
!5146 = !DILocation(line: 2806, column: 25, scope: !5143)
!5147 = !DILocation(line: 2806, column: 10, scope: !5143)
!5148 = !DILocation(line: 2805, column: 6, scope: !5143)
!5149 = !DILocation(line: 2804, column: 4, scope: !5143)
!5150 = !DILocation(line: 2809, column: 8, scope: !5151)
!5151 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 2809, column: 8)
!5152 = !DILocation(line: 2809, column: 8, scope: !5143)
!5153 = !DILocation(line: 2810, column: 29, scope: !5151)
!5154 = !DILocation(line: 2810, column: 6, scope: !5151)
!5155 = !DILocation(line: 2811, column: 2, scope: !5143)
!5156 = !DILocation(line: 2813, column: 20, scope: !4596)
!5157 = !DILocation(line: 2813, column: 18, scope: !4596)
!5158 = !DILocation(line: 2814, column: 38, scope: !4596)
!5159 = !DILocation(line: 2814, column: 46, scope: !4596)
!5160 = !DILocation(line: 2814, column: 54, scope: !4596)
!5161 = !DILocation(line: 2815, column: 24, scope: !4596)
!5162 = !DILocation(line: 2815, column: 39, scope: !4596)
!5163 = !DILocation(line: 2815, column: 44, scope: !4596)
!5164 = !DILocation(line: 2814, column: 16, scope: !4596)
!5165 = !DILocation(line: 2814, column: 14, scope: !4596)
!5166 = !DILocation(line: 2817, column: 33, scope: !4596)
!5167 = !DILocation(line: 2817, column: 39, scope: !4596)
!5168 = !DILocation(line: 2817, column: 66, scope: !4596)
!5169 = !DILocation(line: 2818, column: 5, scope: !4596)
!5170 = !DILocation(line: 2818, column: 10, scope: !4596)
!5171 = !DILocation(line: 2817, column: 7, scope: !4596)
!5172 = !DILocation(line: 2822, column: 21, scope: !4596)
!5173 = !DILocation(line: 2822, column: 19, scope: !4596)
!5174 = !DILocation(line: 2832, column: 17, scope: !4596)
!5175 = !DILocation(line: 2832, column: 15, scope: !4596)
!5176 = !DILocation(line: 2839, column: 7, scope: !4596)
!5177 = !DILocation(line: 2843, column: 20, scope: !4596)
!5178 = !DILocation(line: 2843, column: 28, scope: !4596)
!5179 = !DILocation(line: 2843, column: 33, scope: !4596)
!5180 = !DILocation(line: 2843, column: 41, scope: !4596)
!5181 = !DILocation(line: 2843, column: 50, scope: !4596)
!5182 = !DILocation(line: 2844, column: 25, scope: !4596)
!5183 = !DILocation(line: 2844, column: 35, scope: !4596)
!5184 = !DILocation(line: 2845, column: 6, scope: !4596)
!5185 = !DILocation(line: 2845, column: 20, scope: !4596)
!5186 = !DILocation(line: 2845, column: 28, scope: !4596)
!5187 = !DILocation(line: 2845, column: 51, scope: !4596)
!5188 = !DILocation(line: 2846, column: 6, scope: !4596)
!5189 = !DILocation(line: 2843, column: 7, scope: !4596)
!5190 = !DILocation(line: 2851, column: 11, scope: !5191)
!5191 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2851, column: 11)
!5192 = !DILocation(line: 2851, column: 16, scope: !5191)
!5193 = !DILocation(line: 2852, column: 4, scope: !5191)
!5194 = !DILocation(line: 2852, column: 39, scope: !5191)
!5195 = !DILocation(line: 2852, column: 7, scope: !5191)
!5196 = !DILocation(line: 2851, column: 11, scope: !4596)
!5197 = !DILocation(line: 2853, column: 18, scope: !5191)
!5198 = !DILocation(line: 2853, column: 2, scope: !5191)
!5199 = !DILocation(line: 2859, column: 12, scope: !5200)
!5200 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2859, column: 11)
!5201 = !DILocation(line: 2860, column: 4, scope: !5200)
!5202 = !DILocation(line: 2860, column: 8, scope: !5200)
!5203 = !DILocation(line: 2861, column: 4, scope: !5200)
!5204 = !DILocation(line: 2861, column: 7, scope: !5200)
!5205 = !DILocation(line: 2861, column: 27, scope: !5200)
!5206 = !DILocation(line: 2862, column: 4, scope: !5200)
!5207 = !DILocation(line: 2862, column: 21, scope: !5200)
!5208 = !DILocation(line: 2862, column: 36, scope: !5200)
!5209 = !DILocation(line: 2862, column: 7, scope: !5200)
!5210 = !DILocation(line: 2859, column: 11, scope: !4596)
!5211 = !DILocation(line: 2864, column: 28, scope: !5212)
!5212 = distinct !DILexicalBlock(scope: !5213, file: !3, line: 2864, column: 8)
!5213 = distinct !DILexicalBlock(scope: !5200, file: !3, line: 2863, column: 2)
!5214 = !DILocation(line: 2864, column: 56, scope: !5212)
!5215 = !DILocation(line: 2864, column: 8, scope: !5212)
!5216 = !DILocation(line: 2864, column: 8, scope: !5213)
!5217 = !DILocation(line: 2865, column: 22, scope: !5212)
!5218 = !DILocation(line: 2865, column: 6, scope: !5212)
!5219 = !DILocation(line: 2866, column: 26, scope: !5213)
!5220 = !DILocation(line: 2866, column: 47, scope: !5213)
!5221 = !DILocation(line: 2866, column: 13, scope: !5213)
!5222 = !DILocation(line: 2866, column: 11, scope: !5213)
!5223 = !DILocation(line: 2867, column: 2, scope: !5213)
!5224 = !DILocation(line: 2869, column: 11, scope: !5225)
!5225 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2869, column: 11)
!5226 = !DILocation(line: 2869, column: 16, scope: !5225)
!5227 = !DILocation(line: 2869, column: 20, scope: !5225)
!5228 = !DILocation(line: 2869, column: 26, scope: !5225)
!5229 = !DILocation(line: 2869, column: 11, scope: !4596)
!5230 = !DILocalVariable(name: "temp", scope: !5231, file: !3, line: 2871, type: !6)
!5231 = distinct !DILexicalBlock(scope: !5225, file: !3, line: 2870, column: 2)
!5232 = !DILocation(line: 2871, column: 8, scope: !5231)
!5233 = !DILocation(line: 2871, column: 28, scope: !5231)
!5234 = !DILocation(line: 2871, column: 15, scope: !5231)
!5235 = !DILocalVariable(name: "last", scope: !5231, file: !3, line: 2872, type: !6)
!5236 = !DILocation(line: 2872, column: 8, scope: !5231)
!5237 = !DILocalVariable(name: "insns", scope: !5231, file: !3, line: 2872, type: !6)
!5238 = !DILocation(line: 2872, column: 14, scope: !5231)
!5239 = !DILocation(line: 2875, column: 8, scope: !5240)
!5240 = distinct !DILexicalBlock(scope: !5231, file: !3, line: 2875, column: 8)
!5241 = !DILocation(line: 2875, column: 28, scope: !5240)
!5242 = !DILocation(line: 2875, column: 8, scope: !5231)
!5243 = !DILocation(line: 2876, column: 24, scope: !5240)
!5244 = !DILocation(line: 2876, column: 30, scope: !5240)
!5245 = !DILocation(line: 2876, column: 6, scope: !5240)
!5246 = !DILocation(line: 2878, column: 20, scope: !5231)
!5247 = !DILocation(line: 2878, column: 26, scope: !5231)
!5248 = !DILocation(line: 2878, column: 4, scope: !5231)
!5249 = !DILocation(line: 2882, column: 11, scope: !5231)
!5250 = !DILocation(line: 2882, column: 9, scope: !5231)
!5251 = !DILocation(line: 2883, column: 18, scope: !5231)
!5252 = !DILocation(line: 2883, column: 37, scope: !5231)
!5253 = !DILocation(line: 2883, column: 4, scope: !5231)
!5254 = !DILocation(line: 2886, column: 12, scope: !5231)
!5255 = !DILocation(line: 2886, column: 10, scope: !5231)
!5256 = !DILocation(line: 2887, column: 4, scope: !5231)
!5257 = !DILocation(line: 2888, column: 15, scope: !5231)
!5258 = !DILocation(line: 2888, column: 4, scope: !5231)
!5259 = !DILocation(line: 2889, column: 13, scope: !5231)
!5260 = !DILocation(line: 2889, column: 11, scope: !5231)
!5261 = !DILocation(line: 2890, column: 2, scope: !5231)
!5262 = !DILocation(line: 2897, column: 12, scope: !5263)
!5263 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2897, column: 11)
!5264 = !DILocation(line: 2897, column: 18, scope: !5263)
!5265 = !DILocation(line: 2897, column: 34, scope: !5263)
!5266 = !DILocation(line: 2897, column: 37, scope: !5263)
!5267 = !DILocation(line: 2897, column: 42, scope: !5263)
!5268 = !DILocation(line: 2897, column: 11, scope: !4596)
!5269 = !DILocalVariable(name: "last", scope: !5270, file: !3, line: 2903, type: !6)
!5270 = distinct !DILexicalBlock(scope: !5263, file: !3, line: 2898, column: 2)
!5271 = !DILocation(line: 2903, column: 8, scope: !5270)
!5272 = !DILocation(line: 2903, column: 15, scope: !5270)
!5273 = !DILocation(line: 2904, column: 4, scope: !5270)
!5274 = !DILocation(line: 2904, column: 12, scope: !5270)
!5275 = !DILocation(line: 2904, column: 11, scope: !5270)
!5276 = !DILocation(line: 2906, column: 15, scope: !5277)
!5277 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 2905, column: 6)
!5278 = !DILocation(line: 2906, column: 13, scope: !5277)
!5279 = !DILocation(line: 2908, column: 8, scope: !5277)
!5280 = distinct !{!5280, !5273, !5281}
!5281 = !DILocation(line: 2909, column: 6, scope: !5270)
!5282 = !DILocation(line: 2911, column: 24, scope: !5270)
!5283 = !DILocation(line: 2911, column: 4, scope: !5270)
!5284 = !DILocation(line: 2916, column: 8, scope: !5285)
!5285 = distinct !DILexicalBlock(scope: !5270, file: !3, line: 2916, column: 8)
!5286 = !DILocation(line: 2916, column: 26, scope: !5285)
!5287 = !DILocation(line: 2916, column: 8, scope: !5270)
!5288 = !DILocation(line: 2918, column: 30, scope: !5289)
!5289 = distinct !DILexicalBlock(scope: !5285, file: !3, line: 2917, column: 6)
!5290 = !DILocation(line: 2918, column: 28, scope: !5289)
!5291 = !DILocation(line: 2919, column: 29, scope: !5289)
!5292 = !DILocation(line: 2920, column: 6, scope: !5289)
!5293 = !DILocation(line: 2921, column: 2, scope: !5270)
!5294 = !DILocation(line: 2925, column: 11, scope: !5295)
!5295 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 2925, column: 11)
!5296 = !DILocation(line: 2925, column: 31, scope: !5295)
!5297 = !DILocation(line: 2926, column: 4, scope: !5295)
!5298 = !DILocation(line: 2926, column: 7, scope: !5295)
!5299 = !DILocation(line: 2925, column: 11, scope: !4596)
!5300 = !DILocation(line: 2927, column: 11, scope: !5295)
!5301 = !DILocation(line: 2927, column: 9, scope: !5295)
!5302 = !DILocation(line: 2927, column: 2, scope: !5295)
!5303 = !DILocation(line: 2928, column: 16, scope: !5304)
!5304 = distinct !DILexicalBlock(scope: !5295, file: !3, line: 2928, column: 16)
!5305 = !DILocation(line: 2928, column: 16, scope: !5295)
!5306 = !DILocation(line: 2930, column: 8, scope: !5307)
!5307 = distinct !DILexicalBlock(scope: !5308, file: !3, line: 2930, column: 8)
!5308 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 2929, column: 2)
!5309 = !DILocation(line: 2930, column: 15, scope: !5307)
!5310 = !DILocation(line: 2930, column: 20, scope: !5307)
!5311 = !DILocation(line: 2930, column: 24, scope: !5307)
!5312 = !DILocation(line: 2930, column: 8, scope: !5308)
!5313 = !DILocation(line: 2933, column: 18, scope: !5314)
!5314 = distinct !DILexicalBlock(scope: !5307, file: !3, line: 2931, column: 6)
!5315 = !DILocation(line: 2934, column: 11, scope: !5314)
!5316 = !DILocation(line: 2933, column: 5, scope: !5314)
!5317 = !DILocation(line: 2933, column: 3, scope: !5314)
!5318 = !DILocation(line: 2936, column: 28, scope: !5314)
!5319 = !DILocation(line: 2936, column: 36, scope: !5314)
!5320 = !DILocation(line: 2936, column: 8, scope: !5314)
!5321 = !DILocation(line: 2937, column: 6, scope: !5314)
!5322 = !DILocation(line: 2938, column: 2, scope: !5308)
!5323 = !DILocation(line: 2939, column: 16, scope: !5324)
!5324 = distinct !DILexicalBlock(scope: !5304, file: !3, line: 2939, column: 16)
!5325 = !DILocation(line: 2939, column: 16, scope: !5304)
!5326 = !DILocation(line: 2944, column: 26, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 2940, column: 2)
!5328 = !DILocation(line: 2945, column: 18, scope: !5327)
!5329 = !DILocation(line: 2945, column: 5, scope: !5327)
!5330 = !DILocation(line: 2944, column: 13, scope: !5327)
!5331 = !DILocation(line: 2944, column: 11, scope: !5327)
!5332 = !DILocation(line: 2946, column: 24, scope: !5327)
!5333 = !DILocation(line: 2946, column: 32, scope: !5327)
!5334 = !DILocation(line: 2946, column: 4, scope: !5327)
!5335 = !DILocation(line: 2947, column: 2, scope: !5327)
!5336 = !DILocation(line: 2950, column: 16, scope: !5337)
!5337 = distinct !DILexicalBlock(scope: !5324, file: !3, line: 2950, column: 16)
!5338 = !DILocation(line: 2950, column: 34, scope: !5337)
!5339 = !DILocation(line: 2950, column: 16, scope: !5324)
!5340 = !DILocation(line: 2952, column: 8, scope: !5341)
!5341 = distinct !DILexicalBlock(scope: !5342, file: !3, line: 2952, column: 8)
!5342 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2951, column: 2)
!5343 = !DILocation(line: 2952, column: 15, scope: !5341)
!5344 = !DILocation(line: 2952, column: 8, scope: !5342)
!5345 = !DILocalVariable(name: "nt", scope: !5346, file: !3, line: 2955, type: !258)
!5346 = distinct !DILexicalBlock(scope: !5341, file: !3, line: 2953, column: 6)
!5347 = !DILocation(line: 2955, column: 13, scope: !5346)
!5348 = !DILocation(line: 2955, column: 40, scope: !5346)
!5349 = !DILocation(line: 2956, column: 13, scope: !5346)
!5350 = !DILocation(line: 2957, column: 13, scope: !5346)
!5351 = !DILocation(line: 2955, column: 18, scope: !5346)
!5352 = !DILocation(line: 2959, column: 30, scope: !5346)
!5353 = !DILocation(line: 2959, column: 17, scope: !5346)
!5354 = !DILocation(line: 2959, column: 15, scope: !5346)
!5355 = !DILocation(line: 2960, column: 6, scope: !5346)
!5356 = !DILocation(line: 2962, column: 23, scope: !5357)
!5357 = distinct !DILexicalBlock(scope: !5342, file: !3, line: 2962, column: 8)
!5358 = !DILocation(line: 2962, column: 31, scope: !5357)
!5359 = !DILocation(line: 2962, column: 10, scope: !5357)
!5360 = !DILocation(line: 2962, column: 8, scope: !5342)
!5361 = !DILocation(line: 2963, column: 24, scope: !5357)
!5362 = !DILocation(line: 2963, column: 32, scope: !5357)
!5363 = !DILocation(line: 2963, column: 40, scope: !5357)
!5364 = !DILocation(line: 2964, column: 29, scope: !5357)
!5365 = !DILocation(line: 2964, column: 10, scope: !5357)
!5366 = !DILocation(line: 2963, column: 6, scope: !5357)
!5367 = !DILocation(line: 2967, column: 20, scope: !5342)
!5368 = !DILocation(line: 2968, column: 2, scope: !5342)
!5369 = !DILocation(line: 2969, column: 16, scope: !5370)
!5370 = distinct !DILexicalBlock(scope: !5337, file: !3, line: 2969, column: 16)
!5371 = !DILocation(line: 2970, column: 9, scope: !5370)
!5372 = !DILocation(line: 2970, column: 12, scope: !5370)
!5373 = !DILocation(line: 2970, column: 33, scope: !5370)
!5374 = !DILocation(line: 2970, column: 30, scope: !5370)
!5375 = !DILocation(line: 2971, column: 9, scope: !5370)
!5376 = !DILocation(line: 2971, column: 12, scope: !5370)
!5377 = !DILocation(line: 2971, column: 33, scope: !5370)
!5378 = !DILocation(line: 2971, column: 30, scope: !5370)
!5379 = !DILocation(line: 2969, column: 16, scope: !5337)
!5380 = !DILocalVariable(name: "may_overlap", scope: !5381, file: !3, line: 2973, type: !372)
!5381 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 2972, column: 2)
!5382 = !DILocation(line: 2973, column: 9, scope: !5381)
!5383 = !DILocation(line: 2977, column: 9, scope: !5384)
!5384 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 2977, column: 8)
!5385 = !DILocation(line: 2977, column: 24, scope: !5384)
!5386 = !DILocation(line: 2977, column: 27, scope: !5384)
!5387 = !DILocation(line: 2977, column: 8, scope: !5381)
!5388 = !DILocation(line: 2978, column: 41, scope: !5384)
!5389 = !DILocation(line: 2978, column: 15, scope: !5384)
!5390 = !DILocation(line: 2978, column: 13, scope: !5384)
!5391 = !DILocation(line: 2978, column: 6, scope: !5384)
!5392 = !DILocation(line: 2986, column: 8, scope: !5393)
!5393 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 2986, column: 8)
!5394 = !DILocation(line: 2986, column: 33, scope: !5393)
!5395 = !DILocation(line: 2986, column: 36, scope: !5393)
!5396 = !DILocation(line: 2986, column: 41, scope: !5393)
!5397 = !DILocation(line: 2986, column: 44, scope: !5393)
!5398 = !DILocation(line: 2986, column: 8, scope: !5381)
!5399 = !DILocation(line: 2987, column: 13, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5393, file: !3, line: 2987, column: 6)
!5401 = !DILocation(line: 2987, column: 11, scope: !5400)
!5402 = !DILocation(line: 2987, column: 18, scope: !5403)
!5403 = distinct !DILexicalBlock(scope: !5400, file: !3, line: 2987, column: 6)
!5404 = !DILocation(line: 2987, column: 22, scope: !5403)
!5405 = !DILocation(line: 2987, column: 20, scope: !5403)
!5406 = !DILocation(line: 2987, column: 6, scope: !5400)
!5407 = !DILocation(line: 2988, column: 12, scope: !5408)
!5408 = distinct !DILexicalBlock(scope: !5403, file: !3, line: 2988, column: 12)
!5409 = !DILocation(line: 2988, column: 17, scope: !5408)
!5410 = !DILocation(line: 2988, column: 20, scope: !5408)
!5411 = !DILocation(line: 2988, column: 12, scope: !5403)
!5412 = !DILocation(line: 2990, column: 17, scope: !5413)
!5413 = distinct !DILexicalBlock(scope: !5408, file: !3, line: 2989, column: 3)
!5414 = !DILocation(line: 2991, column: 5, scope: !5413)
!5415 = !DILocation(line: 2987, column: 36, scope: !5403)
!5416 = !DILocation(line: 2987, column: 6, scope: !5403)
!5417 = distinct !{!5417, !5406, !5418}
!5418 = !DILocation(line: 2992, column: 3, scope: !5400)
!5419 = !DILocation(line: 2994, column: 8, scope: !5420)
!5420 = distinct !DILexicalBlock(scope: !5381, file: !3, line: 2994, column: 8)
!5421 = !DILocation(line: 2994, column: 8, scope: !5381)
!5422 = !DILocation(line: 2995, column: 28, scope: !5420)
!5423 = !DILocation(line: 2995, column: 15, scope: !5420)
!5424 = !DILocation(line: 2995, column: 13, scope: !5420)
!5425 = !DILocation(line: 2995, column: 6, scope: !5420)
!5426 = !DILocation(line: 3006, column: 24, scope: !5427)
!5427 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 2997, column: 6)
!5428 = !DILocation(line: 3006, column: 32, scope: !5427)
!5429 = !DILocation(line: 3006, column: 8, scope: !5427)
!5430 = !DILocation(line: 3011, column: 12, scope: !5431)
!5431 = distinct !DILexicalBlock(scope: !5427, file: !3, line: 3011, column: 12)
!5432 = !DILocation(line: 3011, column: 12, scope: !5427)
!5433 = !DILocation(line: 3012, column: 19, scope: !5431)
!5434 = !DILocation(line: 3012, column: 3, scope: !5431)
!5435 = !DILocation(line: 3014, column: 2, scope: !5381)
!5436 = !DILocation(line: 3015, column: 16, scope: !5437)
!5437 = distinct !DILexicalBlock(scope: !5370, file: !3, line: 3015, column: 16)
!5438 = !DILocation(line: 3015, column: 36, scope: !5437)
!5439 = !DILocation(line: 3015, column: 16, scope: !5370)
!5440 = !DILocalVariable(name: "val", scope: !5441, file: !3, line: 3017, type: !6)
!5441 = distinct !DILexicalBlock(scope: !5437, file: !3, line: 3016, column: 2)
!5442 = !DILocation(line: 3017, column: 8, scope: !5441)
!5443 = !DILocation(line: 3017, column: 14, scope: !5441)
!5444 = !DILocation(line: 3018, column: 8, scope: !5445)
!5445 = distinct !DILexicalBlock(scope: !5441, file: !3, line: 3018, column: 8)
!5446 = !DILocation(line: 3018, column: 23, scope: !5445)
!5447 = !DILocation(line: 3018, column: 8, scope: !5441)
!5448 = !DILocation(line: 3019, column: 38, scope: !5445)
!5449 = !DILocation(line: 3019, column: 12, scope: !5445)
!5450 = !DILocation(line: 3019, column: 10, scope: !5445)
!5451 = !DILocation(line: 3019, column: 6, scope: !5445)
!5452 = !DILocation(line: 3020, column: 36, scope: !5441)
!5453 = !DILocation(line: 3020, column: 44, scope: !5441)
!5454 = !DILocation(line: 3020, column: 49, scope: !5441)
!5455 = !DILocation(line: 3020, column: 13, scope: !5441)
!5456 = !DILocation(line: 3020, column: 11, scope: !5441)
!5457 = !DILocation(line: 3023, column: 20, scope: !5441)
!5458 = !DILocation(line: 3024, column: 2, scope: !5441)
!5459 = !DILocation(line: 3026, column: 50, scope: !5437)
!5460 = !DILocation(line: 3026, column: 24, scope: !5437)
!5461 = !DILocation(line: 3026, column: 11, scope: !5437)
!5462 = !DILocation(line: 3026, column: 9, scope: !5437)
!5463 = !DILocation(line: 3030, column: 11, scope: !5464)
!5464 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3030, column: 11)
!5465 = !DILocation(line: 3031, column: 4, scope: !5464)
!5466 = !DILocation(line: 3031, column: 7, scope: !5464)
!5467 = !DILocation(line: 3031, column: 27, scope: !5464)
!5468 = !DILocation(line: 3032, column: 4, scope: !5464)
!5469 = !DILocation(line: 3032, column: 7, scope: !5464)
!5470 = !DILocation(line: 3032, column: 28, scope: !5464)
!5471 = !DILocation(line: 3032, column: 25, scope: !5464)
!5472 = !DILocation(line: 3030, column: 11, scope: !4596)
!5473 = !DILocalVariable(name: "type", scope: !5474, file: !3, line: 3034, type: !258)
!5474 = distinct !DILexicalBlock(scope: !5464, file: !3, line: 3033, column: 2)
!5475 = !DILocation(line: 3034, column: 9, scope: !5474)
!5476 = !DILocation(line: 3034, column: 16, scope: !5474)
!5477 = !DILocalVariable(name: "unsignedp", scope: !5474, file: !3, line: 3035, type: !32)
!5478 = !DILocation(line: 3035, column: 8, scope: !5474)
!5479 = !DILocation(line: 3035, column: 20, scope: !5474)
!5480 = !DILocalVariable(name: "offset", scope: !5474, file: !3, line: 3036, type: !32)
!5481 = !DILocation(line: 3036, column: 8, scope: !5474)
!5482 = !DILocalVariable(name: "pmode", scope: !5474, file: !3, line: 3037, type: !50)
!5483 = !DILocation(line: 3037, column: 22, scope: !5474)
!5484 = !DILocation(line: 3040, column: 35, scope: !5474)
!5485 = !DILocation(line: 3040, column: 41, scope: !5474)
!5486 = !DILocation(line: 3041, column: 7, scope: !5474)
!5487 = !DILocation(line: 3040, column: 12, scope: !5474)
!5488 = !DILocation(line: 3040, column: 10, scope: !5474)
!5489 = !DILocation(line: 3042, column: 4, scope: !5474)
!5490 = !DILocation(line: 3056, column: 29, scope: !5474)
!5491 = !DILocation(line: 3056, column: 47, scope: !5474)
!5492 = !DILocation(line: 3056, column: 55, scope: !5474)
!5493 = !DILocation(line: 3056, column: 13, scope: !5474)
!5494 = !DILocation(line: 3056, column: 11, scope: !5474)
!5495 = !DILocation(line: 3057, column: 4, scope: !5474)
!5496 = !DILocation(line: 3057, column: 35, scope: !5474)
!5497 = !DILocation(line: 3058, column: 4, scope: !5474)
!5498 = !DILocalVariable(name: "_rtx", scope: !5499, file: !3, line: 3058, type: !5500)
!5499 = distinct !DILexicalBlock(scope: !5474, file: !3, line: 3058, column: 4)
!5500 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !6)
!5501 = !DILocation(line: 3058, column: 4, scope: !5499)
!5502 = !DILocation(line: 3058, column: 4, scope: !5503)
!5503 = distinct !DILexicalBlock(scope: !5499, file: !3, line: 3058, column: 4)
!5504 = !DILocation(line: 3058, column: 4, scope: !5505)
!5505 = distinct !DILexicalBlock(scope: !5503, file: !3, line: 3058, column: 4)
!5506 = !DILocation(line: 3059, column: 2, scope: !5474)
!5507 = !DILocation(line: 3064, column: 11, scope: !5508)
!5508 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3064, column: 11)
!5509 = !DILocation(line: 3064, column: 11, scope: !4596)
!5510 = !DILocation(line: 3066, column: 36, scope: !5511)
!5511 = distinct !DILexicalBlock(scope: !5508, file: !3, line: 3065, column: 2)
!5512 = !DILocation(line: 3066, column: 4, scope: !5511)
!5513 = !DILocation(line: 3067, column: 26, scope: !5511)
!5514 = !DILocation(line: 3067, column: 24, scope: !5511)
!5515 = !DILocation(line: 3068, column: 27, scope: !5511)
!5516 = !DILocation(line: 3068, column: 25, scope: !5511)
!5517 = !DILocation(line: 3069, column: 26, scope: !5511)
!5518 = !DILocation(line: 3069, column: 48, scope: !5511)
!5519 = !DILocation(line: 3069, column: 46, scope: !5511)
!5520 = !DILocation(line: 3069, column: 24, scope: !5511)
!5521 = !DILocation(line: 3070, column: 35, scope: !5511)
!5522 = !DILocation(line: 3070, column: 33, scope: !5511)
!5523 = !DILocation(line: 3071, column: 34, scope: !5511)
!5524 = !DILocation(line: 3071, column: 32, scope: !5511)
!5525 = !DILocation(line: 3072, column: 22, scope: !5511)
!5526 = !DILocation(line: 3072, column: 20, scope: !5511)
!5527 = !DILocation(line: 3073, column: 20, scope: !5511)
!5528 = !DILocation(line: 3074, column: 2, scope: !5511)
!5529 = !DILocation(line: 3075, column: 16, scope: !5530)
!5530 = distinct !DILexicalBlock(scope: !5508, file: !3, line: 3075, column: 16)
!5531 = !DILocation(line: 3075, column: 41, scope: !5530)
!5532 = !DILocation(line: 3075, column: 44, scope: !5530)
!5533 = !DILocation(line: 3075, column: 16, scope: !5508)
!5534 = !DILocation(line: 3078, column: 8, scope: !5535)
!5535 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 3078, column: 8)
!5536 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 3076, column: 2)
!5537 = !DILocation(line: 3078, column: 8, scope: !5536)
!5538 = !DILocation(line: 3079, column: 35, scope: !5535)
!5539 = !DILocation(line: 3079, column: 46, scope: !5535)
!5540 = !DILocation(line: 3080, column: 7, scope: !5535)
!5541 = !DILocation(line: 3080, column: 21, scope: !5535)
!5542 = !DILocation(line: 3079, column: 6, scope: !5535)
!5543 = !DILocation(line: 3084, column: 11, scope: !5544)
!5544 = distinct !DILexicalBlock(scope: !5536, file: !3, line: 3084, column: 4)
!5545 = !DILocation(line: 3084, column: 9, scope: !5544)
!5546 = !DILocation(line: 3084, column: 16, scope: !5547)
!5547 = distinct !DILexicalBlock(scope: !5544, file: !3, line: 3084, column: 4)
!5548 = !DILocation(line: 3084, column: 20, scope: !5547)
!5549 = !DILocation(line: 3084, column: 18, scope: !5547)
!5550 = !DILocation(line: 3084, column: 4, scope: !5544)
!5551 = !DILocation(line: 3085, column: 10, scope: !5552)
!5552 = distinct !DILexicalBlock(scope: !5547, file: !3, line: 3085, column: 10)
!5553 = !DILocation(line: 3085, column: 15, scope: !5552)
!5554 = !DILocation(line: 3085, column: 18, scope: !5552)
!5555 = !DILocation(line: 3085, column: 10, scope: !5547)
!5556 = !DILocalVariable(name: "save_mode", scope: !5557, file: !3, line: 3087, type: !50)
!5557 = distinct !DILexicalBlock(scope: !5552, file: !3, line: 3086, column: 8)
!5558 = !DILocation(line: 3087, column: 21, scope: !5557)
!5559 = !DILocation(line: 3087, column: 33, scope: !5557)
!5560 = !DILocalVariable(name: "stack_area", scope: !5557, file: !3, line: 3088, type: !6)
!5561 = !DILocation(line: 3088, column: 7, scope: !5557)
!5562 = !DILocation(line: 3089, column: 20, scope: !5557)
!5563 = !DILocation(line: 3090, column: 6, scope: !5557)
!5564 = !DILocation(line: 3089, column: 7, scope: !5557)
!5565 = !DILocation(line: 3093, column: 7, scope: !5566)
!5566 = distinct !DILexicalBlock(scope: !5557, file: !3, line: 3093, column: 7)
!5567 = !DILocation(line: 3093, column: 17, scope: !5566)
!5568 = !DILocation(line: 3093, column: 7, scope: !5557)
!5569 = !DILocation(line: 3094, column: 21, scope: !5566)
!5570 = !DILocation(line: 3094, column: 33, scope: !5566)
!5571 = !DILocation(line: 3094, column: 38, scope: !5566)
!5572 = !DILocation(line: 3094, column: 41, scope: !5566)
!5573 = !DILocation(line: 3094, column: 5, scope: !5566)
!5574 = !DILocation(line: 3096, column: 22, scope: !5566)
!5575 = !DILocation(line: 3096, column: 34, scope: !5566)
!5576 = !DILocation(line: 3096, column: 39, scope: !5566)
!5577 = !DILocation(line: 3096, column: 42, scope: !5566)
!5578 = !DILocation(line: 3097, column: 8, scope: !5566)
!5579 = !DILocation(line: 3096, column: 5, scope: !5566)
!5580 = !DILocation(line: 3099, column: 8, scope: !5557)
!5581 = !DILocation(line: 3084, column: 34, scope: !5547)
!5582 = !DILocation(line: 3084, column: 4, scope: !5547)
!5583 = distinct !{!5583, !5550, !5584}
!5584 = !DILocation(line: 3099, column: 8, scope: !5544)
!5585 = !DILocation(line: 3101, column: 34, scope: !5536)
!5586 = !DILocation(line: 3101, column: 32, scope: !5536)
!5587 = !DILocation(line: 3102, column: 22, scope: !5536)
!5588 = !DILocation(line: 3102, column: 20, scope: !5536)
!5589 = !DILocation(line: 3103, column: 2, scope: !5536)
!5590 = !DILocation(line: 3109, column: 12, scope: !5591)
!5591 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3109, column: 11)
!5592 = !DILocation(line: 3109, column: 18, scope: !5591)
!5593 = !DILocation(line: 3109, column: 39, scope: !5591)
!5594 = !DILocation(line: 3109, column: 42, scope: !5591)
!5595 = !DILocation(line: 3109, column: 48, scope: !5591)
!5596 = !DILocation(line: 3109, column: 72, scope: !5591)
!5597 = !DILocation(line: 3109, column: 11, scope: !4596)
!5598 = !DILocation(line: 3110, column: 2, scope: !5591)
!5599 = !DILocation(line: 3113, column: 14, scope: !5600)
!5600 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3113, column: 7)
!5601 = !DILocation(line: 3113, column: 12, scope: !5600)
!5602 = !DILocation(line: 3113, column: 19, scope: !5603)
!5603 = distinct !DILexicalBlock(scope: !5600, file: !3, line: 3113, column: 7)
!5604 = !DILocation(line: 3113, column: 23, scope: !5603)
!5605 = !DILocation(line: 3113, column: 21, scope: !5603)
!5606 = !DILocation(line: 3113, column: 7, scope: !5600)
!5607 = !DILocation(line: 3114, column: 6, scope: !5608)
!5608 = distinct !DILexicalBlock(scope: !5603, file: !3, line: 3114, column: 6)
!5609 = !DILocation(line: 3114, column: 11, scope: !5608)
!5610 = !DILocation(line: 3114, column: 14, scope: !5608)
!5611 = !DILocation(line: 3114, column: 6, scope: !5603)
!5612 = !DILocation(line: 3115, column: 10, scope: !5608)
!5613 = !DILocation(line: 3115, column: 15, scope: !5608)
!5614 = !DILocation(line: 3115, column: 18, scope: !5608)
!5615 = !DILocation(line: 3115, column: 4, scope: !5608)
!5616 = !DILocation(line: 3113, column: 36, scope: !5603)
!5617 = !DILocation(line: 3113, column: 7, scope: !5603)
!5618 = distinct !{!5618, !5606, !5619}
!5619 = !DILocation(line: 3115, column: 30, scope: !5600)
!5620 = !DILocation(line: 3117, column: 15, scope: !4596)
!5621 = !DILocation(line: 3117, column: 13, scope: !4596)
!5622 = !DILocation(line: 3118, column: 7, scope: !4596)
!5623 = !DILocation(line: 3120, column: 11, scope: !5624)
!5624 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3120, column: 11)
!5625 = !DILocation(line: 3120, column: 16, scope: !5624)
!5626 = !DILocation(line: 3120, column: 11, scope: !4596)
!5627 = !DILocation(line: 3122, column: 22, scope: !5628)
!5628 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 3121, column: 2)
!5629 = !DILocation(line: 3122, column: 20, scope: !5628)
!5630 = !DILocation(line: 3127, column: 27, scope: !5628)
!5631 = !DILocation(line: 3127, column: 25, scope: !5628)
!5632 = !DILocation(line: 3128, column: 26, scope: !5628)
!5633 = !DILocation(line: 3128, column: 24, scope: !5628)
!5634 = !DILocation(line: 3131, column: 11, scope: !5635)
!5635 = distinct !DILexicalBlock(scope: !5628, file: !3, line: 3131, column: 4)
!5636 = !DILocation(line: 3131, column: 9, scope: !5635)
!5637 = !DILocation(line: 3131, column: 16, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5635, file: !3, line: 3131, column: 4)
!5639 = !DILocation(line: 3131, column: 20, scope: !5638)
!5640 = !DILocation(line: 3131, column: 18, scope: !5638)
!5641 = !DILocation(line: 3131, column: 4, scope: !5635)
!5642 = !DILocation(line: 3133, column: 8, scope: !5643)
!5643 = distinct !DILexicalBlock(scope: !5638, file: !3, line: 3132, column: 6)
!5644 = !DILocation(line: 3133, column: 13, scope: !5643)
!5645 = !DILocation(line: 3133, column: 16, scope: !5643)
!5646 = !DILocation(line: 3133, column: 22, scope: !5643)
!5647 = !DILocation(line: 3134, column: 8, scope: !5643)
!5648 = !DILocation(line: 3134, column: 13, scope: !5643)
!5649 = !DILocation(line: 3134, column: 16, scope: !5643)
!5650 = !DILocation(line: 3134, column: 29, scope: !5643)
!5651 = !DILocation(line: 3135, column: 8, scope: !5643)
!5652 = !DILocation(line: 3135, column: 13, scope: !5643)
!5653 = !DILocation(line: 3135, column: 16, scope: !5643)
!5654 = !DILocation(line: 3135, column: 22, scope: !5643)
!5655 = !DILocation(line: 3136, column: 6, scope: !5643)
!5656 = !DILocation(line: 3131, column: 34, scope: !5638)
!5657 = !DILocation(line: 3131, column: 4, scope: !5638)
!5658 = distinct !{!5658, !5641, !5659}
!5659 = !DILocation(line: 3136, column: 6, scope: !5635)
!5660 = !DILocation(line: 3138, column: 4, scope: !5628)
!5661 = !DILocation(line: 3139, column: 2, scope: !5628)
!5662 = !DILocation(line: 3142, column: 24, scope: !5663)
!5663 = distinct !DILexicalBlock(scope: !5624, file: !3, line: 3141, column: 2)
!5664 = !DILocation(line: 3142, column: 22, scope: !5663)
!5665 = !DILocation(line: 3145, column: 4, scope: !5663)
!5666 = !DILocation(line: 3152, column: 11, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !4596, file: !3, line: 3152, column: 11)
!5668 = !DILocation(line: 3152, column: 11, scope: !4596)
!5669 = !DILocation(line: 3153, column: 18, scope: !5667)
!5670 = !DILocation(line: 3153, column: 2, scope: !5667)
!5671 = !DILocation(line: 3155, column: 2, scope: !5667)
!5672 = !DILocation(line: 3156, column: 5, scope: !4596)
!5673 = !DILocation(line: 2375, column: 52, scope: !4592)
!5674 = !DILocation(line: 2375, column: 3, scope: !4592)
!5675 = distinct !{!5675, !4594, !5676}
!5676 = !DILocation(line: 3156, column: 5, scope: !4588)
!5677 = !DILocation(line: 3160, column: 7, scope: !5678)
!5678 = distinct !DILexicalBlock(scope: !2, file: !3, line: 3160, column: 7)
!5679 = !DILocation(line: 3160, column: 7, scope: !2)
!5680 = !DILocation(line: 3162, column: 18, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5678, file: !3, line: 3161, column: 5)
!5682 = !DILocation(line: 3162, column: 7, scope: !5681)
!5683 = !DILocation(line: 3163, column: 28, scope: !5681)
!5684 = !DILocation(line: 3164, column: 5, scope: !5681)
!5685 = !DILocation(line: 3166, column: 16, scope: !5678)
!5686 = !DILocation(line: 3166, column: 5, scope: !5678)
!5687 = !DILocation(line: 3168, column: 27, scope: !2)
!5688 = !DILocation(line: 3170, column: 7, scope: !5689)
!5689 = distinct !DILexicalBlock(scope: !2, file: !3, line: 3170, column: 7)
!5690 = !DILocation(line: 3170, column: 7, scope: !2)
!5691 = !DILocation(line: 3171, column: 11, scope: !5689)
!5692 = !DILocation(line: 3171, column: 5, scope: !5689)
!5693 = !DILocation(line: 3173, column: 10, scope: !2)
!5694 = !DILocation(line: 3173, column: 3, scope: !2)
!5695 = !DILocation(line: 3174, column: 1, scope: !2)
!5696 = distinct !DISubprogram(name: "first_call_expr_arg", scope: !261, file: !261, line: 5419, type: !5697, scopeLine: 5420, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!5697 = !DISubroutineType(types: !5698)
!5698 = !{!258, !258, !5699}
!5699 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4168, size: 64)
!5700 = !DILocalVariable(name: "exp", arg: 1, scope: !5696, file: !261, line: 5419, type: !258)
!5701 = !DILocation(line: 5419, column: 27, scope: !5696)
!5702 = !DILocalVariable(name: "iter", arg: 2, scope: !5696, file: !261, line: 5419, type: !5699)
!5703 = !DILocation(line: 5419, column: 56, scope: !5696)
!5704 = !DILocation(line: 5421, column: 32, scope: !5696)
!5705 = !DILocation(line: 5421, column: 37, scope: !5696)
!5706 = !DILocation(line: 5421, column: 3, scope: !5696)
!5707 = !DILocation(line: 5422, column: 30, scope: !5696)
!5708 = !DILocation(line: 5422, column: 10, scope: !5696)
!5709 = !DILocation(line: 5422, column: 3, scope: !5696)
!5710 = distinct !DISubprogram(name: "next_call_expr_arg", scope: !261, file: !261, line: 5393, type: !5711, scopeLine: 5394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!5711 = !DISubroutineType(types: !5712)
!5712 = !{!258, !5699}
!5713 = !DILocalVariable(name: "iter", arg: 1, scope: !5710, file: !261, line: 5393, type: !5699)
!5714 = !DILocation(line: 5393, column: 45, scope: !5710)
!5715 = !DILocalVariable(name: "result", scope: !5710, file: !261, line: 5395, type: !258)
!5716 = !DILocation(line: 5395, column: 8, scope: !5710)
!5717 = !DILocation(line: 5396, column: 7, scope: !5718)
!5718 = distinct !DILexicalBlock(scope: !5710, file: !261, line: 5396, column: 7)
!5719 = !DILocation(line: 5396, column: 13, scope: !5718)
!5720 = !DILocation(line: 5396, column: 18, scope: !5718)
!5721 = !DILocation(line: 5396, column: 24, scope: !5718)
!5722 = !DILocation(line: 5396, column: 15, scope: !5718)
!5723 = !DILocation(line: 5396, column: 7, scope: !5710)
!5724 = !DILocation(line: 5397, column: 5, scope: !5718)
!5725 = !DILocation(line: 5398, column: 12, scope: !5710)
!5726 = !DILocation(line: 5398, column: 10, scope: !5710)
!5727 = !DILocation(line: 5399, column: 3, scope: !5710)
!5728 = !DILocation(line: 5399, column: 9, scope: !5710)
!5729 = !DILocation(line: 5399, column: 10, scope: !5710)
!5730 = !DILocation(line: 5400, column: 10, scope: !5710)
!5731 = !DILocation(line: 5400, column: 3, scope: !5710)
!5732 = !DILocation(line: 5401, column: 1, scope: !5710)
!5733 = distinct !DISubprogram(name: "expand_expr", scope: !2139, file: !2139, line: 555, type: !5734, scopeLine: 557, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!5734 = !DISubroutineType(types: !5735)
!5735 = !{!6, !258, !6, !50, !3024}
!5736 = !DILocalVariable(name: "exp", arg: 1, scope: !5733, file: !2139, line: 555, type: !258)
!5737 = !DILocation(line: 555, column: 19, scope: !5733)
!5738 = !DILocalVariable(name: "target", arg: 2, scope: !5733, file: !2139, line: 555, type: !6)
!5739 = !DILocation(line: 555, column: 28, scope: !5733)
!5740 = !DILocalVariable(name: "mode", arg: 3, scope: !5733, file: !2139, line: 555, type: !50)
!5741 = !DILocation(line: 555, column: 54, scope: !5733)
!5742 = !DILocalVariable(name: "modifier", arg: 4, scope: !5733, file: !2139, line: 556, type: !3024)
!5743 = !DILocation(line: 556, column: 28, scope: !5733)
!5744 = !DILocation(line: 558, column: 28, scope: !5733)
!5745 = !DILocation(line: 558, column: 33, scope: !5733)
!5746 = !DILocation(line: 558, column: 41, scope: !5733)
!5747 = !DILocation(line: 558, column: 47, scope: !5733)
!5748 = !DILocation(line: 558, column: 10, scope: !5733)
!5749 = !DILocation(line: 558, column: 3, scope: !5733)
!5750 = distinct !DISubprogram(name: "split_complex_types", scope: !3, file: !3, line: 3214, type: !5751, scopeLine: 3215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!5751 = !DISubroutineType(types: !5752)
!5752 = !{!258, !258}
!5753 = !DILocalVariable(name: "types", arg: 1, scope: !5750, file: !3, line: 3214, type: !258)
!5754 = !DILocation(line: 3214, column: 27, scope: !5750)
!5755 = !DILocalVariable(name: "p", scope: !5750, file: !3, line: 3216, type: !258)
!5756 = !DILocation(line: 3216, column: 8, scope: !5750)
!5757 = !DILocation(line: 3219, column: 12, scope: !5758)
!5758 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 3219, column: 3)
!5759 = !DILocation(line: 3219, column: 10, scope: !5758)
!5760 = !DILocation(line: 3219, column: 8, scope: !5758)
!5761 = !DILocation(line: 3219, column: 19, scope: !5762)
!5762 = distinct !DILexicalBlock(scope: !5758, file: !3, line: 3219, column: 3)
!5763 = !DILocation(line: 3219, column: 3, scope: !5758)
!5764 = !DILocalVariable(name: "type", scope: !5765, file: !3, line: 3221, type: !258)
!5765 = distinct !DILexicalBlock(scope: !5762, file: !3, line: 3220, column: 5)
!5766 = !DILocation(line: 3221, column: 12, scope: !5765)
!5767 = !DILocation(line: 3221, column: 19, scope: !5765)
!5768 = !DILocation(line: 3222, column: 11, scope: !5769)
!5769 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 3222, column: 11)
!5770 = !DILocation(line: 3222, column: 28, scope: !5769)
!5771 = !DILocation(line: 3223, column: 4, scope: !5769)
!5772 = !DILocation(line: 3223, column: 21, scope: !5769)
!5773 = !DILocation(line: 3223, column: 40, scope: !5769)
!5774 = !DILocation(line: 3223, column: 7, scope: !5769)
!5775 = !DILocation(line: 3222, column: 11, scope: !5765)
!5776 = !DILocation(line: 3224, column: 2, scope: !5769)
!5777 = !DILocation(line: 3225, column: 5, scope: !5765)
!5778 = !DILocation(line: 3219, column: 26, scope: !5762)
!5779 = !DILocation(line: 3219, column: 24, scope: !5762)
!5780 = !DILocation(line: 3219, column: 3, scope: !5762)
!5781 = distinct !{!5781, !5763, !5782}
!5782 = !DILocation(line: 3225, column: 5, scope: !5758)
!5783 = !DILocation(line: 3226, column: 10, scope: !5750)
!5784 = !DILocation(line: 3226, column: 3, scope: !5750)
!5785 = !DILabel(scope: !5750, name: "found", file: !3, line: 3228)
!5786 = !DILocation(line: 3228, column: 2, scope: !5750)
!5787 = !DILocation(line: 3229, column: 22, scope: !5750)
!5788 = !DILocation(line: 3229, column: 11, scope: !5750)
!5789 = !DILocation(line: 3229, column: 9, scope: !5750)
!5790 = !DILocation(line: 3231, column: 12, scope: !5791)
!5791 = distinct !DILexicalBlock(scope: !5750, file: !3, line: 3231, column: 3)
!5792 = !DILocation(line: 3231, column: 10, scope: !5791)
!5793 = !DILocation(line: 3231, column: 8, scope: !5791)
!5794 = !DILocation(line: 3231, column: 19, scope: !5795)
!5795 = distinct !DILexicalBlock(scope: !5791, file: !3, line: 3231, column: 3)
!5796 = !DILocation(line: 3231, column: 3, scope: !5791)
!5797 = !DILocalVariable(name: "complex_type", scope: !5798, file: !3, line: 3233, type: !258)
!5798 = distinct !DILexicalBlock(scope: !5795, file: !3, line: 3232, column: 5)
!5799 = !DILocation(line: 3233, column: 12, scope: !5798)
!5800 = !DILocation(line: 3233, column: 27, scope: !5798)
!5801 = !DILocation(line: 3235, column: 11, scope: !5802)
!5802 = distinct !DILexicalBlock(scope: !5798, file: !3, line: 3235, column: 11)
!5803 = !DILocation(line: 3235, column: 36, scope: !5802)
!5804 = !DILocation(line: 3236, column: 4, scope: !5802)
!5805 = !DILocation(line: 3236, column: 21, scope: !5802)
!5806 = !DILocation(line: 3236, column: 40, scope: !5802)
!5807 = !DILocation(line: 3236, column: 7, scope: !5802)
!5808 = !DILocation(line: 3235, column: 11, scope: !5798)
!5809 = !DILocalVariable(name: "next", scope: !5810, file: !3, line: 3238, type: !258)
!5810 = distinct !DILexicalBlock(scope: !5802, file: !3, line: 3237, column: 2)
!5811 = !DILocation(line: 3238, column: 9, scope: !5810)
!5812 = !DILocalVariable(name: "imag", scope: !5810, file: !3, line: 3238, type: !258)
!5813 = !DILocation(line: 3238, column: 15, scope: !5810)
!5814 = !DILocation(line: 3241, column: 21, scope: !5810)
!5815 = !DILocation(line: 3241, column: 4, scope: !5810)
!5816 = !DILocation(line: 3241, column: 19, scope: !5810)
!5817 = !DILocation(line: 3242, column: 11, scope: !5810)
!5818 = !DILocation(line: 3242, column: 9, scope: !5810)
!5819 = !DILocation(line: 3245, column: 11, scope: !5810)
!5820 = !DILocation(line: 3245, column: 9, scope: !5810)
!5821 = !DILocation(line: 3246, column: 21, scope: !5810)
!5822 = !DILocation(line: 3246, column: 4, scope: !5810)
!5823 = !DILocation(line: 3246, column: 19, scope: !5810)
!5824 = !DILocation(line: 3247, column: 24, scope: !5810)
!5825 = !DILocation(line: 3247, column: 4, scope: !5810)
!5826 = !DILocation(line: 3247, column: 22, scope: !5810)
!5827 = !DILocation(line: 3250, column: 8, scope: !5810)
!5828 = !DILocation(line: 3250, column: 6, scope: !5810)
!5829 = !DILocation(line: 3251, column: 2, scope: !5810)
!5830 = !DILocation(line: 3252, column: 5, scope: !5798)
!5831 = !DILocation(line: 3231, column: 26, scope: !5795)
!5832 = !DILocation(line: 3231, column: 24, scope: !5795)
!5833 = !DILocation(line: 3231, column: 3, scope: !5795)
!5834 = distinct !{!5834, !5796, !5835}
!5835 = !DILocation(line: 3252, column: 5, scope: !5791)
!5836 = !DILocation(line: 3254, column: 10, scope: !5750)
!5837 = !DILocation(line: 3254, column: 3, scope: !5750)
!5838 = !DILocation(line: 3255, column: 1, scope: !5750)
!5839 = distinct !DISubprogram(name: "initialize_argument_information", scope: !3, file: !3, line: 932, type: !5840, scopeLine: 943, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!5840 = !DISubroutineType(types: !5841)
!5841 = !{null, !32, !3453, !5842, !32, !258, !258, !258, !258, !5843, !32, !3483, !5844, !5844, !5844, !3520, !372}
!5842 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3470, size: 64)
!5843 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4039, size: 64)
!5844 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !32, size: 64)
!5845 = !DILocalVariable(name: "num_actuals", arg: 1, scope: !5839, file: !3, line: 932, type: !32)
!5846 = !DILocation(line: 932, column: 38, scope: !5839)
!5847 = !DILocalVariable(name: "args", arg: 2, scope: !5839, file: !3, line: 933, type: !3453)
!5848 = !DILocation(line: 933, column: 23, scope: !5839)
!5849 = !DILocalVariable(name: "args_size", arg: 3, scope: !5839, file: !3, line: 934, type: !5842)
!5850 = !DILocation(line: 934, column: 24, scope: !5839)
!5851 = !DILocalVariable(name: "n_named_args", arg: 4, scope: !5839, file: !3, line: 935, type: !32)
!5852 = !DILocation(line: 935, column: 10, scope: !5839)
!5853 = !DILocalVariable(name: "exp", arg: 5, scope: !5839, file: !3, line: 936, type: !258)
!5854 = !DILocation(line: 936, column: 11, scope: !5839)
!5855 = !DILocalVariable(name: "struct_value_addr_value", arg: 6, scope: !5839, file: !3, line: 936, type: !258)
!5856 = !DILocation(line: 936, column: 21, scope: !5839)
!5857 = !DILocalVariable(name: "fndecl", arg: 7, scope: !5839, file: !3, line: 937, type: !258)
!5858 = !DILocation(line: 937, column: 11, scope: !5839)
!5859 = !DILocalVariable(name: "fntype", arg: 8, scope: !5839, file: !3, line: 937, type: !258)
!5860 = !DILocation(line: 937, column: 24, scope: !5839)
!5861 = !DILocalVariable(name: "args_so_far", arg: 9, scope: !5839, file: !3, line: 938, type: !5843)
!5862 = !DILocation(line: 938, column: 23, scope: !5839)
!5863 = !DILocalVariable(name: "reg_parm_stack_space", arg: 10, scope: !5839, file: !3, line: 939, type: !32)
!5864 = !DILocation(line: 939, column: 10, scope: !5839)
!5865 = !DILocalVariable(name: "old_stack_level", arg: 11, scope: !5839, file: !3, line: 940, type: !3483)
!5866 = !DILocation(line: 940, column: 11, scope: !5839)
!5867 = !DILocalVariable(name: "old_pending_adj", arg: 12, scope: !5839, file: !3, line: 940, type: !5844)
!5868 = !DILocation(line: 940, column: 33, scope: !5839)
!5869 = !DILocalVariable(name: "must_preallocate", arg: 13, scope: !5839, file: !3, line: 941, type: !5844)
!5870 = !DILocation(line: 941, column: 11, scope: !5839)
!5871 = !DILocalVariable(name: "ecf_flags", arg: 14, scope: !5839, file: !3, line: 941, type: !5844)
!5872 = !DILocation(line: 941, column: 34, scope: !5839)
!5873 = !DILocalVariable(name: "may_tailcall", arg: 15, scope: !5839, file: !3, line: 942, type: !3520)
!5874 = !DILocation(line: 942, column: 12, scope: !5839)
!5875 = !DILocalVariable(name: "call_from_thunk_p", arg: 16, scope: !5839, file: !3, line: 942, type: !372)
!5876 = !DILocation(line: 942, column: 31, scope: !5839)
!5877 = !DILocalVariable(name: "loc", scope: !5839, file: !3, line: 944, type: !380)
!5878 = !DILocation(line: 944, column: 14, scope: !5839)
!5879 = !DILocation(line: 944, column: 20, scope: !5839)
!5880 = !DILocalVariable(name: "inc", scope: !5839, file: !3, line: 946, type: !32)
!5881 = !DILocation(line: 946, column: 7, scope: !5839)
!5882 = !DILocalVariable(name: "argpos", scope: !5839, file: !3, line: 949, type: !32)
!5883 = !DILocation(line: 949, column: 7, scope: !5839)
!5884 = !DILocalVariable(name: "i", scope: !5839, file: !3, line: 951, type: !32)
!5885 = !DILocation(line: 951, column: 7, scope: !5839)
!5886 = !DILocation(line: 953, column: 3, scope: !5839)
!5887 = !DILocation(line: 953, column: 14, scope: !5839)
!5888 = !DILocation(line: 953, column: 23, scope: !5839)
!5889 = !DILocation(line: 954, column: 3, scope: !5839)
!5890 = !DILocation(line: 954, column: 14, scope: !5839)
!5891 = !DILocation(line: 954, column: 18, scope: !5839)
!5892 = !DILocation(line: 962, column: 11, scope: !5893)
!5893 = distinct !DILexicalBlock(scope: !5894, file: !3, line: 961, column: 5)
!5894 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 960, column: 7)
!5895 = !DILocation(line: 962, column: 23, scope: !5893)
!5896 = !DILocation(line: 962, column: 9, scope: !5893)
!5897 = !DILocation(line: 962, column: 32, scope: !5893)
!5898 = !DILocalVariable(name: "j", scope: !5899, file: !3, line: 974, type: !32)
!5899 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 973, column: 3)
!5900 = !DILocation(line: 974, column: 9, scope: !5899)
!5901 = !DILocation(line: 974, column: 13, scope: !5899)
!5902 = !DILocalVariable(name: "iter", scope: !5899, file: !3, line: 975, type: !4168)
!5903 = !DILocation(line: 975, column: 28, scope: !5899)
!5904 = !DILocalVariable(name: "arg", scope: !5899, file: !3, line: 976, type: !258)
!5905 = !DILocation(line: 976, column: 10, scope: !5899)
!5906 = !DILocation(line: 978, column: 9, scope: !5907)
!5907 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 978, column: 9)
!5908 = !DILocation(line: 978, column: 9, scope: !5899)
!5909 = !DILocation(line: 980, column: 23, scope: !5910)
!5910 = distinct !DILexicalBlock(scope: !5907, file: !3, line: 979, column: 7)
!5911 = !DILocation(line: 980, column: 2, scope: !5910)
!5912 = !DILocation(line: 980, column: 7, scope: !5910)
!5913 = !DILocation(line: 980, column: 10, scope: !5910)
!5914 = !DILocation(line: 980, column: 21, scope: !5910)
!5915 = !DILocation(line: 981, column: 7, scope: !5910)
!5916 = !DILocation(line: 981, column: 4, scope: !5910)
!5917 = !DILocation(line: 982, column: 7, scope: !5910)
!5918 = !DILocation(line: 983, column: 5, scope: !5919)
!5919 = distinct !DILexicalBlock(scope: !5899, file: !3, line: 983, column: 5)
!5920 = !DILocation(line: 983, column: 5, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5919, file: !3, line: 983, column: 5)
!5922 = !DILocalVariable(name: "argtype", scope: !5923, file: !3, line: 985, type: !258)
!5923 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 984, column: 7)
!5924 = !DILocation(line: 985, column: 7, scope: !5923)
!5925 = !DILocation(line: 985, column: 17, scope: !5923)
!5926 = !DILocation(line: 986, column: 20, scope: !5927)
!5927 = distinct !DILexicalBlock(scope: !5923, file: !3, line: 986, column: 6)
!5928 = !DILocation(line: 986, column: 6, scope: !5927)
!5929 = !DILocation(line: 987, column: 6, scope: !5927)
!5930 = !DILocation(line: 987, column: 9, scope: !5927)
!5931 = !DILocation(line: 988, column: 6, scope: !5927)
!5932 = !DILocation(line: 988, column: 9, scope: !5927)
!5933 = !DILocation(line: 988, column: 29, scope: !5927)
!5934 = !DILocation(line: 989, column: 6, scope: !5927)
!5935 = !DILocation(line: 989, column: 23, scope: !5927)
!5936 = !DILocation(line: 989, column: 42, scope: !5927)
!5937 = !DILocation(line: 989, column: 9, scope: !5927)
!5938 = !DILocation(line: 986, column: 6, scope: !5923)
!5939 = !DILocalVariable(name: "subtype", scope: !5940, file: !3, line: 991, type: !258)
!5940 = distinct !DILexicalBlock(scope: !5927, file: !3, line: 990, column: 4)
!5941 = !DILocation(line: 991, column: 11, scope: !5940)
!5942 = !DILocation(line: 991, column: 21, scope: !5940)
!5943 = !DILocation(line: 992, column: 27, scope: !5940)
!5944 = !DILocation(line: 992, column: 6, scope: !5940)
!5945 = !DILocation(line: 992, column: 11, scope: !5940)
!5946 = !DILocation(line: 992, column: 14, scope: !5940)
!5947 = !DILocation(line: 992, column: 25, scope: !5940)
!5948 = !DILocation(line: 993, column: 11, scope: !5940)
!5949 = !DILocation(line: 993, column: 8, scope: !5940)
!5950 = !DILocation(line: 994, column: 27, scope: !5940)
!5951 = !DILocation(line: 994, column: 6, scope: !5940)
!5952 = !DILocation(line: 994, column: 11, scope: !5940)
!5953 = !DILocation(line: 994, column: 14, scope: !5940)
!5954 = !DILocation(line: 994, column: 25, scope: !5940)
!5955 = !DILocation(line: 995, column: 4, scope: !5940)
!5956 = !DILocation(line: 997, column: 25, scope: !5927)
!5957 = !DILocation(line: 997, column: 4, scope: !5927)
!5958 = !DILocation(line: 997, column: 9, scope: !5927)
!5959 = !DILocation(line: 997, column: 12, scope: !5927)
!5960 = !DILocation(line: 997, column: 23, scope: !5927)
!5961 = !DILocation(line: 998, column: 7, scope: !5923)
!5962 = !DILocation(line: 998, column: 4, scope: !5923)
!5963 = !DILocation(line: 999, column: 7, scope: !5923)
!5964 = distinct !{!5964, !5918, !5965}
!5965 = !DILocation(line: 999, column: 7, scope: !5919)
!5966 = !DILocation(line: 1003, column: 15, scope: !5967)
!5967 = distinct !DILexicalBlock(scope: !5839, file: !3, line: 1003, column: 3)
!5968 = !DILocation(line: 1003, column: 8, scope: !5967)
!5969 = !DILocation(line: 1003, column: 20, scope: !5970)
!5970 = distinct !DILexicalBlock(scope: !5967, file: !3, line: 1003, column: 3)
!5971 = !DILocation(line: 1003, column: 29, scope: !5970)
!5972 = !DILocation(line: 1003, column: 27, scope: !5970)
!5973 = !DILocation(line: 1003, column: 3, scope: !5967)
!5974 = !DILocalVariable(name: "type", scope: !5975, file: !3, line: 1005, type: !258)
!5975 = distinct !DILexicalBlock(scope: !5970, file: !3, line: 1004, column: 5)
!5976 = !DILocation(line: 1005, column: 12, scope: !5975)
!5977 = !DILocation(line: 1005, column: 19, scope: !5975)
!5978 = !DILocalVariable(name: "unsignedp", scope: !5975, file: !3, line: 1006, type: !32)
!5979 = !DILocation(line: 1006, column: 11, scope: !5975)
!5980 = !DILocalVariable(name: "mode", scope: !5975, file: !3, line: 1007, type: !50)
!5981 = !DILocation(line: 1007, column: 25, scope: !5975)
!5982 = !DILocation(line: 1010, column: 11, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1010, column: 11)
!5984 = !DILocation(line: 1010, column: 19, scope: !5983)
!5985 = !DILocation(line: 1010, column: 16, scope: !5983)
!5986 = !DILocation(line: 1010, column: 35, scope: !5983)
!5987 = !DILocation(line: 1010, column: 39, scope: !5983)
!5988 = !DILocation(line: 1010, column: 11, scope: !5975)
!5989 = !DILocation(line: 1011, column: 23, scope: !5983)
!5990 = !DILocation(line: 1011, column: 2, scope: !5983)
!5991 = !DILocation(line: 1011, column: 7, scope: !5983)
!5992 = !DILocation(line: 1011, column: 10, scope: !5983)
!5993 = !DILocation(line: 1011, column: 21, scope: !5983)
!5994 = !DILocation(line: 1011, column: 49, scope: !5983)
!5995 = !DILocation(line: 1011, column: 47, scope: !5983)
!5996 = !DILocation(line: 1016, column: 12, scope: !5997)
!5997 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1016, column: 11)
!5998 = !DILocation(line: 1016, column: 29, scope: !5997)
!5999 = !DILocation(line: 1016, column: 43, scope: !5997)
!6000 = !DILocation(line: 1016, column: 46, scope: !5997)
!6001 = !DILocation(line: 1016, column: 63, scope: !5997)
!6002 = !DILocation(line: 1017, column: 5, scope: !5997)
!6003 = !DILocation(line: 1017, column: 8, scope: !5997)
!6004 = !DILocation(line: 1016, column: 11, scope: !5975)
!6005 = !DILocation(line: 1018, column: 9, scope: !5997)
!6006 = !DILocation(line: 1018, column: 7, scope: !5997)
!6007 = !DILocation(line: 1018, column: 2, scope: !5997)
!6008 = !DILocation(line: 1035, column: 30, scope: !6009)
!6009 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1035, column: 11)
!6010 = !DILocation(line: 1035, column: 43, scope: !6009)
!6011 = !DILocation(line: 1036, column: 9, scope: !6009)
!6012 = !DILocation(line: 1036, column: 15, scope: !6009)
!6013 = !DILocation(line: 1036, column: 24, scope: !6009)
!6014 = !DILocation(line: 1036, column: 22, scope: !6009)
!6015 = !DILocation(line: 1035, column: 11, scope: !6009)
!6016 = !DILocation(line: 1035, column: 11, scope: !5975)
!6017 = !DILocalVariable(name: "callee_copies", scope: !6018, file: !3, line: 1038, type: !372)
!6018 = distinct !DILexicalBlock(scope: !6009, file: !3, line: 1037, column: 2)
!6019 = !DILocation(line: 1038, column: 9, scope: !6018)
!6020 = !DILocalVariable(name: "base", scope: !6018, file: !3, line: 1039, type: !258)
!6021 = !DILocation(line: 1039, column: 9, scope: !6018)
!6022 = !DILocation(line: 1042, column: 33, scope: !6018)
!6023 = !DILocation(line: 1042, column: 46, scope: !6018)
!6024 = !DILocation(line: 1043, column: 12, scope: !6018)
!6025 = !DILocation(line: 1043, column: 18, scope: !6018)
!6026 = !DILocation(line: 1043, column: 27, scope: !6018)
!6027 = !DILocation(line: 1043, column: 25, scope: !6018)
!6028 = !DILocation(line: 1042, column: 8, scope: !6018)
!6029 = !DILocation(line: 1042, column: 6, scope: !6018)
!6030 = !DILocation(line: 1047, column: 8, scope: !6031)
!6031 = distinct !DILexicalBlock(scope: !6018, file: !3, line: 1047, column: 8)
!6032 = !DILocation(line: 1048, column: 8, scope: !6031)
!6033 = !DILocation(line: 1048, column: 12, scope: !6031)
!6034 = !DILocation(line: 1049, column: 5, scope: !6031)
!6035 = !DILocation(line: 1049, column: 9, scope: !6031)
!6036 = !DILocation(line: 1050, column: 5, scope: !6031)
!6037 = !DILocation(line: 1050, column: 34, scope: !6031)
!6038 = !DILocation(line: 1050, column: 39, scope: !6031)
!6039 = !DILocation(line: 1050, column: 42, scope: !6031)
!6040 = !DILocation(line: 1050, column: 16, scope: !6031)
!6041 = !DILocation(line: 1050, column: 14, scope: !6031)
!6042 = !DILocation(line: 1051, column: 5, scope: !6031)
!6043 = !DILocation(line: 1051, column: 8, scope: !6031)
!6044 = !DILocation(line: 1051, column: 25, scope: !6031)
!6045 = !DILocation(line: 1052, column: 5, scope: !6031)
!6046 = !DILocation(line: 1052, column: 10, scope: !6031)
!6047 = !DILocation(line: 1052, column: 24, scope: !6031)
!6048 = !DILocation(line: 1052, column: 27, scope: !6031)
!6049 = !DILocation(line: 1047, column: 8, scope: !6018)
!6050 = !DILocation(line: 1056, column: 13, scope: !6051)
!6051 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 1056, column: 12)
!6052 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 1053, column: 6)
!6053 = !DILocation(line: 1056, column: 31, scope: !6051)
!6054 = !DILocation(line: 1056, column: 34, scope: !6051)
!6055 = !DILocation(line: 1056, column: 48, scope: !6051)
!6056 = !DILocation(line: 1056, column: 52, scope: !6051)
!6057 = !DILocation(line: 1056, column: 12, scope: !6052)
!6058 = !DILocation(line: 1057, column: 4, scope: !6051)
!6059 = !DILocation(line: 1057, column: 17, scope: !6051)
!6060 = !DILocation(line: 1057, column: 3, scope: !6051)
!6061 = !DILocation(line: 1059, column: 55, scope: !6052)
!6062 = !DILocation(line: 1060, column: 9, scope: !6052)
!6063 = !DILocation(line: 1060, column: 14, scope: !6052)
!6064 = !DILocation(line: 1060, column: 17, scope: !6052)
!6065 = !DILocation(line: 1059, column: 29, scope: !6052)
!6066 = !DILocation(line: 1059, column: 8, scope: !6052)
!6067 = !DILocation(line: 1059, column: 13, scope: !6052)
!6068 = !DILocation(line: 1059, column: 16, scope: !6052)
!6069 = !DILocation(line: 1059, column: 27, scope: !6052)
!6070 = !DILocation(line: 1061, column: 15, scope: !6052)
!6071 = !DILocation(line: 1061, column: 13, scope: !6052)
!6072 = !DILocation(line: 1063, column: 13, scope: !6073)
!6073 = distinct !DILexicalBlock(scope: !6052, file: !3, line: 1063, column: 12)
!6074 = !DILocation(line: 1063, column: 12, scope: !6073)
!6075 = !DILocation(line: 1063, column: 23, scope: !6073)
!6076 = !DILocation(line: 1063, column: 12, scope: !6052)
!6077 = !DILocation(line: 1064, column: 4, scope: !6073)
!6078 = !DILocation(line: 1064, column: 14, scope: !6073)
!6079 = !DILocation(line: 1064, column: 3, scope: !6073)
!6080 = !DILocation(line: 1065, column: 6, scope: !6052)
!6081 = !DILocalVariable(name: "copy", scope: !6082, file: !3, line: 1070, type: !6)
!6082 = distinct !DILexicalBlock(scope: !6031, file: !3, line: 1067, column: 6)
!6083 = !DILocation(line: 1070, column: 12, scope: !6082)
!6084 = !DILocation(line: 1072, column: 13, scope: !6085)
!6085 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 1072, column: 12)
!6086 = !DILocation(line: 1073, column: 5, scope: !6085)
!6087 = !DILocation(line: 1073, column: 8, scope: !6085)
!6088 = !DILocation(line: 1073, column: 42, scope: !6085)
!6089 = !DILocation(line: 1074, column: 5, scope: !6085)
!6090 = !DILocation(line: 1074, column: 9, scope: !6085)
!6091 = !DILocation(line: 1074, column: 26, scope: !6085)
!6092 = !DILocation(line: 1075, column: 9, scope: !6085)
!6093 = !DILocation(line: 1075, column: 30, scope: !6085)
!6094 = !DILocation(line: 1075, column: 12, scope: !6085)
!6095 = !DILocation(line: 1076, column: 35, scope: !6085)
!6096 = !DILocation(line: 1072, column: 12, scope: !6082)
!6097 = !DILocalVariable(name: "size_rtx", scope: !6098, file: !3, line: 1080, type: !6)
!6098 = distinct !DILexicalBlock(scope: !6085, file: !3, line: 1077, column: 3)
!6099 = !DILocation(line: 1080, column: 9, scope: !6098)
!6100 = !DILocation(line: 1080, column: 31, scope: !6098)
!6101 = !DILocation(line: 1080, column: 36, scope: !6098)
!6102 = !DILocation(line: 1080, column: 39, scope: !6098)
!6103 = !DILocation(line: 1080, column: 20, scope: !6098)
!6104 = !DILocation(line: 1082, column: 10, scope: !6105)
!6105 = distinct !DILexicalBlock(scope: !6098, file: !3, line: 1082, column: 9)
!6106 = !DILocation(line: 1082, column: 9, scope: !6105)
!6107 = !DILocation(line: 1082, column: 26, scope: !6105)
!6108 = !DILocation(line: 1082, column: 9, scope: !6098)
!6109 = !DILocation(line: 1084, column: 38, scope: !6110)
!6110 = distinct !DILexicalBlock(scope: !6105, file: !3, line: 1083, column: 7)
!6111 = !DILocation(line: 1084, column: 9, scope: !6110)
!6112 = !DILocation(line: 1085, column: 28, scope: !6110)
!6113 = !DILocation(line: 1085, column: 10, scope: !6110)
!6114 = !DILocation(line: 1085, column: 26, scope: !6110)
!6115 = !DILocation(line: 1086, column: 30, scope: !6110)
!6116 = !DILocation(line: 1087, column: 7, scope: !6110)
!6117 = !DILocation(line: 1091, column: 12, scope: !6098)
!6118 = !DILocation(line: 1091, column: 32, scope: !6098)
!6119 = !DILocation(line: 1090, column: 11, scope: !6098)
!6120 = !DILocation(line: 1089, column: 12, scope: !6098)
!6121 = !DILocation(line: 1089, column: 10, scope: !6098)
!6122 = !DILocation(line: 1092, column: 25, scope: !6098)
!6123 = !DILocation(line: 1092, column: 31, scope: !6098)
!6124 = !DILocation(line: 1092, column: 5, scope: !6098)
!6125 = !DILocation(line: 1093, column: 3, scope: !6098)
!6126 = !DILocation(line: 1095, column: 23, scope: !6085)
!6127 = !DILocation(line: 1095, column: 10, scope: !6085)
!6128 = !DILocation(line: 1095, column: 8, scope: !6085)
!6129 = !DILocation(line: 1097, column: 20, scope: !6082)
!6130 = !DILocation(line: 1097, column: 25, scope: !6082)
!6131 = !DILocation(line: 1097, column: 28, scope: !6082)
!6132 = !DILocation(line: 1097, column: 40, scope: !6082)
!6133 = !DILocation(line: 1097, column: 8, scope: !6082)
!6134 = !DILocation(line: 1102, column: 13, scope: !6135)
!6135 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 1102, column: 12)
!6136 = !DILocation(line: 1102, column: 12, scope: !6135)
!6137 = !DILocation(line: 1102, column: 23, scope: !6135)
!6138 = !DILocation(line: 1102, column: 12, scope: !6082)
!6139 = !DILocation(line: 1104, column: 6, scope: !6140)
!6140 = distinct !DILexicalBlock(scope: !6135, file: !3, line: 1103, column: 3)
!6141 = !DILocation(line: 1104, column: 16, scope: !6140)
!6142 = !DILocation(line: 1105, column: 6, scope: !6140)
!6143 = !DILocation(line: 1105, column: 16, scope: !6140)
!6144 = !DILocation(line: 1106, column: 3, scope: !6140)
!6145 = !DILocation(line: 1108, column: 13, scope: !6146)
!6146 = distinct !DILexicalBlock(scope: !6082, file: !3, line: 1108, column: 12)
!6147 = !DILocation(line: 1108, column: 27, scope: !6146)
!6148 = !DILocation(line: 1108, column: 31, scope: !6146)
!6149 = !DILocation(line: 1108, column: 30, scope: !6146)
!6150 = !DILocation(line: 1108, column: 41, scope: !6146)
!6151 = !DILocation(line: 1108, column: 12, scope: !6082)
!6152 = !DILocation(line: 1109, column: 4, scope: !6146)
!6153 = !DILocation(line: 1109, column: 14, scope: !6146)
!6154 = !DILocation(line: 1109, column: 3, scope: !6146)
!6155 = !DILocation(line: 1112, column: 31, scope: !6082)
!6156 = !DILocation(line: 1112, column: 47, scope: !6082)
!6157 = !DILocation(line: 1112, column: 53, scope: !6082)
!6158 = !DILocation(line: 1112, column: 36, scope: !6082)
!6159 = !DILocation(line: 1112, column: 5, scope: !6082)
!6160 = !DILocation(line: 1111, column: 8, scope: !6082)
!6161 = !DILocation(line: 1111, column: 13, scope: !6082)
!6162 = !DILocation(line: 1111, column: 16, scope: !6082)
!6163 = !DILocation(line: 1112, column: 3, scope: !6082)
!6164 = !DILocation(line: 1113, column: 15, scope: !6082)
!6165 = !DILocation(line: 1113, column: 13, scope: !6082)
!6166 = !DILocation(line: 1114, column: 9, scope: !6082)
!6167 = !DILocation(line: 1114, column: 22, scope: !6082)
!6168 = !DILocation(line: 1116, column: 2, scope: !6018)
!6169 = !DILocation(line: 1118, column: 19, scope: !5975)
!6170 = !DILocation(line: 1118, column: 17, scope: !5975)
!6171 = !DILocation(line: 1119, column: 37, scope: !5975)
!6172 = !DILocation(line: 1119, column: 43, scope: !5975)
!6173 = !DILocation(line: 1120, column: 9, scope: !5975)
!6174 = !DILocation(line: 1120, column: 18, scope: !5975)
!6175 = !DILocation(line: 1120, column: 39, scope: !5975)
!6176 = !DILocation(line: 1119, column: 14, scope: !5975)
!6177 = !DILocation(line: 1119, column: 12, scope: !5975)
!6178 = !DILocation(line: 1122, column: 27, scope: !5975)
!6179 = !DILocation(line: 1122, column: 7, scope: !5975)
!6180 = !DILocation(line: 1122, column: 12, scope: !5975)
!6181 = !DILocation(line: 1122, column: 15, scope: !5975)
!6182 = !DILocation(line: 1122, column: 25, scope: !5975)
!6183 = !DILocation(line: 1123, column: 22, scope: !5975)
!6184 = !DILocation(line: 1123, column: 7, scope: !5975)
!6185 = !DILocation(line: 1123, column: 12, scope: !5975)
!6186 = !DILocation(line: 1123, column: 15, scope: !5975)
!6187 = !DILocation(line: 1123, column: 20, scope: !5975)
!6188 = !DILocation(line: 1125, column: 21, scope: !5975)
!6189 = !DILocation(line: 1125, column: 7, scope: !5975)
!6190 = !DILocation(line: 1125, column: 12, scope: !5975)
!6191 = !DILocation(line: 1125, column: 15, scope: !5975)
!6192 = !DILocation(line: 1125, column: 19, scope: !5975)
!6193 = !DILocation(line: 1134, column: 31, scope: !5975)
!6194 = !DILocation(line: 1134, column: 36, scope: !5975)
!6195 = !DILocation(line: 1134, column: 39, scope: !5975)
!6196 = !DILocation(line: 1134, column: 7, scope: !5975)
!6197 = !DILocation(line: 1134, column: 12, scope: !5975)
!6198 = !DILocation(line: 1134, column: 15, scope: !5975)
!6199 = !DILocation(line: 1134, column: 29, scope: !5975)
!6200 = !DILocation(line: 1137, column: 11, scope: !6201)
!6201 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1137, column: 11)
!6202 = !DILocation(line: 1137, column: 16, scope: !6201)
!6203 = !DILocation(line: 1137, column: 19, scope: !6201)
!6204 = !DILocation(line: 1137, column: 11, scope: !5975)
!6205 = !DILocation(line: 1139, column: 20, scope: !6201)
!6206 = !DILocation(line: 1139, column: 39, scope: !6201)
!6207 = !DILocation(line: 1139, column: 52, scope: !6201)
!6208 = !DILocation(line: 1139, column: 58, scope: !6201)
!6209 = !DILocation(line: 1140, column: 11, scope: !6201)
!6210 = !DILocation(line: 1140, column: 20, scope: !6201)
!6211 = !DILocation(line: 1140, column: 18, scope: !6201)
!6212 = !DILocation(line: 1139, column: 6, scope: !6201)
!6213 = !DILocation(line: 1138, column: 2, scope: !6201)
!6214 = !DILocation(line: 1138, column: 7, scope: !6201)
!6215 = !DILocation(line: 1138, column: 10, scope: !6201)
!6216 = !DILocation(line: 1139, column: 4, scope: !6201)
!6217 = !DILocation(line: 1142, column: 45, scope: !5975)
!6218 = !DILocation(line: 1142, column: 65, scope: !5975)
!6219 = !DILocation(line: 1142, column: 71, scope: !5975)
!6220 = !DILocation(line: 1142, column: 31, scope: !5975)
!6221 = !DILocation(line: 1142, column: 7, scope: !5975)
!6222 = !DILocation(line: 1142, column: 12, scope: !5975)
!6223 = !DILocation(line: 1142, column: 15, scope: !5975)
!6224 = !DILocation(line: 1142, column: 29, scope: !5975)
!6225 = !DILocation(line: 1147, column: 11, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1147, column: 11)
!6227 = !DILocation(line: 1147, column: 16, scope: !6226)
!6228 = !DILocation(line: 1147, column: 19, scope: !6226)
!6229 = !DILocation(line: 1147, column: 23, scope: !6226)
!6230 = !DILocation(line: 1147, column: 26, scope: !6226)
!6231 = !DILocation(line: 1147, column: 49, scope: !6226)
!6232 = !DILocation(line: 1148, column: 4, scope: !6226)
!6233 = !DILocation(line: 1148, column: 7, scope: !6226)
!6234 = !DILocation(line: 1148, column: 45, scope: !6226)
!6235 = !DILocation(line: 1147, column: 11, scope: !5975)
!6236 = !DILocation(line: 1149, column: 2, scope: !6226)
!6237 = !DILocation(line: 1149, column: 7, scope: !6226)
!6238 = !DILocation(line: 1149, column: 10, scope: !6226)
!6239 = !DILocation(line: 1149, column: 24, scope: !6226)
!6240 = !DILocation(line: 1156, column: 11, scope: !6241)
!6241 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1156, column: 11)
!6242 = !DILocation(line: 1157, column: 4, scope: !6241)
!6243 = !DILocation(line: 1157, column: 8, scope: !6241)
!6244 = !DILocation(line: 1157, column: 13, scope: !6241)
!6245 = !DILocation(line: 1157, column: 16, scope: !6241)
!6246 = !DILocation(line: 1157, column: 30, scope: !6241)
!6247 = !DILocation(line: 1157, column: 33, scope: !6241)
!6248 = !DILocation(line: 1157, column: 38, scope: !6241)
!6249 = !DILocation(line: 1157, column: 41, scope: !6241)
!6250 = !DILocation(line: 1157, column: 45, scope: !6241)
!6251 = !DILocation(line: 1156, column: 11, scope: !5975)
!6252 = !DILocation(line: 1158, column: 3, scope: !6241)
!6253 = !DILocation(line: 1158, column: 20, scope: !6241)
!6254 = !DILocation(line: 1158, column: 2, scope: !6241)
!6255 = !DILocation(line: 1161, column: 11, scope: !6256)
!6256 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1161, column: 11)
!6257 = !DILocation(line: 1161, column: 16, scope: !6256)
!6258 = !DILocation(line: 1161, column: 19, scope: !6256)
!6259 = !DILocation(line: 1161, column: 23, scope: !6256)
!6260 = !DILocation(line: 1161, column: 28, scope: !6256)
!6261 = !DILocation(line: 1161, column: 31, scope: !6256)
!6262 = !DILocation(line: 1161, column: 36, scope: !6256)
!6263 = !DILocation(line: 1161, column: 39, scope: !6256)
!6264 = !DILocation(line: 1161, column: 47, scope: !6256)
!6265 = !DILocation(line: 1162, column: 4, scope: !6256)
!6266 = !DILocation(line: 1162, column: 7, scope: !6256)
!6267 = !DILocation(line: 1162, column: 28, scope: !6256)
!6268 = !DILocation(line: 1163, column: 4, scope: !6256)
!6269 = !DILocation(line: 1163, column: 7, scope: !6256)
!6270 = !DILocation(line: 1163, column: 12, scope: !6256)
!6271 = !DILocation(line: 1163, column: 15, scope: !6256)
!6272 = !DILocation(line: 1161, column: 11, scope: !5975)
!6273 = !DILocation(line: 1164, column: 23, scope: !6256)
!6274 = !DILocation(line: 1164, column: 29, scope: !6256)
!6275 = !DILocation(line: 1168, column: 9, scope: !6256)
!6276 = !DILocation(line: 1168, column: 14, scope: !6256)
!6277 = !DILocation(line: 1168, column: 17, scope: !6256)
!6278 = !DILocation(line: 1168, column: 21, scope: !6256)
!6279 = !DILocation(line: 1170, column: 9, scope: !6256)
!6280 = !DILocation(line: 1170, column: 14, scope: !6256)
!6281 = !DILocation(line: 1170, column: 17, scope: !6256)
!6282 = !DILocation(line: 1170, column: 37, scope: !6256)
!6283 = !DILocation(line: 1170, column: 42, scope: !6256)
!6284 = !DILocation(line: 1170, column: 45, scope: !6256)
!6285 = !DILocation(line: 1171, column: 9, scope: !6256)
!6286 = !DILocation(line: 1171, column: 17, scope: !6256)
!6287 = !DILocation(line: 1171, column: 29, scope: !6256)
!6288 = !DILocation(line: 1171, column: 34, scope: !6256)
!6289 = !DILocation(line: 1171, column: 37, scope: !6256)
!6290 = !DILocation(line: 1164, column: 2, scope: !6256)
!6291 = !DILocation(line: 1183, column: 30, scope: !5975)
!6292 = !DILocation(line: 1183, column: 35, scope: !5975)
!6293 = !DILocation(line: 1183, column: 38, scope: !5975)
!6294 = !DILocation(line: 1183, column: 45, scope: !5975)
!6295 = !DILocation(line: 1183, column: 50, scope: !5975)
!6296 = !DILocation(line: 1183, column: 7, scope: !5975)
!6297 = !DILocation(line: 1183, column: 18, scope: !5975)
!6298 = !DILocation(line: 1183, column: 27, scope: !5975)
!6299 = !DILocation(line: 1184, column: 11, scope: !6300)
!6300 = distinct !DILexicalBlock(scope: !5975, file: !3, line: 1184, column: 11)
!6301 = !DILocation(line: 1184, column: 16, scope: !6300)
!6302 = !DILocation(line: 1184, column: 19, scope: !6300)
!6303 = !DILocation(line: 1184, column: 26, scope: !6300)
!6304 = !DILocation(line: 1184, column: 31, scope: !6300)
!6305 = !DILocation(line: 1184, column: 11, scope: !5975)
!6306 = !DILocation(line: 1185, column: 2, scope: !6300)
!6307 = !DILocalVariable(name: "inc", scope: !6308, file: !3, line: 1185, type: !258)
!6308 = distinct !DILexicalBlock(scope: !6300, file: !3, line: 1185, column: 2)
!6309 = !DILocation(line: 1185, column: 2, scope: !6308)
!6310 = !DILocation(line: 1185, column: 2, scope: !6311)
!6311 = distinct !DILexicalBlock(scope: !6308, file: !3, line: 1185, column: 2)
!6312 = !DILocation(line: 1185, column: 2, scope: !6313)
!6313 = distinct !DILexicalBlock(scope: !6311, file: !3, line: 1185, column: 2)
!6314 = !DILocation(line: 1190, column: 7, scope: !5975)
!6315 = !DILocation(line: 1192, column: 5, scope: !5975)
!6316 = !DILocation(line: 1003, column: 47, scope: !5970)
!6317 = !DILocation(line: 1003, column: 44, scope: !5970)
!6318 = !DILocation(line: 1003, column: 58, scope: !5970)
!6319 = !DILocation(line: 1003, column: 3, scope: !5970)
!6320 = distinct !{!6320, !5973, !6321}
!6321 = !DILocation(line: 1192, column: 5, scope: !5967)
!6322 = !DILocation(line: 1193, column: 1, scope: !5839)
!6323 = distinct !DISubprogram(name: "finalize_must_preallocate", scope: !3, file: !3, line: 1343, type: !6324, scopeLine: 1345, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6324 = !DISubroutineType(types: !6325)
!6325 = !{!32, !32, !32, !3453, !5842}
!6326 = !DILocalVariable(name: "must_preallocate", arg: 1, scope: !6323, file: !3, line: 1343, type: !32)
!6327 = !DILocation(line: 1343, column: 32, scope: !6323)
!6328 = !DILocalVariable(name: "num_actuals", arg: 2, scope: !6323, file: !3, line: 1343, type: !32)
!6329 = !DILocation(line: 1343, column: 54, scope: !6323)
!6330 = !DILocalVariable(name: "args", arg: 3, scope: !6323, file: !3, line: 1344, type: !3453)
!6331 = !DILocation(line: 1344, column: 24, scope: !6323)
!6332 = !DILocalVariable(name: "args_size", arg: 4, scope: !6323, file: !3, line: 1344, type: !5842)
!6333 = !DILocation(line: 1344, column: 48, scope: !6323)
!6334 = !DILocation(line: 1365, column: 9, scope: !6335)
!6335 = distinct !DILexicalBlock(scope: !6323, file: !3, line: 1365, column: 7)
!6336 = !DILocation(line: 1365, column: 7, scope: !6323)
!6337 = !DILocalVariable(name: "partial_seen", scope: !6338, file: !3, line: 1367, type: !32)
!6338 = distinct !DILexicalBlock(scope: !6335, file: !3, line: 1366, column: 5)
!6339 = !DILocation(line: 1367, column: 11, scope: !6338)
!6340 = !DILocalVariable(name: "copy_to_evaluate_size", scope: !6338, file: !3, line: 1368, type: !32)
!6341 = !DILocation(line: 1368, column: 11, scope: !6338)
!6342 = !DILocalVariable(name: "i", scope: !6338, file: !3, line: 1369, type: !32)
!6343 = !DILocation(line: 1369, column: 11, scope: !6338)
!6344 = !DILocation(line: 1371, column: 14, scope: !6345)
!6345 = distinct !DILexicalBlock(scope: !6338, file: !3, line: 1371, column: 7)
!6346 = !DILocation(line: 1371, column: 12, scope: !6345)
!6347 = !DILocation(line: 1371, column: 19, scope: !6348)
!6348 = distinct !DILexicalBlock(scope: !6345, file: !3, line: 1371, column: 7)
!6349 = !DILocation(line: 1371, column: 23, scope: !6348)
!6350 = !DILocation(line: 1371, column: 21, scope: !6348)
!6351 = !DILocation(line: 1371, column: 35, scope: !6348)
!6352 = !DILocation(line: 1371, column: 40, scope: !6348)
!6353 = !DILocation(line: 1371, column: 38, scope: !6348)
!6354 = !DILocation(line: 0, scope: !6348)
!6355 = !DILocation(line: 1371, column: 7, scope: !6345)
!6356 = !DILocation(line: 1373, column: 8, scope: !6357)
!6357 = distinct !DILexicalBlock(scope: !6358, file: !3, line: 1373, column: 8)
!6358 = distinct !DILexicalBlock(scope: !6348, file: !3, line: 1372, column: 2)
!6359 = !DILocation(line: 1373, column: 13, scope: !6357)
!6360 = !DILocation(line: 1373, column: 16, scope: !6357)
!6361 = !DILocation(line: 1373, column: 24, scope: !6357)
!6362 = !DILocation(line: 1373, column: 28, scope: !6357)
!6363 = !DILocation(line: 1373, column: 33, scope: !6357)
!6364 = !DILocation(line: 1373, column: 38, scope: !6357)
!6365 = !DILocation(line: 1373, column: 41, scope: !6357)
!6366 = !DILocation(line: 1373, column: 8, scope: !6358)
!6367 = !DILocation(line: 1374, column: 19, scope: !6357)
!6368 = !DILocation(line: 1374, column: 6, scope: !6357)
!6369 = !DILocation(line: 1375, column: 13, scope: !6370)
!6370 = distinct !DILexicalBlock(scope: !6357, file: !3, line: 1375, column: 13)
!6371 = !DILocation(line: 1375, column: 26, scope: !6370)
!6372 = !DILocation(line: 1375, column: 29, scope: !6370)
!6373 = !DILocation(line: 1375, column: 34, scope: !6370)
!6374 = !DILocation(line: 1375, column: 37, scope: !6370)
!6375 = !DILocation(line: 1375, column: 41, scope: !6370)
!6376 = !DILocation(line: 1375, column: 13, scope: !6357)
!6377 = !DILocation(line: 1376, column: 23, scope: !6370)
!6378 = !DILocation(line: 1376, column: 6, scope: !6370)
!6379 = !DILocation(line: 1378, column: 8, scope: !6380)
!6380 = distinct !DILexicalBlock(scope: !6358, file: !3, line: 1378, column: 8)
!6381 = !DILocation(line: 1378, column: 51, scope: !6380)
!6382 = !DILocation(line: 1379, column: 8, scope: !6380)
!6383 = !DILocation(line: 1379, column: 12, scope: !6380)
!6384 = !DILocation(line: 1379, column: 43, scope: !6380)
!6385 = !DILocation(line: 1380, column: 5, scope: !6380)
!6386 = !DILocation(line: 1380, column: 8, scope: !6380)
!6387 = !DILocation(line: 1380, column: 39, scope: !6380)
!6388 = !DILocation(line: 1381, column: 5, scope: !6380)
!6389 = !DILocation(line: 1381, column: 8, scope: !6380)
!6390 = !DILocation(line: 1381, column: 39, scope: !6380)
!6391 = !DILocation(line: 1382, column: 5, scope: !6380)
!6392 = !DILocation(line: 1382, column: 8, scope: !6380)
!6393 = !DILocation(line: 1378, column: 8, scope: !6358)
!6394 = !DILocation(line: 1384, column: 30, scope: !6380)
!6395 = !DILocation(line: 1384, column: 11, scope: !6380)
!6396 = !DILocation(line: 1384, column: 8, scope: !6380)
!6397 = !DILocation(line: 1383, column: 6, scope: !6380)
!6398 = !DILocation(line: 1385, column: 2, scope: !6358)
!6399 = !DILocation(line: 1371, column: 59, scope: !6348)
!6400 = !DILocation(line: 1371, column: 7, scope: !6348)
!6401 = distinct !{!6401, !6355, !6402}
!6402 = !DILocation(line: 1385, column: 2, scope: !6345)
!6403 = !DILocation(line: 1387, column: 11, scope: !6404)
!6404 = distinct !DILexicalBlock(scope: !6338, file: !3, line: 1387, column: 11)
!6405 = !DILocation(line: 1387, column: 33, scope: !6404)
!6406 = !DILocation(line: 1387, column: 40, scope: !6404)
!6407 = !DILocation(line: 1387, column: 51, scope: !6404)
!6408 = !DILocation(line: 1387, column: 37, scope: !6404)
!6409 = !DILocation(line: 1388, column: 4, scope: !6404)
!6410 = !DILocation(line: 1388, column: 7, scope: !6404)
!6411 = !DILocation(line: 1388, column: 18, scope: !6404)
!6412 = !DILocation(line: 1388, column: 27, scope: !6404)
!6413 = !DILocation(line: 1387, column: 11, scope: !6338)
!6414 = !DILocation(line: 1389, column: 19, scope: !6404)
!6415 = !DILocation(line: 1389, column: 2, scope: !6404)
!6416 = !DILocation(line: 1390, column: 5, scope: !6338)
!6417 = !DILocation(line: 1391, column: 10, scope: !6323)
!6418 = !DILocation(line: 1391, column: 3, scope: !6323)
!6419 = distinct !DISubprogram(name: "precompute_arguments", scope: !3, file: !3, line: 1281, type: !6420, scopeLine: 1282, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6420 = !DISubroutineType(types: !6421)
!6421 = !{null, !32, !3453}
!6422 = !DILocalVariable(name: "num_actuals", arg: 1, scope: !6419, file: !3, line: 1281, type: !32)
!6423 = !DILocation(line: 1281, column: 27, scope: !6419)
!6424 = !DILocalVariable(name: "args", arg: 2, scope: !6419, file: !3, line: 1281, type: !3453)
!6425 = !DILocation(line: 1281, column: 57, scope: !6419)
!6426 = !DILocalVariable(name: "i", scope: !6419, file: !3, line: 1283, type: !32)
!6427 = !DILocation(line: 1283, column: 7, scope: !6419)
!6428 = !DILocation(line: 1295, column: 8, scope: !6429)
!6429 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 1295, column: 7)
!6430 = !DILocation(line: 1295, column: 7, scope: !6419)
!6431 = !DILocation(line: 1296, column: 5, scope: !6429)
!6432 = !DILocation(line: 1298, column: 10, scope: !6433)
!6433 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 1298, column: 3)
!6434 = !DILocation(line: 1298, column: 8, scope: !6433)
!6435 = !DILocation(line: 1298, column: 15, scope: !6436)
!6436 = distinct !DILexicalBlock(scope: !6433, file: !3, line: 1298, column: 3)
!6437 = !DILocation(line: 1298, column: 19, scope: !6436)
!6438 = !DILocation(line: 1298, column: 17, scope: !6436)
!6439 = !DILocation(line: 1298, column: 3, scope: !6433)
!6440 = !DILocalVariable(name: "type", scope: !6441, file: !3, line: 1300, type: !258)
!6441 = distinct !DILexicalBlock(scope: !6436, file: !3, line: 1299, column: 5)
!6442 = !DILocation(line: 1300, column: 12, scope: !6441)
!6443 = !DILocalVariable(name: "mode", scope: !6441, file: !3, line: 1301, type: !50)
!6444 = !DILocation(line: 1301, column: 25, scope: !6441)
!6445 = !DILocation(line: 1303, column: 11, scope: !6446)
!6446 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 1303, column: 11)
!6447 = !DILocation(line: 1303, column: 42, scope: !6446)
!6448 = !DILocation(line: 1303, column: 11, scope: !6441)
!6449 = !DILocation(line: 1304, column: 2, scope: !6446)
!6450 = !DILocation(line: 1307, column: 14, scope: !6441)
!6451 = !DILocation(line: 1307, column: 12, scope: !6441)
!6452 = !DILocation(line: 1308, column: 7, scope: !6441)
!6453 = !DILocation(line: 1311, column: 19, scope: !6441)
!6454 = !DILocation(line: 1311, column: 24, scope: !6441)
!6455 = !DILocation(line: 1311, column: 27, scope: !6441)
!6456 = !DILocation(line: 1311, column: 4, scope: !6441)
!6457 = !DILocation(line: 1310, column: 31, scope: !6441)
!6458 = !DILocation(line: 1310, column: 36, scope: !6441)
!6459 = !DILocation(line: 1310, column: 39, scope: !6441)
!6460 = !DILocation(line: 1311, column: 2, scope: !6441)
!6461 = !DILocation(line: 1310, column: 7, scope: !6441)
!6462 = !DILocation(line: 1310, column: 12, scope: !6441)
!6463 = !DILocation(line: 1310, column: 15, scope: !6441)
!6464 = !DILocation(line: 1310, column: 29, scope: !6441)
!6465 = !DILocation(line: 1313, column: 14, scope: !6441)
!6466 = !DILocation(line: 1313, column: 12, scope: !6441)
!6467 = !DILocation(line: 1314, column: 11, scope: !6468)
!6468 = distinct !DILexicalBlock(scope: !6441, file: !3, line: 1314, column: 11)
!6469 = !DILocation(line: 1314, column: 19, scope: !6468)
!6470 = !DILocation(line: 1314, column: 24, scope: !6468)
!6471 = !DILocation(line: 1314, column: 27, scope: !6468)
!6472 = !DILocation(line: 1314, column: 16, scope: !6468)
!6473 = !DILocation(line: 1314, column: 11, scope: !6441)
!6474 = !DILocalVariable(name: "unsignedp", scope: !6475, file: !3, line: 1316, type: !32)
!6475 = distinct !DILexicalBlock(scope: !6468, file: !3, line: 1315, column: 2)
!6476 = !DILocation(line: 1316, column: 8, scope: !6475)
!6477 = !DILocation(line: 1316, column: 20, scope: !6475)
!6478 = !DILocation(line: 1316, column: 25, scope: !6475)
!6479 = !DILocation(line: 1316, column: 28, scope: !6475)
!6480 = !DILocation(line: 1318, column: 23, scope: !6475)
!6481 = !DILocation(line: 1318, column: 28, scope: !6475)
!6482 = !DILocation(line: 1318, column: 31, scope: !6475)
!6483 = !DILocation(line: 1318, column: 37, scope: !6475)
!6484 = !DILocation(line: 1319, column: 9, scope: !6475)
!6485 = !DILocation(line: 1319, column: 14, scope: !6475)
!6486 = !DILocation(line: 1319, column: 17, scope: !6475)
!6487 = !DILocation(line: 1319, column: 24, scope: !6475)
!6488 = !DILocation(line: 1319, column: 29, scope: !6475)
!6489 = !DILocation(line: 1319, column: 32, scope: !6475)
!6490 = !DILocation(line: 1318, column: 8, scope: !6475)
!6491 = !DILocation(line: 1317, column: 4, scope: !6475)
!6492 = !DILocation(line: 1317, column: 9, scope: !6475)
!6493 = !DILocation(line: 1317, column: 12, scope: !6475)
!6494 = !DILocation(line: 1318, column: 6, scope: !6475)
!6495 = !DILocation(line: 1324, column: 8, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6475, file: !3, line: 1324, column: 8)
!6497 = !DILocation(line: 1325, column: 8, scope: !6496)
!6498 = !DILocation(line: 1325, column: 11, scope: !6496)
!6499 = !DILocation(line: 1325, column: 41, scope: !6496)
!6500 = !DILocation(line: 1326, column: 8, scope: !6496)
!6501 = !DILocation(line: 1326, column: 25, scope: !6496)
!6502 = !DILocation(line: 1326, column: 31, scope: !6496)
!6503 = !DILocation(line: 1326, column: 11, scope: !6496)
!6504 = !DILocation(line: 1326, column: 52, scope: !6496)
!6505 = !DILocation(line: 1326, column: 57, scope: !6496)
!6506 = !DILocation(line: 1326, column: 60, scope: !6496)
!6507 = !DILocation(line: 1326, column: 49, scope: !6496)
!6508 = !DILocation(line: 1324, column: 8, scope: !6475)
!6509 = !DILocation(line: 1329, column: 25, scope: !6510)
!6510 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 1327, column: 6)
!6511 = !DILocation(line: 1329, column: 31, scope: !6510)
!6512 = !DILocation(line: 1329, column: 36, scope: !6510)
!6513 = !DILocation(line: 1329, column: 39, scope: !6510)
!6514 = !DILocation(line: 1329, column: 5, scope: !6510)
!6515 = !DILocation(line: 1328, column: 8, scope: !6510)
!6516 = !DILocation(line: 1328, column: 13, scope: !6510)
!6517 = !DILocation(line: 1328, column: 16, scope: !6510)
!6518 = !DILocation(line: 1329, column: 3, scope: !6510)
!6519 = !DILocation(line: 1330, column: 8, scope: !6510)
!6520 = !DILocation(line: 1330, column: 54, scope: !6510)
!6521 = !DILocation(line: 1331, column: 8, scope: !6510)
!6522 = !DILocalVariable(name: "_rtx", scope: !6523, file: !3, line: 1331, type: !5500)
!6523 = distinct !DILexicalBlock(scope: !6510, file: !3, line: 1331, column: 8)
!6524 = !DILocation(line: 1331, column: 8, scope: !6523)
!6525 = !DILocation(line: 1331, column: 8, scope: !6526)
!6526 = distinct !DILexicalBlock(scope: !6523, file: !3, line: 1331, column: 8)
!6527 = !DILocation(line: 1331, column: 8, scope: !6528)
!6528 = distinct !DILexicalBlock(scope: !6526, file: !3, line: 1331, column: 8)
!6529 = !DILocation(line: 1333, column: 6, scope: !6510)
!6530 = !DILocation(line: 1334, column: 2, scope: !6475)
!6531 = !DILocation(line: 1335, column: 5, scope: !6441)
!6532 = !DILocation(line: 1298, column: 33, scope: !6436)
!6533 = !DILocation(line: 1298, column: 3, scope: !6436)
!6534 = distinct !{!6534, !6439, !6535}
!6535 = !DILocation(line: 1335, column: 5, scope: !6433)
!6536 = !DILocation(line: 1336, column: 1, scope: !6419)
!6537 = distinct !DISubprogram(name: "compute_argument_block_size", scope: !3, file: !3, line: 1202, type: !6538, scopeLine: 1207, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6538 = !DISubroutineType(types: !6539)
!6539 = !{!32, !32, !5842, !258, !258, !32}
!6540 = !DILocalVariable(name: "reg_parm_stack_space", arg: 1, scope: !6537, file: !3, line: 1202, type: !32)
!6541 = !DILocation(line: 1202, column: 34, scope: !6537)
!6542 = !DILocalVariable(name: "args_size", arg: 2, scope: !6537, file: !3, line: 1203, type: !5842)
!6543 = !DILocation(line: 1203, column: 27, scope: !6537)
!6544 = !DILocalVariable(name: "fndecl", arg: 3, scope: !6537, file: !3, line: 1204, type: !258)
!6545 = !DILocation(line: 1204, column: 14, scope: !6537)
!6546 = !DILocalVariable(name: "fntype", arg: 4, scope: !6537, file: !3, line: 1205, type: !258)
!6547 = !DILocation(line: 1205, column: 14, scope: !6537)
!6548 = !DILocalVariable(name: "preferred_stack_boundary", arg: 5, scope: !6537, file: !3, line: 1206, type: !32)
!6549 = !DILocation(line: 1206, column: 13, scope: !6537)
!6550 = !DILocalVariable(name: "unadjusted_args_size", scope: !6537, file: !3, line: 1208, type: !32)
!6551 = !DILocation(line: 1208, column: 7, scope: !6537)
!6552 = !DILocation(line: 1208, column: 30, scope: !6537)
!6553 = !DILocation(line: 1208, column: 41, scope: !6537)
!6554 = !DILocation(line: 1213, column: 7, scope: !6555)
!6555 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 1213, column: 7)
!6556 = !DILocation(line: 1213, column: 32, scope: !6555)
!6557 = !DILocation(line: 1213, column: 35, scope: !6555)
!6558 = !DILocation(line: 1213, column: 60, scope: !6555)
!6559 = !DILocation(line: 1213, column: 7, scope: !6537)
!6560 = !DILocation(line: 1214, column: 30, scope: !6555)
!6561 = !DILocation(line: 1214, column: 5, scope: !6555)
!6562 = !DILocation(line: 1220, column: 7, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6537, file: !3, line: 1220, column: 7)
!6564 = !DILocation(line: 1220, column: 18, scope: !6563)
!6565 = !DILocation(line: 1220, column: 7, scope: !6537)
!6566 = !DILocation(line: 1222, column: 24, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 1221, column: 5)
!6568 = !DILocation(line: 1222, column: 7, scope: !6567)
!6569 = !DILocation(line: 1222, column: 18, scope: !6567)
!6570 = !DILocation(line: 1222, column: 22, scope: !6567)
!6571 = !DILocation(line: 1223, column: 7, scope: !6567)
!6572 = !DILocation(line: 1223, column: 18, scope: !6567)
!6573 = !DILocation(line: 1223, column: 27, scope: !6567)
!6574 = !DILocation(line: 1225, column: 32, scope: !6567)
!6575 = !DILocation(line: 1226, column: 11, scope: !6576)
!6576 = distinct !DILexicalBlock(scope: !6567, file: !3, line: 1226, column: 11)
!6577 = !DILocation(line: 1226, column: 36, scope: !6576)
!6578 = !DILocation(line: 1226, column: 11, scope: !6567)
!6579 = !DILocation(line: 1231, column: 4, scope: !6580)
!6580 = distinct !DILexicalBlock(scope: !6576, file: !3, line: 1227, column: 2)
!6581 = !DILocation(line: 1232, column: 21, scope: !6580)
!6582 = !DILocation(line: 1232, column: 4, scope: !6580)
!6583 = !DILocation(line: 1232, column: 15, scope: !6580)
!6584 = !DILocation(line: 1232, column: 19, scope: !6580)
!6585 = !DILocation(line: 1233, column: 2, scope: !6580)
!6586 = !DILocation(line: 1235, column: 11, scope: !6587)
!6587 = distinct !DILexicalBlock(scope: !6567, file: !3, line: 1235, column: 11)
!6588 = !DILocation(line: 1235, column: 32, scope: !6587)
!6589 = !DILocation(line: 1235, column: 11, scope: !6567)
!6590 = !DILocation(line: 1238, column: 8, scope: !6591)
!6591 = distinct !DILexicalBlock(scope: !6587, file: !3, line: 1236, column: 2)
!6592 = !DILocation(line: 1237, column: 4, scope: !6591)
!6593 = !DILocation(line: 1237, column: 15, scope: !6591)
!6594 = !DILocation(line: 1238, column: 6, scope: !6591)
!6595 = !DILocation(line: 1243, column: 10, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6591, file: !3, line: 1243, column: 8)
!6597 = !DILocation(line: 1243, column: 8, scope: !6591)
!6598 = !DILocation(line: 1245, column: 10, scope: !6596)
!6599 = !DILocation(line: 1244, column: 6, scope: !6596)
!6600 = !DILocation(line: 1244, column: 17, scope: !6596)
!6601 = !DILocation(line: 1245, column: 8, scope: !6596)
!6602 = !DILocation(line: 1247, column: 2, scope: !6591)
!6603 = !DILocation(line: 1248, column: 5, scope: !6567)
!6604 = !DILocation(line: 1251, column: 32, scope: !6605)
!6605 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 1250, column: 5)
!6606 = !DILocation(line: 1252, column: 11, scope: !6607)
!6607 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 1252, column: 11)
!6608 = !DILocation(line: 1252, column: 36, scope: !6607)
!6609 = !DILocation(line: 1252, column: 11, scope: !6605)
!6610 = !DILocation(line: 1253, column: 27, scope: !6607)
!6611 = !DILocation(line: 1253, column: 2, scope: !6607)
!6612 = !DILocation(line: 1254, column: 32, scope: !6605)
!6613 = !DILocation(line: 1254, column: 43, scope: !6605)
!6614 = !DILocation(line: 1255, column: 13, scope: !6605)
!6615 = !DILocation(line: 1255, column: 11, scope: !6605)
!6616 = !DILocation(line: 1256, column: 13, scope: !6605)
!6617 = !DILocation(line: 1256, column: 11, scope: !6605)
!6618 = !DILocation(line: 1256, column: 38, scope: !6605)
!6619 = !DILocation(line: 1257, column: 12, scope: !6605)
!6620 = !DILocation(line: 1257, column: 10, scope: !6605)
!6621 = !DILocation(line: 1258, column: 12, scope: !6605)
!6622 = !DILocation(line: 1258, column: 10, scope: !6605)
!6623 = !DILocation(line: 1259, column: 11, scope: !6605)
!6624 = !DILocation(line: 1259, column: 9, scope: !6605)
!6625 = !DILocation(line: 1254, column: 7, scope: !6605)
!6626 = !DILocation(line: 1254, column: 18, scope: !6605)
!6627 = !DILocation(line: 1254, column: 27, scope: !6605)
!6628 = !DILocation(line: 1261, column: 29, scope: !6605)
!6629 = !DILocation(line: 1261, column: 7, scope: !6605)
!6630 = !DILocation(line: 1261, column: 18, scope: !6605)
!6631 = !DILocation(line: 1261, column: 27, scope: !6605)
!6632 = !DILocation(line: 1264, column: 13, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6605, file: !3, line: 1264, column: 11)
!6634 = !DILocation(line: 1264, column: 11, scope: !6605)
!6635 = !DILocation(line: 1265, column: 25, scope: !6633)
!6636 = !DILocation(line: 1265, column: 2, scope: !6633)
!6637 = !DILocation(line: 1265, column: 13, scope: !6633)
!6638 = !DILocation(line: 1265, column: 22, scope: !6633)
!6639 = !DILocation(line: 1267, column: 10, scope: !6537)
!6640 = !DILocation(line: 1267, column: 3, scope: !6537)
!6641 = distinct !DISubprogram(name: "expand_normal", scope: !2139, file: !2139, line: 562, type: !6642, scopeLine: 563, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6642 = !DISubroutineType(types: !6643)
!6643 = !{!6, !258}
!6644 = !DILocalVariable(name: "exp", arg: 1, scope: !6641, file: !2139, line: 562, type: !258)
!6645 = !DILocation(line: 562, column: 21, scope: !6641)
!6646 = !DILocation(line: 564, column: 28, scope: !6641)
!6647 = !DILocation(line: 564, column: 10, scope: !6641)
!6648 = !DILocation(line: 564, column: 3, scope: !6641)
!6649 = distinct !DISubprogram(name: "combine_pending_stack_adjustment_and_call", scope: !3, file: !3, line: 1731, type: !6650, scopeLine: 1734, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6650 = !DISubroutineType(types: !6651)
!6651 = !{!32, !32, !5842, !13}
!6652 = !DILocalVariable(name: "unadjusted_args_size", arg: 1, scope: !6649, file: !3, line: 1731, type: !32)
!6653 = !DILocation(line: 1731, column: 48, scope: !6649)
!6654 = !DILocalVariable(name: "args_size", arg: 2, scope: !6649, file: !3, line: 1732, type: !5842)
!6655 = !DILocation(line: 1732, column: 27, scope: !6649)
!6656 = !DILocalVariable(name: "preferred_unit_stack_boundary", arg: 3, scope: !6649, file: !3, line: 1733, type: !13)
!6657 = !DILocation(line: 1733, column: 22, scope: !6649)
!6658 = !DILocalVariable(name: "adjustment", scope: !6649, file: !3, line: 1737, type: !227)
!6659 = !DILocation(line: 1737, column: 17, scope: !6649)
!6660 = !DILocalVariable(name: "unadjusted_alignment", scope: !6649, file: !3, line: 1740, type: !210)
!6661 = !DILocation(line: 1740, column: 26, scope: !6649)
!6662 = !DILocation(line: 1743, column: 9, scope: !6649)
!6663 = !DILocation(line: 1743, column: 31, scope: !6649)
!6664 = !DILocation(line: 1743, column: 29, scope: !6649)
!6665 = !DILocation(line: 1744, column: 10, scope: !6649)
!6666 = !DILocation(line: 1744, column: 8, scope: !6649)
!6667 = !DILocation(line: 1743, column: 7, scope: !6649)
!6668 = !DILocation(line: 1743, column: 5, scope: !6649)
!6669 = !DILocation(line: 1754, column: 8, scope: !6649)
!6670 = !DILocation(line: 1755, column: 11, scope: !6649)
!6671 = !DILocation(line: 1755, column: 34, scope: !6649)
!6672 = !DILocation(line: 1755, column: 32, scope: !6649)
!6673 = !DILocation(line: 1755, column: 10, scope: !6649)
!6674 = !DILocation(line: 1755, column: 8, scope: !6649)
!6675 = !DILocation(line: 1754, column: 5, scope: !6649)
!6676 = !DILocation(line: 1756, column: 16, scope: !6649)
!6677 = !DILocation(line: 1756, column: 14, scope: !6649)
!6678 = !DILocation(line: 1759, column: 7, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6649, file: !3, line: 1759, column: 7)
!6680 = !DILocation(line: 1759, column: 37, scope: !6679)
!6681 = !DILocation(line: 1759, column: 7, scope: !6649)
!6682 = !DILocation(line: 1761, column: 11, scope: !6683)
!6683 = distinct !DILexicalBlock(scope: !6684, file: !3, line: 1761, column: 11)
!6684 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1760, column: 5)
!6685 = !DILocation(line: 1761, column: 32, scope: !6683)
!6686 = !DILocation(line: 1761, column: 11, scope: !6684)
!6687 = !DILocation(line: 1762, column: 16, scope: !6683)
!6688 = !DILocation(line: 1762, column: 48, scope: !6683)
!6689 = !DILocation(line: 1762, column: 46, scope: !6683)
!6690 = !DILocation(line: 1762, column: 13, scope: !6683)
!6691 = !DILocation(line: 1762, column: 2, scope: !6683)
!6692 = !DILocation(line: 1764, column: 16, scope: !6683)
!6693 = !DILocation(line: 1764, column: 13, scope: !6683)
!6694 = !DILocation(line: 1765, column: 5, scope: !6684)
!6695 = !DILocation(line: 1772, column: 7, scope: !6649)
!6696 = !DILocation(line: 1772, column: 30, scope: !6649)
!6697 = !DILocation(line: 1772, column: 28, scope: !6649)
!6698 = !DILocation(line: 1772, column: 43, scope: !6649)
!6699 = !DILocation(line: 1772, column: 41, scope: !6649)
!6700 = !DILocation(line: 1771, column: 3, scope: !6649)
!6701 = !DILocation(line: 1771, column: 14, scope: !6649)
!6702 = !DILocation(line: 1772, column: 5, scope: !6649)
!6703 = !DILocation(line: 1774, column: 10, scope: !6649)
!6704 = !DILocation(line: 1774, column: 3, scope: !6649)
!6705 = distinct !DISubprogram(name: "compute_argument_addresses", scope: !3, file: !3, line: 1403, type: !6706, scopeLine: 1404, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6706 = !DISubroutineType(types: !6707)
!6707 = !{null, !3453, !6, !32}
!6708 = !DILocalVariable(name: "args", arg: 1, scope: !6705, file: !3, line: 1403, type: !3453)
!6709 = !DILocation(line: 1403, column: 46, scope: !6705)
!6710 = !DILocalVariable(name: "argblock", arg: 2, scope: !6705, file: !3, line: 1403, type: !6)
!6711 = !DILocation(line: 1403, column: 56, scope: !6705)
!6712 = !DILocalVariable(name: "num_actuals", arg: 3, scope: !6705, file: !3, line: 1403, type: !32)
!6713 = !DILocation(line: 1403, column: 70, scope: !6705)
!6714 = !DILocation(line: 1405, column: 7, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6705, file: !3, line: 1405, column: 7)
!6716 = !DILocation(line: 1405, column: 7, scope: !6705)
!6717 = !DILocalVariable(name: "arg_reg", scope: !6718, file: !3, line: 1407, type: !6)
!6718 = distinct !DILexicalBlock(scope: !6715, file: !3, line: 1406, column: 5)
!6719 = !DILocation(line: 1407, column: 11, scope: !6718)
!6720 = !DILocation(line: 1407, column: 21, scope: !6718)
!6721 = !DILocalVariable(name: "i", scope: !6718, file: !3, line: 1408, type: !32)
!6722 = !DILocation(line: 1408, column: 11, scope: !6718)
!6723 = !DILocalVariable(name: "arg_offset", scope: !6718, file: !3, line: 1408, type: !32)
!6724 = !DILocation(line: 1408, column: 14, scope: !6718)
!6725 = !DILocation(line: 1410, column: 11, scope: !6726)
!6726 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1410, column: 11)
!6727 = !DILocation(line: 1410, column: 31, scope: !6726)
!6728 = !DILocation(line: 1410, column: 11, scope: !6718)
!6729 = !DILocation(line: 1411, column: 12, scope: !6726)
!6730 = !DILocation(line: 1411, column: 10, scope: !6726)
!6731 = !DILocation(line: 1411, column: 45, scope: !6726)
!6732 = !DILocation(line: 1411, column: 43, scope: !6726)
!6733 = !DILocation(line: 1411, column: 2, scope: !6726)
!6734 = !DILocation(line: 1413, column: 14, scope: !6735)
!6735 = distinct !DILexicalBlock(scope: !6718, file: !3, line: 1413, column: 7)
!6736 = !DILocation(line: 1413, column: 12, scope: !6735)
!6737 = !DILocation(line: 1413, column: 19, scope: !6738)
!6738 = distinct !DILexicalBlock(scope: !6735, file: !3, line: 1413, column: 7)
!6739 = !DILocation(line: 1413, column: 23, scope: !6738)
!6740 = !DILocation(line: 1413, column: 21, scope: !6738)
!6741 = !DILocation(line: 1413, column: 7, scope: !6735)
!6742 = !DILocalVariable(name: "offset", scope: !6743, file: !3, line: 1415, type: !6)
!6743 = distinct !DILexicalBlock(scope: !6738, file: !3, line: 1414, column: 2)
!6744 = !DILocation(line: 1415, column: 8, scope: !6743)
!6745 = !DILocation(line: 1415, column: 17, scope: !6743)
!6746 = !DILocalVariable(name: "slot_offset", scope: !6743, file: !3, line: 1416, type: !6)
!6747 = !DILocation(line: 1416, column: 8, scope: !6743)
!6748 = !DILocation(line: 1416, column: 22, scope: !6743)
!6749 = !DILocalVariable(name: "addr", scope: !6743, file: !3, line: 1417, type: !6)
!6750 = !DILocation(line: 1417, column: 8, scope: !6743)
!6751 = !DILocalVariable(name: "align", scope: !6743, file: !3, line: 1418, type: !13)
!6752 = !DILocation(line: 1418, column: 17, scope: !6743)
!6753 = !DILocalVariable(name: "boundary", scope: !6743, file: !3, line: 1418, type: !13)
!6754 = !DILocation(line: 1418, column: 24, scope: !6743)
!6755 = !DILocalVariable(name: "units_on_stack", scope: !6743, file: !3, line: 1419, type: !13)
!6756 = !DILocation(line: 1419, column: 17, scope: !6743)
!6757 = !DILocalVariable(name: "partial_mode", scope: !6743, file: !3, line: 1420, type: !50)
!6758 = !DILocation(line: 1420, column: 22, scope: !6743)
!6759 = !DILocation(line: 1423, column: 10, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1423, column: 8)
!6761 = !DILocation(line: 1423, column: 15, scope: !6760)
!6762 = !DILocation(line: 1423, column: 18, scope: !6760)
!6763 = !DILocation(line: 1424, column: 8, scope: !6760)
!6764 = !DILocation(line: 1424, column: 11, scope: !6760)
!6765 = !DILocation(line: 1424, column: 16, scope: !6760)
!6766 = !DILocation(line: 1424, column: 19, scope: !6760)
!6767 = !DILocation(line: 1424, column: 23, scope: !6760)
!6768 = !DILocation(line: 1425, column: 8, scope: !6760)
!6769 = !DILocation(line: 1425, column: 11, scope: !6760)
!6770 = !DILocation(line: 1425, column: 16, scope: !6760)
!6771 = !DILocation(line: 1425, column: 19, scope: !6760)
!6772 = !DILocation(line: 1425, column: 27, scope: !6760)
!6773 = !DILocation(line: 1423, column: 8, scope: !6743)
!6774 = !DILocation(line: 1426, column: 6, scope: !6760)
!6775 = !DILocation(line: 1428, column: 8, scope: !6776)
!6776 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1428, column: 8)
!6777 = !DILocation(line: 1428, column: 8, scope: !6743)
!6778 = !DILocation(line: 1429, column: 28, scope: !6776)
!6779 = !DILocation(line: 1429, column: 37, scope: !6776)
!6780 = !DILocation(line: 1429, column: 13, scope: !6776)
!6781 = !DILocation(line: 1429, column: 11, scope: !6776)
!6782 = !DILocation(line: 1429, column: 6, scope: !6776)
!6783 = !DILocation(line: 1431, column: 13, scope: !6776)
!6784 = !DILocation(line: 1431, column: 11, scope: !6776)
!6785 = !DILocation(line: 1433, column: 26, scope: !6743)
!6786 = !DILocation(line: 1433, column: 32, scope: !6743)
!6787 = !DILocation(line: 1433, column: 11, scope: !6743)
!6788 = !DILocation(line: 1433, column: 9, scope: !6743)
!6789 = !DILocation(line: 1435, column: 8, scope: !6790)
!6790 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1435, column: 8)
!6791 = !DILocation(line: 1435, column: 13, scope: !6790)
!6792 = !DILocation(line: 1435, column: 16, scope: !6790)
!6793 = !DILocation(line: 1435, column: 24, scope: !6790)
!6794 = !DILocation(line: 1435, column: 8, scope: !6743)
!6795 = !DILocation(line: 1439, column: 25, scope: !6796)
!6796 = distinct !DILexicalBlock(scope: !6790, file: !3, line: 1436, column: 6)
!6797 = !DILocation(line: 1439, column: 30, scope: !6796)
!6798 = !DILocation(line: 1439, column: 33, scope: !6796)
!6799 = !DILocation(line: 1439, column: 40, scope: !6796)
!6800 = !DILocation(line: 1439, column: 45, scope: !6796)
!6801 = !DILocation(line: 1439, column: 23, scope: !6796)
!6802 = !DILocation(line: 1440, column: 38, scope: !6796)
!6803 = !DILocation(line: 1440, column: 53, scope: !6796)
!6804 = !DILocation(line: 1440, column: 23, scope: !6796)
!6805 = !DILocation(line: 1440, column: 21, scope: !6796)
!6806 = !DILocation(line: 1442, column: 37, scope: !6796)
!6807 = !DILocation(line: 1442, column: 51, scope: !6796)
!6808 = !DILocation(line: 1442, column: 24, scope: !6796)
!6809 = !DILocation(line: 1442, column: 8, scope: !6796)
!6810 = !DILocation(line: 1442, column: 13, scope: !6796)
!6811 = !DILocation(line: 1442, column: 16, scope: !6796)
!6812 = !DILocation(line: 1442, column: 22, scope: !6796)
!6813 = !DILocation(line: 1443, column: 22, scope: !6796)
!6814 = !DILocation(line: 1443, column: 27, scope: !6796)
!6815 = !DILocation(line: 1443, column: 30, scope: !6796)
!6816 = !DILocation(line: 1443, column: 37, scope: !6796)
!6817 = !DILocation(line: 1443, column: 8, scope: !6796)
!6818 = !DILocation(line: 1444, column: 6, scope: !6796)
!6819 = !DILocation(line: 1447, column: 37, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6790, file: !3, line: 1446, column: 6)
!6821 = !DILocation(line: 1447, column: 42, scope: !6820)
!6822 = !DILocation(line: 1447, column: 45, scope: !6820)
!6823 = !DILocation(line: 1447, column: 51, scope: !6820)
!6824 = !DILocation(line: 1447, column: 24, scope: !6820)
!6825 = !DILocation(line: 1447, column: 8, scope: !6820)
!6826 = !DILocation(line: 1447, column: 13, scope: !6820)
!6827 = !DILocation(line: 1447, column: 16, scope: !6820)
!6828 = !DILocation(line: 1447, column: 22, scope: !6820)
!6829 = !DILocation(line: 1448, column: 28, scope: !6820)
!6830 = !DILocation(line: 1448, column: 33, scope: !6820)
!6831 = !DILocation(line: 1448, column: 36, scope: !6820)
!6832 = !DILocation(line: 1449, column: 7, scope: !6820)
!6833 = !DILocation(line: 1448, column: 8, scope: !6820)
!6834 = !DILocation(line: 1451, column: 10, scope: !6743)
!6835 = !DILocation(line: 1452, column: 15, scope: !6743)
!6836 = !DILocation(line: 1452, column: 20, scope: !6743)
!6837 = !DILocation(line: 1452, column: 23, scope: !6743)
!6838 = !DILocation(line: 1452, column: 30, scope: !6743)
!6839 = !DILocation(line: 1452, column: 13, scope: !6743)
!6840 = !DILocation(line: 1453, column: 8, scope: !6841)
!6841 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1453, column: 8)
!6842 = !DILocation(line: 1453, column: 13, scope: !6841)
!6843 = !DILocation(line: 1453, column: 16, scope: !6841)
!6844 = !DILocation(line: 1453, column: 23, scope: !6841)
!6845 = !DILocation(line: 1453, column: 33, scope: !6841)
!6846 = !DILocation(line: 1453, column: 8, scope: !6743)
!6847 = !DILocation(line: 1454, column: 14, scope: !6841)
!6848 = !DILocation(line: 1454, column: 12, scope: !6841)
!6849 = !DILocation(line: 1454, column: 6, scope: !6841)
!6850 = !DILocation(line: 1455, column: 13, scope: !6851)
!6851 = distinct !DILexicalBlock(scope: !6841, file: !3, line: 1455, column: 13)
!6852 = !DILocation(line: 1455, column: 13, scope: !6841)
!6853 = !DILocation(line: 1457, column: 16, scope: !6854)
!6854 = distinct !DILexicalBlock(scope: !6851, file: !3, line: 1456, column: 6)
!6855 = !DILocation(line: 1457, column: 32, scope: !6854)
!6856 = !DILocation(line: 1457, column: 50, scope: !6854)
!6857 = !DILocation(line: 1457, column: 48, scope: !6854)
!6858 = !DILocation(line: 1457, column: 14, scope: !6854)
!6859 = !DILocation(line: 1458, column: 16, scope: !6854)
!6860 = !DILocation(line: 1458, column: 25, scope: !6854)
!6861 = !DILocation(line: 1458, column: 24, scope: !6854)
!6862 = !DILocation(line: 1458, column: 22, scope: !6854)
!6863 = !DILocation(line: 1458, column: 14, scope: !6854)
!6864 = !DILocation(line: 1459, column: 6, scope: !6854)
!6865 = !DILocation(line: 1460, column: 19, scope: !6743)
!6866 = !DILocation(line: 1460, column: 24, scope: !6743)
!6867 = !DILocation(line: 1460, column: 27, scope: !6743)
!6868 = !DILocation(line: 1460, column: 34, scope: !6743)
!6869 = !DILocation(line: 1460, column: 4, scope: !6743)
!6870 = !DILocation(line: 1462, column: 8, scope: !6871)
!6871 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1462, column: 8)
!6872 = !DILocation(line: 1462, column: 8, scope: !6743)
!6873 = !DILocation(line: 1463, column: 28, scope: !6871)
!6874 = !DILocation(line: 1463, column: 37, scope: !6871)
!6875 = !DILocation(line: 1463, column: 13, scope: !6871)
!6876 = !DILocation(line: 1463, column: 11, scope: !6871)
!6877 = !DILocation(line: 1463, column: 6, scope: !6871)
!6878 = !DILocation(line: 1465, column: 13, scope: !6871)
!6879 = !DILocation(line: 1465, column: 11, scope: !6871)
!6880 = !DILocation(line: 1467, column: 26, scope: !6743)
!6881 = !DILocation(line: 1467, column: 32, scope: !6743)
!6882 = !DILocation(line: 1467, column: 11, scope: !6743)
!6883 = !DILocation(line: 1467, column: 9, scope: !6743)
!6884 = !DILocation(line: 1469, column: 8, scope: !6885)
!6885 = distinct !DILexicalBlock(scope: !6743, file: !3, line: 1469, column: 8)
!6886 = !DILocation(line: 1469, column: 13, scope: !6885)
!6887 = !DILocation(line: 1469, column: 16, scope: !6885)
!6888 = !DILocation(line: 1469, column: 24, scope: !6885)
!6889 = !DILocation(line: 1469, column: 8, scope: !6743)
!6890 = !DILocation(line: 1474, column: 42, scope: !6891)
!6891 = distinct !DILexicalBlock(scope: !6885, file: !3, line: 1470, column: 6)
!6892 = !DILocation(line: 1474, column: 56, scope: !6891)
!6893 = !DILocation(line: 1474, column: 29, scope: !6891)
!6894 = !DILocation(line: 1474, column: 8, scope: !6891)
!6895 = !DILocation(line: 1474, column: 13, scope: !6891)
!6896 = !DILocation(line: 1474, column: 16, scope: !6891)
!6897 = !DILocation(line: 1474, column: 27, scope: !6891)
!6898 = !DILocation(line: 1475, column: 22, scope: !6891)
!6899 = !DILocation(line: 1475, column: 27, scope: !6891)
!6900 = !DILocation(line: 1475, column: 30, scope: !6891)
!6901 = !DILocation(line: 1475, column: 42, scope: !6891)
!6902 = !DILocation(line: 1475, column: 8, scope: !6891)
!6903 = !DILocation(line: 1476, column: 6, scope: !6891)
!6904 = !DILocation(line: 1479, column: 42, scope: !6905)
!6905 = distinct !DILexicalBlock(scope: !6885, file: !3, line: 1478, column: 6)
!6906 = !DILocation(line: 1479, column: 47, scope: !6905)
!6907 = !DILocation(line: 1479, column: 50, scope: !6905)
!6908 = !DILocation(line: 1479, column: 56, scope: !6905)
!6909 = !DILocation(line: 1479, column: 29, scope: !6905)
!6910 = !DILocation(line: 1479, column: 8, scope: !6905)
!6911 = !DILocation(line: 1479, column: 13, scope: !6905)
!6912 = !DILocation(line: 1479, column: 16, scope: !6905)
!6913 = !DILocation(line: 1479, column: 27, scope: !6905)
!6914 = !DILocation(line: 1480, column: 28, scope: !6905)
!6915 = !DILocation(line: 1480, column: 33, scope: !6905)
!6916 = !DILocation(line: 1480, column: 36, scope: !6905)
!6917 = !DILocation(line: 1481, column: 7, scope: !6905)
!6918 = !DILocation(line: 1480, column: 8, scope: !6905)
!6919 = !DILocation(line: 1483, column: 19, scope: !6743)
!6920 = !DILocation(line: 1483, column: 24, scope: !6743)
!6921 = !DILocation(line: 1483, column: 27, scope: !6743)
!6922 = !DILocation(line: 1483, column: 39, scope: !6743)
!6923 = !DILocation(line: 1483, column: 44, scope: !6743)
!6924 = !DILocation(line: 1483, column: 47, scope: !6743)
!6925 = !DILocation(line: 1483, column: 54, scope: !6743)
!6926 = !DILocation(line: 1483, column: 4, scope: !6743)
!6927 = !DILocation(line: 1489, column: 23, scope: !6743)
!6928 = !DILocation(line: 1489, column: 28, scope: !6743)
!6929 = !DILocation(line: 1489, column: 31, scope: !6743)
!6930 = !DILocation(line: 1489, column: 4, scope: !6743)
!6931 = !DILocation(line: 1490, column: 23, scope: !6743)
!6932 = !DILocation(line: 1490, column: 28, scope: !6743)
!6933 = !DILocation(line: 1490, column: 31, scope: !6743)
!6934 = !DILocation(line: 1490, column: 4, scope: !6743)
!6935 = !DILocation(line: 1491, column: 2, scope: !6743)
!6936 = !DILocation(line: 1413, column: 37, scope: !6738)
!6937 = !DILocation(line: 1413, column: 7, scope: !6738)
!6938 = distinct !{!6938, !6741, !6939}
!6939 = !DILocation(line: 1491, column: 2, scope: !6735)
!6940 = !DILocation(line: 1492, column: 5, scope: !6718)
!6941 = !DILocation(line: 1493, column: 1, scope: !6705)
!6942 = distinct !DISubprogram(name: "rtx_for_function_call", scope: !3, file: !3, line: 1504, type: !6943, scopeLine: 1505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6943 = !DISubroutineType(types: !6944)
!6944 = !{!6, !258, !258}
!6945 = !DILocalVariable(name: "fndecl", arg: 1, scope: !6942, file: !3, line: 1504, type: !258)
!6946 = !DILocation(line: 1504, column: 29, scope: !6942)
!6947 = !DILocalVariable(name: "addr", arg: 2, scope: !6942, file: !3, line: 1504, type: !258)
!6948 = !DILocation(line: 1504, column: 42, scope: !6942)
!6949 = !DILocalVariable(name: "funexp", scope: !6942, file: !3, line: 1506, type: !6)
!6950 = !DILocation(line: 1506, column: 7, scope: !6942)
!6951 = !DILocation(line: 1509, column: 7, scope: !6952)
!6952 = distinct !DILexicalBlock(scope: !6942, file: !3, line: 1509, column: 7)
!6953 = !DILocation(line: 1509, column: 7, scope: !6942)
!6954 = !DILocation(line: 1513, column: 12, scope: !6955)
!6955 = distinct !DILexicalBlock(scope: !6956, file: !3, line: 1513, column: 11)
!6956 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1510, column: 5)
!6957 = !DILocation(line: 1513, column: 31, scope: !6955)
!6958 = !DILocation(line: 1513, column: 34, scope: !6955)
!6959 = !DILocation(line: 1513, column: 44, scope: !6955)
!6960 = !DILocation(line: 1513, column: 41, scope: !6955)
!6961 = !DILocation(line: 1513, column: 11, scope: !6956)
!6962 = !DILocation(line: 1515, column: 23, scope: !6963)
!6963 = distinct !DILexicalBlock(scope: !6955, file: !3, line: 1514, column: 2)
!6964 = !DILocation(line: 1515, column: 4, scope: !6963)
!6965 = !DILocation(line: 1516, column: 4, scope: !6963)
!6966 = !DILocation(line: 1516, column: 23, scope: !6963)
!6967 = !DILocation(line: 1517, column: 2, scope: !6963)
!6968 = !DILocation(line: 1520, column: 16, scope: !6956)
!6969 = !DILocation(line: 1520, column: 14, scope: !6956)
!6970 = !DILocation(line: 1521, column: 5, scope: !6956)
!6971 = !DILocation(line: 1525, column: 7, scope: !6972)
!6972 = distinct !DILexicalBlock(scope: !6952, file: !3, line: 1524, column: 5)
!6973 = !DILocation(line: 1526, column: 31, scope: !6972)
!6974 = !DILocation(line: 1526, column: 16, scope: !6972)
!6975 = !DILocation(line: 1526, column: 14, scope: !6972)
!6976 = !DILocation(line: 1527, column: 7, scope: !6972)
!6977 = !DILocation(line: 1529, column: 10, scope: !6942)
!6978 = !DILocation(line: 1529, column: 3, scope: !6942)
!6979 = distinct !DISubprogram(name: "precompute_register_parameters", scope: !3, file: !3, line: 654, type: !6980, scopeLine: 656, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!6980 = !DISubroutineType(types: !6981)
!6981 = !{null, !32, !3453, !5844}
!6982 = !DILocalVariable(name: "num_actuals", arg: 1, scope: !6979, file: !3, line: 654, type: !32)
!6983 = !DILocation(line: 654, column: 37, scope: !6979)
!6984 = !DILocalVariable(name: "args", arg: 2, scope: !6979, file: !3, line: 654, type: !3453)
!6985 = !DILocation(line: 654, column: 67, scope: !6979)
!6986 = !DILocalVariable(name: "reg_parm_seen", arg: 3, scope: !6979, file: !3, line: 655, type: !5844)
!6987 = !DILocation(line: 655, column: 10, scope: !6979)
!6988 = !DILocalVariable(name: "i", scope: !6979, file: !3, line: 657, type: !32)
!6989 = !DILocation(line: 657, column: 7, scope: !6979)
!6990 = !DILocation(line: 659, column: 4, scope: !6979)
!6991 = !DILocation(line: 659, column: 18, scope: !6979)
!6992 = !DILocation(line: 661, column: 10, scope: !6993)
!6993 = distinct !DILexicalBlock(scope: !6979, file: !3, line: 661, column: 3)
!6994 = !DILocation(line: 661, column: 8, scope: !6993)
!6995 = !DILocation(line: 661, column: 15, scope: !6996)
!6996 = distinct !DILexicalBlock(scope: !6993, file: !3, line: 661, column: 3)
!6997 = !DILocation(line: 661, column: 19, scope: !6996)
!6998 = !DILocation(line: 661, column: 17, scope: !6996)
!6999 = !DILocation(line: 661, column: 3, scope: !6993)
!7000 = !DILocation(line: 662, column: 9, scope: !7001)
!7001 = distinct !DILexicalBlock(scope: !6996, file: !3, line: 662, column: 9)
!7002 = !DILocation(line: 662, column: 14, scope: !7001)
!7003 = !DILocation(line: 662, column: 17, scope: !7001)
!7004 = !DILocation(line: 662, column: 21, scope: !7001)
!7005 = !DILocation(line: 662, column: 26, scope: !7001)
!7006 = !DILocation(line: 662, column: 31, scope: !7001)
!7007 = !DILocation(line: 662, column: 36, scope: !7001)
!7008 = !DILocation(line: 662, column: 39, scope: !7001)
!7009 = !DILocation(line: 662, column: 9, scope: !6996)
!7010 = !DILocation(line: 664, column: 3, scope: !7011)
!7011 = distinct !DILexicalBlock(scope: !7001, file: !3, line: 663, column: 7)
!7012 = !DILocation(line: 664, column: 17, scope: !7011)
!7013 = !DILocation(line: 666, column: 6, scope: !7014)
!7014 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 666, column: 6)
!7015 = !DILocation(line: 666, column: 11, scope: !7014)
!7016 = !DILocation(line: 666, column: 14, scope: !7014)
!7017 = !DILocation(line: 666, column: 20, scope: !7014)
!7018 = !DILocation(line: 666, column: 6, scope: !7011)
!7019 = !DILocation(line: 668, column: 6, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !7014, file: !3, line: 667, column: 4)
!7021 = !DILocation(line: 669, column: 37, scope: !7020)
!7022 = !DILocation(line: 669, column: 42, scope: !7020)
!7023 = !DILocation(line: 669, column: 45, scope: !7020)
!7024 = !DILocation(line: 669, column: 22, scope: !7020)
!7025 = !DILocation(line: 669, column: 6, scope: !7020)
!7026 = !DILocation(line: 669, column: 11, scope: !7020)
!7027 = !DILocation(line: 669, column: 14, scope: !7020)
!7028 = !DILocation(line: 669, column: 20, scope: !7020)
!7029 = !DILocation(line: 670, column: 27, scope: !7020)
!7030 = !DILocation(line: 670, column: 32, scope: !7020)
!7031 = !DILocation(line: 670, column: 35, scope: !7020)
!7032 = !DILocation(line: 670, column: 6, scope: !7020)
!7033 = !DILocation(line: 671, column: 6, scope: !7020)
!7034 = !DILocation(line: 672, column: 4, scope: !7020)
!7035 = !DILocation(line: 676, column: 6, scope: !7036)
!7036 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 676, column: 6)
!7037 = !DILocation(line: 677, column: 6, scope: !7036)
!7038 = !DILocation(line: 677, column: 10, scope: !7036)
!7039 = !DILocation(line: 676, column: 6, scope: !7011)
!7040 = !DILocation(line: 678, column: 31, scope: !7036)
!7041 = !DILocation(line: 678, column: 36, scope: !7036)
!7042 = !DILocation(line: 678, column: 39, scope: !7036)
!7043 = !DILocation(line: 678, column: 45, scope: !7036)
!7044 = !DILocation(line: 678, column: 50, scope: !7036)
!7045 = !DILocation(line: 678, column: 53, scope: !7036)
!7046 = !DILocation(line: 678, column: 20, scope: !7036)
!7047 = !DILocation(line: 678, column: 4, scope: !7036)
!7048 = !DILocation(line: 678, column: 9, scope: !7036)
!7049 = !DILocation(line: 678, column: 12, scope: !7036)
!7050 = !DILocation(line: 678, column: 18, scope: !7036)
!7051 = !DILocation(line: 683, column: 6, scope: !7052)
!7052 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 683, column: 6)
!7053 = !DILocation(line: 683, column: 11, scope: !7052)
!7054 = !DILocation(line: 683, column: 14, scope: !7052)
!7055 = !DILocation(line: 683, column: 22, scope: !7052)
!7056 = !DILocation(line: 683, column: 19, scope: !7052)
!7057 = !DILocation(line: 683, column: 6, scope: !7011)
!7058 = !DILocation(line: 685, column: 23, scope: !7052)
!7059 = !DILocation(line: 685, column: 28, scope: !7052)
!7060 = !DILocation(line: 685, column: 31, scope: !7052)
!7061 = !DILocation(line: 686, column: 9, scope: !7052)
!7062 = !DILocation(line: 687, column: 9, scope: !7052)
!7063 = !DILocation(line: 687, column: 14, scope: !7052)
!7064 = !DILocation(line: 687, column: 17, scope: !7052)
!7065 = !DILocation(line: 687, column: 24, scope: !7052)
!7066 = !DILocation(line: 687, column: 29, scope: !7052)
!7067 = !DILocation(line: 687, column: 32, scope: !7052)
!7068 = !DILocation(line: 685, column: 8, scope: !7052)
!7069 = !DILocation(line: 684, column: 4, scope: !7052)
!7070 = !DILocation(line: 684, column: 9, scope: !7052)
!7071 = !DILocation(line: 684, column: 12, scope: !7052)
!7072 = !DILocation(line: 685, column: 6, scope: !7052)
!7073 = !DILocation(line: 692, column: 6, scope: !7074)
!7074 = distinct !DILexicalBlock(scope: !7011, file: !3, line: 692, column: 6)
!7075 = !DILocation(line: 692, column: 29, scope: !7074)
!7076 = !DILocation(line: 692, column: 6, scope: !7011)
!7077 = !DILocalVariable(name: "type", scope: !7078, file: !3, line: 694, type: !258)
!7078 = distinct !DILexicalBlock(scope: !7074, file: !3, line: 693, column: 4)
!7079 = !DILocation(line: 694, column: 11, scope: !7078)
!7080 = !DILocation(line: 694, column: 18, scope: !7078)
!7081 = !DILocation(line: 696, column: 38, scope: !7078)
!7082 = !DILocation(line: 696, column: 43, scope: !7078)
!7083 = !DILocation(line: 696, column: 46, scope: !7078)
!7084 = !DILocation(line: 696, column: 51, scope: !7078)
!7085 = !DILocation(line: 696, column: 56, scope: !7078)
!7086 = !DILocation(line: 696, column: 59, scope: !7078)
!7087 = !DILocation(line: 697, column: 10, scope: !7078)
!7088 = !DILocation(line: 697, column: 35, scope: !7078)
!7089 = !DILocation(line: 697, column: 16, scope: !7078)
!7090 = !DILocation(line: 696, column: 10, scope: !7078)
!7091 = !DILocation(line: 695, column: 6, scope: !7078)
!7092 = !DILocation(line: 695, column: 11, scope: !7078)
!7093 = !DILocation(line: 695, column: 14, scope: !7078)
!7094 = !DILocation(line: 696, column: 8, scope: !7078)
!7095 = !DILocation(line: 698, column: 4, scope: !7078)
!7096 = !DILocation(line: 708, column: 15, scope: !7097)
!7097 = distinct !DILexicalBlock(scope: !7074, file: !3, line: 708, column: 11)
!7098 = !DILocation(line: 709, column: 8, scope: !7097)
!7099 = !DILocation(line: 709, column: 12, scope: !7097)
!7100 = !DILocation(line: 709, column: 37, scope: !7097)
!7101 = !DILocation(line: 710, column: 5, scope: !7097)
!7102 = !DILocation(line: 710, column: 8, scope: !7097)
!7103 = !DILocation(line: 711, column: 4, scope: !7097)
!7104 = !DILocation(line: 711, column: 7, scope: !7097)
!7105 = !DILocation(line: 711, column: 12, scope: !7097)
!7106 = !DILocation(line: 711, column: 15, scope: !7097)
!7107 = !DILocation(line: 711, column: 20, scope: !7097)
!7108 = !DILocation(line: 712, column: 4, scope: !7097)
!7109 = !DILocation(line: 712, column: 17, scope: !7097)
!7110 = !DILocation(line: 712, column: 22, scope: !7097)
!7111 = !DILocation(line: 712, column: 25, scope: !7097)
!7112 = !DILocation(line: 712, column: 37, scope: !7097)
!7113 = !DILocation(line: 712, column: 7, scope: !7097)
!7114 = !DILocation(line: 713, column: 7, scope: !7097)
!7115 = !DILocation(line: 714, column: 4, scope: !7097)
!7116 = !DILocation(line: 714, column: 36, scope: !7097)
!7117 = !DILocation(line: 714, column: 35, scope: !7097)
!7118 = !DILocation(line: 715, column: 8, scope: !7097)
!7119 = !DILocation(line: 715, column: 11, scope: !7097)
!7120 = !DILocation(line: 708, column: 11, scope: !7074)
!7121 = !DILocation(line: 716, column: 38, scope: !7097)
!7122 = !DILocation(line: 716, column: 43, scope: !7097)
!7123 = !DILocation(line: 716, column: 46, scope: !7097)
!7124 = !DILocation(line: 716, column: 52, scope: !7097)
!7125 = !DILocation(line: 716, column: 57, scope: !7097)
!7126 = !DILocation(line: 716, column: 60, scope: !7097)
!7127 = !DILocation(line: 716, column: 20, scope: !7097)
!7128 = !DILocation(line: 716, column: 4, scope: !7097)
!7129 = !DILocation(line: 716, column: 9, scope: !7097)
!7130 = !DILocation(line: 716, column: 12, scope: !7097)
!7131 = !DILocation(line: 716, column: 18, scope: !7097)
!7132 = !DILocation(line: 717, column: 7, scope: !7011)
!7133 = !DILocation(line: 661, column: 33, scope: !6996)
!7134 = !DILocation(line: 661, column: 3, scope: !6996)
!7135 = distinct !{!7135, !6999, !7136}
!7136 = !DILocation(line: 717, column: 7, scope: !6993)
!7137 = !DILocation(line: 718, column: 1, scope: !6979)
!7138 = distinct !DISubprogram(name: "save_fixed_argument_area", scope: !3, file: !3, line: 727, type: !7139, scopeLine: 728, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!7139 = !DISubroutineType(types: !7140)
!7140 = !{!6, !32, !6, !5844, !5844}
!7141 = !DILocalVariable(name: "reg_parm_stack_space", arg: 1, scope: !7138, file: !3, line: 727, type: !32)
!7142 = !DILocation(line: 727, column: 31, scope: !7138)
!7143 = !DILocalVariable(name: "argblock", arg: 2, scope: !7138, file: !3, line: 727, type: !6)
!7144 = !DILocation(line: 727, column: 57, scope: !7138)
!7145 = !DILocalVariable(name: "low_to_save", arg: 3, scope: !7138, file: !3, line: 727, type: !5844)
!7146 = !DILocation(line: 727, column: 72, scope: !7138)
!7147 = !DILocalVariable(name: "high_to_save", arg: 4, scope: !7138, file: !3, line: 727, type: !5844)
!7148 = !DILocation(line: 727, column: 90, scope: !7138)
!7149 = !DILocalVariable(name: "low", scope: !7138, file: !3, line: 729, type: !32)
!7150 = !DILocation(line: 729, column: 7, scope: !7138)
!7151 = !DILocalVariable(name: "high", scope: !7138, file: !3, line: 730, type: !32)
!7152 = !DILocation(line: 730, column: 7, scope: !7138)
!7153 = !DILocation(line: 733, column: 10, scope: !7138)
!7154 = !DILocation(line: 733, column: 8, scope: !7138)
!7155 = !DILocation(line: 737, column: 7, scope: !7156)
!7156 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 737, column: 7)
!7157 = !DILocation(line: 737, column: 14, scope: !7156)
!7158 = !DILocation(line: 737, column: 12, scope: !7156)
!7159 = !DILocation(line: 737, column: 7, scope: !7138)
!7160 = !DILocation(line: 738, column: 12, scope: !7156)
!7161 = !DILocation(line: 738, column: 10, scope: !7156)
!7162 = !DILocation(line: 738, column: 5, scope: !7156)
!7163 = !DILocation(line: 740, column: 12, scope: !7164)
!7164 = distinct !DILexicalBlock(scope: !7138, file: !3, line: 740, column: 3)
!7165 = !DILocation(line: 740, column: 8, scope: !7164)
!7166 = !DILocation(line: 740, column: 17, scope: !7167)
!7167 = distinct !DILexicalBlock(scope: !7164, file: !3, line: 740, column: 3)
!7168 = !DILocation(line: 740, column: 23, scope: !7167)
!7169 = !DILocation(line: 740, column: 21, scope: !7167)
!7170 = !DILocation(line: 740, column: 3, scope: !7164)
!7171 = !DILocation(line: 741, column: 9, scope: !7172)
!7172 = distinct !DILexicalBlock(scope: !7167, file: !3, line: 741, column: 9)
!7173 = !DILocation(line: 741, column: 25, scope: !7172)
!7174 = !DILocation(line: 741, column: 30, scope: !7172)
!7175 = !DILocation(line: 741, column: 9, scope: !7167)
!7176 = !DILocalVariable(name: "num_to_save", scope: !7177, file: !3, line: 743, type: !32)
!7177 = distinct !DILexicalBlock(scope: !7172, file: !3, line: 742, column: 7)
!7178 = !DILocation(line: 743, column: 6, scope: !7177)
!7179 = !DILocalVariable(name: "save_mode", scope: !7177, file: !3, line: 744, type: !50)
!7180 = !DILocation(line: 744, column: 20, scope: !7177)
!7181 = !DILocalVariable(name: "delta", scope: !7177, file: !3, line: 745, type: !32)
!7182 = !DILocation(line: 745, column: 6, scope: !7177)
!7183 = !DILocalVariable(name: "stack_area", scope: !7177, file: !3, line: 746, type: !6)
!7184 = !DILocation(line: 746, column: 6, scope: !7177)
!7185 = !DILocalVariable(name: "save_area", scope: !7177, file: !3, line: 747, type: !6)
!7186 = !DILocation(line: 747, column: 6, scope: !7177)
!7187 = !DILocation(line: 749, column: 2, scope: !7177)
!7188 = !DILocation(line: 749, column: 9, scope: !7177)
!7189 = !DILocation(line: 749, column: 25, scope: !7177)
!7190 = !DILocation(line: 749, column: 33, scope: !7177)
!7191 = distinct !{!7191, !7187, !7192}
!7192 = !DILocation(line: 750, column: 4, scope: !7177)
!7193 = !DILocation(line: 752, column: 17, scope: !7177)
!7194 = !DILocation(line: 752, column: 3, scope: !7177)
!7195 = !DILocation(line: 752, column: 15, scope: !7177)
!7196 = !DILocation(line: 753, column: 18, scope: !7177)
!7197 = !DILocation(line: 753, column: 3, scope: !7177)
!7198 = !DILocation(line: 753, column: 16, scope: !7177)
!7199 = !DILocation(line: 755, column: 16, scope: !7177)
!7200 = !DILocation(line: 755, column: 23, scope: !7177)
!7201 = !DILocation(line: 755, column: 21, scope: !7177)
!7202 = !DILocation(line: 755, column: 27, scope: !7177)
!7203 = !DILocation(line: 755, column: 14, scope: !7177)
!7204 = !DILocation(line: 756, column: 29, scope: !7177)
!7205 = !DILocation(line: 756, column: 41, scope: !7177)
!7206 = !DILocation(line: 756, column: 14, scope: !7177)
!7207 = !DILocation(line: 756, column: 12, scope: !7177)
!7208 = !DILocation(line: 760, column: 7, scope: !7209)
!7209 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 760, column: 6)
!7210 = !DILocation(line: 760, column: 14, scope: !7209)
!7211 = !DILocation(line: 761, column: 41, scope: !7209)
!7212 = !DILocation(line: 760, column: 11, scope: !7209)
!7213 = !DILocation(line: 760, column: 6, scope: !7177)
!7214 = !DILocation(line: 762, column: 14, scope: !7209)
!7215 = !DILocation(line: 762, column: 4, scope: !7209)
!7216 = !DILocation(line: 767, column: 10, scope: !7177)
!7217 = !DILocation(line: 767, column: 8, scope: !7177)
!7218 = !DILocation(line: 769, column: 28, scope: !7177)
!7219 = !DILocation(line: 770, column: 7, scope: !7177)
!7220 = !DILocation(line: 769, column: 15, scope: !7177)
!7221 = !DILocation(line: 769, column: 13, scope: !7177)
!7222 = !DILocation(line: 774, column: 17, scope: !7177)
!7223 = !DILocation(line: 774, column: 2, scope: !7177)
!7224 = !DILocation(line: 775, column: 6, scope: !7225)
!7225 = distinct !DILexicalBlock(scope: !7177, file: !3, line: 775, column: 6)
!7226 = !DILocation(line: 775, column: 16, scope: !7225)
!7227 = !DILocation(line: 775, column: 6, scope: !7177)
!7228 = !DILocation(line: 777, column: 46, scope: !7229)
!7229 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 776, column: 4)
!7230 = !DILocation(line: 777, column: 18, scope: !7229)
!7231 = !DILocation(line: 777, column: 16, scope: !7229)
!7232 = !DILocation(line: 778, column: 37, scope: !7229)
!7233 = !DILocation(line: 778, column: 23, scope: !7229)
!7234 = !DILocation(line: 778, column: 49, scope: !7229)
!7235 = !DILocation(line: 779, column: 9, scope: !7229)
!7236 = !DILocation(line: 778, column: 6, scope: !7229)
!7237 = !DILocation(line: 780, column: 4, scope: !7229)
!7238 = !DILocation(line: 783, column: 31, scope: !7239)
!7239 = distinct !DILexicalBlock(scope: !7225, file: !3, line: 782, column: 4)
!7240 = !DILocation(line: 783, column: 18, scope: !7239)
!7241 = !DILocation(line: 783, column: 16, scope: !7239)
!7242 = !DILocation(line: 784, column: 22, scope: !7239)
!7243 = !DILocation(line: 784, column: 33, scope: !7239)
!7244 = !DILocation(line: 784, column: 6, scope: !7239)
!7245 = !DILocation(line: 787, column: 9, scope: !7177)
!7246 = !DILocation(line: 787, column: 2, scope: !7177)
!7247 = !DILocation(line: 741, column: 33, scope: !7172)
!7248 = !DILocation(line: 740, column: 32, scope: !7167)
!7249 = !DILocation(line: 740, column: 3, scope: !7167)
!7250 = distinct !{!7250, !7170, !7251}
!7251 = !DILocation(line: 788, column: 7, scope: !7164)
!7252 = !DILocation(line: 790, column: 3, scope: !7138)
!7253 = !DILocation(line: 791, column: 1, scope: !7138)
!7254 = distinct !DISubprogram(name: "store_one_arg", scope: !3, file: !3, line: 3994, type: !7255, scopeLine: 3996, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!7255 = !DISubroutineType(types: !7256)
!7256 = !{!32, !3453, !6, !32, !32, !32}
!7257 = !DILocalVariable(name: "arg", arg: 1, scope: !7254, file: !3, line: 3994, type: !3453)
!7258 = !DILocation(line: 3994, column: 33, scope: !7254)
!7259 = !DILocalVariable(name: "argblock", arg: 2, scope: !7254, file: !3, line: 3994, type: !6)
!7260 = !DILocation(line: 3994, column: 42, scope: !7254)
!7261 = !DILocalVariable(name: "flags", arg: 3, scope: !7254, file: !3, line: 3994, type: !32)
!7262 = !DILocation(line: 3994, column: 56, scope: !7254)
!7263 = !DILocalVariable(name: "variable_size", arg: 4, scope: !7254, file: !3, line: 3995, type: !32)
!7264 = !DILocation(line: 3995, column: 13, scope: !7254)
!7265 = !DILocalVariable(name: "reg_parm_stack_space", arg: 5, scope: !7254, file: !3, line: 3995, type: !32)
!7266 = !DILocation(line: 3995, column: 49, scope: !7254)
!7267 = !DILocalVariable(name: "pval", scope: !7254, file: !3, line: 3997, type: !258)
!7268 = !DILocation(line: 3997, column: 8, scope: !7254)
!7269 = !DILocation(line: 3997, column: 15, scope: !7254)
!7270 = !DILocation(line: 3997, column: 20, scope: !7254)
!7271 = !DILocalVariable(name: "reg", scope: !7254, file: !3, line: 3998, type: !6)
!7272 = !DILocation(line: 3998, column: 7, scope: !7254)
!7273 = !DILocalVariable(name: "partial", scope: !7254, file: !3, line: 3999, type: !32)
!7274 = !DILocation(line: 3999, column: 7, scope: !7254)
!7275 = !DILocalVariable(name: "used", scope: !7254, file: !3, line: 4000, type: !32)
!7276 = !DILocation(line: 4000, column: 7, scope: !7254)
!7277 = !DILocalVariable(name: "i", scope: !7254, file: !3, line: 4001, type: !32)
!7278 = !DILocation(line: 4001, column: 7, scope: !7254)
!7279 = !DILocalVariable(name: "lower_bound", scope: !7254, file: !3, line: 4001, type: !32)
!7280 = !DILocation(line: 4001, column: 10, scope: !7254)
!7281 = !DILocalVariable(name: "upper_bound", scope: !7254, file: !3, line: 4001, type: !32)
!7282 = !DILocation(line: 4001, column: 27, scope: !7254)
!7283 = !DILocalVariable(name: "sibcall_failure", scope: !7254, file: !3, line: 4002, type: !32)
!7284 = !DILocation(line: 4002, column: 7, scope: !7254)
!7285 = !DILocation(line: 4004, column: 7, scope: !7286)
!7286 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4004, column: 7)
!7287 = !DILocation(line: 4004, column: 24, scope: !7286)
!7288 = !DILocation(line: 4004, column: 7, scope: !7254)
!7289 = !DILocation(line: 4005, column: 5, scope: !7286)
!7290 = !DILocation(line: 4009, column: 3, scope: !7254)
!7291 = !DILocation(line: 4011, column: 7, scope: !7292)
!7292 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4011, column: 7)
!7293 = !DILocation(line: 4011, column: 32, scope: !7292)
!7294 = !DILocation(line: 4011, column: 37, scope: !7292)
!7295 = !DILocation(line: 4011, column: 43, scope: !7292)
!7296 = !DILocation(line: 4011, column: 7, scope: !7254)
!7297 = !DILocation(line: 4015, column: 11, scope: !7298)
!7298 = distinct !DILexicalBlock(scope: !7299, file: !3, line: 4015, column: 11)
!7299 = distinct !DILexicalBlock(scope: !7292, file: !3, line: 4012, column: 5)
!7300 = !DILocation(line: 4015, column: 20, scope: !7298)
!7301 = !DILocation(line: 4015, column: 25, scope: !7298)
!7302 = !DILocation(line: 4015, column: 39, scope: !7298)
!7303 = !DILocation(line: 4015, column: 42, scope: !7298)
!7304 = !DILocation(line: 4015, column: 47, scope: !7298)
!7305 = !DILocation(line: 4015, column: 11, scope: !7299)
!7306 = !DILocation(line: 4027, column: 8, scope: !7307)
!7307 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 4027, column: 8)
!7308 = distinct !DILexicalBlock(scope: !7298, file: !3, line: 4016, column: 2)
!7309 = !DILocation(line: 4027, column: 45, scope: !7307)
!7310 = !DILocation(line: 4027, column: 8, scope: !7308)
!7311 = !DILocation(line: 4028, column: 20, scope: !7307)
!7312 = !DILocation(line: 4028, column: 18, scope: !7307)
!7313 = !DILocation(line: 4028, column: 6, scope: !7307)
!7314 = !DILocation(line: 4030, column: 18, scope: !7307)
!7315 = !DILocation(line: 4032, column: 18, scope: !7308)
!7316 = !DILocation(line: 4032, column: 32, scope: !7308)
!7317 = !DILocation(line: 4032, column: 37, scope: !7308)
!7318 = !DILocation(line: 4032, column: 44, scope: !7308)
!7319 = !DILocation(line: 4032, column: 49, scope: !7308)
!7320 = !DILocation(line: 4032, column: 30, scope: !7308)
!7321 = !DILocation(line: 4032, column: 16, scope: !7308)
!7322 = !DILocation(line: 4035, column: 8, scope: !7308)
!7323 = !DILocation(line: 4035, column: 6, scope: !7308)
!7324 = !DILocation(line: 4038, column: 8, scope: !7325)
!7325 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 4038, column: 8)
!7326 = !DILocation(line: 4038, column: 12, scope: !7325)
!7327 = !DILocation(line: 4038, column: 10, scope: !7325)
!7328 = !DILocation(line: 4038, column: 8, scope: !7308)
!7329 = !DILocation(line: 4039, column: 10, scope: !7325)
!7330 = !DILocation(line: 4039, column: 8, scope: !7325)
!7331 = !DILocation(line: 4039, column: 6, scope: !7325)
!7332 = !DILocation(line: 4040, column: 4, scope: !7308)
!7333 = !DILocation(line: 4040, column: 11, scope: !7308)
!7334 = !DILocation(line: 4040, column: 15, scope: !7308)
!7335 = !DILocation(line: 4040, column: 13, scope: !7308)
!7336 = !DILocation(line: 4040, column: 27, scope: !7308)
!7337 = !DILocation(line: 4040, column: 30, scope: !7308)
!7338 = !DILocation(line: 4040, column: 46, scope: !7308)
!7339 = !DILocation(line: 4040, column: 49, scope: !7308)
!7340 = !DILocation(line: 0, scope: !7308)
!7341 = !DILocation(line: 4041, column: 7, scope: !7308)
!7342 = distinct !{!7342, !7332, !7341}
!7343 = !DILocation(line: 4043, column: 8, scope: !7344)
!7344 = distinct !DILexicalBlock(scope: !7308, file: !3, line: 4043, column: 8)
!7345 = !DILocation(line: 4043, column: 12, scope: !7344)
!7346 = !DILocation(line: 4043, column: 10, scope: !7344)
!7347 = !DILocation(line: 4043, column: 8, scope: !7308)
!7348 = !DILocalVariable(name: "size", scope: !7349, file: !3, line: 4046, type: !13)
!7349 = distinct !DILexicalBlock(scope: !7344, file: !3, line: 4044, column: 6)
!7350 = !DILocation(line: 4046, column: 21, scope: !7349)
!7351 = !DILocation(line: 4046, column: 28, scope: !7349)
!7352 = !DILocation(line: 4046, column: 33, scope: !7349)
!7353 = !DILocation(line: 4046, column: 40, scope: !7349)
!7354 = !DILocation(line: 4046, column: 45, scope: !7349)
!7355 = !DILocation(line: 4046, column: 54, scope: !7349)
!7356 = !DILocalVariable(name: "save_mode", scope: !7349, file: !3, line: 4047, type: !50)
!7357 = !DILocation(line: 4047, column: 26, scope: !7349)
!7358 = !DILocation(line: 4047, column: 53, scope: !7349)
!7359 = !DILocation(line: 4047, column: 38, scope: !7349)
!7360 = !DILocalVariable(name: "adr", scope: !7349, file: !3, line: 4048, type: !6)
!7361 = !DILocation(line: 4048, column: 12, scope: !7349)
!7362 = !DILocation(line: 4048, column: 18, scope: !7349)
!7363 = !DILocalVariable(name: "stack_area", scope: !7349, file: !3, line: 4049, type: !6)
!7364 = !DILocation(line: 4049, column: 12, scope: !7349)
!7365 = !DILocation(line: 4049, column: 38, scope: !7349)
!7366 = !DILocation(line: 4049, column: 49, scope: !7349)
!7367 = !DILocation(line: 4049, column: 25, scope: !7349)
!7368 = !DILocation(line: 4051, column: 12, scope: !7369)
!7369 = distinct !DILexicalBlock(scope: !7349, file: !3, line: 4051, column: 12)
!7370 = !DILocation(line: 4051, column: 22, scope: !7369)
!7371 = !DILocation(line: 4051, column: 12, scope: !7349)
!7372 = !DILocalVariable(name: "ot", scope: !7373, file: !3, line: 4053, type: !258)
!7373 = distinct !DILexicalBlock(scope: !7369, file: !3, line: 4052, column: 3)
!7374 = !DILocation(line: 4053, column: 10, scope: !7373)
!7375 = !DILocation(line: 4053, column: 15, scope: !7373)
!7376 = !DILocalVariable(name: "nt", scope: !7373, file: !3, line: 4054, type: !258)
!7377 = !DILocation(line: 4054, column: 10, scope: !7373)
!7378 = !DILocation(line: 4054, column: 37, scope: !7373)
!7379 = !DILocation(line: 4054, column: 42, scope: !7373)
!7380 = !DILocation(line: 4055, column: 14, scope: !7373)
!7381 = !DILocation(line: 4054, column: 15, scope: !7373)
!7382 = !DILocation(line: 4057, column: 35, scope: !7373)
!7383 = !DILocation(line: 4057, column: 22, scope: !7373)
!7384 = !DILocation(line: 4057, column: 5, scope: !7373)
!7385 = !DILocation(line: 4057, column: 10, scope: !7373)
!7386 = !DILocation(line: 4057, column: 20, scope: !7373)
!7387 = !DILocation(line: 4058, column: 26, scope: !7373)
!7388 = !DILocation(line: 4058, column: 31, scope: !7373)
!7389 = !DILocation(line: 4058, column: 5, scope: !7373)
!7390 = !DILocation(line: 4059, column: 36, scope: !7373)
!7391 = !DILocation(line: 4059, column: 41, scope: !7373)
!7392 = !DILocation(line: 4059, column: 22, scope: !7373)
!7393 = !DILocation(line: 4059, column: 53, scope: !7373)
!7394 = !DILocation(line: 4060, column: 8, scope: !7373)
!7395 = !DILocation(line: 4059, column: 5, scope: !7373)
!7396 = !DILocation(line: 4062, column: 3, scope: !7373)
!7397 = !DILocation(line: 4065, column: 35, scope: !7398)
!7398 = distinct !DILexicalBlock(scope: !7369, file: !3, line: 4064, column: 3)
!7399 = !DILocation(line: 4065, column: 22, scope: !7398)
!7400 = !DILocation(line: 4065, column: 5, scope: !7398)
!7401 = !DILocation(line: 4065, column: 10, scope: !7398)
!7402 = !DILocation(line: 4065, column: 20, scope: !7398)
!7403 = !DILocation(line: 4066, column: 21, scope: !7398)
!7404 = !DILocation(line: 4066, column: 26, scope: !7398)
!7405 = !DILocation(line: 4066, column: 37, scope: !7398)
!7406 = !DILocation(line: 4066, column: 5, scope: !7398)
!7407 = !DILocation(line: 4068, column: 6, scope: !7349)
!7408 = !DILocation(line: 4069, column: 2, scope: !7308)
!7409 = !DILocation(line: 4070, column: 5, scope: !7299)
!7410 = !DILocation(line: 4074, column: 9, scope: !7411)
!7411 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4074, column: 7)
!7412 = !DILocation(line: 4074, column: 14, scope: !7411)
!7413 = !DILocation(line: 4074, column: 7, scope: !7254)
!7414 = !DILocation(line: 4076, column: 11, scope: !7415)
!7415 = distinct !DILexicalBlock(scope: !7416, file: !3, line: 4076, column: 11)
!7416 = distinct !DILexicalBlock(scope: !7411, file: !3, line: 4075, column: 5)
!7417 = !DILocation(line: 4076, column: 17, scope: !7415)
!7418 = !DILocation(line: 4076, column: 11, scope: !7416)
!7419 = !DILocation(line: 4077, column: 8, scope: !7415)
!7420 = !DILocation(line: 4077, column: 13, scope: !7415)
!7421 = !DILocation(line: 4077, column: 6, scope: !7415)
!7422 = !DILocation(line: 4077, column: 2, scope: !7415)
!7423 = !DILocation(line: 4079, column: 8, scope: !7415)
!7424 = !DILocation(line: 4079, column: 13, scope: !7415)
!7425 = !DILocation(line: 4079, column: 6, scope: !7415)
!7426 = !DILocation(line: 4080, column: 17, scope: !7416)
!7427 = !DILocation(line: 4080, column: 22, scope: !7416)
!7428 = !DILocation(line: 4080, column: 15, scope: !7416)
!7429 = !DILocation(line: 4081, column: 5, scope: !7416)
!7430 = !DILocation(line: 4085, column: 3, scope: !7254)
!7431 = !DILocation(line: 4089, column: 7, scope: !7432)
!7432 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4089, column: 7)
!7433 = !DILocation(line: 4089, column: 12, scope: !7432)
!7434 = !DILocation(line: 4089, column: 27, scope: !7432)
!7435 = !DILocation(line: 4089, column: 7, scope: !7254)
!7436 = !DILocation(line: 4090, column: 9, scope: !7432)
!7437 = !DILocation(line: 4090, column: 5, scope: !7432)
!7438 = !DILocation(line: 4094, column: 7, scope: !7439)
!7439 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4094, column: 7)
!7440 = !DILocation(line: 4094, column: 12, scope: !7439)
!7441 = !DILocation(line: 4094, column: 18, scope: !7439)
!7442 = !DILocation(line: 4094, column: 7, scope: !7254)
!7443 = !DILocation(line: 4114, column: 11, scope: !7444)
!7444 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 4114, column: 11)
!7445 = distinct !DILexicalBlock(scope: !7439, file: !3, line: 4095, column: 5)
!7446 = !DILocation(line: 4114, column: 16, scope: !7444)
!7447 = !DILocation(line: 4114, column: 11, scope: !7445)
!7448 = !DILocation(line: 4115, column: 30, scope: !7444)
!7449 = !DILocation(line: 4115, column: 2, scope: !7444)
!7450 = !DILocation(line: 4117, column: 33, scope: !7445)
!7451 = !DILocation(line: 4118, column: 6, scope: !7445)
!7452 = !DILocation(line: 4119, column: 6, scope: !7445)
!7453 = !DILocation(line: 4119, column: 9, scope: !7445)
!7454 = !DILocation(line: 4119, column: 41, scope: !7445)
!7455 = !DILocation(line: 4119, column: 46, scope: !7445)
!7456 = !DILocation(line: 4119, column: 38, scope: !7445)
!7457 = !DILocation(line: 4118, column: 5, scope: !7445)
!7458 = !DILocation(line: 4120, column: 18, scope: !7445)
!7459 = !DILocation(line: 4120, column: 23, scope: !7445)
!7460 = !DILocation(line: 4117, column: 20, scope: !7445)
!7461 = !DILocation(line: 4117, column: 7, scope: !7445)
!7462 = !DILocation(line: 4117, column: 12, scope: !7445)
!7463 = !DILocation(line: 4117, column: 18, scope: !7445)
!7464 = !DILocation(line: 4126, column: 11, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 4126, column: 11)
!7466 = !DILocation(line: 4126, column: 16, scope: !7465)
!7467 = !DILocation(line: 4126, column: 24, scope: !7465)
!7468 = !DILocation(line: 4126, column: 21, scope: !7465)
!7469 = !DILocation(line: 4126, column: 11, scope: !7445)
!7470 = !DILocation(line: 4127, column: 30, scope: !7465)
!7471 = !DILocation(line: 4127, column: 35, scope: !7465)
!7472 = !DILocation(line: 4127, column: 41, scope: !7465)
!7473 = !DILocation(line: 4128, column: 9, scope: !7465)
!7474 = !DILocation(line: 4128, column: 14, scope: !7465)
!7475 = !DILocation(line: 4128, column: 21, scope: !7465)
!7476 = !DILocation(line: 4128, column: 26, scope: !7465)
!7477 = !DILocation(line: 4127, column: 15, scope: !7465)
!7478 = !DILocation(line: 4127, column: 2, scope: !7465)
!7479 = !DILocation(line: 4127, column: 7, scope: !7465)
!7480 = !DILocation(line: 4127, column: 13, scope: !7465)
!7481 = !DILocation(line: 4130, column: 11, scope: !7482)
!7482 = distinct !DILexicalBlock(scope: !7445, file: !3, line: 4130, column: 11)
!7483 = !DILocation(line: 4130, column: 16, scope: !7482)
!7484 = !DILocation(line: 4130, column: 11, scope: !7445)
!7485 = !DILocation(line: 4131, column: 30, scope: !7482)
!7486 = !DILocation(line: 4131, column: 2, scope: !7482)
!7487 = !DILocation(line: 4132, column: 5, scope: !7445)
!7488 = !DILocation(line: 4135, column: 8, scope: !7489)
!7489 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4135, column: 7)
!7490 = !DILocation(line: 4135, column: 14, scope: !7489)
!7491 = !DILocation(line: 4136, column: 7, scope: !7489)
!7492 = !DILocation(line: 4136, column: 10, scope: !7489)
!7493 = !DILocation(line: 4137, column: 7, scope: !7489)
!7494 = !DILocation(line: 4137, column: 48, scope: !7489)
!7495 = !DILocation(line: 4138, column: 13, scope: !7489)
!7496 = !DILocation(line: 4138, column: 18, scope: !7489)
!7497 = !DILocation(line: 4138, column: 25, scope: !7489)
!7498 = !DILocation(line: 4138, column: 30, scope: !7489)
!7499 = !DILocation(line: 4137, column: 10, scope: !7489)
!7500 = !DILocation(line: 4135, column: 7, scope: !7254)
!7501 = !DILocation(line: 4139, column: 21, scope: !7489)
!7502 = !DILocation(line: 4139, column: 5, scope: !7489)
!7503 = !DILocation(line: 4143, column: 7, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4143, column: 7)
!7505 = !DILocation(line: 4143, column: 13, scope: !7504)
!7506 = !DILocation(line: 4143, column: 7, scope: !7254)
!7507 = !DILocation(line: 4144, column: 5, scope: !7504)
!7508 = !DILocation(line: 4146, column: 7, scope: !7509)
!7509 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4146, column: 7)
!7510 = !DILocation(line: 4146, column: 12, scope: !7509)
!7511 = !DILocation(line: 4146, column: 21, scope: !7509)
!7512 = !DILocation(line: 4146, column: 26, scope: !7509)
!7513 = !DILocation(line: 4146, column: 18, scope: !7509)
!7514 = !DILocation(line: 4146, column: 7, scope: !7254)
!7515 = !DILocation(line: 4149, column: 12, scope: !7516)
!7516 = distinct !DILexicalBlock(scope: !7509, file: !3, line: 4149, column: 12)
!7517 = !DILocation(line: 4149, column: 17, scope: !7516)
!7518 = !DILocation(line: 4149, column: 22, scope: !7516)
!7519 = !DILocation(line: 4149, column: 12, scope: !7509)
!7520 = !DILocalVariable(name: "size", scope: !7521, file: !3, line: 4151, type: !32)
!7521 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 4150, column: 5)
!7522 = !DILocation(line: 4151, column: 11, scope: !7521)
!7523 = !DILocalVariable(name: "parm_align", scope: !7521, file: !3, line: 4152, type: !13)
!7524 = !DILocation(line: 4152, column: 20, scope: !7521)
!7525 = !DILocation(line: 4164, column: 14, scope: !7521)
!7526 = !DILocation(line: 4164, column: 12, scope: !7521)
!7527 = !DILocation(line: 4169, column: 14, scope: !7521)
!7528 = !DILocation(line: 4169, column: 12, scope: !7521)
!7529 = !DILocation(line: 4171, column: 14, scope: !7521)
!7530 = !DILocation(line: 4171, column: 12, scope: !7521)
!7531 = !DILocation(line: 4176, column: 12, scope: !7532)
!7532 = distinct !DILexicalBlock(scope: !7521, file: !3, line: 4175, column: 11)
!7533 = !DILocation(line: 4176, column: 17, scope: !7532)
!7534 = !DILocation(line: 4176, column: 49, scope: !7532)
!7535 = !DILocation(line: 4177, column: 4, scope: !7532)
!7536 = !DILocation(line: 4178, column: 3, scope: !7532)
!7537 = !DILocation(line: 4176, column: 7, scope: !7532)
!7538 = !DILocation(line: 4181, column: 20, scope: !7521)
!7539 = !DILocation(line: 4181, column: 25, scope: !7521)
!7540 = !DILocation(line: 4181, column: 32, scope: !7521)
!7541 = !DILocation(line: 4181, column: 18, scope: !7521)
!7542 = !DILocation(line: 4194, column: 23, scope: !7521)
!7543 = !DILocation(line: 4194, column: 28, scope: !7521)
!7544 = !DILocation(line: 4194, column: 35, scope: !7521)
!7545 = !DILocation(line: 4194, column: 40, scope: !7521)
!7546 = !DILocation(line: 4194, column: 46, scope: !7521)
!7547 = !DILocation(line: 4195, column: 9, scope: !7521)
!7548 = !DILocation(line: 4195, column: 21, scope: !7521)
!7549 = !DILocation(line: 4195, column: 30, scope: !7521)
!7550 = !DILocation(line: 4195, column: 35, scope: !7521)
!7551 = !DILocation(line: 4195, column: 42, scope: !7521)
!7552 = !DILocation(line: 4195, column: 40, scope: !7521)
!7553 = !DILocation(line: 4195, column: 48, scope: !7521)
!7554 = !DILocation(line: 4196, column: 9, scope: !7521)
!7555 = !DILocation(line: 4196, column: 45, scope: !7521)
!7556 = !DILocation(line: 4197, column: 9, scope: !7521)
!7557 = !DILocation(line: 4194, column: 7, scope: !7521)
!7558 = !DILocation(line: 4201, column: 11, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !7521, file: !3, line: 4201, column: 11)
!7560 = !DILocation(line: 4201, column: 19, scope: !7559)
!7561 = !DILocation(line: 4201, column: 11, scope: !7521)
!7562 = !DILocation(line: 4202, column: 15, scope: !7559)
!7563 = !DILocation(line: 4202, column: 20, scope: !7559)
!7564 = !DILocation(line: 4202, column: 2, scope: !7559)
!7565 = !DILocation(line: 4202, column: 7, scope: !7559)
!7566 = !DILocation(line: 4202, column: 13, scope: !7559)
!7567 = !DILocation(line: 4203, column: 5, scope: !7521)
!7568 = !DILocalVariable(name: "parm_align", scope: !7569, file: !3, line: 4208, type: !13)
!7569 = distinct !DILexicalBlock(scope: !7516, file: !3, line: 4205, column: 5)
!7570 = !DILocation(line: 4208, column: 20, scope: !7569)
!7571 = !DILocalVariable(name: "excess", scope: !7569, file: !3, line: 4209, type: !32)
!7572 = !DILocation(line: 4209, column: 11, scope: !7569)
!7573 = !DILocalVariable(name: "size_rtx", scope: !7569, file: !3, line: 4210, type: !6)
!7574 = !DILocation(line: 4210, column: 11, scope: !7569)
!7575 = !DILocation(line: 4219, column: 11, scope: !7576)
!7576 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4219, column: 11)
!7577 = !DILocation(line: 4219, column: 16, scope: !7576)
!7578 = !DILocation(line: 4219, column: 23, scope: !7576)
!7579 = !DILocation(line: 4219, column: 28, scope: !7576)
!7580 = !DILocation(line: 4219, column: 32, scope: !7576)
!7581 = !DILocation(line: 4219, column: 11, scope: !7569)
!7582 = !DILocation(line: 4221, column: 11, scope: !7583)
!7583 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4220, column: 2)
!7584 = !DILocation(line: 4222, column: 15, scope: !7583)
!7585 = !DILocation(line: 4222, column: 13, scope: !7583)
!7586 = !DILocation(line: 4223, column: 2, scope: !7583)
!7587 = !DILocation(line: 4228, column: 14, scope: !7588)
!7588 = distinct !DILexicalBlock(scope: !7576, file: !3, line: 4225, column: 2)
!7589 = !DILocation(line: 4228, column: 19, scope: !7588)
!7590 = !DILocation(line: 4228, column: 26, scope: !7588)
!7591 = !DILocation(line: 4228, column: 31, scope: !7588)
!7592 = !DILocation(line: 4229, column: 28, scope: !7588)
!7593 = !DILocation(line: 4229, column: 9, scope: !7588)
!7594 = !DILocation(line: 4229, column: 7, scope: !7588)
!7595 = !DILocation(line: 4230, column: 9, scope: !7588)
!7596 = !DILocation(line: 4230, column: 7, scope: !7588)
!7597 = !DILocation(line: 4228, column: 13, scope: !7588)
!7598 = !DILocation(line: 4228, column: 11, scope: !7588)
!7599 = !DILocation(line: 4231, column: 43, scope: !7588)
!7600 = !DILocation(line: 4231, column: 28, scope: !7588)
!7601 = !DILocation(line: 4232, column: 17, scope: !7588)
!7602 = !DILocation(line: 4231, column: 15, scope: !7588)
!7603 = !DILocation(line: 4231, column: 13, scope: !7588)
!7604 = !DILocation(line: 4236, column: 20, scope: !7569)
!7605 = !DILocation(line: 4236, column: 25, scope: !7569)
!7606 = !DILocation(line: 4236, column: 32, scope: !7569)
!7607 = !DILocation(line: 4236, column: 18, scope: !7569)
!7608 = !DILocation(line: 4251, column: 12, scope: !7609)
!7609 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4251, column: 11)
!7610 = !DILocation(line: 4251, column: 18, scope: !7609)
!7611 = !DILocation(line: 4251, column: 33, scope: !7609)
!7612 = !DILocation(line: 4251, column: 36, scope: !7609)
!7613 = !DILocation(line: 4251, column: 11, scope: !7569)
!7614 = !DILocalVariable(name: "x", scope: !7615, file: !3, line: 4255, type: !6)
!7615 = distinct !DILexicalBlock(scope: !7609, file: !3, line: 4252, column: 2)
!7616 = !DILocation(line: 4255, column: 8, scope: !7615)
!7617 = !DILocation(line: 4255, column: 12, scope: !7615)
!7618 = !DILocation(line: 4255, column: 17, scope: !7615)
!7619 = !DILocalVariable(name: "i", scope: !7615, file: !3, line: 4256, type: !32)
!7620 = !DILocation(line: 4256, column: 8, scope: !7615)
!7621 = !DILocation(line: 4258, column: 8, scope: !7622)
!7622 = distinct !DILexicalBlock(scope: !7615, file: !3, line: 4258, column: 8)
!7623 = !DILocation(line: 4258, column: 34, scope: !7622)
!7624 = !DILocation(line: 4258, column: 20, scope: !7622)
!7625 = !DILocation(line: 4259, column: 8, scope: !7622)
!7626 = !DILocation(line: 4259, column: 12, scope: !7622)
!7627 = !DILocation(line: 4259, column: 35, scope: !7622)
!7628 = !DILocation(line: 4260, column: 5, scope: !7622)
!7629 = !DILocation(line: 4260, column: 8, scope: !7622)
!7630 = !DILocation(line: 4261, column: 19, scope: !7622)
!7631 = !DILocation(line: 4260, column: 30, scope: !7622)
!7632 = !DILocation(line: 4262, column: 5, scope: !7622)
!7633 = !DILocation(line: 4262, column: 8, scope: !7622)
!7634 = !DILocation(line: 4258, column: 8, scope: !7615)
!7635 = !DILocation(line: 4264, column: 12, scope: !7636)
!7636 = distinct !DILexicalBlock(scope: !7637, file: !3, line: 4264, column: 12)
!7637 = distinct !DILexicalBlock(scope: !7622, file: !3, line: 4263, column: 6)
!7638 = !DILocation(line: 4264, column: 38, scope: !7636)
!7639 = !DILocation(line: 4264, column: 24, scope: !7636)
!7640 = !DILocation(line: 4264, column: 12, scope: !7637)
!7641 = !DILocation(line: 4265, column: 7, scope: !7636)
!7642 = !DILocation(line: 4265, column: 5, scope: !7636)
!7643 = !DILocation(line: 4265, column: 3, scope: !7636)
!7644 = !DILocation(line: 4268, column: 8, scope: !7637)
!7645 = !DILocation(line: 4272, column: 12, scope: !7646)
!7646 = distinct !DILexicalBlock(scope: !7637, file: !3, line: 4272, column: 12)
!7647 = !DILocation(line: 4272, column: 17, scope: !7646)
!7648 = !DILocation(line: 4272, column: 24, scope: !7646)
!7649 = !DILocation(line: 4272, column: 31, scope: !7646)
!7650 = !DILocation(line: 4272, column: 42, scope: !7646)
!7651 = !DILocation(line: 4272, column: 40, scope: !7646)
!7652 = !DILocation(line: 4272, column: 12, scope: !7637)
!7653 = !DILocation(line: 4274, column: 9, scope: !7654)
!7654 = distinct !DILexicalBlock(scope: !7655, file: !3, line: 4274, column: 9)
!7655 = distinct !DILexicalBlock(scope: !7646, file: !3, line: 4273, column: 3)
!7656 = !DILocation(line: 4274, column: 14, scope: !7654)
!7657 = !DILocation(line: 4274, column: 21, scope: !7654)
!7658 = !DILocation(line: 4274, column: 28, scope: !7654)
!7659 = !DILocation(line: 4274, column: 39, scope: !7654)
!7660 = !DILocation(line: 4274, column: 43, scope: !7654)
!7661 = !DILocation(line: 4274, column: 41, scope: !7654)
!7662 = !DILocation(line: 4274, column: 37, scope: !7654)
!7663 = !DILocation(line: 4274, column: 9, scope: !7655)
!7664 = !DILocation(line: 4275, column: 23, scope: !7654)
!7665 = !DILocation(line: 4275, column: 7, scope: !7654)
!7666 = !DILocation(line: 4276, column: 3, scope: !7655)
!7667 = !DILocation(line: 4277, column: 17, scope: !7668)
!7668 = distinct !DILexicalBlock(scope: !7646, file: !3, line: 4277, column: 17)
!7669 = !DILocation(line: 4277, column: 22, scope: !7668)
!7670 = !DILocation(line: 4277, column: 29, scope: !7668)
!7671 = !DILocation(line: 4277, column: 36, scope: !7668)
!7672 = !DILocation(line: 4277, column: 47, scope: !7668)
!7673 = !DILocation(line: 4277, column: 45, scope: !7668)
!7674 = !DILocation(line: 4277, column: 17, scope: !7646)
!7675 = !DILocation(line: 4282, column: 9, scope: !7676)
!7676 = distinct !DILexicalBlock(scope: !7677, file: !3, line: 4282, column: 9)
!7677 = distinct !DILexicalBlock(scope: !7668, file: !3, line: 4278, column: 3)
!7678 = !DILocation(line: 4282, column: 14, scope: !7676)
!7679 = !DILocation(line: 4282, column: 19, scope: !7676)
!7680 = !DILocation(line: 4282, column: 26, scope: !7676)
!7681 = !DILocation(line: 4282, column: 33, scope: !7676)
!7682 = !DILocation(line: 4283, column: 9, scope: !7676)
!7683 = !DILocation(line: 4283, column: 14, scope: !7676)
!7684 = !DILocation(line: 4283, column: 21, scope: !7676)
!7685 = !DILocation(line: 4283, column: 26, scope: !7676)
!7686 = !DILocation(line: 4283, column: 7, scope: !7676)
!7687 = !DILocation(line: 4282, column: 11, scope: !7676)
!7688 = !DILocation(line: 4282, column: 9, scope: !7677)
!7689 = !DILocation(line: 4284, column: 23, scope: !7676)
!7690 = !DILocation(line: 4284, column: 7, scope: !7676)
!7691 = !DILocation(line: 4285, column: 3, scope: !7677)
!7692 = !DILocation(line: 4293, column: 9, scope: !7693)
!7693 = distinct !DILexicalBlock(scope: !7694, file: !3, line: 4293, column: 9)
!7694 = distinct !DILexicalBlock(scope: !7668, file: !3, line: 4287, column: 3)
!7695 = !DILocation(line: 4293, column: 14, scope: !7693)
!7696 = !DILocation(line: 4293, column: 21, scope: !7693)
!7697 = !DILocation(line: 4293, column: 26, scope: !7693)
!7698 = !DILocation(line: 4293, column: 38, scope: !7693)
!7699 = !DILocation(line: 4293, column: 35, scope: !7693)
!7700 = !DILocation(line: 4293, column: 9, scope: !7694)
!7701 = !DILocation(line: 4294, column: 23, scope: !7693)
!7702 = !DILocation(line: 4294, column: 7, scope: !7693)
!7703 = !DILocation(line: 4296, column: 6, scope: !7637)
!7704 = !DILocation(line: 4297, column: 2, scope: !7615)
!7705 = !DILocation(line: 4299, column: 23, scope: !7569)
!7706 = !DILocation(line: 4299, column: 28, scope: !7569)
!7707 = !DILocation(line: 4299, column: 35, scope: !7569)
!7708 = !DILocation(line: 4299, column: 40, scope: !7569)
!7709 = !DILocation(line: 4299, column: 46, scope: !7569)
!7710 = !DILocation(line: 4299, column: 64, scope: !7569)
!7711 = !DILocation(line: 4300, column: 9, scope: !7569)
!7712 = !DILocation(line: 4300, column: 21, scope: !7569)
!7713 = !DILocation(line: 4300, column: 30, scope: !7569)
!7714 = !DILocation(line: 4300, column: 35, scope: !7569)
!7715 = !DILocation(line: 4300, column: 43, scope: !7569)
!7716 = !DILocation(line: 4301, column: 9, scope: !7569)
!7717 = !DILocation(line: 4301, column: 45, scope: !7569)
!7718 = !DILocation(line: 4302, column: 9, scope: !7569)
!7719 = !DILocation(line: 4299, column: 7, scope: !7569)
!7720 = !DILocation(line: 4312, column: 11, scope: !7721)
!7721 = distinct !DILexicalBlock(scope: !7569, file: !3, line: 4312, column: 11)
!7722 = !DILocation(line: 4312, column: 19, scope: !7721)
!7723 = !DILocation(line: 4312, column: 11, scope: !7569)
!7724 = !DILocation(line: 4313, column: 15, scope: !7721)
!7725 = !DILocation(line: 4313, column: 20, scope: !7721)
!7726 = !DILocation(line: 4313, column: 2, scope: !7721)
!7727 = !DILocation(line: 4313, column: 7, scope: !7721)
!7728 = !DILocation(line: 4313, column: 13, scope: !7721)
!7729 = !DILocation(line: 4316, column: 7, scope: !7730)
!7730 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4316, column: 7)
!7731 = !DILocation(line: 4316, column: 12, scope: !7730)
!7732 = !DILocation(line: 4316, column: 16, scope: !7730)
!7733 = !DILocation(line: 4316, column: 19, scope: !7730)
!7734 = !DILocation(line: 4316, column: 39, scope: !7730)
!7735 = !DILocation(line: 4316, column: 7, scope: !7254)
!7736 = !DILocalVariable(name: "type", scope: !7737, file: !3, line: 4318, type: !258)
!7737 = distinct !DILexicalBlock(scope: !7730, file: !3, line: 4317, column: 5)
!7738 = !DILocation(line: 4318, column: 12, scope: !7737)
!7739 = !DILocation(line: 4318, column: 19, scope: !7737)
!7740 = !DILocation(line: 4320, column: 32, scope: !7737)
!7741 = !DILocation(line: 4320, column: 37, scope: !7737)
!7742 = !DILocation(line: 4320, column: 42, scope: !7737)
!7743 = !DILocation(line: 4320, column: 47, scope: !7737)
!7744 = !DILocation(line: 4320, column: 54, scope: !7737)
!7745 = !DILocation(line: 4321, column: 30, scope: !7737)
!7746 = !DILocation(line: 4321, column: 11, scope: !7737)
!7747 = !DILocation(line: 4320, column: 4, scope: !7737)
!7748 = !DILocation(line: 4319, column: 7, scope: !7737)
!7749 = !DILocation(line: 4319, column: 12, scope: !7737)
!7750 = !DILocation(line: 4320, column: 2, scope: !7737)
!7751 = !DILocation(line: 4322, column: 5, scope: !7737)
!7752 = !DILocation(line: 4325, column: 7, scope: !7753)
!7753 = distinct !DILexicalBlock(scope: !7254, file: !3, line: 4325, column: 7)
!7754 = !DILocation(line: 4325, column: 32, scope: !7753)
!7755 = !DILocation(line: 4325, column: 37, scope: !7753)
!7756 = !DILocation(line: 4325, column: 43, scope: !7753)
!7757 = !DILocation(line: 4326, column: 7, scope: !7753)
!7758 = !DILocation(line: 4326, column: 10, scope: !7753)
!7759 = !DILocation(line: 4326, column: 19, scope: !7753)
!7760 = !DILocation(line: 4326, column: 24, scope: !7753)
!7761 = !DILocation(line: 4326, column: 38, scope: !7753)
!7762 = !DILocation(line: 4326, column: 41, scope: !7753)
!7763 = !DILocation(line: 4326, column: 46, scope: !7753)
!7764 = !DILocation(line: 4325, column: 7, scope: !7254)
!7765 = !DILocation(line: 4327, column: 14, scope: !7766)
!7766 = distinct !DILexicalBlock(scope: !7753, file: !3, line: 4327, column: 5)
!7767 = !DILocation(line: 4327, column: 12, scope: !7766)
!7768 = !DILocation(line: 4327, column: 10, scope: !7766)
!7769 = !DILocation(line: 4327, column: 27, scope: !7770)
!7770 = distinct !DILexicalBlock(scope: !7766, file: !3, line: 4327, column: 5)
!7771 = !DILocation(line: 4327, column: 31, scope: !7770)
!7772 = !DILocation(line: 4327, column: 29, scope: !7770)
!7773 = !DILocation(line: 4327, column: 5, scope: !7766)
!7774 = !DILocation(line: 4328, column: 7, scope: !7770)
!7775 = !DILocation(line: 4328, column: 23, scope: !7770)
!7776 = !DILocation(line: 4328, column: 26, scope: !7770)
!7777 = !DILocation(line: 4327, column: 45, scope: !7770)
!7778 = !DILocation(line: 4327, column: 5, scope: !7770)
!7779 = distinct !{!7779, !7773, !7780}
!7780 = !DILocation(line: 4328, column: 28, scope: !7766)
!7781 = !DILocation(line: 4332, column: 3, scope: !7254)
!7782 = !DILocation(line: 4337, column: 3, scope: !7254)
!7783 = !DILocation(line: 4338, column: 3, scope: !7254)
!7784 = !DILocation(line: 4339, column: 3, scope: !7254)
!7785 = !DILocation(line: 4341, column: 10, scope: !7254)
!7786 = !DILocation(line: 4341, column: 3, scope: !7254)
!7787 = !DILocation(line: 4342, column: 1, scope: !7254)
!7788 = distinct !DISubprogram(name: "check_sibcall_argument_overlap", scope: !3, file: !3, line: 1826, type: !7789, scopeLine: 1827, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!7789 = !DISubroutineType(types: !7790)
!7790 = !{!32, !6, !3453, !32}
!7791 = !DILocalVariable(name: "insn", arg: 1, scope: !7788, file: !3, line: 1826, type: !6)
!7792 = !DILocation(line: 1826, column: 37, scope: !7788)
!7793 = !DILocalVariable(name: "arg", arg: 2, scope: !7788, file: !3, line: 1826, type: !3453)
!7794 = !DILocation(line: 1826, column: 60, scope: !7788)
!7795 = !DILocalVariable(name: "mark_stored_args_map", arg: 3, scope: !7788, file: !3, line: 1826, type: !32)
!7796 = !DILocation(line: 1826, column: 69, scope: !7788)
!7797 = !DILocalVariable(name: "low", scope: !7788, file: !3, line: 1828, type: !32)
!7798 = !DILocation(line: 1828, column: 7, scope: !7788)
!7799 = !DILocalVariable(name: "high", scope: !7788, file: !3, line: 1828, type: !32)
!7800 = !DILocation(line: 1828, column: 12, scope: !7788)
!7801 = !DILocation(line: 1830, column: 7, scope: !7802)
!7802 = distinct !DILexicalBlock(scope: !7788, file: !3, line: 1830, column: 7)
!7803 = !DILocation(line: 1830, column: 12, scope: !7802)
!7804 = !DILocation(line: 1830, column: 7, scope: !7788)
!7805 = !DILocation(line: 1831, column: 12, scope: !7802)
!7806 = !DILocation(line: 1831, column: 10, scope: !7802)
!7807 = !DILocation(line: 1831, column: 5, scope: !7802)
!7808 = !DILocation(line: 1833, column: 12, scope: !7802)
!7809 = !DILocation(line: 1833, column: 10, scope: !7802)
!7810 = !DILocation(line: 1835, column: 3, scope: !7788)
!7811 = !DILocation(line: 1835, column: 10, scope: !7812)
!7812 = distinct !DILexicalBlock(scope: !7813, file: !3, line: 1835, column: 3)
!7813 = distinct !DILexicalBlock(scope: !7788, file: !3, line: 1835, column: 3)
!7814 = !DILocation(line: 1835, column: 3, scope: !7813)
!7815 = !DILocation(line: 1836, column: 9, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7812, file: !3, line: 1836, column: 9)
!7817 = !DILocation(line: 1837, column: 2, scope: !7816)
!7818 = !DILocation(line: 1837, column: 39, scope: !7816)
!7819 = !DILocation(line: 1837, column: 5, scope: !7816)
!7820 = !DILocation(line: 1836, column: 9, scope: !7812)
!7821 = !DILocation(line: 1838, column: 7, scope: !7816)
!7822 = !DILocation(line: 1837, column: 53, scope: !7816)
!7823 = !DILocation(line: 1835, column: 23, scope: !7812)
!7824 = !DILocation(line: 1835, column: 21, scope: !7812)
!7825 = !DILocation(line: 1835, column: 3, scope: !7812)
!7826 = distinct !{!7826, !7814, !7827}
!7827 = !DILocation(line: 1838, column: 7, scope: !7813)
!7828 = !DILocation(line: 1840, column: 7, scope: !7829)
!7829 = distinct !DILexicalBlock(scope: !7788, file: !3, line: 1840, column: 7)
!7830 = !DILocation(line: 1840, column: 7, scope: !7788)
!7831 = !DILocation(line: 1845, column: 13, scope: !7832)
!7832 = distinct !DILexicalBlock(scope: !7829, file: !3, line: 1841, column: 5)
!7833 = !DILocation(line: 1845, column: 18, scope: !7832)
!7834 = !DILocation(line: 1845, column: 25, scope: !7832)
!7835 = !DILocation(line: 1845, column: 37, scope: !7832)
!7836 = !DILocation(line: 1845, column: 11, scope: !7832)
!7837 = !DILocation(line: 1848, column: 19, scope: !7838)
!7838 = distinct !DILexicalBlock(scope: !7832, file: !3, line: 1848, column: 7)
!7839 = !DILocation(line: 1848, column: 25, scope: !7838)
!7840 = !DILocation(line: 1848, column: 30, scope: !7838)
!7841 = !DILocation(line: 1848, column: 37, scope: !7838)
!7842 = !DILocation(line: 1848, column: 42, scope: !7838)
!7843 = !DILocation(line: 1848, column: 23, scope: !7838)
!7844 = !DILocation(line: 1848, column: 17, scope: !7838)
!7845 = !DILocation(line: 1848, column: 12, scope: !7838)
!7846 = !DILocation(line: 1848, column: 52, scope: !7847)
!7847 = distinct !DILexicalBlock(scope: !7838, file: !3, line: 1848, column: 7)
!7848 = !DILocation(line: 1848, column: 58, scope: !7847)
!7849 = !DILocation(line: 1848, column: 56, scope: !7847)
!7850 = !DILocation(line: 1848, column: 7, scope: !7838)
!7851 = !DILocation(line: 1849, column: 11, scope: !7847)
!7852 = !DILocation(line: 1849, column: 28, scope: !7847)
!7853 = !DILocation(line: 1849, column: 2, scope: !7847)
!7854 = !DILocation(line: 1848, column: 67, scope: !7847)
!7855 = !DILocation(line: 1848, column: 7, scope: !7847)
!7856 = distinct !{!7856, !7850, !7857}
!7857 = !DILocation(line: 1849, column: 31, scope: !7838)
!7858 = !DILocation(line: 1850, column: 5, scope: !7832)
!7859 = !DILocation(line: 1851, column: 10, scope: !7788)
!7860 = !DILocation(line: 1851, column: 15, scope: !7788)
!7861 = !DILocation(line: 1851, column: 3, scope: !7788)
!7862 = distinct !DISubprogram(name: "load_register_parameters", scope: !3, file: !3, line: 1583, type: !7863, scopeLine: 1586, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!7863 = !DISubroutineType(types: !7864)
!7864 = !{null, !3453, !32, !3483, !32, !32, !5844}
!7865 = !DILocalVariable(name: "args", arg: 1, scope: !7862, file: !3, line: 1583, type: !3453)
!7866 = !DILocation(line: 1583, column: 44, scope: !7862)
!7867 = !DILocalVariable(name: "num_actuals", arg: 2, scope: !7862, file: !3, line: 1583, type: !32)
!7868 = !DILocation(line: 1583, column: 54, scope: !7862)
!7869 = !DILocalVariable(name: "call_fusage", arg: 3, scope: !7862, file: !3, line: 1584, type: !3483)
!7870 = !DILocation(line: 1584, column: 11, scope: !7862)
!7871 = !DILocalVariable(name: "flags", arg: 4, scope: !7862, file: !3, line: 1584, type: !32)
!7872 = !DILocation(line: 1584, column: 28, scope: !7862)
!7873 = !DILocalVariable(name: "is_sibcall", arg: 5, scope: !7862, file: !3, line: 1584, type: !32)
!7874 = !DILocation(line: 1584, column: 39, scope: !7862)
!7875 = !DILocalVariable(name: "sibcall_failure", arg: 6, scope: !7862, file: !3, line: 1585, type: !5844)
!7876 = !DILocation(line: 1585, column: 11, scope: !7862)
!7877 = !DILocalVariable(name: "i", scope: !7862, file: !3, line: 1587, type: !32)
!7878 = !DILocation(line: 1587, column: 7, scope: !7862)
!7879 = !DILocalVariable(name: "j", scope: !7862, file: !3, line: 1587, type: !32)
!7880 = !DILocation(line: 1587, column: 10, scope: !7862)
!7881 = !DILocation(line: 1589, column: 10, scope: !7882)
!7882 = distinct !DILexicalBlock(scope: !7862, file: !3, line: 1589, column: 3)
!7883 = !DILocation(line: 1589, column: 8, scope: !7882)
!7884 = !DILocation(line: 1589, column: 15, scope: !7885)
!7885 = distinct !DILexicalBlock(scope: !7882, file: !3, line: 1589, column: 3)
!7886 = !DILocation(line: 1589, column: 19, scope: !7885)
!7887 = !DILocation(line: 1589, column: 17, scope: !7885)
!7888 = !DILocation(line: 1589, column: 3, scope: !7882)
!7889 = !DILocalVariable(name: "reg", scope: !7890, file: !3, line: 1591, type: !6)
!7890 = distinct !DILexicalBlock(scope: !7885, file: !3, line: 1590, column: 5)
!7891 = !DILocation(line: 1591, column: 11, scope: !7890)
!7892 = !DILocation(line: 1591, column: 19, scope: !7890)
!7893 = !DILocation(line: 1591, column: 25, scope: !7890)
!7894 = !DILocation(line: 1591, column: 18, scope: !7890)
!7895 = !DILocation(line: 1592, column: 6, scope: !7890)
!7896 = !DILocation(line: 1592, column: 11, scope: !7890)
!7897 = !DILocation(line: 1592, column: 14, scope: !7890)
!7898 = !DILocation(line: 1592, column: 30, scope: !7890)
!7899 = !DILocation(line: 1592, column: 35, scope: !7890)
!7900 = !DILocation(line: 1592, column: 38, scope: !7890)
!7901 = !DILocation(line: 1593, column: 11, scope: !7902)
!7902 = distinct !DILexicalBlock(scope: !7890, file: !3, line: 1593, column: 11)
!7903 = !DILocation(line: 1593, column: 11, scope: !7890)
!7904 = !DILocalVariable(name: "partial", scope: !7905, file: !3, line: 1595, type: !32)
!7905 = distinct !DILexicalBlock(scope: !7902, file: !3, line: 1594, column: 2)
!7906 = !DILocation(line: 1595, column: 8, scope: !7905)
!7907 = !DILocation(line: 1595, column: 18, scope: !7905)
!7908 = !DILocation(line: 1595, column: 23, scope: !7905)
!7909 = !DILocation(line: 1595, column: 26, scope: !7905)
!7910 = !DILocalVariable(name: "nregs", scope: !7905, file: !3, line: 1596, type: !32)
!7911 = !DILocation(line: 1596, column: 8, scope: !7905)
!7912 = !DILocalVariable(name: "size", scope: !7905, file: !3, line: 1597, type: !32)
!7913 = !DILocation(line: 1597, column: 8, scope: !7905)
!7914 = !DILocalVariable(name: "before_arg", scope: !7905, file: !3, line: 1598, type: !6)
!7915 = !DILocation(line: 1598, column: 8, scope: !7905)
!7916 = !DILocation(line: 1598, column: 21, scope: !7905)
!7917 = !DILocation(line: 1603, column: 10, scope: !7905)
!7918 = !DILocation(line: 1604, column: 8, scope: !7919)
!7919 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1604, column: 8)
!7920 = !DILocation(line: 1604, column: 23, scope: !7919)
!7921 = !DILocation(line: 1604, column: 8, scope: !7905)
!7922 = !DILocation(line: 1606, column: 13, scope: !7923)
!7923 = distinct !DILexicalBlock(scope: !7919, file: !3, line: 1606, column: 13)
!7924 = !DILocation(line: 1606, column: 13, scope: !7919)
!7925 = !DILocation(line: 1608, column: 8, scope: !7926)
!7926 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 1607, column: 6)
!7927 = !DILocation(line: 1609, column: 16, scope: !7926)
!7928 = !DILocation(line: 1609, column: 24, scope: !7926)
!7929 = !DILocation(line: 1609, column: 14, scope: !7926)
!7930 = !DILocation(line: 1610, column: 6, scope: !7926)
!7931 = !DILocation(line: 1611, column: 13, scope: !7932)
!7932 = distinct !DILexicalBlock(scope: !7923, file: !3, line: 1611, column: 13)
!7933 = !DILocation(line: 1611, column: 56, scope: !7932)
!7934 = !DILocation(line: 1611, column: 13, scope: !7923)
!7935 = !DILocation(line: 1613, column: 34, scope: !7936)
!7936 = distinct !DILexicalBlock(scope: !7932, file: !3, line: 1612, column: 6)
!7937 = !DILocation(line: 1613, column: 15, scope: !7936)
!7938 = !DILocation(line: 1613, column: 13, scope: !7936)
!7939 = !DILocation(line: 1614, column: 17, scope: !7936)
!7940 = !DILocation(line: 1614, column: 22, scope: !7936)
!7941 = !DILocation(line: 1614, column: 46, scope: !7936)
!7942 = !DILocation(line: 1614, column: 14, scope: !7936)
!7943 = !DILocation(line: 1615, column: 6, scope: !7936)
!7944 = !DILocation(line: 1617, column: 13, scope: !7932)
!7945 = !DILocation(line: 1617, column: 11, scope: !7932)
!7946 = !DILocation(line: 1622, column: 8, scope: !7947)
!7947 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1622, column: 8)
!7948 = !DILocation(line: 1622, column: 23, scope: !7947)
!7949 = !DILocation(line: 1622, column: 8, scope: !7905)
!7950 = !DILocation(line: 1623, column: 23, scope: !7947)
!7951 = !DILocation(line: 1623, column: 28, scope: !7947)
!7952 = !DILocation(line: 1623, column: 33, scope: !7947)
!7953 = !DILocation(line: 1623, column: 36, scope: !7947)
!7954 = !DILocation(line: 1623, column: 6, scope: !7947)
!7955 = !DILocation(line: 1629, column: 13, scope: !7956)
!7956 = distinct !DILexicalBlock(scope: !7947, file: !3, line: 1629, column: 13)
!7957 = !DILocation(line: 1629, column: 19, scope: !7956)
!7958 = !DILocation(line: 1629, column: 13, scope: !7947)
!7959 = !DILocation(line: 1631, column: 24, scope: !7960)
!7960 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 1630, column: 6)
!7961 = !DILocation(line: 1631, column: 29, scope: !7960)
!7962 = !DILocation(line: 1631, column: 34, scope: !7960)
!7963 = !DILocation(line: 1631, column: 37, scope: !7960)
!7964 = !DILocation(line: 1631, column: 8, scope: !7960)
!7965 = !DILocation(line: 1655, column: 6, scope: !7960)
!7966 = !DILocation(line: 1660, column: 13, scope: !7967)
!7967 = distinct !DILexicalBlock(scope: !7956, file: !3, line: 1660, column: 13)
!7968 = !DILocation(line: 1660, column: 18, scope: !7967)
!7969 = !DILocation(line: 1660, column: 21, scope: !7967)
!7970 = !DILocation(line: 1660, column: 36, scope: !7967)
!7971 = !DILocation(line: 1660, column: 13, scope: !7956)
!7972 = !DILocation(line: 1661, column: 13, scope: !7973)
!7973 = distinct !DILexicalBlock(scope: !7967, file: !3, line: 1661, column: 6)
!7974 = !DILocation(line: 1661, column: 11, scope: !7973)
!7975 = !DILocation(line: 1661, column: 18, scope: !7976)
!7976 = distinct !DILexicalBlock(scope: !7973, file: !3, line: 1661, column: 6)
!7977 = !DILocation(line: 1661, column: 22, scope: !7976)
!7978 = !DILocation(line: 1661, column: 27, scope: !7976)
!7979 = !DILocation(line: 1661, column: 30, scope: !7976)
!7980 = !DILocation(line: 1661, column: 20, scope: !7976)
!7981 = !DILocation(line: 1661, column: 6, scope: !7973)
!7982 = !DILocation(line: 1662, column: 37, scope: !7976)
!7983 = !DILocation(line: 1662, column: 48, scope: !7976)
!7984 = !DILocation(line: 1662, column: 62, scope: !7976)
!7985 = !DILocation(line: 1662, column: 60, scope: !7976)
!7986 = !DILocation(line: 1662, column: 24, scope: !7976)
!7987 = !DILocation(line: 1663, column: 10, scope: !7976)
!7988 = !DILocation(line: 1663, column: 15, scope: !7976)
!7989 = !DILocation(line: 1663, column: 18, scope: !7976)
!7990 = !DILocation(line: 1663, column: 31, scope: !7976)
!7991 = !DILocation(line: 1662, column: 8, scope: !7976)
!7992 = !DILocation(line: 1661, column: 47, scope: !7976)
!7993 = !DILocation(line: 1661, column: 6, scope: !7976)
!7994 = distinct !{!7994, !7981, !7995}
!7995 = !DILocation(line: 1663, column: 33, scope: !7973)
!7996 = !DILocation(line: 1665, column: 13, scope: !7997)
!7997 = distinct !DILexicalBlock(scope: !7967, file: !3, line: 1665, column: 13)
!7998 = !DILocation(line: 1665, column: 21, scope: !7997)
!7999 = !DILocation(line: 1665, column: 26, scope: !7997)
!8000 = !DILocation(line: 1665, column: 29, scope: !7997)
!8001 = !DILocation(line: 1665, column: 34, scope: !7997)
!8002 = !DILocation(line: 1665, column: 37, scope: !7997)
!8003 = !DILocation(line: 1665, column: 13, scope: !7967)
!8004 = !DILocalVariable(name: "mem", scope: !8005, file: !3, line: 1667, type: !6)
!8005 = distinct !DILexicalBlock(scope: !7997, file: !3, line: 1666, column: 6)
!8006 = !DILocation(line: 1667, column: 12, scope: !8005)
!8007 = !DILocation(line: 1667, column: 32, scope: !8005)
!8008 = !DILocation(line: 1667, column: 37, scope: !8005)
!8009 = !DILocation(line: 1667, column: 40, scope: !8005)
!8010 = !DILocation(line: 1667, column: 18, scope: !8005)
!8011 = !DILocation(line: 1670, column: 12, scope: !8012)
!8012 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 1670, column: 12)
!8013 = !DILocation(line: 1671, column: 5, scope: !8012)
!8014 = !DILocation(line: 1671, column: 46, scope: !8012)
!8015 = !DILocation(line: 1672, column: 11, scope: !8012)
!8016 = !DILocation(line: 1671, column: 8, scope: !8012)
!8017 = !DILocation(line: 1670, column: 12, scope: !8005)
!8018 = !DILocation(line: 1673, column: 4, scope: !8012)
!8019 = !DILocation(line: 1673, column: 20, scope: !8012)
!8020 = !DILocation(line: 1673, column: 3, scope: !8012)
!8021 = !DILocation(line: 1676, column: 12, scope: !8022)
!8022 = distinct !DILexicalBlock(scope: !8005, file: !3, line: 1676, column: 12)
!8023 = !DILocation(line: 1676, column: 18, scope: !8022)
!8024 = !DILocation(line: 1676, column: 23, scope: !8022)
!8025 = !DILocation(line: 1676, column: 26, scope: !8022)
!8026 = !DILocation(line: 1676, column: 31, scope: !8022)
!8027 = !DILocation(line: 1680, column: 5, scope: !8022)
!8028 = !DILocation(line: 1676, column: 12, scope: !8005)
!8029 = !DILocalVariable(name: "tem", scope: !8030, file: !3, line: 1684, type: !6)
!8030 = distinct !DILexicalBlock(scope: !8022, file: !3, line: 1683, column: 3)
!8031 = !DILocation(line: 1684, column: 9, scope: !8030)
!8032 = !DILocation(line: 1684, column: 38, scope: !8030)
!8033 = !DILocation(line: 1684, column: 46, scope: !8030)
!8034 = !DILocation(line: 1684, column: 51, scope: !8030)
!8035 = !DILocation(line: 1684, column: 54, scope: !8030)
!8036 = !DILocation(line: 1684, column: 15, scope: !8030)
!8037 = !DILocalVariable(name: "ri", scope: !8030, file: !3, line: 1685, type: !6)
!8038 = !DILocation(line: 1685, column: 9, scope: !8030)
!8039 = !DILocation(line: 1685, column: 27, scope: !8030)
!8040 = !DILocation(line: 1685, column: 38, scope: !8030)
!8041 = !DILocation(line: 1685, column: 14, scope: !8030)
!8042 = !DILocalVariable(name: "x", scope: !8030, file: !3, line: 1686, type: !6)
!8043 = !DILocation(line: 1686, column: 9, scope: !8030)
!8044 = !DILocation(line: 1686, column: 26, scope: !8030)
!8045 = !DILocation(line: 1686, column: 13, scope: !8030)
!8046 = !DILocalVariable(name: "shift", scope: !8030, file: !3, line: 1687, type: !32)
!8047 = !DILocation(line: 1687, column: 9, scope: !8030)
!8048 = !DILocation(line: 1687, column: 35, scope: !8030)
!8049 = !DILocation(line: 1687, column: 33, scope: !8030)
!8050 = !DILocation(line: 1687, column: 41, scope: !8030)
!8051 = !DILocalVariable(name: "dir", scope: !8030, file: !3, line: 1688, type: !883)
!8052 = !DILocation(line: 1688, column: 20, scope: !8030)
!8053 = !DILocation(line: 1691, column: 21, scope: !8030)
!8054 = !DILocation(line: 1691, column: 24, scope: !8030)
!8055 = !DILocation(line: 1691, column: 5, scope: !8030)
!8056 = !DILocation(line: 1692, column: 23, scope: !8030)
!8057 = !DILocation(line: 1692, column: 28, scope: !8030)
!8058 = !DILocation(line: 1692, column: 39, scope: !8030)
!8059 = !DILocation(line: 1693, column: 35, scope: !8030)
!8060 = !DILocation(line: 1693, column: 9, scope: !8030)
!8061 = !DILocation(line: 1694, column: 9, scope: !8030)
!8062 = !DILocation(line: 1692, column: 9, scope: !8030)
!8063 = !DILocation(line: 1692, column: 7, scope: !8030)
!8064 = !DILocation(line: 1695, column: 9, scope: !8065)
!8065 = distinct !DILexicalBlock(scope: !8030, file: !3, line: 1695, column: 9)
!8066 = !DILocation(line: 1695, column: 14, scope: !8065)
!8067 = !DILocation(line: 1695, column: 11, scope: !8065)
!8068 = !DILocation(line: 1695, column: 9, scope: !8030)
!8069 = !DILocation(line: 1696, column: 23, scope: !8065)
!8070 = !DILocation(line: 1696, column: 27, scope: !8065)
!8071 = !DILocation(line: 1696, column: 7, scope: !8065)
!8072 = !DILocation(line: 1697, column: 3, scope: !8030)
!8073 = !DILocation(line: 1699, column: 22, scope: !8022)
!8074 = !DILocation(line: 1699, column: 35, scope: !8022)
!8075 = !DILocation(line: 1699, column: 40, scope: !8022)
!8076 = !DILocation(line: 1699, column: 47, scope: !8022)
!8077 = !DILocation(line: 1699, column: 52, scope: !8022)
!8078 = !DILocation(line: 1699, column: 55, scope: !8022)
!8079 = !DILocation(line: 1699, column: 3, scope: !8022)
!8080 = !DILocation(line: 1700, column: 6, scope: !8005)
!8081 = !DILocation(line: 1705, column: 8, scope: !8082)
!8082 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1705, column: 8)
!8083 = !DILocation(line: 1706, column: 8, scope: !8082)
!8084 = !DILocation(line: 1706, column: 43, scope: !8082)
!8085 = !DILocation(line: 1706, column: 56, scope: !8082)
!8086 = !DILocation(line: 1706, column: 61, scope: !8082)
!8087 = !DILocation(line: 1706, column: 11, scope: !8082)
!8088 = !DILocation(line: 1705, column: 8, scope: !7905)
!8089 = !DILocation(line: 1707, column: 7, scope: !8082)
!8090 = !DILocation(line: 1707, column: 23, scope: !8082)
!8091 = !DILocation(line: 1707, column: 6, scope: !8082)
!8092 = !DILocation(line: 1711, column: 8, scope: !8093)
!8093 = distinct !DILexicalBlock(scope: !7905, file: !3, line: 1711, column: 8)
!8094 = !DILocation(line: 1711, column: 23, scope: !8093)
!8095 = !DILocation(line: 1711, column: 8, scope: !7905)
!8096 = !DILocation(line: 1712, column: 22, scope: !8093)
!8097 = !DILocation(line: 1712, column: 35, scope: !8093)
!8098 = !DILocation(line: 1712, column: 6, scope: !8093)
!8099 = !DILocation(line: 1713, column: 13, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8093, file: !3, line: 1713, column: 13)
!8101 = !DILocation(line: 1713, column: 19, scope: !8100)
!8102 = !DILocation(line: 1713, column: 13, scope: !8093)
!8103 = !DILocation(line: 1714, column: 15, scope: !8100)
!8104 = !DILocation(line: 1714, column: 28, scope: !8100)
!8105 = !DILocation(line: 1714, column: 6, scope: !8100)
!8106 = !DILocation(line: 1715, column: 13, scope: !8107)
!8107 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 1715, column: 13)
!8108 = !DILocation(line: 1715, column: 19, scope: !8107)
!8109 = !DILocation(line: 1715, column: 13, scope: !8100)
!8110 = !DILocation(line: 1716, column: 16, scope: !8107)
!8111 = !DILocation(line: 1716, column: 29, scope: !8107)
!8112 = !DILocation(line: 1716, column: 42, scope: !8107)
!8113 = !DILocation(line: 1716, column: 6, scope: !8107)
!8114 = !DILocation(line: 1717, column: 2, scope: !7905)
!8115 = !DILocation(line: 1718, column: 5, scope: !7890)
!8116 = !DILocation(line: 1589, column: 33, scope: !7885)
!8117 = !DILocation(line: 1589, column: 3, scope: !7885)
!8118 = distinct !{!8118, !7888, !8119}
!8119 = !DILocation(line: 1718, column: 5, scope: !7882)
!8120 = !DILocation(line: 1719, column: 1, scope: !7862)
!8121 = distinct !DISubprogram(name: "emit_call_1", scope: !3, file: !3, line: 246, type: !8122, scopeLine: 254, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!8122 = !DISubroutineType(types: !8123)
!8123 = !{null, !6, !258, !258, !258, !227, !227, !227, !6, !6, !32, !6, !32, !5843}
!8124 = !DILocalVariable(name: "funexp", arg: 1, scope: !8121, file: !3, line: 246, type: !6)
!8125 = !DILocation(line: 246, column: 18, scope: !8121)
!8126 = !DILocalVariable(name: "fntree", arg: 2, scope: !8121, file: !3, line: 246, type: !258)
!8127 = !DILocation(line: 246, column: 31, scope: !8121)
!8128 = !DILocalVariable(name: "fndecl", arg: 3, scope: !8121, file: !3, line: 246, type: !258)
!8129 = !DILocation(line: 246, column: 61, scope: !8121)
!8130 = !DILocalVariable(name: "funtype", arg: 4, scope: !8121, file: !3, line: 247, type: !258)
!8131 = !DILocation(line: 247, column: 12, scope: !8121)
!8132 = !DILocalVariable(name: "stack_size", arg: 5, scope: !8121, file: !3, line: 248, type: !227)
!8133 = !DILocation(line: 248, column: 21, scope: !8121)
!8134 = !DILocalVariable(name: "rounded_stack_size", arg: 6, scope: !8121, file: !3, line: 249, type: !227)
!8135 = !DILocation(line: 249, column: 21, scope: !8121)
!8136 = !DILocalVariable(name: "struct_value_size", arg: 7, scope: !8121, file: !3, line: 250, type: !227)
!8137 = !DILocation(line: 250, column: 21, scope: !8121)
!8138 = !DILocalVariable(name: "next_arg_reg", arg: 8, scope: !8121, file: !3, line: 251, type: !6)
!8139 = !DILocation(line: 251, column: 11, scope: !8121)
!8140 = !DILocalVariable(name: "valreg", arg: 9, scope: !8121, file: !3, line: 251, type: !6)
!8141 = !DILocation(line: 251, column: 46, scope: !8121)
!8142 = !DILocalVariable(name: "old_inhibit_defer_pop", arg: 10, scope: !8121, file: !3, line: 252, type: !32)
!8143 = !DILocation(line: 252, column: 11, scope: !8121)
!8144 = !DILocalVariable(name: "call_fusage", arg: 11, scope: !8121, file: !3, line: 252, type: !6)
!8145 = !DILocation(line: 252, column: 38, scope: !8121)
!8146 = !DILocalVariable(name: "ecf_flags", arg: 12, scope: !8121, file: !3, line: 252, type: !32)
!8147 = !DILocation(line: 252, column: 55, scope: !8121)
!8148 = !DILocalVariable(name: "args_so_far", arg: 13, scope: !8121, file: !3, line: 253, type: !5843)
!8149 = !DILocation(line: 253, column: 24, scope: !8121)
!8150 = !DILocalVariable(name: "rounded_stack_size_rtx", scope: !8121, file: !3, line: 255, type: !6)
!8151 = !DILocation(line: 255, column: 7, scope: !8121)
!8152 = !DILocation(line: 255, column: 32, scope: !8121)
!8153 = !DILocalVariable(name: "call_insn", scope: !8121, file: !3, line: 256, type: !6)
!8154 = !DILocation(line: 256, column: 7, scope: !8121)
!8155 = !DILocalVariable(name: "already_popped", scope: !8121, file: !3, line: 257, type: !32)
!8156 = !DILocation(line: 257, column: 7, scope: !8121)
!8157 = !DILocalVariable(name: "n_popped", scope: !8121, file: !3, line: 258, type: !227)
!8158 = !DILocation(line: 258, column: 17, scope: !8121)
!8159 = !DILocation(line: 258, column: 28, scope: !8121)
!8160 = !DILocation(line: 267, column: 7, scope: !8161)
!8161 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 267, column: 7)
!8162 = !DILocation(line: 267, column: 25, scope: !8161)
!8163 = !DILocation(line: 267, column: 7, scope: !8121)
!8164 = !DILocation(line: 268, column: 14, scope: !8161)
!8165 = !DILocation(line: 268, column: 12, scope: !8161)
!8166 = !DILocation(line: 268, column: 5, scope: !8161)
!8167 = !DILocation(line: 303, column: 10, scope: !8168)
!8168 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 302, column: 7)
!8169 = !DILocation(line: 303, column: 19, scope: !8168)
!8170 = !DILocation(line: 302, column: 7, scope: !8121)
!8171 = !DILocalVariable(name: "n_pop", scope: !8172, file: !3, line: 308, type: !6)
!8172 = distinct !DILexicalBlock(scope: !8168, file: !3, line: 307, column: 5)
!8173 = !DILocation(line: 308, column: 11, scope: !8172)
!8174 = !DILocation(line: 308, column: 19, scope: !8172)
!8175 = !DILocalVariable(name: "pat", scope: !8172, file: !3, line: 309, type: !6)
!8176 = !DILocation(line: 309, column: 11, scope: !8172)
!8177 = !DILocation(line: 314, column: 11, scope: !8178)
!8178 = distinct !DILexicalBlock(scope: !8172, file: !3, line: 314, column: 11)
!8179 = !DILocation(line: 314, column: 11, scope: !8172)
!8180 = !DILocation(line: 315, column: 8, scope: !8178)
!8181 = !DILocation(line: 315, column: 6, scope: !8178)
!8182 = !DILocation(line: 315, column: 2, scope: !8178)
!8183 = !DILocation(line: 319, column: 8, scope: !8178)
!8184 = !DILocation(line: 319, column: 6, scope: !8178)
!8185 = !DILocation(line: 322, column: 23, scope: !8172)
!8186 = !DILocation(line: 322, column: 7, scope: !8172)
!8187 = !DILocation(line: 323, column: 22, scope: !8172)
!8188 = !DILocation(line: 324, column: 5, scope: !8172)
!8189 = !DILocation(line: 329, column: 8, scope: !8190)
!8190 = distinct !DILexicalBlock(scope: !8168, file: !3, line: 329, column: 7)
!8191 = !DILocation(line: 329, column: 18, scope: !8190)
!8192 = !DILocation(line: 329, column: 7, scope: !8168)
!8193 = !DILocation(line: 332, column: 11, scope: !8194)
!8194 = distinct !DILexicalBlock(scope: !8195, file: !3, line: 332, column: 11)
!8195 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 331, column: 5)
!8196 = !DILocation(line: 332, column: 11, scope: !8195)
!8197 = !DILocation(line: 333, column: 18, scope: !8194)
!8198 = !DILocation(line: 333, column: 2, scope: !8194)
!8199 = !DILocation(line: 338, column: 18, scope: !8194)
!8200 = !DILocation(line: 338, column: 2, scope: !8194)
!8201 = !DILocation(line: 341, column: 5, scope: !8195)
!8202 = !DILocation(line: 348, column: 11, scope: !8203)
!8203 = distinct !DILexicalBlock(scope: !8204, file: !3, line: 348, column: 11)
!8204 = distinct !DILexicalBlock(scope: !8205, file: !3, line: 347, column: 5)
!8205 = distinct !DILexicalBlock(scope: !8190, file: !3, line: 346, column: 7)
!8206 = !DILocation(line: 348, column: 11, scope: !8204)
!8207 = !DILocation(line: 349, column: 18, scope: !8203)
!8208 = !DILocation(line: 349, column: 2, scope: !8203)
!8209 = !DILocation(line: 354, column: 18, scope: !8203)
!8210 = !DILocation(line: 354, column: 2, scope: !8203)
!8211 = !DILocation(line: 363, column: 15, scope: !8121)
!8212 = !DILocation(line: 363, column: 13, scope: !8121)
!8213 = !DILocation(line: 366, column: 26, scope: !8121)
!8214 = !DILocation(line: 366, column: 37, scope: !8121)
!8215 = !DILocation(line: 366, column: 3, scope: !8121)
!8216 = !DILocation(line: 369, column: 7, scope: !8217)
!8217 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 369, column: 7)
!8218 = !DILocation(line: 369, column: 17, scope: !8217)
!8219 = !DILocation(line: 369, column: 7, scope: !8121)
!8220 = !DILocation(line: 370, column: 5, scope: !8217)
!8221 = !DILocation(line: 370, column: 34, scope: !8217)
!8222 = !DILocation(line: 373, column: 7, scope: !8223)
!8223 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 373, column: 7)
!8224 = !DILocation(line: 373, column: 17, scope: !8223)
!8225 = !DILocation(line: 373, column: 7, scope: !8121)
!8226 = !DILocation(line: 374, column: 5, scope: !8223)
!8227 = !DILocation(line: 374, column: 33, scope: !8223)
!8228 = !DILocation(line: 377, column: 7, scope: !8229)
!8229 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 377, column: 7)
!8230 = !DILocation(line: 377, column: 17, scope: !8229)
!8231 = !DILocation(line: 377, column: 7, scope: !8121)
!8232 = !DILocation(line: 378, column: 5, scope: !8229)
!8233 = !DILocation(line: 378, column: 50, scope: !8229)
!8234 = !DILocation(line: 381, column: 28, scope: !8121)
!8235 = !DILocation(line: 381, column: 39, scope: !8121)
!8236 = !DILocation(line: 381, column: 3, scope: !8121)
!8237 = !DILocation(line: 383, column: 7, scope: !8238)
!8238 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 383, column: 7)
!8239 = !DILocation(line: 383, column: 17, scope: !8238)
!8240 = !DILocation(line: 383, column: 7, scope: !8121)
!8241 = !DILocation(line: 384, column: 19, scope: !8238)
!8242 = !DILocation(line: 384, column: 44, scope: !8238)
!8243 = !DILocation(line: 384, column: 5, scope: !8238)
!8244 = !DILocation(line: 386, column: 7, scope: !8245)
!8245 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 386, column: 7)
!8246 = !DILocation(line: 386, column: 17, scope: !8245)
!8247 = !DILocation(line: 386, column: 7, scope: !8121)
!8248 = !DILocation(line: 388, column: 21, scope: !8249)
!8249 = distinct !DILexicalBlock(scope: !8245, file: !3, line: 387, column: 5)
!8250 = !DILocation(line: 388, column: 44, scope: !8249)
!8251 = !DILocation(line: 388, column: 7, scope: !8249)
!8252 = !DILocation(line: 389, column: 7, scope: !8249)
!8253 = !DILocation(line: 389, column: 13, scope: !8249)
!8254 = !DILocation(line: 389, column: 26, scope: !8249)
!8255 = !DILocation(line: 390, column: 5, scope: !8249)
!8256 = !DILocation(line: 392, column: 34, scope: !8121)
!8257 = !DILocation(line: 392, column: 44, scope: !8121)
!8258 = !DILocation(line: 392, column: 59, scope: !8121)
!8259 = !DILocation(line: 392, column: 3, scope: !8121)
!8260 = !DILocation(line: 392, column: 30, scope: !8121)
!8261 = !DILocation(line: 395, column: 7, scope: !8262)
!8262 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 395, column: 7)
!8263 = !DILocation(line: 395, column: 29, scope: !8262)
!8264 = !DILocation(line: 395, column: 32, scope: !8262)
!8265 = !DILocation(line: 395, column: 39, scope: !8262)
!8266 = !DILocation(line: 395, column: 7, scope: !8121)
!8267 = !DILocation(line: 396, column: 7, scope: !8262)
!8268 = !DILocation(line: 396, column: 20, scope: !8262)
!8269 = !DILocation(line: 396, column: 41, scope: !8262)
!8270 = !DILocation(line: 397, column: 41, scope: !8262)
!8271 = !DILocation(line: 396, column: 5, scope: !8262)
!8272 = !DILocation(line: 401, column: 23, scope: !8121)
!8273 = !DILocation(line: 401, column: 21, scope: !8121)
!8274 = !DILocation(line: 403, column: 7, scope: !8275)
!8275 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 403, column: 7)
!8276 = !DILocation(line: 403, column: 16, scope: !8275)
!8277 = !DILocation(line: 403, column: 7, scope: !8121)
!8278 = !DILocation(line: 405, column: 12, scope: !8279)
!8279 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 405, column: 11)
!8280 = distinct !DILexicalBlock(scope: !8275, file: !3, line: 404, column: 5)
!8281 = !DILocation(line: 405, column: 11, scope: !8280)
!8282 = !DILocation(line: 407, column: 6, scope: !8279)
!8283 = !DILocation(line: 406, column: 2, scope: !8279)
!8284 = !DILocation(line: 407, column: 4, scope: !8279)
!8285 = !DILocation(line: 410, column: 29, scope: !8280)
!8286 = !DILocation(line: 410, column: 26, scope: !8280)
!8287 = !DILocation(line: 411, column: 32, scope: !8280)
!8288 = !DILocation(line: 411, column: 30, scope: !8280)
!8289 = !DILocation(line: 412, column: 30, scope: !8280)
!8290 = !DILocation(line: 412, column: 27, scope: !8280)
!8291 = !DILocation(line: 416, column: 25, scope: !8292)
!8292 = distinct !DILexicalBlock(scope: !8280, file: !3, line: 415, column: 11)
!8293 = !DILocation(line: 417, column: 5, scope: !8280)
!8294 = !DILocation(line: 419, column: 8, scope: !8295)
!8295 = distinct !DILexicalBlock(scope: !8121, file: !3, line: 419, column: 7)
!8296 = !DILocation(line: 419, column: 7, scope: !8121)
!8297 = !DILocation(line: 428, column: 11, scope: !8298)
!8298 = distinct !DILexicalBlock(scope: !8299, file: !3, line: 428, column: 11)
!8299 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 420, column: 5)
!8300 = !DILocation(line: 428, column: 30, scope: !8298)
!8301 = !DILocation(line: 428, column: 11, scope: !8299)
!8302 = !DILocation(line: 430, column: 8, scope: !8303)
!8303 = distinct !DILexicalBlock(scope: !8304, file: !3, line: 430, column: 8)
!8304 = distinct !DILexicalBlock(scope: !8298, file: !3, line: 429, column: 2)
!8305 = !DILocation(line: 430, column: 18, scope: !8303)
!8306 = !DILocation(line: 430, column: 8, scope: !8304)
!8307 = !DILocation(line: 432, column: 29, scope: !8303)
!8308 = !DILocation(line: 432, column: 26, scope: !8303)
!8309 = !DILocation(line: 432, column: 6, scope: !8303)
!8310 = !DILocation(line: 433, column: 13, scope: !8311)
!8311 = distinct !DILexicalBlock(scope: !8303, file: !3, line: 433, column: 13)
!8312 = !DILocation(line: 433, column: 28, scope: !8311)
!8313 = !DILocation(line: 433, column: 31, scope: !8311)
!8314 = !DILocation(line: 433, column: 49, scope: !8311)
!8315 = !DILocation(line: 434, column: 8, scope: !8311)
!8316 = !DILocation(line: 434, column: 14, scope: !8311)
!8317 = !DILocation(line: 434, column: 24, scope: !8311)
!8318 = !DILocation(line: 433, column: 13, scope: !8303)
!8319 = !DILocation(line: 435, column: 30, scope: !8311)
!8320 = !DILocation(line: 435, column: 27, scope: !8311)
!8321 = !DILocation(line: 435, column: 6, scope: !8311)
!8322 = !DILocation(line: 437, column: 20, scope: !8311)
!8323 = !DILocation(line: 437, column: 6, scope: !8311)
!8324 = !DILocation(line: 438, column: 2, scope: !8304)
!8325 = !DILocation(line: 439, column: 5, scope: !8299)
!8326 = !DILocation(line: 451, column: 12, scope: !8327)
!8327 = distinct !DILexicalBlock(scope: !8295, file: !3, line: 451, column: 12)
!8328 = !DILocation(line: 451, column: 12, scope: !8295)
!8329 = !DILocation(line: 452, column: 24, scope: !8327)
!8330 = !DILocation(line: 452, column: 5, scope: !8327)
!8331 = !DILocation(line: 453, column: 1, scope: !8121)
!8332 = distinct !DISubprogram(name: "avoid_likely_spilled_reg", scope: !3, file: !3, line: 1881, type: !8333, scopeLine: 1882, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!8333 = !DISubroutineType(types: !8334)
!8334 = !{!6, !6}
!8335 = !DILocalVariable(name: "x", arg: 1, scope: !8332, file: !3, line: 1881, type: !6)
!8336 = !DILocation(line: 1881, column: 31, scope: !8332)
!8337 = !DILocalVariable(name: "new_rtx", scope: !8332, file: !3, line: 1883, type: !6)
!8338 = !DILocation(line: 1883, column: 7, scope: !8332)
!8339 = !DILocation(line: 1885, column: 7, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8332, file: !3, line: 1885, column: 7)
!8341 = !DILocation(line: 1886, column: 7, scope: !8340)
!8342 = !DILocation(line: 1886, column: 10, scope: !8340)
!8343 = !DILocation(line: 1887, column: 7, scope: !8340)
!8344 = !DILocation(line: 1887, column: 10, scope: !8340)
!8345 = !DILocation(line: 1885, column: 7, scope: !8332)
!8346 = !DILocation(line: 1893, column: 27, scope: !8347)
!8347 = distinct !DILexicalBlock(scope: !8340, file: !3, line: 1888, column: 5)
!8348 = !DILocation(line: 1894, column: 30, scope: !8347)
!8349 = !DILocation(line: 1894, column: 17, scope: !8347)
!8350 = !DILocation(line: 1894, column: 15, scope: !8347)
!8351 = !DILocation(line: 1895, column: 27, scope: !8347)
!8352 = !DILocation(line: 1896, column: 23, scope: !8347)
!8353 = !DILocation(line: 1896, column: 32, scope: !8347)
!8354 = !DILocation(line: 1896, column: 7, scope: !8347)
!8355 = !DILocation(line: 1897, column: 14, scope: !8347)
!8356 = !DILocation(line: 1897, column: 7, scope: !8347)
!8357 = !DILocation(line: 1899, column: 10, scope: !8332)
!8358 = !DILocation(line: 1899, column: 3, scope: !8332)
!8359 = !DILocation(line: 1900, column: 1, scope: !8332)
!8360 = distinct !DISubprogram(name: "restore_fixed_argument_area", scope: !3, file: !3, line: 794, type: !8361, scopeLine: 795, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!8361 = !DISubroutineType(types: !8362)
!8362 = !{null, !6, !6, !32, !32}
!8363 = !DILocalVariable(name: "save_area", arg: 1, scope: !8360, file: !3, line: 794, type: !6)
!8364 = !DILocation(line: 794, column: 34, scope: !8360)
!8365 = !DILocalVariable(name: "argblock", arg: 2, scope: !8360, file: !3, line: 794, type: !6)
!8366 = !DILocation(line: 794, column: 49, scope: !8360)
!8367 = !DILocalVariable(name: "high_to_save", arg: 3, scope: !8360, file: !3, line: 794, type: !32)
!8368 = !DILocation(line: 794, column: 63, scope: !8360)
!8369 = !DILocalVariable(name: "low_to_save", arg: 4, scope: !8360, file: !3, line: 794, type: !32)
!8370 = !DILocation(line: 794, column: 81, scope: !8360)
!8371 = !DILocalVariable(name: "save_mode", scope: !8360, file: !3, line: 796, type: !50)
!8372 = !DILocation(line: 796, column: 21, scope: !8360)
!8373 = !DILocation(line: 796, column: 33, scope: !8360)
!8374 = !DILocalVariable(name: "delta", scope: !8360, file: !3, line: 797, type: !32)
!8375 = !DILocation(line: 797, column: 7, scope: !8360)
!8376 = !DILocalVariable(name: "stack_area", scope: !8360, file: !3, line: 798, type: !6)
!8377 = !DILocation(line: 798, column: 7, scope: !8360)
!8378 = !DILocation(line: 803, column: 11, scope: !8360)
!8379 = !DILocation(line: 803, column: 9, scope: !8360)
!8380 = !DILocation(line: 805, column: 29, scope: !8360)
!8381 = !DILocation(line: 806, column: 8, scope: !8360)
!8382 = !DILocation(line: 805, column: 16, scope: !8360)
!8383 = !DILocation(line: 805, column: 14, scope: !8360)
!8384 = !DILocation(line: 808, column: 18, scope: !8360)
!8385 = !DILocation(line: 808, column: 3, scope: !8360)
!8386 = !DILocation(line: 810, column: 7, scope: !8387)
!8387 = distinct !DILexicalBlock(scope: !8360, file: !3, line: 810, column: 7)
!8388 = !DILocation(line: 810, column: 17, scope: !8387)
!8389 = !DILocation(line: 810, column: 7, scope: !8360)
!8390 = !DILocation(line: 811, column: 21, scope: !8387)
!8391 = !DILocation(line: 811, column: 33, scope: !8387)
!8392 = !DILocation(line: 811, column: 5, scope: !8387)
!8393 = !DILocation(line: 813, column: 22, scope: !8387)
!8394 = !DILocation(line: 813, column: 48, scope: !8387)
!8395 = !DILocation(line: 813, column: 34, scope: !8387)
!8396 = !DILocation(line: 814, column: 8, scope: !8387)
!8397 = !DILocation(line: 813, column: 5, scope: !8387)
!8398 = !DILocation(line: 816, column: 1, scope: !8360)
!8399 = distinct !DISubprogram(name: "fixup_tail_calls", scope: !3, file: !3, line: 3189, type: !8400, scopeLine: 3190, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!8400 = !DISubroutineType(types: !8401)
!8401 = !{null}
!8402 = !DILocalVariable(name: "insn", scope: !8399, file: !3, line: 3191, type: !6)
!8403 = !DILocation(line: 3191, column: 7, scope: !8399)
!8404 = !DILocation(line: 3193, column: 15, scope: !8405)
!8405 = distinct !DILexicalBlock(scope: !8399, file: !3, line: 3193, column: 3)
!8406 = !DILocation(line: 3193, column: 13, scope: !8405)
!8407 = !DILocation(line: 3193, column: 8, scope: !8405)
!8408 = !DILocation(line: 3193, column: 29, scope: !8409)
!8409 = distinct !DILexicalBlock(scope: !8405, file: !3, line: 3193, column: 3)
!8410 = !DILocation(line: 3193, column: 3, scope: !8405)
!8411 = !DILocalVariable(name: "note", scope: !8412, file: !3, line: 3195, type: !6)
!8412 = distinct !DILexicalBlock(scope: !8409, file: !3, line: 3194, column: 5)
!8413 = !DILocation(line: 3195, column: 11, scope: !8412)
!8414 = !DILocation(line: 3199, column: 11, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !8412, file: !3, line: 3199, column: 11)
!8416 = !DILocation(line: 3200, column: 4, scope: !8415)
!8417 = !DILocation(line: 3200, column: 7, scope: !8415)
!8418 = !DILocation(line: 3200, column: 24, scope: !8415)
!8419 = !DILocation(line: 3199, column: 11, scope: !8412)
!8420 = !DILocation(line: 3201, column: 2, scope: !8415)
!8421 = !DILocation(line: 3203, column: 29, scope: !8412)
!8422 = !DILocation(line: 3203, column: 14, scope: !8412)
!8423 = !DILocation(line: 3203, column: 12, scope: !8412)
!8424 = !DILocation(line: 3204, column: 11, scope: !8425)
!8425 = distinct !DILexicalBlock(scope: !8412, file: !3, line: 3204, column: 11)
!8426 = !DILocation(line: 3204, column: 11, scope: !8412)
!8427 = !DILocation(line: 3205, column: 15, scope: !8425)
!8428 = !DILocation(line: 3205, column: 21, scope: !8425)
!8429 = !DILocation(line: 3205, column: 2, scope: !8425)
!8430 = !DILocation(line: 3206, column: 29, scope: !8412)
!8431 = !DILocation(line: 3206, column: 14, scope: !8412)
!8432 = !DILocation(line: 3206, column: 12, scope: !8412)
!8433 = !DILocation(line: 3207, column: 7, scope: !8412)
!8434 = !DILocation(line: 3208, column: 5, scope: !8412)
!8435 = !DILocation(line: 3193, column: 42, scope: !8409)
!8436 = !DILocation(line: 3193, column: 40, scope: !8409)
!8437 = !DILocation(line: 3193, column: 3, scope: !8409)
!8438 = distinct !{!8438, !8410, !8439}
!8439 = !DILocation(line: 3208, column: 5, scope: !8405)
!8440 = !DILocation(line: 3209, column: 1, scope: !8399)
!8441 = distinct !DISubprogram(name: "emit_library_call", scope: !3, file: !3, line: 3940, type: !8442, scopeLine: 3942, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!8442 = !DISubroutineType(types: !8443)
!8443 = !{null, !6, !3291, !50, !32, null}
!8444 = !DILocalVariable(name: "orgfun", arg: 1, scope: !8441, file: !3, line: 3940, type: !6)
!8445 = !DILocation(line: 3940, column: 24, scope: !8441)
!8446 = !DILocalVariable(name: "fn_type", arg: 2, scope: !8441, file: !3, line: 3940, type: !3291)
!8447 = !DILocation(line: 3940, column: 50, scope: !8441)
!8448 = !DILocalVariable(name: "outmode", arg: 3, scope: !8441, file: !3, line: 3941, type: !50)
!8449 = !DILocation(line: 3941, column: 24, scope: !8441)
!8450 = !DILocalVariable(name: "nargs", arg: 4, scope: !8441, file: !3, line: 3941, type: !32)
!8451 = !DILocation(line: 3941, column: 37, scope: !8441)
!8452 = !DILocalVariable(name: "p", scope: !8441, file: !3, line: 3943, type: !8453)
!8453 = !DIDerivedType(tag: DW_TAG_typedef, name: "va_list", file: !8454, line: 52, baseType: !8455)
!8454 = !DIFile(filename: "/usr/include/stdio.h", directory: "")
!8455 = !DIDerivedType(tag: DW_TAG_typedef, name: "__gnuc_va_list", file: !8456, line: 32, baseType: !8457)
!8456 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stdarg.h", directory: "/home/venkat/IF-DV")
!8457 = !DIDerivedType(tag: DW_TAG_typedef, name: "__builtin_va_list", file: !3, line: 3943, baseType: !8458)
!8458 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3493, size: 192, elements: !47)
!8459 = !DILocation(line: 3943, column: 11, scope: !8441)
!8460 = !DILocation(line: 3945, column: 3, scope: !8441)
!8461 = !DILocation(line: 3946, column: 33, scope: !8441)
!8462 = !DILocation(line: 3946, column: 51, scope: !8441)
!8463 = !DILocation(line: 3946, column: 60, scope: !8441)
!8464 = !DILocation(line: 3946, column: 69, scope: !8441)
!8465 = !DILocation(line: 3946, column: 76, scope: !8441)
!8466 = !DILocation(line: 3946, column: 3, scope: !8441)
!8467 = !DILocation(line: 3947, column: 3, scope: !8441)
!8468 = !DILocation(line: 3948, column: 1, scope: !8441)
!8469 = !DILocalVariable(name: "retval", arg: 1, scope: !3489, file: !3, line: 3262, type: !32)
!8470 = !DILocation(line: 3262, column: 32, scope: !3489)
!8471 = !DILocalVariable(name: "orgfun", arg: 2, scope: !3489, file: !3, line: 3262, type: !6)
!8472 = !DILocation(line: 3262, column: 44, scope: !3489)
!8473 = !DILocalVariable(name: "value", arg: 3, scope: !3489, file: !3, line: 3262, type: !6)
!8474 = !DILocation(line: 3262, column: 56, scope: !3489)
!8475 = !DILocalVariable(name: "fn_type", arg: 4, scope: !3489, file: !3, line: 3263, type: !3291)
!8476 = !DILocation(line: 3263, column: 25, scope: !3489)
!8477 = !DILocalVariable(name: "outmode", arg: 5, scope: !3489, file: !3, line: 3264, type: !50)
!8478 = !DILocation(line: 3264, column: 25, scope: !3489)
!8479 = !DILocalVariable(name: "nargs", arg: 6, scope: !3489, file: !3, line: 3264, type: !32)
!8480 = !DILocation(line: 3264, column: 38, scope: !3489)
!8481 = !DILocalVariable(name: "p", arg: 7, scope: !3489, file: !3, line: 3264, type: !3492)
!8482 = !DILocation(line: 3264, column: 53, scope: !3489)
!8483 = !DILocalVariable(name: "args_size", scope: !3489, file: !3, line: 3267, type: !3470)
!8484 = !DILocation(line: 3267, column: 20, scope: !3489)
!8485 = !DILocalVariable(name: "original_args_size", scope: !3489, file: !3, line: 3269, type: !3470)
!8486 = !DILocation(line: 3269, column: 20, scope: !3489)
!8487 = !DILocalVariable(name: "argnum", scope: !3489, file: !3, line: 3270, type: !32)
!8488 = !DILocation(line: 3270, column: 7, scope: !3489)
!8489 = !DILocalVariable(name: "fun", scope: !3489, file: !3, line: 3271, type: !6)
!8490 = !DILocation(line: 3271, column: 7, scope: !3489)
!8491 = !DILocalVariable(name: "fndecl", scope: !3489, file: !3, line: 3274, type: !258)
!8492 = !DILocation(line: 3274, column: 8, scope: !3489)
!8493 = !DILocalVariable(name: "fntype", scope: !3489, file: !3, line: 3275, type: !258)
!8494 = !DILocation(line: 3275, column: 8, scope: !3489)
!8495 = !DILocalVariable(name: "inc", scope: !3489, file: !3, line: 3276, type: !32)
!8496 = !DILocation(line: 3276, column: 7, scope: !3489)
!8497 = !DILocalVariable(name: "count", scope: !3489, file: !3, line: 3277, type: !32)
!8498 = !DILocation(line: 3277, column: 7, scope: !3489)
!8499 = !DILocalVariable(name: "argblock", scope: !3489, file: !3, line: 3278, type: !6)
!8500 = !DILocation(line: 3278, column: 7, scope: !3489)
!8501 = !DILocalVariable(name: "args_so_far", scope: !3489, file: !3, line: 3279, type: !4039)
!8502 = !DILocation(line: 3279, column: 19, scope: !3489)
!8503 = !DILocalVariable(name: "argvec", scope: !3489, file: !3, line: 3289, type: !3487)
!8504 = !DILocation(line: 3289, column: 15, scope: !3489)
!8505 = !DILocalVariable(name: "old_inhibit_defer_pop", scope: !3489, file: !3, line: 3290, type: !32)
!8506 = !DILocation(line: 3290, column: 7, scope: !3489)
!8507 = !DILocation(line: 3290, column: 31, scope: !3489)
!8508 = !DILocalVariable(name: "call_fusage", scope: !3489, file: !3, line: 3291, type: !6)
!8509 = !DILocation(line: 3291, column: 7, scope: !3489)
!8510 = !DILocalVariable(name: "mem_value", scope: !3489, file: !3, line: 3292, type: !6)
!8511 = !DILocation(line: 3292, column: 7, scope: !3489)
!8512 = !DILocalVariable(name: "valreg", scope: !3489, file: !3, line: 3293, type: !6)
!8513 = !DILocation(line: 3293, column: 7, scope: !3489)
!8514 = !DILocalVariable(name: "pcc_struct_value", scope: !3489, file: !3, line: 3294, type: !32)
!8515 = !DILocation(line: 3294, column: 7, scope: !3489)
!8516 = !DILocalVariable(name: "struct_value_size", scope: !3489, file: !3, line: 3295, type: !32)
!8517 = !DILocation(line: 3295, column: 7, scope: !3489)
!8518 = !DILocalVariable(name: "flags", scope: !3489, file: !3, line: 3296, type: !32)
!8519 = !DILocation(line: 3296, column: 7, scope: !3489)
!8520 = !DILocalVariable(name: "reg_parm_stack_space", scope: !3489, file: !3, line: 3297, type: !32)
!8521 = !DILocation(line: 3297, column: 7, scope: !3489)
!8522 = !DILocalVariable(name: "needed", scope: !3489, file: !3, line: 3298, type: !32)
!8523 = !DILocation(line: 3298, column: 7, scope: !3489)
!8524 = !DILocalVariable(name: "before_call", scope: !3489, file: !3, line: 3299, type: !6)
!8525 = !DILocation(line: 3299, column: 7, scope: !3489)
!8526 = !DILocalVariable(name: "tfom", scope: !3489, file: !3, line: 3300, type: !258)
!8527 = !DILocation(line: 3300, column: 8, scope: !3489)
!8528 = !DILocalVariable(name: "low_to_save", scope: !3489, file: !3, line: 3305, type: !32)
!8529 = !DILocation(line: 3305, column: 7, scope: !3489)
!8530 = !DILocalVariable(name: "high_to_save", scope: !3489, file: !3, line: 3305, type: !32)
!8531 = !DILocation(line: 3305, column: 24, scope: !3489)
!8532 = !DILocalVariable(name: "save_area", scope: !3489, file: !3, line: 3306, type: !6)
!8533 = !DILocation(line: 3306, column: 7, scope: !3489)
!8534 = !DILocalVariable(name: "initial_highest_arg_in_use", scope: !3489, file: !3, line: 3310, type: !32)
!8535 = !DILocation(line: 3310, column: 7, scope: !3489)
!8536 = !DILocation(line: 3310, column: 36, scope: !3489)
!8537 = !DILocalVariable(name: "initial_stack_usage_map", scope: !3489, file: !3, line: 3311, type: !233)
!8538 = !DILocation(line: 3311, column: 9, scope: !3489)
!8539 = !DILocation(line: 3311, column: 35, scope: !3489)
!8540 = !DILocalVariable(name: "stack_usage_map_buf", scope: !3489, file: !3, line: 3312, type: !233)
!8541 = !DILocation(line: 3312, column: 9, scope: !3489)
!8542 = !DILocalVariable(name: "struct_value", scope: !3489, file: !3, line: 3314, type: !6)
!8543 = !DILocation(line: 3314, column: 7, scope: !3489)
!8544 = !DILocation(line: 3314, column: 36, scope: !3489)
!8545 = !DILocation(line: 3314, column: 22, scope: !3489)
!8546 = !DILocation(line: 3317, column: 26, scope: !3489)
!8547 = !DILocation(line: 3317, column: 24, scope: !3489)
!8548 = !DILocation(line: 3321, column: 9, scope: !3489)
!8549 = !DILocation(line: 3323, column: 11, scope: !3489)
!8550 = !DILocation(line: 3323, column: 3, scope: !3489)
!8551 = !DILocation(line: 3326, column: 7, scope: !8552)
!8552 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3324, column: 5)
!8553 = !DILocation(line: 3328, column: 13, scope: !8552)
!8554 = !DILocation(line: 3329, column: 7, scope: !8552)
!8555 = !DILocation(line: 3331, column: 13, scope: !8552)
!8556 = !DILocation(line: 3332, column: 7, scope: !8552)
!8557 = !DILocation(line: 3334, column: 13, scope: !8552)
!8558 = !DILocation(line: 3335, column: 7, scope: !8552)
!8559 = !DILocation(line: 3337, column: 13, scope: !8552)
!8560 = !DILocation(line: 3338, column: 7, scope: !8552)
!8561 = !DILocation(line: 3340, column: 13, scope: !8552)
!8562 = !DILocation(line: 3341, column: 7, scope: !8552)
!8563 = !DILocation(line: 3343, column: 9, scope: !3489)
!8564 = !DILocation(line: 3343, column: 7, scope: !3489)
!8565 = !DILocation(line: 3347, column: 13, scope: !8566)
!8566 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3347, column: 7)
!8567 = !DILocation(line: 3347, column: 40, scope: !8566)
!8568 = !DILocation(line: 3347, column: 38, scope: !8566)
!8569 = !DILocation(line: 3347, column: 7, scope: !3489)
!8570 = !DILocation(line: 3348, column: 38, scope: !8566)
!8571 = !DILocation(line: 3348, column: 36, scope: !8566)
!8572 = !DILocation(line: 3348, column: 5, scope: !8566)
!8573 = !DILocation(line: 3352, column: 7, scope: !8574)
!8574 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3352, column: 7)
!8575 = !DILocation(line: 3352, column: 15, scope: !8574)
!8576 = !DILocation(line: 3352, column: 7, scope: !3489)
!8577 = !DILocation(line: 3354, column: 31, scope: !8578)
!8578 = distinct !DILexicalBlock(scope: !8574, file: !3, line: 3353, column: 5)
!8579 = !DILocation(line: 3354, column: 46, scope: !8578)
!8580 = !DILocation(line: 3354, column: 14, scope: !8578)
!8581 = !DILocation(line: 3354, column: 12, scope: !8578)
!8582 = !DILocation(line: 3355, column: 30, scope: !8583)
!8583 = distinct !DILexicalBlock(scope: !8578, file: !3, line: 3355, column: 11)
!8584 = !DILocation(line: 3355, column: 11, scope: !8583)
!8585 = !DILocation(line: 3355, column: 11, scope: !8578)
!8586 = !DILocation(line: 3365, column: 24, scope: !8587)
!8587 = distinct !DILexicalBlock(scope: !8583, file: !3, line: 3356, column: 2)
!8588 = !DILocation(line: 3365, column: 22, scope: !8587)
!8589 = !DILocation(line: 3366, column: 8, scope: !8590)
!8590 = distinct !DILexicalBlock(scope: !8587, file: !3, line: 3366, column: 8)
!8591 = !DILocation(line: 3366, column: 14, scope: !8590)
!8592 = !DILocation(line: 3366, column: 19, scope: !8590)
!8593 = !DILocation(line: 3366, column: 22, scope: !8590)
!8594 = !DILocation(line: 3366, column: 8, scope: !8587)
!8595 = !DILocation(line: 3367, column: 18, scope: !8590)
!8596 = !DILocation(line: 3367, column: 16, scope: !8590)
!8597 = !DILocation(line: 3367, column: 6, scope: !8590)
!8598 = !DILocation(line: 3369, column: 31, scope: !8590)
!8599 = !DILocation(line: 3369, column: 18, scope: !8590)
!8600 = !DILocation(line: 3369, column: 16, scope: !8590)
!8601 = !DILocation(line: 3372, column: 10, scope: !8587)
!8602 = !DILocation(line: 3373, column: 2, scope: !8587)
!8603 = !DILocation(line: 3374, column: 5, scope: !8578)
!8604 = !DILocation(line: 3376, column: 12, scope: !8574)
!8605 = !DILocation(line: 3376, column: 10, scope: !8574)
!8606 = !DILocation(line: 3387, column: 12, scope: !3489)
!8607 = !DILocation(line: 3387, column: 10, scope: !3489)
!8608 = !DILocation(line: 3388, column: 11, scope: !3489)
!8609 = !DILocation(line: 3388, column: 3, scope: !3489)
!8610 = !DILocation(line: 3388, column: 23, scope: !3489)
!8611 = !DILocation(line: 3388, column: 29, scope: !3489)
!8612 = !DILocation(line: 3388, column: 22, scope: !3489)
!8613 = !DILocation(line: 3388, column: 34, scope: !3489)
!8614 = !DILocation(line: 3393, column: 3, scope: !3489)
!8615 = !DILocation(line: 3396, column: 13, scope: !3489)
!8616 = !DILocation(line: 3396, column: 22, scope: !3489)
!8617 = !DILocation(line: 3397, column: 13, scope: !3489)
!8618 = !DILocation(line: 3397, column: 17, scope: !3489)
!8619 = !DILocation(line: 3399, column: 9, scope: !3489)
!8620 = !DILocation(line: 3401, column: 3, scope: !3489)
!8621 = !DILocation(line: 3405, column: 7, scope: !8622)
!8622 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3405, column: 7)
!8623 = !DILocation(line: 3405, column: 17, scope: !8622)
!8624 = !DILocation(line: 3405, column: 20, scope: !8622)
!8625 = !DILocation(line: 3405, column: 33, scope: !8622)
!8626 = !DILocation(line: 3405, column: 38, scope: !8622)
!8627 = !DILocation(line: 3405, column: 43, scope: !8622)
!8628 = !DILocation(line: 3405, column: 7, scope: !3489)
!8629 = !DILocalVariable(name: "addr", scope: !8630, file: !3, line: 3407, type: !6)
!8630 = distinct !DILexicalBlock(scope: !8622, file: !3, line: 3406, column: 5)
!8631 = !DILocation(line: 3407, column: 11, scope: !8630)
!8632 = !DILocation(line: 3407, column: 18, scope: !8630)
!8633 = !DILocation(line: 3409, column: 12, scope: !8630)
!8634 = !DILocation(line: 3412, column: 12, scope: !8635)
!8635 = distinct !DILexicalBlock(scope: !8630, file: !3, line: 3412, column: 11)
!8636 = !DILocation(line: 3412, column: 25, scope: !8635)
!8637 = !DILocation(line: 3412, column: 29, scope: !8635)
!8638 = !DILocation(line: 3413, column: 4, scope: !8635)
!8639 = !DILocation(line: 3413, column: 10, scope: !8635)
!8640 = !DILocation(line: 3413, column: 28, scope: !8635)
!8641 = !DILocation(line: 3413, column: 31, scope: !8635)
!8642 = !DILocation(line: 3412, column: 11, scope: !8630)
!8643 = !DILocation(line: 3414, column: 24, scope: !8635)
!8644 = !DILocation(line: 3414, column: 9, scope: !8635)
!8645 = !DILocation(line: 3414, column: 7, scope: !8635)
!8646 = !DILocation(line: 3414, column: 2, scope: !8635)
!8647 = !DILocation(line: 3416, column: 29, scope: !8630)
!8648 = !DILocation(line: 3416, column: 7, scope: !8630)
!8649 = !DILocation(line: 3416, column: 14, scope: !8630)
!8650 = !DILocation(line: 3416, column: 21, scope: !8630)
!8651 = !DILocation(line: 3416, column: 27, scope: !8630)
!8652 = !DILocation(line: 3417, column: 7, scope: !8630)
!8653 = !DILocation(line: 3417, column: 14, scope: !8630)
!8654 = !DILocation(line: 3417, column: 21, scope: !8630)
!8655 = !DILocation(line: 3417, column: 26, scope: !8630)
!8656 = !DILocation(line: 3418, column: 7, scope: !8630)
!8657 = !DILocation(line: 3418, column: 14, scope: !8630)
!8658 = !DILocation(line: 3418, column: 21, scope: !8630)
!8659 = !DILocation(line: 3418, column: 29, scope: !8630)
!8660 = !DILocation(line: 3420, column: 27, scope: !8630)
!8661 = !DILocation(line: 3420, column: 7, scope: !8630)
!8662 = !DILocation(line: 3420, column: 14, scope: !8630)
!8663 = !DILocation(line: 3420, column: 21, scope: !8630)
!8664 = !DILocation(line: 3420, column: 25, scope: !8630)
!8665 = !DILocation(line: 3421, column: 7, scope: !8630)
!8666 = !DILocation(line: 3428, column: 7, scope: !8630)
!8667 = !DILocation(line: 3428, column: 14, scope: !8630)
!8668 = !DILocation(line: 3428, column: 21, scope: !8630)
!8669 = !DILocation(line: 3428, column: 25, scope: !8630)
!8670 = !DILocation(line: 3430, column: 34, scope: !8630)
!8671 = !DILocation(line: 3430, column: 41, scope: !8630)
!8672 = !DILocation(line: 3430, column: 48, scope: !8630)
!8673 = !DILocation(line: 3424, column: 7, scope: !8630)
!8674 = !DILocation(line: 3432, column: 11, scope: !8675)
!8675 = distinct !DILexicalBlock(scope: !8630, file: !3, line: 3432, column: 11)
!8676 = !DILocation(line: 3432, column: 18, scope: !8675)
!8677 = !DILocation(line: 3432, column: 25, scope: !8675)
!8678 = !DILocation(line: 3432, column: 29, scope: !8675)
!8679 = !DILocation(line: 3432, column: 34, scope: !8675)
!8680 = !DILocation(line: 3432, column: 37, scope: !8675)
!8681 = !DILocation(line: 3432, column: 44, scope: !8675)
!8682 = !DILocation(line: 3432, column: 51, scope: !8675)
!8683 = !DILocation(line: 3432, column: 59, scope: !8675)
!8684 = !DILocation(line: 3433, column: 4, scope: !8675)
!8685 = !DILocation(line: 3433, column: 7, scope: !8675)
!8686 = !DILocation(line: 3433, column: 28, scope: !8675)
!8687 = !DILocation(line: 3432, column: 11, scope: !8630)
!8688 = !DILocation(line: 3434, column: 24, scope: !8675)
!8689 = !DILocation(line: 3434, column: 31, scope: !8675)
!8690 = !DILocation(line: 3434, column: 38, scope: !8675)
!8691 = !DILocation(line: 3434, column: 45, scope: !8675)
!8692 = !DILocation(line: 3434, column: 50, scope: !8675)
!8693 = !DILocation(line: 3434, column: 12, scope: !8675)
!8694 = !DILocation(line: 3434, column: 21, scope: !8675)
!8695 = !DILocation(line: 3434, column: 2, scope: !8675)
!8696 = !DILocation(line: 3436, column: 7, scope: !8630)
!8697 = !DILocation(line: 3438, column: 12, scope: !8630)
!8698 = !DILocation(line: 3439, column: 5, scope: !8630)
!8699 = !DILocation(line: 3441, column: 3, scope: !3489)
!8700 = !DILocation(line: 3441, column: 10, scope: !8701)
!8701 = distinct !DILexicalBlock(scope: !8702, file: !3, line: 3441, column: 3)
!8702 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3441, column: 3)
!8703 = !DILocation(line: 3441, column: 18, scope: !8701)
!8704 = !DILocation(line: 3441, column: 16, scope: !8701)
!8705 = !DILocation(line: 3441, column: 3, scope: !8702)
!8706 = !DILocalVariable(name: "val", scope: !8707, file: !3, line: 3443, type: !6)
!8707 = distinct !DILexicalBlock(scope: !8701, file: !3, line: 3442, column: 5)
!8708 = !DILocation(line: 3443, column: 11, scope: !8707)
!8709 = !DILocation(line: 3443, column: 17, scope: !8707)
!8710 = !DILocalVariable(name: "mode", scope: !8707, file: !3, line: 3444, type: !50)
!8711 = !DILocation(line: 3444, column: 25, scope: !8707)
!8712 = !DILocation(line: 3444, column: 52, scope: !8707)
!8713 = !DILocation(line: 3448, column: 7, scope: !8707)
!8714 = !DILocation(line: 3452, column: 12, scope: !8715)
!8715 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 3452, column: 11)
!8716 = !DILocation(line: 3452, column: 24, scope: !8715)
!8717 = !DILocation(line: 3452, column: 28, scope: !8715)
!8718 = !DILocation(line: 3453, column: 4, scope: !8715)
!8719 = !DILocation(line: 3453, column: 10, scope: !8715)
!8720 = !DILocation(line: 3453, column: 27, scope: !8715)
!8721 = !DILocation(line: 3453, column: 30, scope: !8715)
!8722 = !DILocation(line: 3452, column: 11, scope: !8707)
!8723 = !DILocation(line: 3454, column: 23, scope: !8715)
!8724 = !DILocation(line: 3454, column: 8, scope: !8715)
!8725 = !DILocation(line: 3454, column: 6, scope: !8715)
!8726 = !DILocation(line: 3454, column: 2, scope: !8715)
!8727 = !DILocation(line: 3456, column: 44, scope: !8728)
!8728 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 3456, column: 11)
!8729 = !DILocation(line: 3456, column: 11, scope: !8728)
!8730 = !DILocation(line: 3456, column: 11, scope: !8707)
!8731 = !DILocalVariable(name: "slot", scope: !8732, file: !3, line: 3458, type: !6)
!8732 = distinct !DILexicalBlock(scope: !8728, file: !3, line: 3457, column: 2)
!8733 = !DILocation(line: 3458, column: 8, scope: !8732)
!8734 = !DILocalVariable(name: "must_copy", scope: !8732, file: !3, line: 3459, type: !32)
!8735 = !DILocation(line: 3459, column: 8, scope: !8732)
!8736 = !DILocation(line: 3460, column: 48, scope: !8732)
!8737 = !DILocation(line: 3460, column: 9, scope: !8732)
!8738 = !DILocation(line: 3460, column: 8, scope: !8732)
!8739 = !DILocation(line: 3464, column: 8, scope: !8740)
!8740 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 3464, column: 8)
!8741 = !DILocation(line: 3464, column: 14, scope: !8740)
!8742 = !DILocation(line: 3464, column: 8, scope: !8732)
!8743 = !DILocation(line: 3466, column: 14, scope: !8744)
!8744 = distinct !DILexicalBlock(scope: !8740, file: !3, line: 3465, column: 6)
!8745 = !DILocation(line: 3467, column: 14, scope: !8744)
!8746 = !DILocation(line: 3468, column: 6, scope: !8744)
!8747 = !DILocation(line: 3470, column: 8, scope: !8748)
!8748 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 3470, column: 8)
!8749 = !DILocation(line: 3470, column: 20, scope: !8748)
!8750 = !DILocation(line: 3470, column: 24, scope: !8748)
!8751 = !DILocation(line: 3470, column: 8, scope: !8732)
!8752 = !DILocation(line: 3471, column: 13, scope: !8748)
!8753 = !DILocation(line: 3471, column: 11, scope: !8748)
!8754 = !DILocation(line: 3471, column: 6, scope: !8748)
!8755 = !DILocation(line: 3474, column: 45, scope: !8756)
!8756 = distinct !DILexicalBlock(scope: !8748, file: !3, line: 3473, column: 6)
!8757 = !DILocation(line: 3474, column: 60, scope: !8756)
!8758 = !DILocation(line: 3474, column: 28, scope: !8756)
!8759 = !DILocation(line: 3474, column: 15, scope: !8756)
!8760 = !DILocation(line: 3474, column: 13, scope: !8756)
!8761 = !DILocation(line: 3476, column: 24, scope: !8756)
!8762 = !DILocation(line: 3476, column: 30, scope: !8756)
!8763 = !DILocation(line: 3476, column: 8, scope: !8756)
!8764 = !DILocation(line: 3479, column: 18, scope: !8732)
!8765 = !DILocation(line: 3479, column: 16, scope: !8732)
!8766 = !DILocation(line: 3482, column: 8, scope: !8767)
!8767 = distinct !DILexicalBlock(scope: !8732, file: !3, line: 3482, column: 8)
!8768 = !DILocation(line: 3482, column: 8, scope: !8732)
!8769 = !DILocation(line: 3483, column: 20, scope: !8767)
!8770 = !DILocation(line: 3483, column: 18, scope: !8767)
!8771 = !DILocation(line: 3483, column: 6, scope: !8767)
!8772 = !DILocation(line: 3488, column: 9, scope: !8732)
!8773 = !DILocation(line: 3489, column: 25, scope: !8732)
!8774 = !DILocation(line: 3489, column: 10, scope: !8732)
!8775 = !DILocation(line: 3489, column: 8, scope: !8732)
!8776 = !DILocation(line: 3490, column: 2, scope: !8732)
!8777 = !DILocation(line: 3492, column: 29, scope: !8707)
!8778 = !DILocation(line: 3492, column: 7, scope: !8707)
!8779 = !DILocation(line: 3492, column: 14, scope: !8707)
!8780 = !DILocation(line: 3492, column: 21, scope: !8707)
!8781 = !DILocation(line: 3492, column: 27, scope: !8707)
!8782 = !DILocation(line: 3493, column: 28, scope: !8707)
!8783 = !DILocation(line: 3493, column: 7, scope: !8707)
!8784 = !DILocation(line: 3493, column: 14, scope: !8707)
!8785 = !DILocation(line: 3493, column: 21, scope: !8707)
!8786 = !DILocation(line: 3493, column: 26, scope: !8707)
!8787 = !DILocation(line: 3495, column: 27, scope: !8707)
!8788 = !DILocation(line: 3495, column: 7, scope: !8707)
!8789 = !DILocation(line: 3495, column: 14, scope: !8707)
!8790 = !DILocation(line: 3495, column: 21, scope: !8707)
!8791 = !DILocation(line: 3495, column: 25, scope: !8707)
!8792 = !DILocation(line: 3498, column: 18, scope: !8707)
!8793 = !DILocation(line: 3498, column: 51, scope: !8707)
!8794 = !DILocation(line: 3498, column: 4, scope: !8707)
!8795 = !DILocation(line: 3497, column: 7, scope: !8707)
!8796 = !DILocation(line: 3497, column: 14, scope: !8707)
!8797 = !DILocation(line: 3497, column: 21, scope: !8707)
!8798 = !DILocation(line: 3498, column: 2, scope: !8707)
!8799 = !DILocation(line: 3500, column: 28, scope: !8707)
!8800 = !DILocation(line: 3504, column: 7, scope: !8707)
!8801 = !DILocation(line: 3504, column: 14, scope: !8707)
!8802 = !DILocation(line: 3504, column: 21, scope: !8707)
!8803 = !DILocation(line: 3504, column: 25, scope: !8707)
!8804 = !DILocation(line: 3506, column: 7, scope: !8707)
!8805 = !DILocation(line: 3506, column: 14, scope: !8707)
!8806 = !DILocation(line: 3506, column: 21, scope: !8707)
!8807 = !DILocation(line: 3507, column: 31, scope: !8707)
!8808 = !DILocation(line: 3507, column: 38, scope: !8707)
!8809 = !DILocation(line: 3507, column: 45, scope: !8707)
!8810 = !DILocation(line: 3500, column: 7, scope: !8707)
!8811 = !DILocation(line: 3509, column: 7, scope: !8707)
!8812 = !DILocation(line: 3511, column: 11, scope: !8813)
!8813 = distinct !DILexicalBlock(scope: !8707, file: !3, line: 3511, column: 11)
!8814 = !DILocation(line: 3511, column: 18, scope: !8813)
!8815 = !DILocation(line: 3511, column: 25, scope: !8813)
!8816 = !DILocation(line: 3511, column: 29, scope: !8813)
!8817 = !DILocation(line: 3511, column: 34, scope: !8813)
!8818 = !DILocation(line: 3511, column: 37, scope: !8813)
!8819 = !DILocation(line: 3511, column: 44, scope: !8813)
!8820 = !DILocation(line: 3511, column: 51, scope: !8813)
!8821 = !DILocation(line: 3511, column: 59, scope: !8813)
!8822 = !DILocation(line: 3512, column: 4, scope: !8813)
!8823 = !DILocation(line: 3512, column: 7, scope: !8813)
!8824 = !DILocation(line: 3512, column: 28, scope: !8813)
!8825 = !DILocation(line: 3511, column: 11, scope: !8707)
!8826 = !DILocation(line: 3513, column: 24, scope: !8813)
!8827 = !DILocation(line: 3513, column: 31, scope: !8813)
!8828 = !DILocation(line: 3513, column: 38, scope: !8813)
!8829 = !DILocation(line: 3513, column: 45, scope: !8813)
!8830 = !DILocation(line: 3513, column: 50, scope: !8813)
!8831 = !DILocation(line: 3513, column: 12, scope: !8813)
!8832 = !DILocation(line: 3513, column: 21, scope: !8813)
!8833 = !DILocation(line: 3513, column: 2, scope: !8813)
!8834 = !DILocation(line: 3515, column: 7, scope: !8707)
!8835 = !DILocation(line: 3516, column: 5, scope: !8707)
!8836 = !DILocation(line: 3441, column: 30, scope: !8701)
!8837 = !DILocation(line: 3441, column: 3, scope: !8701)
!8838 = distinct !{!8838, !8705, !8839}
!8839 = !DILocation(line: 3516, column: 5, scope: !8702)
!8840 = !DILocation(line: 3520, column: 30, scope: !3489)
!8841 = !DILocation(line: 3520, column: 3, scope: !3489)
!8842 = !DILocation(line: 3522, column: 24, scope: !3489)
!8843 = !DILocation(line: 3523, column: 37, scope: !3489)
!8844 = !DILocation(line: 3524, column: 8, scope: !3489)
!8845 = !DILocation(line: 3524, column: 6, scope: !3489)
!8846 = !DILocation(line: 3525, column: 8, scope: !3489)
!8847 = !DILocation(line: 3525, column: 6, scope: !3489)
!8848 = !DILocation(line: 3525, column: 20, scope: !3489)
!8849 = !DILocation(line: 3526, column: 8, scope: !3489)
!8850 = !DILocation(line: 3526, column: 6, scope: !3489)
!8851 = !DILocation(line: 3527, column: 8, scope: !3489)
!8852 = !DILocation(line: 3527, column: 6, scope: !3489)
!8853 = !DILocation(line: 3528, column: 7, scope: !3489)
!8854 = !DILocation(line: 3528, column: 5, scope: !3489)
!8855 = !DILocation(line: 3523, column: 13, scope: !3489)
!8856 = !DILocation(line: 3523, column: 22, scope: !3489)
!8857 = !DILocation(line: 3530, column: 24, scope: !3489)
!8858 = !DILocation(line: 3530, column: 13, scope: !3489)
!8859 = !DILocation(line: 3530, column: 22, scope: !3489)
!8860 = !DILocation(line: 3533, column: 9, scope: !8861)
!8861 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3533, column: 7)
!8862 = !DILocation(line: 3533, column: 7, scope: !3489)
!8863 = !DILocation(line: 3534, column: 27, scope: !8861)
!8864 = !DILocation(line: 3534, column: 15, scope: !8861)
!8865 = !DILocation(line: 3534, column: 24, scope: !8861)
!8866 = !DILocation(line: 3534, column: 5, scope: !8861)
!8867 = !DILocation(line: 3536, column: 17, scope: !8868)
!8868 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3536, column: 7)
!8869 = !DILocation(line: 3536, column: 34, scope: !8868)
!8870 = !DILocation(line: 3536, column: 28, scope: !8868)
!8871 = !DILocation(line: 3536, column: 26, scope: !8868)
!8872 = !DILocation(line: 3536, column: 7, scope: !3489)
!8873 = !DILocation(line: 3537, column: 42, scope: !8868)
!8874 = !DILocation(line: 3537, column: 32, scope: !8868)
!8875 = !DILocation(line: 3537, column: 30, scope: !8868)
!8876 = !DILocation(line: 3537, column: 5, scope: !8868)
!8877 = !DILocation(line: 3539, column: 7, scope: !8878)
!8878 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3539, column: 7)
!8879 = !DILocation(line: 3539, column: 7, scope: !3489)
!8880 = !DILocation(line: 3553, column: 26, scope: !8881)
!8881 = distinct !DILexicalBlock(scope: !8878, file: !3, line: 3540, column: 5)
!8882 = !DILocation(line: 3553, column: 16, scope: !8881)
!8883 = !DILocation(line: 3553, column: 14, scope: !8881)
!8884 = !DILocation(line: 3558, column: 13, scope: !8885)
!8885 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 3558, column: 11)
!8886 = !DILocation(line: 3558, column: 11, scope: !8881)
!8887 = !DILocation(line: 3559, column: 12, scope: !8885)
!8888 = !DILocation(line: 3559, column: 9, scope: !8885)
!8889 = !DILocation(line: 3559, column: 2, scope: !8885)
!8890 = !DILocation(line: 3565, column: 37, scope: !8881)
!8891 = !DILocation(line: 3565, column: 35, scope: !8881)
!8892 = !DILocation(line: 3568, column: 29, scope: !8881)
!8893 = !DILocation(line: 3568, column: 27, scope: !8881)
!8894 = !DILocation(line: 3569, column: 25, scope: !8881)
!8895 = !DILocation(line: 3569, column: 23, scope: !8881)
!8896 = !DILocation(line: 3571, column: 11, scope: !8897)
!8897 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 3571, column: 11)
!8898 = !DILocation(line: 3571, column: 11, scope: !8881)
!8899 = !DILocation(line: 3572, column: 10, scope: !8897)
!8900 = !DILocation(line: 3572, column: 27, scope: !8897)
!8901 = !DILocation(line: 3573, column: 3, scope: !8897)
!8902 = !DILocation(line: 3572, column: 2, scope: !8897)
!8903 = !DILocation(line: 3575, column: 11, scope: !8904)
!8904 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 3575, column: 11)
!8905 = !DILocation(line: 3575, column: 41, scope: !8904)
!8906 = !DILocation(line: 3575, column: 38, scope: !8904)
!8907 = !DILocation(line: 3575, column: 11, scope: !8881)
!8908 = !DILocation(line: 3576, column: 11, scope: !8904)
!8909 = !DILocation(line: 3576, column: 27, scope: !8904)
!8910 = !DILocation(line: 3577, column: 9, scope: !8904)
!8911 = !DILocation(line: 3577, column: 39, scope: !8904)
!8912 = !DILocation(line: 3577, column: 37, scope: !8904)
!8913 = !DILocation(line: 3576, column: 2, scope: !8904)
!8914 = !DILocation(line: 3578, column: 14, scope: !8881)
!8915 = !DILocation(line: 3585, column: 11, scope: !8916)
!8916 = distinct !DILexicalBlock(scope: !8881, file: !3, line: 3585, column: 11)
!8917 = !DILocation(line: 3585, column: 11, scope: !8881)
!8918 = !DILocation(line: 3586, column: 28, scope: !8916)
!8919 = !DILocation(line: 3586, column: 13, scope: !8916)
!8920 = !DILocation(line: 3586, column: 11, scope: !8916)
!8921 = !DILocation(line: 3586, column: 2, scope: !8916)
!8922 = !DILocation(line: 3588, column: 13, scope: !8916)
!8923 = !DILocation(line: 3588, column: 11, scope: !8916)
!8924 = !DILocation(line: 3589, column: 5, scope: !8881)
!8925 = !DILocation(line: 3592, column: 12, scope: !8926)
!8926 = distinct !DILexicalBlock(scope: !8927, file: !3, line: 3592, column: 11)
!8927 = distinct !DILexicalBlock(scope: !8878, file: !3, line: 3591, column: 5)
!8928 = !DILocation(line: 3592, column: 11, scope: !8927)
!8929 = !DILocation(line: 3593, column: 25, scope: !8926)
!8930 = !DILocation(line: 3593, column: 13, scope: !8926)
!8931 = !DILocation(line: 3593, column: 11, scope: !8926)
!8932 = !DILocation(line: 3593, column: 2, scope: !8926)
!8933 = !DILocation(line: 3598, column: 7, scope: !8934)
!8934 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3598, column: 7)
!8935 = !DILocation(line: 3598, column: 16, scope: !8934)
!8936 = !DILocation(line: 3598, column: 7, scope: !3489)
!8937 = !DILocation(line: 3599, column: 24, scope: !8934)
!8938 = !DILocation(line: 3599, column: 5, scope: !8934)
!8939 = !DILocation(line: 3604, column: 11, scope: !8940)
!8940 = distinct !DILexicalBlock(scope: !8941, file: !3, line: 3603, column: 5)
!8941 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3602, column: 7)
!8942 = !DILocation(line: 3605, column: 16, scope: !8940)
!8943 = !DILocation(line: 3605, column: 22, scope: !8940)
!8944 = !DILocation(line: 3605, column: 14, scope: !8940)
!8945 = !DILocation(line: 3614, column: 7, scope: !8946)
!8946 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3614, column: 7)
!8947 = !DILocation(line: 3614, column: 7, scope: !3489)
!8948 = !DILocation(line: 3619, column: 45, scope: !8949)
!8949 = distinct !DILexicalBlock(scope: !8946, file: !3, line: 3615, column: 5)
!8950 = !DILocation(line: 3619, column: 67, scope: !8949)
!8951 = !DILocation(line: 3619, column: 19, scope: !8949)
!8952 = !DILocation(line: 3619, column: 17, scope: !8949)
!8953 = !DILocation(line: 3621, column: 5, scope: !8949)
!8954 = !DILocation(line: 3628, column: 14, scope: !8955)
!8955 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3628, column: 3)
!8956 = !DILocation(line: 3628, column: 8, scope: !8955)
!8957 = !DILocation(line: 3628, column: 19, scope: !8958)
!8958 = distinct !DILexicalBlock(scope: !8955, file: !3, line: 3628, column: 3)
!8959 = !DILocation(line: 3628, column: 27, scope: !8958)
!8960 = !DILocation(line: 3628, column: 25, scope: !8958)
!8961 = !DILocation(line: 3628, column: 3, scope: !8955)
!8962 = !DILocalVariable(name: "mode", scope: !8963, file: !3, line: 3630, type: !50)
!8963 = distinct !DILexicalBlock(scope: !8958, file: !3, line: 3629, column: 5)
!8964 = !DILocation(line: 3630, column: 25, scope: !8963)
!8965 = !DILocation(line: 3630, column: 32, scope: !8963)
!8966 = !DILocation(line: 3630, column: 39, scope: !8963)
!8967 = !DILocation(line: 3630, column: 47, scope: !8963)
!8968 = !DILocalVariable(name: "val", scope: !8963, file: !3, line: 3631, type: !6)
!8969 = !DILocation(line: 3631, column: 11, scope: !8963)
!8970 = !DILocation(line: 3631, column: 17, scope: !8963)
!8971 = !DILocation(line: 3631, column: 24, scope: !8963)
!8972 = !DILocation(line: 3631, column: 32, scope: !8963)
!8973 = !DILocalVariable(name: "reg", scope: !8963, file: !3, line: 3632, type: !6)
!8974 = !DILocation(line: 3632, column: 11, scope: !8963)
!8975 = !DILocation(line: 3632, column: 17, scope: !8963)
!8976 = !DILocation(line: 3632, column: 24, scope: !8963)
!8977 = !DILocation(line: 3632, column: 32, scope: !8963)
!8978 = !DILocalVariable(name: "partial", scope: !8963, file: !3, line: 3633, type: !32)
!8979 = !DILocation(line: 3633, column: 11, scope: !8963)
!8980 = !DILocation(line: 3633, column: 21, scope: !8963)
!8981 = !DILocation(line: 3633, column: 28, scope: !8963)
!8982 = !DILocation(line: 3633, column: 36, scope: !8963)
!8983 = !DILocalVariable(name: "parm_align", scope: !8963, file: !3, line: 3634, type: !13)
!8984 = !DILocation(line: 3634, column: 20, scope: !8963)
!8985 = !DILocation(line: 3634, column: 33, scope: !8963)
!8986 = !DILocation(line: 3634, column: 40, scope: !8963)
!8987 = !DILocation(line: 3634, column: 48, scope: !8963)
!8988 = !DILocation(line: 3634, column: 55, scope: !8963)
!8989 = !DILocalVariable(name: "lower_bound", scope: !8963, file: !3, line: 3635, type: !32)
!8990 = !DILocation(line: 3635, column: 11, scope: !8963)
!8991 = !DILocalVariable(name: "upper_bound", scope: !8963, file: !3, line: 3635, type: !32)
!8992 = !DILocation(line: 3635, column: 28, scope: !8963)
!8993 = !DILocalVariable(name: "i", scope: !8963, file: !3, line: 3635, type: !32)
!8994 = !DILocation(line: 3635, column: 45, scope: !8963)
!8995 = !DILocation(line: 3637, column: 14, scope: !8996)
!8996 = distinct !DILexicalBlock(scope: !8963, file: !3, line: 3637, column: 11)
!8997 = !DILocation(line: 3637, column: 18, scope: !8996)
!8998 = !DILocation(line: 3637, column: 23, scope: !8996)
!8999 = !DILocation(line: 3637, column: 26, scope: !8996)
!9000 = !DILocation(line: 3637, column: 34, scope: !8996)
!9001 = !DILocation(line: 3637, column: 11, scope: !8963)
!9002 = !DILocation(line: 3639, column: 8, scope: !9003)
!9003 = distinct !DILexicalBlock(scope: !9004, file: !3, line: 3639, column: 8)
!9004 = distinct !DILexicalBlock(scope: !8996, file: !3, line: 3638, column: 2)
!9005 = !DILocation(line: 3639, column: 8, scope: !9004)
!9006 = !DILocation(line: 3650, column: 22, scope: !9007)
!9007 = distinct !DILexicalBlock(scope: !9003, file: !3, line: 3640, column: 6)
!9008 = !DILocation(line: 3650, column: 29, scope: !9007)
!9009 = !DILocation(line: 3650, column: 37, scope: !9007)
!9010 = !DILocation(line: 3650, column: 44, scope: !9007)
!9011 = !DILocation(line: 3650, column: 56, scope: !9007)
!9012 = !DILocation(line: 3650, column: 20, scope: !9007)
!9013 = !DILocation(line: 3651, column: 22, scope: !9007)
!9014 = !DILocation(line: 3651, column: 36, scope: !9007)
!9015 = !DILocation(line: 3651, column: 43, scope: !9007)
!9016 = !DILocation(line: 3651, column: 51, scope: !9007)
!9017 = !DILocation(line: 3651, column: 58, scope: !9007)
!9018 = !DILocation(line: 3651, column: 63, scope: !9007)
!9019 = !DILocation(line: 3651, column: 34, scope: !9007)
!9020 = !DILocation(line: 3651, column: 20, scope: !9007)
!9021 = !DILocation(line: 3654, column: 12, scope: !9007)
!9022 = !DILocation(line: 3654, column: 10, scope: !9007)
!9023 = !DILocation(line: 3657, column: 12, scope: !9024)
!9024 = distinct !DILexicalBlock(scope: !9007, file: !3, line: 3657, column: 12)
!9025 = !DILocation(line: 3657, column: 16, scope: !9024)
!9026 = !DILocation(line: 3657, column: 14, scope: !9024)
!9027 = !DILocation(line: 3657, column: 12, scope: !9007)
!9028 = !DILocation(line: 3658, column: 7, scope: !9024)
!9029 = !DILocation(line: 3658, column: 5, scope: !9024)
!9030 = !DILocation(line: 3658, column: 3, scope: !9024)
!9031 = !DILocation(line: 3659, column: 8, scope: !9007)
!9032 = !DILocation(line: 3659, column: 15, scope: !9007)
!9033 = !DILocation(line: 3659, column: 19, scope: !9007)
!9034 = !DILocation(line: 3659, column: 17, scope: !9007)
!9035 = !DILocation(line: 3659, column: 31, scope: !9007)
!9036 = !DILocation(line: 3659, column: 34, scope: !9007)
!9037 = !DILocation(line: 3659, column: 50, scope: !9007)
!9038 = !DILocation(line: 3659, column: 53, scope: !9007)
!9039 = !DILocation(line: 0, scope: !9007)
!9040 = !DILocation(line: 3660, column: 4, scope: !9007)
!9041 = distinct !{!9041, !9031, !9040}
!9042 = !DILocation(line: 3662, column: 12, scope: !9043)
!9043 = distinct !DILexicalBlock(scope: !9007, file: !3, line: 3662, column: 12)
!9044 = !DILocation(line: 3662, column: 16, scope: !9043)
!9045 = !DILocation(line: 3662, column: 14, scope: !9043)
!9046 = !DILocation(line: 3662, column: 12, scope: !9007)
!9047 = !DILocalVariable(name: "size", scope: !9048, file: !3, line: 3665, type: !13)
!9048 = distinct !DILexicalBlock(scope: !9043, file: !3, line: 3663, column: 3)
!9049 = !DILocation(line: 3665, column: 18, scope: !9048)
!9050 = !DILocation(line: 3666, column: 9, scope: !9048)
!9051 = !DILocation(line: 3666, column: 16, scope: !9048)
!9052 = !DILocation(line: 3666, column: 24, scope: !9048)
!9053 = !DILocation(line: 3666, column: 31, scope: !9048)
!9054 = !DILocation(line: 3666, column: 36, scope: !9048)
!9055 = !DILocation(line: 3666, column: 45, scope: !9048)
!9056 = !DILocalVariable(name: "save_mode", scope: !9048, file: !3, line: 3667, type: !50)
!9057 = !DILocation(line: 3667, column: 23, scope: !9048)
!9058 = !DILocation(line: 3668, column: 24, scope: !9048)
!9059 = !DILocation(line: 3668, column: 9, scope: !9048)
!9060 = !DILocalVariable(name: "adr", scope: !9048, file: !3, line: 3669, type: !6)
!9061 = !DILocation(line: 3669, column: 9, scope: !9048)
!9062 = !DILocation(line: 3670, column: 24, scope: !9048)
!9063 = !DILocation(line: 3671, column: 10, scope: !9048)
!9064 = !DILocation(line: 3671, column: 17, scope: !9048)
!9065 = !DILocation(line: 3671, column: 25, scope: !9048)
!9066 = !DILocation(line: 3671, column: 32, scope: !9048)
!9067 = !DILocation(line: 3671, column: 39, scope: !9048)
!9068 = !DILocation(line: 3670, column: 9, scope: !9048)
!9069 = !DILocalVariable(name: "stack_area", scope: !9048, file: !3, line: 3672, type: !6)
!9070 = !DILocation(line: 3672, column: 9, scope: !9048)
!9071 = !DILocation(line: 3673, column: 22, scope: !9048)
!9072 = !DILocation(line: 3673, column: 33, scope: !9048)
!9073 = !DILocation(line: 3673, column: 9, scope: !9048)
!9074 = !DILocation(line: 3675, column: 9, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !9048, file: !3, line: 3675, column: 9)
!9076 = !DILocation(line: 3675, column: 19, scope: !9075)
!9077 = !DILocation(line: 3675, column: 9, scope: !9048)
!9078 = !DILocation(line: 3679, column: 11, scope: !9079)
!9079 = distinct !DILexicalBlock(scope: !9075, file: !3, line: 3676, column: 7)
!9080 = !DILocation(line: 3679, column: 18, scope: !9079)
!9081 = !DILocation(line: 3679, column: 26, scope: !9079)
!9082 = !DILocation(line: 3679, column: 33, scope: !9079)
!9083 = !DILocation(line: 3679, column: 38, scope: !9079)
!9084 = !DILocation(line: 3678, column: 6, scope: !9079)
!9085 = !DILocation(line: 3677, column: 9, scope: !9079)
!9086 = !DILocation(line: 3677, column: 16, scope: !9079)
!9087 = !DILocation(line: 3677, column: 24, scope: !9079)
!9088 = !DILocation(line: 3678, column: 4, scope: !9079)
!9089 = !DILocation(line: 3682, column: 40, scope: !9079)
!9090 = !DILocation(line: 3682, column: 47, scope: !9079)
!9091 = !DILocation(line: 3682, column: 55, scope: !9079)
!9092 = !DILocation(line: 3682, column: 26, scope: !9079)
!9093 = !DILocation(line: 3683, column: 12, scope: !9079)
!9094 = !DILocation(line: 3684, column: 12, scope: !9079)
!9095 = !DILocation(line: 3682, column: 9, scope: !9079)
!9096 = !DILocation(line: 3686, column: 7, scope: !9079)
!9097 = !DILocation(line: 3689, column: 49, scope: !9098)
!9098 = distinct !DILexicalBlock(scope: !9075, file: !3, line: 3688, column: 7)
!9099 = !DILocation(line: 3689, column: 36, scope: !9098)
!9100 = !DILocation(line: 3689, column: 9, scope: !9098)
!9101 = !DILocation(line: 3689, column: 16, scope: !9098)
!9102 = !DILocation(line: 3689, column: 24, scope: !9098)
!9103 = !DILocation(line: 3689, column: 34, scope: !9098)
!9104 = !DILocation(line: 3691, column: 25, scope: !9098)
!9105 = !DILocation(line: 3691, column: 32, scope: !9098)
!9106 = !DILocation(line: 3691, column: 40, scope: !9098)
!9107 = !DILocation(line: 3691, column: 51, scope: !9098)
!9108 = !DILocation(line: 3691, column: 9, scope: !9098)
!9109 = !DILocation(line: 3693, column: 3, scope: !9048)
!9110 = !DILocation(line: 3694, column: 6, scope: !9007)
!9111 = !DILocation(line: 3696, column: 20, scope: !9004)
!9112 = !DILocation(line: 3696, column: 25, scope: !9004)
!9113 = !DILocation(line: 3696, column: 52, scope: !9004)
!9114 = !DILocation(line: 3697, column: 6, scope: !9004)
!9115 = !DILocation(line: 3697, column: 15, scope: !9004)
!9116 = !DILocation(line: 3697, column: 23, scope: !9004)
!9117 = !DILocation(line: 3698, column: 6, scope: !9004)
!9118 = !DILocation(line: 3699, column: 6, scope: !9004)
!9119 = !DILocation(line: 3700, column: 6, scope: !9004)
!9120 = !DILocation(line: 3696, column: 4, scope: !9004)
!9121 = !DILocation(line: 3703, column: 8, scope: !9122)
!9122 = distinct !DILexicalBlock(scope: !9004, file: !3, line: 3703, column: 8)
!9123 = !DILocation(line: 3703, column: 8, scope: !9004)
!9124 = !DILocation(line: 3704, column: 15, scope: !9125)
!9125 = distinct !DILexicalBlock(scope: !9122, file: !3, line: 3704, column: 6)
!9126 = !DILocation(line: 3704, column: 13, scope: !9125)
!9127 = !DILocation(line: 3704, column: 11, scope: !9125)
!9128 = !DILocation(line: 3704, column: 28, scope: !9129)
!9129 = distinct !DILexicalBlock(scope: !9125, file: !3, line: 3704, column: 6)
!9130 = !DILocation(line: 3704, column: 32, scope: !9129)
!9131 = !DILocation(line: 3704, column: 30, scope: !9129)
!9132 = !DILocation(line: 3704, column: 6, scope: !9125)
!9133 = !DILocation(line: 3705, column: 8, scope: !9129)
!9134 = !DILocation(line: 3705, column: 24, scope: !9129)
!9135 = !DILocation(line: 3705, column: 27, scope: !9129)
!9136 = !DILocation(line: 3704, column: 46, scope: !9129)
!9137 = !DILocation(line: 3704, column: 6, scope: !9129)
!9138 = distinct !{!9138, !9132, !9139}
!9139 = !DILocation(line: 3705, column: 29, scope: !9125)
!9140 = !DILocation(line: 3707, column: 4, scope: !9004)
!9141 = !DILocation(line: 3709, column: 9, scope: !9142)
!9142 = distinct !DILexicalBlock(scope: !9004, file: !3, line: 3709, column: 8)
!9143 = !DILocation(line: 3709, column: 15, scope: !9142)
!9144 = !DILocation(line: 3710, column: 8, scope: !9142)
!9145 = !DILocation(line: 3710, column: 13, scope: !9142)
!9146 = !DILocation(line: 3710, column: 19, scope: !9142)
!9147 = !DILocation(line: 3710, column: 31, scope: !9142)
!9148 = !DILocation(line: 3710, column: 34, scope: !9142)
!9149 = !DILocation(line: 3709, column: 8, scope: !9004)
!9150 = !DILocalVariable(name: "use", scope: !9151, file: !3, line: 3712, type: !6)
!9151 = distinct !DILexicalBlock(scope: !9142, file: !3, line: 3711, column: 6)
!9152 = !DILocation(line: 3712, column: 12, scope: !9151)
!9153 = !DILocation(line: 3716, column: 12, scope: !9154)
!9154 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 3716, column: 12)
!9155 = !DILocation(line: 3716, column: 12, scope: !9151)
!9156 = !DILocation(line: 3717, column: 24, scope: !9154)
!9157 = !DILocation(line: 3718, column: 10, scope: !9154)
!9158 = !DILocation(line: 3718, column: 17, scope: !9154)
!9159 = !DILocation(line: 3718, column: 25, scope: !9154)
!9160 = !DILocation(line: 3718, column: 32, scope: !9154)
!9161 = !DILocation(line: 3718, column: 39, scope: !9154)
!9162 = !DILocation(line: 3717, column: 9, scope: !9154)
!9163 = !DILocation(line: 3717, column: 7, scope: !9154)
!9164 = !DILocation(line: 3717, column: 3, scope: !9154)
!9165 = !DILocation(line: 3725, column: 9, scope: !9154)
!9166 = !DILocation(line: 3725, column: 7, scope: !9154)
!9167 = !DILocation(line: 3727, column: 27, scope: !9151)
!9168 = !DILocation(line: 3727, column: 34, scope: !9151)
!9169 = !DILocation(line: 3727, column: 42, scope: !9151)
!9170 = !DILocation(line: 3727, column: 48, scope: !9151)
!9171 = !DILocation(line: 3727, column: 14, scope: !9151)
!9172 = !DILocation(line: 3727, column: 12, scope: !9151)
!9173 = !DILocation(line: 3728, column: 14, scope: !9151)
!9174 = !DILocation(line: 3728, column: 12, scope: !9151)
!9175 = !DILocation(line: 3729, column: 22, scope: !9151)
!9176 = !DILocation(line: 3729, column: 20, scope: !9151)
!9177 = !DILocation(line: 3730, column: 6, scope: !9151)
!9178 = !DILocation(line: 3731, column: 2, scope: !9004)
!9179 = !DILocation(line: 3732, column: 5, scope: !8963)
!9180 = !DILocation(line: 3628, column: 39, scope: !8958)
!9181 = !DILocation(line: 3628, column: 53, scope: !8958)
!9182 = !DILocation(line: 3628, column: 50, scope: !8958)
!9183 = !DILocation(line: 3628, column: 3, scope: !8958)
!9184 = distinct !{!9184, !8961, !9185}
!9185 = !DILocation(line: 3732, column: 5, scope: !8955)
!9186 = !DILocation(line: 3736, column: 7, scope: !9187)
!9187 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3736, column: 7)
!9188 = !DILocation(line: 3736, column: 16, scope: !9187)
!9189 = !DILocation(line: 3736, column: 21, scope: !9187)
!9190 = !DILocation(line: 3736, column: 7, scope: !3489)
!9191 = !DILocation(line: 3737, column: 24, scope: !9187)
!9192 = !DILocation(line: 3737, column: 5, scope: !9187)
!9193 = !DILocation(line: 3741, column: 14, scope: !9194)
!9194 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3740, column: 7)
!9195 = !DILocation(line: 3741, column: 20, scope: !9194)
!9196 = !DILocation(line: 3741, column: 12, scope: !9194)
!9197 = !DILocation(line: 3745, column: 37, scope: !3489)
!9198 = !DILocation(line: 3745, column: 9, scope: !3489)
!9199 = !DILocation(line: 3745, column: 7, scope: !3489)
!9200 = !DILocation(line: 3751, column: 14, scope: !9201)
!9201 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3751, column: 3)
!9202 = !DILocation(line: 3751, column: 8, scope: !9201)
!9203 = !DILocation(line: 3751, column: 19, scope: !9204)
!9204 = distinct !DILexicalBlock(scope: !9201, file: !3, line: 3751, column: 3)
!9205 = !DILocation(line: 3751, column: 27, scope: !9204)
!9206 = !DILocation(line: 3751, column: 25, scope: !9204)
!9207 = !DILocation(line: 3751, column: 3, scope: !9201)
!9208 = !DILocalVariable(name: "mode", scope: !9209, file: !3, line: 3753, type: !50)
!9209 = distinct !DILexicalBlock(scope: !9204, file: !3, line: 3752, column: 5)
!9210 = !DILocation(line: 3753, column: 25, scope: !9209)
!9211 = !DILocation(line: 3753, column: 32, scope: !9209)
!9212 = !DILocation(line: 3753, column: 39, scope: !9209)
!9213 = !DILocation(line: 3753, column: 47, scope: !9209)
!9214 = !DILocalVariable(name: "val", scope: !9209, file: !3, line: 3754, type: !6)
!9215 = !DILocation(line: 3754, column: 11, scope: !9209)
!9216 = !DILocation(line: 3754, column: 17, scope: !9209)
!9217 = !DILocation(line: 3754, column: 24, scope: !9209)
!9218 = !DILocation(line: 3754, column: 32, scope: !9209)
!9219 = !DILocalVariable(name: "reg", scope: !9209, file: !3, line: 3755, type: !6)
!9220 = !DILocation(line: 3755, column: 11, scope: !9209)
!9221 = !DILocation(line: 3755, column: 17, scope: !9209)
!9222 = !DILocation(line: 3755, column: 24, scope: !9209)
!9223 = !DILocation(line: 3755, column: 32, scope: !9209)
!9224 = !DILocalVariable(name: "partial", scope: !9209, file: !3, line: 3756, type: !32)
!9225 = !DILocation(line: 3756, column: 11, scope: !9209)
!9226 = !DILocation(line: 3756, column: 21, scope: !9209)
!9227 = !DILocation(line: 3756, column: 28, scope: !9209)
!9228 = !DILocation(line: 3756, column: 36, scope: !9209)
!9229 = !DILocation(line: 3760, column: 11, scope: !9230)
!9230 = distinct !DILexicalBlock(scope: !9209, file: !3, line: 3760, column: 11)
!9231 = !DILocation(line: 3760, column: 15, scope: !9230)
!9232 = !DILocation(line: 3760, column: 20, scope: !9230)
!9233 = !DILocation(line: 3760, column: 23, scope: !9230)
!9234 = !DILocation(line: 3760, column: 38, scope: !9230)
!9235 = !DILocation(line: 3760, column: 11, scope: !9209)
!9236 = !DILocation(line: 3761, column: 19, scope: !9230)
!9237 = !DILocation(line: 3761, column: 24, scope: !9230)
!9238 = !DILocation(line: 3761, column: 40, scope: !9230)
!9239 = !DILocation(line: 3761, column: 2, scope: !9230)
!9240 = !DILocation(line: 3762, column: 16, scope: !9241)
!9241 = distinct !DILexicalBlock(scope: !9230, file: !3, line: 3762, column: 16)
!9242 = !DILocation(line: 3762, column: 20, scope: !9241)
!9243 = !DILocation(line: 3762, column: 25, scope: !9241)
!9244 = !DILocation(line: 3762, column: 28, scope: !9241)
!9245 = !DILocation(line: 3762, column: 36, scope: !9241)
!9246 = !DILocation(line: 3762, column: 16, scope: !9230)
!9247 = !DILocation(line: 3763, column: 18, scope: !9241)
!9248 = !DILocation(line: 3763, column: 23, scope: !9241)
!9249 = !DILocation(line: 3763, column: 2, scope: !9241)
!9250 = !DILocation(line: 3765, column: 7, scope: !9209)
!9251 = !DILocation(line: 3766, column: 5, scope: !9209)
!9252 = !DILocation(line: 3751, column: 39, scope: !9204)
!9253 = !DILocation(line: 3751, column: 53, scope: !9204)
!9254 = !DILocation(line: 3751, column: 50, scope: !9204)
!9255 = !DILocation(line: 3751, column: 3, scope: !9204)
!9256 = distinct !{!9256, !9207, !9257}
!9257 = !DILocation(line: 3766, column: 5, scope: !9201)
!9258 = !DILocation(line: 3769, column: 14, scope: !9259)
!9259 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3769, column: 3)
!9260 = !DILocation(line: 3769, column: 8, scope: !9259)
!9261 = !DILocation(line: 3769, column: 19, scope: !9262)
!9262 = distinct !DILexicalBlock(scope: !9259, file: !3, line: 3769, column: 3)
!9263 = !DILocation(line: 3769, column: 27, scope: !9262)
!9264 = !DILocation(line: 3769, column: 25, scope: !9262)
!9265 = !DILocation(line: 3769, column: 3, scope: !9259)
!9266 = !DILocalVariable(name: "reg", scope: !9267, file: !3, line: 3771, type: !6)
!9267 = distinct !DILexicalBlock(scope: !9262, file: !3, line: 3770, column: 5)
!9268 = !DILocation(line: 3771, column: 11, scope: !9267)
!9269 = !DILocation(line: 3771, column: 17, scope: !9267)
!9270 = !DILocation(line: 3771, column: 24, scope: !9267)
!9271 = !DILocation(line: 3771, column: 31, scope: !9267)
!9272 = !DILocation(line: 3772, column: 11, scope: !9273)
!9273 = distinct !DILexicalBlock(scope: !9267, file: !3, line: 3772, column: 11)
!9274 = !DILocation(line: 3772, column: 15, scope: !9273)
!9275 = !DILocation(line: 3772, column: 20, scope: !9273)
!9276 = !DILocation(line: 3772, column: 23, scope: !9273)
!9277 = !DILocation(line: 3772, column: 38, scope: !9273)
!9278 = !DILocation(line: 3772, column: 11, scope: !9267)
!9279 = !DILocation(line: 3773, column: 32, scope: !9273)
!9280 = !DILocation(line: 3773, column: 2, scope: !9273)
!9281 = !DILocation(line: 3774, column: 16, scope: !9282)
!9282 = distinct !DILexicalBlock(scope: !9273, file: !3, line: 3774, column: 16)
!9283 = !DILocation(line: 3774, column: 20, scope: !9282)
!9284 = !DILocation(line: 3774, column: 16, scope: !9273)
!9285 = !DILocalVariable(name: "partial", scope: !9286, file: !3, line: 3776, type: !32)
!9286 = distinct !DILexicalBlock(scope: !9282, file: !3, line: 3775, column: 9)
!9287 = !DILocation(line: 3776, column: 8, scope: !9286)
!9288 = !DILocation(line: 3776, column: 18, scope: !9286)
!9289 = !DILocation(line: 3776, column: 25, scope: !9286)
!9290 = !DILocation(line: 3776, column: 32, scope: !9286)
!9291 = !DILocation(line: 3777, column: 8, scope: !9292)
!9292 = distinct !DILexicalBlock(scope: !9286, file: !3, line: 3777, column: 8)
!9293 = !DILocation(line: 3777, column: 8, scope: !9286)
!9294 = !DILocalVariable(name: "nregs", scope: !9295, file: !3, line: 3779, type: !32)
!9295 = distinct !DILexicalBlock(scope: !9292, file: !3, line: 3778, column: 6)
!9296 = !DILocation(line: 3779, column: 12, scope: !9295)
!9297 = !DILocation(line: 3780, column: 15, scope: !9295)
!9298 = !DILocation(line: 3781, column: 16, scope: !9295)
!9299 = !DILocation(line: 3781, column: 24, scope: !9295)
!9300 = !DILocation(line: 3781, column: 14, scope: !9295)
!9301 = !DILocation(line: 3782, column: 32, scope: !9295)
!9302 = !DILocation(line: 3782, column: 45, scope: !9295)
!9303 = !DILocation(line: 3782, column: 8, scope: !9295)
!9304 = !DILocation(line: 3783, column: 6, scope: !9295)
!9305 = !DILocation(line: 3785, column: 29, scope: !9292)
!9306 = !DILocation(line: 3785, column: 6, scope: !9292)
!9307 = !DILocation(line: 3786, column: 2, scope: !9286)
!9308 = !DILocation(line: 3787, column: 5, scope: !9267)
!9309 = !DILocation(line: 3769, column: 39, scope: !9262)
!9310 = !DILocation(line: 3769, column: 3, scope: !9262)
!9311 = distinct !{!9311, !9265, !9312}
!9312 = !DILocation(line: 3787, column: 5, scope: !9259)
!9313 = !DILocation(line: 3790, column: 7, scope: !9314)
!9314 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3790, column: 7)
!9315 = !DILocation(line: 3790, column: 17, scope: !9314)
!9316 = !DILocation(line: 3790, column: 22, scope: !9314)
!9317 = !DILocation(line: 3790, column: 25, scope: !9314)
!9318 = !DILocation(line: 3790, column: 38, scope: !9314)
!9319 = !DILocation(line: 3790, column: 43, scope: !9314)
!9320 = !DILocation(line: 3790, column: 48, scope: !9314)
!9321 = !DILocation(line: 3790, column: 7, scope: !3489)
!9322 = !DILocation(line: 3792, column: 23, scope: !9323)
!9323 = distinct !DILexicalBlock(scope: !9314, file: !3, line: 3791, column: 5)
!9324 = !DILocation(line: 3794, column: 21, scope: !9323)
!9325 = !DILocation(line: 3794, column: 6, scope: !9323)
!9326 = !DILocation(line: 3793, column: 9, scope: !9323)
!9327 = !DILocation(line: 3792, column: 7, scope: !9323)
!9328 = !DILocation(line: 3796, column: 11, scope: !9329)
!9329 = distinct !DILexicalBlock(scope: !9323, file: !3, line: 3796, column: 11)
!9330 = !DILocation(line: 3796, column: 11, scope: !9323)
!9331 = !DILocation(line: 3797, column: 25, scope: !9329)
!9332 = !DILocation(line: 3797, column: 2, scope: !9329)
!9333 = !DILocation(line: 3798, column: 5, scope: !9323)
!9334 = !DILocation(line: 3802, column: 3, scope: !3489)
!9335 = !DILocation(line: 3803, column: 13, scope: !3489)
!9336 = !DILocation(line: 3803, column: 23, scope: !3489)
!9337 = !DILocation(line: 3803, column: 28, scope: !3489)
!9338 = !DILocation(line: 3803, column: 31, scope: !3489)
!9339 = !DILocation(line: 3803, column: 39, scope: !3489)
!9340 = !DILocation(line: 3804, column: 28, scope: !3489)
!9341 = !DILocation(line: 3804, column: 37, scope: !3489)
!9342 = !DILocation(line: 3804, column: 8, scope: !3489)
!9343 = !DILocation(line: 3803, column: 10, scope: !3489)
!9344 = !DILocation(line: 3807, column: 3, scope: !3489)
!9345 = !DILocation(line: 3810, column: 17, scope: !3489)
!9346 = !DILocation(line: 3810, column: 15, scope: !3489)
!9347 = !DILocation(line: 3819, column: 16, scope: !3489)
!9348 = !DILocation(line: 3820, column: 25, scope: !3489)
!9349 = !DILocation(line: 3820, column: 9, scope: !3489)
!9350 = !DILocation(line: 3821, column: 30, scope: !3489)
!9351 = !DILocation(line: 3821, column: 9, scope: !3489)
!9352 = !DILocation(line: 3822, column: 28, scope: !3489)
!9353 = !DILocation(line: 3822, column: 48, scope: !3489)
!9354 = !DILocation(line: 3823, column: 9, scope: !3489)
!9355 = !DILocation(line: 3824, column: 9, scope: !3489)
!9356 = !DILocation(line: 3825, column: 9, scope: !3489)
!9357 = !DILocation(line: 3826, column: 9, scope: !3489)
!9358 = !DILocation(line: 3826, column: 31, scope: !3489)
!9359 = !DILocation(line: 3826, column: 36, scope: !3489)
!9360 = !DILocation(line: 3826, column: 49, scope: !3489)
!9361 = !DILocation(line: 3819, column: 3, scope: !3489)
!9362 = !DILocation(line: 3833, column: 7, scope: !9363)
!9363 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3833, column: 7)
!9364 = !DILocation(line: 3833, column: 13, scope: !9363)
!9365 = !DILocation(line: 3833, column: 7, scope: !3489)
!9366 = !DILocalVariable(name: "last", scope: !9367, file: !3, line: 3839, type: !6)
!9367 = distinct !DILexicalBlock(scope: !9363, file: !3, line: 3834, column: 5)
!9368 = !DILocation(line: 3839, column: 11, scope: !9367)
!9369 = !DILocation(line: 3839, column: 18, scope: !9367)
!9370 = !DILocation(line: 3840, column: 7, scope: !9367)
!9371 = !DILocation(line: 3840, column: 15, scope: !9367)
!9372 = !DILocation(line: 3840, column: 14, scope: !9367)
!9373 = !DILocation(line: 3842, column: 11, scope: !9374)
!9374 = distinct !DILexicalBlock(scope: !9367, file: !3, line: 3841, column: 2)
!9375 = !DILocation(line: 3842, column: 9, scope: !9374)
!9376 = !DILocation(line: 3844, column: 4, scope: !9374)
!9377 = distinct !{!9377, !9370, !9378}
!9378 = !DILocation(line: 3845, column: 2, scope: !9367)
!9379 = !DILocation(line: 3847, column: 27, scope: !9367)
!9380 = !DILocation(line: 3847, column: 7, scope: !9367)
!9381 = !DILocation(line: 3848, column: 5, scope: !9367)
!9382 = !DILocation(line: 3851, column: 3, scope: !3489)
!9383 = !DILocation(line: 3853, column: 3, scope: !3489)
!9384 = !DILocation(line: 3856, column: 7, scope: !9385)
!9385 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3856, column: 7)
!9386 = !DILocation(line: 3856, column: 15, scope: !9385)
!9387 = !DILocation(line: 3856, column: 27, scope: !9385)
!9388 = !DILocation(line: 3856, column: 30, scope: !9385)
!9389 = !DILocation(line: 3856, column: 7, scope: !3489)
!9390 = !DILocation(line: 3858, column: 11, scope: !9391)
!9391 = distinct !DILexicalBlock(scope: !9392, file: !3, line: 3858, column: 11)
!9392 = distinct !DILexicalBlock(scope: !9385, file: !3, line: 3857, column: 5)
!9393 = !DILocation(line: 3858, column: 11, scope: !9392)
!9394 = !DILocation(line: 3860, column: 8, scope: !9395)
!9395 = distinct !DILexicalBlock(scope: !9396, file: !3, line: 3860, column: 8)
!9396 = distinct !DILexicalBlock(scope: !9391, file: !3, line: 3859, column: 2)
!9397 = !DILocation(line: 3860, column: 14, scope: !9395)
!9398 = !DILocation(line: 3860, column: 8, scope: !9396)
!9399 = !DILocation(line: 3861, column: 14, scope: !9395)
!9400 = !DILocation(line: 3861, column: 12, scope: !9395)
!9401 = !DILocation(line: 3861, column: 6, scope: !9395)
!9402 = !DILocation(line: 3862, column: 8, scope: !9403)
!9403 = distinct !DILexicalBlock(scope: !9396, file: !3, line: 3862, column: 8)
!9404 = !DILocation(line: 3862, column: 17, scope: !9403)
!9405 = !DILocation(line: 3862, column: 14, scope: !9403)
!9406 = !DILocation(line: 3862, column: 8, scope: !9396)
!9407 = !DILocation(line: 3863, column: 22, scope: !9403)
!9408 = !DILocation(line: 3863, column: 29, scope: !9403)
!9409 = !DILocation(line: 3863, column: 6, scope: !9403)
!9410 = !DILocation(line: 3864, column: 2, scope: !9396)
!9411 = !DILocation(line: 3865, column: 16, scope: !9412)
!9412 = distinct !DILexicalBlock(scope: !9391, file: !3, line: 3865, column: 16)
!9413 = !DILocation(line: 3865, column: 34, scope: !9412)
!9414 = !DILocation(line: 3865, column: 16, scope: !9391)
!9415 = !DILocation(line: 3867, column: 8, scope: !9416)
!9416 = distinct !DILexicalBlock(scope: !9417, file: !3, line: 3867, column: 8)
!9417 = distinct !DILexicalBlock(scope: !9412, file: !3, line: 3866, column: 2)
!9418 = !DILocation(line: 3867, column: 14, scope: !9416)
!9419 = !DILocation(line: 3867, column: 8, scope: !9417)
!9420 = !DILocation(line: 3868, column: 27, scope: !9416)
!9421 = !DILocation(line: 3868, column: 14, scope: !9416)
!9422 = !DILocation(line: 3868, column: 12, scope: !9416)
!9423 = !DILocation(line: 3868, column: 6, scope: !9416)
!9424 = !DILocation(line: 3869, column: 22, scope: !9417)
!9425 = !DILocation(line: 3869, column: 29, scope: !9417)
!9426 = !DILocation(line: 3869, column: 48, scope: !9417)
!9427 = !DILocation(line: 3869, column: 4, scope: !9417)
!9428 = !DILocation(line: 3870, column: 2, scope: !9417)
!9429 = !DILocation(line: 3874, column: 8, scope: !9430)
!9430 = distinct !DILexicalBlock(scope: !9431, file: !3, line: 3874, column: 8)
!9431 = distinct !DILexicalBlock(scope: !9412, file: !3, line: 3872, column: 2)
!9432 = !DILocation(line: 3874, column: 29, scope: !9430)
!9433 = !DILocation(line: 3874, column: 26, scope: !9430)
!9434 = !DILocation(line: 3874, column: 8, scope: !9431)
!9435 = !DILocalVariable(name: "unsignedp", scope: !9436, file: !3, line: 3876, type: !32)
!9436 = distinct !DILexicalBlock(scope: !9430, file: !3, line: 3875, column: 6)
!9437 = !DILocation(line: 3876, column: 12, scope: !9436)
!9438 = !DILocation(line: 3876, column: 24, scope: !9436)
!9439 = !DILocation(line: 3878, column: 8, scope: !9436)
!9440 = !DILocation(line: 3881, column: 32, scope: !9436)
!9441 = !DILocation(line: 3881, column: 41, scope: !9436)
!9442 = !DILocation(line: 3881, column: 60, scope: !9436)
!9443 = !DILocation(line: 3881, column: 17, scope: !9436)
!9444 = !DILocation(line: 3881, column: 15, scope: !9436)
!9445 = !DILocation(line: 3882, column: 6, scope: !9436)
!9446 = !DILocation(line: 3884, column: 8, scope: !9447)
!9447 = distinct !DILexicalBlock(scope: !9431, file: !3, line: 3884, column: 8)
!9448 = !DILocation(line: 3884, column: 14, scope: !9447)
!9449 = !DILocation(line: 3884, column: 8, scope: !9431)
!9450 = !DILocation(line: 3885, column: 22, scope: !9447)
!9451 = !DILocation(line: 3885, column: 29, scope: !9447)
!9452 = !DILocation(line: 3885, column: 6, scope: !9447)
!9453 = !DILocation(line: 3887, column: 14, scope: !9447)
!9454 = !DILocation(line: 3887, column: 12, scope: !9447)
!9455 = !DILocation(line: 3889, column: 5, scope: !9392)
!9456 = !DILocation(line: 3891, column: 7, scope: !9457)
!9457 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3891, column: 7)
!9458 = !DILocation(line: 3891, column: 7, scope: !3489)
!9459 = !DILocation(line: 3894, column: 11, scope: !9460)
!9460 = distinct !DILexicalBlock(scope: !9461, file: !3, line: 3894, column: 11)
!9461 = distinct !DILexicalBlock(scope: !9457, file: !3, line: 3892, column: 5)
!9462 = !DILocation(line: 3894, column: 11, scope: !9461)
!9463 = !DILocation(line: 3895, column: 31, scope: !9460)
!9464 = !DILocation(line: 3895, column: 42, scope: !9460)
!9465 = !DILocation(line: 3896, column: 10, scope: !9460)
!9466 = !DILocation(line: 3896, column: 24, scope: !9460)
!9467 = !DILocation(line: 3895, column: 2, scope: !9460)
!9468 = !DILocation(line: 3900, column: 18, scope: !9469)
!9469 = distinct !DILexicalBlock(scope: !9461, file: !3, line: 3900, column: 7)
!9470 = !DILocation(line: 3900, column: 12, scope: !9469)
!9471 = !DILocation(line: 3900, column: 23, scope: !9472)
!9472 = distinct !DILexicalBlock(scope: !9469, file: !3, line: 3900, column: 7)
!9473 = !DILocation(line: 3900, column: 31, scope: !9472)
!9474 = !DILocation(line: 3900, column: 29, scope: !9472)
!9475 = !DILocation(line: 3900, column: 7, scope: !9469)
!9476 = !DILocation(line: 3901, column: 6, scope: !9477)
!9477 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 3901, column: 6)
!9478 = !DILocation(line: 3901, column: 13, scope: !9477)
!9479 = !DILocation(line: 3901, column: 20, scope: !9477)
!9480 = !DILocation(line: 3901, column: 6, scope: !9472)
!9481 = !DILocalVariable(name: "save_mode", scope: !9482, file: !3, line: 3903, type: !50)
!9482 = distinct !DILexicalBlock(scope: !9477, file: !3, line: 3902, column: 4)
!9483 = !DILocation(line: 3903, column: 24, scope: !9482)
!9484 = !DILocation(line: 3903, column: 36, scope: !9482)
!9485 = !DILocalVariable(name: "adr", scope: !9482, file: !3, line: 3904, type: !6)
!9486 = !DILocation(line: 3904, column: 10, scope: !9482)
!9487 = !DILocation(line: 3904, column: 31, scope: !9482)
!9488 = !DILocation(line: 3905, column: 10, scope: !9482)
!9489 = !DILocation(line: 3905, column: 17, scope: !9482)
!9490 = !DILocation(line: 3905, column: 24, scope: !9482)
!9491 = !DILocation(line: 3905, column: 31, scope: !9482)
!9492 = !DILocation(line: 3905, column: 38, scope: !9482)
!9493 = !DILocation(line: 3904, column: 16, scope: !9482)
!9494 = !DILocalVariable(name: "stack_area", scope: !9482, file: !3, line: 3906, type: !6)
!9495 = !DILocation(line: 3906, column: 10, scope: !9482)
!9496 = !DILocation(line: 3906, column: 36, scope: !9482)
!9497 = !DILocation(line: 3907, column: 8, scope: !9482)
!9498 = !DILocation(line: 3906, column: 23, scope: !9482)
!9499 = !DILocation(line: 3909, column: 10, scope: !9500)
!9500 = distinct !DILexicalBlock(scope: !9482, file: !3, line: 3909, column: 10)
!9501 = !DILocation(line: 3909, column: 20, scope: !9500)
!9502 = !DILocation(line: 3909, column: 10, scope: !9482)
!9503 = !DILocation(line: 3910, column: 25, scope: !9500)
!9504 = !DILocation(line: 3911, column: 25, scope: !9500)
!9505 = !DILocation(line: 3911, column: 32, scope: !9500)
!9506 = !DILocation(line: 3911, column: 39, scope: !9500)
!9507 = !DILocation(line: 3911, column: 11, scope: !9500)
!9508 = !DILocation(line: 3912, column: 11, scope: !9500)
!9509 = !DILocation(line: 3910, column: 8, scope: !9500)
!9510 = !DILocation(line: 3915, column: 24, scope: !9500)
!9511 = !DILocation(line: 3915, column: 36, scope: !9500)
!9512 = !DILocation(line: 3915, column: 43, scope: !9500)
!9513 = !DILocation(line: 3915, column: 50, scope: !9500)
!9514 = !DILocation(line: 3915, column: 8, scope: !9500)
!9515 = !DILocation(line: 3916, column: 4, scope: !9482)
!9516 = !DILocation(line: 3900, column: 43, scope: !9472)
!9517 = !DILocation(line: 3900, column: 7, scope: !9472)
!9518 = distinct !{!9518, !9475, !9519}
!9519 = !DILocation(line: 3916, column: 4, scope: !9469)
!9520 = !DILocation(line: 3918, column: 37, scope: !9461)
!9521 = !DILocation(line: 3918, column: 35, scope: !9461)
!9522 = !DILocation(line: 3919, column: 25, scope: !9461)
!9523 = !DILocation(line: 3919, column: 23, scope: !9461)
!9524 = !DILocation(line: 3920, column: 5, scope: !9461)
!9525 = !DILocation(line: 3922, column: 7, scope: !9526)
!9526 = distinct !DILexicalBlock(scope: !3489, file: !3, line: 3922, column: 7)
!9527 = !DILocation(line: 3922, column: 7, scope: !3489)
!9528 = !DILocation(line: 3923, column: 11, scope: !9526)
!9529 = !DILocation(line: 3923, column: 5, scope: !9526)
!9530 = !DILocation(line: 3925, column: 10, scope: !3489)
!9531 = !DILocation(line: 3925, column: 3, scope: !3489)
!9532 = distinct !DISubprogram(name: "emit_library_call_value", scope: !3, file: !3, line: 3959, type: !9533, scopeLine: 3962, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9533 = !DISubroutineType(types: !9534)
!9534 = !{!6, !6, !6, !3291, !50, !32, null}
!9535 = !DILocalVariable(name: "orgfun", arg: 1, scope: !9532, file: !3, line: 3959, type: !6)
!9536 = !DILocation(line: 3959, column: 30, scope: !9532)
!9537 = !DILocalVariable(name: "value", arg: 2, scope: !9532, file: !3, line: 3959, type: !6)
!9538 = !DILocation(line: 3959, column: 42, scope: !9532)
!9539 = !DILocalVariable(name: "fn_type", arg: 3, scope: !9532, file: !3, line: 3960, type: !3291)
!9540 = !DILocation(line: 3960, column: 23, scope: !9532)
!9541 = !DILocalVariable(name: "outmode", arg: 4, scope: !9532, file: !3, line: 3961, type: !50)
!9542 = !DILocation(line: 3961, column: 23, scope: !9532)
!9543 = !DILocalVariable(name: "nargs", arg: 5, scope: !9532, file: !3, line: 3961, type: !32)
!9544 = !DILocation(line: 3961, column: 36, scope: !9532)
!9545 = !DILocalVariable(name: "result", scope: !9532, file: !3, line: 3963, type: !6)
!9546 = !DILocation(line: 3963, column: 7, scope: !9532)
!9547 = !DILocalVariable(name: "p", scope: !9532, file: !3, line: 3964, type: !8453)
!9548 = !DILocation(line: 3964, column: 11, scope: !9532)
!9549 = !DILocation(line: 3966, column: 3, scope: !9532)
!9550 = !DILocation(line: 3967, column: 42, scope: !9532)
!9551 = !DILocation(line: 3967, column: 50, scope: !9532)
!9552 = !DILocation(line: 3967, column: 57, scope: !9532)
!9553 = !DILocation(line: 3967, column: 66, scope: !9532)
!9554 = !DILocation(line: 3968, column: 11, scope: !9532)
!9555 = !DILocation(line: 3968, column: 18, scope: !9532)
!9556 = !DILocation(line: 3967, column: 12, scope: !9532)
!9557 = !DILocation(line: 3967, column: 10, scope: !9532)
!9558 = !DILocation(line: 3969, column: 3, scope: !9532)
!9559 = !DILocation(line: 3971, column: 10, scope: !9532)
!9560 = !DILocation(line: 3971, column: 3, scope: !9532)
!9561 = distinct !DISubprogram(name: "must_pass_in_stack_var_size", scope: !3, file: !3, line: 4347, type: !9562, scopeLine: 4349, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9562 = !DISubroutineType(types: !9563)
!9563 = !{!372, !50, !3591}
!9564 = !DILocalVariable(name: "mode", arg: 1, scope: !9561, file: !3, line: 4347, type: !50)
!9565 = !DILocation(line: 4347, column: 48, scope: !9561)
!9566 = !DILocalVariable(name: "type", arg: 2, scope: !9561, file: !3, line: 4348, type: !3591)
!9567 = !DILocation(line: 4348, column: 20, scope: !9561)
!9568 = !DILocation(line: 4350, column: 8, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !9561, file: !3, line: 4350, column: 7)
!9570 = !DILocation(line: 4350, column: 7, scope: !9561)
!9571 = !DILocation(line: 4351, column: 5, scope: !9569)
!9572 = !DILocation(line: 4354, column: 7, scope: !9573)
!9573 = distinct !DILexicalBlock(scope: !9561, file: !3, line: 4354, column: 7)
!9574 = !DILocation(line: 4354, column: 36, scope: !9573)
!9575 = !DILocation(line: 4354, column: 7, scope: !9561)
!9576 = !DILocation(line: 4355, column: 5, scope: !9573)
!9577 = !DILocation(line: 4359, column: 7, scope: !9578)
!9578 = distinct !DILexicalBlock(scope: !9561, file: !3, line: 4359, column: 7)
!9579 = !DILocation(line: 4359, column: 7, scope: !9561)
!9580 = !DILocation(line: 4360, column: 5, scope: !9578)
!9581 = !DILocation(line: 4362, column: 3, scope: !9561)
!9582 = !DILocation(line: 4363, column: 1, scope: !9561)
!9583 = distinct !DISubprogram(name: "must_pass_in_stack_var_size_or_pad", scope: !3, file: !3, line: 4370, type: !9562, scopeLine: 4371, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9584 = !DILocalVariable(name: "mode", arg: 1, scope: !9583, file: !3, line: 4370, type: !50)
!9585 = !DILocation(line: 4370, column: 55, scope: !9583)
!9586 = !DILocalVariable(name: "type", arg: 2, scope: !9583, file: !3, line: 4370, type: !3591)
!9587 = !DILocation(line: 4370, column: 72, scope: !9583)
!9588 = !DILocation(line: 4372, column: 8, scope: !9589)
!9589 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 4372, column: 7)
!9590 = !DILocation(line: 4372, column: 7, scope: !9583)
!9591 = !DILocation(line: 4373, column: 5, scope: !9589)
!9592 = !DILocation(line: 4376, column: 7, scope: !9593)
!9593 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 4376, column: 7)
!9594 = !DILocation(line: 4376, column: 36, scope: !9593)
!9595 = !DILocation(line: 4376, column: 7, scope: !9583)
!9596 = !DILocation(line: 4377, column: 5, scope: !9593)
!9597 = !DILocation(line: 4381, column: 7, scope: !9598)
!9598 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 4381, column: 7)
!9599 = !DILocation(line: 4381, column: 7, scope: !9583)
!9600 = !DILocation(line: 4382, column: 5, scope: !9598)
!9601 = !DILocation(line: 4386, column: 7, scope: !9602)
!9602 = distinct !DILexicalBlock(scope: !9583, file: !3, line: 4386, column: 7)
!9603 = !DILocation(line: 4386, column: 12, scope: !9602)
!9604 = !DILocation(line: 4387, column: 7, scope: !9602)
!9605 = !DILocation(line: 4387, column: 29, scope: !9602)
!9606 = !DILocation(line: 4387, column: 10, scope: !9602)
!9607 = !DILocation(line: 4387, column: 35, scope: !9602)
!9608 = !DILocation(line: 4388, column: 7, scope: !9602)
!9609 = !DILocation(line: 4386, column: 7, scope: !9583)
!9610 = !DILocation(line: 4390, column: 5, scope: !9602)
!9611 = !DILocation(line: 4392, column: 3, scope: !9583)
!9612 = !DILocation(line: 4393, column: 1, scope: !9583)
!9613 = distinct !DISubprogram(name: "gimple_code", scope: !725, file: !725, line: 1052, type: !9614, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9614 = !DISubroutineType(types: !9615)
!9615 = !{!3299, !3773}
!9616 = !DILocalVariable(name: "g", arg: 1, scope: !9613, file: !725, line: 1052, type: !3773)
!9617 = !DILocation(line: 1052, column: 27, scope: !9613)
!9618 = !DILocation(line: 1054, column: 10, scope: !9613)
!9619 = !DILocation(line: 1054, column: 13, scope: !9613)
!9620 = !DILocation(line: 1054, column: 20, scope: !9613)
!9621 = !DILocation(line: 1054, column: 3, scope: !9613)
!9622 = distinct !DISubprogram(name: "gimple_call_fn", scope: !725, file: !725, line: 1911, type: !3804, scopeLine: 1912, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9623 = !DILocalVariable(name: "gs", arg: 1, scope: !9622, file: !725, line: 1911, type: !3773)
!9624 = !DILocation(line: 1911, column: 30, scope: !9622)
!9625 = !DILocation(line: 1914, column: 21, scope: !9622)
!9626 = !DILocation(line: 1914, column: 10, scope: !9622)
!9627 = !DILocation(line: 1914, column: 3, scope: !9622)
!9628 = distinct !DISubprogram(name: "gimple_op", scope: !725, file: !725, line: 1631, type: !9629, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9629 = !DISubroutineType(types: !9630)
!9630 = !{!258, !3773, !13}
!9631 = !DILocalVariable(name: "gs", arg: 1, scope: !9628, file: !725, line: 1631, type: !3773)
!9632 = !DILocation(line: 1631, column: 25, scope: !9628)
!9633 = !DILocalVariable(name: "i", arg: 2, scope: !9628, file: !725, line: 1631, type: !13)
!9634 = !DILocation(line: 1631, column: 38, scope: !9628)
!9635 = !DILocation(line: 1633, column: 23, scope: !9636)
!9636 = distinct !DILexicalBlock(scope: !9628, file: !725, line: 1633, column: 7)
!9637 = !DILocation(line: 1633, column: 7, scope: !9636)
!9638 = !DILocation(line: 1633, column: 7, scope: !9628)
!9639 = !DILocation(line: 1638, column: 26, scope: !9640)
!9640 = distinct !DILexicalBlock(scope: !9636, file: !725, line: 1634, column: 5)
!9641 = !DILocation(line: 1638, column: 14, scope: !9640)
!9642 = !DILocation(line: 1638, column: 50, scope: !9640)
!9643 = !DILocation(line: 1638, column: 7, scope: !9640)
!9644 = !DILocation(line: 1641, column: 5, scope: !9636)
!9645 = !DILocation(line: 1642, column: 1, scope: !9628)
!9646 = distinct !DISubprogram(name: "gimple_has_ops", scope: !725, file: !725, line: 1274, type: !3771, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9647 = !DILocalVariable(name: "g", arg: 1, scope: !9646, file: !725, line: 1274, type: !3773)
!9648 = !DILocation(line: 1274, column: 30, scope: !9646)
!9649 = !DILocation(line: 1276, column: 23, scope: !9646)
!9650 = !DILocation(line: 1276, column: 10, scope: !9646)
!9651 = !DILocation(line: 1276, column: 26, scope: !9646)
!9652 = !DILocation(line: 1276, column: 41, scope: !9646)
!9653 = !DILocation(line: 1276, column: 57, scope: !9646)
!9654 = !DILocation(line: 1276, column: 44, scope: !9646)
!9655 = !DILocation(line: 1276, column: 60, scope: !9646)
!9656 = !DILocation(line: 0, scope: !9646)
!9657 = !DILocation(line: 1276, column: 3, scope: !9646)
!9658 = distinct !DISubprogram(name: "gimple_ops", scope: !725, file: !725, line: 1614, type: !9659, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9659 = !DISubroutineType(types: !9660)
!9660 = !{!768, !733}
!9661 = !DILocalVariable(name: "gs", arg: 1, scope: !9658, file: !725, line: 1614, type: !733)
!9662 = !DILocation(line: 1614, column: 20, scope: !9658)
!9663 = !DILocalVariable(name: "off", scope: !9658, file: !725, line: 1616, type: !632)
!9664 = !DILocation(line: 1616, column: 10, scope: !9658)
!9665 = !DILocation(line: 1621, column: 56, scope: !9658)
!9666 = !DILocation(line: 1621, column: 28, scope: !9658)
!9667 = !DILocation(line: 1621, column: 9, scope: !9658)
!9668 = !DILocation(line: 1621, column: 7, scope: !9658)
!9669 = !DILocation(line: 1622, column: 3, scope: !9658)
!9670 = !DILocation(line: 1624, column: 29, scope: !9658)
!9671 = !DILocation(line: 1624, column: 20, scope: !9658)
!9672 = !DILocation(line: 1624, column: 34, scope: !9658)
!9673 = !DILocation(line: 1624, column: 32, scope: !9658)
!9674 = !DILocation(line: 1624, column: 10, scope: !9658)
!9675 = !DILocation(line: 1624, column: 3, scope: !9658)
!9676 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !725, file: !725, line: 1073, type: !9677, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9677 = !DISubroutineType(types: !9678)
!9678 = !{!3337, !733}
!9679 = !DILocalVariable(name: "gs", arg: 1, scope: !9676, file: !725, line: 1073, type: !733)
!9680 = !DILocation(line: 1073, column: 36, scope: !9676)
!9681 = !DILocation(line: 1075, column: 37, scope: !9676)
!9682 = !DILocation(line: 1075, column: 24, scope: !9676)
!9683 = !DILocation(line: 1075, column: 10, scope: !9676)
!9684 = !DILocation(line: 1075, column: 3, scope: !9676)
!9685 = distinct !DISubprogram(name: "gss_for_code", scope: !725, file: !725, line: 1061, type: !9686, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9686 = !DISubroutineType(types: !9687)
!9687 = !{!3337, !3299}
!9688 = !DILocalVariable(name: "code", arg: 1, scope: !9685, file: !725, line: 1061, type: !3299)
!9689 = !DILocation(line: 1061, column: 32, scope: !9685)
!9690 = !DILocation(line: 1066, column: 24, scope: !9685)
!9691 = !DILocation(line: 1066, column: 10, scope: !9685)
!9692 = !DILocation(line: 1066, column: 3, scope: !9685)
!9693 = distinct !DISubprogram(name: "init_call_expr_arg_iterator", scope: !261, file: !261, line: 5375, type: !9694, scopeLine: 5376, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9694 = !DISubroutineType(types: !9695)
!9695 = !{null, !258, !5699}
!9696 = !DILocalVariable(name: "exp", arg: 1, scope: !9693, file: !261, line: 5375, type: !258)
!9697 = !DILocation(line: 5375, column: 35, scope: !9693)
!9698 = !DILocalVariable(name: "iter", arg: 2, scope: !9693, file: !261, line: 5375, type: !5699)
!9699 = !DILocation(line: 5375, column: 64, scope: !9693)
!9700 = !DILocation(line: 5377, column: 13, scope: !9693)
!9701 = !DILocation(line: 5377, column: 3, scope: !9693)
!9702 = !DILocation(line: 5377, column: 9, scope: !9693)
!9703 = !DILocation(line: 5377, column: 11, scope: !9693)
!9704 = !DILocation(line: 5378, column: 13, scope: !9693)
!9705 = !DILocation(line: 5378, column: 3, scope: !9693)
!9706 = !DILocation(line: 5378, column: 9, scope: !9693)
!9707 = !DILocation(line: 5378, column: 11, scope: !9693)
!9708 = !DILocation(line: 5379, column: 3, scope: !9693)
!9709 = !DILocation(line: 5379, column: 9, scope: !9693)
!9710 = !DILocation(line: 5379, column: 11, scope: !9693)
!9711 = !DILocation(line: 5380, column: 1, scope: !9693)
!9712 = distinct !DISubprogram(name: "check_sibcall_argument_overlap_1", scope: !3, file: !3, line: 1784, type: !9713, scopeLine: 1785, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9713 = !DISubroutineType(types: !9714)
!9714 = !{!32, !6}
!9715 = !DILocalVariable(name: "x", arg: 1, scope: !9712, file: !3, line: 1784, type: !6)
!9716 = !DILocation(line: 1784, column: 39, scope: !9712)
!9717 = !DILocalVariable(name: "code", scope: !9712, file: !3, line: 1786, type: !1820)
!9718 = !DILocation(line: 1786, column: 12, scope: !9712)
!9719 = !DILocalVariable(name: "i", scope: !9712, file: !3, line: 1787, type: !32)
!9720 = !DILocation(line: 1787, column: 7, scope: !9712)
!9721 = !DILocalVariable(name: "j", scope: !9712, file: !3, line: 1787, type: !32)
!9722 = !DILocation(line: 1787, column: 10, scope: !9712)
!9723 = !DILocalVariable(name: "fmt", scope: !9712, file: !3, line: 1788, type: !35)
!9724 = !DILocation(line: 1788, column: 15, scope: !9712)
!9725 = !DILocation(line: 1790, column: 7, scope: !9726)
!9726 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 1790, column: 7)
!9727 = !DILocation(line: 1790, column: 9, scope: !9726)
!9728 = !DILocation(line: 1790, column: 7, scope: !9712)
!9729 = !DILocation(line: 1791, column: 5, scope: !9726)
!9730 = !DILocation(line: 1793, column: 10, scope: !9712)
!9731 = !DILocation(line: 1793, column: 8, scope: !9712)
!9732 = !DILocation(line: 1795, column: 7, scope: !9733)
!9733 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 1795, column: 7)
!9734 = !DILocation(line: 1795, column: 12, scope: !9733)
!9735 = !DILocation(line: 1795, column: 7, scope: !9712)
!9736 = !DILocation(line: 1796, column: 50, scope: !9733)
!9737 = !DILocation(line: 1797, column: 8, scope: !9733)
!9738 = !DILocation(line: 1796, column: 12, scope: !9733)
!9739 = !DILocation(line: 1796, column: 5, scope: !9733)
!9740 = !DILocation(line: 1800, column: 9, scope: !9712)
!9741 = !DILocation(line: 1800, column: 7, scope: !9712)
!9742 = !DILocation(line: 1801, column: 10, scope: !9743)
!9743 = distinct !DILexicalBlock(scope: !9712, file: !3, line: 1801, column: 3)
!9744 = !DILocation(line: 1801, column: 8, scope: !9743)
!9745 = !DILocation(line: 1801, column: 15, scope: !9746)
!9746 = distinct !DILexicalBlock(scope: !9743, file: !3, line: 1801, column: 3)
!9747 = !DILocation(line: 1801, column: 19, scope: !9746)
!9748 = !DILocation(line: 1801, column: 17, scope: !9746)
!9749 = !DILocation(line: 1801, column: 3, scope: !9743)
!9750 = !DILocation(line: 1803, column: 12, scope: !9751)
!9751 = distinct !DILexicalBlock(scope: !9752, file: !3, line: 1803, column: 11)
!9752 = distinct !DILexicalBlock(scope: !9746, file: !3, line: 1802, column: 5)
!9753 = !DILocation(line: 1803, column: 11, scope: !9751)
!9754 = !DILocation(line: 1803, column: 16, scope: !9751)
!9755 = !DILocation(line: 1803, column: 11, scope: !9752)
!9756 = !DILocation(line: 1805, column: 42, scope: !9757)
!9757 = distinct !DILexicalBlock(scope: !9758, file: !3, line: 1805, column: 8)
!9758 = distinct !DILexicalBlock(scope: !9751, file: !3, line: 1804, column: 2)
!9759 = !DILocation(line: 1805, column: 8, scope: !9757)
!9760 = !DILocation(line: 1805, column: 8, scope: !9758)
!9761 = !DILocation(line: 1806, column: 6, scope: !9757)
!9762 = !DILocation(line: 1807, column: 2, scope: !9758)
!9763 = !DILocation(line: 1808, column: 17, scope: !9764)
!9764 = distinct !DILexicalBlock(scope: !9751, file: !3, line: 1808, column: 16)
!9765 = !DILocation(line: 1808, column: 16, scope: !9764)
!9766 = !DILocation(line: 1808, column: 21, scope: !9764)
!9767 = !DILocation(line: 1808, column: 16, scope: !9751)
!9768 = !DILocation(line: 1810, column: 11, scope: !9769)
!9769 = distinct !DILexicalBlock(scope: !9770, file: !3, line: 1810, column: 4)
!9770 = distinct !DILexicalBlock(scope: !9764, file: !3, line: 1809, column: 2)
!9771 = !DILocation(line: 1810, column: 9, scope: !9769)
!9772 = !DILocation(line: 1810, column: 16, scope: !9773)
!9773 = distinct !DILexicalBlock(scope: !9769, file: !3, line: 1810, column: 4)
!9774 = !DILocation(line: 1810, column: 20, scope: !9773)
!9775 = !DILocation(line: 1810, column: 18, scope: !9773)
!9776 = !DILocation(line: 1810, column: 4, scope: !9769)
!9777 = !DILocation(line: 1811, column: 44, scope: !9778)
!9778 = distinct !DILexicalBlock(scope: !9773, file: !3, line: 1811, column: 10)
!9779 = !DILocation(line: 1811, column: 10, scope: !9778)
!9780 = !DILocation(line: 1811, column: 10, scope: !9773)
!9781 = !DILocation(line: 1812, column: 8, scope: !9778)
!9782 = !DILocation(line: 1811, column: 61, scope: !9778)
!9783 = !DILocation(line: 1810, column: 37, scope: !9773)
!9784 = !DILocation(line: 1810, column: 4, scope: !9773)
!9785 = distinct !{!9785, !9776, !9786}
!9786 = !DILocation(line: 1812, column: 15, scope: !9769)
!9787 = !DILocation(line: 1813, column: 2, scope: !9770)
!9788 = !DILocation(line: 1814, column: 5, scope: !9752)
!9789 = !DILocation(line: 1801, column: 43, scope: !9746)
!9790 = !DILocation(line: 1801, column: 50, scope: !9746)
!9791 = !DILocation(line: 1801, column: 3, scope: !9746)
!9792 = distinct !{!9792, !9749, !9793}
!9793 = !DILocation(line: 1814, column: 5, scope: !9743)
!9794 = !DILocation(line: 1815, column: 3, scope: !9712)
!9795 = !DILocation(line: 1816, column: 1, scope: !9712)
!9796 = distinct !DISubprogram(name: "SET_BIT", scope: !3515, file: !3515, line: 63, type: !9797, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9797 = !DISubroutineType(types: !9798)
!9798 = !{null, !3514, !13}
!9799 = !DILocalVariable(name: "map", arg: 1, scope: !9796, file: !3515, line: 63, type: !3514)
!9800 = !DILocation(line: 63, column: 18, scope: !9796)
!9801 = !DILocalVariable(name: "bitno", arg: 2, scope: !9796, file: !3515, line: 63, type: !13)
!9802 = !DILocation(line: 63, column: 36, scope: !9796)
!9803 = !DILocation(line: 65, column: 7, scope: !9804)
!9804 = distinct !DILexicalBlock(scope: !9796, file: !3515, line: 65, column: 7)
!9805 = !DILocation(line: 65, column: 12, scope: !9804)
!9806 = !DILocation(line: 65, column: 7, scope: !9796)
!9807 = !DILocalVariable(name: "oldbit", scope: !9808, file: !3515, line: 67, type: !372)
!9808 = distinct !DILexicalBlock(scope: !9804, file: !3515, line: 66, column: 5)
!9809 = !DILocation(line: 67, column: 12, scope: !9808)
!9810 = !DILocation(line: 68, column: 16, scope: !9808)
!9811 = !DILocation(line: 68, column: 14, scope: !9808)
!9812 = !DILocation(line: 69, column: 12, scope: !9813)
!9813 = distinct !DILexicalBlock(scope: !9808, file: !3515, line: 69, column: 11)
!9814 = !DILocation(line: 69, column: 11, scope: !9808)
!9815 = !DILocation(line: 70, column: 2, scope: !9813)
!9816 = !DILocation(line: 70, column: 7, scope: !9813)
!9817 = !DILocation(line: 70, column: 16, scope: !9813)
!9818 = !DILocation(line: 70, column: 22, scope: !9813)
!9819 = !DILocation(line: 70, column: 41, scope: !9813)
!9820 = !DILocation(line: 71, column: 5, scope: !9808)
!9821 = !DILocation(line: 73, column: 33, scope: !9796)
!9822 = !DILocation(line: 73, column: 40, scope: !9796)
!9823 = !DILocation(line: 73, column: 29, scope: !9796)
!9824 = !DILocation(line: 72, column: 3, scope: !9796)
!9825 = !DILocation(line: 72, column: 8, scope: !9796)
!9826 = !DILocation(line: 72, column: 13, scope: !9796)
!9827 = !DILocation(line: 72, column: 19, scope: !9796)
!9828 = !DILocation(line: 73, column: 5, scope: !9796)
!9829 = !DILocation(line: 74, column: 1, scope: !9796)
!9830 = distinct !DISubprogram(name: "mem_overlaps_already_clobbered_arg_p", scope: !3, file: !3, line: 1538, type: !9831, scopeLine: 1539, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !1818, retainedNodes: !3499)
!9831 = !DISubroutineType(types: !9832)
!9832 = !{!372, !6, !210}
!9833 = !DILocalVariable(name: "addr", arg: 1, scope: !9830, file: !3, line: 1538, type: !6)
!9834 = !DILocation(line: 1538, column: 43, scope: !9830)
!9835 = !DILocalVariable(name: "size", arg: 2, scope: !9830, file: !3, line: 1538, type: !210)
!9836 = !DILocation(line: 1538, column: 72, scope: !9830)
!9837 = !DILocalVariable(name: "i", scope: !9830, file: !3, line: 1540, type: !227)
!9838 = !DILocation(line: 1540, column: 17, scope: !9830)
!9839 = !DILocation(line: 1542, column: 7, scope: !9840)
!9840 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 1542, column: 7)
!9841 = !DILocation(line: 1542, column: 26, scope: !9840)
!9842 = !DILocation(line: 1542, column: 12, scope: !9840)
!9843 = !DILocation(line: 1542, column: 7, scope: !9830)
!9844 = !DILocation(line: 1543, column: 7, scope: !9840)
!9845 = !DILocation(line: 1543, column: 5, scope: !9840)
!9846 = !DILocation(line: 1544, column: 12, scope: !9847)
!9847 = distinct !DILexicalBlock(scope: !9840, file: !3, line: 1544, column: 12)
!9848 = !DILocation(line: 1544, column: 28, scope: !9847)
!9849 = !DILocation(line: 1545, column: 5, scope: !9847)
!9850 = !DILocation(line: 1545, column: 8, scope: !9847)
!9851 = !DILocation(line: 1545, column: 37, scope: !9847)
!9852 = !DILocation(line: 1545, column: 23, scope: !9847)
!9853 = !DILocation(line: 1546, column: 5, scope: !9847)
!9854 = !DILocation(line: 1546, column: 8, scope: !9847)
!9855 = !DILocation(line: 1544, column: 12, scope: !9840)
!9856 = !DILocation(line: 1547, column: 9, scope: !9847)
!9857 = !DILocation(line: 1547, column: 7, scope: !9847)
!9858 = !DILocation(line: 1547, column: 5, scope: !9847)
!9859 = !DILocation(line: 1549, column: 12, scope: !9860)
!9860 = distinct !DILexicalBlock(scope: !9847, file: !3, line: 1549, column: 12)
!9861 = !DILocation(line: 1549, column: 28, scope: !9860)
!9862 = !DILocation(line: 1550, column: 5, scope: !9860)
!9863 = !DILocation(line: 1550, column: 9, scope: !9860)
!9864 = !DILocation(line: 1550, column: 38, scope: !9860)
!9865 = !DILocation(line: 1550, column: 24, scope: !9860)
!9866 = !DILocation(line: 1551, column: 9, scope: !9860)
!9867 = !DILocation(line: 1551, column: 12, scope: !9860)
!9868 = !DILocation(line: 1551, column: 41, scope: !9860)
!9869 = !DILocation(line: 1551, column: 27, scope: !9860)
!9870 = !DILocation(line: 1549, column: 12, scope: !9847)
!9871 = !DILocation(line: 1552, column: 5, scope: !9860)
!9872 = !DILocation(line: 1554, column: 5, scope: !9860)
!9873 = !DILocation(line: 1559, column: 7, scope: !9874)
!9874 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 1559, column: 7)
!9875 = !DILocation(line: 1559, column: 12, scope: !9874)
!9876 = !DILocation(line: 1559, column: 7, scope: !9830)
!9877 = !DILocalVariable(name: "k", scope: !9878, file: !3, line: 1561, type: !210)
!9878 = distinct !DILexicalBlock(scope: !9874, file: !3, line: 1560, column: 5)
!9879 = !DILocation(line: 1561, column: 30, scope: !9878)
!9880 = !DILocation(line: 1563, column: 14, scope: !9881)
!9881 = distinct !DILexicalBlock(scope: !9878, file: !3, line: 1563, column: 7)
!9882 = !DILocation(line: 1563, column: 12, scope: !9881)
!9883 = !DILocation(line: 1563, column: 19, scope: !9884)
!9884 = distinct !DILexicalBlock(scope: !9881, file: !3, line: 1563, column: 7)
!9885 = !DILocation(line: 1563, column: 23, scope: !9884)
!9886 = !DILocation(line: 1563, column: 21, scope: !9884)
!9887 = !DILocation(line: 1563, column: 7, scope: !9881)
!9888 = !DILocation(line: 1564, column: 6, scope: !9889)
!9889 = distinct !DILexicalBlock(scope: !9884, file: !3, line: 1564, column: 6)
!9890 = !DILocation(line: 1564, column: 10, scope: !9889)
!9891 = !DILocation(line: 1564, column: 8, scope: !9889)
!9892 = !DILocation(line: 1564, column: 14, scope: !9889)
!9893 = !DILocation(line: 1564, column: 31, scope: !9889)
!9894 = !DILocation(line: 1564, column: 12, scope: !9889)
!9895 = !DILocation(line: 1565, column: 6, scope: !9889)
!9896 = !DILocation(line: 1565, column: 9, scope: !9889)
!9897 = !DILocation(line: 1564, column: 6, scope: !9884)
!9898 = !DILocation(line: 1566, column: 4, scope: !9889)
!9899 = !DILocation(line: 1563, column: 30, scope: !9884)
!9900 = !DILocation(line: 1563, column: 7, scope: !9884)
!9901 = distinct !{!9901, !9887, !9902}
!9902 = !DILocation(line: 1566, column: 11, scope: !9881)
!9903 = !DILocation(line: 1567, column: 5, scope: !9878)
!9904 = !DILocation(line: 1569, column: 3, scope: !9830)
!9905 = !DILocation(line: 1570, column: 1, scope: !9830)
