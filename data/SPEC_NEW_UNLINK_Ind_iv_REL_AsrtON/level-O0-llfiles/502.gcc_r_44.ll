; ModuleID = 'cfgloopmanip.c'
source_filename = "cfgloopmanip.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type opaque
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type { %struct.gimple_statement_phi }
%struct.gimple_statement_phi = type { %struct.gimple_statement_base, i32, i32, %union.tree_node*, [1 x %struct.phi_arg_d] }
%struct.gimple_statement_base = type { i32, i32, i32, i32, %struct.basic_block_def*, %union.tree_node* }
%struct.phi_arg_d = type { %struct.ssa_use_operand_d, %union.tree_node*, i32 }
%struct.ssa_use_operand_d = type { %struct.ssa_use_operand_d*, %struct.ssa_use_operand_d*, %union.anon, %union.tree_node** }
%union.anon = type { %union.gimple_statement_d* }
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_d* }
%struct.gimple_seq_node_d = type { %union.gimple_statement_d*, %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d* }
%struct.gimple_df = type { %struct.htab*, %struct.VEC_gimple_gc*, %struct.VEC_tree_gc*, %union.tree_node*, %struct.pt_solution, %struct.pt_solution, %struct.pointer_map_t*, %union.tree_node*, %struct.htab*, %struct.bitmap_head_def*, i8, %struct.ssa_operands }
%struct.VEC_gimple_gc = type { %struct.VEC_gimple_base }
%struct.VEC_gimple_base = type { i32, i32, [1 x %union.gimple_statement_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%struct.pt_solution = type { i8, %struct.bitmap_head_def* }
%struct.pointer_map_t = type opaque
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.ssa_operands = type { %struct.ssa_operand_memory_d*, i32, i32, i8, %struct.def_optype_d*, %struct.use_optype_d* }
%struct.ssa_operand_memory_d = type { %struct.ssa_operand_memory_d*, [1 x i8] }
%struct.def_optype_d = type { %struct.def_optype_d*, %union.tree_node** }
%struct.use_optype_d = type { %struct.use_optype_d*, %struct.ssa_use_operand_d }
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.VEC_basic_block_heap = type { %struct.VEC_basic_block_base }
%struct.simple_bitmap_def = type { i8*, i32, i32, [1 x i64] }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.gimple_stmt_iterator = type { %struct.gimple_seq_node_d*, %struct.gimple_seq_d*, %struct.basic_block_def* }
%struct.VEC_edge_heap = type { %struct.VEC_edge_base }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.loop_iterator = type { %struct.VEC_int_heap*, i32 }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }

@cfun = external dso_local global %struct.function*, align 8
@.str = private unnamed_addr constant [15 x i8] c"cfgloopmanip.c\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@mfb_kj_edge = common dso_local global %struct.edge_def* null, align 8, !dbg !0
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@.str.2 = private unnamed_addr constant [37 x i8] c"Created preheader block for loop %i\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@gimple_ops_offset_ = external dso_local constant [0 x i64], align 8
@.str.4 = private unnamed_addr constant [11 x i8] c"./gimple.h\00", align 1
@gss_for_code_ = external dso_local constant [0 x i32], align 4
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @remove_path(%struct.edge_def* %e) #0 !dbg !2073 {
entry:
  %retval = alloca i8, align 1
  %e.addr = alloca %struct.edge_def*, align 8
  %ae = alloca %struct.edge_def*, align 8
  %rem_bbs = alloca %struct.basic_block_def**, align 8
  %bord_bbs = alloca %struct.basic_block_def**, align 8
  %from = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %dom_bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %i = alloca i32, align 4
  %nrem = alloca i32, align 4
  %n_bord_bbs = alloca i32, align 4
  %seen = alloca %struct.simple_bitmap_def*, align 8
  %irred_invalidated = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %ldom = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !2077, metadata !DIExpression()), !dbg !2078
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ae, metadata !2079, metadata !DIExpression()), !dbg !2080
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %rem_bbs, metadata !2081, metadata !DIExpression()), !dbg !2082
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bord_bbs, metadata !2083, metadata !DIExpression()), !dbg !2084
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from, metadata !2085, metadata !DIExpression()), !dbg !2086
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !2087, metadata !DIExpression()), !dbg !2088
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %dom_bbs, metadata !2089, metadata !DIExpression()), !dbg !2090
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2091, metadata !DIExpression()), !dbg !2092
  call void @llvm.dbg.declare(metadata i32* %nrem, metadata !2093, metadata !DIExpression()), !dbg !2094
  call void @llvm.dbg.declare(metadata i32* %n_bord_bbs, metadata !2095, metadata !DIExpression()), !dbg !2096
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %seen, metadata !2097, metadata !DIExpression()), !dbg !2109
  call void @llvm.dbg.declare(metadata i8* %irred_invalidated, metadata !2110, metadata !DIExpression()), !dbg !2111
  store i8 0, i8* %irred_invalidated, align 1, !dbg !2111
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2112
  %call = call zeroext i8 @can_remove_branch_p(%struct.edge_def* %0), !dbg !2114
  %tobool = icmp ne i8 %call, 0, !dbg !2114
  br i1 %tobool, label %if.end, label %if.then, !dbg !2115

if.then:                                          ; preds = %entry
  store i8 0, i8* %retval, align 1, !dbg !2116
  br label %return, !dbg !2116

if.end:                                           ; preds = %entry
  %1 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2117
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 7, !dbg !2119
  %2 = load i32, i32* %flags, align 8, !dbg !2119
  %and = and i32 %2, 128, !dbg !2120
  %tobool1 = icmp ne i32 %and, 0, !dbg !2120
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !2121

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %irred_invalidated, align 1, !dbg !2122
  br label %if.end3, !dbg !2123

if.end3:                                          ; preds = %if.then2, %if.end
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2124
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 1, !dbg !2126
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2126
  %call4 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %4), !dbg !2127
  %tobool5 = icmp ne i8 %call4, 0, !dbg !2127
  br i1 %tobool5, label %if.end9, label %if.then6, !dbg !2128

if.then6:                                         ; preds = %if.end3
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2129
  %call7 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %5), !dbg !2130
  %call8 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call7), !dbg !2131
  store %struct.edge_def* %call8, %struct.edge_def** %e.addr, align 8, !dbg !2132
  br label %if.end9, !dbg !2133

if.end9:                                          ; preds = %if.then6, %if.end3
  br label %while.cond, !dbg !2134

while.cond:                                       ; preds = %while.body, %if.end9
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2135
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 0, !dbg !2136
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2136
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 3, !dbg !2137
  %8 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2137
  %call10 = call %struct.loop* @loop_outer(%struct.loop* %8), !dbg !2138
  %tobool11 = icmp ne %struct.loop* %call10, null, !dbg !2138
  br i1 %tobool11, label %land.rhs, label %land.end, !dbg !2139

land.rhs:                                         ; preds = %while.cond
  %9 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2140
  %src12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 0, !dbg !2141
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src12, align 8, !dbg !2141
  %loop_father13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 3, !dbg !2142
  %11 = load %struct.loop*, %struct.loop** %loop_father13, align 8, !dbg !2142
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 3, !dbg !2143
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2143
  %13 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2144
  %dest14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !2145
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest14, align 8, !dbg !2145
  %call15 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %12, %struct.basic_block_def* %14), !dbg !2146
  %conv = zext i8 %call15 to i32, !dbg !2146
  %tobool16 = icmp ne i32 %conv, 0, !dbg !2139
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %15 = phi i1 [ false, %while.cond ], [ %tobool16, %land.rhs ], !dbg !2147
  br i1 %15, label %while.body, label %while.end, !dbg !2134

while.body:                                       ; preds = %land.end
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2148
  %src17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 0, !dbg !2149
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %src17, align 8, !dbg !2149
  %loop_father18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 3, !dbg !2150
  %18 = load %struct.loop*, %struct.loop** %loop_father18, align 8, !dbg !2150
  call void @unloop(%struct.loop* %18, i8* %irred_invalidated), !dbg !2151
  br label %while.cond, !dbg !2134, !llvm.loop !2152

while.end:                                        ; preds = %land.end
  %19 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2154
  %call19 = call i32 @find_path(%struct.edge_def* %19, %struct.basic_block_def*** %rem_bbs), !dbg !2155
  store i32 %call19, i32* %nrem, align 4, !dbg !2156
  store i32 0, i32* %n_bord_bbs, align 4, !dbg !2157
  %20 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2158
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %20, i64 0, !dbg !2158
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2158
  %21 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2158
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %21, i32 0, i32 3, !dbg !2158
  %22 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2158
  %conv20 = sext i32 %22 to i64, !dbg !2158
  %call21 = call i8* @xcalloc(i64 %conv20, i64 8), !dbg !2158
  %23 = bitcast i8* %call21 to %struct.basic_block_def**, !dbg !2158
  store %struct.basic_block_def** %23, %struct.basic_block_def*** %bord_bbs, align 8, !dbg !2159
  %24 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2160
  %add.ptr22 = getelementptr inbounds %struct.function, %struct.function* %24, i64 0, !dbg !2160
  %cfg23 = getelementptr inbounds %struct.function, %struct.function* %add.ptr22, i32 0, i32 1, !dbg !2160
  %25 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg23, align 8, !dbg !2160
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %25, i32 0, i32 5, !dbg !2160
  %26 = load i32, i32* %x_last_basic_block, align 8, !dbg !2160
  %call24 = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %26), !dbg !2161
  store %struct.simple_bitmap_def* %call24, %struct.simple_bitmap_def** %seen, align 8, !dbg !2162
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2163
  call void @sbitmap_zero(%struct.simple_bitmap_def* %27), !dbg !2164
  store i32 0, i32* %i, align 4, !dbg !2165
  br label %for.cond, !dbg !2167

for.cond:                                         ; preds = %for.inc, %while.end
  %28 = load i32, i32* %i, align 4, !dbg !2168
  %29 = load i32, i32* %nrem, align 4, !dbg !2170
  %cmp = icmp slt i32 %28, %29, !dbg !2171
  br i1 %cmp, label %for.body, label %for.end, !dbg !2172

for.body:                                         ; preds = %for.cond
  %30 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2173
  %31 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2174
  %32 = load i32, i32* %i, align 4, !dbg !2175
  %idxprom = sext i32 %32 to i64, !dbg !2174
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %31, i64 %idxprom, !dbg !2174
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2174
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 9, !dbg !2176
  %34 = load i32, i32* %index, align 8, !dbg !2176
  call void @SET_BIT(%struct.simple_bitmap_def* %30, i32 %34), !dbg !2177
  br label %for.inc, !dbg !2177

for.inc:                                          ; preds = %for.body
  %35 = load i32, i32* %i, align 4, !dbg !2178
  %inc = add nsw i32 %35, 1, !dbg !2178
  store i32 %inc, i32* %i, align 4, !dbg !2178
  br label %for.cond, !dbg !2179, !llvm.loop !2180

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !2182
  br label %for.cond26, !dbg !2184

for.cond26:                                       ; preds = %for.inc67, %for.end
  %36 = load i32, i32* %i, align 4, !dbg !2185
  %37 = load i32, i32* %nrem, align 4, !dbg !2187
  %cmp27 = icmp slt i32 %36, %37, !dbg !2188
  br i1 %cmp27, label %for.body29, label %for.end69, !dbg !2189

for.body29:                                       ; preds = %for.cond26
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2190, metadata !DIExpression()), !dbg !2198
  %38 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2199
  %39 = load i32, i32* %i, align 4, !dbg !2200
  %idxprom30 = sext i32 %39 to i64, !dbg !2199
  %arrayidx31 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %38, i64 %idxprom30, !dbg !2199
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx31, align 8, !dbg !2199
  store %struct.basic_block_def* %40, %struct.basic_block_def** %bb, align 8, !dbg !2201
  %41 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2202
  %42 = load i32, i32* %i, align 4, !dbg !2202
  %idxprom32 = sext i32 %42 to i64, !dbg !2202
  %arrayidx33 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %41, i64 %idxprom32, !dbg !2202
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx33, align 8, !dbg !2202
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 1, !dbg !2202
  %call34 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2202
  %44 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2202
  %45 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 0, !dbg !2202
  %46 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 0, !dbg !2202
  store i32 %46, i32* %45, align 8, !dbg !2202
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %44, i32 0, i32 1, !dbg !2202
  %48 = extractvalue { i32, %struct.VEC_edge_gc** } %call34, 1, !dbg !2202
  store %struct.VEC_edge_gc** %48, %struct.VEC_edge_gc*** %47, align 8, !dbg !2202
  %49 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2202
  %50 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2202
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %49, i8* align 8 %50, i64 16, i1 false), !dbg !2202
  br label %for.cond35, !dbg !2202

for.cond35:                                       ; preds = %for.inc65, %for.body29
  %51 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2204
  %52 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %51, i32 0, i32 0, !dbg !2204
  %53 = load i32, i32* %52, align 8, !dbg !2204
  %54 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %51, i32 0, i32 1, !dbg !2204
  %55 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %54, align 8, !dbg !2204
  %call36 = call zeroext i8 @ei_cond(i32 %53, %struct.VEC_edge_gc** %55, %struct.edge_def** %ae), !dbg !2204
  %tobool37 = icmp ne i8 %call36, 0, !dbg !2202
  br i1 %tobool37, label %for.body38, label %for.end66, !dbg !2202

for.body38:                                       ; preds = %for.cond35
  %56 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2206
  %dest39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %56, i32 0, i32 1, !dbg !2208
  %57 = load %struct.basic_block_def*, %struct.basic_block_def** %dest39, align 8, !dbg !2208
  %58 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2209
  %add.ptr40 = getelementptr inbounds %struct.function, %struct.function* %58, i64 0, !dbg !2209
  %cfg41 = getelementptr inbounds %struct.function, %struct.function* %add.ptr40, i32 0, i32 1, !dbg !2209
  %59 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg41, align 8, !dbg !2209
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %59, i32 0, i32 1, !dbg !2209
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !2209
  %cmp42 = icmp ne %struct.basic_block_def* %57, %60, !dbg !2210
  br i1 %cmp42, label %land.lhs.true, label %if.end64, !dbg !2211

land.lhs.true:                                    ; preds = %for.body38
  %61 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2212
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %61, i32 0, i32 3, !dbg !2212
  %62 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2212
  %dest44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %62, i32 0, i32 1, !dbg !2212
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dest44, align 8, !dbg !2212
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 9, !dbg !2212
  %64 = load i32, i32* %index45, align 8, !dbg !2212
  %div = udiv i32 %64, 64, !dbg !2212
  %idxprom46 = zext i32 %div to i64, !dbg !2212
  %arrayidx47 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom46, !dbg !2212
  %65 = load i64, i64* %arrayidx47, align 8, !dbg !2212
  %66 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2212
  %dest48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 1, !dbg !2212
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %dest48, align 8, !dbg !2212
  %index49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 9, !dbg !2212
  %68 = load i32, i32* %index49, align 8, !dbg !2212
  %rem = urem i32 %68, 64, !dbg !2212
  %sh_prom = zext i32 %rem to i64, !dbg !2212
  %shr = lshr i64 %65, %sh_prom, !dbg !2212
  %and50 = and i64 %shr, 1, !dbg !2212
  %tobool51 = icmp ne i64 %and50, 0, !dbg !2212
  br i1 %tobool51, label %if.end64, label %if.then52, !dbg !2213

if.then52:                                        ; preds = %land.lhs.true
  %69 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2214
  %70 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2216
  %dest53 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %70, i32 0, i32 1, !dbg !2217
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %dest53, align 8, !dbg !2217
  %index54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 9, !dbg !2218
  %72 = load i32, i32* %index54, align 8, !dbg !2218
  call void @SET_BIT(%struct.simple_bitmap_def* %69, i32 %72), !dbg !2219
  %73 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2220
  %dest55 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %73, i32 0, i32 1, !dbg !2221
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %dest55, align 8, !dbg !2221
  %75 = load %struct.basic_block_def**, %struct.basic_block_def*** %bord_bbs, align 8, !dbg !2222
  %76 = load i32, i32* %n_bord_bbs, align 4, !dbg !2223
  %inc56 = add nsw i32 %76, 1, !dbg !2223
  store i32 %inc56, i32* %n_bord_bbs, align 4, !dbg !2223
  %idxprom57 = sext i32 %76 to i64, !dbg !2222
  %arrayidx58 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %75, i64 %idxprom57, !dbg !2222
  store %struct.basic_block_def* %74, %struct.basic_block_def** %arrayidx58, align 8, !dbg !2224
  %77 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !2225
  %flags59 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 7, !dbg !2227
  %78 = load i32, i32* %flags59, align 8, !dbg !2227
  %and60 = and i32 %78, 128, !dbg !2228
  %tobool61 = icmp ne i32 %and60, 0, !dbg !2228
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !2229

if.then62:                                        ; preds = %if.then52
  store i8 1, i8* %irred_invalidated, align 1, !dbg !2230
  br label %if.end63, !dbg !2231

if.end63:                                         ; preds = %if.then62, %if.then52
  br label %if.end64, !dbg !2232

if.end64:                                         ; preds = %if.end63, %land.lhs.true, %for.body38
  br label %for.inc65, !dbg !2212

for.inc65:                                        ; preds = %if.end64
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2204
  br label %for.cond35, !dbg !2204, !llvm.loop !2233

for.end66:                                        ; preds = %for.cond35
  br label %for.inc67, !dbg !2235

for.inc67:                                        ; preds = %for.end66
  %79 = load i32, i32* %i, align 4, !dbg !2236
  %inc68 = add nsw i32 %79, 1, !dbg !2236
  store i32 %inc68, i32* %i, align 4, !dbg !2236
  br label %for.cond26, !dbg !2237, !llvm.loop !2238

for.end69:                                        ; preds = %for.cond26
  %80 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2240
  %src70 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %80, i32 0, i32 0, !dbg !2241
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %src70, align 8, !dbg !2241
  store %struct.basic_block_def* %81, %struct.basic_block_def** %from, align 8, !dbg !2242
  %82 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2243
  call void @remove_branch(%struct.edge_def* %82), !dbg !2244
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !2245
  store i32 0, i32* %i, align 4, !dbg !2246
  br label %for.cond71, !dbg !2248

for.cond71:                                       ; preds = %for.inc87, %for.end69
  %83 = load i32, i32* %i, align 4, !dbg !2249
  %84 = load i32, i32* %nrem, align 4, !dbg !2251
  %cmp72 = icmp slt i32 %83, %84, !dbg !2252
  br i1 %cmp72, label %for.body74, label %for.end89, !dbg !2253

for.body74:                                       ; preds = %for.cond71
  %85 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2254
  %86 = load i32, i32* %i, align 4, !dbg !2256
  %idxprom75 = sext i32 %86 to i64, !dbg !2254
  %arrayidx76 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %85, i64 %idxprom75, !dbg !2254
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx76, align 8, !dbg !2254
  %loop_father77 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %87, i32 0, i32 3, !dbg !2257
  %88 = load %struct.loop*, %struct.loop** %loop_father77, align 8, !dbg !2257
  %header = getelementptr inbounds %struct.loop, %struct.loop* %88, i32 0, i32 2, !dbg !2258
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2258
  %90 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2259
  %91 = load i32, i32* %i, align 4, !dbg !2260
  %idxprom78 = sext i32 %91 to i64, !dbg !2259
  %arrayidx79 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %90, i64 %idxprom78, !dbg !2259
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx79, align 8, !dbg !2259
  %cmp80 = icmp eq %struct.basic_block_def* %89, %92, !dbg !2261
  br i1 %cmp80, label %if.then82, label %if.end86, !dbg !2262

if.then82:                                        ; preds = %for.body74
  %93 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2263
  %94 = load i32, i32* %i, align 4, !dbg !2264
  %idxprom83 = sext i32 %94 to i64, !dbg !2263
  %arrayidx84 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %93, i64 %idxprom83, !dbg !2263
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx84, align 8, !dbg !2263
  %loop_father85 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %95, i32 0, i32 3, !dbg !2265
  %96 = load %struct.loop*, %struct.loop** %loop_father85, align 8, !dbg !2265
  call void @cancel_loop_tree(%struct.loop* %96), !dbg !2266
  br label %if.end86, !dbg !2266

if.end86:                                         ; preds = %if.then82, %for.body74
  br label %for.inc87, !dbg !2267

for.inc87:                                        ; preds = %if.end86
  %97 = load i32, i32* %i, align 4, !dbg !2268
  %inc88 = add nsw i32 %97, 1, !dbg !2268
  store i32 %inc88, i32* %i, align 4, !dbg !2268
  br label %for.cond71, !dbg !2269, !llvm.loop !2270

for.end89:                                        ; preds = %for.cond71
  %98 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2272
  %99 = load i32, i32* %nrem, align 4, !dbg !2273
  call void @remove_bbs(%struct.basic_block_def** %98, i32 %99), !dbg !2274
  %100 = load %struct.basic_block_def**, %struct.basic_block_def*** %rem_bbs, align 8, !dbg !2275
  %101 = bitcast %struct.basic_block_def** %100 to i8*, !dbg !2275
  call void @free(i8* %101), !dbg !2276
  %102 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2277
  call void @sbitmap_zero(%struct.simple_bitmap_def* %102), !dbg !2278
  store i32 0, i32* %i, align 4, !dbg !2279
  br label %for.cond90, !dbg !2281

for.cond90:                                       ; preds = %for.inc123, %for.end89
  %103 = load i32, i32* %i, align 4, !dbg !2282
  %104 = load i32, i32* %n_bord_bbs, align 4, !dbg !2284
  %cmp91 = icmp slt i32 %103, %104, !dbg !2285
  br i1 %cmp91, label %for.body93, label %for.end125, !dbg !2286

for.body93:                                       ; preds = %for.cond90
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ldom, metadata !2287, metadata !DIExpression()), !dbg !2289
  %105 = load %struct.basic_block_def**, %struct.basic_block_def*** %bord_bbs, align 8, !dbg !2290
  %106 = load i32, i32* %i, align 4, !dbg !2291
  %idxprom94 = sext i32 %106 to i64, !dbg !2290
  %arrayidx95 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %105, i64 %idxprom94, !dbg !2290
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx95, align 8, !dbg !2290
  %call96 = call %struct.basic_block_def* @get_immediate_dominator(i32 1, %struct.basic_block_def* %107), !dbg !2292
  store %struct.basic_block_def* %call96, %struct.basic_block_def** %bb, align 8, !dbg !2293
  %108 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2294
  %elms97 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %108, i32 0, i32 3, !dbg !2294
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2294
  %index98 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %109, i32 0, i32 9, !dbg !2294
  %110 = load i32, i32* %index98, align 8, !dbg !2294
  %div99 = udiv i32 %110, 64, !dbg !2294
  %idxprom100 = zext i32 %div99 to i64, !dbg !2294
  %arrayidx101 = getelementptr inbounds [1 x i64], [1 x i64]* %elms97, i64 0, i64 %idxprom100, !dbg !2294
  %111 = load i64, i64* %arrayidx101, align 8, !dbg !2294
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2294
  %index102 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 9, !dbg !2294
  %113 = load i32, i32* %index102, align 8, !dbg !2294
  %rem103 = urem i32 %113, 64, !dbg !2294
  %sh_prom104 = zext i32 %rem103 to i64, !dbg !2294
  %shr105 = lshr i64 %111, %sh_prom104, !dbg !2294
  %and106 = and i64 %shr105, 1, !dbg !2294
  %tobool107 = icmp ne i64 %and106, 0, !dbg !2294
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !2296

if.then108:                                       ; preds = %for.body93
  br label %for.inc123, !dbg !2297

if.end109:                                        ; preds = %for.body93
  %114 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2298
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2299
  %index110 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %115, i32 0, i32 9, !dbg !2300
  %116 = load i32, i32* %index110, align 8, !dbg !2300
  call void @SET_BIT(%struct.simple_bitmap_def* %114, i32 %116), !dbg !2301
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !2302
  %call111 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %117), !dbg !2304
  store %struct.basic_block_def* %call111, %struct.basic_block_def** %ldom, align 8, !dbg !2305
  br label %for.cond112, !dbg !2306

for.cond112:                                      ; preds = %for.inc120, %if.end109
  %118 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !2307
  %tobool113 = icmp ne %struct.basic_block_def* %118, null, !dbg !2309
  br i1 %tobool113, label %for.body114, label %for.end122, !dbg !2309

for.body114:                                      ; preds = %for.cond112
  %119 = load %struct.basic_block_def*, %struct.basic_block_def** %from, align 8, !dbg !2310
  %120 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !2312
  %call115 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %119, %struct.basic_block_def* %120), !dbg !2313
  %tobool116 = icmp ne i8 %call115, 0, !dbg !2313
  br i1 %tobool116, label %if.end119, label %if.then117, !dbg !2314

if.then117:                                       ; preds = %for.body114
  %121 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !2315
  %call118 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %dom_bbs, %struct.basic_block_def* %121), !dbg !2315
  br label %if.end119, !dbg !2315

if.end119:                                        ; preds = %if.then117, %for.body114
  br label %for.inc120, !dbg !2316

for.inc120:                                       ; preds = %if.end119
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !2317
  %call121 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %122), !dbg !2318
  store %struct.basic_block_def* %call121, %struct.basic_block_def** %ldom, align 8, !dbg !2319
  br label %for.cond112, !dbg !2320, !llvm.loop !2321

for.end122:                                       ; preds = %for.cond112
  br label %for.inc123, !dbg !2323

for.inc123:                                       ; preds = %for.end122, %if.then108
  %123 = load i32, i32* %i, align 4, !dbg !2324
  %inc124 = add nsw i32 %123, 1, !dbg !2324
  store i32 %inc124, i32* %i, align 4, !dbg !2324
  br label %for.cond90, !dbg !2325, !llvm.loop !2326

for.end125:                                       ; preds = %for.cond90
  %124 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !2328
  %125 = bitcast %struct.simple_bitmap_def* %124 to i8*, !dbg !2328
  call void @free(i8* %125), !dbg !2329
  %126 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !2330
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %126, i8 zeroext 1), !dbg !2331
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %dom_bbs), !dbg !2332
  %127 = load %struct.basic_block_def**, %struct.basic_block_def*** %bord_bbs, align 8, !dbg !2333
  %128 = bitcast %struct.basic_block_def** %127 to i8*, !dbg !2333
  call void @free(i8* %128), !dbg !2334
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %from, align 8, !dbg !2335
  call void @fix_bb_placements(%struct.basic_block_def* %129, i8* %irred_invalidated), !dbg !2336
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %from, align 8, !dbg !2337
  %loop_father126 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %130, i32 0, i32 3, !dbg !2338
  %131 = load %struct.loop*, %struct.loop** %loop_father126, align 8, !dbg !2338
  call void @fix_loop_placements(%struct.loop* %131, i8* %irred_invalidated), !dbg !2339
  %132 = load i8, i8* %irred_invalidated, align 1, !dbg !2340
  %conv127 = zext i8 %132 to i32, !dbg !2340
  %tobool128 = icmp ne i32 %conv127, 0, !dbg !2340
  br i1 %tobool128, label %land.lhs.true129, label %if.end135, !dbg !2342

land.lhs.true129:                                 ; preds = %for.end125
  %call130 = call zeroext i8 @loops_state_satisfies_p(i32 4), !dbg !2343
  %conv131 = zext i8 %call130 to i32, !dbg !2343
  %tobool132 = icmp ne i32 %conv131, 0, !dbg !2343
  br i1 %tobool132, label %if.then133, label %if.end135, !dbg !2344

if.then133:                                       ; preds = %land.lhs.true129
  %call134 = call zeroext i8 @mark_irreducible_loops(), !dbg !2345
  br label %if.end135, !dbg !2345

if.end135:                                        ; preds = %if.then133, %land.lhs.true129, %for.end125
  store i8 1, i8* %retval, align 1, !dbg !2346
  br label %return, !dbg !2346

return:                                           ; preds = %if.end135, %if.then
  %133 = load i8, i8* %retval, align 1, !dbg !2347
  ret i8 %133, !dbg !2347
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

declare dso_local zeroext i8 @can_remove_branch_p(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !2348 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2351, metadata !DIExpression()), !dbg !2352
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2353
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !2353
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2353
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !2353
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2353

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2353
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !2353
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !2353
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !2353
  br label %cond.end, !dbg !2353

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2353

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2353
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2353
  %cmp = icmp eq i32 %call, 1, !dbg !2354
  %conv = zext i1 %cmp to i32, !dbg !2354
  %conv2 = trunc i32 %conv to i8, !dbg !2353
  ret i8 %conv2, !dbg !2355
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !2356 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !2359, metadata !DIExpression()), !dbg !2360
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2361
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !2361
  %tobool = icmp ne i8 %call, 0, !dbg !2361
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !2361

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2361
  br label %cond.end, !dbg !2361

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2361

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !2361
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2362
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !2362
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2362
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !2362
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !2362

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !2362
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !2362
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !2362
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !2362
  br label %cond.end5, !dbg !2362

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2362

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !2362
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !2362
  ret %struct.edge_def* %call7, !dbg !2363
}

declare dso_local %struct.basic_block_def* @split_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @loop_outer(%struct.loop* %loop) #0 !dbg !2364 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %n = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2369, metadata !DIExpression()), !dbg !2370
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2371, metadata !DIExpression()), !dbg !2372
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2373
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !2373
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !2373
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !2373
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2373

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2373
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !2373
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !2373
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !2373
  br label %cond.end, !dbg !2373

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2373

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2373
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !2373
  store i32 %call, i32* %n, align 4, !dbg !2372
  %4 = load i32, i32* %n, align 4, !dbg !2374
  %cmp = icmp eq i32 %4, 0, !dbg !2376
  br i1 %cmp, label %if.then, label %if.end, !dbg !2377

if.then:                                          ; preds = %cond.end
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !2378
  br label %return, !dbg !2378

if.end:                                           ; preds = %cond.end
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2379
  %superloops2 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 7, !dbg !2379
  %6 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops2, align 8, !dbg !2379
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %6, null, !dbg !2379
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !2379

cond.true4:                                       ; preds = %if.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2379
  %superloops5 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 7, !dbg !2379
  %8 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops5, align 8, !dbg !2379
  %base6 = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %8, i32 0, i32 0, !dbg !2379
  br label %cond.end8, !dbg !2379

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !2379

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_loop_p_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !2379
  %9 = load i32, i32* %n, align 4, !dbg !2379
  %sub = sub i32 %9, 1, !dbg !2379
  %call10 = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond9, i32 %sub), !dbg !2379
  store %struct.loop* %call10, %struct.loop** %retval, align 8, !dbg !2380
  br label %return, !dbg !2380

return:                                           ; preds = %cond.end8, %if.then
  %10 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !2381
  ret %struct.loop* %10, !dbg !2381
}

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @unloop(%struct.loop* %loop, i8* %irred_invalidated) #0 !dbg !2382 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %irred_invalidated.addr = alloca i8*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %ploop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %latch = alloca %struct.basic_block_def*, align 8
  %dummy = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2385, metadata !DIExpression()), !dbg !2386
  store i8* %irred_invalidated, i8** %irred_invalidated.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %irred_invalidated.addr, metadata !2387, metadata !DIExpression()), !dbg !2388
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !2389, metadata !DIExpression()), !dbg !2390
  call void @llvm.dbg.declare(metadata %struct.loop** %ploop, metadata !2391, metadata !DIExpression()), !dbg !2392
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2393, metadata !DIExpression()), !dbg !2394
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2395, metadata !DIExpression()), !dbg !2396
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %latch, metadata !2397, metadata !DIExpression()), !dbg !2398
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2399
  %latch1 = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 3, !dbg !2400
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %latch1, align 8, !dbg !2400
  store %struct.basic_block_def* %1, %struct.basic_block_def** %latch, align 8, !dbg !2398
  call void @llvm.dbg.declare(metadata i8* %dummy, metadata !2401, metadata !DIExpression()), !dbg !2402
  store i8 0, i8* %dummy, align 1, !dbg !2402
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2403
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %2), !dbg !2405
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 7, !dbg !2406
  %3 = load i32, i32* %flags, align 8, !dbg !2406
  %and = and i32 %3, 128, !dbg !2407
  %tobool = icmp ne i32 %and, 0, !dbg !2407
  br i1 %tobool, label %if.then, label %if.end, !dbg !2408

if.then:                                          ; preds = %entry
  %4 = load i8*, i8** %irred_invalidated.addr, align 8, !dbg !2409
  store i8 1, i8* %4, align 1, !dbg !2410
  br label %if.end, !dbg !2411

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2412
  %call2 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %5), !dbg !2413
  store %struct.basic_block_def** %call2, %struct.basic_block_def*** %body, align 8, !dbg !2414
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2415
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6, !dbg !2416
  %7 = load i32, i32* %num_nodes, align 4, !dbg !2416
  store i32 %7, i32* %n, align 4, !dbg !2417
  store i32 0, i32* %i, align 4, !dbg !2418
  br label %for.cond, !dbg !2420

for.cond:                                         ; preds = %for.inc, %if.end
  %8 = load i32, i32* %i, align 4, !dbg !2421
  %9 = load i32, i32* %n, align 4, !dbg !2423
  %cmp = icmp ult i32 %8, %9, !dbg !2424
  br i1 %cmp, label %for.body, label %for.end, !dbg !2425

for.body:                                         ; preds = %for.cond
  %10 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2426
  %11 = load i32, i32* %i, align 4, !dbg !2428
  %idxprom = zext i32 %11 to i64, !dbg !2426
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %10, i64 %idxprom, !dbg !2426
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2426
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 3, !dbg !2429
  %13 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2429
  %14 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2430
  %cmp3 = icmp eq %struct.loop* %13, %14, !dbg !2431
  br i1 %cmp3, label %if.then4, label %if.end10, !dbg !2432

if.then4:                                         ; preds = %for.body
  %15 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2433
  %16 = load i32, i32* %i, align 4, !dbg !2435
  %idxprom5 = zext i32 %16 to i64, !dbg !2433
  %arrayidx6 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %15, i64 %idxprom5, !dbg !2433
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx6, align 8, !dbg !2433
  call void @remove_bb_from_loops(%struct.basic_block_def* %17), !dbg !2436
  %18 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2437
  %19 = load i32, i32* %i, align 4, !dbg !2438
  %idxprom7 = zext i32 %19 to i64, !dbg !2437
  %arrayidx8 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %18, i64 %idxprom7, !dbg !2437
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx8, align 8, !dbg !2437
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2439
  %call9 = call %struct.loop* @loop_outer(%struct.loop* %21), !dbg !2440
  call void @add_bb_to_loop(%struct.basic_block_def* %20, %struct.loop* %call9), !dbg !2441
  br label %if.end10, !dbg !2442

if.end10:                                         ; preds = %if.then4, %for.body
  br label %for.inc, !dbg !2430

for.inc:                                          ; preds = %if.end10
  %22 = load i32, i32* %i, align 4, !dbg !2443
  %inc = add i32 %22, 1, !dbg !2443
  store i32 %inc, i32* %i, align 4, !dbg !2443
  br label %for.cond, !dbg !2444, !llvm.loop !2445

for.end:                                          ; preds = %for.cond
  %23 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !2447
  %24 = bitcast %struct.basic_block_def** %23 to i8*, !dbg !2447
  call void @free(i8* %24), !dbg !2448
  br label %while.cond, !dbg !2449

while.cond:                                       ; preds = %while.body, %for.end
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2450
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 8, !dbg !2451
  %26 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !2451
  %tobool11 = icmp ne %struct.loop* %26, null, !dbg !2449
  br i1 %tobool11, label %while.body, label %while.end, !dbg !2449

while.body:                                       ; preds = %while.cond
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2452
  %inner12 = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 8, !dbg !2454
  %28 = load %struct.loop*, %struct.loop** %inner12, align 8, !dbg !2454
  store %struct.loop* %28, %struct.loop** %ploop, align 8, !dbg !2455
  %29 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2456
  call void @flow_loop_tree_node_remove(%struct.loop* %29), !dbg !2457
  %30 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2458
  %call13 = call %struct.loop* @loop_outer(%struct.loop* %30), !dbg !2459
  %31 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !2460
  call void @flow_loop_tree_node_add(%struct.loop* %call13, %struct.loop* %31), !dbg !2461
  br label %while.cond, !dbg !2449, !llvm.loop !2462

while.end:                                        ; preds = %while.cond
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2464
  call void @delete_loop(%struct.loop* %32), !dbg !2465
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2466
  %call14 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %33), !dbg !2467
  call void @remove_edge(%struct.edge_def* %call14), !dbg !2468
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !2469
  call void @fix_bb_placements(%struct.basic_block_def* %34, i8* %dummy), !dbg !2470
  ret void, !dbg !2471
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_path(%struct.edge_def* %e, %struct.basic_block_def*** %bbs) #0 !dbg !2472 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %bbs.addr = alloca %struct.basic_block_def***, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !2476, metadata !DIExpression()), !dbg !2477
  store %struct.basic_block_def*** %bbs, %struct.basic_block_def**** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def**** %bbs.addr, metadata !2478, metadata !DIExpression()), !dbg !2479
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2480
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !2480
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !2480
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !2480
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !2480
  %tobool = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !2480
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2480

cond.true:                                        ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2480
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 1, !dbg !2480
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !2480
  %preds2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 0, !dbg !2480
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds2, align 8, !dbg !2480
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !2480
  br label %cond.end, !dbg !2480

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2480

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2480
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2480
  %cmp = icmp ule i32 %call, 1, !dbg !2480
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2480

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2480
  br label %cond.end5, !dbg !2480

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2480

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2480
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2481
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2481
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2481
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2481
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 3, !dbg !2481
  %8 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2481
  %conv = sext i32 %8 to i64, !dbg !2481
  %call7 = call i8* @xcalloc(i64 %conv, i64 8), !dbg !2481
  %9 = bitcast i8* %call7 to %struct.basic_block_def**, !dbg !2481
  %10 = load %struct.basic_block_def***, %struct.basic_block_def**** %bbs.addr, align 8, !dbg !2482
  store %struct.basic_block_def** %9, %struct.basic_block_def*** %10, align 8, !dbg !2483
  %11 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2484
  %dest8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !2485
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest8, align 8, !dbg !2485
  %13 = load %struct.basic_block_def***, %struct.basic_block_def**** %bbs.addr, align 8, !dbg !2486
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %13, align 8, !dbg !2487
  %15 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2488
  %add.ptr9 = getelementptr inbounds %struct.function, %struct.function* %15, i64 0, !dbg !2488
  %cfg10 = getelementptr inbounds %struct.function, %struct.function* %add.ptr9, i32 0, i32 1, !dbg !2488
  %16 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg10, align 8, !dbg !2488
  %x_n_basic_blocks11 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %16, i32 0, i32 3, !dbg !2488
  %17 = load i32, i32* %x_n_basic_blocks11, align 8, !dbg !2488
  %18 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !2489
  %dest12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 1, !dbg !2490
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %dest12, align 8, !dbg !2490
  %20 = bitcast %struct.basic_block_def* %19 to i8*, !dbg !2489
  %call13 = call i32 @dfs_enumerate_from(%struct.basic_block_def* %12, i32 0, i8 (%struct.basic_block_def*, i8*)* @rpe_enum_p, %struct.basic_block_def** %14, i32 %17, i8* %20), !dbg !2491
  ret i32 %call13, !dbg !2492
}

declare dso_local i8* @xcalloc(i64, i64) #2

declare dso_local %struct.simple_bitmap_def* @sbitmap_alloc(i32) #2

declare dso_local void @sbitmap_zero(%struct.simple_bitmap_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @SET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !2493 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !2496, metadata !DIExpression()), !dbg !2497
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !2498, metadata !DIExpression()), !dbg !2499
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !2500
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !2502
  %1 = load i8*, i8** %popcount, align 8, !dbg !2502
  %tobool = icmp ne i8* %1, null, !dbg !2500
  br i1 %tobool, label %if.then, label %if.end7, !dbg !2503

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !2504, metadata !DIExpression()), !dbg !2506
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !2507
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !2507
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !2507
  %div = udiv i32 %3, 64, !dbg !2507
  %idxprom = zext i32 %div to i64, !dbg !2507
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !2507
  %4 = load i64, i64* %arrayidx, align 8, !dbg !2507
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !2507
  %rem = urem i32 %5, 64, !dbg !2507
  %sh_prom = zext i32 %rem to i64, !dbg !2507
  %shr = lshr i64 %4, %sh_prom, !dbg !2507
  %and = and i64 %shr, 1, !dbg !2507
  %conv = trunc i64 %and to i8, !dbg !2507
  store i8 %conv, i8* %oldbit, align 1, !dbg !2508
  %6 = load i8, i8* %oldbit, align 1, !dbg !2509
  %tobool1 = icmp ne i8 %6, 0, !dbg !2509
  br i1 %tobool1, label %if.end, label %if.then2, !dbg !2511

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !2512
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !2513
  %8 = load i8*, i8** %popcount3, align 8, !dbg !2513
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !2514
  %div4 = udiv i32 %9, 64, !dbg !2515
  %idxprom5 = zext i32 %div4 to i64, !dbg !2512
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !2512
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !2516
  %inc = add i8 %10, 1, !dbg !2516
  store i8 %inc, i8* %arrayidx6, align 1, !dbg !2516
  br label %if.end, !dbg !2512

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !2517

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !2518
  %rem8 = urem i32 %11, 64, !dbg !2519
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !2520
  %shl = shl i64 1, %sh_prom9, !dbg !2520
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !2521
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !2522
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !2523
  %div11 = udiv i32 %13, 64, !dbg !2524
  %idxprom12 = zext i32 %div11 to i64, !dbg !2521
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !2521
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !2525
  %or = or i64 %14, %shl, !dbg !2525
  store i64 %or, i64* %arrayidx13, align 8, !dbg !2525
  ret void, !dbg !2526
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !2527 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !2530, metadata !DIExpression()), !dbg !2531
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !2532, metadata !DIExpression()), !dbg !2533
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !2534
  store i32 0, i32* %index, align 8, !dbg !2535
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !2536
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !2537
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !2538
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !2539
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !2539
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !2539
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !2540 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2544, metadata !DIExpression()), !dbg !2545
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !2546, metadata !DIExpression()), !dbg !2547
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2548
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2548
  %5 = load i32, i32* %4, align 8, !dbg !2548
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2548
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2548
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2548
  %tobool = icmp ne i8 %call, 0, !dbg !2548
  br i1 %tobool, label %if.else, label %if.then, !dbg !2550

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2551
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !2551
  %10 = load i32, i32* %9, align 8, !dbg !2551
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !2551
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !2551
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !2551
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2553
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !2554
  store i8 1, i8* %retval, align 1, !dbg !2555
  br label %return, !dbg !2555

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !2556
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !2558
  store i8 0, i8* %retval, align 1, !dbg !2559
  br label %return, !dbg !2559

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !2560
  ret i8 %15, !dbg !2560
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !2561 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !2565, metadata !DIExpression()), !dbg !2566
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2567
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !2567
  %1 = load i32, i32* %index, align 8, !dbg !2567
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2567
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !2567
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !2567
  %5 = load i32, i32* %4, align 8, !dbg !2567
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !2567
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !2567
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !2567
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !2567
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2567

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2567
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !2567
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !2567
  %11 = load i32, i32* %10, align 8, !dbg !2567
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !2567
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !2567
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !2567
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !2567
  br label %cond.end, !dbg !2567

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2567

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2567
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !2567
  %cmp = icmp ult i32 %1, %call2, !dbg !2567
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !2567

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !2567
  br label %cond.end5, !dbg !2567

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !2567

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !2567
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !2568
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !2569
  %15 = load i32, i32* %index7, align 8, !dbg !2570
  %inc = add i32 %15, 1, !dbg !2570
  store i32 %inc, i32* %index7, align 8, !dbg !2570
  ret void, !dbg !2571
}

declare dso_local void @remove_branch(%struct.edge_def*) #2

declare dso_local void @cancel_loop_tree(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal void @remove_bbs(%struct.basic_block_def** %bbs, i32 %nbbs) #0 !dbg !2572 {
entry:
  %bbs.addr = alloca %struct.basic_block_def**, align 8
  %nbbs.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store %struct.basic_block_def** %bbs, %struct.basic_block_def*** %bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs.addr, metadata !2575, metadata !DIExpression()), !dbg !2576
  store i32 %nbbs, i32* %nbbs.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %nbbs.addr, metadata !2577, metadata !DIExpression()), !dbg !2578
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2579, metadata !DIExpression()), !dbg !2580
  store i32 0, i32* %i, align 4, !dbg !2581
  br label %for.cond, !dbg !2583

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !2584
  %1 = load i32, i32* %nbbs.addr, align 4, !dbg !2586
  %cmp = icmp slt i32 %0, %1, !dbg !2587
  br i1 %cmp, label %for.body, label %for.end, !dbg !2588

for.body:                                         ; preds = %for.cond
  %2 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs.addr, align 8, !dbg !2589
  %3 = load i32, i32* %i, align 4, !dbg !2590
  %idxprom = sext i32 %3 to i64, !dbg !2589
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %2, i64 %idxprom, !dbg !2589
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2589
  call void @delete_basic_block(%struct.basic_block_def* %4), !dbg !2591
  br label %for.inc, !dbg !2591

for.inc:                                          ; preds = %for.body
  %5 = load i32, i32* %i, align 4, !dbg !2592
  %inc = add nsw i32 %5, 1, !dbg !2592
  store i32 %inc, i32* %i, align 4, !dbg !2592
  br label %for.cond, !dbg !2593, !llvm.loop !2594

for.end:                                          ; preds = %for.cond
  ret void, !dbg !2596
}

declare dso_local void @free(i8*) #2

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @first_dom_son(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %vec_, %struct.basic_block_def* %obj_) #0 !dbg !2597 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !2601, metadata !DIExpression()), !dbg !2602
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !2603, metadata !DIExpression()), !dbg !2602
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2602
  %call = call i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %0, i32 1), !dbg !2602
  %1 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2602
  %2 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %1, align 8, !dbg !2602
  %tobool = icmp ne %struct.VEC_basic_block_heap* %2, null, !dbg !2602
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !2602

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2602
  %4 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %3, align 8, !dbg !2602
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %4, i32 0, i32 0, !dbg !2602
  br label %cond.end, !dbg !2602

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !2602

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !2602
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !2602
  %call1 = call %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %cond, %struct.basic_block_def* %5), !dbg !2602
  ret %struct.basic_block_def** %call1, !dbg !2602
}

declare dso_local %struct.basic_block_def* @next_dom_son(i32, %struct.basic_block_def*) #2

declare dso_local void @iterate_fix_dominators(i32, %struct.VEC_basic_block_heap*, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %vec_) #0 !dbg !2604 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !2607, metadata !DIExpression()), !dbg !2608
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2609
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !2609
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !2609
  br i1 %tobool, label %if.then, label %if.end, !dbg !2608

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2609
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !2609
  %4 = bitcast %struct.VEC_basic_block_heap* %3 to i8*, !dbg !2609
  call void @free(i8* %4), !dbg !2609
  br label %if.end, !dbg !2609

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !2608
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %5, align 8, !dbg !2608
  ret void, !dbg !2608
}

; Function Attrs: noinline nounwind uwtable
define internal void @fix_bb_placements(%struct.basic_block_def* %from, i8* %irred_invalidated) #0 !dbg !2611 {
entry:
  %from.addr = alloca %struct.basic_block_def*, align 8
  %irred_invalidated.addr = alloca i8*, align 8
  %in_queue = alloca %struct.simple_bitmap_def*, align 8
  %queue = alloca %struct.basic_block_def**, align 8
  %qtop = alloca %struct.basic_block_def**, align 8
  %qbeg = alloca %struct.basic_block_def**, align 8
  %qend = alloca %struct.basic_block_def**, align 8
  %base_loop = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp35 = alloca %struct.edge_iterator, align 8
  %pred = alloca %struct.basic_block_def*, align 8
  %nca = alloca %struct.loop*, align 8
  store %struct.basic_block_def* %from, %struct.basic_block_def** %from.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %from.addr, metadata !2614, metadata !DIExpression()), !dbg !2615
  store i8* %irred_invalidated, i8** %irred_invalidated.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %irred_invalidated.addr, metadata !2616, metadata !DIExpression()), !dbg !2617
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %in_queue, metadata !2618, metadata !DIExpression()), !dbg !2619
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %queue, metadata !2620, metadata !DIExpression()), !dbg !2621
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %qtop, metadata !2622, metadata !DIExpression()), !dbg !2623
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %qbeg, metadata !2624, metadata !DIExpression()), !dbg !2625
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %qend, metadata !2626, metadata !DIExpression()), !dbg !2627
  call void @llvm.dbg.declare(metadata %struct.loop** %base_loop, metadata !2628, metadata !DIExpression()), !dbg !2629
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2630, metadata !DIExpression()), !dbg !2631
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2632
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 3, !dbg !2633
  %1 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2633
  store %struct.loop* %1, %struct.loop** %base_loop, align 8, !dbg !2634
  %2 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2635
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2637
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2637
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2637
  %4 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2637
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 3, !dbg !2638
  %5 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !2638
  %cmp = icmp eq %struct.loop* %2, %5, !dbg !2639
  br i1 %cmp, label %if.then, label %if.end, !dbg !2640

if.then:                                          ; preds = %entry
  br label %return, !dbg !2641

if.end:                                           ; preds = %entry
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2642
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !2642
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2642
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2642
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 5, !dbg !2642
  %8 = load i32, i32* %x_last_basic_block, align 8, !dbg !2642
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %8), !dbg !2643
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2644
  %9 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2645
  call void @sbitmap_zero(%struct.simple_bitmap_def* %9), !dbg !2646
  %10 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2647
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2648
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !2649
  %12 = load i32, i32* %index, align 8, !dbg !2649
  call void @SET_BIT(%struct.simple_bitmap_def* %10, i32 %12), !dbg !2650
  %13 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2651
  %14 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2652
  %header = getelementptr inbounds %struct.loop, %struct.loop* %14, i32 0, i32 2, !dbg !2653
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2653
  %index2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 9, !dbg !2654
  %16 = load i32, i32* %index2, align 8, !dbg !2654
  call void @SET_BIT(%struct.simple_bitmap_def* %13, i32 %16), !dbg !2655
  %17 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2656
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 6, !dbg !2656
  %18 = load i32, i32* %num_nodes, align 4, !dbg !2656
  %add = add i32 %18, 1, !dbg !2656
  %conv = zext i32 %add to i64, !dbg !2656
  %mul = mul i64 8, %conv, !dbg !2656
  %call3 = call i8* @xmalloc(i64 %mul), !dbg !2656
  %19 = bitcast i8* %call3 to %struct.basic_block_def**, !dbg !2656
  store %struct.basic_block_def** %19, %struct.basic_block_def*** %queue, align 8, !dbg !2657
  %20 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2658
  %21 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2659
  %num_nodes4 = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 6, !dbg !2660
  %22 = load i32, i32* %num_nodes4, align 4, !dbg !2660
  %idx.ext = zext i32 %22 to i64, !dbg !2661
  %add.ptr5 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %20, i64 %idx.ext, !dbg !2661
  %add.ptr6 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %add.ptr5, i64 1, !dbg !2662
  store %struct.basic_block_def** %add.ptr6, %struct.basic_block_def*** %qtop, align 8, !dbg !2663
  %23 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2664
  store %struct.basic_block_def** %23, %struct.basic_block_def*** %qbeg, align 8, !dbg !2665
  %24 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2666
  %add.ptr7 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %24, i64 1, !dbg !2667
  store %struct.basic_block_def** %add.ptr7, %struct.basic_block_def*** %qend, align 8, !dbg !2668
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2669
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %qbeg, align 8, !dbg !2670
  store %struct.basic_block_def* %25, %struct.basic_block_def** %26, align 8, !dbg !2671
  br label %while.cond, !dbg !2672

while.cond:                                       ; preds = %for.end93, %if.then26, %if.then22, %if.end
  %27 = load %struct.basic_block_def**, %struct.basic_block_def*** %qbeg, align 8, !dbg !2673
  %28 = load %struct.basic_block_def**, %struct.basic_block_def*** %qend, align 8, !dbg !2674
  %cmp8 = icmp ne %struct.basic_block_def** %27, %28, !dbg !2675
  br i1 %cmp8, label %while.body, label %while.end, !dbg !2672

while.body:                                       ; preds = %while.cond
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2676, metadata !DIExpression()), !dbg !2678
  %29 = load %struct.basic_block_def**, %struct.basic_block_def*** %qbeg, align 8, !dbg !2679
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %29, align 8, !dbg !2680
  store %struct.basic_block_def* %30, %struct.basic_block_def** %from.addr, align 8, !dbg !2681
  %31 = load %struct.basic_block_def**, %struct.basic_block_def*** %qbeg, align 8, !dbg !2682
  %incdec.ptr = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %31, i32 1, !dbg !2682
  store %struct.basic_block_def** %incdec.ptr, %struct.basic_block_def*** %qbeg, align 8, !dbg !2682
  %32 = load %struct.basic_block_def**, %struct.basic_block_def*** %qbeg, align 8, !dbg !2683
  %33 = load %struct.basic_block_def**, %struct.basic_block_def*** %qtop, align 8, !dbg !2685
  %cmp10 = icmp eq %struct.basic_block_def** %32, %33, !dbg !2686
  br i1 %cmp10, label %if.then12, label %if.end13, !dbg !2687

if.then12:                                        ; preds = %while.body
  %34 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2688
  store %struct.basic_block_def** %34, %struct.basic_block_def*** %qbeg, align 8, !dbg !2689
  br label %if.end13, !dbg !2690

if.end13:                                         ; preds = %if.then12, %while.body
  %35 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2691
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2692
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %36, i32 0, i32 9, !dbg !2693
  %37 = load i32, i32* %index14, align 8, !dbg !2693
  call void @RESET_BIT(%struct.simple_bitmap_def* %35, i32 %37), !dbg !2694
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2695
  %loop_father15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 3, !dbg !2697
  %39 = load %struct.loop*, %struct.loop** %loop_father15, align 8, !dbg !2697
  %header16 = getelementptr inbounds %struct.loop, %struct.loop* %39, i32 0, i32 2, !dbg !2698
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %header16, align 8, !dbg !2698
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2699
  %cmp17 = icmp eq %struct.basic_block_def* %40, %41, !dbg !2700
  br i1 %cmp17, label %if.then19, label %if.else, !dbg !2701

if.then19:                                        ; preds = %if.end13
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2702
  %loop_father20 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 3, !dbg !2705
  %43 = load %struct.loop*, %struct.loop** %loop_father20, align 8, !dbg !2705
  %call21 = call zeroext i8 @fix_loop_placement(%struct.loop* %43), !dbg !2706
  %tobool = icmp ne i8 %call21, 0, !dbg !2706
  br i1 %tobool, label %if.end23, label %if.then22, !dbg !2707

if.then22:                                        ; preds = %if.then19
  br label %while.cond, !dbg !2708, !llvm.loop !2709

if.end23:                                         ; preds = %if.then19
  br label %if.end28, !dbg !2711

if.else:                                          ; preds = %if.end13
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2712
  %call24 = call zeroext i8 @fix_bb_placement(%struct.basic_block_def* %44), !dbg !2715
  %tobool25 = icmp ne i8 %call24, 0, !dbg !2715
  br i1 %tobool25, label %if.end27, label %if.then26, !dbg !2716

if.then26:                                        ; preds = %if.else
  br label %while.cond, !dbg !2717, !llvm.loop !2709

if.end27:                                         ; preds = %if.else
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.end23
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2718
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 1, !dbg !2718
  %call29 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2718
  %46 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2718
  %47 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %46, i32 0, i32 0, !dbg !2718
  %48 = extractvalue { i32, %struct.VEC_edge_gc** } %call29, 0, !dbg !2718
  store i32 %48, i32* %47, align 8, !dbg !2718
  %49 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %46, i32 0, i32 1, !dbg !2718
  %50 = extractvalue { i32, %struct.VEC_edge_gc** } %call29, 1, !dbg !2718
  store %struct.VEC_edge_gc** %50, %struct.VEC_edge_gc*** %49, align 8, !dbg !2718
  %51 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2718
  %52 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2718
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 16, i1 false), !dbg !2718
  br label %for.cond, !dbg !2718

for.cond:                                         ; preds = %for.inc, %if.end28
  %53 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2720
  %54 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %53, i32 0, i32 0, !dbg !2720
  %55 = load i32, i32* %54, align 8, !dbg !2720
  %56 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %53, i32 0, i32 1, !dbg !2720
  %57 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %56, align 8, !dbg !2720
  %call30 = call zeroext i8 @ei_cond(i32 %55, %struct.VEC_edge_gc** %57, %struct.edge_def** %e), !dbg !2720
  %tobool31 = icmp ne i8 %call30, 0, !dbg !2718
  br i1 %tobool31, label %for.body, label %for.end, !dbg !2718

for.body:                                         ; preds = %for.cond
  %58 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2722
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %58, i32 0, i32 7, !dbg !2725
  %59 = load i32, i32* %flags, align 8, !dbg !2725
  %and = and i32 %59, 128, !dbg !2726
  %tobool32 = icmp ne i32 %and, 0, !dbg !2726
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !2727

if.then33:                                        ; preds = %for.body
  %60 = load i8*, i8** %irred_invalidated.addr, align 8, !dbg !2728
  store i8 1, i8* %60, align 1, !dbg !2729
  br label %if.end34, !dbg !2730

if.end34:                                         ; preds = %if.then33, %for.body
  br label %for.inc, !dbg !2731

for.inc:                                          ; preds = %if.end34
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2720
  br label %for.cond, !dbg !2720, !llvm.loop !2732

for.end:                                          ; preds = %for.cond
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2734
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 0, !dbg !2734
  %call36 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !2734
  %62 = bitcast %struct.edge_iterator* %tmp35 to { i32, %struct.VEC_edge_gc** }*, !dbg !2734
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %62, i32 0, i32 0, !dbg !2734
  %64 = extractvalue { i32, %struct.VEC_edge_gc** } %call36, 0, !dbg !2734
  store i32 %64, i32* %63, align 8, !dbg !2734
  %65 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %62, i32 0, i32 1, !dbg !2734
  %66 = extractvalue { i32, %struct.VEC_edge_gc** } %call36, 1, !dbg !2734
  store %struct.VEC_edge_gc** %66, %struct.VEC_edge_gc*** %65, align 8, !dbg !2734
  %67 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2734
  %68 = bitcast %struct.edge_iterator* %tmp35 to i8*, !dbg !2734
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %67, i8* align 8 %68, i64 16, i1 false), !dbg !2734
  br label %for.cond37, !dbg !2734

for.cond37:                                       ; preds = %for.inc92, %for.end
  %69 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2736
  %70 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %69, i32 0, i32 0, !dbg !2736
  %71 = load i32, i32* %70, align 8, !dbg !2736
  %72 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %69, i32 0, i32 1, !dbg !2736
  %73 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %72, align 8, !dbg !2736
  %call38 = call zeroext i8 @ei_cond(i32 %71, %struct.VEC_edge_gc** %73, %struct.edge_def** %e), !dbg !2736
  %tobool39 = icmp ne i8 %call38, 0, !dbg !2734
  br i1 %tobool39, label %for.body40, label %for.end93, !dbg !2734

for.body40:                                       ; preds = %for.cond37
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred, metadata !2738, metadata !DIExpression()), !dbg !2740
  %74 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2741
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %74, i32 0, i32 0, !dbg !2742
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2742
  store %struct.basic_block_def* %75, %struct.basic_block_def** %pred, align 8, !dbg !2740
  call void @llvm.dbg.declare(metadata %struct.loop** %nca, metadata !2743, metadata !DIExpression()), !dbg !2744
  %76 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2745
  %flags41 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %76, i32 0, i32 7, !dbg !2747
  %77 = load i32, i32* %flags41, align 8, !dbg !2747
  %and42 = and i32 %77, 128, !dbg !2748
  %tobool43 = icmp ne i32 %and42, 0, !dbg !2748
  br i1 %tobool43, label %if.then44, label %if.end45, !dbg !2749

if.then44:                                        ; preds = %for.body40
  %78 = load i8*, i8** %irred_invalidated.addr, align 8, !dbg !2750
  store i8 1, i8* %78, align 1, !dbg !2751
  br label %if.end45, !dbg !2752

if.end45:                                         ; preds = %if.then44, %for.body40
  %79 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2753
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %79, i32 0, i32 3, !dbg !2753
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2753
  %index46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %80, i32 0, i32 9, !dbg !2753
  %81 = load i32, i32* %index46, align 8, !dbg !2753
  %div = udiv i32 %81, 64, !dbg !2753
  %idxprom = zext i32 %div to i64, !dbg !2753
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !2753
  %82 = load i64, i64* %arrayidx, align 8, !dbg !2753
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2753
  %index47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 9, !dbg !2753
  %84 = load i32, i32* %index47, align 8, !dbg !2753
  %rem = urem i32 %84, 64, !dbg !2753
  %sh_prom = zext i32 %rem to i64, !dbg !2753
  %shr = lshr i64 %82, %sh_prom, !dbg !2753
  %and48 = and i64 %shr, 1, !dbg !2753
  %tobool49 = icmp ne i64 %and48, 0, !dbg !2753
  br i1 %tobool49, label %if.then50, label %if.end51, !dbg !2755

if.then50:                                        ; preds = %if.end45
  br label %for.inc92, !dbg !2756

if.end51:                                         ; preds = %if.end45
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2757
  %loop_father52 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %85, i32 0, i32 3, !dbg !2758
  %86 = load %struct.loop*, %struct.loop** %loop_father52, align 8, !dbg !2758
  %87 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2759
  %call53 = call %struct.loop* @find_common_loop(%struct.loop* %86, %struct.loop* %87), !dbg !2760
  store %struct.loop* %call53, %struct.loop** %nca, align 8, !dbg !2761
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2762
  %loop_father54 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %88, i32 0, i32 3, !dbg !2764
  %89 = load %struct.loop*, %struct.loop** %loop_father54, align 8, !dbg !2764
  %90 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2765
  %cmp55 = icmp ne %struct.loop* %89, %90, !dbg !2766
  br i1 %cmp55, label %land.lhs.true, label %if.else65, !dbg !2767

land.lhs.true:                                    ; preds = %if.end51
  %91 = load %struct.loop*, %struct.loop** %nca, align 8, !dbg !2768
  %92 = load %struct.loop*, %struct.loop** %base_loop, align 8, !dbg !2769
  %cmp57 = icmp eq %struct.loop* %91, %92, !dbg !2770
  br i1 %cmp57, label %if.then62, label %lor.lhs.false, !dbg !2771

lor.lhs.false:                                    ; preds = %land.lhs.true
  %93 = load %struct.loop*, %struct.loop** %nca, align 8, !dbg !2772
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2773
  %loop_father59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 3, !dbg !2774
  %95 = load %struct.loop*, %struct.loop** %loop_father59, align 8, !dbg !2774
  %cmp60 = icmp ne %struct.loop* %93, %95, !dbg !2775
  br i1 %cmp60, label %if.then62, label %if.else65, !dbg !2776

if.then62:                                        ; preds = %lor.lhs.false, %land.lhs.true
  %96 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2777
  %loop_father63 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %96, i32 0, i32 3, !dbg !2778
  %97 = load %struct.loop*, %struct.loop** %loop_father63, align 8, !dbg !2778
  %header64 = getelementptr inbounds %struct.loop, %struct.loop* %97, i32 0, i32 2, !dbg !2779
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %header64, align 8, !dbg !2779
  store %struct.basic_block_def* %98, %struct.basic_block_def** %pred, align 8, !dbg !2780
  br label %if.end72, !dbg !2781

if.else65:                                        ; preds = %lor.lhs.false, %if.end51
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %from.addr, align 8, !dbg !2782
  %loop_father66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %99, i32 0, i32 3, !dbg !2784
  %100 = load %struct.loop*, %struct.loop** %loop_father66, align 8, !dbg !2784
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2785
  %loop_father67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %101, i32 0, i32 3, !dbg !2786
  %102 = load %struct.loop*, %struct.loop** %loop_father67, align 8, !dbg !2786
  %call68 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %100, %struct.loop* %102), !dbg !2787
  %tobool69 = icmp ne i8 %call68, 0, !dbg !2787
  br i1 %tobool69, label %if.end71, label %if.then70, !dbg !2788

if.then70:                                        ; preds = %if.else65
  br label %for.inc92, !dbg !2789

if.end71:                                         ; preds = %if.else65
  br label %if.end72

if.end72:                                         ; preds = %if.end71, %if.then62
  %103 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2791
  %elms73 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %103, i32 0, i32 3, !dbg !2791
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2791
  %index74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %104, i32 0, i32 9, !dbg !2791
  %105 = load i32, i32* %index74, align 8, !dbg !2791
  %div75 = udiv i32 %105, 64, !dbg !2791
  %idxprom76 = zext i32 %div75 to i64, !dbg !2791
  %arrayidx77 = getelementptr inbounds [1 x i64], [1 x i64]* %elms73, i64 0, i64 %idxprom76, !dbg !2791
  %106 = load i64, i64* %arrayidx77, align 8, !dbg !2791
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2791
  %index78 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %107, i32 0, i32 9, !dbg !2791
  %108 = load i32, i32* %index78, align 8, !dbg !2791
  %rem79 = urem i32 %108, 64, !dbg !2791
  %sh_prom80 = zext i32 %rem79 to i64, !dbg !2791
  %shr81 = lshr i64 %106, %sh_prom80, !dbg !2791
  %and82 = and i64 %shr81, 1, !dbg !2791
  %tobool83 = icmp ne i64 %and82, 0, !dbg !2791
  br i1 %tobool83, label %if.then84, label %if.end85, !dbg !2793

if.then84:                                        ; preds = %if.end72
  br label %for.inc92, !dbg !2794

if.end85:                                         ; preds = %if.end72
  %109 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2795
  %110 = load %struct.basic_block_def**, %struct.basic_block_def*** %qend, align 8, !dbg !2796
  store %struct.basic_block_def* %109, %struct.basic_block_def** %110, align 8, !dbg !2797
  %111 = load %struct.basic_block_def**, %struct.basic_block_def*** %qend, align 8, !dbg !2798
  %incdec.ptr86 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %111, i32 1, !dbg !2798
  store %struct.basic_block_def** %incdec.ptr86, %struct.basic_block_def*** %qend, align 8, !dbg !2798
  %112 = load %struct.basic_block_def**, %struct.basic_block_def*** %qend, align 8, !dbg !2799
  %113 = load %struct.basic_block_def**, %struct.basic_block_def*** %qtop, align 8, !dbg !2801
  %cmp87 = icmp eq %struct.basic_block_def** %112, %113, !dbg !2802
  br i1 %cmp87, label %if.then89, label %if.end90, !dbg !2803

if.then89:                                        ; preds = %if.end85
  %114 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2804
  store %struct.basic_block_def** %114, %struct.basic_block_def*** %qend, align 8, !dbg !2805
  br label %if.end90, !dbg !2806

if.end90:                                         ; preds = %if.then89, %if.end85
  %115 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2807
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %pred, align 8, !dbg !2808
  %index91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %116, i32 0, i32 9, !dbg !2809
  %117 = load i32, i32* %index91, align 8, !dbg !2809
  call void @SET_BIT(%struct.simple_bitmap_def* %115, i32 %117), !dbg !2810
  br label %for.inc92, !dbg !2811

for.inc92:                                        ; preds = %if.end90, %if.then84, %if.then70, %if.then50
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2736
  br label %for.cond37, !dbg !2736, !llvm.loop !2812

for.end93:                                        ; preds = %for.cond37
  br label %while.cond, !dbg !2672, !llvm.loop !2709

while.end:                                        ; preds = %while.cond
  %118 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %in_queue, align 8, !dbg !2814
  %119 = bitcast %struct.simple_bitmap_def* %118 to i8*, !dbg !2814
  call void @free(i8* %119), !dbg !2815
  %120 = load %struct.basic_block_def**, %struct.basic_block_def*** %queue, align 8, !dbg !2816
  %121 = bitcast %struct.basic_block_def** %120 to i8*, !dbg !2816
  call void @free(i8* %121), !dbg !2817
  br label %return, !dbg !2818

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !2818
}

; Function Attrs: noinline nounwind uwtable
define internal void @fix_loop_placements(%struct.loop* %loop, i8* %irred_invalidated) #0 !dbg !2819 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %irred_invalidated.addr = alloca i8*, align 8
  %outer = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2820, metadata !DIExpression()), !dbg !2821
  store i8* %irred_invalidated, i8** %irred_invalidated.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %irred_invalidated.addr, metadata !2822, metadata !DIExpression()), !dbg !2823
  call void @llvm.dbg.declare(metadata %struct.loop** %outer, metadata !2824, metadata !DIExpression()), !dbg !2825
  br label %while.cond, !dbg !2826

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2827
  %call = call %struct.loop* @loop_outer(%struct.loop* %0), !dbg !2828
  %tobool = icmp ne %struct.loop* %call, null, !dbg !2826
  br i1 %tobool, label %while.body, label %while.end, !dbg !2826

while.body:                                       ; preds = %while.cond
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2829
  %call1 = call %struct.loop* @loop_outer(%struct.loop* %1), !dbg !2831
  store %struct.loop* %call1, %struct.loop** %outer, align 8, !dbg !2832
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2833
  %call2 = call zeroext i8 @fix_loop_placement(%struct.loop* %2), !dbg !2835
  %tobool3 = icmp ne i8 %call2, 0, !dbg !2835
  br i1 %tobool3, label %if.end, label %if.then, !dbg !2836

if.then:                                          ; preds = %while.body
  br label %while.end, !dbg !2837

if.end:                                           ; preds = %while.body
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2838
  %call4 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %3), !dbg !2839
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call4, i32 0, i32 0, !dbg !2840
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !2840
  %5 = load i8*, i8** %irred_invalidated.addr, align 8, !dbg !2841
  call void @fix_bb_placements(%struct.basic_block_def* %4, i8* %5), !dbg !2842
  %6 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !2843
  store %struct.loop* %6, %struct.loop** %loop.addr, align 8, !dbg !2844
  br label %while.cond, !dbg !2826, !llvm.loop !2845

while.end:                                        ; preds = %if.then, %while.cond
  ret void, !dbg !2847
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @loops_state_satisfies_p(i32 %flags) #0 !dbg !2848 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !2851, metadata !DIExpression()), !dbg !2852
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2853
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !2853
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2853
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2853
  %state = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 0, !dbg !2854
  %2 = load i32, i32* %state, align 8, !dbg !2854
  %3 = load i32, i32* %flags.addr, align 4, !dbg !2855
  %and = and i32 %2, %3, !dbg !2856
  %4 = load i32, i32* %flags.addr, align 4, !dbg !2857
  %cmp = icmp eq i32 %and, %4, !dbg !2858
  %conv = zext i1 %cmp to i32, !dbg !2858
  %conv1 = trunc i32 %conv to i8, !dbg !2859
  ret i8 %conv1, !dbg !2860
}

declare dso_local zeroext i8 @mark_irreducible_loops() #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_loop(%struct.loop* %loop, %struct.loop* %outer) #0 !dbg !2861 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %outer.addr = alloca %struct.loop*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  %subloop = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2864, metadata !DIExpression()), !dbg !2865
  store %struct.loop* %outer, %struct.loop** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %outer.addr, metadata !2866, metadata !DIExpression()), !dbg !2867
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2868, metadata !DIExpression()), !dbg !2869
  call void @llvm.dbg.declare(metadata i32* %i, metadata !2870, metadata !DIExpression()), !dbg !2871
  call void @llvm.dbg.declare(metadata i32* %n, metadata !2872, metadata !DIExpression()), !dbg !2873
  call void @llvm.dbg.declare(metadata %struct.loop** %subloop, metadata !2874, metadata !DIExpression()), !dbg !2875
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !2876, metadata !DIExpression()), !dbg !2877
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !2878, metadata !DIExpression()), !dbg !2879
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2880
  call void @place_new_loop(%struct.loop* %0), !dbg !2881
  %1 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !2882
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2883
  call void @flow_loop_tree_node_add(%struct.loop* %1, %struct.loop* %2), !dbg !2884
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2885
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !2885
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !2885
  %4 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !2885
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %4, i32 0, i32 3, !dbg !2885
  %5 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !2885
  %conv = sext i32 %5 to i64, !dbg !2885
  %mul = mul i64 8, %conv, !dbg !2885
  %call = call i8* @xmalloc(i64 %mul), !dbg !2885
  %6 = bitcast i8* %call to %struct.basic_block_def**, !dbg !2885
  store %struct.basic_block_def** %6, %struct.basic_block_def*** %bbs, align 8, !dbg !2886
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2887
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2888
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2889
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !2889
  %cfg2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 1, !dbg !2889
  %10 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg2, align 8, !dbg !2889
  %x_n_basic_blocks3 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %10, i32 0, i32 3, !dbg !2889
  %11 = load i32, i32* %x_n_basic_blocks3, align 8, !dbg !2889
  %call4 = call i32 @get_loop_body_with_size(%struct.loop* %7, %struct.basic_block_def** %8, i32 %11), !dbg !2890
  store i32 %call4, i32* %n, align 4, !dbg !2891
  store i32 0, i32* %i, align 4, !dbg !2892
  br label %for.cond, !dbg !2894

for.cond:                                         ; preds = %for.inc, %entry
  %12 = load i32, i32* %i, align 4, !dbg !2895
  %13 = load i32, i32* %n, align 4, !dbg !2897
  %cmp = icmp slt i32 %12, %13, !dbg !2898
  br i1 %cmp, label %for.body, label %for.end, !dbg !2899

for.body:                                         ; preds = %for.cond
  %14 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2900
  %15 = load i32, i32* %i, align 4, !dbg !2903
  %idxprom = sext i32 %15 to i64, !dbg !2900
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %14, i64 %idxprom, !dbg !2900
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !2900
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 3, !dbg !2904
  %17 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !2904
  %18 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !2905
  %cmp6 = icmp eq %struct.loop* %17, %18, !dbg !2906
  br i1 %cmp6, label %if.then, label %if.end, !dbg !2907

if.then:                                          ; preds = %for.body
  %19 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2908
  %20 = load i32, i32* %i, align 4, !dbg !2910
  %idxprom8 = sext i32 %20 to i64, !dbg !2908
  %arrayidx9 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %19, i64 %idxprom8, !dbg !2908
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx9, align 8, !dbg !2908
  call void @remove_bb_from_loops(%struct.basic_block_def* %21), !dbg !2911
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2912
  %23 = load i32, i32* %i, align 4, !dbg !2913
  %idxprom10 = sext i32 %23 to i64, !dbg !2912
  %arrayidx11 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %22, i64 %idxprom10, !dbg !2912
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx11, align 8, !dbg !2912
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2914
  call void @add_bb_to_loop(%struct.basic_block_def* %24, %struct.loop* %25), !dbg !2915
  br label %for.inc, !dbg !2916

if.end:                                           ; preds = %for.body
  %26 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2917
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 6, !dbg !2918
  %27 = load i32, i32* %num_nodes, align 4, !dbg !2919
  %inc = add i32 %27, 1, !dbg !2919
  store i32 %inc, i32* %num_nodes, align 4, !dbg !2919
  %28 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2920
  %29 = load i32, i32* %i, align 4, !dbg !2921
  %idxprom12 = sext i32 %29 to i64, !dbg !2920
  %arrayidx13 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %28, i64 %idxprom12, !dbg !2920
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx13, align 8, !dbg !2920
  %loop_father14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 3, !dbg !2922
  %31 = load %struct.loop*, %struct.loop** %loop_father14, align 8, !dbg !2922
  store %struct.loop* %31, %struct.loop** %subloop, align 8, !dbg !2923
  %32 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !2924
  %call15 = call %struct.loop* @loop_outer(%struct.loop* %32), !dbg !2926
  %33 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !2927
  %cmp16 = icmp eq %struct.loop* %call15, %33, !dbg !2928
  br i1 %cmp16, label %land.lhs.true, label %if.end23, !dbg !2929

land.lhs.true:                                    ; preds = %if.end
  %34 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !2930
  %header = getelementptr inbounds %struct.loop, %struct.loop* %34, i32 0, i32 2, !dbg !2931
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !2931
  %36 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2932
  %37 = load i32, i32* %i, align 4, !dbg !2933
  %idxprom18 = sext i32 %37 to i64, !dbg !2932
  %arrayidx19 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %36, i64 %idxprom18, !dbg !2932
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx19, align 8, !dbg !2932
  %cmp20 = icmp eq %struct.basic_block_def* %35, %38, !dbg !2934
  br i1 %cmp20, label %if.then22, label %if.end23, !dbg !2935

if.then22:                                        ; preds = %land.lhs.true
  %39 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !2936
  call void @flow_loop_tree_node_remove(%struct.loop* %39), !dbg !2938
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2939
  %41 = load %struct.loop*, %struct.loop** %subloop, align 8, !dbg !2940
  call void @flow_loop_tree_node_add(%struct.loop* %40, %struct.loop* %41), !dbg !2941
  br label %if.end23, !dbg !2942

if.end23:                                         ; preds = %if.then22, %land.lhs.true, %if.end
  br label %for.inc, !dbg !2943

for.inc:                                          ; preds = %if.end23, %if.then
  %42 = load i32, i32* %i, align 4, !dbg !2944
  %inc24 = add nsw i32 %42, 1, !dbg !2944
  store i32 %inc24, i32* %i, align 4, !dbg !2944
  br label %for.cond, !dbg !2945, !llvm.loop !2946

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !2948
  br label %for.cond25, !dbg !2950

for.cond25:                                       ; preds = %for.inc37, %for.end
  %43 = load i32, i32* %i, align 4, !dbg !2951
  %44 = load i32, i32* %n, align 4, !dbg !2953
  %cmp26 = icmp slt i32 %43, %44, !dbg !2954
  br i1 %cmp26, label %for.body28, label %for.end39, !dbg !2955

for.body28:                                       ; preds = %for.cond25
  %45 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2956
  %46 = load i32, i32* %i, align 4, !dbg !2956
  %idxprom29 = sext i32 %46 to i64, !dbg !2956
  %arrayidx30 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %45, i64 %idxprom29, !dbg !2956
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx30, align 8, !dbg !2956
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 1, !dbg !2956
  %call31 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !2956
  %48 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !2956
  %49 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %48, i32 0, i32 0, !dbg !2956
  %50 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 0, !dbg !2956
  store i32 %50, i32* %49, align 8, !dbg !2956
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %48, i32 0, i32 1, !dbg !2956
  %52 = extractvalue { i32, %struct.VEC_edge_gc** } %call31, 1, !dbg !2956
  store %struct.VEC_edge_gc** %52, %struct.VEC_edge_gc*** %51, align 8, !dbg !2956
  %53 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !2956
  %54 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !2956
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %53, i8* align 8 %54, i64 16, i1 false), !dbg !2956
  br label %for.cond32, !dbg !2956

for.cond32:                                       ; preds = %for.inc35, %for.body28
  %55 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !2959
  %56 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %55, i32 0, i32 0, !dbg !2959
  %57 = load i32, i32* %56, align 8, !dbg !2959
  %58 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %55, i32 0, i32 1, !dbg !2959
  %59 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %58, align 8, !dbg !2959
  %call33 = call zeroext i8 @ei_cond(i32 %57, %struct.VEC_edge_gc** %59, %struct.edge_def** %e), !dbg !2959
  %tobool = icmp ne i8 %call33, 0, !dbg !2956
  br i1 %tobool, label %for.body34, label %for.end36, !dbg !2956

for.body34:                                       ; preds = %for.cond32
  %60 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !2961
  call void @rescan_loop_exit(%struct.edge_def* %60, i8 zeroext 0, i8 zeroext 0), !dbg !2963
  br label %for.inc35, !dbg !2964

for.inc35:                                        ; preds = %for.body34
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !2959
  br label %for.cond32, !dbg !2959, !llvm.loop !2965

for.end36:                                        ; preds = %for.cond32
  br label %for.inc37, !dbg !2967

for.inc37:                                        ; preds = %for.end36
  %61 = load i32, i32* %i, align 4, !dbg !2968
  %inc38 = add nsw i32 %61, 1, !dbg !2968
  store i32 %inc38, i32* %i, align 4, !dbg !2968
  br label %for.cond25, !dbg !2969, !llvm.loop !2970

for.end39:                                        ; preds = %for.cond25
  %62 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !2972
  %63 = bitcast %struct.basic_block_def** %62 to i8*, !dbg !2972
  call void @free(i8* %63), !dbg !2973
  ret void, !dbg !2974
}

; Function Attrs: noinline nounwind uwtable
define internal void @place_new_loop(%struct.loop* %loop) #0 !dbg !2975 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2978, metadata !DIExpression()), !dbg !2979
  %call = call i32 @number_of_loops(), !dbg !2980
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2981
  %num = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 0, !dbg !2982
  store i32 %call, i32* %num, align 8, !dbg !2983
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !2984
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !2984
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !2984
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !2984
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 1, !dbg !2984
  %3 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2984
  %call1 = call %struct.loop** @VEC_loop_p_gc_safe_push(%struct.VEC_loop_p_gc** %larray, %struct.loop* %3), !dbg !2984
  ret void, !dbg !2985
}

declare dso_local void @flow_loop_tree_node_add(%struct.loop*, %struct.loop*) #2

declare dso_local i8* @xmalloc(i64) #2

declare dso_local i32 @get_loop_body_with_size(%struct.loop*, %struct.basic_block_def**, i32) #2

declare dso_local void @remove_bb_from_loops(%struct.basic_block_def*) #2

declare dso_local void @add_bb_to_loop(%struct.basic_block_def*, %struct.loop*) #2

declare dso_local void @flow_loop_tree_node_remove(%struct.loop*) #2

declare dso_local void @rescan_loop_exit(%struct.edge_def*, i8 zeroext, i8 zeroext) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @scale_loop_frequencies(%struct.loop* %loop, i32 %num, i32 %den) #0 !dbg !2986 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %num.addr = alloca i32, align 4
  %den.addr = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !2989, metadata !DIExpression()), !dbg !2990
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !2991, metadata !DIExpression()), !dbg !2992
  store i32 %den, i32* %den.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %den.addr, metadata !2993, metadata !DIExpression()), !dbg !2994
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !2995, metadata !DIExpression()), !dbg !2996
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !2997
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !2998
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !2999
  %1 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3000
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3001
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !3002
  %3 = load i32, i32* %num_nodes, align 4, !dbg !3002
  %4 = load i32, i32* %num.addr, align 4, !dbg !3003
  %5 = load i32, i32* %den.addr, align 4, !dbg !3004
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %1, i32 %3, i32 %4, i32 %5), !dbg !3005
  %6 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3006
  %7 = bitcast %struct.basic_block_def** %6 to i8*, !dbg !3006
  call void @free(i8* %7), !dbg !3007
  ret void, !dbg !3008
}

declare dso_local %struct.basic_block_def** @get_loop_body(%struct.loop*) #2

declare dso_local void @scale_bbs_frequencies_int(%struct.basic_block_def**, i32, i32, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.edge_def* @create_empty_if_region_on_edge(%struct.edge_def* %entry_edge, %union.tree_node* %condition) #0 !dbg !3009 {
entry:
  %entry_edge.addr = alloca %struct.edge_def*, align 8
  %condition.addr = alloca %union.tree_node*, align 8
  %cond_bb = alloca %struct.basic_block_def*, align 8
  %true_bb = alloca %struct.basic_block_def*, align 8
  %false_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %e_true = alloca %struct.edge_def*, align 8
  %e_false = alloca %struct.edge_def*, align 8
  %exit_edge = alloca %struct.edge_def*, align 8
  %cond_stmt = alloca %union.gimple_statement_d*, align 8
  %simple_cond = alloca %union.tree_node*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp3 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %entry_edge, %struct.edge_def** %entry_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_edge.addr, metadata !3012, metadata !DIExpression()), !dbg !3013
  store %union.tree_node* %condition, %union.tree_node** %condition.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %condition.addr, metadata !3014, metadata !DIExpression()), !dbg !3015
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb, metadata !3016, metadata !DIExpression()), !dbg !3017
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %true_bb, metadata !3018, metadata !DIExpression()), !dbg !3019
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %false_bb, metadata !3020, metadata !DIExpression()), !dbg !3021
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !3022, metadata !DIExpression()), !dbg !3023
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_true, metadata !3024, metadata !DIExpression()), !dbg !3025
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e_false, metadata !3026, metadata !DIExpression()), !dbg !3027
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_edge, metadata !3028, metadata !DIExpression()), !dbg !3029
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_stmt, metadata !3030, metadata !DIExpression()), !dbg !3031
  call void @llvm.dbg.declare(metadata %union.tree_node** %simple_cond, metadata !3032, metadata !DIExpression()), !dbg !3033
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3034, metadata !DIExpression()), !dbg !3041
  %0 = load %struct.edge_def*, %struct.edge_def** %entry_edge.addr, align 8, !dbg !3042
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %0), !dbg !3043
  store %struct.basic_block_def* %call, %struct.basic_block_def** %cond_bb, align 8, !dbg !3044
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3045
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %1), !dbg !3046
  %2 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3046
  %3 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3046
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 8 %3, i64 24, i1 false), !dbg !3046
  %4 = load %union.tree_node*, %union.tree_node** %condition.addr, align 8, !dbg !3047
  %call1 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %4, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !3048
  store %union.tree_node* %call1, %union.tree_node** %simple_cond, align 8, !dbg !3049
  %5 = load %union.tree_node*, %union.tree_node** %simple_cond, align 8, !dbg !3050
  %call2 = call %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node* %5, %union.tree_node* null, %union.tree_node* null), !dbg !3051
  store %union.gimple_statement_d* %call2, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !3052
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3053
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp3, %struct.basic_block_def* %6), !dbg !3054
  %7 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3054
  %8 = bitcast %struct.gimple_stmt_iterator* %tmp3 to i8*, !dbg !3054
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 24, i1 false), !dbg !3054
  %9 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_stmt, align 8, !dbg !3055
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %9, i32 0), !dbg !3056
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3057
  %call4 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %10), !dbg !3058
  %call5 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call4), !dbg !3059
  store %struct.basic_block_def* %call5, %struct.basic_block_def** %join_bb, align 8, !dbg !3060
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3061
  %call6 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %11), !dbg !3062
  store %struct.edge_def* %call6, %struct.edge_def** %e_true, align 8, !dbg !3063
  %12 = load %struct.edge_def*, %struct.edge_def** %e_true, align 8, !dbg !3064
  %call7 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %12), !dbg !3065
  store %struct.basic_block_def* %call7, %struct.basic_block_def** %true_bb, align 8, !dbg !3066
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3067
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !3068
  %call8 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %13, %struct.basic_block_def* %14, i32 0), !dbg !3069
  store %struct.edge_def* %call8, %struct.edge_def** %e_false, align 8, !dbg !3070
  %15 = load %struct.edge_def*, %struct.edge_def** %e_false, align 8, !dbg !3071
  %call9 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %15), !dbg !3072
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %false_bb, align 8, !dbg !3073
  %16 = load %struct.edge_def*, %struct.edge_def** %e_true, align 8, !dbg !3074
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !3075
  %17 = load i32, i32* %flags, align 8, !dbg !3076
  %and = and i32 %17, -2, !dbg !3076
  store i32 %and, i32* %flags, align 8, !dbg !3076
  %18 = load %struct.edge_def*, %struct.edge_def** %e_true, align 8, !dbg !3077
  %flags10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !3078
  %19 = load i32, i32* %flags10, align 8, !dbg !3079
  %or = or i32 %19, 1024, !dbg !3079
  store i32 %or, i32* %flags10, align 8, !dbg !3079
  %20 = load %struct.edge_def*, %struct.edge_def** %e_false, align 8, !dbg !3080
  %flags11 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 7, !dbg !3081
  %21 = load i32, i32* %flags11, align 8, !dbg !3082
  %and12 = and i32 %21, -2, !dbg !3082
  store i32 %and12, i32* %flags11, align 8, !dbg !3082
  %22 = load %struct.edge_def*, %struct.edge_def** %e_false, align 8, !dbg !3083
  %flags13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !3084
  %23 = load i32, i32* %flags13, align 8, !dbg !3085
  %or14 = or i32 %23, 2048, !dbg !3085
  store i32 %or14, i32* %flags13, align 8, !dbg !3085
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3086
  %25 = load %struct.edge_def*, %struct.edge_def** %entry_edge.addr, align 8, !dbg !3087
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 0, !dbg !3088
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3088
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %24, %struct.basic_block_def* %26), !dbg !3089
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %true_bb, align 8, !dbg !3090
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3091
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %27, %struct.basic_block_def* %28), !dbg !3092
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %false_bb, align 8, !dbg !3093
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3094
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %29, %struct.basic_block_def* %30), !dbg !3095
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !3096
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !3097
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %31, %struct.basic_block_def* %32), !dbg !3098
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !3099
  %call15 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %33), !dbg !3100
  store %struct.edge_def* %call15, %struct.edge_def** %exit_edge, align 8, !dbg !3101
  %34 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !3102
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !3104
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3104
  %call16 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %35), !dbg !3105
  %tobool = icmp ne i8 %call16, 0, !dbg !3105
  br i1 %tobool, label %if.then, label %if.end, !dbg !3106

if.then:                                          ; preds = %entry
  %36 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !3107
  %dest17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 1, !dbg !3108
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest17, align 8, !dbg !3108
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !3109
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %37, %struct.basic_block_def* %38), !dbg !3110
  br label %if.end, !dbg !3110

if.end:                                           ; preds = %if.then, %entry
  %39 = load %struct.edge_def*, %struct.edge_def** %exit_edge, align 8, !dbg !3111
  ret %struct.edge_def* %39, !dbg !3112
}

; Function Attrs: noinline nounwind uwtable
define internal void @gsi_last_bb(%struct.gimple_stmt_iterator* noalias sret %agg.result, %struct.basic_block_def* %bb) #0 !dbg !3113 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %seq = alloca %struct.gimple_seq_d*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3116, metadata !DIExpression()), !dbg !3117
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %agg.result, metadata !3118, metadata !DIExpression()), !dbg !3119
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %seq, metadata !3120, metadata !DIExpression()), !dbg !3121
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3122
  %call = call %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %0), !dbg !3123
  store %struct.gimple_seq_d* %call, %struct.gimple_seq_d** %seq, align 8, !dbg !3124
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3125
  %call1 = call %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %1), !dbg !3126
  %ptr = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 0, !dbg !3127
  store %struct.gimple_seq_node_d* %call1, %struct.gimple_seq_node_d** %ptr, align 8, !dbg !3128
  %2 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !3129
  %seq2 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 1, !dbg !3130
  store %struct.gimple_seq_d* %2, %struct.gimple_seq_d** %seq2, align 8, !dbg !3131
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3132
  %bb3 = getelementptr inbounds %struct.gimple_stmt_iterator, %struct.gimple_stmt_iterator* %agg.result, i32 0, i32 2, !dbg !3133
  store %struct.basic_block_def* %3, %struct.basic_block_def** %bb3, align 8, !dbg !3134
  ret void, !dbg !3135
}

declare dso_local %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator*, %union.tree_node*, i8 zeroext, %union.tree_node*, i8 zeroext, i32) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond_from_tree(%union.tree_node*, %union.tree_node*, %union.tree_node*) #2

declare dso_local void @gsi_insert_after(%struct.gimple_stmt_iterator*, %union.gimple_statement_d*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !3136 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3137, metadata !DIExpression()), !dbg !3138
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3139
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !3139
  %tobool = icmp ne i8 %call, 0, !dbg !3139
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !3139

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3139
  br label %cond.end, !dbg !3139

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3139

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3139
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3140
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !3140
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !3140
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !3140
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !3140

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3140
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !3140
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !3140
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !3140
  br label %cond.end5, !dbg !3140

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !3140

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !3140
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !3140
  ret %struct.edge_def* %call7, !dbg !3141
}

declare dso_local %struct.edge_def* @make_edge(%struct.basic_block_def*, %struct.basic_block_def*, i32) #2

declare dso_local void @set_immediate_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @create_empty_loop_on_edge(%struct.edge_def* %entry_edge, %union.tree_node* %initial_value, %union.tree_node* %stride, %union.tree_node* %upper_bound, %union.tree_node* %iv, %union.tree_node** %iv_before, %union.tree_node** %iv_after, %struct.loop* %outer) #0 !dbg !3142 {
entry:
  %entry_edge.addr = alloca %struct.edge_def*, align 8
  %initial_value.addr = alloca %union.tree_node*, align 8
  %stride.addr = alloca %union.tree_node*, align 8
  %upper_bound.addr = alloca %union.tree_node*, align 8
  %iv.addr = alloca %union.tree_node*, align 8
  %iv_before.addr = alloca %union.tree_node**, align 8
  %iv_after.addr = alloca %union.tree_node**, align 8
  %outer.addr = alloca %struct.loop*, align 8
  %loop_header = alloca %struct.basic_block_def*, align 8
  %loop_latch = alloca %struct.basic_block_def*, align 8
  %succ_bb = alloca %struct.basic_block_def*, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %gsi = alloca %struct.gimple_stmt_iterator, align 8
  %stmts = alloca %struct.gimple_seq_d*, align 8
  %cond_expr = alloca %union.gimple_statement_d*, align 8
  %exit_test = alloca %union.tree_node*, align 8
  %exit_e = alloca %struct.edge_def*, align 8
  %prob = alloca i32, align 4
  %tmp = alloca %struct.gimple_stmt_iterator, align 8
  %tmp29 = alloca %struct.gimple_stmt_iterator, align 8
  store %struct.edge_def* %entry_edge, %struct.edge_def** %entry_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry_edge.addr, metadata !3145, metadata !DIExpression()), !dbg !3146
  store %union.tree_node* %initial_value, %union.tree_node** %initial_value.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %initial_value.addr, metadata !3147, metadata !DIExpression()), !dbg !3148
  store %union.tree_node* %stride, %union.tree_node** %stride.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %stride.addr, metadata !3149, metadata !DIExpression()), !dbg !3150
  store %union.tree_node* %upper_bound, %union.tree_node** %upper_bound.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %upper_bound.addr, metadata !3151, metadata !DIExpression()), !dbg !3152
  store %union.tree_node* %iv, %union.tree_node** %iv.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %iv.addr, metadata !3153, metadata !DIExpression()), !dbg !3154
  store %union.tree_node** %iv_before, %union.tree_node*** %iv_before.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %iv_before.addr, metadata !3155, metadata !DIExpression()), !dbg !3156
  store %union.tree_node** %iv_after, %union.tree_node*** %iv_after.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node*** %iv_after.addr, metadata !3157, metadata !DIExpression()), !dbg !3158
  store %struct.loop* %outer, %struct.loop** %outer.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %outer.addr, metadata !3159, metadata !DIExpression()), !dbg !3160
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %loop_header, metadata !3161, metadata !DIExpression()), !dbg !3162
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %loop_latch, metadata !3163, metadata !DIExpression()), !dbg !3164
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ_bb, metadata !3165, metadata !DIExpression()), !dbg !3166
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !3167, metadata !DIExpression()), !dbg !3168
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3169, metadata !DIExpression()), !dbg !3170
  call void @llvm.dbg.declare(metadata %struct.gimple_stmt_iterator* %gsi, metadata !3171, metadata !DIExpression()), !dbg !3172
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %stmts, metadata !3173, metadata !DIExpression()), !dbg !3174
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %cond_expr, metadata !3175, metadata !DIExpression()), !dbg !3176
  call void @llvm.dbg.declare(metadata %union.tree_node** %exit_test, metadata !3177, metadata !DIExpression()), !dbg !3178
  call void @llvm.dbg.declare(metadata %struct.edge_def** %exit_e, metadata !3179, metadata !DIExpression()), !dbg !3180
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !3181, metadata !DIExpression()), !dbg !3182
  %0 = load %struct.edge_def*, %struct.edge_def** %entry_edge.addr, align 8, !dbg !3183
  %tobool = icmp ne %struct.edge_def* %0, null, !dbg !3183
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !3183

land.lhs.true:                                    ; preds = %entry
  %1 = load %union.tree_node*, %union.tree_node** %initial_value.addr, align 8, !dbg !3183
  %tobool1 = icmp ne %union.tree_node* %1, null, !dbg !3183
  br i1 %tobool1, label %land.lhs.true2, label %cond.true, !dbg !3183

land.lhs.true2:                                   ; preds = %land.lhs.true
  %2 = load %union.tree_node*, %union.tree_node** %stride.addr, align 8, !dbg !3183
  %tobool3 = icmp ne %union.tree_node* %2, null, !dbg !3183
  br i1 %tobool3, label %land.lhs.true4, label %cond.true, !dbg !3183

land.lhs.true4:                                   ; preds = %land.lhs.true2
  %3 = load %union.tree_node*, %union.tree_node** %upper_bound.addr, align 8, !dbg !3183
  %tobool5 = icmp ne %union.tree_node* %3, null, !dbg !3183
  br i1 %tobool5, label %land.lhs.true6, label %cond.true, !dbg !3183

land.lhs.true6:                                   ; preds = %land.lhs.true4
  %4 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !3183
  %tobool7 = icmp ne %union.tree_node* %4, null, !dbg !3183
  br i1 %tobool7, label %cond.false, label %cond.true, !dbg !3183

cond.true:                                        ; preds = %land.lhs.true6, %land.lhs.true4, %land.lhs.true2, %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 630, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3183
  br label %cond.end, !dbg !3183

cond.false:                                       ; preds = %land.lhs.true6
  br label %cond.end, !dbg !3183

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3183
  %5 = load %struct.edge_def*, %struct.edge_def** %entry_edge.addr, align 8, !dbg !3184
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !3185
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3185
  store %struct.basic_block_def* %6, %struct.basic_block_def** %pred_bb, align 8, !dbg !3186
  %7 = load %struct.edge_def*, %struct.edge_def** %entry_edge.addr, align 8, !dbg !3187
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %7), !dbg !3188
  store %struct.basic_block_def* %call, %struct.basic_block_def** %loop_header, align 8, !dbg !3189
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3190
  %call8 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %8), !dbg !3191
  %call9 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call8), !dbg !3192
  store %struct.basic_block_def* %call9, %struct.basic_block_def** %loop_latch, align 8, !dbg !3193
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_latch, align 8, !dbg !3194
  %call10 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %9), !dbg !3195
  store %struct.basic_block_def* %call10, %struct.basic_block_def** %succ_bb, align 8, !dbg !3196
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3197
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3198
  %call11 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %10, %struct.basic_block_def* %11, i32 0), !dbg !3199
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_latch, align 8, !dbg !3200
  %call12 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %12), !dbg !3201
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3202
  %call13 = call %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def* %call12, %struct.basic_block_def* %13), !dbg !3203
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3204
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !3205
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %14, %struct.basic_block_def* %15), !dbg !3206
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_latch, align 8, !dbg !3207
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3208
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %16, %struct.basic_block_def* %17), !dbg !3209
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3210
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3211
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %18, %struct.basic_block_def* %19), !dbg !3212
  %call14 = call %struct.loop* @alloc_loop(), !dbg !3213
  store %struct.loop* %call14, %struct.loop** %loop, align 8, !dbg !3214
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3215
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3216
  %header = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 2, !dbg !3217
  store %struct.basic_block_def* %20, %struct.basic_block_def** %header, align 8, !dbg !3218
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_latch, align 8, !dbg !3219
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3220
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 3, !dbg !3221
  store %struct.basic_block_def* %22, %struct.basic_block_def** %latch, align 8, !dbg !3222
  %24 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3223
  %25 = load %struct.loop*, %struct.loop** %outer.addr, align 8, !dbg !3224
  call void @add_loop(%struct.loop* %24, %struct.loop* %25), !dbg !3225
  store i32 5000, i32* %prob, align 4, !dbg !3226
  %26 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3227
  %27 = load i32, i32* %prob, align 4, !dbg !3228
  %sub = sub nsw i32 10000, %27, !dbg !3229
  call void @scale_loop_frequencies(%struct.loop* %26, i32 %sub, i32 10000), !dbg !3230
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3231
  call void @update_dominators_in_loop(%struct.loop* %28), !dbg !3232
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3233
  %call15 = call %struct.edge_def* @single_exit(%struct.loop* %29), !dbg !3234
  store %struct.edge_def* %call15, %struct.edge_def** %exit_e, align 8, !dbg !3235
  %30 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3236
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 7, !dbg !3237
  store i32 2560, i32* %flags, align 8, !dbg !3238
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_latch, align 8, !dbg !3239
  %call16 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %31), !dbg !3240
  %flags17 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call16, i32 0, i32 7, !dbg !3241
  store i32 1024, i32* %flags17, align 8, !dbg !3242
  %32 = load %union.tree_node*, %union.tree_node** %initial_value.addr, align 8, !dbg !3243
  %33 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !3244
  %call18 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %32, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* %33), !dbg !3245
  store %union.tree_node* %call18, %union.tree_node** %initial_value.addr, align 8, !dbg !3246
  %34 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3247
  %tobool19 = icmp ne %struct.gimple_seq_d* %34, null, !dbg !3247
  br i1 %tobool19, label %if.then, label %if.end, !dbg !3249

if.then:                                          ; preds = %cond.end
  %35 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3250
  %call20 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %35), !dbg !3252
  %36 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3253
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %call20, %struct.gimple_seq_d* %36), !dbg !3254
  call void @gsi_commit_edge_inserts(), !dbg !3255
  br label %if.end, !dbg !3256

if.end:                                           ; preds = %if.then, %cond.end
  %37 = load %union.tree_node*, %union.tree_node** %upper_bound.addr, align 8, !dbg !3257
  %call21 = call %union.tree_node* @force_gimple_operand(%union.tree_node* %37, %struct.gimple_seq_d** %stmts, i8 zeroext 1, %union.tree_node* null), !dbg !3258
  store %union.tree_node* %call21, %union.tree_node** %upper_bound.addr, align 8, !dbg !3259
  %38 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3260
  %tobool22 = icmp ne %struct.gimple_seq_d* %38, null, !dbg !3260
  br i1 %tobool22, label %if.then23, label %if.end25, !dbg !3262

if.then23:                                        ; preds = %if.end
  %39 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3263
  %call24 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %39), !dbg !3265
  %40 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %stmts, align 8, !dbg !3266
  call void @gsi_insert_seq_on_edge(%struct.edge_def* %call24, %struct.gimple_seq_d* %40), !dbg !3267
  call void @gsi_commit_edge_inserts(), !dbg !3268
  br label %if.end25, !dbg !3269

if.end25:                                         ; preds = %if.then23, %if.end
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3270
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp, %struct.basic_block_def* %41), !dbg !3271
  %42 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3271
  %43 = bitcast %struct.gimple_stmt_iterator* %tmp to i8*, !dbg !3271
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %42, i8* align 8 %43, i64 24, i1 false), !dbg !3271
  %44 = load %union.tree_node*, %union.tree_node** %initial_value.addr, align 8, !dbg !3272
  %45 = load %union.tree_node*, %union.tree_node** %stride.addr, align 8, !dbg !3273
  %46 = load %union.tree_node*, %union.tree_node** %iv.addr, align 8, !dbg !3274
  %47 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3275
  %48 = load %union.tree_node**, %union.tree_node*** %iv_before.addr, align 8, !dbg !3276
  %49 = load %union.tree_node**, %union.tree_node*** %iv_after.addr, align 8, !dbg !3277
  call void @create_iv(%union.tree_node* %44, %union.tree_node* %45, %union.tree_node* %46, %struct.loop* %47, %struct.gimple_stmt_iterator* %gsi, i8 zeroext 0, %union.tree_node** %48, %union.tree_node** %49), !dbg !3278
  %50 = load %union.tree_node**, %union.tree_node*** %iv_before.addr, align 8, !dbg !3279
  %51 = load %union.tree_node*, %union.tree_node** %50, align 8, !dbg !3280
  %52 = load %union.tree_node*, %union.tree_node** %upper_bound.addr, align 8, !dbg !3281
  %call26 = call %union.gimple_statement_d* @gimple_build_cond(i32 97, %union.tree_node* %51, %union.tree_node* %52, %union.tree_node* null, %union.tree_node* null), !dbg !3282
  store %union.gimple_statement_d* %call26, %union.gimple_statement_d** %cond_expr, align 8, !dbg !3283
  %53 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_expr, align 8, !dbg !3284
  %call27 = call %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %53), !dbg !3285
  store %union.tree_node* %call27, %union.tree_node** %exit_test, align 8, !dbg !3286
  %54 = load %union.tree_node*, %union.tree_node** %exit_test, align 8, !dbg !3287
  %call28 = call %union.tree_node* @force_gimple_operand_gsi(%struct.gimple_stmt_iterator* %gsi, %union.tree_node* %54, i8 zeroext 1, %union.tree_node* null, i8 zeroext 0, i32 0), !dbg !3288
  store %union.tree_node* %call28, %union.tree_node** %exit_test, align 8, !dbg !3289
  %55 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_expr, align 8, !dbg !3290
  %56 = load %union.tree_node*, %union.tree_node** %exit_test, align 8, !dbg !3291
  call void @gimple_cond_set_lhs(%union.gimple_statement_d* %55, %union.tree_node* %56), !dbg !3292
  %57 = load %struct.edge_def*, %struct.edge_def** %exit_e, align 8, !dbg !3293
  %src30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 0, !dbg !3294
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %src30, align 8, !dbg !3294
  call void @gsi_last_bb(%struct.gimple_stmt_iterator* sret %tmp29, %struct.basic_block_def* %58), !dbg !3295
  %59 = bitcast %struct.gimple_stmt_iterator* %gsi to i8*, !dbg !3295
  %60 = bitcast %struct.gimple_stmt_iterator* %tmp29 to i8*, !dbg !3295
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %59, i8* align 8 %60, i64 24, i1 false), !dbg !3295
  %61 = load %union.gimple_statement_d*, %union.gimple_statement_d** %cond_expr, align 8, !dbg !3296
  call void @gsi_insert_after(%struct.gimple_stmt_iterator* %gsi, %union.gimple_statement_d* %61, i32 0), !dbg !3297
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %loop_header, align 8, !dbg !3298
  %call31 = call %struct.edge_def* @split_block_after_labels(%struct.basic_block_def* %62), !dbg !3299
  %63 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3300
  ret %struct.loop* %63, !dbg !3301
}

declare dso_local void @fancy_abort(i8*, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !3302 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !3305, metadata !DIExpression()), !dbg !3306
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !3307
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !3308
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !3309
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3309
  ret %struct.basic_block_def* %1, !dbg !3310
}

declare dso_local %struct.edge_def* @redirect_edge_succ_nodup(%struct.edge_def*, %struct.basic_block_def*) #2

declare dso_local %struct.loop* @alloc_loop() #2

; Function Attrs: noinline nounwind uwtable
define internal void @update_dominators_in_loop(%struct.loop* %loop) #0 !dbg !3311 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %dom_bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %seen = alloca %struct.simple_bitmap_def*, align 8
  %body = alloca %struct.basic_block_def**, align 8
  %i = alloca i32, align 4
  %ldom = alloca %struct.basic_block_def*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3312, metadata !DIExpression()), !dbg !3313
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %dom_bbs, metadata !3314, metadata !DIExpression()), !dbg !3315
  store %struct.VEC_basic_block_heap* null, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !3315
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %seen, metadata !3316, metadata !DIExpression()), !dbg !3317
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %body, metadata !3318, metadata !DIExpression()), !dbg !3319
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3320, metadata !DIExpression()), !dbg !3321
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3322
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !3322
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3322
  %1 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3322
  %x_last_basic_block = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %1, i32 0, i32 5, !dbg !3322
  %2 = load i32, i32* %x_last_basic_block, align 8, !dbg !3322
  %call = call %struct.simple_bitmap_def* @sbitmap_alloc(i32 %2), !dbg !3323
  store %struct.simple_bitmap_def* %call, %struct.simple_bitmap_def** %seen, align 8, !dbg !3324
  %3 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !3325
  call void @sbitmap_zero(%struct.simple_bitmap_def* %3), !dbg !3326
  %4 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3327
  %call1 = call %struct.basic_block_def** @get_loop_body(%struct.loop* %4), !dbg !3328
  store %struct.basic_block_def** %call1, %struct.basic_block_def*** %body, align 8, !dbg !3329
  store i32 0, i32* %i, align 4, !dbg !3330
  br label %for.cond, !dbg !3332

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load i32, i32* %i, align 4, !dbg !3333
  %6 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3335
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %6, i32 0, i32 6, !dbg !3336
  %7 = load i32, i32* %num_nodes, align 4, !dbg !3336
  %cmp = icmp ult i32 %5, %7, !dbg !3337
  br i1 %cmp, label %for.body, label %for.end, !dbg !3338

for.body:                                         ; preds = %for.cond
  %8 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !3339
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3340
  %10 = load i32, i32* %i, align 4, !dbg !3341
  %idxprom = zext i32 %10 to i64, !dbg !3340
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %9, i64 %idxprom, !dbg !3340
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3340
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 9, !dbg !3342
  %12 = load i32, i32* %index, align 8, !dbg !3342
  call void @SET_BIT(%struct.simple_bitmap_def* %8, i32 %12), !dbg !3343
  br label %for.inc, !dbg !3343

for.inc:                                          ; preds = %for.body
  %13 = load i32, i32* %i, align 4, !dbg !3344
  %inc = add i32 %13, 1, !dbg !3344
  store i32 %inc, i32* %i, align 4, !dbg !3344
  br label %for.cond, !dbg !3345, !llvm.loop !3346

for.end:                                          ; preds = %for.cond
  store i32 0, i32* %i, align 4, !dbg !3348
  br label %for.cond2, !dbg !3350

for.cond2:                                        ; preds = %for.inc21, %for.end
  %14 = load i32, i32* %i, align 4, !dbg !3351
  %15 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3353
  %num_nodes3 = getelementptr inbounds %struct.loop, %struct.loop* %15, i32 0, i32 6, !dbg !3354
  %16 = load i32, i32* %num_nodes3, align 4, !dbg !3354
  %cmp4 = icmp ult i32 %14, %16, !dbg !3355
  br i1 %cmp4, label %for.body5, label %for.end23, !dbg !3356

for.body5:                                        ; preds = %for.cond2
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %ldom, metadata !3357, metadata !DIExpression()), !dbg !3359
  %17 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3360
  %18 = load i32, i32* %i, align 4, !dbg !3362
  %idxprom6 = zext i32 %18 to i64, !dbg !3360
  %arrayidx7 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %17, i64 %idxprom6, !dbg !3360
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx7, align 8, !dbg !3360
  %call8 = call %struct.basic_block_def* @first_dom_son(i32 1, %struct.basic_block_def* %19), !dbg !3363
  store %struct.basic_block_def* %call8, %struct.basic_block_def** %ldom, align 8, !dbg !3364
  br label %for.cond9, !dbg !3365

for.cond9:                                        ; preds = %for.inc18, %for.body5
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3366
  %tobool = icmp ne %struct.basic_block_def* %20, null, !dbg !3368
  br i1 %tobool, label %for.body10, label %for.end20, !dbg !3368

for.body10:                                       ; preds = %for.cond9
  %21 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !3369
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %21, i32 0, i32 3, !dbg !3369
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3369
  %index11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 9, !dbg !3369
  %23 = load i32, i32* %index11, align 8, !dbg !3369
  %div = udiv i32 %23, 64, !dbg !3369
  %idxprom12 = zext i32 %div to i64, !dbg !3369
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom12, !dbg !3369
  %24 = load i64, i64* %arrayidx13, align 8, !dbg !3369
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3369
  %index14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %25, i32 0, i32 9, !dbg !3369
  %26 = load i32, i32* %index14, align 8, !dbg !3369
  %rem = urem i32 %26, 64, !dbg !3369
  %sh_prom = zext i32 %rem to i64, !dbg !3369
  %shr = lshr i64 %24, %sh_prom, !dbg !3369
  %and = and i64 %shr, 1, !dbg !3369
  %tobool15 = icmp ne i64 %and, 0, !dbg !3369
  br i1 %tobool15, label %if.end, label %if.then, !dbg !3371

if.then:                                          ; preds = %for.body10
  %27 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !3372
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3374
  %index16 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 9, !dbg !3375
  %29 = load i32, i32* %index16, align 8, !dbg !3375
  call void @SET_BIT(%struct.simple_bitmap_def* %27, i32 %29), !dbg !3376
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3377
  %call17 = call %struct.basic_block_def** @VEC_basic_block_heap_safe_push(%struct.VEC_basic_block_heap** %dom_bbs, %struct.basic_block_def* %30), !dbg !3377
  br label %if.end, !dbg !3378

if.end:                                           ; preds = %if.then, %for.body10
  br label %for.inc18, !dbg !3369

for.inc18:                                        ; preds = %if.end
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %ldom, align 8, !dbg !3379
  %call19 = call %struct.basic_block_def* @next_dom_son(i32 1, %struct.basic_block_def* %31), !dbg !3380
  store %struct.basic_block_def* %call19, %struct.basic_block_def** %ldom, align 8, !dbg !3381
  br label %for.cond9, !dbg !3382, !llvm.loop !3383

for.end20:                                        ; preds = %for.cond9
  br label %for.inc21, !dbg !3385

for.inc21:                                        ; preds = %for.end20
  %32 = load i32, i32* %i, align 4, !dbg !3386
  %inc22 = add i32 %32, 1, !dbg !3386
  store i32 %inc22, i32* %i, align 4, !dbg !3386
  br label %for.cond2, !dbg !3387, !llvm.loop !3388

for.end23:                                        ; preds = %for.cond2
  %33 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !3390
  call void @iterate_fix_dominators(i32 1, %struct.VEC_basic_block_heap* %33, i8 zeroext 0), !dbg !3391
  %34 = load %struct.basic_block_def**, %struct.basic_block_def*** %body, align 8, !dbg !3392
  %35 = bitcast %struct.basic_block_def** %34 to i8*, !dbg !3392
  call void @free(i8* %35), !dbg !3393
  %36 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %seen, align 8, !dbg !3394
  %37 = bitcast %struct.simple_bitmap_def* %36 to i8*, !dbg !3394
  call void @free(i8* %37), !dbg !3395
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %dom_bbs), !dbg !3396
  ret void, !dbg !3397
}

declare dso_local %struct.edge_def* @single_exit(%struct.loop*) #2

declare dso_local %union.tree_node* @force_gimple_operand(%union.tree_node*, %struct.gimple_seq_d**, i8 zeroext, %union.tree_node*) #2

declare dso_local void @gsi_insert_seq_on_edge(%struct.edge_def*, %struct.gimple_seq_d*) #2

declare dso_local %struct.edge_def* @loop_preheader_edge(%struct.loop*) #2

declare dso_local void @gsi_commit_edge_inserts() #2

declare dso_local void @create_iv(%union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.loop*, %struct.gimple_stmt_iterator*, i8 zeroext, %union.tree_node**, %union.tree_node**) #2

declare dso_local %union.gimple_statement_d* @gimple_build_cond(i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*) #2

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_cond_lhs(%union.gimple_statement_d* %gs) #0 !dbg !3398 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3402, metadata !DIExpression()), !dbg !3403
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3404
  %call = call %union.tree_node* @gimple_op(%union.gimple_statement_d* %0, i32 0), !dbg !3405
  ret %union.tree_node* %call, !dbg !3406
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_cond_set_lhs(%union.gimple_statement_d* %gs, %union.tree_node* %lhs) #0 !dbg !3407 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %lhs.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !3410, metadata !DIExpression()), !dbg !3411
  store %union.tree_node* %lhs, %union.tree_node** %lhs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %lhs.addr, metadata !3412, metadata !DIExpression()), !dbg !3413
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !3414
  %1 = load %union.tree_node*, %union.tree_node** %lhs.addr, align 8, !dbg !3415
  call void @gimple_set_op(%union.gimple_statement_d* %0, i32 0, %union.tree_node* %1), !dbg !3416
  ret void, !dbg !3417
}

declare dso_local %struct.edge_def* @split_block_after_labels(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @loopify(%struct.edge_def* %latch_edge, %struct.edge_def* %header_edge, %struct.basic_block_def* %switch_bb, %struct.edge_def* %true_edge, %struct.edge_def* %false_edge, i8 zeroext %redirect_all_edges, i32 %true_scale, i32 %false_scale) #0 !dbg !3418 {
entry:
  %latch_edge.addr = alloca %struct.edge_def*, align 8
  %header_edge.addr = alloca %struct.edge_def*, align 8
  %switch_bb.addr = alloca %struct.basic_block_def*, align 8
  %true_edge.addr = alloca %struct.edge_def*, align 8
  %false_edge.addr = alloca %struct.edge_def*, align 8
  %redirect_all_edges.addr = alloca i8, align 1
  %true_scale.addr = alloca i32, align 4
  %false_scale.addr = alloca i32, align 4
  %succ_bb = alloca %struct.basic_block_def*, align 8
  %pred_bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %outer = alloca %struct.loop*, align 8
  %freq = alloca i32, align 4
  %cnt = alloca i64, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %latch_edge, %struct.edge_def** %latch_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch_edge.addr, metadata !3421, metadata !DIExpression()), !dbg !3422
  store %struct.edge_def* %header_edge, %struct.edge_def** %header_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %header_edge.addr, metadata !3423, metadata !DIExpression()), !dbg !3424
  store %struct.basic_block_def* %switch_bb, %struct.basic_block_def** %switch_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %switch_bb.addr, metadata !3425, metadata !DIExpression()), !dbg !3426
  store %struct.edge_def* %true_edge, %struct.edge_def** %true_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge.addr, metadata !3427, metadata !DIExpression()), !dbg !3428
  store %struct.edge_def* %false_edge, %struct.edge_def** %false_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge.addr, metadata !3429, metadata !DIExpression()), !dbg !3430
  store i8 %redirect_all_edges, i8* %redirect_all_edges.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %redirect_all_edges.addr, metadata !3431, metadata !DIExpression()), !dbg !3432
  store i32 %true_scale, i32* %true_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %true_scale.addr, metadata !3433, metadata !DIExpression()), !dbg !3434
  store i32 %false_scale, i32* %false_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %false_scale.addr, metadata !3435, metadata !DIExpression()), !dbg !3436
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %succ_bb, metadata !3437, metadata !DIExpression()), !dbg !3438
  %0 = load %struct.edge_def*, %struct.edge_def** %latch_edge.addr, align 8, !dbg !3439
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !3440
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3440
  store %struct.basic_block_def* %1, %struct.basic_block_def** %succ_bb, align 8, !dbg !3438
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %pred_bb, metadata !3441, metadata !DIExpression()), !dbg !3442
  %2 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3443
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 0, !dbg !3444
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3444
  store %struct.basic_block_def* %3, %struct.basic_block_def** %pred_bb, align 8, !dbg !3442
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !3445, metadata !DIExpression()), !dbg !3446
  %call = call %struct.loop* @alloc_loop(), !dbg !3447
  store %struct.loop* %call, %struct.loop** %loop, align 8, !dbg !3446
  call void @llvm.dbg.declare(metadata %struct.loop** %outer, metadata !3448, metadata !DIExpression()), !dbg !3449
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3450
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 3, !dbg !3451
  %5 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !3451
  %call1 = call %struct.loop* @loop_outer(%struct.loop* %5), !dbg !3452
  store %struct.loop* %call1, %struct.loop** %outer, align 8, !dbg !3449
  call void @llvm.dbg.declare(metadata i32* %freq, metadata !3453, metadata !DIExpression()), !dbg !3454
  call void @llvm.dbg.declare(metadata i64* %cnt, metadata !3455, metadata !DIExpression()), !dbg !3456
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !3457, metadata !DIExpression()), !dbg !3458
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !3459, metadata !DIExpression()), !dbg !3460
  %6 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3461
  %dest2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 1, !dbg !3462
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dest2, align 8, !dbg !3462
  %8 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3463
  %header = getelementptr inbounds %struct.loop, %struct.loop* %8, i32 0, i32 2, !dbg !3464
  store %struct.basic_block_def* %7, %struct.basic_block_def** %header, align 8, !dbg !3465
  %9 = load %struct.edge_def*, %struct.edge_def** %latch_edge.addr, align 8, !dbg !3466
  %src3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 0, !dbg !3467
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %src3, align 8, !dbg !3467
  %11 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3468
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %11, i32 0, i32 3, !dbg !3469
  store %struct.basic_block_def* %10, %struct.basic_block_def** %latch, align 8, !dbg !3470
  %12 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3471
  %src4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 0, !dbg !3471
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %src4, align 8, !dbg !3471
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 11, !dbg !3471
  %14 = load i32, i32* %frequency, align 8, !dbg !3471
  %15 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3471
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 8, !dbg !3471
  %16 = load i32, i32* %probability, align 4, !dbg !3471
  %mul = mul nsw i32 %14, %16, !dbg !3471
  %add = add nsw i32 %mul, 5000, !dbg !3471
  %div = sdiv i32 %add, 10000, !dbg !3471
  store i32 %div, i32* %freq, align 4, !dbg !3472
  %17 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3473
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 9, !dbg !3474
  %18 = load i64, i64* %count, align 8, !dbg !3474
  store i64 %18, i64* %cnt, align 8, !dbg !3475
  %19 = load %struct.edge_def*, %struct.edge_def** %latch_edge.addr, align 8, !dbg !3476
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3477
  %header5 = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 2, !dbg !3478
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %header5, align 8, !dbg !3478
  call void @loop_redirect_edge(%struct.edge_def* %19, %struct.basic_block_def* %21), !dbg !3479
  %22 = load %struct.edge_def*, %struct.edge_def** %true_edge.addr, align 8, !dbg !3480
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3481
  call void @loop_redirect_edge(%struct.edge_def* %22, %struct.basic_block_def* %23), !dbg !3482
  %24 = load i8, i8* %redirect_all_edges.addr, align 1, !dbg !3483
  %tobool = icmp ne i8 %24, 0, !dbg !3483
  br i1 %tobool, label %if.then, label %if.end, !dbg !3485

if.then:                                          ; preds = %entry
  %25 = load %struct.edge_def*, %struct.edge_def** %header_edge.addr, align 8, !dbg !3486
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3488
  call void @loop_redirect_edge(%struct.edge_def* %25, %struct.basic_block_def* %26), !dbg !3489
  %27 = load %struct.edge_def*, %struct.edge_def** %false_edge.addr, align 8, !dbg !3490
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3491
  %header6 = getelementptr inbounds %struct.loop, %struct.loop* %28, i32 0, i32 2, !dbg !3492
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %header6, align 8, !dbg !3492
  call void @loop_redirect_edge(%struct.edge_def* %27, %struct.basic_block_def* %29), !dbg !3493
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3494
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %pred_bb, align 8, !dbg !3495
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %30, %struct.basic_block_def* %31), !dbg !3496
  %32 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3497
  %header7 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 2, !dbg !3498
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %header7, align 8, !dbg !3498
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3499
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %33, %struct.basic_block_def* %34), !dbg !3500
  br label %if.end, !dbg !3501

if.end:                                           ; preds = %if.then, %entry
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3502
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3503
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %35, %struct.basic_block_def* %36), !dbg !3504
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3505
  %38 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !3506
  call void @add_loop(%struct.loop* %37, %struct.loop* %38), !dbg !3507
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3508
  %loop_father8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 3, !dbg !3510
  %40 = load %struct.loop*, %struct.loop** %loop_father8, align 8, !dbg !3510
  %tobool9 = icmp ne %struct.loop* %40, null, !dbg !3508
  br i1 %tobool9, label %if.then10, label %if.end11, !dbg !3511

if.then10:                                        ; preds = %if.end
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3512
  call void @remove_bb_from_loops(%struct.basic_block_def* %41), !dbg !3513
  br label %if.end11, !dbg !3513

if.end11:                                         ; preds = %if.then10, %if.end
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3514
  %43 = load %struct.loop*, %struct.loop** %outer, align 8, !dbg !3515
  call void @add_bb_to_loop(%struct.basic_block_def* %42, %struct.loop* %43), !dbg !3516
  %44 = load i8, i8* %redirect_all_edges.addr, align 1, !dbg !3517
  %tobool12 = icmp ne i8 %44, 0, !dbg !3517
  br i1 %tobool12, label %if.then13, label %if.end24, !dbg !3519

if.then13:                                        ; preds = %if.end11
  %45 = load i32, i32* %freq, align 4, !dbg !3520
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3522
  %frequency14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 11, !dbg !3523
  store i32 %45, i32* %frequency14, align 8, !dbg !3524
  %47 = load i64, i64* %cnt, align 8, !dbg !3525
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3526
  %count15 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 8, !dbg !3527
  store i64 %47, i64* %count15, align 8, !dbg !3528
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3529
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %49, i32 0, i32 1, !dbg !3529
  %call16 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !3529
  %50 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !3529
  %51 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 0, !dbg !3529
  %52 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 0, !dbg !3529
  store i32 %52, i32* %51, align 8, !dbg !3529
  %53 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %50, i32 0, i32 1, !dbg !3529
  %54 = extractvalue { i32, %struct.VEC_edge_gc** } %call16, 1, !dbg !3529
  store %struct.VEC_edge_gc** %54, %struct.VEC_edge_gc*** %53, align 8, !dbg !3529
  %55 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !3529
  %56 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !3529
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %55, i8* align 8 %56, i64 16, i1 false), !dbg !3529
  br label %for.cond, !dbg !3529

for.cond:                                         ; preds = %for.inc, %if.then13
  %57 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !3531
  %58 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %57, i32 0, i32 0, !dbg !3531
  %59 = load i32, i32* %58, align 8, !dbg !3531
  %60 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %57, i32 0, i32 1, !dbg !3531
  %61 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %60, align 8, !dbg !3531
  %call17 = call zeroext i8 @ei_cond(i32 %59, %struct.VEC_edge_gc** %61, %struct.edge_def** %e), !dbg !3531
  %tobool18 = icmp ne i8 %call17, 0, !dbg !3529
  br i1 %tobool18, label %for.body, label %for.end, !dbg !3529

for.body:                                         ; preds = %for.cond
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %switch_bb.addr, align 8, !dbg !3533
  %count19 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 8, !dbg !3535
  %63 = load i64, i64* %count19, align 8, !dbg !3535
  %64 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3536
  %probability20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 8, !dbg !3537
  %65 = load i32, i32* %probability20, align 4, !dbg !3537
  %conv = sext i32 %65 to i64, !dbg !3536
  %mul21 = mul nsw i64 %63, %conv, !dbg !3538
  %div22 = sdiv i64 %mul21, 10000, !dbg !3539
  %66 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !3540
  %count23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %66, i32 0, i32 9, !dbg !3541
  store i64 %div22, i64* %count23, align 8, !dbg !3542
  br label %for.inc, !dbg !3543

for.inc:                                          ; preds = %for.body
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !3531
  br label %for.cond, !dbg !3531, !llvm.loop !3544

for.end:                                          ; preds = %for.cond
  br label %if.end24, !dbg !3546

if.end24:                                         ; preds = %for.end, %if.end11
  %67 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3547
  %68 = load i32, i32* %false_scale.addr, align 4, !dbg !3548
  call void @scale_loop_frequencies(%struct.loop* %67, i32 %68, i32 10000), !dbg !3549
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %succ_bb, align 8, !dbg !3550
  %loop_father25 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 3, !dbg !3551
  %70 = load %struct.loop*, %struct.loop** %loop_father25, align 8, !dbg !3551
  %71 = load i32, i32* %true_scale.addr, align 4, !dbg !3552
  call void @scale_loop_frequencies(%struct.loop* %70, i32 %71, i32 10000), !dbg !3553
  %72 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3554
  call void @update_dominators_in_loop(%struct.loop* %72), !dbg !3555
  %73 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !3556
  ret %struct.loop* %73, !dbg !3557
}

; Function Attrs: noinline nounwind uwtable
define internal void @loop_redirect_edge(%struct.edge_def* %e, %struct.basic_block_def* %dest) #0 !dbg !3558 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %dest.addr = alloca %struct.basic_block_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3561, metadata !DIExpression()), !dbg !3562
  store %struct.basic_block_def* %dest, %struct.basic_block_def** %dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dest.addr, metadata !3563, metadata !DIExpression()), !dbg !3564
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3565
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !3567
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !3567
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !3568
  %cmp = icmp eq %struct.basic_block_def* %1, %2, !dbg !3569
  br i1 %cmp, label %if.then, label %if.end, !dbg !3570

if.then:                                          ; preds = %entry
  br label %return, !dbg !3571

if.end:                                           ; preds = %entry
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3572
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest.addr, align 8, !dbg !3573
  %call = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %3, %struct.basic_block_def* %4), !dbg !3574
  br label %return, !dbg !3575

return:                                           ; preds = %if.end, %if.then
  ret void, !dbg !3575
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @duplicate_loop(%struct.loop* %loop, %struct.loop* %target) #0 !dbg !3576 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %target.addr = alloca %struct.loop*, align 8
  %cloop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3579, metadata !DIExpression()), !dbg !3580
  store %struct.loop* %target, %struct.loop** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %target.addr, metadata !3581, metadata !DIExpression()), !dbg !3582
  call void @llvm.dbg.declare(metadata %struct.loop** %cloop, metadata !3583, metadata !DIExpression()), !dbg !3584
  %call = call %struct.loop* @alloc_loop(), !dbg !3585
  store %struct.loop* %call, %struct.loop** %cloop, align 8, !dbg !3586
  %0 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3587
  call void @place_new_loop(%struct.loop* %0), !dbg !3588
  %1 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3589
  %2 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3590
  call void @set_loop_copy(%struct.loop* %1, %struct.loop* %2), !dbg !3591
  %3 = load %struct.loop*, %struct.loop** %target.addr, align 8, !dbg !3592
  %4 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3593
  call void @flow_loop_tree_node_add(%struct.loop* %3, %struct.loop* %4), !dbg !3594
  %5 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3595
  ret %struct.loop* %5, !dbg !3596
}

declare dso_local void @set_loop_copy(%struct.loop*, %struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @duplicate_subloops(%struct.loop* %loop, %struct.loop* %target) #0 !dbg !3597 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %target.addr = alloca %struct.loop*, align 8
  %aloop = alloca %struct.loop*, align 8
  %cloop = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3598, metadata !DIExpression()), !dbg !3599
  store %struct.loop* %target, %struct.loop** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %target.addr, metadata !3600, metadata !DIExpression()), !dbg !3601
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3602, metadata !DIExpression()), !dbg !3603
  call void @llvm.dbg.declare(metadata %struct.loop** %cloop, metadata !3604, metadata !DIExpression()), !dbg !3605
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3606
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 8, !dbg !3608
  %1 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !3608
  store %struct.loop* %1, %struct.loop** %aloop, align 8, !dbg !3609
  br label %for.cond, !dbg !3610

for.cond:                                         ; preds = %for.inc, %entry
  %2 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3611
  %tobool = icmp ne %struct.loop* %2, null, !dbg !3613
  br i1 %tobool, label %for.body, label %for.end, !dbg !3613

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3614
  %4 = load %struct.loop*, %struct.loop** %target.addr, align 8, !dbg !3616
  %call = call %struct.loop* @duplicate_loop(%struct.loop* %3, %struct.loop* %4), !dbg !3617
  store %struct.loop* %call, %struct.loop** %cloop, align 8, !dbg !3618
  %5 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3619
  %6 = load %struct.loop*, %struct.loop** %cloop, align 8, !dbg !3620
  call void @duplicate_subloops(%struct.loop* %5, %struct.loop* %6), !dbg !3621
  br label %for.inc, !dbg !3622

for.inc:                                          ; preds = %for.body
  %7 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !3623
  %next = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 9, !dbg !3624
  %8 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !3624
  store %struct.loop* %8, %struct.loop** %aloop, align 8, !dbg !3625
  br label %for.cond, !dbg !3626, !llvm.loop !3627

for.end:                                          ; preds = %for.cond
  ret void, !dbg !3629
}

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @can_duplicate_loop_p(%struct.loop* %loop) #0 !dbg !3630 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %ret = alloca i32, align 4
  %bbs = alloca %struct.basic_block_def**, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3633, metadata !DIExpression()), !dbg !3634
  call void @llvm.dbg.declare(metadata i32* %ret, metadata !3635, metadata !DIExpression()), !dbg !3636
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3637, metadata !DIExpression()), !dbg !3638
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3639
  %call = call %struct.basic_block_def** @get_loop_body(%struct.loop* %0), !dbg !3640
  store %struct.basic_block_def** %call, %struct.basic_block_def*** %bbs, align 8, !dbg !3638
  %1 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3641
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3642
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 6, !dbg !3643
  %3 = load i32, i32* %num_nodes, align 4, !dbg !3643
  %call1 = call zeroext i8 @can_copy_bbs_p(%struct.basic_block_def** %1, i32 %3), !dbg !3644
  %conv = zext i8 %call1 to i32, !dbg !3644
  store i32 %conv, i32* %ret, align 4, !dbg !3645
  %4 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3646
  %5 = bitcast %struct.basic_block_def** %4 to i8*, !dbg !3646
  call void @free(i8* %5), !dbg !3647
  %6 = load i32, i32* %ret, align 4, !dbg !3648
  %conv2 = trunc i32 %6 to i8, !dbg !3648
  ret i8 %conv2, !dbg !3649
}

declare dso_local zeroext i8 @can_copy_bbs_p(%struct.basic_block_def**, i32) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @duplicate_loop_to_header_edge(%struct.loop* %loop, %struct.edge_def* %e, i32 %ndupl, %struct.simple_bitmap_def* %wont_exit, %struct.edge_def* %orig, %struct.VEC_edge_heap** %to_remove, i32 %flags) #0 !dbg !3650 {
entry:
  %retval = alloca i8, align 1
  %loop.addr = alloca %struct.loop*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %ndupl.addr = alloca i32, align 4
  %wont_exit.addr = alloca %struct.simple_bitmap_def*, align 8
  %orig.addr = alloca %struct.edge_def*, align 8
  %to_remove.addr = alloca %struct.VEC_edge_heap**, align 8
  %flags.addr = alloca i32, align 4
  %target = alloca %struct.loop*, align 8
  %aloop = alloca %struct.loop*, align 8
  %orig_loops = alloca %struct.loop**, align 8
  %n_orig_loops = alloca i32, align 4
  %header = alloca %struct.basic_block_def*, align 8
  %latch = alloca %struct.basic_block_def*, align 8
  %new_bbs = alloca %struct.basic_block_def**, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %first_active = alloca %struct.basic_block_def**, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %first_active_latch = alloca %struct.basic_block_def*, align 8
  %ae = alloca %struct.edge_def*, align 8
  %latch_edge = alloca %struct.edge_def*, align 8
  %spec_edges = alloca [2 x %struct.edge_def*], align 16
  %new_spec_edges = alloca [2 x %struct.edge_def*], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %n = alloca i32, align 4
  %is_latch = alloca i32, align 4
  %scale_act = alloca i32, align 4
  %scale_step = alloca i32*, align 8
  %scale_main = alloca i32, align 4
  %scale_after_exit = alloca i32, align 4
  %p = alloca i32, align 4
  %freq_in = alloca i32, align 4
  %freq_le = alloca i32, align 4
  %freq_out_orig = alloca i32, align 4
  %prob_pass_thru = alloca i32, align 4
  %prob_pass_wont_exit = alloca i32, align 4
  %prob_pass_main = alloca i32, align 4
  %add_irreducible_flag = alloca i32, align 4
  %place_after = alloca %struct.basic_block_def*, align 8
  %bbs_to_scale = alloca %struct.bitmap_head_def*, align 8
  %bi = alloca %struct.bitmap_iterator, align 8
  %wanted_freq = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %dominated = alloca %struct.basic_block_def*, align 8
  %dom_bb = alloca %struct.basic_block_def*, align 8
  %dom_bbs = alloca %struct.VEC_basic_block_heap*, align 8
  %j507 = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !3654, metadata !DIExpression()), !dbg !3655
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !3656, metadata !DIExpression()), !dbg !3657
  store i32 %ndupl, i32* %ndupl.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ndupl.addr, metadata !3658, metadata !DIExpression()), !dbg !3659
  store %struct.simple_bitmap_def* %wont_exit, %struct.simple_bitmap_def** %wont_exit.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %wont_exit.addr, metadata !3660, metadata !DIExpression()), !dbg !3661
  store %struct.edge_def* %orig, %struct.edge_def** %orig.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %orig.addr, metadata !3662, metadata !DIExpression()), !dbg !3663
  store %struct.VEC_edge_heap** %to_remove, %struct.VEC_edge_heap*** %to_remove.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %to_remove.addr, metadata !3664, metadata !DIExpression()), !dbg !3665
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !3666, metadata !DIExpression()), !dbg !3667
  call void @llvm.dbg.declare(metadata %struct.loop** %target, metadata !3668, metadata !DIExpression()), !dbg !3669
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !3670, metadata !DIExpression()), !dbg !3671
  call void @llvm.dbg.declare(metadata %struct.loop*** %orig_loops, metadata !3672, metadata !DIExpression()), !dbg !3673
  call void @llvm.dbg.declare(metadata i32* %n_orig_loops, metadata !3674, metadata !DIExpression()), !dbg !3675
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %header, metadata !3676, metadata !DIExpression()), !dbg !3677
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3678
  %header1 = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !3679
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header1, align 8, !dbg !3679
  store %struct.basic_block_def* %1, %struct.basic_block_def** %header, align 8, !dbg !3677
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %latch, metadata !3680, metadata !DIExpression()), !dbg !3681
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3682
  %latch2 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 3, !dbg !3683
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %latch2, align 8, !dbg !3683
  store %struct.basic_block_def* %3, %struct.basic_block_def** %latch, align 8, !dbg !3681
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %new_bbs, metadata !3684, metadata !DIExpression()), !dbg !3685
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !3686, metadata !DIExpression()), !dbg !3687
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %first_active, metadata !3688, metadata !DIExpression()), !dbg !3689
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !3690, metadata !DIExpression()), !dbg !3691
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3692, metadata !DIExpression()), !dbg !3693
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_active_latch, metadata !3694, metadata !DIExpression()), !dbg !3695
  store %struct.basic_block_def* null, %struct.basic_block_def** %first_active_latch, align 8, !dbg !3695
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ae, metadata !3696, metadata !DIExpression()), !dbg !3697
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch_edge, metadata !3698, metadata !DIExpression()), !dbg !3699
  call void @llvm.dbg.declare(metadata [2 x %struct.edge_def*]* %spec_edges, metadata !3700, metadata !DIExpression()), !dbg !3702
  call void @llvm.dbg.declare(metadata [2 x %struct.edge_def*]* %new_spec_edges, metadata !3703, metadata !DIExpression()), !dbg !3704
  call void @llvm.dbg.declare(metadata i32* %i, metadata !3705, metadata !DIExpression()), !dbg !3706
  call void @llvm.dbg.declare(metadata i32* %j, metadata !3707, metadata !DIExpression()), !dbg !3708
  call void @llvm.dbg.declare(metadata i32* %n, metadata !3709, metadata !DIExpression()), !dbg !3710
  call void @llvm.dbg.declare(metadata i32* %is_latch, metadata !3711, metadata !DIExpression()), !dbg !3712
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !3713
  %5 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3714
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 0, !dbg !3715
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !3715
  %cmp = icmp eq %struct.basic_block_def* %4, %6, !dbg !3716
  %conv = zext i1 %cmp to i32, !dbg !3716
  store i32 %conv, i32* %is_latch, align 4, !dbg !3712
  call void @llvm.dbg.declare(metadata i32* %scale_act, metadata !3717, metadata !DIExpression()), !dbg !3718
  store i32 0, i32* %scale_act, align 4, !dbg !3718
  call void @llvm.dbg.declare(metadata i32** %scale_step, metadata !3719, metadata !DIExpression()), !dbg !3720
  store i32* null, i32** %scale_step, align 8, !dbg !3720
  call void @llvm.dbg.declare(metadata i32* %scale_main, metadata !3721, metadata !DIExpression()), !dbg !3722
  store i32 0, i32* %scale_main, align 4, !dbg !3722
  call void @llvm.dbg.declare(metadata i32* %scale_after_exit, metadata !3723, metadata !DIExpression()), !dbg !3724
  store i32 0, i32* %scale_after_exit, align 4, !dbg !3724
  call void @llvm.dbg.declare(metadata i32* %p, metadata !3725, metadata !DIExpression()), !dbg !3726
  call void @llvm.dbg.declare(metadata i32* %freq_in, metadata !3727, metadata !DIExpression()), !dbg !3728
  call void @llvm.dbg.declare(metadata i32* %freq_le, metadata !3729, metadata !DIExpression()), !dbg !3730
  call void @llvm.dbg.declare(metadata i32* %freq_out_orig, metadata !3731, metadata !DIExpression()), !dbg !3732
  call void @llvm.dbg.declare(metadata i32* %prob_pass_thru, metadata !3733, metadata !DIExpression()), !dbg !3734
  call void @llvm.dbg.declare(metadata i32* %prob_pass_wont_exit, metadata !3735, metadata !DIExpression()), !dbg !3736
  call void @llvm.dbg.declare(metadata i32* %prob_pass_main, metadata !3737, metadata !DIExpression()), !dbg !3738
  call void @llvm.dbg.declare(metadata i32* %add_irreducible_flag, metadata !3739, metadata !DIExpression()), !dbg !3740
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %place_after, metadata !3741, metadata !DIExpression()), !dbg !3742
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %bbs_to_scale, metadata !3743, metadata !DIExpression()), !dbg !3744
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !3744
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !3745, metadata !DIExpression()), !dbg !3753
  %7 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3754
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 1, !dbg !3754
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !3754
  %9 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3754
  %header3 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 2, !dbg !3754
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %header3, align 8, !dbg !3754
  %cmp4 = icmp eq %struct.basic_block_def* %8, %10, !dbg !3754
  br i1 %cmp4, label %cond.false, label %cond.true, !dbg !3754

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 998, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3754
  br label %cond.end, !dbg !3754

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !3754

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !3754
  %11 = load i32, i32* %ndupl.addr, align 4, !dbg !3755
  %cmp6 = icmp ugt i32 %11, 0, !dbg !3755
  br i1 %cmp6, label %cond.false9, label %cond.true8, !dbg !3755

cond.true8:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 999, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3755
  br label %cond.end10, !dbg !3755

cond.false9:                                      ; preds = %cond.end
  br label %cond.end10, !dbg !3755

cond.end10:                                       ; preds = %cond.false9, %cond.true8
  %cond11 = phi i32 [ 0, %cond.true8 ], [ 0, %cond.false9 ], !dbg !3755
  %12 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3756
  %tobool = icmp ne %struct.edge_def* %12, null, !dbg !3756
  br i1 %tobool, label %if.then, label %if.end, !dbg !3758

if.then:                                          ; preds = %cond.end10
  %13 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3759
  %14 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3759
  %src12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !3759
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src12, align 8, !dbg !3759
  %call = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %13, %struct.basic_block_def* %15), !dbg !3759
  %tobool13 = icmp ne i8 %call, 0, !dbg !3759
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !3759

cond.true14:                                      ; preds = %if.then
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1004, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3759
  br label %cond.end16, !dbg !3759

cond.false15:                                     ; preds = %if.then
  br label %cond.end16, !dbg !3759

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 0, %cond.true14 ], [ 0, %cond.false15 ], !dbg !3759
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3761
  %17 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3761
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %17, i32 0, i32 1, !dbg !3761
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !3761
  %call19 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %16, %struct.basic_block_def* %18), !dbg !3761
  %tobool20 = icmp ne i8 %call19, 0, !dbg !3761
  br i1 %tobool20, label %cond.true21, label %cond.false22, !dbg !3761

cond.true21:                                      ; preds = %cond.end16
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1005, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3761
  br label %cond.end23, !dbg !3761

cond.false22:                                     ; preds = %cond.end16
  br label %cond.end23, !dbg !3761

cond.end23:                                       ; preds = %cond.false22, %cond.true21
  %cond24 = phi i32 [ 0, %cond.true21 ], [ 0, %cond.false22 ], !dbg !3761
  br label %if.end, !dbg !3762

if.end:                                           ; preds = %cond.end23, %cond.end10
  %19 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3763
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 6, !dbg !3764
  %20 = load i32, i32* %num_nodes, align 4, !dbg !3764
  store i32 %20, i32* %n, align 4, !dbg !3765
  %21 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3766
  %call25 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %21), !dbg !3767
  store %struct.basic_block_def** %call25, %struct.basic_block_def*** %bbs, align 8, !dbg !3768
  %22 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3769
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %22, i64 0, !dbg !3769
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !3769
  %24 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3769
  %header26 = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 2, !dbg !3769
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %header26, align 8, !dbg !3769
  %cmp27 = icmp eq %struct.basic_block_def* %23, %25, !dbg !3769
  br i1 %cmp27, label %cond.false30, label %cond.true29, !dbg !3769

cond.true29:                                      ; preds = %if.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1010, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3769
  br label %cond.end31, !dbg !3769

cond.false30:                                     ; preds = %if.end
  br label %cond.end31, !dbg !3769

cond.end31:                                       ; preds = %cond.false30, %cond.true29
  %cond32 = phi i32 [ 0, %cond.true29 ], [ 0, %cond.false30 ], !dbg !3769
  %26 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3770
  %27 = load i32, i32* %n, align 4, !dbg !3770
  %sub = sub i32 %27, 1, !dbg !3770
  %idxprom = zext i32 %sub to i64, !dbg !3770
  %arrayidx33 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %26, i64 %idxprom, !dbg !3770
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx33, align 8, !dbg !3770
  %29 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3770
  %latch34 = getelementptr inbounds %struct.loop, %struct.loop* %29, i32 0, i32 3, !dbg !3770
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %latch34, align 8, !dbg !3770
  %cmp35 = icmp eq %struct.basic_block_def* %28, %30, !dbg !3770
  br i1 %cmp35, label %cond.false38, label %cond.true37, !dbg !3770

cond.true37:                                      ; preds = %cond.end31
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1011, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3770
  br label %cond.end39, !dbg !3770

cond.false38:                                     ; preds = %cond.end31
  br label %cond.end39, !dbg !3770

cond.end39:                                       ; preds = %cond.false38, %cond.true37
  %cond40 = phi i32 [ 0, %cond.true37 ], [ 0, %cond.false38 ], !dbg !3770
  %31 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3771
  %32 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3773
  %num_nodes41 = getelementptr inbounds %struct.loop, %struct.loop* %32, i32 0, i32 6, !dbg !3774
  %33 = load i32, i32* %num_nodes41, align 4, !dbg !3774
  %call42 = call zeroext i8 @can_copy_bbs_p(%struct.basic_block_def** %31, i32 %33), !dbg !3775
  %tobool43 = icmp ne i8 %call42, 0, !dbg !3775
  br i1 %tobool43, label %if.end45, label %if.then44, !dbg !3776

if.then44:                                        ; preds = %cond.end39
  %34 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3777
  %35 = bitcast %struct.basic_block_def** %34 to i8*, !dbg !3777
  call void @free(i8* %35), !dbg !3779
  store i8 0, i8* %retval, align 1, !dbg !3780
  br label %return, !dbg !3780

if.end45:                                         ; preds = %cond.end39
  %36 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3781
  %num_nodes46 = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 6, !dbg !3781
  %37 = load i32, i32* %num_nodes46, align 4, !dbg !3781
  %conv47 = zext i32 %37 to i64, !dbg !3781
  %mul = mul i64 8, %conv47, !dbg !3781
  %call48 = call i8* @xmalloc(i64 %mul), !dbg !3781
  %38 = bitcast i8* %call48 to %struct.basic_block_def**, !dbg !3781
  store %struct.basic_block_def** %38, %struct.basic_block_def*** %new_bbs, align 8, !dbg !3782
  %39 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3783
  %flags49 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 7, !dbg !3784
  %40 = load i32, i32* %flags49, align 8, !dbg !3784
  %and = and i32 %40, 128, !dbg !3785
  store i32 %and, i32* %add_irreducible_flag, align 4, !dbg !3786
  %41 = load i32, i32* %is_latch, align 4, !dbg !3787
  %tobool50 = icmp ne i32 %41, 0, !dbg !3787
  br i1 %tobool50, label %lor.lhs.false, label %cond.false53, !dbg !3787

lor.lhs.false:                                    ; preds = %if.end45
  %42 = load i32, i32* %add_irreducible_flag, align 4, !dbg !3787
  %tobool51 = icmp ne i32 %42, 0, !dbg !3787
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !3787

cond.true52:                                      ; preds = %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1024, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3787
  br label %cond.end54, !dbg !3787

cond.false53:                                     ; preds = %lor.lhs.false, %if.end45
  br label %cond.end54, !dbg !3787

cond.end54:                                       ; preds = %cond.false53, %cond.true52
  %cond55 = phi i32 [ 0, %cond.true52 ], [ 0, %cond.false53 ], !dbg !3787
  %43 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !3788
  %call56 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %43), !dbg !3789
  store %struct.edge_def* %call56, %struct.edge_def** %latch_edge, align 8, !dbg !3790
  %44 = load i32, i32* %flags.addr, align 4, !dbg !3791
  %and57 = and i32 %44, 1, !dbg !3793
  %tobool58 = icmp ne i32 %and57, 0, !dbg !3793
  br i1 %tobool58, label %if.then59, label %if.end271, !dbg !3794

if.then59:                                        ; preds = %cond.end54
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !3795
  %frequency = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 11, !dbg !3797
  %46 = load i32, i32* %frequency, align 8, !dbg !3797
  store i32 %46, i32* %freq_in, align 4, !dbg !3798
  %47 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !3799
  %src60 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 0, !dbg !3799
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %src60, align 8, !dbg !3799
  %frequency61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %48, i32 0, i32 11, !dbg !3799
  %49 = load i32, i32* %frequency61, align 8, !dbg !3799
  %50 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !3799
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 8, !dbg !3799
  %51 = load i32, i32* %probability, align 4, !dbg !3799
  %mul62 = mul nsw i32 %49, %51, !dbg !3799
  %add = add nsw i32 %mul62, 5000, !dbg !3799
  %div = sdiv i32 %add, 10000, !dbg !3799
  store i32 %div, i32* %freq_le, align 4, !dbg !3800
  %52 = load i32, i32* %freq_in, align 4, !dbg !3801
  %cmp63 = icmp eq i32 %52, 0, !dbg !3803
  br i1 %cmp63, label %if.then65, label %if.end66, !dbg !3804

if.then65:                                        ; preds = %if.then59
  store i32 1, i32* %freq_in, align 4, !dbg !3805
  br label %if.end66, !dbg !3806

if.end66:                                         ; preds = %if.then65, %if.then59
  %53 = load i32, i32* %freq_in, align 4, !dbg !3807
  %54 = load i32, i32* %freq_le, align 4, !dbg !3809
  %cmp67 = icmp slt i32 %53, %54, !dbg !3810
  br i1 %cmp67, label %if.then69, label %if.end70, !dbg !3811

if.then69:                                        ; preds = %if.end66
  %55 = load i32, i32* %freq_le, align 4, !dbg !3812
  store i32 %55, i32* %freq_in, align 4, !dbg !3813
  br label %if.end70, !dbg !3814

if.end70:                                         ; preds = %if.then69, %if.end66
  %56 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3815
  %tobool71 = icmp ne %struct.edge_def* %56, null, !dbg !3815
  br i1 %tobool71, label %cond.true72, label %cond.false79, !dbg !3815

cond.true72:                                      ; preds = %if.end70
  %57 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3816
  %src73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 0, !dbg !3816
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %src73, align 8, !dbg !3816
  %frequency74 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 11, !dbg !3816
  %59 = load i32, i32* %frequency74, align 8, !dbg !3816
  %60 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3816
  %probability75 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %60, i32 0, i32 8, !dbg !3816
  %61 = load i32, i32* %probability75, align 4, !dbg !3816
  %mul76 = mul nsw i32 %59, %61, !dbg !3816
  %add77 = add nsw i32 %mul76, 5000, !dbg !3816
  %div78 = sdiv i32 %add77, 10000, !dbg !3816
  br label %cond.end81, !dbg !3815

cond.false79:                                     ; preds = %if.end70
  %62 = load i32, i32* %freq_in, align 4, !dbg !3817
  %63 = load i32, i32* %freq_le, align 4, !dbg !3818
  %sub80 = sub nsw i32 %62, %63, !dbg !3819
  br label %cond.end81, !dbg !3815

cond.end81:                                       ; preds = %cond.false79, %cond.true72
  %cond82 = phi i32 [ %div78, %cond.true72 ], [ %sub80, %cond.false79 ], !dbg !3815
  store i32 %cond82, i32* %freq_out_orig, align 4, !dbg !3820
  %64 = load i32, i32* %freq_out_orig, align 4, !dbg !3821
  %65 = load i32, i32* %freq_in, align 4, !dbg !3823
  %66 = load i32, i32* %freq_le, align 4, !dbg !3824
  %sub83 = sub nsw i32 %65, %66, !dbg !3825
  %cmp84 = icmp sgt i32 %64, %sub83, !dbg !3826
  br i1 %cmp84, label %if.then86, label %if.end88, !dbg !3827

if.then86:                                        ; preds = %cond.end81
  %67 = load i32, i32* %freq_in, align 4, !dbg !3828
  %68 = load i32, i32* %freq_le, align 4, !dbg !3829
  %sub87 = sub nsw i32 %67, %68, !dbg !3830
  store i32 %sub87, i32* %freq_out_orig, align 4, !dbg !3831
  br label %if.end88, !dbg !3832

if.end88:                                         ; preds = %if.then86, %cond.end81
  %69 = load i32, i32* %freq_le, align 4, !dbg !3833
  %mul89 = mul nsw i32 10000, %69, !dbg !3833
  %70 = load i32, i32* %freq_in, align 4, !dbg !3833
  %div90 = sdiv i32 %70, 2, !dbg !3833
  %add91 = add nsw i32 %mul89, %div90, !dbg !3833
  %71 = load i32, i32* %freq_in, align 4, !dbg !3833
  %div92 = sdiv i32 %add91, %71, !dbg !3833
  store i32 %div92, i32* %prob_pass_thru, align 4, !dbg !3834
  %72 = load i32, i32* %freq_le, align 4, !dbg !3835
  %73 = load i32, i32* %freq_out_orig, align 4, !dbg !3835
  %add93 = add nsw i32 %72, %73, !dbg !3835
  %mul94 = mul nsw i32 10000, %add93, !dbg !3835
  %74 = load i32, i32* %freq_in, align 4, !dbg !3835
  %div95 = sdiv i32 %74, 2, !dbg !3835
  %add96 = add nsw i32 %mul94, %div95, !dbg !3835
  %75 = load i32, i32* %freq_in, align 4, !dbg !3835
  %div97 = sdiv i32 %add96, %75, !dbg !3835
  store i32 %div97, i32* %prob_pass_wont_exit, align 4, !dbg !3836
  %76 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3837
  %tobool98 = icmp ne %struct.edge_def* %76, null, !dbg !3837
  br i1 %tobool98, label %land.lhs.true, label %if.end129, !dbg !3839

land.lhs.true:                                    ; preds = %if.end88
  %77 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3840
  %probability99 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %77, i32 0, i32 8, !dbg !3841
  %78 = load i32, i32* %probability99, align 4, !dbg !3841
  %sub100 = sub nsw i32 10000, %78, !dbg !3842
  %cmp101 = icmp ne i32 %sub100, 0, !dbg !3843
  br i1 %cmp101, label %if.then103, label %if.end129, !dbg !3844

if.then103:                                       ; preds = %land.lhs.true
  %79 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3845
  %probability104 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %79, i32 0, i32 8, !dbg !3845
  %80 = load i32, i32* %probability104, align 4, !dbg !3845
  %sub105 = sub nsw i32 10000, %80, !dbg !3845
  %div106 = sdiv i32 %sub105, 2, !dbg !3845
  %add107 = add nsw i32 100000000, %div106, !dbg !3845
  %81 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3845
  %probability108 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %81, i32 0, i32 8, !dbg !3845
  %82 = load i32, i32* %probability108, align 4, !dbg !3845
  %sub109 = sub nsw i32 10000, %82, !dbg !3845
  %div110 = sdiv i32 %add107, %sub109, !dbg !3845
  store i32 %div110, i32* %scale_after_exit, align 4, !dbg !3847
  %call111 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* null), !dbg !3848
  store %struct.bitmap_head_def* %call111, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !3849
  store i32 0, i32* %i, align 4, !dbg !3850
  br label %for.cond, !dbg !3852

for.cond:                                         ; preds = %for.inc, %if.then103
  %83 = load i32, i32* %i, align 4, !dbg !3853
  %84 = load i32, i32* %n, align 4, !dbg !3855
  %cmp112 = icmp ult i32 %83, %84, !dbg !3856
  br i1 %cmp112, label %for.body, label %for.end, !dbg !3857

for.body:                                         ; preds = %for.cond
  %85 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3858
  %86 = load i32, i32* %i, align 4, !dbg !3861
  %idxprom114 = zext i32 %86 to i64, !dbg !3858
  %arrayidx115 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %85, i64 %idxprom114, !dbg !3858
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx115, align 8, !dbg !3858
  %88 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3862
  %src116 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %88, i32 0, i32 0, !dbg !3863
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %src116, align 8, !dbg !3863
  %cmp117 = icmp ne %struct.basic_block_def* %87, %89, !dbg !3864
  br i1 %cmp117, label %land.lhs.true119, label %if.end128, !dbg !3865

land.lhs.true119:                                 ; preds = %for.body
  %90 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !3866
  %91 = load i32, i32* %i, align 4, !dbg !3867
  %idxprom120 = zext i32 %91 to i64, !dbg !3866
  %arrayidx121 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %90, i64 %idxprom120, !dbg !3866
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx121, align 8, !dbg !3866
  %93 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !3868
  %src122 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %93, i32 0, i32 0, !dbg !3869
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %src122, align 8, !dbg !3869
  %call123 = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %92, %struct.basic_block_def* %94), !dbg !3870
  %conv124 = zext i8 %call123 to i32, !dbg !3870
  %tobool125 = icmp ne i32 %conv124, 0, !dbg !3870
  br i1 %tobool125, label %if.then126, label %if.end128, !dbg !3871

if.then126:                                       ; preds = %land.lhs.true119
  %95 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !3872
  %96 = load i32, i32* %i, align 4, !dbg !3873
  %call127 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %95, i32 %96), !dbg !3874
  br label %if.end128, !dbg !3874

if.end128:                                        ; preds = %if.then126, %land.lhs.true119, %for.body
  br label %for.inc, !dbg !3875

for.inc:                                          ; preds = %if.end128
  %97 = load i32, i32* %i, align 4, !dbg !3876
  %inc = add i32 %97, 1, !dbg !3876
  store i32 %inc, i32* %i, align 4, !dbg !3876
  br label %for.cond, !dbg !3877, !llvm.loop !3878

for.end:                                          ; preds = %for.cond
  br label %if.end129, !dbg !3880

if.end129:                                        ; preds = %for.end, %land.lhs.true, %if.end88
  %98 = load i32, i32* %ndupl.addr, align 4, !dbg !3881
  %conv130 = zext i32 %98 to i64, !dbg !3881
  %mul131 = mul i64 4, %conv130, !dbg !3881
  %call132 = call i8* @xmalloc(i64 %mul131), !dbg !3881
  %99 = bitcast i8* %call132 to i32*, !dbg !3881
  store i32* %99, i32** %scale_step, align 8, !dbg !3882
  store i32 1, i32* %i, align 4, !dbg !3883
  br label %for.cond133, !dbg !3885

for.cond133:                                      ; preds = %for.inc149, %if.end129
  %100 = load i32, i32* %i, align 4, !dbg !3886
  %101 = load i32, i32* %ndupl.addr, align 4, !dbg !3888
  %cmp134 = icmp ule i32 %100, %101, !dbg !3889
  br i1 %cmp134, label %for.body136, label %for.end151, !dbg !3890

for.body136:                                      ; preds = %for.cond133
  %102 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit.addr, align 8, !dbg !3891
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %102, i32 0, i32 3, !dbg !3891
  %103 = load i32, i32* %i, align 4, !dbg !3891
  %div137 = udiv i32 %103, 64, !dbg !3891
  %idxprom138 = zext i32 %div137 to i64, !dbg !3891
  %arrayidx139 = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom138, !dbg !3891
  %104 = load i64, i64* %arrayidx139, align 8, !dbg !3891
  %105 = load i32, i32* %i, align 4, !dbg !3891
  %rem = urem i32 %105, 64, !dbg !3891
  %sh_prom = zext i32 %rem to i64, !dbg !3891
  %shr = lshr i64 %104, %sh_prom, !dbg !3891
  %and140 = and i64 %shr, 1, !dbg !3891
  %tobool141 = icmp ne i64 %and140, 0, !dbg !3891
  br i1 %tobool141, label %cond.true142, label %cond.false143, !dbg !3891

cond.true142:                                     ; preds = %for.body136
  %106 = load i32, i32* %prob_pass_wont_exit, align 4, !dbg !3892
  br label %cond.end144, !dbg !3891

cond.false143:                                    ; preds = %for.body136
  %107 = load i32, i32* %prob_pass_thru, align 4, !dbg !3893
  br label %cond.end144, !dbg !3891

cond.end144:                                      ; preds = %cond.false143, %cond.true142
  %cond145 = phi i32 [ %106, %cond.true142 ], [ %107, %cond.false143 ], !dbg !3891
  %108 = load i32*, i32** %scale_step, align 8, !dbg !3894
  %109 = load i32, i32* %i, align 4, !dbg !3895
  %sub146 = sub i32 %109, 1, !dbg !3896
  %idxprom147 = zext i32 %sub146 to i64, !dbg !3894
  %arrayidx148 = getelementptr inbounds i32, i32* %108, i64 %idxprom147, !dbg !3894
  store i32 %cond145, i32* %arrayidx148, align 4, !dbg !3897
  br label %for.inc149, !dbg !3894

for.inc149:                                       ; preds = %cond.end144
  %110 = load i32, i32* %i, align 4, !dbg !3898
  %inc150 = add i32 %110, 1, !dbg !3898
  store i32 %inc150, i32* %i, align 4, !dbg !3898
  br label %for.cond133, !dbg !3899, !llvm.loop !3900

for.end151:                                       ; preds = %for.cond133
  %111 = load i32, i32* %flags.addr, align 4, !dbg !3902
  %and152 = and i32 %111, 4, !dbg !3904
  %tobool153 = icmp ne i32 %and152, 0, !dbg !3904
  br i1 %tobool153, label %if.then154, label %if.else, !dbg !3905

if.then154:                                       ; preds = %for.end151
  call void @llvm.dbg.declare(metadata i32* %wanted_freq, metadata !3906, metadata !DIExpression()), !dbg !3908
  %112 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3909
  %src155 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %112, i32 0, i32 0, !dbg !3909
  %113 = load %struct.basic_block_def*, %struct.basic_block_def** %src155, align 8, !dbg !3909
  %frequency156 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %113, i32 0, i32 11, !dbg !3909
  %114 = load i32, i32* %frequency156, align 8, !dbg !3909
  %115 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !3909
  %probability157 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %115, i32 0, i32 8, !dbg !3909
  %116 = load i32, i32* %probability157, align 4, !dbg !3909
  %mul158 = mul nsw i32 %114, %116, !dbg !3909
  %add159 = add nsw i32 %mul158, 5000, !dbg !3909
  %div160 = sdiv i32 %add159, 10000, !dbg !3909
  store i32 %div160, i32* %wanted_freq, align 4, !dbg !3908
  %117 = load i32, i32* %wanted_freq, align 4, !dbg !3910
  %118 = load i32, i32* %freq_in, align 4, !dbg !3912
  %cmp161 = icmp sgt i32 %117, %118, !dbg !3913
  br i1 %cmp161, label %if.then163, label %if.end164, !dbg !3914

if.then163:                                       ; preds = %if.then154
  %119 = load i32, i32* %freq_in, align 4, !dbg !3915
  store i32 %119, i32* %wanted_freq, align 4, !dbg !3916
  br label %if.end164, !dbg !3917

if.end164:                                        ; preds = %if.then163, %if.then154
  %120 = load i32, i32* %is_latch, align 4, !dbg !3918
  %tobool165 = icmp ne i32 %120, 0, !dbg !3918
  br i1 %tobool165, label %cond.true166, label %cond.false167, !dbg !3918

cond.true166:                                     ; preds = %if.end164
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1078, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !3918
  br label %cond.end168, !dbg !3918

cond.false167:                                    ; preds = %if.end164
  br label %cond.end168, !dbg !3918

cond.end168:                                      ; preds = %cond.false167, %cond.true166
  %cond169 = phi i32 [ 0, %cond.true166 ], [ 0, %cond.false167 ], !dbg !3918
  %121 = load i32, i32* %wanted_freq, align 4, !dbg !3919
  %mul170 = mul nsw i32 %121, 10000, !dbg !3919
  %122 = load i32, i32* %freq_in, align 4, !dbg !3919
  %div171 = sdiv i32 %122, 2, !dbg !3919
  %add172 = add nsw i32 %mul170, %div171, !dbg !3919
  %123 = load i32, i32* %freq_in, align 4, !dbg !3919
  %div173 = sdiv i32 %add172, %123, !dbg !3919
  store i32 %div173, i32* %scale_act, align 4, !dbg !3920
  store i32 0, i32* %i, align 4, !dbg !3921
  br label %for.cond174, !dbg !3923

for.cond174:                                      ; preds = %for.inc183, %cond.end168
  %124 = load i32, i32* %i, align 4, !dbg !3924
  %125 = load i32, i32* %ndupl.addr, align 4, !dbg !3926
  %cmp175 = icmp ult i32 %124, %125, !dbg !3927
  br i1 %cmp175, label %for.body177, label %for.end185, !dbg !3928

for.body177:                                      ; preds = %for.cond174
  %126 = load i32, i32* %wanted_freq, align 4, !dbg !3929
  %127 = load i32*, i32** %scale_step, align 8, !dbg !3929
  %128 = load i32, i32* %i, align 4, !dbg !3929
  %idxprom178 = zext i32 %128 to i64, !dbg !3929
  %arrayidx179 = getelementptr inbounds i32, i32* %127, i64 %idxprom178, !dbg !3929
  %129 = load i32, i32* %arrayidx179, align 4, !dbg !3929
  %mul180 = mul nsw i32 %126, %129, !dbg !3929
  %add181 = add nsw i32 %mul180, 5000, !dbg !3929
  %div182 = sdiv i32 %add181, 10000, !dbg !3929
  store i32 %div182, i32* %wanted_freq, align 4, !dbg !3930
  br label %for.inc183, !dbg !3931

for.inc183:                                       ; preds = %for.body177
  %130 = load i32, i32* %i, align 4, !dbg !3932
  %inc184 = add i32 %130, 1, !dbg !3932
  store i32 %inc184, i32* %i, align 4, !dbg !3932
  br label %for.cond174, !dbg !3933, !llvm.loop !3934

for.end185:                                       ; preds = %for.cond174
  %131 = load i32, i32* %wanted_freq, align 4, !dbg !3936
  %mul186 = mul nsw i32 %131, 10000, !dbg !3936
  %132 = load i32, i32* %freq_in, align 4, !dbg !3936
  %div187 = sdiv i32 %132, 2, !dbg !3936
  %add188 = add nsw i32 %mul186, %div187, !dbg !3936
  %133 = load i32, i32* %freq_in, align 4, !dbg !3936
  %div189 = sdiv i32 %add188, %133, !dbg !3936
  store i32 %div189, i32* %scale_main, align 4, !dbg !3937
  br label %if.end235, !dbg !3938

if.else:                                          ; preds = %for.end151
  %134 = load i32, i32* %is_latch, align 4, !dbg !3939
  %tobool190 = icmp ne i32 %134, 0, !dbg !3939
  br i1 %tobool190, label %if.then191, label %if.else220, !dbg !3941

if.then191:                                       ; preds = %if.else
  %135 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit.addr, align 8, !dbg !3942
  %elms192 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %135, i32 0, i32 3, !dbg !3942
  %arrayidx193 = getelementptr inbounds [1 x i64], [1 x i64]* %elms192, i64 0, i64 0, !dbg !3942
  %136 = load i64, i64* %arrayidx193, align 8, !dbg !3942
  %shr194 = lshr i64 %136, 0, !dbg !3942
  %and195 = and i64 %shr194, 1, !dbg !3942
  %tobool196 = icmp ne i64 %and195, 0, !dbg !3942
  br i1 %tobool196, label %cond.true197, label %cond.false198, !dbg !3942

cond.true197:                                     ; preds = %if.then191
  %137 = load i32, i32* %prob_pass_wont_exit, align 4, !dbg !3944
  br label %cond.end199, !dbg !3942

cond.false198:                                    ; preds = %if.then191
  %138 = load i32, i32* %prob_pass_thru, align 4, !dbg !3945
  br label %cond.end199, !dbg !3942

cond.end199:                                      ; preds = %cond.false198, %cond.true197
  %cond200 = phi i32 [ %137, %cond.true197 ], [ %138, %cond.false198 ], !dbg !3942
  store i32 %cond200, i32* %prob_pass_main, align 4, !dbg !3946
  %139 = load i32, i32* %prob_pass_main, align 4, !dbg !3947
  store i32 %139, i32* %p, align 4, !dbg !3948
  store i32 10000, i32* %scale_main, align 4, !dbg !3949
  store i32 0, i32* %i, align 4, !dbg !3950
  br label %for.cond201, !dbg !3952

for.cond201:                                      ; preds = %for.inc211, %cond.end199
  %140 = load i32, i32* %i, align 4, !dbg !3953
  %141 = load i32, i32* %ndupl.addr, align 4, !dbg !3955
  %cmp202 = icmp ult i32 %140, %141, !dbg !3956
  br i1 %cmp202, label %for.body204, label %for.end213, !dbg !3957

for.body204:                                      ; preds = %for.cond201
  %142 = load i32, i32* %p, align 4, !dbg !3958
  %143 = load i32, i32* %scale_main, align 4, !dbg !3960
  %add205 = add nsw i32 %143, %142, !dbg !3960
  store i32 %add205, i32* %scale_main, align 4, !dbg !3960
  %144 = load i32, i32* %p, align 4, !dbg !3961
  %145 = load i32*, i32** %scale_step, align 8, !dbg !3961
  %146 = load i32, i32* %i, align 4, !dbg !3961
  %idxprom206 = zext i32 %146 to i64, !dbg !3961
  %arrayidx207 = getelementptr inbounds i32, i32* %145, i64 %idxprom206, !dbg !3961
  %147 = load i32, i32* %arrayidx207, align 4, !dbg !3961
  %mul208 = mul nsw i32 %144, %147, !dbg !3961
  %add209 = add nsw i32 %mul208, 5000, !dbg !3961
  %div210 = sdiv i32 %add209, 10000, !dbg !3961
  store i32 %div210, i32* %p, align 4, !dbg !3962
  br label %for.inc211, !dbg !3963

for.inc211:                                       ; preds = %for.body204
  %148 = load i32, i32* %i, align 4, !dbg !3964
  %inc212 = add i32 %148, 1, !dbg !3964
  store i32 %inc212, i32* %i, align 4, !dbg !3964
  br label %for.cond201, !dbg !3965, !llvm.loop !3966

for.end213:                                       ; preds = %for.cond201
  %149 = load i32, i32* %scale_main, align 4, !dbg !3968
  %div214 = sdiv i32 %149, 2, !dbg !3968
  %add215 = add nsw i32 100000000, %div214, !dbg !3968
  %150 = load i32, i32* %scale_main, align 4, !dbg !3968
  %div216 = sdiv i32 %add215, %150, !dbg !3968
  store i32 %div216, i32* %scale_main, align 4, !dbg !3969
  %151 = load i32, i32* %scale_main, align 4, !dbg !3970
  %152 = load i32, i32* %prob_pass_main, align 4, !dbg !3970
  %mul217 = mul nsw i32 %151, %152, !dbg !3970
  %add218 = add nsw i32 %mul217, 5000, !dbg !3970
  %div219 = sdiv i32 %add218, 10000, !dbg !3970
  store i32 %div219, i32* %scale_act, align 4, !dbg !3971
  br label %if.end234, !dbg !3972

if.else220:                                       ; preds = %if.else
  store i32 10000, i32* %scale_main, align 4, !dbg !3973
  store i32 0, i32* %i, align 4, !dbg !3975
  br label %for.cond221, !dbg !3977

for.cond221:                                      ; preds = %for.inc230, %if.else220
  %153 = load i32, i32* %i, align 4, !dbg !3978
  %154 = load i32, i32* %ndupl.addr, align 4, !dbg !3980
  %cmp222 = icmp ult i32 %153, %154, !dbg !3981
  br i1 %cmp222, label %for.body224, label %for.end232, !dbg !3982

for.body224:                                      ; preds = %for.cond221
  %155 = load i32, i32* %scale_main, align 4, !dbg !3983
  %156 = load i32*, i32** %scale_step, align 8, !dbg !3983
  %157 = load i32, i32* %i, align 4, !dbg !3983
  %idxprom225 = zext i32 %157 to i64, !dbg !3983
  %arrayidx226 = getelementptr inbounds i32, i32* %156, i64 %idxprom225, !dbg !3983
  %158 = load i32, i32* %arrayidx226, align 4, !dbg !3983
  %mul227 = mul nsw i32 %155, %158, !dbg !3983
  %add228 = add nsw i32 %mul227, 5000, !dbg !3983
  %div229 = sdiv i32 %add228, 10000, !dbg !3983
  store i32 %div229, i32* %scale_main, align 4, !dbg !3984
  br label %for.inc230, !dbg !3985

for.inc230:                                       ; preds = %for.body224
  %159 = load i32, i32* %i, align 4, !dbg !3986
  %inc231 = add i32 %159, 1, !dbg !3986
  store i32 %inc231, i32* %i, align 4, !dbg !3986
  br label %for.cond221, !dbg !3987, !llvm.loop !3988

for.end232:                                       ; preds = %for.cond221
  %160 = load i32, i32* %prob_pass_thru, align 4, !dbg !3990
  %sub233 = sub nsw i32 10000, %160, !dbg !3991
  store i32 %sub233, i32* %scale_act, align 4, !dbg !3992
  br label %if.end234

if.end234:                                        ; preds = %for.end232, %for.end213
  br label %if.end235

if.end235:                                        ; preds = %if.end234, %for.end185
  store i32 0, i32* %i, align 4, !dbg !3993
  br label %for.cond236, !dbg !3995

for.cond236:                                      ; preds = %for.inc253, %if.end235
  %161 = load i32, i32* %i, align 4, !dbg !3996
  %162 = load i32, i32* %ndupl.addr, align 4, !dbg !3998
  %cmp237 = icmp ult i32 %161, %162, !dbg !3999
  br i1 %cmp237, label %for.body239, label %for.end255, !dbg !4000

for.body239:                                      ; preds = %for.cond236
  %163 = load i32*, i32** %scale_step, align 8, !dbg !4001
  %164 = load i32, i32* %i, align 4, !dbg !4001
  %idxprom240 = zext i32 %164 to i64, !dbg !4001
  %arrayidx241 = getelementptr inbounds i32, i32* %163, i64 %idxprom240, !dbg !4001
  %165 = load i32, i32* %arrayidx241, align 4, !dbg !4001
  %cmp242 = icmp sge i32 %165, 0, !dbg !4001
  br i1 %cmp242, label %land.lhs.true244, label %cond.true249, !dbg !4001

land.lhs.true244:                                 ; preds = %for.body239
  %166 = load i32*, i32** %scale_step, align 8, !dbg !4001
  %167 = load i32, i32* %i, align 4, !dbg !4001
  %idxprom245 = zext i32 %167 to i64, !dbg !4001
  %arrayidx246 = getelementptr inbounds i32, i32* %166, i64 %idxprom245, !dbg !4001
  %168 = load i32, i32* %arrayidx246, align 4, !dbg !4001
  %cmp247 = icmp sle i32 %168, 10000, !dbg !4001
  br i1 %cmp247, label %cond.false250, label %cond.true249, !dbg !4001

cond.true249:                                     ; preds = %land.lhs.true244, %for.body239
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1113, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4001
  br label %cond.end251, !dbg !4001

cond.false250:                                    ; preds = %land.lhs.true244
  br label %cond.end251, !dbg !4001

cond.end251:                                      ; preds = %cond.false250, %cond.true249
  %cond252 = phi i32 [ 0, %cond.true249 ], [ 0, %cond.false250 ], !dbg !4001
  br label %for.inc253, !dbg !4001

for.inc253:                                       ; preds = %cond.end251
  %169 = load i32, i32* %i, align 4, !dbg !4002
  %inc254 = add i32 %169, 1, !dbg !4002
  store i32 %inc254, i32* %i, align 4, !dbg !4002
  br label %for.cond236, !dbg !4003, !llvm.loop !4004

for.end255:                                       ; preds = %for.cond236
  %170 = load i32, i32* %scale_main, align 4, !dbg !4006
  %cmp256 = icmp sge i32 %170, 0, !dbg !4006
  br i1 %cmp256, label %land.lhs.true258, label %cond.true267, !dbg !4006

land.lhs.true258:                                 ; preds = %for.end255
  %171 = load i32, i32* %scale_main, align 4, !dbg !4006
  %cmp259 = icmp sle i32 %171, 10000, !dbg !4006
  br i1 %cmp259, label %land.lhs.true261, label %cond.true267, !dbg !4006

land.lhs.true261:                                 ; preds = %land.lhs.true258
  %172 = load i32, i32* %scale_act, align 4, !dbg !4006
  %cmp262 = icmp sge i32 %172, 0, !dbg !4006
  br i1 %cmp262, label %land.lhs.true264, label %cond.true267, !dbg !4006

land.lhs.true264:                                 ; preds = %land.lhs.true261
  %173 = load i32, i32* %scale_act, align 4, !dbg !4006
  %cmp265 = icmp sle i32 %173, 10000, !dbg !4006
  br i1 %cmp265, label %cond.false268, label %cond.true267, !dbg !4006

cond.true267:                                     ; preds = %land.lhs.true264, %land.lhs.true261, %land.lhs.true258, %for.end255
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4006
  br label %cond.end269, !dbg !4006

cond.false268:                                    ; preds = %land.lhs.true264
  br label %cond.end269, !dbg !4006

cond.end269:                                      ; preds = %cond.false268, %cond.true267
  %cond270 = phi i32 [ 0, %cond.true267 ], [ 0, %cond.false268 ], !dbg !4006
  br label %if.end271, !dbg !4007

if.end271:                                        ; preds = %cond.end269, %cond.end54
  %174 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4008
  %src272 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %174, i32 0, i32 0, !dbg !4009
  %175 = load %struct.basic_block_def*, %struct.basic_block_def** %src272, align 8, !dbg !4009
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %175, i32 0, i32 3, !dbg !4010
  %176 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4010
  store %struct.loop* %176, %struct.loop** %target, align 8, !dbg !4011
  store i32 0, i32* %n_orig_loops, align 4, !dbg !4012
  %177 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4013
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %177, i32 0, i32 8, !dbg !4015
  %178 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !4015
  store %struct.loop* %178, %struct.loop** %aloop, align 8, !dbg !4016
  br label %for.cond273, !dbg !4017

for.cond273:                                      ; preds = %for.inc277, %if.end271
  %179 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4018
  %tobool274 = icmp ne %struct.loop* %179, null, !dbg !4020
  br i1 %tobool274, label %for.body275, label %for.end278, !dbg !4020

for.body275:                                      ; preds = %for.cond273
  %180 = load i32, i32* %n_orig_loops, align 4, !dbg !4021
  %inc276 = add i32 %180, 1, !dbg !4021
  store i32 %inc276, i32* %n_orig_loops, align 4, !dbg !4021
  br label %for.inc277, !dbg !4022

for.inc277:                                       ; preds = %for.body275
  %181 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4023
  %next = getelementptr inbounds %struct.loop, %struct.loop* %181, i32 0, i32 9, !dbg !4024
  %182 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !4024
  store %struct.loop* %182, %struct.loop** %aloop, align 8, !dbg !4025
  br label %for.cond273, !dbg !4026, !llvm.loop !4027

for.end278:                                       ; preds = %for.cond273
  %183 = load i32, i32* %n_orig_loops, align 4, !dbg !4029
  %conv279 = zext i32 %183 to i64, !dbg !4029
  %call280 = call i8* @xcalloc(i64 %conv279, i64 8), !dbg !4029
  %184 = bitcast i8* %call280 to %struct.loop**, !dbg !4029
  store %struct.loop** %184, %struct.loop*** %orig_loops, align 8, !dbg !4030
  %185 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4031
  %inner281 = getelementptr inbounds %struct.loop, %struct.loop* %185, i32 0, i32 8, !dbg !4033
  %186 = load %struct.loop*, %struct.loop** %inner281, align 8, !dbg !4033
  store %struct.loop* %186, %struct.loop** %aloop, align 8, !dbg !4034
  store i32 0, i32* %i, align 4, !dbg !4035
  br label %for.cond282, !dbg !4036

for.cond282:                                      ; preds = %for.inc287, %for.end278
  %187 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4037
  %tobool283 = icmp ne %struct.loop* %187, null, !dbg !4039
  br i1 %tobool283, label %for.body284, label %for.end290, !dbg !4039

for.body284:                                      ; preds = %for.cond282
  %188 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4040
  %189 = load %struct.loop**, %struct.loop*** %orig_loops, align 8, !dbg !4041
  %190 = load i32, i32* %i, align 4, !dbg !4042
  %idxprom285 = zext i32 %190 to i64, !dbg !4041
  %arrayidx286 = getelementptr inbounds %struct.loop*, %struct.loop** %189, i64 %idxprom285, !dbg !4041
  store %struct.loop* %188, %struct.loop** %arrayidx286, align 8, !dbg !4043
  br label %for.inc287, !dbg !4041

for.inc287:                                       ; preds = %for.body284
  %191 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4044
  %next288 = getelementptr inbounds %struct.loop, %struct.loop* %191, i32 0, i32 9, !dbg !4045
  %192 = load %struct.loop*, %struct.loop** %next288, align 8, !dbg !4045
  store %struct.loop* %192, %struct.loop** %aloop, align 8, !dbg !4046
  %193 = load i32, i32* %i, align 4, !dbg !4047
  %inc289 = add i32 %193, 1, !dbg !4047
  store i32 %inc289, i32* %i, align 4, !dbg !4047
  br label %for.cond282, !dbg !4048, !llvm.loop !4049

for.end290:                                       ; preds = %for.cond282
  %194 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4051
  %195 = load %struct.loop*, %struct.loop** %target, align 8, !dbg !4052
  call void @set_loop_copy(%struct.loop* %194, %struct.loop* %195), !dbg !4053
  %196 = load i32, i32* %n, align 4, !dbg !4054
  %conv291 = zext i32 %196 to i64, !dbg !4054
  %mul292 = mul i64 8, %conv291, !dbg !4054
  %call293 = call i8* @xmalloc(i64 %mul292), !dbg !4054
  %197 = bitcast i8* %call293 to %struct.basic_block_def**, !dbg !4054
  store %struct.basic_block_def** %197, %struct.basic_block_def*** %first_active, align 8, !dbg !4055
  %198 = load i32, i32* %is_latch, align 4, !dbg !4056
  %tobool294 = icmp ne i32 %198, 0, !dbg !4056
  br i1 %tobool294, label %if.then295, label %if.end298, !dbg !4058

if.then295:                                       ; preds = %for.end290
  %199 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_active, align 8, !dbg !4059
  %200 = bitcast %struct.basic_block_def** %199 to i8*, !dbg !4061
  %201 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4062
  %202 = bitcast %struct.basic_block_def** %201 to i8*, !dbg !4061
  %203 = load i32, i32* %n, align 4, !dbg !4063
  %conv296 = zext i32 %203 to i64, !dbg !4063
  %mul297 = mul i64 %conv296, 8, !dbg !4064
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %200, i8* align 8 %202, i64 %mul297, i1 false), !dbg !4061
  %204 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4065
  store %struct.basic_block_def* %204, %struct.basic_block_def** %first_active_latch, align 8, !dbg !4066
  br label %if.end298, !dbg !4067

if.end298:                                        ; preds = %if.then295, %for.end290
  %205 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !4068
  %arrayidx299 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %spec_edges, i64 0, i64 1, !dbg !4069
  store %struct.edge_def* %205, %struct.edge_def** %arrayidx299, align 8, !dbg !4070
  %206 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !4071
  %arrayidx300 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %spec_edges, i64 0, i64 0, !dbg !4072
  store %struct.edge_def* %206, %struct.edge_def** %arrayidx300, align 16, !dbg !4073
  %207 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4074
  %src301 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %207, i32 0, i32 0, !dbg !4075
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %src301, align 8, !dbg !4075
  store %struct.basic_block_def* %208, %struct.basic_block_def** %place_after, align 8, !dbg !4076
  store i32 0, i32* %j, align 4, !dbg !4077
  br label %for.cond302, !dbg !4079

for.cond302:                                      ; preds = %for.inc467, %if.end298
  %209 = load i32, i32* %j, align 4, !dbg !4080
  %210 = load i32, i32* %ndupl.addr, align 4, !dbg !4082
  %cmp303 = icmp ult i32 %209, %210, !dbg !4083
  br i1 %cmp303, label %for.body305, label %for.end469, !dbg !4084

for.body305:                                      ; preds = %for.cond302
  %211 = load %struct.loop**, %struct.loop*** %orig_loops, align 8, !dbg !4085
  %212 = load i32, i32* %n_orig_loops, align 4, !dbg !4087
  %213 = load %struct.loop*, %struct.loop** %target, align 8, !dbg !4088
  call void @copy_loops_to(%struct.loop** %211, i32 %212, %struct.loop* %213), !dbg !4089
  %214 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4090
  %215 = load i32, i32* %n, align 4, !dbg !4091
  %216 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4092
  %arraydecay = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %spec_edges, i64 0, i64 0, !dbg !4093
  %arraydecay306 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4094
  %217 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4095
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %place_after, align 8, !dbg !4096
  call void @copy_bbs(%struct.basic_block_def** %214, i32 %215, %struct.basic_block_def** %216, %struct.edge_def** %arraydecay, i32 2, %struct.edge_def** %arraydecay306, %struct.loop* %217, %struct.basic_block_def* %218), !dbg !4097
  %arrayidx307 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4098
  %219 = load %struct.edge_def*, %struct.edge_def** %arrayidx307, align 16, !dbg !4098
  %src308 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %219, i32 0, i32 0, !dbg !4099
  %220 = load %struct.basic_block_def*, %struct.basic_block_def** %src308, align 8, !dbg !4099
  store %struct.basic_block_def* %220, %struct.basic_block_def** %place_after, align 8, !dbg !4100
  %221 = load i32, i32* %flags.addr, align 4, !dbg !4101
  %and309 = and i32 %221, 2, !dbg !4103
  %tobool310 = icmp ne i32 %and309, 0, !dbg !4103
  br i1 %tobool310, label %if.then311, label %if.end331, !dbg !4104

if.then311:                                       ; preds = %for.body305
  store i32 0, i32* %i, align 4, !dbg !4105
  br label %for.cond312, !dbg !4107

for.cond312:                                      ; preds = %for.inc328, %if.then311
  %222 = load i32, i32* %i, align 4, !dbg !4108
  %223 = load i32, i32* %n, align 4, !dbg !4110
  %cmp313 = icmp ult i32 %222, %223, !dbg !4111
  br i1 %cmp313, label %for.body315, label %for.end330, !dbg !4112

for.body315:                                      ; preds = %for.cond312
  %224 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4113
  %225 = load i32, i32* %i, align 4, !dbg !4113
  %idxprom316 = zext i32 %225 to i64, !dbg !4113
  %arrayidx317 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %224, i64 %idxprom316, !dbg !4113
  %226 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx317, align 8, !dbg !4113
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %226, i32 0, i32 2, !dbg !4113
  %227 = load i8*, i8** %aux, align 8, !dbg !4113
  %tobool318 = icmp ne i8* %227, null, !dbg !4113
  br i1 %tobool318, label %cond.true319, label %cond.false320, !dbg !4113

cond.true319:                                     ; preds = %for.body315
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1155, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4113
  br label %cond.end321, !dbg !4113

cond.false320:                                    ; preds = %for.body315
  br label %cond.end321, !dbg !4113

cond.end321:                                      ; preds = %cond.false320, %cond.true319
  %cond322 = phi i32 [ 0, %cond.true319 ], [ 0, %cond.false320 ], !dbg !4113
  %228 = load i32, i32* %j, align 4, !dbg !4115
  %add323 = add i32 %228, 1, !dbg !4116
  %conv324 = zext i32 %add323 to i64, !dbg !4117
  %229 = inttoptr i64 %conv324 to i8*, !dbg !4118
  %230 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4119
  %231 = load i32, i32* %i, align 4, !dbg !4120
  %idxprom325 = zext i32 %231 to i64, !dbg !4119
  %arrayidx326 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %230, i64 %idxprom325, !dbg !4119
  %232 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx326, align 8, !dbg !4119
  %aux327 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %232, i32 0, i32 2, !dbg !4121
  store i8* %229, i8** %aux327, align 8, !dbg !4122
  br label %for.inc328, !dbg !4123

for.inc328:                                       ; preds = %cond.end321
  %233 = load i32, i32* %i, align 4, !dbg !4124
  %inc329 = add i32 %233, 1, !dbg !4124
  store i32 %inc329, i32* %i, align 4, !dbg !4124
  br label %for.cond312, !dbg !4125, !llvm.loop !4126

for.end330:                                       ; preds = %for.cond312
  br label %if.end331, !dbg !4127

if.end331:                                        ; preds = %for.end330, %for.body305
  %234 = load i32, i32* %add_irreducible_flag, align 4, !dbg !4128
  %tobool332 = icmp ne i32 %234, 0, !dbg !4128
  br i1 %tobool332, label %if.then333, label %if.end396, !dbg !4130

if.then333:                                       ; preds = %if.end331
  store i32 0, i32* %i, align 4, !dbg !4131
  br label %for.cond334, !dbg !4134

for.cond334:                                      ; preds = %for.inc341, %if.then333
  %235 = load i32, i32* %i, align 4, !dbg !4135
  %236 = load i32, i32* %n, align 4, !dbg !4137
  %cmp335 = icmp ult i32 %235, %236, !dbg !4138
  br i1 %cmp335, label %for.body337, label %for.end343, !dbg !4139

for.body337:                                      ; preds = %for.cond334
  %237 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4140
  %238 = load i32, i32* %i, align 4, !dbg !4141
  %idxprom338 = zext i32 %238 to i64, !dbg !4140
  %arrayidx339 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %237, i64 %idxprom338, !dbg !4140
  %239 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx339, align 8, !dbg !4140
  %flags340 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %239, i32 0, i32 13, !dbg !4142
  %240 = load i32, i32* %flags340, align 8, !dbg !4143
  %or = or i32 %240, 128, !dbg !4143
  store i32 %or, i32* %flags340, align 8, !dbg !4143
  br label %for.inc341, !dbg !4140

for.inc341:                                       ; preds = %for.body337
  %241 = load i32, i32* %i, align 4, !dbg !4144
  %inc342 = add i32 %241, 1, !dbg !4144
  store i32 %inc342, i32* %i, align 4, !dbg !4144
  br label %for.cond334, !dbg !4145, !llvm.loop !4146

for.end343:                                       ; preds = %for.cond334
  store i32 0, i32* %i, align 4, !dbg !4148
  br label %for.cond344, !dbg !4150

for.cond344:                                      ; preds = %for.inc382, %for.end343
  %242 = load i32, i32* %i, align 4, !dbg !4151
  %243 = load i32, i32* %n, align 4, !dbg !4153
  %cmp345 = icmp ult i32 %242, %243, !dbg !4154
  br i1 %cmp345, label %for.body347, label %for.end384, !dbg !4155

for.body347:                                      ; preds = %for.cond344
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4156, metadata !DIExpression()), !dbg !4158
  %244 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4159
  %245 = load i32, i32* %i, align 4, !dbg !4160
  %idxprom348 = zext i32 %245 to i64, !dbg !4159
  %arrayidx349 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %244, i64 %idxprom348, !dbg !4159
  %246 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx349, align 8, !dbg !4159
  store %struct.basic_block_def* %246, %struct.basic_block_def** %new_bb, align 8, !dbg !4161
  %247 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !4162
  %loop_father350 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %247, i32 0, i32 3, !dbg !4164
  %248 = load %struct.loop*, %struct.loop** %loop_father350, align 8, !dbg !4164
  %249 = load %struct.loop*, %struct.loop** %target, align 8, !dbg !4165
  %cmp351 = icmp eq %struct.loop* %248, %249, !dbg !4166
  br i1 %cmp351, label %if.then353, label %if.end356, !dbg !4167

if.then353:                                       ; preds = %for.body347
  %250 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !4168
  %flags354 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %250, i32 0, i32 13, !dbg !4169
  %251 = load i32, i32* %flags354, align 8, !dbg !4170
  %or355 = or i32 %251, 4, !dbg !4170
  store i32 %or355, i32* %flags354, align 8, !dbg !4170
  br label %if.end356, !dbg !4168

if.end356:                                        ; preds = %if.then353, %for.body347
  %252 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !4171
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %252, i32 0, i32 1, !dbg !4171
  %call357 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !4171
  %253 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4171
  %254 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %253, i32 0, i32 0, !dbg !4171
  %255 = extractvalue { i32, %struct.VEC_edge_gc** } %call357, 0, !dbg !4171
  store i32 %255, i32* %254, align 8, !dbg !4171
  %256 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %253, i32 0, i32 1, !dbg !4171
  %257 = extractvalue { i32, %struct.VEC_edge_gc** } %call357, 1, !dbg !4171
  store %struct.VEC_edge_gc** %257, %struct.VEC_edge_gc*** %256, align 8, !dbg !4171
  %258 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4171
  %259 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4171
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %258, i8* align 8 %259, i64 16, i1 false), !dbg !4171
  br label %for.cond358, !dbg !4171

for.cond358:                                      ; preds = %for.inc380, %if.end356
  %260 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4173
  %261 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %260, i32 0, i32 0, !dbg !4173
  %262 = load i32, i32* %261, align 8, !dbg !4173
  %263 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %260, i32 0, i32 1, !dbg !4173
  %264 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %263, align 8, !dbg !4173
  %call359 = call zeroext i8 @ei_cond(i32 %262, %struct.VEC_edge_gc** %264, %struct.edge_def** %ae), !dbg !4173
  %tobool360 = icmp ne i8 %call359, 0, !dbg !4171
  br i1 %tobool360, label %for.body361, label %for.end381, !dbg !4171

for.body361:                                      ; preds = %for.cond358
  %265 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4175
  %dest362 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %265, i32 0, i32 1, !dbg !4177
  %266 = load %struct.basic_block_def*, %struct.basic_block_def** %dest362, align 8, !dbg !4177
  %flags363 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %266, i32 0, i32 13, !dbg !4178
  %267 = load i32, i32* %flags363, align 8, !dbg !4178
  %and364 = and i32 %267, 128, !dbg !4179
  %tobool365 = icmp ne i32 %and364, 0, !dbg !4179
  br i1 %tobool365, label %land.lhs.true366, label %if.end379, !dbg !4180

land.lhs.true366:                                 ; preds = %for.body361
  %268 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4181
  %src367 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %268, i32 0, i32 0, !dbg !4182
  %269 = load %struct.basic_block_def*, %struct.basic_block_def** %src367, align 8, !dbg !4182
  %loop_father368 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %269, i32 0, i32 3, !dbg !4183
  %270 = load %struct.loop*, %struct.loop** %loop_father368, align 8, !dbg !4183
  %271 = load %struct.loop*, %struct.loop** %target, align 8, !dbg !4184
  %cmp369 = icmp eq %struct.loop* %270, %271, !dbg !4185
  br i1 %cmp369, label %if.then376, label %lor.lhs.false371, !dbg !4186

lor.lhs.false371:                                 ; preds = %land.lhs.true366
  %272 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4187
  %dest372 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %272, i32 0, i32 1, !dbg !4188
  %273 = load %struct.basic_block_def*, %struct.basic_block_def** %dest372, align 8, !dbg !4188
  %loop_father373 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %273, i32 0, i32 3, !dbg !4189
  %274 = load %struct.loop*, %struct.loop** %loop_father373, align 8, !dbg !4189
  %275 = load %struct.loop*, %struct.loop** %target, align 8, !dbg !4190
  %cmp374 = icmp eq %struct.loop* %274, %275, !dbg !4191
  br i1 %cmp374, label %if.then376, label %if.end379, !dbg !4192

if.then376:                                       ; preds = %lor.lhs.false371, %land.lhs.true366
  %276 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4193
  %flags377 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %276, i32 0, i32 7, !dbg !4194
  %277 = load i32, i32* %flags377, align 8, !dbg !4195
  %or378 = or i32 %277, 128, !dbg !4195
  store i32 %or378, i32* %flags377, align 8, !dbg !4195
  br label %if.end379, !dbg !4193

if.end379:                                        ; preds = %if.then376, %lor.lhs.false371, %for.body361
  br label %for.inc380, !dbg !4196

for.inc380:                                       ; preds = %if.end379
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4173
  br label %for.cond358, !dbg !4173, !llvm.loop !4197

for.end381:                                       ; preds = %for.cond358
  br label %for.inc382, !dbg !4199

for.inc382:                                       ; preds = %for.end381
  %278 = load i32, i32* %i, align 4, !dbg !4200
  %inc383 = add i32 %278, 1, !dbg !4200
  store i32 %inc383, i32* %i, align 4, !dbg !4200
  br label %for.cond344, !dbg !4201, !llvm.loop !4202

for.end384:                                       ; preds = %for.cond344
  store i32 0, i32* %i, align 4, !dbg !4204
  br label %for.cond385, !dbg !4206

for.cond385:                                      ; preds = %for.inc393, %for.end384
  %279 = load i32, i32* %i, align 4, !dbg !4207
  %280 = load i32, i32* %n, align 4, !dbg !4209
  %cmp386 = icmp ult i32 %279, %280, !dbg !4210
  br i1 %cmp386, label %for.body388, label %for.end395, !dbg !4211

for.body388:                                      ; preds = %for.cond385
  %281 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4212
  %282 = load i32, i32* %i, align 4, !dbg !4213
  %idxprom389 = zext i32 %282 to i64, !dbg !4212
  %arrayidx390 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %281, i64 %idxprom389, !dbg !4212
  %283 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx390, align 8, !dbg !4212
  %flags391 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %283, i32 0, i32 13, !dbg !4214
  %284 = load i32, i32* %flags391, align 8, !dbg !4215
  %and392 = and i32 %284, -129, !dbg !4215
  store i32 %and392, i32* %flags391, align 8, !dbg !4215
  br label %for.inc393, !dbg !4212

for.inc393:                                       ; preds = %for.body388
  %285 = load i32, i32* %i, align 4, !dbg !4216
  %inc394 = add i32 %285, 1, !dbg !4216
  store i32 %inc394, i32* %i, align 4, !dbg !4216
  br label %for.cond385, !dbg !4217, !llvm.loop !4218

for.end395:                                       ; preds = %for.cond385
  br label %if.end396, !dbg !4220

if.end396:                                        ; preds = %for.end395, %if.end331
  %286 = load i32, i32* %is_latch, align 4, !dbg !4221
  %tobool397 = icmp ne i32 %286, 0, !dbg !4221
  br i1 %tobool397, label %if.then398, label %if.else410, !dbg !4223

if.then398:                                       ; preds = %if.end396
  %287 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !4224
  %288 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4226
  %arrayidx399 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %288, i64 0, !dbg !4226
  %289 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx399, align 8, !dbg !4226
  %call400 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %287, %struct.basic_block_def* %289), !dbg !4227
  %arrayidx401 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4228
  %290 = load %struct.edge_def*, %struct.edge_def** %arrayidx401, align 16, !dbg !4228
  %291 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4229
  %header402 = getelementptr inbounds %struct.loop, %struct.loop* %291, i32 0, i32 2, !dbg !4230
  %292 = load %struct.basic_block_def*, %struct.basic_block_def** %header402, align 8, !dbg !4230
  %call403 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %290, %struct.basic_block_def* %292), !dbg !4231
  %293 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4232
  %arrayidx404 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %293, i64 0, !dbg !4232
  %294 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx404, align 8, !dbg !4232
  %295 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4233
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %294, %struct.basic_block_def* %295), !dbg !4234
  %296 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4235
  %297 = load i32, i32* %n, align 4, !dbg !4236
  %sub405 = sub i32 %297, 1, !dbg !4237
  %idxprom406 = zext i32 %sub405 to i64, !dbg !4235
  %arrayidx407 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %296, i64 %idxprom406, !dbg !4235
  %298 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx407, align 8, !dbg !4235
  %299 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4238
  %latch408 = getelementptr inbounds %struct.loop, %struct.loop* %299, i32 0, i32 3, !dbg !4239
  store %struct.basic_block_def* %298, %struct.basic_block_def** %latch408, align 8, !dbg !4240
  store %struct.basic_block_def* %298, %struct.basic_block_def** %latch, align 8, !dbg !4241
  %arrayidx409 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4242
  %300 = load %struct.edge_def*, %struct.edge_def** %arrayidx409, align 16, !dbg !4242
  store %struct.edge_def* %300, %struct.edge_def** %latch_edge, align 8, !dbg !4243
  store %struct.edge_def* %300, %struct.edge_def** %e.addr, align 8, !dbg !4244
  br label %if.end419, !dbg !4245

if.else410:                                       ; preds = %if.end396
  %arrayidx411 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4246
  %301 = load %struct.edge_def*, %struct.edge_def** %arrayidx411, align 16, !dbg !4246
  %302 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4248
  %header412 = getelementptr inbounds %struct.loop, %struct.loop* %302, i32 0, i32 2, !dbg !4249
  %303 = load %struct.basic_block_def*, %struct.basic_block_def** %header412, align 8, !dbg !4249
  %call413 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %301, %struct.basic_block_def* %303), !dbg !4250
  %304 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4251
  %305 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4252
  %arrayidx414 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %305, i64 0, !dbg !4252
  %306 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx414, align 8, !dbg !4252
  %call415 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %304, %struct.basic_block_def* %306), !dbg !4253
  %307 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4254
  %arrayidx416 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %307, i64 0, !dbg !4254
  %308 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx416, align 8, !dbg !4254
  %309 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4255
  %src417 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %309, i32 0, i32 0, !dbg !4256
  %310 = load %struct.basic_block_def*, %struct.basic_block_def** %src417, align 8, !dbg !4256
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %308, %struct.basic_block_def* %310), !dbg !4257
  %arrayidx418 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 0, !dbg !4258
  %311 = load %struct.edge_def*, %struct.edge_def** %arrayidx418, align 16, !dbg !4258
  store %struct.edge_def* %311, %struct.edge_def** %e.addr, align 8, !dbg !4259
  br label %if.end419

if.end419:                                        ; preds = %if.else410, %if.then398
  %312 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !4260
  %tobool420 = icmp ne %struct.edge_def* %312, null, !dbg !4260
  br i1 %tobool420, label %land.lhs.true421, label %if.end449, !dbg !4262

land.lhs.true421:                                 ; preds = %if.end419
  %313 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit.addr, align 8, !dbg !4263
  %elms422 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %313, i32 0, i32 3, !dbg !4263
  %314 = load i32, i32* %j, align 4, !dbg !4263
  %add423 = add i32 %314, 1, !dbg !4263
  %div424 = udiv i32 %add423, 64, !dbg !4263
  %idxprom425 = zext i32 %div424 to i64, !dbg !4263
  %arrayidx426 = getelementptr inbounds [1 x i64], [1 x i64]* %elms422, i64 0, i64 %idxprom425, !dbg !4263
  %315 = load i64, i64* %arrayidx426, align 8, !dbg !4263
  %316 = load i32, i32* %j, align 4, !dbg !4263
  %add427 = add i32 %316, 1, !dbg !4263
  %rem428 = urem i32 %add427, 64, !dbg !4263
  %sh_prom429 = zext i32 %rem428 to i64, !dbg !4263
  %shr430 = lshr i64 %315, %sh_prom429, !dbg !4263
  %and431 = and i64 %shr430, 1, !dbg !4263
  %tobool432 = icmp ne i64 %and431, 0, !dbg !4263
  br i1 %tobool432, label %if.then433, label %if.end449, !dbg !4264

if.then433:                                       ; preds = %land.lhs.true421
  %317 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %to_remove.addr, align 8, !dbg !4265
  %tobool434 = icmp ne %struct.VEC_edge_heap** %317, null, !dbg !4265
  br i1 %tobool434, label %if.then435, label %if.end438, !dbg !4268

if.then435:                                       ; preds = %if.then433
  %318 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %to_remove.addr, align 8, !dbg !4269
  %arrayidx436 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 1, !dbg !4269
  %319 = load %struct.edge_def*, %struct.edge_def** %arrayidx436, align 8, !dbg !4269
  %call437 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %318, %struct.edge_def* %319), !dbg !4269
  br label %if.end438, !dbg !4269

if.end438:                                        ; preds = %if.then435, %if.then433
  %arrayidx439 = getelementptr inbounds [2 x %struct.edge_def*], [2 x %struct.edge_def*]* %new_spec_edges, i64 0, i64 1, !dbg !4270
  %320 = load %struct.edge_def*, %struct.edge_def** %arrayidx439, align 8, !dbg !4270
  call void @set_zero_probability(%struct.edge_def* %320), !dbg !4271
  %321 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4272
  %tobool440 = icmp ne %struct.bitmap_head_def* %321, null, !dbg !4272
  br i1 %tobool440, label %if.then441, label %if.end448, !dbg !4274

if.then441:                                       ; preds = %if.end438
  %322 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4275
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %322, i32 0, i32* %i), !dbg !4275
  br label %for.cond442, !dbg !4275

for.cond442:                                      ; preds = %for.inc446, %if.then441
  %call443 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4278
  %tobool444 = icmp ne i8 %call443, 0, !dbg !4275
  br i1 %tobool444, label %for.body445, label %for.end447, !dbg !4275

for.body445:                                      ; preds = %for.cond442
  %323 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4280
  %324 = load i32, i32* %i, align 4, !dbg !4282
  %idx.ext = zext i32 %324 to i64, !dbg !4283
  %add.ptr = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %323, i64 %idx.ext, !dbg !4283
  %325 = load i32, i32* %scale_after_exit, align 4, !dbg !4284
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %add.ptr, i32 1, i32 %325, i32 10000), !dbg !4285
  br label %for.inc446, !dbg !4286

for.inc446:                                       ; preds = %for.body445
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4278
  br label %for.cond442, !dbg !4278, !llvm.loop !4287

for.end447:                                       ; preds = %for.cond442
  br label %if.end448, !dbg !4289

if.end448:                                        ; preds = %for.end447, %if.end438
  br label %if.end449, !dbg !4290

if.end449:                                        ; preds = %if.end448, %land.lhs.true421, %if.end419
  %326 = load %struct.basic_block_def*, %struct.basic_block_def** %first_active_latch, align 8, !dbg !4291
  %tobool450 = icmp ne %struct.basic_block_def* %326, null, !dbg !4291
  br i1 %tobool450, label %if.end457, label %if.then451, !dbg !4293

if.then451:                                       ; preds = %if.end449
  %327 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_active, align 8, !dbg !4294
  %328 = bitcast %struct.basic_block_def** %327 to i8*, !dbg !4296
  %329 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4297
  %330 = bitcast %struct.basic_block_def** %329 to i8*, !dbg !4296
  %331 = load i32, i32* %n, align 4, !dbg !4298
  %conv452 = zext i32 %331 to i64, !dbg !4298
  %mul453 = mul i64 %conv452, 8, !dbg !4299
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %328, i8* align 8 %330, i64 %mul453, i1 false), !dbg !4296
  %332 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4300
  %333 = load i32, i32* %n, align 4, !dbg !4301
  %sub454 = sub i32 %333, 1, !dbg !4302
  %idxprom455 = zext i32 %sub454 to i64, !dbg !4300
  %arrayidx456 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %332, i64 %idxprom455, !dbg !4300
  %334 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx456, align 8, !dbg !4300
  store %struct.basic_block_def* %334, %struct.basic_block_def** %first_active_latch, align 8, !dbg !4303
  br label %if.end457, !dbg !4304

if.end457:                                        ; preds = %if.then451, %if.end449
  %335 = load i32, i32* %flags.addr, align 4, !dbg !4305
  %and458 = and i32 %335, 1, !dbg !4307
  %tobool459 = icmp ne i32 %and458, 0, !dbg !4307
  br i1 %tobool459, label %if.then460, label %if.end466, !dbg !4308

if.then460:                                       ; preds = %if.end457
  %336 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4309
  %337 = load i32, i32* %n, align 4, !dbg !4311
  %338 = load i32, i32* %scale_act, align 4, !dbg !4312
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %336, i32 %337, i32 %338, i32 10000), !dbg !4313
  %339 = load i32, i32* %scale_act, align 4, !dbg !4314
  %340 = load i32*, i32** %scale_step, align 8, !dbg !4314
  %341 = load i32, i32* %j, align 4, !dbg !4314
  %idxprom461 = zext i32 %341 to i64, !dbg !4314
  %arrayidx462 = getelementptr inbounds i32, i32* %340, i64 %idxprom461, !dbg !4314
  %342 = load i32, i32* %arrayidx462, align 4, !dbg !4314
  %mul463 = mul nsw i32 %339, %342, !dbg !4314
  %add464 = add nsw i32 %mul463, 5000, !dbg !4314
  %div465 = sdiv i32 %add464, 10000, !dbg !4314
  store i32 %div465, i32* %scale_act, align 4, !dbg !4315
  br label %if.end466, !dbg !4316

if.end466:                                        ; preds = %if.then460, %if.end457
  br label %for.inc467, !dbg !4317

for.inc467:                                       ; preds = %if.end466
  %343 = load i32, i32* %j, align 4, !dbg !4318
  %inc468 = add i32 %343, 1, !dbg !4318
  store i32 %inc468, i32* %j, align 4, !dbg !4318
  br label %for.cond302, !dbg !4319, !llvm.loop !4320

for.end469:                                       ; preds = %for.cond302
  %344 = load %struct.basic_block_def**, %struct.basic_block_def*** %new_bbs, align 8, !dbg !4322
  %345 = bitcast %struct.basic_block_def** %344 to i8*, !dbg !4322
  call void @free(i8* %345), !dbg !4323
  %346 = load %struct.loop**, %struct.loop*** %orig_loops, align 8, !dbg !4324
  %347 = bitcast %struct.loop** %346 to i8*, !dbg !4324
  call void @free(i8* %347), !dbg !4325
  %348 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !4326
  %tobool470 = icmp ne %struct.edge_def* %348, null, !dbg !4326
  br i1 %tobool470, label %land.lhs.true471, label %if.end493, !dbg !4328

land.lhs.true471:                                 ; preds = %for.end469
  %349 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %wont_exit.addr, align 8, !dbg !4329
  %elms472 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %349, i32 0, i32 3, !dbg !4329
  %arrayidx473 = getelementptr inbounds [1 x i64], [1 x i64]* %elms472, i64 0, i64 0, !dbg !4329
  %350 = load i64, i64* %arrayidx473, align 8, !dbg !4329
  %shr474 = lshr i64 %350, 0, !dbg !4329
  %and475 = and i64 %shr474, 1, !dbg !4329
  %tobool476 = icmp ne i64 %and475, 0, !dbg !4329
  br i1 %tobool476, label %if.then477, label %if.end493, !dbg !4330

if.then477:                                       ; preds = %land.lhs.true471
  %351 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %to_remove.addr, align 8, !dbg !4331
  %tobool478 = icmp ne %struct.VEC_edge_heap** %351, null, !dbg !4331
  br i1 %tobool478, label %if.then479, label %if.end481, !dbg !4334

if.then479:                                       ; preds = %if.then477
  %352 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %to_remove.addr, align 8, !dbg !4335
  %353 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !4335
  %call480 = call %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %352, %struct.edge_def* %353), !dbg !4335
  br label %if.end481, !dbg !4335

if.end481:                                        ; preds = %if.then479, %if.then477
  %354 = load %struct.edge_def*, %struct.edge_def** %orig.addr, align 8, !dbg !4336
  call void @set_zero_probability(%struct.edge_def* %354), !dbg !4337
  %355 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4338
  %tobool482 = icmp ne %struct.bitmap_head_def* %355, null, !dbg !4338
  br i1 %tobool482, label %if.then483, label %if.end492, !dbg !4340

if.then483:                                       ; preds = %if.end481
  %356 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4341
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %356, i32 0, i32* %i), !dbg !4341
  br label %for.cond484, !dbg !4341

for.cond484:                                      ; preds = %for.inc490, %if.then483
  %call485 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4344
  %tobool486 = icmp ne i8 %call485, 0, !dbg !4341
  br i1 %tobool486, label %for.body487, label %for.end491, !dbg !4341

for.body487:                                      ; preds = %for.cond484
  %357 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4346
  %358 = load i32, i32* %i, align 4, !dbg !4348
  %idx.ext488 = zext i32 %358 to i64, !dbg !4349
  %add.ptr489 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %357, i64 %idx.ext488, !dbg !4349
  %359 = load i32, i32* %scale_after_exit, align 4, !dbg !4350
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %add.ptr489, i32 1, i32 %359, i32 10000), !dbg !4351
  br label %for.inc490, !dbg !4352

for.inc490:                                       ; preds = %for.body487
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !4344
  br label %for.cond484, !dbg !4344, !llvm.loop !4353

for.end491:                                       ; preds = %for.cond484
  br label %if.end492, !dbg !4355

if.end492:                                        ; preds = %for.end491, %if.end481
  br label %if.end493, !dbg !4356

if.end493:                                        ; preds = %if.end492, %land.lhs.true471, %for.end469
  %360 = load i32, i32* %is_latch, align 4, !dbg !4357
  %tobool494 = icmp ne i32 %360, 0, !dbg !4357
  br i1 %tobool494, label %if.end498, label %if.then495, !dbg !4359

if.then495:                                       ; preds = %if.end493
  %361 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4360
  %dest496 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %361, i32 0, i32 1, !dbg !4361
  %362 = load %struct.basic_block_def*, %struct.basic_block_def** %dest496, align 8, !dbg !4361
  %363 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4362
  %src497 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %363, i32 0, i32 0, !dbg !4363
  %364 = load %struct.basic_block_def*, %struct.basic_block_def** %src497, align 8, !dbg !4363
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %362, %struct.basic_block_def* %364), !dbg !4364
  br label %if.end498, !dbg !4364

if.end498:                                        ; preds = %if.then495, %if.end493
  %365 = load i32, i32* %flags.addr, align 4, !dbg !4365
  %and499 = and i32 %365, 1, !dbg !4367
  %tobool500 = icmp ne i32 %and499, 0, !dbg !4367
  br i1 %tobool500, label %if.then501, label %if.end502, !dbg !4368

if.then501:                                       ; preds = %if.end498
  %366 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4369
  %367 = load i32, i32* %n, align 4, !dbg !4371
  %368 = load i32, i32* %scale_main, align 4, !dbg !4372
  call void @scale_bbs_frequencies_int(%struct.basic_block_def** %366, i32 %367, i32 %368, i32 10000), !dbg !4373
  %369 = load i32*, i32** %scale_step, align 8, !dbg !4374
  %370 = bitcast i32* %369 to i8*, !dbg !4374
  call void @free(i8* %370), !dbg !4375
  br label %if.end502, !dbg !4376

if.end502:                                        ; preds = %if.then501, %if.end498
  store i32 0, i32* %i, align 4, !dbg !4377
  br label %for.cond503, !dbg !4379

for.cond503:                                      ; preds = %for.inc531, %if.end502
  %371 = load i32, i32* %i, align 4, !dbg !4380
  %372 = load i32, i32* %n, align 4, !dbg !4382
  %cmp504 = icmp ult i32 %371, %372, !dbg !4383
  br i1 %cmp504, label %for.body506, label %for.end533, !dbg !4384

for.body506:                                      ; preds = %for.cond503
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dominated, metadata !4385, metadata !DIExpression()), !dbg !4387
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dom_bb, metadata !4388, metadata !DIExpression()), !dbg !4389
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap** %dom_bbs, metadata !4390, metadata !DIExpression()), !dbg !4391
  call void @llvm.dbg.declare(metadata i32* %j507, metadata !4392, metadata !DIExpression()), !dbg !4393
  %373 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4394
  %374 = load i32, i32* %i, align 4, !dbg !4395
  %idxprom508 = zext i32 %374 to i64, !dbg !4394
  %arrayidx509 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %373, i64 %idxprom508, !dbg !4394
  %375 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx509, align 8, !dbg !4394
  store %struct.basic_block_def* %375, %struct.basic_block_def** %bb, align 8, !dbg !4396
  %376 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4397
  %aux510 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %376, i32 0, i32 2, !dbg !4398
  store i8* null, i8** %aux510, align 8, !dbg !4399
  %377 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4400
  %call511 = call %struct.VEC_basic_block_heap* @get_dominated_by(i32 1, %struct.basic_block_def* %377), !dbg !4401
  store %struct.VEC_basic_block_heap* %call511, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !4402
  store i32 0, i32* %j507, align 4, !dbg !4403
  br label %for.cond512, !dbg !4405

for.cond512:                                      ; preds = %for.inc528, %for.body506
  %378 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !4406
  %tobool513 = icmp ne %struct.VEC_basic_block_heap* %378, null, !dbg !4406
  br i1 %tobool513, label %cond.true514, label %cond.false515, !dbg !4406

cond.true514:                                     ; preds = %for.cond512
  %379 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %dom_bbs, align 8, !dbg !4406
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %379, i32 0, i32 0, !dbg !4406
  br label %cond.end516, !dbg !4406

cond.false515:                                    ; preds = %for.cond512
  br label %cond.end516, !dbg !4406

cond.end516:                                      ; preds = %cond.false515, %cond.true514
  %cond517 = phi %struct.VEC_basic_block_base* [ %base, %cond.true514 ], [ null, %cond.false515 ], !dbg !4406
  %380 = load i32, i32* %j507, align 4, !dbg !4406
  %call518 = call i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %cond517, i32 %380, %struct.basic_block_def** %dominated), !dbg !4406
  %tobool519 = icmp ne i32 %call518, 0, !dbg !4408
  br i1 %tobool519, label %for.body520, label %for.end530, !dbg !4408

for.body520:                                      ; preds = %cond.end516
  %381 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4409
  %382 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !4412
  %call521 = call zeroext i8 @flow_bb_inside_loop_p(%struct.loop* %381, %struct.basic_block_def* %382), !dbg !4413
  %tobool522 = icmp ne i8 %call521, 0, !dbg !4413
  br i1 %tobool522, label %if.then523, label %if.end524, !dbg !4414

if.then523:                                       ; preds = %for.body520
  br label %for.inc528, !dbg !4415

if.end524:                                        ; preds = %for.body520
  %383 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_active, align 8, !dbg !4416
  %384 = load i32, i32* %i, align 4, !dbg !4417
  %idxprom525 = zext i32 %384 to i64, !dbg !4416
  %arrayidx526 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %383, i64 %idxprom525, !dbg !4416
  %385 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx526, align 8, !dbg !4416
  %386 = load %struct.basic_block_def*, %struct.basic_block_def** %first_active_latch, align 8, !dbg !4418
  %call527 = call %struct.basic_block_def* @nearest_common_dominator(i32 1, %struct.basic_block_def* %385, %struct.basic_block_def* %386), !dbg !4419
  store %struct.basic_block_def* %call527, %struct.basic_block_def** %dom_bb, align 8, !dbg !4420
  %387 = load %struct.basic_block_def*, %struct.basic_block_def** %dominated, align 8, !dbg !4421
  %388 = load %struct.basic_block_def*, %struct.basic_block_def** %dom_bb, align 8, !dbg !4422
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %387, %struct.basic_block_def* %388), !dbg !4423
  br label %for.inc528, !dbg !4424

for.inc528:                                       ; preds = %if.end524, %if.then523
  %389 = load i32, i32* %j507, align 4, !dbg !4425
  %inc529 = add i32 %389, 1, !dbg !4425
  store i32 %inc529, i32* %j507, align 4, !dbg !4425
  br label %for.cond512, !dbg !4426, !llvm.loop !4427

for.end530:                                       ; preds = %cond.end516
  call void @VEC_basic_block_heap_free(%struct.VEC_basic_block_heap** %dom_bbs), !dbg !4429
  br label %for.inc531, !dbg !4430

for.inc531:                                       ; preds = %for.end530
  %390 = load i32, i32* %i, align 4, !dbg !4431
  %inc532 = add i32 %390, 1, !dbg !4431
  store i32 %inc532, i32* %i, align 4, !dbg !4431
  br label %for.cond503, !dbg !4432, !llvm.loop !4433

for.end533:                                       ; preds = %for.cond503
  %391 = load %struct.basic_block_def**, %struct.basic_block_def*** %first_active, align 8, !dbg !4435
  %392 = bitcast %struct.basic_block_def** %391 to i8*, !dbg !4435
  call void @free(i8* %392), !dbg !4436
  %393 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !4437
  %394 = bitcast %struct.basic_block_def** %393 to i8*, !dbg !4437
  call void @free(i8* %394), !dbg !4438
  %395 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4439
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %395), !dbg !4439
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %bbs_to_scale, align 8, !dbg !4439
  store i8 1, i8* %retval, align 1, !dbg !4440
  br label %return, !dbg !4440

return:                                           ; preds = %for.end533, %if.then44
  %396 = load i8, i8* %retval, align 1, !dbg !4441
  ret i8 %396, !dbg !4441
}

declare dso_local zeroext i8 @flow_bb_inside_loop_p(%struct.loop*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop*) #2

declare dso_local %struct.edge_def* @loop_latch_edge(%struct.loop*) #2

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #2

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @copy_loops_to(%struct.loop** %copied_loops, i32 %n, %struct.loop* %target) #0 !dbg !4442 {
entry:
  %copied_loops.addr = alloca %struct.loop**, align 8
  %n.addr = alloca i32, align 4
  %target.addr = alloca %struct.loop*, align 8
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  store %struct.loop** %copied_loops, %struct.loop*** %copied_loops.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %copied_loops.addr, metadata !4445, metadata !DIExpression()), !dbg !4446
  store i32 %n, i32* %n.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %n.addr, metadata !4447, metadata !DIExpression()), !dbg !4448
  store %struct.loop* %target, %struct.loop** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %target.addr, metadata !4449, metadata !DIExpression()), !dbg !4450
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !4451, metadata !DIExpression()), !dbg !4452
  call void @llvm.dbg.declare(metadata i32* %i, metadata !4453, metadata !DIExpression()), !dbg !4454
  store i32 0, i32* %i, align 4, !dbg !4455
  br label %for.cond, !dbg !4457

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load i32, i32* %i, align 4, !dbg !4458
  %1 = load i32, i32* %n.addr, align 4, !dbg !4460
  %cmp = icmp slt i32 %0, %1, !dbg !4461
  br i1 %cmp, label %for.body, label %for.end, !dbg !4462

for.body:                                         ; preds = %for.cond
  %2 = load %struct.loop**, %struct.loop*** %copied_loops.addr, align 8, !dbg !4463
  %3 = load i32, i32* %i, align 4, !dbg !4465
  %idxprom = sext i32 %3 to i64, !dbg !4463
  %arrayidx = getelementptr inbounds %struct.loop*, %struct.loop** %2, i64 %idxprom, !dbg !4463
  %4 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !4463
  %5 = load %struct.loop*, %struct.loop** %target.addr, align 8, !dbg !4466
  %call = call %struct.loop* @duplicate_loop(%struct.loop* %4, %struct.loop* %5), !dbg !4467
  store %struct.loop* %call, %struct.loop** %aloop, align 8, !dbg !4468
  %6 = load %struct.loop**, %struct.loop*** %copied_loops.addr, align 8, !dbg !4469
  %7 = load i32, i32* %i, align 4, !dbg !4470
  %idxprom1 = sext i32 %7 to i64, !dbg !4469
  %arrayidx2 = getelementptr inbounds %struct.loop*, %struct.loop** %6, i64 %idxprom1, !dbg !4469
  %8 = load %struct.loop*, %struct.loop** %arrayidx2, align 8, !dbg !4469
  %9 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !4471
  call void @duplicate_subloops(%struct.loop* %8, %struct.loop* %9), !dbg !4472
  br label %for.inc, !dbg !4473

for.inc:                                          ; preds = %for.body
  %10 = load i32, i32* %i, align 4, !dbg !4474
  %inc = add nsw i32 %10, 1, !dbg !4474
  store i32 %inc, i32* %i, align 4, !dbg !4474
  br label %for.cond, !dbg !4475, !llvm.loop !4476

for.end:                                          ; preds = %for.cond
  ret void, !dbg !4478
}

declare dso_local void @copy_bbs(%struct.basic_block_def**, i32, %struct.basic_block_def**, %struct.edge_def**, i32, %struct.edge_def**, %struct.loop*, %struct.basic_block_def*) #2

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_heap_safe_push(%struct.VEC_edge_heap** %vec_, %struct.edge_def* %obj_) #0 !dbg !4479 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !4482, metadata !DIExpression()), !dbg !4483
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !4484, metadata !DIExpression()), !dbg !4483
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4483
  %call = call i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %0, i32 1), !dbg !4483
  %1 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4483
  %2 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %1, align 8, !dbg !4483
  %tobool = icmp ne %struct.VEC_edge_heap* %2, null, !dbg !4483
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4483

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !4483
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %3, align 8, !dbg !4483
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %4, i32 0, i32 0, !dbg !4483
  br label %cond.end, !dbg !4483

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4483

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4483
  %5 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !4483
  %call1 = call %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %cond, %struct.edge_def* %5), !dbg !4483
  ret %struct.edge_def** %call1, !dbg !4483
}

; Function Attrs: noinline nounwind uwtable
define internal void @set_zero_probability(%struct.edge_def* %e) #0 !dbg !4485 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %ae = alloca %struct.edge_def*, align 8
  %last = alloca %struct.edge_def*, align 8
  %n = alloca i32, align 4
  %cnt = alloca i64, align 8
  %cnt1 = alloca i64, align 8
  %prob = alloca i32, align 4
  %prob1 = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4488, metadata !DIExpression()), !dbg !4489
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4490, metadata !DIExpression()), !dbg !4491
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4492
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 0, !dbg !4493
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4493
  store %struct.basic_block_def* %1, %struct.basic_block_def** %bb, align 8, !dbg !4491
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4494, metadata !DIExpression()), !dbg !4495
  call void @llvm.dbg.declare(metadata %struct.edge_def** %ae, metadata !4496, metadata !DIExpression()), !dbg !4497
  call void @llvm.dbg.declare(metadata %struct.edge_def** %last, metadata !4498, metadata !DIExpression()), !dbg !4499
  store %struct.edge_def* null, %struct.edge_def** %last, align 8, !dbg !4499
  call void @llvm.dbg.declare(metadata i32* %n, metadata !4500, metadata !DIExpression()), !dbg !4501
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4502
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4502
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4502
  %tobool = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !4502
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4502

cond.true:                                        ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4502
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !4502
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4502
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !4502
  br label %cond.end, !dbg !4502

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4502

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4502
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4502
  store i32 %call, i32* %n, align 4, !dbg !4501
  call void @llvm.dbg.declare(metadata i64* %cnt, metadata !4503, metadata !DIExpression()), !dbg !4504
  %6 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4505
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %6, i32 0, i32 9, !dbg !4506
  %7 = load i64, i64* %count, align 8, !dbg !4506
  store i64 %7, i64* %cnt, align 8, !dbg !4504
  call void @llvm.dbg.declare(metadata i64* %cnt1, metadata !4507, metadata !DIExpression()), !dbg !4508
  call void @llvm.dbg.declare(metadata i32* %prob, metadata !4509, metadata !DIExpression()), !dbg !4510
  %8 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4511
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 8, !dbg !4512
  %9 = load i32, i32* %probability, align 4, !dbg !4512
  store i32 %9, i32* %prob, align 4, !dbg !4510
  call void @llvm.dbg.declare(metadata i32* %prob1, metadata !4513, metadata !DIExpression()), !dbg !4514
  %10 = load i32, i32* %n, align 4, !dbg !4515
  %cmp = icmp ugt i32 %10, 1, !dbg !4515
  br i1 %cmp, label %cond.false3, label %cond.true2, !dbg !4515

cond.true2:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 938, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4515
  br label %cond.end4, !dbg !4515

cond.false3:                                      ; preds = %cond.end
  br label %cond.end4, !dbg !4515

cond.end4:                                        ; preds = %cond.false3, %cond.true2
  %cond5 = phi i32 [ 0, %cond.true2 ], [ 0, %cond.false3 ], !dbg !4515
  %11 = load i64, i64* %cnt, align 8, !dbg !4516
  %12 = load i32, i32* %n, align 4, !dbg !4517
  %sub = sub i32 %12, 1, !dbg !4518
  %conv = zext i32 %sub to i64, !dbg !4519
  %div = sdiv i64 %11, %conv, !dbg !4520
  store i64 %div, i64* %cnt1, align 8, !dbg !4521
  %13 = load i32, i32* %prob, align 4, !dbg !4522
  %14 = load i32, i32* %n, align 4, !dbg !4523
  %sub6 = sub i32 %14, 1, !dbg !4524
  %div7 = udiv i32 %13, %sub6, !dbg !4525
  store i32 %div7, i32* %prob1, align 4, !dbg !4526
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4527
  %succs8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %15, i32 0, i32 1, !dbg !4527
  %call9 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs8), !dbg !4527
  %16 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4527
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 0, !dbg !4527
  %18 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 0, !dbg !4527
  store i32 %18, i32* %17, align 8, !dbg !4527
  %19 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %16, i32 0, i32 1, !dbg !4527
  %20 = extractvalue { i32, %struct.VEC_edge_gc** } %call9, 1, !dbg !4527
  store %struct.VEC_edge_gc** %20, %struct.VEC_edge_gc*** %19, align 8, !dbg !4527
  %21 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4527
  %22 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4527
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %21, i8* align 8 %22, i64 16, i1 false), !dbg !4527
  br label %for.cond, !dbg !4527

for.cond:                                         ; preds = %for.inc, %cond.end4
  %23 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4529
  %24 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 0, !dbg !4529
  %25 = load i32, i32* %24, align 8, !dbg !4529
  %26 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %23, i32 0, i32 1, !dbg !4529
  %27 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %26, align 8, !dbg !4529
  %call10 = call zeroext i8 @ei_cond(i32 %25, %struct.VEC_edge_gc** %27, %struct.edge_def** %ae), !dbg !4529
  %tobool11 = icmp ne i8 %call10, 0, !dbg !4527
  br i1 %tobool11, label %for.body, label %for.end, !dbg !4527

for.body:                                         ; preds = %for.cond
  %28 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4531
  %29 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4534
  %cmp12 = icmp eq %struct.edge_def* %28, %29, !dbg !4535
  br i1 %cmp12, label %if.then, label %if.end, !dbg !4536

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4537

if.end:                                           ; preds = %for.body
  %30 = load i32, i32* %prob1, align 4, !dbg !4538
  %31 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4539
  %probability14 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %31, i32 0, i32 8, !dbg !4540
  %32 = load i32, i32* %probability14, align 4, !dbg !4541
  %add = add i32 %32, %30, !dbg !4541
  store i32 %add, i32* %probability14, align 4, !dbg !4541
  %33 = load i64, i64* %cnt1, align 8, !dbg !4542
  %34 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4543
  %count15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 9, !dbg !4544
  %35 = load i64, i64* %count15, align 8, !dbg !4545
  %add16 = add nsw i64 %35, %33, !dbg !4545
  store i64 %add16, i64* %count15, align 8, !dbg !4545
  %36 = load %struct.edge_def*, %struct.edge_def** %ae, align 8, !dbg !4546
  store %struct.edge_def* %36, %struct.edge_def** %last, align 8, !dbg !4547
  br label %for.inc, !dbg !4548

for.inc:                                          ; preds = %if.end, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4529
  br label %for.cond, !dbg !4529, !llvm.loop !4549

for.end:                                          ; preds = %for.cond
  %37 = load i32, i32* %prob, align 4, !dbg !4551
  %38 = load i32, i32* %n, align 4, !dbg !4552
  %sub17 = sub i32 %38, 1, !dbg !4553
  %rem = urem i32 %37, %sub17, !dbg !4554
  %39 = load %struct.edge_def*, %struct.edge_def** %last, align 8, !dbg !4555
  %probability18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %39, i32 0, i32 8, !dbg !4556
  %40 = load i32, i32* %probability18, align 4, !dbg !4557
  %add19 = add i32 %40, %rem, !dbg !4557
  store i32 %add19, i32* %probability18, align 4, !dbg !4557
  %41 = load i64, i64* %cnt, align 8, !dbg !4558
  %42 = load i32, i32* %n, align 4, !dbg !4559
  %sub20 = sub i32 %42, 1, !dbg !4560
  %conv21 = zext i32 %sub20 to i64, !dbg !4561
  %rem22 = srem i64 %41, %conv21, !dbg !4562
  %43 = load %struct.edge_def*, %struct.edge_def** %last, align 8, !dbg !4563
  %count23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %43, i32 0, i32 9, !dbg !4564
  %44 = load i64, i64* %count23, align 8, !dbg !4565
  %add24 = add nsw i64 %44, %rem22, !dbg !4565
  store i64 %add24, i64* %count23, align 8, !dbg !4565
  %45 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4566
  %probability25 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %45, i32 0, i32 8, !dbg !4567
  store i32 0, i32* %probability25, align 4, !dbg !4568
  %46 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4569
  %count26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %46, i32 0, i32 9, !dbg !4570
  store i64 0, i64* %count26, align 8, !dbg !4571
  ret void, !dbg !4572
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !4573 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4581, metadata !DIExpression()), !dbg !4582
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !4583, metadata !DIExpression()), !dbg !4584
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !4585, metadata !DIExpression()), !dbg !4586
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4587, metadata !DIExpression()), !dbg !4588
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !4589
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !4590
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !4590
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4591
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !4592
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !4593
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4594
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !4595
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !4596
  br label %while.body, !dbg !4597

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4598
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !4601
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !4601
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !4598
  br i1 %tobool, label %if.end, label %if.then, !dbg !4602

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4603
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !4605
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !4606
  br label %while.end, !dbg !4607

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4608
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !4610
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !4610
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !4611
  %9 = load i32, i32* %indx, align 8, !dbg !4611
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !4612
  %div = udiv i32 %10, 128, !dbg !4613
  %cmp = icmp uge i32 %9, %div, !dbg !4614
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !4615

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !4616

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4617
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !4618
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !4618
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !4619
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4619
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4620
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !4621
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !4622
  br label %while.body, !dbg !4597, !llvm.loop !4623

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4625
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4627
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !4627
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !4628
  %17 = load i32, i32* %indx9, align 8, !dbg !4628
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !4629
  %div10 = udiv i32 %18, 128, !dbg !4630
  %cmp11 = icmp ne i32 %17, %div10, !dbg !4631
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !4632

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4633
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !4634
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !4634
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !4635
  %21 = load i32, i32* %indx14, align 8, !dbg !4635
  %mul = mul i32 %21, 128, !dbg !4636
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !4637
  br label %if.end15, !dbg !4638

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !4639
  %div16 = udiv i32 %22, 64, !dbg !4640
  %rem = urem i32 %div16, 2, !dbg !4641
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4642
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !4643
  store i32 %rem, i32* %word_no, align 8, !dbg !4644
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4645
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !4646
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !4646
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !4647
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4648
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !4649
  %27 = load i32, i32* %word_no18, align 8, !dbg !4649
  %idxprom = zext i32 %27 to i64, !dbg !4645
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !4645
  %28 = load i64, i64* %arrayidx, align 8, !dbg !4645
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4650
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !4651
  store i64 %28, i64* %bits19, align 8, !dbg !4652
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !4653
  %rem20 = urem i32 %30, 64, !dbg !4654
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4655
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !4656
  %32 = load i64, i64* %bits21, align 8, !dbg !4657
  %sh_prom = zext i32 %rem20 to i64, !dbg !4657
  %shr = lshr i64 %32, %sh_prom, !dbg !4657
  store i64 %shr, i64* %bits21, align 8, !dbg !4657
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4658
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !4659
  %34 = load i64, i64* %bits22, align 8, !dbg !4659
  %tobool23 = icmp ne i64 %34, 0, !dbg !4660
  %lnot = xor i1 %tobool23, true, !dbg !4660
  %lnot.ext = zext i1 %lnot to i32, !dbg !4660
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !4661
  %add = add i32 %35, %lnot.ext, !dbg !4661
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !4661
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !4662
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !4663
  store i32 %36, i32* %37, align 4, !dbg !4664
  ret void, !dbg !4665
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4666 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4669, metadata !DIExpression()), !dbg !4670
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4671, metadata !DIExpression()), !dbg !4672
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4673
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4675
  %1 = load i64, i64* %bits, align 8, !dbg !4675
  %tobool = icmp ne i64 %1, 0, !dbg !4673
  br i1 %tobool, label %if.then, label %if.end, !dbg !4676

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !4677

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !4678), !dbg !4680
  br label %while.cond, !dbg !4681

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4682
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !4683
  %3 = load i64, i64* %bits1, align 8, !dbg !4683
  %and = and i64 %3, 1, !dbg !4684
  %tobool2 = icmp ne i64 %and, 0, !dbg !4685
  %lnot = xor i1 %tobool2, true, !dbg !4685
  br i1 %lnot, label %while.body, label %while.end, !dbg !4681

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4686
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !4688
  %5 = load i64, i64* %bits3, align 8, !dbg !4689
  %shr = lshr i64 %5, 1, !dbg !4689
  store i64 %shr, i64* %bits3, align 8, !dbg !4689
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !4690
  %7 = load i32, i32* %6, align 4, !dbg !4691
  %add = add i32 %7, 1, !dbg !4691
  store i32 %add, i32* %6, align 4, !dbg !4691
  br label %while.cond, !dbg !4681, !llvm.loop !4692

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !4694
  br label %return, !dbg !4694

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !4695
  %9 = load i32, i32* %8, align 4, !dbg !4696
  %add4 = add i32 %9, 64, !dbg !4697
  %sub = sub i32 %add4, 1, !dbg !4698
  %div = udiv i32 %sub, 64, !dbg !4699
  %mul = mul i32 %div, 64, !dbg !4700
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !4701
  store i32 %mul, i32* %10, align 4, !dbg !4702
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4703
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !4704
  %12 = load i32, i32* %word_no, align 8, !dbg !4705
  %inc = add i32 %12, 1, !dbg !4705
  store i32 %inc, i32* %word_no, align 8, !dbg !4705
  br label %while.body6, !dbg !4706

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !4707

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4709
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !4710
  %14 = load i32, i32* %word_no8, align 8, !dbg !4710
  %cmp = icmp ne i32 %14, 2, !dbg !4711
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !4707

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4712
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !4714
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !4714
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !4715
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4716
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !4717
  %18 = load i32, i32* %word_no11, align 8, !dbg !4717
  %idxprom = zext i32 %18 to i64, !dbg !4712
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !4712
  %19 = load i64, i64* %arrayidx, align 8, !dbg !4712
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4718
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !4719
  store i64 %19, i64* %bits12, align 8, !dbg !4720
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4721
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !4723
  %22 = load i64, i64* %bits13, align 8, !dbg !4723
  %tobool14 = icmp ne i64 %22, 0, !dbg !4721
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !4724

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !4725

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !4726
  %24 = load i32, i32* %23, align 4, !dbg !4727
  %add17 = add i32 %24, 64, !dbg !4727
  store i32 %add17, i32* %23, align 4, !dbg !4727
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4728
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !4729
  %26 = load i32, i32* %word_no18, align 8, !dbg !4730
  %inc19 = add i32 %26, 1, !dbg !4730
  store i32 %inc19, i32* %word_no18, align 8, !dbg !4730
  br label %while.cond7, !dbg !4707, !llvm.loop !4731

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4733
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !4734
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !4734
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !4735
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !4735
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4736
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !4737
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !4738
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4739
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !4741
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !4741
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !4739
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !4742

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !4743
  br label %return, !dbg !4743

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4744
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !4745
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !4745
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !4746
  %35 = load i32, i32* %indx, align 8, !dbg !4746
  %mul28 = mul i32 %35, 128, !dbg !4747
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !4748
  store i32 %mul28, i32* %36, align 4, !dbg !4749
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4750
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !4751
  store i32 0, i32* %word_no29, align 8, !dbg !4752
  br label %while.body6, !dbg !4706, !llvm.loop !4753

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !4755
  ret i8 %38, !dbg !4755
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !4756 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !4759, metadata !DIExpression()), !dbg !4760
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !4761, metadata !DIExpression()), !dbg !4762
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !4763
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !4764
  %1 = load i64, i64* %bits, align 8, !dbg !4765
  %shr = lshr i64 %1, 1, !dbg !4765
  store i64 %shr, i64* %bits, align 8, !dbg !4765
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !4766
  %3 = load i32, i32* %2, align 4, !dbg !4767
  %add = add i32 %3, 1, !dbg !4767
  store i32 %add, i32* %2, align 4, !dbg !4767
  ret void, !dbg !4768
}

declare dso_local %struct.VEC_basic_block_heap* @get_dominated_by(i32, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_iterate(%struct.VEC_basic_block_base* %vec_, i32 %ix_, %struct.basic_block_def** %ptr) #0 !dbg !4769 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !4774, metadata !DIExpression()), !dbg !4775
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4776, metadata !DIExpression()), !dbg !4775
  store %struct.basic_block_def** %ptr, %struct.basic_block_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %ptr.addr, metadata !4777, metadata !DIExpression()), !dbg !4775
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4778
  %tobool = icmp ne %struct.VEC_basic_block_base* %0, null, !dbg !4778
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !4778

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4778
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4778
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 0, !dbg !4778
  %3 = load i32, i32* %num, align 8, !dbg !4778
  %cmp = icmp ult i32 %1, %3, !dbg !4778
  br i1 %cmp, label %if.then, label %if.else, !dbg !4775

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !4780
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !4780
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !4780
  %idxprom = zext i32 %5 to i64, !dbg !4780
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !4780
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !4780
  %7 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !4780
  store %struct.basic_block_def* %6, %struct.basic_block_def** %7, align 8, !dbg !4780
  store i32 1, i32* %retval, align 4, !dbg !4780
  br label %return, !dbg !4780

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %ptr.addr, align 8, !dbg !4782
  store %struct.basic_block_def* null, %struct.basic_block_def** %8, align 8, !dbg !4782
  store i32 0, i32* %retval, align 4, !dbg !4782
  br label %return, !dbg !4782

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !4775
  ret i32 %9, !dbg !4775
}

declare dso_local %struct.basic_block_def* @nearest_common_dominator(i32, %struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local zeroext i8 @mfb_keep_just(%struct.edge_def* %e) #0 !dbg !4784 {
entry:
  %e.addr = alloca %struct.edge_def*, align 8
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !4785, metadata !DIExpression()), !dbg !4786
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !4787
  %1 = load %struct.edge_def*, %struct.edge_def** @mfb_kj_edge, align 8, !dbg !4788
  %cmp = icmp ne %struct.edge_def* %0, %1, !dbg !4789
  %conv = zext i1 %cmp to i32, !dbg !4789
  %conv1 = trunc i32 %conv to i8, !dbg !4787
  ret i8 %conv1, !dbg !4790
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.basic_block_def* @create_preheader(%struct.loop* %loop, i32 %flags) #0 !dbg !4791 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %flags.addr = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %fallthru = alloca %struct.edge_def*, align 8
  %dummy = alloca %struct.basic_block_def*, align 8
  %nentry = alloca i32, align 4
  %irred = alloca i8, align 1
  %latch_edge_was_fallthru = alloca i8, align 1
  %one_succ_pred = alloca %struct.edge_def*, align 8
  %single_entry = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  %need_forwarder_block = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4794, metadata !DIExpression()), !dbg !4795
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !4796, metadata !DIExpression()), !dbg !4797
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4798, metadata !DIExpression()), !dbg !4799
  call void @llvm.dbg.declare(metadata %struct.edge_def** %fallthru, metadata !4800, metadata !DIExpression()), !dbg !4801
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dummy, metadata !4802, metadata !DIExpression()), !dbg !4803
  call void @llvm.dbg.declare(metadata i32* %nentry, metadata !4804, metadata !DIExpression()), !dbg !4805
  store i32 0, i32* %nentry, align 4, !dbg !4805
  call void @llvm.dbg.declare(metadata i8* %irred, metadata !4806, metadata !DIExpression()), !dbg !4807
  store i8 0, i8* %irred, align 1, !dbg !4807
  call void @llvm.dbg.declare(metadata i8* %latch_edge_was_fallthru, metadata !4808, metadata !DIExpression()), !dbg !4809
  call void @llvm.dbg.declare(metadata %struct.edge_def** %one_succ_pred, metadata !4810, metadata !DIExpression()), !dbg !4811
  store %struct.edge_def* null, %struct.edge_def** %one_succ_pred, align 8, !dbg !4811
  call void @llvm.dbg.declare(metadata %struct.edge_def** %single_entry, metadata !4812, metadata !DIExpression()), !dbg !4813
  store %struct.edge_def* null, %struct.edge_def** %single_entry, align 8, !dbg !4813
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4814, metadata !DIExpression()), !dbg !4815
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4816
  %header = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 2, !dbg !4816
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !4816
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !4816
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4816
  %2 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4816
  %3 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 0, !dbg !4816
  %4 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4816
  store i32 %4, i32* %3, align 8, !dbg !4816
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %2, i32 0, i32 1, !dbg !4816
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4816
  store %struct.VEC_edge_gc** %6, %struct.VEC_edge_gc*** %5, align 8, !dbg !4816
  %7 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4816
  %8 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4816
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %7, i8* align 8 %8, i64 16, i1 false), !dbg !4816
  br label %for.cond, !dbg !4816

for.cond:                                         ; preds = %for.inc, %entry
  %9 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4818
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !4818
  %11 = load i32, i32* %10, align 8, !dbg !4818
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !4818
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !4818
  %call1 = call zeroext i8 @ei_cond(i32 %11, %struct.VEC_edge_gc** %13, %struct.edge_def** %e), !dbg !4818
  %tobool = icmp ne i8 %call1, 0, !dbg !4816
  br i1 %tobool, label %for.body, label %for.end, !dbg !4816

for.body:                                         ; preds = %for.cond
  %14 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4820
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 0, !dbg !4823
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4823
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4824
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %16, i32 0, i32 3, !dbg !4825
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !4825
  %cmp = icmp eq %struct.basic_block_def* %15, %17, !dbg !4826
  br i1 %cmp, label %if.then, label %if.end, !dbg !4827

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !4828

if.end:                                           ; preds = %for.body
  %18 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4829
  %flags2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !4830
  %19 = load i32, i32* %flags2, align 8, !dbg !4830
  %and = and i32 %19, 128, !dbg !4831
  %cmp3 = icmp ne i32 %and, 0, !dbg !4832
  %conv = zext i1 %cmp3 to i32, !dbg !4832
  %20 = load i8, i8* %irred, align 1, !dbg !4833
  %conv4 = zext i8 %20 to i32, !dbg !4833
  %or = or i32 %conv4, %conv, !dbg !4833
  %conv5 = trunc i32 %or to i8, !dbg !4833
  store i8 %conv5, i8* %irred, align 1, !dbg !4833
  %21 = load i32, i32* %nentry, align 4, !dbg !4834
  %inc = add nsw i32 %21, 1, !dbg !4834
  store i32 %inc, i32* %nentry, align 4, !dbg !4834
  %22 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4835
  store %struct.edge_def* %22, %struct.edge_def** %single_entry, align 8, !dbg !4836
  %23 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4837
  %src6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 0, !dbg !4839
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %src6, align 8, !dbg !4839
  %call7 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %24), !dbg !4840
  %tobool8 = icmp ne i8 %call7, 0, !dbg !4840
  br i1 %tobool8, label %if.then9, label %if.end10, !dbg !4841

if.then9:                                         ; preds = %if.end
  %25 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4842
  store %struct.edge_def* %25, %struct.edge_def** %one_succ_pred, align 8, !dbg !4843
  br label %if.end10, !dbg !4844

if.end10:                                         ; preds = %if.then9, %if.end
  br label %for.inc, !dbg !4845

for.inc:                                          ; preds = %if.end10, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4818
  br label %for.cond, !dbg !4818, !llvm.loop !4846

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %nentry, align 4, !dbg !4848
  %tobool11 = icmp ne i32 %26, 0, !dbg !4848
  br i1 %tobool11, label %cond.false, label %cond.true, !dbg !4848

cond.true:                                        ; preds = %for.end
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1346, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4848
  br label %cond.end, !dbg !4848

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !4848

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4848
  %27 = load i32, i32* %nentry, align 4, !dbg !4849
  %cmp12 = icmp eq i32 %27, 1, !dbg !4851
  br i1 %cmp12, label %if.then14, label %if.end43, !dbg !4852

if.then14:                                        ; preds = %cond.end
  call void @llvm.dbg.declare(metadata i8* %need_forwarder_block, metadata !4853, metadata !DIExpression()), !dbg !4855
  store i8 0, i8* %need_forwarder_block, align 1, !dbg !4855
  %28 = load %struct.edge_def*, %struct.edge_def** %single_entry, align 8, !dbg !4856
  %src15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 0, !dbg !4858
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %src15, align 8, !dbg !4858
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4859
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !4859
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !4859
  %31 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4859
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %31, i32 0, i32 0, !dbg !4859
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !4859
  %cmp16 = icmp eq %struct.basic_block_def* %29, %32, !dbg !4860
  br i1 %cmp16, label %if.then18, label %if.else, !dbg !4861

if.then18:                                        ; preds = %if.then14
  store i8 1, i8* %need_forwarder_block, align 1, !dbg !4862
  br label %if.end39, !dbg !4863

if.else:                                          ; preds = %if.then14
  %33 = load i32, i32* %flags.addr, align 4, !dbg !4864
  %and19 = and i32 %33, 1, !dbg !4867
  %tobool20 = icmp ne i32 %and19, 0, !dbg !4867
  br i1 %tobool20, label %land.lhs.true, label %if.else25, !dbg !4868

land.lhs.true:                                    ; preds = %if.else
  %34 = load %struct.edge_def*, %struct.edge_def** %single_entry, align 8, !dbg !4869
  %src21 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 0, !dbg !4870
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %src21, align 8, !dbg !4870
  %call22 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %35), !dbg !4871
  %tobool23 = icmp ne i8 %call22, 0, !dbg !4871
  br i1 %tobool23, label %if.else25, label %if.then24, !dbg !4872

if.then24:                                        ; preds = %land.lhs.true
  store i8 1, i8* %need_forwarder_block, align 1, !dbg !4873
  br label %if.end38, !dbg !4874

if.else25:                                        ; preds = %land.lhs.true, %if.else
  %36 = load i32, i32* %flags.addr, align 4, !dbg !4875
  %and26 = and i32 %36, 2, !dbg !4877
  %tobool27 = icmp ne i32 %and26, 0, !dbg !4877
  br i1 %tobool27, label %land.lhs.true28, label %if.end37, !dbg !4878

land.lhs.true28:                                  ; preds = %if.else25
  %37 = load %struct.edge_def*, %struct.edge_def** %single_entry, align 8, !dbg !4879
  %src29 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %37, i32 0, i32 0, !dbg !4879
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %src29, align 8, !dbg !4879
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 7, !dbg !4879
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4879
  %39 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4879
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %39, i32 0, i32 1, !dbg !4879
  %40 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4879
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !4879
  %bf.load = load i32, i32* %41, align 8, !dbg !4879
  %bf.clear = and i32 %bf.load, 65535, !dbg !4879
  %cmp30 = icmp eq i32 %bf.clear, 9, !dbg !4879
  br i1 %cmp30, label %if.then36, label %lor.lhs.false, !dbg !4880

lor.lhs.false:                                    ; preds = %land.lhs.true28
  %42 = load %struct.edge_def*, %struct.edge_def** %single_entry, align 8, !dbg !4881
  %src32 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %42, i32 0, i32 0, !dbg !4882
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %src32, align 8, !dbg !4882
  %44 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4883
  %call33 = call zeroext i8 @has_preds_from_loop(%struct.basic_block_def* %43, %struct.loop* %44), !dbg !4884
  %conv34 = zext i8 %call33 to i32, !dbg !4884
  %tobool35 = icmp ne i32 %conv34, 0, !dbg !4884
  br i1 %tobool35, label %if.then36, label %if.end37, !dbg !4885

if.then36:                                        ; preds = %lor.lhs.false, %land.lhs.true28
  store i8 1, i8* %need_forwarder_block, align 1, !dbg !4886
  br label %if.end37, !dbg !4887

if.end37:                                         ; preds = %if.then36, %lor.lhs.false, %if.else25
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then24
  br label %if.end39

if.end39:                                         ; preds = %if.end38, %if.then18
  %45 = load i8, i8* %need_forwarder_block, align 1, !dbg !4888
  %tobool40 = icmp ne i8 %45, 0, !dbg !4888
  br i1 %tobool40, label %if.end42, label %if.then41, !dbg !4890

if.then41:                                        ; preds = %if.end39
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4891
  br label %return, !dbg !4891

if.end42:                                         ; preds = %if.end39
  br label %if.end43, !dbg !4892

if.end43:                                         ; preds = %if.end42, %cond.end
  %46 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4893
  %call44 = call %struct.edge_def* @loop_latch_edge(%struct.loop* %46), !dbg !4894
  store %struct.edge_def* %call44, %struct.edge_def** @mfb_kj_edge, align 8, !dbg !4895
  %47 = load %struct.edge_def*, %struct.edge_def** @mfb_kj_edge, align 8, !dbg !4896
  %flags45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %47, i32 0, i32 7, !dbg !4897
  %48 = load i32, i32* %flags45, align 8, !dbg !4897
  %and46 = and i32 %48, 1, !dbg !4898
  %cmp47 = icmp ne i32 %and46, 0, !dbg !4899
  %conv48 = zext i1 %cmp47 to i32, !dbg !4899
  %conv49 = trunc i32 %conv48 to i8, !dbg !4900
  store i8 %conv49, i8* %latch_edge_was_fallthru, align 1, !dbg !4901
  %49 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4902
  %header50 = getelementptr inbounds %struct.loop, %struct.loop* %49, i32 0, i32 2, !dbg !4903
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %header50, align 8, !dbg !4903
  %call51 = call %struct.edge_def* @make_forwarder_block(%struct.basic_block_def* %50, i8 (%struct.edge_def*)* @mfb_keep_just, void (%struct.basic_block_def*)* null), !dbg !4904
  store %struct.edge_def* %call51, %struct.edge_def** %fallthru, align 8, !dbg !4905
  %51 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !4906
  %src52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %51, i32 0, i32 0, !dbg !4907
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %src52, align 8, !dbg !4907
  store %struct.basic_block_def* %52, %struct.basic_block_def** %dummy, align 8, !dbg !4908
  %53 = load %struct.edge_def*, %struct.edge_def** %fallthru, align 8, !dbg !4909
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %53, i32 0, i32 1, !dbg !4910
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4910
  %55 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4911
  %header53 = getelementptr inbounds %struct.loop, %struct.loop* %55, i32 0, i32 2, !dbg !4912
  store %struct.basic_block_def* %54, %struct.basic_block_def** %header53, align 8, !dbg !4913
  %56 = load i8, i8* %latch_edge_was_fallthru, align 1, !dbg !4914
  %tobool54 = icmp ne i8 %56, 0, !dbg !4914
  br i1 %tobool54, label %if.then55, label %if.end70, !dbg !4916

if.then55:                                        ; preds = %if.end43
  %57 = load %struct.edge_def*, %struct.edge_def** %one_succ_pred, align 8, !dbg !4917
  %tobool56 = icmp ne %struct.edge_def* %57, null, !dbg !4917
  br i1 %tobool56, label %if.then57, label %if.else58, !dbg !4920

if.then57:                                        ; preds = %if.then55
  %58 = load %struct.edge_def*, %struct.edge_def** %one_succ_pred, align 8, !dbg !4921
  store %struct.edge_def* %58, %struct.edge_def** %e, align 8, !dbg !4922
  br label %if.end67, !dbg !4923

if.else58:                                        ; preds = %if.then55
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4924
  %preds59 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 0, !dbg !4924
  %60 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds59, align 8, !dbg !4924
  %tobool60 = icmp ne %struct.VEC_edge_gc* %60, null, !dbg !4924
  br i1 %tobool60, label %cond.true61, label %cond.false63, !dbg !4924

cond.true61:                                      ; preds = %if.else58
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4924
  %preds62 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 0, !dbg !4924
  %62 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds62, align 8, !dbg !4924
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %62, i32 0, i32 0, !dbg !4924
  br label %cond.end64, !dbg !4924

cond.false63:                                     ; preds = %if.else58
  br label %cond.end64, !dbg !4924

cond.end64:                                       ; preds = %cond.false63, %cond.true61
  %cond65 = phi %struct.VEC_edge_base* [ %base, %cond.true61 ], [ null, %cond.false63 ], !dbg !4924
  %call66 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond65, i32 0), !dbg !4924
  store %struct.edge_def* %call66, %struct.edge_def** %e, align 8, !dbg !4925
  br label %if.end67

if.end67:                                         ; preds = %cond.end64, %if.then57
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4926
  %64 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4927
  %src68 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %64, i32 0, i32 0, !dbg !4928
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %src68, align 8, !dbg !4928
  %call69 = call zeroext i8 @move_block_after(%struct.basic_block_def* %63, %struct.basic_block_def* %65), !dbg !4929
  br label %if.end70, !dbg !4930

if.end70:                                         ; preds = %if.end67, %if.end43
  %66 = load i8, i8* %irred, align 1, !dbg !4931
  %tobool71 = icmp ne i8 %66, 0, !dbg !4931
  br i1 %tobool71, label %if.then72, label %if.end78, !dbg !4933

if.then72:                                        ; preds = %if.end70
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4934
  %flags73 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 13, !dbg !4936
  %68 = load i32, i32* %flags73, align 8, !dbg !4937
  %or74 = or i32 %68, 4, !dbg !4937
  store i32 %or74, i32* %flags73, align 8, !dbg !4937
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4938
  %call75 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %69), !dbg !4939
  %flags76 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call75, i32 0, i32 7, !dbg !4940
  %70 = load i32, i32* %flags76, align 8, !dbg !4941
  %or77 = or i32 %70, 128, !dbg !4941
  store i32 %or77, i32* %flags76, align 8, !dbg !4941
  br label %if.end78, !dbg !4942

if.end78:                                         ; preds = %if.then72, %if.end70
  %71 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4943
  %tobool79 = icmp ne %struct._IO_FILE* %71, null, !dbg !4943
  br i1 %tobool79, label %if.then80, label %if.end82, !dbg !4945

if.then80:                                        ; preds = %if.end78
  %72 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4946
  %73 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4947
  %num = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 0, !dbg !4948
  %74 = load i32, i32* %num, align 8, !dbg !4948
  %call81 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %72, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i32 %74), !dbg !4949
  br label %if.end82, !dbg !4949

if.end82:                                         ; preds = %if.then80, %if.end78
  %75 = load i32, i32* %flags.addr, align 4, !dbg !4950
  %and83 = and i32 %75, 2, !dbg !4952
  %tobool84 = icmp ne i32 %and83, 0, !dbg !4952
  br i1 %tobool84, label %if.then85, label %if.end102, !dbg !4953

if.then85:                                        ; preds = %if.end82
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4954
  %call86 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %76), !dbg !4954
  %flags87 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call86, i32 0, i32 7, !dbg !4954
  %77 = load i32, i32* %flags87, align 8, !dbg !4954
  %and88 = and i32 %77, 1, !dbg !4954
  %tobool89 = icmp ne i32 %and88, 0, !dbg !4954
  br i1 %tobool89, label %land.lhs.true90, label %cond.true98, !dbg !4954

land.lhs.true90:                                  ; preds = %if.then85
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4954
  %il91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 7, !dbg !4954
  %rtl92 = bitcast %union.basic_block_il_dependent* %il91 to %struct.rtl_bb_info**, !dbg !4954
  %79 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl92, align 8, !dbg !4954
  %end_93 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %79, i32 0, i32 1, !dbg !4954
  %80 = load %struct.rtx_def*, %struct.rtx_def** %end_93, align 8, !dbg !4954
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !4954
  %bf.load94 = load i32, i32* %81, align 8, !dbg !4954
  %bf.clear95 = and i32 %bf.load94, 65535, !dbg !4954
  %cmp96 = icmp eq i32 %bf.clear95, 9, !dbg !4954
  br i1 %cmp96, label %cond.true98, label %cond.false99, !dbg !4954

cond.true98:                                      ; preds = %land.lhs.true90, %if.then85
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1409, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !4954
  br label %cond.end100, !dbg !4954

cond.false99:                                     ; preds = %land.lhs.true90
  br label %cond.end100, !dbg !4954

cond.end100:                                      ; preds = %cond.false99, %cond.true98
  %cond101 = phi i32 [ 0, %cond.true98 ], [ 0, %cond.false99 ], !dbg !4954
  br label %if.end102, !dbg !4954

if.end102:                                        ; preds = %cond.end100, %if.end82
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %dummy, align 8, !dbg !4955
  store %struct.basic_block_def* %82, %struct.basic_block_def** %retval, align 8, !dbg !4956
  br label %return, !dbg !4956

return:                                           ; preds = %if.end102, %if.then41
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !4957
  ret %struct.basic_block_def* %83, !dbg !4957
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !4958 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !4959, metadata !DIExpression()), !dbg !4960
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4961
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4961
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4961
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4961
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4961

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !4961
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4961
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4961
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4961
  br label %cond.end, !dbg !4961

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4961
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4961
  %cmp = icmp eq i32 %call, 1, !dbg !4962
  %conv = zext i1 %cmp to i32, !dbg !4962
  %conv2 = trunc i32 %conv to i8, !dbg !4961
  ret i8 %conv2, !dbg !4963
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @has_preds_from_loop(%struct.basic_block_def* %block, %struct.loop* %loop) #0 !dbg !4964 {
entry:
  %retval = alloca i8, align 1
  %block.addr = alloca %struct.basic_block_def*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %block, %struct.basic_block_def** %block.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %block.addr, metadata !4967, metadata !DIExpression()), !dbg !4968
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !4969, metadata !DIExpression()), !dbg !4970
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4971, metadata !DIExpression()), !dbg !4972
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4973, metadata !DIExpression()), !dbg !4974
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %block.addr, align 8, !dbg !4975
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !4975
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds), !dbg !4975
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4975
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !4975
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !4975
  store i32 %3, i32* %2, align 8, !dbg !4975
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !4975
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !4975
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !4975
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4975
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4975
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !4975
  br label %for.cond, !dbg !4975

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4977
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !4977
  %10 = load i32, i32* %9, align 8, !dbg !4977
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !4977
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !4977
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !4977
  %tobool = icmp ne i8 %call1, 0, !dbg !4975
  br i1 %tobool, label %for.body, label %for.end, !dbg !4975

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4979
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 0, !dbg !4981
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !4981
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 3, !dbg !4982
  %15 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !4982
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !4983
  %cmp = icmp eq %struct.loop* %15, %16, !dbg !4984
  br i1 %cmp, label %if.then, label %if.end, !dbg !4985

if.then:                                          ; preds = %for.body
  store i8 1, i8* %retval, align 1, !dbg !4986
  br label %return, !dbg !4986

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !4983

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4977
  br label %for.cond, !dbg !4977, !llvm.loop !4987

for.end:                                          ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !4989
  br label %return, !dbg !4989

return:                                           ; preds = %for.end, %if.then
  %17 = load i8, i8* %retval, align 1, !dbg !4990
  ret i8 %17, !dbg !4990
}

declare dso_local %struct.edge_def* @make_forwarder_block(%struct.basic_block_def*, i8 (%struct.edge_def*)*, void (%struct.basic_block_def*)*) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4991 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4996, metadata !DIExpression()), !dbg !4997
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4998, metadata !DIExpression()), !dbg !4997
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4997
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4997
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4997

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4997
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4997
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4997
  %3 = load i32, i32* %num, align 8, !dbg !4997
  %cmp = icmp ult i32 %1, %3, !dbg !4997
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4999
  %land.ext = zext i1 %4 to i32, !dbg !4997
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4997
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4997
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4997
  %idxprom = zext i32 %6 to i64, !dbg !4997
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4997
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4997
  ret %struct.edge_def* %7, !dbg !4997
}

declare dso_local zeroext i8 @move_block_after(%struct.basic_block_def*, %struct.basic_block_def*) #2

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @create_preheaders(i32 %flags) #0 !dbg !5000 {
entry:
  %flags.addr = alloca i32, align 4
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5003, metadata !DIExpression()), !dbg !5004
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5005, metadata !DIExpression()), !dbg !5011
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5012, metadata !DIExpression()), !dbg !5013
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5014
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5014
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5014
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5014
  %tobool = icmp ne %struct.loops* %1, null, !dbg !5014
  br i1 %tobool, label %if.end, label %if.then, !dbg !5016

if.then:                                          ; preds = %entry
  br label %return, !dbg !5017

if.end:                                           ; preds = %entry
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5018
  br label %for.cond, !dbg !5018

for.cond:                                         ; preds = %for.inc, %if.end
  %2 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5020
  %tobool1 = icmp ne %struct.loop* %2, null, !dbg !5018
  br i1 %tobool1, label %for.body, label %for.end, !dbg !5018

for.body:                                         ; preds = %for.cond
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5022
  %4 = load i32, i32* %flags.addr, align 4, !dbg !5023
  %call = call %struct.basic_block_def* @create_preheader(%struct.loop* %3, i32 %4), !dbg !5024
  br label %for.inc, !dbg !5024

for.inc:                                          ; preds = %for.body
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5020
  br label %for.cond, !dbg !5020, !llvm.loop !5025

for.end:                                          ; preds = %for.cond
  call void @loops_state_set(i32 1), !dbg !5027
  br label %return, !dbg !5028

return:                                           ; preds = %for.end, %if.then
  ret void, !dbg !5028
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 %flags) #0 !dbg !5029 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %flags.addr = alloca i32, align 4
  %aloop = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %mn = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5034, metadata !DIExpression()), !dbg !5035
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5036, metadata !DIExpression()), !dbg !5037
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5038, metadata !DIExpression()), !dbg !5039
  call void @llvm.dbg.declare(metadata %struct.loop** %aloop, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5042, metadata !DIExpression()), !dbg !5043
  call void @llvm.dbg.declare(metadata i32* %mn, metadata !5044, metadata !DIExpression()), !dbg !5045
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5046
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 1, !dbg !5047
  store i32 0, i32* %idx, align 8, !dbg !5048
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5049
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5049
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5049
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5049
  %tobool = icmp ne %struct.loops* %2, null, !dbg !5049
  br i1 %tobool, label %if.end, label %if.then, !dbg !5051

if.then:                                          ; preds = %entry
  %3 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5052
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %3, i32 0, i32 0, !dbg !5054
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5055
  %4 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5056
  store %struct.loop* null, %struct.loop** %4, align 8, !dbg !5057
  br label %return, !dbg !5058

if.end:                                           ; preds = %entry
  %call = call i32 @number_of_loops(), !dbg !5059
  %call1 = call %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %call), !dbg !5059
  %5 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5060
  %to_visit2 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %5, i32 0, i32 0, !dbg !5061
  store %struct.VEC_int_heap* %call1, %struct.VEC_int_heap** %to_visit2, align 8, !dbg !5062
  %6 = load i32, i32* %flags.addr, align 4, !dbg !5063
  %and = and i32 %6, 1, !dbg !5064
  %tobool3 = icmp ne i32 %and, 0, !dbg !5065
  %7 = zext i1 %tobool3 to i64, !dbg !5065
  %cond = select i1 %tobool3, i32 0, i32 1, !dbg !5065
  store i32 %cond, i32* %mn, align 4, !dbg !5066
  %8 = load i32, i32* %flags.addr, align 4, !dbg !5067
  %and4 = and i32 %8, 4, !dbg !5069
  %tobool5 = icmp ne i32 %and4, 0, !dbg !5069
  br i1 %tobool5, label %if.then6, label %if.else, !dbg !5070

if.then6:                                         ; preds = %if.end
  store i32 0, i32* %i, align 4, !dbg !5071
  br label %for.cond, !dbg !5074

for.cond:                                         ; preds = %for.inc, %if.then6
  %9 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5075
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %9, i64 0, !dbg !5075
  %x_current_loops8 = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !5075
  %10 = load %struct.loops*, %struct.loops** %x_current_loops8, align 8, !dbg !5075
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %10, i32 0, i32 1, !dbg !5075
  %11 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5075
  %tobool9 = icmp ne %struct.VEC_loop_p_gc* %11, null, !dbg !5075
  br i1 %tobool9, label %cond.true, label %cond.false, !dbg !5075

cond.true:                                        ; preds = %for.cond
  %12 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5075
  %add.ptr10 = getelementptr inbounds %struct.function, %struct.function* %12, i64 0, !dbg !5075
  %x_current_loops11 = getelementptr inbounds %struct.function, %struct.function* %add.ptr10, i32 0, i32 4, !dbg !5075
  %13 = load %struct.loops*, %struct.loops** %x_current_loops11, align 8, !dbg !5075
  %larray12 = getelementptr inbounds %struct.loops, %struct.loops* %13, i32 0, i32 1, !dbg !5075
  %14 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray12, align 8, !dbg !5075
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %14, i32 0, i32 0, !dbg !5075
  br label %cond.end, !dbg !5075

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5075

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond13 = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5075
  %15 = load i32, i32* %i, align 4, !dbg !5075
  %call14 = call i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %cond13, i32 %15, %struct.loop** %aloop), !dbg !5075
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5077
  br i1 %tobool15, label %for.body, label %for.end, !dbg !5077

for.body:                                         ; preds = %cond.end
  %16 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5078
  %cmp = icmp ne %struct.loop* %16, null, !dbg !5080
  br i1 %cmp, label %land.lhs.true, label %if.end30, !dbg !5081

land.lhs.true:                                    ; preds = %for.body
  %17 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5082
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %17, i32 0, i32 8, !dbg !5083
  %18 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5083
  %cmp16 = icmp eq %struct.loop* %18, null, !dbg !5084
  br i1 %cmp16, label %land.lhs.true17, label %if.end30, !dbg !5085

land.lhs.true17:                                  ; preds = %land.lhs.true
  %19 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5086
  %num = getelementptr inbounds %struct.loop, %struct.loop* %19, i32 0, i32 0, !dbg !5087
  %20 = load i32, i32* %num, align 8, !dbg !5087
  %21 = load i32, i32* %mn, align 4, !dbg !5088
  %cmp18 = icmp sge i32 %20, %21, !dbg !5089
  br i1 %cmp18, label %if.then19, label %if.end30, !dbg !5090

if.then19:                                        ; preds = %land.lhs.true17
  %22 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5091
  %to_visit20 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %22, i32 0, i32 0, !dbg !5091
  %23 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit20, align 8, !dbg !5091
  %tobool21 = icmp ne %struct.VEC_int_heap* %23, null, !dbg !5091
  br i1 %tobool21, label %cond.true22, label %cond.false25, !dbg !5091

cond.true22:                                      ; preds = %if.then19
  %24 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5091
  %to_visit23 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %24, i32 0, i32 0, !dbg !5091
  %25 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit23, align 8, !dbg !5091
  %base24 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %25, i32 0, i32 0, !dbg !5091
  br label %cond.end26, !dbg !5091

cond.false25:                                     ; preds = %if.then19
  br label %cond.end26, !dbg !5091

cond.end26:                                       ; preds = %cond.false25, %cond.true22
  %cond27 = phi %struct.VEC_int_base* [ %base24, %cond.true22 ], [ null, %cond.false25 ], !dbg !5091
  %26 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5091
  %num28 = getelementptr inbounds %struct.loop, %struct.loop* %26, i32 0, i32 0, !dbg !5091
  %27 = load i32, i32* %num28, align 8, !dbg !5091
  %call29 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond27, i32 %27), !dbg !5091
  br label %if.end30, !dbg !5091

if.end30:                                         ; preds = %cond.end26, %land.lhs.true17, %land.lhs.true, %for.body
  br label %for.inc, !dbg !5088

for.inc:                                          ; preds = %if.end30
  %28 = load i32, i32* %i, align 4, !dbg !5092
  %inc = add i32 %28, 1, !dbg !5092
  store i32 %inc, i32* %i, align 4, !dbg !5092
  br label %for.cond, !dbg !5093, !llvm.loop !5094

for.end:                                          ; preds = %cond.end
  br label %if.end113, !dbg !5096

if.else:                                          ; preds = %if.end
  %29 = load i32, i32* %flags.addr, align 4, !dbg !5097
  %and31 = and i32 %29, 2, !dbg !5099
  %tobool32 = icmp ne i32 %and31, 0, !dbg !5099
  br i1 %tobool32, label %if.then33, label %if.else75, !dbg !5100

if.then33:                                        ; preds = %if.else
  %30 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5101
  %add.ptr34 = getelementptr inbounds %struct.function, %struct.function* %30, i64 0, !dbg !5101
  %x_current_loops35 = getelementptr inbounds %struct.function, %struct.function* %add.ptr34, i32 0, i32 4, !dbg !5101
  %31 = load %struct.loops*, %struct.loops** %x_current_loops35, align 8, !dbg !5101
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %31, i32 0, i32 3, !dbg !5104
  %32 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5104
  store %struct.loop* %32, %struct.loop** %aloop, align 8, !dbg !5105
  br label %for.cond36, !dbg !5106

for.cond36:                                       ; preds = %for.inc40, %if.then33
  %33 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5107
  %inner37 = getelementptr inbounds %struct.loop, %struct.loop* %33, i32 0, i32 8, !dbg !5109
  %34 = load %struct.loop*, %struct.loop** %inner37, align 8, !dbg !5109
  %cmp38 = icmp ne %struct.loop* %34, null, !dbg !5110
  br i1 %cmp38, label %for.body39, label %for.end42, !dbg !5111

for.body39:                                       ; preds = %for.cond36
  br label %for.inc40, !dbg !5112

for.inc40:                                        ; preds = %for.body39
  %35 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5113
  %inner41 = getelementptr inbounds %struct.loop, %struct.loop* %35, i32 0, i32 8, !dbg !5114
  %36 = load %struct.loop*, %struct.loop** %inner41, align 8, !dbg !5114
  store %struct.loop* %36, %struct.loop** %aloop, align 8, !dbg !5115
  br label %for.cond36, !dbg !5116, !llvm.loop !5117

for.end42:                                        ; preds = %for.cond36
  br label %while.body, !dbg !5119

while.body:                                       ; preds = %for.end42, %if.end74
  %37 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5120
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %37, i32 0, i32 0, !dbg !5123
  %38 = load i32, i32* %num43, align 8, !dbg !5123
  %39 = load i32, i32* %mn, align 4, !dbg !5124
  %cmp44 = icmp sge i32 %38, %39, !dbg !5125
  br i1 %cmp44, label %if.then45, label %if.end56, !dbg !5126

if.then45:                                        ; preds = %while.body
  %40 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5127
  %to_visit46 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %40, i32 0, i32 0, !dbg !5127
  %41 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit46, align 8, !dbg !5127
  %tobool47 = icmp ne %struct.VEC_int_heap* %41, null, !dbg !5127
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !5127

cond.true48:                                      ; preds = %if.then45
  %42 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5127
  %to_visit49 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %42, i32 0, i32 0, !dbg !5127
  %43 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit49, align 8, !dbg !5127
  %base50 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %43, i32 0, i32 0, !dbg !5127
  br label %cond.end52, !dbg !5127

cond.false51:                                     ; preds = %if.then45
  br label %cond.end52, !dbg !5127

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_int_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !5127
  %44 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5127
  %num54 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 0, !dbg !5127
  %45 = load i32, i32* %num54, align 8, !dbg !5127
  %call55 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond53, i32 %45), !dbg !5127
  br label %if.end56, !dbg !5127

if.end56:                                         ; preds = %cond.end52, %while.body
  %46 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5128
  %next = getelementptr inbounds %struct.loop, %struct.loop* %46, i32 0, i32 9, !dbg !5130
  %47 = load %struct.loop*, %struct.loop** %next, align 8, !dbg !5130
  %tobool57 = icmp ne %struct.loop* %47, null, !dbg !5128
  br i1 %tobool57, label %if.then58, label %if.else67, !dbg !5131

if.then58:                                        ; preds = %if.end56
  %48 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5132
  %next59 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 9, !dbg !5135
  %49 = load %struct.loop*, %struct.loop** %next59, align 8, !dbg !5135
  store %struct.loop* %49, %struct.loop** %aloop, align 8, !dbg !5136
  br label %for.cond60, !dbg !5137

for.cond60:                                       ; preds = %for.inc64, %if.then58
  %50 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5138
  %inner61 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 8, !dbg !5140
  %51 = load %struct.loop*, %struct.loop** %inner61, align 8, !dbg !5140
  %cmp62 = icmp ne %struct.loop* %51, null, !dbg !5141
  br i1 %cmp62, label %for.body63, label %for.end66, !dbg !5142

for.body63:                                       ; preds = %for.cond60
  br label %for.inc64, !dbg !5143

for.inc64:                                        ; preds = %for.body63
  %52 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5144
  %inner65 = getelementptr inbounds %struct.loop, %struct.loop* %52, i32 0, i32 8, !dbg !5145
  %53 = load %struct.loop*, %struct.loop** %inner65, align 8, !dbg !5145
  store %struct.loop* %53, %struct.loop** %aloop, align 8, !dbg !5146
  br label %for.cond60, !dbg !5147, !llvm.loop !5148

for.end66:                                        ; preds = %for.cond60
  br label %if.end74, !dbg !5150

if.else67:                                        ; preds = %if.end56
  %54 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5151
  %call68 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !5153
  %tobool69 = icmp ne %struct.loop* %call68, null, !dbg !5153
  br i1 %tobool69, label %if.else71, label %if.then70, !dbg !5154

if.then70:                                        ; preds = %if.else67
  br label %while.end, !dbg !5155

if.else71:                                        ; preds = %if.else67
  %55 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5156
  %call72 = call %struct.loop* @loop_outer(%struct.loop* %55), !dbg !5157
  store %struct.loop* %call72, %struct.loop** %aloop, align 8, !dbg !5158
  br label %if.end73

if.end73:                                         ; preds = %if.else71
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %for.end66
  br label %while.body, !dbg !5119, !llvm.loop !5159

while.end:                                        ; preds = %if.then70
  br label %if.end112, !dbg !5161

if.else75:                                        ; preds = %if.else
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5162
  %add.ptr76 = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !5162
  %x_current_loops77 = getelementptr inbounds %struct.function, %struct.function* %add.ptr76, i32 0, i32 4, !dbg !5162
  %57 = load %struct.loops*, %struct.loops** %x_current_loops77, align 8, !dbg !5162
  %tree_root78 = getelementptr inbounds %struct.loops, %struct.loops* %57, i32 0, i32 3, !dbg !5164
  %58 = load %struct.loop*, %struct.loop** %tree_root78, align 8, !dbg !5164
  store %struct.loop* %58, %struct.loop** %aloop, align 8, !dbg !5165
  br label %while.body79, !dbg !5166

while.body79:                                     ; preds = %if.else75, %if.end110
  %59 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5167
  %num80 = getelementptr inbounds %struct.loop, %struct.loop* %59, i32 0, i32 0, !dbg !5170
  %60 = load i32, i32* %num80, align 8, !dbg !5170
  %61 = load i32, i32* %mn, align 4, !dbg !5171
  %cmp81 = icmp sge i32 %60, %61, !dbg !5172
  br i1 %cmp81, label %if.then82, label %if.end93, !dbg !5173

if.then82:                                        ; preds = %while.body79
  %62 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5174
  %to_visit83 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %62, i32 0, i32 0, !dbg !5174
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit83, align 8, !dbg !5174
  %tobool84 = icmp ne %struct.VEC_int_heap* %63, null, !dbg !5174
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !5174

cond.true85:                                      ; preds = %if.then82
  %64 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5174
  %to_visit86 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %64, i32 0, i32 0, !dbg !5174
  %65 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit86, align 8, !dbg !5174
  %base87 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %65, i32 0, i32 0, !dbg !5174
  br label %cond.end89, !dbg !5174

cond.false88:                                     ; preds = %if.then82
  br label %cond.end89, !dbg !5174

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_int_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !5174
  %66 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5174
  %num91 = getelementptr inbounds %struct.loop, %struct.loop* %66, i32 0, i32 0, !dbg !5174
  %67 = load i32, i32* %num91, align 8, !dbg !5174
  %call92 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond90, i32 %67), !dbg !5174
  br label %if.end93, !dbg !5174

if.end93:                                         ; preds = %cond.end89, %while.body79
  %68 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5175
  %inner94 = getelementptr inbounds %struct.loop, %struct.loop* %68, i32 0, i32 8, !dbg !5177
  %69 = load %struct.loop*, %struct.loop** %inner94, align 8, !dbg !5177
  %cmp95 = icmp ne %struct.loop* %69, null, !dbg !5178
  br i1 %cmp95, label %if.then96, label %if.else98, !dbg !5179

if.then96:                                        ; preds = %if.end93
  %70 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5180
  %inner97 = getelementptr inbounds %struct.loop, %struct.loop* %70, i32 0, i32 8, !dbg !5181
  %71 = load %struct.loop*, %struct.loop** %inner97, align 8, !dbg !5181
  store %struct.loop* %71, %struct.loop** %aloop, align 8, !dbg !5182
  br label %if.end110, !dbg !5183

if.else98:                                        ; preds = %if.end93
  br label %while.cond99, !dbg !5184

while.cond99:                                     ; preds = %while.body103, %if.else98
  %72 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5186
  %cmp100 = icmp ne %struct.loop* %72, null, !dbg !5187
  br i1 %cmp100, label %land.rhs, label %land.end, !dbg !5188

land.rhs:                                         ; preds = %while.cond99
  %73 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5189
  %next101 = getelementptr inbounds %struct.loop, %struct.loop* %73, i32 0, i32 9, !dbg !5190
  %74 = load %struct.loop*, %struct.loop** %next101, align 8, !dbg !5190
  %cmp102 = icmp eq %struct.loop* %74, null, !dbg !5191
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond99
  %75 = phi i1 [ false, %while.cond99 ], [ %cmp102, %land.rhs ], !dbg !5192
  br i1 %75, label %while.body103, label %while.end105, !dbg !5184

while.body103:                                    ; preds = %land.end
  %76 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5193
  %call104 = call %struct.loop* @loop_outer(%struct.loop* %76), !dbg !5194
  store %struct.loop* %call104, %struct.loop** %aloop, align 8, !dbg !5195
  br label %while.cond99, !dbg !5184, !llvm.loop !5196

while.end105:                                     ; preds = %land.end
  %77 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5198
  %cmp106 = icmp eq %struct.loop* %77, null, !dbg !5200
  br i1 %cmp106, label %if.then107, label %if.end108, !dbg !5201

if.then107:                                       ; preds = %while.end105
  br label %while.end111, !dbg !5202

if.end108:                                        ; preds = %while.end105
  %78 = load %struct.loop*, %struct.loop** %aloop, align 8, !dbg !5203
  %next109 = getelementptr inbounds %struct.loop, %struct.loop* %78, i32 0, i32 9, !dbg !5204
  %79 = load %struct.loop*, %struct.loop** %next109, align 8, !dbg !5204
  store %struct.loop* %79, %struct.loop** %aloop, align 8, !dbg !5205
  br label %if.end110

if.end110:                                        ; preds = %if.end108, %if.then96
  br label %while.body79, !dbg !5166, !llvm.loop !5206

while.end111:                                     ; preds = %if.then107
  br label %if.end112

if.end112:                                        ; preds = %while.end111, %while.end
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %for.end
  %80 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5208
  %81 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5209
  call void @fel_next(%struct.loop_iterator* %80, %struct.loop** %81), !dbg !5210
  br label %return, !dbg !5211

return:                                           ; preds = %if.end113, %if.then
  ret void, !dbg !5211
}

; Function Attrs: noinline nounwind uwtable
define internal void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop) #0 !dbg !5212 {
entry:
  %li.addr = alloca %struct.loop_iterator*, align 8
  %loop.addr = alloca %struct.loop**, align 8
  %anum = alloca i32, align 4
  store %struct.loop_iterator* %li, %struct.loop_iterator** %li.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator** %li.addr, metadata !5215, metadata !DIExpression()), !dbg !5216
  store %struct.loop** %loop, %struct.loop*** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %loop.addr, metadata !5217, metadata !DIExpression()), !dbg !5218
  call void @llvm.dbg.declare(metadata i32* %anum, metadata !5219, metadata !DIExpression()), !dbg !5220
  br label %while.cond, !dbg !5221

while.cond:                                       ; preds = %if.end, %entry
  %0 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5222
  %to_visit = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %0, i32 0, i32 0, !dbg !5222
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit, align 8, !dbg !5222
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !5222
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5222

cond.true:                                        ; preds = %while.cond
  %2 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5222
  %to_visit1 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %2, i32 0, i32 0, !dbg !5222
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %to_visit1, align 8, !dbg !5222
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !5222
  br label %cond.end, !dbg !5222

cond.false:                                       ; preds = %while.cond
  br label %cond.end, !dbg !5222

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5222
  %4 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5222
  %idx = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %4, i32 0, i32 1, !dbg !5222
  %5 = load i32, i32* %idx, align 8, !dbg !5222
  %call = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond, i32 %5, i32* %anum), !dbg !5222
  %tobool2 = icmp ne i32 %call, 0, !dbg !5221
  br i1 %tobool2, label %while.body, label %while.end, !dbg !5221

while.body:                                       ; preds = %cond.end
  %6 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5223
  %idx3 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %6, i32 0, i32 1, !dbg !5225
  %7 = load i32, i32* %idx3, align 8, !dbg !5226
  %inc = add i32 %7, 1, !dbg !5226
  store i32 %inc, i32* %idx3, align 8, !dbg !5226
  %8 = load i32, i32* %anum, align 4, !dbg !5227
  %call4 = call %struct.loop* @get_loop(i32 %8), !dbg !5228
  %9 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5229
  store %struct.loop* %call4, %struct.loop** %9, align 8, !dbg !5230
  %10 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5231
  %11 = load %struct.loop*, %struct.loop** %10, align 8, !dbg !5233
  %tobool5 = icmp ne %struct.loop* %11, null, !dbg !5233
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5234

if.then:                                          ; preds = %while.body
  br label %return, !dbg !5235

if.end:                                           ; preds = %while.body
  br label %while.cond, !dbg !5221, !llvm.loop !5236

while.end:                                        ; preds = %cond.end
  %12 = load %struct.loop_iterator*, %struct.loop_iterator** %li.addr, align 8, !dbg !5238
  %to_visit6 = getelementptr inbounds %struct.loop_iterator, %struct.loop_iterator* %12, i32 0, i32 0, !dbg !5238
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %to_visit6), !dbg !5238
  %13 = load %struct.loop**, %struct.loop*** %loop.addr, align 8, !dbg !5239
  store %struct.loop* null, %struct.loop** %13, align 8, !dbg !5240
  br label %return, !dbg !5241

return:                                           ; preds = %while.end, %if.then
  ret void, !dbg !5241
}

; Function Attrs: noinline nounwind uwtable
define internal void @loops_state_set(i32 %flags) #0 !dbg !5242 {
entry:
  %flags.addr = alloca i32, align 4
  store i32 %flags, i32* %flags.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %flags.addr, metadata !5245, metadata !DIExpression()), !dbg !5246
  %0 = load i32, i32* %flags.addr, align 4, !dbg !5247
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5248
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5248
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5248
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5248
  %state = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 0, !dbg !5249
  %3 = load i32, i32* %state, align 8, !dbg !5250
  %or = or i32 %3, %0, !dbg !5250
  store i32 %or, i32* %state, align 8, !dbg !5250
  ret void, !dbg !5251
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @force_single_succ_latches() #0 !dbg !5252 {
entry:
  %li = alloca %struct.loop_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %e = alloca %struct.edge_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5255, metadata !DIExpression()), !dbg !5256
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5257, metadata !DIExpression()), !dbg !5258
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5259, metadata !DIExpression()), !dbg !5260
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5261
  br label %for.cond, !dbg !5261

for.cond:                                         ; preds = %for.inc, %entry
  %0 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5263
  %tobool = icmp ne %struct.loop* %0, null, !dbg !5261
  br i1 %tobool, label %for.body, label %for.end, !dbg !5261

for.body:                                         ; preds = %for.cond
  %1 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5265
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %1, i32 0, i32 3, !dbg !5268
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5268
  %3 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5269
  %header = getelementptr inbounds %struct.loop, %struct.loop* %3, i32 0, i32 2, !dbg !5270
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5270
  %cmp = icmp ne %struct.basic_block_def* %2, %4, !dbg !5271
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !5272

land.lhs.true:                                    ; preds = %for.body
  %5 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5273
  %latch1 = getelementptr inbounds %struct.loop, %struct.loop* %5, i32 0, i32 3, !dbg !5274
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %latch1, align 8, !dbg !5274
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %6), !dbg !5275
  %conv = zext i8 %call to i32, !dbg !5275
  %tobool2 = icmp ne i32 %conv, 0, !dbg !5275
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5276

if.then:                                          ; preds = %land.lhs.true
  br label %for.inc, !dbg !5277

if.end:                                           ; preds = %land.lhs.true, %for.body
  %7 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5278
  %latch3 = getelementptr inbounds %struct.loop, %struct.loop* %7, i32 0, i32 3, !dbg !5279
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %latch3, align 8, !dbg !5279
  %9 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5280
  %header4 = getelementptr inbounds %struct.loop, %struct.loop* %9, i32 0, i32 2, !dbg !5281
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %header4, align 8, !dbg !5281
  %call5 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %8, %struct.basic_block_def* %10), !dbg !5282
  store %struct.edge_def* %call5, %struct.edge_def** %e, align 8, !dbg !5283
  %11 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5284
  %call6 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %11), !dbg !5285
  br label %for.inc, !dbg !5286

for.inc:                                          ; preds = %if.end, %if.then
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5263
  br label %for.cond, !dbg !5263, !llvm.loop !5287

for.end:                                          ; preds = %for.cond
  call void @loops_state_set(i32 2), !dbg !5289
  ret void, !dbg !5290
}

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.loop* @loop_version(%struct.loop* %loop, i8* %cond_expr, %struct.basic_block_def** %condition_bb, i32 %then_prob, i32 %then_scale, i32 %else_scale, i8 zeroext %place_after) #0 !dbg !5291 {
entry:
  %retval = alloca %struct.loop*, align 8
  %loop.addr = alloca %struct.loop*, align 8
  %cond_expr.addr = alloca i8*, align 8
  %condition_bb.addr = alloca %struct.basic_block_def**, align 8
  %then_prob.addr = alloca i32, align 4
  %then_scale.addr = alloca i32, align 4
  %else_scale.addr = alloca i32, align 4
  %place_after.addr = alloca i8, align 1
  %first_head = alloca %struct.basic_block_def*, align 8
  %second_head = alloca %struct.basic_block_def*, align 8
  %entry1 = alloca %struct.edge_def*, align 8
  %latch_edge = alloca %struct.edge_def*, align 8
  %true_edge = alloca %struct.edge_def*, align 8
  %false_edge = alloca %struct.edge_def*, align 8
  %irred_flag = alloca i32, align 4
  %nloop = alloca %struct.loop*, align 8
  %cond_bb = alloca %struct.basic_block_def*, align 8
  %bbs = alloca %struct.basic_block_def**, align 8
  %after = alloca %struct.basic_block_def*, align 8
  %i = alloca i32, align 4
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5294, metadata !DIExpression()), !dbg !5295
  store i8* %cond_expr, i8** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cond_expr.addr, metadata !5296, metadata !DIExpression()), !dbg !5297
  store %struct.basic_block_def** %condition_bb, %struct.basic_block_def*** %condition_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %condition_bb.addr, metadata !5298, metadata !DIExpression()), !dbg !5299
  store i32 %then_prob, i32* %then_prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %then_prob.addr, metadata !5300, metadata !DIExpression()), !dbg !5301
  store i32 %then_scale, i32* %then_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %then_scale.addr, metadata !5302, metadata !DIExpression()), !dbg !5303
  store i32 %else_scale, i32* %else_scale.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %else_scale.addr, metadata !5304, metadata !DIExpression()), !dbg !5305
  store i8 %place_after, i8* %place_after.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %place_after.addr, metadata !5306, metadata !DIExpression()), !dbg !5307
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_head, metadata !5308, metadata !DIExpression()), !dbg !5309
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_head, metadata !5310, metadata !DIExpression()), !dbg !5311
  call void @llvm.dbg.declare(metadata %struct.edge_def** %entry1, metadata !5312, metadata !DIExpression()), !dbg !5313
  call void @llvm.dbg.declare(metadata %struct.edge_def** %latch_edge, metadata !5314, metadata !DIExpression()), !dbg !5315
  call void @llvm.dbg.declare(metadata %struct.edge_def** %true_edge, metadata !5316, metadata !DIExpression()), !dbg !5317
  call void @llvm.dbg.declare(metadata %struct.edge_def** %false_edge, metadata !5318, metadata !DIExpression()), !dbg !5319
  call void @llvm.dbg.declare(metadata i32* %irred_flag, metadata !5320, metadata !DIExpression()), !dbg !5321
  call void @llvm.dbg.declare(metadata %struct.loop** %nloop, metadata !5322, metadata !DIExpression()), !dbg !5323
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cond_bb, metadata !5324, metadata !DIExpression()), !dbg !5325
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5326
  %call = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %0), !dbg !5327
  store %struct.edge_def* %call, %struct.edge_def** %entry1, align 8, !dbg !5328
  %1 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5329
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 7, !dbg !5330
  %2 = load i32, i32* %flags, align 8, !dbg !5330
  %and = and i32 %2, 128, !dbg !5331
  store i32 %and, i32* %irred_flag, align 4, !dbg !5332
  %3 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5333
  %flags2 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 7, !dbg !5334
  %4 = load i32, i32* %flags2, align 8, !dbg !5335
  %and3 = and i32 %4, -129, !dbg !5335
  store i32 %and3, i32* %flags2, align 8, !dbg !5335
  %5 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5336
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 1, !dbg !5337
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5337
  store %struct.basic_block_def* %6, %struct.basic_block_def** %first_head, align 8, !dbg !5338
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5339
  %8 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5341
  %call4 = call zeroext i8 @cfg_hook_duplicate_loop_to_header_edge(%struct.loop* %7, %struct.edge_def* %8, i32 1, %struct.simple_bitmap_def* null, %struct.edge_def* null, %struct.VEC_edge_heap** null, i32 0), !dbg !5342
  %tobool = icmp ne i8 %call4, 0, !dbg !5342
  br i1 %tobool, label %if.end, label %if.then, !dbg !5343

if.then:                                          ; preds = %entry
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !5344
  br label %return, !dbg !5344

if.end:                                           ; preds = %entry
  %9 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5345
  %dest5 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 1, !dbg !5346
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest5, align 8, !dbg !5346
  store %struct.basic_block_def* %10, %struct.basic_block_def** %second_head, align 8, !dbg !5347
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head, align 8, !dbg !5348
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %second_head, align 8, !dbg !5349
  %13 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5350
  %14 = load i8*, i8** %cond_expr.addr, align 8, !dbg !5351
  %15 = load i32, i32* %then_prob.addr, align 4, !dbg !5352
  %call6 = call %struct.basic_block_def* @lv_adjust_loop_entry_edge(%struct.basic_block_def* %11, %struct.basic_block_def* %12, %struct.edge_def* %13, i8* %14, i32 %15), !dbg !5353
  store %struct.basic_block_def* %call6, %struct.basic_block_def** %cond_bb, align 8, !dbg !5354
  %16 = load %struct.basic_block_def**, %struct.basic_block_def*** %condition_bb.addr, align 8, !dbg !5355
  %tobool7 = icmp ne %struct.basic_block_def** %16, null, !dbg !5355
  br i1 %tobool7, label %if.then8, label %if.end9, !dbg !5357

if.then8:                                         ; preds = %if.end
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5358
  %18 = load %struct.basic_block_def**, %struct.basic_block_def*** %condition_bb.addr, align 8, !dbg !5359
  store %struct.basic_block_def* %17, %struct.basic_block_def** %18, align 8, !dbg !5360
  br label %if.end9, !dbg !5361

if.end9:                                          ; preds = %if.then8, %if.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5362
  %tobool10 = icmp ne %struct.basic_block_def* %19, null, !dbg !5362
  br i1 %tobool10, label %if.end13, label %if.then11, !dbg !5364

if.then11:                                        ; preds = %if.end9
  %20 = load i32, i32* %irred_flag, align 4, !dbg !5365
  %21 = load %struct.edge_def*, %struct.edge_def** %entry1, align 8, !dbg !5367
  %flags12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !5368
  %22 = load i32, i32* %flags12, align 8, !dbg !5369
  %or = or i32 %22, %20, !dbg !5369
  store i32 %or, i32* %flags12, align 8, !dbg !5369
  store %struct.loop* null, %struct.loop** %retval, align 8, !dbg !5370
  br label %return, !dbg !5370

if.end13:                                         ; preds = %if.end9
  %23 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5371
  %latch = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 3, !dbg !5372
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %latch, align 8, !dbg !5372
  %call14 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %24), !dbg !5373
  %call15 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %call14), !dbg !5374
  store %struct.edge_def* %call15, %struct.edge_def** %latch_edge, align 8, !dbg !5375
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5376
  call void @extract_cond_bb_edges(%struct.basic_block_def* %25, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !5377
  %26 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !5378
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5379
  %header = getelementptr inbounds %struct.loop, %struct.loop* %27, i32 0, i32 2, !dbg !5380
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5380
  %call16 = call %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def* %28), !dbg !5381
  %call17 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %call16), !dbg !5382
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5383
  %30 = load %struct.edge_def*, %struct.edge_def** %true_edge, align 8, !dbg !5384
  %31 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5385
  %32 = load i32, i32* %then_scale.addr, align 4, !dbg !5386
  %33 = load i32, i32* %else_scale.addr, align 4, !dbg !5387
  %call18 = call %struct.loop* @loopify(%struct.edge_def* %26, %struct.edge_def* %call17, %struct.basic_block_def* %29, %struct.edge_def* %30, %struct.edge_def* %31, i8 zeroext 0, i32 %32, i32 %33), !dbg !5388
  store %struct.loop* %call18, %struct.loop** %nloop, align 8, !dbg !5389
  %34 = load %struct.edge_def*, %struct.edge_def** %latch_edge, align 8, !dbg !5390
  call void @lv_flush_pending_stmts(%struct.edge_def* %34), !dbg !5391
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5392
  call void @extract_cond_bb_edges(%struct.basic_block_def* %35, %struct.edge_def** %true_edge, %struct.edge_def** %false_edge), !dbg !5393
  %36 = load %struct.edge_def*, %struct.edge_def** %false_edge, align 8, !dbg !5394
  call void @lv_flush_pending_stmts(%struct.edge_def* %36), !dbg !5395
  %37 = load i32, i32* %irred_flag, align 4, !dbg !5396
  %tobool19 = icmp ne i32 %37, 0, !dbg !5396
  br i1 %tobool19, label %if.then20, label %if.end32, !dbg !5398

if.then20:                                        ; preds = %if.end13
  %38 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5399
  %flags21 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %38, i32 0, i32 13, !dbg !5401
  %39 = load i32, i32* %flags21, align 8, !dbg !5402
  %or22 = or i32 %39, 4, !dbg !5402
  store i32 %or22, i32* %flags21, align 8, !dbg !5402
  %40 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5403
  %call23 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %40), !dbg !5404
  %flags24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call23, i32 0, i32 7, !dbg !5405
  %41 = load i32, i32* %flags24, align 8, !dbg !5406
  %or25 = or i32 %41, 128, !dbg !5406
  store i32 %or25, i32* %flags24, align 8, !dbg !5406
  %42 = load %struct.loop*, %struct.loop** %nloop, align 8, !dbg !5407
  %call26 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %42), !dbg !5408
  %flags27 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call26, i32 0, i32 7, !dbg !5409
  %43 = load i32, i32* %flags27, align 8, !dbg !5410
  %or28 = or i32 %43, 128, !dbg !5410
  store i32 %or28, i32* %flags27, align 8, !dbg !5410
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %cond_bb, align 8, !dbg !5411
  %call29 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %44), !dbg !5412
  %flags30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call29, i32 0, i32 7, !dbg !5413
  %45 = load i32, i32* %flags30, align 8, !dbg !5414
  %or31 = or i32 %45, 128, !dbg !5414
  store i32 %or31, i32* %flags30, align 8, !dbg !5414
  br label %if.end32, !dbg !5415

if.end32:                                         ; preds = %if.then20, %if.end13
  %46 = load i8, i8* %place_after.addr, align 1, !dbg !5416
  %tobool33 = icmp ne i8 %46, 0, !dbg !5416
  br i1 %tobool33, label %if.then34, label %if.end40, !dbg !5418

if.then34:                                        ; preds = %if.end32
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %bbs, metadata !5419, metadata !DIExpression()), !dbg !5421
  %47 = load %struct.loop*, %struct.loop** %nloop, align 8, !dbg !5422
  %call35 = call %struct.basic_block_def** @get_loop_body_in_dom_order(%struct.loop* %47), !dbg !5423
  store %struct.basic_block_def** %call35, %struct.basic_block_def*** %bbs, align 8, !dbg !5421
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %after, metadata !5424, metadata !DIExpression()), !dbg !5425
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5426, metadata !DIExpression()), !dbg !5427
  %48 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5428
  %latch36 = getelementptr inbounds %struct.loop, %struct.loop* %48, i32 0, i32 3, !dbg !5429
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %latch36, align 8, !dbg !5429
  store %struct.basic_block_def* %49, %struct.basic_block_def** %after, align 8, !dbg !5430
  store i32 0, i32* %i, align 4, !dbg !5431
  br label %for.cond, !dbg !5433

for.cond:                                         ; preds = %for.inc, %if.then34
  %50 = load i32, i32* %i, align 4, !dbg !5434
  %51 = load %struct.loop*, %struct.loop** %nloop, align 8, !dbg !5436
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %51, i32 0, i32 6, !dbg !5437
  %52 = load i32, i32* %num_nodes, align 4, !dbg !5437
  %cmp = icmp ult i32 %50, %52, !dbg !5438
  br i1 %cmp, label %for.body, label %for.end, !dbg !5439

for.body:                                         ; preds = %for.cond
  %53 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5440
  %54 = load i32, i32* %i, align 4, !dbg !5442
  %idxprom = zext i32 %54 to i64, !dbg !5440
  %arrayidx = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %53, i64 %idxprom, !dbg !5440
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx, align 8, !dbg !5440
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %after, align 8, !dbg !5443
  %call37 = call zeroext i8 @move_block_after(%struct.basic_block_def* %55, %struct.basic_block_def* %56), !dbg !5444
  %57 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5445
  %58 = load i32, i32* %i, align 4, !dbg !5446
  %idxprom38 = zext i32 %58 to i64, !dbg !5445
  %arrayidx39 = getelementptr inbounds %struct.basic_block_def*, %struct.basic_block_def** %57, i64 %idxprom38, !dbg !5445
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %arrayidx39, align 8, !dbg !5445
  store %struct.basic_block_def* %59, %struct.basic_block_def** %after, align 8, !dbg !5447
  br label %for.inc, !dbg !5448

for.inc:                                          ; preds = %for.body
  %60 = load i32, i32* %i, align 4, !dbg !5449
  %inc = add i32 %60, 1, !dbg !5449
  store i32 %inc, i32* %i, align 4, !dbg !5449
  br label %for.cond, !dbg !5450, !llvm.loop !5451

for.end:                                          ; preds = %for.cond
  %61 = load %struct.basic_block_def**, %struct.basic_block_def*** %bbs, align 8, !dbg !5453
  %62 = bitcast %struct.basic_block_def** %61 to i8*, !dbg !5453
  call void @free(i8* %62), !dbg !5454
  br label %if.end40, !dbg !5455

if.end40:                                         ; preds = %for.end, %if.end32
  %63 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5456
  %call41 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %63), !dbg !5457
  %call42 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call41), !dbg !5458
  %64 = load %struct.loop*, %struct.loop** %nloop, align 8, !dbg !5459
  %call43 = call %struct.edge_def* @loop_preheader_edge(%struct.loop* %64), !dbg !5460
  %call44 = call %struct.basic_block_def* @split_edge(%struct.edge_def* %call43), !dbg !5461
  %65 = load %struct.loop*, %struct.loop** %nloop, align 8, !dbg !5462
  store %struct.loop* %65, %struct.loop** %retval, align 8, !dbg !5463
  br label %return, !dbg !5463

return:                                           ; preds = %if.end40, %if.then11, %if.then
  %66 = load %struct.loop*, %struct.loop** %retval, align 8, !dbg !5464
  ret %struct.loop* %66, !dbg !5464
}

declare dso_local zeroext i8 @cfg_hook_duplicate_loop_to_header_edge(%struct.loop*, %struct.edge_def*, i32, %struct.simple_bitmap_def*, %struct.edge_def*, %struct.VEC_edge_heap**, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @lv_adjust_loop_entry_edge(%struct.basic_block_def* %first_head, %struct.basic_block_def* %second_head, %struct.edge_def* %e, i8* %cond_expr, i32 %then_prob) #0 !dbg !5465 {
entry:
  %first_head.addr = alloca %struct.basic_block_def*, align 8
  %second_head.addr = alloca %struct.basic_block_def*, align 8
  %e.addr = alloca %struct.edge_def*, align 8
  %cond_expr.addr = alloca i8*, align 8
  %then_prob.addr = alloca i32, align 4
  %new_head = alloca %struct.basic_block_def*, align 8
  %e1 = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %first_head, %struct.basic_block_def** %first_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %first_head.addr, metadata !5468, metadata !DIExpression()), !dbg !5469
  store %struct.basic_block_def* %second_head, %struct.basic_block_def** %second_head.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %second_head.addr, metadata !5470, metadata !DIExpression()), !dbg !5471
  store %struct.edge_def* %e, %struct.edge_def** %e.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e.addr, metadata !5472, metadata !DIExpression()), !dbg !5473
  store i8* %cond_expr, i8** %cond_expr.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %cond_expr.addr, metadata !5474, metadata !DIExpression()), !dbg !5475
  store i32 %then_prob, i32* %then_prob.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %then_prob.addr, metadata !5476, metadata !DIExpression()), !dbg !5477
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_head, metadata !5478, metadata !DIExpression()), !dbg !5479
  store %struct.basic_block_def* null, %struct.basic_block_def** %new_head, align 8, !dbg !5479
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e1, metadata !5480, metadata !DIExpression()), !dbg !5481
  %0 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5482
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !5482
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5482
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %second_head.addr, align 8, !dbg !5482
  %cmp = icmp eq %struct.basic_block_def* %1, %2, !dbg !5482
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !5482

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 1474, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5482
  br label %cond.end, !dbg !5482

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5482

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5482
  %3 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5483
  %call = call %struct.basic_block_def* @split_edge(%struct.edge_def* %3), !dbg !5484
  store %struct.basic_block_def* %call, %struct.basic_block_def** %new_head, align 8, !dbg !5485
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head.addr, align 8, !dbg !5486
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %second_head.addr, align 8, !dbg !5487
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5488
  %7 = load i8*, i8** %cond_expr.addr, align 8, !dbg !5489
  call void @lv_add_condition_to_bb(%struct.basic_block_def* %4, %struct.basic_block_def* %5, %struct.basic_block_def* %6, i8* %7), !dbg !5490
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5491
  %call1 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %8), !dbg !5492
  store %struct.edge_def* %call1, %struct.edge_def** %e.addr, align 8, !dbg !5493
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5494
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head.addr, align 8, !dbg !5495
  %call2 = call i32 @current_ir_type(), !dbg !5496
  %cmp3 = icmp eq i32 %call2, 0, !dbg !5497
  %11 = zext i1 %cmp3 to i64, !dbg !5496
  %cond4 = select i1 %cmp3, i32 1024, i32 0, !dbg !5496
  %call5 = call %struct.edge_def* @make_edge(%struct.basic_block_def* %9, %struct.basic_block_def* %10, i32 %cond4), !dbg !5498
  store %struct.edge_def* %call5, %struct.edge_def** %e1, align 8, !dbg !5499
  %12 = load i32, i32* %then_prob.addr, align 4, !dbg !5500
  %13 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5501
  %probability = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 8, !dbg !5502
  store i32 %12, i32* %probability, align 4, !dbg !5503
  %14 = load i32, i32* %then_prob.addr, align 4, !dbg !5504
  %sub = sub i32 10000, %14, !dbg !5505
  %15 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5506
  %probability6 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 8, !dbg !5507
  store i32 %sub, i32* %probability6, align 4, !dbg !5508
  %16 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5509
  %count = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 9, !dbg !5509
  %17 = load i64, i64* %count, align 8, !dbg !5509
  %18 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5509
  %probability7 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 8, !dbg !5509
  %19 = load i32, i32* %probability7, align 4, !dbg !5509
  %conv = sext i32 %19 to i64, !dbg !5509
  %mul = mul nsw i64 %17, %conv, !dbg !5509
  %add = add nsw i64 %mul, 5000, !dbg !5509
  %div = sdiv i64 %add, 10000, !dbg !5509
  %20 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5510
  %count8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 9, !dbg !5511
  store i64 %div, i64* %count8, align 8, !dbg !5512
  %21 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5513
  %count9 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 9, !dbg !5513
  %22 = load i64, i64* %count9, align 8, !dbg !5513
  %23 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5513
  %probability10 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 8, !dbg !5513
  %24 = load i32, i32* %probability10, align 4, !dbg !5513
  %conv11 = sext i32 %24 to i64, !dbg !5513
  %mul12 = mul nsw i64 %22, %conv11, !dbg !5513
  %add13 = add nsw i64 %mul12, 5000, !dbg !5513
  %div14 = sdiv i64 %add13, 10000, !dbg !5513
  %25 = load %struct.edge_def*, %struct.edge_def** %e.addr, align 8, !dbg !5514
  %count15 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %25, i32 0, i32 9, !dbg !5515
  store i64 %div14, i64* %count15, align 8, !dbg !5516
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head.addr, align 8, !dbg !5517
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5518
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %26, %struct.basic_block_def* %27), !dbg !5519
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %second_head.addr, align 8, !dbg !5520
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5521
  call void @set_immediate_dominator(i32 1, %struct.basic_block_def* %28, %struct.basic_block_def* %29), !dbg !5522
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %first_head.addr, align 8, !dbg !5523
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %second_head.addr, align 8, !dbg !5524
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5525
  %33 = load %struct.edge_def*, %struct.edge_def** %e1, align 8, !dbg !5526
  call void @lv_adjust_loop_header_phi(%struct.basic_block_def* %30, %struct.basic_block_def* %31, %struct.basic_block_def* %32, %struct.edge_def* %33), !dbg !5527
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %new_head, align 8, !dbg !5528
  ret %struct.basic_block_def* %34, !dbg !5529
}

declare dso_local %struct.basic_block_def* @get_bb_copy(%struct.basic_block_def*) #2

declare dso_local void @extract_cond_bb_edges(%struct.basic_block_def*, %struct.edge_def**, %struct.edge_def**) #2

declare dso_local void @lv_flush_pending_stmts(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define dso_local void @fix_loop_structure(%struct.bitmap_head_def* %changed_bbs) #0 !dbg !5530 {
entry:
  %changed_bbs.addr = alloca %struct.bitmap_head_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %loop = alloca %struct.loop*, align 8
  %ploop = alloca %struct.loop*, align 8
  %li = alloca %struct.loop_iterator, align 8
  %record_exits = alloca i8, align 1
  %superloop = alloca %struct.loop**, align 8
  store %struct.bitmap_head_def* %changed_bbs, %struct.bitmap_head_def** %changed_bbs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %changed_bbs.addr, metadata !5533, metadata !DIExpression()), !dbg !5534
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !5535, metadata !DIExpression()), !dbg !5536
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5537, metadata !DIExpression()), !dbg !5538
  call void @llvm.dbg.declare(metadata %struct.loop** %ploop, metadata !5539, metadata !DIExpression()), !dbg !5540
  call void @llvm.dbg.declare(metadata %struct.loop_iterator* %li, metadata !5541, metadata !DIExpression()), !dbg !5542
  call void @llvm.dbg.declare(metadata i8* %record_exits, metadata !5543, metadata !DIExpression()), !dbg !5544
  store i8 0, i8* %record_exits, align 1, !dbg !5544
  call void @llvm.dbg.declare(metadata %struct.loop*** %superloop, metadata !5545, metadata !DIExpression()), !dbg !5546
  %call = call i32 @number_of_loops(), !dbg !5547
  %conv = zext i32 %call to i64, !dbg !5547
  %mul = mul i64 8, %conv, !dbg !5547
  %call1 = call i8* @xmalloc(i64 %mul), !dbg !5547
  %0 = bitcast i8* %call1 to %struct.loop**, !dbg !5547
  store %struct.loop** %0, %struct.loop*** %superloop, align 8, !dbg !5546
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5548
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5548
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5548
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5548
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 0, !dbg !5548
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !5548
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 6, !dbg !5548
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5548
  store %struct.basic_block_def* %4, %struct.basic_block_def** %bb, align 8, !dbg !5548
  br label %for.cond, !dbg !5548

for.cond:                                         ; preds = %for.inc, %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5550
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5550
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !5550
  %cfg3 = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !5550
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg3, align 8, !dbg !5550
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 1, !dbg !5550
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5550
  %cmp = icmp ne %struct.basic_block_def* %5, %8, !dbg !5550
  br i1 %cmp, label %for.body, label %for.end, !dbg !5548

for.body:                                         ; preds = %for.cond
  %9 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %changed_bbs.addr, align 8, !dbg !5552
  %tobool = icmp ne %struct.bitmap_head_def* %9, null, !dbg !5552
  br i1 %tobool, label %if.then, label %if.end, !dbg !5555

if.then:                                          ; preds = %for.body
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5556
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 3, !dbg !5557
  %11 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5557
  %call5 = call i32 @loop_depth(%struct.loop* %11), !dbg !5558
  %conv6 = zext i32 %call5 to i64, !dbg !5559
  %12 = inttoptr i64 %conv6 to i8*, !dbg !5560
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5561
  %aux = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 2, !dbg !5562
  store i8* %12, i8** %aux, align 8, !dbg !5563
  br label %if.end, !dbg !5561

if.end:                                           ; preds = %if.then, %for.body
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5564
  %add.ptr7 = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !5564
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr7, i32 0, i32 4, !dbg !5564
  %15 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5564
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %15, i32 0, i32 3, !dbg !5565
  %16 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5565
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5566
  %loop_father8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 3, !dbg !5567
  store %struct.loop* %16, %struct.loop** %loop_father8, align 8, !dbg !5568
  br label %for.inc, !dbg !5569

for.inc:                                          ; preds = %if.end
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5550
  %next_bb9 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 6, !dbg !5550
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb9, align 8, !dbg !5550
  store %struct.basic_block_def* %19, %struct.basic_block_def** %bb, align 8, !dbg !5550
  br label %for.cond, !dbg !5550, !llvm.loop !5570

for.end:                                          ; preds = %for.cond
  %call10 = call zeroext i8 @loops_state_satisfies_p(i32 8), !dbg !5572
  %tobool11 = icmp ne i8 %call10, 0, !dbg !5572
  br i1 %tobool11, label %if.then12, label %if.end13, !dbg !5574

if.then12:                                        ; preds = %for.end
  call void @release_recorded_exits(), !dbg !5575
  store i8 1, i8* %record_exits, align 1, !dbg !5577
  br label %if.end13, !dbg !5578

if.end13:                                         ; preds = %if.then12, %for.end
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 2), !dbg !5579
  br label %for.cond14, !dbg !5579

for.cond14:                                       ; preds = %for.inc23, %if.end13
  %20 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5581
  %tobool15 = icmp ne %struct.loop* %20, null, !dbg !5579
  br i1 %tobool15, label %for.body16, label %for.end24, !dbg !5579

for.body16:                                       ; preds = %for.cond14
  %21 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5583
  %header = getelementptr inbounds %struct.loop, %struct.loop* %21, i32 0, i32 2, !dbg !5586
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5586
  %tobool17 = icmp ne %struct.basic_block_def* %22, null, !dbg !5583
  br i1 %tobool17, label %if.then18, label %if.end19, !dbg !5587

if.then18:                                        ; preds = %for.body16
  br label %for.inc23, !dbg !5588

if.end19:                                         ; preds = %for.body16
  br label %while.cond, !dbg !5589

while.cond:                                       ; preds = %while.body, %if.end19
  %23 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5590
  %inner = getelementptr inbounds %struct.loop, %struct.loop* %23, i32 0, i32 8, !dbg !5591
  %24 = load %struct.loop*, %struct.loop** %inner, align 8, !dbg !5591
  %tobool20 = icmp ne %struct.loop* %24, null, !dbg !5589
  br i1 %tobool20, label %while.body, label %while.end, !dbg !5589

while.body:                                       ; preds = %while.cond
  %25 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5592
  %inner21 = getelementptr inbounds %struct.loop, %struct.loop* %25, i32 0, i32 8, !dbg !5594
  %26 = load %struct.loop*, %struct.loop** %inner21, align 8, !dbg !5594
  store %struct.loop* %26, %struct.loop** %ploop, align 8, !dbg !5595
  %27 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !5596
  call void @flow_loop_tree_node_remove(%struct.loop* %27), !dbg !5597
  %28 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5598
  %call22 = call %struct.loop* @loop_outer(%struct.loop* %28), !dbg !5599
  %29 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !5600
  call void @flow_loop_tree_node_add(%struct.loop* %call22, %struct.loop* %29), !dbg !5601
  br label %while.cond, !dbg !5589, !llvm.loop !5602

while.end:                                        ; preds = %while.cond
  %30 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5604
  call void @delete_loop(%struct.loop* %30), !dbg !5605
  br label %for.inc23, !dbg !5606

for.inc23:                                        ; preds = %while.end, %if.then18
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5581
  br label %for.cond14, !dbg !5581, !llvm.loop !5607

for.end24:                                        ; preds = %for.cond14
  %31 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5609
  %add.ptr25 = getelementptr inbounds %struct.function, %struct.function* %31, i64 0, !dbg !5609
  %cfg26 = getelementptr inbounds %struct.function, %struct.function* %add.ptr25, i32 0, i32 1, !dbg !5609
  %32 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg26, align 8, !dbg !5609
  %x_n_basic_blocks = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %32, i32 0, i32 3, !dbg !5609
  %33 = load i32, i32* %x_n_basic_blocks, align 8, !dbg !5609
  %34 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5610
  %add.ptr27 = getelementptr inbounds %struct.function, %struct.function* %34, i64 0, !dbg !5610
  %x_current_loops28 = getelementptr inbounds %struct.function, %struct.function* %add.ptr27, i32 0, i32 4, !dbg !5610
  %35 = load %struct.loops*, %struct.loops** %x_current_loops28, align 8, !dbg !5610
  %tree_root29 = getelementptr inbounds %struct.loops, %struct.loops* %35, i32 0, i32 3, !dbg !5611
  %36 = load %struct.loop*, %struct.loop** %tree_root29, align 8, !dbg !5611
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %36, i32 0, i32 6, !dbg !5612
  store i32 %33, i32* %num_nodes, align 4, !dbg !5613
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5614
  br label %for.cond30, !dbg !5614

for.cond30:                                       ; preds = %for.inc38, %for.end24
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5616
  %tobool31 = icmp ne %struct.loop* %37, null, !dbg !5614
  br i1 %tobool31, label %for.body32, label %for.end39, !dbg !5614

for.body32:                                       ; preds = %for.cond30
  %38 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5618
  %header33 = getelementptr inbounds %struct.loop, %struct.loop* %38, i32 0, i32 2, !dbg !5620
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %header33, align 8, !dbg !5620
  %loop_father34 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 3, !dbg !5621
  %40 = load %struct.loop*, %struct.loop** %loop_father34, align 8, !dbg !5621
  %41 = load %struct.loop**, %struct.loop*** %superloop, align 8, !dbg !5622
  %42 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5623
  %num = getelementptr inbounds %struct.loop, %struct.loop* %42, i32 0, i32 0, !dbg !5624
  %43 = load i32, i32* %num, align 8, !dbg !5624
  %idxprom = sext i32 %43 to i64, !dbg !5622
  %arrayidx = getelementptr inbounds %struct.loop*, %struct.loop** %41, i64 %idxprom, !dbg !5622
  store %struct.loop* %40, %struct.loop** %arrayidx, align 8, !dbg !5625
  %44 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5626
  %header35 = getelementptr inbounds %struct.loop, %struct.loop* %44, i32 0, i32 2, !dbg !5627
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %header35, align 8, !dbg !5627
  %46 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5628
  %call36 = call i32 @flow_loop_nodes_find(%struct.basic_block_def* %45, %struct.loop* %46), !dbg !5629
  %47 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5630
  %num_nodes37 = getelementptr inbounds %struct.loop, %struct.loop* %47, i32 0, i32 6, !dbg !5631
  store i32 %call36, i32* %num_nodes37, align 4, !dbg !5632
  br label %for.inc38, !dbg !5633

for.inc38:                                        ; preds = %for.body32
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5616
  br label %for.cond30, !dbg !5616, !llvm.loop !5634

for.end39:                                        ; preds = %for.cond30
  call void @fel_init(%struct.loop_iterator* %li, %struct.loop** %loop, i32 0), !dbg !5636
  br label %for.cond40, !dbg !5636

for.cond40:                                       ; preds = %for.inc51, %for.end39
  %48 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5638
  %tobool41 = icmp ne %struct.loop* %48, null, !dbg !5636
  br i1 %tobool41, label %for.body42, label %for.end52, !dbg !5636

for.body42:                                       ; preds = %for.cond40
  %49 = load %struct.loop**, %struct.loop*** %superloop, align 8, !dbg !5640
  %50 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5642
  %num43 = getelementptr inbounds %struct.loop, %struct.loop* %50, i32 0, i32 0, !dbg !5643
  %51 = load i32, i32* %num43, align 8, !dbg !5643
  %idxprom44 = sext i32 %51 to i64, !dbg !5640
  %arrayidx45 = getelementptr inbounds %struct.loop*, %struct.loop** %49, i64 %idxprom44, !dbg !5640
  %52 = load %struct.loop*, %struct.loop** %arrayidx45, align 8, !dbg !5640
  store %struct.loop* %52, %struct.loop** %ploop, align 8, !dbg !5644
  %53 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !5645
  %54 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5647
  %call46 = call %struct.loop* @loop_outer(%struct.loop* %54), !dbg !5648
  %cmp47 = icmp ne %struct.loop* %53, %call46, !dbg !5649
  br i1 %cmp47, label %if.then49, label %if.end50, !dbg !5650

if.then49:                                        ; preds = %for.body42
  %55 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5651
  call void @flow_loop_tree_node_remove(%struct.loop* %55), !dbg !5653
  %56 = load %struct.loop*, %struct.loop** %ploop, align 8, !dbg !5654
  %57 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5655
  call void @flow_loop_tree_node_add(%struct.loop* %56, %struct.loop* %57), !dbg !5656
  br label %if.end50, !dbg !5657

if.end50:                                         ; preds = %if.then49, %for.body42
  br label %for.inc51, !dbg !5658

for.inc51:                                        ; preds = %if.end50
  call void @fel_next(%struct.loop_iterator* %li, %struct.loop** %loop), !dbg !5638
  br label %for.cond40, !dbg !5638, !llvm.loop !5659

for.end52:                                        ; preds = %for.cond40
  %58 = load %struct.loop**, %struct.loop*** %superloop, align 8, !dbg !5661
  %59 = bitcast %struct.loop** %58 to i8*, !dbg !5661
  call void @free(i8* %59), !dbg !5662
  %60 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %changed_bbs.addr, align 8, !dbg !5663
  %tobool53 = icmp ne %struct.bitmap_head_def* %60, null, !dbg !5663
  br i1 %tobool53, label %if.then54, label %if.end79, !dbg !5665

if.then54:                                        ; preds = %for.end52
  %61 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5666
  %add.ptr55 = getelementptr inbounds %struct.function, %struct.function* %61, i64 0, !dbg !5666
  %cfg56 = getelementptr inbounds %struct.function, %struct.function* %add.ptr55, i32 0, i32 1, !dbg !5666
  %62 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg56, align 8, !dbg !5666
  %x_entry_block_ptr57 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %62, i32 0, i32 0, !dbg !5666
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr57, align 8, !dbg !5666
  %next_bb58 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 6, !dbg !5666
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb58, align 8, !dbg !5666
  store %struct.basic_block_def* %64, %struct.basic_block_def** %bb, align 8, !dbg !5666
  br label %for.cond59, !dbg !5666

for.cond59:                                       ; preds = %for.inc76, %if.then54
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5669
  %66 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5669
  %add.ptr60 = getelementptr inbounds %struct.function, %struct.function* %66, i64 0, !dbg !5669
  %cfg61 = getelementptr inbounds %struct.function, %struct.function* %add.ptr60, i32 0, i32 1, !dbg !5669
  %67 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg61, align 8, !dbg !5669
  %x_exit_block_ptr62 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %67, i32 0, i32 1, !dbg !5669
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr62, align 8, !dbg !5669
  %cmp63 = icmp ne %struct.basic_block_def* %65, %68, !dbg !5669
  br i1 %cmp63, label %for.body65, label %for.end78, !dbg !5666

for.body65:                                       ; preds = %for.cond59
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5671
  %loop_father66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 3, !dbg !5674
  %70 = load %struct.loop*, %struct.loop** %loop_father66, align 8, !dbg !5674
  %call67 = call i32 @loop_depth(%struct.loop* %70), !dbg !5675
  %conv68 = zext i32 %call67 to i64, !dbg !5676
  %71 = inttoptr i64 %conv68 to i8*, !dbg !5677
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5678
  %aux69 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 2, !dbg !5679
  %73 = load i8*, i8** %aux69, align 8, !dbg !5679
  %cmp70 = icmp ne i8* %71, %73, !dbg !5680
  br i1 %cmp70, label %if.then72, label %if.end74, !dbg !5681

if.then72:                                        ; preds = %for.body65
  %74 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %changed_bbs.addr, align 8, !dbg !5682
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5683
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %75, i32 0, i32 9, !dbg !5684
  %76 = load i32, i32* %index, align 8, !dbg !5684
  %call73 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %74, i32 %76), !dbg !5685
  br label %if.end74, !dbg !5685

if.end74:                                         ; preds = %if.then72, %for.body65
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5686
  %aux75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %77, i32 0, i32 2, !dbg !5687
  store i8* null, i8** %aux75, align 8, !dbg !5688
  br label %for.inc76, !dbg !5689

for.inc76:                                        ; preds = %if.end74
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !5669
  %next_bb77 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 6, !dbg !5669
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb77, align 8, !dbg !5669
  store %struct.basic_block_def* %79, %struct.basic_block_def** %bb, align 8, !dbg !5669
  br label %for.cond59, !dbg !5669, !llvm.loop !5690

for.end78:                                        ; preds = %for.cond59
  br label %if.end79, !dbg !5692

if.end79:                                         ; preds = %for.end78, %for.end52
  %call80 = call zeroext i8 @loops_state_satisfies_p(i32 1), !dbg !5693
  %tobool81 = icmp ne i8 %call80, 0, !dbg !5693
  br i1 %tobool81, label %if.then82, label %if.end83, !dbg !5695

if.then82:                                        ; preds = %if.end79
  call void @create_preheaders(i32 1), !dbg !5696
  br label %if.end83, !dbg !5696

if.end83:                                         ; preds = %if.then82, %if.end79
  %call84 = call zeroext i8 @loops_state_satisfies_p(i32 2), !dbg !5697
  %tobool85 = icmp ne i8 %call84, 0, !dbg !5697
  br i1 %tobool85, label %if.then86, label %if.end87, !dbg !5699

if.then86:                                        ; preds = %if.end83
  call void @force_single_succ_latches(), !dbg !5700
  br label %if.end87, !dbg !5700

if.end87:                                         ; preds = %if.then86, %if.end83
  %call88 = call zeroext i8 @loops_state_satisfies_p(i32 4), !dbg !5701
  %tobool89 = icmp ne i8 %call88, 0, !dbg !5701
  br i1 %tobool89, label %if.then90, label %if.end92, !dbg !5703

if.then90:                                        ; preds = %if.end87
  %call91 = call zeroext i8 @mark_irreducible_loops(), !dbg !5704
  br label %if.end92, !dbg !5704

if.end92:                                         ; preds = %if.then90, %if.end87
  %80 = load i8, i8* %record_exits, align 1, !dbg !5705
  %tobool93 = icmp ne i8 %80, 0, !dbg !5705
  br i1 %tobool93, label %if.then94, label %if.end95, !dbg !5707

if.then94:                                        ; preds = %if.end92
  call void @record_loop_exits(), !dbg !5708
  br label %if.end95, !dbg !5708

if.end95:                                         ; preds = %if.then94, %if.end92
  ret void, !dbg !5709
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @number_of_loops() #0 !dbg !5710 {
entry:
  %retval = alloca i32, align 4
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5713
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5713
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5713
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5713
  %tobool = icmp ne %struct.loops* %1, null, !dbg !5713
  br i1 %tobool, label %if.end, label %if.then, !dbg !5715

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !5716
  br label %return, !dbg !5716

if.end:                                           ; preds = %entry
  %2 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5717
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %2, i64 0, !dbg !5717
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !5717
  %3 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !5717
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %3, i32 0, i32 1, !dbg !5717
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !5717
  %tobool3 = icmp ne %struct.VEC_loop_p_gc* %4, null, !dbg !5717
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !5717

cond.true:                                        ; preds = %if.end
  %5 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5717
  %add.ptr4 = getelementptr inbounds %struct.function, %struct.function* %5, i64 0, !dbg !5717
  %x_current_loops5 = getelementptr inbounds %struct.function, %struct.function* %add.ptr4, i32 0, i32 4, !dbg !5717
  %6 = load %struct.loops*, %struct.loops** %x_current_loops5, align 8, !dbg !5717
  %larray6 = getelementptr inbounds %struct.loops, %struct.loops* %6, i32 0, i32 1, !dbg !5717
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray6, align 8, !dbg !5717
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %7, i32 0, i32 0, !dbg !5717
  br label %cond.end, !dbg !5717

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !5717

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5717
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5717
  store i32 %call, i32* %retval, align 4, !dbg !5718
  br label %return, !dbg !5718

return:                                           ; preds = %cond.end, %if.then
  %8 = load i32, i32* %retval, align 4, !dbg !5719
  ret i32 %8, !dbg !5719
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @loop_depth(%struct.loop* %loop) #0 !dbg !5720 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5723, metadata !DIExpression()), !dbg !5724
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5725
  %superloops = getelementptr inbounds %struct.loop, %struct.loop* %0, i32 0, i32 7, !dbg !5725
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops, align 8, !dbg !5725
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !5725
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5725

cond.true:                                        ; preds = %entry
  %2 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5725
  %superloops1 = getelementptr inbounds %struct.loop, %struct.loop* %2, i32 0, i32 7, !dbg !5725
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %superloops1, align 8, !dbg !5725
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !5725
  br label %cond.end, !dbg !5725

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5725

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5725
  %call = call i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %cond), !dbg !5725
  ret i32 %call, !dbg !5726
}

declare dso_local void @release_recorded_exits() #2

declare dso_local void @delete_loop(%struct.loop*) #2

declare dso_local i32 @flow_loop_nodes_find(%struct.basic_block_def*, %struct.loop*) #2

declare dso_local void @record_loop_exits() #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !5727 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !5730, metadata !DIExpression()), !dbg !5731
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5731
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !5731
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5731

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !5731
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !5731
  %2 = load i32, i32* %num, align 8, !dbg !5731
  br label %cond.end, !dbg !5731

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5731

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5731
  ret i32 %cond, !dbg !5731
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_length(%struct.VEC_loop_p_base* %vec_) #0 !dbg !5732 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5737, metadata !DIExpression()), !dbg !5738
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5738
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5738
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5738

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5738
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %1, i32 0, i32 0, !dbg !5738
  %2 = load i32, i32* %num, align 8, !dbg !5738
  br label %cond.end, !dbg !5738

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5738

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !5738
  ret i32 %cond, !dbg !5738
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %vec_, i32 %ix_) #0 !dbg !5739 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !5742, metadata !DIExpression()), !dbg !5743
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !5744, metadata !DIExpression()), !dbg !5743
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5743
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !5743
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !5743

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !5743
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5743
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !5743
  %3 = load i32, i32* %num, align 8, !dbg !5743
  %cmp = icmp ult i32 %1, %3, !dbg !5743
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !5745
  %land.ext = zext i1 %4 to i32, !dbg !5743
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !5743
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 2, !dbg !5743
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !5743
  %idxprom = zext i32 %6 to i64, !dbg !5743
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !5743
  %7 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !5743
  ret %struct.loop* %7, !dbg !5743
}

declare dso_local i32 @dfs_enumerate_from(%struct.basic_block_def*, i32, i8 (%struct.basic_block_def*, i8*)*, %struct.basic_block_def**, i32, i8*) #2

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @rpe_enum_p(%struct.basic_block_def* %bb, i8* %data) #0 !dbg !5746 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %data.addr = alloca i8*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5749, metadata !DIExpression()), !dbg !5750
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !5751, metadata !DIExpression()), !dbg !5752
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5753
  %1 = load i8*, i8** %data.addr, align 8, !dbg !5754
  %2 = bitcast i8* %1 to %struct.basic_block_def*, !dbg !5755
  %call = call zeroext i8 @dominated_by_p(i32 1, %struct.basic_block_def* %0, %struct.basic_block_def* %2), !dbg !5756
  ret i8 %call, !dbg !5757
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5758 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5761, metadata !DIExpression()), !dbg !5762
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5763
  %3 = load i32, i32* %index, align 8, !dbg !5763
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5764
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5764
  %6 = load i32, i32* %5, align 8, !dbg !5764
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5764
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !5764
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !5764
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5764
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5764

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5764
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !5764
  %11 = load i32, i32* %10, align 8, !dbg !5764
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !5764
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !5764
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !5764
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5764
  br label %cond.end, !dbg !5764

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5764

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5764
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5764
  %cmp = icmp eq i32 %3, %call2, !dbg !5765
  %conv = zext i1 %cmp to i32, !dbg !5765
  %conv3 = trunc i32 %conv to i8, !dbg !5766
  ret i8 %conv3, !dbg !5767
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5768 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5771, metadata !DIExpression()), !dbg !5772
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5773
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !5773
  %5 = load i32, i32* %4, align 8, !dbg !5773
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !5773
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !5773
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !5773
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !5773
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5773

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !5773
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !5773
  %10 = load i32, i32* %9, align 8, !dbg !5773
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !5773
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !5773
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !5773
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !5773
  br label %cond.end, !dbg !5773

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5773

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5773
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !5773
  %13 = load i32, i32* %index, align 8, !dbg !5773
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !5773
  ret %struct.edge_def* %call2, !dbg !5774
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !5775 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !5778, metadata !DIExpression()), !dbg !5779
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5780
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !5780
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !5780
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5780

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !5780
  br label %cond.end, !dbg !5780

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5780

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5780
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !5781
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !5781
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !5782
  ret %struct.VEC_edge_gc* %5, !dbg !5783
}

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_heap_reserve(%struct.VEC_basic_block_heap** %vec_, i32 %alloc_) #0 !dbg !5784 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_basic_block_heap** %vec_, %struct.VEC_basic_block_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_heap*** %vec_.addr, metadata !5787, metadata !DIExpression()), !dbg !5788
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5789, metadata !DIExpression()), !dbg !5788
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !5790, metadata !DIExpression()), !dbg !5788
  %0 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5788
  %1 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %0, align 8, !dbg !5788
  %tobool = icmp ne %struct.VEC_basic_block_heap* %1, null, !dbg !5788
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5788

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5788
  %3 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %2, align 8, !dbg !5788
  %base = getelementptr inbounds %struct.VEC_basic_block_heap, %struct.VEC_basic_block_heap* %3, i32 0, i32 0, !dbg !5788
  br label %cond.end, !dbg !5788

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5788

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_basic_block_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5788
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !5788
  %call = call i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %cond, i32 %4), !dbg !5788
  %tobool1 = icmp ne i32 %call, 0, !dbg !5788
  %lnot = xor i1 %tobool1, true, !dbg !5788
  %lnot.ext = zext i1 %lnot to i32, !dbg !5788
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !5788
  %5 = load i32, i32* %extend, align 4, !dbg !5791
  %tobool2 = icmp ne i32 %5, 0, !dbg !5791
  br i1 %tobool2, label %if.then, label %if.end, !dbg !5788

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5791
  %7 = load %struct.VEC_basic_block_heap*, %struct.VEC_basic_block_heap** %6, align 8, !dbg !5791
  %8 = bitcast %struct.VEC_basic_block_heap* %7 to i8*, !dbg !5791
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !5791
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !5791
  %10 = bitcast i8* %call3 to %struct.VEC_basic_block_heap*, !dbg !5791
  %11 = load %struct.VEC_basic_block_heap**, %struct.VEC_basic_block_heap*** %vec_.addr, align 8, !dbg !5791
  store %struct.VEC_basic_block_heap* %10, %struct.VEC_basic_block_heap** %11, align 8, !dbg !5791
  br label %if.end, !dbg !5791

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !5788
  ret i32 %12, !dbg !5788
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def** @VEC_basic_block_base_quick_push(%struct.VEC_basic_block_base* %vec_, %struct.basic_block_def* %obj_) #0 !dbg !5793 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %obj_.addr = alloca %struct.basic_block_def*, align 8
  %slot_ = alloca %struct.basic_block_def**, align 8
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5797, metadata !DIExpression()), !dbg !5798
  store %struct.basic_block_def* %obj_, %struct.basic_block_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %obj_.addr, metadata !5799, metadata !DIExpression()), !dbg !5798
  call void @llvm.dbg.declare(metadata %struct.basic_block_def*** %slot_, metadata !5800, metadata !DIExpression()), !dbg !5798
  %0 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5798
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %0, i32 0, i32 0, !dbg !5798
  %1 = load i32, i32* %num, align 8, !dbg !5798
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5798
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !5798
  %3 = load i32, i32* %alloc, align 4, !dbg !5798
  %cmp = icmp ult i32 %1, %3, !dbg !5798
  %conv = zext i1 %cmp to i32, !dbg !5798
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5798
  %vec = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 2, !dbg !5798
  %5 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5798
  %num1 = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %5, i32 0, i32 0, !dbg !5798
  %6 = load i32, i32* %num1, align 8, !dbg !5798
  %inc = add i32 %6, 1, !dbg !5798
  store i32 %inc, i32* %num1, align 8, !dbg !5798
  %idxprom = zext i32 %6 to i64, !dbg !5798
  %arrayidx = getelementptr inbounds [1 x %struct.basic_block_def*], [1 x %struct.basic_block_def*]* %vec, i64 0, i64 %idxprom, !dbg !5798
  store %struct.basic_block_def** %arrayidx, %struct.basic_block_def*** %slot_, align 8, !dbg !5798
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %obj_.addr, align 8, !dbg !5798
  %8 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !5798
  store %struct.basic_block_def* %7, %struct.basic_block_def** %8, align 8, !dbg !5798
  %9 = load %struct.basic_block_def**, %struct.basic_block_def*** %slot_, align 8, !dbg !5798
  ret %struct.basic_block_def** %9, !dbg !5798
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_basic_block_base_space(%struct.VEC_basic_block_base* %vec_, i32 %alloc_) #0 !dbg !5801 {
entry:
  %vec_.addr = alloca %struct.VEC_basic_block_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_basic_block_base* %vec_, %struct.VEC_basic_block_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_basic_block_base** %vec_.addr, metadata !5804, metadata !DIExpression()), !dbg !5805
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !5806, metadata !DIExpression()), !dbg !5805
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !5805
  %cmp = icmp sge i32 %0, 0, !dbg !5805
  %conv = zext i1 %cmp to i32, !dbg !5805
  %1 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5805
  %tobool = icmp ne %struct.VEC_basic_block_base* %1, null, !dbg !5805
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5805

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5805
  %alloc = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %2, i32 0, i32 1, !dbg !5805
  %3 = load i32, i32* %alloc, align 4, !dbg !5805
  %4 = load %struct.VEC_basic_block_base*, %struct.VEC_basic_block_base** %vec_.addr, align 8, !dbg !5805
  %num = getelementptr inbounds %struct.VEC_basic_block_base, %struct.VEC_basic_block_base* %4, i32 0, i32 0, !dbg !5805
  %5 = load i32, i32* %num, align 8, !dbg !5805
  %sub = sub i32 %3, %5, !dbg !5805
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !5805
  %cmp1 = icmp uge i32 %sub, %6, !dbg !5805
  %conv2 = zext i1 %cmp1 to i32, !dbg !5805
  br label %cond.end, !dbg !5805

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !5805
  %tobool3 = icmp ne i32 %7, 0, !dbg !5805
  %lnot = xor i1 %tobool3, true, !dbg !5805
  %lnot.ext = zext i1 %lnot to i32, !dbg !5805
  br label %cond.end, !dbg !5805

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !5805
  ret i32 %cond, !dbg !5805
}

declare dso_local i8* @vec_heap_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal void @RESET_BIT(%struct.simple_bitmap_def* %map, i32 %bitno) #0 !dbg !5807 {
entry:
  %map.addr = alloca %struct.simple_bitmap_def*, align 8
  %bitno.addr = alloca i32, align 4
  %oldbit = alloca i8, align 1
  store %struct.simple_bitmap_def* %map, %struct.simple_bitmap_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.simple_bitmap_def** %map.addr, metadata !5808, metadata !DIExpression()), !dbg !5809
  store i32 %bitno, i32* %bitno.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %bitno.addr, metadata !5810, metadata !DIExpression()), !dbg !5811
  %0 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5812
  %popcount = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %0, i32 0, i32 0, !dbg !5814
  %1 = load i8*, i8** %popcount, align 8, !dbg !5814
  %tobool = icmp ne i8* %1, null, !dbg !5812
  br i1 %tobool, label %if.then, label %if.end7, !dbg !5815

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata i8* %oldbit, metadata !5816, metadata !DIExpression()), !dbg !5818
  %2 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5819
  %elms = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %2, i32 0, i32 3, !dbg !5819
  %3 = load i32, i32* %bitno.addr, align 4, !dbg !5819
  %div = udiv i32 %3, 64, !dbg !5819
  %idxprom = zext i32 %div to i64, !dbg !5819
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %elms, i64 0, i64 %idxprom, !dbg !5819
  %4 = load i64, i64* %arrayidx, align 8, !dbg !5819
  %5 = load i32, i32* %bitno.addr, align 4, !dbg !5819
  %rem = urem i32 %5, 64, !dbg !5819
  %sh_prom = zext i32 %rem to i64, !dbg !5819
  %shr = lshr i64 %4, %sh_prom, !dbg !5819
  %and = and i64 %shr, 1, !dbg !5819
  %conv = trunc i64 %and to i8, !dbg !5819
  store i8 %conv, i8* %oldbit, align 1, !dbg !5820
  %6 = load i8, i8* %oldbit, align 1, !dbg !5821
  %tobool1 = icmp ne i8 %6, 0, !dbg !5821
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !5823

if.then2:                                         ; preds = %if.then
  %7 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5824
  %popcount3 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %7, i32 0, i32 0, !dbg !5825
  %8 = load i8*, i8** %popcount3, align 8, !dbg !5825
  %9 = load i32, i32* %bitno.addr, align 4, !dbg !5826
  %div4 = udiv i32 %9, 64, !dbg !5827
  %idxprom5 = zext i32 %div4 to i64, !dbg !5824
  %arrayidx6 = getelementptr inbounds i8, i8* %8, i64 %idxprom5, !dbg !5824
  %10 = load i8, i8* %arrayidx6, align 1, !dbg !5828
  %dec = add i8 %10, -1, !dbg !5828
  store i8 %dec, i8* %arrayidx6, align 1, !dbg !5828
  br label %if.end, !dbg !5824

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end7, !dbg !5829

if.end7:                                          ; preds = %if.end, %entry
  %11 = load i32, i32* %bitno.addr, align 4, !dbg !5830
  %rem8 = urem i32 %11, 64, !dbg !5831
  %sh_prom9 = zext i32 %rem8 to i64, !dbg !5832
  %shl = shl i64 1, %sh_prom9, !dbg !5832
  %neg = xor i64 %shl, -1, !dbg !5833
  %12 = load %struct.simple_bitmap_def*, %struct.simple_bitmap_def** %map.addr, align 8, !dbg !5834
  %elms10 = getelementptr inbounds %struct.simple_bitmap_def, %struct.simple_bitmap_def* %12, i32 0, i32 3, !dbg !5835
  %13 = load i32, i32* %bitno.addr, align 4, !dbg !5836
  %div11 = udiv i32 %13, 64, !dbg !5837
  %idxprom12 = zext i32 %div11 to i64, !dbg !5834
  %arrayidx13 = getelementptr inbounds [1 x i64], [1 x i64]* %elms10, i64 0, i64 %idxprom12, !dbg !5834
  %14 = load i64, i64* %arrayidx13, align 8, !dbg !5838
  %and14 = and i64 %14, %neg, !dbg !5838
  store i64 %and14, i64* %arrayidx13, align 8, !dbg !5838
  ret void, !dbg !5839
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fix_loop_placement(%struct.loop* %loop) #0 !dbg !5840 {
entry:
  %loop.addr = alloca %struct.loop*, align 8
  %i = alloca i32, align 4
  %e = alloca %struct.edge_def*, align 8
  %exits = alloca %struct.VEC_edge_heap*, align 8
  %father = alloca %struct.loop*, align 8
  %act = alloca %struct.loop*, align 8
  %ret = alloca i8, align 1
  store %struct.loop* %loop, %struct.loop** %loop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %loop.addr, metadata !5843, metadata !DIExpression()), !dbg !5844
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5845, metadata !DIExpression()), !dbg !5846
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5847, metadata !DIExpression()), !dbg !5848
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap** %exits, metadata !5849, metadata !DIExpression()), !dbg !5850
  %0 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5851
  %call = call %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop* %0), !dbg !5852
  store %struct.VEC_edge_heap* %call, %struct.VEC_edge_heap** %exits, align 8, !dbg !5850
  call void @llvm.dbg.declare(metadata %struct.loop** %father, metadata !5853, metadata !DIExpression()), !dbg !5854
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5855
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !5855
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5855
  %2 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5855
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %2, i32 0, i32 3, !dbg !5856
  %3 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5856
  store %struct.loop* %3, %struct.loop** %father, align 8, !dbg !5854
  call void @llvm.dbg.declare(metadata %struct.loop** %act, metadata !5857, metadata !DIExpression()), !dbg !5858
  call void @llvm.dbg.declare(metadata i8* %ret, metadata !5859, metadata !DIExpression()), !dbg !5860
  store i8 0, i8* %ret, align 1, !dbg !5860
  store i32 0, i32* %i, align 4, !dbg !5861
  br label %for.cond, !dbg !5863

for.cond:                                         ; preds = %for.inc, %entry
  %4 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5864
  %tobool = icmp ne %struct.VEC_edge_heap* %4, null, !dbg !5864
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5864

cond.true:                                        ; preds = %for.cond
  %5 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5864
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %5, i32 0, i32 0, !dbg !5864
  br label %cond.end, !dbg !5864

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5864

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5864
  %6 = load i32, i32* %i, align 4, !dbg !5864
  %call1 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond, i32 %6, %struct.edge_def** %e), !dbg !5864
  %tobool2 = icmp ne i32 %call1, 0, !dbg !5866
  br i1 %tobool2, label %for.body, label %for.end, !dbg !5866

for.body:                                         ; preds = %cond.end
  %7 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5867
  %8 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5869
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %8, i32 0, i32 1, !dbg !5870
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5870
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 3, !dbg !5871
  %10 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5871
  %call3 = call %struct.loop* @find_common_loop(%struct.loop* %7, %struct.loop* %10), !dbg !5872
  store %struct.loop* %call3, %struct.loop** %act, align 8, !dbg !5873
  %11 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !5874
  %12 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5876
  %call4 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %11, %struct.loop* %12), !dbg !5877
  %tobool5 = icmp ne i8 %call4, 0, !dbg !5877
  br i1 %tobool5, label %if.then, label %if.end, !dbg !5878

if.then:                                          ; preds = %for.body
  %13 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5879
  store %struct.loop* %13, %struct.loop** %father, align 8, !dbg !5880
  br label %if.end, !dbg !5881

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc, !dbg !5882

for.inc:                                          ; preds = %if.end
  %14 = load i32, i32* %i, align 4, !dbg !5883
  %inc = add i32 %14, 1, !dbg !5883
  store i32 %inc, i32* %i, align 4, !dbg !5883
  br label %for.cond, !dbg !5884, !llvm.loop !5885

for.end:                                          ; preds = %cond.end
  %15 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !5887
  %16 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5889
  %call6 = call %struct.loop* @loop_outer(%struct.loop* %16), !dbg !5890
  %cmp = icmp ne %struct.loop* %15, %call6, !dbg !5891
  br i1 %cmp, label %if.then7, label %if.end29, !dbg !5892

if.then7:                                         ; preds = %for.end
  %17 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5893
  %call8 = call %struct.loop* @loop_outer(%struct.loop* %17), !dbg !5896
  store %struct.loop* %call8, %struct.loop** %act, align 8, !dbg !5897
  br label %for.cond9, !dbg !5898

for.cond9:                                        ; preds = %for.inc13, %if.then7
  %18 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5899
  %19 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !5901
  %cmp10 = icmp ne %struct.loop* %18, %19, !dbg !5902
  br i1 %cmp10, label %for.body11, label %for.end15, !dbg !5903

for.body11:                                       ; preds = %for.cond9
  %20 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5904
  %num_nodes = getelementptr inbounds %struct.loop, %struct.loop* %20, i32 0, i32 6, !dbg !5905
  %21 = load i32, i32* %num_nodes, align 4, !dbg !5905
  %22 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5906
  %num_nodes12 = getelementptr inbounds %struct.loop, %struct.loop* %22, i32 0, i32 6, !dbg !5907
  %23 = load i32, i32* %num_nodes12, align 4, !dbg !5908
  %sub = sub i32 %23, %21, !dbg !5908
  store i32 %sub, i32* %num_nodes12, align 4, !dbg !5908
  br label %for.inc13, !dbg !5906

for.inc13:                                        ; preds = %for.body11
  %24 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5909
  %call14 = call %struct.loop* @loop_outer(%struct.loop* %24), !dbg !5910
  store %struct.loop* %call14, %struct.loop** %act, align 8, !dbg !5911
  br label %for.cond9, !dbg !5912, !llvm.loop !5913

for.end15:                                        ; preds = %for.cond9
  %25 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5915
  call void @flow_loop_tree_node_remove(%struct.loop* %25), !dbg !5916
  %26 = load %struct.loop*, %struct.loop** %father, align 8, !dbg !5917
  %27 = load %struct.loop*, %struct.loop** %loop.addr, align 8, !dbg !5918
  call void @flow_loop_tree_node_add(%struct.loop* %26, %struct.loop* %27), !dbg !5919
  store i32 0, i32* %i, align 4, !dbg !5920
  br label %for.cond16, !dbg !5922

for.cond16:                                       ; preds = %for.inc26, %for.end15
  %28 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5923
  %tobool17 = icmp ne %struct.VEC_edge_heap* %28, null, !dbg !5923
  br i1 %tobool17, label %cond.true18, label %cond.false20, !dbg !5923

cond.true18:                                      ; preds = %for.cond16
  %29 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %exits, align 8, !dbg !5923
  %base19 = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %29, i32 0, i32 0, !dbg !5923
  br label %cond.end21, !dbg !5923

cond.false20:                                     ; preds = %for.cond16
  br label %cond.end21, !dbg !5923

cond.end21:                                       ; preds = %cond.false20, %cond.true18
  %cond22 = phi %struct.VEC_edge_base* [ %base19, %cond.true18 ], [ null, %cond.false20 ], !dbg !5923
  %30 = load i32, i32* %i, align 4, !dbg !5923
  %call23 = call i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %cond22, i32 %30, %struct.edge_def** %e), !dbg !5923
  %tobool24 = icmp ne i32 %call23, 0, !dbg !5925
  br i1 %tobool24, label %for.body25, label %for.end28, !dbg !5925

for.body25:                                       ; preds = %cond.end21
  %31 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5926
  call void @rescan_loop_exit(%struct.edge_def* %31, i8 zeroext 0, i8 zeroext 0), !dbg !5927
  br label %for.inc26, !dbg !5927

for.inc26:                                        ; preds = %for.body25
  %32 = load i32, i32* %i, align 4, !dbg !5928
  %inc27 = add i32 %32, 1, !dbg !5928
  store i32 %inc27, i32* %i, align 4, !dbg !5928
  br label %for.cond16, !dbg !5929, !llvm.loop !5930

for.end28:                                        ; preds = %cond.end21
  store i8 1, i8* %ret, align 1, !dbg !5932
  br label %if.end29, !dbg !5933

if.end29:                                         ; preds = %for.end28, %for.end
  call void @VEC_edge_heap_free(%struct.VEC_edge_heap** %exits), !dbg !5934
  %33 = load i8, i8* %ret, align 1, !dbg !5935
  ret i8 %33, !dbg !5936
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @fix_bb_placement(%struct.basic_block_def* %bb) #0 !dbg !5937 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %loop = alloca %struct.loop*, align 8
  %act = alloca %struct.loop*, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5940, metadata !DIExpression()), !dbg !5941
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !5942, metadata !DIExpression()), !dbg !5943
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !5944, metadata !DIExpression()), !dbg !5945
  call void @llvm.dbg.declare(metadata %struct.loop** %loop, metadata !5946, metadata !DIExpression()), !dbg !5947
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5948
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !5948
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !5948
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !5948
  %tree_root = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 3, !dbg !5949
  %2 = load %struct.loop*, %struct.loop** %tree_root, align 8, !dbg !5949
  store %struct.loop* %2, %struct.loop** %loop, align 8, !dbg !5947
  call void @llvm.dbg.declare(metadata %struct.loop** %act, metadata !5950, metadata !DIExpression()), !dbg !5951
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5952
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !5952
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !5952
  %4 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !5952
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !5952
  %6 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !5952
  store i32 %6, i32* %5, align 8, !dbg !5952
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !5952
  %8 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !5952
  store %struct.VEC_edge_gc** %8, %struct.VEC_edge_gc*** %7, align 8, !dbg !5952
  %9 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !5952
  %10 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !5952
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %9, i8* align 8 %10, i64 16, i1 false), !dbg !5952
  br label %for.cond, !dbg !5952

for.cond:                                         ; preds = %for.inc, %entry
  %11 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !5954
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 0, !dbg !5954
  %13 = load i32, i32* %12, align 8, !dbg !5954
  %14 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %11, i32 0, i32 1, !dbg !5954
  %15 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %14, align 8, !dbg !5954
  %call1 = call zeroext i8 @ei_cond(i32 %13, %struct.VEC_edge_gc** %15, %struct.edge_def** %e), !dbg !5954
  %tobool = icmp ne i8 %call1, 0, !dbg !5952
  br i1 %tobool, label %for.body, label %for.end, !dbg !5952

for.body:                                         ; preds = %for.cond
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5956
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 1, !dbg !5959
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5959
  %18 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5960
  %add.ptr2 = getelementptr inbounds %struct.function, %struct.function* %18, i64 0, !dbg !5960
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr2, i32 0, i32 1, !dbg !5960
  %19 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5960
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %19, i32 0, i32 1, !dbg !5960
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5960
  %cmp = icmp eq %struct.basic_block_def* %17, %20, !dbg !5961
  br i1 %cmp, label %if.then, label %if.end, !dbg !5962

if.then:                                          ; preds = %for.body
  br label %for.inc, !dbg !5963

if.end:                                           ; preds = %for.body
  %21 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5964
  %dest3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 1, !dbg !5965
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %dest3, align 8, !dbg !5965
  %loop_father = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 3, !dbg !5966
  %23 = load %struct.loop*, %struct.loop** %loop_father, align 8, !dbg !5966
  store %struct.loop* %23, %struct.loop** %act, align 8, !dbg !5967
  %24 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5968
  %header = getelementptr inbounds %struct.loop, %struct.loop* %24, i32 0, i32 2, !dbg !5970
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %header, align 8, !dbg !5970
  %26 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !5971
  %dest4 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !5972
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest4, align 8, !dbg !5972
  %cmp5 = icmp eq %struct.basic_block_def* %25, %27, !dbg !5973
  br i1 %cmp5, label %if.then6, label %if.end8, !dbg !5974

if.then6:                                         ; preds = %if.end
  %28 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5975
  %call7 = call %struct.loop* @loop_outer(%struct.loop* %28), !dbg !5976
  store %struct.loop* %call7, %struct.loop** %act, align 8, !dbg !5977
  br label %if.end8, !dbg !5978

if.end8:                                          ; preds = %if.then6, %if.end
  %29 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5979
  %30 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5981
  %call9 = call zeroext i8 @flow_loop_nested_p(%struct.loop* %29, %struct.loop* %30), !dbg !5982
  %tobool10 = icmp ne i8 %call9, 0, !dbg !5982
  br i1 %tobool10, label %if.then11, label %if.end12, !dbg !5983

if.then11:                                        ; preds = %if.end8
  %31 = load %struct.loop*, %struct.loop** %act, align 8, !dbg !5984
  store %struct.loop* %31, %struct.loop** %loop, align 8, !dbg !5985
  br label %if.end12, !dbg !5986

if.end12:                                         ; preds = %if.then11, %if.end8
  br label %for.inc, !dbg !5987

for.inc:                                          ; preds = %if.end12, %if.then
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !5954
  br label %for.cond, !dbg !5954, !llvm.loop !5988

for.end:                                          ; preds = %for.cond
  %32 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !5990
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5992
  %loop_father13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %33, i32 0, i32 3, !dbg !5993
  %34 = load %struct.loop*, %struct.loop** %loop_father13, align 8, !dbg !5993
  %cmp14 = icmp eq %struct.loop* %32, %34, !dbg !5994
  br i1 %cmp14, label %if.then15, label %if.end16, !dbg !5995

if.then15:                                        ; preds = %for.end
  store i8 0, i8* %retval, align 1, !dbg !5996
  br label %return, !dbg !5996

if.end16:                                         ; preds = %for.end
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5997
  call void @remove_bb_from_loops(%struct.basic_block_def* %35), !dbg !5998
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5999
  %37 = load %struct.loop*, %struct.loop** %loop, align 8, !dbg !6000
  call void @add_bb_to_loop(%struct.basic_block_def* %36, %struct.loop* %37), !dbg !6001
  store i8 1, i8* %retval, align 1, !dbg !6002
  br label %return, !dbg !6002

return:                                           ; preds = %if.end16, %if.then15
  %38 = load i8, i8* %retval, align 1, !dbg !6003
  ret i8 %38, !dbg !6003
}

declare dso_local %struct.loop* @find_common_loop(%struct.loop*, %struct.loop*) #2

declare dso_local zeroext i8 @flow_loop_nested_p(%struct.loop*, %struct.loop*) #2

declare dso_local %struct.VEC_edge_heap* @get_loop_exit_edges(%struct.loop*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_iterate(%struct.VEC_edge_base* %vec_, i32 %ix_, %struct.edge_def** %ptr) #0 !dbg !6004 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6007, metadata !DIExpression()), !dbg !6008
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6009, metadata !DIExpression()), !dbg !6008
  store %struct.edge_def** %ptr, %struct.edge_def*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %ptr.addr, metadata !6010, metadata !DIExpression()), !dbg !6008
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6011
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !6011
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6011

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6011
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6011
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !6011
  %3 = load i32, i32* %num, align 8, !dbg !6011
  %cmp = icmp ult i32 %1, %3, !dbg !6011
  br i1 %cmp, label %if.then, label %if.else, !dbg !6008

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6013
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !6013
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6013
  %idxprom = zext i32 %5 to i64, !dbg !6013
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6013
  %6 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !6013
  %7 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !6013
  store %struct.edge_def* %6, %struct.edge_def** %7, align 8, !dbg !6013
  store i32 1, i32* %retval, align 4, !dbg !6013
  br label %return, !dbg !6013

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.edge_def**, %struct.edge_def*** %ptr.addr, align 8, !dbg !6015
  store %struct.edge_def* null, %struct.edge_def** %8, align 8, !dbg !6015
  store i32 0, i32* %retval, align 4, !dbg !6015
  br label %return, !dbg !6015

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6008
  ret i32 %9, !dbg !6008
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_edge_heap_free(%struct.VEC_edge_heap** %vec_) #0 !dbg !6017 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !6020, metadata !DIExpression()), !dbg !6021
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6022
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !6022
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !6022
  br i1 %tobool, label %if.then, label %if.end, !dbg !6021

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6022
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !6022
  %4 = bitcast %struct.VEC_edge_heap* %3 to i8*, !dbg !6022
  call void @free(i8* %4), !dbg !6022
  br label %if.end, !dbg !6022

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6021
  store %struct.VEC_edge_heap* null, %struct.VEC_edge_heap** %5, align 8, !dbg !6021
  ret void, !dbg !6021
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_gc_safe_push(%struct.VEC_loop_p_gc** %vec_, %struct.loop* %obj_) #0 !dbg !6024 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_gc**, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  store %struct.VEC_loop_p_gc** %vec_, %struct.VEC_loop_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_gc*** %vec_.addr, metadata !6028, metadata !DIExpression()), !dbg !6029
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !6030, metadata !DIExpression()), !dbg !6029
  %0 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6029
  %call = call i32 @VEC_loop_p_gc_reserve(%struct.VEC_loop_p_gc** %0, i32 1), !dbg !6029
  %1 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6029
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %1, align 8, !dbg !6029
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !6029
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6029

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6029
  %4 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %3, align 8, !dbg !6029
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %4, i32 0, i32 0, !dbg !6029
  br label %cond.end, !dbg !6029

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6029

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6029
  %5 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !6029
  %call1 = call %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %cond, %struct.loop* %5), !dbg !6029
  ret %struct.loop** %call1, !dbg !6029
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_gc_reserve(%struct.VEC_loop_p_gc** %vec_, i32 %alloc_) #0 !dbg !6031 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_gc**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_loop_p_gc** %vec_, %struct.VEC_loop_p_gc*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_gc*** %vec_.addr, metadata !6034, metadata !DIExpression()), !dbg !6035
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6036, metadata !DIExpression()), !dbg !6035
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6037, metadata !DIExpression()), !dbg !6035
  %0 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6035
  %1 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %0, align 8, !dbg !6035
  %tobool = icmp ne %struct.VEC_loop_p_gc* %1, null, !dbg !6035
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6035

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6035
  %3 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %2, align 8, !dbg !6035
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %3, i32 0, i32 0, !dbg !6035
  br label %cond.end, !dbg !6035

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6035

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6035
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6035
  %call = call i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %cond, i32 %4), !dbg !6035
  %tobool1 = icmp ne i32 %call, 0, !dbg !6035
  %lnot = xor i1 %tobool1, true, !dbg !6035
  %lnot.ext = zext i1 %lnot to i32, !dbg !6035
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6035
  %5 = load i32, i32* %extend, align 4, !dbg !6038
  %tobool2 = icmp ne i32 %5, 0, !dbg !6038
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6035

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6038
  %7 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %6, align 8, !dbg !6038
  %8 = bitcast %struct.VEC_loop_p_gc* %7 to i8*, !dbg !6038
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6038
  %call3 = call i8* @vec_gc_p_reserve(i8* %8, i32 %9), !dbg !6038
  %10 = bitcast i8* %call3 to %struct.VEC_loop_p_gc*, !dbg !6038
  %11 = load %struct.VEC_loop_p_gc**, %struct.VEC_loop_p_gc*** %vec_.addr, align 8, !dbg !6038
  store %struct.VEC_loop_p_gc* %10, %struct.VEC_loop_p_gc** %11, align 8, !dbg !6038
  br label %if.end, !dbg !6038

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6035
  ret i32 %12, !dbg !6035
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop** @VEC_loop_p_base_quick_push(%struct.VEC_loop_p_base* %vec_, %struct.loop* %obj_) #0 !dbg !6040 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %obj_.addr = alloca %struct.loop*, align 8
  %slot_ = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6044, metadata !DIExpression()), !dbg !6045
  store %struct.loop* %obj_, %struct.loop** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop** %obj_.addr, metadata !6046, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata %struct.loop*** %slot_, metadata !6047, metadata !DIExpression()), !dbg !6045
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6045
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %0, i32 0, i32 0, !dbg !6045
  %1 = load i32, i32* %num, align 8, !dbg !6045
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6045
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !6045
  %3 = load i32, i32* %alloc, align 4, !dbg !6045
  %cmp = icmp ult i32 %1, %3, !dbg !6045
  %conv = zext i1 %cmp to i32, !dbg !6045
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6045
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !6045
  %5 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6045
  %num1 = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %5, i32 0, i32 0, !dbg !6045
  %6 = load i32, i32* %num1, align 8, !dbg !6045
  %inc = add i32 %6, 1, !dbg !6045
  store i32 %inc, i32* %num1, align 8, !dbg !6045
  %idxprom = zext i32 %6 to i64, !dbg !6045
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6045
  store %struct.loop** %arrayidx, %struct.loop*** %slot_, align 8, !dbg !6045
  %7 = load %struct.loop*, %struct.loop** %obj_.addr, align 8, !dbg !6045
  %8 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !6045
  store %struct.loop* %7, %struct.loop** %8, align 8, !dbg !6045
  %9 = load %struct.loop**, %struct.loop*** %slot_, align 8, !dbg !6045
  ret %struct.loop** %9, !dbg !6045
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_space(%struct.VEC_loop_p_base* %vec_, i32 %alloc_) #0 !dbg !6048 {
entry:
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6051, metadata !DIExpression()), !dbg !6052
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6053, metadata !DIExpression()), !dbg !6052
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6052
  %cmp = icmp sge i32 %0, 0, !dbg !6052
  %conv = zext i1 %cmp to i32, !dbg !6052
  %1 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6052
  %tobool = icmp ne %struct.VEC_loop_p_base* %1, null, !dbg !6052
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6052

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6052
  %alloc = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 1, !dbg !6052
  %3 = load i32, i32* %alloc, align 4, !dbg !6052
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6052
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 0, !dbg !6052
  %5 = load i32, i32* %num, align 8, !dbg !6052
  %sub = sub i32 %3, %5, !dbg !6052
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6052
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6052
  %conv2 = zext i1 %cmp1 to i32, !dbg !6052
  br label %cond.end, !dbg !6052

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6052
  %tobool3 = icmp ne i32 %7, 0, !dbg !6052
  %lnot = xor i1 %tobool3, true, !dbg !6052
  %lnot.ext = zext i1 %lnot to i32, !dbg !6052
  br label %cond.end, !dbg !6052

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6052
  ret i32 %cond, !dbg !6052
}

declare dso_local i8* @vec_gc_p_reserve(i8*, i32) #2

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_d* @bb_seq(%struct.basic_block_def* %bb) #0 !dbg !6054 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6057, metadata !DIExpression()), !dbg !6058
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6059
  %flags = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 13, !dbg !6060
  %1 = load i32, i32* %flags, align 8, !dbg !6060
  %and = and i32 %1, 512, !dbg !6061
  %tobool = icmp ne i32 %and, 0, !dbg !6061
  br i1 %tobool, label %cond.false, label %land.lhs.true, !dbg !6062

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6063
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6064
  %gimple = bitcast %union.basic_block_il_dependent* %il to %struct.gimple_bb_info**, !dbg !6065
  %3 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple, align 8, !dbg !6065
  %tobool1 = icmp ne %struct.gimple_bb_info* %3, null, !dbg !6063
  br i1 %tobool1, label %cond.true, label %cond.false, !dbg !6066

cond.true:                                        ; preds = %land.lhs.true
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6067
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !6068
  %gimple3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.gimple_bb_info**, !dbg !6069
  %5 = load %struct.gimple_bb_info*, %struct.gimple_bb_info** %gimple3, align 8, !dbg !6069
  %seq = getelementptr inbounds %struct.gimple_bb_info, %struct.gimple_bb_info* %5, i32 0, i32 0, !dbg !6070
  %6 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %seq, align 8, !dbg !6070
  br label %cond.end, !dbg !6066

cond.false:                                       ; preds = %land.lhs.true, %entry
  br label %cond.end, !dbg !6066

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_d* [ %6, %cond.true ], [ null, %cond.false ], !dbg !6066
  ret %struct.gimple_seq_d* %cond, !dbg !6071
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.gimple_seq_node_d* @gimple_seq_last(%struct.gimple_seq_d* %s) #0 !dbg !6072 {
entry:
  %s.addr = alloca %struct.gimple_seq_d*, align 8
  store %struct.gimple_seq_d* %s, %struct.gimple_seq_d** %s.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.gimple_seq_d** %s.addr, metadata !6078, metadata !DIExpression()), !dbg !6079
  %0 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6080
  %tobool = icmp ne %struct.gimple_seq_d* %0, null, !dbg !6080
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6080

cond.true:                                        ; preds = %entry
  %1 = load %struct.gimple_seq_d*, %struct.gimple_seq_d** %s.addr, align 8, !dbg !6081
  %last = getelementptr inbounds %struct.gimple_seq_d, %struct.gimple_seq_d* %1, i32 0, i32 1, !dbg !6082
  %2 = load %struct.gimple_seq_node_d*, %struct.gimple_seq_node_d** %last, align 8, !dbg !6082
  br label %cond.end, !dbg !6080

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6080

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.gimple_seq_node_d* [ %2, %cond.true ], [ null, %cond.false ], !dbg !6080
  ret %struct.gimple_seq_node_d* %cond, !dbg !6083
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node* @gimple_op(%union.gimple_statement_d* %gs, i32 %i) #0 !dbg !6084 {
entry:
  %retval = alloca %union.tree_node*, align 8
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6091
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6093
  %tobool = icmp ne i8 %call, 0, !dbg !6093
  br i1 %tobool, label %if.then, label %if.else, !dbg !6094

if.then:                                          ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6095
  %call1 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %1), !dbg !6097
  %2 = load i32, i32* %i.addr, align 4, !dbg !6098
  %idxprom = zext i32 %2 to i64, !dbg !6097
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call1, i64 %idxprom, !dbg !6097
  %3 = load %union.tree_node*, %union.tree_node** %arrayidx, align 8, !dbg !6097
  store %union.tree_node* %3, %union.tree_node** %retval, align 8, !dbg !6099
  br label %return, !dbg !6099

if.else:                                          ; preds = %entry
  store %union.tree_node* null, %union.tree_node** %retval, align 8, !dbg !6100
  br label %return, !dbg !6100

return:                                           ; preds = %if.else, %if.then
  %4 = load %union.tree_node*, %union.tree_node** %retval, align 8, !dbg !6101
  ret %union.tree_node* %4, !dbg !6101
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %g) #0 !dbg !6102 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6105, metadata !DIExpression()), !dbg !6106
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6107
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6108
  %cmp = icmp uge i32 %call, 1, !dbg !6109
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !6110

land.rhs:                                         ; preds = %entry
  %1 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6111
  %call1 = call i32 @gimple_code(%union.gimple_statement_d* %1), !dbg !6112
  %cmp2 = icmp ule i32 %call1, 9, !dbg !6113
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %2 = phi i1 [ false, %entry ], [ %cmp2, %land.rhs ], !dbg !6114
  %land.ext = zext i1 %2 to i32, !dbg !6110
  %conv = trunc i32 %land.ext to i8, !dbg !6108
  ret i8 %conv, !dbg !6115
}

; Function Attrs: noinline nounwind uwtable
define internal %union.tree_node** @gimple_ops(%union.gimple_statement_d* %gs) #0 !dbg !6116 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %off = alloca i64, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6119, metadata !DIExpression()), !dbg !6120
  call void @llvm.dbg.declare(metadata i64* %off, metadata !6121, metadata !DIExpression()), !dbg !6122
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6123
  %call = call i32 @gimple_statement_structure(%union.gimple_statement_d* %0), !dbg !6124
  %idxprom = zext i32 %call to i64, !dbg !6125
  %arrayidx = getelementptr inbounds [0 x i64], [0 x i64]* @gimple_ops_offset_, i64 0, i64 %idxprom, !dbg !6125
  %1 = load i64, i64* %arrayidx, align 8, !dbg !6125
  store i64 %1, i64* %off, align 8, !dbg !6126
  %2 = load i64, i64* %off, align 8, !dbg !6127
  %cmp = icmp ne i64 %2, 0, !dbg !6127
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6127

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 1622, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6127
  br label %cond.end, !dbg !6127

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6127

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6127
  %3 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6128
  %4 = bitcast %union.gimple_statement_d* %3 to i8*, !dbg !6129
  %5 = load i64, i64* %off, align 8, !dbg !6130
  %add.ptr = getelementptr inbounds i8, i8* %4, i64 %5, !dbg !6131
  %6 = bitcast i8* %add.ptr to %union.tree_node**, !dbg !6132
  ret %union.tree_node** %6, !dbg !6133
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_code(%union.gimple_statement_d* %g) #0 !dbg !6134 {
entry:
  %g.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %g, %union.gimple_statement_d** %g.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %g.addr, metadata !6137, metadata !DIExpression()), !dbg !6138
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %g.addr, align 8, !dbg !6139
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6140
  %1 = bitcast %struct.gimple_statement_base* %gsbase to i32*, !dbg !6141
  %bf.load = load i32, i32* %1, align 8, !dbg !6141
  %bf.clear = and i32 %bf.load, 255, !dbg !6141
  ret i32 %bf.clear, !dbg !6142
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_statement_structure(%union.gimple_statement_d* %gs) #0 !dbg !6143 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6146, metadata !DIExpression()), !dbg !6147
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6148
  %call = call i32 @gimple_code(%union.gimple_statement_d* %0), !dbg !6149
  %call1 = call i32 @gss_for_code(i32 %call), !dbg !6150
  ret i32 %call1, !dbg !6151
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gss_for_code(i32 %code) #0 !dbg !6152 {
entry:
  %code.addr = alloca i32, align 4
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !6155, metadata !DIExpression()), !dbg !6156
  %0 = load i32, i32* %code.addr, align 4, !dbg !6157
  %idxprom = zext i32 %0 to i64, !dbg !6158
  %arrayidx = getelementptr inbounds [0 x i32], [0 x i32]* @gss_for_code_, i64 0, i64 %idxprom, !dbg !6158
  %1 = load i32, i32* %arrayidx, align 4, !dbg !6158
  ret i32 %1, !dbg !6159
}

; Function Attrs: noinline nounwind uwtable
define internal void @gimple_set_op(%union.gimple_statement_d* %gs, i32 %i, %union.tree_node* %op) #0 !dbg !6160 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  %i.addr = alloca i32, align 4
  %op.addr = alloca %union.tree_node*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6163, metadata !DIExpression()), !dbg !6164
  store i32 %i, i32* %i.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %i.addr, metadata !6165, metadata !DIExpression()), !dbg !6166
  store %union.tree_node* %op, %union.tree_node** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %union.tree_node** %op.addr, metadata !6167, metadata !DIExpression()), !dbg !6168
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6169
  %call = call zeroext i8 @gimple_has_ops(%union.gimple_statement_d* %0), !dbg !6169
  %conv = zext i8 %call to i32, !dbg !6169
  %tobool = icmp ne i32 %conv, 0, !dbg !6169
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !6169

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %i.addr, align 4, !dbg !6169
  %2 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6169
  %call1 = call i32 @gimple_num_ops(%union.gimple_statement_d* %2), !dbg !6169
  %cmp = icmp ult i32 %1, %call1, !dbg !6169
  br i1 %cmp, label %cond.false, label %cond.true, !dbg !6169

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i32 1665, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0)), !dbg !6169
  br label %cond.end, !dbg !6169

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !6169

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !6169
  %3 = load %union.tree_node*, %union.tree_node** %op.addr, align 8, !dbg !6170
  %4 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6171
  %call3 = call %union.tree_node** @gimple_ops(%union.gimple_statement_d* %4), !dbg !6172
  %5 = load i32, i32* %i.addr, align 4, !dbg !6173
  %idxprom = zext i32 %5 to i64, !dbg !6172
  %arrayidx = getelementptr inbounds %union.tree_node*, %union.tree_node** %call3, i64 %idxprom, !dbg !6172
  store %union.tree_node* %3, %union.tree_node** %arrayidx, align 8, !dbg !6174
  ret void, !dbg !6175
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @gimple_num_ops(%union.gimple_statement_d* %gs) #0 !dbg !6176 {
entry:
  %gs.addr = alloca %union.gimple_statement_d*, align 8
  store %union.gimple_statement_d* %gs, %union.gimple_statement_d** %gs.addr, align 8
  call void @llvm.dbg.declare(metadata %union.gimple_statement_d** %gs.addr, metadata !6179, metadata !DIExpression()), !dbg !6180
  %0 = load %union.gimple_statement_d*, %union.gimple_statement_d** %gs.addr, align 8, !dbg !6181
  %gsbase = bitcast %union.gimple_statement_d* %0 to %struct.gimple_statement_base*, !dbg !6182
  %num_ops = getelementptr inbounds %struct.gimple_statement_base, %struct.gimple_statement_base* %gsbase, i32 0, i32 3, !dbg !6183
  %1 = load i32, i32* %num_ops, align 4, !dbg !6183
  ret i32 %1, !dbg !6184
}

declare dso_local void @remove_edge(%struct.edge_def*) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_heap_reserve(%struct.VEC_edge_heap** %vec_, i32 %alloc_) #0 !dbg !6185 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_edge_heap** %vec_, %struct.VEC_edge_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_heap*** %vec_.addr, metadata !6188, metadata !DIExpression()), !dbg !6189
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6190, metadata !DIExpression()), !dbg !6189
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !6191, metadata !DIExpression()), !dbg !6189
  %0 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6189
  %1 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %0, align 8, !dbg !6189
  %tobool = icmp ne %struct.VEC_edge_heap* %1, null, !dbg !6189
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6189

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6189
  %3 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %2, align 8, !dbg !6189
  %base = getelementptr inbounds %struct.VEC_edge_heap, %struct.VEC_edge_heap* %3, i32 0, i32 0, !dbg !6189
  br label %cond.end, !dbg !6189

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6189

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6189
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !6189
  %call = call i32 @VEC_edge_base_space(%struct.VEC_edge_base* %cond, i32 %4), !dbg !6189
  %tobool1 = icmp ne i32 %call, 0, !dbg !6189
  %lnot = xor i1 %tobool1, true, !dbg !6189
  %lnot.ext = zext i1 %lnot to i32, !dbg !6189
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !6189
  %5 = load i32, i32* %extend, align 4, !dbg !6192
  %tobool2 = icmp ne i32 %5, 0, !dbg !6192
  br i1 %tobool2, label %if.then, label %if.end, !dbg !6189

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6192
  %7 = load %struct.VEC_edge_heap*, %struct.VEC_edge_heap** %6, align 8, !dbg !6192
  %8 = bitcast %struct.VEC_edge_heap* %7 to i8*, !dbg !6192
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !6192
  %call3 = call i8* @vec_heap_p_reserve(i8* %8, i32 %9), !dbg !6192
  %10 = bitcast i8* %call3 to %struct.VEC_edge_heap*, !dbg !6192
  %11 = load %struct.VEC_edge_heap**, %struct.VEC_edge_heap*** %vec_.addr, align 8, !dbg !6192
  store %struct.VEC_edge_heap* %10, %struct.VEC_edge_heap** %11, align 8, !dbg !6192
  br label %if.end, !dbg !6192

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !6189
  ret i32 %12, !dbg !6189
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def** @VEC_edge_base_quick_push(%struct.VEC_edge_base* %vec_, %struct.edge_def* %obj_) #0 !dbg !6194 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %obj_.addr = alloca %struct.edge_def*, align 8
  %slot_ = alloca %struct.edge_def**, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6198, metadata !DIExpression()), !dbg !6199
  store %struct.edge_def* %obj_, %struct.edge_def** %obj_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %obj_.addr, metadata !6200, metadata !DIExpression()), !dbg !6199
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %slot_, metadata !6201, metadata !DIExpression()), !dbg !6199
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6199
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %0, i32 0, i32 0, !dbg !6199
  %1 = load i32, i32* %num, align 8, !dbg !6199
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6199
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !6199
  %3 = load i32, i32* %alloc, align 4, !dbg !6199
  %cmp = icmp ult i32 %1, %3, !dbg !6199
  %conv = zext i1 %cmp to i32, !dbg !6199
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6199
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 2, !dbg !6199
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6199
  %num1 = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 0, !dbg !6199
  %6 = load i32, i32* %num1, align 8, !dbg !6199
  %inc = add i32 %6, 1, !dbg !6199
  store i32 %inc, i32* %num1, align 8, !dbg !6199
  %idxprom = zext i32 %6 to i64, !dbg !6199
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !6199
  store %struct.edge_def** %arrayidx, %struct.edge_def*** %slot_, align 8, !dbg !6199
  %7 = load %struct.edge_def*, %struct.edge_def** %obj_.addr, align 8, !dbg !6199
  %8 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !6199
  store %struct.edge_def* %7, %struct.edge_def** %8, align 8, !dbg !6199
  %9 = load %struct.edge_def**, %struct.edge_def*** %slot_, align 8, !dbg !6199
  ret %struct.edge_def** %9, !dbg !6199
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_space(%struct.VEC_edge_base* %vec_, i32 %alloc_) #0 !dbg !6202 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !6205, metadata !DIExpression()), !dbg !6206
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6207, metadata !DIExpression()), !dbg !6206
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6206
  %cmp = icmp sge i32 %0, 0, !dbg !6206
  %conv = zext i1 %cmp to i32, !dbg !6206
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6206
  %tobool = icmp ne %struct.VEC_edge_base* %1, null, !dbg !6206
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6206

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6206
  %alloc = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 1, !dbg !6206
  %3 = load i32, i32* %alloc, align 4, !dbg !6206
  %4 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !6206
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %4, i32 0, i32 0, !dbg !6206
  %5 = load i32, i32* %num, align 8, !dbg !6206
  %sub = sub i32 %3, %5, !dbg !6206
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !6206
  %cmp1 = icmp uge i32 %sub, %6, !dbg !6206
  %conv2 = zext i1 %cmp1 to i32, !dbg !6206
  br label %cond.end, !dbg !6206

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !6206
  %tobool3 = icmp ne i32 %7, 0, !dbg !6206
  %lnot = xor i1 %tobool3, true, !dbg !6206
  %lnot.ext = zext i1 %lnot to i32, !dbg !6206
  br label %cond.end, !dbg !6206

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !6206
  ret i32 %cond, !dbg !6206
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_int_heap* @VEC_int_heap_alloc(i32 %alloc_) #0 !dbg !6208 {
entry:
  %alloc_.addr = alloca i32, align 4
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !6211, metadata !DIExpression()), !dbg !6212
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !6212
  %call = call i8* @vec_heap_o_reserve_exact(i8* null, i32 %0, i64 8, i64 4), !dbg !6212
  %1 = bitcast i8* %call to %struct.VEC_int_heap*, !dbg !6212
  ret %struct.VEC_int_heap* %1, !dbg !6212
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_loop_p_base_iterate(%struct.VEC_loop_p_base* %vec_, i32 %ix_, %struct.loop** %ptr) #0 !dbg !6213 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_loop_p_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca %struct.loop**, align 8
  store %struct.VEC_loop_p_base* %vec_, %struct.VEC_loop_p_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_loop_p_base** %vec_.addr, metadata !6216, metadata !DIExpression()), !dbg !6217
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6218, metadata !DIExpression()), !dbg !6217
  store %struct.loop** %ptr, %struct.loop*** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.loop*** %ptr.addr, metadata !6219, metadata !DIExpression()), !dbg !6217
  %0 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6220
  %tobool = icmp ne %struct.VEC_loop_p_base* %0, null, !dbg !6220
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6220

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6220
  %2 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6220
  %num = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %2, i32 0, i32 0, !dbg !6220
  %3 = load i32, i32* %num, align 8, !dbg !6220
  %cmp = icmp ult i32 %1, %3, !dbg !6220
  br i1 %cmp, label %if.then, label %if.else, !dbg !6217

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_loop_p_base*, %struct.VEC_loop_p_base** %vec_.addr, align 8, !dbg !6222
  %vec = getelementptr inbounds %struct.VEC_loop_p_base, %struct.VEC_loop_p_base* %4, i32 0, i32 2, !dbg !6222
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6222
  %idxprom = zext i32 %5 to i64, !dbg !6222
  %arrayidx = getelementptr inbounds [1 x %struct.loop*], [1 x %struct.loop*]* %vec, i64 0, i64 %idxprom, !dbg !6222
  %6 = load %struct.loop*, %struct.loop** %arrayidx, align 8, !dbg !6222
  %7 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !6222
  store %struct.loop* %6, %struct.loop** %7, align 8, !dbg !6222
  store i32 1, i32* %retval, align 4, !dbg !6222
  br label %return, !dbg !6222

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load %struct.loop**, %struct.loop*** %ptr.addr, align 8, !dbg !6224
  store %struct.loop* null, %struct.loop** %8, align 8, !dbg !6224
  store i32 0, i32* %retval, align 4, !dbg !6224
  br label %return, !dbg !6224

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6217
  ret i32 %9, !dbg !6217
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !6226 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6230, metadata !DIExpression()), !dbg !6231
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !6232, metadata !DIExpression()), !dbg !6231
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !6233, metadata !DIExpression()), !dbg !6231
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6231
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !6231
  %1 = load i32, i32* %num, align 4, !dbg !6231
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6231
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !6231
  %3 = load i32, i32* %alloc, align 4, !dbg !6231
  %cmp = icmp ult i32 %1, %3, !dbg !6231
  %conv = zext i1 %cmp to i32, !dbg !6231
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6231
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6231
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6231
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !6231
  %6 = load i32, i32* %num1, align 4, !dbg !6231
  %inc = add i32 %6, 1, !dbg !6231
  store i32 %inc, i32* %num1, align 4, !dbg !6231
  %idxprom = zext i32 %6 to i64, !dbg !6231
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6231
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !6231
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !6231
  %8 = load i32*, i32** %slot_, align 8, !dbg !6231
  store i32 %7, i32* %8, align 4, !dbg !6231
  %9 = load i32*, i32** %slot_, align 8, !dbg !6231
  ret i32* %9, !dbg !6231
}

declare dso_local i8* @vec_heap_o_reserve_exact(i8*, i32, i64, i64) #2

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !6234 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !6239, metadata !DIExpression()), !dbg !6240
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !6241, metadata !DIExpression()), !dbg !6240
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !6242, metadata !DIExpression()), !dbg !6240
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6243
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !6243
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !6243

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !6243
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6243
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !6243
  %3 = load i32, i32* %num, align 4, !dbg !6243
  %cmp = icmp ult i32 %1, %3, !dbg !6243
  br i1 %cmp, label %if.then, label %if.else, !dbg !6240

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !6245
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !6245
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !6245
  %idxprom = zext i32 %5 to i64, !dbg !6245
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !6245
  %6 = load i32, i32* %arrayidx, align 4, !dbg !6245
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !6245
  store i32 %6, i32* %7, align 4, !dbg !6245
  store i32 1, i32* %retval, align 4, !dbg !6245
  br label %return, !dbg !6245

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !6247
  store i32 0, i32* %8, align 4, !dbg !6247
  store i32 0, i32* %retval, align 4, !dbg !6247
  br label %return, !dbg !6247

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !6240
  ret i32 %9, !dbg !6240
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.loop* @get_loop(i32 %num) #0 !dbg !6249 {
entry:
  %num.addr = alloca i32, align 4
  store i32 %num, i32* %num.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %num.addr, metadata !6252, metadata !DIExpression()), !dbg !6253
  %0 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6254
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %0, i64 0, !dbg !6254
  %x_current_loops = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 4, !dbg !6254
  %1 = load %struct.loops*, %struct.loops** %x_current_loops, align 8, !dbg !6254
  %larray = getelementptr inbounds %struct.loops, %struct.loops* %1, i32 0, i32 1, !dbg !6254
  %2 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray, align 8, !dbg !6254
  %tobool = icmp ne %struct.VEC_loop_p_gc* %2, null, !dbg !6254
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !6254

cond.true:                                        ; preds = %entry
  %3 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !6254
  %add.ptr1 = getelementptr inbounds %struct.function, %struct.function* %3, i64 0, !dbg !6254
  %x_current_loops2 = getelementptr inbounds %struct.function, %struct.function* %add.ptr1, i32 0, i32 4, !dbg !6254
  %4 = load %struct.loops*, %struct.loops** %x_current_loops2, align 8, !dbg !6254
  %larray3 = getelementptr inbounds %struct.loops, %struct.loops* %4, i32 0, i32 1, !dbg !6254
  %5 = load %struct.VEC_loop_p_gc*, %struct.VEC_loop_p_gc** %larray3, align 8, !dbg !6254
  %base = getelementptr inbounds %struct.VEC_loop_p_gc, %struct.VEC_loop_p_gc* %5, i32 0, i32 0, !dbg !6254
  br label %cond.end, !dbg !6254

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !6254

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_loop_p_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !6254
  %6 = load i32, i32* %num.addr, align 4, !dbg !6254
  %call = call %struct.loop* @VEC_loop_p_base_index(%struct.VEC_loop_p_base* %cond, i32 %6), !dbg !6254
  ret %struct.loop* %call, !dbg !6255
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !6256 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !6260, metadata !DIExpression()), !dbg !6261
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6262
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !6262
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !6262
  br i1 %tobool, label %if.then, label %if.end, !dbg !6261

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6262
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !6262
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !6262
  call void @free(i8* %4), !dbg !6262
  br label %if.end, !dbg !6262

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !6261
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !6261
  ret void, !dbg !6261
}

declare dso_local void @lv_add_condition_to_bb(%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i8*) #2

declare dso_local i32 @current_ir_type() #2

declare dso_local void @lv_adjust_loop_header_phi(%struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.edge_def*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!2069, !2070, !2071}
!llvm.ident = !{!2072}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "mfb_kj_edge", scope: !2, file: !3, line: 1296, type: !665, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !646, globals: !2068, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "cfgloopmanip.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !15, !143, !149, !154, !349, !354, !372, !379, !386, !390, !394, !404, !410, !424, !428, !571, !576, !614, !640}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !6, line: 31, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12, !13, !14}
!9 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!13 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!14 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!15 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !16, line: 7, baseType: !7, size: 32, elements: !17)
!16 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!17 = !{!18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142}
!18 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!19 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!20 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!21 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!22 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!23 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!24 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!25 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!26 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!27 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!28 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!29 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!30 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!31 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!32 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!33 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!34 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!35 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!36 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!37 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!38 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!39 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!40 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!41 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!42 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!43 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!44 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!45 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!46 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!47 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!48 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!49 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!50 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!51 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!52 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!53 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!54 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!55 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!56 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!57 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!58 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!59 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!60 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!61 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!62 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!63 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!64 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!65 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!66 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!67 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!68 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!69 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!70 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!71 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!72 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!73 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!74 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!75 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!76 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!77 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!78 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!79 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!80 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!81 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!82 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!83 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!84 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!85 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!86 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!87 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!88 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!89 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!90 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!91 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!92 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!93 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!94 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!95 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!96 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!97 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!98 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!99 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!100 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!101 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!102 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!103 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!104 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!105 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!106 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!107 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!108 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!109 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!110 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!111 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!112 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!113 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!114 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!115 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!116 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!117 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!118 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!119 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!120 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!121 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!122 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!123 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!124 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!125 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!126 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!127 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!128 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!129 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!130 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!131 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!132 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!133 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!134 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!135 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!136 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!137 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!138 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!139 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!140 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!141 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!142 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!143 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !144, line: 363, baseType: !7, size: 32, elements: !145)
!144 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!145 = !{!146, !147, !148}
!146 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!147 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!148 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!149 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !144, line: 355, baseType: !7, size: 32, elements: !150)
!150 = !{!151, !152, !153}
!151 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!152 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!153 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!154 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !155, line: 39, baseType: !7, size: 32, elements: !156)
!155 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!156 = !{!157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188, !189, !190, !191, !192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230, !231, !232, !233, !234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348}
!157 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!158 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!159 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!160 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!161 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!162 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!163 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!164 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!165 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!166 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!167 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!168 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!169 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!170 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!171 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!172 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!173 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!174 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!175 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!176 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!177 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!178 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!179 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!180 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!181 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!182 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!183 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!184 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!185 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!186 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!187 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!188 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!189 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!190 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!191 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!192 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!193 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!194 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!195 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!196 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!197 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!198 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!199 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!200 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!201 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!202 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!203 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!204 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!205 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!206 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!207 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!208 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!209 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!210 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!211 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!212 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!213 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!214 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!215 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!216 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!217 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!218 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!219 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!220 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!221 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!222 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!223 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!224 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!225 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!226 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!227 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!228 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!229 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!230 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!231 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!232 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!233 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!234 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!235 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!236 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!237 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!238 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!239 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!240 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!241 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!242 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!243 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!244 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!245 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!246 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!247 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!248 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!249 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!250 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!251 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!252 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!253 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!254 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!255 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!256 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!257 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!258 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!259 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!260 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!261 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!262 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!263 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!264 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!265 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!266 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!267 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!268 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!269 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!270 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!271 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!272 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!273 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!274 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!275 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!276 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!277 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!278 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!279 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!280 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!281 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!282 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!283 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!284 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!285 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!286 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!287 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!288 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!289 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!290 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!291 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!292 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!293 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!294 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!295 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!296 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!297 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!298 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!299 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!300 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!301 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!302 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!303 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!304 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!305 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!306 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!307 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!308 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!309 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!310 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!311 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!312 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!313 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!314 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!315 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!316 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!317 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!318 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!319 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!320 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!321 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!322 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!323 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!324 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!325 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!326 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!327 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!328 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!329 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!330 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!331 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!332 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!333 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!334 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!335 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!336 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!337 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!338 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!339 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!340 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!341 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!342 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!343 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!344 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!345 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!346 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!347 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!348 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!349 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !350, line: 474, baseType: !7, size: 32, elements: !351)
!350 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!351 = !{!352, !353}
!352 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!353 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!354 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !155, line: 280, baseType: !7, size: 32, elements: !355)
!355 = !{!356, !357, !358, !359, !360, !361, !362, !363, !364, !365, !366, !367, !368, !369, !370, !371}
!356 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!357 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!358 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!359 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!360 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!361 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!362 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!363 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!364 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!365 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!366 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!367 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!368 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!369 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!370 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!371 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!372 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !155, line: 1817, baseType: !7, size: 32, elements: !373)
!373 = !{!374, !375, !376, !377, !378}
!374 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!375 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!376 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!377 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!378 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!379 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !155, line: 1805, baseType: !7, size: 32, elements: !380)
!380 = !{!381, !382, !383, !384, !385}
!381 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!382 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!383 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!384 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!385 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!386 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !6, line: 91, baseType: !7, size: 32, elements: !387)
!387 = !{!388, !389}
!388 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!389 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !144, line: 912, baseType: !7, size: 32, elements: !391)
!391 = !{!392, !393}
!392 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!393 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!394 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 170, baseType: !7, size: 32, elements: !395)
!395 = !{!396, !397, !398, !399, !400, !401, !402, !403}
!396 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!397 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!398 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!399 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!400 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!401 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!402 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!403 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!404 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gsi_iterator_update", file: !405, line: 4603, baseType: !7, size: 32, elements: !406)
!405 = !DIFile(filename: "./gimple.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!406 = !{!407, !408, !409}
!407 = !DIEnumerator(name: "GSI_NEW_STMT", value: 0, isUnsigned: true)
!408 = !DIEnumerator(name: "GSI_SAME_STMT", value: 1, isUnsigned: true)
!409 = !DIEnumerator(name: "GSI_CONTINUE_LINKING", value: 2, isUnsigned: true)
!410 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !144, line: 295, baseType: !7, size: 32, elements: !411)
!411 = !{!412, !413, !414, !415, !416, !417, !418, !419, !420, !421, !422, !423}
!412 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!413 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!414 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!415 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!416 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!417 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!418 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!419 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!420 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!421 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!422 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!423 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!424 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !6, line: 259, baseType: !7, size: 32, elements: !425)
!425 = !{!426, !427}
!426 = !DIEnumerator(name: "CP_SIMPLE_PREHEADERS", value: 1, isUnsigned: true)
!427 = !DIEnumerator(name: "CP_FALLTHRU_PREHEADERS", value: 2, isUnsigned: true)
!428 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !429, line: 45, baseType: !7, size: 32, elements: !430)
!429 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!430 = !{!431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570}
!431 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!432 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!433 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!434 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!435 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!436 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!437 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!438 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!439 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!440 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!441 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!442 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!443 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!444 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!445 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!446 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!447 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!448 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!449 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!450 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!451 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!452 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!453 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!454 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!455 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!456 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!457 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!458 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!459 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!460 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!461 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!462 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!463 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!464 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!465 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!466 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!467 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!468 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!469 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!470 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!471 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!472 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!473 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!474 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!475 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!476 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!477 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!478 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!479 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!480 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!481 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!482 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!483 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!484 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!485 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!486 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!487 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!488 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!489 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!490 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!491 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!492 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!493 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!494 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!495 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!496 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!497 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!498 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!499 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!500 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!501 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!502 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!503 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!504 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!505 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!506 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!507 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!508 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!509 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!510 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!511 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!512 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!513 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!514 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!515 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!516 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!517 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!518 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!519 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!520 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!521 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!522 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!523 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!524 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!525 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!526 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!527 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!528 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!529 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!530 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!531 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!532 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!533 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!534 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!535 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!536 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!537 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!538 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!539 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!540 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!541 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!542 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!543 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!544 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!545 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!546 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!547 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!548 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!549 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!550 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!551 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!552 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!553 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!554 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!555 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!556 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!557 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!558 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!559 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!560 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!561 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!562 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!563 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!564 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!565 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!566 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!567 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!568 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!569 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!570 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!571 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "li_flags", file: !6, line: 498, baseType: !7, size: 32, elements: !572)
!572 = !{!573, !574, !575}
!573 = !DIEnumerator(name: "LI_INCLUDE_ROOT", value: 1, isUnsigned: true)
!574 = !DIEnumerator(name: "LI_FROM_INNERMOST", value: 2, isUnsigned: true)
!575 = !DIEnumerator(name: "LI_ONLY_INNERMOST", value: 4, isUnsigned: true)
!576 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_code", file: !405, line: 51, baseType: !7, size: 32, elements: !577)
!577 = !{!578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613}
!578 = !DIEnumerator(name: "GIMPLE_ERROR_MARK", value: 0, isUnsigned: true)
!579 = !DIEnumerator(name: "GIMPLE_COND", value: 1, isUnsigned: true)
!580 = !DIEnumerator(name: "GIMPLE_DEBUG", value: 2, isUnsigned: true)
!581 = !DIEnumerator(name: "GIMPLE_GOTO", value: 3, isUnsigned: true)
!582 = !DIEnumerator(name: "GIMPLE_LABEL", value: 4, isUnsigned: true)
!583 = !DIEnumerator(name: "GIMPLE_SWITCH", value: 5, isUnsigned: true)
!584 = !DIEnumerator(name: "GIMPLE_ASSIGN", value: 6, isUnsigned: true)
!585 = !DIEnumerator(name: "GIMPLE_ASM", value: 7, isUnsigned: true)
!586 = !DIEnumerator(name: "GIMPLE_CALL", value: 8, isUnsigned: true)
!587 = !DIEnumerator(name: "GIMPLE_RETURN", value: 9, isUnsigned: true)
!588 = !DIEnumerator(name: "GIMPLE_BIND", value: 10, isUnsigned: true)
!589 = !DIEnumerator(name: "GIMPLE_CATCH", value: 11, isUnsigned: true)
!590 = !DIEnumerator(name: "GIMPLE_EH_FILTER", value: 12, isUnsigned: true)
!591 = !DIEnumerator(name: "GIMPLE_EH_MUST_NOT_THROW", value: 13, isUnsigned: true)
!592 = !DIEnumerator(name: "GIMPLE_RESX", value: 14, isUnsigned: true)
!593 = !DIEnumerator(name: "GIMPLE_EH_DISPATCH", value: 15, isUnsigned: true)
!594 = !DIEnumerator(name: "GIMPLE_PHI", value: 16, isUnsigned: true)
!595 = !DIEnumerator(name: "GIMPLE_TRY", value: 17, isUnsigned: true)
!596 = !DIEnumerator(name: "GIMPLE_NOP", value: 18, isUnsigned: true)
!597 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_LOAD", value: 19, isUnsigned: true)
!598 = !DIEnumerator(name: "GIMPLE_OMP_ATOMIC_STORE", value: 20, isUnsigned: true)
!599 = !DIEnumerator(name: "GIMPLE_OMP_CONTINUE", value: 21, isUnsigned: true)
!600 = !DIEnumerator(name: "GIMPLE_OMP_CRITICAL", value: 22, isUnsigned: true)
!601 = !DIEnumerator(name: "GIMPLE_OMP_FOR", value: 23, isUnsigned: true)
!602 = !DIEnumerator(name: "GIMPLE_OMP_MASTER", value: 24, isUnsigned: true)
!603 = !DIEnumerator(name: "GIMPLE_OMP_ORDERED", value: 25, isUnsigned: true)
!604 = !DIEnumerator(name: "GIMPLE_OMP_PARALLEL", value: 26, isUnsigned: true)
!605 = !DIEnumerator(name: "GIMPLE_OMP_TASK", value: 27, isUnsigned: true)
!606 = !DIEnumerator(name: "GIMPLE_OMP_RETURN", value: 28, isUnsigned: true)
!607 = !DIEnumerator(name: "GIMPLE_OMP_SECTION", value: 29, isUnsigned: true)
!608 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS", value: 30, isUnsigned: true)
!609 = !DIEnumerator(name: "GIMPLE_OMP_SECTIONS_SWITCH", value: 31, isUnsigned: true)
!610 = !DIEnumerator(name: "GIMPLE_OMP_SINGLE", value: 32, isUnsigned: true)
!611 = !DIEnumerator(name: "GIMPLE_PREDICT", value: 33, isUnsigned: true)
!612 = !DIEnumerator(name: "GIMPLE_WITH_CLEANUP_EXPR", value: 34, isUnsigned: true)
!613 = !DIEnumerator(name: "LAST_AND_UNUSED_GIMPLE_CODE", value: 35, isUnsigned: true)
!614 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "gimple_statement_structure_enum", file: !405, line: 727, baseType: !7, size: 32, elements: !615)
!615 = !{!616, !617, !618, !619, !620, !621, !622, !623, !624, !625, !626, !627, !628, !629, !630, !631, !632, !633, !634, !635, !636, !637, !638, !639}
!616 = !DIEnumerator(name: "GSS_BASE", value: 0, isUnsigned: true)
!617 = !DIEnumerator(name: "GSS_WITH_OPS", value: 1, isUnsigned: true)
!618 = !DIEnumerator(name: "GSS_WITH_MEM_OPS_BASE", value: 2, isUnsigned: true)
!619 = !DIEnumerator(name: "GSS_WITH_MEM_OPS", value: 3, isUnsigned: true)
!620 = !DIEnumerator(name: "GSS_ASM", value: 4, isUnsigned: true)
!621 = !DIEnumerator(name: "GSS_BIND", value: 5, isUnsigned: true)
!622 = !DIEnumerator(name: "GSS_PHI", value: 6, isUnsigned: true)
!623 = !DIEnumerator(name: "GSS_TRY", value: 7, isUnsigned: true)
!624 = !DIEnumerator(name: "GSS_CATCH", value: 8, isUnsigned: true)
!625 = !DIEnumerator(name: "GSS_EH_FILTER", value: 9, isUnsigned: true)
!626 = !DIEnumerator(name: "GSS_EH_MNT", value: 10, isUnsigned: true)
!627 = !DIEnumerator(name: "GSS_EH_CTRL", value: 11, isUnsigned: true)
!628 = !DIEnumerator(name: "GSS_WCE", value: 12, isUnsigned: true)
!629 = !DIEnumerator(name: "GSS_OMP", value: 13, isUnsigned: true)
!630 = !DIEnumerator(name: "GSS_OMP_CRITICAL", value: 14, isUnsigned: true)
!631 = !DIEnumerator(name: "GSS_OMP_FOR", value: 15, isUnsigned: true)
!632 = !DIEnumerator(name: "GSS_OMP_PARALLEL", value: 16, isUnsigned: true)
!633 = !DIEnumerator(name: "GSS_OMP_TASK", value: 17, isUnsigned: true)
!634 = !DIEnumerator(name: "GSS_OMP_SECTIONS", value: 18, isUnsigned: true)
!635 = !DIEnumerator(name: "GSS_OMP_SINGLE", value: 19, isUnsigned: true)
!636 = !DIEnumerator(name: "GSS_OMP_CONTINUE", value: 20, isUnsigned: true)
!637 = !DIEnumerator(name: "GSS_OMP_ATOMIC_LOAD", value: 21, isUnsigned: true)
!638 = !DIEnumerator(name: "GSS_OMP_ATOMIC_STORE", value: 22, isUnsigned: true)
!639 = !DIEnumerator(name: "LAST_GSS_ENUM", value: 23, isUnsigned: true)
!640 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !641, line: 80, baseType: !7, size: 32, elements: !642)
!641 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!642 = !{!643, !644, !645}
!643 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!644 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!645 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!646 = !{!647, !7, !710, !988, !2038, !2039, !1240, !1303, !428, !2040, !763, !2043, !665, !1356, !686, !2048, !1332, !973, !2050, !648, !2055, !1368, !806}
!647 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !648, size: 64)
!648 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !641, line: 111, baseType: !649)
!649 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !650, size: 64)
!650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !144, line: 217, size: 832, elements: !651)
!651 = !{!652, !2005, !2006, !2007, !2008, !2012, !2013, !2014, !2032, !2033, !2034, !2035, !2036, !2037}
!652 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !650, file: !144, line: 219, baseType: !653, size: 64)
!653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !654, size: 64)
!654 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !144, line: 151, baseType: !655)
!655 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !144, line: 151, size: 128, elements: !656)
!656 = !{!657}
!657 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !655, file: !144, line: 151, baseType: !658, size: 128)
!658 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !144, line: 150, baseType: !659)
!659 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !144, line: 150, size: 128, elements: !660)
!660 = !{!661, !662, !663}
!661 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !659, file: !144, line: 150, baseType: !7, size: 32)
!662 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !659, file: !144, line: 150, baseType: !7, size: 32, offset: 32)
!663 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !659, file: !144, line: 150, baseType: !664, size: 64, offset: 64)
!664 = !DICompositeType(tag: DW_TAG_array_type, baseType: !665, size: 64, elements: !810)
!665 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !641, line: 108, baseType: !666)
!666 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !667, size: 64)
!667 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !144, line: 122, size: 512, elements: !668)
!668 = !{!669, !670, !671, !1997, !1998, !1999, !2000, !2001, !2002, !2003}
!669 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !667, file: !144, line: 124, baseType: !649, size: 64)
!670 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !667, file: !144, line: 125, baseType: !649, size: 64, offset: 64)
!671 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !667, file: !144, line: 131, baseType: !672, size: 64, offset: 128)
!672 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !144, line: 128, size: 64, elements: !673)
!673 = !{!674, !1996}
!674 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !672, file: !144, line: 129, baseType: !675, size: 64)
!675 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !641, line: 66, baseType: !676)
!676 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !677, size: 64)
!677 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !405, line: 143, size: 192, elements: !678)
!678 = !{!679, !1994, !1995}
!679 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !677, file: !405, line: 145, baseType: !680, size: 64)
!680 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq_node", file: !641, line: 69, baseType: !681)
!681 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !682, size: 64)
!682 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_node_d", file: !405, line: 136, size: 192, elements: !683)
!683 = !{!684, !1992, !1993}
!684 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !682, file: !405, line: 137, baseType: !685, size: 64)
!685 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !641, line: 58, baseType: !686)
!686 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !687, size: 64)
!687 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !405, line: 737, size: 768, elements: !688)
!688 = !{!689, !1839, !1849, !1855, !1860, !1865, !1872, !1878, !1884, !1889, !1903, !1908, !1914, !1919, !1929, !1934, !1950, !1957, !1964, !1970, !1975, !1981, !1987}
!689 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !687, file: !405, line: 738, baseType: !690, size: 256)
!690 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_base", file: !405, line: 271, size: 256, elements: !691)
!691 = !{!692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !707, !708, !709}
!692 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !690, file: !405, line: 274, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!693 = !DIDerivedType(tag: DW_TAG_member, name: "no_warning", scope: !690, file: !405, line: 277, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!694 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !690, file: !405, line: 281, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!695 = !DIDerivedType(tag: DW_TAG_member, name: "nontemporal_move", scope: !690, file: !405, line: 284, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!696 = !DIDerivedType(tag: DW_TAG_member, name: "plf", scope: !690, file: !405, line: 291, baseType: !7, size: 2, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!697 = !DIDerivedType(tag: DW_TAG_member, name: "modified", scope: !690, file: !405, line: 295, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!698 = !DIDerivedType(tag: DW_TAG_member, name: "has_volatile_ops", scope: !690, file: !405, line: 298, baseType: !7, size: 1, offset: 14, flags: DIFlagBitField, extraData: i64 0)
!699 = !DIDerivedType(tag: DW_TAG_member, name: "pad", scope: !690, file: !405, line: 301, baseType: !7, size: 1, offset: 15, flags: DIFlagBitField, extraData: i64 0)
!700 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !690, file: !405, line: 307, baseType: !7, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!701 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !690, file: !405, line: 312, baseType: !7, size: 32, offset: 32)
!702 = !DIDerivedType(tag: DW_TAG_member, name: "location", scope: !690, file: !405, line: 316, baseType: !703, size: 32, offset: 64)
!703 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !704, line: 58, baseType: !705)
!704 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!705 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !706, line: 44, baseType: !7)
!706 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!707 = !DIDerivedType(tag: DW_TAG_member, name: "num_ops", scope: !690, file: !405, line: 319, baseType: !7, size: 32, offset: 96)
!708 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !690, file: !405, line: 323, baseType: !649, size: 64, offset: 128)
!709 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !690, file: !405, line: 327, baseType: !710, size: 64, offset: 192)
!710 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !641, line: 56, baseType: !711)
!711 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !712, size: 64)
!712 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !155, line: 3371, size: 1792, elements: !713)
!713 = !{!714, !747, !753, !766, !785, !796, !801, !812, !818, !832, !840, !878, !1089, !1117, !1134, !1135, !1140, !1149, !1155, !1160, !1164, !1168, !1490, !1537, !1543, !1549, !1556, !1569, !1583, !1600, !1612, !1634, !1649, !1821}
!714 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !712, file: !155, line: 3372, baseType: !715, size: 64)
!715 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !155, line: 360, size: 64, elements: !716)
!716 = !{!717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746}
!717 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !715, file: !155, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!718 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !715, file: !155, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!719 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !715, file: !155, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!720 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !715, file: !155, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!721 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !715, file: !155, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!722 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !715, file: !155, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!723 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !715, file: !155, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!724 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !715, file: !155, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!725 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !715, file: !155, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!726 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !715, file: !155, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!727 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !715, file: !155, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!728 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !715, file: !155, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!729 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !715, file: !155, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!730 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !715, file: !155, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!731 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !715, file: !155, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!732 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !715, file: !155, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!733 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !715, file: !155, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!734 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !715, file: !155, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!735 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !715, file: !155, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!736 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !715, file: !155, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!737 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !715, file: !155, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!738 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !715, file: !155, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!739 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !715, file: !155, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!740 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !715, file: !155, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!741 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !715, file: !155, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!742 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !715, file: !155, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!743 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !715, file: !155, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!744 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !715, file: !155, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!745 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !715, file: !155, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!746 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !715, file: !155, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!747 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !712, file: !155, line: 3373, baseType: !748, size: 192)
!748 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !155, line: 402, size: 192, elements: !749)
!749 = !{!750, !751, !752}
!750 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !748, file: !155, line: 403, baseType: !715, size: 64)
!751 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !748, file: !155, line: 404, baseType: !710, size: 64, offset: 64)
!752 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !748, file: !155, line: 405, baseType: !710, size: 64, offset: 128)
!753 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !712, file: !155, line: 3374, baseType: !754, size: 320)
!754 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !155, line: 1384, size: 320, elements: !755)
!755 = !{!756, !757}
!756 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !754, file: !155, line: 1385, baseType: !748, size: 192)
!757 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !754, file: !155, line: 1386, baseType: !758, size: 128, offset: 192)
!758 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !759, line: 58, baseType: !760)
!759 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!760 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !759, line: 54, size: 128, elements: !761)
!761 = !{!762, !764}
!762 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !760, file: !759, line: 56, baseType: !763, size: 64)
!763 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!764 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !760, file: !759, line: 57, baseType: !765, size: 64, offset: 64)
!765 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!766 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !712, file: !155, line: 3375, baseType: !767, size: 256)
!767 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !155, line: 1397, size: 256, elements: !768)
!768 = !{!769, !770}
!769 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !767, file: !155, line: 1398, baseType: !748, size: 192)
!770 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !767, file: !155, line: 1399, baseType: !771, size: 64, offset: 192)
!771 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !772, size: 64)
!772 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !773, line: 52, size: 256, elements: !774)
!773 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!774 = !{!775, !776, !777, !778, !779, !780, !781}
!775 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !772, file: !773, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!776 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !772, file: !773, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!777 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !772, file: !773, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!778 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !772, file: !773, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!779 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !772, file: !773, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!780 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !772, file: !773, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!781 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !772, file: !773, line: 62, baseType: !782, size: 192, offset: 64)
!782 = !DICompositeType(tag: DW_TAG_array_type, baseType: !763, size: 192, elements: !783)
!783 = !{!784}
!784 = !DISubrange(count: 3)
!785 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !712, file: !155, line: 3376, baseType: !786, size: 256)
!786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !155, line: 1408, size: 256, elements: !787)
!787 = !{!788, !789}
!788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !786, file: !155, line: 1409, baseType: !748, size: 192)
!789 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !786, file: !155, line: 1410, baseType: !790, size: 64, offset: 192)
!790 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !791, size: 64)
!791 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !792, line: 27, size: 192, elements: !793)
!792 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!793 = !{!794, !795}
!794 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !791, file: !792, line: 29, baseType: !758, size: 128)
!795 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !791, file: !792, line: 30, baseType: !15, size: 32, offset: 128)
!796 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !712, file: !155, line: 3377, baseType: !797, size: 256)
!797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !155, line: 1437, size: 256, elements: !798)
!798 = !{!799, !800}
!799 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !797, file: !155, line: 1438, baseType: !748, size: 192)
!800 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !797, file: !155, line: 1439, baseType: !710, size: 64, offset: 192)
!801 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !712, file: !155, line: 3378, baseType: !802, size: 256)
!802 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !155, line: 1418, size: 256, elements: !803)
!803 = !{!804, !805, !807}
!804 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !802, file: !155, line: 1419, baseType: !748, size: 192)
!805 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !802, file: !155, line: 1420, baseType: !806, size: 32, offset: 192)
!806 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!807 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !802, file: !155, line: 1421, baseType: !808, size: 8, offset: 224)
!808 = !DICompositeType(tag: DW_TAG_array_type, baseType: !809, size: 8, elements: !810)
!809 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!810 = !{!811}
!811 = !DISubrange(count: 1)
!812 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !712, file: !155, line: 3379, baseType: !813, size: 320)
!813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !155, line: 1428, size: 320, elements: !814)
!814 = !{!815, !816, !817}
!815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !813, file: !155, line: 1429, baseType: !748, size: 192)
!816 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !813, file: !155, line: 1430, baseType: !710, size: 64, offset: 192)
!817 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !813, file: !155, line: 1431, baseType: !710, size: 64, offset: 256)
!818 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !712, file: !155, line: 3380, baseType: !819, size: 320)
!819 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !155, line: 1460, size: 320, elements: !820)
!820 = !{!821, !822}
!821 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !819, file: !155, line: 1461, baseType: !748, size: 192)
!822 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !819, file: !155, line: 1462, baseType: !823, size: 128, offset: 192)
!823 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !824, line: 31, size: 128, elements: !825)
!824 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!825 = !{!826, !830, !831}
!826 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !823, file: !824, line: 32, baseType: !827, size: 64)
!827 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !828, size: 64)
!828 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !829)
!829 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!830 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !823, file: !824, line: 33, baseType: !7, size: 32, offset: 64)
!831 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !823, file: !824, line: 34, baseType: !7, size: 32, offset: 96)
!832 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !712, file: !155, line: 3381, baseType: !833, size: 384)
!833 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !155, line: 2507, size: 384, elements: !834)
!834 = !{!835, !836, !837, !838, !839}
!835 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !833, file: !155, line: 2508, baseType: !748, size: 192)
!836 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !833, file: !155, line: 2509, baseType: !703, size: 32, offset: 192)
!837 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !833, file: !155, line: 2510, baseType: !7, size: 32, offset: 224)
!838 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !833, file: !155, line: 2511, baseType: !710, size: 64, offset: 256)
!839 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !833, file: !155, line: 2512, baseType: !710, size: 64, offset: 320)
!840 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !712, file: !155, line: 3382, baseType: !841, size: 896)
!841 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !155, line: 2652, size: 896, elements: !842)
!842 = !{!843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875}
!843 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !841, file: !155, line: 2653, baseType: !833, size: 384)
!844 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !841, file: !155, line: 2654, baseType: !710, size: 64, offset: 384)
!845 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !841, file: !155, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!846 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !841, file: !155, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!847 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !841, file: !155, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!848 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !841, file: !155, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!849 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !841, file: !155, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!850 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !841, file: !155, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!851 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !841, file: !155, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!852 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !841, file: !155, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!853 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !841, file: !155, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!854 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !841, file: !155, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!855 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !841, file: !155, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!856 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !841, file: !155, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!857 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !841, file: !155, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!858 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !841, file: !155, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!859 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !841, file: !155, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!860 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !841, file: !155, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!861 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !841, file: !155, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!862 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !841, file: !155, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!863 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !841, file: !155, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!864 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !841, file: !155, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!865 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !841, file: !155, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!866 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !841, file: !155, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!867 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !841, file: !155, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!868 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !841, file: !155, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!869 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !841, file: !155, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!870 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !841, file: !155, line: 2703, baseType: !7, size: 32, offset: 512)
!871 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !841, file: !155, line: 2705, baseType: !710, size: 64, offset: 576)
!872 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !841, file: !155, line: 2706, baseType: !710, size: 64, offset: 640)
!873 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !841, file: !155, line: 2707, baseType: !710, size: 64, offset: 704)
!874 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !841, file: !155, line: 2708, baseType: !710, size: 64, offset: 768)
!875 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !841, file: !155, line: 2711, baseType: !876, size: 64, offset: 832)
!876 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !877, size: 64)
!877 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !155, line: 2711, flags: DIFlagFwdDecl)
!878 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !712, file: !155, line: 3383, baseType: !879, size: 960)
!879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !155, line: 2756, size: 960, elements: !880)
!880 = !{!881, !882}
!881 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !879, file: !155, line: 2757, baseType: !841, size: 896)
!882 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !879, file: !155, line: 2758, baseType: !883, size: 64, offset: 896)
!883 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !641, line: 50, baseType: !884)
!884 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !885, size: 64)
!885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !429, line: 240, size: 384, elements: !886)
!886 = !{!887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897}
!887 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !885, file: !429, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!888 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !885, file: !429, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!889 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !885, file: !429, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!890 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !885, file: !429, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!891 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !885, file: !429, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!892 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !885, file: !429, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!893 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !885, file: !429, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!894 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !885, file: !429, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!895 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !885, file: !429, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!896 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !885, file: !429, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!897 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !885, file: !429, line: 321, baseType: !898, size: 320, offset: 64)
!898 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !429, line: 315, size: 320, elements: !899)
!899 = !{!900, !1022, !1024, !1087, !1088}
!900 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !898, file: !429, line: 316, baseType: !901, size: 64)
!901 = !DICompositeType(tag: DW_TAG_array_type, baseType: !902, size: 64, elements: !810)
!902 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !429, line: 183, baseType: !903)
!903 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !429, line: 166, size: 64, elements: !904)
!904 = !{!905, !906, !907, !910, !911, !919, !920, !932, !935, !997, !998, !999, !1012, !1019}
!905 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !903, file: !429, line: 168, baseType: !806, size: 32)
!906 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !903, file: !429, line: 169, baseType: !7, size: 32)
!907 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !903, file: !429, line: 170, baseType: !908, size: 64)
!908 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !909, size: 64)
!909 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !809)
!910 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !903, file: !429, line: 171, baseType: !883, size: 64)
!911 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !903, file: !429, line: 172, baseType: !912, size: 64)
!912 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !641, line: 53, baseType: !913)
!913 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !914, size: 64)
!914 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !429, line: 359, size: 128, elements: !915)
!915 = !{!916, !917}
!916 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !914, file: !429, line: 360, baseType: !806, size: 32)
!917 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !914, file: !429, line: 361, baseType: !918, size: 64, offset: 64)
!918 = !DICompositeType(tag: DW_TAG_array_type, baseType: !883, size: 64, elements: !810)
!919 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !903, file: !429, line: 173, baseType: !15, size: 32)
!920 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !903, file: !429, line: 174, baseType: !921, size: 32)
!921 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !429, line: 133, baseType: !922)
!922 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !429, line: 115, size: 32, elements: !923)
!923 = !{!924, !925, !926, !927, !928, !929, !930, !931}
!924 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !922, file: !429, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!925 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !922, file: !429, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!926 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !922, file: !429, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!927 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !922, file: !429, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!928 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !922, file: !429, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!929 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !922, file: !429, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!930 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !922, file: !429, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!931 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !922, file: !429, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!932 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !903, file: !429, line: 175, baseType: !933, size: 64)
!933 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !934, size: 64)
!934 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !429, line: 175, flags: DIFlagFwdDecl)
!935 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !903, file: !429, line: 176, baseType: !936, size: 64)
!936 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !937, size: 64)
!937 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !938, line: 75, size: 256, elements: !939)
!938 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!939 = !{!940, !954, !955, !956}
!940 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !937, file: !938, line: 76, baseType: !941, size: 64)
!941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !942, size: 64)
!942 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !938, line: 68, baseType: !943)
!943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !938, line: 63, size: 320, elements: !944)
!944 = !{!945, !947, !948, !949}
!945 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !943, file: !938, line: 64, baseType: !946, size: 64)
!946 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !943, size: 64)
!947 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !943, file: !938, line: 65, baseType: !946, size: 64, offset: 64)
!948 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !943, file: !938, line: 66, baseType: !7, size: 32, offset: 128)
!949 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !943, file: !938, line: 67, baseType: !950, size: 128, offset: 192)
!950 = !DICompositeType(tag: DW_TAG_array_type, baseType: !951, size: 128, elements: !952)
!951 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !938, line: 29, baseType: !763)
!952 = !{!953}
!953 = !DISubrange(count: 2)
!954 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !937, file: !938, line: 77, baseType: !941, size: 64, offset: 64)
!955 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !937, file: !938, line: 78, baseType: !7, size: 32, offset: 128)
!956 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !937, file: !938, line: 79, baseType: !957, size: 64, offset: 192)
!957 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !958, size: 64)
!958 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !938, line: 49, baseType: !959)
!959 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !938, line: 45, size: 832, elements: !960)
!960 = !{!961, !962, !963}
!961 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !959, file: !938, line: 46, baseType: !946, size: 64)
!962 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !959, file: !938, line: 47, baseType: !936, size: 64, offset: 64)
!963 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !959, file: !938, line: 48, baseType: !964, size: 704, offset: 128)
!964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !965, line: 164, size: 704, elements: !966)
!965 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!966 = !{!967, !968, !979, !980, !981, !982, !983, !984, !989, !993, !994, !995, !996}
!967 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !964, file: !965, line: 166, baseType: !765, size: 64)
!968 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !964, file: !965, line: 167, baseType: !969, size: 64, offset: 64)
!969 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !970, size: 64)
!970 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !965, line: 157, size: 192, elements: !971)
!971 = !{!972, !974, !975}
!972 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !970, file: !965, line: 159, baseType: !973, size: 64)
!973 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !809, size: 64)
!974 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !970, file: !965, line: 160, baseType: !969, size: 64, offset: 64)
!975 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !970, file: !965, line: 161, baseType: !976, size: 32, offset: 128)
!976 = !DICompositeType(tag: DW_TAG_array_type, baseType: !809, size: 32, elements: !977)
!977 = !{!978}
!978 = !DISubrange(count: 4)
!979 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !964, file: !965, line: 168, baseType: !973, size: 64, offset: 128)
!980 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !964, file: !965, line: 169, baseType: !973, size: 64, offset: 192)
!981 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !964, file: !965, line: 170, baseType: !973, size: 64, offset: 256)
!982 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !964, file: !965, line: 171, baseType: !765, size: 64, offset: 320)
!983 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !964, file: !965, line: 172, baseType: !806, size: 32, offset: 384)
!984 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !964, file: !965, line: 176, baseType: !985, size: 64, offset: 448)
!985 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !986, size: 64)
!986 = !DISubroutineType(types: !987)
!987 = !{!969, !988, !765}
!988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!989 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !964, file: !965, line: 177, baseType: !990, size: 64, offset: 512)
!990 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !991, size: 64)
!991 = !DISubroutineType(types: !992)
!992 = !{null, !988, !969}
!993 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !964, file: !965, line: 178, baseType: !988, size: 64, offset: 576)
!994 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !964, file: !965, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!995 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !964, file: !965, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!996 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !964, file: !965, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!997 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !903, file: !429, line: 177, baseType: !710, size: 64)
!998 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !903, file: !429, line: 178, baseType: !649, size: 64)
!999 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !903, file: !429, line: 179, baseType: !1000, size: 64)
!1000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1001, size: 64)
!1001 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !429, line: 150, baseType: !1002)
!1002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !429, line: 142, size: 320, elements: !1003)
!1003 = !{!1004, !1005, !1006, !1007, !1010, !1011}
!1004 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !1002, file: !429, line: 144, baseType: !710, size: 64)
!1005 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1002, file: !429, line: 145, baseType: !883, size: 64, offset: 64)
!1006 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1002, file: !429, line: 146, baseType: !883, size: 64, offset: 128)
!1007 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !1002, file: !429, line: 147, baseType: !1008, size: 32, offset: 192)
!1008 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !1009, line: 31, baseType: !806)
!1009 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1010 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1002, file: !429, line: 148, baseType: !7, size: 32, offset: 224)
!1011 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !1002, file: !429, line: 149, baseType: !829, size: 8, offset: 256)
!1012 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !903, file: !429, line: 180, baseType: !1013, size: 64)
!1013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1014, size: 64)
!1014 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !429, line: 162, baseType: !1015)
!1015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !429, line: 159, size: 128, elements: !1016)
!1016 = !{!1017, !1018}
!1017 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1015, file: !429, line: 160, baseType: !710, size: 64)
!1018 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1015, file: !429, line: 161, baseType: !765, size: 64, offset: 64)
!1019 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !903, file: !429, line: 181, baseType: !1020, size: 64)
!1020 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1021, size: 64)
!1021 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !429, line: 181, flags: DIFlagFwdDecl)
!1022 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !898, file: !429, line: 317, baseType: !1023, size: 64)
!1023 = !DICompositeType(tag: DW_TAG_array_type, baseType: !765, size: 64, elements: !810)
!1024 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !898, file: !429, line: 318, baseType: !1025, size: 320)
!1025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !429, line: 188, size: 320, elements: !1026)
!1026 = !{!1027, !1029, !1086}
!1027 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !1025, file: !429, line: 190, baseType: !1028, size: 192)
!1028 = !DICompositeType(tag: DW_TAG_array_type, baseType: !902, size: 192, elements: !783)
!1029 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1025, file: !429, line: 193, baseType: !1030, size: 64, offset: 192)
!1030 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1031, size: 64)
!1031 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !429, line: 206, size: 320, elements: !1032)
!1032 = !{!1033, !1071, !1072, !1073, !1085}
!1033 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !1031, file: !429, line: 208, baseType: !1034, size: 64)
!1034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1035, size: 64)
!1035 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !641, line: 62, baseType: !1036)
!1036 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !1037, line: 538, size: 256, elements: !1038)
!1037 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1038 = !{!1039, !1043, !1049, !1062}
!1039 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1036, file: !1037, line: 539, baseType: !1040, size: 32)
!1040 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !1037, line: 482, size: 32, elements: !1041)
!1041 = !{!1042}
!1042 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !1040, file: !1037, line: 484, baseType: !7, size: 32)
!1043 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !1036, file: !1037, line: 540, baseType: !1044, size: 192)
!1044 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !1037, line: 488, size: 192, elements: !1045)
!1045 = !{!1046, !1047, !1048}
!1046 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1044, file: !1037, line: 489, baseType: !1040, size: 32)
!1047 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1044, file: !1037, line: 492, baseType: !908, size: 64, offset: 64)
!1048 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1044, file: !1037, line: 496, baseType: !710, size: 64, offset: 128)
!1049 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !1036, file: !1037, line: 541, baseType: !1050, size: 256)
!1050 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !1037, line: 504, size: 256, elements: !1051)
!1051 = !{!1052, !1053, !1060, !1061}
!1052 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1050, file: !1037, line: 505, baseType: !1040, size: 32)
!1053 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1050, file: !1037, line: 509, baseType: !1054, size: 64, offset: 64)
!1054 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !1037, line: 501, baseType: !1055)
!1055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1056, size: 64)
!1056 = !DISubroutineType(types: !1057)
!1057 = !{null, !1058}
!1058 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1059, size: 64)
!1059 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!1060 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !1050, file: !1037, line: 510, baseType: !1058, size: 64, offset: 128)
!1061 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1050, file: !1037, line: 513, baseType: !1034, size: 64, offset: 192)
!1062 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !1036, file: !1037, line: 542, baseType: !1063, size: 128)
!1063 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !1037, line: 530, size: 128, elements: !1064)
!1064 = !{!1065, !1066}
!1065 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1063, file: !1037, line: 531, baseType: !1040, size: 32)
!1066 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !1063, file: !1037, line: 534, baseType: !1067, size: 64, offset: 64)
!1067 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !1037, line: 525, baseType: !1068)
!1068 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1069, size: 64)
!1069 = !DISubroutineType(types: !1070)
!1070 = !{!829, !710, !908, !763, !763}
!1071 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !1031, file: !429, line: 211, baseType: !7, size: 32, offset: 64)
!1072 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1031, file: !429, line: 214, baseType: !765, size: 64, offset: 128)
!1073 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !1031, file: !429, line: 224, baseType: !1074, size: 64, offset: 192)
!1074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1075, size: 64)
!1075 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !429, line: 202, baseType: !1076)
!1076 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !429, line: 202, size: 128, elements: !1077)
!1077 = !{!1078}
!1078 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1076, file: !429, line: 202, baseType: !1079, size: 128)
!1079 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !429, line: 200, baseType: !1080)
!1080 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !429, line: 200, size: 128, elements: !1081)
!1081 = !{!1082, !1083, !1084}
!1082 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1080, file: !429, line: 200, baseType: !7, size: 32)
!1083 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1080, file: !429, line: 200, baseType: !7, size: 32, offset: 32)
!1084 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1080, file: !429, line: 200, baseType: !918, size: 64, offset: 64)
!1085 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !1031, file: !429, line: 234, baseType: !1074, size: 64, offset: 256)
!1086 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1025, file: !429, line: 197, baseType: !765, size: 64, offset: 256)
!1087 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !898, file: !429, line: 319, baseType: !772, size: 256)
!1088 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !898, file: !429, line: 320, baseType: !791, size: 192)
!1089 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !712, file: !155, line: 3384, baseType: !1090, size: 1472)
!1090 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !155, line: 3114, size: 1472, elements: !1091)
!1091 = !{!1092, !1113, !1114, !1115, !1116}
!1092 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1090, file: !155, line: 3115, baseType: !1093, size: 1216)
!1093 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !155, line: 2984, size: 1216, elements: !1094)
!1094 = !{!1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112}
!1095 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1093, file: !155, line: 2985, baseType: !879, size: 960)
!1096 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !1093, file: !155, line: 2986, baseType: !710, size: 64, offset: 960)
!1097 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !1093, file: !155, line: 2987, baseType: !710, size: 64, offset: 1024)
!1098 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !1093, file: !155, line: 2988, baseType: !710, size: 64, offset: 1088)
!1099 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !1093, file: !155, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!1100 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !1093, file: !155, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!1101 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !1093, file: !155, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!1102 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !1093, file: !155, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!1103 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !1093, file: !155, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!1104 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !1093, file: !155, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!1105 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !1093, file: !155, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!1106 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !1093, file: !155, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!1107 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !1093, file: !155, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!1108 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !1093, file: !155, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!1109 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !1093, file: !155, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!1110 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !1093, file: !155, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!1111 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !1093, file: !155, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!1112 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !1093, file: !155, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!1113 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !1090, file: !155, line: 3117, baseType: !710, size: 64, offset: 1216)
!1114 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !1090, file: !155, line: 3119, baseType: !710, size: 64, offset: 1280)
!1115 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1090, file: !155, line: 3121, baseType: !710, size: 64, offset: 1344)
!1116 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !1090, file: !155, line: 3123, baseType: !710, size: 64, offset: 1408)
!1117 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !712, file: !155, line: 3385, baseType: !1118, size: 1088)
!1118 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !155, line: 2874, size: 1088, elements: !1119)
!1119 = !{!1120, !1121, !1122}
!1120 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1118, file: !155, line: 2875, baseType: !879, size: 960)
!1121 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !1118, file: !155, line: 2876, baseType: !883, size: 64, offset: 960)
!1122 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1118, file: !155, line: 2877, baseType: !1123, size: 64, offset: 1024)
!1123 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1124, size: 64)
!1124 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !1125, line: 172, size: 128, elements: !1126)
!1125 = !DIFile(filename: "./tree-flow.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1126 = !{!1127, !1128, !1129, !1130, !1131, !1132, !1133}
!1127 = !DIDerivedType(tag: DW_TAG_member, name: "base_var_processed", scope: !1124, file: !1125, line: 174, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1128 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !1124, file: !1125, line: 178, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1129 = !DIDerivedType(tag: DW_TAG_member, name: "need_phi_state", scope: !1124, file: !1125, line: 183, baseType: !7, size: 2, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1130 = !DIDerivedType(tag: DW_TAG_member, name: "is_heapvar", scope: !1124, file: !1125, line: 187, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1131 = !DIDerivedType(tag: DW_TAG_member, name: "noalias_state", scope: !1124, file: !1125, line: 192, baseType: !7, size: 2, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1132 = !DIDerivedType(tag: DW_TAG_member, name: "base_index", scope: !1124, file: !1125, line: 195, baseType: !7, size: 32, offset: 32)
!1133 = !DIDerivedType(tag: DW_TAG_member, name: "current_def", scope: !1124, file: !1125, line: 199, baseType: !710, size: 64, offset: 64)
!1134 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !712, file: !155, line: 3386, baseType: !1093, size: 1216)
!1135 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !712, file: !155, line: 3387, baseType: !1136, size: 1280)
!1136 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !155, line: 3093, size: 1280, elements: !1137)
!1137 = !{!1138, !1139}
!1138 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1136, file: !155, line: 3094, baseType: !1093, size: 1216)
!1139 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1136, file: !155, line: 3095, baseType: !1123, size: 64, offset: 1216)
!1140 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !712, file: !155, line: 3388, baseType: !1141, size: 1216)
!1141 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !155, line: 2824, size: 1216, elements: !1142)
!1142 = !{!1143, !1144, !1145, !1146, !1147, !1148}
!1143 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1141, file: !155, line: 2825, baseType: !841, size: 896)
!1144 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1141, file: !155, line: 2827, baseType: !710, size: 64, offset: 896)
!1145 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !1141, file: !155, line: 2828, baseType: !710, size: 64, offset: 960)
!1146 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !1141, file: !155, line: 2829, baseType: !710, size: 64, offset: 1024)
!1147 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !1141, file: !155, line: 2830, baseType: !710, size: 64, offset: 1088)
!1148 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !1141, file: !155, line: 2831, baseType: !710, size: 64, offset: 1152)
!1149 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !712, file: !155, line: 3389, baseType: !1150, size: 1024)
!1150 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !155, line: 2850, size: 1024, elements: !1151)
!1151 = !{!1152, !1153, !1154}
!1152 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1150, file: !155, line: 2851, baseType: !879, size: 960)
!1153 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !1150, file: !155, line: 2852, baseType: !806, size: 32, offset: 960)
!1154 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !1150, file: !155, line: 2853, baseType: !806, size: 32, offset: 992)
!1155 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !712, file: !155, line: 3390, baseType: !1156, size: 1024)
!1156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !155, line: 2857, size: 1024, elements: !1157)
!1157 = !{!1158, !1159}
!1158 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1156, file: !155, line: 2858, baseType: !879, size: 960)
!1159 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !1156, file: !155, line: 2859, baseType: !1123, size: 64, offset: 960)
!1160 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !712, file: !155, line: 3391, baseType: !1161, size: 960)
!1161 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !155, line: 2862, size: 960, elements: !1162)
!1162 = !{!1163}
!1163 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1161, file: !155, line: 2863, baseType: !879, size: 960)
!1164 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !712, file: !155, line: 3392, baseType: !1165, size: 1472)
!1165 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !155, line: 3304, size: 1472, elements: !1166)
!1166 = !{!1167}
!1167 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1165, file: !155, line: 3305, baseType: !1090, size: 1472)
!1168 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !712, file: !155, line: 3393, baseType: !1169, size: 1792)
!1169 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !155, line: 3248, size: 1792, elements: !1170)
!1170 = !{!1171, !1172, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489}
!1171 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1169, file: !155, line: 3249, baseType: !1090, size: 1472)
!1172 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !1169, file: !155, line: 3251, baseType: !1173, size: 64, offset: 1472)
!1173 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1174, size: 64)
!1174 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !1175, line: 463, size: 1152, elements: !1176)
!1175 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1176 = !{!1177, !1180, !1210, !1211, !1350, !1413, !1414, !1415, !1416, !1417, !1418, !1442, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468}
!1177 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !1174, file: !1175, line: 464, baseType: !1178, size: 64)
!1178 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1179, size: 64)
!1179 = !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !1175, line: 464, flags: DIFlagFwdDecl)
!1180 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !1174, file: !1175, line: 467, baseType: !1181, size: 64, offset: 64)
!1181 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1182, size: 64)
!1182 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !144, line: 374, size: 640, elements: !1183)
!1183 = !{!1184, !1185, !1186, !1199, !1200, !1201, !1202, !1203, !1204, !1206, !1208, !1209}
!1184 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !1182, file: !144, line: 377, baseType: !648, size: 64)
!1185 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !1182, file: !144, line: 378, baseType: !648, size: 64, offset: 64)
!1186 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !1182, file: !144, line: 381, baseType: !1187, size: 64, offset: 128)
!1187 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1188, size: 64)
!1188 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !144, line: 282, baseType: !1189)
!1189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !144, line: 282, size: 128, elements: !1190)
!1190 = !{!1191}
!1191 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1189, file: !144, line: 282, baseType: !1192, size: 128)
!1192 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !144, line: 281, baseType: !1193)
!1193 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !144, line: 281, size: 128, elements: !1194)
!1194 = !{!1195, !1196, !1197}
!1195 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1193, file: !144, line: 281, baseType: !7, size: 32)
!1196 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1193, file: !144, line: 281, baseType: !7, size: 32, offset: 32)
!1197 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1193, file: !144, line: 281, baseType: !1198, size: 64, offset: 64)
!1198 = !DICompositeType(tag: DW_TAG_array_type, baseType: !648, size: 64, elements: !810)
!1199 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !1182, file: !144, line: 384, baseType: !806, size: 32, offset: 192)
!1200 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !1182, file: !144, line: 387, baseType: !806, size: 32, offset: 224)
!1201 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !1182, file: !144, line: 390, baseType: !806, size: 32, offset: 256)
!1202 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !1182, file: !144, line: 394, baseType: !1187, size: 64, offset: 320)
!1203 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !1182, file: !144, line: 396, baseType: !143, size: 32, offset: 384)
!1204 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !1182, file: !144, line: 399, baseType: !1205, size: 64, offset: 416)
!1205 = !DICompositeType(tag: DW_TAG_array_type, baseType: !149, size: 64, elements: !952)
!1206 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !1182, file: !144, line: 402, baseType: !1207, size: 64, offset: 480)
!1207 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !952)
!1208 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !1182, file: !144, line: 406, baseType: !806, size: 32, offset: 544)
!1209 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !1182, file: !144, line: 409, baseType: !806, size: 32, offset: 576)
!1210 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !1174, file: !1175, line: 470, baseType: !676, size: 64, offset: 128)
!1211 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !1174, file: !1175, line: 473, baseType: !1212, size: 64, offset: 192)
!1212 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1213, size: 64)
!1213 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !1125, line: 39, size: 1152, elements: !1214)
!1214 = !{!1215, !1265, !1278, !1291, !1292, !1304, !1305, !1309, !1310, !1311, !1312, !1313}
!1215 = !DIDerivedType(tag: DW_TAG_member, name: "referenced_vars", scope: !1213, file: !1125, line: 41, baseType: !1216, size: 64)
!1216 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !1217, line: 144, baseType: !1218)
!1217 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1218 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1219, size: 64)
!1219 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !1217, line: 100, size: 896, elements: !1220)
!1220 = !{!1221, !1227, !1232, !1237, !1239, !1242, !1243, !1244, !1245, !1246, !1251, !1253, !1254, !1259, !1264}
!1221 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !1219, file: !1217, line: 102, baseType: !1222, size: 64)
!1222 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !1217, line: 52, baseType: !1223)
!1223 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1224, size: 64)
!1224 = !DISubroutineType(types: !1225)
!1225 = !{!1226, !1058}
!1226 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !1217, line: 47, baseType: !7)
!1227 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !1219, file: !1217, line: 105, baseType: !1228, size: 64, offset: 64)
!1228 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !1217, line: 59, baseType: !1229)
!1229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1230, size: 64)
!1230 = !DISubroutineType(types: !1231)
!1231 = !{!806, !1058, !1058}
!1232 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !1219, file: !1217, line: 108, baseType: !1233, size: 64, offset: 128)
!1233 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !1217, line: 63, baseType: !1234)
!1234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1235, size: 64)
!1235 = !DISubroutineType(types: !1236)
!1236 = !{null, !988}
!1237 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !1219, file: !1217, line: 111, baseType: !1238, size: 64, offset: 192)
!1238 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !988, size: 64)
!1239 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1219, file: !1217, line: 114, baseType: !1240, size: 64, offset: 256)
!1240 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !1241, line: 46, baseType: !763)
!1241 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!1242 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !1219, file: !1217, line: 117, baseType: !1240, size: 64, offset: 320)
!1243 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !1219, file: !1217, line: 120, baseType: !1240, size: 64, offset: 384)
!1244 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !1219, file: !1217, line: 124, baseType: !7, size: 32, offset: 448)
!1245 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !1219, file: !1217, line: 128, baseType: !7, size: 32, offset: 480)
!1246 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !1219, file: !1217, line: 131, baseType: !1247, size: 64, offset: 512)
!1247 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !1217, line: 75, baseType: !1248)
!1248 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1249, size: 64)
!1249 = !DISubroutineType(types: !1250)
!1250 = !{!988, !1240, !1240}
!1251 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !1219, file: !1217, line: 132, baseType: !1252, size: 64, offset: 576)
!1252 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !1217, line: 78, baseType: !1234)
!1253 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !1219, file: !1217, line: 135, baseType: !988, size: 64, offset: 640)
!1254 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !1219, file: !1217, line: 136, baseType: !1255, size: 64, offset: 704)
!1255 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !1217, line: 82, baseType: !1256)
!1256 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1257, size: 64)
!1257 = !DISubroutineType(types: !1258)
!1258 = !{!988, !988, !1240, !1240}
!1259 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !1219, file: !1217, line: 137, baseType: !1260, size: 64, offset: 768)
!1260 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !1217, line: 83, baseType: !1261)
!1261 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1262, size: 64)
!1262 = !DISubroutineType(types: !1263)
!1263 = !{null, !988, !988}
!1264 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !1219, file: !1217, line: 141, baseType: !7, size: 32, offset: 832)
!1265 = !DIDerivedType(tag: DW_TAG_member, name: "modified_noreturn_calls", scope: !1213, file: !1125, line: 48, baseType: !1266, size: 64, offset: 64)
!1266 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1267, size: 64)
!1267 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_gc", file: !405, line: 35, baseType: !1268)
!1268 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_gc", file: !405, line: 35, size: 128, elements: !1269)
!1269 = !{!1270}
!1270 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1268, file: !405, line: 35, baseType: !1271, size: 128)
!1271 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_gimple_base", file: !405, line: 33, baseType: !1272)
!1272 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_gimple_base", file: !405, line: 33, size: 128, elements: !1273)
!1273 = !{!1274, !1275, !1276}
!1274 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1272, file: !405, line: 33, baseType: !7, size: 32)
!1275 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1272, file: !405, line: 33, baseType: !7, size: 32, offset: 32)
!1276 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1272, file: !405, line: 33, baseType: !1277, size: 64, offset: 64)
!1277 = !DICompositeType(tag: DW_TAG_array_type, baseType: !685, size: 64, elements: !810)
!1278 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_names", scope: !1213, file: !1125, line: 51, baseType: !1279, size: 64, offset: 128)
!1279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1280, size: 64)
!1280 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !155, line: 183, baseType: !1281)
!1281 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !155, line: 183, size: 128, elements: !1282)
!1282 = !{!1283}
!1283 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1281, file: !155, line: 183, baseType: !1284, size: 128)
!1284 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !155, line: 182, baseType: !1285)
!1285 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !155, line: 182, size: 128, elements: !1286)
!1286 = !{!1287, !1288, !1289}
!1287 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1285, file: !155, line: 182, baseType: !7, size: 32)
!1288 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1285, file: !155, line: 182, baseType: !7, size: 32, offset: 32)
!1289 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1285, file: !155, line: 182, baseType: !1290, size: 64, offset: 64)
!1290 = !DICompositeType(tag: DW_TAG_array_type, baseType: !710, size: 64, elements: !810)
!1291 = !DIDerivedType(tag: DW_TAG_member, name: "vop", scope: !1213, file: !1125, line: 54, baseType: !710, size: 64, offset: 192)
!1292 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1213, file: !1125, line: 57, baseType: !1293, size: 128, offset: 256)
!1293 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "pt_solution", file: !1294, line: 31, size: 128, elements: !1295)
!1294 = !DIFile(filename: "./tree-ssa-alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1295 = !{!1296, !1297, !1298, !1299, !1300, !1301, !1302}
!1296 = !DIDerivedType(tag: DW_TAG_member, name: "anything", scope: !1293, file: !1294, line: 35, baseType: !7, size: 1, flags: DIFlagBitField, extraData: i64 0)
!1297 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal", scope: !1293, file: !1294, line: 39, baseType: !7, size: 1, offset: 1, flags: DIFlagBitField, extraData: i64 0)
!1298 = !DIDerivedType(tag: DW_TAG_member, name: "escaped", scope: !1293, file: !1294, line: 42, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!1299 = !DIDerivedType(tag: DW_TAG_member, name: "null", scope: !1293, file: !1294, line: 46, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!1300 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_global", scope: !1293, file: !1294, line: 50, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!1301 = !DIDerivedType(tag: DW_TAG_member, name: "vars_contains_restrict", scope: !1293, file: !1294, line: 53, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!1302 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1293, file: !1294, line: 56, baseType: !1303, size: 64, offset: 64)
!1303 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !641, line: 47, baseType: !936)
!1304 = !DIDerivedType(tag: DW_TAG_member, name: "callused", scope: !1213, file: !1125, line: 60, baseType: !1293, size: 128, offset: 384)
!1305 = !DIDerivedType(tag: DW_TAG_member, name: "decls_to_pointers", scope: !1213, file: !1125, line: 64, baseType: !1306, size: 64, offset: 512)
!1306 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1307, size: 64)
!1307 = !DICompositeType(tag: DW_TAG_structure_type, name: "pointer_map_t", file: !1308, line: 33, flags: DIFlagFwdDecl)
!1308 = !DIFile(filename: "./pointer-set.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1309 = !DIDerivedType(tag: DW_TAG_member, name: "free_ssanames", scope: !1213, file: !1125, line: 67, baseType: !710, size: 64, offset: 576)
!1310 = !DIDerivedType(tag: DW_TAG_member, name: "default_defs", scope: !1213, file: !1125, line: 73, baseType: !1216, size: 64, offset: 640)
!1311 = !DIDerivedType(tag: DW_TAG_member, name: "syms_to_rename", scope: !1213, file: !1125, line: 77, baseType: !1303, size: 64, offset: 704)
!1312 = !DIDerivedType(tag: DW_TAG_member, name: "in_ssa_p", scope: !1213, file: !1125, line: 80, baseType: !7, size: 1, offset: 768, flags: DIFlagBitField, extraData: i64 768)
!1313 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operands", scope: !1213, file: !1125, line: 82, baseType: !1314, size: 320, offset: 832)
!1314 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operands", file: !1315, line: 62, size: 320, elements: !1316)
!1315 = !DIFile(filename: "./tree-ssa-operands.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1316 = !{!1317, !1323, !1324, !1325, !1326, !1333}
!1317 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory", scope: !1314, file: !1315, line: 63, baseType: !1318, size: 64)
!1318 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1319, size: 64)
!1319 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_operand_memory_d", file: !1315, line: 56, size: 128, elements: !1320)
!1320 = !{!1321, !1322}
!1321 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1319, file: !1315, line: 57, baseType: !1318, size: 64)
!1322 = !DIDerivedType(tag: DW_TAG_member, name: "mem", scope: !1319, file: !1315, line: 58, baseType: !808, size: 8, offset: 64)
!1323 = !DIDerivedType(tag: DW_TAG_member, name: "operand_memory_index", scope: !1314, file: !1315, line: 64, baseType: !7, size: 32, offset: 64)
!1324 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_operand_mem_size", scope: !1314, file: !1315, line: 66, baseType: !7, size: 32, offset: 96)
!1325 = !DIDerivedType(tag: DW_TAG_member, name: "ops_active", scope: !1314, file: !1315, line: 68, baseType: !829, size: 8, offset: 128)
!1326 = !DIDerivedType(tag: DW_TAG_member, name: "free_defs", scope: !1314, file: !1315, line: 70, baseType: !1327, size: 64, offset: 192)
!1327 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1328, size: 64)
!1328 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "def_optype_d", file: !1315, line: 37, size: 128, elements: !1329)
!1329 = !{!1330, !1331}
!1330 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1328, file: !1315, line: 39, baseType: !1327, size: 64)
!1331 = !DIDerivedType(tag: DW_TAG_member, name: "def_ptr", scope: !1328, file: !1315, line: 40, baseType: !1332, size: 64, offset: 64)
!1332 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !710, size: 64)
!1333 = !DIDerivedType(tag: DW_TAG_member, name: "free_uses", scope: !1314, file: !1315, line: 71, baseType: !1334, size: 64, offset: 256)
!1334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1335, size: 64)
!1335 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "use_optype_d", file: !1315, line: 45, size: 320, elements: !1336)
!1336 = !{!1337, !1338}
!1337 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1335, file: !1315, line: 47, baseType: !1334, size: 64)
!1338 = !DIDerivedType(tag: DW_TAG_member, name: "use_ptr", scope: !1335, file: !1315, line: 48, baseType: !1339, size: 256, offset: 64)
!1339 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !155, line: 1883, size: 256, elements: !1340)
!1340 = !{!1341, !1343, !1344, !1349}
!1341 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1339, file: !155, line: 1884, baseType: !1342, size: 64)
!1342 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1339, size: 64)
!1343 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1339, file: !155, line: 1885, baseType: !1342, size: 64, offset: 64)
!1344 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !1339, file: !155, line: 1891, baseType: !1345, size: 64, offset: 128)
!1345 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !1339, file: !155, line: 1891, size: 64, elements: !1346)
!1346 = !{!1347, !1348}
!1347 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1345, file: !155, line: 1891, baseType: !685, size: 64)
!1348 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !1345, file: !155, line: 1891, baseType: !710, size: 64)
!1349 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !1339, file: !155, line: 1892, baseType: !1332, size: 64, offset: 192)
!1350 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !1174, file: !1175, line: 476, baseType: !1351, size: 64, offset: 256)
!1351 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1352, size: 64)
!1352 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !6, line: 187, size: 256, elements: !1353)
!1353 = !{!1354, !1355, !1411, !1412}
!1354 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !1352, file: !6, line: 189, baseType: !806, size: 32)
!1355 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !1352, file: !6, line: 192, baseType: !1356, size: 64, offset: 64)
!1356 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1357, size: 64)
!1357 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !6, line: 87, baseType: !1358)
!1358 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !6, line: 87, size: 128, elements: !1359)
!1359 = !{!1360}
!1360 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1358, file: !6, line: 87, baseType: !1361, size: 128)
!1361 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !6, line: 85, baseType: !1362)
!1362 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !6, line: 85, size: 128, elements: !1363)
!1363 = !{!1364, !1365, !1366}
!1364 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1362, file: !6, line: 85, baseType: !7, size: 32)
!1365 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1362, file: !6, line: 85, baseType: !7, size: 32, offset: 32)
!1366 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1362, file: !6, line: 85, baseType: !1367, size: 64, offset: 64)
!1367 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1368, size: 64, elements: !810)
!1368 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !6, line: 84, baseType: !1369)
!1369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1370, size: 64)
!1370 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !6, line: 100, size: 1216, elements: !1371)
!1371 = !{!1372, !1373, !1374, !1375, !1376, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1401, !1409, !1410}
!1372 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1370, file: !6, line: 102, baseType: !806, size: 32)
!1373 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !1370, file: !6, line: 105, baseType: !7, size: 32, offset: 32)
!1374 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !1370, file: !6, line: 108, baseType: !649, size: 64, offset: 64)
!1375 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !1370, file: !6, line: 111, baseType: !649, size: 64, offset: 128)
!1376 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !1370, file: !6, line: 114, baseType: !1377, size: 64, offset: 192)
!1377 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !6, line: 41, size: 64, elements: !1378)
!1378 = !{!1379, !1380}
!1379 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !1377, file: !6, line: 42, baseType: !5, size: 32)
!1380 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !1377, file: !6, line: 43, baseType: !7, size: 32, offset: 32)
!1381 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !1370, file: !6, line: 117, baseType: !7, size: 32, offset: 256)
!1382 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !1370, file: !6, line: 120, baseType: !7, size: 32, offset: 288)
!1383 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !1370, file: !6, line: 123, baseType: !1356, size: 64, offset: 320)
!1384 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !1370, file: !6, line: 126, baseType: !1369, size: 64, offset: 384)
!1385 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1370, file: !6, line: 129, baseType: !1369, size: 64, offset: 448)
!1386 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !1370, file: !6, line: 132, baseType: !988, size: 64, offset: 512)
!1387 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !1370, file: !6, line: 139, baseType: !710, size: 64, offset: 576)
!1388 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !1370, file: !6, line: 143, baseType: !758, size: 128, offset: 640)
!1389 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !1370, file: !6, line: 146, baseType: !758, size: 128, offset: 768)
!1390 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !1370, file: !6, line: 148, baseType: !829, size: 8, offset: 896)
!1391 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !1370, file: !6, line: 149, baseType: !829, size: 8, offset: 904)
!1392 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !1370, file: !6, line: 153, baseType: !386, size: 32, offset: 928)
!1393 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !1370, file: !6, line: 156, baseType: !1394, size: 64, offset: 960)
!1394 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1395, size: 64)
!1395 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !6, line: 48, size: 320, elements: !1396)
!1396 = !{!1397, !1398, !1399, !1400}
!1397 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1395, file: !6, line: 50, baseType: !685, size: 64)
!1398 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !1395, file: !6, line: 59, baseType: !758, size: 128, offset: 64)
!1399 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !1395, file: !6, line: 64, baseType: !829, size: 8, offset: 192)
!1400 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1395, file: !6, line: 67, baseType: !1394, size: 64, offset: 256)
!1401 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1370, file: !6, line: 159, baseType: !1402, size: 64, offset: 1024)
!1402 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1403, size: 64)
!1403 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !6, line: 72, size: 256, elements: !1404)
!1404 = !{!1405, !1406, !1407, !1408}
!1405 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !1403, file: !6, line: 74, baseType: !666, size: 64)
!1406 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1403, file: !6, line: 77, baseType: !1402, size: 64, offset: 64)
!1407 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1403, file: !6, line: 78, baseType: !1402, size: 64, offset: 128)
!1408 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !1403, file: !6, line: 81, baseType: !1402, size: 64, offset: 192)
!1409 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !1370, file: !6, line: 162, baseType: !829, size: 8, offset: 1088)
!1410 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !1370, file: !6, line: 166, baseType: !710, size: 64, offset: 1152)
!1411 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !1352, file: !6, line: 197, baseType: !1216, size: 64, offset: 128)
!1412 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !1352, file: !6, line: 200, baseType: !1369, size: 64, offset: 192)
!1413 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !1174, file: !1175, line: 479, baseType: !1216, size: 64, offset: 320)
!1414 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !1174, file: !1175, line: 484, baseType: !710, size: 64, offset: 384)
!1415 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !1174, file: !1175, line: 488, baseType: !710, size: 64, offset: 448)
!1416 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !1174, file: !1175, line: 493, baseType: !710, size: 64, offset: 512)
!1417 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !1174, file: !1175, line: 496, baseType: !710, size: 64, offset: 576)
!1418 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !1174, file: !1175, line: 501, baseType: !1419, size: 64, offset: 640)
!1419 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1420, size: 64)
!1420 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !350, line: 2355, size: 576, elements: !1421)
!1421 = !{!1422, !1425, !1426, !1427, !1428, !1430, !1431, !1436, !1437, !1438, !1439, !1440, !1441}
!1422 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !1420, file: !350, line: 2356, baseType: !1423, size: 64)
!1423 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1424, size: 64)
!1424 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !350, line: 2356, flags: DIFlagFwdDecl)
!1425 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !1420, file: !350, line: 2357, baseType: !908, size: 64, offset: 64)
!1426 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !1420, file: !350, line: 2358, baseType: !806, size: 32, offset: 128)
!1427 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !1420, file: !350, line: 2359, baseType: !806, size: 32, offset: 160)
!1428 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !1420, file: !350, line: 2360, baseType: !1429, size: 128, offset: 192)
!1429 = !DICompositeType(tag: DW_TAG_array_type, baseType: !806, size: 128, elements: !977)
!1430 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !1420, file: !350, line: 2364, baseType: !806, size: 32, offset: 320)
!1431 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !1420, file: !350, line: 2367, baseType: !1432, size: 128, offset: 384)
!1432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !350, line: 2349, size: 128, elements: !1433)
!1433 = !{!1434, !1435}
!1434 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !1432, file: !350, line: 2351, baseType: !883, size: 64)
!1435 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1432, file: !350, line: 2352, baseType: !765, size: 64, offset: 64)
!1436 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !1420, file: !350, line: 2371, baseType: !349, size: 32, offset: 512)
!1437 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !1420, file: !350, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!1438 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !1420, file: !350, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!1439 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !1420, file: !350, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!1440 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !1420, file: !350, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!1441 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !1420, file: !350, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!1442 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !1174, file: !1175, line: 504, baseType: !1443, size: 64, offset: 704)
!1443 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1444, size: 64)
!1444 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !1175, line: 504, flags: DIFlagFwdDecl)
!1445 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !1174, file: !1175, line: 507, baseType: !1216, size: 64, offset: 768)
!1446 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !1174, file: !1175, line: 510, baseType: !806, size: 32, offset: 832)
!1447 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !1174, file: !1175, line: 513, baseType: !806, size: 32, offset: 864)
!1448 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !1174, file: !1175, line: 516, baseType: !703, size: 32, offset: 896)
!1449 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !1174, file: !1175, line: 519, baseType: !703, size: 32, offset: 928)
!1450 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !1174, file: !1175, line: 522, baseType: !7, size: 32, offset: 960)
!1451 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !1174, file: !1175, line: 523, baseType: !7, size: 32, offset: 992)
!1452 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !1174, file: !1175, line: 528, baseType: !908, size: 64, offset: 1024)
!1453 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !1174, file: !1175, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!1454 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !1174, file: !1175, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!1455 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !1174, file: !1175, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!1456 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !1174, file: !1175, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!1457 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !1174, file: !1175, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!1458 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !1174, file: !1175, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!1459 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !1174, file: !1175, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!1460 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !1174, file: !1175, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!1461 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !1174, file: !1175, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!1462 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !1174, file: !1175, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!1463 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !1174, file: !1175, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!1464 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !1174, file: !1175, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!1465 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !1174, file: !1175, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!1466 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !1174, file: !1175, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!1467 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !1174, file: !1175, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!1468 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !1174, file: !1175, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!1469 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !1169, file: !155, line: 3254, baseType: !710, size: 64, offset: 1536)
!1470 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !1169, file: !155, line: 3257, baseType: !710, size: 64, offset: 1600)
!1471 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !1169, file: !155, line: 3258, baseType: !710, size: 64, offset: 1664)
!1472 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !1169, file: !155, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!1473 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !1169, file: !155, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!1474 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !1169, file: !155, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!1475 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !1169, file: !155, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!1476 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !1169, file: !155, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!1477 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !1169, file: !155, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!1478 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !1169, file: !155, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!1479 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !1169, file: !155, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!1480 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !1169, file: !155, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!1481 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !1169, file: !155, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!1482 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !1169, file: !155, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!1483 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !1169, file: !155, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!1484 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !1169, file: !155, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!1485 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !1169, file: !155, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!1486 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !1169, file: !155, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!1487 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !1169, file: !155, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!1488 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !1169, file: !155, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!1489 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !1169, file: !155, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!1490 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !712, file: !155, line: 3394, baseType: !1491, size: 1344)
!1491 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !155, line: 2279, size: 1344, elements: !1492)
!1492 = !{!1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534}
!1493 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1491, file: !155, line: 2280, baseType: !748, size: 192)
!1494 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !1491, file: !155, line: 2281, baseType: !710, size: 64, offset: 192)
!1495 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !1491, file: !155, line: 2282, baseType: !710, size: 64, offset: 256)
!1496 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !1491, file: !155, line: 2283, baseType: !710, size: 64, offset: 320)
!1497 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !1491, file: !155, line: 2284, baseType: !710, size: 64, offset: 384)
!1498 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !1491, file: !155, line: 2285, baseType: !7, size: 32, offset: 448)
!1499 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !1491, file: !155, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!1500 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !1491, file: !155, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!1501 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !1491, file: !155, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!1502 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !1491, file: !155, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!1503 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !1491, file: !155, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!1504 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !1491, file: !155, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!1505 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !1491, file: !155, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!1506 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !1491, file: !155, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!1507 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !1491, file: !155, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!1508 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !1491, file: !155, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!1509 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !1491, file: !155, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!1510 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !1491, file: !155, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!1511 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !1491, file: !155, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!1512 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !1491, file: !155, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!1513 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !1491, file: !155, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!1514 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !1491, file: !155, line: 2305, baseType: !7, size: 32, offset: 512)
!1515 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !1491, file: !155, line: 2306, baseType: !1008, size: 32, offset: 544)
!1516 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !1491, file: !155, line: 2307, baseType: !710, size: 64, offset: 576)
!1517 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !1491, file: !155, line: 2308, baseType: !710, size: 64, offset: 640)
!1518 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !1491, file: !155, line: 2314, baseType: !1519, size: 64, offset: 704)
!1519 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !155, line: 2309, size: 64, elements: !1520)
!1520 = !{!1521, !1522, !1523}
!1521 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !1519, file: !155, line: 2310, baseType: !806, size: 32)
!1522 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !1519, file: !155, line: 2311, baseType: !908, size: 64)
!1523 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !1519, file: !155, line: 2312, baseType: !1524, size: 64)
!1524 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1525, size: 64)
!1525 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !155, line: 2277, flags: DIFlagFwdDecl)
!1526 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1491, file: !155, line: 2315, baseType: !710, size: 64, offset: 768)
!1527 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !1491, file: !155, line: 2316, baseType: !710, size: 64, offset: 832)
!1528 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !1491, file: !155, line: 2317, baseType: !710, size: 64, offset: 896)
!1529 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !1491, file: !155, line: 2318, baseType: !710, size: 64, offset: 960)
!1530 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !1491, file: !155, line: 2319, baseType: !710, size: 64, offset: 1024)
!1531 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !1491, file: !155, line: 2320, baseType: !710, size: 64, offset: 1088)
!1532 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !1491, file: !155, line: 2321, baseType: !710, size: 64, offset: 1152)
!1533 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !1491, file: !155, line: 2322, baseType: !710, size: 64, offset: 1216)
!1534 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !1491, file: !155, line: 2324, baseType: !1535, size: 64, offset: 1280)
!1535 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1536, size: 64)
!1536 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !155, line: 2324, flags: DIFlagFwdDecl)
!1537 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !712, file: !155, line: 3395, baseType: !1538, size: 320)
!1538 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !155, line: 1469, size: 320, elements: !1539)
!1539 = !{!1540, !1541, !1542}
!1540 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1538, file: !155, line: 1470, baseType: !748, size: 192)
!1541 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !1538, file: !155, line: 1471, baseType: !710, size: 64, offset: 192)
!1542 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1538, file: !155, line: 1472, baseType: !710, size: 64, offset: 256)
!1543 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !712, file: !155, line: 3396, baseType: !1544, size: 320)
!1544 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !155, line: 1482, size: 320, elements: !1545)
!1545 = !{!1546, !1547, !1548}
!1546 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1544, file: !155, line: 1483, baseType: !748, size: 192)
!1547 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !1544, file: !155, line: 1484, baseType: !806, size: 32, offset: 192)
!1548 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !1544, file: !155, line: 1485, baseType: !1290, size: 64, offset: 256)
!1549 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !712, file: !155, line: 3397, baseType: !1550, size: 384)
!1550 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !155, line: 1829, size: 384, elements: !1551)
!1551 = !{!1552, !1553, !1554, !1555}
!1552 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1550, file: !155, line: 1830, baseType: !748, size: 192)
!1553 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1550, file: !155, line: 1831, baseType: !703, size: 32, offset: 192)
!1554 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1550, file: !155, line: 1832, baseType: !710, size: 64, offset: 256)
!1555 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !1550, file: !155, line: 1835, baseType: !1290, size: 64, offset: 320)
!1556 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !712, file: !155, line: 3398, baseType: !1557, size: 704)
!1557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !155, line: 1898, size: 704, elements: !1558)
!1558 = !{!1559, !1560, !1561, !1562, !1563, !1568}
!1559 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1557, file: !155, line: 1899, baseType: !748, size: 192)
!1560 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !1557, file: !155, line: 1902, baseType: !710, size: 64, offset: 192)
!1561 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !1557, file: !155, line: 1905, baseType: !685, size: 64, offset: 256)
!1562 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !1557, file: !155, line: 1908, baseType: !7, size: 32, offset: 320)
!1563 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !1557, file: !155, line: 1911, baseType: !1564, size: 64, offset: 384)
!1564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1565, size: 64)
!1565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !1125, line: 117, size: 128, elements: !1566)
!1566 = !{!1567}
!1567 = !DIDerivedType(tag: DW_TAG_member, name: "pt", scope: !1565, file: !1125, line: 120, baseType: !1293, size: 128)
!1568 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !1557, file: !155, line: 1914, baseType: !1339, size: 256, offset: 448)
!1569 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !712, file: !155, line: 3399, baseType: !1570, size: 704)
!1570 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !155, line: 2008, size: 704, elements: !1571)
!1571 = !{!1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582}
!1572 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1570, file: !155, line: 2009, baseType: !748, size: 192)
!1573 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !1570, file: !155, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!1574 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !1570, file: !155, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!1575 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1570, file: !155, line: 2014, baseType: !703, size: 32, offset: 224)
!1576 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1570, file: !155, line: 2016, baseType: !710, size: 64, offset: 256)
!1577 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !1570, file: !155, line: 2017, baseType: !1279, size: 64, offset: 320)
!1578 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !1570, file: !155, line: 2019, baseType: !710, size: 64, offset: 384)
!1579 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !1570, file: !155, line: 2020, baseType: !710, size: 64, offset: 448)
!1580 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !1570, file: !155, line: 2021, baseType: !710, size: 64, offset: 512)
!1581 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !1570, file: !155, line: 2022, baseType: !710, size: 64, offset: 576)
!1582 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !1570, file: !155, line: 2023, baseType: !710, size: 64, offset: 640)
!1583 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !712, file: !155, line: 3400, baseType: !1584, size: 832)
!1584 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !155, line: 2430, size: 832, elements: !1585)
!1585 = !{!1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595}
!1586 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1584, file: !155, line: 2431, baseType: !748, size: 192)
!1587 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !1584, file: !155, line: 2433, baseType: !710, size: 64, offset: 192)
!1588 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !1584, file: !155, line: 2434, baseType: !710, size: 64, offset: 256)
!1589 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !1584, file: !155, line: 2435, baseType: !710, size: 64, offset: 320)
!1590 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !1584, file: !155, line: 2436, baseType: !710, size: 64, offset: 384)
!1591 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !1584, file: !155, line: 2437, baseType: !1279, size: 64, offset: 448)
!1592 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !1584, file: !155, line: 2438, baseType: !710, size: 64, offset: 512)
!1593 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !1584, file: !155, line: 2440, baseType: !710, size: 64, offset: 576)
!1594 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !1584, file: !155, line: 2441, baseType: !710, size: 64, offset: 640)
!1595 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !1584, file: !155, line: 2443, baseType: !1596, size: 128, offset: 704)
!1596 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !155, line: 182, baseType: !1597)
!1597 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !155, line: 182, size: 128, elements: !1598)
!1598 = !{!1599}
!1599 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1597, file: !155, line: 182, baseType: !1284, size: 128)
!1600 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !712, file: !155, line: 3401, baseType: !1601, size: 320)
!1601 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !155, line: 3327, size: 320, elements: !1602)
!1602 = !{!1603, !1604, !1611}
!1603 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1601, file: !155, line: 3329, baseType: !748, size: 192)
!1604 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !1601, file: !155, line: 3330, baseType: !1605, size: 64, offset: 192)
!1605 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1606, size: 64)
!1606 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !155, line: 3320, size: 192, elements: !1607)
!1607 = !{!1608, !1609, !1610}
!1608 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !1606, file: !155, line: 3322, baseType: !1605, size: 64)
!1609 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !1606, file: !155, line: 3323, baseType: !1605, size: 64, offset: 64)
!1610 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !1606, file: !155, line: 3324, baseType: !710, size: 64, offset: 128)
!1611 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !1601, file: !155, line: 3331, baseType: !1605, size: 64, offset: 256)
!1612 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !712, file: !155, line: 3402, baseType: !1613, size: 256)
!1613 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !155, line: 1540, size: 256, elements: !1614)
!1614 = !{!1615, !1616}
!1615 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1613, file: !155, line: 1541, baseType: !748, size: 192)
!1616 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !1613, file: !155, line: 1542, baseType: !1617, size: 64, offset: 192)
!1617 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1618, size: 64)
!1618 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !155, line: 1538, baseType: !1619)
!1619 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !155, line: 1538, size: 192, elements: !1620)
!1620 = !{!1621}
!1621 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !1619, file: !155, line: 1538, baseType: !1622, size: 192)
!1622 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !155, line: 1537, baseType: !1623)
!1623 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !155, line: 1537, size: 192, elements: !1624)
!1624 = !{!1625, !1626, !1627}
!1625 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !1623, file: !155, line: 1537, baseType: !7, size: 32)
!1626 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !1623, file: !155, line: 1537, baseType: !7, size: 32, offset: 32)
!1627 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !1623, file: !155, line: 1537, baseType: !1628, size: 128, offset: 64)
!1628 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1629, size: 128, elements: !810)
!1629 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !155, line: 1535, baseType: !1630)
!1630 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !155, line: 1532, size: 128, elements: !1631)
!1631 = !{!1632, !1633}
!1632 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1630, file: !155, line: 1533, baseType: !710, size: 64)
!1633 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !1630, file: !155, line: 1534, baseType: !710, size: 64, offset: 64)
!1634 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !712, file: !155, line: 3403, baseType: !1635, size: 512)
!1635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !155, line: 1938, size: 512, elements: !1636)
!1636 = !{!1637, !1638, !1639, !1640, !1646, !1647, !1648}
!1637 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1635, file: !155, line: 1939, baseType: !748, size: 192)
!1638 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1635, file: !155, line: 1940, baseType: !703, size: 32, offset: 192)
!1639 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !1635, file: !155, line: 1941, baseType: !354, size: 32, offset: 224)
!1640 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !1635, file: !155, line: 1946, baseType: !1641, size: 32, offset: 256)
!1641 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !155, line: 1942, size: 32, elements: !1642)
!1642 = !{!1643, !1644, !1645}
!1643 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !1641, file: !155, line: 1943, baseType: !372, size: 32)
!1644 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !1641, file: !155, line: 1944, baseType: !379, size: 32)
!1645 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !1641, file: !155, line: 1945, baseType: !154, size: 32)
!1646 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !1635, file: !155, line: 1950, baseType: !675, size: 64, offset: 320)
!1647 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !1635, file: !155, line: 1951, baseType: !675, size: 64, offset: 384)
!1648 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !1635, file: !155, line: 1953, baseType: !1290, size: 64, offset: 448)
!1649 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !712, file: !155, line: 3404, baseType: !1650, size: 1664)
!1650 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !155, line: 3337, size: 1664, elements: !1651)
!1651 = !{!1652, !1653}
!1652 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1650, file: !155, line: 3338, baseType: !748, size: 192)
!1653 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1650, file: !155, line: 3341, baseType: !1654, size: 1472, offset: 192)
!1654 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !1655, line: 410, size: 1472, elements: !1656)
!1655 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!1656 = !{!1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820}
!1657 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !1654, file: !1655, line: 412, baseType: !806, size: 32)
!1658 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !1654, file: !1655, line: 413, baseType: !806, size: 32, offset: 32)
!1659 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !1654, file: !1655, line: 414, baseType: !806, size: 32, offset: 64)
!1660 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !1654, file: !1655, line: 415, baseType: !806, size: 32, offset: 96)
!1661 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !1654, file: !1655, line: 416, baseType: !806, size: 32, offset: 128)
!1662 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !1654, file: !1655, line: 417, baseType: !806, size: 32, offset: 160)
!1663 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !1654, file: !1655, line: 418, baseType: !829, size: 8, offset: 192)
!1664 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !1654, file: !1655, line: 419, baseType: !829, size: 8, offset: 200)
!1665 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !1654, file: !1655, line: 420, baseType: !1666, size: 8, offset: 208)
!1666 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!1667 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !1654, file: !1655, line: 421, baseType: !1666, size: 8, offset: 216)
!1668 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !1654, file: !1655, line: 422, baseType: !1666, size: 8, offset: 224)
!1669 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !1654, file: !1655, line: 423, baseType: !1666, size: 8, offset: 232)
!1670 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !1654, file: !1655, line: 424, baseType: !1666, size: 8, offset: 240)
!1671 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !1654, file: !1655, line: 425, baseType: !1666, size: 8, offset: 248)
!1672 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !1654, file: !1655, line: 426, baseType: !1666, size: 8, offset: 256)
!1673 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !1654, file: !1655, line: 427, baseType: !1666, size: 8, offset: 264)
!1674 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !1654, file: !1655, line: 428, baseType: !1666, size: 8, offset: 272)
!1675 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !1654, file: !1655, line: 429, baseType: !1666, size: 8, offset: 280)
!1676 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !1654, file: !1655, line: 430, baseType: !1666, size: 8, offset: 288)
!1677 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !1654, file: !1655, line: 431, baseType: !1666, size: 8, offset: 296)
!1678 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !1654, file: !1655, line: 432, baseType: !1666, size: 8, offset: 304)
!1679 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !1654, file: !1655, line: 433, baseType: !1666, size: 8, offset: 312)
!1680 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !1654, file: !1655, line: 434, baseType: !1666, size: 8, offset: 320)
!1681 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !1654, file: !1655, line: 435, baseType: !1666, size: 8, offset: 328)
!1682 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !1654, file: !1655, line: 436, baseType: !1666, size: 8, offset: 336)
!1683 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !1654, file: !1655, line: 437, baseType: !1666, size: 8, offset: 344)
!1684 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !1654, file: !1655, line: 438, baseType: !1666, size: 8, offset: 352)
!1685 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !1654, file: !1655, line: 439, baseType: !1666, size: 8, offset: 360)
!1686 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !1654, file: !1655, line: 440, baseType: !1666, size: 8, offset: 368)
!1687 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !1654, file: !1655, line: 441, baseType: !1666, size: 8, offset: 376)
!1688 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !1654, file: !1655, line: 442, baseType: !1666, size: 8, offset: 384)
!1689 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !1654, file: !1655, line: 443, baseType: !1666, size: 8, offset: 392)
!1690 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !1654, file: !1655, line: 444, baseType: !1666, size: 8, offset: 400)
!1691 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !1654, file: !1655, line: 445, baseType: !1666, size: 8, offset: 408)
!1692 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !1654, file: !1655, line: 446, baseType: !1666, size: 8, offset: 416)
!1693 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !1654, file: !1655, line: 447, baseType: !1666, size: 8, offset: 424)
!1694 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !1654, file: !1655, line: 448, baseType: !1666, size: 8, offset: 432)
!1695 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !1654, file: !1655, line: 449, baseType: !1666, size: 8, offset: 440)
!1696 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !1654, file: !1655, line: 450, baseType: !1666, size: 8, offset: 448)
!1697 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !1654, file: !1655, line: 451, baseType: !1666, size: 8, offset: 456)
!1698 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !1654, file: !1655, line: 452, baseType: !1666, size: 8, offset: 464)
!1699 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !1654, file: !1655, line: 453, baseType: !1666, size: 8, offset: 472)
!1700 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !1654, file: !1655, line: 454, baseType: !1666, size: 8, offset: 480)
!1701 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !1654, file: !1655, line: 455, baseType: !1666, size: 8, offset: 488)
!1702 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !1654, file: !1655, line: 456, baseType: !1666, size: 8, offset: 496)
!1703 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !1654, file: !1655, line: 457, baseType: !1666, size: 8, offset: 504)
!1704 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !1654, file: !1655, line: 458, baseType: !1666, size: 8, offset: 512)
!1705 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !1654, file: !1655, line: 459, baseType: !1666, size: 8, offset: 520)
!1706 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !1654, file: !1655, line: 460, baseType: !1666, size: 8, offset: 528)
!1707 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !1654, file: !1655, line: 461, baseType: !1666, size: 8, offset: 536)
!1708 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !1654, file: !1655, line: 462, baseType: !1666, size: 8, offset: 544)
!1709 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !1654, file: !1655, line: 463, baseType: !1666, size: 8, offset: 552)
!1710 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !1654, file: !1655, line: 464, baseType: !1666, size: 8, offset: 560)
!1711 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !1654, file: !1655, line: 465, baseType: !1666, size: 8, offset: 568)
!1712 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !1654, file: !1655, line: 466, baseType: !1666, size: 8, offset: 576)
!1713 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !1654, file: !1655, line: 467, baseType: !1666, size: 8, offset: 584)
!1714 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !1654, file: !1655, line: 468, baseType: !1666, size: 8, offset: 592)
!1715 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !1654, file: !1655, line: 469, baseType: !1666, size: 8, offset: 600)
!1716 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !1654, file: !1655, line: 470, baseType: !1666, size: 8, offset: 608)
!1717 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !1654, file: !1655, line: 471, baseType: !1666, size: 8, offset: 616)
!1718 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !1654, file: !1655, line: 472, baseType: !1666, size: 8, offset: 624)
!1719 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !1654, file: !1655, line: 473, baseType: !1666, size: 8, offset: 632)
!1720 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !1654, file: !1655, line: 474, baseType: !1666, size: 8, offset: 640)
!1721 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !1654, file: !1655, line: 475, baseType: !1666, size: 8, offset: 648)
!1722 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !1654, file: !1655, line: 476, baseType: !1666, size: 8, offset: 656)
!1723 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !1654, file: !1655, line: 477, baseType: !1666, size: 8, offset: 664)
!1724 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !1654, file: !1655, line: 478, baseType: !1666, size: 8, offset: 672)
!1725 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !1654, file: !1655, line: 479, baseType: !1666, size: 8, offset: 680)
!1726 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !1654, file: !1655, line: 480, baseType: !1666, size: 8, offset: 688)
!1727 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !1654, file: !1655, line: 481, baseType: !1666, size: 8, offset: 696)
!1728 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !1654, file: !1655, line: 482, baseType: !1666, size: 8, offset: 704)
!1729 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !1654, file: !1655, line: 483, baseType: !1666, size: 8, offset: 712)
!1730 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !1654, file: !1655, line: 484, baseType: !1666, size: 8, offset: 720)
!1731 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !1654, file: !1655, line: 485, baseType: !1666, size: 8, offset: 728)
!1732 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !1654, file: !1655, line: 486, baseType: !1666, size: 8, offset: 736)
!1733 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !1654, file: !1655, line: 487, baseType: !1666, size: 8, offset: 744)
!1734 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !1654, file: !1655, line: 488, baseType: !1666, size: 8, offset: 752)
!1735 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !1654, file: !1655, line: 489, baseType: !1666, size: 8, offset: 760)
!1736 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !1654, file: !1655, line: 490, baseType: !1666, size: 8, offset: 768)
!1737 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !1654, file: !1655, line: 491, baseType: !1666, size: 8, offset: 776)
!1738 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !1654, file: !1655, line: 492, baseType: !1666, size: 8, offset: 784)
!1739 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !1654, file: !1655, line: 493, baseType: !1666, size: 8, offset: 792)
!1740 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !1654, file: !1655, line: 494, baseType: !1666, size: 8, offset: 800)
!1741 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !1654, file: !1655, line: 495, baseType: !1666, size: 8, offset: 808)
!1742 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !1654, file: !1655, line: 496, baseType: !1666, size: 8, offset: 816)
!1743 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !1654, file: !1655, line: 497, baseType: !1666, size: 8, offset: 824)
!1744 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !1654, file: !1655, line: 498, baseType: !1666, size: 8, offset: 832)
!1745 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !1654, file: !1655, line: 499, baseType: !1666, size: 8, offset: 840)
!1746 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !1654, file: !1655, line: 500, baseType: !1666, size: 8, offset: 848)
!1747 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !1654, file: !1655, line: 501, baseType: !1666, size: 8, offset: 856)
!1748 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !1654, file: !1655, line: 502, baseType: !1666, size: 8, offset: 864)
!1749 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !1654, file: !1655, line: 503, baseType: !1666, size: 8, offset: 872)
!1750 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !1654, file: !1655, line: 504, baseType: !1666, size: 8, offset: 880)
!1751 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !1654, file: !1655, line: 505, baseType: !1666, size: 8, offset: 888)
!1752 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !1654, file: !1655, line: 506, baseType: !1666, size: 8, offset: 896)
!1753 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !1654, file: !1655, line: 507, baseType: !1666, size: 8, offset: 904)
!1754 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !1654, file: !1655, line: 508, baseType: !1666, size: 8, offset: 912)
!1755 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !1654, file: !1655, line: 509, baseType: !1666, size: 8, offset: 920)
!1756 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !1654, file: !1655, line: 510, baseType: !1666, size: 8, offset: 928)
!1757 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !1654, file: !1655, line: 511, baseType: !1666, size: 8, offset: 936)
!1758 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !1654, file: !1655, line: 512, baseType: !1666, size: 8, offset: 944)
!1759 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !1654, file: !1655, line: 513, baseType: !1666, size: 8, offset: 952)
!1760 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !1654, file: !1655, line: 514, baseType: !1666, size: 8, offset: 960)
!1761 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !1654, file: !1655, line: 515, baseType: !1666, size: 8, offset: 968)
!1762 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !1654, file: !1655, line: 516, baseType: !1666, size: 8, offset: 976)
!1763 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !1654, file: !1655, line: 517, baseType: !1666, size: 8, offset: 984)
!1764 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !1654, file: !1655, line: 518, baseType: !1666, size: 8, offset: 992)
!1765 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !1654, file: !1655, line: 519, baseType: !1666, size: 8, offset: 1000)
!1766 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !1654, file: !1655, line: 520, baseType: !1666, size: 8, offset: 1008)
!1767 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !1654, file: !1655, line: 521, baseType: !1666, size: 8, offset: 1016)
!1768 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !1654, file: !1655, line: 522, baseType: !1666, size: 8, offset: 1024)
!1769 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !1654, file: !1655, line: 523, baseType: !1666, size: 8, offset: 1032)
!1770 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !1654, file: !1655, line: 524, baseType: !1666, size: 8, offset: 1040)
!1771 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !1654, file: !1655, line: 525, baseType: !1666, size: 8, offset: 1048)
!1772 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !1654, file: !1655, line: 526, baseType: !1666, size: 8, offset: 1056)
!1773 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !1654, file: !1655, line: 527, baseType: !1666, size: 8, offset: 1064)
!1774 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !1654, file: !1655, line: 528, baseType: !1666, size: 8, offset: 1072)
!1775 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !1654, file: !1655, line: 529, baseType: !1666, size: 8, offset: 1080)
!1776 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !1654, file: !1655, line: 530, baseType: !1666, size: 8, offset: 1088)
!1777 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !1654, file: !1655, line: 531, baseType: !1666, size: 8, offset: 1096)
!1778 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !1654, file: !1655, line: 532, baseType: !1666, size: 8, offset: 1104)
!1779 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !1654, file: !1655, line: 533, baseType: !1666, size: 8, offset: 1112)
!1780 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !1654, file: !1655, line: 534, baseType: !1666, size: 8, offset: 1120)
!1781 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !1654, file: !1655, line: 535, baseType: !1666, size: 8, offset: 1128)
!1782 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !1654, file: !1655, line: 536, baseType: !1666, size: 8, offset: 1136)
!1783 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !1654, file: !1655, line: 537, baseType: !1666, size: 8, offset: 1144)
!1784 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !1654, file: !1655, line: 538, baseType: !1666, size: 8, offset: 1152)
!1785 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !1654, file: !1655, line: 539, baseType: !1666, size: 8, offset: 1160)
!1786 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !1654, file: !1655, line: 540, baseType: !1666, size: 8, offset: 1168)
!1787 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !1654, file: !1655, line: 541, baseType: !1666, size: 8, offset: 1176)
!1788 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !1654, file: !1655, line: 542, baseType: !1666, size: 8, offset: 1184)
!1789 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !1654, file: !1655, line: 543, baseType: !1666, size: 8, offset: 1192)
!1790 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !1654, file: !1655, line: 544, baseType: !1666, size: 8, offset: 1200)
!1791 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !1654, file: !1655, line: 545, baseType: !1666, size: 8, offset: 1208)
!1792 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !1654, file: !1655, line: 546, baseType: !1666, size: 8, offset: 1216)
!1793 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !1654, file: !1655, line: 547, baseType: !1666, size: 8, offset: 1224)
!1794 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !1654, file: !1655, line: 548, baseType: !1666, size: 8, offset: 1232)
!1795 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !1654, file: !1655, line: 549, baseType: !1666, size: 8, offset: 1240)
!1796 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !1654, file: !1655, line: 550, baseType: !1666, size: 8, offset: 1248)
!1797 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !1654, file: !1655, line: 551, baseType: !1666, size: 8, offset: 1256)
!1798 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !1654, file: !1655, line: 552, baseType: !1666, size: 8, offset: 1264)
!1799 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !1654, file: !1655, line: 553, baseType: !1666, size: 8, offset: 1272)
!1800 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !1654, file: !1655, line: 554, baseType: !1666, size: 8, offset: 1280)
!1801 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !1654, file: !1655, line: 555, baseType: !1666, size: 8, offset: 1288)
!1802 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !1654, file: !1655, line: 556, baseType: !1666, size: 8, offset: 1296)
!1803 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !1654, file: !1655, line: 557, baseType: !1666, size: 8, offset: 1304)
!1804 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !1654, file: !1655, line: 558, baseType: !1666, size: 8, offset: 1312)
!1805 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !1654, file: !1655, line: 559, baseType: !1666, size: 8, offset: 1320)
!1806 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !1654, file: !1655, line: 560, baseType: !1666, size: 8, offset: 1328)
!1807 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !1654, file: !1655, line: 561, baseType: !1666, size: 8, offset: 1336)
!1808 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !1654, file: !1655, line: 562, baseType: !1666, size: 8, offset: 1344)
!1809 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !1654, file: !1655, line: 563, baseType: !1666, size: 8, offset: 1352)
!1810 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !1654, file: !1655, line: 564, baseType: !1666, size: 8, offset: 1360)
!1811 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !1654, file: !1655, line: 565, baseType: !1666, size: 8, offset: 1368)
!1812 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !1654, file: !1655, line: 566, baseType: !1666, size: 8, offset: 1376)
!1813 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !1654, file: !1655, line: 567, baseType: !1666, size: 8, offset: 1384)
!1814 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !1654, file: !1655, line: 568, baseType: !1666, size: 8, offset: 1392)
!1815 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !1654, file: !1655, line: 569, baseType: !1666, size: 8, offset: 1400)
!1816 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !1654, file: !1655, line: 570, baseType: !1666, size: 8, offset: 1408)
!1817 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !1654, file: !1655, line: 571, baseType: !1666, size: 8, offset: 1416)
!1818 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !1654, file: !1655, line: 572, baseType: !1666, size: 8, offset: 1424)
!1819 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !1654, file: !1655, line: 573, baseType: !1666, size: 8, offset: 1432)
!1820 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !1654, file: !1655, line: 574, baseType: !1666, size: 8, offset: 1440)
!1821 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !712, file: !155, line: 3405, baseType: !1822, size: 384)
!1822 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !155, line: 3352, size: 384, elements: !1823)
!1823 = !{!1824, !1825}
!1824 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !1822, file: !155, line: 3353, baseType: !748, size: 192)
!1825 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !1822, file: !155, line: 3356, baseType: !1826, size: 192, offset: 192)
!1826 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !1655, line: 578, size: 192, elements: !1827)
!1827 = !{!1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838}
!1828 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !1826, file: !1655, line: 580, baseType: !806, size: 32)
!1829 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !1826, file: !1655, line: 581, baseType: !806, size: 32, offset: 32)
!1830 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !1826, file: !1655, line: 582, baseType: !806, size: 32, offset: 64)
!1831 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !1826, file: !1655, line: 583, baseType: !806, size: 32, offset: 96)
!1832 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !1826, file: !1655, line: 584, baseType: !829, size: 8, offset: 128)
!1833 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !1826, file: !1655, line: 585, baseType: !829, size: 8, offset: 136)
!1834 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !1826, file: !1655, line: 586, baseType: !829, size: 8, offset: 144)
!1835 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !1826, file: !1655, line: 587, baseType: !829, size: 8, offset: 152)
!1836 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !1826, file: !1655, line: 588, baseType: !829, size: 8, offset: 160)
!1837 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !1826, file: !1655, line: 589, baseType: !829, size: 8, offset: 168)
!1838 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !1826, file: !1655, line: 590, baseType: !829, size: 8, offset: 176)
!1839 = !DIDerivedType(tag: DW_TAG_member, name: "gsops", scope: !687, file: !405, line: 739, baseType: !1840, size: 448)
!1840 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops", file: !405, line: 350, size: 448, elements: !1841)
!1841 = !{!1842, !1848}
!1842 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1840, file: !405, line: 353, baseType: !1843, size: 384)
!1843 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_ops_base", file: !405, line: 333, size: 384, elements: !1844)
!1844 = !{!1845, !1846, !1847}
!1845 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1843, file: !405, line: 336, baseType: !690, size: 256)
!1846 = !DIDerivedType(tag: DW_TAG_member, name: "def_ops", scope: !1843, file: !405, line: 343, baseType: !1327, size: 64, offset: 256)
!1847 = !DIDerivedType(tag: DW_TAG_member, name: "use_ops", scope: !1843, file: !405, line: 344, baseType: !1334, size: 64, offset: 320)
!1848 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1840, file: !405, line: 359, baseType: !1290, size: 64, offset: 384)
!1849 = !DIDerivedType(tag: DW_TAG_member, name: "gsmembase", scope: !687, file: !405, line: 740, baseType: !1850, size: 512)
!1850 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops_base", file: !405, line: 365, size: 512, elements: !1851)
!1851 = !{!1852, !1853, !1854}
!1852 = !DIDerivedType(tag: DW_TAG_member, name: "opbase", scope: !1850, file: !405, line: 368, baseType: !1843, size: 384)
!1853 = !DIDerivedType(tag: DW_TAG_member, name: "vdef", scope: !1850, file: !405, line: 373, baseType: !710, size: 64, offset: 384)
!1854 = !DIDerivedType(tag: DW_TAG_member, name: "vuse", scope: !1850, file: !405, line: 374, baseType: !710, size: 64, offset: 448)
!1855 = !DIDerivedType(tag: DW_TAG_member, name: "gsmem", scope: !687, file: !405, line: 741, baseType: !1856, size: 576)
!1856 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_with_memory_ops", file: !405, line: 380, size: 576, elements: !1857)
!1857 = !{!1858, !1859}
!1858 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1856, file: !405, line: 383, baseType: !1850, size: 512)
!1859 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1856, file: !405, line: 389, baseType: !1290, size: 64, offset: 512)
!1860 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !687, file: !405, line: 742, baseType: !1861, size: 320)
!1861 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp", file: !405, line: 395, size: 320, elements: !1862)
!1862 = !{!1863, !1864}
!1863 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1861, file: !405, line: 397, baseType: !690, size: 256)
!1864 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1861, file: !405, line: 400, baseType: !675, size: 64, offset: 256)
!1865 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_bind", scope: !687, file: !405, line: 743, baseType: !1866, size: 448)
!1866 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_bind", file: !405, line: 406, size: 448, elements: !1867)
!1867 = !{!1868, !1869, !1870, !1871}
!1868 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1866, file: !405, line: 408, baseType: !690, size: 256)
!1869 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !1866, file: !405, line: 412, baseType: !710, size: 64, offset: 256)
!1870 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !1866, file: !405, line: 420, baseType: !710, size: 64, offset: 320)
!1871 = !DIDerivedType(tag: DW_TAG_member, name: "body", scope: !1866, file: !405, line: 423, baseType: !675, size: 64, offset: 384)
!1872 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_catch", scope: !687, file: !405, line: 744, baseType: !1873, size: 384)
!1873 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_catch", file: !405, line: 429, size: 384, elements: !1874)
!1874 = !{!1875, !1876, !1877}
!1875 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1873, file: !405, line: 431, baseType: !690, size: 256)
!1876 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1873, file: !405, line: 434, baseType: !710, size: 64, offset: 256)
!1877 = !DIDerivedType(tag: DW_TAG_member, name: "handler", scope: !1873, file: !405, line: 437, baseType: !675, size: 64, offset: 320)
!1878 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_filter", scope: !687, file: !405, line: 745, baseType: !1879, size: 384)
!1879 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_filter", file: !405, line: 443, size: 384, elements: !1880)
!1880 = !{!1881, !1882, !1883}
!1881 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1879, file: !405, line: 445, baseType: !690, size: 256)
!1882 = !DIDerivedType(tag: DW_TAG_member, name: "types", scope: !1879, file: !405, line: 449, baseType: !710, size: 64, offset: 256)
!1883 = !DIDerivedType(tag: DW_TAG_member, name: "failure", scope: !1879, file: !405, line: 453, baseType: !675, size: 64, offset: 320)
!1884 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_mnt", scope: !687, file: !405, line: 746, baseType: !1885, size: 320)
!1885 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_mnt", file: !405, line: 459, size: 320, elements: !1886)
!1886 = !{!1887, !1888}
!1887 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1885, file: !405, line: 461, baseType: !690, size: 256)
!1888 = !DIDerivedType(tag: DW_TAG_member, name: "fndecl", scope: !1885, file: !405, line: 464, baseType: !710, size: 64, offset: 256)
!1889 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_phi", scope: !687, file: !405, line: 747, baseType: !1890, size: 768)
!1890 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_phi", file: !405, line: 469, size: 768, elements: !1891)
!1891 = !{!1892, !1893, !1894, !1895, !1896}
!1892 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1890, file: !405, line: 471, baseType: !690, size: 256)
!1893 = !DIDerivedType(tag: DW_TAG_member, name: "capacity", scope: !1890, file: !405, line: 474, baseType: !7, size: 32, offset: 256)
!1894 = !DIDerivedType(tag: DW_TAG_member, name: "nargs", scope: !1890, file: !405, line: 475, baseType: !7, size: 32, offset: 288)
!1895 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !1890, file: !405, line: 478, baseType: !710, size: 64, offset: 320)
!1896 = !DIDerivedType(tag: DW_TAG_member, name: "args", scope: !1890, file: !405, line: 481, baseType: !1897, size: 384, offset: 384)
!1897 = !DICompositeType(tag: DW_TAG_array_type, baseType: !1898, size: 384, elements: !810)
!1898 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "phi_arg_d", file: !155, line: 1917, size: 384, elements: !1899)
!1899 = !{!1900, !1901, !1902}
!1900 = !DIDerivedType(tag: DW_TAG_member, name: "imm_use", scope: !1898, file: !155, line: 1920, baseType: !1339, size: 256)
!1901 = !DIDerivedType(tag: DW_TAG_member, name: "def", scope: !1898, file: !155, line: 1921, baseType: !710, size: 64, offset: 256)
!1902 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !1898, file: !155, line: 1922, baseType: !703, size: 32, offset: 320)
!1903 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_eh_ctrl", scope: !687, file: !405, line: 748, baseType: !1904, size: 320)
!1904 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_eh_ctrl", file: !405, line: 487, size: 320, elements: !1905)
!1905 = !{!1906, !1907}
!1906 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1904, file: !405, line: 490, baseType: !690, size: 256)
!1907 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !1904, file: !405, line: 494, baseType: !806, size: 32, offset: 256)
!1908 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_try", scope: !687, file: !405, line: 749, baseType: !1909, size: 384)
!1909 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_try", file: !405, line: 500, size: 384, elements: !1910)
!1910 = !{!1911, !1912, !1913}
!1911 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1909, file: !405, line: 502, baseType: !690, size: 256)
!1912 = !DIDerivedType(tag: DW_TAG_member, name: "eval", scope: !1909, file: !405, line: 506, baseType: !675, size: 64, offset: 256)
!1913 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1909, file: !405, line: 510, baseType: !675, size: 64, offset: 320)
!1914 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_wce", scope: !687, file: !405, line: 750, baseType: !1915, size: 320)
!1915 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_wce", file: !405, line: 529, size: 320, elements: !1916)
!1916 = !{!1917, !1918}
!1917 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1915, file: !405, line: 531, baseType: !690, size: 256)
!1918 = !DIDerivedType(tag: DW_TAG_member, name: "cleanup", scope: !1915, file: !405, line: 540, baseType: !675, size: 64, offset: 256)
!1919 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_asm", scope: !687, file: !405, line: 751, baseType: !1920, size: 704)
!1920 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_asm", file: !405, line: 546, size: 704, elements: !1921)
!1921 = !{!1922, !1923, !1924, !1925, !1926, !1927, !1928}
!1922 = !DIDerivedType(tag: DW_TAG_member, name: "membase", scope: !1920, file: !405, line: 549, baseType: !1850, size: 512)
!1923 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !1920, file: !405, line: 553, baseType: !908, size: 64, offset: 512)
!1924 = !DIDerivedType(tag: DW_TAG_member, name: "ni", scope: !1920, file: !405, line: 557, baseType: !829, size: 8, offset: 576)
!1925 = !DIDerivedType(tag: DW_TAG_member, name: "no", scope: !1920, file: !405, line: 558, baseType: !829, size: 8, offset: 584)
!1926 = !DIDerivedType(tag: DW_TAG_member, name: "nc", scope: !1920, file: !405, line: 559, baseType: !829, size: 8, offset: 592)
!1927 = !DIDerivedType(tag: DW_TAG_member, name: "nl", scope: !1920, file: !405, line: 560, baseType: !829, size: 8, offset: 600)
!1928 = !DIDerivedType(tag: DW_TAG_member, name: "op", scope: !1920, file: !405, line: 566, baseType: !1290, size: 64, offset: 640)
!1929 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_critical", scope: !687, file: !405, line: 752, baseType: !1930, size: 384)
!1930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_critical", file: !405, line: 571, size: 384, elements: !1931)
!1931 = !{!1932, !1933}
!1932 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1930, file: !405, line: 573, baseType: !1861, size: 320)
!1933 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !1930, file: !405, line: 577, baseType: !710, size: 64, offset: 320)
!1934 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_for", scope: !687, file: !405, line: 753, baseType: !1935, size: 576)
!1935 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_for", file: !405, line: 600, size: 576, elements: !1936)
!1936 = !{!1937, !1938, !1939, !1940, !1949}
!1937 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1935, file: !405, line: 602, baseType: !1861, size: 320)
!1938 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1935, file: !405, line: 605, baseType: !710, size: 64, offset: 320)
!1939 = !DIDerivedType(tag: DW_TAG_member, name: "collapse", scope: !1935, file: !405, line: 609, baseType: !1240, size: 64, offset: 384)
!1940 = !DIDerivedType(tag: DW_TAG_member, name: "iter", scope: !1935, file: !405, line: 612, baseType: !1941, size: 64, offset: 448)
!1941 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1942, size: 64)
!1942 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_omp_for_iter", file: !405, line: 581, size: 320, elements: !1943)
!1943 = !{!1944, !1945, !1946, !1947, !1948}
!1944 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !1942, file: !405, line: 583, baseType: !154, size: 32)
!1945 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !1942, file: !405, line: 586, baseType: !710, size: 64, offset: 64)
!1946 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !1942, file: !405, line: 589, baseType: !710, size: 64, offset: 128)
!1947 = !DIDerivedType(tag: DW_TAG_member, name: "final", scope: !1942, file: !405, line: 592, baseType: !710, size: 64, offset: 192)
!1948 = !DIDerivedType(tag: DW_TAG_member, name: "incr", scope: !1942, file: !405, line: 595, baseType: !710, size: 64, offset: 256)
!1949 = !DIDerivedType(tag: DW_TAG_member, name: "pre_body", scope: !1935, file: !405, line: 616, baseType: !675, size: 64, offset: 512)
!1950 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_parallel", scope: !687, file: !405, line: 754, baseType: !1951, size: 512)
!1951 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_parallel", file: !405, line: 622, size: 512, elements: !1952)
!1952 = !{!1953, !1954, !1955, !1956}
!1953 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1951, file: !405, line: 624, baseType: !1861, size: 320)
!1954 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1951, file: !405, line: 628, baseType: !710, size: 64, offset: 320)
!1955 = !DIDerivedType(tag: DW_TAG_member, name: "child_fn", scope: !1951, file: !405, line: 632, baseType: !710, size: 64, offset: 384)
!1956 = !DIDerivedType(tag: DW_TAG_member, name: "data_arg", scope: !1951, file: !405, line: 636, baseType: !710, size: 64, offset: 448)
!1957 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_task", scope: !687, file: !405, line: 755, baseType: !1958, size: 704)
!1958 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_task", file: !405, line: 642, size: 704, elements: !1959)
!1959 = !{!1960, !1961, !1962, !1963}
!1960 = !DIDerivedType(tag: DW_TAG_member, name: "par", scope: !1958, file: !405, line: 644, baseType: !1951, size: 512)
!1961 = !DIDerivedType(tag: DW_TAG_member, name: "copy_fn", scope: !1958, file: !405, line: 648, baseType: !710, size: 64, offset: 512)
!1962 = !DIDerivedType(tag: DW_TAG_member, name: "arg_size", scope: !1958, file: !405, line: 652, baseType: !710, size: 64, offset: 576)
!1963 = !DIDerivedType(tag: DW_TAG_member, name: "arg_align", scope: !1958, file: !405, line: 653, baseType: !710, size: 64, offset: 640)
!1964 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_sections", scope: !687, file: !405, line: 756, baseType: !1965, size: 448)
!1965 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_sections", file: !405, line: 663, size: 448, elements: !1966)
!1966 = !{!1967, !1968, !1969}
!1967 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1965, file: !405, line: 665, baseType: !1861, size: 320)
!1968 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1965, file: !405, line: 668, baseType: !710, size: 64, offset: 320)
!1969 = !DIDerivedType(tag: DW_TAG_member, name: "control", scope: !1965, file: !405, line: 673, baseType: !710, size: 64, offset: 384)
!1970 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_single", scope: !687, file: !405, line: 757, baseType: !1971, size: 384)
!1971 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_single", file: !405, line: 694, size: 384, elements: !1972)
!1972 = !{!1973, !1974}
!1973 = !DIDerivedType(tag: DW_TAG_member, name: "omp", scope: !1971, file: !405, line: 696, baseType: !1861, size: 320)
!1974 = !DIDerivedType(tag: DW_TAG_member, name: "clauses", scope: !1971, file: !405, line: 699, baseType: !710, size: 64, offset: 320)
!1975 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_continue", scope: !687, file: !405, line: 758, baseType: !1976, size: 384)
!1976 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_continue", file: !405, line: 681, size: 384, elements: !1977)
!1977 = !{!1978, !1979, !1980}
!1978 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1976, file: !405, line: 683, baseType: !690, size: 256)
!1979 = !DIDerivedType(tag: DW_TAG_member, name: "control_def", scope: !1976, file: !405, line: 686, baseType: !710, size: 64, offset: 256)
!1980 = !DIDerivedType(tag: DW_TAG_member, name: "control_use", scope: !1976, file: !405, line: 689, baseType: !710, size: 64, offset: 320)
!1981 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_load", scope: !687, file: !405, line: 759, baseType: !1982, size: 384)
!1982 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_load", file: !405, line: 707, size: 384, elements: !1983)
!1983 = !{!1984, !1985, !1986}
!1984 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1982, file: !405, line: 709, baseType: !690, size: 256)
!1985 = !DIDerivedType(tag: DW_TAG_member, name: "rhs", scope: !1982, file: !405, line: 712, baseType: !710, size: 64, offset: 256)
!1986 = !DIDerivedType(tag: DW_TAG_member, name: "lhs", scope: !1982, file: !405, line: 712, baseType: !710, size: 64, offset: 320)
!1987 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_omp_atomic_store", scope: !687, file: !405, line: 760, baseType: !1988, size: 320)
!1988 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_statement_omp_atomic_store", file: !405, line: 718, size: 320, elements: !1989)
!1989 = !{!1990, !1991}
!1990 = !DIDerivedType(tag: DW_TAG_member, name: "gsbase", scope: !1988, file: !405, line: 720, baseType: !690, size: 256)
!1991 = !DIDerivedType(tag: DW_TAG_member, name: "val", scope: !1988, file: !405, line: 723, baseType: !710, size: 64, offset: 256)
!1992 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !682, file: !405, line: 138, baseType: !681, size: 64, offset: 64)
!1993 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !682, file: !405, line: 139, baseType: !681, size: 64, offset: 128)
!1994 = !DIDerivedType(tag: DW_TAG_member, name: "last", scope: !677, file: !405, line: 146, baseType: !680, size: 64, offset: 64)
!1995 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !677, file: !405, line: 152, baseType: !675, size: 64, offset: 128)
!1996 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !672, file: !144, line: 130, baseType: !883, size: 64)
!1997 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !667, file: !144, line: 134, baseType: !988, size: 64, offset: 192)
!1998 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !667, file: !144, line: 137, baseType: !710, size: 64, offset: 256)
!1999 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !667, file: !144, line: 138, baseType: !703, size: 32, offset: 320)
!2000 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !667, file: !144, line: 142, baseType: !7, size: 32, offset: 352)
!2001 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !667, file: !144, line: 144, baseType: !806, size: 32, offset: 384)
!2002 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !667, file: !144, line: 145, baseType: !806, size: 32, offset: 416)
!2003 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !667, file: !144, line: 146, baseType: !2004, size: 64, offset: 448)
!2004 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !144, line: 119, baseType: !765)
!2005 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !650, file: !144, line: 220, baseType: !653, size: 64, offset: 64)
!2006 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !650, file: !144, line: 223, baseType: !988, size: 64, offset: 128)
!2007 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !650, file: !144, line: 226, baseType: !1369, size: 64, offset: 192)
!2008 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !650, file: !144, line: 229, baseType: !2009, size: 128, offset: 256)
!2009 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2010, size: 128, elements: !952)
!2010 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2011, size: 64)
!2011 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !144, line: 229, flags: DIFlagFwdDecl)
!2012 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !650, file: !144, line: 232, baseType: !649, size: 64, offset: 384)
!2013 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !650, file: !144, line: 233, baseType: !649, size: 64, offset: 448)
!2014 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !650, file: !144, line: 238, baseType: !2015, size: 64, offset: 512)
!2015 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !144, line: 235, size: 64, elements: !2016)
!2016 = !{!2017, !2023}
!2017 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !2015, file: !144, line: 236, baseType: !2018, size: 64)
!2018 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2019, size: 64)
!2019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !144, line: 273, size: 128, elements: !2020)
!2020 = !{!2021, !2022}
!2021 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !2019, file: !144, line: 275, baseType: !675, size: 64)
!2022 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !2019, file: !144, line: 278, baseType: !675, size: 64, offset: 64)
!2023 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2015, file: !144, line: 237, baseType: !2024, size: 64)
!2024 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2025, size: 64)
!2025 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !144, line: 259, size: 320, elements: !2026)
!2026 = !{!2027, !2028, !2029, !2030, !2031}
!2027 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !2025, file: !144, line: 261, baseType: !883, size: 64)
!2028 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !2025, file: !144, line: 262, baseType: !883, size: 64, offset: 64)
!2029 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !2025, file: !144, line: 266, baseType: !883, size: 64, offset: 128)
!2030 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !2025, file: !144, line: 267, baseType: !883, size: 64, offset: 192)
!2031 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2025, file: !144, line: 270, baseType: !806, size: 32, offset: 256)
!2032 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !650, file: !144, line: 241, baseType: !2004, size: 64, offset: 576)
!2033 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !650, file: !144, line: 244, baseType: !806, size: 32, offset: 640)
!2034 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !650, file: !144, line: 247, baseType: !806, size: 32, offset: 672)
!2035 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !650, file: !144, line: 250, baseType: !806, size: 32, offset: 704)
!2036 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !650, file: !144, line: 253, baseType: !806, size: 32, offset: 736)
!2037 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !650, file: !144, line: 256, baseType: !806, size: 32, offset: 768)
!2038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !806, size: 64)
!2039 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1369, size: 64)
!2040 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !641, line: 112, baseType: !2041)
!2041 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2042, size: 64)
!2042 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !650)
!2043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2044, size: 64)
!2044 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_heap", file: !144, line: 283, baseType: !2045)
!2045 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_heap", file: !144, line: 283, size: 128, elements: !2046)
!2046 = !{!2047}
!2047 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2045, file: !144, line: 283, baseType: !1192, size: 128)
!2048 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2049, size: 64)
!2049 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !687)
!2050 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2051, size: 64)
!2051 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_heap", file: !144, line: 152, baseType: !2052)
!2052 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_heap", file: !144, line: 152, size: 128, elements: !2053)
!2053 = !{!2054}
!2054 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2052, file: !144, line: 152, baseType: !658, size: 128)
!2055 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2056, size: 64)
!2056 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !2057, line: 32, baseType: !2058)
!2057 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2058 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !2057, line: 32, size: 96, elements: !2059)
!2059 = !{!2060}
!2060 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2058, file: !2057, line: 32, baseType: !2061, size: 96)
!2061 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !2057, line: 31, baseType: !2062)
!2062 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !2057, line: 31, size: 96, elements: !2063)
!2063 = !{!2064, !2065, !2066}
!2064 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2062, file: !2057, line: 31, baseType: !7, size: 32)
!2065 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2062, file: !2057, line: 31, baseType: !7, size: 32, offset: 32)
!2066 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2062, file: !2057, line: 31, baseType: !2067, size: 32, offset: 64)
!2067 = !DICompositeType(tag: DW_TAG_array_type, baseType: !806, size: 32, elements: !810)
!2068 = !{!0}
!2069 = !{i32 7, !"Dwarf Version", i32 4}
!2070 = !{i32 2, !"Debug Info Version", i32 3}
!2071 = !{i32 1, !"wchar_size", i32 4}
!2072 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!2073 = distinct !DISubprogram(name: "remove_path", scope: !3, file: !3, line: 276, type: !2074, scopeLine: 277, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2074 = !DISubroutineType(types: !2075)
!2075 = !{!829, !665}
!2076 = !{}
!2077 = !DILocalVariable(name: "e", arg: 1, scope: !2073, file: !3, line: 276, type: !665)
!2078 = !DILocation(line: 276, column: 19, scope: !2073)
!2079 = !DILocalVariable(name: "ae", scope: !2073, file: !3, line: 278, type: !665)
!2080 = !DILocation(line: 278, column: 8, scope: !2073)
!2081 = !DILocalVariable(name: "rem_bbs", scope: !2073, file: !3, line: 279, type: !647)
!2082 = !DILocation(line: 279, column: 16, scope: !2073)
!2083 = !DILocalVariable(name: "bord_bbs", scope: !2073, file: !3, line: 279, type: !647)
!2084 = !DILocation(line: 279, column: 26, scope: !2073)
!2085 = !DILocalVariable(name: "from", scope: !2073, file: !3, line: 279, type: !648)
!2086 = !DILocation(line: 279, column: 36, scope: !2073)
!2087 = !DILocalVariable(name: "bb", scope: !2073, file: !3, line: 279, type: !648)
!2088 = !DILocation(line: 279, column: 42, scope: !2073)
!2089 = !DILocalVariable(name: "dom_bbs", scope: !2073, file: !3, line: 280, type: !2043)
!2090 = !DILocation(line: 280, column: 28, scope: !2073)
!2091 = !DILocalVariable(name: "i", scope: !2073, file: !3, line: 281, type: !806)
!2092 = !DILocation(line: 281, column: 7, scope: !2073)
!2093 = !DILocalVariable(name: "nrem", scope: !2073, file: !3, line: 281, type: !806)
!2094 = !DILocation(line: 281, column: 10, scope: !2073)
!2095 = !DILocalVariable(name: "n_bord_bbs", scope: !2073, file: !3, line: 281, type: !806)
!2096 = !DILocation(line: 281, column: 16, scope: !2073)
!2097 = !DILocalVariable(name: "seen", scope: !2073, file: !3, line: 282, type: !2098)
!2098 = !DIDerivedType(tag: DW_TAG_typedef, name: "sbitmap", file: !2099, line: 45, baseType: !2100)
!2099 = !DIFile(filename: "./sbitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2100 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2101, size: 64)
!2101 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "simple_bitmap_def", file: !2099, line: 39, size: 192, elements: !2102)
!2102 = !{!2103, !2105, !2106, !2107}
!2103 = !DIDerivedType(tag: DW_TAG_member, name: "popcount", scope: !2101, file: !2099, line: 41, baseType: !2104, size: 64)
!2104 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !829, size: 64)
!2105 = !DIDerivedType(tag: DW_TAG_member, name: "n_bits", scope: !2101, file: !2099, line: 42, baseType: !7, size: 32, offset: 64)
!2106 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2101, file: !2099, line: 43, baseType: !7, size: 32, offset: 96)
!2107 = !DIDerivedType(tag: DW_TAG_member, name: "elms", scope: !2101, file: !2099, line: 44, baseType: !2108, size: 64, offset: 128)
!2108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !763, size: 64, elements: !810)
!2109 = !DILocation(line: 282, column: 11, scope: !2073)
!2110 = !DILocalVariable(name: "irred_invalidated", scope: !2073, file: !3, line: 283, type: !829)
!2111 = !DILocation(line: 283, column: 8, scope: !2073)
!2112 = !DILocation(line: 285, column: 29, scope: !2113)
!2113 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 285, column: 7)
!2114 = !DILocation(line: 285, column: 8, scope: !2113)
!2115 = !DILocation(line: 285, column: 7, scope: !2073)
!2116 = !DILocation(line: 286, column: 5, scope: !2113)
!2117 = !DILocation(line: 293, column: 7, scope: !2118)
!2118 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 293, column: 7)
!2119 = !DILocation(line: 293, column: 10, scope: !2118)
!2120 = !DILocation(line: 293, column: 16, scope: !2118)
!2121 = !DILocation(line: 293, column: 7, scope: !2073)
!2122 = !DILocation(line: 294, column: 23, scope: !2118)
!2123 = !DILocation(line: 294, column: 5, scope: !2118)
!2124 = !DILocation(line: 300, column: 23, scope: !2125)
!2125 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 300, column: 7)
!2126 = !DILocation(line: 300, column: 26, scope: !2125)
!2127 = !DILocation(line: 300, column: 8, scope: !2125)
!2128 = !DILocation(line: 300, column: 7, scope: !2073)
!2129 = !DILocation(line: 301, column: 39, scope: !2125)
!2130 = !DILocation(line: 301, column: 27, scope: !2125)
!2131 = !DILocation(line: 301, column: 9, scope: !2125)
!2132 = !DILocation(line: 301, column: 7, scope: !2125)
!2133 = !DILocation(line: 301, column: 5, scope: !2125)
!2134 = !DILocation(line: 307, column: 3, scope: !2073)
!2135 = !DILocation(line: 307, column: 22, scope: !2073)
!2136 = !DILocation(line: 307, column: 25, scope: !2073)
!2137 = !DILocation(line: 307, column: 30, scope: !2073)
!2138 = !DILocation(line: 307, column: 10, scope: !2073)
!2139 = !DILocation(line: 308, column: 3, scope: !2073)
!2140 = !DILocation(line: 309, column: 8, scope: !2073)
!2141 = !DILocation(line: 309, column: 11, scope: !2073)
!2142 = !DILocation(line: 309, column: 16, scope: !2073)
!2143 = !DILocation(line: 309, column: 29, scope: !2073)
!2144 = !DILocation(line: 309, column: 36, scope: !2073)
!2145 = !DILocation(line: 309, column: 39, scope: !2073)
!2146 = !DILocation(line: 308, column: 6, scope: !2073)
!2147 = !DILocation(line: 0, scope: !2073)
!2148 = !DILocation(line: 310, column: 13, scope: !2073)
!2149 = !DILocation(line: 310, column: 16, scope: !2073)
!2150 = !DILocation(line: 310, column: 21, scope: !2073)
!2151 = !DILocation(line: 310, column: 5, scope: !2073)
!2152 = distinct !{!2152, !2134, !2153}
!2153 = !DILocation(line: 310, column: 52, scope: !2073)
!2154 = !DILocation(line: 313, column: 21, scope: !2073)
!2155 = !DILocation(line: 313, column: 10, scope: !2073)
!2156 = !DILocation(line: 313, column: 8, scope: !2073)
!2157 = !DILocation(line: 315, column: 14, scope: !2073)
!2158 = !DILocation(line: 316, column: 14, scope: !2073)
!2159 = !DILocation(line: 316, column: 12, scope: !2073)
!2160 = !DILocation(line: 317, column: 25, scope: !2073)
!2161 = !DILocation(line: 317, column: 10, scope: !2073)
!2162 = !DILocation(line: 317, column: 8, scope: !2073)
!2163 = !DILocation(line: 318, column: 17, scope: !2073)
!2164 = !DILocation(line: 318, column: 3, scope: !2073)
!2165 = !DILocation(line: 321, column: 10, scope: !2166)
!2166 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 321, column: 3)
!2167 = !DILocation(line: 321, column: 8, scope: !2166)
!2168 = !DILocation(line: 321, column: 15, scope: !2169)
!2169 = distinct !DILexicalBlock(scope: !2166, file: !3, line: 321, column: 3)
!2170 = !DILocation(line: 321, column: 19, scope: !2169)
!2171 = !DILocation(line: 321, column: 17, scope: !2169)
!2172 = !DILocation(line: 321, column: 3, scope: !2166)
!2173 = !DILocation(line: 322, column: 14, scope: !2169)
!2174 = !DILocation(line: 322, column: 20, scope: !2169)
!2175 = !DILocation(line: 322, column: 28, scope: !2169)
!2176 = !DILocation(line: 322, column: 32, scope: !2169)
!2177 = !DILocation(line: 322, column: 5, scope: !2169)
!2178 = !DILocation(line: 321, column: 26, scope: !2169)
!2179 = !DILocation(line: 321, column: 3, scope: !2169)
!2180 = distinct !{!2180, !2172, !2181}
!2181 = !DILocation(line: 322, column: 37, scope: !2166)
!2182 = !DILocation(line: 323, column: 10, scope: !2183)
!2183 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 323, column: 3)
!2184 = !DILocation(line: 323, column: 8, scope: !2183)
!2185 = !DILocation(line: 323, column: 15, scope: !2186)
!2186 = distinct !DILexicalBlock(scope: !2183, file: !3, line: 323, column: 3)
!2187 = !DILocation(line: 323, column: 19, scope: !2186)
!2188 = !DILocation(line: 323, column: 17, scope: !2186)
!2189 = !DILocation(line: 323, column: 3, scope: !2183)
!2190 = !DILocalVariable(name: "ei", scope: !2191, file: !3, line: 325, type: !2192)
!2191 = distinct !DILexicalBlock(scope: !2186, file: !3, line: 324, column: 5)
!2192 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !144, line: 682, baseType: !2193)
!2193 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !144, line: 679, size: 128, elements: !2194)
!2194 = !{!2195, !2196}
!2195 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2193, file: !144, line: 680, baseType: !7, size: 32)
!2196 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !2193, file: !144, line: 681, baseType: !2197, size: 64, offset: 64)
!2197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !653, size: 64)
!2198 = !DILocation(line: 325, column: 21, scope: !2191)
!2199 = !DILocation(line: 326, column: 12, scope: !2191)
!2200 = !DILocation(line: 326, column: 20, scope: !2191)
!2201 = !DILocation(line: 326, column: 10, scope: !2191)
!2202 = !DILocation(line: 327, column: 7, scope: !2203)
!2203 = distinct !DILexicalBlock(scope: !2191, file: !3, line: 327, column: 7)
!2204 = !DILocation(line: 327, column: 7, scope: !2205)
!2205 = distinct !DILexicalBlock(scope: !2203, file: !3, line: 327, column: 7)
!2206 = !DILocation(line: 328, column: 6, scope: !2207)
!2207 = distinct !DILexicalBlock(scope: !2205, file: !3, line: 328, column: 6)
!2208 = !DILocation(line: 328, column: 10, scope: !2207)
!2209 = !DILocation(line: 328, column: 18, scope: !2207)
!2210 = !DILocation(line: 328, column: 15, scope: !2207)
!2211 = !DILocation(line: 328, column: 33, scope: !2207)
!2212 = !DILocation(line: 328, column: 37, scope: !2207)
!2213 = !DILocation(line: 328, column: 6, scope: !2205)
!2214 = !DILocation(line: 330, column: 15, scope: !2215)
!2215 = distinct !DILexicalBlock(scope: !2207, file: !3, line: 329, column: 4)
!2216 = !DILocation(line: 330, column: 21, scope: !2215)
!2217 = !DILocation(line: 330, column: 25, scope: !2215)
!2218 = !DILocation(line: 330, column: 31, scope: !2215)
!2219 = !DILocation(line: 330, column: 6, scope: !2215)
!2220 = !DILocation(line: 331, column: 31, scope: !2215)
!2221 = !DILocation(line: 331, column: 35, scope: !2215)
!2222 = !DILocation(line: 331, column: 6, scope: !2215)
!2223 = !DILocation(line: 331, column: 25, scope: !2215)
!2224 = !DILocation(line: 331, column: 29, scope: !2215)
!2225 = !DILocation(line: 333, column: 10, scope: !2226)
!2226 = distinct !DILexicalBlock(scope: !2215, file: !3, line: 333, column: 10)
!2227 = !DILocation(line: 333, column: 14, scope: !2226)
!2228 = !DILocation(line: 333, column: 20, scope: !2226)
!2229 = !DILocation(line: 333, column: 10, scope: !2215)
!2230 = !DILocation(line: 334, column: 26, scope: !2226)
!2231 = !DILocation(line: 334, column: 8, scope: !2226)
!2232 = !DILocation(line: 335, column: 4, scope: !2215)
!2233 = distinct !{!2233, !2202, !2234}
!2234 = !DILocation(line: 335, column: 4, scope: !2203)
!2235 = !DILocation(line: 336, column: 5, scope: !2191)
!2236 = !DILocation(line: 323, column: 26, scope: !2186)
!2237 = !DILocation(line: 323, column: 3, scope: !2186)
!2238 = distinct !{!2238, !2189, !2239}
!2239 = !DILocation(line: 336, column: 5, scope: !2183)
!2240 = !DILocation(line: 339, column: 10, scope: !2073)
!2241 = !DILocation(line: 339, column: 13, scope: !2073)
!2242 = !DILocation(line: 339, column: 8, scope: !2073)
!2243 = !DILocation(line: 340, column: 18, scope: !2073)
!2244 = !DILocation(line: 340, column: 3, scope: !2073)
!2245 = !DILocation(line: 341, column: 11, scope: !2073)
!2246 = !DILocation(line: 344, column: 10, scope: !2247)
!2247 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 344, column: 3)
!2248 = !DILocation(line: 344, column: 8, scope: !2247)
!2249 = !DILocation(line: 344, column: 15, scope: !2250)
!2250 = distinct !DILexicalBlock(scope: !2247, file: !3, line: 344, column: 3)
!2251 = !DILocation(line: 344, column: 19, scope: !2250)
!2252 = !DILocation(line: 344, column: 17, scope: !2250)
!2253 = !DILocation(line: 344, column: 3, scope: !2247)
!2254 = !DILocation(line: 345, column: 9, scope: !2255)
!2255 = distinct !DILexicalBlock(scope: !2250, file: !3, line: 345, column: 9)
!2256 = !DILocation(line: 345, column: 17, scope: !2255)
!2257 = !DILocation(line: 345, column: 21, scope: !2255)
!2258 = !DILocation(line: 345, column: 34, scope: !2255)
!2259 = !DILocation(line: 345, column: 44, scope: !2255)
!2260 = !DILocation(line: 345, column: 52, scope: !2255)
!2261 = !DILocation(line: 345, column: 41, scope: !2255)
!2262 = !DILocation(line: 345, column: 9, scope: !2250)
!2263 = !DILocation(line: 346, column: 25, scope: !2255)
!2264 = !DILocation(line: 346, column: 33, scope: !2255)
!2265 = !DILocation(line: 346, column: 37, scope: !2255)
!2266 = !DILocation(line: 346, column: 7, scope: !2255)
!2267 = !DILocation(line: 345, column: 53, scope: !2255)
!2268 = !DILocation(line: 344, column: 26, scope: !2250)
!2269 = !DILocation(line: 344, column: 3, scope: !2250)
!2270 = distinct !{!2270, !2253, !2271}
!2271 = !DILocation(line: 346, column: 48, scope: !2247)
!2272 = !DILocation(line: 348, column: 15, scope: !2073)
!2273 = !DILocation(line: 348, column: 24, scope: !2073)
!2274 = !DILocation(line: 348, column: 3, scope: !2073)
!2275 = !DILocation(line: 349, column: 9, scope: !2073)
!2276 = !DILocation(line: 349, column: 3, scope: !2073)
!2277 = !DILocation(line: 352, column: 17, scope: !2073)
!2278 = !DILocation(line: 352, column: 3, scope: !2073)
!2279 = !DILocation(line: 353, column: 10, scope: !2280)
!2280 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 353, column: 3)
!2281 = !DILocation(line: 353, column: 8, scope: !2280)
!2282 = !DILocation(line: 353, column: 15, scope: !2283)
!2283 = distinct !DILexicalBlock(scope: !2280, file: !3, line: 353, column: 3)
!2284 = !DILocation(line: 353, column: 19, scope: !2283)
!2285 = !DILocation(line: 353, column: 17, scope: !2283)
!2286 = !DILocation(line: 353, column: 3, scope: !2280)
!2287 = !DILocalVariable(name: "ldom", scope: !2288, file: !3, line: 355, type: !648)
!2288 = distinct !DILexicalBlock(scope: !2283, file: !3, line: 354, column: 5)
!2289 = !DILocation(line: 355, column: 19, scope: !2288)
!2290 = !DILocation(line: 357, column: 53, scope: !2288)
!2291 = !DILocation(line: 357, column: 62, scope: !2288)
!2292 = !DILocation(line: 357, column: 12, scope: !2288)
!2293 = !DILocation(line: 357, column: 10, scope: !2288)
!2294 = !DILocation(line: 358, column: 11, scope: !2295)
!2295 = distinct !DILexicalBlock(scope: !2288, file: !3, line: 358, column: 11)
!2296 = !DILocation(line: 358, column: 11, scope: !2288)
!2297 = !DILocation(line: 359, column: 2, scope: !2295)
!2298 = !DILocation(line: 360, column: 16, scope: !2288)
!2299 = !DILocation(line: 360, column: 22, scope: !2288)
!2300 = !DILocation(line: 360, column: 26, scope: !2288)
!2301 = !DILocation(line: 360, column: 7, scope: !2288)
!2302 = !DILocation(line: 362, column: 50, scope: !2303)
!2303 = distinct !DILexicalBlock(scope: !2288, file: !3, line: 362, column: 7)
!2304 = !DILocation(line: 362, column: 19, scope: !2303)
!2305 = !DILocation(line: 362, column: 17, scope: !2303)
!2306 = !DILocation(line: 362, column: 12, scope: !2303)
!2307 = !DILocation(line: 363, column: 5, scope: !2308)
!2308 = distinct !DILexicalBlock(scope: !2303, file: !3, line: 362, column: 7)
!2309 = !DILocation(line: 362, column: 7, scope: !2303)
!2310 = !DILocation(line: 365, column: 39, scope: !2311)
!2311 = distinct !DILexicalBlock(scope: !2308, file: !3, line: 365, column: 6)
!2312 = !DILocation(line: 365, column: 45, scope: !2311)
!2313 = !DILocation(line: 365, column: 7, scope: !2311)
!2314 = !DILocation(line: 365, column: 6, scope: !2308)
!2315 = !DILocation(line: 366, column: 4, scope: !2311)
!2316 = !DILocation(line: 365, column: 49, scope: !2311)
!2317 = !DILocation(line: 364, column: 42, scope: !2308)
!2318 = !DILocation(line: 364, column: 12, scope: !2308)
!2319 = !DILocation(line: 364, column: 10, scope: !2308)
!2320 = !DILocation(line: 362, column: 7, scope: !2308)
!2321 = distinct !{!2321, !2309, !2322}
!2322 = !DILocation(line: 366, column: 4, scope: !2303)
!2323 = !DILocation(line: 367, column: 5, scope: !2288)
!2324 = !DILocation(line: 353, column: 32, scope: !2283)
!2325 = !DILocation(line: 353, column: 3, scope: !2283)
!2326 = distinct !{!2326, !2286, !2327}
!2327 = !DILocation(line: 367, column: 5, scope: !2280)
!2328 = !DILocation(line: 369, column: 9, scope: !2073)
!2329 = !DILocation(line: 369, column: 3, scope: !2073)
!2330 = !DILocation(line: 372, column: 43, scope: !2073)
!2331 = !DILocation(line: 372, column: 3, scope: !2073)
!2332 = !DILocation(line: 373, column: 3, scope: !2073)
!2333 = !DILocation(line: 374, column: 9, scope: !2073)
!2334 = !DILocation(line: 374, column: 3, scope: !2073)
!2335 = !DILocation(line: 378, column: 22, scope: !2073)
!2336 = !DILocation(line: 378, column: 3, scope: !2073)
!2337 = !DILocation(line: 379, column: 24, scope: !2073)
!2338 = !DILocation(line: 379, column: 30, scope: !2073)
!2339 = !DILocation(line: 379, column: 3, scope: !2073)
!2340 = !DILocation(line: 381, column: 7, scope: !2341)
!2341 = distinct !DILexicalBlock(scope: !2073, file: !3, line: 381, column: 7)
!2342 = !DILocation(line: 382, column: 7, scope: !2341)
!2343 = !DILocation(line: 382, column: 10, scope: !2341)
!2344 = !DILocation(line: 381, column: 7, scope: !2073)
!2345 = !DILocation(line: 383, column: 5, scope: !2341)
!2346 = !DILocation(line: 385, column: 3, scope: !2073)
!2347 = !DILocation(line: 386, column: 1, scope: !2073)
!2348 = distinct !DISubprogram(name: "single_pred_p", scope: !144, file: !144, line: 634, type: !2349, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2349 = !DISubroutineType(types: !2350)
!2350 = !{!829, !2040}
!2351 = !DILocalVariable(name: "bb", arg: 1, scope: !2348, file: !144, line: 634, type: !2040)
!2352 = !DILocation(line: 634, column: 34, scope: !2348)
!2353 = !DILocation(line: 636, column: 10, scope: !2348)
!2354 = !DILocation(line: 636, column: 33, scope: !2348)
!2355 = !DILocation(line: 636, column: 3, scope: !2348)
!2356 = distinct !DISubprogram(name: "single_pred_edge", scope: !144, file: !144, line: 653, type: !2357, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2357 = !DISubroutineType(types: !2358)
!2358 = !{!665, !2040}
!2359 = !DILocalVariable(name: "bb", arg: 1, scope: !2356, file: !144, line: 653, type: !2040)
!2360 = !DILocation(line: 653, column: 37, scope: !2356)
!2361 = !DILocation(line: 655, column: 3, scope: !2356)
!2362 = !DILocation(line: 656, column: 10, scope: !2356)
!2363 = !DILocation(line: 656, column: 3, scope: !2356)
!2364 = distinct !DISubprogram(name: "loop_outer", scope: !6, file: !6, line: 434, type: !2365, scopeLine: 435, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2365 = !DISubroutineType(types: !2366)
!2366 = !{!1369, !2367}
!2367 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2368, size: 64)
!2368 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1370)
!2369 = !DILocalVariable(name: "loop", arg: 1, scope: !2364, file: !6, line: 434, type: !2367)
!2370 = !DILocation(line: 434, column: 32, scope: !2364)
!2371 = !DILocalVariable(name: "n", scope: !2364, file: !6, line: 436, type: !7)
!2372 = !DILocation(line: 436, column: 12, scope: !2364)
!2373 = !DILocation(line: 436, column: 16, scope: !2364)
!2374 = !DILocation(line: 438, column: 7, scope: !2375)
!2375 = distinct !DILexicalBlock(scope: !2364, file: !6, line: 438, column: 7)
!2376 = !DILocation(line: 438, column: 9, scope: !2375)
!2377 = !DILocation(line: 438, column: 7, scope: !2364)
!2378 = !DILocation(line: 439, column: 5, scope: !2375)
!2379 = !DILocation(line: 441, column: 10, scope: !2364)
!2380 = !DILocation(line: 441, column: 3, scope: !2364)
!2381 = !DILocation(line: 442, column: 1, scope: !2364)
!2382 = distinct !DISubprogram(name: "unloop", scope: !3, file: !3, line: 780, type: !2383, scopeLine: 781, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2383 = !DISubroutineType(types: !2384)
!2384 = !{null, !1369, !2104}
!2385 = !DILocalVariable(name: "loop", arg: 1, scope: !2382, file: !3, line: 780, type: !1369)
!2386 = !DILocation(line: 780, column: 22, scope: !2382)
!2387 = !DILocalVariable(name: "irred_invalidated", arg: 2, scope: !2382, file: !3, line: 780, type: !2104)
!2388 = !DILocation(line: 780, column: 34, scope: !2382)
!2389 = !DILocalVariable(name: "body", scope: !2382, file: !3, line: 782, type: !647)
!2390 = !DILocation(line: 782, column: 16, scope: !2382)
!2391 = !DILocalVariable(name: "ploop", scope: !2382, file: !3, line: 783, type: !1369)
!2392 = !DILocation(line: 783, column: 16, scope: !2382)
!2393 = !DILocalVariable(name: "i", scope: !2382, file: !3, line: 784, type: !7)
!2394 = !DILocation(line: 784, column: 12, scope: !2382)
!2395 = !DILocalVariable(name: "n", scope: !2382, file: !3, line: 784, type: !7)
!2396 = !DILocation(line: 784, column: 15, scope: !2382)
!2397 = !DILocalVariable(name: "latch", scope: !2382, file: !3, line: 785, type: !648)
!2398 = !DILocation(line: 785, column: 15, scope: !2382)
!2399 = !DILocation(line: 785, column: 23, scope: !2382)
!2400 = !DILocation(line: 785, column: 29, scope: !2382)
!2401 = !DILocalVariable(name: "dummy", scope: !2382, file: !3, line: 786, type: !829)
!2402 = !DILocation(line: 786, column: 8, scope: !2382)
!2403 = !DILocation(line: 788, column: 28, scope: !2404)
!2404 = distinct !DILexicalBlock(scope: !2382, file: !3, line: 788, column: 7)
!2405 = !DILocation(line: 788, column: 7, scope: !2404)
!2406 = !DILocation(line: 788, column: 35, scope: !2404)
!2407 = !DILocation(line: 788, column: 41, scope: !2404)
!2408 = !DILocation(line: 788, column: 7, scope: !2382)
!2409 = !DILocation(line: 789, column: 6, scope: !2404)
!2410 = !DILocation(line: 789, column: 24, scope: !2404)
!2411 = !DILocation(line: 789, column: 5, scope: !2404)
!2412 = !DILocation(line: 797, column: 25, scope: !2382)
!2413 = !DILocation(line: 797, column: 10, scope: !2382)
!2414 = !DILocation(line: 797, column: 8, scope: !2382)
!2415 = !DILocation(line: 798, column: 7, scope: !2382)
!2416 = !DILocation(line: 798, column: 13, scope: !2382)
!2417 = !DILocation(line: 798, column: 5, scope: !2382)
!2418 = !DILocation(line: 799, column: 10, scope: !2419)
!2419 = distinct !DILexicalBlock(scope: !2382, file: !3, line: 799, column: 3)
!2420 = !DILocation(line: 799, column: 8, scope: !2419)
!2421 = !DILocation(line: 799, column: 15, scope: !2422)
!2422 = distinct !DILexicalBlock(scope: !2419, file: !3, line: 799, column: 3)
!2423 = !DILocation(line: 799, column: 19, scope: !2422)
!2424 = !DILocation(line: 799, column: 17, scope: !2422)
!2425 = !DILocation(line: 799, column: 3, scope: !2419)
!2426 = !DILocation(line: 800, column: 9, scope: !2427)
!2427 = distinct !DILexicalBlock(scope: !2422, file: !3, line: 800, column: 9)
!2428 = !DILocation(line: 800, column: 14, scope: !2427)
!2429 = !DILocation(line: 800, column: 18, scope: !2427)
!2430 = !DILocation(line: 800, column: 33, scope: !2427)
!2431 = !DILocation(line: 800, column: 30, scope: !2427)
!2432 = !DILocation(line: 800, column: 9, scope: !2422)
!2433 = !DILocation(line: 802, column: 24, scope: !2434)
!2434 = distinct !DILexicalBlock(scope: !2427, file: !3, line: 801, column: 7)
!2435 = !DILocation(line: 802, column: 29, scope: !2434)
!2436 = !DILocation(line: 802, column: 2, scope: !2434)
!2437 = !DILocation(line: 803, column: 18, scope: !2434)
!2438 = !DILocation(line: 803, column: 23, scope: !2434)
!2439 = !DILocation(line: 803, column: 39, scope: !2434)
!2440 = !DILocation(line: 803, column: 27, scope: !2434)
!2441 = !DILocation(line: 803, column: 2, scope: !2434)
!2442 = !DILocation(line: 804, column: 7, scope: !2434)
!2443 = !DILocation(line: 799, column: 23, scope: !2422)
!2444 = !DILocation(line: 799, column: 3, scope: !2422)
!2445 = distinct !{!2445, !2425, !2446}
!2446 = !DILocation(line: 804, column: 7, scope: !2419)
!2447 = !DILocation(line: 805, column: 8, scope: !2382)
!2448 = !DILocation(line: 805, column: 3, scope: !2382)
!2449 = !DILocation(line: 807, column: 3, scope: !2382)
!2450 = !DILocation(line: 807, column: 10, scope: !2382)
!2451 = !DILocation(line: 807, column: 16, scope: !2382)
!2452 = !DILocation(line: 809, column: 15, scope: !2453)
!2453 = distinct !DILexicalBlock(scope: !2382, file: !3, line: 808, column: 5)
!2454 = !DILocation(line: 809, column: 21, scope: !2453)
!2455 = !DILocation(line: 809, column: 13, scope: !2453)
!2456 = !DILocation(line: 810, column: 35, scope: !2453)
!2457 = !DILocation(line: 810, column: 7, scope: !2453)
!2458 = !DILocation(line: 811, column: 44, scope: !2453)
!2459 = !DILocation(line: 811, column: 32, scope: !2453)
!2460 = !DILocation(line: 811, column: 51, scope: !2453)
!2461 = !DILocation(line: 811, column: 7, scope: !2453)
!2462 = distinct !{!2462, !2449, !2463}
!2463 = !DILocation(line: 812, column: 5, scope: !2382)
!2464 = !DILocation(line: 815, column: 16, scope: !2382)
!2465 = !DILocation(line: 815, column: 3, scope: !2382)
!2466 = !DILocation(line: 817, column: 34, scope: !2382)
!2467 = !DILocation(line: 817, column: 16, scope: !2382)
!2468 = !DILocation(line: 817, column: 3, scope: !2382)
!2469 = !DILocation(line: 822, column: 22, scope: !2382)
!2470 = !DILocation(line: 822, column: 3, scope: !2382)
!2471 = !DILocation(line: 823, column: 1, scope: !2382)
!2472 = distinct !DISubprogram(name: "find_path", scope: !3, file: !3, line: 73, type: !2473, scopeLine: 74, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2473 = !DISubroutineType(types: !2474)
!2474 = !{!806, !665, !2475}
!2475 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !647, size: 64)
!2476 = !DILocalVariable(name: "e", arg: 1, scope: !2472, file: !3, line: 73, type: !665)
!2477 = !DILocation(line: 73, column: 17, scope: !2472)
!2478 = !DILocalVariable(name: "bbs", arg: 2, scope: !2472, file: !3, line: 73, type: !2475)
!2479 = !DILocation(line: 73, column: 34, scope: !2472)
!2480 = !DILocation(line: 75, column: 3, scope: !2472)
!2481 = !DILocation(line: 78, column: 10, scope: !2472)
!2482 = !DILocation(line: 78, column: 4, scope: !2472)
!2483 = !DILocation(line: 78, column: 8, scope: !2472)
!2484 = !DILocation(line: 79, column: 30, scope: !2472)
!2485 = !DILocation(line: 79, column: 33, scope: !2472)
!2486 = !DILocation(line: 79, column: 55, scope: !2472)
!2487 = !DILocation(line: 79, column: 54, scope: !2472)
!2488 = !DILocation(line: 80, column: 9, scope: !2472)
!2489 = !DILocation(line: 80, column: 25, scope: !2472)
!2490 = !DILocation(line: 80, column: 28, scope: !2472)
!2491 = !DILocation(line: 79, column: 10, scope: !2472)
!2492 = !DILocation(line: 79, column: 3, scope: !2472)
!2493 = distinct !DISubprogram(name: "SET_BIT", scope: !2099, file: !2099, line: 63, type: !2494, scopeLine: 64, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2494 = !DISubroutineType(types: !2495)
!2495 = !{null, !2098, !7}
!2496 = !DILocalVariable(name: "map", arg: 1, scope: !2493, file: !2099, line: 63, type: !2098)
!2497 = !DILocation(line: 63, column: 18, scope: !2493)
!2498 = !DILocalVariable(name: "bitno", arg: 2, scope: !2493, file: !2099, line: 63, type: !7)
!2499 = !DILocation(line: 63, column: 36, scope: !2493)
!2500 = !DILocation(line: 65, column: 7, scope: !2501)
!2501 = distinct !DILexicalBlock(scope: !2493, file: !2099, line: 65, column: 7)
!2502 = !DILocation(line: 65, column: 12, scope: !2501)
!2503 = !DILocation(line: 65, column: 7, scope: !2493)
!2504 = !DILocalVariable(name: "oldbit", scope: !2505, file: !2099, line: 67, type: !829)
!2505 = distinct !DILexicalBlock(scope: !2501, file: !2099, line: 66, column: 5)
!2506 = !DILocation(line: 67, column: 12, scope: !2505)
!2507 = !DILocation(line: 68, column: 16, scope: !2505)
!2508 = !DILocation(line: 68, column: 14, scope: !2505)
!2509 = !DILocation(line: 69, column: 12, scope: !2510)
!2510 = distinct !DILexicalBlock(scope: !2505, file: !2099, line: 69, column: 11)
!2511 = !DILocation(line: 69, column: 11, scope: !2505)
!2512 = !DILocation(line: 70, column: 2, scope: !2510)
!2513 = !DILocation(line: 70, column: 7, scope: !2510)
!2514 = !DILocation(line: 70, column: 16, scope: !2510)
!2515 = !DILocation(line: 70, column: 22, scope: !2510)
!2516 = !DILocation(line: 70, column: 41, scope: !2510)
!2517 = !DILocation(line: 71, column: 5, scope: !2505)
!2518 = !DILocation(line: 73, column: 33, scope: !2493)
!2519 = !DILocation(line: 73, column: 40, scope: !2493)
!2520 = !DILocation(line: 73, column: 29, scope: !2493)
!2521 = !DILocation(line: 72, column: 3, scope: !2493)
!2522 = !DILocation(line: 72, column: 8, scope: !2493)
!2523 = !DILocation(line: 72, column: 13, scope: !2493)
!2524 = !DILocation(line: 72, column: 19, scope: !2493)
!2525 = !DILocation(line: 73, column: 5, scope: !2493)
!2526 = !DILocation(line: 74, column: 1, scope: !2493)
!2527 = distinct !DISubprogram(name: "ei_start_1", scope: !144, file: !144, line: 696, type: !2528, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2528 = !DISubroutineType(types: !2529)
!2529 = !{!2192, !2197}
!2530 = !DILocalVariable(name: "ev", arg: 1, scope: !2527, file: !144, line: 696, type: !2197)
!2531 = !DILocation(line: 696, column: 28, scope: !2527)
!2532 = !DILocalVariable(name: "i", scope: !2527, file: !144, line: 698, type: !2192)
!2533 = !DILocation(line: 698, column: 17, scope: !2527)
!2534 = !DILocation(line: 700, column: 5, scope: !2527)
!2535 = !DILocation(line: 700, column: 11, scope: !2527)
!2536 = !DILocation(line: 701, column: 17, scope: !2527)
!2537 = !DILocation(line: 701, column: 5, scope: !2527)
!2538 = !DILocation(line: 701, column: 15, scope: !2527)
!2539 = !DILocation(line: 703, column: 3, scope: !2527)
!2540 = distinct !DISubprogram(name: "ei_cond", scope: !144, file: !144, line: 771, type: !2541, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2541 = !DISubroutineType(types: !2542)
!2542 = !{!829, !2192, !2543}
!2543 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !665, size: 64)
!2544 = !DILocalVariable(name: "ei", arg: 1, scope: !2540, file: !144, line: 771, type: !2192)
!2545 = !DILocation(line: 771, column: 24, scope: !2540)
!2546 = !DILocalVariable(name: "p", arg: 2, scope: !2540, file: !144, line: 771, type: !2543)
!2547 = !DILocation(line: 771, column: 34, scope: !2540)
!2548 = !DILocation(line: 773, column: 8, scope: !2549)
!2549 = distinct !DILexicalBlock(scope: !2540, file: !144, line: 773, column: 7)
!2550 = !DILocation(line: 773, column: 7, scope: !2540)
!2551 = !DILocation(line: 775, column: 12, scope: !2552)
!2552 = distinct !DILexicalBlock(scope: !2549, file: !144, line: 774, column: 5)
!2553 = !DILocation(line: 775, column: 8, scope: !2552)
!2554 = !DILocation(line: 775, column: 10, scope: !2552)
!2555 = !DILocation(line: 776, column: 7, scope: !2552)
!2556 = !DILocation(line: 780, column: 8, scope: !2557)
!2557 = distinct !DILexicalBlock(scope: !2549, file: !144, line: 779, column: 5)
!2558 = !DILocation(line: 780, column: 10, scope: !2557)
!2559 = !DILocation(line: 781, column: 7, scope: !2557)
!2560 = !DILocation(line: 783, column: 1, scope: !2540)
!2561 = distinct !DISubprogram(name: "ei_next", scope: !144, file: !144, line: 736, type: !2562, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2562 = !DISubroutineType(types: !2563)
!2563 = !{null, !2564}
!2564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2192, size: 64)
!2565 = !DILocalVariable(name: "i", arg: 1, scope: !2561, file: !144, line: 736, type: !2564)
!2566 = !DILocation(line: 736, column: 25, scope: !2561)
!2567 = !DILocation(line: 738, column: 3, scope: !2561)
!2568 = !DILocation(line: 739, column: 3, scope: !2561)
!2569 = !DILocation(line: 739, column: 6, scope: !2561)
!2570 = !DILocation(line: 739, column: 11, scope: !2561)
!2571 = !DILocation(line: 740, column: 1, scope: !2561)
!2572 = distinct !DISubprogram(name: "remove_bbs", scope: !3, file: !3, line: 58, type: !2573, scopeLine: 59, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2573 = !DISubroutineType(types: !2574)
!2574 = !{null, !647, !806}
!2575 = !DILocalVariable(name: "bbs", arg: 1, scope: !2572, file: !3, line: 58, type: !647)
!2576 = !DILocation(line: 58, column: 26, scope: !2572)
!2577 = !DILocalVariable(name: "nbbs", arg: 2, scope: !2572, file: !3, line: 58, type: !806)
!2578 = !DILocation(line: 58, column: 35, scope: !2572)
!2579 = !DILocalVariable(name: "i", scope: !2572, file: !3, line: 60, type: !806)
!2580 = !DILocation(line: 60, column: 7, scope: !2572)
!2581 = !DILocation(line: 62, column: 10, scope: !2582)
!2582 = distinct !DILexicalBlock(scope: !2572, file: !3, line: 62, column: 3)
!2583 = !DILocation(line: 62, column: 8, scope: !2582)
!2584 = !DILocation(line: 62, column: 15, scope: !2585)
!2585 = distinct !DILexicalBlock(scope: !2582, file: !3, line: 62, column: 3)
!2586 = !DILocation(line: 62, column: 19, scope: !2585)
!2587 = !DILocation(line: 62, column: 17, scope: !2585)
!2588 = !DILocation(line: 62, column: 3, scope: !2582)
!2589 = !DILocation(line: 63, column: 25, scope: !2585)
!2590 = !DILocation(line: 63, column: 29, scope: !2585)
!2591 = !DILocation(line: 63, column: 5, scope: !2585)
!2592 = !DILocation(line: 62, column: 26, scope: !2585)
!2593 = !DILocation(line: 62, column: 3, scope: !2585)
!2594 = distinct !{!2594, !2588, !2595}
!2595 = !DILocation(line: 63, column: 31, scope: !2582)
!2596 = !DILocation(line: 64, column: 1, scope: !2572)
!2597 = distinct !DISubprogram(name: "VEC_basic_block_heap_safe_push", scope: !144, file: !144, line: 283, type: !2598, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2598 = !DISubroutineType(types: !2599)
!2599 = !{!647, !2600, !648}
!2600 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2043, size: 64)
!2601 = !DILocalVariable(name: "vec_", arg: 1, scope: !2597, file: !144, line: 283, type: !2600)
!2602 = !DILocation(line: 283, column: 1, scope: !2597)
!2603 = !DILocalVariable(name: "obj_", arg: 2, scope: !2597, file: !144, line: 283, type: !648)
!2604 = distinct !DISubprogram(name: "VEC_basic_block_heap_free", scope: !144, file: !144, line: 283, type: !2605, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2605 = !DISubroutineType(types: !2606)
!2606 = !{null, !2600}
!2607 = !DILocalVariable(name: "vec_", arg: 1, scope: !2604, file: !144, line: 283, type: !2600)
!2608 = !DILocation(line: 283, column: 1, scope: !2604)
!2609 = !DILocation(line: 283, column: 1, scope: !2610)
!2610 = distinct !DILexicalBlock(scope: !2604, file: !144, line: 283, column: 1)
!2611 = distinct !DISubprogram(name: "fix_bb_placements", scope: !3, file: !3, line: 172, type: !2612, scopeLine: 174, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2612 = !DISubroutineType(types: !2613)
!2613 = !{null, !648, !2104}
!2614 = !DILocalVariable(name: "from", arg: 1, scope: !2611, file: !3, line: 172, type: !648)
!2615 = !DILocation(line: 172, column: 32, scope: !2611)
!2616 = !DILocalVariable(name: "irred_invalidated", arg: 2, scope: !2611, file: !3, line: 173, type: !2104)
!2617 = !DILocation(line: 173, column: 12, scope: !2611)
!2618 = !DILocalVariable(name: "in_queue", scope: !2611, file: !3, line: 175, type: !2098)
!2619 = !DILocation(line: 175, column: 11, scope: !2611)
!2620 = !DILocalVariable(name: "queue", scope: !2611, file: !3, line: 176, type: !647)
!2621 = !DILocation(line: 176, column: 16, scope: !2611)
!2622 = !DILocalVariable(name: "qtop", scope: !2611, file: !3, line: 176, type: !647)
!2623 = !DILocation(line: 176, column: 24, scope: !2611)
!2624 = !DILocalVariable(name: "qbeg", scope: !2611, file: !3, line: 176, type: !647)
!2625 = !DILocation(line: 176, column: 31, scope: !2611)
!2626 = !DILocalVariable(name: "qend", scope: !2611, file: !3, line: 176, type: !647)
!2627 = !DILocation(line: 176, column: 38, scope: !2611)
!2628 = !DILocalVariable(name: "base_loop", scope: !2611, file: !3, line: 177, type: !1369)
!2629 = !DILocation(line: 177, column: 16, scope: !2611)
!2630 = !DILocalVariable(name: "e", scope: !2611, file: !3, line: 178, type: !665)
!2631 = !DILocation(line: 178, column: 8, scope: !2611)
!2632 = !DILocation(line: 187, column: 15, scope: !2611)
!2633 = !DILocation(line: 187, column: 21, scope: !2611)
!2634 = !DILocation(line: 187, column: 13, scope: !2611)
!2635 = !DILocation(line: 188, column: 7, scope: !2636)
!2636 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 188, column: 7)
!2637 = !DILocation(line: 188, column: 20, scope: !2636)
!2638 = !DILocation(line: 188, column: 35, scope: !2636)
!2639 = !DILocation(line: 188, column: 17, scope: !2636)
!2640 = !DILocation(line: 188, column: 7, scope: !2611)
!2641 = !DILocation(line: 189, column: 5, scope: !2636)
!2642 = !DILocation(line: 191, column: 29, scope: !2611)
!2643 = !DILocation(line: 191, column: 14, scope: !2611)
!2644 = !DILocation(line: 191, column: 12, scope: !2611)
!2645 = !DILocation(line: 192, column: 17, scope: !2611)
!2646 = !DILocation(line: 192, column: 3, scope: !2611)
!2647 = !DILocation(line: 193, column: 12, scope: !2611)
!2648 = !DILocation(line: 193, column: 22, scope: !2611)
!2649 = !DILocation(line: 193, column: 28, scope: !2611)
!2650 = !DILocation(line: 193, column: 3, scope: !2611)
!2651 = !DILocation(line: 195, column: 12, scope: !2611)
!2652 = !DILocation(line: 195, column: 22, scope: !2611)
!2653 = !DILocation(line: 195, column: 33, scope: !2611)
!2654 = !DILocation(line: 195, column: 41, scope: !2611)
!2655 = !DILocation(line: 195, column: 3, scope: !2611)
!2656 = !DILocation(line: 197, column: 11, scope: !2611)
!2657 = !DILocation(line: 197, column: 9, scope: !2611)
!2658 = !DILocation(line: 198, column: 10, scope: !2611)
!2659 = !DILocation(line: 198, column: 18, scope: !2611)
!2660 = !DILocation(line: 198, column: 29, scope: !2611)
!2661 = !DILocation(line: 198, column: 16, scope: !2611)
!2662 = !DILocation(line: 198, column: 39, scope: !2611)
!2663 = !DILocation(line: 198, column: 8, scope: !2611)
!2664 = !DILocation(line: 199, column: 10, scope: !2611)
!2665 = !DILocation(line: 199, column: 8, scope: !2611)
!2666 = !DILocation(line: 200, column: 10, scope: !2611)
!2667 = !DILocation(line: 200, column: 16, scope: !2611)
!2668 = !DILocation(line: 200, column: 8, scope: !2611)
!2669 = !DILocation(line: 201, column: 11, scope: !2611)
!2670 = !DILocation(line: 201, column: 4, scope: !2611)
!2671 = !DILocation(line: 201, column: 9, scope: !2611)
!2672 = !DILocation(line: 203, column: 3, scope: !2611)
!2673 = !DILocation(line: 203, column: 10, scope: !2611)
!2674 = !DILocation(line: 203, column: 18, scope: !2611)
!2675 = !DILocation(line: 203, column: 15, scope: !2611)
!2676 = !DILocalVariable(name: "ei", scope: !2677, file: !3, line: 205, type: !2192)
!2677 = distinct !DILexicalBlock(scope: !2611, file: !3, line: 204, column: 5)
!2678 = !DILocation(line: 205, column: 21, scope: !2677)
!2679 = !DILocation(line: 206, column: 15, scope: !2677)
!2680 = !DILocation(line: 206, column: 14, scope: !2677)
!2681 = !DILocation(line: 206, column: 12, scope: !2677)
!2682 = !DILocation(line: 207, column: 11, scope: !2677)
!2683 = !DILocation(line: 208, column: 11, scope: !2684)
!2684 = distinct !DILexicalBlock(scope: !2677, file: !3, line: 208, column: 11)
!2685 = !DILocation(line: 208, column: 19, scope: !2684)
!2686 = !DILocation(line: 208, column: 16, scope: !2684)
!2687 = !DILocation(line: 208, column: 11, scope: !2677)
!2688 = !DILocation(line: 209, column: 9, scope: !2684)
!2689 = !DILocation(line: 209, column: 7, scope: !2684)
!2690 = !DILocation(line: 209, column: 2, scope: !2684)
!2691 = !DILocation(line: 210, column: 18, scope: !2677)
!2692 = !DILocation(line: 210, column: 28, scope: !2677)
!2693 = !DILocation(line: 210, column: 34, scope: !2677)
!2694 = !DILocation(line: 210, column: 7, scope: !2677)
!2695 = !DILocation(line: 212, column: 11, scope: !2696)
!2696 = distinct !DILexicalBlock(scope: !2677, file: !3, line: 212, column: 11)
!2697 = !DILocation(line: 212, column: 17, scope: !2696)
!2698 = !DILocation(line: 212, column: 30, scope: !2696)
!2699 = !DILocation(line: 212, column: 40, scope: !2696)
!2700 = !DILocation(line: 212, column: 37, scope: !2696)
!2701 = !DILocation(line: 212, column: 11, scope: !2677)
!2702 = !DILocation(line: 215, column: 29, scope: !2703)
!2703 = distinct !DILexicalBlock(scope: !2704, file: !3, line: 215, column: 8)
!2704 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 213, column: 2)
!2705 = !DILocation(line: 215, column: 35, scope: !2703)
!2706 = !DILocation(line: 215, column: 9, scope: !2703)
!2707 = !DILocation(line: 215, column: 8, scope: !2704)
!2708 = !DILocation(line: 216, column: 6, scope: !2703)
!2709 = distinct !{!2709, !2672, !2710}
!2710 = !DILocation(line: 267, column: 5, scope: !2611)
!2711 = !DILocation(line: 217, column: 2, scope: !2704)
!2712 = !DILocation(line: 221, column: 27, scope: !2713)
!2713 = distinct !DILexicalBlock(scope: !2714, file: !3, line: 221, column: 8)
!2714 = distinct !DILexicalBlock(scope: !2696, file: !3, line: 219, column: 2)
!2715 = !DILocation(line: 221, column: 9, scope: !2713)
!2716 = !DILocation(line: 221, column: 8, scope: !2714)
!2717 = !DILocation(line: 222, column: 6, scope: !2713)
!2718 = !DILocation(line: 225, column: 7, scope: !2719)
!2719 = distinct !DILexicalBlock(scope: !2677, file: !3, line: 225, column: 7)
!2720 = !DILocation(line: 225, column: 7, scope: !2721)
!2721 = distinct !DILexicalBlock(scope: !2719, file: !3, line: 225, column: 7)
!2722 = !DILocation(line: 227, column: 8, scope: !2723)
!2723 = distinct !DILexicalBlock(scope: !2724, file: !3, line: 227, column: 8)
!2724 = distinct !DILexicalBlock(scope: !2721, file: !3, line: 226, column: 2)
!2725 = !DILocation(line: 227, column: 11, scope: !2723)
!2726 = !DILocation(line: 227, column: 17, scope: !2723)
!2727 = !DILocation(line: 227, column: 8, scope: !2724)
!2728 = !DILocation(line: 228, column: 7, scope: !2723)
!2729 = !DILocation(line: 228, column: 25, scope: !2723)
!2730 = !DILocation(line: 228, column: 6, scope: !2723)
!2731 = !DILocation(line: 229, column: 2, scope: !2724)
!2732 = distinct !{!2732, !2718, !2733}
!2733 = !DILocation(line: 229, column: 2, scope: !2719)
!2734 = !DILocation(line: 232, column: 7, scope: !2735)
!2735 = distinct !DILexicalBlock(scope: !2677, file: !3, line: 232, column: 7)
!2736 = !DILocation(line: 232, column: 7, scope: !2737)
!2737 = distinct !DILexicalBlock(scope: !2735, file: !3, line: 232, column: 7)
!2738 = !DILocalVariable(name: "pred", scope: !2739, file: !3, line: 234, type: !648)
!2739 = distinct !DILexicalBlock(scope: !2737, file: !3, line: 233, column: 2)
!2740 = !DILocation(line: 234, column: 16, scope: !2739)
!2741 = !DILocation(line: 234, column: 23, scope: !2739)
!2742 = !DILocation(line: 234, column: 26, scope: !2739)
!2743 = !DILocalVariable(name: "nca", scope: !2739, file: !3, line: 235, type: !1369)
!2744 = !DILocation(line: 235, column: 17, scope: !2739)
!2745 = !DILocation(line: 237, column: 8, scope: !2746)
!2746 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 237, column: 8)
!2747 = !DILocation(line: 237, column: 11, scope: !2746)
!2748 = !DILocation(line: 237, column: 17, scope: !2746)
!2749 = !DILocation(line: 237, column: 8, scope: !2739)
!2750 = !DILocation(line: 238, column: 7, scope: !2746)
!2751 = !DILocation(line: 238, column: 25, scope: !2746)
!2752 = !DILocation(line: 238, column: 6, scope: !2746)
!2753 = !DILocation(line: 240, column: 8, scope: !2754)
!2754 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 240, column: 8)
!2755 = !DILocation(line: 240, column: 8, scope: !2739)
!2756 = !DILocation(line: 241, column: 6, scope: !2754)
!2757 = !DILocation(line: 246, column: 28, scope: !2739)
!2758 = !DILocation(line: 246, column: 34, scope: !2739)
!2759 = !DILocation(line: 246, column: 47, scope: !2739)
!2760 = !DILocation(line: 246, column: 10, scope: !2739)
!2761 = !DILocation(line: 246, column: 8, scope: !2739)
!2762 = !DILocation(line: 247, column: 8, scope: !2763)
!2763 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 247, column: 8)
!2764 = !DILocation(line: 247, column: 14, scope: !2763)
!2765 = !DILocation(line: 247, column: 29, scope: !2763)
!2766 = !DILocation(line: 247, column: 26, scope: !2763)
!2767 = !DILocation(line: 248, column: 8, scope: !2763)
!2768 = !DILocation(line: 248, column: 12, scope: !2763)
!2769 = !DILocation(line: 248, column: 19, scope: !2763)
!2770 = !DILocation(line: 248, column: 16, scope: !2763)
!2771 = !DILocation(line: 249, column: 5, scope: !2763)
!2772 = !DILocation(line: 249, column: 8, scope: !2763)
!2773 = !DILocation(line: 249, column: 15, scope: !2763)
!2774 = !DILocation(line: 249, column: 21, scope: !2763)
!2775 = !DILocation(line: 249, column: 12, scope: !2763)
!2776 = !DILocation(line: 247, column: 8, scope: !2739)
!2777 = !DILocation(line: 250, column: 13, scope: !2763)
!2778 = !DILocation(line: 250, column: 19, scope: !2763)
!2779 = !DILocation(line: 250, column: 32, scope: !2763)
!2780 = !DILocation(line: 250, column: 11, scope: !2763)
!2781 = !DILocation(line: 250, column: 6, scope: !2763)
!2782 = !DILocation(line: 251, column: 34, scope: !2783)
!2783 = distinct !DILexicalBlock(scope: !2763, file: !3, line: 251, column: 13)
!2784 = !DILocation(line: 251, column: 40, scope: !2783)
!2785 = !DILocation(line: 251, column: 53, scope: !2783)
!2786 = !DILocation(line: 251, column: 59, scope: !2783)
!2787 = !DILocation(line: 251, column: 14, scope: !2783)
!2788 = !DILocation(line: 251, column: 13, scope: !2763)
!2789 = !DILocation(line: 254, column: 8, scope: !2790)
!2790 = distinct !DILexicalBlock(scope: !2783, file: !3, line: 252, column: 6)
!2791 = !DILocation(line: 257, column: 8, scope: !2792)
!2792 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 257, column: 8)
!2793 = !DILocation(line: 257, column: 8, scope: !2739)
!2794 = !DILocation(line: 258, column: 6, scope: !2792)
!2795 = !DILocation(line: 261, column: 12, scope: !2739)
!2796 = !DILocation(line: 261, column: 5, scope: !2739)
!2797 = !DILocation(line: 261, column: 10, scope: !2739)
!2798 = !DILocation(line: 262, column: 8, scope: !2739)
!2799 = !DILocation(line: 263, column: 8, scope: !2800)
!2800 = distinct !DILexicalBlock(scope: !2739, file: !3, line: 263, column: 8)
!2801 = !DILocation(line: 263, column: 16, scope: !2800)
!2802 = !DILocation(line: 263, column: 13, scope: !2800)
!2803 = !DILocation(line: 263, column: 8, scope: !2739)
!2804 = !DILocation(line: 264, column: 13, scope: !2800)
!2805 = !DILocation(line: 264, column: 11, scope: !2800)
!2806 = !DILocation(line: 264, column: 6, scope: !2800)
!2807 = !DILocation(line: 265, column: 13, scope: !2739)
!2808 = !DILocation(line: 265, column: 23, scope: !2739)
!2809 = !DILocation(line: 265, column: 29, scope: !2739)
!2810 = !DILocation(line: 265, column: 4, scope: !2739)
!2811 = !DILocation(line: 266, column: 2, scope: !2739)
!2812 = distinct !{!2812, !2734, !2813}
!2813 = !DILocation(line: 266, column: 2, scope: !2735)
!2814 = !DILocation(line: 268, column: 9, scope: !2611)
!2815 = !DILocation(line: 268, column: 3, scope: !2611)
!2816 = !DILocation(line: 269, column: 9, scope: !2611)
!2817 = !DILocation(line: 269, column: 3, scope: !2611)
!2818 = !DILocation(line: 270, column: 1, scope: !2611)
!2819 = distinct !DISubprogram(name: "fix_loop_placements", scope: !3, file: !3, line: 834, type: !2383, scopeLine: 835, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2820 = !DILocalVariable(name: "loop", arg: 1, scope: !2819, file: !3, line: 834, type: !1369)
!2821 = !DILocation(line: 834, column: 35, scope: !2819)
!2822 = !DILocalVariable(name: "irred_invalidated", arg: 2, scope: !2819, file: !3, line: 834, type: !2104)
!2823 = !DILocation(line: 834, column: 47, scope: !2819)
!2824 = !DILocalVariable(name: "outer", scope: !2819, file: !3, line: 836, type: !1369)
!2825 = !DILocation(line: 836, column: 16, scope: !2819)
!2826 = !DILocation(line: 838, column: 3, scope: !2819)
!2827 = !DILocation(line: 838, column: 22, scope: !2819)
!2828 = !DILocation(line: 838, column: 10, scope: !2819)
!2829 = !DILocation(line: 840, column: 27, scope: !2830)
!2830 = distinct !DILexicalBlock(scope: !2819, file: !3, line: 839, column: 5)
!2831 = !DILocation(line: 840, column: 15, scope: !2830)
!2832 = !DILocation(line: 840, column: 13, scope: !2830)
!2833 = !DILocation(line: 841, column: 32, scope: !2834)
!2834 = distinct !DILexicalBlock(scope: !2830, file: !3, line: 841, column: 11)
!2835 = !DILocation(line: 841, column: 12, scope: !2834)
!2836 = !DILocation(line: 841, column: 11, scope: !2830)
!2837 = !DILocation(line: 842, column: 2, scope: !2834)
!2838 = !DILocation(line: 849, column: 47, scope: !2830)
!2839 = !DILocation(line: 849, column: 26, scope: !2830)
!2840 = !DILocation(line: 849, column: 54, scope: !2830)
!2841 = !DILocation(line: 850, column: 5, scope: !2830)
!2842 = !DILocation(line: 849, column: 7, scope: !2830)
!2843 = !DILocation(line: 851, column: 14, scope: !2830)
!2844 = !DILocation(line: 851, column: 12, scope: !2830)
!2845 = distinct !{!2845, !2826, !2846}
!2846 = !DILocation(line: 852, column: 5, scope: !2819)
!2847 = !DILocation(line: 853, column: 1, scope: !2819)
!2848 = distinct !DISubprogram(name: "loops_state_satisfies_p", scope: !6, file: !6, line: 471, type: !2849, scopeLine: 472, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2849 = !DISubroutineType(types: !2850)
!2850 = !{!829, !7}
!2851 = !DILocalVariable(name: "flags", arg: 1, scope: !2848, file: !6, line: 471, type: !7)
!2852 = !DILocation(line: 471, column: 35, scope: !2848)
!2853 = !DILocation(line: 473, column: 11, scope: !2848)
!2854 = !DILocation(line: 473, column: 26, scope: !2848)
!2855 = !DILocation(line: 473, column: 34, scope: !2848)
!2856 = !DILocation(line: 473, column: 32, scope: !2848)
!2857 = !DILocation(line: 473, column: 44, scope: !2848)
!2858 = !DILocation(line: 473, column: 41, scope: !2848)
!2859 = !DILocation(line: 473, column: 10, scope: !2848)
!2860 = !DILocation(line: 473, column: 3, scope: !2848)
!2861 = distinct !DISubprogram(name: "add_loop", scope: !3, file: !3, line: 402, type: !2862, scopeLine: 403, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2862 = !DISubroutineType(types: !2863)
!2863 = !{null, !1369, !1369}
!2864 = !DILocalVariable(name: "loop", arg: 1, scope: !2861, file: !3, line: 402, type: !1369)
!2865 = !DILocation(line: 402, column: 24, scope: !2861)
!2866 = !DILocalVariable(name: "outer", arg: 2, scope: !2861, file: !3, line: 402, type: !1369)
!2867 = !DILocation(line: 402, column: 43, scope: !2861)
!2868 = !DILocalVariable(name: "bbs", scope: !2861, file: !3, line: 404, type: !647)
!2869 = !DILocation(line: 404, column: 16, scope: !2861)
!2870 = !DILocalVariable(name: "i", scope: !2861, file: !3, line: 405, type: !806)
!2871 = !DILocation(line: 405, column: 7, scope: !2861)
!2872 = !DILocalVariable(name: "n", scope: !2861, file: !3, line: 405, type: !806)
!2873 = !DILocation(line: 405, column: 10, scope: !2861)
!2874 = !DILocalVariable(name: "subloop", scope: !2861, file: !3, line: 406, type: !1369)
!2875 = !DILocation(line: 406, column: 16, scope: !2861)
!2876 = !DILocalVariable(name: "e", scope: !2861, file: !3, line: 407, type: !665)
!2877 = !DILocation(line: 407, column: 8, scope: !2861)
!2878 = !DILocalVariable(name: "ei", scope: !2861, file: !3, line: 408, type: !2192)
!2879 = !DILocation(line: 408, column: 17, scope: !2861)
!2880 = !DILocation(line: 411, column: 19, scope: !2861)
!2881 = !DILocation(line: 411, column: 3, scope: !2861)
!2882 = !DILocation(line: 412, column: 28, scope: !2861)
!2883 = !DILocation(line: 412, column: 35, scope: !2861)
!2884 = !DILocation(line: 412, column: 3, scope: !2861)
!2885 = !DILocation(line: 415, column: 9, scope: !2861)
!2886 = !DILocation(line: 415, column: 7, scope: !2861)
!2887 = !DILocation(line: 416, column: 32, scope: !2861)
!2888 = !DILocation(line: 416, column: 38, scope: !2861)
!2889 = !DILocation(line: 416, column: 43, scope: !2861)
!2890 = !DILocation(line: 416, column: 7, scope: !2861)
!2891 = !DILocation(line: 416, column: 5, scope: !2861)
!2892 = !DILocation(line: 418, column: 10, scope: !2893)
!2893 = distinct !DILexicalBlock(scope: !2861, file: !3, line: 418, column: 3)
!2894 = !DILocation(line: 418, column: 8, scope: !2893)
!2895 = !DILocation(line: 418, column: 15, scope: !2896)
!2896 = distinct !DILexicalBlock(scope: !2893, file: !3, line: 418, column: 3)
!2897 = !DILocation(line: 418, column: 19, scope: !2896)
!2898 = !DILocation(line: 418, column: 17, scope: !2896)
!2899 = !DILocation(line: 418, column: 3, scope: !2893)
!2900 = !DILocation(line: 420, column: 11, scope: !2901)
!2901 = distinct !DILexicalBlock(scope: !2902, file: !3, line: 420, column: 11)
!2902 = distinct !DILexicalBlock(scope: !2896, file: !3, line: 419, column: 5)
!2903 = !DILocation(line: 420, column: 15, scope: !2901)
!2904 = !DILocation(line: 420, column: 19, scope: !2901)
!2905 = !DILocation(line: 420, column: 34, scope: !2901)
!2906 = !DILocation(line: 420, column: 31, scope: !2901)
!2907 = !DILocation(line: 420, column: 11, scope: !2902)
!2908 = !DILocation(line: 422, column: 26, scope: !2909)
!2909 = distinct !DILexicalBlock(scope: !2901, file: !3, line: 421, column: 2)
!2910 = !DILocation(line: 422, column: 30, scope: !2909)
!2911 = !DILocation(line: 422, column: 4, scope: !2909)
!2912 = !DILocation(line: 423, column: 20, scope: !2909)
!2913 = !DILocation(line: 423, column: 24, scope: !2909)
!2914 = !DILocation(line: 423, column: 28, scope: !2909)
!2915 = !DILocation(line: 423, column: 4, scope: !2909)
!2916 = !DILocation(line: 424, column: 4, scope: !2909)
!2917 = !DILocation(line: 427, column: 7, scope: !2902)
!2918 = !DILocation(line: 427, column: 13, scope: !2902)
!2919 = !DILocation(line: 427, column: 22, scope: !2902)
!2920 = !DILocation(line: 430, column: 17, scope: !2902)
!2921 = !DILocation(line: 430, column: 21, scope: !2902)
!2922 = !DILocation(line: 430, column: 25, scope: !2902)
!2923 = !DILocation(line: 430, column: 15, scope: !2902)
!2924 = !DILocation(line: 431, column: 23, scope: !2925)
!2925 = distinct !DILexicalBlock(scope: !2902, file: !3, line: 431, column: 11)
!2926 = !DILocation(line: 431, column: 11, scope: !2925)
!2927 = !DILocation(line: 431, column: 35, scope: !2925)
!2928 = !DILocation(line: 431, column: 32, scope: !2925)
!2929 = !DILocation(line: 432, column: 4, scope: !2925)
!2930 = !DILocation(line: 432, column: 7, scope: !2925)
!2931 = !DILocation(line: 432, column: 16, scope: !2925)
!2932 = !DILocation(line: 432, column: 26, scope: !2925)
!2933 = !DILocation(line: 432, column: 30, scope: !2925)
!2934 = !DILocation(line: 432, column: 23, scope: !2925)
!2935 = !DILocation(line: 431, column: 11, scope: !2902)
!2936 = !DILocation(line: 434, column: 32, scope: !2937)
!2937 = distinct !DILexicalBlock(scope: !2925, file: !3, line: 433, column: 2)
!2938 = !DILocation(line: 434, column: 4, scope: !2937)
!2939 = !DILocation(line: 435, column: 29, scope: !2937)
!2940 = !DILocation(line: 435, column: 35, scope: !2937)
!2941 = !DILocation(line: 435, column: 4, scope: !2937)
!2942 = !DILocation(line: 436, column: 2, scope: !2937)
!2943 = !DILocation(line: 437, column: 5, scope: !2902)
!2944 = !DILocation(line: 418, column: 23, scope: !2896)
!2945 = !DILocation(line: 418, column: 3, scope: !2896)
!2946 = distinct !{!2946, !2899, !2947}
!2947 = !DILocation(line: 437, column: 5, scope: !2893)
!2948 = !DILocation(line: 440, column: 10, scope: !2949)
!2949 = distinct !DILexicalBlock(scope: !2861, file: !3, line: 440, column: 3)
!2950 = !DILocation(line: 440, column: 8, scope: !2949)
!2951 = !DILocation(line: 440, column: 15, scope: !2952)
!2952 = distinct !DILexicalBlock(scope: !2949, file: !3, line: 440, column: 3)
!2953 = !DILocation(line: 440, column: 19, scope: !2952)
!2954 = !DILocation(line: 440, column: 17, scope: !2952)
!2955 = !DILocation(line: 440, column: 3, scope: !2949)
!2956 = !DILocation(line: 442, column: 7, scope: !2957)
!2957 = distinct !DILexicalBlock(scope: !2958, file: !3, line: 442, column: 7)
!2958 = distinct !DILexicalBlock(scope: !2952, file: !3, line: 441, column: 5)
!2959 = !DILocation(line: 442, column: 7, scope: !2960)
!2960 = distinct !DILexicalBlock(scope: !2957, file: !3, line: 442, column: 7)
!2961 = !DILocation(line: 444, column: 22, scope: !2962)
!2962 = distinct !DILexicalBlock(scope: !2960, file: !3, line: 443, column: 2)
!2963 = !DILocation(line: 444, column: 4, scope: !2962)
!2964 = !DILocation(line: 445, column: 2, scope: !2962)
!2965 = distinct !{!2965, !2956, !2966}
!2966 = !DILocation(line: 445, column: 2, scope: !2957)
!2967 = !DILocation(line: 446, column: 5, scope: !2958)
!2968 = !DILocation(line: 440, column: 23, scope: !2952)
!2969 = !DILocation(line: 440, column: 3, scope: !2952)
!2970 = distinct !{!2970, !2955, !2971}
!2971 = !DILocation(line: 446, column: 5, scope: !2949)
!2972 = !DILocation(line: 448, column: 9, scope: !2861)
!2973 = !DILocation(line: 448, column: 3, scope: !2861)
!2974 = !DILocation(line: 449, column: 1, scope: !2861)
!2975 = distinct !DISubprogram(name: "place_new_loop", scope: !3, file: !3, line: 391, type: !2976, scopeLine: 392, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2976 = !DISubroutineType(types: !2977)
!2977 = !{null, !1369}
!2978 = !DILocalVariable(name: "loop", arg: 1, scope: !2975, file: !3, line: 391, type: !1369)
!2979 = !DILocation(line: 391, column: 30, scope: !2975)
!2980 = !DILocation(line: 393, column: 15, scope: !2975)
!2981 = !DILocation(line: 393, column: 3, scope: !2975)
!2982 = !DILocation(line: 393, column: 9, scope: !2975)
!2983 = !DILocation(line: 393, column: 13, scope: !2975)
!2984 = !DILocation(line: 394, column: 3, scope: !2975)
!2985 = !DILocation(line: 395, column: 1, scope: !2975)
!2986 = distinct !DISubprogram(name: "scale_loop_frequencies", scope: !3, file: !3, line: 453, type: !2987, scopeLine: 454, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!2987 = !DISubroutineType(types: !2988)
!2988 = !{null, !1369, !806, !806}
!2989 = !DILocalVariable(name: "loop", arg: 1, scope: !2986, file: !3, line: 453, type: !1369)
!2990 = !DILocation(line: 453, column: 38, scope: !2986)
!2991 = !DILocalVariable(name: "num", arg: 2, scope: !2986, file: !3, line: 453, type: !806)
!2992 = !DILocation(line: 453, column: 48, scope: !2986)
!2993 = !DILocalVariable(name: "den", arg: 3, scope: !2986, file: !3, line: 453, type: !806)
!2994 = !DILocation(line: 453, column: 57, scope: !2986)
!2995 = !DILocalVariable(name: "bbs", scope: !2986, file: !3, line: 455, type: !647)
!2996 = !DILocation(line: 455, column: 16, scope: !2986)
!2997 = !DILocation(line: 457, column: 24, scope: !2986)
!2998 = !DILocation(line: 457, column: 9, scope: !2986)
!2999 = !DILocation(line: 457, column: 7, scope: !2986)
!3000 = !DILocation(line: 458, column: 30, scope: !2986)
!3001 = !DILocation(line: 458, column: 35, scope: !2986)
!3002 = !DILocation(line: 458, column: 41, scope: !2986)
!3003 = !DILocation(line: 458, column: 52, scope: !2986)
!3004 = !DILocation(line: 458, column: 57, scope: !2986)
!3005 = !DILocation(line: 458, column: 3, scope: !2986)
!3006 = !DILocation(line: 459, column: 9, scope: !2986)
!3007 = !DILocation(line: 459, column: 3, scope: !2986)
!3008 = !DILocation(line: 460, column: 1, scope: !2986)
!3009 = distinct !DISubprogram(name: "create_empty_if_region_on_edge", scope: !3, file: !3, line: 534, type: !3010, scopeLine: 535, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3010 = !DISubroutineType(types: !3011)
!3011 = !{!665, !665, !710}
!3012 = !DILocalVariable(name: "entry_edge", arg: 1, scope: !3009, file: !3, line: 534, type: !665)
!3013 = !DILocation(line: 534, column: 38, scope: !3009)
!3014 = !DILocalVariable(name: "condition", arg: 2, scope: !3009, file: !3, line: 534, type: !710)
!3015 = !DILocation(line: 534, column: 55, scope: !3009)
!3016 = !DILocalVariable(name: "cond_bb", scope: !3009, file: !3, line: 537, type: !648)
!3017 = !DILocation(line: 537, column: 15, scope: !3009)
!3018 = !DILocalVariable(name: "true_bb", scope: !3009, file: !3, line: 537, type: !648)
!3019 = !DILocation(line: 537, column: 24, scope: !3009)
!3020 = !DILocalVariable(name: "false_bb", scope: !3009, file: !3, line: 537, type: !648)
!3021 = !DILocation(line: 537, column: 33, scope: !3009)
!3022 = !DILocalVariable(name: "join_bb", scope: !3009, file: !3, line: 537, type: !648)
!3023 = !DILocation(line: 537, column: 43, scope: !3009)
!3024 = !DILocalVariable(name: "e_true", scope: !3009, file: !3, line: 538, type: !665)
!3025 = !DILocation(line: 538, column: 8, scope: !3009)
!3026 = !DILocalVariable(name: "e_false", scope: !3009, file: !3, line: 538, type: !665)
!3027 = !DILocation(line: 538, column: 16, scope: !3009)
!3028 = !DILocalVariable(name: "exit_edge", scope: !3009, file: !3, line: 538, type: !665)
!3029 = !DILocation(line: 538, column: 25, scope: !3009)
!3030 = !DILocalVariable(name: "cond_stmt", scope: !3009, file: !3, line: 539, type: !685)
!3031 = !DILocation(line: 539, column: 10, scope: !3009)
!3032 = !DILocalVariable(name: "simple_cond", scope: !3009, file: !3, line: 540, type: !710)
!3033 = !DILocation(line: 540, column: 8, scope: !3009)
!3034 = !DILocalVariable(name: "gsi", scope: !3009, file: !3, line: 541, type: !3035)
!3035 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_stmt_iterator", file: !405, line: 265, baseType: !3036)
!3036 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !405, line: 254, size: 192, elements: !3037)
!3037 = !{!3038, !3039, !3040}
!3038 = !DIDerivedType(tag: DW_TAG_member, name: "ptr", scope: !3036, file: !405, line: 257, baseType: !680, size: 64)
!3039 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3036, file: !405, line: 263, baseType: !675, size: 64, offset: 64)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !3036, file: !405, line: 264, baseType: !648, size: 64, offset: 128)
!3041 = !DILocation(line: 541, column: 24, scope: !3009)
!3042 = !DILocation(line: 543, column: 25, scope: !3009)
!3043 = !DILocation(line: 543, column: 13, scope: !3009)
!3044 = !DILocation(line: 543, column: 11, scope: !3009)
!3045 = !DILocation(line: 546, column: 22, scope: !3009)
!3046 = !DILocation(line: 546, column: 9, scope: !3009)
!3047 = !DILocation(line: 548, column: 37, scope: !3009)
!3048 = !DILocation(line: 548, column: 5, scope: !3009)
!3049 = !DILocation(line: 547, column: 15, scope: !3009)
!3050 = !DILocation(line: 550, column: 44, scope: !3009)
!3051 = !DILocation(line: 550, column: 15, scope: !3009)
!3052 = !DILocation(line: 550, column: 13, scope: !3009)
!3053 = !DILocation(line: 551, column: 22, scope: !3009)
!3054 = !DILocation(line: 551, column: 9, scope: !3009)
!3055 = !DILocation(line: 552, column: 27, scope: !3009)
!3056 = !DILocation(line: 552, column: 3, scope: !3009)
!3057 = !DILocation(line: 554, column: 43, scope: !3009)
!3058 = !DILocation(line: 554, column: 25, scope: !3009)
!3059 = !DILocation(line: 554, column: 13, scope: !3009)
!3060 = !DILocation(line: 554, column: 11, scope: !3009)
!3061 = !DILocation(line: 556, column: 30, scope: !3009)
!3062 = !DILocation(line: 556, column: 12, scope: !3009)
!3063 = !DILocation(line: 556, column: 10, scope: !3009)
!3064 = !DILocation(line: 557, column: 25, scope: !3009)
!3065 = !DILocation(line: 557, column: 13, scope: !3009)
!3066 = !DILocation(line: 557, column: 11, scope: !3009)
!3067 = !DILocation(line: 559, column: 24, scope: !3009)
!3068 = !DILocation(line: 559, column: 33, scope: !3009)
!3069 = !DILocation(line: 559, column: 13, scope: !3009)
!3070 = !DILocation(line: 559, column: 11, scope: !3009)
!3071 = !DILocation(line: 560, column: 26, scope: !3009)
!3072 = !DILocation(line: 560, column: 14, scope: !3009)
!3073 = !DILocation(line: 560, column: 12, scope: !3009)
!3074 = !DILocation(line: 562, column: 3, scope: !3009)
!3075 = !DILocation(line: 562, column: 11, scope: !3009)
!3076 = !DILocation(line: 562, column: 17, scope: !3009)
!3077 = !DILocation(line: 563, column: 3, scope: !3009)
!3078 = !DILocation(line: 563, column: 11, scope: !3009)
!3079 = !DILocation(line: 563, column: 17, scope: !3009)
!3080 = !DILocation(line: 564, column: 3, scope: !3009)
!3081 = !DILocation(line: 564, column: 12, scope: !3009)
!3082 = !DILocation(line: 564, column: 18, scope: !3009)
!3083 = !DILocation(line: 565, column: 3, scope: !3009)
!3084 = !DILocation(line: 565, column: 12, scope: !3009)
!3085 = !DILocation(line: 565, column: 18, scope: !3009)
!3086 = !DILocation(line: 567, column: 44, scope: !3009)
!3087 = !DILocation(line: 567, column: 53, scope: !3009)
!3088 = !DILocation(line: 567, column: 65, scope: !3009)
!3089 = !DILocation(line: 567, column: 3, scope: !3009)
!3090 = !DILocation(line: 568, column: 44, scope: !3009)
!3091 = !DILocation(line: 568, column: 53, scope: !3009)
!3092 = !DILocation(line: 568, column: 3, scope: !3009)
!3093 = !DILocation(line: 569, column: 44, scope: !3009)
!3094 = !DILocation(line: 569, column: 54, scope: !3009)
!3095 = !DILocation(line: 569, column: 3, scope: !3009)
!3096 = !DILocation(line: 570, column: 44, scope: !3009)
!3097 = !DILocation(line: 570, column: 53, scope: !3009)
!3098 = !DILocation(line: 570, column: 3, scope: !3009)
!3099 = !DILocation(line: 572, column: 33, scope: !3009)
!3100 = !DILocation(line: 572, column: 15, scope: !3009)
!3101 = !DILocation(line: 572, column: 13, scope: !3009)
!3102 = !DILocation(line: 574, column: 22, scope: !3103)
!3103 = distinct !DILexicalBlock(scope: !3009, file: !3, line: 574, column: 7)
!3104 = !DILocation(line: 574, column: 33, scope: !3103)
!3105 = !DILocation(line: 574, column: 7, scope: !3103)
!3106 = !DILocation(line: 574, column: 7, scope: !3009)
!3107 = !DILocation(line: 575, column: 46, scope: !3103)
!3108 = !DILocation(line: 575, column: 57, scope: !3103)
!3109 = !DILocation(line: 575, column: 63, scope: !3103)
!3110 = !DILocation(line: 575, column: 5, scope: !3103)
!3111 = !DILocation(line: 577, column: 10, scope: !3009)
!3112 = !DILocation(line: 577, column: 3, scope: !3009)
!3113 = distinct !DISubprogram(name: "gsi_last_bb", scope: !405, file: !405, line: 4450, type: !3114, scopeLine: 4451, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3114 = !DISubroutineType(types: !3115)
!3115 = !{!3035, !648}
!3116 = !DILocalVariable(name: "bb", arg: 1, scope: !3113, file: !405, line: 4450, type: !648)
!3117 = !DILocation(line: 4450, column: 26, scope: !3113)
!3118 = !DILocalVariable(name: "i", scope: !3113, file: !405, line: 4452, type: !3035)
!3119 = !DILocation(line: 4452, column: 24, scope: !3113)
!3120 = !DILocalVariable(name: "seq", scope: !3113, file: !405, line: 4453, type: !675)
!3121 = !DILocation(line: 4453, column: 14, scope: !3113)
!3122 = !DILocation(line: 4455, column: 17, scope: !3113)
!3123 = !DILocation(line: 4455, column: 9, scope: !3113)
!3124 = !DILocation(line: 4455, column: 7, scope: !3113)
!3125 = !DILocation(line: 4456, column: 28, scope: !3113)
!3126 = !DILocation(line: 4456, column: 11, scope: !3113)
!3127 = !DILocation(line: 4456, column: 5, scope: !3113)
!3128 = !DILocation(line: 4456, column: 9, scope: !3113)
!3129 = !DILocation(line: 4457, column: 11, scope: !3113)
!3130 = !DILocation(line: 4457, column: 5, scope: !3113)
!3131 = !DILocation(line: 4457, column: 9, scope: !3113)
!3132 = !DILocation(line: 4458, column: 10, scope: !3113)
!3133 = !DILocation(line: 4458, column: 5, scope: !3113)
!3134 = !DILocation(line: 4458, column: 8, scope: !3113)
!3135 = !DILocation(line: 4460, column: 3, scope: !3113)
!3136 = distinct !DISubprogram(name: "single_succ_edge", scope: !144, file: !144, line: 643, type: !2357, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3137 = !DILocalVariable(name: "bb", arg: 1, scope: !3136, file: !144, line: 643, type: !2040)
!3138 = !DILocation(line: 643, column: 37, scope: !3136)
!3139 = !DILocation(line: 645, column: 3, scope: !3136)
!3140 = !DILocation(line: 646, column: 10, scope: !3136)
!3141 = !DILocation(line: 646, column: 3, scope: !3136)
!3142 = distinct !DISubprogram(name: "create_empty_loop_on_edge", scope: !3, file: !3, line: 613, type: !3143, scopeLine: 620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3143 = !DISubroutineType(types: !3144)
!3144 = !{!1369, !665, !710, !710, !710, !710, !1332, !1332, !1369}
!3145 = !DILocalVariable(name: "entry_edge", arg: 1, scope: !3142, file: !3, line: 613, type: !665)
!3146 = !DILocation(line: 613, column: 33, scope: !3142)
!3147 = !DILocalVariable(name: "initial_value", arg: 2, scope: !3142, file: !3, line: 614, type: !710)
!3148 = !DILocation(line: 614, column: 12, scope: !3142)
!3149 = !DILocalVariable(name: "stride", arg: 3, scope: !3142, file: !3, line: 615, type: !710)
!3150 = !DILocation(line: 615, column: 12, scope: !3142)
!3151 = !DILocalVariable(name: "upper_bound", arg: 4, scope: !3142, file: !3, line: 615, type: !710)
!3152 = !DILocation(line: 615, column: 25, scope: !3142)
!3153 = !DILocalVariable(name: "iv", arg: 5, scope: !3142, file: !3, line: 616, type: !710)
!3154 = !DILocation(line: 616, column: 12, scope: !3142)
!3155 = !DILocalVariable(name: "iv_before", arg: 6, scope: !3142, file: !3, line: 617, type: !1332)
!3156 = !DILocation(line: 617, column: 13, scope: !3142)
!3157 = !DILocalVariable(name: "iv_after", arg: 7, scope: !3142, file: !3, line: 618, type: !1332)
!3158 = !DILocation(line: 618, column: 13, scope: !3142)
!3159 = !DILocalVariable(name: "outer", arg: 8, scope: !3142, file: !3, line: 619, type: !1369)
!3160 = !DILocation(line: 619, column: 20, scope: !3142)
!3161 = !DILocalVariable(name: "loop_header", scope: !3142, file: !3, line: 621, type: !648)
!3162 = !DILocation(line: 621, column: 15, scope: !3142)
!3163 = !DILocalVariable(name: "loop_latch", scope: !3142, file: !3, line: 621, type: !648)
!3164 = !DILocation(line: 621, column: 28, scope: !3142)
!3165 = !DILocalVariable(name: "succ_bb", scope: !3142, file: !3, line: 621, type: !648)
!3166 = !DILocation(line: 621, column: 40, scope: !3142)
!3167 = !DILocalVariable(name: "pred_bb", scope: !3142, file: !3, line: 621, type: !648)
!3168 = !DILocation(line: 621, column: 49, scope: !3142)
!3169 = !DILocalVariable(name: "loop", scope: !3142, file: !3, line: 622, type: !1369)
!3170 = !DILocation(line: 622, column: 16, scope: !3142)
!3171 = !DILocalVariable(name: "gsi", scope: !3142, file: !3, line: 623, type: !3035)
!3172 = !DILocation(line: 623, column: 24, scope: !3142)
!3173 = !DILocalVariable(name: "stmts", scope: !3142, file: !3, line: 624, type: !675)
!3174 = !DILocation(line: 624, column: 14, scope: !3142)
!3175 = !DILocalVariable(name: "cond_expr", scope: !3142, file: !3, line: 625, type: !685)
!3176 = !DILocation(line: 625, column: 10, scope: !3142)
!3177 = !DILocalVariable(name: "exit_test", scope: !3142, file: !3, line: 626, type: !710)
!3178 = !DILocation(line: 626, column: 8, scope: !3142)
!3179 = !DILocalVariable(name: "exit_e", scope: !3142, file: !3, line: 627, type: !665)
!3180 = !DILocation(line: 627, column: 8, scope: !3142)
!3181 = !DILocalVariable(name: "prob", scope: !3142, file: !3, line: 628, type: !806)
!3182 = !DILocation(line: 628, column: 7, scope: !3142)
!3183 = !DILocation(line: 630, column: 3, scope: !3142)
!3184 = !DILocation(line: 633, column: 13, scope: !3142)
!3185 = !DILocation(line: 633, column: 25, scope: !3142)
!3186 = !DILocation(line: 633, column: 11, scope: !3142)
!3187 = !DILocation(line: 634, column: 29, scope: !3142)
!3188 = !DILocation(line: 634, column: 17, scope: !3142)
!3189 = !DILocation(line: 634, column: 15, scope: !3142)
!3190 = !DILocation(line: 635, column: 46, scope: !3142)
!3191 = !DILocation(line: 635, column: 28, scope: !3142)
!3192 = !DILocation(line: 635, column: 16, scope: !3142)
!3193 = !DILocation(line: 635, column: 14, scope: !3142)
!3194 = !DILocation(line: 636, column: 26, scope: !3142)
!3195 = !DILocation(line: 636, column: 13, scope: !3142)
!3196 = !DILocation(line: 636, column: 11, scope: !3142)
!3197 = !DILocation(line: 637, column: 14, scope: !3142)
!3198 = !DILocation(line: 637, column: 27, scope: !3142)
!3199 = !DILocation(line: 637, column: 3, scope: !3142)
!3200 = !DILocation(line: 638, column: 47, scope: !3142)
!3201 = !DILocation(line: 638, column: 29, scope: !3142)
!3202 = !DILocation(line: 638, column: 60, scope: !3142)
!3203 = !DILocation(line: 638, column: 3, scope: !3142)
!3204 = !DILocation(line: 641, column: 44, scope: !3142)
!3205 = !DILocation(line: 641, column: 57, scope: !3142)
!3206 = !DILocation(line: 641, column: 3, scope: !3142)
!3207 = !DILocation(line: 642, column: 44, scope: !3142)
!3208 = !DILocation(line: 642, column: 56, scope: !3142)
!3209 = !DILocation(line: 642, column: 3, scope: !3142)
!3210 = !DILocation(line: 643, column: 44, scope: !3142)
!3211 = !DILocation(line: 643, column: 53, scope: !3142)
!3212 = !DILocation(line: 643, column: 3, scope: !3142)
!3213 = !DILocation(line: 646, column: 10, scope: !3142)
!3214 = !DILocation(line: 646, column: 8, scope: !3142)
!3215 = !DILocation(line: 647, column: 18, scope: !3142)
!3216 = !DILocation(line: 647, column: 3, scope: !3142)
!3217 = !DILocation(line: 647, column: 9, scope: !3142)
!3218 = !DILocation(line: 647, column: 16, scope: !3142)
!3219 = !DILocation(line: 648, column: 17, scope: !3142)
!3220 = !DILocation(line: 648, column: 3, scope: !3142)
!3221 = !DILocation(line: 648, column: 9, scope: !3142)
!3222 = !DILocation(line: 648, column: 15, scope: !3142)
!3223 = !DILocation(line: 649, column: 13, scope: !3142)
!3224 = !DILocation(line: 649, column: 19, scope: !3142)
!3225 = !DILocation(line: 649, column: 3, scope: !3142)
!3226 = !DILocation(line: 652, column: 8, scope: !3142)
!3227 = !DILocation(line: 654, column: 27, scope: !3142)
!3228 = !DILocation(line: 654, column: 52, scope: !3142)
!3229 = !DILocation(line: 654, column: 50, scope: !3142)
!3230 = !DILocation(line: 654, column: 3, scope: !3142)
!3231 = !DILocation(line: 657, column: 30, scope: !3142)
!3232 = !DILocation(line: 657, column: 3, scope: !3142)
!3233 = !DILocation(line: 660, column: 25, scope: !3142)
!3234 = !DILocation(line: 660, column: 12, scope: !3142)
!3235 = !DILocation(line: 660, column: 10, scope: !3142)
!3236 = !DILocation(line: 661, column: 3, scope: !3142)
!3237 = !DILocation(line: 661, column: 11, scope: !3142)
!3238 = !DILocation(line: 661, column: 17, scope: !3142)
!3239 = !DILocation(line: 662, column: 21, scope: !3142)
!3240 = !DILocation(line: 662, column: 3, scope: !3142)
!3241 = !DILocation(line: 662, column: 34, scope: !3142)
!3242 = !DILocation(line: 662, column: 40, scope: !3142)
!3243 = !DILocation(line: 665, column: 41, scope: !3142)
!3244 = !DILocation(line: 665, column: 70, scope: !3142)
!3245 = !DILocation(line: 665, column: 19, scope: !3142)
!3246 = !DILocation(line: 665, column: 17, scope: !3142)
!3247 = !DILocation(line: 666, column: 7, scope: !3248)
!3248 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 666, column: 7)
!3249 = !DILocation(line: 666, column: 7, scope: !3142)
!3250 = !DILocation(line: 668, column: 52, scope: !3251)
!3251 = distinct !DILexicalBlock(scope: !3248, file: !3, line: 667, column: 5)
!3252 = !DILocation(line: 668, column: 31, scope: !3251)
!3253 = !DILocation(line: 668, column: 59, scope: !3251)
!3254 = !DILocation(line: 668, column: 7, scope: !3251)
!3255 = !DILocation(line: 669, column: 7, scope: !3251)
!3256 = !DILocation(line: 670, column: 5, scope: !3251)
!3257 = !DILocation(line: 672, column: 39, scope: !3142)
!3258 = !DILocation(line: 672, column: 17, scope: !3142)
!3259 = !DILocation(line: 672, column: 15, scope: !3142)
!3260 = !DILocation(line: 673, column: 7, scope: !3261)
!3261 = distinct !DILexicalBlock(scope: !3142, file: !3, line: 673, column: 7)
!3262 = !DILocation(line: 673, column: 7, scope: !3142)
!3263 = !DILocation(line: 675, column: 52, scope: !3264)
!3264 = distinct !DILexicalBlock(scope: !3261, file: !3, line: 674, column: 5)
!3265 = !DILocation(line: 675, column: 31, scope: !3264)
!3266 = !DILocation(line: 675, column: 59, scope: !3264)
!3267 = !DILocation(line: 675, column: 7, scope: !3264)
!3268 = !DILocation(line: 676, column: 7, scope: !3264)
!3269 = !DILocation(line: 677, column: 5, scope: !3264)
!3270 = !DILocation(line: 679, column: 22, scope: !3142)
!3271 = !DILocation(line: 679, column: 9, scope: !3142)
!3272 = !DILocation(line: 680, column: 14, scope: !3142)
!3273 = !DILocation(line: 680, column: 29, scope: !3142)
!3274 = !DILocation(line: 680, column: 37, scope: !3142)
!3275 = !DILocation(line: 680, column: 41, scope: !3142)
!3276 = !DILocation(line: 681, column: 7, scope: !3142)
!3277 = !DILocation(line: 681, column: 18, scope: !3142)
!3278 = !DILocation(line: 680, column: 3, scope: !3142)
!3279 = !DILocation(line: 685, column: 16, scope: !3142)
!3280 = !DILocation(line: 685, column: 15, scope: !3142)
!3281 = !DILocation(line: 685, column: 27, scope: !3142)
!3282 = !DILocation(line: 684, column: 15, scope: !3142)
!3283 = !DILocation(line: 684, column: 13, scope: !3142)
!3284 = !DILocation(line: 687, column: 32, scope: !3142)
!3285 = !DILocation(line: 687, column: 15, scope: !3142)
!3286 = !DILocation(line: 687, column: 13, scope: !3142)
!3287 = !DILocation(line: 688, column: 47, scope: !3142)
!3288 = !DILocation(line: 688, column: 15, scope: !3142)
!3289 = !DILocation(line: 688, column: 13, scope: !3142)
!3290 = !DILocation(line: 690, column: 24, scope: !3142)
!3291 = !DILocation(line: 690, column: 35, scope: !3142)
!3292 = !DILocation(line: 690, column: 3, scope: !3142)
!3293 = !DILocation(line: 691, column: 22, scope: !3142)
!3294 = !DILocation(line: 691, column: 30, scope: !3142)
!3295 = !DILocation(line: 691, column: 9, scope: !3142)
!3296 = !DILocation(line: 692, column: 27, scope: !3142)
!3297 = !DILocation(line: 692, column: 3, scope: !3142)
!3298 = !DILocation(line: 694, column: 29, scope: !3142)
!3299 = !DILocation(line: 694, column: 3, scope: !3142)
!3300 = !DILocation(line: 696, column: 10, scope: !3142)
!3301 = !DILocation(line: 696, column: 3, scope: !3142)
!3302 = distinct !DISubprogram(name: "single_succ", scope: !144, file: !144, line: 663, type: !3303, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3303 = !DISubroutineType(types: !3304)
!3304 = !{!648, !2040}
!3305 = !DILocalVariable(name: "bb", arg: 1, scope: !3302, file: !144, line: 663, type: !2040)
!3306 = !DILocation(line: 663, column: 32, scope: !3302)
!3307 = !DILocation(line: 665, column: 28, scope: !3302)
!3308 = !DILocation(line: 665, column: 10, scope: !3302)
!3309 = !DILocation(line: 665, column: 33, scope: !3302)
!3310 = !DILocation(line: 665, column: 3, scope: !3302)
!3311 = distinct !DISubprogram(name: "update_dominators_in_loop", scope: !3, file: !3, line: 465, type: !2976, scopeLine: 466, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3312 = !DILocalVariable(name: "loop", arg: 1, scope: !3311, file: !3, line: 465, type: !1369)
!3313 = !DILocation(line: 465, column: 41, scope: !3311)
!3314 = !DILocalVariable(name: "dom_bbs", scope: !3311, file: !3, line: 467, type: !2043)
!3315 = !DILocation(line: 467, column: 28, scope: !3311)
!3316 = !DILocalVariable(name: "seen", scope: !3311, file: !3, line: 468, type: !2098)
!3317 = !DILocation(line: 468, column: 11, scope: !3311)
!3318 = !DILocalVariable(name: "body", scope: !3311, file: !3, line: 469, type: !647)
!3319 = !DILocation(line: 469, column: 16, scope: !3311)
!3320 = !DILocalVariable(name: "i", scope: !3311, file: !3, line: 470, type: !7)
!3321 = !DILocation(line: 470, column: 12, scope: !3311)
!3322 = !DILocation(line: 472, column: 25, scope: !3311)
!3323 = !DILocation(line: 472, column: 10, scope: !3311)
!3324 = !DILocation(line: 472, column: 8, scope: !3311)
!3325 = !DILocation(line: 473, column: 17, scope: !3311)
!3326 = !DILocation(line: 473, column: 3, scope: !3311)
!3327 = !DILocation(line: 474, column: 25, scope: !3311)
!3328 = !DILocation(line: 474, column: 10, scope: !3311)
!3329 = !DILocation(line: 474, column: 8, scope: !3311)
!3330 = !DILocation(line: 476, column: 10, scope: !3331)
!3331 = distinct !DILexicalBlock(scope: !3311, file: !3, line: 476, column: 3)
!3332 = !DILocation(line: 476, column: 8, scope: !3331)
!3333 = !DILocation(line: 476, column: 15, scope: !3334)
!3334 = distinct !DILexicalBlock(scope: !3331, file: !3, line: 476, column: 3)
!3335 = !DILocation(line: 476, column: 19, scope: !3334)
!3336 = !DILocation(line: 476, column: 25, scope: !3334)
!3337 = !DILocation(line: 476, column: 17, scope: !3334)
!3338 = !DILocation(line: 476, column: 3, scope: !3331)
!3339 = !DILocation(line: 477, column: 14, scope: !3334)
!3340 = !DILocation(line: 477, column: 20, scope: !3334)
!3341 = !DILocation(line: 477, column: 25, scope: !3334)
!3342 = !DILocation(line: 477, column: 29, scope: !3334)
!3343 = !DILocation(line: 477, column: 5, scope: !3334)
!3344 = !DILocation(line: 476, column: 37, scope: !3334)
!3345 = !DILocation(line: 476, column: 3, scope: !3334)
!3346 = distinct !{!3346, !3338, !3347}
!3347 = !DILocation(line: 477, column: 34, scope: !3331)
!3348 = !DILocation(line: 479, column: 10, scope: !3349)
!3349 = distinct !DILexicalBlock(scope: !3311, file: !3, line: 479, column: 3)
!3350 = !DILocation(line: 479, column: 8, scope: !3349)
!3351 = !DILocation(line: 479, column: 15, scope: !3352)
!3352 = distinct !DILexicalBlock(scope: !3349, file: !3, line: 479, column: 3)
!3353 = !DILocation(line: 479, column: 19, scope: !3352)
!3354 = !DILocation(line: 479, column: 25, scope: !3352)
!3355 = !DILocation(line: 479, column: 17, scope: !3352)
!3356 = !DILocation(line: 479, column: 3, scope: !3349)
!3357 = !DILocalVariable(name: "ldom", scope: !3358, file: !3, line: 481, type: !648)
!3358 = distinct !DILexicalBlock(scope: !3352, file: !3, line: 480, column: 5)
!3359 = !DILocation(line: 481, column: 19, scope: !3358)
!3360 = !DILocation(line: 483, column: 50, scope: !3361)
!3361 = distinct !DILexicalBlock(scope: !3358, file: !3, line: 483, column: 7)
!3362 = !DILocation(line: 483, column: 55, scope: !3361)
!3363 = !DILocation(line: 483, column: 19, scope: !3361)
!3364 = !DILocation(line: 483, column: 17, scope: !3361)
!3365 = !DILocation(line: 483, column: 12, scope: !3361)
!3366 = !DILocation(line: 484, column: 5, scope: !3367)
!3367 = distinct !DILexicalBlock(scope: !3361, file: !3, line: 483, column: 7)
!3368 = !DILocation(line: 483, column: 7, scope: !3361)
!3369 = !DILocation(line: 486, column: 7, scope: !3370)
!3370 = distinct !DILexicalBlock(scope: !3367, file: !3, line: 486, column: 6)
!3371 = !DILocation(line: 486, column: 6, scope: !3367)
!3372 = !DILocation(line: 488, column: 15, scope: !3373)
!3373 = distinct !DILexicalBlock(scope: !3370, file: !3, line: 487, column: 4)
!3374 = !DILocation(line: 488, column: 21, scope: !3373)
!3375 = !DILocation(line: 488, column: 27, scope: !3373)
!3376 = !DILocation(line: 488, column: 6, scope: !3373)
!3377 = !DILocation(line: 489, column: 6, scope: !3373)
!3378 = !DILocation(line: 490, column: 4, scope: !3373)
!3379 = !DILocation(line: 485, column: 42, scope: !3367)
!3380 = !DILocation(line: 485, column: 12, scope: !3367)
!3381 = !DILocation(line: 485, column: 10, scope: !3367)
!3382 = !DILocation(line: 483, column: 7, scope: !3367)
!3383 = distinct !{!3383, !3368, !3384}
!3384 = !DILocation(line: 490, column: 4, scope: !3361)
!3385 = !DILocation(line: 491, column: 5, scope: !3358)
!3386 = !DILocation(line: 479, column: 37, scope: !3352)
!3387 = !DILocation(line: 479, column: 3, scope: !3352)
!3388 = distinct !{!3388, !3356, !3389}
!3389 = !DILocation(line: 491, column: 5, scope: !3349)
!3390 = !DILocation(line: 493, column: 43, scope: !3311)
!3391 = !DILocation(line: 493, column: 3, scope: !3311)
!3392 = !DILocation(line: 494, column: 9, scope: !3311)
!3393 = !DILocation(line: 494, column: 3, scope: !3311)
!3394 = !DILocation(line: 495, column: 9, scope: !3311)
!3395 = !DILocation(line: 495, column: 3, scope: !3311)
!3396 = !DILocation(line: 496, column: 3, scope: !3311)
!3397 = !DILocation(line: 497, column: 1, scope: !3311)
!3398 = distinct !DISubprogram(name: "gimple_cond_lhs", scope: !405, file: !405, line: 2241, type: !3399, scopeLine: 2242, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3399 = !DISubroutineType(types: !3400)
!3400 = !{!710, !3401}
!3401 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple", file: !641, line: 60, baseType: !2048)
!3402 = !DILocalVariable(name: "gs", arg: 1, scope: !3398, file: !405, line: 2241, type: !3401)
!3403 = !DILocation(line: 2241, column: 31, scope: !3398)
!3404 = !DILocation(line: 2244, column: 21, scope: !3398)
!3405 = !DILocation(line: 2244, column: 10, scope: !3398)
!3406 = !DILocation(line: 2244, column: 3, scope: !3398)
!3407 = distinct !DISubprogram(name: "gimple_cond_set_lhs", scope: !405, file: !405, line: 2261, type: !3408, scopeLine: 2262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3408 = !DISubroutineType(types: !3409)
!3409 = !{null, !685, !710}
!3410 = !DILocalVariable(name: "gs", arg: 1, scope: !3407, file: !405, line: 2261, type: !685)
!3411 = !DILocation(line: 2261, column: 29, scope: !3407)
!3412 = !DILocalVariable(name: "lhs", arg: 2, scope: !3407, file: !405, line: 2261, type: !710)
!3413 = !DILocation(line: 2261, column: 38, scope: !3407)
!3414 = !DILocation(line: 2264, column: 18, scope: !3407)
!3415 = !DILocation(line: 2264, column: 25, scope: !3407)
!3416 = !DILocation(line: 2264, column: 3, scope: !3407)
!3417 = !DILocation(line: 2265, column: 1, scope: !3407)
!3418 = distinct !DISubprogram(name: "loopify", scope: !3, file: !3, line: 710, type: !3419, scopeLine: 713, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3419 = !DISubroutineType(types: !3420)
!3420 = !{!1369, !665, !665, !648, !665, !665, !829, !7, !7}
!3421 = !DILocalVariable(name: "latch_edge", arg: 1, scope: !3418, file: !3, line: 710, type: !665)
!3422 = !DILocation(line: 710, column: 15, scope: !3418)
!3423 = !DILocalVariable(name: "header_edge", arg: 2, scope: !3418, file: !3, line: 710, type: !665)
!3424 = !DILocation(line: 710, column: 32, scope: !3418)
!3425 = !DILocalVariable(name: "switch_bb", arg: 3, scope: !3418, file: !3, line: 711, type: !648)
!3426 = !DILocation(line: 711, column: 15, scope: !3418)
!3427 = !DILocalVariable(name: "true_edge", arg: 4, scope: !3418, file: !3, line: 711, type: !665)
!3428 = !DILocation(line: 711, column: 31, scope: !3418)
!3429 = !DILocalVariable(name: "false_edge", arg: 5, scope: !3418, file: !3, line: 711, type: !665)
!3430 = !DILocation(line: 711, column: 47, scope: !3418)
!3431 = !DILocalVariable(name: "redirect_all_edges", arg: 6, scope: !3418, file: !3, line: 712, type: !829)
!3432 = !DILocation(line: 712, column: 8, scope: !3418)
!3433 = !DILocalVariable(name: "true_scale", arg: 7, scope: !3418, file: !3, line: 712, type: !7)
!3434 = !DILocation(line: 712, column: 37, scope: !3418)
!3435 = !DILocalVariable(name: "false_scale", arg: 8, scope: !3418, file: !3, line: 712, type: !7)
!3436 = !DILocation(line: 712, column: 58, scope: !3418)
!3437 = !DILocalVariable(name: "succ_bb", scope: !3418, file: !3, line: 714, type: !648)
!3438 = !DILocation(line: 714, column: 15, scope: !3418)
!3439 = !DILocation(line: 714, column: 25, scope: !3418)
!3440 = !DILocation(line: 714, column: 37, scope: !3418)
!3441 = !DILocalVariable(name: "pred_bb", scope: !3418, file: !3, line: 715, type: !648)
!3442 = !DILocation(line: 715, column: 15, scope: !3418)
!3443 = !DILocation(line: 715, column: 25, scope: !3418)
!3444 = !DILocation(line: 715, column: 38, scope: !3418)
!3445 = !DILocalVariable(name: "loop", scope: !3418, file: !3, line: 716, type: !1369)
!3446 = !DILocation(line: 716, column: 16, scope: !3418)
!3447 = !DILocation(line: 716, column: 23, scope: !3418)
!3448 = !DILocalVariable(name: "outer", scope: !3418, file: !3, line: 717, type: !1369)
!3449 = !DILocation(line: 717, column: 16, scope: !3418)
!3450 = !DILocation(line: 717, column: 36, scope: !3418)
!3451 = !DILocation(line: 717, column: 45, scope: !3418)
!3452 = !DILocation(line: 717, column: 24, scope: !3418)
!3453 = !DILocalVariable(name: "freq", scope: !3418, file: !3, line: 718, type: !806)
!3454 = !DILocation(line: 718, column: 7, scope: !3418)
!3455 = !DILocalVariable(name: "cnt", scope: !3418, file: !3, line: 719, type: !2004)
!3456 = !DILocation(line: 719, column: 13, scope: !3418)
!3457 = !DILocalVariable(name: "e", scope: !3418, file: !3, line: 720, type: !665)
!3458 = !DILocation(line: 720, column: 8, scope: !3418)
!3459 = !DILocalVariable(name: "ei", scope: !3418, file: !3, line: 721, type: !2192)
!3460 = !DILocation(line: 721, column: 17, scope: !3418)
!3461 = !DILocation(line: 723, column: 18, scope: !3418)
!3462 = !DILocation(line: 723, column: 31, scope: !3418)
!3463 = !DILocation(line: 723, column: 3, scope: !3418)
!3464 = !DILocation(line: 723, column: 9, scope: !3418)
!3465 = !DILocation(line: 723, column: 16, scope: !3418)
!3466 = !DILocation(line: 724, column: 17, scope: !3418)
!3467 = !DILocation(line: 724, column: 29, scope: !3418)
!3468 = !DILocation(line: 724, column: 3, scope: !3418)
!3469 = !DILocation(line: 724, column: 9, scope: !3418)
!3470 = !DILocation(line: 724, column: 15, scope: !3418)
!3471 = !DILocation(line: 726, column: 10, scope: !3418)
!3472 = !DILocation(line: 726, column: 8, scope: !3418)
!3473 = !DILocation(line: 727, column: 9, scope: !3418)
!3474 = !DILocation(line: 727, column: 22, scope: !3418)
!3475 = !DILocation(line: 727, column: 7, scope: !3418)
!3476 = !DILocation(line: 730, column: 23, scope: !3418)
!3477 = !DILocation(line: 730, column: 35, scope: !3418)
!3478 = !DILocation(line: 730, column: 41, scope: !3418)
!3479 = !DILocation(line: 730, column: 3, scope: !3418)
!3480 = !DILocation(line: 731, column: 23, scope: !3418)
!3481 = !DILocation(line: 731, column: 34, scope: !3418)
!3482 = !DILocation(line: 731, column: 3, scope: !3418)
!3483 = !DILocation(line: 735, column: 7, scope: !3484)
!3484 = distinct !DILexicalBlock(scope: !3418, file: !3, line: 735, column: 7)
!3485 = !DILocation(line: 735, column: 7, scope: !3418)
!3486 = !DILocation(line: 737, column: 27, scope: !3487)
!3487 = distinct !DILexicalBlock(scope: !3484, file: !3, line: 736, column: 5)
!3488 = !DILocation(line: 737, column: 40, scope: !3487)
!3489 = !DILocation(line: 737, column: 7, scope: !3487)
!3490 = !DILocation(line: 738, column: 27, scope: !3487)
!3491 = !DILocation(line: 738, column: 39, scope: !3487)
!3492 = !DILocation(line: 738, column: 45, scope: !3487)
!3493 = !DILocation(line: 738, column: 7, scope: !3487)
!3494 = !DILocation(line: 741, column: 48, scope: !3487)
!3495 = !DILocation(line: 741, column: 59, scope: !3487)
!3496 = !DILocation(line: 741, column: 7, scope: !3487)
!3497 = !DILocation(line: 742, column: 48, scope: !3487)
!3498 = !DILocation(line: 742, column: 54, scope: !3487)
!3499 = !DILocation(line: 742, column: 62, scope: !3487)
!3500 = !DILocation(line: 742, column: 7, scope: !3487)
!3501 = !DILocation(line: 743, column: 5, scope: !3487)
!3502 = !DILocation(line: 745, column: 44, scope: !3418)
!3503 = !DILocation(line: 745, column: 53, scope: !3418)
!3504 = !DILocation(line: 745, column: 3, scope: !3418)
!3505 = !DILocation(line: 748, column: 13, scope: !3418)
!3506 = !DILocation(line: 748, column: 19, scope: !3418)
!3507 = !DILocation(line: 748, column: 3, scope: !3418)
!3508 = !DILocation(line: 751, column: 7, scope: !3509)
!3509 = distinct !DILexicalBlock(scope: !3418, file: !3, line: 751, column: 7)
!3510 = !DILocation(line: 751, column: 18, scope: !3509)
!3511 = !DILocation(line: 751, column: 7, scope: !3418)
!3512 = !DILocation(line: 752, column: 27, scope: !3509)
!3513 = !DILocation(line: 752, column: 5, scope: !3509)
!3514 = !DILocation(line: 753, column: 19, scope: !3418)
!3515 = !DILocation(line: 753, column: 30, scope: !3418)
!3516 = !DILocation(line: 753, column: 3, scope: !3418)
!3517 = !DILocation(line: 756, column: 7, scope: !3518)
!3518 = distinct !DILexicalBlock(scope: !3418, file: !3, line: 756, column: 7)
!3519 = !DILocation(line: 756, column: 7, scope: !3418)
!3520 = !DILocation(line: 758, column: 30, scope: !3521)
!3521 = distinct !DILexicalBlock(scope: !3518, file: !3, line: 757, column: 5)
!3522 = !DILocation(line: 758, column: 7, scope: !3521)
!3523 = !DILocation(line: 758, column: 18, scope: !3521)
!3524 = !DILocation(line: 758, column: 28, scope: !3521)
!3525 = !DILocation(line: 759, column: 26, scope: !3521)
!3526 = !DILocation(line: 759, column: 7, scope: !3521)
!3527 = !DILocation(line: 759, column: 18, scope: !3521)
!3528 = !DILocation(line: 759, column: 24, scope: !3521)
!3529 = !DILocation(line: 760, column: 7, scope: !3530)
!3530 = distinct !DILexicalBlock(scope: !3521, file: !3, line: 760, column: 7)
!3531 = !DILocation(line: 760, column: 7, scope: !3532)
!3532 = distinct !DILexicalBlock(scope: !3530, file: !3, line: 760, column: 7)
!3533 = !DILocation(line: 762, column: 16, scope: !3534)
!3534 = distinct !DILexicalBlock(scope: !3532, file: !3, line: 761, column: 2)
!3535 = !DILocation(line: 762, column: 27, scope: !3534)
!3536 = !DILocation(line: 762, column: 35, scope: !3534)
!3537 = !DILocation(line: 762, column: 38, scope: !3534)
!3538 = !DILocation(line: 762, column: 33, scope: !3534)
!3539 = !DILocation(line: 762, column: 51, scope: !3534)
!3540 = !DILocation(line: 762, column: 4, scope: !3534)
!3541 = !DILocation(line: 762, column: 7, scope: !3534)
!3542 = !DILocation(line: 762, column: 13, scope: !3534)
!3543 = !DILocation(line: 763, column: 2, scope: !3534)
!3544 = distinct !{!3544, !3529, !3545}
!3545 = !DILocation(line: 763, column: 2, scope: !3530)
!3546 = !DILocation(line: 764, column: 5, scope: !3521)
!3547 = !DILocation(line: 765, column: 27, scope: !3418)
!3548 = !DILocation(line: 765, column: 33, scope: !3418)
!3549 = !DILocation(line: 765, column: 3, scope: !3418)
!3550 = !DILocation(line: 766, column: 27, scope: !3418)
!3551 = !DILocation(line: 766, column: 36, scope: !3418)
!3552 = !DILocation(line: 766, column: 49, scope: !3418)
!3553 = !DILocation(line: 766, column: 3, scope: !3418)
!3554 = !DILocation(line: 767, column: 30, scope: !3418)
!3555 = !DILocation(line: 767, column: 3, scope: !3418)
!3556 = !DILocation(line: 769, column: 10, scope: !3418)
!3557 = !DILocation(line: 769, column: 3, scope: !3418)
!3558 = distinct !DISubprogram(name: "loop_redirect_edge", scope: !3, file: !3, line: 904, type: !3559, scopeLine: 905, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3559 = !DISubroutineType(types: !3560)
!3560 = !{null, !665, !648}
!3561 = !DILocalVariable(name: "e", arg: 1, scope: !3558, file: !3, line: 904, type: !665)
!3562 = !DILocation(line: 904, column: 26, scope: !3558)
!3563 = !DILocalVariable(name: "dest", arg: 2, scope: !3558, file: !3, line: 904, type: !648)
!3564 = !DILocation(line: 904, column: 41, scope: !3558)
!3565 = !DILocation(line: 906, column: 7, scope: !3566)
!3566 = distinct !DILexicalBlock(scope: !3558, file: !3, line: 906, column: 7)
!3567 = !DILocation(line: 906, column: 10, scope: !3566)
!3568 = !DILocation(line: 906, column: 18, scope: !3566)
!3569 = !DILocation(line: 906, column: 15, scope: !3566)
!3570 = !DILocation(line: 906, column: 7, scope: !3558)
!3571 = !DILocation(line: 907, column: 5, scope: !3566)
!3572 = !DILocation(line: 909, column: 35, scope: !3558)
!3573 = !DILocation(line: 909, column: 38, scope: !3558)
!3574 = !DILocation(line: 909, column: 3, scope: !3558)
!3575 = !DILocation(line: 910, column: 1, scope: !3558)
!3576 = distinct !DISubprogram(name: "duplicate_loop", scope: !3, file: !3, line: 858, type: !3577, scopeLine: 859, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3577 = !DISubroutineType(types: !3578)
!3578 = !{!1369, !1369, !1369}
!3579 = !DILocalVariable(name: "loop", arg: 1, scope: !3576, file: !3, line: 858, type: !1369)
!3580 = !DILocation(line: 858, column: 30, scope: !3576)
!3581 = !DILocalVariable(name: "target", arg: 2, scope: !3576, file: !3, line: 858, type: !1369)
!3582 = !DILocation(line: 858, column: 49, scope: !3576)
!3583 = !DILocalVariable(name: "cloop", scope: !3576, file: !3, line: 860, type: !1369)
!3584 = !DILocation(line: 860, column: 16, scope: !3576)
!3585 = !DILocation(line: 861, column: 11, scope: !3576)
!3586 = !DILocation(line: 861, column: 9, scope: !3576)
!3587 = !DILocation(line: 862, column: 19, scope: !3576)
!3588 = !DILocation(line: 862, column: 3, scope: !3576)
!3589 = !DILocation(line: 865, column: 18, scope: !3576)
!3590 = !DILocation(line: 865, column: 24, scope: !3576)
!3591 = !DILocation(line: 865, column: 3, scope: !3576)
!3592 = !DILocation(line: 868, column: 28, scope: !3576)
!3593 = !DILocation(line: 868, column: 36, scope: !3576)
!3594 = !DILocation(line: 868, column: 3, scope: !3576)
!3595 = !DILocation(line: 870, column: 10, scope: !3576)
!3596 = !DILocation(line: 870, column: 3, scope: !3576)
!3597 = distinct !DISubprogram(name: "duplicate_subloops", scope: !3, file: !3, line: 876, type: !2862, scopeLine: 877, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3598 = !DILocalVariable(name: "loop", arg: 1, scope: !3597, file: !3, line: 876, type: !1369)
!3599 = !DILocation(line: 876, column: 34, scope: !3597)
!3600 = !DILocalVariable(name: "target", arg: 2, scope: !3597, file: !3, line: 876, type: !1369)
!3601 = !DILocation(line: 876, column: 53, scope: !3597)
!3602 = !DILocalVariable(name: "aloop", scope: !3597, file: !3, line: 878, type: !1369)
!3603 = !DILocation(line: 878, column: 16, scope: !3597)
!3604 = !DILocalVariable(name: "cloop", scope: !3597, file: !3, line: 878, type: !1369)
!3605 = !DILocation(line: 878, column: 24, scope: !3597)
!3606 = !DILocation(line: 880, column: 16, scope: !3607)
!3607 = distinct !DILexicalBlock(scope: !3597, file: !3, line: 880, column: 3)
!3608 = !DILocation(line: 880, column: 22, scope: !3607)
!3609 = !DILocation(line: 880, column: 14, scope: !3607)
!3610 = !DILocation(line: 880, column: 8, scope: !3607)
!3611 = !DILocation(line: 880, column: 29, scope: !3612)
!3612 = distinct !DILexicalBlock(scope: !3607, file: !3, line: 880, column: 3)
!3613 = !DILocation(line: 880, column: 3, scope: !3607)
!3614 = !DILocation(line: 882, column: 31, scope: !3615)
!3615 = distinct !DILexicalBlock(scope: !3612, file: !3, line: 881, column: 5)
!3616 = !DILocation(line: 882, column: 38, scope: !3615)
!3617 = !DILocation(line: 882, column: 15, scope: !3615)
!3618 = !DILocation(line: 882, column: 13, scope: !3615)
!3619 = !DILocation(line: 883, column: 27, scope: !3615)
!3620 = !DILocation(line: 883, column: 34, scope: !3615)
!3621 = !DILocation(line: 883, column: 7, scope: !3615)
!3622 = !DILocation(line: 884, column: 5, scope: !3615)
!3623 = !DILocation(line: 880, column: 44, scope: !3612)
!3624 = !DILocation(line: 880, column: 51, scope: !3612)
!3625 = !DILocation(line: 880, column: 42, scope: !3612)
!3626 = !DILocation(line: 880, column: 3, scope: !3612)
!3627 = distinct !{!3627, !3613, !3628}
!3628 = !DILocation(line: 884, column: 5, scope: !3607)
!3629 = !DILocation(line: 885, column: 1, scope: !3597)
!3630 = distinct !DISubprogram(name: "can_duplicate_loop_p", scope: !3, file: !3, line: 914, type: !3631, scopeLine: 915, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3631 = !DISubroutineType(types: !3632)
!3632 = !{!829, !2367}
!3633 = !DILocalVariable(name: "loop", arg: 1, scope: !3630, file: !3, line: 914, type: !2367)
!3634 = !DILocation(line: 914, column: 42, scope: !3630)
!3635 = !DILocalVariable(name: "ret", scope: !3630, file: !3, line: 916, type: !806)
!3636 = !DILocation(line: 916, column: 7, scope: !3630)
!3637 = !DILocalVariable(name: "bbs", scope: !3630, file: !3, line: 917, type: !647)
!3638 = !DILocation(line: 917, column: 16, scope: !3630)
!3639 = !DILocation(line: 917, column: 37, scope: !3630)
!3640 = !DILocation(line: 917, column: 22, scope: !3630)
!3641 = !DILocation(line: 919, column: 25, scope: !3630)
!3642 = !DILocation(line: 919, column: 30, scope: !3630)
!3643 = !DILocation(line: 919, column: 36, scope: !3630)
!3644 = !DILocation(line: 919, column: 9, scope: !3630)
!3645 = !DILocation(line: 919, column: 7, scope: !3630)
!3646 = !DILocation(line: 920, column: 9, scope: !3630)
!3647 = !DILocation(line: 920, column: 3, scope: !3630)
!3648 = !DILocation(line: 922, column: 10, scope: !3630)
!3649 = !DILocation(line: 922, column: 3, scope: !3630)
!3650 = distinct !DISubprogram(name: "duplicate_loop_to_header_edge", scope: !3, file: !3, line: 972, type: !3651, scopeLine: 976, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!3651 = !DISubroutineType(types: !3652)
!3652 = !{!829, !1369, !665, !7, !2098, !665, !3653, !806}
!3653 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2050, size: 64)
!3654 = !DILocalVariable(name: "loop", arg: 1, scope: !3650, file: !3, line: 972, type: !1369)
!3655 = !DILocation(line: 972, column: 45, scope: !3650)
!3656 = !DILocalVariable(name: "e", arg: 2, scope: !3650, file: !3, line: 972, type: !665)
!3657 = !DILocation(line: 972, column: 56, scope: !3650)
!3658 = !DILocalVariable(name: "ndupl", arg: 3, scope: !3650, file: !3, line: 973, type: !7)
!3659 = !DILocation(line: 973, column: 24, scope: !3650)
!3660 = !DILocalVariable(name: "wont_exit", arg: 4, scope: !3650, file: !3, line: 973, type: !2098)
!3661 = !DILocation(line: 973, column: 39, scope: !3650)
!3662 = !DILocalVariable(name: "orig", arg: 5, scope: !3650, file: !3, line: 974, type: !665)
!3663 = !DILocation(line: 974, column: 16, scope: !3650)
!3664 = !DILocalVariable(name: "to_remove", arg: 6, scope: !3650, file: !3, line: 974, type: !3653)
!3665 = !DILocation(line: 974, column: 41, scope: !3650)
!3666 = !DILocalVariable(name: "flags", arg: 7, scope: !3650, file: !3, line: 975, type: !806)
!3667 = !DILocation(line: 975, column: 15, scope: !3650)
!3668 = !DILocalVariable(name: "target", scope: !3650, file: !3, line: 977, type: !1369)
!3669 = !DILocation(line: 977, column: 16, scope: !3650)
!3670 = !DILocalVariable(name: "aloop", scope: !3650, file: !3, line: 977, type: !1369)
!3671 = !DILocation(line: 977, column: 25, scope: !3650)
!3672 = !DILocalVariable(name: "orig_loops", scope: !3650, file: !3, line: 978, type: !2039)
!3673 = !DILocation(line: 978, column: 17, scope: !3650)
!3674 = !DILocalVariable(name: "n_orig_loops", scope: !3650, file: !3, line: 979, type: !7)
!3675 = !DILocation(line: 979, column: 12, scope: !3650)
!3676 = !DILocalVariable(name: "header", scope: !3650, file: !3, line: 980, type: !648)
!3677 = !DILocation(line: 980, column: 15, scope: !3650)
!3678 = !DILocation(line: 980, column: 24, scope: !3650)
!3679 = !DILocation(line: 980, column: 30, scope: !3650)
!3680 = !DILocalVariable(name: "latch", scope: !3650, file: !3, line: 980, type: !648)
!3681 = !DILocation(line: 980, column: 38, scope: !3650)
!3682 = !DILocation(line: 980, column: 46, scope: !3650)
!3683 = !DILocation(line: 980, column: 52, scope: !3650)
!3684 = !DILocalVariable(name: "new_bbs", scope: !3650, file: !3, line: 981, type: !647)
!3685 = !DILocation(line: 981, column: 16, scope: !3650)
!3686 = !DILocalVariable(name: "bbs", scope: !3650, file: !3, line: 981, type: !647)
!3687 = !DILocation(line: 981, column: 26, scope: !3650)
!3688 = !DILocalVariable(name: "first_active", scope: !3650, file: !3, line: 981, type: !647)
!3689 = !DILocation(line: 981, column: 32, scope: !3650)
!3690 = !DILocalVariable(name: "new_bb", scope: !3650, file: !3, line: 982, type: !648)
!3691 = !DILocation(line: 982, column: 15, scope: !3650)
!3692 = !DILocalVariable(name: "bb", scope: !3650, file: !3, line: 982, type: !648)
!3693 = !DILocation(line: 982, column: 23, scope: !3650)
!3694 = !DILocalVariable(name: "first_active_latch", scope: !3650, file: !3, line: 982, type: !648)
!3695 = !DILocation(line: 982, column: 27, scope: !3650)
!3696 = !DILocalVariable(name: "ae", scope: !3650, file: !3, line: 983, type: !665)
!3697 = !DILocation(line: 983, column: 8, scope: !3650)
!3698 = !DILocalVariable(name: "latch_edge", scope: !3650, file: !3, line: 983, type: !665)
!3699 = !DILocation(line: 983, column: 12, scope: !3650)
!3700 = !DILocalVariable(name: "spec_edges", scope: !3650, file: !3, line: 984, type: !3701)
!3701 = !DICompositeType(tag: DW_TAG_array_type, baseType: !665, size: 128, elements: !952)
!3702 = !DILocation(line: 984, column: 8, scope: !3650)
!3703 = !DILocalVariable(name: "new_spec_edges", scope: !3650, file: !3, line: 984, type: !3701)
!3704 = !DILocation(line: 984, column: 23, scope: !3650)
!3705 = !DILocalVariable(name: "i", scope: !3650, file: !3, line: 987, type: !7)
!3706 = !DILocation(line: 987, column: 12, scope: !3650)
!3707 = !DILocalVariable(name: "j", scope: !3650, file: !3, line: 987, type: !7)
!3708 = !DILocation(line: 987, column: 15, scope: !3650)
!3709 = !DILocalVariable(name: "n", scope: !3650, file: !3, line: 987, type: !7)
!3710 = !DILocation(line: 987, column: 18, scope: !3650)
!3711 = !DILocalVariable(name: "is_latch", scope: !3650, file: !3, line: 988, type: !806)
!3712 = !DILocation(line: 988, column: 7, scope: !3650)
!3713 = !DILocation(line: 988, column: 19, scope: !3650)
!3714 = !DILocation(line: 988, column: 28, scope: !3650)
!3715 = !DILocation(line: 988, column: 31, scope: !3650)
!3716 = !DILocation(line: 988, column: 25, scope: !3650)
!3717 = !DILocalVariable(name: "scale_act", scope: !3650, file: !3, line: 989, type: !806)
!3718 = !DILocation(line: 989, column: 7, scope: !3650)
!3719 = !DILocalVariable(name: "scale_step", scope: !3650, file: !3, line: 989, type: !2038)
!3720 = !DILocation(line: 989, column: 23, scope: !3650)
!3721 = !DILocalVariable(name: "scale_main", scope: !3650, file: !3, line: 989, type: !806)
!3722 = !DILocation(line: 989, column: 42, scope: !3650)
!3723 = !DILocalVariable(name: "scale_after_exit", scope: !3650, file: !3, line: 990, type: !806)
!3724 = !DILocation(line: 990, column: 7, scope: !3650)
!3725 = !DILocalVariable(name: "p", scope: !3650, file: !3, line: 991, type: !806)
!3726 = !DILocation(line: 991, column: 7, scope: !3650)
!3727 = !DILocalVariable(name: "freq_in", scope: !3650, file: !3, line: 991, type: !806)
!3728 = !DILocation(line: 991, column: 10, scope: !3650)
!3729 = !DILocalVariable(name: "freq_le", scope: !3650, file: !3, line: 991, type: !806)
!3730 = !DILocation(line: 991, column: 19, scope: !3650)
!3731 = !DILocalVariable(name: "freq_out_orig", scope: !3650, file: !3, line: 991, type: !806)
!3732 = !DILocation(line: 991, column: 28, scope: !3650)
!3733 = !DILocalVariable(name: "prob_pass_thru", scope: !3650, file: !3, line: 992, type: !806)
!3734 = !DILocation(line: 992, column: 7, scope: !3650)
!3735 = !DILocalVariable(name: "prob_pass_wont_exit", scope: !3650, file: !3, line: 992, type: !806)
!3736 = !DILocation(line: 992, column: 23, scope: !3650)
!3737 = !DILocalVariable(name: "prob_pass_main", scope: !3650, file: !3, line: 992, type: !806)
!3738 = !DILocation(line: 992, column: 44, scope: !3650)
!3739 = !DILocalVariable(name: "add_irreducible_flag", scope: !3650, file: !3, line: 993, type: !806)
!3740 = !DILocation(line: 993, column: 7, scope: !3650)
!3741 = !DILocalVariable(name: "place_after", scope: !3650, file: !3, line: 994, type: !648)
!3742 = !DILocation(line: 994, column: 15, scope: !3650)
!3743 = !DILocalVariable(name: "bbs_to_scale", scope: !3650, file: !3, line: 995, type: !1303)
!3744 = !DILocation(line: 995, column: 10, scope: !3650)
!3745 = !DILocalVariable(name: "bi", scope: !3650, file: !3, line: 996, type: !3746)
!3746 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !938, line: 218, baseType: !3747)
!3747 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !938, line: 203, size: 256, elements: !3748)
!3748 = !{!3749, !3750, !3751, !3752}
!3749 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !3747, file: !938, line: 206, baseType: !941, size: 64)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !3747, file: !938, line: 209, baseType: !941, size: 64, offset: 64)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !3747, file: !938, line: 212, baseType: !7, size: 32, offset: 128)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !3747, file: !938, line: 217, baseType: !951, size: 64, offset: 192)
!3753 = !DILocation(line: 996, column: 19, scope: !3650)
!3754 = !DILocation(line: 998, column: 3, scope: !3650)
!3755 = !DILocation(line: 999, column: 3, scope: !3650)
!3756 = !DILocation(line: 1001, column: 7, scope: !3757)
!3757 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1001, column: 7)
!3758 = !DILocation(line: 1001, column: 7, scope: !3650)
!3759 = !DILocation(line: 1004, column: 7, scope: !3760)
!3760 = distinct !DILexicalBlock(scope: !3757, file: !3, line: 1002, column: 5)
!3761 = !DILocation(line: 1005, column: 7, scope: !3760)
!3762 = !DILocation(line: 1006, column: 5, scope: !3760)
!3763 = !DILocation(line: 1008, column: 7, scope: !3650)
!3764 = !DILocation(line: 1008, column: 13, scope: !3650)
!3765 = !DILocation(line: 1008, column: 5, scope: !3650)
!3766 = !DILocation(line: 1009, column: 37, scope: !3650)
!3767 = !DILocation(line: 1009, column: 9, scope: !3650)
!3768 = !DILocation(line: 1009, column: 7, scope: !3650)
!3769 = !DILocation(line: 1010, column: 3, scope: !3650)
!3770 = !DILocation(line: 1011, column: 3, scope: !3650)
!3771 = !DILocation(line: 1014, column: 24, scope: !3772)
!3772 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1014, column: 7)
!3773 = !DILocation(line: 1014, column: 29, scope: !3772)
!3774 = !DILocation(line: 1014, column: 35, scope: !3772)
!3775 = !DILocation(line: 1014, column: 8, scope: !3772)
!3776 = !DILocation(line: 1014, column: 7, scope: !3650)
!3777 = !DILocation(line: 1016, column: 13, scope: !3778)
!3778 = distinct !DILexicalBlock(scope: !3772, file: !3, line: 1015, column: 5)
!3779 = !DILocation(line: 1016, column: 7, scope: !3778)
!3780 = !DILocation(line: 1017, column: 7, scope: !3778)
!3781 = !DILocation(line: 1019, column: 13, scope: !3650)
!3782 = !DILocation(line: 1019, column: 11, scope: !3650)
!3783 = !DILocation(line: 1023, column: 26, scope: !3650)
!3784 = !DILocation(line: 1023, column: 29, scope: !3650)
!3785 = !DILocation(line: 1023, column: 35, scope: !3650)
!3786 = !DILocation(line: 1023, column: 24, scope: !3650)
!3787 = !DILocation(line: 1024, column: 3, scope: !3650)
!3788 = !DILocation(line: 1027, column: 33, scope: !3650)
!3789 = !DILocation(line: 1027, column: 16, scope: !3650)
!3790 = !DILocation(line: 1027, column: 14, scope: !3650)
!3791 = !DILocation(line: 1029, column: 7, scope: !3792)
!3792 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1029, column: 7)
!3793 = !DILocation(line: 1029, column: 13, scope: !3792)
!3794 = !DILocation(line: 1029, column: 7, scope: !3650)
!3795 = !DILocation(line: 1033, column: 17, scope: !3796)
!3796 = distinct !DILexicalBlock(scope: !3792, file: !3, line: 1030, column: 5)
!3797 = !DILocation(line: 1033, column: 25, scope: !3796)
!3798 = !DILocation(line: 1033, column: 15, scope: !3796)
!3799 = !DILocation(line: 1034, column: 17, scope: !3796)
!3800 = !DILocation(line: 1034, column: 15, scope: !3796)
!3801 = !DILocation(line: 1035, column: 11, scope: !3802)
!3802 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1035, column: 11)
!3803 = !DILocation(line: 1035, column: 19, scope: !3802)
!3804 = !DILocation(line: 1035, column: 11, scope: !3796)
!3805 = !DILocation(line: 1036, column: 10, scope: !3802)
!3806 = !DILocation(line: 1036, column: 2, scope: !3802)
!3807 = !DILocation(line: 1037, column: 11, scope: !3808)
!3808 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1037, column: 11)
!3809 = !DILocation(line: 1037, column: 21, scope: !3808)
!3810 = !DILocation(line: 1037, column: 19, scope: !3808)
!3811 = !DILocation(line: 1037, column: 11, scope: !3796)
!3812 = !DILocation(line: 1038, column: 12, scope: !3808)
!3813 = !DILocation(line: 1038, column: 10, scope: !3808)
!3814 = !DILocation(line: 1038, column: 2, scope: !3808)
!3815 = !DILocation(line: 1039, column: 23, scope: !3796)
!3816 = !DILocation(line: 1039, column: 30, scope: !3796)
!3817 = !DILocation(line: 1039, column: 54, scope: !3796)
!3818 = !DILocation(line: 1039, column: 64, scope: !3796)
!3819 = !DILocation(line: 1039, column: 62, scope: !3796)
!3820 = !DILocation(line: 1039, column: 21, scope: !3796)
!3821 = !DILocation(line: 1040, column: 11, scope: !3822)
!3822 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1040, column: 11)
!3823 = !DILocation(line: 1040, column: 27, scope: !3822)
!3824 = !DILocation(line: 1040, column: 37, scope: !3822)
!3825 = !DILocation(line: 1040, column: 35, scope: !3822)
!3826 = !DILocation(line: 1040, column: 25, scope: !3822)
!3827 = !DILocation(line: 1040, column: 11, scope: !3796)
!3828 = !DILocation(line: 1041, column: 18, scope: !3822)
!3829 = !DILocation(line: 1041, column: 28, scope: !3822)
!3830 = !DILocation(line: 1041, column: 26, scope: !3822)
!3831 = !DILocation(line: 1041, column: 16, scope: !3822)
!3832 = !DILocation(line: 1041, column: 2, scope: !3822)
!3833 = !DILocation(line: 1042, column: 24, scope: !3796)
!3834 = !DILocation(line: 1042, column: 22, scope: !3796)
!3835 = !DILocation(line: 1044, column: 8, scope: !3796)
!3836 = !DILocation(line: 1043, column: 27, scope: !3796)
!3837 = !DILocation(line: 1046, column: 11, scope: !3838)
!3838 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1046, column: 11)
!3839 = !DILocation(line: 1047, column: 4, scope: !3838)
!3840 = !DILocation(line: 1047, column: 26, scope: !3838)
!3841 = !DILocation(line: 1047, column: 32, scope: !3838)
!3842 = !DILocation(line: 1047, column: 24, scope: !3838)
!3843 = !DILocation(line: 1047, column: 44, scope: !3838)
!3844 = !DILocation(line: 1046, column: 11, scope: !3796)
!3845 = !DILocation(line: 1051, column: 23, scope: !3846)
!3846 = distinct !DILexicalBlock(scope: !3838, file: !3, line: 1048, column: 2)
!3847 = !DILocation(line: 1051, column: 21, scope: !3846)
!3848 = !DILocation(line: 1053, column: 19, scope: !3846)
!3849 = !DILocation(line: 1053, column: 17, scope: !3846)
!3850 = !DILocation(line: 1054, column: 11, scope: !3851)
!3851 = distinct !DILexicalBlock(scope: !3846, file: !3, line: 1054, column: 4)
!3852 = !DILocation(line: 1054, column: 9, scope: !3851)
!3853 = !DILocation(line: 1054, column: 16, scope: !3854)
!3854 = distinct !DILexicalBlock(scope: !3851, file: !3, line: 1054, column: 4)
!3855 = !DILocation(line: 1054, column: 20, scope: !3854)
!3856 = !DILocation(line: 1054, column: 18, scope: !3854)
!3857 = !DILocation(line: 1054, column: 4, scope: !3851)
!3858 = !DILocation(line: 1056, column: 12, scope: !3859)
!3859 = distinct !DILexicalBlock(scope: !3860, file: !3, line: 1056, column: 12)
!3860 = distinct !DILexicalBlock(scope: !3854, file: !3, line: 1055, column: 6)
!3861 = !DILocation(line: 1056, column: 16, scope: !3859)
!3862 = !DILocation(line: 1056, column: 22, scope: !3859)
!3863 = !DILocation(line: 1056, column: 28, scope: !3859)
!3864 = !DILocation(line: 1056, column: 19, scope: !3859)
!3865 = !DILocation(line: 1057, column: 5, scope: !3859)
!3866 = !DILocation(line: 1057, column: 40, scope: !3859)
!3867 = !DILocation(line: 1057, column: 44, scope: !3859)
!3868 = !DILocation(line: 1057, column: 48, scope: !3859)
!3869 = !DILocation(line: 1057, column: 54, scope: !3859)
!3870 = !DILocation(line: 1057, column: 8, scope: !3859)
!3871 = !DILocation(line: 1056, column: 12, scope: !3860)
!3872 = !DILocation(line: 1058, column: 19, scope: !3859)
!3873 = !DILocation(line: 1058, column: 33, scope: !3859)
!3874 = !DILocation(line: 1058, column: 3, scope: !3859)
!3875 = !DILocation(line: 1059, column: 6, scope: !3860)
!3876 = !DILocation(line: 1054, column: 24, scope: !3854)
!3877 = !DILocation(line: 1054, column: 4, scope: !3854)
!3878 = distinct !{!3878, !3857, !3879}
!3879 = !DILocation(line: 1059, column: 6, scope: !3851)
!3880 = !DILocation(line: 1060, column: 2, scope: !3846)
!3881 = !DILocation(line: 1062, column: 20, scope: !3796)
!3882 = !DILocation(line: 1062, column: 18, scope: !3796)
!3883 = !DILocation(line: 1064, column: 14, scope: !3884)
!3884 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1064, column: 7)
!3885 = !DILocation(line: 1064, column: 12, scope: !3884)
!3886 = !DILocation(line: 1064, column: 19, scope: !3887)
!3887 = distinct !DILexicalBlock(scope: !3884, file: !3, line: 1064, column: 7)
!3888 = !DILocation(line: 1064, column: 24, scope: !3887)
!3889 = !DILocation(line: 1064, column: 21, scope: !3887)
!3890 = !DILocation(line: 1064, column: 7, scope: !3884)
!3891 = !DILocation(line: 1065, column: 22, scope: !3887)
!3892 = !DILocation(line: 1066, column: 7, scope: !3887)
!3893 = !DILocation(line: 1067, column: 7, scope: !3887)
!3894 = !DILocation(line: 1065, column: 2, scope: !3887)
!3895 = !DILocation(line: 1065, column: 13, scope: !3887)
!3896 = !DILocation(line: 1065, column: 15, scope: !3887)
!3897 = !DILocation(line: 1065, column: 20, scope: !3887)
!3898 = !DILocation(line: 1064, column: 32, scope: !3887)
!3899 = !DILocation(line: 1064, column: 7, scope: !3887)
!3900 = distinct !{!3900, !3890, !3901}
!3901 = !DILocation(line: 1067, column: 7, scope: !3884)
!3902 = !DILocation(line: 1071, column: 11, scope: !3903)
!3903 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1071, column: 11)
!3904 = !DILocation(line: 1071, column: 17, scope: !3903)
!3905 = !DILocation(line: 1071, column: 11, scope: !3796)
!3906 = !DILocalVariable(name: "wanted_freq", scope: !3907, file: !3, line: 1073, type: !806)
!3907 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 1072, column: 2)
!3908 = !DILocation(line: 1073, column: 8, scope: !3907)
!3909 = !DILocation(line: 1073, column: 22, scope: !3907)
!3910 = !DILocation(line: 1075, column: 8, scope: !3911)
!3911 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 1075, column: 8)
!3912 = !DILocation(line: 1075, column: 22, scope: !3911)
!3913 = !DILocation(line: 1075, column: 20, scope: !3911)
!3914 = !DILocation(line: 1075, column: 8, scope: !3907)
!3915 = !DILocation(line: 1076, column: 20, scope: !3911)
!3916 = !DILocation(line: 1076, column: 18, scope: !3911)
!3917 = !DILocation(line: 1076, column: 6, scope: !3911)
!3918 = !DILocation(line: 1078, column: 4, scope: !3907)
!3919 = !DILocation(line: 1083, column: 16, scope: !3907)
!3920 = !DILocation(line: 1083, column: 14, scope: !3907)
!3921 = !DILocation(line: 1086, column: 11, scope: !3922)
!3922 = distinct !DILexicalBlock(scope: !3907, file: !3, line: 1086, column: 4)
!3923 = !DILocation(line: 1086, column: 9, scope: !3922)
!3924 = !DILocation(line: 1086, column: 16, scope: !3925)
!3925 = distinct !DILexicalBlock(scope: !3922, file: !3, line: 1086, column: 4)
!3926 = !DILocation(line: 1086, column: 20, scope: !3925)
!3927 = !DILocation(line: 1086, column: 18, scope: !3925)
!3928 = !DILocation(line: 1086, column: 4, scope: !3922)
!3929 = !DILocation(line: 1087, column: 20, scope: !3925)
!3930 = !DILocation(line: 1087, column: 18, scope: !3925)
!3931 = !DILocation(line: 1087, column: 6, scope: !3925)
!3932 = !DILocation(line: 1086, column: 28, scope: !3925)
!3933 = !DILocation(line: 1086, column: 4, scope: !3925)
!3934 = distinct !{!3934, !3928, !3935}
!3935 = !DILocation(line: 1087, column: 20, scope: !3922)
!3936 = !DILocation(line: 1088, column: 17, scope: !3907)
!3937 = !DILocation(line: 1088, column: 15, scope: !3907)
!3938 = !DILocation(line: 1089, column: 2, scope: !3907)
!3939 = !DILocation(line: 1090, column: 16, scope: !3940)
!3940 = distinct !DILexicalBlock(scope: !3903, file: !3, line: 1090, column: 16)
!3941 = !DILocation(line: 1090, column: 16, scope: !3903)
!3942 = !DILocation(line: 1092, column: 21, scope: !3943)
!3943 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 1091, column: 2)
!3944 = !DILocation(line: 1093, column: 7, scope: !3943)
!3945 = !DILocation(line: 1094, column: 7, scope: !3943)
!3946 = !DILocation(line: 1092, column: 19, scope: !3943)
!3947 = !DILocation(line: 1095, column: 8, scope: !3943)
!3948 = !DILocation(line: 1095, column: 6, scope: !3943)
!3949 = !DILocation(line: 1096, column: 15, scope: !3943)
!3950 = !DILocation(line: 1097, column: 11, scope: !3951)
!3951 = distinct !DILexicalBlock(scope: !3943, file: !3, line: 1097, column: 4)
!3952 = !DILocation(line: 1097, column: 9, scope: !3951)
!3953 = !DILocation(line: 1097, column: 16, scope: !3954)
!3954 = distinct !DILexicalBlock(scope: !3951, file: !3, line: 1097, column: 4)
!3955 = !DILocation(line: 1097, column: 20, scope: !3954)
!3956 = !DILocation(line: 1097, column: 18, scope: !3954)
!3957 = !DILocation(line: 1097, column: 4, scope: !3951)
!3958 = !DILocation(line: 1099, column: 22, scope: !3959)
!3959 = distinct !DILexicalBlock(scope: !3954, file: !3, line: 1098, column: 6)
!3960 = !DILocation(line: 1099, column: 19, scope: !3959)
!3961 = !DILocation(line: 1100, column: 12, scope: !3959)
!3962 = !DILocation(line: 1100, column: 10, scope: !3959)
!3963 = !DILocation(line: 1101, column: 6, scope: !3959)
!3964 = !DILocation(line: 1097, column: 28, scope: !3954)
!3965 = !DILocation(line: 1097, column: 4, scope: !3954)
!3966 = distinct !{!3966, !3957, !3967}
!3967 = !DILocation(line: 1101, column: 6, scope: !3951)
!3968 = !DILocation(line: 1102, column: 17, scope: !3943)
!3969 = !DILocation(line: 1102, column: 15, scope: !3943)
!3970 = !DILocation(line: 1103, column: 16, scope: !3943)
!3971 = !DILocation(line: 1103, column: 14, scope: !3943)
!3972 = !DILocation(line: 1104, column: 2, scope: !3943)
!3973 = !DILocation(line: 1107, column: 15, scope: !3974)
!3974 = distinct !DILexicalBlock(scope: !3940, file: !3, line: 1106, column: 2)
!3975 = !DILocation(line: 1108, column: 11, scope: !3976)
!3976 = distinct !DILexicalBlock(scope: !3974, file: !3, line: 1108, column: 4)
!3977 = !DILocation(line: 1108, column: 9, scope: !3976)
!3978 = !DILocation(line: 1108, column: 16, scope: !3979)
!3979 = distinct !DILexicalBlock(scope: !3976, file: !3, line: 1108, column: 4)
!3980 = !DILocation(line: 1108, column: 20, scope: !3979)
!3981 = !DILocation(line: 1108, column: 18, scope: !3979)
!3982 = !DILocation(line: 1108, column: 4, scope: !3976)
!3983 = !DILocation(line: 1109, column: 19, scope: !3979)
!3984 = !DILocation(line: 1109, column: 17, scope: !3979)
!3985 = !DILocation(line: 1109, column: 6, scope: !3979)
!3986 = !DILocation(line: 1108, column: 28, scope: !3979)
!3987 = !DILocation(line: 1108, column: 4, scope: !3979)
!3988 = distinct !{!3988, !3982, !3989}
!3989 = !DILocation(line: 1109, column: 19, scope: !3976)
!3990 = !DILocation(line: 1110, column: 35, scope: !3974)
!3991 = !DILocation(line: 1110, column: 33, scope: !3974)
!3992 = !DILocation(line: 1110, column: 14, scope: !3974)
!3993 = !DILocation(line: 1112, column: 14, scope: !3994)
!3994 = distinct !DILexicalBlock(scope: !3796, file: !3, line: 1112, column: 7)
!3995 = !DILocation(line: 1112, column: 12, scope: !3994)
!3996 = !DILocation(line: 1112, column: 19, scope: !3997)
!3997 = distinct !DILexicalBlock(scope: !3994, file: !3, line: 1112, column: 7)
!3998 = !DILocation(line: 1112, column: 23, scope: !3997)
!3999 = !DILocation(line: 1112, column: 21, scope: !3997)
!4000 = !DILocation(line: 1112, column: 7, scope: !3994)
!4001 = !DILocation(line: 1113, column: 2, scope: !3997)
!4002 = !DILocation(line: 1112, column: 31, scope: !3997)
!4003 = !DILocation(line: 1112, column: 7, scope: !3997)
!4004 = distinct !{!4004, !4000, !4005}
!4005 = !DILocation(line: 1113, column: 2, scope: !3994)
!4006 = !DILocation(line: 1114, column: 7, scope: !3796)
!4007 = !DILocation(line: 1116, column: 5, scope: !3796)
!4008 = !DILocation(line: 1119, column: 12, scope: !3650)
!4009 = !DILocation(line: 1119, column: 15, scope: !3650)
!4010 = !DILocation(line: 1119, column: 20, scope: !3650)
!4011 = !DILocation(line: 1119, column: 10, scope: !3650)
!4012 = !DILocation(line: 1122, column: 16, scope: !3650)
!4013 = !DILocation(line: 1123, column: 16, scope: !4014)
!4014 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1123, column: 3)
!4015 = !DILocation(line: 1123, column: 22, scope: !4014)
!4016 = !DILocation(line: 1123, column: 14, scope: !4014)
!4017 = !DILocation(line: 1123, column: 8, scope: !4014)
!4018 = !DILocation(line: 1123, column: 29, scope: !4019)
!4019 = distinct !DILexicalBlock(scope: !4014, file: !3, line: 1123, column: 3)
!4020 = !DILocation(line: 1123, column: 3, scope: !4014)
!4021 = !DILocation(line: 1124, column: 17, scope: !4019)
!4022 = !DILocation(line: 1124, column: 5, scope: !4019)
!4023 = !DILocation(line: 1123, column: 44, scope: !4019)
!4024 = !DILocation(line: 1123, column: 51, scope: !4019)
!4025 = !DILocation(line: 1123, column: 42, scope: !4019)
!4026 = !DILocation(line: 1123, column: 3, scope: !4019)
!4027 = distinct !{!4027, !4020, !4028}
!4028 = !DILocation(line: 1124, column: 17, scope: !4014)
!4029 = !DILocation(line: 1125, column: 16, scope: !3650)
!4030 = !DILocation(line: 1125, column: 14, scope: !3650)
!4031 = !DILocation(line: 1126, column: 16, scope: !4032)
!4032 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1126, column: 3)
!4033 = !DILocation(line: 1126, column: 22, scope: !4032)
!4034 = !DILocation(line: 1126, column: 14, scope: !4032)
!4035 = !DILocation(line: 1126, column: 31, scope: !4032)
!4036 = !DILocation(line: 1126, column: 8, scope: !4032)
!4037 = !DILocation(line: 1126, column: 36, scope: !4038)
!4038 = distinct !DILexicalBlock(scope: !4032, file: !3, line: 1126, column: 3)
!4039 = !DILocation(line: 1126, column: 3, scope: !4032)
!4040 = !DILocation(line: 1127, column: 21, scope: !4038)
!4041 = !DILocation(line: 1127, column: 5, scope: !4038)
!4042 = !DILocation(line: 1127, column: 16, scope: !4038)
!4043 = !DILocation(line: 1127, column: 19, scope: !4038)
!4044 = !DILocation(line: 1126, column: 51, scope: !4038)
!4045 = !DILocation(line: 1126, column: 58, scope: !4038)
!4046 = !DILocation(line: 1126, column: 49, scope: !4038)
!4047 = !DILocation(line: 1126, column: 65, scope: !4038)
!4048 = !DILocation(line: 1126, column: 3, scope: !4038)
!4049 = distinct !{!4049, !4039, !4050}
!4050 = !DILocation(line: 1127, column: 21, scope: !4032)
!4051 = !DILocation(line: 1129, column: 18, scope: !3650)
!4052 = !DILocation(line: 1129, column: 24, scope: !3650)
!4053 = !DILocation(line: 1129, column: 3, scope: !3650)
!4054 = !DILocation(line: 1131, column: 18, scope: !3650)
!4055 = !DILocation(line: 1131, column: 16, scope: !3650)
!4056 = !DILocation(line: 1132, column: 7, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1132, column: 7)
!4058 = !DILocation(line: 1132, column: 7, scope: !3650)
!4059 = !DILocation(line: 1134, column: 15, scope: !4060)
!4060 = distinct !DILexicalBlock(scope: !4057, file: !3, line: 1133, column: 5)
!4061 = !DILocation(line: 1134, column: 7, scope: !4060)
!4062 = !DILocation(line: 1134, column: 29, scope: !4060)
!4063 = !DILocation(line: 1134, column: 34, scope: !4060)
!4064 = !DILocation(line: 1134, column: 36, scope: !4060)
!4065 = !DILocation(line: 1135, column: 28, scope: !4060)
!4066 = !DILocation(line: 1135, column: 26, scope: !4060)
!4067 = !DILocation(line: 1136, column: 5, scope: !4060)
!4068 = !DILocation(line: 1138, column: 25, scope: !3650)
!4069 = !DILocation(line: 1138, column: 3, scope: !3650)
!4070 = !DILocation(line: 1138, column: 23, scope: !3650)
!4071 = !DILocation(line: 1139, column: 26, scope: !3650)
!4072 = !DILocation(line: 1139, column: 3, scope: !3650)
!4073 = !DILocation(line: 1139, column: 24, scope: !3650)
!4074 = !DILocation(line: 1141, column: 17, scope: !3650)
!4075 = !DILocation(line: 1141, column: 20, scope: !3650)
!4076 = !DILocation(line: 1141, column: 15, scope: !3650)
!4077 = !DILocation(line: 1142, column: 10, scope: !4078)
!4078 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1142, column: 3)
!4079 = !DILocation(line: 1142, column: 8, scope: !4078)
!4080 = !DILocation(line: 1142, column: 15, scope: !4081)
!4081 = distinct !DILexicalBlock(scope: !4078, file: !3, line: 1142, column: 3)
!4082 = !DILocation(line: 1142, column: 19, scope: !4081)
!4083 = !DILocation(line: 1142, column: 17, scope: !4081)
!4084 = !DILocation(line: 1142, column: 3, scope: !4078)
!4085 = !DILocation(line: 1145, column: 22, scope: !4086)
!4086 = distinct !DILexicalBlock(scope: !4081, file: !3, line: 1143, column: 5)
!4087 = !DILocation(line: 1145, column: 34, scope: !4086)
!4088 = !DILocation(line: 1145, column: 48, scope: !4086)
!4089 = !DILocation(line: 1145, column: 7, scope: !4086)
!4090 = !DILocation(line: 1148, column: 17, scope: !4086)
!4091 = !DILocation(line: 1148, column: 22, scope: !4086)
!4092 = !DILocation(line: 1148, column: 25, scope: !4086)
!4093 = !DILocation(line: 1148, column: 34, scope: !4086)
!4094 = !DILocation(line: 1148, column: 49, scope: !4086)
!4095 = !DILocation(line: 1148, column: 65, scope: !4086)
!4096 = !DILocation(line: 1149, column: 3, scope: !4086)
!4097 = !DILocation(line: 1148, column: 7, scope: !4086)
!4098 = !DILocation(line: 1150, column: 21, scope: !4086)
!4099 = !DILocation(line: 1150, column: 47, scope: !4086)
!4100 = !DILocation(line: 1150, column: 19, scope: !4086)
!4101 = !DILocation(line: 1152, column: 11, scope: !4102)
!4102 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1152, column: 11)
!4103 = !DILocation(line: 1152, column: 17, scope: !4102)
!4104 = !DILocation(line: 1152, column: 11, scope: !4086)
!4105 = !DILocation(line: 1153, column: 9, scope: !4106)
!4106 = distinct !DILexicalBlock(scope: !4102, file: !3, line: 1153, column: 2)
!4107 = !DILocation(line: 1153, column: 7, scope: !4106)
!4108 = !DILocation(line: 1153, column: 14, scope: !4109)
!4109 = distinct !DILexicalBlock(scope: !4106, file: !3, line: 1153, column: 2)
!4110 = !DILocation(line: 1153, column: 18, scope: !4109)
!4111 = !DILocation(line: 1153, column: 16, scope: !4109)
!4112 = !DILocation(line: 1153, column: 2, scope: !4106)
!4113 = !DILocation(line: 1155, column: 6, scope: !4114)
!4114 = distinct !DILexicalBlock(scope: !4109, file: !3, line: 1154, column: 4)
!4115 = !DILocation(line: 1156, column: 41, scope: !4114)
!4116 = !DILocation(line: 1156, column: 43, scope: !4114)
!4117 = !DILocation(line: 1156, column: 32, scope: !4114)
!4118 = !DILocation(line: 1156, column: 24, scope: !4114)
!4119 = !DILocation(line: 1156, column: 6, scope: !4114)
!4120 = !DILocation(line: 1156, column: 14, scope: !4114)
!4121 = !DILocation(line: 1156, column: 18, scope: !4114)
!4122 = !DILocation(line: 1156, column: 22, scope: !4114)
!4123 = !DILocation(line: 1157, column: 4, scope: !4114)
!4124 = !DILocation(line: 1153, column: 22, scope: !4109)
!4125 = !DILocation(line: 1153, column: 2, scope: !4109)
!4126 = distinct !{!4126, !4112, !4127}
!4127 = !DILocation(line: 1157, column: 4, scope: !4106)
!4128 = !DILocation(line: 1160, column: 11, scope: !4129)
!4129 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1160, column: 11)
!4130 = !DILocation(line: 1160, column: 11, scope: !4086)
!4131 = !DILocation(line: 1162, column: 11, scope: !4132)
!4132 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 1162, column: 4)
!4133 = distinct !DILexicalBlock(scope: !4129, file: !3, line: 1161, column: 2)
!4134 = !DILocation(line: 1162, column: 9, scope: !4132)
!4135 = !DILocation(line: 1162, column: 16, scope: !4136)
!4136 = distinct !DILexicalBlock(scope: !4132, file: !3, line: 1162, column: 4)
!4137 = !DILocation(line: 1162, column: 20, scope: !4136)
!4138 = !DILocation(line: 1162, column: 18, scope: !4136)
!4139 = !DILocation(line: 1162, column: 4, scope: !4132)
!4140 = !DILocation(line: 1163, column: 6, scope: !4136)
!4141 = !DILocation(line: 1163, column: 14, scope: !4136)
!4142 = !DILocation(line: 1163, column: 18, scope: !4136)
!4143 = !DILocation(line: 1163, column: 24, scope: !4136)
!4144 = !DILocation(line: 1162, column: 24, scope: !4136)
!4145 = !DILocation(line: 1162, column: 4, scope: !4136)
!4146 = distinct !{!4146, !4139, !4147}
!4147 = !DILocation(line: 1163, column: 27, scope: !4132)
!4148 = !DILocation(line: 1164, column: 11, scope: !4149)
!4149 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 1164, column: 4)
!4150 = !DILocation(line: 1164, column: 9, scope: !4149)
!4151 = !DILocation(line: 1164, column: 16, scope: !4152)
!4152 = distinct !DILexicalBlock(scope: !4149, file: !3, line: 1164, column: 4)
!4153 = !DILocation(line: 1164, column: 20, scope: !4152)
!4154 = !DILocation(line: 1164, column: 18, scope: !4152)
!4155 = !DILocation(line: 1164, column: 4, scope: !4149)
!4156 = !DILocalVariable(name: "ei", scope: !4157, file: !3, line: 1166, type: !2192)
!4157 = distinct !DILexicalBlock(scope: !4152, file: !3, line: 1165, column: 6)
!4158 = !DILocation(line: 1166, column: 22, scope: !4157)
!4159 = !DILocation(line: 1167, column: 17, scope: !4157)
!4160 = !DILocation(line: 1167, column: 25, scope: !4157)
!4161 = !DILocation(line: 1167, column: 15, scope: !4157)
!4162 = !DILocation(line: 1168, column: 12, scope: !4163)
!4163 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 1168, column: 12)
!4164 = !DILocation(line: 1168, column: 20, scope: !4163)
!4165 = !DILocation(line: 1168, column: 35, scope: !4163)
!4166 = !DILocation(line: 1168, column: 32, scope: !4163)
!4167 = !DILocation(line: 1168, column: 12, scope: !4157)
!4168 = !DILocation(line: 1169, column: 3, scope: !4163)
!4169 = !DILocation(line: 1169, column: 11, scope: !4163)
!4170 = !DILocation(line: 1169, column: 17, scope: !4163)
!4171 = !DILocation(line: 1171, column: 8, scope: !4172)
!4172 = distinct !DILexicalBlock(scope: !4157, file: !3, line: 1171, column: 8)
!4173 = !DILocation(line: 1171, column: 8, scope: !4174)
!4174 = distinct !DILexicalBlock(scope: !4172, file: !3, line: 1171, column: 8)
!4175 = !DILocation(line: 1172, column: 8, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4174, file: !3, line: 1172, column: 7)
!4177 = !DILocation(line: 1172, column: 12, scope: !4176)
!4178 = !DILocation(line: 1172, column: 18, scope: !4176)
!4179 = !DILocation(line: 1172, column: 24, scope: !4176)
!4180 = !DILocation(line: 1173, column: 7, scope: !4176)
!4181 = !DILocation(line: 1173, column: 11, scope: !4176)
!4182 = !DILocation(line: 1173, column: 15, scope: !4176)
!4183 = !DILocation(line: 1173, column: 20, scope: !4176)
!4184 = !DILocation(line: 1173, column: 35, scope: !4176)
!4185 = !DILocation(line: 1173, column: 32, scope: !4176)
!4186 = !DILocation(line: 1174, column: 4, scope: !4176)
!4187 = !DILocation(line: 1174, column: 7, scope: !4176)
!4188 = !DILocation(line: 1174, column: 11, scope: !4176)
!4189 = !DILocation(line: 1174, column: 17, scope: !4176)
!4190 = !DILocation(line: 1174, column: 32, scope: !4176)
!4191 = !DILocation(line: 1174, column: 29, scope: !4176)
!4192 = !DILocation(line: 1172, column: 7, scope: !4174)
!4193 = !DILocation(line: 1175, column: 5, scope: !4176)
!4194 = !DILocation(line: 1175, column: 9, scope: !4176)
!4195 = !DILocation(line: 1175, column: 15, scope: !4176)
!4196 = !DILocation(line: 1174, column: 38, scope: !4176)
!4197 = distinct !{!4197, !4171, !4198}
!4198 = !DILocation(line: 1175, column: 18, scope: !4172)
!4199 = !DILocation(line: 1176, column: 6, scope: !4157)
!4200 = !DILocation(line: 1164, column: 24, scope: !4152)
!4201 = !DILocation(line: 1164, column: 4, scope: !4152)
!4202 = distinct !{!4202, !4155, !4203}
!4203 = !DILocation(line: 1176, column: 6, scope: !4149)
!4204 = !DILocation(line: 1177, column: 11, scope: !4205)
!4205 = distinct !DILexicalBlock(scope: !4133, file: !3, line: 1177, column: 4)
!4206 = !DILocation(line: 1177, column: 9, scope: !4205)
!4207 = !DILocation(line: 1177, column: 16, scope: !4208)
!4208 = distinct !DILexicalBlock(scope: !4205, file: !3, line: 1177, column: 4)
!4209 = !DILocation(line: 1177, column: 20, scope: !4208)
!4210 = !DILocation(line: 1177, column: 18, scope: !4208)
!4211 = !DILocation(line: 1177, column: 4, scope: !4205)
!4212 = !DILocation(line: 1178, column: 6, scope: !4208)
!4213 = !DILocation(line: 1178, column: 14, scope: !4208)
!4214 = !DILocation(line: 1178, column: 18, scope: !4208)
!4215 = !DILocation(line: 1178, column: 24, scope: !4208)
!4216 = !DILocation(line: 1177, column: 24, scope: !4208)
!4217 = !DILocation(line: 1177, column: 4, scope: !4208)
!4218 = distinct !{!4218, !4211, !4219}
!4219 = !DILocation(line: 1178, column: 28, scope: !4205)
!4220 = !DILocation(line: 1179, column: 2, scope: !4133)
!4221 = !DILocation(line: 1182, column: 11, scope: !4222)
!4222 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1182, column: 11)
!4223 = !DILocation(line: 1182, column: 11, scope: !4086)
!4224 = !DILocation(line: 1184, column: 36, scope: !4225)
!4225 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 1183, column: 2)
!4226 = !DILocation(line: 1184, column: 48, scope: !4225)
!4227 = !DILocation(line: 1184, column: 4, scope: !4225)
!4228 = !DILocation(line: 1185, column: 36, scope: !4225)
!4229 = !DILocation(line: 1186, column: 8, scope: !4225)
!4230 = !DILocation(line: 1186, column: 14, scope: !4225)
!4231 = !DILocation(line: 1185, column: 4, scope: !4225)
!4232 = !DILocation(line: 1187, column: 45, scope: !4225)
!4233 = !DILocation(line: 1187, column: 57, scope: !4225)
!4234 = !DILocation(line: 1187, column: 4, scope: !4225)
!4235 = !DILocation(line: 1188, column: 26, scope: !4225)
!4236 = !DILocation(line: 1188, column: 34, scope: !4225)
!4237 = !DILocation(line: 1188, column: 36, scope: !4225)
!4238 = !DILocation(line: 1188, column: 12, scope: !4225)
!4239 = !DILocation(line: 1188, column: 18, scope: !4225)
!4240 = !DILocation(line: 1188, column: 24, scope: !4225)
!4241 = !DILocation(line: 1188, column: 10, scope: !4225)
!4242 = !DILocation(line: 1189, column: 21, scope: !4225)
!4243 = !DILocation(line: 1189, column: 19, scope: !4225)
!4244 = !DILocation(line: 1189, column: 6, scope: !4225)
!4245 = !DILocation(line: 1190, column: 2, scope: !4225)
!4246 = !DILocation(line: 1193, column: 36, scope: !4247)
!4247 = distinct !DILexicalBlock(scope: !4222, file: !3, line: 1192, column: 2)
!4248 = !DILocation(line: 1194, column: 8, scope: !4247)
!4249 = !DILocation(line: 1194, column: 14, scope: !4247)
!4250 = !DILocation(line: 1193, column: 4, scope: !4247)
!4251 = !DILocation(line: 1195, column: 36, scope: !4247)
!4252 = !DILocation(line: 1195, column: 39, scope: !4247)
!4253 = !DILocation(line: 1195, column: 4, scope: !4247)
!4254 = !DILocation(line: 1196, column: 45, scope: !4247)
!4255 = !DILocation(line: 1196, column: 57, scope: !4247)
!4256 = !DILocation(line: 1196, column: 60, scope: !4247)
!4257 = !DILocation(line: 1196, column: 4, scope: !4247)
!4258 = !DILocation(line: 1197, column: 8, scope: !4247)
!4259 = !DILocation(line: 1197, column: 6, scope: !4247)
!4260 = !DILocation(line: 1201, column: 11, scope: !4261)
!4261 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1201, column: 11)
!4262 = !DILocation(line: 1201, column: 16, scope: !4261)
!4263 = !DILocation(line: 1201, column: 19, scope: !4261)
!4264 = !DILocation(line: 1201, column: 11, scope: !4086)
!4265 = !DILocation(line: 1203, column: 8, scope: !4266)
!4266 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 1203, column: 8)
!4267 = distinct !DILexicalBlock(scope: !4261, file: !3, line: 1202, column: 2)
!4268 = !DILocation(line: 1203, column: 8, scope: !4267)
!4269 = !DILocation(line: 1204, column: 6, scope: !4266)
!4270 = !DILocation(line: 1205, column: 26, scope: !4267)
!4271 = !DILocation(line: 1205, column: 4, scope: !4267)
!4272 = !DILocation(line: 1208, column: 8, scope: !4273)
!4273 = distinct !DILexicalBlock(scope: !4267, file: !3, line: 1208, column: 8)
!4274 = !DILocation(line: 1208, column: 8, scope: !4267)
!4275 = !DILocation(line: 1210, column: 8, scope: !4276)
!4276 = distinct !DILexicalBlock(scope: !4277, file: !3, line: 1210, column: 8)
!4277 = distinct !DILexicalBlock(scope: !4273, file: !3, line: 1209, column: 6)
!4278 = !DILocation(line: 1210, column: 8, scope: !4279)
!4279 = distinct !DILexicalBlock(scope: !4276, file: !3, line: 1210, column: 8)
!4280 = !DILocation(line: 1212, column: 32, scope: !4281)
!4281 = distinct !DILexicalBlock(scope: !4279, file: !3, line: 1211, column: 3)
!4282 = !DILocation(line: 1212, column: 42, scope: !4281)
!4283 = !DILocation(line: 1212, column: 40, scope: !4281)
!4284 = !DILocation(line: 1212, column: 48, scope: !4281)
!4285 = !DILocation(line: 1212, column: 5, scope: !4281)
!4286 = !DILocation(line: 1214, column: 3, scope: !4281)
!4287 = distinct !{!4287, !4275, !4288}
!4288 = !DILocation(line: 1214, column: 3, scope: !4276)
!4289 = !DILocation(line: 1215, column: 6, scope: !4277)
!4290 = !DILocation(line: 1216, column: 2, scope: !4267)
!4291 = !DILocation(line: 1220, column: 12, scope: !4292)
!4292 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1220, column: 11)
!4293 = !DILocation(line: 1220, column: 11, scope: !4086)
!4294 = !DILocation(line: 1222, column: 12, scope: !4295)
!4295 = distinct !DILexicalBlock(scope: !4292, file: !3, line: 1221, column: 2)
!4296 = !DILocation(line: 1222, column: 4, scope: !4295)
!4297 = !DILocation(line: 1222, column: 26, scope: !4295)
!4298 = !DILocation(line: 1222, column: 35, scope: !4295)
!4299 = !DILocation(line: 1222, column: 37, scope: !4295)
!4300 = !DILocation(line: 1223, column: 25, scope: !4295)
!4301 = !DILocation(line: 1223, column: 33, scope: !4295)
!4302 = !DILocation(line: 1223, column: 35, scope: !4295)
!4303 = !DILocation(line: 1223, column: 23, scope: !4295)
!4304 = !DILocation(line: 1224, column: 2, scope: !4295)
!4305 = !DILocation(line: 1227, column: 11, scope: !4306)
!4306 = distinct !DILexicalBlock(scope: !4086, file: !3, line: 1227, column: 11)
!4307 = !DILocation(line: 1227, column: 17, scope: !4306)
!4308 = !DILocation(line: 1227, column: 11, scope: !4086)
!4309 = !DILocation(line: 1229, column: 31, scope: !4310)
!4310 = distinct !DILexicalBlock(scope: !4306, file: !3, line: 1228, column: 2)
!4311 = !DILocation(line: 1229, column: 40, scope: !4310)
!4312 = !DILocation(line: 1229, column: 43, scope: !4310)
!4313 = !DILocation(line: 1229, column: 4, scope: !4310)
!4314 = !DILocation(line: 1230, column: 16, scope: !4310)
!4315 = !DILocation(line: 1230, column: 14, scope: !4310)
!4316 = !DILocation(line: 1231, column: 2, scope: !4310)
!4317 = !DILocation(line: 1232, column: 5, scope: !4086)
!4318 = !DILocation(line: 1142, column: 27, scope: !4081)
!4319 = !DILocation(line: 1142, column: 3, scope: !4081)
!4320 = distinct !{!4320, !4084, !4321}
!4321 = !DILocation(line: 1232, column: 5, scope: !4078)
!4322 = !DILocation(line: 1233, column: 9, scope: !3650)
!4323 = !DILocation(line: 1233, column: 3, scope: !3650)
!4324 = !DILocation(line: 1234, column: 9, scope: !3650)
!4325 = !DILocation(line: 1234, column: 3, scope: !3650)
!4326 = !DILocation(line: 1237, column: 7, scope: !4327)
!4327 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1237, column: 7)
!4328 = !DILocation(line: 1237, column: 12, scope: !4327)
!4329 = !DILocation(line: 1237, column: 15, scope: !4327)
!4330 = !DILocation(line: 1237, column: 7, scope: !3650)
!4331 = !DILocation(line: 1239, column: 11, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 1239, column: 11)
!4333 = distinct !DILexicalBlock(scope: !4327, file: !3, line: 1238, column: 5)
!4334 = !DILocation(line: 1239, column: 11, scope: !4333)
!4335 = !DILocation(line: 1240, column: 2, scope: !4332)
!4336 = !DILocation(line: 1241, column: 29, scope: !4333)
!4337 = !DILocation(line: 1241, column: 7, scope: !4333)
!4338 = !DILocation(line: 1244, column: 11, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4333, file: !3, line: 1244, column: 11)
!4340 = !DILocation(line: 1244, column: 11, scope: !4333)
!4341 = !DILocation(line: 1246, column: 4, scope: !4342)
!4342 = distinct !DILexicalBlock(scope: !4343, file: !3, line: 1246, column: 4)
!4343 = distinct !DILexicalBlock(scope: !4339, file: !3, line: 1245, column: 2)
!4344 = !DILocation(line: 1246, column: 4, scope: !4345)
!4345 = distinct !DILexicalBlock(scope: !4342, file: !3, line: 1246, column: 4)
!4346 = !DILocation(line: 1248, column: 35, scope: !4347)
!4347 = distinct !DILexicalBlock(scope: !4345, file: !3, line: 1247, column: 6)
!4348 = !DILocation(line: 1248, column: 41, scope: !4347)
!4349 = !DILocation(line: 1248, column: 39, scope: !4347)
!4350 = !DILocation(line: 1248, column: 47, scope: !4347)
!4351 = !DILocation(line: 1248, column: 8, scope: !4347)
!4352 = !DILocation(line: 1250, column: 6, scope: !4347)
!4353 = distinct !{!4353, !4341, !4354}
!4354 = !DILocation(line: 1250, column: 6, scope: !4342)
!4355 = !DILocation(line: 1251, column: 2, scope: !4343)
!4356 = !DILocation(line: 1252, column: 5, scope: !4333)
!4357 = !DILocation(line: 1255, column: 8, scope: !4358)
!4358 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1255, column: 7)
!4359 = !DILocation(line: 1255, column: 7, scope: !3650)
!4360 = !DILocation(line: 1256, column: 46, scope: !4358)
!4361 = !DILocation(line: 1256, column: 49, scope: !4358)
!4362 = !DILocation(line: 1256, column: 55, scope: !4358)
!4363 = !DILocation(line: 1256, column: 58, scope: !4358)
!4364 = !DILocation(line: 1256, column: 5, scope: !4358)
!4365 = !DILocation(line: 1257, column: 7, scope: !4366)
!4366 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1257, column: 7)
!4367 = !DILocation(line: 1257, column: 13, scope: !4366)
!4368 = !DILocation(line: 1257, column: 7, scope: !3650)
!4369 = !DILocation(line: 1259, column: 34, scope: !4370)
!4370 = distinct !DILexicalBlock(scope: !4366, file: !3, line: 1258, column: 5)
!4371 = !DILocation(line: 1259, column: 39, scope: !4370)
!4372 = !DILocation(line: 1259, column: 42, scope: !4370)
!4373 = !DILocation(line: 1259, column: 7, scope: !4370)
!4374 = !DILocation(line: 1260, column: 13, scope: !4370)
!4375 = !DILocation(line: 1260, column: 7, scope: !4370)
!4376 = !DILocation(line: 1261, column: 5, scope: !4370)
!4377 = !DILocation(line: 1264, column: 10, scope: !4378)
!4378 = distinct !DILexicalBlock(scope: !3650, file: !3, line: 1264, column: 3)
!4379 = !DILocation(line: 1264, column: 8, scope: !4378)
!4380 = !DILocation(line: 1264, column: 15, scope: !4381)
!4381 = distinct !DILexicalBlock(scope: !4378, file: !3, line: 1264, column: 3)
!4382 = !DILocation(line: 1264, column: 19, scope: !4381)
!4383 = !DILocation(line: 1264, column: 17, scope: !4381)
!4384 = !DILocation(line: 1264, column: 3, scope: !4378)
!4385 = !DILocalVariable(name: "dominated", scope: !4386, file: !3, line: 1266, type: !648)
!4386 = distinct !DILexicalBlock(scope: !4381, file: !3, line: 1265, column: 5)
!4387 = !DILocation(line: 1266, column: 19, scope: !4386)
!4388 = !DILocalVariable(name: "dom_bb", scope: !4386, file: !3, line: 1266, type: !648)
!4389 = !DILocation(line: 1266, column: 30, scope: !4386)
!4390 = !DILocalVariable(name: "dom_bbs", scope: !4386, file: !3, line: 1267, type: !2043)
!4391 = !DILocation(line: 1267, column: 32, scope: !4386)
!4392 = !DILocalVariable(name: "j", scope: !4386, file: !3, line: 1268, type: !7)
!4393 = !DILocation(line: 1268, column: 16, scope: !4386)
!4394 = !DILocation(line: 1270, column: 12, scope: !4386)
!4395 = !DILocation(line: 1270, column: 16, scope: !4386)
!4396 = !DILocation(line: 1270, column: 10, scope: !4386)
!4397 = !DILocation(line: 1271, column: 7, scope: !4386)
!4398 = !DILocation(line: 1271, column: 11, scope: !4386)
!4399 = !DILocation(line: 1271, column: 15, scope: !4386)
!4400 = !DILocation(line: 1273, column: 51, scope: !4386)
!4401 = !DILocation(line: 1273, column: 17, scope: !4386)
!4402 = !DILocation(line: 1273, column: 15, scope: !4386)
!4403 = !DILocation(line: 1274, column: 14, scope: !4404)
!4404 = distinct !DILexicalBlock(scope: !4386, file: !3, line: 1274, column: 7)
!4405 = !DILocation(line: 1274, column: 12, scope: !4404)
!4406 = !DILocation(line: 1274, column: 19, scope: !4407)
!4407 = distinct !DILexicalBlock(scope: !4404, file: !3, line: 1274, column: 7)
!4408 = !DILocation(line: 1274, column: 7, scope: !4404)
!4409 = !DILocation(line: 1276, column: 31, scope: !4410)
!4410 = distinct !DILexicalBlock(scope: !4411, file: !3, line: 1276, column: 8)
!4411 = distinct !DILexicalBlock(scope: !4407, file: !3, line: 1275, column: 2)
!4412 = !DILocation(line: 1276, column: 37, scope: !4410)
!4413 = !DILocation(line: 1276, column: 8, scope: !4410)
!4414 = !DILocation(line: 1276, column: 8, scope: !4411)
!4415 = !DILocation(line: 1277, column: 6, scope: !4410)
!4416 = !DILocation(line: 1279, column: 20, scope: !4411)
!4417 = !DILocation(line: 1279, column: 33, scope: !4411)
!4418 = !DILocation(line: 1279, column: 37, scope: !4411)
!4419 = !DILocation(line: 1278, column: 13, scope: !4411)
!4420 = !DILocation(line: 1278, column: 11, scope: !4411)
!4421 = !DILocation(line: 1280, column: 45, scope: !4411)
!4422 = !DILocation(line: 1280, column: 56, scope: !4411)
!4423 = !DILocation(line: 1280, column: 4, scope: !4411)
!4424 = !DILocation(line: 1281, column: 2, scope: !4411)
!4425 = !DILocation(line: 1274, column: 70, scope: !4407)
!4426 = !DILocation(line: 1274, column: 7, scope: !4407)
!4427 = distinct !{!4427, !4408, !4428}
!4428 = !DILocation(line: 1281, column: 2, scope: !4404)
!4429 = !DILocation(line: 1282, column: 7, scope: !4386)
!4430 = !DILocation(line: 1283, column: 5, scope: !4386)
!4431 = !DILocation(line: 1264, column: 23, scope: !4381)
!4432 = !DILocation(line: 1264, column: 3, scope: !4381)
!4433 = distinct !{!4433, !4384, !4434}
!4434 = !DILocation(line: 1283, column: 5, scope: !4378)
!4435 = !DILocation(line: 1284, column: 9, scope: !3650)
!4436 = !DILocation(line: 1284, column: 3, scope: !3650)
!4437 = !DILocation(line: 1286, column: 9, scope: !3650)
!4438 = !DILocation(line: 1286, column: 3, scope: !3650)
!4439 = !DILocation(line: 1287, column: 3, scope: !3650)
!4440 = !DILocation(line: 1289, column: 3, scope: !3650)
!4441 = !DILocation(line: 1290, column: 1, scope: !3650)
!4442 = distinct !DISubprogram(name: "copy_loops_to", scope: !3, file: !3, line: 890, type: !4443, scopeLine: 891, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4443 = !DISubroutineType(types: !4444)
!4444 = !{null, !2039, !806, !1369}
!4445 = !DILocalVariable(name: "copied_loops", arg: 1, scope: !4442, file: !3, line: 890, type: !2039)
!4446 = !DILocation(line: 890, column: 30, scope: !4442)
!4447 = !DILocalVariable(name: "n", arg: 2, scope: !4442, file: !3, line: 890, type: !806)
!4448 = !DILocation(line: 890, column: 48, scope: !4442)
!4449 = !DILocalVariable(name: "target", arg: 3, scope: !4442, file: !3, line: 890, type: !1369)
!4450 = !DILocation(line: 890, column: 64, scope: !4442)
!4451 = !DILocalVariable(name: "aloop", scope: !4442, file: !3, line: 892, type: !1369)
!4452 = !DILocation(line: 892, column: 16, scope: !4442)
!4453 = !DILocalVariable(name: "i", scope: !4442, file: !3, line: 893, type: !806)
!4454 = !DILocation(line: 893, column: 7, scope: !4442)
!4455 = !DILocation(line: 895, column: 10, scope: !4456)
!4456 = distinct !DILexicalBlock(scope: !4442, file: !3, line: 895, column: 3)
!4457 = !DILocation(line: 895, column: 8, scope: !4456)
!4458 = !DILocation(line: 895, column: 15, scope: !4459)
!4459 = distinct !DILexicalBlock(scope: !4456, file: !3, line: 895, column: 3)
!4460 = !DILocation(line: 895, column: 19, scope: !4459)
!4461 = !DILocation(line: 895, column: 17, scope: !4459)
!4462 = !DILocation(line: 895, column: 3, scope: !4456)
!4463 = !DILocation(line: 897, column: 31, scope: !4464)
!4464 = distinct !DILexicalBlock(scope: !4459, file: !3, line: 896, column: 5)
!4465 = !DILocation(line: 897, column: 44, scope: !4464)
!4466 = !DILocation(line: 897, column: 48, scope: !4464)
!4467 = !DILocation(line: 897, column: 15, scope: !4464)
!4468 = !DILocation(line: 897, column: 13, scope: !4464)
!4469 = !DILocation(line: 898, column: 27, scope: !4464)
!4470 = !DILocation(line: 898, column: 40, scope: !4464)
!4471 = !DILocation(line: 898, column: 44, scope: !4464)
!4472 = !DILocation(line: 898, column: 7, scope: !4464)
!4473 = !DILocation(line: 899, column: 5, scope: !4464)
!4474 = !DILocation(line: 895, column: 23, scope: !4459)
!4475 = !DILocation(line: 895, column: 3, scope: !4459)
!4476 = distinct !{!4476, !4462, !4477}
!4477 = !DILocation(line: 899, column: 5, scope: !4456)
!4478 = !DILocation(line: 900, column: 1, scope: !4442)
!4479 = distinct !DISubprogram(name: "VEC_edge_heap_safe_push", scope: !144, file: !144, line: 152, type: !4480, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4480 = !DISubroutineType(types: !4481)
!4481 = !{!2543, !3653, !665}
!4482 = !DILocalVariable(name: "vec_", arg: 1, scope: !4479, file: !144, line: 152, type: !3653)
!4483 = !DILocation(line: 152, column: 1, scope: !4479)
!4484 = !DILocalVariable(name: "obj_", arg: 2, scope: !4479, file: !144, line: 152, type: !665)
!4485 = distinct !DISubprogram(name: "set_zero_probability", scope: !3, file: !3, line: 929, type: !4486, scopeLine: 930, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4486 = !DISubroutineType(types: !4487)
!4487 = !{null, !665}
!4488 = !DILocalVariable(name: "e", arg: 1, scope: !4485, file: !3, line: 929, type: !665)
!4489 = !DILocation(line: 929, column: 28, scope: !4485)
!4490 = !DILocalVariable(name: "bb", scope: !4485, file: !3, line: 931, type: !648)
!4491 = !DILocation(line: 931, column: 15, scope: !4485)
!4492 = !DILocation(line: 931, column: 20, scope: !4485)
!4493 = !DILocation(line: 931, column: 23, scope: !4485)
!4494 = !DILocalVariable(name: "ei", scope: !4485, file: !3, line: 932, type: !2192)
!4495 = !DILocation(line: 932, column: 17, scope: !4485)
!4496 = !DILocalVariable(name: "ae", scope: !4485, file: !3, line: 933, type: !665)
!4497 = !DILocation(line: 933, column: 8, scope: !4485)
!4498 = !DILocalVariable(name: "last", scope: !4485, file: !3, line: 933, type: !665)
!4499 = !DILocation(line: 933, column: 12, scope: !4485)
!4500 = !DILocalVariable(name: "n", scope: !4485, file: !3, line: 934, type: !7)
!4501 = !DILocation(line: 934, column: 12, scope: !4485)
!4502 = !DILocation(line: 934, column: 16, scope: !4485)
!4503 = !DILocalVariable(name: "cnt", scope: !4485, file: !3, line: 935, type: !2004)
!4504 = !DILocation(line: 935, column: 13, scope: !4485)
!4505 = !DILocation(line: 935, column: 19, scope: !4485)
!4506 = !DILocation(line: 935, column: 22, scope: !4485)
!4507 = !DILocalVariable(name: "cnt1", scope: !4485, file: !3, line: 935, type: !2004)
!4508 = !DILocation(line: 935, column: 29, scope: !4485)
!4509 = !DILocalVariable(name: "prob", scope: !4485, file: !3, line: 936, type: !7)
!4510 = !DILocation(line: 936, column: 12, scope: !4485)
!4511 = !DILocation(line: 936, column: 19, scope: !4485)
!4512 = !DILocation(line: 936, column: 22, scope: !4485)
!4513 = !DILocalVariable(name: "prob1", scope: !4485, file: !3, line: 936, type: !7)
!4514 = !DILocation(line: 936, column: 35, scope: !4485)
!4515 = !DILocation(line: 938, column: 3, scope: !4485)
!4516 = !DILocation(line: 939, column: 10, scope: !4485)
!4517 = !DILocation(line: 939, column: 17, scope: !4485)
!4518 = !DILocation(line: 939, column: 19, scope: !4485)
!4519 = !DILocation(line: 939, column: 16, scope: !4485)
!4520 = !DILocation(line: 939, column: 14, scope: !4485)
!4521 = !DILocation(line: 939, column: 8, scope: !4485)
!4522 = !DILocation(line: 940, column: 11, scope: !4485)
!4523 = !DILocation(line: 940, column: 19, scope: !4485)
!4524 = !DILocation(line: 940, column: 21, scope: !4485)
!4525 = !DILocation(line: 940, column: 16, scope: !4485)
!4526 = !DILocation(line: 940, column: 9, scope: !4485)
!4527 = !DILocation(line: 942, column: 3, scope: !4528)
!4528 = distinct !DILexicalBlock(scope: !4485, file: !3, line: 942, column: 3)
!4529 = !DILocation(line: 942, column: 3, scope: !4530)
!4530 = distinct !DILexicalBlock(scope: !4528, file: !3, line: 942, column: 3)
!4531 = !DILocation(line: 944, column: 11, scope: !4532)
!4532 = distinct !DILexicalBlock(scope: !4533, file: !3, line: 944, column: 11)
!4533 = distinct !DILexicalBlock(scope: !4530, file: !3, line: 943, column: 5)
!4534 = !DILocation(line: 944, column: 17, scope: !4532)
!4535 = !DILocation(line: 944, column: 14, scope: !4532)
!4536 = !DILocation(line: 944, column: 11, scope: !4533)
!4537 = !DILocation(line: 945, column: 2, scope: !4532)
!4538 = !DILocation(line: 947, column: 26, scope: !4533)
!4539 = !DILocation(line: 947, column: 7, scope: !4533)
!4540 = !DILocation(line: 947, column: 11, scope: !4533)
!4541 = !DILocation(line: 947, column: 23, scope: !4533)
!4542 = !DILocation(line: 948, column: 20, scope: !4533)
!4543 = !DILocation(line: 948, column: 7, scope: !4533)
!4544 = !DILocation(line: 948, column: 11, scope: !4533)
!4545 = !DILocation(line: 948, column: 17, scope: !4533)
!4546 = !DILocation(line: 949, column: 14, scope: !4533)
!4547 = !DILocation(line: 949, column: 12, scope: !4533)
!4548 = !DILocation(line: 950, column: 5, scope: !4533)
!4549 = distinct !{!4549, !4527, !4550}
!4550 = !DILocation(line: 950, column: 5, scope: !4528)
!4551 = !DILocation(line: 953, column: 24, scope: !4485)
!4552 = !DILocation(line: 953, column: 32, scope: !4485)
!4553 = !DILocation(line: 953, column: 34, scope: !4485)
!4554 = !DILocation(line: 953, column: 29, scope: !4485)
!4555 = !DILocation(line: 953, column: 3, scope: !4485)
!4556 = !DILocation(line: 953, column: 9, scope: !4485)
!4557 = !DILocation(line: 953, column: 21, scope: !4485)
!4558 = !DILocation(line: 954, column: 18, scope: !4485)
!4559 = !DILocation(line: 954, column: 25, scope: !4485)
!4560 = !DILocation(line: 954, column: 27, scope: !4485)
!4561 = !DILocation(line: 954, column: 24, scope: !4485)
!4562 = !DILocation(line: 954, column: 22, scope: !4485)
!4563 = !DILocation(line: 954, column: 3, scope: !4485)
!4564 = !DILocation(line: 954, column: 9, scope: !4485)
!4565 = !DILocation(line: 954, column: 15, scope: !4485)
!4566 = !DILocation(line: 956, column: 3, scope: !4485)
!4567 = !DILocation(line: 956, column: 6, scope: !4485)
!4568 = !DILocation(line: 956, column: 18, scope: !4485)
!4569 = !DILocation(line: 957, column: 3, scope: !4485)
!4570 = !DILocation(line: 957, column: 6, scope: !4485)
!4571 = !DILocation(line: 957, column: 12, scope: !4485)
!4572 = !DILocation(line: 958, column: 1, scope: !4485)
!4573 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !938, file: !938, line: 224, type: !4574, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4574 = !DISubroutineType(types: !4575)
!4575 = !{null, !4576, !4577, !7, !4580}
!4576 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3746, size: 64)
!4577 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !641, line: 48, baseType: !4578)
!4578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4579, size: 64)
!4579 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !937)
!4580 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!4581 = !DILocalVariable(name: "bi", arg: 1, scope: !4573, file: !938, line: 224, type: !4576)
!4582 = !DILocation(line: 224, column: 37, scope: !4573)
!4583 = !DILocalVariable(name: "map", arg: 2, scope: !4573, file: !938, line: 224, type: !4577)
!4584 = !DILocation(line: 224, column: 54, scope: !4573)
!4585 = !DILocalVariable(name: "start_bit", arg: 3, scope: !4573, file: !938, line: 225, type: !7)
!4586 = !DILocation(line: 225, column: 15, scope: !4573)
!4587 = !DILocalVariable(name: "bit_no", arg: 4, scope: !4573, file: !938, line: 225, type: !4580)
!4588 = !DILocation(line: 225, column: 36, scope: !4573)
!4589 = !DILocation(line: 227, column: 14, scope: !4573)
!4590 = !DILocation(line: 227, column: 19, scope: !4573)
!4591 = !DILocation(line: 227, column: 3, scope: !4573)
!4592 = !DILocation(line: 227, column: 7, scope: !4573)
!4593 = !DILocation(line: 227, column: 12, scope: !4573)
!4594 = !DILocation(line: 228, column: 3, scope: !4573)
!4595 = !DILocation(line: 228, column: 7, scope: !4573)
!4596 = !DILocation(line: 228, column: 12, scope: !4573)
!4597 = !DILocation(line: 231, column: 3, scope: !4573)
!4598 = !DILocation(line: 233, column: 12, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4600, file: !938, line: 233, column: 11)
!4600 = distinct !DILexicalBlock(scope: !4573, file: !938, line: 232, column: 5)
!4601 = !DILocation(line: 233, column: 16, scope: !4599)
!4602 = !DILocation(line: 233, column: 11, scope: !4600)
!4603 = !DILocation(line: 235, column: 4, scope: !4604)
!4604 = distinct !DILexicalBlock(scope: !4599, file: !938, line: 234, column: 2)
!4605 = !DILocation(line: 235, column: 8, scope: !4604)
!4606 = !DILocation(line: 235, column: 13, scope: !4604)
!4607 = !DILocation(line: 236, column: 4, scope: !4604)
!4608 = !DILocation(line: 239, column: 11, scope: !4609)
!4609 = distinct !DILexicalBlock(scope: !4600, file: !938, line: 239, column: 11)
!4610 = !DILocation(line: 239, column: 15, scope: !4609)
!4611 = !DILocation(line: 239, column: 21, scope: !4609)
!4612 = !DILocation(line: 239, column: 29, scope: !4609)
!4613 = !DILocation(line: 239, column: 39, scope: !4609)
!4614 = !DILocation(line: 239, column: 26, scope: !4609)
!4615 = !DILocation(line: 239, column: 11, scope: !4600)
!4616 = !DILocation(line: 240, column: 2, scope: !4609)
!4617 = !DILocation(line: 241, column: 18, scope: !4600)
!4618 = !DILocation(line: 241, column: 22, scope: !4600)
!4619 = !DILocation(line: 241, column: 28, scope: !4600)
!4620 = !DILocation(line: 241, column: 7, scope: !4600)
!4621 = !DILocation(line: 241, column: 11, scope: !4600)
!4622 = !DILocation(line: 241, column: 16, scope: !4600)
!4623 = distinct !{!4623, !4597, !4624}
!4624 = !DILocation(line: 242, column: 5, scope: !4573)
!4625 = !DILocation(line: 245, column: 7, scope: !4626)
!4626 = distinct !DILexicalBlock(scope: !4573, file: !938, line: 245, column: 7)
!4627 = !DILocation(line: 245, column: 11, scope: !4626)
!4628 = !DILocation(line: 245, column: 17, scope: !4626)
!4629 = !DILocation(line: 245, column: 25, scope: !4626)
!4630 = !DILocation(line: 245, column: 35, scope: !4626)
!4631 = !DILocation(line: 245, column: 22, scope: !4626)
!4632 = !DILocation(line: 245, column: 7, scope: !4573)
!4633 = !DILocation(line: 246, column: 17, scope: !4626)
!4634 = !DILocation(line: 246, column: 21, scope: !4626)
!4635 = !DILocation(line: 246, column: 27, scope: !4626)
!4636 = !DILocation(line: 246, column: 32, scope: !4626)
!4637 = !DILocation(line: 246, column: 15, scope: !4626)
!4638 = !DILocation(line: 246, column: 5, scope: !4626)
!4639 = !DILocation(line: 249, column: 17, scope: !4573)
!4640 = !DILocation(line: 249, column: 27, scope: !4573)
!4641 = !DILocation(line: 249, column: 46, scope: !4573)
!4642 = !DILocation(line: 249, column: 3, scope: !4573)
!4643 = !DILocation(line: 249, column: 7, scope: !4573)
!4644 = !DILocation(line: 249, column: 15, scope: !4573)
!4645 = !DILocation(line: 250, column: 14, scope: !4573)
!4646 = !DILocation(line: 250, column: 18, scope: !4573)
!4647 = !DILocation(line: 250, column: 24, scope: !4573)
!4648 = !DILocation(line: 250, column: 29, scope: !4573)
!4649 = !DILocation(line: 250, column: 33, scope: !4573)
!4650 = !DILocation(line: 250, column: 3, scope: !4573)
!4651 = !DILocation(line: 250, column: 7, scope: !4573)
!4652 = !DILocation(line: 250, column: 12, scope: !4573)
!4653 = !DILocation(line: 251, column: 16, scope: !4573)
!4654 = !DILocation(line: 251, column: 26, scope: !4573)
!4655 = !DILocation(line: 251, column: 3, scope: !4573)
!4656 = !DILocation(line: 251, column: 7, scope: !4573)
!4657 = !DILocation(line: 251, column: 12, scope: !4573)
!4658 = !DILocation(line: 257, column: 17, scope: !4573)
!4659 = !DILocation(line: 257, column: 21, scope: !4573)
!4660 = !DILocation(line: 257, column: 16, scope: !4573)
!4661 = !DILocation(line: 257, column: 13, scope: !4573)
!4662 = !DILocation(line: 259, column: 13, scope: !4573)
!4663 = !DILocation(line: 259, column: 4, scope: !4573)
!4664 = !DILocation(line: 259, column: 11, scope: !4573)
!4665 = !DILocation(line: 260, column: 1, scope: !4573)
!4666 = distinct !DISubprogram(name: "bmp_iter_set", scope: !938, file: !938, line: 393, type: !4667, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4667 = !DISubroutineType(types: !4668)
!4668 = !{!829, !4576, !4580}
!4669 = !DILocalVariable(name: "bi", arg: 1, scope: !4666, file: !938, line: 393, type: !4576)
!4670 = !DILocation(line: 393, column: 32, scope: !4666)
!4671 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4666, file: !938, line: 393, type: !4580)
!4672 = !DILocation(line: 393, column: 46, scope: !4666)
!4673 = !DILocation(line: 396, column: 7, scope: !4674)
!4674 = distinct !DILexicalBlock(scope: !4666, file: !938, line: 396, column: 7)
!4675 = !DILocation(line: 396, column: 11, scope: !4674)
!4676 = !DILocation(line: 396, column: 7, scope: !4666)
!4677 = !DILocation(line: 397, column: 5, scope: !4674)
!4678 = !DILabel(scope: !4679, name: "next_bit", file: !938, line: 398)
!4679 = distinct !DILexicalBlock(scope: !4674, file: !938, line: 397, column: 5)
!4680 = !DILocation(line: 398, column: 5, scope: !4679)
!4681 = !DILocation(line: 399, column: 7, scope: !4679)
!4682 = !DILocation(line: 399, column: 16, scope: !4679)
!4683 = !DILocation(line: 399, column: 20, scope: !4679)
!4684 = !DILocation(line: 399, column: 25, scope: !4679)
!4685 = !DILocation(line: 399, column: 14, scope: !4679)
!4686 = !DILocation(line: 401, column: 4, scope: !4687)
!4687 = distinct !DILexicalBlock(scope: !4679, file: !938, line: 400, column: 2)
!4688 = !DILocation(line: 401, column: 8, scope: !4687)
!4689 = !DILocation(line: 401, column: 13, scope: !4687)
!4690 = !DILocation(line: 402, column: 5, scope: !4687)
!4691 = !DILocation(line: 402, column: 12, scope: !4687)
!4692 = distinct !{!4692, !4681, !4693}
!4693 = !DILocation(line: 403, column: 2, scope: !4679)
!4694 = !DILocation(line: 404, column: 7, scope: !4679)
!4695 = !DILocation(line: 410, column: 16, scope: !4666)
!4696 = !DILocation(line: 410, column: 15, scope: !4666)
!4697 = !DILocation(line: 410, column: 23, scope: !4666)
!4698 = !DILocation(line: 410, column: 42, scope: !4666)
!4699 = !DILocation(line: 411, column: 7, scope: !4666)
!4700 = !DILocation(line: 411, column: 26, scope: !4666)
!4701 = !DILocation(line: 410, column: 4, scope: !4666)
!4702 = !DILocation(line: 410, column: 11, scope: !4666)
!4703 = !DILocation(line: 412, column: 3, scope: !4666)
!4704 = !DILocation(line: 412, column: 7, scope: !4666)
!4705 = !DILocation(line: 412, column: 14, scope: !4666)
!4706 = !DILocation(line: 414, column: 3, scope: !4666)
!4707 = !DILocation(line: 417, column: 7, scope: !4708)
!4708 = distinct !DILexicalBlock(scope: !4666, file: !938, line: 415, column: 5)
!4709 = !DILocation(line: 417, column: 14, scope: !4708)
!4710 = !DILocation(line: 417, column: 18, scope: !4708)
!4711 = !DILocation(line: 417, column: 26, scope: !4708)
!4712 = !DILocation(line: 419, column: 15, scope: !4713)
!4713 = distinct !DILexicalBlock(scope: !4708, file: !938, line: 418, column: 2)
!4714 = !DILocation(line: 419, column: 19, scope: !4713)
!4715 = !DILocation(line: 419, column: 25, scope: !4713)
!4716 = !DILocation(line: 419, column: 30, scope: !4713)
!4717 = !DILocation(line: 419, column: 34, scope: !4713)
!4718 = !DILocation(line: 419, column: 4, scope: !4713)
!4719 = !DILocation(line: 419, column: 8, scope: !4713)
!4720 = !DILocation(line: 419, column: 13, scope: !4713)
!4721 = !DILocation(line: 420, column: 8, scope: !4722)
!4722 = distinct !DILexicalBlock(scope: !4713, file: !938, line: 420, column: 8)
!4723 = !DILocation(line: 420, column: 12, scope: !4722)
!4724 = !DILocation(line: 420, column: 8, scope: !4713)
!4725 = !DILocation(line: 421, column: 6, scope: !4722)
!4726 = !DILocation(line: 422, column: 5, scope: !4713)
!4727 = !DILocation(line: 422, column: 12, scope: !4713)
!4728 = !DILocation(line: 423, column: 4, scope: !4713)
!4729 = !DILocation(line: 423, column: 8, scope: !4713)
!4730 = !DILocation(line: 423, column: 15, scope: !4713)
!4731 = distinct !{!4731, !4707, !4732}
!4732 = !DILocation(line: 424, column: 2, scope: !4708)
!4733 = !DILocation(line: 427, column: 18, scope: !4708)
!4734 = !DILocation(line: 427, column: 22, scope: !4708)
!4735 = !DILocation(line: 427, column: 28, scope: !4708)
!4736 = !DILocation(line: 427, column: 7, scope: !4708)
!4737 = !DILocation(line: 427, column: 11, scope: !4708)
!4738 = !DILocation(line: 427, column: 16, scope: !4708)
!4739 = !DILocation(line: 428, column: 12, scope: !4740)
!4740 = distinct !DILexicalBlock(scope: !4708, file: !938, line: 428, column: 11)
!4741 = !DILocation(line: 428, column: 16, scope: !4740)
!4742 = !DILocation(line: 428, column: 11, scope: !4708)
!4743 = !DILocation(line: 429, column: 2, scope: !4740)
!4744 = !DILocation(line: 430, column: 17, scope: !4708)
!4745 = !DILocation(line: 430, column: 21, scope: !4708)
!4746 = !DILocation(line: 430, column: 27, scope: !4708)
!4747 = !DILocation(line: 430, column: 32, scope: !4708)
!4748 = !DILocation(line: 430, column: 8, scope: !4708)
!4749 = !DILocation(line: 430, column: 15, scope: !4708)
!4750 = !DILocation(line: 431, column: 7, scope: !4708)
!4751 = !DILocation(line: 431, column: 11, scope: !4708)
!4752 = !DILocation(line: 431, column: 19, scope: !4708)
!4753 = distinct !{!4753, !4706, !4754}
!4754 = !DILocation(line: 432, column: 5, scope: !4666)
!4755 = !DILocation(line: 433, column: 1, scope: !4666)
!4756 = distinct !DISubprogram(name: "bmp_iter_next", scope: !938, file: !938, line: 382, type: !4757, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4757 = !DISubroutineType(types: !4758)
!4758 = !{null, !4576, !4580}
!4759 = !DILocalVariable(name: "bi", arg: 1, scope: !4756, file: !938, line: 382, type: !4576)
!4760 = !DILocation(line: 382, column: 33, scope: !4756)
!4761 = !DILocalVariable(name: "bit_no", arg: 2, scope: !4756, file: !938, line: 382, type: !4580)
!4762 = !DILocation(line: 382, column: 47, scope: !4756)
!4763 = !DILocation(line: 384, column: 3, scope: !4756)
!4764 = !DILocation(line: 384, column: 7, scope: !4756)
!4765 = !DILocation(line: 384, column: 12, scope: !4756)
!4766 = !DILocation(line: 385, column: 4, scope: !4756)
!4767 = !DILocation(line: 385, column: 11, scope: !4756)
!4768 = !DILocation(line: 386, column: 1, scope: !4756)
!4769 = distinct !DISubprogram(name: "VEC_basic_block_base_iterate", scope: !144, file: !144, line: 281, type: !4770, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4770 = !DISubroutineType(types: !4771)
!4771 = !{!806, !4772, !7, !647}
!4772 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4773, size: 64)
!4773 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1192)
!4774 = !DILocalVariable(name: "vec_", arg: 1, scope: !4769, file: !144, line: 281, type: !4772)
!4775 = !DILocation(line: 281, column: 1, scope: !4769)
!4776 = !DILocalVariable(name: "ix_", arg: 2, scope: !4769, file: !144, line: 281, type: !7)
!4777 = !DILocalVariable(name: "ptr", arg: 3, scope: !4769, file: !144, line: 281, type: !647)
!4778 = !DILocation(line: 281, column: 1, scope: !4779)
!4779 = distinct !DILexicalBlock(scope: !4769, file: !144, line: 281, column: 1)
!4780 = !DILocation(line: 281, column: 1, scope: !4781)
!4781 = distinct !DILexicalBlock(scope: !4779, file: !144, line: 281, column: 1)
!4782 = !DILocation(line: 281, column: 1, scope: !4783)
!4783 = distinct !DILexicalBlock(scope: !4779, file: !144, line: 281, column: 1)
!4784 = distinct !DISubprogram(name: "mfb_keep_just", scope: !3, file: !3, line: 1298, type: !2074, scopeLine: 1299, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4785 = !DILocalVariable(name: "e", arg: 1, scope: !4784, file: !3, line: 1298, type: !665)
!4786 = !DILocation(line: 1298, column: 21, scope: !4784)
!4787 = !DILocation(line: 1300, column: 10, scope: !4784)
!4788 = !DILocation(line: 1300, column: 15, scope: !4784)
!4789 = !DILocation(line: 1300, column: 12, scope: !4784)
!4790 = !DILocation(line: 1300, column: 3, scope: !4784)
!4791 = distinct !DISubprogram(name: "create_preheader", scope: !3, file: !3, line: 1326, type: !4792, scopeLine: 1327, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4792 = !DISubroutineType(types: !4793)
!4793 = !{!648, !1369, !806}
!4794 = !DILocalVariable(name: "loop", arg: 1, scope: !4791, file: !3, line: 1326, type: !1369)
!4795 = !DILocation(line: 1326, column: 32, scope: !4791)
!4796 = !DILocalVariable(name: "flags", arg: 2, scope: !4791, file: !3, line: 1326, type: !806)
!4797 = !DILocation(line: 1326, column: 42, scope: !4791)
!4798 = !DILocalVariable(name: "e", scope: !4791, file: !3, line: 1328, type: !665)
!4799 = !DILocation(line: 1328, column: 8, scope: !4791)
!4800 = !DILocalVariable(name: "fallthru", scope: !4791, file: !3, line: 1328, type: !665)
!4801 = !DILocation(line: 1328, column: 11, scope: !4791)
!4802 = !DILocalVariable(name: "dummy", scope: !4791, file: !3, line: 1329, type: !648)
!4803 = !DILocation(line: 1329, column: 15, scope: !4791)
!4804 = !DILocalVariable(name: "nentry", scope: !4791, file: !3, line: 1330, type: !806)
!4805 = !DILocation(line: 1330, column: 7, scope: !4791)
!4806 = !DILocalVariable(name: "irred", scope: !4791, file: !3, line: 1331, type: !829)
!4807 = !DILocation(line: 1331, column: 8, scope: !4791)
!4808 = !DILocalVariable(name: "latch_edge_was_fallthru", scope: !4791, file: !3, line: 1332, type: !829)
!4809 = !DILocation(line: 1332, column: 8, scope: !4791)
!4810 = !DILocalVariable(name: "one_succ_pred", scope: !4791, file: !3, line: 1333, type: !665)
!4811 = !DILocation(line: 1333, column: 8, scope: !4791)
!4812 = !DILocalVariable(name: "single_entry", scope: !4791, file: !3, line: 1333, type: !665)
!4813 = !DILocation(line: 1333, column: 30, scope: !4791)
!4814 = !DILocalVariable(name: "ei", scope: !4791, file: !3, line: 1334, type: !2192)
!4815 = !DILocation(line: 1334, column: 17, scope: !4791)
!4816 = !DILocation(line: 1336, column: 3, scope: !4817)
!4817 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1336, column: 3)
!4818 = !DILocation(line: 1336, column: 3, scope: !4819)
!4819 = distinct !DILexicalBlock(scope: !4817, file: !3, line: 1336, column: 3)
!4820 = !DILocation(line: 1338, column: 11, scope: !4821)
!4821 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 1338, column: 11)
!4822 = distinct !DILexicalBlock(scope: !4819, file: !3, line: 1337, column: 5)
!4823 = !DILocation(line: 1338, column: 14, scope: !4821)
!4824 = !DILocation(line: 1338, column: 21, scope: !4821)
!4825 = !DILocation(line: 1338, column: 27, scope: !4821)
!4826 = !DILocation(line: 1338, column: 18, scope: !4821)
!4827 = !DILocation(line: 1338, column: 11, scope: !4822)
!4828 = !DILocation(line: 1339, column: 2, scope: !4821)
!4829 = !DILocation(line: 1340, column: 17, scope: !4822)
!4830 = !DILocation(line: 1340, column: 20, scope: !4822)
!4831 = !DILocation(line: 1340, column: 26, scope: !4822)
!4832 = !DILocation(line: 1340, column: 51, scope: !4822)
!4833 = !DILocation(line: 1340, column: 13, scope: !4822)
!4834 = !DILocation(line: 1341, column: 13, scope: !4822)
!4835 = !DILocation(line: 1342, column: 22, scope: !4822)
!4836 = !DILocation(line: 1342, column: 20, scope: !4822)
!4837 = !DILocation(line: 1343, column: 26, scope: !4838)
!4838 = distinct !DILexicalBlock(scope: !4822, file: !3, line: 1343, column: 11)
!4839 = !DILocation(line: 1343, column: 29, scope: !4838)
!4840 = !DILocation(line: 1343, column: 11, scope: !4838)
!4841 = !DILocation(line: 1343, column: 11, scope: !4822)
!4842 = !DILocation(line: 1344, column: 18, scope: !4838)
!4843 = !DILocation(line: 1344, column: 16, scope: !4838)
!4844 = !DILocation(line: 1344, column: 2, scope: !4838)
!4845 = !DILocation(line: 1345, column: 5, scope: !4822)
!4846 = distinct !{!4846, !4816, !4847}
!4847 = !DILocation(line: 1345, column: 5, scope: !4817)
!4848 = !DILocation(line: 1346, column: 3, scope: !4791)
!4849 = !DILocation(line: 1347, column: 7, scope: !4850)
!4850 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1347, column: 7)
!4851 = !DILocation(line: 1347, column: 14, scope: !4850)
!4852 = !DILocation(line: 1347, column: 7, scope: !4791)
!4853 = !DILocalVariable(name: "need_forwarder_block", scope: !4854, file: !3, line: 1349, type: !829)
!4854 = distinct !DILexicalBlock(scope: !4850, file: !3, line: 1348, column: 5)
!4855 = !DILocation(line: 1349, column: 12, scope: !4854)
!4856 = !DILocation(line: 1353, column: 11, scope: !4857)
!4857 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 1353, column: 11)
!4858 = !DILocation(line: 1353, column: 25, scope: !4857)
!4859 = !DILocation(line: 1353, column: 32, scope: !4857)
!4860 = !DILocation(line: 1353, column: 29, scope: !4857)
!4861 = !DILocation(line: 1353, column: 11, scope: !4854)
!4862 = !DILocation(line: 1354, column: 30, scope: !4857)
!4863 = !DILocation(line: 1354, column: 9, scope: !4857)
!4864 = !DILocation(line: 1359, column: 16, scope: !4865)
!4865 = distinct !DILexicalBlock(scope: !4866, file: !3, line: 1359, column: 15)
!4866 = distinct !DILexicalBlock(scope: !4857, file: !3, line: 1356, column: 9)
!4867 = !DILocation(line: 1359, column: 22, scope: !4865)
!4868 = !DILocation(line: 1360, column: 15, scope: !4865)
!4869 = !DILocation(line: 1360, column: 34, scope: !4865)
!4870 = !DILocation(line: 1360, column: 48, scope: !4865)
!4871 = !DILocation(line: 1360, column: 19, scope: !4865)
!4872 = !DILocation(line: 1359, column: 15, scope: !4866)
!4873 = !DILocation(line: 1361, column: 34, scope: !4865)
!4874 = !DILocation(line: 1361, column: 13, scope: !4865)
!4875 = !DILocation(line: 1364, column: 21, scope: !4876)
!4876 = distinct !DILexicalBlock(scope: !4865, file: !3, line: 1364, column: 20)
!4877 = !DILocation(line: 1364, column: 27, scope: !4876)
!4878 = !DILocation(line: 1365, column: 20, scope: !4876)
!4879 = !DILocation(line: 1365, column: 24, scope: !4876)
!4880 = !DILocation(line: 1366, column: 24, scope: !4876)
!4881 = !DILocation(line: 1366, column: 48, scope: !4876)
!4882 = !DILocation(line: 1366, column: 62, scope: !4876)
!4883 = !DILocation(line: 1366, column: 67, scope: !4876)
!4884 = !DILocation(line: 1366, column: 27, scope: !4876)
!4885 = !DILocation(line: 1364, column: 20, scope: !4865)
!4886 = !DILocation(line: 1367, column: 34, scope: !4876)
!4887 = !DILocation(line: 1367, column: 13, scope: !4876)
!4888 = !DILocation(line: 1369, column: 13, scope: !4889)
!4889 = distinct !DILexicalBlock(scope: !4854, file: !3, line: 1369, column: 11)
!4890 = !DILocation(line: 1369, column: 11, scope: !4854)
!4891 = !DILocation(line: 1370, column: 2, scope: !4889)
!4892 = !DILocation(line: 1371, column: 5, scope: !4854)
!4893 = !DILocation(line: 1373, column: 34, scope: !4791)
!4894 = !DILocation(line: 1373, column: 17, scope: !4791)
!4895 = !DILocation(line: 1373, column: 15, scope: !4791)
!4896 = !DILocation(line: 1374, column: 30, scope: !4791)
!4897 = !DILocation(line: 1374, column: 43, scope: !4791)
!4898 = !DILocation(line: 1374, column: 49, scope: !4791)
!4899 = !DILocation(line: 1374, column: 66, scope: !4791)
!4900 = !DILocation(line: 1374, column: 29, scope: !4791)
!4901 = !DILocation(line: 1374, column: 27, scope: !4791)
!4902 = !DILocation(line: 1375, column: 36, scope: !4791)
!4903 = !DILocation(line: 1375, column: 42, scope: !4791)
!4904 = !DILocation(line: 1375, column: 14, scope: !4791)
!4905 = !DILocation(line: 1375, column: 12, scope: !4791)
!4906 = !DILocation(line: 1376, column: 11, scope: !4791)
!4907 = !DILocation(line: 1376, column: 21, scope: !4791)
!4908 = !DILocation(line: 1376, column: 9, scope: !4791)
!4909 = !DILocation(line: 1377, column: 18, scope: !4791)
!4910 = !DILocation(line: 1377, column: 28, scope: !4791)
!4911 = !DILocation(line: 1377, column: 3, scope: !4791)
!4912 = !DILocation(line: 1377, column: 9, scope: !4791)
!4913 = !DILocation(line: 1377, column: 16, scope: !4791)
!4914 = !DILocation(line: 1387, column: 7, scope: !4915)
!4915 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1387, column: 7)
!4916 = !DILocation(line: 1387, column: 7, scope: !4791)
!4917 = !DILocation(line: 1389, column: 11, scope: !4918)
!4918 = distinct !DILexicalBlock(scope: !4919, file: !3, line: 1389, column: 11)
!4919 = distinct !DILexicalBlock(scope: !4915, file: !3, line: 1388, column: 5)
!4920 = !DILocation(line: 1389, column: 11, scope: !4919)
!4921 = !DILocation(line: 1390, column: 6, scope: !4918)
!4922 = !DILocation(line: 1390, column: 4, scope: !4918)
!4923 = !DILocation(line: 1390, column: 2, scope: !4918)
!4924 = !DILocation(line: 1392, column: 6, scope: !4918)
!4925 = !DILocation(line: 1392, column: 4, scope: !4918)
!4926 = !DILocation(line: 1394, column: 25, scope: !4919)
!4927 = !DILocation(line: 1394, column: 32, scope: !4919)
!4928 = !DILocation(line: 1394, column: 35, scope: !4919)
!4929 = !DILocation(line: 1394, column: 7, scope: !4919)
!4930 = !DILocation(line: 1395, column: 5, scope: !4919)
!4931 = !DILocation(line: 1397, column: 7, scope: !4932)
!4932 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1397, column: 7)
!4933 = !DILocation(line: 1397, column: 7, scope: !4791)
!4934 = !DILocation(line: 1399, column: 7, scope: !4935)
!4935 = distinct !DILexicalBlock(scope: !4932, file: !3, line: 1398, column: 5)
!4936 = !DILocation(line: 1399, column: 14, scope: !4935)
!4937 = !DILocation(line: 1399, column: 20, scope: !4935)
!4938 = !DILocation(line: 1400, column: 25, scope: !4935)
!4939 = !DILocation(line: 1400, column: 7, scope: !4935)
!4940 = !DILocation(line: 1400, column: 33, scope: !4935)
!4941 = !DILocation(line: 1400, column: 39, scope: !4935)
!4942 = !DILocation(line: 1401, column: 5, scope: !4935)
!4943 = !DILocation(line: 1403, column: 7, scope: !4944)
!4944 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1403, column: 7)
!4945 = !DILocation(line: 1403, column: 7, scope: !4791)
!4946 = !DILocation(line: 1404, column: 14, scope: !4944)
!4947 = !DILocation(line: 1405, column: 7, scope: !4944)
!4948 = !DILocation(line: 1405, column: 13, scope: !4944)
!4949 = !DILocation(line: 1404, column: 5, scope: !4944)
!4950 = !DILocation(line: 1407, column: 7, scope: !4951)
!4951 = distinct !DILexicalBlock(scope: !4791, file: !3, line: 1407, column: 7)
!4952 = !DILocation(line: 1407, column: 13, scope: !4951)
!4953 = !DILocation(line: 1407, column: 7, scope: !4791)
!4954 = !DILocation(line: 1408, column: 5, scope: !4951)
!4955 = !DILocation(line: 1411, column: 10, scope: !4791)
!4956 = !DILocation(line: 1411, column: 3, scope: !4791)
!4957 = !DILocation(line: 1412, column: 1, scope: !4791)
!4958 = distinct !DISubprogram(name: "single_succ_p", scope: !144, file: !144, line: 626, type: !2349, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4959 = !DILocalVariable(name: "bb", arg: 1, scope: !4958, file: !144, line: 626, type: !2040)
!4960 = !DILocation(line: 626, column: 34, scope: !4958)
!4961 = !DILocation(line: 628, column: 10, scope: !4958)
!4962 = !DILocation(line: 628, column: 33, scope: !4958)
!4963 = !DILocation(line: 628, column: 3, scope: !4958)
!4964 = distinct !DISubprogram(name: "has_preds_from_loop", scope: !3, file: !3, line: 1306, type: !4965, scopeLine: 1307, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4965 = !DISubroutineType(types: !4966)
!4966 = !{!829, !648, !1369}
!4967 = !DILocalVariable(name: "block", arg: 1, scope: !4964, file: !3, line: 1306, type: !648)
!4968 = !DILocation(line: 1306, column: 34, scope: !4964)
!4969 = !DILocalVariable(name: "loop", arg: 2, scope: !4964, file: !3, line: 1306, type: !1369)
!4970 = !DILocation(line: 1306, column: 54, scope: !4964)
!4971 = !DILocalVariable(name: "e", scope: !4964, file: !3, line: 1308, type: !665)
!4972 = !DILocation(line: 1308, column: 8, scope: !4964)
!4973 = !DILocalVariable(name: "ei", scope: !4964, file: !3, line: 1309, type: !2192)
!4974 = !DILocation(line: 1309, column: 17, scope: !4964)
!4975 = !DILocation(line: 1311, column: 3, scope: !4976)
!4976 = distinct !DILexicalBlock(scope: !4964, file: !3, line: 1311, column: 3)
!4977 = !DILocation(line: 1311, column: 3, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4976, file: !3, line: 1311, column: 3)
!4979 = !DILocation(line: 1312, column: 9, scope: !4980)
!4980 = distinct !DILexicalBlock(scope: !4978, file: !3, line: 1312, column: 9)
!4981 = !DILocation(line: 1312, column: 12, scope: !4980)
!4982 = !DILocation(line: 1312, column: 17, scope: !4980)
!4983 = !DILocation(line: 1312, column: 32, scope: !4980)
!4984 = !DILocation(line: 1312, column: 29, scope: !4980)
!4985 = !DILocation(line: 1312, column: 9, scope: !4978)
!4986 = !DILocation(line: 1313, column: 7, scope: !4980)
!4987 = distinct !{!4987, !4975, !4988}
!4988 = !DILocation(line: 1313, column: 14, scope: !4976)
!4989 = !DILocation(line: 1314, column: 3, scope: !4964)
!4990 = !DILocation(line: 1315, column: 1, scope: !4964)
!4991 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !144, file: !144, line: 150, type: !4992, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!4992 = !DISubroutineType(types: !4993)
!4993 = !{!665, !4994, !7}
!4994 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4995, size: 64)
!4995 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !658)
!4996 = !DILocalVariable(name: "vec_", arg: 1, scope: !4991, file: !144, line: 150, type: !4994)
!4997 = !DILocation(line: 150, column: 1, scope: !4991)
!4998 = !DILocalVariable(name: "ix_", arg: 2, scope: !4991, file: !144, line: 150, type: !7)
!4999 = !DILocation(line: 0, scope: !4991)
!5000 = distinct !DISubprogram(name: "create_preheaders", scope: !3, file: !3, line: 1417, type: !5001, scopeLine: 1418, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5001 = !DISubroutineType(types: !5002)
!5002 = !{null, !806}
!5003 = !DILocalVariable(name: "flags", arg: 1, scope: !5000, file: !3, line: 1417, type: !806)
!5004 = !DILocation(line: 1417, column: 24, scope: !5000)
!5005 = !DILocalVariable(name: "li", scope: !5000, file: !3, line: 1419, type: !5006)
!5006 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_iterator", file: !6, line: 515, baseType: !5007)
!5007 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !6, line: 508, size: 128, elements: !5008)
!5008 = !{!5009, !5010}
!5009 = !DIDerivedType(tag: DW_TAG_member, name: "to_visit", scope: !5007, file: !6, line: 511, baseType: !2055, size: 64)
!5010 = !DIDerivedType(tag: DW_TAG_member, name: "idx", scope: !5007, file: !6, line: 514, baseType: !7, size: 32, offset: 64)
!5011 = !DILocation(line: 1419, column: 17, scope: !5000)
!5012 = !DILocalVariable(name: "loop", scope: !5000, file: !3, line: 1420, type: !1369)
!5013 = !DILocation(line: 1420, column: 16, scope: !5000)
!5014 = !DILocation(line: 1422, column: 8, scope: !5015)
!5015 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1422, column: 7)
!5016 = !DILocation(line: 1422, column: 7, scope: !5000)
!5017 = !DILocation(line: 1423, column: 5, scope: !5015)
!5018 = !DILocation(line: 1425, column: 3, scope: !5019)
!5019 = distinct !DILexicalBlock(scope: !5000, file: !3, line: 1425, column: 3)
!5020 = !DILocation(line: 1425, column: 3, scope: !5021)
!5021 = distinct !DILexicalBlock(scope: !5019, file: !3, line: 1425, column: 3)
!5022 = !DILocation(line: 1426, column: 23, scope: !5021)
!5023 = !DILocation(line: 1426, column: 29, scope: !5021)
!5024 = !DILocation(line: 1426, column: 5, scope: !5021)
!5025 = distinct !{!5025, !5018, !5026}
!5026 = !DILocation(line: 1426, column: 34, scope: !5019)
!5027 = !DILocation(line: 1427, column: 3, scope: !5000)
!5028 = !DILocation(line: 1428, column: 1, scope: !5000)
!5029 = distinct !DISubprogram(name: "fel_init", scope: !6, file: !6, line: 535, type: !5030, scopeLine: 536, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5030 = !DISubroutineType(types: !5031)
!5031 = !{null, !5032, !5033, !7}
!5032 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5006, size: 64)
!5033 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1368, size: 64)
!5034 = !DILocalVariable(name: "li", arg: 1, scope: !5029, file: !6, line: 535, type: !5032)
!5035 = !DILocation(line: 535, column: 26, scope: !5029)
!5036 = !DILocalVariable(name: "loop", arg: 2, scope: !5029, file: !6, line: 535, type: !5033)
!5037 = !DILocation(line: 535, column: 38, scope: !5029)
!5038 = !DILocalVariable(name: "flags", arg: 3, scope: !5029, file: !6, line: 535, type: !7)
!5039 = !DILocation(line: 535, column: 53, scope: !5029)
!5040 = !DILocalVariable(name: "aloop", scope: !5029, file: !6, line: 537, type: !1369)
!5041 = !DILocation(line: 537, column: 16, scope: !5029)
!5042 = !DILocalVariable(name: "i", scope: !5029, file: !6, line: 538, type: !7)
!5043 = !DILocation(line: 538, column: 12, scope: !5029)
!5044 = !DILocalVariable(name: "mn", scope: !5029, file: !6, line: 539, type: !806)
!5045 = !DILocation(line: 539, column: 7, scope: !5029)
!5046 = !DILocation(line: 541, column: 3, scope: !5029)
!5047 = !DILocation(line: 541, column: 7, scope: !5029)
!5048 = !DILocation(line: 541, column: 11, scope: !5029)
!5049 = !DILocation(line: 542, column: 8, scope: !5050)
!5050 = distinct !DILexicalBlock(scope: !5029, file: !6, line: 542, column: 7)
!5051 = !DILocation(line: 542, column: 7, scope: !5029)
!5052 = !DILocation(line: 544, column: 7, scope: !5053)
!5053 = distinct !DILexicalBlock(scope: !5050, file: !6, line: 543, column: 5)
!5054 = !DILocation(line: 544, column: 11, scope: !5053)
!5055 = !DILocation(line: 544, column: 20, scope: !5053)
!5056 = !DILocation(line: 545, column: 8, scope: !5053)
!5057 = !DILocation(line: 545, column: 13, scope: !5053)
!5058 = !DILocation(line: 546, column: 7, scope: !5053)
!5059 = !DILocation(line: 549, column: 18, scope: !5029)
!5060 = !DILocation(line: 549, column: 3, scope: !5029)
!5061 = !DILocation(line: 549, column: 7, scope: !5029)
!5062 = !DILocation(line: 549, column: 16, scope: !5029)
!5063 = !DILocation(line: 550, column: 9, scope: !5029)
!5064 = !DILocation(line: 550, column: 15, scope: !5029)
!5065 = !DILocation(line: 550, column: 8, scope: !5029)
!5066 = !DILocation(line: 550, column: 6, scope: !5029)
!5067 = !DILocation(line: 552, column: 7, scope: !5068)
!5068 = distinct !DILexicalBlock(scope: !5029, file: !6, line: 552, column: 7)
!5069 = !DILocation(line: 552, column: 13, scope: !5068)
!5070 = !DILocation(line: 552, column: 7, scope: !5029)
!5071 = !DILocation(line: 554, column: 14, scope: !5072)
!5072 = distinct !DILexicalBlock(scope: !5073, file: !6, line: 554, column: 7)
!5073 = distinct !DILexicalBlock(scope: !5068, file: !6, line: 553, column: 5)
!5074 = !DILocation(line: 554, column: 12, scope: !5072)
!5075 = !DILocation(line: 554, column: 19, scope: !5076)
!5076 = distinct !DILexicalBlock(scope: !5072, file: !6, line: 554, column: 7)
!5077 = !DILocation(line: 554, column: 7, scope: !5072)
!5078 = !DILocation(line: 555, column: 6, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5076, file: !6, line: 555, column: 6)
!5080 = !DILocation(line: 555, column: 12, scope: !5079)
!5081 = !DILocation(line: 556, column: 6, scope: !5079)
!5082 = !DILocation(line: 556, column: 9, scope: !5079)
!5083 = !DILocation(line: 556, column: 16, scope: !5079)
!5084 = !DILocation(line: 556, column: 22, scope: !5079)
!5085 = !DILocation(line: 557, column: 6, scope: !5079)
!5086 = !DILocation(line: 557, column: 9, scope: !5079)
!5087 = !DILocation(line: 557, column: 16, scope: !5079)
!5088 = !DILocation(line: 557, column: 23, scope: !5079)
!5089 = !DILocation(line: 557, column: 20, scope: !5079)
!5090 = !DILocation(line: 555, column: 6, scope: !5076)
!5091 = !DILocation(line: 558, column: 4, scope: !5079)
!5092 = !DILocation(line: 554, column: 75, scope: !5076)
!5093 = !DILocation(line: 554, column: 7, scope: !5076)
!5094 = distinct !{!5094, !5077, !5095}
!5095 = !DILocation(line: 558, column: 4, scope: !5072)
!5096 = !DILocation(line: 559, column: 5, scope: !5073)
!5097 = !DILocation(line: 560, column: 12, scope: !5098)
!5098 = distinct !DILexicalBlock(scope: !5068, file: !6, line: 560, column: 12)
!5099 = !DILocation(line: 560, column: 18, scope: !5098)
!5100 = !DILocation(line: 560, column: 12, scope: !5068)
!5101 = !DILocation(line: 563, column: 20, scope: !5102)
!5102 = distinct !DILexicalBlock(scope: !5103, file: !6, line: 563, column: 7)
!5103 = distinct !DILexicalBlock(scope: !5098, file: !6, line: 561, column: 5)
!5104 = !DILocation(line: 563, column: 35, scope: !5102)
!5105 = !DILocation(line: 563, column: 18, scope: !5102)
!5106 = !DILocation(line: 563, column: 12, scope: !5102)
!5107 = !DILocation(line: 564, column: 5, scope: !5108)
!5108 = distinct !DILexicalBlock(scope: !5102, file: !6, line: 563, column: 7)
!5109 = !DILocation(line: 564, column: 12, scope: !5108)
!5110 = !DILocation(line: 564, column: 18, scope: !5108)
!5111 = !DILocation(line: 563, column: 7, scope: !5102)
!5112 = !DILocation(line: 566, column: 2, scope: !5108)
!5113 = !DILocation(line: 565, column: 13, scope: !5108)
!5114 = !DILocation(line: 565, column: 20, scope: !5108)
!5115 = !DILocation(line: 565, column: 11, scope: !5108)
!5116 = !DILocation(line: 563, column: 7, scope: !5108)
!5117 = distinct !{!5117, !5111, !5118}
!5118 = !DILocation(line: 566, column: 2, scope: !5102)
!5119 = !DILocation(line: 568, column: 7, scope: !5103)
!5120 = !DILocation(line: 570, column: 8, scope: !5121)
!5121 = distinct !DILexicalBlock(scope: !5122, file: !6, line: 570, column: 8)
!5122 = distinct !DILexicalBlock(scope: !5103, file: !6, line: 569, column: 2)
!5123 = !DILocation(line: 570, column: 15, scope: !5121)
!5124 = !DILocation(line: 570, column: 22, scope: !5121)
!5125 = !DILocation(line: 570, column: 19, scope: !5121)
!5126 = !DILocation(line: 570, column: 8, scope: !5122)
!5127 = !DILocation(line: 571, column: 6, scope: !5121)
!5128 = !DILocation(line: 573, column: 8, scope: !5129)
!5129 = distinct !DILexicalBlock(scope: !5122, file: !6, line: 573, column: 8)
!5130 = !DILocation(line: 573, column: 15, scope: !5129)
!5131 = !DILocation(line: 573, column: 8, scope: !5122)
!5132 = !DILocation(line: 575, column: 21, scope: !5133)
!5133 = distinct !DILexicalBlock(scope: !5134, file: !6, line: 575, column: 8)
!5134 = distinct !DILexicalBlock(scope: !5129, file: !6, line: 574, column: 6)
!5135 = !DILocation(line: 575, column: 28, scope: !5133)
!5136 = !DILocation(line: 575, column: 19, scope: !5133)
!5137 = !DILocation(line: 575, column: 13, scope: !5133)
!5138 = !DILocation(line: 576, column: 6, scope: !5139)
!5139 = distinct !DILexicalBlock(scope: !5133, file: !6, line: 575, column: 8)
!5140 = !DILocation(line: 576, column: 13, scope: !5139)
!5141 = !DILocation(line: 576, column: 19, scope: !5139)
!5142 = !DILocation(line: 575, column: 8, scope: !5133)
!5143 = !DILocation(line: 578, column: 3, scope: !5139)
!5144 = !DILocation(line: 577, column: 14, scope: !5139)
!5145 = !DILocation(line: 577, column: 21, scope: !5139)
!5146 = !DILocation(line: 577, column: 12, scope: !5139)
!5147 = !DILocation(line: 575, column: 8, scope: !5139)
!5148 = distinct !{!5148, !5142, !5149}
!5149 = !DILocation(line: 578, column: 3, scope: !5133)
!5150 = !DILocation(line: 579, column: 6, scope: !5134)
!5151 = !DILocation(line: 580, column: 26, scope: !5152)
!5152 = distinct !DILexicalBlock(scope: !5129, file: !6, line: 580, column: 13)
!5153 = !DILocation(line: 580, column: 14, scope: !5152)
!5154 = !DILocation(line: 580, column: 13, scope: !5129)
!5155 = !DILocation(line: 581, column: 6, scope: !5152)
!5156 = !DILocation(line: 583, column: 26, scope: !5152)
!5157 = !DILocation(line: 583, column: 14, scope: !5152)
!5158 = !DILocation(line: 583, column: 12, scope: !5152)
!5159 = distinct !{!5159, !5119, !5160}
!5160 = !DILocation(line: 584, column: 2, scope: !5103)
!5161 = !DILocation(line: 585, column: 5, scope: !5103)
!5162 = !DILocation(line: 589, column: 15, scope: !5163)
!5163 = distinct !DILexicalBlock(scope: !5098, file: !6, line: 587, column: 5)
!5164 = !DILocation(line: 589, column: 30, scope: !5163)
!5165 = !DILocation(line: 589, column: 13, scope: !5163)
!5166 = !DILocation(line: 590, column: 7, scope: !5163)
!5167 = !DILocation(line: 592, column: 8, scope: !5168)
!5168 = distinct !DILexicalBlock(scope: !5169, file: !6, line: 592, column: 8)
!5169 = distinct !DILexicalBlock(scope: !5163, file: !6, line: 591, column: 2)
!5170 = !DILocation(line: 592, column: 15, scope: !5168)
!5171 = !DILocation(line: 592, column: 22, scope: !5168)
!5172 = !DILocation(line: 592, column: 19, scope: !5168)
!5173 = !DILocation(line: 592, column: 8, scope: !5169)
!5174 = !DILocation(line: 593, column: 6, scope: !5168)
!5175 = !DILocation(line: 595, column: 8, scope: !5176)
!5176 = distinct !DILexicalBlock(scope: !5169, file: !6, line: 595, column: 8)
!5177 = !DILocation(line: 595, column: 15, scope: !5176)
!5178 = !DILocation(line: 595, column: 21, scope: !5176)
!5179 = !DILocation(line: 595, column: 8, scope: !5169)
!5180 = !DILocation(line: 596, column: 14, scope: !5176)
!5181 = !DILocation(line: 596, column: 21, scope: !5176)
!5182 = !DILocation(line: 596, column: 12, scope: !5176)
!5183 = !DILocation(line: 596, column: 6, scope: !5176)
!5184 = !DILocation(line: 599, column: 8, scope: !5185)
!5185 = distinct !DILexicalBlock(scope: !5176, file: !6, line: 598, column: 6)
!5186 = !DILocation(line: 599, column: 15, scope: !5185)
!5187 = !DILocation(line: 599, column: 21, scope: !5185)
!5188 = !DILocation(line: 599, column: 29, scope: !5185)
!5189 = !DILocation(line: 599, column: 32, scope: !5185)
!5190 = !DILocation(line: 599, column: 39, scope: !5185)
!5191 = !DILocation(line: 599, column: 44, scope: !5185)
!5192 = !DILocation(line: 0, scope: !5185)
!5193 = !DILocation(line: 600, column: 23, scope: !5185)
!5194 = !DILocation(line: 600, column: 11, scope: !5185)
!5195 = !DILocation(line: 600, column: 9, scope: !5185)
!5196 = distinct !{!5196, !5184, !5197}
!5197 = !DILocation(line: 600, column: 28, scope: !5185)
!5198 = !DILocation(line: 601, column: 12, scope: !5199)
!5199 = distinct !DILexicalBlock(scope: !5185, file: !6, line: 601, column: 12)
!5200 = !DILocation(line: 601, column: 18, scope: !5199)
!5201 = !DILocation(line: 601, column: 12, scope: !5185)
!5202 = !DILocation(line: 602, column: 3, scope: !5199)
!5203 = !DILocation(line: 603, column: 16, scope: !5185)
!5204 = !DILocation(line: 603, column: 23, scope: !5185)
!5205 = !DILocation(line: 603, column: 14, scope: !5185)
!5206 = distinct !{!5206, !5166, !5207}
!5207 = !DILocation(line: 605, column: 2, scope: !5163)
!5208 = !DILocation(line: 608, column: 13, scope: !5029)
!5209 = !DILocation(line: 608, column: 17, scope: !5029)
!5210 = !DILocation(line: 608, column: 3, scope: !5029)
!5211 = !DILocation(line: 609, column: 1, scope: !5029)
!5212 = distinct !DISubprogram(name: "fel_next", scope: !6, file: !6, line: 518, type: !5213, scopeLine: 519, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5213 = !DISubroutineType(types: !5214)
!5214 = !{null, !5032, !5033}
!5215 = !DILocalVariable(name: "li", arg: 1, scope: !5212, file: !6, line: 518, type: !5032)
!5216 = !DILocation(line: 518, column: 26, scope: !5212)
!5217 = !DILocalVariable(name: "loop", arg: 2, scope: !5212, file: !6, line: 518, type: !5033)
!5218 = !DILocation(line: 518, column: 38, scope: !5212)
!5219 = !DILocalVariable(name: "anum", scope: !5212, file: !6, line: 520, type: !806)
!5220 = !DILocation(line: 520, column: 7, scope: !5212)
!5221 = !DILocation(line: 522, column: 3, scope: !5212)
!5222 = !DILocation(line: 522, column: 10, scope: !5212)
!5223 = !DILocation(line: 524, column: 7, scope: !5224)
!5224 = distinct !DILexicalBlock(scope: !5212, file: !6, line: 523, column: 5)
!5225 = !DILocation(line: 524, column: 11, scope: !5224)
!5226 = !DILocation(line: 524, column: 14, scope: !5224)
!5227 = !DILocation(line: 525, column: 25, scope: !5224)
!5228 = !DILocation(line: 525, column: 15, scope: !5224)
!5229 = !DILocation(line: 525, column: 8, scope: !5224)
!5230 = !DILocation(line: 525, column: 13, scope: !5224)
!5231 = !DILocation(line: 526, column: 12, scope: !5232)
!5232 = distinct !DILexicalBlock(scope: !5224, file: !6, line: 526, column: 11)
!5233 = !DILocation(line: 526, column: 11, scope: !5232)
!5234 = !DILocation(line: 526, column: 11, scope: !5224)
!5235 = !DILocation(line: 527, column: 2, scope: !5232)
!5236 = distinct !{!5236, !5221, !5237}
!5237 = !DILocation(line: 528, column: 5, scope: !5212)
!5238 = !DILocation(line: 530, column: 3, scope: !5212)
!5239 = !DILocation(line: 531, column: 4, scope: !5212)
!5240 = !DILocation(line: 531, column: 9, scope: !5212)
!5241 = !DILocation(line: 532, column: 1, scope: !5212)
!5242 = distinct !DISubprogram(name: "loops_state_set", scope: !6, file: !6, line: 479, type: !5243, scopeLine: 480, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5243 = !DISubroutineType(types: !5244)
!5244 = !{null, !7}
!5245 = !DILocalVariable(name: "flags", arg: 1, scope: !5242, file: !6, line: 479, type: !7)
!5246 = !DILocation(line: 479, column: 27, scope: !5242)
!5247 = !DILocation(line: 481, column: 27, scope: !5242)
!5248 = !DILocation(line: 481, column: 3, scope: !5242)
!5249 = !DILocation(line: 481, column: 18, scope: !5242)
!5250 = !DILocation(line: 481, column: 24, scope: !5242)
!5251 = !DILocation(line: 482, column: 1, scope: !5242)
!5252 = distinct !DISubprogram(name: "force_single_succ_latches", scope: !3, file: !3, line: 1433, type: !5253, scopeLine: 1434, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5253 = !DISubroutineType(types: !5254)
!5254 = !{null}
!5255 = !DILocalVariable(name: "li", scope: !5252, file: !3, line: 1435, type: !5006)
!5256 = !DILocation(line: 1435, column: 17, scope: !5252)
!5257 = !DILocalVariable(name: "loop", scope: !5252, file: !3, line: 1436, type: !1369)
!5258 = !DILocation(line: 1436, column: 16, scope: !5252)
!5259 = !DILocalVariable(name: "e", scope: !5252, file: !3, line: 1437, type: !665)
!5260 = !DILocation(line: 1437, column: 8, scope: !5252)
!5261 = !DILocation(line: 1439, column: 3, scope: !5262)
!5262 = distinct !DILexicalBlock(scope: !5252, file: !3, line: 1439, column: 3)
!5263 = !DILocation(line: 1439, column: 3, scope: !5264)
!5264 = distinct !DILexicalBlock(scope: !5262, file: !3, line: 1439, column: 3)
!5265 = !DILocation(line: 1441, column: 11, scope: !5266)
!5266 = distinct !DILexicalBlock(scope: !5267, file: !3, line: 1441, column: 11)
!5267 = distinct !DILexicalBlock(scope: !5264, file: !3, line: 1440, column: 5)
!5268 = !DILocation(line: 1441, column: 17, scope: !5266)
!5269 = !DILocation(line: 1441, column: 26, scope: !5266)
!5270 = !DILocation(line: 1441, column: 32, scope: !5266)
!5271 = !DILocation(line: 1441, column: 23, scope: !5266)
!5272 = !DILocation(line: 1441, column: 39, scope: !5266)
!5273 = !DILocation(line: 1441, column: 57, scope: !5266)
!5274 = !DILocation(line: 1441, column: 63, scope: !5266)
!5275 = !DILocation(line: 1441, column: 42, scope: !5266)
!5276 = !DILocation(line: 1441, column: 11, scope: !5267)
!5277 = !DILocation(line: 1442, column: 2, scope: !5266)
!5278 = !DILocation(line: 1444, column: 22, scope: !5267)
!5279 = !DILocation(line: 1444, column: 28, scope: !5267)
!5280 = !DILocation(line: 1444, column: 35, scope: !5267)
!5281 = !DILocation(line: 1444, column: 41, scope: !5267)
!5282 = !DILocation(line: 1444, column: 11, scope: !5267)
!5283 = !DILocation(line: 1444, column: 9, scope: !5267)
!5284 = !DILocation(line: 1446, column: 19, scope: !5267)
!5285 = !DILocation(line: 1446, column: 7, scope: !5267)
!5286 = !DILocation(line: 1447, column: 5, scope: !5267)
!5287 = distinct !{!5287, !5261, !5288}
!5288 = !DILocation(line: 1447, column: 5, scope: !5262)
!5289 = !DILocation(line: 1448, column: 3, scope: !5252)
!5290 = !DILocation(line: 1449, column: 1, scope: !5252)
!5291 = distinct !DISubprogram(name: "loop_version", scope: !3, file: !3, line: 1519, type: !5292, scopeLine: 1523, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5292 = !DISubroutineType(types: !5293)
!5293 = !{!1369, !1369, !988, !647, !7, !7, !7, !829}
!5294 = !DILocalVariable(name: "loop", arg: 1, scope: !5291, file: !3, line: 1519, type: !1369)
!5295 = !DILocation(line: 1519, column: 28, scope: !5291)
!5296 = !DILocalVariable(name: "cond_expr", arg: 2, scope: !5291, file: !3, line: 1520, type: !988)
!5297 = !DILocation(line: 1520, column: 14, scope: !5291)
!5298 = !DILocalVariable(name: "condition_bb", arg: 3, scope: !5291, file: !3, line: 1520, type: !647)
!5299 = !DILocation(line: 1520, column: 38, scope: !5291)
!5300 = !DILocalVariable(name: "then_prob", arg: 4, scope: !5291, file: !3, line: 1521, type: !7)
!5301 = !DILocation(line: 1521, column: 17, scope: !5291)
!5302 = !DILocalVariable(name: "then_scale", arg: 5, scope: !5291, file: !3, line: 1521, type: !7)
!5303 = !DILocation(line: 1521, column: 37, scope: !5291)
!5304 = !DILocalVariable(name: "else_scale", arg: 6, scope: !5291, file: !3, line: 1521, type: !7)
!5305 = !DILocation(line: 1521, column: 58, scope: !5291)
!5306 = !DILocalVariable(name: "place_after", arg: 7, scope: !5291, file: !3, line: 1522, type: !829)
!5307 = !DILocation(line: 1522, column: 13, scope: !5291)
!5308 = !DILocalVariable(name: "first_head", scope: !5291, file: !3, line: 1524, type: !648)
!5309 = !DILocation(line: 1524, column: 15, scope: !5291)
!5310 = !DILocalVariable(name: "second_head", scope: !5291, file: !3, line: 1524, type: !648)
!5311 = !DILocation(line: 1524, column: 27, scope: !5291)
!5312 = !DILocalVariable(name: "entry", scope: !5291, file: !3, line: 1525, type: !665)
!5313 = !DILocation(line: 1525, column: 8, scope: !5291)
!5314 = !DILocalVariable(name: "latch_edge", scope: !5291, file: !3, line: 1525, type: !665)
!5315 = !DILocation(line: 1525, column: 15, scope: !5291)
!5316 = !DILocalVariable(name: "true_edge", scope: !5291, file: !3, line: 1525, type: !665)
!5317 = !DILocation(line: 1525, column: 27, scope: !5291)
!5318 = !DILocalVariable(name: "false_edge", scope: !5291, file: !3, line: 1525, type: !665)
!5319 = !DILocation(line: 1525, column: 38, scope: !5291)
!5320 = !DILocalVariable(name: "irred_flag", scope: !5291, file: !3, line: 1526, type: !806)
!5321 = !DILocation(line: 1526, column: 7, scope: !5291)
!5322 = !DILocalVariable(name: "nloop", scope: !5291, file: !3, line: 1527, type: !1369)
!5323 = !DILocation(line: 1527, column: 16, scope: !5291)
!5324 = !DILocalVariable(name: "cond_bb", scope: !5291, file: !3, line: 1528, type: !648)
!5325 = !DILocation(line: 1528, column: 15, scope: !5291)
!5326 = !DILocation(line: 1531, column: 32, scope: !5291)
!5327 = !DILocation(line: 1531, column: 11, scope: !5291)
!5328 = !DILocation(line: 1531, column: 9, scope: !5291)
!5329 = !DILocation(line: 1532, column: 16, scope: !5291)
!5330 = !DILocation(line: 1532, column: 23, scope: !5291)
!5331 = !DILocation(line: 1532, column: 29, scope: !5291)
!5332 = !DILocation(line: 1532, column: 14, scope: !5291)
!5333 = !DILocation(line: 1533, column: 3, scope: !5291)
!5334 = !DILocation(line: 1533, column: 10, scope: !5291)
!5335 = !DILocation(line: 1533, column: 16, scope: !5291)
!5336 = !DILocation(line: 1536, column: 16, scope: !5291)
!5337 = !DILocation(line: 1536, column: 23, scope: !5291)
!5338 = !DILocation(line: 1536, column: 14, scope: !5291)
!5339 = !DILocation(line: 1539, column: 48, scope: !5340)
!5340 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1539, column: 7)
!5341 = !DILocation(line: 1539, column: 54, scope: !5340)
!5342 = !DILocation(line: 1539, column: 8, scope: !5340)
!5343 = !DILocation(line: 1539, column: 7, scope: !5291)
!5344 = !DILocation(line: 1541, column: 5, scope: !5340)
!5345 = !DILocation(line: 1545, column: 17, scope: !5291)
!5346 = !DILocation(line: 1545, column: 24, scope: !5291)
!5347 = !DILocation(line: 1545, column: 15, scope: !5291)
!5348 = !DILocation(line: 1548, column: 41, scope: !5291)
!5349 = !DILocation(line: 1548, column: 53, scope: !5291)
!5350 = !DILocation(line: 1549, column: 6, scope: !5291)
!5351 = !DILocation(line: 1549, column: 13, scope: !5291)
!5352 = !DILocation(line: 1549, column: 24, scope: !5291)
!5353 = !DILocation(line: 1548, column: 14, scope: !5291)
!5354 = !DILocation(line: 1548, column: 11, scope: !5291)
!5355 = !DILocation(line: 1550, column: 7, scope: !5356)
!5356 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1550, column: 7)
!5357 = !DILocation(line: 1550, column: 7, scope: !5291)
!5358 = !DILocation(line: 1551, column: 21, scope: !5356)
!5359 = !DILocation(line: 1551, column: 6, scope: !5356)
!5360 = !DILocation(line: 1551, column: 19, scope: !5356)
!5361 = !DILocation(line: 1551, column: 5, scope: !5356)
!5362 = !DILocation(line: 1553, column: 8, scope: !5363)
!5363 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1553, column: 7)
!5364 = !DILocation(line: 1553, column: 7, scope: !5291)
!5365 = !DILocation(line: 1555, column: 23, scope: !5366)
!5366 = distinct !DILexicalBlock(scope: !5363, file: !3, line: 1554, column: 5)
!5367 = !DILocation(line: 1555, column: 7, scope: !5366)
!5368 = !DILocation(line: 1555, column: 14, scope: !5366)
!5369 = !DILocation(line: 1555, column: 20, scope: !5366)
!5370 = !DILocation(line: 1556, column: 7, scope: !5366)
!5371 = !DILocation(line: 1559, column: 47, scope: !5291)
!5372 = !DILocation(line: 1559, column: 53, scope: !5291)
!5373 = !DILocation(line: 1559, column: 34, scope: !5291)
!5374 = !DILocation(line: 1559, column: 16, scope: !5291)
!5375 = !DILocation(line: 1559, column: 14, scope: !5291)
!5376 = !DILocation(line: 1561, column: 26, scope: !5291)
!5377 = !DILocation(line: 1561, column: 3, scope: !5291)
!5378 = !DILocation(line: 1562, column: 20, scope: !5291)
!5379 = !DILocation(line: 1563, column: 37, scope: !5291)
!5380 = !DILocation(line: 1563, column: 43, scope: !5291)
!5381 = !DILocation(line: 1563, column: 24, scope: !5291)
!5382 = !DILocation(line: 1563, column: 6, scope: !5291)
!5383 = !DILocation(line: 1564, column: 6, scope: !5291)
!5384 = !DILocation(line: 1564, column: 15, scope: !5291)
!5385 = !DILocation(line: 1564, column: 26, scope: !5291)
!5386 = !DILocation(line: 1566, column: 6, scope: !5291)
!5387 = !DILocation(line: 1566, column: 18, scope: !5291)
!5388 = !DILocation(line: 1562, column: 11, scope: !5291)
!5389 = !DILocation(line: 1562, column: 9, scope: !5291)
!5390 = !DILocation(line: 1569, column: 27, scope: !5291)
!5391 = !DILocation(line: 1569, column: 3, scope: !5291)
!5392 = !DILocation(line: 1572, column: 26, scope: !5291)
!5393 = !DILocation(line: 1572, column: 3, scope: !5291)
!5394 = !DILocation(line: 1573, column: 27, scope: !5291)
!5395 = !DILocation(line: 1573, column: 3, scope: !5291)
!5396 = !DILocation(line: 1575, column: 7, scope: !5397)
!5397 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1575, column: 7)
!5398 = !DILocation(line: 1575, column: 7, scope: !5291)
!5399 = !DILocation(line: 1577, column: 7, scope: !5400)
!5400 = distinct !DILexicalBlock(scope: !5397, file: !3, line: 1576, column: 5)
!5401 = !DILocation(line: 1577, column: 16, scope: !5400)
!5402 = !DILocation(line: 1577, column: 22, scope: !5400)
!5403 = !DILocation(line: 1578, column: 28, scope: !5400)
!5404 = !DILocation(line: 1578, column: 7, scope: !5400)
!5405 = !DILocation(line: 1578, column: 35, scope: !5400)
!5406 = !DILocation(line: 1578, column: 41, scope: !5400)
!5407 = !DILocation(line: 1579, column: 28, scope: !5400)
!5408 = !DILocation(line: 1579, column: 7, scope: !5400)
!5409 = !DILocation(line: 1579, column: 36, scope: !5400)
!5410 = !DILocation(line: 1579, column: 42, scope: !5400)
!5411 = !DILocation(line: 1580, column: 25, scope: !5400)
!5412 = !DILocation(line: 1580, column: 7, scope: !5400)
!5413 = !DILocation(line: 1580, column: 35, scope: !5400)
!5414 = !DILocation(line: 1580, column: 41, scope: !5400)
!5415 = !DILocation(line: 1581, column: 5, scope: !5400)
!5416 = !DILocation(line: 1583, column: 7, scope: !5417)
!5417 = distinct !DILexicalBlock(scope: !5291, file: !3, line: 1583, column: 7)
!5418 = !DILocation(line: 1583, column: 7, scope: !5291)
!5419 = !DILocalVariable(name: "bbs", scope: !5420, file: !3, line: 1585, type: !647)
!5420 = distinct !DILexicalBlock(scope: !5417, file: !3, line: 1584, column: 5)
!5421 = !DILocation(line: 1585, column: 20, scope: !5420)
!5422 = !DILocation(line: 1585, column: 54, scope: !5420)
!5423 = !DILocation(line: 1585, column: 26, scope: !5420)
!5424 = !DILocalVariable(name: "after", scope: !5420, file: !3, line: 1585, type: !648)
!5425 = !DILocation(line: 1585, column: 62, scope: !5420)
!5426 = !DILocalVariable(name: "i", scope: !5420, file: !3, line: 1586, type: !7)
!5427 = !DILocation(line: 1586, column: 16, scope: !5420)
!5428 = !DILocation(line: 1588, column: 15, scope: !5420)
!5429 = !DILocation(line: 1588, column: 21, scope: !5420)
!5430 = !DILocation(line: 1588, column: 13, scope: !5420)
!5431 = !DILocation(line: 1590, column: 14, scope: !5432)
!5432 = distinct !DILexicalBlock(scope: !5420, file: !3, line: 1590, column: 7)
!5433 = !DILocation(line: 1590, column: 12, scope: !5432)
!5434 = !DILocation(line: 1590, column: 19, scope: !5435)
!5435 = distinct !DILexicalBlock(scope: !5432, file: !3, line: 1590, column: 7)
!5436 = !DILocation(line: 1590, column: 23, scope: !5435)
!5437 = !DILocation(line: 1590, column: 30, scope: !5435)
!5438 = !DILocation(line: 1590, column: 21, scope: !5435)
!5439 = !DILocation(line: 1590, column: 7, scope: !5432)
!5440 = !DILocation(line: 1592, column: 22, scope: !5441)
!5441 = distinct !DILexicalBlock(scope: !5435, file: !3, line: 1591, column: 2)
!5442 = !DILocation(line: 1592, column: 26, scope: !5441)
!5443 = !DILocation(line: 1592, column: 30, scope: !5441)
!5444 = !DILocation(line: 1592, column: 4, scope: !5441)
!5445 = !DILocation(line: 1593, column: 12, scope: !5441)
!5446 = !DILocation(line: 1593, column: 16, scope: !5441)
!5447 = !DILocation(line: 1593, column: 10, scope: !5441)
!5448 = !DILocation(line: 1594, column: 2, scope: !5441)
!5449 = !DILocation(line: 1590, column: 42, scope: !5435)
!5450 = !DILocation(line: 1590, column: 7, scope: !5435)
!5451 = distinct !{!5451, !5439, !5452}
!5452 = !DILocation(line: 1594, column: 2, scope: !5432)
!5453 = !DILocation(line: 1595, column: 13, scope: !5420)
!5454 = !DILocation(line: 1595, column: 7, scope: !5420)
!5455 = !DILocation(line: 1596, column: 5, scope: !5420)
!5456 = !DILocation(line: 1601, column: 36, scope: !5291)
!5457 = !DILocation(line: 1601, column: 15, scope: !5291)
!5458 = !DILocation(line: 1601, column: 3, scope: !5291)
!5459 = !DILocation(line: 1602, column: 36, scope: !5291)
!5460 = !DILocation(line: 1602, column: 15, scope: !5291)
!5461 = !DILocation(line: 1602, column: 3, scope: !5291)
!5462 = !DILocation(line: 1604, column: 10, scope: !5291)
!5463 = !DILocation(line: 1604, column: 3, scope: !5291)
!5464 = !DILocation(line: 1605, column: 1, scope: !5291)
!5465 = distinct !DISubprogram(name: "lv_adjust_loop_entry_edge", scope: !3, file: !3, line: 1468, type: !5466, scopeLine: 1470, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5466 = !DISubroutineType(types: !5467)
!5467 = !{!648, !648, !648, !665, !988, !7}
!5468 = !DILocalVariable(name: "first_head", arg: 1, scope: !5465, file: !3, line: 1468, type: !648)
!5469 = !DILocation(line: 1468, column: 40, scope: !5465)
!5470 = !DILocalVariable(name: "second_head", arg: 2, scope: !5465, file: !3, line: 1468, type: !648)
!5471 = !DILocation(line: 1468, column: 64, scope: !5465)
!5472 = !DILocalVariable(name: "e", arg: 3, scope: !5465, file: !3, line: 1469, type: !665)
!5473 = !DILocation(line: 1469, column: 12, scope: !5465)
!5474 = !DILocalVariable(name: "cond_expr", arg: 4, scope: !5465, file: !3, line: 1469, type: !988)
!5475 = !DILocation(line: 1469, column: 21, scope: !5465)
!5476 = !DILocalVariable(name: "then_prob", arg: 5, scope: !5465, file: !3, line: 1469, type: !7)
!5477 = !DILocation(line: 1469, column: 41, scope: !5465)
!5478 = !DILocalVariable(name: "new_head", scope: !5465, file: !3, line: 1471, type: !648)
!5479 = !DILocation(line: 1471, column: 15, scope: !5465)
!5480 = !DILocalVariable(name: "e1", scope: !5465, file: !3, line: 1472, type: !665)
!5481 = !DILocation(line: 1472, column: 8, scope: !5465)
!5482 = !DILocation(line: 1474, column: 3, scope: !5465)
!5483 = !DILocation(line: 1478, column: 26, scope: !5465)
!5484 = !DILocation(line: 1478, column: 14, scope: !5465)
!5485 = !DILocation(line: 1478, column: 12, scope: !5465)
!5486 = !DILocation(line: 1480, column: 27, scope: !5465)
!5487 = !DILocation(line: 1480, column: 39, scope: !5465)
!5488 = !DILocation(line: 1480, column: 52, scope: !5465)
!5489 = !DILocation(line: 1481, column: 6, scope: !5465)
!5490 = !DILocation(line: 1480, column: 3, scope: !5465)
!5491 = !DILocation(line: 1484, column: 25, scope: !5465)
!5492 = !DILocation(line: 1484, column: 7, scope: !5465)
!5493 = !DILocation(line: 1484, column: 5, scope: !5465)
!5494 = !DILocation(line: 1485, column: 19, scope: !5465)
!5495 = !DILocation(line: 1485, column: 29, scope: !5465)
!5496 = !DILocation(line: 1486, column: 5, scope: !5465)
!5497 = !DILocation(line: 1486, column: 24, scope: !5465)
!5498 = !DILocation(line: 1485, column: 8, scope: !5465)
!5499 = !DILocation(line: 1485, column: 6, scope: !5465)
!5500 = !DILocation(line: 1487, column: 21, scope: !5465)
!5501 = !DILocation(line: 1487, column: 3, scope: !5465)
!5502 = !DILocation(line: 1487, column: 7, scope: !5465)
!5503 = !DILocation(line: 1487, column: 19, scope: !5465)
!5504 = !DILocation(line: 1488, column: 39, scope: !5465)
!5505 = !DILocation(line: 1488, column: 37, scope: !5465)
!5506 = !DILocation(line: 1488, column: 3, scope: !5465)
!5507 = !DILocation(line: 1488, column: 6, scope: !5465)
!5508 = !DILocation(line: 1488, column: 18, scope: !5465)
!5509 = !DILocation(line: 1489, column: 15, scope: !5465)
!5510 = !DILocation(line: 1489, column: 3, scope: !5465)
!5511 = !DILocation(line: 1489, column: 7, scope: !5465)
!5512 = !DILocation(line: 1489, column: 13, scope: !5465)
!5513 = !DILocation(line: 1490, column: 14, scope: !5465)
!5514 = !DILocation(line: 1490, column: 3, scope: !5465)
!5515 = !DILocation(line: 1490, column: 6, scope: !5465)
!5516 = !DILocation(line: 1490, column: 12, scope: !5465)
!5517 = !DILocation(line: 1492, column: 44, scope: !5465)
!5518 = !DILocation(line: 1492, column: 56, scope: !5465)
!5519 = !DILocation(line: 1492, column: 3, scope: !5465)
!5520 = !DILocation(line: 1493, column: 44, scope: !5465)
!5521 = !DILocation(line: 1493, column: 57, scope: !5465)
!5522 = !DILocation(line: 1493, column: 3, scope: !5465)
!5523 = !DILocation(line: 1496, column: 30, scope: !5465)
!5524 = !DILocation(line: 1496, column: 42, scope: !5465)
!5525 = !DILocation(line: 1496, column: 55, scope: !5465)
!5526 = !DILocation(line: 1496, column: 65, scope: !5465)
!5527 = !DILocation(line: 1496, column: 3, scope: !5465)
!5528 = !DILocation(line: 1498, column: 10, scope: !5465)
!5529 = !DILocation(line: 1498, column: 3, scope: !5465)
!5530 = distinct !DISubprogram(name: "fix_loop_structure", scope: !3, file: !3, line: 1619, type: !5531, scopeLine: 1620, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5531 = !DISubroutineType(types: !5532)
!5532 = !{null, !1303}
!5533 = !DILocalVariable(name: "changed_bbs", arg: 1, scope: !5530, file: !3, line: 1619, type: !1303)
!5534 = !DILocation(line: 1619, column: 28, scope: !5530)
!5535 = !DILocalVariable(name: "bb", scope: !5530, file: !3, line: 1621, type: !648)
!5536 = !DILocation(line: 1621, column: 15, scope: !5530)
!5537 = !DILocalVariable(name: "loop", scope: !5530, file: !3, line: 1622, type: !1369)
!5538 = !DILocation(line: 1622, column: 16, scope: !5530)
!5539 = !DILocalVariable(name: "ploop", scope: !5530, file: !3, line: 1622, type: !1369)
!5540 = !DILocation(line: 1622, column: 23, scope: !5530)
!5541 = !DILocalVariable(name: "li", scope: !5530, file: !3, line: 1623, type: !5006)
!5542 = !DILocation(line: 1623, column: 17, scope: !5530)
!5543 = !DILocalVariable(name: "record_exits", scope: !5530, file: !3, line: 1624, type: !829)
!5544 = !DILocation(line: 1624, column: 8, scope: !5530)
!5545 = !DILocalVariable(name: "superloop", scope: !5530, file: !3, line: 1625, type: !2039)
!5546 = !DILocation(line: 1625, column: 17, scope: !5530)
!5547 = !DILocation(line: 1625, column: 29, scope: !5530)
!5548 = !DILocation(line: 1630, column: 3, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1630, column: 3)
!5550 = !DILocation(line: 1630, column: 3, scope: !5551)
!5551 = distinct !DILexicalBlock(scope: !5549, file: !3, line: 1630, column: 3)
!5552 = !DILocation(line: 1632, column: 11, scope: !5553)
!5553 = distinct !DILexicalBlock(scope: !5554, file: !3, line: 1632, column: 11)
!5554 = distinct !DILexicalBlock(scope: !5551, file: !3, line: 1631, column: 5)
!5555 = !DILocation(line: 1632, column: 11, scope: !5554)
!5556 = !DILocation(line: 1633, column: 42, scope: !5553)
!5557 = !DILocation(line: 1633, column: 46, scope: !5553)
!5558 = !DILocation(line: 1633, column: 30, scope: !5553)
!5559 = !DILocation(line: 1633, column: 21, scope: !5553)
!5560 = !DILocation(line: 1633, column: 12, scope: !5553)
!5561 = !DILocation(line: 1633, column: 2, scope: !5553)
!5562 = !DILocation(line: 1633, column: 6, scope: !5553)
!5563 = !DILocation(line: 1633, column: 10, scope: !5553)
!5564 = !DILocation(line: 1634, column: 25, scope: !5554)
!5565 = !DILocation(line: 1634, column: 40, scope: !5554)
!5566 = !DILocation(line: 1634, column: 7, scope: !5554)
!5567 = !DILocation(line: 1634, column: 11, scope: !5554)
!5568 = !DILocation(line: 1634, column: 23, scope: !5554)
!5569 = !DILocation(line: 1635, column: 5, scope: !5554)
!5570 = distinct !{!5570, !5548, !5571}
!5571 = !DILocation(line: 1635, column: 5, scope: !5549)
!5572 = !DILocation(line: 1637, column: 7, scope: !5573)
!5573 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1637, column: 7)
!5574 = !DILocation(line: 1637, column: 7, scope: !5530)
!5575 = !DILocation(line: 1639, column: 7, scope: !5576)
!5576 = distinct !DILexicalBlock(scope: !5573, file: !3, line: 1638, column: 5)
!5577 = !DILocation(line: 1640, column: 20, scope: !5576)
!5578 = !DILocation(line: 1641, column: 5, scope: !5576)
!5579 = !DILocation(line: 1647, column: 3, scope: !5580)
!5580 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1647, column: 3)
!5581 = !DILocation(line: 1647, column: 3, scope: !5582)
!5582 = distinct !DILexicalBlock(scope: !5580, file: !3, line: 1647, column: 3)
!5583 = !DILocation(line: 1649, column: 11, scope: !5584)
!5584 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 1649, column: 11)
!5585 = distinct !DILexicalBlock(scope: !5582, file: !3, line: 1648, column: 5)
!5586 = !DILocation(line: 1649, column: 17, scope: !5584)
!5587 = !DILocation(line: 1649, column: 11, scope: !5585)
!5588 = !DILocation(line: 1650, column: 2, scope: !5584)
!5589 = !DILocation(line: 1652, column: 7, scope: !5585)
!5590 = !DILocation(line: 1652, column: 14, scope: !5585)
!5591 = !DILocation(line: 1652, column: 20, scope: !5585)
!5592 = !DILocation(line: 1654, column: 12, scope: !5593)
!5593 = distinct !DILexicalBlock(scope: !5585, file: !3, line: 1653, column: 2)
!5594 = !DILocation(line: 1654, column: 18, scope: !5593)
!5595 = !DILocation(line: 1654, column: 10, scope: !5593)
!5596 = !DILocation(line: 1655, column: 32, scope: !5593)
!5597 = !DILocation(line: 1655, column: 4, scope: !5593)
!5598 = !DILocation(line: 1656, column: 41, scope: !5593)
!5599 = !DILocation(line: 1656, column: 29, scope: !5593)
!5600 = !DILocation(line: 1656, column: 48, scope: !5593)
!5601 = !DILocation(line: 1656, column: 4, scope: !5593)
!5602 = distinct !{!5602, !5589, !5603}
!5603 = !DILocation(line: 1657, column: 2, scope: !5585)
!5604 = !DILocation(line: 1660, column: 20, scope: !5585)
!5605 = !DILocation(line: 1660, column: 7, scope: !5585)
!5606 = !DILocation(line: 1661, column: 5, scope: !5585)
!5607 = distinct !{!5607, !5579, !5608}
!5608 = !DILocation(line: 1661, column: 5, scope: !5580)
!5609 = !DILocation(line: 1668, column: 41, scope: !5530)
!5610 = !DILocation(line: 1668, column: 3, scope: !5530)
!5611 = !DILocation(line: 1668, column: 18, scope: !5530)
!5612 = !DILocation(line: 1668, column: 29, scope: !5530)
!5613 = !DILocation(line: 1668, column: 39, scope: !5530)
!5614 = !DILocation(line: 1669, column: 3, scope: !5615)
!5615 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1669, column: 3)
!5616 = !DILocation(line: 1669, column: 3, scope: !5617)
!5617 = distinct !DILexicalBlock(scope: !5615, file: !3, line: 1669, column: 3)
!5618 = !DILocation(line: 1671, column: 30, scope: !5619)
!5619 = distinct !DILexicalBlock(scope: !5617, file: !3, line: 1670, column: 5)
!5620 = !DILocation(line: 1671, column: 36, scope: !5619)
!5621 = !DILocation(line: 1671, column: 44, scope: !5619)
!5622 = !DILocation(line: 1671, column: 7, scope: !5619)
!5623 = !DILocation(line: 1671, column: 17, scope: !5619)
!5624 = !DILocation(line: 1671, column: 23, scope: !5619)
!5625 = !DILocation(line: 1671, column: 28, scope: !5619)
!5626 = !DILocation(line: 1672, column: 47, scope: !5619)
!5627 = !DILocation(line: 1672, column: 53, scope: !5619)
!5628 = !DILocation(line: 1672, column: 61, scope: !5619)
!5629 = !DILocation(line: 1672, column: 25, scope: !5619)
!5630 = !DILocation(line: 1672, column: 7, scope: !5619)
!5631 = !DILocation(line: 1672, column: 13, scope: !5619)
!5632 = !DILocation(line: 1672, column: 23, scope: !5619)
!5633 = !DILocation(line: 1673, column: 5, scope: !5619)
!5634 = distinct !{!5634, !5614, !5635}
!5635 = !DILocation(line: 1673, column: 5, scope: !5615)
!5636 = !DILocation(line: 1676, column: 3, scope: !5637)
!5637 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1676, column: 3)
!5638 = !DILocation(line: 1676, column: 3, scope: !5639)
!5639 = distinct !DILexicalBlock(scope: !5637, file: !3, line: 1676, column: 3)
!5640 = !DILocation(line: 1678, column: 15, scope: !5641)
!5641 = distinct !DILexicalBlock(scope: !5639, file: !3, line: 1677, column: 5)
!5642 = !DILocation(line: 1678, column: 25, scope: !5641)
!5643 = !DILocation(line: 1678, column: 31, scope: !5641)
!5644 = !DILocation(line: 1678, column: 13, scope: !5641)
!5645 = !DILocation(line: 1679, column: 11, scope: !5646)
!5646 = distinct !DILexicalBlock(scope: !5641, file: !3, line: 1679, column: 11)
!5647 = !DILocation(line: 1679, column: 32, scope: !5646)
!5648 = !DILocation(line: 1679, column: 20, scope: !5646)
!5649 = !DILocation(line: 1679, column: 17, scope: !5646)
!5650 = !DILocation(line: 1679, column: 11, scope: !5641)
!5651 = !DILocation(line: 1681, column: 32, scope: !5652)
!5652 = distinct !DILexicalBlock(scope: !5646, file: !3, line: 1680, column: 2)
!5653 = !DILocation(line: 1681, column: 4, scope: !5652)
!5654 = !DILocation(line: 1682, column: 29, scope: !5652)
!5655 = !DILocation(line: 1682, column: 36, scope: !5652)
!5656 = !DILocation(line: 1682, column: 4, scope: !5652)
!5657 = !DILocation(line: 1683, column: 2, scope: !5652)
!5658 = !DILocation(line: 1684, column: 5, scope: !5641)
!5659 = distinct !{!5659, !5636, !5660}
!5660 = !DILocation(line: 1684, column: 5, scope: !5637)
!5661 = !DILocation(line: 1685, column: 9, scope: !5530)
!5662 = !DILocation(line: 1685, column: 3, scope: !5530)
!5663 = !DILocation(line: 1688, column: 7, scope: !5664)
!5664 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1688, column: 7)
!5665 = !DILocation(line: 1688, column: 7, scope: !5530)
!5666 = !DILocation(line: 1690, column: 7, scope: !5667)
!5667 = distinct !DILexicalBlock(scope: !5668, file: !3, line: 1690, column: 7)
!5668 = distinct !DILexicalBlock(scope: !5664, file: !3, line: 1689, column: 5)
!5669 = !DILocation(line: 1690, column: 7, scope: !5670)
!5670 = distinct !DILexicalBlock(scope: !5667, file: !3, line: 1690, column: 7)
!5671 = !DILocation(line: 1692, column: 38, scope: !5672)
!5672 = distinct !DILexicalBlock(scope: !5673, file: !3, line: 1692, column: 8)
!5673 = distinct !DILexicalBlock(scope: !5670, file: !3, line: 1691, column: 2)
!5674 = !DILocation(line: 1692, column: 42, scope: !5672)
!5675 = !DILocation(line: 1692, column: 26, scope: !5672)
!5676 = !DILocation(line: 1692, column: 17, scope: !5672)
!5677 = !DILocation(line: 1692, column: 8, scope: !5672)
!5678 = !DILocation(line: 1692, column: 58, scope: !5672)
!5679 = !DILocation(line: 1692, column: 62, scope: !5672)
!5680 = !DILocation(line: 1692, column: 55, scope: !5672)
!5681 = !DILocation(line: 1692, column: 8, scope: !5673)
!5682 = !DILocation(line: 1693, column: 22, scope: !5672)
!5683 = !DILocation(line: 1693, column: 35, scope: !5672)
!5684 = !DILocation(line: 1693, column: 39, scope: !5672)
!5685 = !DILocation(line: 1693, column: 6, scope: !5672)
!5686 = !DILocation(line: 1695, column: 8, scope: !5673)
!5687 = !DILocation(line: 1695, column: 12, scope: !5673)
!5688 = !DILocation(line: 1695, column: 16, scope: !5673)
!5689 = !DILocation(line: 1696, column: 2, scope: !5673)
!5690 = distinct !{!5690, !5666, !5691}
!5691 = !DILocation(line: 1696, column: 2, scope: !5667)
!5692 = !DILocation(line: 1697, column: 5, scope: !5668)
!5693 = !DILocation(line: 1699, column: 7, scope: !5694)
!5694 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1699, column: 7)
!5695 = !DILocation(line: 1699, column: 7, scope: !5530)
!5696 = !DILocation(line: 1700, column: 5, scope: !5694)
!5697 = !DILocation(line: 1702, column: 7, scope: !5698)
!5698 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1702, column: 7)
!5699 = !DILocation(line: 1702, column: 7, scope: !5530)
!5700 = !DILocation(line: 1703, column: 5, scope: !5698)
!5701 = !DILocation(line: 1705, column: 7, scope: !5702)
!5702 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1705, column: 7)
!5703 = !DILocation(line: 1705, column: 7, scope: !5530)
!5704 = !DILocation(line: 1706, column: 5, scope: !5702)
!5705 = !DILocation(line: 1708, column: 7, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5530, file: !3, line: 1708, column: 7)
!5707 = !DILocation(line: 1708, column: 7, scope: !5530)
!5708 = !DILocation(line: 1709, column: 5, scope: !5706)
!5709 = !DILocation(line: 1714, column: 1, scope: !5530)
!5710 = distinct !DISubprogram(name: "number_of_loops", scope: !6, file: !6, line: 459, type: !5711, scopeLine: 460, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5711 = !DISubroutineType(types: !5712)
!5712 = !{!7}
!5713 = !DILocation(line: 461, column: 8, scope: !5714)
!5714 = distinct !DILexicalBlock(scope: !5710, file: !6, line: 461, column: 7)
!5715 = !DILocation(line: 461, column: 7, scope: !5710)
!5716 = !DILocation(line: 462, column: 5, scope: !5714)
!5717 = !DILocation(line: 464, column: 10, scope: !5710)
!5718 = !DILocation(line: 464, column: 3, scope: !5710)
!5719 = !DILocation(line: 465, column: 1, scope: !5710)
!5720 = distinct !DISubprogram(name: "loop_depth", scope: !6, file: !6, line: 425, type: !5721, scopeLine: 426, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5721 = !DISubroutineType(types: !5722)
!5722 = !{!7, !2367}
!5723 = !DILocalVariable(name: "loop", arg: 1, scope: !5720, file: !6, line: 425, type: !2367)
!5724 = !DILocation(line: 425, column: 32, scope: !5720)
!5725 = !DILocation(line: 427, column: 10, scope: !5720)
!5726 = !DILocation(line: 427, column: 3, scope: !5720)
!5727 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !144, file: !144, line: 150, type: !5728, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5728 = !DISubroutineType(types: !5729)
!5729 = !{!7, !4994}
!5730 = !DILocalVariable(name: "vec_", arg: 1, scope: !5727, file: !144, line: 150, type: !4994)
!5731 = !DILocation(line: 150, column: 1, scope: !5727)
!5732 = distinct !DISubprogram(name: "VEC_loop_p_base_length", scope: !6, file: !6, line: 85, type: !5733, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5733 = !DISubroutineType(types: !5734)
!5734 = !{!7, !5735}
!5735 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5736, size: 64)
!5736 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !1361)
!5737 = !DILocalVariable(name: "vec_", arg: 1, scope: !5732, file: !6, line: 85, type: !5735)
!5738 = !DILocation(line: 85, column: 1, scope: !5732)
!5739 = distinct !DISubprogram(name: "VEC_loop_p_base_index", scope: !6, file: !6, line: 85, type: !5740, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5740 = !DISubroutineType(types: !5741)
!5741 = !{!1368, !5735, !7}
!5742 = !DILocalVariable(name: "vec_", arg: 1, scope: !5739, file: !6, line: 85, type: !5735)
!5743 = !DILocation(line: 85, column: 1, scope: !5739)
!5744 = !DILocalVariable(name: "ix_", arg: 2, scope: !5739, file: !6, line: 85, type: !7)
!5745 = !DILocation(line: 0, scope: !5739)
!5746 = distinct !DISubprogram(name: "rpe_enum_p", scope: !3, file: !3, line: 50, type: !5747, scopeLine: 51, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5747 = !DISubroutineType(types: !5748)
!5748 = !{!829, !2040, !1058}
!5749 = !DILocalVariable(name: "bb", arg: 1, scope: !5746, file: !3, line: 50, type: !2040)
!5750 = !DILocation(line: 50, column: 31, scope: !5746)
!5751 = !DILocalVariable(name: "data", arg: 2, scope: !5746, file: !3, line: 50, type: !1058)
!5752 = !DILocation(line: 50, column: 47, scope: !5746)
!5753 = !DILocation(line: 52, column: 42, scope: !5746)
!5754 = !DILocation(line: 52, column: 66, scope: !5746)
!5755 = !DILocation(line: 52, column: 46, scope: !5746)
!5756 = !DILocation(line: 52, column: 10, scope: !5746)
!5757 = !DILocation(line: 52, column: 3, scope: !5746)
!5758 = distinct !DISubprogram(name: "ei_end_p", scope: !144, file: !144, line: 721, type: !5759, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5759 = !DISubroutineType(types: !5760)
!5760 = !{!829, !2192}
!5761 = !DILocalVariable(name: "i", arg: 1, scope: !5758, file: !144, line: 721, type: !2192)
!5762 = !DILocation(line: 721, column: 25, scope: !5758)
!5763 = !DILocation(line: 723, column: 13, scope: !5758)
!5764 = !DILocation(line: 723, column: 22, scope: !5758)
!5765 = !DILocation(line: 723, column: 19, scope: !5758)
!5766 = !DILocation(line: 723, column: 10, scope: !5758)
!5767 = !DILocation(line: 723, column: 3, scope: !5758)
!5768 = distinct !DISubprogram(name: "ei_edge", scope: !144, file: !144, line: 752, type: !5769, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5769 = !DISubroutineType(types: !5770)
!5770 = !{!665, !2192}
!5771 = !DILocalVariable(name: "i", arg: 1, scope: !5768, file: !144, line: 752, type: !2192)
!5772 = !DILocation(line: 752, column: 24, scope: !5768)
!5773 = !DILocation(line: 754, column: 10, scope: !5768)
!5774 = !DILocation(line: 754, column: 3, scope: !5768)
!5775 = distinct !DISubprogram(name: "ei_container", scope: !144, file: !144, line: 685, type: !5776, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5776 = !DISubroutineType(types: !5777)
!5777 = !{!653, !2192}
!5778 = !DILocalVariable(name: "i", arg: 1, scope: !5775, file: !144, line: 685, type: !2192)
!5779 = !DILocation(line: 685, column: 29, scope: !5775)
!5780 = !DILocation(line: 687, column: 3, scope: !5775)
!5781 = !DILocation(line: 688, column: 13, scope: !5775)
!5782 = !DILocation(line: 688, column: 10, scope: !5775)
!5783 = !DILocation(line: 688, column: 3, scope: !5775)
!5784 = distinct !DISubprogram(name: "VEC_basic_block_heap_reserve", scope: !144, file: !144, line: 283, type: !5785, scopeLine: 283, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5785 = !DISubroutineType(types: !5786)
!5786 = !{!806, !2600, !806}
!5787 = !DILocalVariable(name: "vec_", arg: 1, scope: !5784, file: !144, line: 283, type: !2600)
!5788 = !DILocation(line: 283, column: 1, scope: !5784)
!5789 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5784, file: !144, line: 283, type: !806)
!5790 = !DILocalVariable(name: "extend", scope: !5784, file: !144, line: 283, type: !806)
!5791 = !DILocation(line: 283, column: 1, scope: !5792)
!5792 = distinct !DILexicalBlock(scope: !5784, file: !144, line: 283, column: 1)
!5793 = distinct !DISubprogram(name: "VEC_basic_block_base_quick_push", scope: !144, file: !144, line: 281, type: !5794, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5794 = !DISubroutineType(types: !5795)
!5795 = !{!647, !5796, !648}
!5796 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1192, size: 64)
!5797 = !DILocalVariable(name: "vec_", arg: 1, scope: !5793, file: !144, line: 281, type: !5796)
!5798 = !DILocation(line: 281, column: 1, scope: !5793)
!5799 = !DILocalVariable(name: "obj_", arg: 2, scope: !5793, file: !144, line: 281, type: !648)
!5800 = !DILocalVariable(name: "slot_", scope: !5793, file: !144, line: 281, type: !647)
!5801 = distinct !DISubprogram(name: "VEC_basic_block_base_space", scope: !144, file: !144, line: 281, type: !5802, scopeLine: 281, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5802 = !DISubroutineType(types: !5803)
!5803 = !{!806, !5796, !806}
!5804 = !DILocalVariable(name: "vec_", arg: 1, scope: !5801, file: !144, line: 281, type: !5796)
!5805 = !DILocation(line: 281, column: 1, scope: !5801)
!5806 = !DILocalVariable(name: "alloc_", arg: 2, scope: !5801, file: !144, line: 281, type: !806)
!5807 = distinct !DISubprogram(name: "RESET_BIT", scope: !2099, file: !2099, line: 82, type: !2494, scopeLine: 83, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5808 = !DILocalVariable(name: "map", arg: 1, scope: !5807, file: !2099, line: 82, type: !2098)
!5809 = !DILocation(line: 82, column: 20, scope: !5807)
!5810 = !DILocalVariable(name: "bitno", arg: 2, scope: !5807, file: !2099, line: 82, type: !7)
!5811 = !DILocation(line: 82, column: 39, scope: !5807)
!5812 = !DILocation(line: 84, column: 7, scope: !5813)
!5813 = distinct !DILexicalBlock(scope: !5807, file: !2099, line: 84, column: 7)
!5814 = !DILocation(line: 84, column: 12, scope: !5813)
!5815 = !DILocation(line: 84, column: 7, scope: !5807)
!5816 = !DILocalVariable(name: "oldbit", scope: !5817, file: !2099, line: 86, type: !829)
!5817 = distinct !DILexicalBlock(scope: !5813, file: !2099, line: 85, column: 5)
!5818 = !DILocation(line: 86, column: 12, scope: !5817)
!5819 = !DILocation(line: 87, column: 16, scope: !5817)
!5820 = !DILocation(line: 87, column: 14, scope: !5817)
!5821 = !DILocation(line: 88, column: 11, scope: !5822)
!5822 = distinct !DILexicalBlock(scope: !5817, file: !2099, line: 88, column: 11)
!5823 = !DILocation(line: 88, column: 11, scope: !5817)
!5824 = !DILocation(line: 89, column: 2, scope: !5822)
!5825 = !DILocation(line: 89, column: 7, scope: !5822)
!5826 = !DILocation(line: 89, column: 16, scope: !5822)
!5827 = !DILocation(line: 89, column: 22, scope: !5822)
!5828 = !DILocation(line: 89, column: 41, scope: !5822)
!5829 = !DILocation(line: 90, column: 5, scope: !5817)
!5830 = !DILocation(line: 92, column: 35, scope: !5807)
!5831 = !DILocation(line: 92, column: 42, scope: !5807)
!5832 = !DILocation(line: 92, column: 31, scope: !5807)
!5833 = !DILocation(line: 92, column: 8, scope: !5807)
!5834 = !DILocation(line: 91, column: 3, scope: !5807)
!5835 = !DILocation(line: 91, column: 8, scope: !5807)
!5836 = !DILocation(line: 91, column: 13, scope: !5807)
!5837 = !DILocation(line: 91, column: 19, scope: !5807)
!5838 = !DILocation(line: 92, column: 5, scope: !5807)
!5839 = !DILocation(line: 93, column: 1, scope: !5807)
!5840 = distinct !DISubprogram(name: "fix_loop_placement", scope: !3, file: !3, line: 125, type: !5841, scopeLine: 126, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5841 = !DISubroutineType(types: !5842)
!5842 = !{!829, !1369}
!5843 = !DILocalVariable(name: "loop", arg: 1, scope: !5840, file: !3, line: 125, type: !1369)
!5844 = !DILocation(line: 125, column: 34, scope: !5840)
!5845 = !DILocalVariable(name: "i", scope: !5840, file: !3, line: 127, type: !7)
!5846 = !DILocation(line: 127, column: 12, scope: !5840)
!5847 = !DILocalVariable(name: "e", scope: !5840, file: !3, line: 128, type: !665)
!5848 = !DILocation(line: 128, column: 8, scope: !5840)
!5849 = !DILocalVariable(name: "exits", scope: !5840, file: !3, line: 129, type: !2050)
!5850 = !DILocation(line: 129, column: 21, scope: !5840)
!5851 = !DILocation(line: 129, column: 50, scope: !5840)
!5852 = !DILocation(line: 129, column: 29, scope: !5840)
!5853 = !DILocalVariable(name: "father", scope: !5840, file: !3, line: 130, type: !1369)
!5854 = !DILocation(line: 130, column: 16, scope: !5840)
!5855 = !DILocation(line: 130, column: 25, scope: !5840)
!5856 = !DILocation(line: 130, column: 40, scope: !5840)
!5857 = !DILocalVariable(name: "act", scope: !5840, file: !3, line: 130, type: !1369)
!5858 = !DILocation(line: 130, column: 52, scope: !5840)
!5859 = !DILocalVariable(name: "ret", scope: !5840, file: !3, line: 131, type: !829)
!5860 = !DILocation(line: 131, column: 8, scope: !5840)
!5861 = !DILocation(line: 133, column: 10, scope: !5862)
!5862 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 133, column: 3)
!5863 = !DILocation(line: 133, column: 8, scope: !5862)
!5864 = !DILocation(line: 133, column: 15, scope: !5865)
!5865 = distinct !DILexicalBlock(scope: !5862, file: !3, line: 133, column: 3)
!5866 = !DILocation(line: 133, column: 3, scope: !5862)
!5867 = !DILocation(line: 135, column: 31, scope: !5868)
!5868 = distinct !DILexicalBlock(scope: !5865, file: !3, line: 134, column: 5)
!5869 = !DILocation(line: 135, column: 37, scope: !5868)
!5870 = !DILocation(line: 135, column: 40, scope: !5868)
!5871 = !DILocation(line: 135, column: 46, scope: !5868)
!5872 = !DILocation(line: 135, column: 13, scope: !5868)
!5873 = !DILocation(line: 135, column: 11, scope: !5868)
!5874 = !DILocation(line: 136, column: 31, scope: !5875)
!5875 = distinct !DILexicalBlock(scope: !5868, file: !3, line: 136, column: 11)
!5876 = !DILocation(line: 136, column: 39, scope: !5875)
!5877 = !DILocation(line: 136, column: 11, scope: !5875)
!5878 = !DILocation(line: 136, column: 11, scope: !5868)
!5879 = !DILocation(line: 137, column: 11, scope: !5875)
!5880 = !DILocation(line: 137, column: 9, scope: !5875)
!5881 = !DILocation(line: 137, column: 2, scope: !5875)
!5882 = !DILocation(line: 138, column: 5, scope: !5868)
!5883 = !DILocation(line: 133, column: 49, scope: !5865)
!5884 = !DILocation(line: 133, column: 3, scope: !5865)
!5885 = distinct !{!5885, !5866, !5886}
!5886 = !DILocation(line: 138, column: 5, scope: !5862)
!5887 = !DILocation(line: 140, column: 7, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5840, file: !3, line: 140, column: 7)
!5889 = !DILocation(line: 140, column: 29, scope: !5888)
!5890 = !DILocation(line: 140, column: 17, scope: !5888)
!5891 = !DILocation(line: 140, column: 14, scope: !5888)
!5892 = !DILocation(line: 140, column: 7, scope: !5840)
!5893 = !DILocation(line: 142, column: 30, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 142, column: 7)
!5895 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 141, column: 5)
!5896 = !DILocation(line: 142, column: 18, scope: !5894)
!5897 = !DILocation(line: 142, column: 16, scope: !5894)
!5898 = !DILocation(line: 142, column: 12, scope: !5894)
!5899 = !DILocation(line: 142, column: 37, scope: !5900)
!5900 = distinct !DILexicalBlock(scope: !5894, file: !3, line: 142, column: 7)
!5901 = !DILocation(line: 142, column: 44, scope: !5900)
!5902 = !DILocation(line: 142, column: 41, scope: !5900)
!5903 = !DILocation(line: 142, column: 7, scope: !5894)
!5904 = !DILocation(line: 143, column: 20, scope: !5900)
!5905 = !DILocation(line: 143, column: 26, scope: !5900)
!5906 = !DILocation(line: 143, column: 2, scope: !5900)
!5907 = !DILocation(line: 143, column: 7, scope: !5900)
!5908 = !DILocation(line: 143, column: 17, scope: !5900)
!5909 = !DILocation(line: 142, column: 70, scope: !5900)
!5910 = !DILocation(line: 142, column: 58, scope: !5900)
!5911 = !DILocation(line: 142, column: 56, scope: !5900)
!5912 = !DILocation(line: 142, column: 7, scope: !5900)
!5913 = distinct !{!5913, !5903, !5914}
!5914 = !DILocation(line: 143, column: 26, scope: !5894)
!5915 = !DILocation(line: 144, column: 35, scope: !5895)
!5916 = !DILocation(line: 144, column: 7, scope: !5895)
!5917 = !DILocation(line: 145, column: 32, scope: !5895)
!5918 = !DILocation(line: 145, column: 40, scope: !5895)
!5919 = !DILocation(line: 145, column: 7, scope: !5895)
!5920 = !DILocation(line: 149, column: 14, scope: !5921)
!5921 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 149, column: 7)
!5922 = !DILocation(line: 149, column: 12, scope: !5921)
!5923 = !DILocation(line: 149, column: 19, scope: !5924)
!5924 = distinct !DILexicalBlock(scope: !5921, file: !3, line: 149, column: 7)
!5925 = !DILocation(line: 149, column: 7, scope: !5921)
!5926 = !DILocation(line: 150, column: 20, scope: !5924)
!5927 = !DILocation(line: 150, column: 2, scope: !5924)
!5928 = !DILocation(line: 149, column: 53, scope: !5924)
!5929 = !DILocation(line: 149, column: 7, scope: !5924)
!5930 = distinct !{!5930, !5925, !5931}
!5931 = !DILocation(line: 150, column: 35, scope: !5921)
!5932 = !DILocation(line: 152, column: 11, scope: !5895)
!5933 = !DILocation(line: 153, column: 5, scope: !5895)
!5934 = !DILocation(line: 155, column: 3, scope: !5840)
!5935 = !DILocation(line: 156, column: 10, scope: !5840)
!5936 = !DILocation(line: 156, column: 3, scope: !5840)
!5937 = distinct !DISubprogram(name: "fix_bb_placement", scope: !3, file: !3, line: 91, type: !5938, scopeLine: 92, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!5938 = !DISubroutineType(types: !5939)
!5939 = !{!829, !648}
!5940 = !DILocalVariable(name: "bb", arg: 1, scope: !5937, file: !3, line: 91, type: !648)
!5941 = !DILocation(line: 91, column: 31, scope: !5937)
!5942 = !DILocalVariable(name: "e", scope: !5937, file: !3, line: 93, type: !665)
!5943 = !DILocation(line: 93, column: 8, scope: !5937)
!5944 = !DILocalVariable(name: "ei", scope: !5937, file: !3, line: 94, type: !2192)
!5945 = !DILocation(line: 94, column: 17, scope: !5937)
!5946 = !DILocalVariable(name: "loop", scope: !5937, file: !3, line: 95, type: !1369)
!5947 = !DILocation(line: 95, column: 16, scope: !5937)
!5948 = !DILocation(line: 95, column: 23, scope: !5937)
!5949 = !DILocation(line: 95, column: 38, scope: !5937)
!5950 = !DILocalVariable(name: "act", scope: !5937, file: !3, line: 95, type: !1369)
!5951 = !DILocation(line: 95, column: 50, scope: !5937)
!5952 = !DILocation(line: 97, column: 3, scope: !5953)
!5953 = distinct !DILexicalBlock(scope: !5937, file: !3, line: 97, column: 3)
!5954 = !DILocation(line: 97, column: 3, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5953, file: !3, line: 97, column: 3)
!5956 = !DILocation(line: 99, column: 11, scope: !5957)
!5957 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 99, column: 11)
!5958 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 98, column: 5)
!5959 = !DILocation(line: 99, column: 14, scope: !5957)
!5960 = !DILocation(line: 99, column: 22, scope: !5957)
!5961 = !DILocation(line: 99, column: 19, scope: !5957)
!5962 = !DILocation(line: 99, column: 11, scope: !5958)
!5963 = !DILocation(line: 100, column: 2, scope: !5957)
!5964 = !DILocation(line: 102, column: 13, scope: !5958)
!5965 = !DILocation(line: 102, column: 16, scope: !5958)
!5966 = !DILocation(line: 102, column: 22, scope: !5958)
!5967 = !DILocation(line: 102, column: 11, scope: !5958)
!5968 = !DILocation(line: 103, column: 11, scope: !5969)
!5969 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 103, column: 11)
!5970 = !DILocation(line: 103, column: 16, scope: !5969)
!5971 = !DILocation(line: 103, column: 26, scope: !5969)
!5972 = !DILocation(line: 103, column: 29, scope: !5969)
!5973 = !DILocation(line: 103, column: 23, scope: !5969)
!5974 = !DILocation(line: 103, column: 11, scope: !5958)
!5975 = !DILocation(line: 104, column: 20, scope: !5969)
!5976 = !DILocation(line: 104, column: 8, scope: !5969)
!5977 = !DILocation(line: 104, column: 6, scope: !5969)
!5978 = !DILocation(line: 104, column: 2, scope: !5969)
!5979 = !DILocation(line: 106, column: 31, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5958, file: !3, line: 106, column: 11)
!5981 = !DILocation(line: 106, column: 37, scope: !5980)
!5982 = !DILocation(line: 106, column: 11, scope: !5980)
!5983 = !DILocation(line: 106, column: 11, scope: !5958)
!5984 = !DILocation(line: 107, column: 9, scope: !5980)
!5985 = !DILocation(line: 107, column: 7, scope: !5980)
!5986 = !DILocation(line: 107, column: 2, scope: !5980)
!5987 = !DILocation(line: 108, column: 5, scope: !5958)
!5988 = distinct !{!5988, !5952, !5989}
!5989 = !DILocation(line: 108, column: 5, scope: !5953)
!5990 = !DILocation(line: 110, column: 7, scope: !5991)
!5991 = distinct !DILexicalBlock(scope: !5937, file: !3, line: 110, column: 7)
!5992 = !DILocation(line: 110, column: 15, scope: !5991)
!5993 = !DILocation(line: 110, column: 19, scope: !5991)
!5994 = !DILocation(line: 110, column: 12, scope: !5991)
!5995 = !DILocation(line: 110, column: 7, scope: !5937)
!5996 = !DILocation(line: 111, column: 5, scope: !5991)
!5997 = !DILocation(line: 113, column: 25, scope: !5937)
!5998 = !DILocation(line: 113, column: 3, scope: !5937)
!5999 = !DILocation(line: 114, column: 19, scope: !5937)
!6000 = !DILocation(line: 114, column: 23, scope: !5937)
!6001 = !DILocation(line: 114, column: 3, scope: !5937)
!6002 = !DILocation(line: 116, column: 3, scope: !5937)
!6003 = !DILocation(line: 117, column: 1, scope: !5937)
!6004 = distinct !DISubprogram(name: "VEC_edge_base_iterate", scope: !144, file: !144, line: 150, type: !6005, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6005 = !DISubroutineType(types: !6006)
!6006 = !{!806, !4994, !7, !2543}
!6007 = !DILocalVariable(name: "vec_", arg: 1, scope: !6004, file: !144, line: 150, type: !4994)
!6008 = !DILocation(line: 150, column: 1, scope: !6004)
!6009 = !DILocalVariable(name: "ix_", arg: 2, scope: !6004, file: !144, line: 150, type: !7)
!6010 = !DILocalVariable(name: "ptr", arg: 3, scope: !6004, file: !144, line: 150, type: !2543)
!6011 = !DILocation(line: 150, column: 1, scope: !6012)
!6012 = distinct !DILexicalBlock(scope: !6004, file: !144, line: 150, column: 1)
!6013 = !DILocation(line: 150, column: 1, scope: !6014)
!6014 = distinct !DILexicalBlock(scope: !6012, file: !144, line: 150, column: 1)
!6015 = !DILocation(line: 150, column: 1, scope: !6016)
!6016 = distinct !DILexicalBlock(scope: !6012, file: !144, line: 150, column: 1)
!6017 = distinct !DISubprogram(name: "VEC_edge_heap_free", scope: !144, file: !144, line: 152, type: !6018, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6018 = !DISubroutineType(types: !6019)
!6019 = !{null, !3653}
!6020 = !DILocalVariable(name: "vec_", arg: 1, scope: !6017, file: !144, line: 152, type: !3653)
!6021 = !DILocation(line: 152, column: 1, scope: !6017)
!6022 = !DILocation(line: 152, column: 1, scope: !6023)
!6023 = distinct !DILexicalBlock(scope: !6017, file: !144, line: 152, column: 1)
!6024 = distinct !DISubprogram(name: "VEC_loop_p_gc_safe_push", scope: !6, file: !6, line: 87, type: !6025, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6025 = !DISubroutineType(types: !6026)
!6026 = !{!5033, !6027, !1368}
!6027 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1356, size: 64)
!6028 = !DILocalVariable(name: "vec_", arg: 1, scope: !6024, file: !6, line: 87, type: !6027)
!6029 = !DILocation(line: 87, column: 1, scope: !6024)
!6030 = !DILocalVariable(name: "obj_", arg: 2, scope: !6024, file: !6, line: 87, type: !1368)
!6031 = distinct !DISubprogram(name: "VEC_loop_p_gc_reserve", scope: !6, file: !6, line: 87, type: !6032, scopeLine: 87, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6032 = !DISubroutineType(types: !6033)
!6033 = !{!806, !6027, !806}
!6034 = !DILocalVariable(name: "vec_", arg: 1, scope: !6031, file: !6, line: 87, type: !6027)
!6035 = !DILocation(line: 87, column: 1, scope: !6031)
!6036 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6031, file: !6, line: 87, type: !806)
!6037 = !DILocalVariable(name: "extend", scope: !6031, file: !6, line: 87, type: !806)
!6038 = !DILocation(line: 87, column: 1, scope: !6039)
!6039 = distinct !DILexicalBlock(scope: !6031, file: !6, line: 87, column: 1)
!6040 = distinct !DISubprogram(name: "VEC_loop_p_base_quick_push", scope: !6, file: !6, line: 85, type: !6041, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6041 = !DISubroutineType(types: !6042)
!6042 = !{!5033, !6043, !1368}
!6043 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !1361, size: 64)
!6044 = !DILocalVariable(name: "vec_", arg: 1, scope: !6040, file: !6, line: 85, type: !6043)
!6045 = !DILocation(line: 85, column: 1, scope: !6040)
!6046 = !DILocalVariable(name: "obj_", arg: 2, scope: !6040, file: !6, line: 85, type: !1368)
!6047 = !DILocalVariable(name: "slot_", scope: !6040, file: !6, line: 85, type: !5033)
!6048 = distinct !DISubprogram(name: "VEC_loop_p_base_space", scope: !6, file: !6, line: 85, type: !6049, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6049 = !DISubroutineType(types: !6050)
!6050 = !{!806, !6043, !806}
!6051 = !DILocalVariable(name: "vec_", arg: 1, scope: !6048, file: !6, line: 85, type: !6043)
!6052 = !DILocation(line: 85, column: 1, scope: !6048)
!6053 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6048, file: !6, line: 85, type: !806)
!6054 = distinct !DISubprogram(name: "bb_seq", scope: !405, file: !405, line: 237, type: !6055, scopeLine: 238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6055 = !DISubroutineType(types: !6056)
!6056 = !{!675, !2040}
!6057 = !DILocalVariable(name: "bb", arg: 1, scope: !6054, file: !405, line: 237, type: !2040)
!6058 = !DILocation(line: 237, column: 27, scope: !6054)
!6059 = !DILocation(line: 239, column: 13, scope: !6054)
!6060 = !DILocation(line: 239, column: 17, scope: !6054)
!6061 = !DILocation(line: 239, column: 23, scope: !6054)
!6062 = !DILocation(line: 239, column: 33, scope: !6054)
!6063 = !DILocation(line: 239, column: 36, scope: !6054)
!6064 = !DILocation(line: 239, column: 40, scope: !6054)
!6065 = !DILocation(line: 239, column: 43, scope: !6054)
!6066 = !DILocation(line: 239, column: 10, scope: !6054)
!6067 = !DILocation(line: 239, column: 53, scope: !6054)
!6068 = !DILocation(line: 239, column: 57, scope: !6054)
!6069 = !DILocation(line: 239, column: 60, scope: !6054)
!6070 = !DILocation(line: 239, column: 68, scope: !6054)
!6071 = !DILocation(line: 239, column: 3, scope: !6054)
!6072 = distinct !DISubprogram(name: "gimple_seq_last", scope: !405, file: !405, line: 178, type: !6073, scopeLine: 179, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6073 = !DISubroutineType(types: !6074)
!6074 = !{!680, !6075}
!6075 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_gimple_seq", file: !641, line: 67, baseType: !6076)
!6076 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6077, size: 64)
!6077 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !677)
!6078 = !DILocalVariable(name: "s", arg: 1, scope: !6072, file: !405, line: 178, type: !6075)
!6079 = !DILocation(line: 178, column: 35, scope: !6072)
!6080 = !DILocation(line: 180, column: 10, scope: !6072)
!6081 = !DILocation(line: 180, column: 14, scope: !6072)
!6082 = !DILocation(line: 180, column: 17, scope: !6072)
!6083 = !DILocation(line: 180, column: 3, scope: !6072)
!6084 = distinct !DISubprogram(name: "gimple_op", scope: !405, file: !405, line: 1631, type: !6085, scopeLine: 1632, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6085 = !DISubroutineType(types: !6086)
!6086 = !{!710, !3401, !7}
!6087 = !DILocalVariable(name: "gs", arg: 1, scope: !6084, file: !405, line: 1631, type: !3401)
!6088 = !DILocation(line: 1631, column: 25, scope: !6084)
!6089 = !DILocalVariable(name: "i", arg: 2, scope: !6084, file: !405, line: 1631, type: !7)
!6090 = !DILocation(line: 1631, column: 38, scope: !6084)
!6091 = !DILocation(line: 1633, column: 23, scope: !6092)
!6092 = distinct !DILexicalBlock(scope: !6084, file: !405, line: 1633, column: 7)
!6093 = !DILocation(line: 1633, column: 7, scope: !6092)
!6094 = !DILocation(line: 1633, column: 7, scope: !6084)
!6095 = !DILocation(line: 1638, column: 26, scope: !6096)
!6096 = distinct !DILexicalBlock(scope: !6092, file: !405, line: 1634, column: 5)
!6097 = !DILocation(line: 1638, column: 14, scope: !6096)
!6098 = !DILocation(line: 1638, column: 50, scope: !6096)
!6099 = !DILocation(line: 1638, column: 7, scope: !6096)
!6100 = !DILocation(line: 1641, column: 5, scope: !6092)
!6101 = !DILocation(line: 1642, column: 1, scope: !6084)
!6102 = distinct !DISubprogram(name: "gimple_has_ops", scope: !405, file: !405, line: 1274, type: !6103, scopeLine: 1275, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6103 = !DISubroutineType(types: !6104)
!6104 = !{!829, !3401}
!6105 = !DILocalVariable(name: "g", arg: 1, scope: !6102, file: !405, line: 1274, type: !3401)
!6106 = !DILocation(line: 1274, column: 30, scope: !6102)
!6107 = !DILocation(line: 1276, column: 23, scope: !6102)
!6108 = !DILocation(line: 1276, column: 10, scope: !6102)
!6109 = !DILocation(line: 1276, column: 26, scope: !6102)
!6110 = !DILocation(line: 1276, column: 41, scope: !6102)
!6111 = !DILocation(line: 1276, column: 57, scope: !6102)
!6112 = !DILocation(line: 1276, column: 44, scope: !6102)
!6113 = !DILocation(line: 1276, column: 60, scope: !6102)
!6114 = !DILocation(line: 0, scope: !6102)
!6115 = !DILocation(line: 1276, column: 3, scope: !6102)
!6116 = distinct !DISubprogram(name: "gimple_ops", scope: !405, file: !405, line: 1614, type: !6117, scopeLine: 1615, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6117 = !DISubroutineType(types: !6118)
!6118 = !{!1332, !685}
!6119 = !DILocalVariable(name: "gs", arg: 1, scope: !6116, file: !405, line: 1614, type: !685)
!6120 = !DILocation(line: 1614, column: 20, scope: !6116)
!6121 = !DILocalVariable(name: "off", scope: !6116, file: !405, line: 1616, type: !1240)
!6122 = !DILocation(line: 1616, column: 10, scope: !6116)
!6123 = !DILocation(line: 1621, column: 56, scope: !6116)
!6124 = !DILocation(line: 1621, column: 28, scope: !6116)
!6125 = !DILocation(line: 1621, column: 9, scope: !6116)
!6126 = !DILocation(line: 1621, column: 7, scope: !6116)
!6127 = !DILocation(line: 1622, column: 3, scope: !6116)
!6128 = !DILocation(line: 1624, column: 29, scope: !6116)
!6129 = !DILocation(line: 1624, column: 20, scope: !6116)
!6130 = !DILocation(line: 1624, column: 34, scope: !6116)
!6131 = !DILocation(line: 1624, column: 32, scope: !6116)
!6132 = !DILocation(line: 1624, column: 10, scope: !6116)
!6133 = !DILocation(line: 1624, column: 3, scope: !6116)
!6134 = distinct !DISubprogram(name: "gimple_code", scope: !405, file: !405, line: 1052, type: !6135, scopeLine: 1053, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6135 = !DISubroutineType(types: !6136)
!6136 = !{!576, !3401}
!6137 = !DILocalVariable(name: "g", arg: 1, scope: !6134, file: !405, line: 1052, type: !3401)
!6138 = !DILocation(line: 1052, column: 27, scope: !6134)
!6139 = !DILocation(line: 1054, column: 10, scope: !6134)
!6140 = !DILocation(line: 1054, column: 13, scope: !6134)
!6141 = !DILocation(line: 1054, column: 20, scope: !6134)
!6142 = !DILocation(line: 1054, column: 3, scope: !6134)
!6143 = distinct !DISubprogram(name: "gimple_statement_structure", scope: !405, file: !405, line: 1073, type: !6144, scopeLine: 1074, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6144 = !DISubroutineType(types: !6145)
!6145 = !{!614, !685}
!6146 = !DILocalVariable(name: "gs", arg: 1, scope: !6143, file: !405, line: 1073, type: !685)
!6147 = !DILocation(line: 1073, column: 36, scope: !6143)
!6148 = !DILocation(line: 1075, column: 37, scope: !6143)
!6149 = !DILocation(line: 1075, column: 24, scope: !6143)
!6150 = !DILocation(line: 1075, column: 10, scope: !6143)
!6151 = !DILocation(line: 1075, column: 3, scope: !6143)
!6152 = distinct !DISubprogram(name: "gss_for_code", scope: !405, file: !405, line: 1061, type: !6153, scopeLine: 1062, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6153 = !DISubroutineType(types: !6154)
!6154 = !{!614, !576}
!6155 = !DILocalVariable(name: "code", arg: 1, scope: !6152, file: !405, line: 1061, type: !576)
!6156 = !DILocation(line: 1061, column: 32, scope: !6152)
!6157 = !DILocation(line: 1066, column: 24, scope: !6152)
!6158 = !DILocation(line: 1066, column: 10, scope: !6152)
!6159 = !DILocation(line: 1066, column: 3, scope: !6152)
!6160 = distinct !DISubprogram(name: "gimple_set_op", scope: !405, file: !405, line: 1663, type: !6161, scopeLine: 1664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6161 = !DISubroutineType(types: !6162)
!6162 = !{null, !685, !7, !710}
!6163 = !DILocalVariable(name: "gs", arg: 1, scope: !6160, file: !405, line: 1663, type: !685)
!6164 = !DILocation(line: 1663, column: 23, scope: !6160)
!6165 = !DILocalVariable(name: "i", arg: 2, scope: !6160, file: !405, line: 1663, type: !7)
!6166 = !DILocation(line: 1663, column: 36, scope: !6160)
!6167 = !DILocalVariable(name: "op", arg: 3, scope: !6160, file: !405, line: 1663, type: !710)
!6168 = !DILocation(line: 1663, column: 44, scope: !6160)
!6169 = !DILocation(line: 1665, column: 3, scope: !6160)
!6170 = !DILocation(line: 1671, column: 24, scope: !6160)
!6171 = !DILocation(line: 1671, column: 15, scope: !6160)
!6172 = !DILocation(line: 1671, column: 3, scope: !6160)
!6173 = !DILocation(line: 1671, column: 19, scope: !6160)
!6174 = !DILocation(line: 1671, column: 22, scope: !6160)
!6175 = !DILocation(line: 1672, column: 1, scope: !6160)
!6176 = distinct !DISubprogram(name: "gimple_num_ops", scope: !405, file: !405, line: 1596, type: !6177, scopeLine: 1597, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6177 = !DISubroutineType(types: !6178)
!6178 = !{!7, !3401}
!6179 = !DILocalVariable(name: "gs", arg: 1, scope: !6176, file: !405, line: 1596, type: !3401)
!6180 = !DILocation(line: 1596, column: 30, scope: !6176)
!6181 = !DILocation(line: 1598, column: 10, scope: !6176)
!6182 = !DILocation(line: 1598, column: 14, scope: !6176)
!6183 = !DILocation(line: 1598, column: 21, scope: !6176)
!6184 = !DILocation(line: 1598, column: 3, scope: !6176)
!6185 = distinct !DISubprogram(name: "VEC_edge_heap_reserve", scope: !144, file: !144, line: 152, type: !6186, scopeLine: 152, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6186 = !DISubroutineType(types: !6187)
!6187 = !{!806, !3653, !806}
!6188 = !DILocalVariable(name: "vec_", arg: 1, scope: !6185, file: !144, line: 152, type: !3653)
!6189 = !DILocation(line: 152, column: 1, scope: !6185)
!6190 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6185, file: !144, line: 152, type: !806)
!6191 = !DILocalVariable(name: "extend", scope: !6185, file: !144, line: 152, type: !806)
!6192 = !DILocation(line: 152, column: 1, scope: !6193)
!6193 = distinct !DILexicalBlock(scope: !6185, file: !144, line: 152, column: 1)
!6194 = distinct !DISubprogram(name: "VEC_edge_base_quick_push", scope: !144, file: !144, line: 150, type: !6195, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6195 = !DISubroutineType(types: !6196)
!6196 = !{!2543, !6197, !665}
!6197 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !658, size: 64)
!6198 = !DILocalVariable(name: "vec_", arg: 1, scope: !6194, file: !144, line: 150, type: !6197)
!6199 = !DILocation(line: 150, column: 1, scope: !6194)
!6200 = !DILocalVariable(name: "obj_", arg: 2, scope: !6194, file: !144, line: 150, type: !665)
!6201 = !DILocalVariable(name: "slot_", scope: !6194, file: !144, line: 150, type: !2543)
!6202 = distinct !DISubprogram(name: "VEC_edge_base_space", scope: !144, file: !144, line: 150, type: !6203, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6203 = !DISubroutineType(types: !6204)
!6204 = !{!806, !6197, !806}
!6205 = !DILocalVariable(name: "vec_", arg: 1, scope: !6202, file: !144, line: 150, type: !6197)
!6206 = !DILocation(line: 150, column: 1, scope: !6202)
!6207 = !DILocalVariable(name: "alloc_", arg: 2, scope: !6202, file: !144, line: 150, type: !806)
!6208 = distinct !DISubprogram(name: "VEC_int_heap_alloc", scope: !2057, file: !2057, line: 32, type: !6209, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6209 = !DISubroutineType(types: !6210)
!6210 = !{!2055, !806}
!6211 = !DILocalVariable(name: "alloc_", arg: 1, scope: !6208, file: !2057, line: 32, type: !806)
!6212 = !DILocation(line: 32, column: 1, scope: !6208)
!6213 = distinct !DISubprogram(name: "VEC_loop_p_base_iterate", scope: !6, file: !6, line: 85, type: !6214, scopeLine: 85, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6214 = !DISubroutineType(types: !6215)
!6215 = !{!806, !5735, !7, !5033}
!6216 = !DILocalVariable(name: "vec_", arg: 1, scope: !6213, file: !6, line: 85, type: !5735)
!6217 = !DILocation(line: 85, column: 1, scope: !6213)
!6218 = !DILocalVariable(name: "ix_", arg: 2, scope: !6213, file: !6, line: 85, type: !7)
!6219 = !DILocalVariable(name: "ptr", arg: 3, scope: !6213, file: !6, line: 85, type: !5033)
!6220 = !DILocation(line: 85, column: 1, scope: !6221)
!6221 = distinct !DILexicalBlock(scope: !6213, file: !6, line: 85, column: 1)
!6222 = !DILocation(line: 85, column: 1, scope: !6223)
!6223 = distinct !DILexicalBlock(scope: !6221, file: !6, line: 85, column: 1)
!6224 = !DILocation(line: 85, column: 1, scope: !6225)
!6225 = distinct !DILexicalBlock(scope: !6221, file: !6, line: 85, column: 1)
!6226 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !2057, file: !2057, line: 31, type: !6227, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6227 = !DISubroutineType(types: !6228)
!6228 = !{!2038, !6229, !806}
!6229 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2061, size: 64)
!6230 = !DILocalVariable(name: "vec_", arg: 1, scope: !6226, file: !2057, line: 31, type: !6229)
!6231 = !DILocation(line: 31, column: 1, scope: !6226)
!6232 = !DILocalVariable(name: "obj_", arg: 2, scope: !6226, file: !2057, line: 31, type: !806)
!6233 = !DILocalVariable(name: "slot_", scope: !6226, file: !2057, line: 31, type: !2038)
!6234 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !2057, file: !2057, line: 31, type: !6235, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6235 = !DISubroutineType(types: !6236)
!6236 = !{!806, !6237, !7, !2038}
!6237 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6238, size: 64)
!6238 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2061)
!6239 = !DILocalVariable(name: "vec_", arg: 1, scope: !6234, file: !2057, line: 31, type: !6237)
!6240 = !DILocation(line: 31, column: 1, scope: !6234)
!6241 = !DILocalVariable(name: "ix_", arg: 2, scope: !6234, file: !2057, line: 31, type: !7)
!6242 = !DILocalVariable(name: "ptr", arg: 3, scope: !6234, file: !2057, line: 31, type: !2038)
!6243 = !DILocation(line: 31, column: 1, scope: !6244)
!6244 = distinct !DILexicalBlock(scope: !6234, file: !2057, line: 31, column: 1)
!6245 = !DILocation(line: 31, column: 1, scope: !6246)
!6246 = distinct !DILexicalBlock(scope: !6244, file: !2057, line: 31, column: 1)
!6247 = !DILocation(line: 31, column: 1, scope: !6248)
!6248 = distinct !DILexicalBlock(scope: !6244, file: !2057, line: 31, column: 1)
!6249 = distinct !DISubprogram(name: "get_loop", scope: !6, file: !6, line: 417, type: !6250, scopeLine: 418, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6250 = !DISubroutineType(types: !6251)
!6251 = !{!1369, !7}
!6252 = !DILocalVariable(name: "num", arg: 1, scope: !6249, file: !6, line: 417, type: !7)
!6253 = !DILocation(line: 417, column: 20, scope: !6249)
!6254 = !DILocation(line: 419, column: 10, scope: !6249)
!6255 = !DILocation(line: 419, column: 3, scope: !6249)
!6256 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !2057, file: !2057, line: 32, type: !6257, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !2076)
!6257 = !DISubroutineType(types: !6258)
!6258 = !{null, !6259}
!6259 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2055, size: 64)
!6260 = !DILocalVariable(name: "vec_", arg: 1, scope: !6256, file: !2057, line: 32, type: !6259)
!6261 = !DILocation(line: 32, column: 1, scope: !6256)
!6262 = !DILocation(line: 32, column: 1, scope: !6263)
!6263 = distinct !DILexicalBlock(scope: !6256, file: !2057, line: 32, column: 1)
