; ModuleID = 'ifcvt.c'
source_filename = "ifcvt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rtl_opt_pass = type { %struct.opt_pass }
%struct.opt_pass = type { i32, i8*, i8 ()*, i32 ()*, %struct.opt_pass*, %struct.opt_pass*, i32, i32, i32, i32, i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.function = type { %struct.eh_status*, %struct.control_flow_graph*, %struct.gimple_seq_d*, %struct.gimple_df*, %struct.loops*, %struct.htab*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.machine_function*, %struct.language_function*, %struct.htab*, i32, i32, i32, i32, i32, i32, i8*, i32 }
%struct.eh_status = type { %struct.eh_region_d*, %struct.VEC_eh_region_gc*, %struct.VEC_eh_landing_pad_gc*, %struct.htab*, %struct.VEC_tree_gc*, %union.eh_status_u }
%struct.eh_region_d = type { %struct.eh_region_d*, %struct.eh_region_d*, %struct.eh_region_d*, i32, i32, %union.eh_region_u, %struct.eh_landing_pad_d*, %struct.rtx_def*, %struct.rtx_def*, i8 }
%union.eh_region_u = type { %struct.eh_region_u_allowed }
%struct.eh_region_u_allowed = type { %union.tree_node*, %union.tree_node*, i32 }
%struct.eh_landing_pad_d = type { %struct.eh_landing_pad_d*, %struct.eh_region_d*, %union.tree_node*, %struct.rtx_def*, i32 }
%struct.rtx_def = type { i32, %union.u }
%union.u = type { %struct.block_symbol }
%struct.block_symbol = type { [3 x %union.rtunion_def], %struct.object_block*, i64 }
%union.rtunion_def = type { i8* }
%struct.object_block = type { %union.section*, i32, i64, %struct.VEC_rtx_gc*, %struct.VEC_rtx_gc* }
%union.section = type { %struct.unnamed_section }
%struct.unnamed_section = type { %struct.section_common, void (i8*)*, i8*, %union.section* }
%struct.section_common = type { i32 }
%struct.VEC_rtx_gc = type { %struct.VEC_rtx_base }
%struct.VEC_rtx_base = type { i32, i32, [1 x %struct.rtx_def*] }
%struct.VEC_eh_region_gc = type { %struct.VEC_eh_region_base }
%struct.VEC_eh_region_base = type { i32, i32, [1 x %struct.eh_region_d*] }
%struct.VEC_eh_landing_pad_gc = type { %struct.VEC_eh_landing_pad_base }
%struct.VEC_eh_landing_pad_base = type { i32, i32, [1 x %struct.eh_landing_pad_d*] }
%struct.VEC_tree_gc = type { %struct.VEC_tree_base }
%struct.VEC_tree_base = type { i32, i32, [1 x %union.tree_node*] }
%union.eh_status_u = type { %struct.VEC_tree_gc* }
%struct.control_flow_graph = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.VEC_basic_block_gc*, i32, i32, i32, %struct.VEC_basic_block_gc*, i32, [2 x i32], [2 x i32], i32, i32 }
%struct.basic_block_def = type { %struct.VEC_edge_gc*, %struct.VEC_edge_gc*, i8*, %struct.loop*, [2 x %struct.et_node*], %struct.basic_block_def*, %struct.basic_block_def*, %union.basic_block_il_dependent, i64, i32, i32, i32, i32, i32 }
%struct.VEC_edge_gc = type { %struct.VEC_edge_base }
%struct.VEC_edge_base = type { i32, i32, [1 x %struct.edge_def*] }
%struct.edge_def = type { %struct.basic_block_def*, %struct.basic_block_def*, %union.edge_def_insns, i8*, %union.tree_node*, i32, i32, i32, i32, i64 }
%union.edge_def_insns = type { %struct.gimple_seq_d* }
%struct.loop = type { i32, i32, %struct.basic_block_def*, %struct.basic_block_def*, %struct.lpt_decision, i32, i32, %struct.VEC_loop_p_gc*, %struct.loop*, %struct.loop*, i8*, %union.tree_node*, %struct.double_int, %struct.double_int, i8, i8, i32, %struct.nb_iter_bound*, %struct.loop_exit*, i8, %union.tree_node* }
%struct.lpt_decision = type { i32, i32 }
%struct.VEC_loop_p_gc = type { %struct.VEC_loop_p_base }
%struct.VEC_loop_p_base = type { i32, i32, [1 x %struct.loop*] }
%struct.double_int = type { i64, i64 }
%struct.nb_iter_bound = type { %union.gimple_statement_d*, %struct.double_int, i8, %struct.nb_iter_bound* }
%union.gimple_statement_d = type opaque
%struct.loop_exit = type { %struct.edge_def*, %struct.loop_exit*, %struct.loop_exit*, %struct.loop_exit* }
%struct.et_node = type opaque
%union.basic_block_il_dependent = type { %struct.gimple_bb_info* }
%struct.gimple_bb_info = type { %struct.gimple_seq_d*, %struct.gimple_seq_d* }
%struct.VEC_basic_block_gc = type { %struct.VEC_basic_block_base }
%struct.VEC_basic_block_base = type { i32, i32, [1 x %struct.basic_block_def*] }
%struct.gimple_seq_d = type opaque
%struct.gimple_df = type opaque
%struct.loops = type { i32, %struct.VEC_loop_p_gc*, %struct.htab*, %struct.loop* }
%union.tree_node = type { %struct.tree_function_decl }
%struct.tree_function_decl = type { %struct.tree_decl_non_common, %struct.function*, %union.tree_node*, %union.tree_node*, %union.tree_node*, i32 }
%struct.tree_decl_non_common = type { %struct.tree_decl_with_vis, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node* }
%struct.tree_decl_with_vis = type { %struct.tree_decl_with_rtl, %union.tree_node*, %union.tree_node*, %union.tree_node*, i24 }
%struct.tree_decl_with_rtl = type { %struct.tree_decl_common, %struct.rtx_def* }
%struct.tree_decl_common = type { %struct.tree_decl_minimal, %union.tree_node*, i40, i32, %union.tree_node*, %union.tree_node*, %union.tree_node*, %union.tree_node*, %struct.lang_decl* }
%struct.tree_decl_minimal = type { %struct.tree_common, i32, i32, %union.tree_node*, %union.tree_node* }
%struct.tree_common = type { %struct.tree_base, %union.tree_node*, %union.tree_node* }
%struct.tree_base = type { i64 }
%struct.lang_decl = type opaque
%struct.machine_function = type { %struct.stack_local_entry*, i8*, i32, i32, [4 x i32], i32, %struct.machine_cfa_state, i32, i8 }
%struct.stack_local_entry = type opaque
%struct.machine_cfa_state = type { %struct.rtx_def*, i64 }
%struct.language_function = type opaque
%struct.htab = type { i32 (i8*)*, i32 (i8*, i8*)*, void (i8*)*, i8**, i64, i64, i64, i32, i32, i8* (i64, i64)*, void (i8*)*, i8*, i8* (i8*, i64, i64)*, void (i8*, i8*)*, i32 }
%struct.df = type { [8 x %struct.dataflow*], [8 x %struct.dataflow*], %struct.bitmap_head_def*, %struct.df_ref_info, %struct.df_ref_info, %struct.df_reg_info**, %struct.df_reg_info**, %struct.df_reg_info**, i32, i32, %struct.df_insn_info**, i32, i32, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, %struct.bitmap_head_def*, i32*, i32*, i32, i32, i32*, i32, i8, i8, i8 }
%struct.dataflow = type { %struct.df_problem*, i8**, i32, %struct.alloc_pool_def*, %struct.bitmap_head_def*, i8*, i32, i8, i8, i8 }
%struct.df_problem = type { i32, i32, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.basic_block_def*, i8*)*, void (%struct.bitmap_head_def*)*, void (%struct.bitmap_head_def*)*, void (%struct.dataflow*, %struct.bitmap_head_def*, i32*, i32)*, void (%struct.basic_block_def*)*, void (%struct.edge_def*)*, i8 (i32)*, void (%struct.bitmap_head_def*)*, void ()*, void ()*, void (%struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void (%struct.basic_block_def*, %struct._IO_FILE*)*, void ()*, void ()*, %struct.df_problem*, i32, i8 }
%struct.alloc_pool_def = type { i8*, i64, %struct.alloc_pool_list_def*, i8*, i64, i64, i64, i64, %struct.alloc_pool_list_def*, i64, i64 }
%struct.alloc_pool_list_def = type { %struct.alloc_pool_list_def* }
%struct.df_ref_info = type { %union.df_ref_d**, i32*, i32*, i32, i32, i32, i32 }
%union.df_ref_d = type { %struct.df_extract_ref }
%struct.df_extract_ref = type { %struct.df_regular_ref, i32, i32, i32 }
%struct.df_regular_ref = type { %struct.df_base_ref, %struct.rtx_def** }
%struct.df_base_ref = type { i32, %struct.rtx_def*, %struct.df_link*, %struct.df_insn_info*, %union.df_ref_d*, %union.df_ref_d*, i32, i32, i32 }
%struct.df_link = type { %union.df_ref_d*, %struct.df_link* }
%struct.df_insn_info = type { %struct.rtx_def*, %union.df_ref_d**, %union.df_ref_d**, %union.df_ref_d**, %struct.df_mw_hardreg**, i32 }
%struct.df_mw_hardreg = type { %struct.rtx_def*, i32, i32, i32, i32 }
%struct.df_reg_info = type { %union.df_ref_d*, i32 }
%struct.bitmap_head_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, %struct.bitmap_obstack* }
%struct.bitmap_element_def = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, [2 x i64] }
%struct.bitmap_obstack = type { %struct.bitmap_element_def*, %struct.bitmap_head_def*, %struct.obstack }
%struct.obstack = type { i64, %struct._obstack_chunk*, i8*, i8*, i8*, i64, i32, %struct._obstack_chunk* (i8*, i64)*, void (i8*, %struct._obstack_chunk*)*, i8*, i8 }
%struct._obstack_chunk = type { i8*, %struct._obstack_chunk*, [4 x i8] }
%struct.gcc_target = type { %struct.asm_out, %struct.sched, %struct.vectorize, i32, void ()*, i8 (i64, i8*, i32)*, void ()*, i32 ()*, i32 ()*, i32 ()*, i32 ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, %struct.attribute_spec*, i32 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, void (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void ()*, %union.tree_node* (i32, i8)*, %struct.rtx_def* (%union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32)*, %union.tree_node* (i32, %union.tree_node*, i8*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, i8)*, %union.tree_node* (i32, i8, i8)*, i8* (%union.tree_node*)*, void ()*, i32 (%union.tree_node*, i8*, i32)*, i8 ()*, i32 ()*, i8 (i8)*, i8 ()*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i8 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, i8 (i32, %struct.rtx_def*, i8)*, i8 (i32, %struct.rtx_def*)*, i64, i64, i8 (%struct.rtx_def*)*, i8 (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*, i32)*, i8* (i8*)*, i64 (i32)*, i32 (i32)*, i32 (i32, i32)*, i8 (i32)*, %struct.addr_space, i8 (i32)*, i8 (i32)*, i8 (%struct.rtx_def*, i32, i32, i32*, i8)*, i32 (%struct.rtx_def*, i8)*, %struct.rtx_def* (%struct.rtx_def*)*, i32 (%struct.rtx_def*, i32)*, %struct.rtx_def* (%struct.rtx_def*)*, void (%union.tree_node*)*, i8 (i32*, i32*)*, i32 (i32, i32)*, void ()*, %union.tree_node* ()*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, void (%union.tree_node*, %struct.rtx_def*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %struct.gimple_seq_d**, %struct.gimple_seq_d**)*, i8* (i64*)*, i8* (i8*, i64)*, i8* (i32)*, i8 ()*, %struct.rtx_def* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i32 (%union.tree_node*)*, void (i8*, %struct.rtx_def*, i32)*, i8 (%struct.stdarg_info*, %union.gimple_statement_d*)*, %union.tree_node* ()*, %union.tree_node* ()*, i8* (%struct.rtx_def*)*, i8 (%union.tree_node*)*, i64, %struct.calls, i8* (%union.tree_node*, %union.tree_node*)*, i8* (i32, %union.tree_node*)*, i8* (i32, %union.tree_node*, %union.tree_node*)*, i8* (%union.tree_node*)*, i8* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*, %union.tree_node*)*, i32* ()*, i32 (i8, %struct.rtx_def*, i32, i32, %struct.secondary_reload_info*)*, void ()*, void ()*, i8 (i32)*, i32 ()*, i8 ()*, i8 (i32, i32)*, %struct.c, %struct.cxx, %struct.emutls, %struct.target_option_hooks, void (%struct.bitmap_head_def*)*, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.asm_out = type { i8*, i8*, i8*, %struct.asm_int_op, %struct.asm_int_op, i8 (%struct.rtx_def*, i32, i32)*, void (%struct._IO_FILE*, i8*)*, void (%struct._IO_FILE*, %union.tree_node*)*, void (%struct._IO_FILE*, %union.tree_node*, i32, i32)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, %struct.rtx_def*)*, void (%struct._IO_FILE*, i8*, i64)*, i8 (%struct.rtx_def*)*, void (%union.tree_node*, i32)*, void (%struct._IO_FILE*, i64)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*)*, void (%struct._IO_FILE*, i64)*, void ()*, void (i8*, i32, %union.tree_node*)*, i32 ()*, %union.section* (%union.tree_node*, i32, i64)*, %union.section* (i32, %struct.rtx_def*, i64)*, void (%union.tree_node*, i32)*, %union.section* (%union.tree_node*)*, void (%struct.rtx_def*, i32)*, void (%struct.rtx_def*, i32)*, void (%struct._IO_FILE*, %union.tree_node*, i64, i64, %union.tree_node*)*, i8 (%union.tree_node*, i64, i64, %union.tree_node*)*, void ()*, void ()*, void ()*, void (%struct.rtx_def*)*, void (i8*)*, i32 (i32, i8*)*, i8*, void (%struct.rtx_def*)*, void (%struct._IO_FILE*, i32, %struct.rtx_def*)*, void (%struct._IO_FILE*, %struct.rtx_def*, %struct.rtx_def**, i32)*, void (%struct._IO_FILE*)* }
%struct.asm_int_op = type { i8*, i8*, i8*, i8* }
%struct.sched = type { i32 (%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32)*, i32 (%struct.rtx_def*, i32)*, i32 ()*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, void (%struct._IO_FILE*, i32, i32)*, void (%struct._IO_FILE*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def**, i32*, i32)*, void (%struct.rtx_def*, %struct.rtx_def*)*, void ()*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, void ()*, void ()*, i32 ()*, i32 (%struct.rtx_def*)*, i32 (%struct._IO_FILE*, i32, %struct.rtx_def*, i32, i32, i32*)*, i8 (%struct._dep*, i32, i32)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def*, i32, i32)*, void ()*, i8* ()*, void (i8*, i8)*, void (i8*)*, void (i8*)*, void (i8*)*, i32 (%struct.rtx_def*, i32, %struct.rtx_def**)*, i8 (i32)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32)*, i8 (%struct.rtx_def*)*, void (%struct.spec_info_def*)*, i32 (%struct.rtx_def*)*, i32 (%struct.rtx_def*)*, i8 (%struct.rtx_def*)*, i32 (%struct.ddg*)* }
%struct._dep = type opaque
%struct.spec_info_def = type opaque
%struct.ddg = type opaque
%struct.vectorize = type { %union.tree_node* ()*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %union.tree_node* (i32, %union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, %union.tree_node* (%union.tree_node*)*, i32 (i8)*, i8 (%union.tree_node*, i8)*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (i32, %union.tree_node*, i32, i8)* }
%struct.attribute_spec = type { i8*, i32, i32, i8, i8, i8, %union.tree_node* (%union.tree_node**, %union.tree_node*, %union.tree_node*, i32, i8*)* }
%struct.addr_space = type { i32 (i8)*, i32 (i8)*, i8 (i32, i8)*, i8 (i32, %struct.rtx_def*, i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %struct.rtx_def*, i32, i8)*, i8 (i8, i8)*, %struct.rtx_def* (%struct.rtx_def*, %union.tree_node*, %union.tree_node*)* }
%struct.stdarg_info = type opaque
%struct.calls = type { i32 (%union.tree_node*, i32, i32*, %union.tree_node*, i32)*, i8 (%union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, i32)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, %struct.rtx_def* ()*, void (%struct.ix86_args*, i32, %union.tree_node*, i32*, i32)*, i8 (%struct.ix86_args*)*, i8 (%struct.ix86_args*)*, i8 (%union.tree_node*)*, i8 (i32, %union.tree_node*)*, i8 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i32 (%struct.ix86_args*, i32, %union.tree_node*, i8)*, i8* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, %struct.rtx_def* (%union.tree_node*, %union.tree_node*, i8)*, %struct.rtx_def* (i32, %struct.rtx_def*)*, %struct.rtx_def* ()*, void ()*, %struct.rtx_def* ()*, i8 ()*, %struct.rtx_def* (%union.tree_node*, i8)*, void (%struct.rtx_def*, %union.tree_node*, %struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)* }
%struct.ix86_args = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.secondary_reload_info = type { i32, i32, %struct.secondary_reload_info*, i32 }
%struct.c = type { i32 (i8)* }
%struct.cxx = type { %union.tree_node* ()*, i8 ()*, %union.tree_node* (%union.tree_node*)*, i8 ()*, i32 (%union.tree_node*, i32)*, i8 ()*, i8 ()*, void (%union.tree_node*)*, i8 ()*, i8 ()*, i8 ()*, i8 ()*, void (%union.tree_node*)* }
%struct.emutls = type { i8*, i8*, i8*, i8*, i8*, i8*, %union.tree_node* (%union.tree_node*, %union.tree_node**)*, %union.tree_node* (%union.tree_node*, %union.tree_node*, %union.tree_node*)*, i8, i8 }
%struct.target_option_hooks = type { i8 (%union.tree_node*, %union.tree_node*, %union.tree_node*, i32)*, void (%struct.cl_target_option*)*, void (%struct.cl_target_option*)*, void (%struct._IO_FILE*, i32, %struct.cl_target_option*)*, i8 (%union.tree_node*, %union.tree_node*)*, i8 (%union.tree_node*, %union.tree_node*)* }
%struct.cl_target_option = type { i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8 }
%struct.optab_d = type { i32, i8*, i8, void (%struct.optab_d*, i8*, i8, i32)*, [87 x %struct.optab_handlers] }
%struct.optab_handlers = type { i32 }
%struct.real_format = type { void (%struct.real_format*, i64*, %struct.real_value*)*, void (%struct.real_format*, %struct.real_value*, i64*)*, i32, i32, i32, i32, i32, i32, i32, i8, i8, i8, i8, i8, i8, i8, i8 }
%struct.real_value = type { i32, [3 x i64] }
%struct.ce_if_block = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, i32, i32, i32, i32, i32, i32, i32, i32 }
%struct.noce_if_info = type { %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.basic_block_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i8, i32 }
%struct.rtl_bb_info = type { %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32 }
%struct.edge_iterator = type { i32, %struct.VEC_edge_gc** }
%struct.VEC_int_heap = type { %struct.VEC_int_base }
%struct.VEC_int_base = type { i32, i32, [1 x i32] }
%struct.mem_attrs = type { %union.tree_node*, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i8 }
%struct.bitmap_iterator = type { %struct.bitmap_element_def*, %struct.bitmap_element_def*, i32, i64 }

@.str = private unnamed_addr constant [4 x i8] c"ce1\00", align 1
@pass_rtl_ifcvt = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i32 0, i32 0), i8 ()* @gate_handle_if_conversion, i32 ()* @rest_of_handle_if_conversion, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 141, i32 0, i32 0, i32 0, i32 0, i32 132097 } }, align 8, !dbg !0
@.str.1 = private unnamed_addr constant [4 x i8] c"ce2\00", align 1
@pass_if_after_combine = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i32 0, i32 0), i8 ()* @gate_handle_if_after_combine, i32 ()* @rest_of_handle_if_after_combine, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 141, i32 0, i32 0, i32 0, i32 0, i32 132099 } }, align 8, !dbg !3792
@.str.2 = private unnamed_addr constant [4 x i8] c"ce3\00", align 1
@pass_if_after_reload = dso_local global %struct.rtl_opt_pass { %struct.opt_pass { i32 1, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i8 ()* @gate_handle_if_after_reload, i32 ()* @rest_of_handle_if_after_reload, %struct.opt_pass* null, %struct.opt_pass* null, i32 0, i32 154, i32 0, i32 0, i32 0, i32 0, i32 132099 } }, align 8, !dbg !3820
@optimize = external dso_local global i32, align 4
@flag_if_conversion = external dso_local global i32, align 4
@dump_file = external dso_local global %struct._IO_FILE*, align 8
@dump_flags = external dso_local global i32, align 4
@num_possible_if_blocks = internal global i32 0, align 4, !dbg !3822
@num_updated_if_blocks = internal global i32 0, align 4, !dbg !3824
@num_true_changes = internal global i32 0, align 4, !dbg !3826
@cond_exec_changed_p = internal global i32 0, align 4, !dbg !3828
@.str.3 = private unnamed_addr constant [33 x i8] c"\0A\0A========== Pass %d ==========\0A\00", align 1
@cfun = external dso_local global %struct.function*, align 8
@.str.4 = private unnamed_addr constant [30 x i8] c"\0A\0A========== no more changes\0A\00", align 1
@max_regno = external dso_local global i32, align 4
@.str.5 = private unnamed_addr constant [34 x i8] c"\0A%d possible IF blocks searched.\0A\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"%d IF blocks converted.\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"%d true changes made.\0A\0A\0A\00", align 1
@df = external dso_local global %struct.df*, align 8
@reload_completed = external dso_local global i32, align 4
@targetm = external dso_local global %struct.gcc_target, align 8
@optab_table = external dso_local global [159 x %struct.optab_d], align 16
@word_mode = external dso_local global i32, align 4
@.str.8 = private unnamed_addr constant [34 x i8] c"Conversion succeeded on pass %d.\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"ifcvt.c\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.11 = private unnamed_addr constant [55 x i8] c"\0AIF-THEN%s-JOIN block found, pass %d, test %d, then %d\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"-ELSE\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.14 = private unnamed_addr constant [10 x i8] c", else %d\00", align 1
@.str.15 = private unnamed_addr constant [11 x i8] c", join %d\0A\00", align 1
@ix86_branch_cost = external dso_local global i32, align 4
@.str.16 = private unnamed_addr constant [16 x i8] c"./basic-block.h\00", align 1
@mode_class = external dso_local constant [87 x i8], align 16
@real_format_for_mode = external dso_local global [7 x %struct.real_format*], align 16
@mode_inner = external dso_local constant [87 x i8], align 16
@flag_finite_math_only = external dso_local global i32, align 4
@flag_signed_zeros = external dso_local global i32, align 4
@const_int_rtx = external dso_local global [129 x %struct.rtx_def*], align 16
@mode_mask_array = external dso_local constant [87 x i64], align 16
@const_tiny_rtx = external dso_local global [3 x [87 x %struct.rtx_def*]], align 16
@rtx_class = external dso_local constant [139 x i32], align 16
@cse_not_expected = external dso_local global i32, align 4
@code_to_optab = external dso_local global [140 x %struct.optab_d*], align 16
@mode_size = external dso_local global [87 x i8], align 16
@epilogue_completed = external dso_local global i32, align 4
@.str.17 = private unnamed_addr constant [72 x i8] c"\0AIF-THEN%s block found, pass %d, start block %d [insn %d], then %d [%d]\00", align 1
@.str.18 = private unnamed_addr constant [15 x i8] c", else %d [%d]\00", align 1
@.str.19 = private unnamed_addr constant [15 x i8] c", join %d [%d]\00", align 1
@.str.20 = private unnamed_addr constant [34 x i8] c", %d %s block%s last test %d [%d]\00", align 1
@.str.21 = private unnamed_addr constant [3 x i8] c"&&\00", align 1
@.str.22 = private unnamed_addr constant [3 x i8] c"||\00", align 1
@.str.23 = private unnamed_addr constant [2 x i8] c"s\00", align 1
@.str.24 = private unnamed_addr constant [47 x i8] c"%d insn%s converted to conditional execution.\0A\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c" was\00", align 1
@.str.26 = private unnamed_addr constant [7 x i8] c"s were\00", align 1
@const_true_rtx = external dso_local global %struct.rtx_def*, align 8
@.str.27 = private unnamed_addr constant [41 x i8] c"\0ATRAP-IF block found, start %d, trap %d\0A\00", align 1
@.str.28 = private unnamed_addr constant [37 x i8] c"\0AIF-CASE-1 found, start %d, then %d\0A\00", align 1
@reg_obstack = external dso_local global %struct.bitmap_obstack, align 8
@fixed_regs = external dso_local global [53 x i8], align 16
@global_regs = external dso_local global [53 x i8], align 16
@bitmap_zero_bits = external dso_local global %struct.bitmap_element_def, align 8
@.str.29 = private unnamed_addr constant [37 x i8] c"\0AIF-CASE-2 found, start %d, else %d\0A\00", align 1
@flag_if_conversion2 = external dso_local global i32, align 4

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_if_conversion() #0 !dbg !3834 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3836
  %cmp = icmp sgt i32 %0, 0, !dbg !3837
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !3838

land.rhs:                                         ; preds = %entry
  %call = call zeroext i8 @dbg_cnt(i32 18), !dbg !3839
  %conv = zext i8 %call to i32, !dbg !3839
  %tobool = icmp ne i32 %conv, 0, !dbg !3838
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %1 = phi i1 [ false, %entry ], [ %tobool, %land.rhs ], !dbg !3840
  %land.ext = zext i1 %1 to i32, !dbg !3838
  %conv1 = trunc i32 %land.ext to i8, !dbg !3841
  ret i8 %conv1, !dbg !3842
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_if_conversion() #0 !dbg !3843 {
entry:
  %0 = load i32, i32* @flag_if_conversion, align 4, !dbg !3844
  %tobool = icmp ne i32 %0, 0, !dbg !3844
  br i1 %tobool, label %if.then, label %if.end3, !dbg !3846

if.then:                                          ; preds = %entry
  %1 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3847
  %tobool1 = icmp ne %struct._IO_FILE* %1, null, !dbg !3847
  br i1 %tobool1, label %if.then2, label %if.end, !dbg !3850

if.then2:                                         ; preds = %if.then
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3851
  %3 = load i32, i32* @dump_flags, align 4, !dbg !3852
  call void @dump_flow_info(%struct._IO_FILE* %2, i32 %3), !dbg !3853
  br label %if.end, !dbg !3853

if.end:                                           ; preds = %if.then2, %if.then
  %call = call zeroext i8 @cleanup_cfg(i32 1), !dbg !3854
  call void @if_convert(), !dbg !3855
  br label %if.end3, !dbg !3856

if.end3:                                          ; preds = %if.end, %entry
  %call4 = call zeroext i8 @cleanup_cfg(i32 0), !dbg !3857
  ret i32 0, !dbg !3858
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_if_after_combine() #0 !dbg !3859 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3860
  %cmp = icmp sgt i32 %0, 0, !dbg !3861
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3862

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_if_conversion, align 4, !dbg !3863
  %tobool = icmp ne i32 %1, 0, !dbg !3863
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3864

land.rhs:                                         ; preds = %land.lhs.true
  %call = call zeroext i8 @dbg_cnt(i32 19), !dbg !3865
  %conv = zext i8 %call to i32, !dbg !3865
  %tobool1 = icmp ne i32 %conv, 0, !dbg !3864
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %2 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !3866
  %land.ext = zext i1 %2 to i32, !dbg !3864
  %conv2 = trunc i32 %land.ext to i8, !dbg !3860
  ret i8 %conv2, !dbg !3867
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_if_after_combine() #0 !dbg !3868 {
entry:
  call void @if_convert(), !dbg !3869
  ret i32 0, !dbg !3870
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @gate_handle_if_after_reload() #0 !dbg !3871 {
entry:
  %0 = load i32, i32* @optimize, align 4, !dbg !3872
  %cmp = icmp sgt i32 %0, 0, !dbg !3873
  br i1 %cmp, label %land.lhs.true, label %land.end, !dbg !3874

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* @flag_if_conversion2, align 4, !dbg !3875
  %tobool = icmp ne i32 %1, 0, !dbg !3875
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !3876

land.rhs:                                         ; preds = %land.lhs.true
  %call = call zeroext i8 @dbg_cnt(i32 20), !dbg !3877
  %conv = zext i8 %call to i32, !dbg !3877
  %tobool1 = icmp ne i32 %conv, 0, !dbg !3876
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %2 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %tobool1, %land.rhs ], !dbg !3878
  %land.ext = zext i1 %2 to i32, !dbg !3876
  %conv2 = trunc i32 %land.ext to i8, !dbg !3872
  ret i8 %conv2, !dbg !3879
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rest_of_handle_if_after_reload() #0 !dbg !3880 {
entry:
  call void @if_convert(), !dbg !3881
  ret i32 0, !dbg !3882
}

declare dso_local zeroext i8 @dbg_cnt(i32) #1

declare dso_local void @dump_flow_info(%struct._IO_FILE*, i32) #1

declare dso_local zeroext i8 @cleanup_cfg(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @if_convert() #0 !dbg !3883 {
entry:
  %bb = alloca %struct.basic_block_def*, align 8
  %pass = alloca i32, align 4
  %new_bb = alloca %struct.basic_block_def*, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !3886, metadata !DIExpression()), !dbg !3887
  call void @llvm.dbg.declare(metadata i32* %pass, metadata !3888, metadata !DIExpression()), !dbg !3889
  %0 = load i32, i32* @optimize, align 4, !dbg !3890
  %cmp = icmp eq i32 %0, 1, !dbg !3892
  br i1 %cmp, label %if.then, label %if.end, !dbg !3893

if.then:                                          ; preds = %entry
  call void @df_live_add_problem(), !dbg !3894
  call void @df_live_set_all_dirty(), !dbg !3896
  br label %if.end, !dbg !3897

if.end:                                           ; preds = %if.then, %entry
  store i32 0, i32* @num_possible_if_blocks, align 4, !dbg !3898
  store i32 0, i32* @num_updated_if_blocks, align 4, !dbg !3899
  store i32 0, i32* @num_true_changes, align 4, !dbg !3900
  call void @loop_optimizer_init(i32 16), !dbg !3901
  call void @mark_loop_exit_edges(), !dbg !3902
  call void @loop_optimizer_finalize(), !dbg !3903
  call void @free_dominance_info(i32 1), !dbg !3904
  call void @calculate_dominance_info(i32 2), !dbg !3905
  %call = call i32 @df_set_flags(i32 1), !dbg !3906
  store i32 0, i32* %pass, align 4, !dbg !3907
  br label %do.body, !dbg !3908

do.body:                                          ; preds = %do.cond, %if.end
  call void @df_analyze(), !dbg !3909
  %call1 = call i32 @df_clear_flags(i32 1), !dbg !3911
  store i32 0, i32* @cond_exec_changed_p, align 4, !dbg !3912
  %1 = load i32, i32* %pass, align 4, !dbg !3913
  %inc = add nsw i32 %1, 1, !dbg !3913
  store i32 %inc, i32* %pass, align 4, !dbg !3913
  %2 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3914
  %tobool = icmp ne %struct._IO_FILE* %2, null, !dbg !3914
  br i1 %tobool, label %land.lhs.true, label %if.end5, !dbg !3916

land.lhs.true:                                    ; preds = %do.body
  %3 = load i32, i32* %pass, align 4, !dbg !3917
  %cmp2 = icmp sgt i32 %3, 1, !dbg !3918
  br i1 %cmp2, label %if.then3, label %if.end5, !dbg !3919

if.then3:                                         ; preds = %land.lhs.true
  %4 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3920
  %5 = load i32, i32* %pass, align 4, !dbg !3921
  %call4 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %4, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i32 %5), !dbg !3922
  br label %if.end5, !dbg !3922

if.end5:                                          ; preds = %if.then3, %land.lhs.true, %do.body
  %6 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3923
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %6, i64 0, !dbg !3923
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !3923
  %7 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !3923
  %x_entry_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %7, i32 0, i32 0, !dbg !3923
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %x_entry_block_ptr, align 8, !dbg !3923
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 6, !dbg !3923
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !3923
  store %struct.basic_block_def* %9, %struct.basic_block_def** %bb, align 8, !dbg !3923
  br label %for.cond, !dbg !3923

for.cond:                                         ; preds = %for.inc, %if.end5
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3925
  %11 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !3925
  %add.ptr6 = getelementptr inbounds %struct.function, %struct.function* %11, i64 0, !dbg !3925
  %cfg7 = getelementptr inbounds %struct.function, %struct.function* %add.ptr6, i32 0, i32 1, !dbg !3925
  %12 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg7, align 8, !dbg !3925
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %12, i32 0, i32 1, !dbg !3925
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !3925
  %cmp8 = icmp ne %struct.basic_block_def* %10, %13, !dbg !3925
  br i1 %cmp8, label %for.body, label %for.end, !dbg !3923

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !3927, metadata !DIExpression()), !dbg !3929
  br label %while.cond, !dbg !3930

while.cond:                                       ; preds = %while.body, %for.body
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3931
  %call9 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %14), !dbg !3932
  %tobool10 = icmp ne i8 %call9, 0, !dbg !3932
  br i1 %tobool10, label %land.end, label %land.rhs, !dbg !3933

land.rhs:                                         ; preds = %while.cond
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3934
  %16 = load i32, i32* %pass, align 4, !dbg !3935
  %call11 = call %struct.basic_block_def* @find_if_header(%struct.basic_block_def* %15, i32 %16), !dbg !3936
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %new_bb, align 8, !dbg !3937
  %cmp12 = icmp ne %struct.basic_block_def* %call11, null, !dbg !3938
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %17 = phi i1 [ false, %while.cond ], [ %cmp12, %land.rhs ], !dbg !3939
  br i1 %17, label %while.body, label %while.end, !dbg !3930

while.body:                                       ; preds = %land.end
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !3940
  store %struct.basic_block_def* %18, %struct.basic_block_def** %bb, align 8, !dbg !3941
  br label %while.cond, !dbg !3930, !llvm.loop !3942

while.end:                                        ; preds = %land.end
  br label %for.inc, !dbg !3943

for.inc:                                          ; preds = %while.end
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !3925
  %next_bb13 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 6, !dbg !3925
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb13, align 8, !dbg !3925
  store %struct.basic_block_def* %20, %struct.basic_block_def** %bb, align 8, !dbg !3925
  br label %for.cond, !dbg !3925, !llvm.loop !3944

for.end:                                          ; preds = %for.cond
  %21 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3946
  %tobool14 = icmp ne %struct._IO_FILE* %21, null, !dbg !3946
  br i1 %tobool14, label %land.lhs.true15, label %if.end23, !dbg !3948

land.lhs.true15:                                  ; preds = %for.end
  %22 = load i32, i32* @cond_exec_changed_p, align 4, !dbg !3949
  %tobool16 = icmp ne i32 %22, 0, !dbg !3949
  br i1 %tobool16, label %if.then17, label %if.end23, !dbg !3950

if.then17:                                        ; preds = %land.lhs.true15
  %23 = load i32, i32* @dump_flags, align 4, !dbg !3951
  %and = and i32 %23, 2, !dbg !3954
  %tobool18 = icmp ne i32 %and, 0, !dbg !3954
  br i1 %tobool18, label %if.then19, label %if.else, !dbg !3955

if.then19:                                        ; preds = %if.then17
  %24 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3956
  %call20 = call %struct.rtx_def* @get_insns(), !dbg !3957
  %25 = load i32, i32* @dump_flags, align 4, !dbg !3958
  call void @print_rtl_slim_with_bb(%struct._IO_FILE* %24, %struct.rtx_def* %call20, i32 %25), !dbg !3959
  br label %if.end22, !dbg !3959

if.else:                                          ; preds = %if.then17
  %26 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3960
  %call21 = call %struct.rtx_def* @get_insns(), !dbg !3961
  call void @print_rtl_with_bb(%struct._IO_FILE* %26, %struct.rtx_def* %call21), !dbg !3962
  br label %if.end22

if.end22:                                         ; preds = %if.else, %if.then19
  br label %if.end23, !dbg !3963

if.end23:                                         ; preds = %if.end22, %land.lhs.true15, %for.end
  br label %do.cond, !dbg !3964

do.cond:                                          ; preds = %if.end23
  %27 = load i32, i32* @cond_exec_changed_p, align 4, !dbg !3965
  %tobool24 = icmp ne i32 %27, 0, !dbg !3964
  br i1 %tobool24, label %do.body, label %do.end, !dbg !3964, !llvm.loop !3966

do.end:                                           ; preds = %do.cond
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3968
  %tobool25 = icmp ne %struct._IO_FILE* %28, null, !dbg !3968
  br i1 %tobool25, label %if.then26, label %if.end28, !dbg !3970

if.then26:                                        ; preds = %do.end
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3971
  %call27 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0)), !dbg !3972
  br label %if.end28, !dbg !3972

if.end28:                                         ; preds = %if.then26, %do.end
  call void @free_dominance_info(i32 2), !dbg !3973
  %30 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3974
  %tobool29 = icmp ne %struct._IO_FILE* %30, null, !dbg !3974
  br i1 %tobool29, label %if.then30, label %if.end32, !dbg !3976

if.then30:                                        ; preds = %if.end28
  %31 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3977
  %call31 = call i32 @fflush(%struct._IO_FILE* %31), !dbg !3978
  br label %if.end32, !dbg !3978

if.end32:                                         ; preds = %if.then30, %if.end28
  call void @clear_aux_for_blocks(), !dbg !3979
  %32 = load i32, i32* @max_regno, align 4, !dbg !3980
  %call33 = call i32 @max_reg_num(), !dbg !3982
  %cmp34 = icmp slt i32 %32, %call33, !dbg !3983
  br i1 %cmp34, label %if.then35, label %if.end37, !dbg !3984

if.then35:                                        ; preds = %if.end32
  %call36 = call i32 @max_reg_num(), !dbg !3985
  store i32 %call36, i32* @max_regno, align 4, !dbg !3986
  br label %if.end37, !dbg !3987

if.end37:                                         ; preds = %if.then35, %if.end32
  %33 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3988
  %tobool38 = icmp ne %struct._IO_FILE* %33, null, !dbg !3988
  br i1 %tobool38, label %land.lhs.true39, label %if.end45, !dbg !3990

land.lhs.true39:                                  ; preds = %if.end37
  %34 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !3991
  %cmp40 = icmp sgt i32 %34, 0, !dbg !3992
  br i1 %cmp40, label %if.then41, label %if.end45, !dbg !3993

if.then41:                                        ; preds = %land.lhs.true39
  %35 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3994
  %36 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !3996
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %35, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0), i32 %36), !dbg !3997
  %37 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !3998
  %38 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !3999
  %call43 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %37, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0), i32 %38), !dbg !4000
  %39 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4001
  %40 = load i32, i32* @num_true_changes, align 4, !dbg !4002
  %call44 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %39, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 %40), !dbg !4003
  br label %if.end45, !dbg !4004

if.end45:                                         ; preds = %if.then41, %land.lhs.true39, %if.end37
  %41 = load i32, i32* @optimize, align 4, !dbg !4005
  %cmp46 = icmp eq i32 %41, 1, !dbg !4007
  br i1 %cmp46, label %if.then47, label %if.end48, !dbg !4008

if.then47:                                        ; preds = %if.end45
  %42 = load %struct.df*, %struct.df** @df, align 8, !dbg !4009
  %problems_by_index = getelementptr inbounds %struct.df, %struct.df* %42, i32 0, i32 1, !dbg !4009
  %arrayidx = getelementptr inbounds [8 x %struct.dataflow*], [8 x %struct.dataflow*]* %problems_by_index, i64 0, i64 2, !dbg !4009
  %43 = load %struct.dataflow*, %struct.dataflow** %arrayidx, align 8, !dbg !4009
  call void @df_remove_problem(%struct.dataflow* %43), !dbg !4010
  br label %if.end48, !dbg !4010

if.end48:                                         ; preds = %if.then47, %if.end45
  ret void, !dbg !4011
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.declare(metadata, metadata, metadata) #2

declare dso_local void @df_live_add_problem() #1

declare dso_local void @df_live_set_all_dirty() #1

declare dso_local void @loop_optimizer_init(i32) #1

declare dso_local void @mark_loop_exit_edges() #1

declare dso_local void @loop_optimizer_finalize() #1

declare dso_local void @free_dominance_info(i32) #1

declare dso_local void @calculate_dominance_info(i32) #1

declare dso_local i32 @df_set_flags(i32) #1

declare dso_local void @df_analyze() #1

declare dso_local i32 @df_clear_flags(i32) #1

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare dso_local zeroext i8 @df_get_bb_dirty(%struct.basic_block_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @find_if_header(%struct.basic_block_def* %test_bb, i32 %pass) #0 !dbg !4012 {
entry:
  %retval = alloca %struct.basic_block_def*, align 8
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %pass.addr = alloca i32, align 4
  %ce_info = alloca %struct.ce_if_block, align 8
  %then_edge = alloca %struct.edge_def*, align 8
  %else_edge = alloca %struct.edge_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !4015, metadata !DIExpression()), !dbg !4016
  store i32 %pass, i32* %pass.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pass.addr, metadata !4017, metadata !DIExpression()), !dbg !4018
  call void @llvm.dbg.declare(metadata %struct.ce_if_block* %ce_info, metadata !4019, metadata !DIExpression()), !dbg !4036
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge, metadata !4037, metadata !DIExpression()), !dbg !4038
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_edge, metadata !4039, metadata !DIExpression()), !dbg !4040
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4041
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !4041
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4041
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !4041
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4041

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4041
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !4041
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !4041
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !4041
  br label %cond.end, !dbg !4041

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4041

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !4041
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !4041
  %cmp = icmp ne i32 %call, 2, !dbg !4043
  br i1 %cmp, label %if.then, label %if.end, !dbg !4044

if.then:                                          ; preds = %cond.end
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4045
  br label %return, !dbg !4045

if.end:                                           ; preds = %cond.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4046
  %succs2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !4046
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs2, align 8, !dbg !4046
  %tobool3 = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !4046
  br i1 %tobool3, label %cond.true4, label %cond.false7, !dbg !4046

cond.true4:                                       ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4046
  %succs5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !4046
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs5, align 8, !dbg !4046
  %base6 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !4046
  br label %cond.end8, !dbg !4046

cond.false7:                                      ; preds = %if.end
  br label %cond.end8, !dbg !4046

cond.end8:                                        ; preds = %cond.false7, %cond.true4
  %cond9 = phi %struct.VEC_edge_base* [ %base6, %cond.true4 ], [ null, %cond.false7 ], !dbg !4046
  %call10 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond9, i32 0), !dbg !4046
  store %struct.edge_def* %call10, %struct.edge_def** %then_edge, align 8, !dbg !4047
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4048
  %succs11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %8, i32 0, i32 1, !dbg !4048
  %9 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs11, align 8, !dbg !4048
  %tobool12 = icmp ne %struct.VEC_edge_gc* %9, null, !dbg !4048
  br i1 %tobool12, label %cond.true13, label %cond.false16, !dbg !4048

cond.true13:                                      ; preds = %cond.end8
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4048
  %succs14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 1, !dbg !4048
  %11 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs14, align 8, !dbg !4048
  %base15 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %11, i32 0, i32 0, !dbg !4048
  br label %cond.end17, !dbg !4048

cond.false16:                                     ; preds = %cond.end8
  br label %cond.end17, !dbg !4048

cond.end17:                                       ; preds = %cond.false16, %cond.true13
  %cond18 = phi %struct.VEC_edge_base* [ %base15, %cond.true13 ], [ null, %cond.false16 ], !dbg !4048
  %call19 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond18, i32 1), !dbg !4048
  store %struct.edge_def* %call19, %struct.edge_def** %else_edge, align 8, !dbg !4049
  %12 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4050
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %12, i32 0, i32 1, !dbg !4052
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4052
  %call20 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %13), !dbg !4053
  %tobool21 = icmp ne i8 %call20, 0, !dbg !4053
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !4054

if.then22:                                        ; preds = %cond.end17
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4055
  br label %return, !dbg !4055

if.end23:                                         ; preds = %cond.end17
  %14 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4056
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %14, i32 0, i32 1, !dbg !4058
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !4058
  %call25 = call zeroext i8 @df_get_bb_dirty(%struct.basic_block_def* %15), !dbg !4059
  %tobool26 = icmp ne i8 %call25, 0, !dbg !4059
  br i1 %tobool26, label %if.then27, label %if.end28, !dbg !4060

if.then27:                                        ; preds = %if.end23
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4061
  br label %return, !dbg !4061

if.end28:                                         ; preds = %if.end23
  %16 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4062
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 7, !dbg !4064
  %17 = load i32, i32* %flags, align 8, !dbg !4064
  %and = and i32 %17, 14, !dbg !4065
  %tobool29 = icmp ne i32 %and, 0, !dbg !4065
  br i1 %tobool29, label %if.then33, label %lor.lhs.false, !dbg !4066

lor.lhs.false:                                    ; preds = %if.end28
  %18 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4067
  %flags30 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 7, !dbg !4068
  %19 = load i32, i32* %flags30, align 8, !dbg !4068
  %and31 = and i32 %19, 14, !dbg !4069
  %tobool32 = icmp ne i32 %and31, 0, !dbg !4069
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !4070

if.then33:                                        ; preds = %lor.lhs.false, %if.end28
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4071
  br label %return, !dbg !4071

if.end34:                                         ; preds = %lor.lhs.false
  %20 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4072
  %flags35 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 7, !dbg !4074
  %21 = load i32, i32* %flags35, align 8, !dbg !4074
  %and36 = and i32 %21, 512, !dbg !4075
  %tobool37 = icmp ne i32 %and36, 0, !dbg !4075
  br i1 %tobool37, label %if.then42, label %lor.lhs.false38, !dbg !4076

lor.lhs.false38:                                  ; preds = %if.end34
  %22 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4077
  %flags39 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 7, !dbg !4078
  %23 = load i32, i32* %flags39, align 8, !dbg !4078
  %and40 = and i32 %23, 512, !dbg !4079
  %tobool41 = icmp ne i32 %and40, 0, !dbg !4079
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !4080

if.then42:                                        ; preds = %lor.lhs.false38, %if.end34
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4081
  br label %return, !dbg !4081

if.end43:                                         ; preds = %lor.lhs.false38
  %24 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4082
  %flags44 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 7, !dbg !4084
  %25 = load i32, i32* %flags44, align 8, !dbg !4084
  %and45 = and i32 %25, 1, !dbg !4085
  %tobool46 = icmp ne i32 %and45, 0, !dbg !4085
  br i1 %tobool46, label %if.then47, label %if.else, !dbg !4086

if.then47:                                        ; preds = %if.end43
  br label %if.end54, !dbg !4086

if.else:                                          ; preds = %if.end43
  %26 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4087
  %flags48 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 7, !dbg !4089
  %27 = load i32, i32* %flags48, align 8, !dbg !4089
  %and49 = and i32 %27, 1, !dbg !4090
  %tobool50 = icmp ne i32 %and49, 0, !dbg !4090
  br i1 %tobool50, label %if.then51, label %if.else52, !dbg !4091

if.then51:                                        ; preds = %if.else
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !4092, metadata !DIExpression()), !dbg !4094
  %28 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4095
  store %struct.edge_def* %28, %struct.edge_def** %e, align 8, !dbg !4094
  %29 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4096
  store %struct.edge_def* %29, %struct.edge_def** %else_edge, align 8, !dbg !4097
  %30 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !4098
  store %struct.edge_def* %30, %struct.edge_def** %then_edge, align 8, !dbg !4099
  br label %if.end53, !dbg !4100

if.else52:                                        ; preds = %if.else
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4101
  br label %return, !dbg !4101

if.end53:                                         ; preds = %if.then51
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then47
  %31 = bitcast %struct.ce_if_block* %ce_info to i8*, !dbg !4102
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 72, i1 false), !dbg !4102
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4103
  %test_bb55 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %ce_info, i32 0, i32 0, !dbg !4104
  store %struct.basic_block_def* %32, %struct.basic_block_def** %test_bb55, align 8, !dbg !4105
  %33 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4106
  %dest56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %33, i32 0, i32 1, !dbg !4107
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %dest56, align 8, !dbg !4107
  %then_bb = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %ce_info, i32 0, i32 1, !dbg !4108
  store %struct.basic_block_def* %34, %struct.basic_block_def** %then_bb, align 8, !dbg !4109
  %35 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4110
  %dest57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 1, !dbg !4111
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %dest57, align 8, !dbg !4111
  %else_bb = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %ce_info, i32 0, i32 2, !dbg !4112
  store %struct.basic_block_def* %36, %struct.basic_block_def** %else_bb, align 8, !dbg !4113
  %37 = load i32, i32* %pass.addr, align 4, !dbg !4114
  %pass58 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %ce_info, i32 0, i32 12, !dbg !4115
  store i32 %37, i32* %pass58, align 4, !dbg !4116
  %38 = load i32, i32* @reload_completed, align 4, !dbg !4117
  %tobool59 = icmp ne i32 %38, 0, !dbg !4117
  br i1 %tobool59, label %if.end63, label %land.lhs.true, !dbg !4119

land.lhs.true:                                    ; preds = %if.end54
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4120
  %40 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4121
  %41 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4122
  %42 = load i32, i32* %pass.addr, align 4, !dbg !4123
  %call60 = call i32 @noce_find_if_block(%struct.basic_block_def* %39, %struct.edge_def* %40, %struct.edge_def* %41, i32 %42), !dbg !4124
  %tobool61 = icmp ne i32 %call60, 0, !dbg !4124
  br i1 %tobool61, label %if.then62, label %if.end63, !dbg !4125

if.then62:                                        ; preds = %land.lhs.true
  br label %success, !dbg !4126

if.end63:                                         ; preds = %land.lhs.true, %if.end54
  %43 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !4127
  %call64 = call zeroext i8 %43(), !dbg !4129
  %conv = zext i8 %call64 to i32, !dbg !4129
  %tobool65 = icmp ne i32 %conv, 0, !dbg !4129
  br i1 %tobool65, label %land.lhs.true66, label %if.end72, !dbg !4130

land.lhs.true66:                                  ; preds = %if.end63
  %44 = load i32, i32* @reload_completed, align 4, !dbg !4131
  %tobool67 = icmp ne i32 %44, 0, !dbg !4131
  br i1 %tobool67, label %land.lhs.true68, label %if.end72, !dbg !4132

land.lhs.true68:                                  ; preds = %land.lhs.true66
  %call69 = call i32 @cond_exec_find_if_block(%struct.ce_if_block* %ce_info), !dbg !4133
  %tobool70 = icmp ne i32 %call69, 0, !dbg !4133
  br i1 %tobool70, label %if.then71, label %if.end72, !dbg !4134

if.then71:                                        ; preds = %land.lhs.true68
  br label %success, !dbg !4135

if.end72:                                         ; preds = %land.lhs.true68, %land.lhs.true66, %if.end63
  %45 = load i32, i32* @word_mode, align 4, !dbg !4136
  %idxprom = sext i32 %45 to i64, !dbg !4136
  %arrayidx = getelementptr inbounds [87 x %struct.optab_handlers], [87 x %struct.optab_handlers]* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 118, i32 4), i64 0, i64 %idxprom, !dbg !4136
  %insn_code = getelementptr inbounds %struct.optab_handlers, %struct.optab_handlers* %arrayidx, i32 0, i32 0, !dbg !4138
  %46 = load i32, i32* %insn_code, align 4, !dbg !4138
  %cmp73 = icmp ne i32 %46, 2956, !dbg !4139
  br i1 %cmp73, label %land.lhs.true75, label %if.end79, !dbg !4140

land.lhs.true75:                                  ; preds = %if.end72
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4141
  %48 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4142
  %49 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4143
  %call76 = call i32 @find_cond_trap(%struct.basic_block_def* %47, %struct.edge_def* %48, %struct.edge_def* %49), !dbg !4144
  %tobool77 = icmp ne i32 %call76, 0, !dbg !4144
  br i1 %tobool77, label %if.then78, label %if.end79, !dbg !4145

if.then78:                                        ; preds = %land.lhs.true75
  br label %success, !dbg !4146

if.end79:                                         ; preds = %land.lhs.true75, %if.end72
  %call80 = call i32 @dom_info_state(i32 2), !dbg !4147
  %cmp81 = icmp uge i32 %call80, 1, !dbg !4149
  br i1 %cmp81, label %land.lhs.true83, label %if.end97, !dbg !4150

land.lhs.true83:                                  ; preds = %if.end79
  %50 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !4151
  %call84 = call zeroext i8 %50(), !dbg !4152
  %tobool85 = icmp ne i8 %call84, 0, !dbg !4152
  br i1 %tobool85, label %lor.lhs.false86, label %if.then88, !dbg !4153

lor.lhs.false86:                                  ; preds = %land.lhs.true83
  %51 = load i32, i32* @reload_completed, align 4, !dbg !4154
  %tobool87 = icmp ne i32 %51, 0, !dbg !4154
  br i1 %tobool87, label %if.then88, label %if.end97, !dbg !4155

if.then88:                                        ; preds = %lor.lhs.false86, %land.lhs.true83
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4156
  %53 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4159
  %54 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4160
  %call89 = call i32 @find_if_case_1(%struct.basic_block_def* %52, %struct.edge_def* %53, %struct.edge_def* %54), !dbg !4161
  %tobool90 = icmp ne i32 %call89, 0, !dbg !4161
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !4162

if.then91:                                        ; preds = %if.then88
  br label %success, !dbg !4163

if.end92:                                         ; preds = %if.then88
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4164
  %56 = load %struct.edge_def*, %struct.edge_def** %then_edge, align 8, !dbg !4166
  %57 = load %struct.edge_def*, %struct.edge_def** %else_edge, align 8, !dbg !4167
  %call93 = call i32 @find_if_case_2(%struct.basic_block_def* %55, %struct.edge_def* %56, %struct.edge_def* %57), !dbg !4168
  %tobool94 = icmp ne i32 %call93, 0, !dbg !4168
  br i1 %tobool94, label %if.then95, label %if.end96, !dbg !4169

if.then95:                                        ; preds = %if.end92
  br label %success, !dbg !4170

if.end96:                                         ; preds = %if.end92
  br label %if.end97, !dbg !4171

if.end97:                                         ; preds = %if.end96, %lor.lhs.false86, %if.end79
  store %struct.basic_block_def* null, %struct.basic_block_def** %retval, align 8, !dbg !4172
  br label %return, !dbg !4172

success:                                          ; preds = %if.then95, %if.then91, %if.then78, %if.then71, %if.then62
  call void @llvm.dbg.label(metadata !4173), !dbg !4174
  %58 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4175
  %tobool98 = icmp ne %struct._IO_FILE* %58, null, !dbg !4175
  br i1 %tobool98, label %if.then99, label %if.end101, !dbg !4177

if.then99:                                        ; preds = %success
  %59 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4178
  %60 = load i32, i32* %pass.addr, align 4, !dbg !4179
  %call100 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %59, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.8, i64 0, i64 0), i32 %60), !dbg !4180
  br label %if.end101, !dbg !4180

if.end101:                                        ; preds = %if.then99, %success
  store i32 1, i32* @cond_exec_changed_p, align 4, !dbg !4181
  %test_bb102 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %ce_info, i32 0, i32 0, !dbg !4182
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb102, align 8, !dbg !4182
  store %struct.basic_block_def* %61, %struct.basic_block_def** %retval, align 8, !dbg !4183
  br label %return, !dbg !4183

return:                                           ; preds = %if.end101, %if.end97, %if.else52, %if.then42, %if.then33, %if.then27, %if.then22, %if.then
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %retval, align 8, !dbg !4184
  ret %struct.basic_block_def* %62, !dbg !4184
}

declare dso_local void @print_rtl_slim_with_bb(%struct._IO_FILE*, %struct.rtx_def*, i32) #1

declare dso_local %struct.rtx_def* @get_insns() #1

declare dso_local void @print_rtl_with_bb(%struct._IO_FILE*, %struct.rtx_def*) #1

declare dso_local i32 @fflush(%struct._IO_FILE*) #1

declare dso_local void @clear_aux_for_blocks() #1

declare dso_local i32 @max_reg_num() #1

declare dso_local void @df_remove_problem(%struct.dataflow*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_edge_base_length(%struct.VEC_edge_base* %vec_) #0 !dbg !4185 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4190, metadata !DIExpression()), !dbg !4191
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4191
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4191
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4191

cond.true:                                        ; preds = %entry
  %1 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4191
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %1, i32 0, i32 0, !dbg !4191
  %2 = load i32, i32* %num, align 8, !dbg !4191
  br label %cond.end, !dbg !4191

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4191

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %2, %cond.true ], [ 0, %cond.false ], !dbg !4191
  ret i32 %cond, !dbg !4191
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %vec_, i32 %ix_) #0 !dbg !4192 {
entry:
  %vec_.addr = alloca %struct.VEC_edge_base*, align 8
  %ix_.addr = alloca i32, align 4
  store %struct.VEC_edge_base* %vec_, %struct.VEC_edge_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_base** %vec_.addr, metadata !4195, metadata !DIExpression()), !dbg !4196
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !4197, metadata !DIExpression()), !dbg !4196
  %0 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4196
  %tobool = icmp ne %struct.VEC_edge_base* %0, null, !dbg !4196
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !4196

land.rhs:                                         ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !4196
  %2 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4196
  %num = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %2, i32 0, i32 0, !dbg !4196
  %3 = load i32, i32* %num, align 8, !dbg !4196
  %cmp = icmp ult i32 %1, %3, !dbg !4196
  br label %land.end

land.end:                                         ; preds = %land.rhs, %entry
  %4 = phi i1 [ false, %entry ], [ %cmp, %land.rhs ], !dbg !4198
  %land.ext = zext i1 %4 to i32, !dbg !4196
  %5 = load %struct.VEC_edge_base*, %struct.VEC_edge_base** %vec_.addr, align 8, !dbg !4196
  %vec = getelementptr inbounds %struct.VEC_edge_base, %struct.VEC_edge_base* %5, i32 0, i32 2, !dbg !4196
  %6 = load i32, i32* %ix_.addr, align 4, !dbg !4196
  %idxprom = zext i32 %6 to i64, !dbg !4196
  %arrayidx = getelementptr inbounds [1 x %struct.edge_def*], [1 x %struct.edge_def*]* %vec, i64 0, i64 %idxprom, !dbg !4196
  %7 = load %struct.edge_def*, %struct.edge_def** %arrayidx, align 8, !dbg !4196
  ret %struct.edge_def* %7, !dbg !4196
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_find_if_block(%struct.basic_block_def* %test_bb, %struct.edge_def* %then_edge, %struct.edge_def* %else_edge, i32 %pass) #0 !dbg !4199 {
entry:
  %retval = alloca i32, align 4
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %then_edge.addr = alloca %struct.edge_def*, align 8
  %else_edge.addr = alloca %struct.edge_def*, align 8
  %pass.addr = alloca i32, align 4
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %then_else_reversed = alloca i8, align 1
  %jump = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %cond_earliest = alloca %struct.rtx_def*, align 8
  %if_info = alloca %struct.noce_if_info, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !4202, metadata !DIExpression()), !dbg !4203
  store %struct.edge_def* %then_edge, %struct.edge_def** %then_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge.addr, metadata !4204, metadata !DIExpression()), !dbg !4205
  store %struct.edge_def* %else_edge, %struct.edge_def** %else_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_edge.addr, metadata !4206, metadata !DIExpression()), !dbg !4207
  store i32 %pass, i32* %pass.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %pass.addr, metadata !4208, metadata !DIExpression()), !dbg !4209
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !4210, metadata !DIExpression()), !dbg !4211
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !4212, metadata !DIExpression()), !dbg !4213
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !4214, metadata !DIExpression()), !dbg !4215
  call void @llvm.dbg.declare(metadata i8* %then_else_reversed, metadata !4216, metadata !DIExpression()), !dbg !4217
  store i8 0, i8* %then_else_reversed, align 1, !dbg !4217
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !4218, metadata !DIExpression()), !dbg !4219
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !4220, metadata !DIExpression()), !dbg !4221
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond_earliest, metadata !4222, metadata !DIExpression()), !dbg !4223
  call void @llvm.dbg.declare(metadata %struct.noce_if_info* %if_info, metadata !4224, metadata !DIExpression()), !dbg !4241
  %0 = load i32, i32* @reload_completed, align 4, !dbg !4242
  %tobool = icmp ne i32 %0, 0, !dbg !4242
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !4242

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2792, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4242
  br label %cond.end, !dbg !4242

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !4242

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond1 = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4242
  %1 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4243
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %1, i32 0, i32 1, !dbg !4245
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4245
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %2), !dbg !4246
  %conv = zext i8 %call to i32, !dbg !4246
  %tobool2 = icmp ne i32 %conv, 0, !dbg !4246
  br i1 %tobool2, label %land.lhs.true, label %if.else, !dbg !4247

land.lhs.true:                                    ; preds = %cond.end
  %3 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4248
  %dest3 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %3, i32 0, i32 1, !dbg !4249
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %dest3, align 8, !dbg !4249
  %call4 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %4), !dbg !4250
  %conv5 = zext i8 %call4 to i32, !dbg !4250
  %tobool6 = icmp ne i32 %conv5, 0, !dbg !4250
  br i1 %tobool6, label %land.lhs.true7, label %if.else, !dbg !4251

land.lhs.true7:                                   ; preds = %land.lhs.true
  %5 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4252
  %dest8 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %5, i32 0, i32 1, !dbg !4253
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %dest8, align 8, !dbg !4253
  %call9 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %6), !dbg !4254
  %conv10 = zext i8 %call9 to i32, !dbg !4254
  %tobool11 = icmp ne i32 %conv10, 0, !dbg !4254
  br i1 %tobool11, label %land.lhs.true12, label %if.else, !dbg !4255

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %7 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4256
  %dest13 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %7, i32 0, i32 1, !dbg !4257
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %dest13, align 8, !dbg !4257
  %call14 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %8), !dbg !4258
  %conv15 = zext i8 %call14 to i32, !dbg !4258
  %tobool16 = icmp ne i32 %conv15, 0, !dbg !4258
  br i1 %tobool16, label %land.lhs.true17, label %if.else, !dbg !4259

land.lhs.true17:                                  ; preds = %land.lhs.true12
  %9 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4260
  %dest18 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %9, i32 0, i32 1, !dbg !4261
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %dest18, align 8, !dbg !4261
  %call19 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %10), !dbg !4262
  %11 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4263
  %dest20 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %11, i32 0, i32 1, !dbg !4264
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %dest20, align 8, !dbg !4264
  %call21 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %12), !dbg !4265
  %cmp = icmp eq %struct.basic_block_def* %call19, %call21, !dbg !4266
  br i1 %cmp, label %if.then, label %if.else, !dbg !4267

if.then:                                          ; preds = %land.lhs.true17
  %13 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4268
  %dest23 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 1, !dbg !4270
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %dest23, align 8, !dbg !4270
  store %struct.basic_block_def* %14, %struct.basic_block_def** %then_bb, align 8, !dbg !4271
  %15 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4272
  %dest24 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %15, i32 0, i32 1, !dbg !4273
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %dest24, align 8, !dbg !4273
  store %struct.basic_block_def* %16, %struct.basic_block_def** %else_bb, align 8, !dbg !4274
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4275
  %call25 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %17), !dbg !4276
  store %struct.basic_block_def* %call25, %struct.basic_block_def** %join_bb, align 8, !dbg !4277
  br label %if.end65, !dbg !4278

if.else:                                          ; preds = %land.lhs.true17, %land.lhs.true12, %land.lhs.true7, %land.lhs.true, %cond.end
  %18 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4279
  %dest26 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %18, i32 0, i32 1, !dbg !4281
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %dest26, align 8, !dbg !4281
  %call27 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %19), !dbg !4282
  %conv28 = zext i8 %call27 to i32, !dbg !4282
  %tobool29 = icmp ne i32 %conv28, 0, !dbg !4282
  br i1 %tobool29, label %land.lhs.true30, label %if.else44, !dbg !4283

land.lhs.true30:                                  ; preds = %if.else
  %20 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4284
  %dest31 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %20, i32 0, i32 1, !dbg !4285
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %dest31, align 8, !dbg !4285
  %call32 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %21), !dbg !4286
  %conv33 = zext i8 %call32 to i32, !dbg !4286
  %tobool34 = icmp ne i32 %conv33, 0, !dbg !4286
  br i1 %tobool34, label %land.lhs.true35, label %if.else44, !dbg !4287

land.lhs.true35:                                  ; preds = %land.lhs.true30
  %22 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4288
  %dest36 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %22, i32 0, i32 1, !dbg !4289
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %dest36, align 8, !dbg !4289
  %call37 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %23), !dbg !4290
  %24 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4291
  %dest38 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 1, !dbg !4292
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %dest38, align 8, !dbg !4292
  %cmp39 = icmp eq %struct.basic_block_def* %call37, %25, !dbg !4293
  br i1 %cmp39, label %if.then41, label %if.else44, !dbg !4294

if.then41:                                        ; preds = %land.lhs.true35
  %26 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4295
  %dest42 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %26, i32 0, i32 1, !dbg !4297
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %dest42, align 8, !dbg !4297
  store %struct.basic_block_def* %27, %struct.basic_block_def** %then_bb, align 8, !dbg !4298
  store %struct.basic_block_def* null, %struct.basic_block_def** %else_bb, align 8, !dbg !4299
  %28 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4300
  %dest43 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %28, i32 0, i32 1, !dbg !4301
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %dest43, align 8, !dbg !4301
  store %struct.basic_block_def* %29, %struct.basic_block_def** %join_bb, align 8, !dbg !4302
  br label %if.end64, !dbg !4303

if.else44:                                        ; preds = %land.lhs.true35, %land.lhs.true30, %if.else
  %30 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4304
  %dest45 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %30, i32 0, i32 1, !dbg !4306
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %dest45, align 8, !dbg !4306
  %call46 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %31), !dbg !4307
  %conv47 = zext i8 %call46 to i32, !dbg !4307
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !4307
  br i1 %tobool48, label %land.lhs.true49, label %if.else63, !dbg !4308

land.lhs.true49:                                  ; preds = %if.else44
  %32 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4309
  %dest50 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %32, i32 0, i32 1, !dbg !4310
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dest50, align 8, !dbg !4310
  %call51 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %33), !dbg !4311
  %conv52 = zext i8 %call51 to i32, !dbg !4311
  %tobool53 = icmp ne i32 %conv52, 0, !dbg !4311
  br i1 %tobool53, label %land.lhs.true54, label %if.else63, !dbg !4312

land.lhs.true54:                                  ; preds = %land.lhs.true49
  %34 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4313
  %dest55 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %34, i32 0, i32 1, !dbg !4314
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %dest55, align 8, !dbg !4314
  %call56 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %35), !dbg !4315
  %36 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4316
  %dest57 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 1, !dbg !4317
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest57, align 8, !dbg !4317
  %cmp58 = icmp eq %struct.basic_block_def* %call56, %37, !dbg !4318
  br i1 %cmp58, label %if.then60, label %if.else63, !dbg !4319

if.then60:                                        ; preds = %land.lhs.true54
  %38 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4320
  %dest61 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %38, i32 0, i32 1, !dbg !4322
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %dest61, align 8, !dbg !4322
  store %struct.basic_block_def* %39, %struct.basic_block_def** %then_bb, align 8, !dbg !4323
  store %struct.basic_block_def* null, %struct.basic_block_def** %else_bb, align 8, !dbg !4324
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4325
  %call62 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %40), !dbg !4326
  store %struct.basic_block_def* %call62, %struct.basic_block_def** %join_bb, align 8, !dbg !4327
  store i8 1, i8* %then_else_reversed, align 1, !dbg !4328
  br label %if.end, !dbg !4329

if.else63:                                        ; preds = %land.lhs.true54, %land.lhs.true49, %if.else44
  store i32 0, i32* %retval, align 4, !dbg !4330
  br label %return, !dbg !4330

if.end:                                           ; preds = %if.then60
  br label %if.end64

if.end64:                                         ; preds = %if.end, %if.then41
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4331
  %call66 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %41), !dbg !4333
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call66, i32 0, i32 7, !dbg !4334
  %42 = load i32, i32* %flags, align 8, !dbg !4334
  %and = and i32 %42, 14, !dbg !4335
  %tobool67 = icmp ne i32 %and, 0, !dbg !4335
  br i1 %tobool67, label %if.then68, label %if.end69, !dbg !4336

if.then68:                                        ; preds = %if.end65
  store i32 0, i32* %retval, align 4, !dbg !4337
  br label %return, !dbg !4337

if.end69:                                         ; preds = %if.end65
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4338
  %tobool70 = icmp ne %struct.basic_block_def* %43, null, !dbg !4338
  br i1 %tobool70, label %land.lhs.true71, label %if.end77, !dbg !4340

land.lhs.true71:                                  ; preds = %if.end69
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4341
  %call72 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %44), !dbg !4342
  %flags73 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call72, i32 0, i32 7, !dbg !4343
  %45 = load i32, i32* %flags73, align 8, !dbg !4343
  %and74 = and i32 %45, 14, !dbg !4344
  %tobool75 = icmp ne i32 %and74, 0, !dbg !4344
  br i1 %tobool75, label %if.then76, label %if.end77, !dbg !4345

if.then76:                                        ; preds = %land.lhs.true71
  store i32 0, i32* %retval, align 4, !dbg !4346
  br label %return, !dbg !4346

if.end77:                                         ; preds = %land.lhs.true71, %if.end69
  %46 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !4347
  %inc = add nsw i32 %46, 1, !dbg !4347
  store i32 %inc, i32* @num_possible_if_blocks, align 4, !dbg !4347
  %47 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4348
  %tobool78 = icmp ne %struct._IO_FILE* %47, null, !dbg !4348
  br i1 %tobool78, label %if.then79, label %if.end91, !dbg !4350

if.then79:                                        ; preds = %if.end77
  %48 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4351
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4353
  %tobool80 = icmp ne %struct.basic_block_def* %49, null, !dbg !4354
  %50 = zext i1 %tobool80 to i64, !dbg !4354
  %cond81 = select i1 %tobool80, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), !dbg !4354
  %51 = load i32, i32* %pass.addr, align 4, !dbg !4355
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4356
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 9, !dbg !4357
  %53 = load i32, i32* %index, align 8, !dbg !4357
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4358
  %index82 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 9, !dbg !4359
  %55 = load i32, i32* %index82, align 8, !dbg !4359
  %call83 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %48, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.11, i64 0, i64 0), i8* %cond81, i32 %51, i32 %53, i32 %55), !dbg !4360
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4361
  %tobool84 = icmp ne %struct.basic_block_def* %56, null, !dbg !4361
  br i1 %tobool84, label %if.then85, label %if.end88, !dbg !4363

if.then85:                                        ; preds = %if.then79
  %57 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4364
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4365
  %index86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 9, !dbg !4366
  %59 = load i32, i32* %index86, align 8, !dbg !4366
  %call87 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i32 %59), !dbg !4367
  br label %if.end88, !dbg !4367

if.end88:                                         ; preds = %if.then85, %if.then79
  %60 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4368
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4369
  %index89 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %61, i32 0, i32 9, !dbg !4370
  %62 = load i32, i32* %index89, align 8, !dbg !4370
  %call90 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %60, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.15, i64 0, i64 0), i32 %62), !dbg !4371
  br label %if.end91, !dbg !4372

if.end91:                                         ; preds = %if.end88, %if.end77
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4373
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 7, !dbg !4373
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4373
  %64 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4373
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %64, i32 0, i32 1, !dbg !4373
  %65 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4373
  store %struct.rtx_def* %65, %struct.rtx_def** %jump, align 8, !dbg !4374
  %66 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4375
  %call92 = call i32 @onlyjump_p(%struct.rtx_def* %66), !dbg !4377
  %tobool93 = icmp ne i32 %call92, 0, !dbg !4377
  br i1 %tobool93, label %if.end95, label %if.then94, !dbg !4378

if.then94:                                        ; preds = %if.end91
  store i32 0, i32* %retval, align 4, !dbg !4379
  br label %return, !dbg !4379

if.end95:                                         ; preds = %if.end91
  %67 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4380
  %68 = load i8, i8* %then_else_reversed, align 1, !dbg !4381
  %call96 = call %struct.rtx_def* @noce_get_condition(%struct.rtx_def* %67, %struct.rtx_def** %cond_earliest, i8 zeroext %68), !dbg !4382
  store %struct.rtx_def* %call96, %struct.rtx_def** %cond, align 8, !dbg !4383
  %69 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4384
  %tobool97 = icmp ne %struct.rtx_def* %69, null, !dbg !4384
  br i1 %tobool97, label %if.end99, label %if.then98, !dbg !4386

if.then98:                                        ; preds = %if.end95
  store i32 0, i32* %retval, align 4, !dbg !4387
  br label %return, !dbg !4387

if.end99:                                         ; preds = %if.end95
  %70 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4388
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !4388
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4388
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4388
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4388
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4388
  %72 = bitcast %struct.rtx_def* %71 to i32*, !dbg !4388
  %bf.load = load i32, i32* %72, align 8, !dbg !4388
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4388
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4388
  %cmp100 = icmp eq i32 %bf.clear, 1, !dbg !4390
  br i1 %cmp100, label %if.then102, label %if.end103, !dbg !4391

if.then102:                                       ; preds = %if.end99
  store i32 0, i32* %retval, align 4, !dbg !4392
  br label %return, !dbg !4392

if.end103:                                        ; preds = %if.end99
  %73 = bitcast %struct.noce_if_info* %if_info to i8*, !dbg !4393
  call void @llvm.memset.p0i8.i64(i8* align 8 %73, i8 0, i64 104, i1 false), !dbg !4393
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4394
  %test_bb104 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 0, !dbg !4395
  store %struct.basic_block_def* %74, %struct.basic_block_def** %test_bb104, align 8, !dbg !4396
  %75 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4397
  %then_bb105 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 1, !dbg !4398
  store %struct.basic_block_def* %75, %struct.basic_block_def** %then_bb105, align 8, !dbg !4399
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4400
  %else_bb106 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 2, !dbg !4401
  store %struct.basic_block_def* %76, %struct.basic_block_def** %else_bb106, align 8, !dbg !4402
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4403
  %join_bb107 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 3, !dbg !4404
  store %struct.basic_block_def* %77, %struct.basic_block_def** %join_bb107, align 8, !dbg !4405
  %78 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4406
  %cond108 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 5, !dbg !4407
  store %struct.rtx_def* %78, %struct.rtx_def** %cond108, align 8, !dbg !4408
  %79 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !4409
  %cond_earliest109 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 6, !dbg !4410
  store %struct.rtx_def* %79, %struct.rtx_def** %cond_earliest109, align 8, !dbg !4411
  %80 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4412
  %jump110 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 4, !dbg !4413
  store %struct.rtx_def* %80, %struct.rtx_def** %jump110, align 8, !dbg !4414
  %81 = load i8, i8* %then_else_reversed, align 1, !dbg !4415
  %then_else_reversed111 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 12, !dbg !4416
  store i8 %81, i8* %then_else_reversed111, align 8, !dbg !4417
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4418
  %call112 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %82), !dbg !4418
  %tobool113 = icmp ne i8 %call112, 0, !dbg !4418
  br i1 %tobool113, label %cond.false115, label %cond.true114, !dbg !4418

cond.true114:                                     ; preds = %if.end103
  br label %cond.end123, !dbg !4418

cond.false115:                                    ; preds = %if.end103
  %83 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4418
  %call116 = call zeroext i8 @predictable_edge_p(%struct.edge_def* %83), !dbg !4418
  %conv117 = zext i8 %call116 to i32, !dbg !4418
  %tobool118 = icmp ne i32 %conv117, 0, !dbg !4418
  br i1 %tobool118, label %cond.true119, label %cond.false120, !dbg !4418

cond.true119:                                     ; preds = %cond.false115
  br label %cond.end121, !dbg !4418

cond.false120:                                    ; preds = %cond.false115
  %84 = load i32, i32* @ix86_branch_cost, align 4, !dbg !4418
  br label %cond.end121, !dbg !4418

cond.end121:                                      ; preds = %cond.false120, %cond.true119
  %cond122 = phi i32 [ 0, %cond.true119 ], [ %84, %cond.false120 ], !dbg !4418
  br label %cond.end123, !dbg !4418

cond.end123:                                      ; preds = %cond.end121, %cond.true114
  %cond124 = phi i32 [ 2, %cond.true114 ], [ %cond122, %cond.end121 ], !dbg !4418
  %branch_cost = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %if_info, i32 0, i32 13, !dbg !4419
  store i32 %cond124, i32* %branch_cost, align 4, !dbg !4420
  %call125 = call i32 @noce_process_if_block(%struct.noce_if_info* %if_info), !dbg !4421
  %tobool126 = icmp ne i32 %call125, 0, !dbg !4421
  br i1 %tobool126, label %if.then127, label %if.end128, !dbg !4423

if.then127:                                       ; preds = %cond.end123
  store i32 1, i32* %retval, align 4, !dbg !4424
  br label %return, !dbg !4424

if.end128:                                        ; preds = %cond.end123
  %call129 = call i32 @cond_move_process_if_block(%struct.noce_if_info* %if_info), !dbg !4425
  %tobool130 = icmp ne i32 %call129, 0, !dbg !4425
  br i1 %tobool130, label %if.then131, label %if.end132, !dbg !4427

if.then131:                                       ; preds = %if.end128
  store i32 1, i32* %retval, align 4, !dbg !4428
  br label %return, !dbg !4428

if.end132:                                        ; preds = %if.end128
  store i32 0, i32* %retval, align 4, !dbg !4429
  br label %return, !dbg !4429

return:                                           ; preds = %if.end132, %if.then131, %if.then127, %if.then102, %if.then98, %if.then94, %if.then76, %if.then68, %if.else63
  %85 = load i32, i32* %retval, align 4, !dbg !4430
  ret i32 %85, !dbg !4430
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cond_exec_find_if_block(%struct.ce_if_block* %ce_info) #0 !dbg !4431 {
entry:
  %retval = alloca i32, align 4
  %ce_info.addr = alloca %struct.ce_if_block*, align 8
  %test_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %cur_edge = alloca %struct.edge_def*, align 8
  %next = alloca %struct.basic_block_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %target_bb = alloca %struct.basic_block_def*, align 8
  %max_insns = alloca i32, align 4
  %n_insns = alloca i32, align 4
  %total_insns = alloca i32, align 4
  %blocks = alloca i32, align 4
  %tmp = alloca %struct.edge_iterator, align 8
  %tmp75 = alloca %struct.edge_iterator, align 8
  %last_insn = alloca %struct.rtx_def*, align 8
  store %struct.ce_if_block* %ce_info, %struct.ce_if_block** %ce_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ce_if_block** %ce_info.addr, metadata !4435, metadata !DIExpression()), !dbg !4436
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb, metadata !4437, metadata !DIExpression()), !dbg !4438
  %0 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4439
  %test_bb1 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %0, i32 0, i32 0, !dbg !4440
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb1, align 8, !dbg !4440
  store %struct.basic_block_def* %1, %struct.basic_block_def** %test_bb, align 8, !dbg !4438
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !4441, metadata !DIExpression()), !dbg !4442
  %2 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4443
  %then_bb2 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %2, i32 0, i32 1, !dbg !4444
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb2, align 8, !dbg !4444
  store %struct.basic_block_def* %3, %struct.basic_block_def** %then_bb, align 8, !dbg !4442
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !4445, metadata !DIExpression()), !dbg !4446
  %4 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4447
  %else_bb3 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %4, i32 0, i32 2, !dbg !4448
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb3, align 8, !dbg !4448
  store %struct.basic_block_def* %5, %struct.basic_block_def** %else_bb, align 8, !dbg !4446
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !4449, metadata !DIExpression()), !dbg !4450
  store %struct.basic_block_def* null, %struct.basic_block_def** %join_bb, align 8, !dbg !4450
  call void @llvm.dbg.declare(metadata %struct.edge_def** %cur_edge, metadata !4451, metadata !DIExpression()), !dbg !4452
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %next, metadata !4453, metadata !DIExpression()), !dbg !4454
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !4455, metadata !DIExpression()), !dbg !4462
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4463
  %7 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4464
  %last_test_bb = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %7, i32 0, i32 4, !dbg !4465
  store %struct.basic_block_def* %6, %struct.basic_block_def** %last_test_bb, align 8, !dbg !4466
  %8 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !4467
  %call = call zeroext i8 %8(), !dbg !4467
  %conv = zext i8 %call to i32, !dbg !4467
  %tobool = icmp ne i32 %conv, 0, !dbg !4467
  br i1 %tobool, label %land.lhs.true, label %cond.true, !dbg !4467

land.lhs.true:                                    ; preds = %entry
  %9 = load i32, i32* @reload_completed, align 4, !dbg !4467
  %tobool4 = icmp ne i32 %9, 0, !dbg !4467
  br i1 %tobool4, label %cond.false, label %cond.true, !dbg !4467

cond.true:                                        ; preds = %land.lhs.true, %entry
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 3188, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !4467
  br label %cond.end, !dbg !4467

cond.false:                                       ; preds = %land.lhs.true
  br label %cond.end, !dbg !4467

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !4467
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4468
  %call5 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %10), !dbg !4470
  %conv6 = zext i8 %call5 to i32, !dbg !4470
  %tobool7 = icmp ne i32 %conv6, 0, !dbg !4470
  br i1 %tobool7, label %land.lhs.true8, label %if.end54, !dbg !4471

land.lhs.true8:                                   ; preds = %cond.end
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4472
  %call9 = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %11), !dbg !4473
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call9, i32 0, i32 7, !dbg !4474
  %12 = load i32, i32* %flags, align 8, !dbg !4474
  %cmp = icmp eq i32 %12, 1, !dbg !4475
  br i1 %cmp, label %if.then, label %if.end54, !dbg !4476

if.then:                                          ; preds = %land.lhs.true8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !4477, metadata !DIExpression()), !dbg !4479
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4480
  %call11 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %13), !dbg !4481
  store %struct.basic_block_def* %call11, %struct.basic_block_def** %bb, align 8, !dbg !4479
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target_bb, metadata !4482, metadata !DIExpression()), !dbg !4483
  call void @llvm.dbg.declare(metadata i32* %max_insns, metadata !4484, metadata !DIExpression()), !dbg !4485
  %14 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4486
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %14, i64 0, !dbg !4486
  %call12 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !4486
  %tobool13 = icmp ne i8 %call12, 0, !dbg !4486
  br i1 %tobool13, label %cond.false15, label %cond.true14, !dbg !4486

cond.true14:                                      ; preds = %if.then
  br label %cond.end16, !dbg !4486

cond.false15:                                     ; preds = %if.then
  %15 = load i32, i32* @ix86_branch_cost, align 4, !dbg !4486
  br label %cond.end16, !dbg !4486

cond.end16:                                       ; preds = %cond.false15, %cond.true14
  %cond17 = phi i32 [ 2, %cond.true14 ], [ %15, %cond.false15 ], !dbg !4486
  %add = add nsw i32 %cond17, 1, !dbg !4486
  store i32 %add, i32* %max_insns, align 4, !dbg !4485
  call void @llvm.dbg.declare(metadata i32* %n_insns, metadata !4487, metadata !DIExpression()), !dbg !4488
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4489
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4491
  %call18 = call i32 @block_jumps_and_fallthru_p(%struct.basic_block_def* %16, %struct.basic_block_def* %17), !dbg !4492
  store i32 %call18, i32* %n_insns, align 4, !dbg !4493
  %cmp19 = icmp sge i32 %call18, 0, !dbg !4494
  br i1 %cmp19, label %if.then21, label %if.else, !dbg !4495

if.then21:                                        ; preds = %cond.end16
  %18 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4496
  %and_and_p = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %18, i32 0, i32 9, !dbg !4498
  store i32 1, i32* %and_and_p, align 8, !dbg !4499
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4500
  store %struct.basic_block_def* %19, %struct.basic_block_def** %target_bb, align 8, !dbg !4501
  br label %if.end28, !dbg !4502

if.else:                                          ; preds = %cond.end16
  %20 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4503
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4505
  %call22 = call i32 @block_jumps_and_fallthru_p(%struct.basic_block_def* %20, %struct.basic_block_def* %21), !dbg !4506
  store i32 %call22, i32* %n_insns, align 4, !dbg !4507
  %cmp23 = icmp sge i32 %call22, 0, !dbg !4508
  br i1 %cmp23, label %if.then25, label %if.else27, !dbg !4509

if.then25:                                        ; preds = %if.else
  %22 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4510
  %and_and_p26 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %22, i32 0, i32 9, !dbg !4512
  store i32 0, i32* %and_and_p26, align 8, !dbg !4513
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4514
  store %struct.basic_block_def* %23, %struct.basic_block_def** %target_bb, align 8, !dbg !4515
  br label %if.end, !dbg !4516

if.else27:                                        ; preds = %if.else
  store %struct.basic_block_def* null, %struct.basic_block_def** %target_bb, align 8, !dbg !4517
  br label %if.end

if.end:                                           ; preds = %if.else27, %if.then25
  br label %if.end28

if.end28:                                         ; preds = %if.end, %if.then21
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4518
  %tobool29 = icmp ne %struct.basic_block_def* %24, null, !dbg !4518
  br i1 %tobool29, label %land.lhs.true30, label %if.end53, !dbg !4520

land.lhs.true30:                                  ; preds = %if.end28
  %25 = load i32, i32* %n_insns, align 4, !dbg !4521
  %26 = load i32, i32* %max_insns, align 4, !dbg !4522
  %cmp31 = icmp sle i32 %25, %26, !dbg !4523
  br i1 %cmp31, label %if.then33, label %if.end53, !dbg !4524

if.then33:                                        ; preds = %land.lhs.true30
  call void @llvm.dbg.declare(metadata i32* %total_insns, metadata !4525, metadata !DIExpression()), !dbg !4527
  store i32 0, i32* %total_insns, align 4, !dbg !4527
  call void @llvm.dbg.declare(metadata i32* %blocks, metadata !4528, metadata !DIExpression()), !dbg !4529
  store i32 0, i32* %blocks, align 4, !dbg !4529
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4530
  %28 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4531
  %last_test_bb34 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %28, i32 0, i32 4, !dbg !4532
  store %struct.basic_block_def* %27, %struct.basic_block_def** %last_test_bb34, align 8, !dbg !4533
  br label %do.body, !dbg !4534

do.body:                                          ; preds = %land.end, %if.then33
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4535
  store %struct.basic_block_def* %29, %struct.basic_block_def** %test_bb, align 8, !dbg !4537
  %30 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4538
  %test_bb35 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %30, i32 0, i32 0, !dbg !4539
  store %struct.basic_block_def* %29, %struct.basic_block_def** %test_bb35, align 8, !dbg !4540
  %31 = load i32, i32* %n_insns, align 4, !dbg !4541
  %32 = load i32, i32* %total_insns, align 4, !dbg !4542
  %add36 = add nsw i32 %32, %31, !dbg !4542
  store i32 %add36, i32* %total_insns, align 4, !dbg !4542
  %33 = load i32, i32* %blocks, align 4, !dbg !4543
  %inc = add nsw i32 %33, 1, !dbg !4543
  store i32 %inc, i32* %blocks, align 4, !dbg !4543
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4544
  %call37 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %34), !dbg !4546
  %tobool38 = icmp ne i8 %call37, 0, !dbg !4546
  br i1 %tobool38, label %if.end40, label %if.then39, !dbg !4547

if.then39:                                        ; preds = %do.body
  br label %do.end, !dbg !4548

if.end40:                                         ; preds = %do.body
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4549
  %call41 = call %struct.basic_block_def* @single_pred(%struct.basic_block_def* %35), !dbg !4550
  store %struct.basic_block_def* %call41, %struct.basic_block_def** %bb, align 8, !dbg !4551
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !4552
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb, align 8, !dbg !4553
  %call42 = call i32 @block_jumps_and_fallthru_p(%struct.basic_block_def* %36, %struct.basic_block_def* %37), !dbg !4554
  store i32 %call42, i32* %n_insns, align 4, !dbg !4555
  br label %do.cond, !dbg !4556

do.cond:                                          ; preds = %if.end40
  %38 = load i32, i32* %n_insns, align 4, !dbg !4557
  %cmp43 = icmp sge i32 %38, 0, !dbg !4558
  br i1 %cmp43, label %land.rhs, label %land.end, !dbg !4559

land.rhs:                                         ; preds = %do.cond
  %39 = load i32, i32* %total_insns, align 4, !dbg !4560
  %40 = load i32, i32* %n_insns, align 4, !dbg !4561
  %add45 = add nsw i32 %39, %40, !dbg !4562
  %41 = load i32, i32* %max_insns, align 4, !dbg !4563
  %cmp46 = icmp sle i32 %add45, %41, !dbg !4564
  br label %land.end

land.end:                                         ; preds = %land.rhs, %do.cond
  %42 = phi i1 [ false, %do.cond ], [ %cmp46, %land.rhs ], !dbg !4565
  br i1 %42, label %do.body, label %do.end, !dbg !4556, !llvm.loop !4566

do.end:                                           ; preds = %land.end, %if.then39
  %43 = load i32, i32* %blocks, align 4, !dbg !4568
  %44 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4569
  %num_multiple_test_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %44, i32 0, i32 5, !dbg !4570
  store i32 %43, i32* %num_multiple_test_blocks, align 8, !dbg !4571
  %45 = load i32, i32* %total_insns, align 4, !dbg !4572
  %46 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4573
  %num_multiple_test_insns = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %46, i32 0, i32 8, !dbg !4574
  store i32 %45, i32* %num_multiple_test_insns, align 4, !dbg !4575
  %47 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4576
  %and_and_p48 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %47, i32 0, i32 9, !dbg !4578
  %48 = load i32, i32* %and_and_p48, align 8, !dbg !4578
  %tobool49 = icmp ne i32 %48, 0, !dbg !4576
  br i1 %tobool49, label %if.then50, label %if.else51, !dbg !4579

if.then50:                                        ; preds = %do.end
  %49 = load i32, i32* %blocks, align 4, !dbg !4580
  %50 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4581
  %num_and_and_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %50, i32 0, i32 6, !dbg !4582
  store i32 %49, i32* %num_and_and_blocks, align 4, !dbg !4583
  br label %if.end52, !dbg !4581

if.else51:                                        ; preds = %do.end
  %51 = load i32, i32* %blocks, align 4, !dbg !4584
  %52 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4585
  %num_or_or_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %52, i32 0, i32 7, !dbg !4586
  store i32 %51, i32* %num_or_or_blocks, align 8, !dbg !4587
  br label %if.end52

if.end52:                                         ; preds = %if.else51, %if.then50
  br label %if.end53, !dbg !4588

if.end53:                                         ; preds = %if.end52, %land.lhs.true30, %if.end28
  br label %if.end54, !dbg !4589

if.end54:                                         ; preds = %if.end53, %land.lhs.true8, %cond.end
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4590
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 0, !dbg !4590
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4590
  %tobool55 = icmp ne %struct.VEC_edge_gc* %54, null, !dbg !4590
  br i1 %tobool55, label %cond.true56, label %cond.false58, !dbg !4590

cond.true56:                                      ; preds = %if.end54
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4590
  %preds57 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 0, !dbg !4590
  %56 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds57, align 8, !dbg !4590
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %56, i32 0, i32 0, !dbg !4590
  br label %cond.end59, !dbg !4590

cond.false58:                                     ; preds = %if.end54
  br label %cond.end59, !dbg !4590

cond.end59:                                       ; preds = %cond.false58, %cond.true56
  %cond60 = phi %struct.VEC_edge_base* [ %base, %cond.true56 ], [ null, %cond.false58 ], !dbg !4590
  %call61 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond60), !dbg !4590
  %57 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4592
  %num_or_or_blocks62 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %57, i32 0, i32 7, !dbg !4593
  %58 = load i32, i32* %num_or_or_blocks62, align 8, !dbg !4593
  %sub = sub i32 %call61, %58, !dbg !4594
  %cmp63 = icmp ne i32 %sub, 1, !dbg !4595
  br i1 %cmp63, label %if.then65, label %if.end66, !dbg !4596

if.then65:                                        ; preds = %cond.end59
  store i32 0, i32* %retval, align 4, !dbg !4597
  br label %return, !dbg !4597

if.end66:                                         ; preds = %cond.end59
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4598
  %preds67 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %59, i32 0, i32 0, !dbg !4598
  %call68 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds67), !dbg !4598
  %60 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !4598
  %61 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 0, !dbg !4598
  %62 = extractvalue { i32, %struct.VEC_edge_gc** } %call68, 0, !dbg !4598
  store i32 %62, i32* %61, align 8, !dbg !4598
  %63 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %60, i32 0, i32 1, !dbg !4598
  %64 = extractvalue { i32, %struct.VEC_edge_gc** } %call68, 1, !dbg !4598
  store %struct.VEC_edge_gc** %64, %struct.VEC_edge_gc*** %63, align 8, !dbg !4598
  %65 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4598
  %66 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !4598
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* align 8 %66, i64 16, i1 false), !dbg !4598
  br label %for.cond, !dbg !4598

for.cond:                                         ; preds = %for.inc, %if.end66
  %67 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4600
  %68 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 0, !dbg !4600
  %69 = load i32, i32* %68, align 8, !dbg !4600
  %70 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %67, i32 0, i32 1, !dbg !4600
  %71 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %70, align 8, !dbg !4600
  %call69 = call zeroext i8 @ei_cond(i32 %69, %struct.VEC_edge_gc** %71, %struct.edge_def** %cur_edge), !dbg !4600
  %tobool70 = icmp ne i8 %call69, 0, !dbg !4598
  br i1 %tobool70, label %for.body, label %for.end, !dbg !4598

for.body:                                         ; preds = %for.cond
  %72 = load %struct.edge_def*, %struct.edge_def** %cur_edge, align 8, !dbg !4602
  %flags71 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %72, i32 0, i32 7, !dbg !4605
  %73 = load i32, i32* %flags71, align 8, !dbg !4605
  %and = and i32 %73, 14, !dbg !4606
  %tobool72 = icmp ne i32 %and, 0, !dbg !4606
  br i1 %tobool72, label %if.then73, label %if.end74, !dbg !4607

if.then73:                                        ; preds = %for.body
  store i32 0, i32* %retval, align 4, !dbg !4608
  br label %return, !dbg !4608

if.end74:                                         ; preds = %for.body
  br label %for.inc, !dbg !4609

for.inc:                                          ; preds = %if.end74
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4600
  br label %for.cond, !dbg !4600, !llvm.loop !4610

for.end:                                          ; preds = %for.cond
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4612
  %preds76 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 0, !dbg !4612
  %call77 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %preds76), !dbg !4612
  %75 = bitcast %struct.edge_iterator* %tmp75 to { i32, %struct.VEC_edge_gc** }*, !dbg !4612
  %76 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %75, i32 0, i32 0, !dbg !4612
  %77 = extractvalue { i32, %struct.VEC_edge_gc** } %call77, 0, !dbg !4612
  store i32 %77, i32* %76, align 8, !dbg !4612
  %78 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %75, i32 0, i32 1, !dbg !4612
  %79 = extractvalue { i32, %struct.VEC_edge_gc** } %call77, 1, !dbg !4612
  store %struct.VEC_edge_gc** %79, %struct.VEC_edge_gc*** %78, align 8, !dbg !4612
  %80 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !4612
  %81 = bitcast %struct.edge_iterator* %tmp75 to i8*, !dbg !4612
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %80, i8* align 8 %81, i64 16, i1 false), !dbg !4612
  br label %for.cond78, !dbg !4612

for.cond78:                                       ; preds = %for.inc87, %for.end
  %82 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !4614
  %83 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 0, !dbg !4614
  %84 = load i32, i32* %83, align 8, !dbg !4614
  %85 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %82, i32 0, i32 1, !dbg !4614
  %86 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %85, align 8, !dbg !4614
  %call79 = call zeroext i8 @ei_cond(i32 %84, %struct.VEC_edge_gc** %86, %struct.edge_def** %cur_edge), !dbg !4614
  %tobool80 = icmp ne i8 %call79, 0, !dbg !4612
  br i1 %tobool80, label %for.body81, label %for.end88, !dbg !4612

for.body81:                                       ; preds = %for.cond78
  %87 = load %struct.edge_def*, %struct.edge_def** %cur_edge, align 8, !dbg !4616
  %flags82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %87, i32 0, i32 7, !dbg !4619
  %88 = load i32, i32* %flags82, align 8, !dbg !4619
  %and83 = and i32 %88, 14, !dbg !4620
  %tobool84 = icmp ne i32 %and83, 0, !dbg !4620
  br i1 %tobool84, label %if.then85, label %if.end86, !dbg !4621

if.then85:                                        ; preds = %for.body81
  store i32 0, i32* %retval, align 4, !dbg !4622
  br label %return, !dbg !4622

if.end86:                                         ; preds = %for.body81
  br label %for.inc87, !dbg !4623

for.inc87:                                        ; preds = %if.end86
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !4614
  br label %for.cond78, !dbg !4614, !llvm.loop !4624

for.end88:                                        ; preds = %for.cond78
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4626
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %89, i32 0, i32 1, !dbg !4626
  %90 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !4626
  %tobool89 = icmp ne %struct.VEC_edge_gc* %90, null, !dbg !4626
  br i1 %tobool89, label %cond.true90, label %cond.false93, !dbg !4626

cond.true90:                                      ; preds = %for.end88
  %91 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4626
  %succs91 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %91, i32 0, i32 1, !dbg !4626
  %92 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs91, align 8, !dbg !4626
  %base92 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %92, i32 0, i32 0, !dbg !4626
  br label %cond.end94, !dbg !4626

cond.false93:                                     ; preds = %for.end88
  br label %cond.end94, !dbg !4626

cond.end94:                                       ; preds = %cond.false93, %cond.true90
  %cond95 = phi %struct.VEC_edge_base* [ %base92, %cond.true90 ], [ null, %cond.false93 ], !dbg !4626
  %call96 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond95), !dbg !4626
  %cmp97 = icmp ugt i32 %call96, 0, !dbg !4628
  br i1 %cmp97, label %land.lhs.true99, label %if.end113, !dbg !4629

land.lhs.true99:                                  ; preds = %cond.end94
  %93 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4630
  %call100 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %93), !dbg !4631
  %tobool101 = icmp ne i8 %call100, 0, !dbg !4631
  br i1 %tobool101, label %lor.lhs.false, label %if.then112, !dbg !4632

lor.lhs.false:                                    ; preds = %land.lhs.true99
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4633
  %call102 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %94), !dbg !4634
  %flags103 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call102, i32 0, i32 7, !dbg !4635
  %95 = load i32, i32* %flags103, align 8, !dbg !4635
  %and104 = and i32 %95, 14, !dbg !4636
  %tobool105 = icmp ne i32 %and104, 0, !dbg !4636
  br i1 %tobool105, label %if.then112, label %lor.lhs.false106, !dbg !4637

lor.lhs.false106:                                 ; preds = %lor.lhs.false
  %96 = load i32, i32* @epilogue_completed, align 4, !dbg !4638
  %tobool107 = icmp ne i32 %96, 0, !dbg !4638
  br i1 %tobool107, label %land.lhs.true108, label %if.end113, !dbg !4639

land.lhs.true108:                                 ; preds = %lor.lhs.false106
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4640
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %97, i32 0, i32 7, !dbg !4640
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4640
  %98 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4640
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %98, i32 0, i32 1, !dbg !4640
  %99 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4640
  %call109 = call zeroext i8 @tablejump_p(%struct.rtx_def* %99, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !4641
  %conv110 = zext i8 %call109 to i32, !dbg !4641
  %tobool111 = icmp ne i32 %conv110, 0, !dbg !4641
  br i1 %tobool111, label %if.then112, label %if.end113, !dbg !4642

if.then112:                                       ; preds = %land.lhs.true108, %lor.lhs.false, %land.lhs.true99
  store i32 0, i32* %retval, align 4, !dbg !4643
  br label %return, !dbg !4643

if.end113:                                        ; preds = %land.lhs.true108, %lor.lhs.false106, %cond.end94
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4644
  %succs114 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %100, i32 0, i32 1, !dbg !4644
  %101 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs114, align 8, !dbg !4644
  %tobool115 = icmp ne %struct.VEC_edge_gc* %101, null, !dbg !4644
  br i1 %tobool115, label %cond.true116, label %cond.false119, !dbg !4644

cond.true116:                                     ; preds = %if.end113
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4644
  %succs117 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %102, i32 0, i32 1, !dbg !4644
  %103 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs117, align 8, !dbg !4644
  %base118 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %103, i32 0, i32 0, !dbg !4644
  br label %cond.end120, !dbg !4644

cond.false119:                                    ; preds = %if.end113
  br label %cond.end120, !dbg !4644

cond.end120:                                      ; preds = %cond.false119, %cond.true116
  %cond121 = phi %struct.VEC_edge_base* [ %base118, %cond.true116 ], [ null, %cond.false119 ], !dbg !4644
  %call122 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond121), !dbg !4644
  %cmp123 = icmp eq i32 %call122, 0, !dbg !4646
  br i1 %cmp123, label %if.then125, label %if.else155, !dbg !4647

if.then125:                                       ; preds = %cond.end120
  %104 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4648
  %call126 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %104), !dbg !4651
  %tobool127 = icmp ne i8 %call126, 0, !dbg !4651
  br i1 %tobool127, label %if.then128, label %if.else153, !dbg !4652

if.then128:                                       ; preds = %if.then125
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last_insn, metadata !4653, metadata !DIExpression()), !dbg !4655
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4656
  %il129 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 7, !dbg !4656
  %rtl130 = bitcast %union.basic_block_il_dependent* %il129 to %struct.rtl_bb_info**, !dbg !4656
  %106 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl130, align 8, !dbg !4656
  %end_131 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %106, i32 0, i32 1, !dbg !4656
  %107 = load %struct.rtx_def*, %struct.rtx_def** %end_131, align 8, !dbg !4656
  store %struct.rtx_def* %107, %struct.rtx_def** %last_insn, align 8, !dbg !4655
  br label %while.cond, !dbg !4657

while.cond:                                       ; preds = %while.body, %if.then128
  %108 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4658
  %tobool132 = icmp ne %struct.rtx_def* %108, null, !dbg !4658
  br i1 %tobool132, label %land.lhs.true133, label %land.end141, !dbg !4659

land.lhs.true133:                                 ; preds = %while.cond
  %109 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4660
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !4660
  %bf.load = load i32, i32* %110, align 8, !dbg !4660
  %bf.clear = and i32 %bf.load, 65535, !dbg !4660
  %cmp134 = icmp eq i32 %bf.clear, 13, !dbg !4660
  br i1 %cmp134, label %land.rhs136, label %land.end141, !dbg !4661

land.rhs136:                                      ; preds = %land.lhs.true133
  %111 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4662
  %112 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4663
  %il137 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %112, i32 0, i32 7, !dbg !4663
  %rtl138 = bitcast %union.basic_block_il_dependent* %il137 to %struct.rtl_bb_info**, !dbg !4663
  %113 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl138, align 8, !dbg !4663
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %113, i32 0, i32 0, !dbg !4663
  %114 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !4663
  %cmp139 = icmp ne %struct.rtx_def* %111, %114, !dbg !4664
  br label %land.end141

land.end141:                                      ; preds = %land.rhs136, %land.lhs.true133, %while.cond
  %115 = phi i1 [ false, %land.lhs.true133 ], [ false, %while.cond ], [ %cmp139, %land.rhs136 ], !dbg !4665
  br i1 %115, label %while.body, label %while.end, !dbg !4657

while.body:                                       ; preds = %land.end141
  %116 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4666
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %116, i32 0, i32 1, !dbg !4666
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4666
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !4666
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4666
  %117 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4666
  store %struct.rtx_def* %117, %struct.rtx_def** %last_insn, align 8, !dbg !4667
  br label %while.cond, !dbg !4657, !llvm.loop !4668

while.end:                                        ; preds = %land.end141
  %118 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4669
  %tobool142 = icmp ne %struct.rtx_def* %118, null, !dbg !4669
  br i1 %tobool142, label %land.lhs.true143, label %if.end152, !dbg !4671

land.lhs.true143:                                 ; preds = %while.end
  %119 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4672
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !4672
  %bf.load144 = load i32, i32* %120, align 8, !dbg !4672
  %bf.clear145 = and i32 %bf.load144, 65535, !dbg !4672
  %cmp146 = icmp eq i32 %bf.clear145, 9, !dbg !4672
  br i1 %cmp146, label %land.lhs.true148, label %if.end152, !dbg !4673

land.lhs.true148:                                 ; preds = %land.lhs.true143
  %121 = load %struct.rtx_def*, %struct.rtx_def** %last_insn, align 8, !dbg !4674
  %call149 = call i32 @simplejump_p(%struct.rtx_def* %121), !dbg !4675
  %tobool150 = icmp ne i32 %call149, 0, !dbg !4675
  br i1 %tobool150, label %if.end152, label %if.then151, !dbg !4676

if.then151:                                       ; preds = %land.lhs.true148
  store i32 0, i32* %retval, align 4, !dbg !4677
  br label %return, !dbg !4677

if.end152:                                        ; preds = %land.lhs.true148, %land.lhs.true143, %while.end
  %122 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4678
  store %struct.basic_block_def* %122, %struct.basic_block_def** %join_bb, align 8, !dbg !4679
  store %struct.basic_block_def* null, %struct.basic_block_def** %else_bb, align 8, !dbg !4680
  br label %if.end154, !dbg !4681

if.else153:                                       ; preds = %if.then125
  store i32 0, i32* %retval, align 4, !dbg !4682
  br label %return, !dbg !4682

if.end154:                                        ; preds = %if.end152
  br label %if.end192, !dbg !4683

if.else155:                                       ; preds = %cond.end120
  %123 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4684
  %call156 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %123), !dbg !4686
  %124 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4687
  %cmp157 = icmp eq %struct.basic_block_def* %call156, %124, !dbg !4688
  br i1 %cmp157, label %if.then159, label %if.else160, !dbg !4689

if.then159:                                       ; preds = %if.else155
  %125 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4690
  store %struct.basic_block_def* %125, %struct.basic_block_def** %join_bb, align 8, !dbg !4692
  store %struct.basic_block_def* null, %struct.basic_block_def** %else_bb, align 8, !dbg !4693
  br label %if.end191, !dbg !4694

if.else160:                                       ; preds = %if.else155
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4695
  %call161 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %126), !dbg !4697
  %conv162 = zext i8 %call161 to i32, !dbg !4697
  %tobool163 = icmp ne i32 %conv162, 0, !dbg !4697
  br i1 %tobool163, label %land.lhs.true164, label %if.else189, !dbg !4698

land.lhs.true164:                                 ; preds = %if.else160
  %127 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4699
  %call165 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %127), !dbg !4700
  %128 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4701
  %call166 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %128), !dbg !4702
  %cmp167 = icmp eq %struct.basic_block_def* %call165, %call166, !dbg !4703
  br i1 %cmp167, label %land.lhs.true169, label %if.else189, !dbg !4704

land.lhs.true169:                                 ; preds = %land.lhs.true164
  %129 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4705
  %call170 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %129), !dbg !4706
  %conv171 = zext i8 %call170 to i32, !dbg !4706
  %tobool172 = icmp ne i32 %conv171, 0, !dbg !4706
  br i1 %tobool172, label %land.lhs.true173, label %if.else189, !dbg !4707

land.lhs.true173:                                 ; preds = %land.lhs.true169
  %130 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4708
  %call174 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %130), !dbg !4709
  %flags175 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call174, i32 0, i32 7, !dbg !4710
  %131 = load i32, i32* %flags175, align 8, !dbg !4710
  %and176 = and i32 %131, 14, !dbg !4711
  %tobool177 = icmp ne i32 %and176, 0, !dbg !4711
  br i1 %tobool177, label %if.else189, label %land.lhs.true178, !dbg !4712

land.lhs.true178:                                 ; preds = %land.lhs.true173
  %132 = load i32, i32* @epilogue_completed, align 4, !dbg !4713
  %tobool179 = icmp ne i32 %132, 0, !dbg !4713
  br i1 %tobool179, label %land.lhs.true180, label %if.then187, !dbg !4714

land.lhs.true180:                                 ; preds = %land.lhs.true178
  %133 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4715
  %il181 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %133, i32 0, i32 7, !dbg !4715
  %rtl182 = bitcast %union.basic_block_il_dependent* %il181 to %struct.rtl_bb_info**, !dbg !4715
  %134 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl182, align 8, !dbg !4715
  %end_183 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %134, i32 0, i32 1, !dbg !4715
  %135 = load %struct.rtx_def*, %struct.rtx_def** %end_183, align 8, !dbg !4715
  %call184 = call zeroext i8 @tablejump_p(%struct.rtx_def* %135, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !4716
  %conv185 = zext i8 %call184 to i32, !dbg !4716
  %tobool186 = icmp ne i32 %conv185, 0, !dbg !4716
  br i1 %tobool186, label %if.else189, label %if.then187, !dbg !4717

if.then187:                                       ; preds = %land.lhs.true180, %land.lhs.true178
  %136 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4718
  %call188 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %136), !dbg !4719
  store %struct.basic_block_def* %call188, %struct.basic_block_def** %join_bb, align 8, !dbg !4720
  br label %if.end190, !dbg !4721

if.else189:                                       ; preds = %land.lhs.true180, %land.lhs.true173, %land.lhs.true169, %land.lhs.true164, %if.else160
  store i32 0, i32* %retval, align 4, !dbg !4722
  br label %return, !dbg !4722

if.end190:                                        ; preds = %if.then187
  br label %if.end191

if.end191:                                        ; preds = %if.end190, %if.then159
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end154
  %137 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !4723
  %inc193 = add nsw i32 %137, 1, !dbg !4723
  store i32 %inc193, i32* @num_possible_if_blocks, align 4, !dbg !4723
  %138 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4724
  %tobool194 = icmp ne %struct._IO_FILE* %138, null, !dbg !4724
  br i1 %tobool194, label %if.then195, label %if.end300, !dbg !4726

if.then195:                                       ; preds = %if.end192
  %139 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4727
  %140 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4729
  %tobool196 = icmp ne %struct.basic_block_def* %140, null, !dbg !4730
  %141 = zext i1 %tobool196 to i64, !dbg !4730
  %cond197 = select i1 %tobool196, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), !dbg !4730
  %142 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4731
  %pass = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %142, i32 0, i32 12, !dbg !4732
  %143 = load i32, i32* %pass, align 4, !dbg !4732
  %144 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4733
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %144, i32 0, i32 9, !dbg !4734
  %145 = load i32, i32* %index, align 8, !dbg !4734
  %146 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4735
  %il198 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %146, i32 0, i32 7, !dbg !4735
  %rtl199 = bitcast %union.basic_block_il_dependent* %il198 to %struct.rtl_bb_info**, !dbg !4735
  %147 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl199, align 8, !dbg !4735
  %head_200 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %147, i32 0, i32 0, !dbg !4735
  %148 = load %struct.rtx_def*, %struct.rtx_def** %head_200, align 8, !dbg !4735
  %tobool201 = icmp ne %struct.rtx_def* %148, null, !dbg !4735
  br i1 %tobool201, label %cond.true202, label %cond.false209, !dbg !4735

cond.true202:                                     ; preds = %if.then195
  %149 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !4736
  %il203 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %149, i32 0, i32 7, !dbg !4736
  %rtl204 = bitcast %union.basic_block_il_dependent* %il203 to %struct.rtl_bb_info**, !dbg !4736
  %150 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl204, align 8, !dbg !4736
  %head_205 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %150, i32 0, i32 0, !dbg !4736
  %151 = load %struct.rtx_def*, %struct.rtx_def** %head_205, align 8, !dbg !4736
  %u206 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %151, i32 0, i32 1, !dbg !4736
  %fld207 = bitcast %union.u* %u206 to [1 x %union.rtunion_def]*, !dbg !4736
  %arrayidx208 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld207, i64 0, i64 0, !dbg !4736
  %rt_int = bitcast %union.rtunion_def* %arrayidx208 to i32*, !dbg !4736
  %152 = load i32, i32* %rt_int, align 8, !dbg !4736
  br label %cond.end210, !dbg !4735

cond.false209:                                    ; preds = %if.then195
  br label %cond.end210, !dbg !4735

cond.end210:                                      ; preds = %cond.false209, %cond.true202
  %cond211 = phi i32 [ %152, %cond.true202 ], [ -1, %cond.false209 ], !dbg !4735
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4737
  %index212 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %153, i32 0, i32 9, !dbg !4738
  %154 = load i32, i32* %index212, align 8, !dbg !4738
  %155 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4739
  %il213 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %155, i32 0, i32 7, !dbg !4739
  %rtl214 = bitcast %union.basic_block_il_dependent* %il213 to %struct.rtl_bb_info**, !dbg !4739
  %156 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl214, align 8, !dbg !4739
  %head_215 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %156, i32 0, i32 0, !dbg !4739
  %157 = load %struct.rtx_def*, %struct.rtx_def** %head_215, align 8, !dbg !4739
  %tobool216 = icmp ne %struct.rtx_def* %157, null, !dbg !4739
  br i1 %tobool216, label %cond.true217, label %cond.false225, !dbg !4739

cond.true217:                                     ; preds = %cond.end210
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4740
  %il218 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 7, !dbg !4740
  %rtl219 = bitcast %union.basic_block_il_dependent* %il218 to %struct.rtl_bb_info**, !dbg !4740
  %159 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl219, align 8, !dbg !4740
  %head_220 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %159, i32 0, i32 0, !dbg !4740
  %160 = load %struct.rtx_def*, %struct.rtx_def** %head_220, align 8, !dbg !4740
  %u221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %160, i32 0, i32 1, !dbg !4740
  %fld222 = bitcast %union.u* %u221 to [1 x %union.rtunion_def]*, !dbg !4740
  %arrayidx223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld222, i64 0, i64 0, !dbg !4740
  %rt_int224 = bitcast %union.rtunion_def* %arrayidx223 to i32*, !dbg !4740
  %161 = load i32, i32* %rt_int224, align 8, !dbg !4740
  br label %cond.end226, !dbg !4739

cond.false225:                                    ; preds = %cond.end210
  br label %cond.end226, !dbg !4739

cond.end226:                                      ; preds = %cond.false225, %cond.true217
  %cond227 = phi i32 [ %161, %cond.true217 ], [ -1, %cond.false225 ], !dbg !4739
  %call228 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %139, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.17, i64 0, i64 0), i8* %cond197, i32 %143, i32 %145, i32 %cond211, i32 %154, i32 %cond227), !dbg !4741
  %162 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4742
  %tobool229 = icmp ne %struct.basic_block_def* %162, null, !dbg !4742
  br i1 %tobool229, label %if.then230, label %if.end248, !dbg !4744

if.then230:                                       ; preds = %cond.end226
  %163 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4745
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4746
  %index231 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %164, i32 0, i32 9, !dbg !4747
  %165 = load i32, i32* %index231, align 8, !dbg !4747
  %166 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4748
  %il232 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %166, i32 0, i32 7, !dbg !4748
  %rtl233 = bitcast %union.basic_block_il_dependent* %il232 to %struct.rtl_bb_info**, !dbg !4748
  %167 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl233, align 8, !dbg !4748
  %head_234 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %167, i32 0, i32 0, !dbg !4748
  %168 = load %struct.rtx_def*, %struct.rtx_def** %head_234, align 8, !dbg !4748
  %tobool235 = icmp ne %struct.rtx_def* %168, null, !dbg !4748
  br i1 %tobool235, label %cond.true236, label %cond.false244, !dbg !4748

cond.true236:                                     ; preds = %if.then230
  %169 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4749
  %il237 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %169, i32 0, i32 7, !dbg !4749
  %rtl238 = bitcast %union.basic_block_il_dependent* %il237 to %struct.rtl_bb_info**, !dbg !4749
  %170 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl238, align 8, !dbg !4749
  %head_239 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %170, i32 0, i32 0, !dbg !4749
  %171 = load %struct.rtx_def*, %struct.rtx_def** %head_239, align 8, !dbg !4749
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %171, i32 0, i32 1, !dbg !4749
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !4749
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 0, !dbg !4749
  %rt_int243 = bitcast %union.rtunion_def* %arrayidx242 to i32*, !dbg !4749
  %172 = load i32, i32* %rt_int243, align 8, !dbg !4749
  br label %cond.end245, !dbg !4748

cond.false244:                                    ; preds = %if.then230
  br label %cond.end245, !dbg !4748

cond.end245:                                      ; preds = %cond.false244, %cond.true236
  %cond246 = phi i32 [ %172, %cond.true236 ], [ -1, %cond.false244 ], !dbg !4748
  %call247 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %163, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.18, i64 0, i64 0), i32 %165, i32 %cond246), !dbg !4750
  br label %if.end248, !dbg !4750

if.end248:                                        ; preds = %cond.end245, %cond.end226
  %173 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4751
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4752
  %index249 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %174, i32 0, i32 9, !dbg !4753
  %175 = load i32, i32* %index249, align 8, !dbg !4753
  %176 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4754
  %il250 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %176, i32 0, i32 7, !dbg !4754
  %rtl251 = bitcast %union.basic_block_il_dependent* %il250 to %struct.rtl_bb_info**, !dbg !4754
  %177 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl251, align 8, !dbg !4754
  %head_252 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %177, i32 0, i32 0, !dbg !4754
  %178 = load %struct.rtx_def*, %struct.rtx_def** %head_252, align 8, !dbg !4754
  %tobool253 = icmp ne %struct.rtx_def* %178, null, !dbg !4754
  br i1 %tobool253, label %cond.true254, label %cond.false262, !dbg !4754

cond.true254:                                     ; preds = %if.end248
  %179 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4755
  %il255 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %179, i32 0, i32 7, !dbg !4755
  %rtl256 = bitcast %union.basic_block_il_dependent* %il255 to %struct.rtl_bb_info**, !dbg !4755
  %180 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl256, align 8, !dbg !4755
  %head_257 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %180, i32 0, i32 0, !dbg !4755
  %181 = load %struct.rtx_def*, %struct.rtx_def** %head_257, align 8, !dbg !4755
  %u258 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %181, i32 0, i32 1, !dbg !4755
  %fld259 = bitcast %union.u* %u258 to [1 x %union.rtunion_def]*, !dbg !4755
  %arrayidx260 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld259, i64 0, i64 0, !dbg !4755
  %rt_int261 = bitcast %union.rtunion_def* %arrayidx260 to i32*, !dbg !4755
  %182 = load i32, i32* %rt_int261, align 8, !dbg !4755
  br label %cond.end263, !dbg !4754

cond.false262:                                    ; preds = %if.end248
  br label %cond.end263, !dbg !4754

cond.end263:                                      ; preds = %cond.false262, %cond.true254
  %cond264 = phi i32 [ %182, %cond.true254 ], [ -1, %cond.false262 ], !dbg !4754
  %call265 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %173, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.19, i64 0, i64 0), i32 %175, i32 %cond264), !dbg !4756
  %183 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4757
  %num_multiple_test_blocks266 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %183, i32 0, i32 5, !dbg !4759
  %184 = load i32, i32* %num_multiple_test_blocks266, align 8, !dbg !4759
  %cmp267 = icmp sgt i32 %184, 0, !dbg !4760
  br i1 %cmp267, label %if.then269, label %if.end298, !dbg !4761

if.then269:                                       ; preds = %cond.end263
  %185 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4762
  %186 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4763
  %num_multiple_test_blocks270 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %186, i32 0, i32 5, !dbg !4764
  %187 = load i32, i32* %num_multiple_test_blocks270, align 8, !dbg !4764
  %188 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4765
  %and_and_p271 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %188, i32 0, i32 9, !dbg !4766
  %189 = load i32, i32* %and_and_p271, align 8, !dbg !4766
  %tobool272 = icmp ne i32 %189, 0, !dbg !4767
  %190 = zext i1 %tobool272 to i64, !dbg !4767
  %cond273 = select i1 %tobool272, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22, i64 0, i64 0), !dbg !4767
  %191 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4768
  %num_multiple_test_blocks274 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %191, i32 0, i32 5, !dbg !4769
  %192 = load i32, i32* %num_multiple_test_blocks274, align 8, !dbg !4769
  %cmp275 = icmp eq i32 %192, 1, !dbg !4770
  %193 = zext i1 %cmp275 to i64, !dbg !4771
  %cond277 = select i1 %cmp275, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23, i64 0, i64 0), !dbg !4771
  %194 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4772
  %last_test_bb278 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %194, i32 0, i32 4, !dbg !4773
  %195 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb278, align 8, !dbg !4773
  %index279 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %195, i32 0, i32 9, !dbg !4774
  %196 = load i32, i32* %index279, align 8, !dbg !4774
  %197 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4775
  %last_test_bb280 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %197, i32 0, i32 4, !dbg !4775
  %198 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb280, align 8, !dbg !4775
  %il281 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %198, i32 0, i32 7, !dbg !4775
  %rtl282 = bitcast %union.basic_block_il_dependent* %il281 to %struct.rtl_bb_info**, !dbg !4775
  %199 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl282, align 8, !dbg !4775
  %head_283 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %199, i32 0, i32 0, !dbg !4775
  %200 = load %struct.rtx_def*, %struct.rtx_def** %head_283, align 8, !dbg !4775
  %tobool284 = icmp ne %struct.rtx_def* %200, null, !dbg !4776
  br i1 %tobool284, label %cond.true285, label %cond.false294, !dbg !4776

cond.true285:                                     ; preds = %if.then269
  %201 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4777
  %last_test_bb286 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %201, i32 0, i32 4, !dbg !4777
  %202 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb286, align 8, !dbg !4777
  %il287 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %202, i32 0, i32 7, !dbg !4777
  %rtl288 = bitcast %union.basic_block_il_dependent* %il287 to %struct.rtl_bb_info**, !dbg !4777
  %203 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl288, align 8, !dbg !4777
  %head_289 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %203, i32 0, i32 0, !dbg !4777
  %204 = load %struct.rtx_def*, %struct.rtx_def** %head_289, align 8, !dbg !4777
  %u290 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %204, i32 0, i32 1, !dbg !4777
  %fld291 = bitcast %union.u* %u290 to [1 x %union.rtunion_def]*, !dbg !4777
  %arrayidx292 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld291, i64 0, i64 0, !dbg !4777
  %rt_int293 = bitcast %union.rtunion_def* %arrayidx292 to i32*, !dbg !4777
  %205 = load i32, i32* %rt_int293, align 8, !dbg !4777
  br label %cond.end295, !dbg !4776

cond.false294:                                    ; preds = %if.then269
  br label %cond.end295, !dbg !4776

cond.end295:                                      ; preds = %cond.false294, %cond.true285
  %cond296 = phi i32 [ %205, %cond.true285 ], [ -1, %cond.false294 ], !dbg !4776
  %call297 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %185, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.20, i64 0, i64 0), i32 %187, i8* %cond273, i8* %cond277, i32 %196, i32 %cond296), !dbg !4778
  br label %if.end298, !dbg !4778

if.end298:                                        ; preds = %cond.end295, %cond.end263
  %206 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4779
  %call299 = call i32 @fputc(i32 10, %struct._IO_FILE* %206), !dbg !4780
  br label %if.end300, !dbg !4781

if.end300:                                        ; preds = %if.end298, %if.end192
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4782
  store %struct.basic_block_def* %207, %struct.basic_block_def** %next, align 8, !dbg !4783
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4784
  %tobool301 = icmp ne %struct.basic_block_def* %208, null, !dbg !4784
  br i1 %tobool301, label %land.lhs.true302, label %if.end306, !dbg !4786

land.lhs.true302:                                 ; preds = %if.end300
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !4787
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %209, i32 0, i32 6, !dbg !4788
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !4788
  store %struct.basic_block_def* %210, %struct.basic_block_def** %next, align 8, !dbg !4789
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4790
  %cmp303 = icmp ne %struct.basic_block_def* %210, %211, !dbg !4791
  br i1 %cmp303, label %if.then305, label %if.end306, !dbg !4792

if.then305:                                       ; preds = %land.lhs.true302
  store i32 0, i32* %retval, align 4, !dbg !4793
  br label %return, !dbg !4793

if.end306:                                        ; preds = %land.lhs.true302, %if.end300
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %next, align 8, !dbg !4794
  %next_bb307 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %212, i32 0, i32 6, !dbg !4796
  %213 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb307, align 8, !dbg !4796
  store %struct.basic_block_def* %213, %struct.basic_block_def** %next, align 8, !dbg !4797
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4798
  %cmp308 = icmp ne %struct.basic_block_def* %213, %214, !dbg !4799
  br i1 %cmp308, label %land.lhs.true310, label %if.end319, !dbg !4800

land.lhs.true310:                                 ; preds = %if.end306
  %215 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4801
  %216 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !4802
  %add.ptr311 = getelementptr inbounds %struct.function, %struct.function* %216, i64 0, !dbg !4802
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr311, i32 0, i32 1, !dbg !4802
  %217 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !4802
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %217, i32 0, i32 1, !dbg !4802
  %218 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !4802
  %cmp312 = icmp ne %struct.basic_block_def* %215, %218, !dbg !4803
  br i1 %cmp312, label %if.then314, label %if.end319, !dbg !4804

if.then314:                                       ; preds = %land.lhs.true310
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4805
  %tobool315 = icmp ne %struct.basic_block_def* %219, null, !dbg !4805
  br i1 %tobool315, label %if.then316, label %if.else317, !dbg !4808

if.then316:                                       ; preds = %if.then314
  store %struct.basic_block_def* null, %struct.basic_block_def** %join_bb, align 8, !dbg !4809
  br label %if.end318, !dbg !4810

if.else317:                                       ; preds = %if.then314
  store i32 0, i32* %retval, align 4, !dbg !4811
  br label %return, !dbg !4811

if.end318:                                        ; preds = %if.then316
  br label %if.end319, !dbg !4812

if.end319:                                        ; preds = %if.end318, %land.lhs.true310, %if.end306
  %220 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4813
  %221 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4814
  %else_bb320 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %221, i32 0, i32 2, !dbg !4815
  store %struct.basic_block_def* %220, %struct.basic_block_def** %else_bb320, align 8, !dbg !4816
  %222 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !4817
  %223 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4818
  %join_bb321 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %223, i32 0, i32 3, !dbg !4819
  store %struct.basic_block_def* %222, %struct.basic_block_def** %join_bb321, align 8, !dbg !4820
  %224 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4821
  %call322 = call i32 @cond_exec_process_if_block(%struct.ce_if_block* %224, i32 1), !dbg !4823
  %tobool323 = icmp ne i32 %call322, 0, !dbg !4823
  br i1 %tobool323, label %if.then324, label %if.end325, !dbg !4824

if.then324:                                       ; preds = %if.end319
  store i32 1, i32* %retval, align 4, !dbg !4825
  br label %return, !dbg !4825

if.end325:                                        ; preds = %if.end319
  %225 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4826
  %num_multiple_test_blocks326 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %225, i32 0, i32 5, !dbg !4828
  %226 = load i32, i32* %num_multiple_test_blocks326, align 8, !dbg !4828
  %tobool327 = icmp ne i32 %226, 0, !dbg !4826
  br i1 %tobool327, label %if.then328, label %if.end333, !dbg !4829

if.then328:                                       ; preds = %if.end325
  call void @cancel_changes(i32 0), !dbg !4830
  %227 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !4832
  %call329 = call i32 @cond_exec_process_if_block(%struct.ce_if_block* %227, i32 0), !dbg !4834
  %tobool330 = icmp ne i32 %call329, 0, !dbg !4834
  br i1 %tobool330, label %if.then331, label %if.end332, !dbg !4835

if.then331:                                       ; preds = %if.then328
  store i32 1, i32* %retval, align 4, !dbg !4836
  br label %return, !dbg !4836

if.end332:                                        ; preds = %if.then328
  br label %if.end333, !dbg !4837

if.end333:                                        ; preds = %if.end332, %if.end325
  store i32 0, i32* %retval, align 4, !dbg !4838
  br label %return, !dbg !4838

return:                                           ; preds = %if.end333, %if.then331, %if.then324, %if.else317, %if.then305, %if.else189, %if.else153, %if.then151, %if.then112, %if.then85, %if.then73, %if.then65
  %228 = load i32, i32* %retval, align 4, !dbg !4839
  ret i32 %228, !dbg !4839
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_cond_trap(%struct.basic_block_def* %test_bb, %struct.edge_def* %then_edge, %struct.edge_def* %else_edge) #0 !dbg !4840 {
entry:
  %retval = alloca i32, align 4
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %then_edge.addr = alloca %struct.edge_def*, align 8
  %else_edge.addr = alloca %struct.edge_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %other_bb = alloca %struct.basic_block_def*, align 8
  %trap_bb = alloca %struct.basic_block_def*, align 8
  %trap = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %cond_earliest = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %lab = alloca %struct.rtx_def*, align 8
  %newjump = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !4843, metadata !DIExpression()), !dbg !4844
  store %struct.edge_def* %then_edge, %struct.edge_def** %then_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge.addr, metadata !4845, metadata !DIExpression()), !dbg !4846
  store %struct.edge_def* %else_edge, %struct.edge_def** %else_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_edge.addr, metadata !4847, metadata !DIExpression()), !dbg !4848
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !4849, metadata !DIExpression()), !dbg !4850
  %0 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4851
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !4852
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !4852
  store %struct.basic_block_def* %1, %struct.basic_block_def** %then_bb, align 8, !dbg !4850
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !4853, metadata !DIExpression()), !dbg !4854
  %2 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4855
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !4856
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !4856
  store %struct.basic_block_def* %3, %struct.basic_block_def** %else_bb, align 8, !dbg !4854
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %other_bb, metadata !4857, metadata !DIExpression()), !dbg !4858
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %trap_bb, metadata !4859, metadata !DIExpression()), !dbg !4860
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trap, metadata !4861, metadata !DIExpression()), !dbg !4862
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !4863, metadata !DIExpression()), !dbg !4864
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !4865, metadata !DIExpression()), !dbg !4866
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond_earliest, metadata !4867, metadata !DIExpression()), !dbg !4868
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !4869, metadata !DIExpression()), !dbg !4870
  call void @llvm.dbg.declare(metadata i32* %code, metadata !4871, metadata !DIExpression()), !dbg !4872
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4873
  %call = call %struct.rtx_def* @block_has_only_trap(%struct.basic_block_def* %4), !dbg !4875
  store %struct.rtx_def* %call, %struct.rtx_def** %trap, align 8, !dbg !4876
  %cmp = icmp ne %struct.rtx_def* %call, null, !dbg !4877
  br i1 %cmp, label %if.then, label %if.else, !dbg !4878

if.then:                                          ; preds = %entry
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4879
  store %struct.basic_block_def* %5, %struct.basic_block_def** %trap_bb, align 8, !dbg !4880
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4881
  store %struct.basic_block_def* %6, %struct.basic_block_def** %other_bb, align 8, !dbg !4882
  br label %if.end6, !dbg !4883

if.else:                                          ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4884
  %call2 = call %struct.rtx_def* @block_has_only_trap(%struct.basic_block_def* %7), !dbg !4886
  store %struct.rtx_def* %call2, %struct.rtx_def** %trap, align 8, !dbg !4887
  %cmp3 = icmp ne %struct.rtx_def* %call2, null, !dbg !4888
  br i1 %cmp3, label %if.then4, label %if.else5, !dbg !4889

if.then4:                                         ; preds = %if.else
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4890
  store %struct.basic_block_def* %8, %struct.basic_block_def** %trap_bb, align 8, !dbg !4891
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4892
  store %struct.basic_block_def* %9, %struct.basic_block_def** %other_bb, align 8, !dbg !4893
  br label %if.end, !dbg !4894

if.else5:                                         ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !4895
  br label %return, !dbg !4895

if.end:                                           ; preds = %if.then4
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4896
  %tobool = icmp ne %struct._IO_FILE* %10, null, !dbg !4896
  br i1 %tobool, label %if.then7, label %if.end10, !dbg !4898

if.then7:                                         ; preds = %if.end6
  %11 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !4899
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4901
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %12, i32 0, i32 9, !dbg !4902
  %13 = load i32, i32* %index, align 8, !dbg !4902
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4903
  %index8 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %14, i32 0, i32 9, !dbg !4904
  %15 = load i32, i32* %index8, align 8, !dbg !4904
  %call9 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %11, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.27, i64 0, i64 0), i32 %13, i32 %15), !dbg !4905
  br label %if.end10, !dbg !4906

if.end10:                                         ; preds = %if.then7, %if.end6
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4907
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !4907
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !4907
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !4907
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 1, !dbg !4907
  %18 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !4907
  store %struct.rtx_def* %18, %struct.rtx_def** %jump, align 8, !dbg !4908
  %19 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4909
  %call11 = call %struct.rtx_def* @noce_get_condition(%struct.rtx_def* %19, %struct.rtx_def** %cond_earliest, i8 zeroext 0), !dbg !4910
  store %struct.rtx_def* %call11, %struct.rtx_def** %cond, align 8, !dbg !4911
  %20 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4912
  %tobool12 = icmp ne %struct.rtx_def* %20, null, !dbg !4912
  br i1 %tobool12, label %if.end14, label %if.then13, !dbg !4914

if.then13:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4, !dbg !4915
  br label %return, !dbg !4915

if.end14:                                         ; preds = %if.end10
  %21 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4916
  %call15 = call i32 @onlyjump_p(%struct.rtx_def* %21), !dbg !4918
  %tobool16 = icmp ne i32 %call15, 0, !dbg !4918
  br i1 %tobool16, label %if.end18, label %if.then17, !dbg !4919

if.then17:                                        ; preds = %if.end14
  store i32 0, i32* %retval, align 4, !dbg !4920
  br label %return, !dbg !4920

if.end18:                                         ; preds = %if.end14
  %22 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4921
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !4921
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !4921
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !4921
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !4921
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !4921
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !4921
  %bf.load = load i32, i32* %24, align 8, !dbg !4921
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !4921
  %bf.clear = and i32 %bf.lshr, 255, !dbg !4921
  %cmp19 = icmp eq i32 %bf.clear, 1, !dbg !4923
  br i1 %cmp19, label %if.then20, label %if.end21, !dbg !4924

if.then20:                                        ; preds = %if.end18
  store i32 0, i32* %retval, align 4, !dbg !4925
  br label %return, !dbg !4925

if.end21:                                         ; preds = %if.end18
  %25 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4926
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !4926
  %bf.load22 = load i32, i32* %26, align 8, !dbg !4926
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !4926
  store i32 %bf.clear23, i32* %code, align 4, !dbg !4927
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4928
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4930
  %cmp24 = icmp eq %struct.basic_block_def* %27, %28, !dbg !4931
  br i1 %cmp24, label %if.then25, label %if.end30, !dbg !4932

if.then25:                                        ; preds = %if.end21
  %29 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4933
  %30 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4935
  %call26 = call i32 @reversed_comparison_code(%struct.rtx_def* %29, %struct.rtx_def* %30), !dbg !4936
  store i32 %call26, i32* %code, align 4, !dbg !4937
  %31 = load i32, i32* %code, align 4, !dbg !4938
  %cmp27 = icmp eq i32 %31, 0, !dbg !4940
  br i1 %cmp27, label %if.then28, label %if.end29, !dbg !4941

if.then28:                                        ; preds = %if.then25
  store i32 0, i32* %retval, align 4, !dbg !4942
  br label %return, !dbg !4942

if.end29:                                         ; preds = %if.then25
  br label %if.end30, !dbg !4943

if.end30:                                         ; preds = %if.end29, %if.end21
  %32 = load i32, i32* %code, align 4, !dbg !4944
  %33 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4945
  %u31 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !4945
  %fld32 = bitcast %union.u* %u31 to [1 x %union.rtunion_def]*, !dbg !4945
  %arrayidx33 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld32, i64 0, i64 0, !dbg !4945
  %rt_rtx34 = bitcast %union.rtunion_def* %arrayidx33 to %struct.rtx_def**, !dbg !4945
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx34, align 8, !dbg !4945
  %call35 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %34), !dbg !4946
  %35 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !4947
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !4947
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !4947
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 1, !dbg !4947
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !4947
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !4947
  %call40 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %36), !dbg !4948
  %37 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !4949
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !4949
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !4949
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 5, !dbg !4949
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !4949
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !4949
  %u45 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %38, i32 0, i32 1, !dbg !4949
  %fld46 = bitcast %union.u* %u45 to [1 x %union.rtunion_def]*, !dbg !4949
  %arrayidx47 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld46, i64 0, i64 1, !dbg !4949
  %rt_rtx48 = bitcast %union.rtunion_def* %arrayidx47 to %struct.rtx_def**, !dbg !4949
  %39 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx48, align 8, !dbg !4949
  %call49 = call %struct.rtx_def* @gen_cond_trap(i32 %32, %struct.rtx_def* %call35, %struct.rtx_def* %call40, %struct.rtx_def* %39), !dbg !4950
  store %struct.rtx_def* %call49, %struct.rtx_def** %seq, align 8, !dbg !4951
  %40 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4952
  %cmp50 = icmp eq %struct.rtx_def* %40, null, !dbg !4954
  br i1 %cmp50, label %if.then51, label %if.end52, !dbg !4955

if.then51:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4, !dbg !4956
  br label %return, !dbg !4956

if.end52:                                         ; preds = %if.end30
  %41 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !4957
  %42 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !4958
  %43 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !4959
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !4959
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !4959
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 4, !dbg !4959
  %rt_int = bitcast %union.rtunion_def* %arrayidx55 to i32*, !dbg !4959
  %44 = load i32, i32* %rt_int, align 8, !dbg !4959
  %call56 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %41, %struct.rtx_def* %42, i32 %44), !dbg !4960
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4961
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4962
  %cmp57 = icmp eq %struct.basic_block_def* %45, %46, !dbg !4963
  br i1 %cmp57, label %cond.true, label %cond.false, !dbg !4961

cond.true:                                        ; preds = %if.end52
  %47 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !4964
  br label %cond.end, !dbg !4961

cond.false:                                       ; preds = %if.end52
  %48 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !4965
  br label %cond.end, !dbg !4961

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond58 = phi %struct.edge_def* [ %47, %cond.true ], [ %48, %cond.false ], !dbg !4961
  call void @remove_edge(%struct.edge_def* %cond58), !dbg !4966
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4967
  call void @df_set_bb_dirty(%struct.basic_block_def* %49), !dbg !4968
  %50 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !4969
  call void @df_set_bb_dirty(%struct.basic_block_def* %50), !dbg !4970
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !4971
  call void @df_set_bb_dirty(%struct.basic_block_def* %51), !dbg !4972
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4973
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %52, i32 0, i32 0, !dbg !4973
  %53 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !4973
  %tobool59 = icmp ne %struct.VEC_edge_gc* %53, null, !dbg !4973
  br i1 %tobool59, label %cond.true60, label %cond.false62, !dbg !4973

cond.true60:                                      ; preds = %cond.end
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4973
  %preds61 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %54, i32 0, i32 0, !dbg !4973
  %55 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds61, align 8, !dbg !4973
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %55, i32 0, i32 0, !dbg !4973
  br label %cond.end63, !dbg !4973

cond.false62:                                     ; preds = %cond.end
  br label %cond.end63, !dbg !4973

cond.end63:                                       ; preds = %cond.false62, %cond.true60
  %cond64 = phi %struct.VEC_edge_base* [ %base, %cond.true60 ], [ null, %cond.false62 ], !dbg !4973
  %call65 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond64), !dbg !4973
  %cmp66 = icmp eq i32 %call65, 0, !dbg !4975
  br i1 %cmp66, label %if.then67, label %if.end68, !dbg !4976

if.then67:                                        ; preds = %cond.end63
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %trap_bb, align 8, !dbg !4977
  call void @delete_basic_block(%struct.basic_block_def* %56), !dbg !4979
  %57 = load i32, i32* @num_true_changes, align 4, !dbg !4980
  %inc = add nsw i32 %57, 1, !dbg !4980
  store i32 %inc, i32* @num_true_changes, align 4, !dbg !4980
  br label %if.end68, !dbg !4981

if.end68:                                         ; preds = %if.then67, %cond.end63
  %call69 = call i32 @current_ir_type(), !dbg !4982
  %cmp70 = icmp eq i32 %call69, 2, !dbg !4984
  br i1 %cmp70, label %if.then71, label %if.else73, !dbg !4985

if.then71:                                        ; preds = %if.end68
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !4986
  %call72 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %58), !dbg !4987
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call72, i32 0, i32 7, !dbg !4988
  %59 = load i32, i32* %flags, align 8, !dbg !4989
  %or = or i32 %59, 1, !dbg !4989
  store i32 %or, i32* %flags, align 8, !dbg !4989
  br label %if.end89, !dbg !4987

if.else73:                                        ; preds = %if.end68
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %lab, metadata !4990, metadata !DIExpression()), !dbg !4992
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %newjump, metadata !4993, metadata !DIExpression()), !dbg !4994
  %60 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4995
  %u74 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !4995
  %fld75 = bitcast %union.u* %u74 to [1 x %union.rtunion_def]*, !dbg !4995
  %arrayidx76 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld75, i64 0, i64 8, !dbg !4995
  %rt_rtx77 = bitcast %union.rtunion_def* %arrayidx76 to %struct.rtx_def**, !dbg !4995
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx77, align 8, !dbg !4995
  store %struct.rtx_def* %61, %struct.rtx_def** %lab, align 8, !dbg !4996
  %62 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !4997
  %call78 = call %struct.rtx_def* @gen_jump(%struct.rtx_def* %62), !dbg !4998
  %63 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !4999
  %call79 = call %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def* %call78, %struct.rtx_def* %63), !dbg !5000
  store %struct.rtx_def* %call79, %struct.rtx_def** %newjump, align 8, !dbg !5001
  %64 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !5002
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %64, i32 0, i32 1, !dbg !5002
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !5002
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 4, !dbg !5002
  %rt_int83 = bitcast %union.rtunion_def* %arrayidx82 to i32*, !dbg !5002
  %65 = load i32, i32* %rt_int83, align 8, !dbg !5003
  %add = add nsw i32 %65, 1, !dbg !5003
  store i32 %add, i32* %rt_int83, align 8, !dbg !5003
  %66 = load %struct.rtx_def*, %struct.rtx_def** %lab, align 8, !dbg !5004
  %67 = load %struct.rtx_def*, %struct.rtx_def** %newjump, align 8, !dbg !5005
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !5005
  %fld85 = bitcast %union.u* %u84 to [1 x %union.rtunion_def]*, !dbg !5005
  %arrayidx86 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld85, i64 0, i64 8, !dbg !5005
  %rt_rtx87 = bitcast %union.rtunion_def* %arrayidx86 to %struct.rtx_def**, !dbg !5005
  store %struct.rtx_def* %66, %struct.rtx_def** %rt_rtx87, align 8, !dbg !5006
  %68 = load %struct.rtx_def*, %struct.rtx_def** %newjump, align 8, !dbg !5007
  %call88 = call %struct.rtx_def* @emit_barrier_after(%struct.rtx_def* %68), !dbg !5008
  br label %if.end89

if.end89:                                         ; preds = %if.else73, %if.then71
  %69 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5009
  %call90 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %69), !dbg !5010
  %70 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5011
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !5013
  %call91 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %70, %struct.basic_block_def* %71), !dbg !5014
  %tobool92 = icmp ne i8 %call91, 0, !dbg !5014
  br i1 %tobool92, label %if.then93, label %if.end95, !dbg !5015

if.then93:                                        ; preds = %if.end89
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5016
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb, align 8, !dbg !5018
  call void @merge_blocks(%struct.basic_block_def* %72, %struct.basic_block_def* %73), !dbg !5019
  %74 = load i32, i32* @num_true_changes, align 4, !dbg !5020
  %inc94 = add nsw i32 %74, 1, !dbg !5020
  store i32 %inc94, i32* @num_true_changes, align 4, !dbg !5020
  br label %if.end95, !dbg !5021

if.end95:                                         ; preds = %if.then93, %if.end89
  %75 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !5022
  %inc96 = add nsw i32 %75, 1, !dbg !5022
  store i32 %inc96, i32* @num_updated_if_blocks, align 4, !dbg !5022
  store i32 1, i32* %retval, align 4, !dbg !5023
  br label %return, !dbg !5023

return:                                           ; preds = %if.end95, %if.then51, %if.then28, %if.then20, %if.then17, %if.then13, %if.else5
  %76 = load i32, i32* %retval, align 4, !dbg !5024
  ret i32 %76, !dbg !5024
}

declare dso_local i32 @dom_info_state(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_if_case_1(%struct.basic_block_def* %test_bb, %struct.edge_def* %then_edge, %struct.edge_def* %else_edge) #0 !dbg !5025 {
entry:
  %retval = alloca i32, align 4
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %then_edge.addr = alloca %struct.edge_def*, align 8
  %else_edge.addr = alloca %struct.edge_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %new_bb = alloca %struct.basic_block_def*, align 8
  %then_bb_index = alloca i32, align 4
  %bb_ = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !5026, metadata !DIExpression()), !dbg !5027
  store %struct.edge_def* %then_edge, %struct.edge_def** %then_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge.addr, metadata !5028, metadata !DIExpression()), !dbg !5029
  store %struct.edge_def* %else_edge, %struct.edge_def** %else_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_edge.addr, metadata !5030, metadata !DIExpression()), !dbg !5031
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !5032, metadata !DIExpression()), !dbg !5033
  %0 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !5034
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !5035
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5035
  store %struct.basic_block_def* %1, %struct.basic_block_def** %then_bb, align 8, !dbg !5033
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !5036, metadata !DIExpression()), !dbg !5037
  %2 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !5038
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !5039
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !5039
  store %struct.basic_block_def* %3, %struct.basic_block_def** %else_bb, align 8, !dbg !5037
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_bb, metadata !5040, metadata !DIExpression()), !dbg !5041
  call void @llvm.dbg.declare(metadata i32* %then_bb_index, metadata !5042, metadata !DIExpression()), !dbg !5043
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5044
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5044
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5044
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5044
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !5044
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5044
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !5044
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !5046

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5047
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !5047
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !5047
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !5047
  %end_4 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !5047
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_4, align 8, !dbg !5047
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 29, %struct.rtx_def* null), !dbg !5048
  %tobool5 = icmp ne %struct.rtx_def* %call, null, !dbg !5048
  br i1 %tobool5, label %if.then, label %lor.lhs.false, !dbg !5049

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5050
  %il6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !5050
  %rtl7 = bitcast %union.basic_block_il_dependent* %il6 to %struct.rtl_bb_info**, !dbg !5050
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl7, align 8, !dbg !5050
  %end_8 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !5050
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_8, align 8, !dbg !5050
  %tobool9 = icmp ne %struct.rtx_def* %12, null, !dbg !5050
  br i1 %tobool9, label %land.lhs.true10, label %lor.lhs.false16, !dbg !5051

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5052
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5052
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !5052
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !5052
  %end_13 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !5052
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_13, align 8, !dbg !5052
  %call14 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %15, i32 29, %struct.rtx_def* null), !dbg !5053
  %tobool15 = icmp ne %struct.rtx_def* %call14, null, !dbg !5053
  br i1 %tobool15, label %if.then, label %lor.lhs.false16, !dbg !5054

lor.lhs.false16:                                  ; preds = %land.lhs.true10, %lor.lhs.false
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5055
  %il17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !5055
  %rtl18 = bitcast %union.basic_block_il_dependent* %il17 to %struct.rtl_bb_info**, !dbg !5055
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl18, align 8, !dbg !5055
  %end_19 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 1, !dbg !5055
  %18 = load %struct.rtx_def*, %struct.rtx_def** %end_19, align 8, !dbg !5055
  %tobool20 = icmp ne %struct.rtx_def* %18, null, !dbg !5055
  br i1 %tobool20, label %land.lhs.true21, label %if.end, !dbg !5056

land.lhs.true21:                                  ; preds = %lor.lhs.false16
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5057
  %il22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !5057
  %rtl23 = bitcast %union.basic_block_il_dependent* %il22 to %struct.rtl_bb_info**, !dbg !5057
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl23, align 8, !dbg !5057
  %end_24 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !5057
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_24, align 8, !dbg !5057
  %call25 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %21, i32 29, %struct.rtx_def* null), !dbg !5058
  %tobool26 = icmp ne %struct.rtx_def* %call25, null, !dbg !5058
  br i1 %tobool26, label %if.then, label %if.end, !dbg !5059

if.then:                                          ; preds = %land.lhs.true21, %land.lhs.true10, %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !5060
  br label %return, !dbg !5060

if.end:                                           ; preds = %land.lhs.true21, %lor.lhs.false16
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5061
  %call27 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %22), !dbg !5063
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5063
  br i1 %tobool28, label %if.end30, label %if.then29, !dbg !5064

if.then29:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5065
  br label %return, !dbg !5065

if.end30:                                         ; preds = %if.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5066
  %call31 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %23), !dbg !5068
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call31, i32 0, i32 7, !dbg !5069
  %24 = load i32, i32* %flags, align 8, !dbg !5069
  %and = and i32 %24, 15, !dbg !5070
  %tobool32 = icmp ne i32 %and, 0, !dbg !5070
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !5071

if.then33:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4, !dbg !5072
  br label %return, !dbg !5072

if.end34:                                         ; preds = %if.end30
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5073
  %call35 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %25), !dbg !5075
  %tobool36 = icmp ne i8 %call35, 0, !dbg !5075
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !5076

if.then37:                                        ; preds = %if.end34
  store i32 0, i32* %retval, align 4, !dbg !5077
  br label %return, !dbg !5077

if.end38:                                         ; preds = %if.end34
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5078
  %call39 = call zeroext i8 @forwarder_block_p(%struct.basic_block_def* %26), !dbg !5080
  %tobool40 = icmp ne i8 %call39, 0, !dbg !5080
  br i1 %tobool40, label %if.then41, label %if.end42, !dbg !5081

if.then41:                                        ; preds = %if.end38
  store i32 0, i32* %retval, align 4, !dbg !5082
  br label %return, !dbg !5082

if.end42:                                         ; preds = %if.end38
  %27 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !5083
  %inc = add nsw i32 %27, 1, !dbg !5083
  store i32 %inc, i32* @num_possible_if_blocks, align 4, !dbg !5083
  %28 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5084
  %tobool43 = icmp ne %struct._IO_FILE* %28, null, !dbg !5084
  br i1 %tobool43, label %if.then44, label %if.end47, !dbg !5086

if.then44:                                        ; preds = %if.end42
  %29 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5087
  %30 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5088
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %30, i32 0, i32 9, !dbg !5089
  %31 = load i32, i32* %index, align 8, !dbg !5089
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5090
  %index45 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 9, !dbg !5091
  %33 = load i32, i32* %index45, align 8, !dbg !5091
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %29, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.28, i64 0, i64 0), i32 %31, i32 %33), !dbg !5092
  br label %if.end47, !dbg !5092

if.end47:                                         ; preds = %if.then44, %if.end42
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5093
  %35 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !5095
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %35, i32 0, i32 0, !dbg !5095
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5095
  %call48 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %36), !dbg !5095
  %tobool49 = icmp ne i8 %call48, 0, !dbg !5095
  br i1 %tobool49, label %cond.false, label %cond.true, !dbg !5095

cond.true:                                        ; preds = %if.end47
  br label %cond.end54, !dbg !5095

cond.false:                                       ; preds = %if.end47
  %37 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !5095
  %call50 = call zeroext i8 @predictable_edge_p(%struct.edge_def* %37), !dbg !5095
  %conv = zext i8 %call50 to i32, !dbg !5095
  %tobool51 = icmp ne i32 %conv, 0, !dbg !5095
  br i1 %tobool51, label %cond.true52, label %cond.false53, !dbg !5095

cond.true52:                                      ; preds = %cond.false
  br label %cond.end, !dbg !5095

cond.false53:                                     ; preds = %cond.false
  %38 = load i32, i32* @ix86_branch_cost, align 4, !dbg !5095
  br label %cond.end, !dbg !5095

cond.end:                                         ; preds = %cond.false53, %cond.true52
  %cond = phi i32 [ 0, %cond.true52 ], [ %38, %cond.false53 ], !dbg !5095
  br label %cond.end54, !dbg !5095

cond.end54:                                       ; preds = %cond.end, %cond.true
  %cond55 = phi i32 [ 2, %cond.true ], [ %cond, %cond.end ], !dbg !5095
  %mul = mul nsw i32 %cond55, 4, !dbg !5095
  %call56 = call zeroext i8 @cheap_bb_rtx_cost_p(%struct.basic_block_def* %34, i32 %mul), !dbg !5096
  %tobool57 = icmp ne i8 %call56, 0, !dbg !5096
  br i1 %tobool57, label %if.end59, label %if.then58, !dbg !5097

if.then58:                                        ; preds = %cond.end54
  store i32 0, i32* %retval, align 4, !dbg !5098
  br label %return, !dbg !5098

if.end59:                                         ; preds = %cond.end54
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5099
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5101
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5102
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5103
  %call60 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %42), !dbg !5104
  %call61 = call i32 @dead_or_predicable(%struct.basic_block_def* %39, %struct.basic_block_def* %40, %struct.basic_block_def* %41, %struct.basic_block_def* %call60, i32 1), !dbg !5105
  %tobool62 = icmp ne i32 %call61, 0, !dbg !5105
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !5106

if.then63:                                        ; preds = %if.end59
  store i32 0, i32* %retval, align 4, !dbg !5107
  br label %return, !dbg !5107

if.end64:                                         ; preds = %if.end59
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5108
  %next_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %43, i32 0, i32 6, !dbg !5110
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %next_bb, align 8, !dbg !5110
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5111
  %cmp = icmp eq %struct.basic_block_def* %44, %45, !dbg !5112
  br i1 %cmp, label %land.lhs.true66, label %if.else, !dbg !5113

land.lhs.true66:                                  ; preds = %if.end64
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5114
  %prev_bb = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %46, i32 0, i32 5, !dbg !5115
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %prev_bb, align 8, !dbg !5115
  %48 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5116
  %cmp67 = icmp eq %struct.basic_block_def* %47, %48, !dbg !5117
  br i1 %cmp67, label %land.lhs.true69, label %if.else, !dbg !5118

land.lhs.true69:                                  ; preds = %land.lhs.true66
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5119
  %50 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5120
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %50, i64 0, !dbg !5120
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !5120
  %51 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !5120
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %51, i32 0, i32 1, !dbg !5120
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !5120
  %cmp70 = icmp ne %struct.basic_block_def* %49, %52, !dbg !5121
  br i1 %cmp70, label %if.then72, label %if.else, !dbg !5122

if.then72:                                        ; preds = %land.lhs.true69
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !5123
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5123
  %tobool73 = icmp ne %struct.VEC_edge_gc* %54, null, !dbg !5123
  br i1 %tobool73, label %cond.true74, label %cond.false76, !dbg !5123

cond.true74:                                      ; preds = %if.then72
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs75 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %55, i32 0, i32 1, !dbg !5123
  %56 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs75, align 8, !dbg !5123
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %56, i32 0, i32 0, !dbg !5123
  br label %cond.end77, !dbg !5123

cond.false76:                                     ; preds = %if.then72
  br label %cond.end77, !dbg !5123

cond.end77:                                       ; preds = %cond.false76, %cond.true74
  %cond78 = phi %struct.VEC_edge_base* [ %base, %cond.true74 ], [ null, %cond.false76 ], !dbg !5123
  %call79 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond78, i32 0), !dbg !5123
  %flags80 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call79, i32 0, i32 7, !dbg !5123
  %57 = load i32, i32* %flags80, align 8, !dbg !5123
  %and81 = and i32 %57, 1, !dbg !5123
  %tobool82 = icmp ne i32 %and81, 0, !dbg !5123
  br i1 %tobool82, label %cond.true83, label %cond.false93, !dbg !5123

cond.true83:                                      ; preds = %cond.end77
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs84 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %58, i32 0, i32 1, !dbg !5123
  %59 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs84, align 8, !dbg !5123
  %tobool85 = icmp ne %struct.VEC_edge_gc* %59, null, !dbg !5123
  br i1 %tobool85, label %cond.true86, label %cond.false89, !dbg !5123

cond.true86:                                      ; preds = %cond.true83
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs87 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %60, i32 0, i32 1, !dbg !5123
  %61 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs87, align 8, !dbg !5123
  %base88 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %61, i32 0, i32 0, !dbg !5123
  br label %cond.end90, !dbg !5123

cond.false89:                                     ; preds = %cond.true83
  br label %cond.end90, !dbg !5123

cond.end90:                                       ; preds = %cond.false89, %cond.true86
  %cond91 = phi %struct.VEC_edge_base* [ %base88, %cond.true86 ], [ null, %cond.false89 ], !dbg !5123
  %call92 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond91, i32 0), !dbg !5123
  br label %cond.end103, !dbg !5123

cond.false93:                                     ; preds = %cond.end77
  %62 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs94 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %62, i32 0, i32 1, !dbg !5123
  %63 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs94, align 8, !dbg !5123
  %tobool95 = icmp ne %struct.VEC_edge_gc* %63, null, !dbg !5123
  br i1 %tobool95, label %cond.true96, label %cond.false99, !dbg !5123

cond.true96:                                      ; preds = %cond.false93
  %64 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5123
  %succs97 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %64, i32 0, i32 1, !dbg !5123
  %65 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs97, align 8, !dbg !5123
  %base98 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %65, i32 0, i32 0, !dbg !5123
  br label %cond.end100, !dbg !5123

cond.false99:                                     ; preds = %cond.false93
  br label %cond.end100, !dbg !5123

cond.end100:                                      ; preds = %cond.false99, %cond.true96
  %cond101 = phi %struct.VEC_edge_base* [ %base98, %cond.true96 ], [ null, %cond.false99 ], !dbg !5123
  %call102 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond101, i32 1), !dbg !5123
  br label %cond.end103, !dbg !5123

cond.end103:                                      ; preds = %cond.end100, %cond.end90
  %cond104 = phi %struct.edge_def* [ %call92, %cond.end90 ], [ %call102, %cond.end100 ], !dbg !5123
  %66 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5125
  call void @redirect_edge_succ(%struct.edge_def* %cond104, %struct.basic_block_def* %66), !dbg !5126
  store %struct.basic_block_def* null, %struct.basic_block_def** %new_bb, align 8, !dbg !5127
  br label %if.end140, !dbg !5128

if.else:                                          ; preds = %land.lhs.true69, %land.lhs.true66, %if.end64
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs105 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %67, i32 0, i32 1, !dbg !5129
  %68 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs105, align 8, !dbg !5129
  %tobool106 = icmp ne %struct.VEC_edge_gc* %68, null, !dbg !5129
  br i1 %tobool106, label %cond.true107, label %cond.false110, !dbg !5129

cond.true107:                                     ; preds = %if.else
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs108 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 1, !dbg !5129
  %70 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs108, align 8, !dbg !5129
  %base109 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %70, i32 0, i32 0, !dbg !5129
  br label %cond.end111, !dbg !5129

cond.false110:                                    ; preds = %if.else
  br label %cond.end111, !dbg !5129

cond.end111:                                      ; preds = %cond.false110, %cond.true107
  %cond112 = phi %struct.VEC_edge_base* [ %base109, %cond.true107 ], [ null, %cond.false110 ], !dbg !5129
  %call113 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond112, i32 0), !dbg !5129
  %flags114 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call113, i32 0, i32 7, !dbg !5129
  %71 = load i32, i32* %flags114, align 8, !dbg !5129
  %and115 = and i32 %71, 1, !dbg !5129
  %tobool116 = icmp ne i32 %and115, 0, !dbg !5129
  br i1 %tobool116, label %cond.true117, label %cond.false127, !dbg !5129

cond.true117:                                     ; preds = %cond.end111
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs118 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %72, i32 0, i32 1, !dbg !5129
  %73 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs118, align 8, !dbg !5129
  %tobool119 = icmp ne %struct.VEC_edge_gc* %73, null, !dbg !5129
  br i1 %tobool119, label %cond.true120, label %cond.false123, !dbg !5129

cond.true120:                                     ; preds = %cond.true117
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs121 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %74, i32 0, i32 1, !dbg !5129
  %75 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs121, align 8, !dbg !5129
  %base122 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %75, i32 0, i32 0, !dbg !5129
  br label %cond.end124, !dbg !5129

cond.false123:                                    ; preds = %cond.true117
  br label %cond.end124, !dbg !5129

cond.end124:                                      ; preds = %cond.false123, %cond.true120
  %cond125 = phi %struct.VEC_edge_base* [ %base122, %cond.true120 ], [ null, %cond.false123 ], !dbg !5129
  %call126 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond125, i32 0), !dbg !5129
  br label %cond.end137, !dbg !5129

cond.false127:                                    ; preds = %cond.end111
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs128 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 1, !dbg !5129
  %77 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs128, align 8, !dbg !5129
  %tobool129 = icmp ne %struct.VEC_edge_gc* %77, null, !dbg !5129
  br i1 %tobool129, label %cond.true130, label %cond.false133, !dbg !5129

cond.true130:                                     ; preds = %cond.false127
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5129
  %succs131 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %78, i32 0, i32 1, !dbg !5129
  %79 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs131, align 8, !dbg !5129
  %base132 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %79, i32 0, i32 0, !dbg !5129
  br label %cond.end134, !dbg !5129

cond.false133:                                    ; preds = %cond.false127
  br label %cond.end134, !dbg !5129

cond.end134:                                      ; preds = %cond.false133, %cond.true130
  %cond135 = phi %struct.VEC_edge_base* [ %base132, %cond.true130 ], [ null, %cond.false133 ], !dbg !5129
  %call136 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond135, i32 1), !dbg !5129
  br label %cond.end137, !dbg !5129

cond.end137:                                      ; preds = %cond.end134, %cond.end124
  %cond138 = phi %struct.edge_def* [ %call126, %cond.end124 ], [ %call136, %cond.end134 ], !dbg !5129
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5130
  %call139 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %cond138, %struct.basic_block_def* %80), !dbg !5131
  store %struct.basic_block_def* %call139, %struct.basic_block_def** %new_bb, align 8, !dbg !5132
  br label %if.end140

if.end140:                                        ; preds = %cond.end137, %cond.end103
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5133
  call void @df_set_bb_dirty(%struct.basic_block_def* %81), !dbg !5134
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5135
  call void @df_set_bb_dirty(%struct.basic_block_def* %82), !dbg !5136
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5137
  %index141 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %83, i32 0, i32 9, !dbg !5138
  %84 = load i32, i32* %index141, align 8, !dbg !5138
  store i32 %84, i32* %then_bb_index, align 4, !dbg !5139
  %85 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5140
  call void @delete_basic_block(%struct.basic_block_def* %85), !dbg !5141
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5142
  %tobool142 = icmp ne %struct.basic_block_def* %86, null, !dbg !5142
  br i1 %tobool142, label %if.then143, label %if.end149, !dbg !5144

if.then143:                                       ; preds = %if.end140
  %87 = load i32, i32* %then_bb_index, align 4, !dbg !5145
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5147
  call void @df_bb_replace(i32 %87, %struct.basic_block_def* %88), !dbg !5148
  br label %do.body, !dbg !5149

do.body:                                          ; preds = %if.then143
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb_, metadata !5150, metadata !DIExpression()), !dbg !5152
  %89 = load %struct.basic_block_def*, %struct.basic_block_def** %new_bb, align 8, !dbg !5152
  store %struct.basic_block_def* %89, %struct.basic_block_def** %bb_, align 8, !dbg !5152
  %90 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5152
  %flags144 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %90, i32 0, i32 13, !dbg !5152
  %91 = load i32, i32* %flags144, align 8, !dbg !5152
  %and145 = and i32 %91, -97, !dbg !5152
  %92 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5152
  %flags146 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %92, i32 0, i32 13, !dbg !5152
  %93 = load i32, i32* %flags146, align 8, !dbg !5152
  %and147 = and i32 %93, 96, !dbg !5152
  %or = or i32 %and145, %and147, !dbg !5152
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %bb_, align 8, !dbg !5152
  %flags148 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %94, i32 0, i32 13, !dbg !5152
  store i32 %or, i32* %flags148, align 8, !dbg !5152
  br label %do.end, !dbg !5152

do.end:                                           ; preds = %do.body
  br label %if.end149, !dbg !5153

if.end149:                                        ; preds = %do.end, %if.end140
  %95 = load i32, i32* @num_true_changes, align 4, !dbg !5154
  %inc150 = add nsw i32 %95, 1, !dbg !5154
  store i32 %inc150, i32* @num_true_changes, align 4, !dbg !5154
  %96 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !5155
  %inc151 = add nsw i32 %96, 1, !dbg !5155
  store i32 %inc151, i32* @num_updated_if_blocks, align 4, !dbg !5155
  store i32 1, i32* %retval, align 4, !dbg !5156
  br label %return, !dbg !5156

return:                                           ; preds = %if.end149, %if.then63, %if.then58, %if.then41, %if.then37, %if.then33, %if.then29, %if.then
  %97 = load i32, i32* %retval, align 4, !dbg !5157
  ret i32 %97, !dbg !5157
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_if_case_2(%struct.basic_block_def* %test_bb, %struct.edge_def* %then_edge, %struct.edge_def* %else_edge) #0 !dbg !5158 {
entry:
  %retval = alloca i32, align 4
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %then_edge.addr = alloca %struct.edge_def*, align 8
  %else_edge.addr = alloca %struct.edge_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %else_succ = alloca %struct.edge_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !5159, metadata !DIExpression()), !dbg !5160
  store %struct.edge_def* %then_edge, %struct.edge_def** %then_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %then_edge.addr, metadata !5161, metadata !DIExpression()), !dbg !5162
  store %struct.edge_def* %else_edge, %struct.edge_def** %else_edge.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_edge.addr, metadata !5163, metadata !DIExpression()), !dbg !5164
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !5165, metadata !DIExpression()), !dbg !5166
  %0 = load %struct.edge_def*, %struct.edge_def** %then_edge.addr, align 8, !dbg !5167
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %0, i32 0, i32 1, !dbg !5168
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5168
  store %struct.basic_block_def* %1, %struct.basic_block_def** %then_bb, align 8, !dbg !5166
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !5169, metadata !DIExpression()), !dbg !5170
  %2 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !5171
  %dest1 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %2, i32 0, i32 1, !dbg !5172
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %dest1, align 8, !dbg !5172
  store %struct.basic_block_def* %3, %struct.basic_block_def** %else_bb, align 8, !dbg !5170
  call void @llvm.dbg.declare(metadata %struct.edge_def** %else_succ, metadata !5173, metadata !DIExpression()), !dbg !5174
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5175, metadata !DIExpression()), !dbg !5176
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5177
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 7, !dbg !5177
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5177
  %5 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5177
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %5, i32 0, i32 1, !dbg !5177
  %6 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5177
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !5177
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false, !dbg !5179

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5180
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !5180
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !5180
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !5180
  %end_4 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !5180
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_4, align 8, !dbg !5180
  %call = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %9, i32 29, %struct.rtx_def* null), !dbg !5181
  %tobool5 = icmp ne %struct.rtx_def* %call, null, !dbg !5181
  br i1 %tobool5, label %if.then, label %lor.lhs.false, !dbg !5182

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5183
  %il6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !5183
  %rtl7 = bitcast %union.basic_block_il_dependent* %il6 to %struct.rtl_bb_info**, !dbg !5183
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl7, align 8, !dbg !5183
  %end_8 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !5183
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_8, align 8, !dbg !5183
  %tobool9 = icmp ne %struct.rtx_def* %12, null, !dbg !5183
  br i1 %tobool9, label %land.lhs.true10, label %lor.lhs.false16, !dbg !5184

land.lhs.true10:                                  ; preds = %lor.lhs.false
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5185
  %il11 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %13, i32 0, i32 7, !dbg !5185
  %rtl12 = bitcast %union.basic_block_il_dependent* %il11 to %struct.rtl_bb_info**, !dbg !5185
  %14 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl12, align 8, !dbg !5185
  %end_13 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %14, i32 0, i32 1, !dbg !5185
  %15 = load %struct.rtx_def*, %struct.rtx_def** %end_13, align 8, !dbg !5185
  %call14 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %15, i32 29, %struct.rtx_def* null), !dbg !5186
  %tobool15 = icmp ne %struct.rtx_def* %call14, null, !dbg !5186
  br i1 %tobool15, label %if.then, label %lor.lhs.false16, !dbg !5187

lor.lhs.false16:                                  ; preds = %land.lhs.true10, %lor.lhs.false
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5188
  %il17 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %16, i32 0, i32 7, !dbg !5188
  %rtl18 = bitcast %union.basic_block_il_dependent* %il17 to %struct.rtl_bb_info**, !dbg !5188
  %17 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl18, align 8, !dbg !5188
  %end_19 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %17, i32 0, i32 1, !dbg !5188
  %18 = load %struct.rtx_def*, %struct.rtx_def** %end_19, align 8, !dbg !5188
  %tobool20 = icmp ne %struct.rtx_def* %18, null, !dbg !5188
  br i1 %tobool20, label %land.lhs.true21, label %if.end, !dbg !5189

land.lhs.true21:                                  ; preds = %lor.lhs.false16
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5190
  %il22 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %19, i32 0, i32 7, !dbg !5190
  %rtl23 = bitcast %union.basic_block_il_dependent* %il22 to %struct.rtl_bb_info**, !dbg !5190
  %20 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl23, align 8, !dbg !5190
  %end_24 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %20, i32 0, i32 1, !dbg !5190
  %21 = load %struct.rtx_def*, %struct.rtx_def** %end_24, align 8, !dbg !5190
  %call25 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %21, i32 29, %struct.rtx_def* null), !dbg !5191
  %tobool26 = icmp ne %struct.rtx_def* %call25, null, !dbg !5191
  br i1 %tobool26, label %if.then, label %if.end, !dbg !5192

if.then:                                          ; preds = %land.lhs.true21, %land.lhs.true10, %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !5193
  br label %return, !dbg !5193

if.end:                                           ; preds = %land.lhs.true21, %lor.lhs.false16
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5194
  %call27 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %22), !dbg !5196
  %tobool28 = icmp ne i8 %call27, 0, !dbg !5196
  br i1 %tobool28, label %if.else, label %if.then29, !dbg !5197

if.then29:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !5198
  br label %return, !dbg !5198

if.else:                                          ; preds = %if.end
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5199
  %call30 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %23), !dbg !5200
  store %struct.edge_def* %call30, %struct.edge_def** %else_succ, align 8, !dbg !5201
  br label %if.end31

if.end31:                                         ; preds = %if.else
  %24 = load %struct.edge_def*, %struct.edge_def** %else_succ, align 8, !dbg !5202
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %24, i32 0, i32 7, !dbg !5204
  %25 = load i32, i32* %flags, align 8, !dbg !5204
  %and = and i32 %25, 14, !dbg !5205
  %tobool32 = icmp ne i32 %and, 0, !dbg !5205
  br i1 %tobool32, label %if.then33, label %if.end34, !dbg !5206

if.then33:                                        ; preds = %if.end31
  store i32 0, i32* %retval, align 4, !dbg !5207
  br label %return, !dbg !5207

if.end34:                                         ; preds = %if.end31
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5208
  %call35 = call zeroext i8 @single_pred_p(%struct.basic_block_def* %26), !dbg !5210
  %tobool36 = icmp ne i8 %call35, 0, !dbg !5210
  br i1 %tobool36, label %if.end38, label %if.then37, !dbg !5211

if.then37:                                        ; preds = %if.end34
  store i32 0, i32* %retval, align 4, !dbg !5212
  br label %return, !dbg !5212

if.end38:                                         ; preds = %if.end34
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5213
  %index = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %27, i32 0, i32 9, !dbg !5215
  %28 = load i32, i32* %index, align 8, !dbg !5215
  %cmp = icmp slt i32 %28, 2, !dbg !5216
  br i1 %cmp, label %if.then39, label %if.end40, !dbg !5217

if.then39:                                        ; preds = %if.end38
  store i32 0, i32* %retval, align 4, !dbg !5218
  br label %return, !dbg !5218

if.end40:                                         ; preds = %if.end38
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5219
  %il41 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %29, i32 0, i32 7, !dbg !5219
  %rtl42 = bitcast %union.basic_block_il_dependent* %il41 to %struct.rtl_bb_info**, !dbg !5219
  %30 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl42, align 8, !dbg !5219
  %end_43 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %30, i32 0, i32 1, !dbg !5219
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end_43, align 8, !dbg !5219
  %call44 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %31, i32 13, %struct.rtx_def* null), !dbg !5220
  store %struct.rtx_def* %call44, %struct.rtx_def** %note, align 8, !dbg !5221
  %32 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5222
  %tobool45 = icmp ne %struct.rtx_def* %32, null, !dbg !5222
  br i1 %tobool45, label %land.lhs.true46, label %if.else51, !dbg !5224

land.lhs.true46:                                  ; preds = %if.end40
  %33 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5225
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5225
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5225
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !5225
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5225
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5225
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5225
  %hwint = bitcast %union.u* %u47 to [1 x i64]*, !dbg !5225
  %arrayidx48 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !5225
  %35 = load i64, i64* %arrayidx48, align 8, !dbg !5225
  %cmp49 = icmp sge i64 %35, 5000, !dbg !5226
  br i1 %cmp49, label %if.then50, label %if.else51, !dbg !5227

if.then50:                                        ; preds = %land.lhs.true46
  br label %if.end62, !dbg !5227

if.else51:                                        ; preds = %land.lhs.true46, %if.end40
  %36 = load %struct.edge_def*, %struct.edge_def** %else_succ, align 8, !dbg !5228
  %dest52 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %36, i32 0, i32 1, !dbg !5230
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %dest52, align 8, !dbg !5230
  %index53 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 9, !dbg !5231
  %38 = load i32, i32* %index53, align 8, !dbg !5231
  %cmp54 = icmp slt i32 %38, 2, !dbg !5232
  br i1 %cmp54, label %if.then59, label %lor.lhs.false55, !dbg !5233

lor.lhs.false55:                                  ; preds = %if.else51
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5234
  %40 = load %struct.edge_def*, %struct.edge_def** %else_succ, align 8, !dbg !5235
  %dest56 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %40, i32 0, i32 1, !dbg !5236
  %41 = load %struct.basic_block_def*, %struct.basic_block_def** %dest56, align 8, !dbg !5236
  %call57 = call zeroext i8 @dominated_by_p(i32 2, %struct.basic_block_def* %39, %struct.basic_block_def* %41), !dbg !5237
  %conv = zext i8 %call57 to i32, !dbg !5237
  %tobool58 = icmp ne i32 %conv, 0, !dbg !5237
  br i1 %tobool58, label %if.then59, label %if.else60, !dbg !5238

if.then59:                                        ; preds = %lor.lhs.false55, %if.else51
  br label %if.end61, !dbg !5238

if.else60:                                        ; preds = %lor.lhs.false55
  store i32 0, i32* %retval, align 4, !dbg !5239
  br label %return, !dbg !5239

if.end61:                                         ; preds = %if.then59
  br label %if.end62

if.end62:                                         ; preds = %if.end61, %if.then50
  %42 = load i32, i32* @num_possible_if_blocks, align 4, !dbg !5240
  %inc = add nsw i32 %42, 1, !dbg !5240
  store i32 %inc, i32* @num_possible_if_blocks, align 4, !dbg !5240
  %43 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5241
  %tobool63 = icmp ne %struct._IO_FILE* %43, null, !dbg !5241
  br i1 %tobool63, label %if.then64, label %if.end68, !dbg !5243

if.then64:                                        ; preds = %if.end62
  %44 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !5244
  %45 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5245
  %index65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %45, i32 0, i32 9, !dbg !5246
  %46 = load i32, i32* %index65, align 8, !dbg !5246
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5247
  %index66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %47, i32 0, i32 9, !dbg !5248
  %48 = load i32, i32* %index66, align 8, !dbg !5248
  %call67 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %44, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.29, i64 0, i64 0), i32 %46, i32 %48), !dbg !5249
  br label %if.end68, !dbg !5249

if.end68:                                         ; preds = %if.then64, %if.end62
  %49 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5250
  %50 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !5252
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %50, i32 0, i32 0, !dbg !5252
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !5252
  %call69 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %51), !dbg !5252
  %tobool70 = icmp ne i8 %call69, 0, !dbg !5252
  br i1 %tobool70, label %cond.false, label %cond.true, !dbg !5252

cond.true:                                        ; preds = %if.end68
  br label %cond.end76, !dbg !5252

cond.false:                                       ; preds = %if.end68
  %52 = load %struct.edge_def*, %struct.edge_def** %else_edge.addr, align 8, !dbg !5252
  %call71 = call zeroext i8 @predictable_edge_p(%struct.edge_def* %52), !dbg !5252
  %conv72 = zext i8 %call71 to i32, !dbg !5252
  %tobool73 = icmp ne i32 %conv72, 0, !dbg !5252
  br i1 %tobool73, label %cond.true74, label %cond.false75, !dbg !5252

cond.true74:                                      ; preds = %cond.false
  br label %cond.end, !dbg !5252

cond.false75:                                     ; preds = %cond.false
  %53 = load i32, i32* @ix86_branch_cost, align 4, !dbg !5252
  br label %cond.end, !dbg !5252

cond.end:                                         ; preds = %cond.false75, %cond.true74
  %cond = phi i32 [ 0, %cond.true74 ], [ %53, %cond.false75 ], !dbg !5252
  br label %cond.end76, !dbg !5252

cond.end76:                                       ; preds = %cond.end, %cond.true
  %cond77 = phi i32 [ 2, %cond.true ], [ %cond, %cond.end ], !dbg !5252
  %mul = mul nsw i32 %cond77, 4, !dbg !5252
  %call78 = call zeroext i8 @cheap_bb_rtx_cost_p(%struct.basic_block_def* %49, i32 %mul), !dbg !5253
  %tobool79 = icmp ne i8 %call78, 0, !dbg !5253
  br i1 %tobool79, label %if.end81, label %if.then80, !dbg !5254

if.then80:                                        ; preds = %cond.end76
  store i32 0, i32* %retval, align 4, !dbg !5255
  br label %return, !dbg !5255

if.end81:                                         ; preds = %cond.end76
  %54 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5256
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5258
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5259
  %57 = load %struct.edge_def*, %struct.edge_def** %else_succ, align 8, !dbg !5260
  %dest82 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %57, i32 0, i32 1, !dbg !5261
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %dest82, align 8, !dbg !5261
  %call83 = call i32 @dead_or_predicable(%struct.basic_block_def* %54, %struct.basic_block_def* %55, %struct.basic_block_def* %56, %struct.basic_block_def* %58, i32 0), !dbg !5262
  %tobool84 = icmp ne i32 %call83, 0, !dbg !5262
  br i1 %tobool84, label %if.end86, label %if.then85, !dbg !5263

if.then85:                                        ; preds = %if.end81
  store i32 0, i32* %retval, align 4, !dbg !5264
  br label %return, !dbg !5264

if.end86:                                         ; preds = %if.end81
  %59 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !5265
  call void @df_set_bb_dirty(%struct.basic_block_def* %59), !dbg !5266
  %60 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5267
  call void @df_set_bb_dirty(%struct.basic_block_def* %60), !dbg !5268
  %61 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5269
  call void @delete_basic_block(%struct.basic_block_def* %61), !dbg !5270
  %62 = load i32, i32* @num_true_changes, align 4, !dbg !5271
  %inc87 = add nsw i32 %62, 1, !dbg !5271
  store i32 %inc87, i32* @num_true_changes, align 4, !dbg !5271
  %63 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !5272
  %inc88 = add nsw i32 %63, 1, !dbg !5272
  store i32 %inc88, i32* @num_updated_if_blocks, align 4, !dbg !5272
  store i32 1, i32* %retval, align 4, !dbg !5273
  br label %return, !dbg !5273

return:                                           ; preds = %if.end86, %if.then85, %if.then80, %if.else60, %if.then39, %if.then37, %if.then33, %if.then29, %if.then
  %64 = load i32, i32* %retval, align 4, !dbg !5274
  ret i32 %64, !dbg !5274
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.label(metadata) #2

declare dso_local void @fancy_abort(i8*, i32, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_pred_p(%struct.basic_block_def* %bb) #0 !dbg !5275 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5281, metadata !DIExpression()), !dbg !5282
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5283
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 0, !dbg !5283
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !5283
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5283
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5283

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5283
  %preds1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 0, !dbg !5283
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds1, align 8, !dbg !5283
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5283
  br label %cond.end, !dbg !5283

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5283

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5283
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5283
  %cmp = icmp eq i32 %call, 1, !dbg !5284
  %conv = zext i1 %cmp to i32, !dbg !5284
  %conv2 = trunc i32 %conv to i8, !dbg !5283
  ret i8 %conv2, !dbg !5285
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @single_succ_p(%struct.basic_block_def* %bb) #0 !dbg !5286 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5287, metadata !DIExpression()), !dbg !5288
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5289
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !5289
  %1 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5289
  %tobool = icmp ne %struct.VEC_edge_gc* %1, null, !dbg !5289
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !5289

cond.true:                                        ; preds = %entry
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5289
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !5289
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !5289
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %3, i32 0, i32 0, !dbg !5289
  br label %cond.end, !dbg !5289

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5289

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5289
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !5289
  %cmp = icmp eq i32 %call, 1, !dbg !5290
  %conv = zext i1 %cmp to i32, !dbg !5290
  %conv2 = trunc i32 %conv to i8, !dbg !5289
  ret i8 %conv2, !dbg !5291
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_succ(%struct.basic_block_def* %bb) #0 !dbg !5292 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5295, metadata !DIExpression()), !dbg !5296
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5297
  %call = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %0), !dbg !5298
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 1, !dbg !5299
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !5299
  ret %struct.basic_block_def* %1, !dbg !5300
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %bb) #0 !dbg !5301 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !5304, metadata !DIExpression()), !dbg !5305
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5306
  %call = call zeroext i8 @single_succ_p(%struct.basic_block_def* %0), !dbg !5306
  %tobool = icmp ne i8 %call, 0, !dbg !5306
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !5306

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 645, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5306
  br label %cond.end, !dbg !5306

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !5306

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !5306
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5307
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 1, !dbg !5307
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !5307
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !5307
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !5307

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !5307
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 1, !dbg !5307
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !5307
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !5307
  br label %cond.end5, !dbg !5307

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !5307

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !5307
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !5307
  ret %struct.edge_def* %call7, !dbg !5308
}

declare dso_local i32 @onlyjump_p(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @noce_get_condition(%struct.rtx_def* %jump, %struct.rtx_def** %earliest, i8 zeroext %then_else_reversed) #0 !dbg !5309 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %earliest.addr = alloca %struct.rtx_def**, align 8
  %then_else_reversed.addr = alloca i8, align 1
  %cond = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %reverse = alloca i8, align 1
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !5312, metadata !DIExpression()), !dbg !5313
  store %struct.rtx_def** %earliest, %struct.rtx_def*** %earliest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %earliest.addr, metadata !5314, metadata !DIExpression()), !dbg !5315
  store i8 %then_else_reversed, i8* %then_else_reversed.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %then_else_reversed.addr, metadata !5316, metadata !DIExpression()), !dbg !5317
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !5318, metadata !DIExpression()), !dbg !5319
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !5320, metadata !DIExpression()), !dbg !5321
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !5322, metadata !DIExpression()), !dbg !5323
  call void @llvm.dbg.declare(metadata i8* %reverse, metadata !5324, metadata !DIExpression()), !dbg !5325
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5326
  %call = call i32 @any_condjump_p(%struct.rtx_def* %0), !dbg !5328
  %tobool = icmp ne i32 %call, 0, !dbg !5328
  br i1 %tobool, label %if.end, label %if.then, !dbg !5329

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !5330
  br label %return, !dbg !5330

if.end:                                           ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5331
  %call1 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %1), !dbg !5332
  store %struct.rtx_def* %call1, %struct.rtx_def** %set, align 8, !dbg !5333
  %2 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5334
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !5334
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5334
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !5334
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5334
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5334
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !5334
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !5334
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 2, !dbg !5334
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !5334
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !5334
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !5334
  %bf.load = load i32, i32* %5, align 8, !dbg !5334
  %bf.clear = and i32 %bf.load, 65535, !dbg !5334
  %cmp = icmp eq i32 %bf.clear, 44, !dbg !5335
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !5336

land.rhs:                                         ; preds = %if.end
  %6 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5337
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !5337
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !5337
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 1, !dbg !5337
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !5337
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !5337
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %7, i32 0, i32 1, !dbg !5337
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !5337
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 2, !dbg !5337
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !5337
  %8 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !5337
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !5337
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !5337
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !5337
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !5337
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !5337
  %10 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5338
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !5338
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !5338
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 8, !dbg !5338
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !5338
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !5338
  %cmp22 = icmp eq %struct.rtx_def* %9, %11, !dbg !5339
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %12 = phi i1 [ false, %if.end ], [ %cmp22, %land.rhs ], !dbg !5340
  %land.ext = zext i1 %12 to i32, !dbg !5336
  %conv = trunc i32 %land.ext to i8, !dbg !5341
  store i8 %conv, i8* %reverse, align 1, !dbg !5342
  %13 = load i8, i8* %then_else_reversed.addr, align 1, !dbg !5343
  %tobool23 = icmp ne i8 %13, 0, !dbg !5343
  br i1 %tobool23, label %if.then24, label %if.end27, !dbg !5345

if.then24:                                        ; preds = %land.end
  %14 = load i8, i8* %reverse, align 1, !dbg !5346
  %tobool25 = icmp ne i8 %14, 0, !dbg !5347
  %lnot = xor i1 %tobool25, true, !dbg !5347
  %lnot.ext = zext i1 %lnot to i32, !dbg !5347
  %conv26 = trunc i32 %lnot.ext to i8, !dbg !5347
  store i8 %conv26, i8* %reverse, align 1, !dbg !5348
  br label %if.end27, !dbg !5349

if.end27:                                         ; preds = %if.then24, %land.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !5350
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !5350
  %fld29 = bitcast %union.u* %u28 to [1 x %union.rtunion_def]*, !dbg !5350
  %arrayidx30 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld29, i64 0, i64 1, !dbg !5350
  %rt_rtx31 = bitcast %union.rtunion_def* %arrayidx30 to %struct.rtx_def**, !dbg !5350
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx31, align 8, !dbg !5350
  %u32 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !5350
  %fld33 = bitcast %union.u* %u32 to [1 x %union.rtunion_def]*, !dbg !5350
  %arrayidx34 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld33, i64 0, i64 0, !dbg !5350
  %rt_rtx35 = bitcast %union.rtunion_def* %arrayidx34 to %struct.rtx_def**, !dbg !5350
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx35, align 8, !dbg !5350
  store %struct.rtx_def* %17, %struct.rtx_def** %cond, align 8, !dbg !5351
  %18 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5352
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !5352
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !5352
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !5352
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !5352
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !5352
  store %struct.rtx_def* %19, %struct.rtx_def** %tmp, align 8, !dbg !5353
  %20 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5354
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5354
  %bf.load40 = load i32, i32* %21, align 8, !dbg !5354
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !5354
  %cmp42 = icmp eq i32 %bf.clear41, 37, !dbg !5354
  br i1 %cmp42, label %land.lhs.true, label %if.end65, !dbg !5356

land.lhs.true:                                    ; preds = %if.end27
  %22 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5357
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5357
  %bf.load44 = load i32, i32* %23, align 8, !dbg !5357
  %bf.lshr = lshr i32 %bf.load44, 16, !dbg !5357
  %bf.clear45 = and i32 %bf.lshr, 255, !dbg !5357
  %idxprom = zext i32 %bf.clear45 to i64, !dbg !5357
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !5357
  %24 = load i8, i8* %arrayidx46, align 1, !dbg !5357
  %conv47 = zext i8 %24 to i32, !dbg !5357
  %cmp48 = icmp eq i32 %conv47, 2, !dbg !5358
  br i1 %cmp48, label %if.then50, label %if.end65, !dbg !5359

if.then50:                                        ; preds = %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5360
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !5362
  store %struct.rtx_def* %25, %struct.rtx_def** %26, align 8, !dbg !5363
  %27 = load i8, i8* %reverse, align 1, !dbg !5364
  %tobool51 = icmp ne i8 %27, 0, !dbg !5364
  br i1 %tobool51, label %if.then52, label %if.end64, !dbg !5366

if.then52:                                        ; preds = %if.then50
  %28 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5367
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !5367
  %bf.load53 = load i32, i32* %29, align 8, !dbg !5367
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !5367
  %call55 = call i32 @reverse_condition(i32 %bf.clear54), !dbg !5367
  %30 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5367
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !5367
  %bf.load56 = load i32, i32* %31, align 8, !dbg !5367
  %bf.lshr57 = lshr i32 %bf.load56, 16, !dbg !5367
  %bf.clear58 = and i32 %bf.lshr57, 255, !dbg !5367
  %32 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !5367
  %33 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5367
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !5367
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !5367
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !5367
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !5367
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !5367
  %call63 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %call55, i32 %bf.clear58, %struct.rtx_def* %32, %struct.rtx_def* %34), !dbg !5367
  store %struct.rtx_def* %call63, %struct.rtx_def** %cond, align 8, !dbg !5368
  br label %if.end64, !dbg !5369

if.end64:                                         ; preds = %if.then52, %if.then50
  %35 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5370
  store %struct.rtx_def* %35, %struct.rtx_def** %retval, align 8, !dbg !5371
  br label %return, !dbg !5371

if.end65:                                         ; preds = %land.lhs.true, %if.end27
  %36 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !5372
  %37 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5373
  %38 = load i8, i8* %reverse, align 1, !dbg !5374
  %conv66 = zext i8 %38 to i32, !dbg !5374
  %39 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !5375
  %call67 = call %struct.rtx_def* @canonicalize_condition(%struct.rtx_def* %36, %struct.rtx_def* %37, i32 %conv66, %struct.rtx_def** %39, %struct.rtx_def* null, i32 0, i32 1), !dbg !5376
  store %struct.rtx_def* %call67, %struct.rtx_def** %retval, align 8, !dbg !5377
  br label %return, !dbg !5377

return:                                           ; preds = %if.end65, %if.end64, %if.then
  %40 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !5378
  ret %struct.rtx_def* %40, !dbg !5378
}

declare dso_local zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def*) #1

declare dso_local zeroext i8 @predictable_edge_p(%struct.edge_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_process_if_block(%struct.noce_if_info* %if_info) #0 !dbg !5379 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %test_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %insn_a = alloca %struct.rtx_def*, align 8
  %insn_b = alloca %struct.rtx_def*, align 8
  %set_a = alloca %struct.rtx_def*, align 8
  %set_b = alloca %struct.rtx_def*, align 8
  %orig_x = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !5383, metadata !DIExpression()), !dbg !5384
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb, metadata !5385, metadata !DIExpression()), !dbg !5386
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5387
  %test_bb1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 0, !dbg !5388
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb1, align 8, !dbg !5388
  store %struct.basic_block_def* %1, %struct.basic_block_def** %test_bb, align 8, !dbg !5386
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !5389, metadata !DIExpression()), !dbg !5390
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5391
  %then_bb2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 1, !dbg !5392
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb2, align 8, !dbg !5392
  store %struct.basic_block_def* %3, %struct.basic_block_def** %then_bb, align 8, !dbg !5390
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !5393, metadata !DIExpression()), !dbg !5394
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5395
  %else_bb3 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 2, !dbg !5396
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb3, align 8, !dbg !5396
  store %struct.basic_block_def* %5, %struct.basic_block_def** %else_bb, align 8, !dbg !5394
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !5397, metadata !DIExpression()), !dbg !5398
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5399
  %join_bb4 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 3, !dbg !5400
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb4, align 8, !dbg !5400
  store %struct.basic_block_def* %7, %struct.basic_block_def** %join_bb, align 8, !dbg !5398
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !5401, metadata !DIExpression()), !dbg !5402
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5403
  %jump5 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 4, !dbg !5404
  %9 = load %struct.rtx_def*, %struct.rtx_def** %jump5, align 8, !dbg !5404
  store %struct.rtx_def* %9, %struct.rtx_def** %jump, align 8, !dbg !5402
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !5405, metadata !DIExpression()), !dbg !5406
  %10 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5407
  %cond6 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %10, i32 0, i32 5, !dbg !5408
  %11 = load %struct.rtx_def*, %struct.rtx_def** %cond6, align 8, !dbg !5408
  store %struct.rtx_def* %11, %struct.rtx_def** %cond, align 8, !dbg !5406
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_a, metadata !5409, metadata !DIExpression()), !dbg !5410
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_b, metadata !5411, metadata !DIExpression()), !dbg !5412
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set_a, metadata !5413, metadata !DIExpression()), !dbg !5414
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set_b, metadata !5415, metadata !DIExpression()), !dbg !5416
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_x, metadata !5417, metadata !DIExpression()), !dbg !5418
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !5419, metadata !DIExpression()), !dbg !5420
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !5421, metadata !DIExpression()), !dbg !5422
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b, metadata !5423, metadata !DIExpression()), !dbg !5424
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5425
  %call = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %12), !dbg !5426
  store %struct.rtx_def* %call, %struct.rtx_def** %insn_a, align 8, !dbg !5427
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5428
  %tobool = icmp ne %struct.rtx_def* %13, null, !dbg !5428
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5430

lor.lhs.false:                                    ; preds = %entry
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5431
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5432
  %call7 = call %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %15, i32 0), !dbg !5433
  %cmp = icmp ne %struct.rtx_def* %14, %call7, !dbg !5434
  br i1 %cmp, label %if.then, label %lor.lhs.false8, !dbg !5435

lor.lhs.false8:                                   ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !5436
  %bf.load = load i32, i32* %17, align 8, !dbg !5436
  %bf.clear = and i32 %bf.load, 65535, !dbg !5436
  %cmp9 = icmp eq i32 %bf.clear, 8, !dbg !5436
  br i1 %cmp9, label %cond.true, label %lor.lhs.false10, !dbg !5436

lor.lhs.false10:                                  ; preds = %lor.lhs.false8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !5436
  %bf.load11 = load i32, i32* %19, align 8, !dbg !5436
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !5436
  %cmp13 = icmp eq i32 %bf.clear12, 7, !dbg !5436
  br i1 %cmp13, label %cond.true, label %lor.lhs.false14, !dbg !5436

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !5436
  %bf.load15 = load i32, i32* %21, align 8, !dbg !5436
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !5436
  %cmp17 = icmp eq i32 %bf.clear16, 9, !dbg !5436
  br i1 %cmp17, label %cond.true, label %lor.lhs.false18, !dbg !5436

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !5436
  %bf.load19 = load i32, i32* %23, align 8, !dbg !5436
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !5436
  %cmp21 = icmp eq i32 %bf.clear20, 10, !dbg !5436
  br i1 %cmp21, label %cond.true, label %cond.false36, !dbg !5436

cond.true:                                        ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false8
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !5436
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !5436
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !5436
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !5436
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !5436
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !5436
  %bf.load22 = load i32, i32* %26, align 8, !dbg !5436
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !5436
  %cmp24 = icmp eq i32 %bf.clear23, 23, !dbg !5436
  br i1 %cmp24, label %cond.true25, label %cond.false, !dbg !5436

cond.true25:                                      ; preds = %cond.true
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !5436
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !5436
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 5, !dbg !5436
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !5436
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !5436
  br label %cond.end, !dbg !5436

cond.false:                                       ; preds = %cond.true
  %29 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5436
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !5436
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !5436
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 5, !dbg !5436
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !5436
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !5436
  %call34 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %29, %struct.rtx_def* %31), !dbg !5436
  br label %cond.end, !dbg !5436

cond.end:                                         ; preds = %cond.false, %cond.true25
  %cond35 = phi %struct.rtx_def* [ %28, %cond.true25 ], [ %call34, %cond.false ], !dbg !5436
  br label %cond.end37, !dbg !5436

cond.false36:                                     ; preds = %lor.lhs.false18
  br label %cond.end37, !dbg !5436

cond.end37:                                       ; preds = %cond.false36, %cond.end
  %cond38 = phi %struct.rtx_def* [ %cond35, %cond.end ], [ null, %cond.false36 ], !dbg !5436
  store %struct.rtx_def* %cond38, %struct.rtx_def** %set_a, align 8, !dbg !5437
  %cmp39 = icmp eq %struct.rtx_def* %cond38, null, !dbg !5438
  br i1 %cmp39, label %if.then, label %if.end, !dbg !5439

if.then:                                          ; preds = %cond.end37, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !5440
  br label %return, !dbg !5440

if.end:                                           ; preds = %cond.end37
  %32 = load %struct.rtx_def*, %struct.rtx_def** %set_a, align 8, !dbg !5441
  %u40 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !5441
  %fld41 = bitcast %union.u* %u40 to [1 x %union.rtunion_def]*, !dbg !5441
  %arrayidx42 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld41, i64 0, i64 0, !dbg !5441
  %rt_rtx43 = bitcast %union.rtunion_def* %arrayidx42 to %struct.rtx_def**, !dbg !5441
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx43, align 8, !dbg !5441
  store %struct.rtx_def* %33, %struct.rtx_def** %x, align 8, !dbg !5442
  %34 = load %struct.rtx_def*, %struct.rtx_def** %set_a, align 8, !dbg !5443
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !5443
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !5443
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 1, !dbg !5443
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !5443
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !5443
  store %struct.rtx_def* %35, %struct.rtx_def** %a, align 8, !dbg !5444
  store %struct.rtx_def* null, %struct.rtx_def** %set_b, align 8, !dbg !5445
  %36 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5446
  %tobool48 = icmp ne %struct.basic_block_def* %36, null, !dbg !5446
  br i1 %tobool48, label %if.then49, label %if.else, !dbg !5448

if.then49:                                        ; preds = %if.end
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5449
  %call50 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %37), !dbg !5451
  store %struct.rtx_def* %call50, %struct.rtx_def** %insn_b, align 8, !dbg !5452
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5453
  %tobool51 = icmp ne %struct.rtx_def* %38, null, !dbg !5453
  br i1 %tobool51, label %lor.lhs.false52, label %if.then103, !dbg !5455

lor.lhs.false52:                                  ; preds = %if.then49
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5456
  %40 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5457
  %call53 = call %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %40, i32 0), !dbg !5458
  %cmp54 = icmp ne %struct.rtx_def* %39, %call53, !dbg !5459
  br i1 %cmp54, label %if.then103, label %lor.lhs.false55, !dbg !5460

lor.lhs.false55:                                  ; preds = %lor.lhs.false52
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !5461
  %bf.load56 = load i32, i32* %42, align 8, !dbg !5461
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !5461
  %cmp58 = icmp eq i32 %bf.clear57, 8, !dbg !5461
  br i1 %cmp58, label %cond.true71, label %lor.lhs.false59, !dbg !5461

lor.lhs.false59:                                  ; preds = %lor.lhs.false55
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !5461
  %bf.load60 = load i32, i32* %44, align 8, !dbg !5461
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !5461
  %cmp62 = icmp eq i32 %bf.clear61, 7, !dbg !5461
  br i1 %cmp62, label %cond.true71, label %lor.lhs.false63, !dbg !5461

lor.lhs.false63:                                  ; preds = %lor.lhs.false59
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !5461
  %bf.load64 = load i32, i32* %46, align 8, !dbg !5461
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !5461
  %cmp66 = icmp eq i32 %bf.clear65, 9, !dbg !5461
  br i1 %cmp66, label %cond.true71, label %lor.lhs.false67, !dbg !5461

lor.lhs.false67:                                  ; preds = %lor.lhs.false63
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5461
  %bf.load68 = load i32, i32* %48, align 8, !dbg !5461
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !5461
  %cmp70 = icmp eq i32 %bf.clear69, 10, !dbg !5461
  br i1 %cmp70, label %cond.true71, label %cond.false92, !dbg !5461

cond.true71:                                      ; preds = %lor.lhs.false67, %lor.lhs.false63, %lor.lhs.false59, %lor.lhs.false55
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !5461
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !5461
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 5, !dbg !5461
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !5461
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !5461
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !5461
  %bf.load76 = load i32, i32* %51, align 8, !dbg !5461
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !5461
  %cmp78 = icmp eq i32 %bf.clear77, 23, !dbg !5461
  br i1 %cmp78, label %cond.true79, label %cond.false84, !dbg !5461

cond.true79:                                      ; preds = %cond.true71
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !5461
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !5461
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 5, !dbg !5461
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !5461
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !5461
  br label %cond.end90, !dbg !5461

cond.false84:                                     ; preds = %cond.true71
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5461
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !5461
  %fld86 = bitcast %union.u* %u85 to [1 x %union.rtunion_def]*, !dbg !5461
  %arrayidx87 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld86, i64 0, i64 5, !dbg !5461
  %rt_rtx88 = bitcast %union.rtunion_def* %arrayidx87 to %struct.rtx_def**, !dbg !5461
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx88, align 8, !dbg !5461
  %call89 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %54, %struct.rtx_def* %56), !dbg !5461
  br label %cond.end90, !dbg !5461

cond.end90:                                       ; preds = %cond.false84, %cond.true79
  %cond91 = phi %struct.rtx_def* [ %53, %cond.true79 ], [ %call89, %cond.false84 ], !dbg !5461
  br label %cond.end93, !dbg !5461

cond.false92:                                     ; preds = %lor.lhs.false67
  br label %cond.end93, !dbg !5461

cond.end93:                                       ; preds = %cond.false92, %cond.end90
  %cond94 = phi %struct.rtx_def* [ %cond91, %cond.end90 ], [ null, %cond.false92 ], !dbg !5461
  store %struct.rtx_def* %cond94, %struct.rtx_def** %set_b, align 8, !dbg !5462
  %cmp95 = icmp eq %struct.rtx_def* %cond94, null, !dbg !5463
  br i1 %cmp95, label %if.then103, label %lor.lhs.false96, !dbg !5464

lor.lhs.false96:                                  ; preds = %cond.end93
  %57 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5465
  %58 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5466
  %u97 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !5466
  %fld98 = bitcast %union.u* %u97 to [1 x %union.rtunion_def]*, !dbg !5466
  %arrayidx99 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld98, i64 0, i64 0, !dbg !5466
  %rt_rtx100 = bitcast %union.rtunion_def* %arrayidx99 to %struct.rtx_def**, !dbg !5466
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx100, align 8, !dbg !5466
  %call101 = call i32 @rtx_equal_p(%struct.rtx_def* %57, %struct.rtx_def* %59), !dbg !5467
  %tobool102 = icmp ne i32 %call101, 0, !dbg !5467
  br i1 %tobool102, label %if.end104, label %if.then103, !dbg !5468

if.then103:                                       ; preds = %lor.lhs.false96, %cond.end93, %lor.lhs.false52, %if.then49
  store i32 0, i32* %retval, align 4, !dbg !5469
  br label %return, !dbg !5469

if.end104:                                        ; preds = %lor.lhs.false96
  br label %if.end206, !dbg !5470

if.else:                                          ; preds = %if.end
  %60 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5471
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %60, i32 0, i32 6, !dbg !5473
  %61 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !5473
  %call105 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %61), !dbg !5474
  store %struct.rtx_def* %call105, %struct.rtx_def** %insn_b, align 8, !dbg !5475
  br label %while.cond, !dbg !5476

while.cond:                                       ; preds = %while.body, %if.else
  %62 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5477
  %tobool106 = icmp ne %struct.rtx_def* %62, null, !dbg !5477
  br i1 %tobool106, label %land.rhs, label %land.end, !dbg !5478

land.rhs:                                         ; preds = %while.cond
  %63 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5479
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !5479
  %bf.load107 = load i32, i32* %64, align 8, !dbg !5479
  %bf.clear108 = and i32 %bf.load107, 65535, !dbg !5479
  %cmp109 = icmp eq i32 %bf.clear108, 7, !dbg !5479
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %65 = phi i1 [ false, %while.cond ], [ %cmp109, %land.rhs ], !dbg !5480
  br i1 %65, label %while.body, label %while.end, !dbg !5476

while.body:                                       ; preds = %land.end
  %66 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5481
  %call110 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %66), !dbg !5482
  store %struct.rtx_def* %call110, %struct.rtx_def** %insn_b, align 8, !dbg !5483
  br label %while.cond, !dbg !5476, !llvm.loop !5484

while.end:                                        ; preds = %land.end
  %67 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5486
  %tobool111 = icmp ne %struct.rtx_def* %67, null, !dbg !5486
  br i1 %tobool111, label %lor.lhs.false112, label %if.then204, !dbg !5488

lor.lhs.false112:                                 ; preds = %while.end
  %68 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5489
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !5489
  %fld114 = bitcast %union.u* %u113 to [1 x %union.rtunion_def]*, !dbg !5489
  %arrayidx115 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld114, i64 0, i64 3, !dbg !5489
  %rt_bb = bitcast %union.rtunion_def* %arrayidx115 to %struct.basic_block_def**, !dbg !5489
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !5489
  %70 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5490
  %cond_earliest116 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %70, i32 0, i32 6, !dbg !5490
  %71 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest116, align 8, !dbg !5490
  %u117 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !5490
  %fld118 = bitcast %union.u* %u117 to [1 x %union.rtunion_def]*, !dbg !5490
  %arrayidx119 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld118, i64 0, i64 3, !dbg !5490
  %rt_bb120 = bitcast %union.rtunion_def* %arrayidx119 to %struct.basic_block_def**, !dbg !5490
  %72 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb120, align 8, !dbg !5490
  %cmp121 = icmp ne %struct.basic_block_def* %69, %72, !dbg !5491
  br i1 %cmp121, label %if.then204, label %lor.lhs.false122, !dbg !5492

lor.lhs.false122:                                 ; preds = %lor.lhs.false112
  %73 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5493
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !5493
  %bf.load123 = load i32, i32* %74, align 8, !dbg !5493
  %bf.clear124 = and i32 %bf.load123, 65535, !dbg !5493
  %cmp125 = icmp eq i32 %bf.clear124, 8, !dbg !5493
  br i1 %cmp125, label %lor.lhs.false126, label %if.then204, !dbg !5494

lor.lhs.false126:                                 ; preds = %lor.lhs.false122
  %75 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !5495
  %bf.load127 = load i32, i32* %76, align 8, !dbg !5495
  %bf.clear128 = and i32 %bf.load127, 65535, !dbg !5495
  %cmp129 = icmp eq i32 %bf.clear128, 8, !dbg !5495
  br i1 %cmp129, label %cond.true142, label %lor.lhs.false130, !dbg !5495

lor.lhs.false130:                                 ; preds = %lor.lhs.false126
  %77 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %78 = bitcast %struct.rtx_def* %77 to i32*, !dbg !5495
  %bf.load131 = load i32, i32* %78, align 8, !dbg !5495
  %bf.clear132 = and i32 %bf.load131, 65535, !dbg !5495
  %cmp133 = icmp eq i32 %bf.clear132, 7, !dbg !5495
  br i1 %cmp133, label %cond.true142, label %lor.lhs.false134, !dbg !5495

lor.lhs.false134:                                 ; preds = %lor.lhs.false130
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !5495
  %bf.load135 = load i32, i32* %80, align 8, !dbg !5495
  %bf.clear136 = and i32 %bf.load135, 65535, !dbg !5495
  %cmp137 = icmp eq i32 %bf.clear136, 9, !dbg !5495
  br i1 %cmp137, label %cond.true142, label %lor.lhs.false138, !dbg !5495

lor.lhs.false138:                                 ; preds = %lor.lhs.false134
  %81 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !5495
  %bf.load139 = load i32, i32* %82, align 8, !dbg !5495
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !5495
  %cmp141 = icmp eq i32 %bf.clear140, 10, !dbg !5495
  br i1 %cmp141, label %cond.true142, label %cond.false163, !dbg !5495

cond.true142:                                     ; preds = %lor.lhs.false138, %lor.lhs.false134, %lor.lhs.false130, %lor.lhs.false126
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !5495
  %fld144 = bitcast %union.u* %u143 to [1 x %union.rtunion_def]*, !dbg !5495
  %arrayidx145 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld144, i64 0, i64 5, !dbg !5495
  %rt_rtx146 = bitcast %union.rtunion_def* %arrayidx145 to %struct.rtx_def**, !dbg !5495
  %84 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx146, align 8, !dbg !5495
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !5495
  %bf.load147 = load i32, i32* %85, align 8, !dbg !5495
  %bf.clear148 = and i32 %bf.load147, 65535, !dbg !5495
  %cmp149 = icmp eq i32 %bf.clear148, 23, !dbg !5495
  br i1 %cmp149, label %cond.true150, label %cond.false155, !dbg !5495

cond.true150:                                     ; preds = %cond.true142
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %u151 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !5495
  %fld152 = bitcast %union.u* %u151 to [1 x %union.rtunion_def]*, !dbg !5495
  %arrayidx153 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld152, i64 0, i64 5, !dbg !5495
  %rt_rtx154 = bitcast %union.rtunion_def* %arrayidx153 to %struct.rtx_def**, !dbg !5495
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx154, align 8, !dbg !5495
  br label %cond.end161, !dbg !5495

cond.false155:                                    ; preds = %cond.true142
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %89 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5495
  %u156 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !5495
  %fld157 = bitcast %union.u* %u156 to [1 x %union.rtunion_def]*, !dbg !5495
  %arrayidx158 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld157, i64 0, i64 5, !dbg !5495
  %rt_rtx159 = bitcast %union.rtunion_def* %arrayidx158 to %struct.rtx_def**, !dbg !5495
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx159, align 8, !dbg !5495
  %call160 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %88, %struct.rtx_def* %90), !dbg !5495
  br label %cond.end161, !dbg !5495

cond.end161:                                      ; preds = %cond.false155, %cond.true150
  %cond162 = phi %struct.rtx_def* [ %87, %cond.true150 ], [ %call160, %cond.false155 ], !dbg !5495
  br label %cond.end164, !dbg !5495

cond.false163:                                    ; preds = %lor.lhs.false138
  br label %cond.end164, !dbg !5495

cond.end164:                                      ; preds = %cond.false163, %cond.end161
  %cond165 = phi %struct.rtx_def* [ %cond162, %cond.end161 ], [ null, %cond.false163 ], !dbg !5495
  store %struct.rtx_def* %cond165, %struct.rtx_def** %set_b, align 8, !dbg !5496
  %cmp166 = icmp eq %struct.rtx_def* %cond165, null, !dbg !5497
  br i1 %cmp166, label %if.then204, label %lor.lhs.false167, !dbg !5498

lor.lhs.false167:                                 ; preds = %cond.end164
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5499
  %92 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5500
  %u168 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !5500
  %fld169 = bitcast %union.u* %u168 to [1 x %union.rtunion_def]*, !dbg !5500
  %arrayidx170 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld169, i64 0, i64 0, !dbg !5500
  %rt_rtx171 = bitcast %union.rtunion_def* %arrayidx170 to %struct.rtx_def**, !dbg !5500
  %93 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx171, align 8, !dbg !5500
  %call172 = call i32 @rtx_equal_p(%struct.rtx_def* %91, %struct.rtx_def* %93), !dbg !5501
  %tobool173 = icmp ne i32 %call172, 0, !dbg !5501
  br i1 %tobool173, label %lor.lhs.false174, label %if.then204, !dbg !5502

lor.lhs.false174:                                 ; preds = %lor.lhs.false167
  %94 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5503
  %u175 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !5503
  %fld176 = bitcast %union.u* %u175 to [1 x %union.rtunion_def]*, !dbg !5503
  %arrayidx177 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld176, i64 0, i64 1, !dbg !5503
  %rt_rtx178 = bitcast %union.rtunion_def* %arrayidx177 to %struct.rtx_def**, !dbg !5503
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx178, align 8, !dbg !5503
  %call179 = call i32 @noce_operand_ok(%struct.rtx_def* %95), !dbg !5504
  %tobool180 = icmp ne i32 %call179, 0, !dbg !5504
  br i1 %tobool180, label %lor.lhs.false181, label %if.then204, !dbg !5505

lor.lhs.false181:                                 ; preds = %lor.lhs.false174
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5506
  %97 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5507
  %u182 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %97, i32 0, i32 1, !dbg !5507
  %fld183 = bitcast %union.u* %u182 to [1 x %union.rtunion_def]*, !dbg !5507
  %arrayidx184 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld183, i64 0, i64 1, !dbg !5507
  %rt_rtx185 = bitcast %union.rtunion_def* %arrayidx184 to %struct.rtx_def**, !dbg !5507
  %98 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx185, align 8, !dbg !5507
  %call186 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %96, %struct.rtx_def* %98), !dbg !5508
  %tobool187 = icmp ne i32 %call186, 0, !dbg !5508
  br i1 %tobool187, label %if.then204, label %lor.lhs.false188, !dbg !5509

lor.lhs.false188:                                 ; preds = %lor.lhs.false181
  %99 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5510
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !5510
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !5510
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 1, !dbg !5510
  %rt_rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**, !dbg !5510
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx192, align 8, !dbg !5510
  %101 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5511
  %102 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5512
  %call193 = call i32 @modified_between_p(%struct.rtx_def* %100, %struct.rtx_def* %101, %struct.rtx_def* %102), !dbg !5513
  %tobool194 = icmp ne i32 %call193, 0, !dbg !5513
  br i1 %tobool194, label %if.then204, label %lor.lhs.false195, !dbg !5514

lor.lhs.false195:                                 ; preds = %lor.lhs.false188
  %103 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5515
  %104 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5516
  %call196 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %103, %struct.rtx_def* %104), !dbg !5517
  %tobool197 = icmp ne i32 %call196, 0, !dbg !5517
  br i1 %tobool197, label %if.then204, label %lor.lhs.false198, !dbg !5518

lor.lhs.false198:                                 ; preds = %lor.lhs.false195
  %105 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5519
  %106 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !5520
  %call199 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %105, %struct.rtx_def* %106), !dbg !5521
  %tobool200 = icmp ne i32 %call199, 0, !dbg !5521
  br i1 %tobool200, label %if.then204, label %lor.lhs.false201, !dbg !5522

lor.lhs.false201:                                 ; preds = %lor.lhs.false198
  %107 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5523
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5524
  %109 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5525
  %call202 = call i32 @modified_between_p(%struct.rtx_def* %107, %struct.rtx_def* %108, %struct.rtx_def* %109), !dbg !5526
  %tobool203 = icmp ne i32 %call202, 0, !dbg !5526
  br i1 %tobool203, label %if.then204, label %if.end205, !dbg !5527

if.then204:                                       ; preds = %lor.lhs.false201, %lor.lhs.false198, %lor.lhs.false195, %lor.lhs.false188, %lor.lhs.false181, %lor.lhs.false174, %lor.lhs.false167, %cond.end164, %lor.lhs.false122, %lor.lhs.false112, %while.end
  store %struct.rtx_def* null, %struct.rtx_def** %set_b, align 8, !dbg !5528
  store %struct.rtx_def* null, %struct.rtx_def** %insn_b, align 8, !dbg !5529
  br label %if.end205, !dbg !5530

if.end205:                                        ; preds = %if.then204, %lor.lhs.false201
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.end104
  %110 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5531
  %call207 = call i32 @side_effects_p(%struct.rtx_def* %110), !dbg !5533
  %tobool208 = icmp ne i32 %call207, 0, !dbg !5533
  br i1 %tobool208, label %if.then209, label %if.end210, !dbg !5534

if.then209:                                       ; preds = %if.end206
  store i32 0, i32* %retval, align 4, !dbg !5535
  br label %return, !dbg !5535

if.end210:                                        ; preds = %if.end206
  %111 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5536
  %tobool211 = icmp ne %struct.rtx_def* %111, null, !dbg !5536
  br i1 %tobool211, label %cond.true212, label %cond.false217, !dbg !5536

cond.true212:                                     ; preds = %if.end210
  %112 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5537
  %u213 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !5537
  %fld214 = bitcast %union.u* %u213 to [1 x %union.rtunion_def]*, !dbg !5537
  %arrayidx215 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld214, i64 0, i64 1, !dbg !5537
  %rt_rtx216 = bitcast %union.rtunion_def* %arrayidx215 to %struct.rtx_def**, !dbg !5537
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx216, align 8, !dbg !5537
  br label %cond.end218, !dbg !5536

cond.false217:                                    ; preds = %if.end210
  %114 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5538
  br label %cond.end218, !dbg !5536

cond.end218:                                      ; preds = %cond.false217, %cond.true212
  %cond219 = phi %struct.rtx_def* [ %113, %cond.true212 ], [ %114, %cond.false217 ], !dbg !5536
  store %struct.rtx_def* %cond219, %struct.rtx_def** %b, align 8, !dbg !5539
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5540
  store %struct.rtx_def* %115, %struct.rtx_def** %orig_x, align 8, !dbg !5541
  %116 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5542
  %117 = bitcast %struct.rtx_def* %116 to i32*, !dbg !5542
  %bf.load220 = load i32, i32* %117, align 8, !dbg !5542
  %bf.clear221 = and i32 %bf.load220, 65535, !dbg !5542
  %cmp222 = icmp eq i32 %bf.clear221, 37, !dbg !5542
  br i1 %cmp222, label %lor.lhs.false223, label %if.then226, !dbg !5544

lor.lhs.false223:                                 ; preds = %cond.end218
  %118 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5545
  %call224 = call i32 @rhs_regno(%struct.rtx_def* %118), !dbg !5545
  %cmp225 = icmp ult i32 %call224, 53, !dbg !5546
  br i1 %cmp225, label %if.then226, label %if.end267, !dbg !5547

if.then226:                                       ; preds = %lor.lhs.false223, %cond.end218
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5548
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !5548
  %bf.load227 = load i32, i32* %120, align 8, !dbg !5548
  %bf.lshr = lshr i32 %bf.load227, 16, !dbg !5548
  %bf.clear228 = and i32 %bf.lshr, 255, !dbg !5548
  %cmp229 = icmp eq i32 %bf.clear228, 1, !dbg !5551
  br i1 %cmp229, label %if.then230, label %if.end231, !dbg !5552

if.then230:                                       ; preds = %if.then226
  store i32 0, i32* %retval, align 4, !dbg !5553
  br label %return, !dbg !5553

if.end231:                                        ; preds = %if.then226
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5554
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !5554
  %bf.load232 = load i32, i32* %122, align 8, !dbg !5554
  %bf.clear233 = and i32 %bf.load232, 65535, !dbg !5554
  %cmp234 = icmp eq i32 %bf.clear233, 120, !dbg !5556
  br i1 %cmp234, label %land.lhs.true, label %if.end251, !dbg !5557

land.lhs.true:                                    ; preds = %if.end231
  %123 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5558
  %u235 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %123, i32 0, i32 1, !dbg !5558
  %fld236 = bitcast %union.u* %u235 to [1 x %union.rtunion_def]*, !dbg !5558
  %arrayidx237 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld236, i64 0, i64 1, !dbg !5558
  %rt_rtx238 = bitcast %union.rtunion_def* %arrayidx237 to %struct.rtx_def**, !dbg !5558
  %124 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx238, align 8, !dbg !5558
  %125 = bitcast %struct.rtx_def* %124 to i32*, !dbg !5558
  %bf.load239 = load i32, i32* %125, align 8, !dbg !5558
  %bf.clear240 = and i32 %bf.load239, 65535, !dbg !5558
  %cmp241 = icmp eq i32 %bf.clear240, 30, !dbg !5558
  br i1 %cmp241, label %lor.lhs.false242, label %if.then250, !dbg !5559

lor.lhs.false242:                                 ; preds = %land.lhs.true
  %126 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5560
  %u243 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %126, i32 0, i32 1, !dbg !5560
  %fld244 = bitcast %union.u* %u243 to [1 x %union.rtunion_def]*, !dbg !5560
  %arrayidx245 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld244, i64 0, i64 2, !dbg !5560
  %rt_rtx246 = bitcast %union.rtunion_def* %arrayidx245 to %struct.rtx_def**, !dbg !5560
  %127 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx246, align 8, !dbg !5560
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !5560
  %bf.load247 = load i32, i32* %128, align 8, !dbg !5560
  %bf.clear248 = and i32 %bf.load247, 65535, !dbg !5560
  %cmp249 = icmp eq i32 %bf.clear248, 30, !dbg !5560
  br i1 %cmp249, label %if.end251, label %if.then250, !dbg !5561

if.then250:                                       ; preds = %lor.lhs.false242, %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !5562
  br label %return, !dbg !5562

if.end251:                                        ; preds = %lor.lhs.false242, %if.end231
  %129 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5563
  %130 = bitcast %struct.rtx_def* %129 to i32*, !dbg !5563
  %bf.load252 = load i32, i32* %130, align 8, !dbg !5563
  %bf.clear253 = and i32 %bf.load252, 65535, !dbg !5563
  %cmp254 = icmp eq i32 %bf.clear253, 40, !dbg !5563
  br i1 %cmp254, label %cond.true255, label %cond.false260, !dbg !5563

cond.true255:                                     ; preds = %if.end251
  %131 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5563
  %u256 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !5563
  %fld257 = bitcast %union.u* %u256 to [1 x %union.rtunion_def]*, !dbg !5563
  %arrayidx258 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld257, i64 0, i64 0, !dbg !5563
  %rt_rtx259 = bitcast %union.rtunion_def* %arrayidx258 to %struct.rtx_def**, !dbg !5563
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx259, align 8, !dbg !5563
  br label %cond.end261, !dbg !5563

cond.false260:                                    ; preds = %if.end251
  %133 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5563
  br label %cond.end261, !dbg !5563

cond.end261:                                      ; preds = %cond.false260, %cond.true255
  %cond262 = phi %struct.rtx_def* [ %132, %cond.true255 ], [ %133, %cond.false260 ], !dbg !5563
  %134 = bitcast %struct.rtx_def* %cond262 to i32*, !dbg !5563
  %bf.load263 = load i32, i32* %134, align 8, !dbg !5563
  %bf.lshr264 = lshr i32 %bf.load263, 16, !dbg !5563
  %bf.clear265 = and i32 %bf.lshr264, 255, !dbg !5563
  %call266 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear265), !dbg !5564
  store %struct.rtx_def* %call266, %struct.rtx_def** %x, align 8, !dbg !5565
  br label %if.end267, !dbg !5566

if.end267:                                        ; preds = %cond.end261, %lor.lhs.false223
  %135 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !5567
  %call268 = call i32 @noce_operand_ok(%struct.rtx_def* %135), !dbg !5569
  %tobool269 = icmp ne i32 %call268, 0, !dbg !5569
  br i1 %tobool269, label %lor.lhs.false270, label %if.then273, !dbg !5570

lor.lhs.false270:                                 ; preds = %if.end267
  %136 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !5571
  %call271 = call i32 @noce_operand_ok(%struct.rtx_def* %136), !dbg !5572
  %tobool272 = icmp ne i32 %call271, 0, !dbg !5572
  br i1 %tobool272, label %if.end274, label %if.then273, !dbg !5573

if.then273:                                       ; preds = %lor.lhs.false270, %if.end267
  store i32 0, i32* %retval, align 4, !dbg !5574
  br label %return, !dbg !5574

if.end274:                                        ; preds = %lor.lhs.false270
  br label %retry, !dbg !5575

retry:                                            ; preds = %if.then382, %if.end274
  call void @llvm.dbg.label(metadata !5576), !dbg !5577
  %137 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5578
  %138 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5579
  %insn_a275 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %138, i32 0, i32 7, !dbg !5580
  store %struct.rtx_def* %137, %struct.rtx_def** %insn_a275, align 8, !dbg !5581
  %139 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5582
  %140 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5583
  %insn_b276 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %140, i32 0, i32 8, !dbg !5584
  store %struct.rtx_def* %139, %struct.rtx_def** %insn_b276, align 8, !dbg !5585
  %141 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5586
  %142 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5587
  %x277 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %142, i32 0, i32 11, !dbg !5588
  store %struct.rtx_def* %141, %struct.rtx_def** %x277, align 8, !dbg !5589
  %143 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !5590
  %144 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5591
  %a278 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %144, i32 0, i32 9, !dbg !5592
  store %struct.rtx_def* %143, %struct.rtx_def** %a278, align 8, !dbg !5593
  %145 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !5594
  %146 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5595
  %b279 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %146, i32 0, i32 10, !dbg !5596
  store %struct.rtx_def* %145, %struct.rtx_def** %b279, align 8, !dbg !5597
  %147 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !5598
  %148 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !5600
  %call280 = call i32 @rtx_equal_p(%struct.rtx_def* %147, %struct.rtx_def* %148), !dbg !5601
  %tobool281 = icmp ne i32 %call280, 0, !dbg !5601
  br i1 %tobool281, label %if.then282, label %if.end315, !dbg !5602

if.then282:                                       ; preds = %retry
  %149 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5603
  %tobool283 = icmp ne %struct.rtx_def* %149, null, !dbg !5603
  br i1 %tobool283, label %land.lhs.true284, label %if.else307, !dbg !5606

land.lhs.true284:                                 ; preds = %if.then282
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5607
  %tobool285 = icmp ne %struct.basic_block_def* %150, null, !dbg !5607
  br i1 %tobool285, label %if.then286, label %if.else307, !dbg !5608

if.then286:                                       ; preds = %land.lhs.true284
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !5609, metadata !DIExpression()), !dbg !5611
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5612
  %tobool287 = icmp ne %struct.basic_block_def* %151, null, !dbg !5612
  br i1 %tobool287, label %land.lhs.true288, label %if.end298, !dbg !5614

land.lhs.true288:                                 ; preds = %if.then286
  %152 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5615
  %153 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5616
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %153, i32 0, i32 7, !dbg !5616
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !5616
  %154 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !5616
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %154, i32 0, i32 1, !dbg !5616
  %155 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !5616
  %cmp289 = icmp eq %struct.rtx_def* %152, %155, !dbg !5617
  br i1 %cmp289, label %if.then290, label %if.end298, !dbg !5618

if.then290:                                       ; preds = %land.lhs.true288
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5619
  %u291 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %156, i32 0, i32 1, !dbg !5619
  %fld292 = bitcast %union.u* %u291 to [1 x %union.rtunion_def]*, !dbg !5619
  %arrayidx293 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld292, i64 0, i64 1, !dbg !5619
  %rt_rtx294 = bitcast %union.rtunion_def* %arrayidx293 to %struct.rtx_def**, !dbg !5619
  %157 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx294, align 8, !dbg !5619
  %158 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5620
  %il295 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %158, i32 0, i32 7, !dbg !5620
  %rtl296 = bitcast %union.basic_block_il_dependent* %il295 to %struct.rtl_bb_info**, !dbg !5620
  %159 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl296, align 8, !dbg !5620
  %end_297 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %159, i32 0, i32 1, !dbg !5620
  store %struct.rtx_def* %157, %struct.rtx_def** %end_297, align 8, !dbg !5621
  br label %if.end298, !dbg !5620

if.end298:                                        ; preds = %if.then290, %land.lhs.true288, %if.then286
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5622
  %161 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5623
  %162 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5624
  %u299 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %162, i32 0, i32 1, !dbg !5624
  %fld300 = bitcast %union.u* %u299 to [1 x %union.rtunion_def]*, !dbg !5624
  %arrayidx301 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld300, i64 0, i64 1, !dbg !5624
  %rt_rtx302 = bitcast %union.rtunion_def* %arrayidx301 to %struct.rtx_def**, !dbg !5624
  %163 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx302, align 8, !dbg !5624
  call void @reorder_insns(%struct.rtx_def* %160, %struct.rtx_def* %161, %struct.rtx_def* %163), !dbg !5625
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5626
  %call303 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %164, i32 4, %struct.rtx_def* null), !dbg !5628
  store %struct.rtx_def* %call303, %struct.rtx_def** %note, align 8, !dbg !5629
  %cmp304 = icmp ne %struct.rtx_def* %call303, null, !dbg !5630
  br i1 %cmp304, label %if.then305, label %if.end306, !dbg !5631

if.then305:                                       ; preds = %if.end298
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5632
  %166 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !5633
  call void @remove_note(%struct.rtx_def* %165, %struct.rtx_def* %166), !dbg !5634
  br label %if.end306, !dbg !5634

if.end306:                                        ; preds = %if.then305, %if.end298
  store %struct.rtx_def* null, %struct.rtx_def** %insn_b, align 8, !dbg !5635
  br label %if.end314, !dbg !5636

if.else307:                                       ; preds = %land.lhs.true284, %if.then282
  %167 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !5637
  %tobool308 = icmp ne %struct.rtx_def* %167, null, !dbg !5637
  br i1 %tobool308, label %land.lhs.true309, label %if.end313, !dbg !5639

land.lhs.true309:                                 ; preds = %if.else307
  %168 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5640
  %call310 = call i32 @side_effects_p(%struct.rtx_def* %168), !dbg !5641
  %tobool311 = icmp ne i32 %call310, 0, !dbg !5641
  br i1 %tobool311, label %if.then312, label %if.end313, !dbg !5642

if.then312:                                       ; preds = %land.lhs.true309
  store i32 0, i32* %retval, align 4, !dbg !5643
  br label %return, !dbg !5643

if.end313:                                        ; preds = %land.lhs.true309, %if.else307
  br label %if.end314

if.end314:                                        ; preds = %if.end313, %if.end306
  %169 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5644
  store %struct.rtx_def* %169, %struct.rtx_def** %x, align 8, !dbg !5645
  br label %success, !dbg !5646

if.end315:                                        ; preds = %retry
  %170 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5647
  %tobool316 = icmp ne %struct.rtx_def* %170, null, !dbg !5647
  br i1 %tobool316, label %if.end330, label %land.lhs.true317, !dbg !5649

land.lhs.true317:                                 ; preds = %if.end315
  %171 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5650
  %172 = bitcast %struct.rtx_def* %171 to i32*, !dbg !5650
  %bf.load318 = load i32, i32* %172, align 8, !dbg !5650
  %bf.clear319 = and i32 %bf.load318, 65535, !dbg !5650
  %cmp320 = icmp eq i32 %bf.clear319, 43, !dbg !5650
  br i1 %cmp320, label %if.then321, label %if.end330, !dbg !5651

if.then321:                                       ; preds = %land.lhs.true317
  %173 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5652
  %call322 = call zeroext i8 @noce_mem_write_may_trap_or_fault_p(%struct.rtx_def* %173), !dbg !5655
  %tobool323 = icmp ne i8 %call322, 0, !dbg !5655
  br i1 %tobool323, label %if.then324, label %if.end325, !dbg !5656

if.then324:                                       ; preds = %if.then321
  store i32 0, i32* %retval, align 4, !dbg !5657
  br label %return, !dbg !5657

if.end325:                                        ; preds = %if.then321
  %174 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5658
  %175 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5660
  %call326 = call zeroext i8 @noce_can_store_speculate_p(%struct.basic_block_def* %174, %struct.rtx_def* %175), !dbg !5661
  %tobool327 = icmp ne i8 %call326, 0, !dbg !5661
  br i1 %tobool327, label %if.end329, label %if.then328, !dbg !5662

if.then328:                                       ; preds = %if.end325
  store i32 0, i32* %retval, align 4, !dbg !5663
  br label %return, !dbg !5663

if.end329:                                        ; preds = %if.end325
  br label %if.end330, !dbg !5664

if.end330:                                        ; preds = %if.end329, %land.lhs.true317, %if.end315
  %176 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5665
  %call331 = call i32 @noce_try_move(%struct.noce_if_info* %176), !dbg !5667
  %tobool332 = icmp ne i32 %call331, 0, !dbg !5667
  br i1 %tobool332, label %if.then333, label %if.end334, !dbg !5668

if.then333:                                       ; preds = %if.end330
  br label %success, !dbg !5669

if.end334:                                        ; preds = %if.end330
  %177 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5670
  %call335 = call i32 @noce_try_store_flag(%struct.noce_if_info* %177), !dbg !5672
  %tobool336 = icmp ne i32 %call335, 0, !dbg !5672
  br i1 %tobool336, label %if.then337, label %if.end338, !dbg !5673

if.then337:                                       ; preds = %if.end334
  br label %success, !dbg !5674

if.end338:                                        ; preds = %if.end334
  %178 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5675
  %call339 = call i32 @noce_try_bitop(%struct.noce_if_info* %178), !dbg !5677
  %tobool340 = icmp ne i32 %call339, 0, !dbg !5677
  br i1 %tobool340, label %if.then341, label %if.end342, !dbg !5678

if.then341:                                       ; preds = %if.end338
  br label %success, !dbg !5679

if.end342:                                        ; preds = %if.end338
  %179 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5680
  %call343 = call i32 @noce_try_minmax(%struct.noce_if_info* %179), !dbg !5682
  %tobool344 = icmp ne i32 %call343, 0, !dbg !5682
  br i1 %tobool344, label %if.then345, label %if.end346, !dbg !5683

if.then345:                                       ; preds = %if.end342
  br label %success, !dbg !5684

if.end346:                                        ; preds = %if.end342
  %180 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5685
  %call347 = call i32 @noce_try_abs(%struct.noce_if_info* %180), !dbg !5687
  %tobool348 = icmp ne i32 %call347, 0, !dbg !5687
  br i1 %tobool348, label %if.then349, label %if.end350, !dbg !5688

if.then349:                                       ; preds = %if.end346
  br label %success, !dbg !5689

if.end350:                                        ; preds = %if.end346
  %181 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5690
  %call351 = call i32 @noce_try_cmove(%struct.noce_if_info* %181), !dbg !5692
  %tobool352 = icmp ne i32 %call351, 0, !dbg !5692
  br i1 %tobool352, label %if.then353, label %if.end354, !dbg !5693

if.then353:                                       ; preds = %if.end350
  br label %success, !dbg !5694

if.end354:                                        ; preds = %if.end350
  %182 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !5695
  %call355 = call zeroext i8 %182(), !dbg !5697
  %tobool356 = icmp ne i8 %call355, 0, !dbg !5697
  br i1 %tobool356, label %if.end378, label %if.then357, !dbg !5698

if.then357:                                       ; preds = %if.end354
  %183 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5699
  %call358 = call i32 @noce_try_store_flag_constants(%struct.noce_if_info* %183), !dbg !5702
  %tobool359 = icmp ne i32 %call358, 0, !dbg !5702
  br i1 %tobool359, label %if.then360, label %if.end361, !dbg !5703

if.then360:                                       ; preds = %if.then357
  br label %success, !dbg !5704

if.end361:                                        ; preds = %if.then357
  %184 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5705
  %call362 = call i32 @noce_try_addcc(%struct.noce_if_info* %184), !dbg !5707
  %tobool363 = icmp ne i32 %call362, 0, !dbg !5707
  br i1 %tobool363, label %if.then364, label %if.end365, !dbg !5708

if.then364:                                       ; preds = %if.end361
  br label %success, !dbg !5709

if.end365:                                        ; preds = %if.end361
  %185 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5710
  %call366 = call i32 @noce_try_store_flag_mask(%struct.noce_if_info* %185), !dbg !5712
  %tobool367 = icmp ne i32 %call366, 0, !dbg !5712
  br i1 %tobool367, label %if.then368, label %if.end369, !dbg !5713

if.then368:                                       ; preds = %if.end365
  br label %success, !dbg !5714

if.end369:                                        ; preds = %if.end365
  %186 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5715
  %call370 = call i32 @noce_try_cmove_arith(%struct.noce_if_info* %186), !dbg !5717
  %tobool371 = icmp ne i32 %call370, 0, !dbg !5717
  br i1 %tobool371, label %if.then372, label %if.end373, !dbg !5718

if.then372:                                       ; preds = %if.end369
  br label %success, !dbg !5719

if.end373:                                        ; preds = %if.end369
  %187 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5720
  %call374 = call i32 @noce_try_sign_mask(%struct.noce_if_info* %187), !dbg !5722
  %tobool375 = icmp ne i32 %call374, 0, !dbg !5722
  br i1 %tobool375, label %if.then376, label %if.end377, !dbg !5723

if.then376:                                       ; preds = %if.end373
  br label %success, !dbg !5724

if.end377:                                        ; preds = %if.end373
  br label %if.end378, !dbg !5725

if.end378:                                        ; preds = %if.end377, %if.end354
  %188 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5726
  %tobool379 = icmp ne %struct.basic_block_def* %188, null, !dbg !5726
  br i1 %tobool379, label %if.end383, label %land.lhs.true380, !dbg !5728

land.lhs.true380:                                 ; preds = %if.end378
  %189 = load %struct.rtx_def*, %struct.rtx_def** %set_b, align 8, !dbg !5729
  %tobool381 = icmp ne %struct.rtx_def* %189, null, !dbg !5729
  br i1 %tobool381, label %if.then382, label %if.end383, !dbg !5730

if.then382:                                       ; preds = %land.lhs.true380
  store %struct.rtx_def* null, %struct.rtx_def** %set_b, align 8, !dbg !5731
  store %struct.rtx_def* null, %struct.rtx_def** %insn_b, align 8, !dbg !5733
  %190 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5734
  store %struct.rtx_def* %190, %struct.rtx_def** %b, align 8, !dbg !5735
  br label %retry, !dbg !5736

if.end383:                                        ; preds = %land.lhs.true380, %if.end378
  store i32 0, i32* %retval, align 4, !dbg !5737
  br label %return, !dbg !5737

success:                                          ; preds = %if.then376, %if.then372, %if.then368, %if.then364, %if.then360, %if.then353, %if.then349, %if.then345, %if.then341, %if.then337, %if.then333, %if.end314
  call void @llvm.dbg.label(metadata !5738), !dbg !5739
  %191 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5740
  %192 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5742
  %cmp384 = icmp ne %struct.rtx_def* %191, %192, !dbg !5743
  br i1 %cmp384, label %if.then385, label %if.end394, !dbg !5744

if.then385:                                       ; preds = %success
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5745, metadata !DIExpression()), !dbg !5747
  call void @start_sequence(), !dbg !5748
  %193 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5749
  %194 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !5750
  call void @noce_emit_move_insn(%struct.rtx_def* %193, %struct.rtx_def* %194), !dbg !5751
  %call386 = call %struct.rtx_def* @get_insns(), !dbg !5752
  store %struct.rtx_def* %call386, %struct.rtx_def** %seq, align 8, !dbg !5753
  %195 = load %struct.rtx_def*, %struct.rtx_def** %orig_x, align 8, !dbg !5754
  call void @set_used_flags(%struct.rtx_def* %195), !dbg !5755
  %196 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5756
  call void @unshare_all_rtl_in_chain(%struct.rtx_def* %196), !dbg !5757
  call void @end_sequence(), !dbg !5758
  %197 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5759
  %198 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5760
  %il387 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %198, i32 0, i32 7, !dbg !5760
  %rtl388 = bitcast %union.basic_block_il_dependent* %il387 to %struct.rtl_bb_info**, !dbg !5760
  %199 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl388, align 8, !dbg !5760
  %end_389 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %199, i32 0, i32 1, !dbg !5760
  %200 = load %struct.rtx_def*, %struct.rtx_def** %end_389, align 8, !dbg !5760
  %201 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !5761
  %u390 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %201, i32 0, i32 1, !dbg !5761
  %fld391 = bitcast %union.u* %u390 to [1 x %union.rtunion_def]*, !dbg !5761
  %arrayidx392 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld391, i64 0, i64 4, !dbg !5761
  %rt_int = bitcast %union.rtunion_def* %arrayidx392 to i32*, !dbg !5761
  %202 = load i32, i32* %rt_int, align 8, !dbg !5761
  %call393 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %197, %struct.rtx_def* %200, i32 %202), !dbg !5762
  br label %if.end394, !dbg !5763

if.end394:                                        ; preds = %if.then385, %success
  %203 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5764
  %tobool395 = icmp ne %struct.basic_block_def* %203, null, !dbg !5764
  br i1 %tobool395, label %if.then396, label %if.else397, !dbg !5766

if.then396:                                       ; preds = %if.end394
  %204 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5767
  call void @delete_basic_block(%struct.basic_block_def* %204), !dbg !5769
  %205 = load i32, i32* @num_true_changes, align 4, !dbg !5770
  %inc = add nsw i32 %205, 1, !dbg !5770
  store i32 %inc, i32* @num_true_changes, align 4, !dbg !5770
  br label %if.end399, !dbg !5771

if.else397:                                       ; preds = %if.end394
  %206 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5772
  %207 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !5773
  %call398 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %206, %struct.basic_block_def* %207), !dbg !5774
  call void @remove_edge(%struct.edge_def* %call398), !dbg !5775
  br label %if.end399

if.end399:                                        ; preds = %if.else397, %if.then396
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5776
  %209 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !5777
  %call400 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %208, %struct.basic_block_def* %209), !dbg !5778
  call void @remove_edge(%struct.edge_def* %call400), !dbg !5779
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5780
  %call401 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %210), !dbg !5781
  %211 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !5782
  %call402 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %call401, %struct.basic_block_def* %211), !dbg !5783
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5784
  call void @delete_basic_block(%struct.basic_block_def* %212), !dbg !5785
  %213 = load i32, i32* @num_true_changes, align 4, !dbg !5786
  %inc403 = add nsw i32 %213, 1, !dbg !5786
  store i32 %inc403, i32* @num_true_changes, align 4, !dbg !5786
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5787
  %215 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !5789
  %call404 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %214, %struct.basic_block_def* %215), !dbg !5790
  %tobool405 = icmp ne i8 %call404, 0, !dbg !5790
  br i1 %tobool405, label %if.then406, label %if.end408, !dbg !5791

if.then406:                                       ; preds = %if.end399
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !5792
  %217 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !5794
  call void @merge_blocks(%struct.basic_block_def* %216, %struct.basic_block_def* %217), !dbg !5795
  %218 = load i32, i32* @num_true_changes, align 4, !dbg !5796
  %inc407 = add nsw i32 %218, 1, !dbg !5796
  store i32 %inc407, i32* @num_true_changes, align 4, !dbg !5796
  br label %if.end408, !dbg !5797

if.end408:                                        ; preds = %if.then406, %if.end399
  %219 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !5798
  %inc409 = add nsw i32 %219, 1, !dbg !5798
  store i32 %inc409, i32* @num_updated_if_blocks, align 4, !dbg !5798
  store i32 1, i32* %retval, align 4, !dbg !5799
  br label %return, !dbg !5799

return:                                           ; preds = %if.end408, %if.end383, %if.then328, %if.then324, %if.then312, %if.then273, %if.then250, %if.then230, %if.then209, %if.then103, %if.then
  %220 = load i32, i32* %retval, align 4, !dbg !5800
  ret i32 %220, !dbg !5800
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cond_move_process_if_block(%struct.noce_if_info* %if_info) #0 !dbg !5801 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %test_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %loc_insn = alloca %struct.rtx_def*, align 8
  %max_reg = alloca i32, align 4
  %size = alloca i32, align 4
  %c = alloca i32, align 4
  %reg = alloca i32, align 4
  %then_vals = alloca %struct.rtx_def**, align 8
  %else_vals = alloca %struct.rtx_def**, align 8
  %then_regs = alloca %struct.VEC_int_heap*, align 8
  %else_regs = alloca %struct.VEC_int_heap*, align 8
  %i = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !5802, metadata !DIExpression()), !dbg !5803
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb, metadata !5804, metadata !DIExpression()), !dbg !5805
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5806
  %test_bb1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 0, !dbg !5807
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb1, align 8, !dbg !5807
  store %struct.basic_block_def* %1, %struct.basic_block_def** %test_bb, align 8, !dbg !5805
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !5808, metadata !DIExpression()), !dbg !5809
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5810
  %then_bb2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 1, !dbg !5811
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb2, align 8, !dbg !5811
  store %struct.basic_block_def* %3, %struct.basic_block_def** %then_bb, align 8, !dbg !5809
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !5812, metadata !DIExpression()), !dbg !5813
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5814
  %else_bb3 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 2, !dbg !5815
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb3, align 8, !dbg !5815
  store %struct.basic_block_def* %5, %struct.basic_block_def** %else_bb, align 8, !dbg !5813
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !5816, metadata !DIExpression()), !dbg !5817
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5818
  %join_bb4 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 3, !dbg !5819
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb4, align 8, !dbg !5819
  store %struct.basic_block_def* %7, %struct.basic_block_def** %join_bb, align 8, !dbg !5817
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !5820, metadata !DIExpression()), !dbg !5821
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5822
  %jump5 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 4, !dbg !5823
  %9 = load %struct.rtx_def*, %struct.rtx_def** %jump5, align 8, !dbg !5823
  store %struct.rtx_def* %9, %struct.rtx_def** %jump, align 8, !dbg !5821
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !5824, metadata !DIExpression()), !dbg !5825
  %10 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5826
  %cond6 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %10, i32 0, i32 5, !dbg !5827
  %11 = load %struct.rtx_def*, %struct.rtx_def** %cond6, align 8, !dbg !5827
  store %struct.rtx_def* %11, %struct.rtx_def** %cond, align 8, !dbg !5825
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !5828, metadata !DIExpression()), !dbg !5829
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %loc_insn, metadata !5830, metadata !DIExpression()), !dbg !5831
  call void @llvm.dbg.declare(metadata i32* %max_reg, metadata !5832, metadata !DIExpression()), !dbg !5833
  call void @llvm.dbg.declare(metadata i32* %size, metadata !5834, metadata !DIExpression()), !dbg !5835
  call void @llvm.dbg.declare(metadata i32* %c, metadata !5836, metadata !DIExpression()), !dbg !5837
  call void @llvm.dbg.declare(metadata i32* %reg, metadata !5838, metadata !DIExpression()), !dbg !5839
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %then_vals, metadata !5840, metadata !DIExpression()), !dbg !5841
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %else_vals, metadata !5842, metadata !DIExpression()), !dbg !5843
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %then_regs, metadata !5844, metadata !DIExpression()), !dbg !5845
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %then_regs, align 8, !dbg !5845
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap** %else_regs, metadata !5846, metadata !DIExpression()), !dbg !5847
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %else_regs, align 8, !dbg !5847
  call void @llvm.dbg.declare(metadata i32* %i, metadata !5848, metadata !DIExpression()), !dbg !5849
  %call = call i32 @max_reg_num(), !dbg !5850
  store i32 %call, i32* %max_reg, align 4, !dbg !5851
  %12 = load i32, i32* %max_reg, align 4, !dbg !5852
  %add = add nsw i32 %12, 1, !dbg !5853
  %conv = sext i32 %add to i64, !dbg !5854
  %mul = mul i64 %conv, 8, !dbg !5855
  %conv7 = trunc i64 %mul to i32, !dbg !5854
  store i32 %conv7, i32* %size, align 4, !dbg !5856
  %13 = load i32, i32* %size, align 4, !dbg !5857
  %conv8 = sext i32 %13 to i64, !dbg !5857
  %14 = alloca i8, i64 %conv8, align 16, !dbg !5857
  %15 = bitcast i8* %14 to %struct.rtx_def**, !dbg !5858
  store %struct.rtx_def** %15, %struct.rtx_def*** %then_vals, align 8, !dbg !5859
  %16 = load i32, i32* %size, align 4, !dbg !5860
  %conv9 = sext i32 %16 to i64, !dbg !5860
  %17 = alloca i8, i64 %conv9, align 16, !dbg !5860
  %18 = bitcast i8* %17 to %struct.rtx_def**, !dbg !5861
  store %struct.rtx_def** %18, %struct.rtx_def*** %else_vals, align 8, !dbg !5862
  %19 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5863
  %20 = bitcast %struct.rtx_def** %19 to i8*, !dbg !5864
  %21 = load i32, i32* %size, align 4, !dbg !5865
  %conv10 = sext i32 %21 to i64, !dbg !5865
  call void @llvm.memset.p0i8.i64(i8* align 8 %20, i8 0, i64 %conv10, i1 false), !dbg !5864
  %22 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5866
  %23 = bitcast %struct.rtx_def** %22 to i8*, !dbg !5867
  %24 = load i32, i32* %size, align 4, !dbg !5868
  %conv11 = sext i32 %24 to i64, !dbg !5868
  call void @llvm.memset.p0i8.i64(i8* align 8 %23, i8 0, i64 %conv11, i1 false), !dbg !5867
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5869
  %26 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5871
  %27 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5872
  %call12 = call i32 @check_cond_move_block(%struct.basic_block_def* %25, %struct.rtx_def** %26, %struct.VEC_int_heap** %then_regs, %struct.rtx_def* %27), !dbg !5873
  %tobool = icmp ne i32 %call12, 0, !dbg !5873
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !5874

lor.lhs.false:                                    ; preds = %entry
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5875
  %tobool13 = icmp ne %struct.basic_block_def* %28, null, !dbg !5875
  br i1 %tobool13, label %land.lhs.true, label %if.end, !dbg !5876

land.lhs.true:                                    ; preds = %lor.lhs.false
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5877
  %30 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5878
  %31 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5879
  %call14 = call i32 @check_cond_move_block(%struct.basic_block_def* %29, %struct.rtx_def** %30, %struct.VEC_int_heap** %else_regs, %struct.rtx_def* %31), !dbg !5880
  %tobool15 = icmp ne i32 %call14, 0, !dbg !5880
  br i1 %tobool15, label %if.end, label %if.then, !dbg !5881

if.then:                                          ; preds = %land.lhs.true, %entry
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !5882
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !5884
  store i32 0, i32* %retval, align 4, !dbg !5885
  br label %return, !dbg !5885

if.end:                                           ; preds = %land.lhs.true, %lor.lhs.false
  store i32 0, i32* %c, align 4, !dbg !5886
  store i32 0, i32* %i, align 4, !dbg !5887
  br label %for.cond, !dbg !5889

for.cond:                                         ; preds = %for.inc, %if.end
  %32 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %then_regs, align 8, !dbg !5890
  %tobool16 = icmp ne %struct.VEC_int_heap* %32, null, !dbg !5890
  br i1 %tobool16, label %cond.true, label %cond.false, !dbg !5890

cond.true:                                        ; preds = %for.cond
  %33 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %then_regs, align 8, !dbg !5890
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %33, i32 0, i32 0, !dbg !5890
  br label %cond.end, !dbg !5890

cond.false:                                       ; preds = %for.cond
  br label %cond.end, !dbg !5890

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond17 = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !5890
  %34 = load i32, i32* %i, align 4, !dbg !5890
  %call18 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond17, i32 %34, i32* %reg), !dbg !5890
  %tobool19 = icmp ne i32 %call18, 0, !dbg !5892
  br i1 %tobool19, label %for.body, label %for.end, !dbg !5892

for.body:                                         ; preds = %cond.end
  %35 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5893
  %36 = load i32, i32* %reg, align 4, !dbg !5896
  %idxprom = sext i32 %36 to i64, !dbg !5893
  %arrayidx = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %35, i64 %idxprom, !dbg !5893
  %37 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx, align 8, !dbg !5893
  %tobool20 = icmp ne %struct.rtx_def* %37, null, !dbg !5893
  br i1 %tobool20, label %if.end26, label %land.lhs.true21, !dbg !5897

land.lhs.true21:                                  ; preds = %for.body
  %38 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5898
  %39 = load i32, i32* %reg, align 4, !dbg !5899
  %idxprom22 = sext i32 %39 to i64, !dbg !5898
  %arrayidx23 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %38, i64 %idxprom22, !dbg !5898
  %40 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx23, align 8, !dbg !5898
  %tobool24 = icmp ne %struct.rtx_def* %40, null, !dbg !5898
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !5900

if.then25:                                        ; preds = %land.lhs.true21
  br label %for.inc, !dbg !5901

if.end26:                                         ; preds = %land.lhs.true21, %for.body
  %41 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5902
  %42 = load i32, i32* %reg, align 4, !dbg !5904
  %idxprom27 = sext i32 %42 to i64, !dbg !5902
  %arrayidx28 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %41, i64 %idxprom27, !dbg !5902
  %43 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx28, align 8, !dbg !5902
  %tobool29 = icmp ne %struct.rtx_def* %43, null, !dbg !5902
  br i1 %tobool29, label %if.else, label %if.then30, !dbg !5905

if.then30:                                        ; preds = %if.end26
  %44 = load i32, i32* %c, align 4, !dbg !5906
  %inc = add nsw i32 %44, 1, !dbg !5906
  store i32 %inc, i32* %c, align 4, !dbg !5906
  br label %if.end54, !dbg !5906

if.else:                                          ; preds = %if.end26
  %45 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5907
  %46 = load i32, i32* %reg, align 4, !dbg !5907
  %idxprom31 = sext i32 %46 to i64, !dbg !5907
  %arrayidx32 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %45, i64 %idxprom31, !dbg !5907
  %47 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx32, align 8, !dbg !5907
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !5907
  %bf.load = load i32, i32* %48, align 8, !dbg !5907
  %bf.clear = and i32 %bf.load, 65535, !dbg !5907
  %idxprom33 = sext i32 %bf.clear to i64, !dbg !5907
  %arrayidx34 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom33, !dbg !5907
  %49 = load i32, i32* %arrayidx34, align 4, !dbg !5907
  %cmp = icmp eq i32 %49, 9, !dbg !5907
  br i1 %cmp, label %if.end53, label %land.lhs.true36, !dbg !5910

land.lhs.true36:                                  ; preds = %if.else
  %50 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5911
  %51 = load i32, i32* %reg, align 4, !dbg !5911
  %idxprom37 = sext i32 %51 to i64, !dbg !5911
  %arrayidx38 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %50, i64 %idxprom37, !dbg !5911
  %52 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx38, align 8, !dbg !5911
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !5911
  %bf.load39 = load i32, i32* %53, align 8, !dbg !5911
  %bf.clear40 = and i32 %bf.load39, 65535, !dbg !5911
  %idxprom41 = sext i32 %bf.clear40 to i64, !dbg !5911
  %arrayidx42 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom41, !dbg !5911
  %54 = load i32, i32* %arrayidx42, align 4, !dbg !5911
  %cmp43 = icmp eq i32 %54, 9, !dbg !5911
  br i1 %cmp43, label %if.end53, label %land.lhs.true45, !dbg !5912

land.lhs.true45:                                  ; preds = %land.lhs.true36
  %55 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5913
  %56 = load i32, i32* %reg, align 4, !dbg !5914
  %idxprom46 = sext i32 %56 to i64, !dbg !5913
  %arrayidx47 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %55, i64 %idxprom46, !dbg !5913
  %57 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx47, align 8, !dbg !5913
  %58 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5915
  %59 = load i32, i32* %reg, align 4, !dbg !5916
  %idxprom48 = sext i32 %59 to i64, !dbg !5915
  %arrayidx49 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %58, i64 %idxprom48, !dbg !5915
  %60 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx49, align 8, !dbg !5915
  %call50 = call i32 @rtx_equal_p(%struct.rtx_def* %57, %struct.rtx_def* %60), !dbg !5917
  %tobool51 = icmp ne i32 %call50, 0, !dbg !5917
  br i1 %tobool51, label %if.end53, label %if.then52, !dbg !5918

if.then52:                                        ; preds = %land.lhs.true45
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !5919
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !5921
  store i32 0, i32* %retval, align 4, !dbg !5922
  br label %return, !dbg !5922

if.end53:                                         ; preds = %land.lhs.true45, %land.lhs.true36, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then30
  br label %for.inc, !dbg !5923

for.inc:                                          ; preds = %if.end54, %if.then25
  %61 = load i32, i32* %i, align 4, !dbg !5924
  %inc55 = add i32 %61, 1, !dbg !5924
  store i32 %inc55, i32* %i, align 4, !dbg !5924
  br label %for.cond, !dbg !5925, !llvm.loop !5926

for.end:                                          ; preds = %cond.end
  store i32 0, i32* %i, align 4, !dbg !5928
  br label %for.cond56, !dbg !5930

for.cond56:                                       ; preds = %for.inc72, %for.end
  %62 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %else_regs, align 8, !dbg !5931
  %tobool57 = icmp ne %struct.VEC_int_heap* %62, null, !dbg !5931
  br i1 %tobool57, label %cond.true58, label %cond.false60, !dbg !5931

cond.true58:                                      ; preds = %for.cond56
  %63 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %else_regs, align 8, !dbg !5931
  %base59 = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %63, i32 0, i32 0, !dbg !5931
  br label %cond.end61, !dbg !5931

cond.false60:                                     ; preds = %for.cond56
  br label %cond.end61, !dbg !5931

cond.end61:                                       ; preds = %cond.false60, %cond.true58
  %cond62 = phi %struct.VEC_int_base* [ %base59, %cond.true58 ], [ null, %cond.false60 ], !dbg !5931
  %64 = load i32, i32* %i, align 4, !dbg !5931
  %call63 = call i32 @VEC_int_base_iterate(%struct.VEC_int_base* %cond62, i32 %64, i32* %reg), !dbg !5931
  %tobool64 = icmp ne i32 %call63, 0, !dbg !5933
  br i1 %tobool64, label %for.body65, label %for.end74, !dbg !5933

for.body65:                                       ; preds = %cond.end61
  %65 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5934
  %66 = load i32, i32* %reg, align 4, !dbg !5936
  %idxprom66 = sext i32 %66 to i64, !dbg !5934
  %arrayidx67 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %65, i64 %idxprom66, !dbg !5934
  %67 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx67, align 8, !dbg !5934
  %tobool68 = icmp ne %struct.rtx_def* %67, null, !dbg !5934
  br i1 %tobool68, label %if.end71, label %if.then69, !dbg !5937

if.then69:                                        ; preds = %for.body65
  %68 = load i32, i32* %c, align 4, !dbg !5938
  %inc70 = add nsw i32 %68, 1, !dbg !5938
  store i32 %inc70, i32* %c, align 4, !dbg !5938
  br label %if.end71, !dbg !5938

if.end71:                                         ; preds = %if.then69, %for.body65
  br label %for.inc72, !dbg !5939

for.inc72:                                        ; preds = %if.end71
  %69 = load i32, i32* %i, align 4, !dbg !5940
  %inc73 = add i32 %69, 1, !dbg !5940
  store i32 %inc73, i32* %i, align 4, !dbg !5940
  br label %for.cond56, !dbg !5941, !llvm.loop !5942

for.end74:                                        ; preds = %cond.end61
  %70 = load i32, i32* %c, align 4, !dbg !5944
  %71 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !5946
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %71, i64 0, !dbg !5946
  %call75 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !5946
  %tobool76 = icmp ne i8 %call75, 0, !dbg !5946
  br i1 %tobool76, label %cond.false78, label %cond.true77, !dbg !5946

cond.true77:                                      ; preds = %for.end74
  br label %cond.end79, !dbg !5946

cond.false78:                                     ; preds = %for.end74
  %72 = load i32, i32* @ix86_branch_cost, align 4, !dbg !5946
  br label %cond.end79, !dbg !5946

cond.end79:                                       ; preds = %cond.false78, %cond.true77
  %cond80 = phi i32 [ 2, %cond.true77 ], [ %72, %cond.false78 ], !dbg !5946
  %add81 = add nsw i32 %cond80, 1, !dbg !5946
  %cmp82 = icmp sgt i32 %70, %add81, !dbg !5947
  br i1 %cmp82, label %if.then84, label %if.end85, !dbg !5948

if.then84:                                        ; preds = %cond.end79
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !5949
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !5951
  store i32 0, i32* %retval, align 4, !dbg !5952
  br label %return, !dbg !5952

if.end85:                                         ; preds = %cond.end79
  call void @start_sequence(), !dbg !5953
  %73 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5954
  %74 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5956
  %75 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5957
  %76 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5958
  %77 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5959
  %call86 = call zeroext i8 @cond_move_convert_if_block(%struct.noce_if_info* %73, %struct.basic_block_def* %74, %struct.rtx_def* %75, %struct.rtx_def** %76, %struct.rtx_def** %77, i8 zeroext 0), !dbg !5960
  %tobool87 = icmp ne i8 %call86, 0, !dbg !5960
  br i1 %tobool87, label %lor.lhs.false88, label %if.then93, !dbg !5961

lor.lhs.false88:                                  ; preds = %if.end85
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5962
  %tobool89 = icmp ne %struct.basic_block_def* %78, null, !dbg !5962
  br i1 %tobool89, label %land.lhs.true90, label %if.end94, !dbg !5963

land.lhs.true90:                                  ; preds = %lor.lhs.false88
  %79 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5964
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5965
  %81 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !5966
  %82 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals, align 8, !dbg !5967
  %83 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals, align 8, !dbg !5968
  %call91 = call zeroext i8 @cond_move_convert_if_block(%struct.noce_if_info* %79, %struct.basic_block_def* %80, %struct.rtx_def* %81, %struct.rtx_def** %82, %struct.rtx_def** %83, i8 zeroext 1), !dbg !5969
  %tobool92 = icmp ne i8 %call91, 0, !dbg !5969
  br i1 %tobool92, label %if.end94, label %if.then93, !dbg !5970

if.then93:                                        ; preds = %land.lhs.true90, %if.end85
  call void @end_sequence(), !dbg !5971
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !5973
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !5974
  store i32 0, i32* %retval, align 4, !dbg !5975
  br label %return, !dbg !5975

if.end94:                                         ; preds = %land.lhs.true90, %lor.lhs.false88
  %84 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !5976
  %call95 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %84), !dbg !5977
  store %struct.rtx_def* %call95, %struct.rtx_def** %seq, align 8, !dbg !5978
  %85 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5979
  %tobool96 = icmp ne %struct.rtx_def* %85, null, !dbg !5979
  br i1 %tobool96, label %if.end98, label %if.then97, !dbg !5981

if.then97:                                        ; preds = %if.end94
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !5982
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !5984
  store i32 0, i32* %retval, align 4, !dbg !5985
  br label %return, !dbg !5985

if.end98:                                         ; preds = %if.end94
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !5986
  %call99 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %86), !dbg !5987
  store %struct.rtx_def* %call99, %struct.rtx_def** %loc_insn, align 8, !dbg !5988
  %87 = load %struct.rtx_def*, %struct.rtx_def** %loc_insn, align 8, !dbg !5989
  %tobool100 = icmp ne %struct.rtx_def* %87, null, !dbg !5989
  br i1 %tobool100, label %if.end108, label %if.then101, !dbg !5991

if.then101:                                       ; preds = %if.end98
  %88 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !5992
  %call102 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %88), !dbg !5994
  store %struct.rtx_def* %call102, %struct.rtx_def** %loc_insn, align 8, !dbg !5995
  %89 = load %struct.rtx_def*, %struct.rtx_def** %loc_insn, align 8, !dbg !5996
  %tobool103 = icmp ne %struct.rtx_def* %89, null, !dbg !5996
  br i1 %tobool103, label %cond.false105, label %cond.true104, !dbg !5996

cond.true104:                                     ; preds = %if.then101
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2741, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !5996
  br label %cond.end106, !dbg !5996

cond.false105:                                    ; preds = %if.then101
  br label %cond.end106, !dbg !5996

cond.end106:                                      ; preds = %cond.false105, %cond.true104
  %cond107 = phi i32 [ 0, %cond.true104 ], [ 0, %cond.false105 ], !dbg !5996
  br label %if.end108, !dbg !5997

if.end108:                                        ; preds = %cond.end106, %if.end98
  %90 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !5998
  %91 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !5999
  %92 = load %struct.rtx_def*, %struct.rtx_def** %loc_insn, align 8, !dbg !6000
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %92, i32 0, i32 1, !dbg !6000
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6000
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !6000
  %rt_int = bitcast %union.rtunion_def* %arrayidx109 to i32*, !dbg !6000
  %93 = load i32, i32* %rt_int, align 8, !dbg !6000
  %call110 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %90, %struct.rtx_def* %91, i32 %93), !dbg !6001
  %94 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !6002
  %tobool111 = icmp ne %struct.basic_block_def* %94, null, !dbg !6002
  br i1 %tobool111, label %if.then112, label %if.else114, !dbg !6004

if.then112:                                       ; preds = %if.end108
  %95 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !6005
  call void @delete_basic_block(%struct.basic_block_def* %95), !dbg !6007
  %96 = load i32, i32* @num_true_changes, align 4, !dbg !6008
  %inc113 = add nsw i32 %96, 1, !dbg !6008
  store i32 %inc113, i32* @num_true_changes, align 4, !dbg !6008
  br label %if.end116, !dbg !6009

if.else114:                                       ; preds = %if.end108
  %97 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !6010
  %98 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6011
  %call115 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %97, %struct.basic_block_def* %98), !dbg !6012
  call void @remove_edge(%struct.edge_def* %call115), !dbg !6013
  br label %if.end116

if.end116:                                        ; preds = %if.else114, %if.then112
  %99 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !6014
  %100 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6015
  %call117 = call %struct.edge_def* @find_edge(%struct.basic_block_def* %99, %struct.basic_block_def* %100), !dbg !6016
  call void @remove_edge(%struct.edge_def* %call117), !dbg !6017
  %101 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !6018
  %call118 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %101), !dbg !6019
  %102 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6020
  %call119 = call %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def* %call118, %struct.basic_block_def* %102), !dbg !6021
  %103 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !6022
  call void @delete_basic_block(%struct.basic_block_def* %103), !dbg !6023
  %104 = load i32, i32* @num_true_changes, align 4, !dbg !6024
  %inc120 = add nsw i32 %104, 1, !dbg !6024
  store i32 %inc120, i32* @num_true_changes, align 4, !dbg !6024
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !6025
  %106 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6027
  %call121 = call zeroext i8 @can_merge_blocks_p(%struct.basic_block_def* %105, %struct.basic_block_def* %106), !dbg !6028
  %tobool122 = icmp ne i8 %call121, 0, !dbg !6028
  br i1 %tobool122, label %if.then123, label %if.end125, !dbg !6029

if.then123:                                       ; preds = %if.end116
  %107 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !6030
  %108 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !6032
  call void @merge_blocks(%struct.basic_block_def* %107, %struct.basic_block_def* %108), !dbg !6033
  %109 = load i32, i32* @num_true_changes, align 4, !dbg !6034
  %inc124 = add nsw i32 %109, 1, !dbg !6034
  store i32 %inc124, i32* @num_true_changes, align 4, !dbg !6034
  br label %if.end125, !dbg !6035

if.end125:                                        ; preds = %if.then123, %if.end116
  %110 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !6036
  %inc126 = add nsw i32 %110, 1, !dbg !6036
  store i32 %inc126, i32* @num_updated_if_blocks, align 4, !dbg !6036
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %then_regs), !dbg !6037
  call void @VEC_int_heap_free(%struct.VEC_int_heap** %else_regs), !dbg !6038
  store i32 1, i32* %retval, align 4, !dbg !6039
  br label %return, !dbg !6039

return:                                           ; preds = %if.end125, %if.then97, %if.then93, %if.then84, %if.then52, %if.then
  %111 = load i32, i32* %retval, align 4, !dbg !6040
  ret i32 %111, !dbg !6040
}

declare dso_local i32 @any_condjump_p(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @pc_set(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @reverse_condition(i32) #1

declare dso_local %struct.rtx_def* @canonicalize_condition(%struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def**, %struct.rtx_def*, i32, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %bb) #0 !dbg !6041 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6044, metadata !DIExpression()), !dbg !6045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6046, metadata !DIExpression()), !dbg !6047
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6048
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !6048
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6048
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6048
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !6048
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6048
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !6047
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6049
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !6049
  %bf.load = load i32, i32* %4, align 8, !dbg !6049
  %bf.clear = and i32 %bf.load, 65535, !dbg !6049
  %cmp = icmp eq i32 %bf.clear, 12, !dbg !6049
  br i1 %cmp, label %if.then, label %if.end5, !dbg !6051

if.then:                                          ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6052
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6055
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !6055
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !6055
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !6055
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !6055
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6055
  %cmp3 = icmp eq %struct.rtx_def* %5, %8, !dbg !6056
  br i1 %cmp3, label %if.then4, label %if.end, !dbg !6057

if.then4:                                         ; preds = %if.then
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6058
  br label %return, !dbg !6058

if.end:                                           ; preds = %if.then
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6059
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6059
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6059
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6059
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6059
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6059
  store %struct.rtx_def* %10, %struct.rtx_def** %insn, align 8, !dbg !6060
  br label %if.end5, !dbg !6061

if.end5:                                          ; preds = %if.end, %entry
  br label %while.cond, !dbg !6062

while.cond:                                       ; preds = %if.end17, %if.end5
  %11 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6063
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6063
  %bf.load6 = load i32, i32* %12, align 8, !dbg !6063
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6063
  %cmp8 = icmp eq i32 %bf.clear7, 13, !dbg !6063
  br i1 %cmp8, label %lor.end, label %lor.rhs, !dbg !6064

lor.rhs:                                          ; preds = %while.cond
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6065
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6065
  %bf.load9 = load i32, i32* %14, align 8, !dbg !6065
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6065
  %cmp11 = icmp eq i32 %bf.clear10, 7, !dbg !6065
  br label %lor.end, !dbg !6064

lor.end:                                          ; preds = %lor.rhs, %while.cond
  %15 = phi i1 [ true, %while.cond ], [ %cmp11, %lor.rhs ]
  br i1 %15, label %while.body, label %while.end, !dbg !6062

while.body:                                       ; preds = %lor.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6066
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6069
  %il12 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %17, i32 0, i32 7, !dbg !6069
  %rtl13 = bitcast %union.basic_block_il_dependent* %il12 to %struct.rtl_bb_info**, !dbg !6069
  %18 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl13, align 8, !dbg !6069
  %end_14 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %18, i32 0, i32 1, !dbg !6069
  %19 = load %struct.rtx_def*, %struct.rtx_def** %end_14, align 8, !dbg !6069
  %cmp15 = icmp eq %struct.rtx_def* %16, %19, !dbg !6070
  br i1 %cmp15, label %if.then16, label %if.end17, !dbg !6071

if.then16:                                        ; preds = %while.body
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6072
  br label %return, !dbg !6072

if.end17:                                         ; preds = %while.body
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6073
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6073
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6073
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 2, !dbg !6073
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6073
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !6073
  store %struct.rtx_def* %21, %struct.rtx_def** %insn, align 8, !dbg !6074
  br label %while.cond, !dbg !6062, !llvm.loop !6075

while.end:                                        ; preds = %lor.end
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6077
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6077
  %bf.load22 = load i32, i32* %23, align 8, !dbg !6077
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !6077
  %cmp24 = icmp eq i32 %bf.clear23, 9, !dbg !6077
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !6079

if.then25:                                        ; preds = %while.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6080
  br label %return, !dbg !6080

if.end26:                                         ; preds = %while.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6081
  store %struct.rtx_def* %24, %struct.rtx_def** %retval, align 8, !dbg !6082
  br label %return, !dbg !6082

return:                                           ; preds = %if.end26, %if.then25, %if.then16, %if.then4
  %25 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6083
  ret %struct.rtx_def* %25, !dbg !6083
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %bb, i32 %skip_use_p) #0 !dbg !6084 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %skip_use_p.addr = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %head = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !6087, metadata !DIExpression()), !dbg !6088
  store i32 %skip_use_p, i32* %skip_use_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %skip_use_p.addr, metadata !6089, metadata !DIExpression()), !dbg !6090
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6091, metadata !DIExpression()), !dbg !6092
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6093
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !6093
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6093
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6093
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !6093
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6093
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !6092
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !6094, metadata !DIExpression()), !dbg !6095
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !6096
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !6096
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !6096
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !6096
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 0, !dbg !6096
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6096
  store %struct.rtx_def* %5, %struct.rtx_def** %head, align 8, !dbg !6095
  br label %while.cond, !dbg !6097

while.cond:                                       ; preds = %if.end, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6098
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !6098
  %bf.load = load i32, i32* %7, align 8, !dbg !6098
  %bf.clear = and i32 %bf.load, 65535, !dbg !6098
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !6098
  br i1 %cmp, label %lor.end, label %lor.lhs.false, !dbg !6099

lor.lhs.false:                                    ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6100
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6100
  %bf.load3 = load i32, i32* %9, align 8, !dbg !6100
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !6100
  %cmp5 = icmp eq i32 %bf.clear4, 9, !dbg !6100
  br i1 %cmp5, label %lor.end, label %lor.lhs.false6, !dbg !6101

lor.lhs.false6:                                   ; preds = %lor.lhs.false
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6102
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !6102
  %bf.load7 = load i32, i32* %11, align 8, !dbg !6102
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6102
  %cmp9 = icmp eq i32 %bf.clear8, 7, !dbg !6102
  br i1 %cmp9, label %lor.end, label %lor.rhs, !dbg !6103

lor.rhs:                                          ; preds = %lor.lhs.false6
  %12 = load i32, i32* %skip_use_p.addr, align 4, !dbg !6104
  %tobool = icmp ne i32 %12, 0, !dbg !6104
  br i1 %tobool, label %land.lhs.true, label %land.end, !dbg !6105

land.lhs.true:                                    ; preds = %lor.rhs
  %13 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6106
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6106
  %bf.load10 = load i32, i32* %14, align 8, !dbg !6106
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !6106
  %cmp12 = icmp eq i32 %bf.clear11, 8, !dbg !6106
  br i1 %cmp12, label %land.rhs, label %land.end, !dbg !6107

land.rhs:                                         ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6108
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %15, i32 0, i32 1, !dbg !6108
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6108
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !6108
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6108
  %16 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6108
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6108
  %bf.load13 = load i32, i32* %17, align 8, !dbg !6108
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !6108
  %cmp15 = icmp eq i32 %bf.clear14, 24, !dbg !6109
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %lor.rhs
  %18 = phi i1 [ false, %land.lhs.true ], [ false, %lor.rhs ], [ %cmp15, %land.rhs ], !dbg !6110
  br label %lor.end, !dbg !6103

lor.end:                                          ; preds = %land.end, %lor.lhs.false6, %lor.lhs.false, %while.cond
  %19 = phi i1 [ true, %lor.lhs.false6 ], [ true, %lor.lhs.false ], [ true, %while.cond ], [ %18, %land.end ]
  br i1 %19, label %while.body, label %while.end, !dbg !6097

while.body:                                       ; preds = %lor.end
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6111
  %21 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !6114
  %cmp16 = icmp eq %struct.rtx_def* %20, %21, !dbg !6115
  br i1 %cmp16, label %if.then, label %if.end, !dbg !6116

if.then:                                          ; preds = %while.body
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6117
  br label %return, !dbg !6117

if.end:                                           ; preds = %while.body
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6118
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !6118
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !6118
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !6118
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !6118
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !6118
  store %struct.rtx_def* %23, %struct.rtx_def** %insn, align 8, !dbg !6119
  br label %while.cond, !dbg !6097, !llvm.loop !6120

while.end:                                        ; preds = %lor.end
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6122
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6122
  %bf.load21 = load i32, i32* %25, align 8, !dbg !6122
  %bf.clear22 = and i32 %bf.load21, 65535, !dbg !6122
  %cmp23 = icmp eq i32 %bf.clear22, 12, !dbg !6122
  br i1 %cmp23, label %if.then24, label %if.end25, !dbg !6124

if.then24:                                        ; preds = %while.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !6125
  br label %return, !dbg !6125

if.end25:                                         ; preds = %while.end
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6126
  store %struct.rtx_def* %26, %struct.rtx_def** %retval, align 8, !dbg !6127
  br label %return, !dbg !6127

return:                                           ; preds = %if.end25, %if.then24, %if.then
  %27 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !6128
  ret %struct.rtx_def* %27, !dbg !6128
}

declare dso_local %struct.rtx_def* @single_set_2(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @rtx_equal_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_operand_ok(%struct.rtx_def* %op) #0 !dbg !6129 {
entry:
  %retval = alloca i32, align 4
  %op.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %op, %struct.rtx_def** %op.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op.addr, metadata !6135, metadata !DIExpression()), !dbg !6136
  %0 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6137
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6137
  %bf.load = load i32, i32* %1, align 8, !dbg !6137
  %bf.clear = and i32 %bf.load, 65535, !dbg !6137
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !6137
  br i1 %cmp, label %if.then, label %if.end, !dbg !6139

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6140
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !6140
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6140
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6140
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6140
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6140
  %call = call i32 @side_effects_p(%struct.rtx_def* %3), !dbg !6141
  %tobool = icmp ne i32 %call, 0, !dbg !6142
  %lnot = xor i1 %tobool, true, !dbg !6142
  %lnot.ext = zext i1 %lnot to i32, !dbg !6142
  store i32 %lnot.ext, i32* %retval, align 4, !dbg !6143
  br label %return, !dbg !6143

if.end:                                           ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6144
  %call1 = call i32 @side_effects_p(%struct.rtx_def* %4), !dbg !6146
  %tobool2 = icmp ne i32 %call1, 0, !dbg !6146
  br i1 %tobool2, label %if.then3, label %if.end4, !dbg !6147

if.then3:                                         ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6148
  br label %return, !dbg !6148

if.end4:                                          ; preds = %if.end
  %5 = load %struct.rtx_def*, %struct.rtx_def** %op.addr, align 8, !dbg !6149
  %call5 = call i32 @may_trap_p(%struct.rtx_def* %5), !dbg !6150
  %tobool6 = icmp ne i32 %call5, 0, !dbg !6151
  %lnot7 = xor i1 %tobool6, true, !dbg !6151
  %lnot.ext8 = zext i1 %lnot7 to i32, !dbg !6151
  store i32 %lnot.ext8, i32* %retval, align 4, !dbg !6152
  br label %return, !dbg !6152

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %6 = load i32, i32* %retval, align 4, !dbg !6153
  ret i32 %6, !dbg !6153
}

declare dso_local i32 @reg_overlap_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @modified_between_p(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @side_effects_p(%struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @rhs_regno(%struct.rtx_def* %x) #0 !dbg !6154 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !6157, metadata !DIExpression()), !dbg !6158
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !6159
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !6159
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6159
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6159
  %rt_uint = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !6159
  %1 = load i32, i32* %rt_uint, align 8, !dbg !6159
  ret i32 %1, !dbg !6160
}

declare dso_local %struct.rtx_def* @gen_reg_rtx(i32) #1

declare dso_local void @reorder_insns(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @find_reg_note(%struct.rtx_def*, i32, %struct.rtx_def*) #1

declare dso_local void @remove_note(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @noce_mem_write_may_trap_or_fault_p(%struct.rtx_def* %mem) #0 !dbg !6161 {
entry:
  %retval = alloca i8, align 1
  %mem.addr = alloca %struct.rtx_def*, align 8
  %addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !6164, metadata !DIExpression()), !dbg !6165
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %addr, metadata !6166, metadata !DIExpression()), !dbg !6167
  %0 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6168
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !6168
  %bf.load = load i32, i32* %1, align 8, !dbg !6168
  %bf.lshr = lshr i32 %bf.load, 26, !dbg !6168
  %bf.clear = and i32 %bf.lshr, 1, !dbg !6168
  %tobool = icmp ne i32 %bf.clear, 0, !dbg !6168
  br i1 %tobool, label %if.then, label %if.end, !dbg !6170

if.then:                                          ; preds = %entry
  store i8 1, i8* %retval, align 1, !dbg !6171
  br label %return, !dbg !6171

if.end:                                           ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6172
  %call = call i32 @may_trap_or_fault_p(%struct.rtx_def* %2), !dbg !6174
  %tobool1 = icmp ne i32 %call, 0, !dbg !6174
  br i1 %tobool1, label %if.then2, label %if.end3, !dbg !6175

if.then2:                                         ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !6176
  br label %return, !dbg !6176

if.end3:                                          ; preds = %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6177
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !6177
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6177
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6177
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6177
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6177
  store %struct.rtx_def* %4, %struct.rtx_def** %addr, align 8, !dbg !6178
  %5 = load %struct.rtx_def* (%struct.rtx_def*)*, %struct.rtx_def* (%struct.rtx_def*)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 40), align 8, !dbg !6179
  %6 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6180
  %call4 = call %struct.rtx_def* %5(%struct.rtx_def* %6), !dbg !6181
  store %struct.rtx_def* %call4, %struct.rtx_def** %addr, align 8, !dbg !6182
  br label %while.cond, !dbg !6183

while.cond:                                       ; preds = %sw.epilog, %if.end3
  %7 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6184
  %tobool5 = icmp ne %struct.rtx_def* %7, null, !dbg !6183
  br i1 %tobool5, label %while.body, label %while.end, !dbg !6183

while.body:                                       ; preds = %while.cond
  %8 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6185
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !6185
  %bf.load6 = load i32, i32* %9, align 8, !dbg !6185
  %bf.clear7 = and i32 %bf.load6, 65535, !dbg !6185
  switch i32 %bf.clear7, label %sw.default [
    i32 35, label %sw.bb
    i32 74, label %sw.bb
    i32 75, label %sw.bb
    i32 76, label %sw.bb
    i32 77, label %sw.bb
    i32 79, label %sw.bb
    i32 122, label %sw.bb12
    i32 78, label %sw.bb12
    i32 49, label %sw.bb17
    i32 44, label %sw.bb30
    i32 45, label %sw.bb31
  ], !dbg !6186

sw.bb:                                            ; preds = %while.body, %while.body, %while.body, %while.body, %while.body, %while.body
  %10 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6187
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !6187
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !6187
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 0, !dbg !6187
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !6187
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !6187
  store %struct.rtx_def* %11, %struct.rtx_def** %addr, align 8, !dbg !6189
  br label %sw.epilog, !dbg !6190

sw.bb12:                                          ; preds = %while.body, %while.body
  %12 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6191
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !6191
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !6191
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 1, !dbg !6191
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !6191
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !6191
  store %struct.rtx_def* %13, %struct.rtx_def** %addr, align 8, !dbg !6192
  br label %sw.epilog, !dbg !6193

sw.bb17:                                          ; preds = %while.body
  %14 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6194
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6194
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6194
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !6194
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6194
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !6194
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6194
  %bf.load22 = load i32, i32* %16, align 8, !dbg !6194
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !6194
  %cmp = icmp eq i32 %bf.clear23, 30, !dbg !6194
  br i1 %cmp, label %if.then24, label %if.else, !dbg !6196

if.then24:                                        ; preds = %sw.bb17
  %17 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6197
  %u25 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !6197
  %fld26 = bitcast %union.u* %u25 to [1 x %union.rtunion_def]*, !dbg !6197
  %arrayidx27 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld26, i64 0, i64 0, !dbg !6197
  %rt_rtx28 = bitcast %union.rtunion_def* %arrayidx27 to %struct.rtx_def**, !dbg !6197
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx28, align 8, !dbg !6197
  store %struct.rtx_def* %18, %struct.rtx_def** %addr, align 8, !dbg !6198
  br label %if.end29, !dbg !6199

if.else:                                          ; preds = %sw.bb17
  store i8 0, i8* %retval, align 1, !dbg !6200
  br label %return, !dbg !6200

if.end29:                                         ; preds = %if.then24
  br label %sw.epilog, !dbg !6201

sw.bb30:                                          ; preds = %while.body
  store i8 1, i8* %retval, align 1, !dbg !6202
  br label %return, !dbg !6202

sw.bb31:                                          ; preds = %while.body
  %19 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6203
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !6203
  %bf.load32 = load i32, i32* %20, align 8, !dbg !6203
  %bf.lshr33 = lshr i32 %bf.load32, 26, !dbg !6203
  %bf.clear34 = and i32 %bf.lshr33, 1, !dbg !6203
  %tobool35 = icmp ne i32 %bf.clear34, 0, !dbg !6203
  br i1 %tobool35, label %cond.true, label %cond.false, !dbg !6205

cond.true:                                        ; preds = %sw.bb31
  br i1 false, label %land.lhs.true, label %if.end53, !dbg !6203

cond.false:                                       ; preds = %sw.bb31
  %21 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6203
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6203
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !6203
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 2, !dbg !6203
  %rt_tree = bitcast %union.rtunion_def* %arrayidx38 to %union.tree_node**, !dbg !6203
  %22 = load %union.tree_node*, %union.tree_node** %rt_tree, align 8, !dbg !6203
  %tobool39 = icmp ne %union.tree_node* %22, null, !dbg !6203
  br i1 %tobool39, label %land.lhs.true, label %if.end53, !dbg !6205

land.lhs.true:                                    ; preds = %cond.false, %cond.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6206
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6206
  %bf.load40 = load i32, i32* %24, align 8, !dbg !6206
  %bf.lshr41 = lshr i32 %bf.load40, 26, !dbg !6206
  %bf.clear42 = and i32 %bf.lshr41, 1, !dbg !6206
  %tobool43 = icmp ne i32 %bf.clear42, 0, !dbg !6206
  br i1 %tobool43, label %cond.true44, label %cond.false45, !dbg !6206

cond.true44:                                      ; preds = %land.lhs.true
  br label %cond.end, !dbg !6206

cond.false45:                                     ; preds = %land.lhs.true
  %25 = load %struct.rtx_def*, %struct.rtx_def** %addr, align 8, !dbg !6206
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6206
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !6206
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 2, !dbg !6206
  %rt_tree49 = bitcast %union.rtunion_def* %arrayidx48 to %union.tree_node**, !dbg !6206
  %26 = load %union.tree_node*, %union.tree_node** %rt_tree49, align 8, !dbg !6206
  br label %cond.end, !dbg !6206

cond.end:                                         ; preds = %cond.false45, %cond.true44
  %cond = phi %union.tree_node* [ null, %cond.true44 ], [ %26, %cond.false45 ], !dbg !6206
  %call50 = call zeroext i8 @decl_readonly_section(%union.tree_node* %cond, i32 0), !dbg !6207
  %conv = zext i8 %call50 to i32, !dbg !6207
  %tobool51 = icmp ne i32 %conv, 0, !dbg !6207
  br i1 %tobool51, label %if.then52, label %if.end53, !dbg !6208

if.then52:                                        ; preds = %cond.end
  store i8 1, i8* %retval, align 1, !dbg !6209
  br label %return, !dbg !6209

if.end53:                                         ; preds = %cond.end, %cond.false, %cond.true
  store i8 0, i8* %retval, align 1, !dbg !6210
  br label %return, !dbg !6210

sw.default:                                       ; preds = %while.body
  store i8 0, i8* %retval, align 1, !dbg !6211
  br label %return, !dbg !6211

sw.epilog:                                        ; preds = %if.end29, %sw.bb12, %sw.bb
  br label %while.cond, !dbg !6183, !llvm.loop !6212

while.end:                                        ; preds = %while.cond
  store i8 0, i8* %retval, align 1, !dbg !6214
  br label %return, !dbg !6214

return:                                           ; preds = %while.end, %sw.default, %if.end53, %if.then52, %sw.bb30, %if.else, %if.then2, %if.then
  %27 = load i8, i8* %retval, align 1, !dbg !6215
  ret i8 %27, !dbg !6215
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @noce_can_store_speculate_p(%struct.basic_block_def* %top_bb, %struct.rtx_def* %mem) #0 !dbg !6216 {
entry:
  %retval = alloca i8, align 1
  %top_bb.addr = alloca %struct.basic_block_def*, align 8
  %mem.addr = alloca %struct.rtx_def*, align 8
  %dominator = alloca %struct.basic_block_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %top_bb, %struct.basic_block_def** %top_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %top_bb.addr, metadata !6219, metadata !DIExpression()), !dbg !6220
  store %struct.rtx_def* %mem, %struct.rtx_def** %mem.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %mem.addr, metadata !6221, metadata !DIExpression()), !dbg !6222
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %dominator, metadata !6223, metadata !DIExpression()), !dbg !6224
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %top_bb.addr, align 8, !dbg !6225
  %call = call %struct.basic_block_def* @get_immediate_dominator(i32 2, %struct.basic_block_def* %0), !dbg !6227
  store %struct.basic_block_def* %call, %struct.basic_block_def** %dominator, align 8, !dbg !6228
  br label %for.cond, !dbg !6229

for.cond:                                         ; preds = %for.inc48, %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %dominator, align 8, !dbg !6230
  %cmp = icmp ne %struct.basic_block_def* %1, null, !dbg !6232
  br i1 %cmp, label %for.body, label %for.end50, !dbg !6233

for.body:                                         ; preds = %for.cond
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6234, metadata !DIExpression()), !dbg !6236
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %dominator, align 8, !dbg !6237
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 7, !dbg !6237
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !6237
  %3 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !6237
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %3, i32 0, i32 0, !dbg !6237
  %4 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !6237
  store %struct.rtx_def* %4, %struct.rtx_def** %insn, align 8, !dbg !6237
  br label %for.cond1, !dbg !6237

for.cond1:                                        ; preds = %for.inc, %for.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6239
  %tobool = icmp ne %struct.rtx_def* %5, null, !dbg !6239
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !6239

land.rhs:                                         ; preds = %for.cond1
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6239
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %dominator, align 8, !dbg !6239
  %il2 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %7, i32 0, i32 7, !dbg !6239
  %rtl3 = bitcast %union.basic_block_il_dependent* %il2 to %struct.rtl_bb_info**, !dbg !6239
  %8 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl3, align 8, !dbg !6239
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %8, i32 0, i32 1, !dbg !6239
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !6239
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !6239
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6239
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !6239
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6239
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6239
  %cmp4 = icmp ne %struct.rtx_def* %6, %10, !dbg !6239
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond1
  %11 = phi i1 [ false, %for.cond1 ], [ %cmp4, %land.rhs ], !dbg !6241
  br i1 %11, label %for.body5, label %for.end, !dbg !6237

for.body5:                                        ; preds = %land.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6242
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !6242
  %bf.load = load i32, i32* %13, align 8, !dbg !6242
  %bf.clear = and i32 %bf.load, 65535, !dbg !6242
  %cmp6 = icmp eq i32 %bf.clear, 8, !dbg !6242
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false, !dbg !6242

lor.lhs.false:                                    ; preds = %for.body5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6242
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !6242
  %bf.load7 = load i32, i32* %15, align 8, !dbg !6242
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !6242
  %cmp9 = icmp eq i32 %bf.clear8, 7, !dbg !6242
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false10, !dbg !6242

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6242
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6242
  %bf.load11 = load i32, i32* %17, align 8, !dbg !6242
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !6242
  %cmp13 = icmp eq i32 %bf.clear12, 9, !dbg !6242
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false14, !dbg !6242

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6242
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !6242
  %bf.load15 = load i32, i32* %19, align 8, !dbg !6242
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !6242
  %cmp17 = icmp eq i32 %bf.clear16, 10, !dbg !6242
  br i1 %cmp17, label %land.lhs.true, label %if.end, !dbg !6245

land.lhs.true:                                    ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false, %for.body5
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6246
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !6246
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !6246
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 5, !dbg !6246
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !6246
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !6246
  %call22 = call i32 @volatile_insn_p(%struct.rtx_def* %21), !dbg !6247
  %tobool23 = icmp ne i32 %call22, 0, !dbg !6247
  br i1 %tobool23, label %if.then, label %lor.lhs.false24, !dbg !6248

lor.lhs.false24:                                  ; preds = %land.lhs.true
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6249
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6249
  %bf.load25 = load i32, i32* %23, align 8, !dbg !6249
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !6249
  %cmp27 = icmp eq i32 %bf.clear26, 10, !dbg !6249
  br i1 %cmp27, label %land.lhs.true28, label %if.end, !dbg !6250

land.lhs.true28:                                  ; preds = %lor.lhs.false24
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6251
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !6251
  %bf.load29 = load i32, i32* %25, align 8, !dbg !6251
  %bf.lshr = lshr i32 %bf.load29, 26, !dbg !6251
  %bf.clear30 = and i32 %bf.lshr, 1, !dbg !6251
  %tobool31 = icmp ne i32 %bf.clear30, 0, !dbg !6251
  br i1 %tobool31, label %if.end, label %if.then, !dbg !6252

if.then:                                          ; preds = %land.lhs.true28, %land.lhs.true
  store i8 0, i8* %retval, align 1, !dbg !6253
  br label %return, !dbg !6253

if.end:                                           ; preds = %land.lhs.true28, %lor.lhs.false24, %lor.lhs.false14
  %26 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6254
  %27 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6256
  %call32 = call zeroext i8 @memory_modified_in_insn_p(%struct.rtx_def* %26, %struct.rtx_def* %27), !dbg !6257
  %tobool33 = icmp ne i8 %call32, 0, !dbg !6257
  br i1 %tobool33, label %if.then34, label %if.end35, !dbg !6258

if.then34:                                        ; preds = %if.end
  store i8 1, i8* %retval, align 1, !dbg !6259
  br label %return, !dbg !6259

if.end35:                                         ; preds = %if.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %mem.addr, align 8, !dbg !6260
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !6260
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !6260
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 0, !dbg !6260
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !6260
  %29 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !6260
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6262
  %call40 = call i32 @modified_in_p(%struct.rtx_def* %29, %struct.rtx_def* %30), !dbg !6263
  %tobool41 = icmp ne i32 %call40, 0, !dbg !6263
  br i1 %tobool41, label %if.then42, label %if.end43, !dbg !6264

if.then42:                                        ; preds = %if.end35
  store i8 0, i8* %retval, align 1, !dbg !6265
  br label %return, !dbg !6265

if.end43:                                         ; preds = %if.end35
  br label %for.inc, !dbg !6266

for.inc:                                          ; preds = %if.end43
  %31 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6239
  %u44 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !6239
  %fld45 = bitcast %union.u* %u44 to [1 x %union.rtunion_def]*, !dbg !6239
  %arrayidx46 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld45, i64 0, i64 2, !dbg !6239
  %rt_rtx47 = bitcast %union.rtunion_def* %arrayidx46 to %struct.rtx_def**, !dbg !6239
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx47, align 8, !dbg !6239
  store %struct.rtx_def* %32, %struct.rtx_def** %insn, align 8, !dbg !6239
  br label %for.cond1, !dbg !6239, !llvm.loop !6267

for.end:                                          ; preds = %land.end
  br label %for.inc48, !dbg !6269

for.inc48:                                        ; preds = %for.end
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %dominator, align 8, !dbg !6270
  %call49 = call %struct.basic_block_def* @get_immediate_dominator(i32 2, %struct.basic_block_def* %33), !dbg !6271
  store %struct.basic_block_def* %call49, %struct.basic_block_def** %dominator, align 8, !dbg !6272
  br label %for.cond, !dbg !6273, !llvm.loop !6274

for.end50:                                        ; preds = %for.cond
  store i8 0, i8* %retval, align 1, !dbg !6276
  br label %return, !dbg !6276

return:                                           ; preds = %for.end50, %if.then42, %if.then34, %if.then
  %34 = load i8, i8* %retval, align 1, !dbg !6277
  ret i8 %34, !dbg !6277
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_move(%struct.noce_if_info* %if_info) #0 !dbg !6278 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %y = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !6279, metadata !DIExpression()), !dbg !6280
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !6281, metadata !DIExpression()), !dbg !6282
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6283
  %cond1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 5, !dbg !6284
  %1 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !6284
  store %struct.rtx_def* %1, %struct.rtx_def** %cond, align 8, !dbg !6282
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6285, metadata !DIExpression()), !dbg !6286
  %2 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6287
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !6287
  %bf.load = load i32, i32* %3, align 8, !dbg !6287
  %bf.clear = and i32 %bf.load, 65535, !dbg !6287
  store i32 %bf.clear, i32* %code, align 4, !dbg !6286
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y, metadata !6288, metadata !DIExpression()), !dbg !6289
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6290, metadata !DIExpression()), !dbg !6291
  %4 = load i32, i32* %code, align 4, !dbg !6292
  %cmp = icmp ne i32 %4, 80, !dbg !6294
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !6295

land.lhs.true:                                    ; preds = %entry
  %5 = load i32, i32* %code, align 4, !dbg !6296
  %cmp2 = icmp ne i32 %5, 81, !dbg !6297
  br i1 %cmp2, label %if.then, label %if.end, !dbg !6298

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !6299
  br label %return, !dbg !6299

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 11, !dbg !6300
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6300
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !6300
  %bf.load3 = load i32, i32* %8, align 8, !dbg !6300
  %bf.lshr = lshr i32 %bf.load3, 16, !dbg !6300
  %bf.clear4 = and i32 %bf.lshr, 255, !dbg !6300
  %idxprom = zext i32 %bf.clear4 to i64, !dbg !6300
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6300
  %9 = load i8, i8* %arrayidx, align 1, !dbg !6300
  %conv = zext i8 %9 to i32, !dbg !6300
  %cmp5 = icmp eq i32 %conv, 8, !dbg !6300
  br i1 %cmp5, label %land.lhs.true36, label %lor.lhs.false, !dbg !6300

lor.lhs.false:                                    ; preds = %if.end
  %10 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x7 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %10, i32 0, i32 11, !dbg !6300
  %11 = load %struct.rtx_def*, %struct.rtx_def** %x7, align 8, !dbg !6300
  %12 = bitcast %struct.rtx_def* %11 to i32*, !dbg !6300
  %bf.load8 = load i32, i32* %12, align 8, !dbg !6300
  %bf.lshr9 = lshr i32 %bf.load8, 16, !dbg !6300
  %bf.clear10 = and i32 %bf.lshr9, 255, !dbg !6300
  %idxprom11 = zext i32 %bf.clear10 to i64, !dbg !6300
  %arrayidx12 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom11, !dbg !6300
  %13 = load i8, i8* %arrayidx12, align 1, !dbg !6300
  %conv13 = zext i8 %13 to i32, !dbg !6300
  %cmp14 = icmp eq i32 %conv13, 9, !dbg !6300
  br i1 %cmp14, label %land.lhs.true36, label %lor.lhs.false16, !dbg !6300

lor.lhs.false16:                                  ; preds = %lor.lhs.false
  %14 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x17 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %14, i32 0, i32 11, !dbg !6300
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x17, align 8, !dbg !6300
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !6300
  %bf.load18 = load i32, i32* %16, align 8, !dbg !6300
  %bf.lshr19 = lshr i32 %bf.load18, 16, !dbg !6300
  %bf.clear20 = and i32 %bf.lshr19, 255, !dbg !6300
  %idxprom21 = zext i32 %bf.clear20 to i64, !dbg !6300
  %arrayidx22 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom21, !dbg !6300
  %17 = load i8, i8* %arrayidx22, align 1, !dbg !6300
  %conv23 = zext i8 %17 to i32, !dbg !6300
  %cmp24 = icmp eq i32 %conv23, 11, !dbg !6300
  br i1 %cmp24, label %land.lhs.true36, label %lor.lhs.false26, !dbg !6300

lor.lhs.false26:                                  ; preds = %lor.lhs.false16
  %18 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x27 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %18, i32 0, i32 11, !dbg !6300
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x27, align 8, !dbg !6300
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !6300
  %bf.load28 = load i32, i32* %20, align 8, !dbg !6300
  %bf.lshr29 = lshr i32 %bf.load28, 16, !dbg !6300
  %bf.clear30 = and i32 %bf.lshr29, 255, !dbg !6300
  %idxprom31 = zext i32 %bf.clear30 to i64, !dbg !6300
  %arrayidx32 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom31, !dbg !6300
  %21 = load i8, i8* %arrayidx32, align 1, !dbg !6300
  %conv33 = zext i8 %21 to i32, !dbg !6300
  %cmp34 = icmp eq i32 %conv33, 17, !dbg !6300
  br i1 %cmp34, label %land.lhs.true36, label %lor.lhs.false151, !dbg !6300

land.lhs.true36:                                  ; preds = %lor.lhs.false26, %lor.lhs.false16, %lor.lhs.false, %if.end
  %22 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x37 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %22, i32 0, i32 11, !dbg !6300
  %23 = load %struct.rtx_def*, %struct.rtx_def** %x37, align 8, !dbg !6300
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !6300
  %bf.load38 = load i32, i32* %24, align 8, !dbg !6300
  %bf.lshr39 = lshr i32 %bf.load38, 16, !dbg !6300
  %bf.clear40 = and i32 %bf.lshr39, 255, !dbg !6300
  %idxprom41 = zext i32 %bf.clear40 to i64, !dbg !6300
  %arrayidx42 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom41, !dbg !6300
  %25 = load i8, i8* %arrayidx42, align 1, !dbg !6300
  %conv43 = zext i8 %25 to i32, !dbg !6300
  %cmp44 = icmp eq i32 %conv43, 8, !dbg !6300
  br i1 %cmp44, label %cond.true, label %lor.lhs.false46, !dbg !6300

lor.lhs.false46:                                  ; preds = %land.lhs.true36
  %26 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x47 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %26, i32 0, i32 11, !dbg !6300
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x47, align 8, !dbg !6300
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !6300
  %bf.load48 = load i32, i32* %28, align 8, !dbg !6300
  %bf.lshr49 = lshr i32 %bf.load48, 16, !dbg !6300
  %bf.clear50 = and i32 %bf.lshr49, 255, !dbg !6300
  %idxprom51 = zext i32 %bf.clear50 to i64, !dbg !6300
  %arrayidx52 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom51, !dbg !6300
  %29 = load i8, i8* %arrayidx52, align 1, !dbg !6300
  %conv53 = zext i8 %29 to i32, !dbg !6300
  %cmp54 = icmp eq i32 %conv53, 9, !dbg !6300
  br i1 %cmp54, label %cond.true, label %cond.false, !dbg !6300

cond.true:                                        ; preds = %lor.lhs.false46, %land.lhs.true36
  %30 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x56 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %30, i32 0, i32 11, !dbg !6300
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x56, align 8, !dbg !6300
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !6300
  %bf.load57 = load i32, i32* %32, align 8, !dbg !6300
  %bf.lshr58 = lshr i32 %bf.load57, 16, !dbg !6300
  %bf.clear59 = and i32 %bf.lshr58, 255, !dbg !6300
  br label %cond.end, !dbg !6300

cond.false:                                       ; preds = %lor.lhs.false46
  %33 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x60 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %33, i32 0, i32 11, !dbg !6300
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x60, align 8, !dbg !6300
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !6300
  %bf.load61 = load i32, i32* %35, align 8, !dbg !6300
  %bf.lshr62 = lshr i32 %bf.load61, 16, !dbg !6300
  %bf.clear63 = and i32 %bf.lshr62, 255, !dbg !6300
  %idxprom64 = zext i32 %bf.clear63 to i64, !dbg !6300
  %arrayidx65 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom64, !dbg !6300
  %36 = load i8, i8* %arrayidx65, align 1, !dbg !6300
  %conv66 = zext i8 %36 to i32, !dbg !6300
  br label %cond.end, !dbg !6300

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond67 = phi i32 [ %bf.clear59, %cond.true ], [ %conv66, %cond.false ], !dbg !6300
  %idxprom68 = zext i32 %cond67 to i64, !dbg !6300
  %arrayidx69 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom68, !dbg !6300
  %37 = load i8, i8* %arrayidx69, align 1, !dbg !6300
  %conv70 = zext i8 %37 to i32, !dbg !6300
  %cmp71 = icmp eq i32 %conv70, 9, !dbg !6300
  br i1 %cmp71, label %cond.true73, label %cond.false108, !dbg !6300

cond.true73:                                      ; preds = %cond.end
  %38 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x74 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %38, i32 0, i32 11, !dbg !6300
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x74, align 8, !dbg !6300
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !6300
  %bf.load75 = load i32, i32* %40, align 8, !dbg !6300
  %bf.lshr76 = lshr i32 %bf.load75, 16, !dbg !6300
  %bf.clear77 = and i32 %bf.lshr76, 255, !dbg !6300
  %idxprom78 = zext i32 %bf.clear77 to i64, !dbg !6300
  %arrayidx79 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom78, !dbg !6300
  %41 = load i8, i8* %arrayidx79, align 1, !dbg !6300
  %conv80 = zext i8 %41 to i32, !dbg !6300
  %cmp81 = icmp eq i32 %conv80, 8, !dbg !6300
  br i1 %cmp81, label %cond.true93, label %lor.lhs.false83, !dbg !6300

lor.lhs.false83:                                  ; preds = %cond.true73
  %42 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x84 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %42, i32 0, i32 11, !dbg !6300
  %43 = load %struct.rtx_def*, %struct.rtx_def** %x84, align 8, !dbg !6300
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !6300
  %bf.load85 = load i32, i32* %44, align 8, !dbg !6300
  %bf.lshr86 = lshr i32 %bf.load85, 16, !dbg !6300
  %bf.clear87 = and i32 %bf.lshr86, 255, !dbg !6300
  %idxprom88 = zext i32 %bf.clear87 to i64, !dbg !6300
  %arrayidx89 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom88, !dbg !6300
  %45 = load i8, i8* %arrayidx89, align 1, !dbg !6300
  %conv90 = zext i8 %45 to i32, !dbg !6300
  %cmp91 = icmp eq i32 %conv90, 9, !dbg !6300
  br i1 %cmp91, label %cond.true93, label %cond.false98, !dbg !6300

cond.true93:                                      ; preds = %lor.lhs.false83, %cond.true73
  %46 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x94 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %46, i32 0, i32 11, !dbg !6300
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x94, align 8, !dbg !6300
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !6300
  %bf.load95 = load i32, i32* %48, align 8, !dbg !6300
  %bf.lshr96 = lshr i32 %bf.load95, 16, !dbg !6300
  %bf.clear97 = and i32 %bf.lshr96, 255, !dbg !6300
  br label %cond.end106, !dbg !6300

cond.false98:                                     ; preds = %lor.lhs.false83
  %49 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x99 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %49, i32 0, i32 11, !dbg !6300
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x99, align 8, !dbg !6300
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !6300
  %bf.load100 = load i32, i32* %51, align 8, !dbg !6300
  %bf.lshr101 = lshr i32 %bf.load100, 16, !dbg !6300
  %bf.clear102 = and i32 %bf.lshr101, 255, !dbg !6300
  %idxprom103 = zext i32 %bf.clear102 to i64, !dbg !6300
  %arrayidx104 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom103, !dbg !6300
  %52 = load i8, i8* %arrayidx104, align 1, !dbg !6300
  %conv105 = zext i8 %52 to i32, !dbg !6300
  br label %cond.end106, !dbg !6300

cond.end106:                                      ; preds = %cond.false98, %cond.true93
  %cond107 = phi i32 [ %bf.clear97, %cond.true93 ], [ %conv105, %cond.false98 ], !dbg !6300
  %sub = sub i32 %cond107, 42, !dbg !6300
  %add = add i32 %sub, 4, !dbg !6300
  br label %cond.end144, !dbg !6300

cond.false108:                                    ; preds = %cond.end
  %53 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x109 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %53, i32 0, i32 11, !dbg !6300
  %54 = load %struct.rtx_def*, %struct.rtx_def** %x109, align 8, !dbg !6300
  %55 = bitcast %struct.rtx_def* %54 to i32*, !dbg !6300
  %bf.load110 = load i32, i32* %55, align 8, !dbg !6300
  %bf.lshr111 = lshr i32 %bf.load110, 16, !dbg !6300
  %bf.clear112 = and i32 %bf.lshr111, 255, !dbg !6300
  %idxprom113 = zext i32 %bf.clear112 to i64, !dbg !6300
  %arrayidx114 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom113, !dbg !6300
  %56 = load i8, i8* %arrayidx114, align 1, !dbg !6300
  %conv115 = zext i8 %56 to i32, !dbg !6300
  %cmp116 = icmp eq i32 %conv115, 8, !dbg !6300
  br i1 %cmp116, label %cond.true128, label %lor.lhs.false118, !dbg !6300

lor.lhs.false118:                                 ; preds = %cond.false108
  %57 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x119 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %57, i32 0, i32 11, !dbg !6300
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x119, align 8, !dbg !6300
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !6300
  %bf.load120 = load i32, i32* %59, align 8, !dbg !6300
  %bf.lshr121 = lshr i32 %bf.load120, 16, !dbg !6300
  %bf.clear122 = and i32 %bf.lshr121, 255, !dbg !6300
  %idxprom123 = zext i32 %bf.clear122 to i64, !dbg !6300
  %arrayidx124 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom123, !dbg !6300
  %60 = load i8, i8* %arrayidx124, align 1, !dbg !6300
  %conv125 = zext i8 %60 to i32, !dbg !6300
  %cmp126 = icmp eq i32 %conv125, 9, !dbg !6300
  br i1 %cmp126, label %cond.true128, label %cond.false133, !dbg !6300

cond.true128:                                     ; preds = %lor.lhs.false118, %cond.false108
  %61 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x129 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %61, i32 0, i32 11, !dbg !6300
  %62 = load %struct.rtx_def*, %struct.rtx_def** %x129, align 8, !dbg !6300
  %63 = bitcast %struct.rtx_def* %62 to i32*, !dbg !6300
  %bf.load130 = load i32, i32* %63, align 8, !dbg !6300
  %bf.lshr131 = lshr i32 %bf.load130, 16, !dbg !6300
  %bf.clear132 = and i32 %bf.lshr131, 255, !dbg !6300
  br label %cond.end141, !dbg !6300

cond.false133:                                    ; preds = %lor.lhs.false118
  %64 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6300
  %x134 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %64, i32 0, i32 11, !dbg !6300
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x134, align 8, !dbg !6300
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !6300
  %bf.load135 = load i32, i32* %66, align 8, !dbg !6300
  %bf.lshr136 = lshr i32 %bf.load135, 16, !dbg !6300
  %bf.clear137 = and i32 %bf.lshr136, 255, !dbg !6300
  %idxprom138 = zext i32 %bf.clear137 to i64, !dbg !6300
  %arrayidx139 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom138, !dbg !6300
  %67 = load i8, i8* %arrayidx139, align 1, !dbg !6300
  %conv140 = zext i8 %67 to i32, !dbg !6300
  br label %cond.end141, !dbg !6300

cond.end141:                                      ; preds = %cond.false133, %cond.true128
  %cond142 = phi i32 [ %bf.clear132, %cond.true128 ], [ %conv140, %cond.false133 ], !dbg !6300
  %sub143 = sub i32 %cond142, 38, !dbg !6300
  br label %cond.end144, !dbg !6300

cond.end144:                                      ; preds = %cond.end141, %cond.end106
  %cond145 = phi i32 [ %add, %cond.end106 ], [ %sub143, %cond.end141 ], !dbg !6300
  %idxprom146 = zext i32 %cond145 to i64, !dbg !6300
  %arrayidx147 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom146, !dbg !6300
  %68 = load %struct.real_format*, %struct.real_format** %arrayidx147, align 8, !dbg !6300
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %68, i32 0, i32 11, !dbg !6300
  %69 = load i8, i8* %has_nans, align 2, !dbg !6300
  %conv148 = zext i8 %69 to i32, !dbg !6300
  %tobool = icmp ne i32 %conv148, 0, !dbg !6300
  br i1 %tobool, label %land.lhs.true149, label %lor.lhs.false151, !dbg !6300

land.lhs.true149:                                 ; preds = %cond.end144
  %70 = load i32, i32* @flag_finite_math_only, align 4, !dbg !6300
  %tobool150 = icmp ne i32 %70, 0, !dbg !6300
  br i1 %tobool150, label %lor.lhs.false151, label %if.then312, !dbg !6302

lor.lhs.false151:                                 ; preds = %land.lhs.true149, %cond.end144, %lor.lhs.false26
  %71 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x152 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %71, i32 0, i32 11, !dbg !6303
  %72 = load %struct.rtx_def*, %struct.rtx_def** %x152, align 8, !dbg !6303
  %73 = bitcast %struct.rtx_def* %72 to i32*, !dbg !6303
  %bf.load153 = load i32, i32* %73, align 8, !dbg !6303
  %bf.lshr154 = lshr i32 %bf.load153, 16, !dbg !6303
  %bf.clear155 = and i32 %bf.lshr154, 255, !dbg !6303
  %idxprom156 = zext i32 %bf.clear155 to i64, !dbg !6303
  %arrayidx157 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom156, !dbg !6303
  %74 = load i8, i8* %arrayidx157, align 1, !dbg !6303
  %conv158 = zext i8 %74 to i32, !dbg !6303
  %cmp159 = icmp eq i32 %conv158, 8, !dbg !6303
  br i1 %cmp159, label %land.lhs.true191, label %lor.lhs.false161, !dbg !6303

lor.lhs.false161:                                 ; preds = %lor.lhs.false151
  %75 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x162 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %75, i32 0, i32 11, !dbg !6303
  %76 = load %struct.rtx_def*, %struct.rtx_def** %x162, align 8, !dbg !6303
  %77 = bitcast %struct.rtx_def* %76 to i32*, !dbg !6303
  %bf.load163 = load i32, i32* %77, align 8, !dbg !6303
  %bf.lshr164 = lshr i32 %bf.load163, 16, !dbg !6303
  %bf.clear165 = and i32 %bf.lshr164, 255, !dbg !6303
  %idxprom166 = zext i32 %bf.clear165 to i64, !dbg !6303
  %arrayidx167 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom166, !dbg !6303
  %78 = load i8, i8* %arrayidx167, align 1, !dbg !6303
  %conv168 = zext i8 %78 to i32, !dbg !6303
  %cmp169 = icmp eq i32 %conv168, 9, !dbg !6303
  br i1 %cmp169, label %land.lhs.true191, label %lor.lhs.false171, !dbg !6303

lor.lhs.false171:                                 ; preds = %lor.lhs.false161
  %79 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x172 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %79, i32 0, i32 11, !dbg !6303
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x172, align 8, !dbg !6303
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !6303
  %bf.load173 = load i32, i32* %81, align 8, !dbg !6303
  %bf.lshr174 = lshr i32 %bf.load173, 16, !dbg !6303
  %bf.clear175 = and i32 %bf.lshr174, 255, !dbg !6303
  %idxprom176 = zext i32 %bf.clear175 to i64, !dbg !6303
  %arrayidx177 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom176, !dbg !6303
  %82 = load i8, i8* %arrayidx177, align 1, !dbg !6303
  %conv178 = zext i8 %82 to i32, !dbg !6303
  %cmp179 = icmp eq i32 %conv178, 11, !dbg !6303
  br i1 %cmp179, label %land.lhs.true191, label %lor.lhs.false181, !dbg !6303

lor.lhs.false181:                                 ; preds = %lor.lhs.false171
  %83 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x182 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %83, i32 0, i32 11, !dbg !6303
  %84 = load %struct.rtx_def*, %struct.rtx_def** %x182, align 8, !dbg !6303
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !6303
  %bf.load183 = load i32, i32* %85, align 8, !dbg !6303
  %bf.lshr184 = lshr i32 %bf.load183, 16, !dbg !6303
  %bf.clear185 = and i32 %bf.lshr184, 255, !dbg !6303
  %idxprom186 = zext i32 %bf.clear185 to i64, !dbg !6303
  %arrayidx187 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom186, !dbg !6303
  %86 = load i8, i8* %arrayidx187, align 1, !dbg !6303
  %conv188 = zext i8 %86 to i32, !dbg !6303
  %cmp189 = icmp eq i32 %conv188, 17, !dbg !6303
  br i1 %cmp189, label %land.lhs.true191, label %if.end313, !dbg !6303

land.lhs.true191:                                 ; preds = %lor.lhs.false181, %lor.lhs.false171, %lor.lhs.false161, %lor.lhs.false151
  %87 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x192 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %87, i32 0, i32 11, !dbg !6303
  %88 = load %struct.rtx_def*, %struct.rtx_def** %x192, align 8, !dbg !6303
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !6303
  %bf.load193 = load i32, i32* %89, align 8, !dbg !6303
  %bf.lshr194 = lshr i32 %bf.load193, 16, !dbg !6303
  %bf.clear195 = and i32 %bf.lshr194, 255, !dbg !6303
  %idxprom196 = zext i32 %bf.clear195 to i64, !dbg !6303
  %arrayidx197 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom196, !dbg !6303
  %90 = load i8, i8* %arrayidx197, align 1, !dbg !6303
  %conv198 = zext i8 %90 to i32, !dbg !6303
  %cmp199 = icmp eq i32 %conv198, 8, !dbg !6303
  br i1 %cmp199, label %cond.true211, label %lor.lhs.false201, !dbg !6303

lor.lhs.false201:                                 ; preds = %land.lhs.true191
  %91 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x202 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %91, i32 0, i32 11, !dbg !6303
  %92 = load %struct.rtx_def*, %struct.rtx_def** %x202, align 8, !dbg !6303
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !6303
  %bf.load203 = load i32, i32* %93, align 8, !dbg !6303
  %bf.lshr204 = lshr i32 %bf.load203, 16, !dbg !6303
  %bf.clear205 = and i32 %bf.lshr204, 255, !dbg !6303
  %idxprom206 = zext i32 %bf.clear205 to i64, !dbg !6303
  %arrayidx207 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom206, !dbg !6303
  %94 = load i8, i8* %arrayidx207, align 1, !dbg !6303
  %conv208 = zext i8 %94 to i32, !dbg !6303
  %cmp209 = icmp eq i32 %conv208, 9, !dbg !6303
  br i1 %cmp209, label %cond.true211, label %cond.false216, !dbg !6303

cond.true211:                                     ; preds = %lor.lhs.false201, %land.lhs.true191
  %95 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x212 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %95, i32 0, i32 11, !dbg !6303
  %96 = load %struct.rtx_def*, %struct.rtx_def** %x212, align 8, !dbg !6303
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !6303
  %bf.load213 = load i32, i32* %97, align 8, !dbg !6303
  %bf.lshr214 = lshr i32 %bf.load213, 16, !dbg !6303
  %bf.clear215 = and i32 %bf.lshr214, 255, !dbg !6303
  br label %cond.end224, !dbg !6303

cond.false216:                                    ; preds = %lor.lhs.false201
  %98 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x217 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %98, i32 0, i32 11, !dbg !6303
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x217, align 8, !dbg !6303
  %100 = bitcast %struct.rtx_def* %99 to i32*, !dbg !6303
  %bf.load218 = load i32, i32* %100, align 8, !dbg !6303
  %bf.lshr219 = lshr i32 %bf.load218, 16, !dbg !6303
  %bf.clear220 = and i32 %bf.lshr219, 255, !dbg !6303
  %idxprom221 = zext i32 %bf.clear220 to i64, !dbg !6303
  %arrayidx222 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom221, !dbg !6303
  %101 = load i8, i8* %arrayidx222, align 1, !dbg !6303
  %conv223 = zext i8 %101 to i32, !dbg !6303
  br label %cond.end224, !dbg !6303

cond.end224:                                      ; preds = %cond.false216, %cond.true211
  %cond225 = phi i32 [ %bf.clear215, %cond.true211 ], [ %conv223, %cond.false216 ], !dbg !6303
  %idxprom226 = zext i32 %cond225 to i64, !dbg !6303
  %arrayidx227 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom226, !dbg !6303
  %102 = load i8, i8* %arrayidx227, align 1, !dbg !6303
  %conv228 = zext i8 %102 to i32, !dbg !6303
  %cmp229 = icmp eq i32 %conv228, 9, !dbg !6303
  br i1 %cmp229, label %cond.true231, label %cond.false268, !dbg !6303

cond.true231:                                     ; preds = %cond.end224
  %103 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x232 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %103, i32 0, i32 11, !dbg !6303
  %104 = load %struct.rtx_def*, %struct.rtx_def** %x232, align 8, !dbg !6303
  %105 = bitcast %struct.rtx_def* %104 to i32*, !dbg !6303
  %bf.load233 = load i32, i32* %105, align 8, !dbg !6303
  %bf.lshr234 = lshr i32 %bf.load233, 16, !dbg !6303
  %bf.clear235 = and i32 %bf.lshr234, 255, !dbg !6303
  %idxprom236 = zext i32 %bf.clear235 to i64, !dbg !6303
  %arrayidx237 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom236, !dbg !6303
  %106 = load i8, i8* %arrayidx237, align 1, !dbg !6303
  %conv238 = zext i8 %106 to i32, !dbg !6303
  %cmp239 = icmp eq i32 %conv238, 8, !dbg !6303
  br i1 %cmp239, label %cond.true251, label %lor.lhs.false241, !dbg !6303

lor.lhs.false241:                                 ; preds = %cond.true231
  %107 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x242 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %107, i32 0, i32 11, !dbg !6303
  %108 = load %struct.rtx_def*, %struct.rtx_def** %x242, align 8, !dbg !6303
  %109 = bitcast %struct.rtx_def* %108 to i32*, !dbg !6303
  %bf.load243 = load i32, i32* %109, align 8, !dbg !6303
  %bf.lshr244 = lshr i32 %bf.load243, 16, !dbg !6303
  %bf.clear245 = and i32 %bf.lshr244, 255, !dbg !6303
  %idxprom246 = zext i32 %bf.clear245 to i64, !dbg !6303
  %arrayidx247 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom246, !dbg !6303
  %110 = load i8, i8* %arrayidx247, align 1, !dbg !6303
  %conv248 = zext i8 %110 to i32, !dbg !6303
  %cmp249 = icmp eq i32 %conv248, 9, !dbg !6303
  br i1 %cmp249, label %cond.true251, label %cond.false256, !dbg !6303

cond.true251:                                     ; preds = %lor.lhs.false241, %cond.true231
  %111 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x252 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %111, i32 0, i32 11, !dbg !6303
  %112 = load %struct.rtx_def*, %struct.rtx_def** %x252, align 8, !dbg !6303
  %113 = bitcast %struct.rtx_def* %112 to i32*, !dbg !6303
  %bf.load253 = load i32, i32* %113, align 8, !dbg !6303
  %bf.lshr254 = lshr i32 %bf.load253, 16, !dbg !6303
  %bf.clear255 = and i32 %bf.lshr254, 255, !dbg !6303
  br label %cond.end264, !dbg !6303

cond.false256:                                    ; preds = %lor.lhs.false241
  %114 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x257 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %114, i32 0, i32 11, !dbg !6303
  %115 = load %struct.rtx_def*, %struct.rtx_def** %x257, align 8, !dbg !6303
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !6303
  %bf.load258 = load i32, i32* %116, align 8, !dbg !6303
  %bf.lshr259 = lshr i32 %bf.load258, 16, !dbg !6303
  %bf.clear260 = and i32 %bf.lshr259, 255, !dbg !6303
  %idxprom261 = zext i32 %bf.clear260 to i64, !dbg !6303
  %arrayidx262 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom261, !dbg !6303
  %117 = load i8, i8* %arrayidx262, align 1, !dbg !6303
  %conv263 = zext i8 %117 to i32, !dbg !6303
  br label %cond.end264, !dbg !6303

cond.end264:                                      ; preds = %cond.false256, %cond.true251
  %cond265 = phi i32 [ %bf.clear255, %cond.true251 ], [ %conv263, %cond.false256 ], !dbg !6303
  %sub266 = sub i32 %cond265, 42, !dbg !6303
  %add267 = add i32 %sub266, 4, !dbg !6303
  br label %cond.end304, !dbg !6303

cond.false268:                                    ; preds = %cond.end224
  %118 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x269 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %118, i32 0, i32 11, !dbg !6303
  %119 = load %struct.rtx_def*, %struct.rtx_def** %x269, align 8, !dbg !6303
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !6303
  %bf.load270 = load i32, i32* %120, align 8, !dbg !6303
  %bf.lshr271 = lshr i32 %bf.load270, 16, !dbg !6303
  %bf.clear272 = and i32 %bf.lshr271, 255, !dbg !6303
  %idxprom273 = zext i32 %bf.clear272 to i64, !dbg !6303
  %arrayidx274 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom273, !dbg !6303
  %121 = load i8, i8* %arrayidx274, align 1, !dbg !6303
  %conv275 = zext i8 %121 to i32, !dbg !6303
  %cmp276 = icmp eq i32 %conv275, 8, !dbg !6303
  br i1 %cmp276, label %cond.true288, label %lor.lhs.false278, !dbg !6303

lor.lhs.false278:                                 ; preds = %cond.false268
  %122 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x279 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %122, i32 0, i32 11, !dbg !6303
  %123 = load %struct.rtx_def*, %struct.rtx_def** %x279, align 8, !dbg !6303
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !6303
  %bf.load280 = load i32, i32* %124, align 8, !dbg !6303
  %bf.lshr281 = lshr i32 %bf.load280, 16, !dbg !6303
  %bf.clear282 = and i32 %bf.lshr281, 255, !dbg !6303
  %idxprom283 = zext i32 %bf.clear282 to i64, !dbg !6303
  %arrayidx284 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom283, !dbg !6303
  %125 = load i8, i8* %arrayidx284, align 1, !dbg !6303
  %conv285 = zext i8 %125 to i32, !dbg !6303
  %cmp286 = icmp eq i32 %conv285, 9, !dbg !6303
  br i1 %cmp286, label %cond.true288, label %cond.false293, !dbg !6303

cond.true288:                                     ; preds = %lor.lhs.false278, %cond.false268
  %126 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x289 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %126, i32 0, i32 11, !dbg !6303
  %127 = load %struct.rtx_def*, %struct.rtx_def** %x289, align 8, !dbg !6303
  %128 = bitcast %struct.rtx_def* %127 to i32*, !dbg !6303
  %bf.load290 = load i32, i32* %128, align 8, !dbg !6303
  %bf.lshr291 = lshr i32 %bf.load290, 16, !dbg !6303
  %bf.clear292 = and i32 %bf.lshr291, 255, !dbg !6303
  br label %cond.end301, !dbg !6303

cond.false293:                                    ; preds = %lor.lhs.false278
  %129 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6303
  %x294 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %129, i32 0, i32 11, !dbg !6303
  %130 = load %struct.rtx_def*, %struct.rtx_def** %x294, align 8, !dbg !6303
  %131 = bitcast %struct.rtx_def* %130 to i32*, !dbg !6303
  %bf.load295 = load i32, i32* %131, align 8, !dbg !6303
  %bf.lshr296 = lshr i32 %bf.load295, 16, !dbg !6303
  %bf.clear297 = and i32 %bf.lshr296, 255, !dbg !6303
  %idxprom298 = zext i32 %bf.clear297 to i64, !dbg !6303
  %arrayidx299 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom298, !dbg !6303
  %132 = load i8, i8* %arrayidx299, align 1, !dbg !6303
  %conv300 = zext i8 %132 to i32, !dbg !6303
  br label %cond.end301, !dbg !6303

cond.end301:                                      ; preds = %cond.false293, %cond.true288
  %cond302 = phi i32 [ %bf.clear292, %cond.true288 ], [ %conv300, %cond.false293 ], !dbg !6303
  %sub303 = sub i32 %cond302, 38, !dbg !6303
  br label %cond.end304, !dbg !6303

cond.end304:                                      ; preds = %cond.end301, %cond.end264
  %cond305 = phi i32 [ %add267, %cond.end264 ], [ %sub303, %cond.end301 ], !dbg !6303
  %idxprom306 = zext i32 %cond305 to i64, !dbg !6303
  %arrayidx307 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom306, !dbg !6303
  %133 = load %struct.real_format*, %struct.real_format** %arrayidx307, align 8, !dbg !6303
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %133, i32 0, i32 14, !dbg !6303
  %134 = load i8, i8* %has_signed_zero, align 1, !dbg !6303
  %conv308 = zext i8 %134 to i32, !dbg !6303
  %tobool309 = icmp ne i32 %conv308, 0, !dbg !6303
  br i1 %tobool309, label %land.lhs.true310, label %if.end313, !dbg !6303

land.lhs.true310:                                 ; preds = %cond.end304
  %135 = load i32, i32* @flag_signed_zeros, align 4, !dbg !6303
  %tobool311 = icmp ne i32 %135, 0, !dbg !6303
  br i1 %tobool311, label %if.then312, label %if.end313, !dbg !6304

if.then312:                                       ; preds = %land.lhs.true310, %land.lhs.true149
  store i32 0, i32* %retval, align 4, !dbg !6305
  br label %return, !dbg !6305

if.end313:                                        ; preds = %land.lhs.true310, %cond.end304, %lor.lhs.false181
  %136 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6306
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %136, i32 0, i32 9, !dbg !6308
  %137 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6308
  %138 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6309
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1, !dbg !6309
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6309
  %arrayidx314 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6309
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx314 to %struct.rtx_def**, !dbg !6309
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6309
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %137, %struct.rtx_def* %139), !dbg !6310
  %tobool315 = icmp ne i32 %call, 0, !dbg !6310
  br i1 %tobool315, label %land.lhs.true316, label %lor.lhs.false323, !dbg !6311

land.lhs.true316:                                 ; preds = %if.end313
  %140 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6312
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %140, i32 0, i32 10, !dbg !6313
  %141 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6313
  %142 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6314
  %u317 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %142, i32 0, i32 1, !dbg !6314
  %fld318 = bitcast %union.u* %u317 to [1 x %union.rtunion_def]*, !dbg !6314
  %arrayidx319 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld318, i64 0, i64 1, !dbg !6314
  %rt_rtx320 = bitcast %union.rtunion_def* %arrayidx319 to %struct.rtx_def**, !dbg !6314
  %143 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx320, align 8, !dbg !6314
  %call321 = call i32 @rtx_equal_p(%struct.rtx_def* %141, %struct.rtx_def* %143), !dbg !6315
  %tobool322 = icmp ne i32 %call321, 0, !dbg !6315
  br i1 %tobool322, label %if.then339, label %lor.lhs.false323, !dbg !6316

lor.lhs.false323:                                 ; preds = %land.lhs.true316, %if.end313
  %144 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6317
  %a324 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %144, i32 0, i32 9, !dbg !6318
  %145 = load %struct.rtx_def*, %struct.rtx_def** %a324, align 8, !dbg !6318
  %146 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6319
  %u325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !6319
  %fld326 = bitcast %union.u* %u325 to [1 x %union.rtunion_def]*, !dbg !6319
  %arrayidx327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld326, i64 0, i64 1, !dbg !6319
  %rt_rtx328 = bitcast %union.rtunion_def* %arrayidx327 to %struct.rtx_def**, !dbg !6319
  %147 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx328, align 8, !dbg !6319
  %call329 = call i32 @rtx_equal_p(%struct.rtx_def* %145, %struct.rtx_def* %147), !dbg !6320
  %tobool330 = icmp ne i32 %call329, 0, !dbg !6320
  br i1 %tobool330, label %land.lhs.true331, label %if.end362, !dbg !6321

land.lhs.true331:                                 ; preds = %lor.lhs.false323
  %148 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6322
  %b332 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %148, i32 0, i32 10, !dbg !6323
  %149 = load %struct.rtx_def*, %struct.rtx_def** %b332, align 8, !dbg !6323
  %150 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6324
  %u333 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !6324
  %fld334 = bitcast %union.u* %u333 to [1 x %union.rtunion_def]*, !dbg !6324
  %arrayidx335 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld334, i64 0, i64 0, !dbg !6324
  %rt_rtx336 = bitcast %union.rtunion_def* %arrayidx335 to %struct.rtx_def**, !dbg !6324
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx336, align 8, !dbg !6324
  %call337 = call i32 @rtx_equal_p(%struct.rtx_def* %149, %struct.rtx_def* %151), !dbg !6325
  %tobool338 = icmp ne i32 %call337, 0, !dbg !6325
  br i1 %tobool338, label %if.then339, label %if.end362, !dbg !6326

if.then339:                                       ; preds = %land.lhs.true331, %land.lhs.true316
  %152 = load i32, i32* %code, align 4, !dbg !6327
  %cmp340 = icmp eq i32 %152, 81, !dbg !6329
  br i1 %cmp340, label %cond.true342, label %cond.false344, !dbg !6330

cond.true342:                                     ; preds = %if.then339
  %153 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6331
  %a343 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %153, i32 0, i32 9, !dbg !6332
  %154 = load %struct.rtx_def*, %struct.rtx_def** %a343, align 8, !dbg !6332
  br label %cond.end346, !dbg !6330

cond.false344:                                    ; preds = %if.then339
  %155 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6333
  %b345 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %155, i32 0, i32 10, !dbg !6334
  %156 = load %struct.rtx_def*, %struct.rtx_def** %b345, align 8, !dbg !6334
  br label %cond.end346, !dbg !6330

cond.end346:                                      ; preds = %cond.false344, %cond.true342
  %cond347 = phi %struct.rtx_def* [ %154, %cond.true342 ], [ %156, %cond.false344 ], !dbg !6330
  store %struct.rtx_def* %cond347, %struct.rtx_def** %y, align 8, !dbg !6335
  %157 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6336
  %x348 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %157, i32 0, i32 11, !dbg !6338
  %158 = load %struct.rtx_def*, %struct.rtx_def** %x348, align 8, !dbg !6338
  %159 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !6339
  %call349 = call i32 @rtx_equal_p(%struct.rtx_def* %158, %struct.rtx_def* %159), !dbg !6340
  %tobool350 = icmp ne i32 %call349, 0, !dbg !6340
  br i1 %tobool350, label %if.end361, label %if.then351, !dbg !6341

if.then351:                                       ; preds = %cond.end346
  call void @start_sequence(), !dbg !6342
  %160 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6344
  %x352 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %160, i32 0, i32 11, !dbg !6345
  %161 = load %struct.rtx_def*, %struct.rtx_def** %x352, align 8, !dbg !6345
  %162 = load %struct.rtx_def*, %struct.rtx_def** %y, align 8, !dbg !6346
  call void @noce_emit_move_insn(%struct.rtx_def* %161, %struct.rtx_def* %162), !dbg !6347
  %163 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6348
  %call353 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %163), !dbg !6349
  store %struct.rtx_def* %call353, %struct.rtx_def** %seq, align 8, !dbg !6350
  %164 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6351
  %tobool354 = icmp ne %struct.rtx_def* %164, null, !dbg !6351
  br i1 %tobool354, label %if.end356, label %if.then355, !dbg !6353

if.then355:                                       ; preds = %if.then351
  store i32 0, i32* %retval, align 4, !dbg !6354
  br label %return, !dbg !6354

if.end356:                                        ; preds = %if.then351
  %165 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6355
  %166 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6356
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %166, i32 0, i32 4, !dbg !6357
  %167 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !6357
  %168 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6358
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %168, i32 0, i32 7, !dbg !6358
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !6358
  %u357 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %169, i32 0, i32 1, !dbg !6358
  %fld358 = bitcast %union.u* %u357 to [1 x %union.rtunion_def]*, !dbg !6358
  %arrayidx359 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld358, i64 0, i64 4, !dbg !6358
  %rt_int = bitcast %union.rtunion_def* %arrayidx359 to i32*, !dbg !6358
  %170 = load i32, i32* %rt_int, align 8, !dbg !6358
  %call360 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %165, %struct.rtx_def* %167, i32 %170), !dbg !6359
  br label %if.end361, !dbg !6360

if.end361:                                        ; preds = %if.end356, %cond.end346
  store i32 1, i32* %retval, align 4, !dbg !6361
  br label %return, !dbg !6361

if.end362:                                        ; preds = %land.lhs.true331, %lor.lhs.false323
  store i32 0, i32* %retval, align 4, !dbg !6362
  br label %return, !dbg !6362

return:                                           ; preds = %if.end362, %if.end361, %if.then355, %if.then312, %if.then
  %171 = load i32, i32* %retval, align 4, !dbg !6363
  ret i32 %171, !dbg !6363
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_store_flag(%struct.noce_if_info* %if_info) #0 !dbg !6364 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %reversep = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !6365, metadata !DIExpression()), !dbg !6366
  call void @llvm.dbg.declare(metadata i32* %reversep, metadata !6367, metadata !DIExpression()), !dbg !6368
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !6369, metadata !DIExpression()), !dbg !6370
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6371, metadata !DIExpression()), !dbg !6372
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6373
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 10, !dbg !6373
  %1 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6373
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6373
  %bf.load = load i32, i32* %2, align 8, !dbg !6373
  %bf.clear = and i32 %bf.load, 65535, !dbg !6373
  %cmp = icmp eq i32 %bf.clear, 30, !dbg !6373
  br i1 %cmp, label %land.lhs.true, label %if.else, !dbg !6375

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6376
  %b1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %3, i32 0, i32 10, !dbg !6376
  %4 = load %struct.rtx_def*, %struct.rtx_def** %b1, align 8, !dbg !6376
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !6376
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !6376
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6376
  %5 = load i64, i64* %arrayidx, align 8, !dbg !6376
  %cmp2 = icmp eq i64 %5, 1, !dbg !6377
  br i1 %cmp2, label %land.lhs.true3, label %if.else, !dbg !6378

land.lhs.true3:                                   ; preds = %land.lhs.true
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6379
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 9, !dbg !6380
  %7 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6380
  %8 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6381
  %cmp4 = icmp eq %struct.rtx_def* %7, %8, !dbg !6382
  br i1 %cmp4, label %if.then, label %if.else, !dbg !6383

if.then:                                          ; preds = %land.lhs.true3
  store i32 0, i32* %reversep, align 4, !dbg !6384
  br label %if.end22, !dbg !6385

if.else:                                          ; preds = %land.lhs.true3, %land.lhs.true, %entry
  %9 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6386
  %b5 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %9, i32 0, i32 10, !dbg !6388
  %10 = load %struct.rtx_def*, %struct.rtx_def** %b5, align 8, !dbg !6388
  %11 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6389
  %cmp6 = icmp eq %struct.rtx_def* %10, %11, !dbg !6390
  br i1 %cmp6, label %land.lhs.true7, label %if.else21, !dbg !6391

land.lhs.true7:                                   ; preds = %if.else
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6392
  %a8 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 9, !dbg !6392
  %13 = load %struct.rtx_def*, %struct.rtx_def** %a8, align 8, !dbg !6392
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6392
  %bf.load9 = load i32, i32* %14, align 8, !dbg !6392
  %bf.clear10 = and i32 %bf.load9, 65535, !dbg !6392
  %cmp11 = icmp eq i32 %bf.clear10, 30, !dbg !6392
  br i1 %cmp11, label %land.lhs.true12, label %if.else21, !dbg !6393

land.lhs.true12:                                  ; preds = %land.lhs.true7
  %15 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6394
  %a13 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %15, i32 0, i32 9, !dbg !6394
  %16 = load %struct.rtx_def*, %struct.rtx_def** %a13, align 8, !dbg !6394
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !6394
  %hwint15 = bitcast %union.u* %u14 to [1 x i64]*, !dbg !6394
  %arrayidx16 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint15, i64 0, i64 0, !dbg !6394
  %17 = load i64, i64* %arrayidx16, align 8, !dbg !6394
  %cmp17 = icmp eq i64 %17, 1, !dbg !6395
  br i1 %cmp17, label %land.lhs.true18, label %if.else21, !dbg !6396

land.lhs.true18:                                  ; preds = %land.lhs.true12
  %18 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6397
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %18, i32 0, i32 5, !dbg !6398
  %19 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6398
  %20 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6399
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %20, i32 0, i32 4, !dbg !6400
  %21 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !6400
  %call = call i32 @reversed_comparison_code(%struct.rtx_def* %19, %struct.rtx_def* %21), !dbg !6401
  %cmp19 = icmp ne i32 %call, 0, !dbg !6402
  br i1 %cmp19, label %if.then20, label %if.else21, !dbg !6403

if.then20:                                        ; preds = %land.lhs.true18
  store i32 1, i32* %reversep, align 4, !dbg !6404
  br label %if.end, !dbg !6405

if.else21:                                        ; preds = %land.lhs.true18, %land.lhs.true12, %land.lhs.true7, %if.else
  store i32 0, i32* %retval, align 4, !dbg !6406
  br label %return, !dbg !6406

if.end:                                           ; preds = %if.then20
  br label %if.end22

if.end22:                                         ; preds = %if.end, %if.then
  call void @start_sequence(), !dbg !6407
  %22 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6408
  %23 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6409
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %23, i32 0, i32 11, !dbg !6410
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6410
  %25 = load i32, i32* %reversep, align 4, !dbg !6411
  %call23 = call %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* %22, %struct.rtx_def* %24, i32 %25, i32 0), !dbg !6412
  store %struct.rtx_def* %call23, %struct.rtx_def** %target, align 8, !dbg !6413
  %26 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6414
  %tobool = icmp ne %struct.rtx_def* %26, null, !dbg !6414
  br i1 %tobool, label %if.then24, label %if.else38, !dbg !6416

if.then24:                                        ; preds = %if.end22
  %27 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6417
  %28 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6420
  %x25 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %28, i32 0, i32 11, !dbg !6421
  %29 = load %struct.rtx_def*, %struct.rtx_def** %x25, align 8, !dbg !6421
  %cmp26 = icmp ne %struct.rtx_def* %27, %29, !dbg !6422
  br i1 %cmp26, label %if.then27, label %if.end29, !dbg !6423

if.then27:                                        ; preds = %if.then24
  %30 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6424
  %x28 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %30, i32 0, i32 11, !dbg !6425
  %31 = load %struct.rtx_def*, %struct.rtx_def** %x28, align 8, !dbg !6425
  %32 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6426
  call void @noce_emit_move_insn(%struct.rtx_def* %31, %struct.rtx_def* %32), !dbg !6427
  br label %if.end29, !dbg !6427

if.end29:                                         ; preds = %if.then27, %if.then24
  %33 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6428
  %call30 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %33), !dbg !6429
  store %struct.rtx_def* %call30, %struct.rtx_def** %seq, align 8, !dbg !6430
  %34 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6431
  %tobool31 = icmp ne %struct.rtx_def* %34, null, !dbg !6431
  br i1 %tobool31, label %if.end33, label %if.then32, !dbg !6433

if.then32:                                        ; preds = %if.end29
  store i32 0, i32* %retval, align 4, !dbg !6434
  br label %return, !dbg !6434

if.end33:                                         ; preds = %if.end29
  %35 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6435
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6436
  %jump34 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 4, !dbg !6437
  %37 = load %struct.rtx_def*, %struct.rtx_def** %jump34, align 8, !dbg !6437
  %38 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6438
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %38, i32 0, i32 7, !dbg !6438
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !6438
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !6438
  %fld = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !6438
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !6438
  %rt_int = bitcast %union.rtunion_def* %arrayidx36 to i32*, !dbg !6438
  %40 = load i32, i32* %rt_int, align 8, !dbg !6438
  %call37 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %35, %struct.rtx_def* %37, i32 %40), !dbg !6439
  store i32 1, i32* %retval, align 4, !dbg !6440
  br label %return, !dbg !6440

if.else38:                                        ; preds = %if.end22
  call void @end_sequence(), !dbg !6441
  store i32 0, i32* %retval, align 4, !dbg !6443
  br label %return, !dbg !6443

return:                                           ; preds = %if.else38, %if.end33, %if.then32, %if.else21
  %41 = load i32, i32* %retval, align 4, !dbg !6444
  ret i32 %41, !dbg !6444
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_bitop(%struct.noce_if_info* %if_info) #0 !dbg !6445 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %result = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %bitnum = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !6446, metadata !DIExpression()), !dbg !6447
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !6448, metadata !DIExpression()), !dbg !6449
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !6450, metadata !DIExpression()), !dbg !6451
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !6452, metadata !DIExpression()), !dbg !6453
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %result, metadata !6454, metadata !DIExpression()), !dbg !6455
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6456, metadata !DIExpression()), !dbg !6457
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !6458, metadata !DIExpression()), !dbg !6459
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6460, metadata !DIExpression()), !dbg !6461
  call void @llvm.dbg.declare(metadata i32* %bitnum, metadata !6462, metadata !DIExpression()), !dbg !6463
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6464
  %x1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 11, !dbg !6465
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x1, align 8, !dbg !6465
  store %struct.rtx_def* %1, %struct.rtx_def** %x, align 8, !dbg !6466
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6467
  %cond2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 5, !dbg !6468
  %3 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !6468
  store %struct.rtx_def* %3, %struct.rtx_def** %cond, align 8, !dbg !6469
  %4 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6470
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !6470
  %bf.load = load i32, i32* %5, align 8, !dbg !6470
  %bf.clear = and i32 %bf.load, 65535, !dbg !6470
  store i32 %bf.clear, i32* %code, align 4, !dbg !6471
  %6 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6472
  %7 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6474
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %7, i32 0, i32 10, !dbg !6475
  %8 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6475
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %6, %struct.rtx_def* %8), !dbg !6476
  %tobool = icmp ne i32 %call, 0, !dbg !6476
  br i1 %tobool, label %if.end, label %if.then, !dbg !6477

if.then:                                          ; preds = %entry
  store i32 0, i32* %retval, align 4, !dbg !6478
  br label %return, !dbg !6478

if.end:                                           ; preds = %entry
  %9 = load i32, i32* %code, align 4, !dbg !6479
  %cmp = icmp ne i32 %9, 80, !dbg !6481
  br i1 %cmp, label %land.lhs.true, label %if.end5, !dbg !6482

land.lhs.true:                                    ; preds = %if.end
  %10 = load i32, i32* %code, align 4, !dbg !6483
  %cmp3 = icmp ne i32 %10, 81, !dbg !6484
  br i1 %cmp3, label %if.then4, label %if.end5, !dbg !6485

if.then4:                                         ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !6486
  br label %return, !dbg !6486

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %11 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6487
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !6487
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6487
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !6487
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !6487
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6487
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !6489
  %cmp6 = icmp ne %struct.rtx_def* %12, %13, !dbg !6490
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !6491

if.then7:                                         ; preds = %if.end5
  store i32 0, i32* %retval, align 4, !dbg !6492
  br label %return, !dbg !6492

if.end8:                                          ; preds = %if.end5
  %14 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6493
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !6493
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !6493
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !6493
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !6493
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !6493
  store %struct.rtx_def* %15, %struct.rtx_def** %cond, align 8, !dbg !6494
  %16 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6495
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !6495
  %bf.load13 = load i32, i32* %17, align 8, !dbg !6495
  %bf.clear14 = and i32 %bf.load13, 65535, !dbg !6495
  %cmp15 = icmp eq i32 %bf.clear14, 120, !dbg !6497
  br i1 %cmp15, label %if.then16, label %if.else, !dbg !6498

if.then16:                                        ; preds = %if.end8
  %18 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6499
  %u17 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !6499
  %fld18 = bitcast %union.u* %u17 to [1 x %union.rtunion_def]*, !dbg !6499
  %arrayidx19 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld18, i64 0, i64 1, !dbg !6499
  %rt_rtx20 = bitcast %union.rtunion_def* %arrayidx19 to %struct.rtx_def**, !dbg !6499
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx20, align 8, !dbg !6499
  %20 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !6502
  %cmp21 = icmp ne %struct.rtx_def* %19, %20, !dbg !6503
  br i1 %cmp21, label %if.then36, label %lor.lhs.false, !dbg !6504

lor.lhs.false:                                    ; preds = %if.then16
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6505
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !6505
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !6505
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 2, !dbg !6505
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !6505
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !6505
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !6505
  %bf.load26 = load i32, i32* %23, align 8, !dbg !6505
  %bf.clear27 = and i32 %bf.load26, 65535, !dbg !6505
  %cmp28 = icmp eq i32 %bf.clear27, 30, !dbg !6505
  br i1 %cmp28, label %lor.lhs.false29, label %if.then36, !dbg !6506

lor.lhs.false29:                                  ; preds = %lor.lhs.false
  %24 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6507
  %25 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6508
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %25, i32 0, i32 1, !dbg !6508
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !6508
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 0, !dbg !6508
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !6508
  %26 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !6508
  %call34 = call i32 @rtx_equal_p(%struct.rtx_def* %24, %struct.rtx_def* %26), !dbg !6509
  %tobool35 = icmp ne i32 %call34, 0, !dbg !6509
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !6510

if.then36:                                        ; preds = %lor.lhs.false29, %lor.lhs.false, %if.then16
  store i32 0, i32* %retval, align 4, !dbg !6511
  br label %return, !dbg !6511

if.end37:                                         ; preds = %lor.lhs.false29
  %27 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6512
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !6512
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !6512
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 2, !dbg !6512
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !6512
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !6512
  %u42 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %28, i32 0, i32 1, !dbg !6512
  %hwint = bitcast %union.u* %u42 to [1 x i64]*, !dbg !6512
  %arrayidx43 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !6512
  %29 = load i64, i64* %arrayidx43, align 8, !dbg !6512
  %conv = trunc i64 %29 to i32, !dbg !6512
  store i32 %conv, i32* %bitnum, align 4, !dbg !6513
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6514
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !6514
  %bf.load44 = load i32, i32* %31, align 8, !dbg !6514
  %bf.lshr = lshr i32 %bf.load44, 16, !dbg !6514
  %bf.clear45 = and i32 %bf.lshr, 255, !dbg !6514
  store i32 %bf.clear45, i32* %mode, align 4, !dbg !6515
  %32 = load i32, i32* %bitnum, align 4, !dbg !6516
  %cmp46 = icmp slt i32 %32, 0, !dbg !6518
  br i1 %cmp46, label %if.then51, label %lor.lhs.false48, !dbg !6519

lor.lhs.false48:                                  ; preds = %if.end37
  %33 = load i32, i32* %bitnum, align 4, !dbg !6520
  %cmp49 = icmp sge i32 %33, 64, !dbg !6521
  br i1 %cmp49, label %if.then51, label %if.end52, !dbg !6522

if.then51:                                        ; preds = %lor.lhs.false48, %if.end37
  store i32 0, i32* %retval, align 4, !dbg !6523
  br label %return, !dbg !6523

if.end52:                                         ; preds = %lor.lhs.false48
  br label %if.end53, !dbg !6524

if.else:                                          ; preds = %if.end8
  store i32 0, i32* %retval, align 4, !dbg !6525
  br label %return, !dbg !6525

if.end53:                                         ; preds = %if.end52
  %34 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6526
  %a54 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %34, i32 0, i32 9, !dbg !6527
  %35 = load %struct.rtx_def*, %struct.rtx_def** %a54, align 8, !dbg !6527
  store %struct.rtx_def* %35, %struct.rtx_def** %a, align 8, !dbg !6528
  %36 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6529
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !6529
  %bf.load55 = load i32, i32* %37, align 8, !dbg !6529
  %bf.clear56 = and i32 %bf.load55, 65535, !dbg !6529
  %cmp57 = icmp eq i32 %bf.clear56, 62, !dbg !6531
  br i1 %cmp57, label %if.then64, label %lor.lhs.false59, !dbg !6532

lor.lhs.false59:                                  ; preds = %if.end53
  %38 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6533
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !6533
  %bf.load60 = load i32, i32* %39, align 8, !dbg !6533
  %bf.clear61 = and i32 %bf.load60, 65535, !dbg !6533
  %cmp62 = icmp eq i32 %bf.clear61, 63, !dbg !6534
  br i1 %cmp62, label %if.then64, label %if.else116, !dbg !6535

if.then64:                                        ; preds = %lor.lhs.false59, %if.end53
  %40 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6536
  %41 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6539
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %41, i32 0, i32 1, !dbg !6539
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !6539
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 0, !dbg !6539
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !6539
  %42 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx68, align 8, !dbg !6539
  %call69 = call i32 @rtx_equal_p(%struct.rtx_def* %40, %struct.rtx_def* %42), !dbg !6540
  %tobool70 = icmp ne i32 %call69, 0, !dbg !6540
  br i1 %tobool70, label %lor.lhs.false71, label %if.then91, !dbg !6541

lor.lhs.false71:                                  ; preds = %if.then64
  %43 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6542
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !6542
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !6542
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 1, !dbg !6542
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !6542
  %44 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !6542
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6542
  %bf.load76 = load i32, i32* %45, align 8, !dbg !6542
  %bf.clear77 = and i32 %bf.load76, 65535, !dbg !6542
  %cmp78 = icmp eq i32 %bf.clear77, 30, !dbg !6542
  br i1 %cmp78, label %lor.lhs.false80, label %if.then91, !dbg !6543

lor.lhs.false80:                                  ; preds = %lor.lhs.false71
  %46 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6544
  %u81 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !6544
  %fld82 = bitcast %union.u* %u81 to [1 x %union.rtunion_def]*, !dbg !6544
  %arrayidx83 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld82, i64 0, i64 1, !dbg !6544
  %rt_rtx84 = bitcast %union.rtunion_def* %arrayidx83 to %struct.rtx_def**, !dbg !6544
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx84, align 8, !dbg !6544
  %u85 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !6544
  %hwint86 = bitcast %union.u* %u85 to [1 x i64]*, !dbg !6544
  %arrayidx87 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint86, i64 0, i64 0, !dbg !6544
  %48 = load i64, i64* %arrayidx87, align 8, !dbg !6544
  %49 = load i32, i32* %mode, align 4, !dbg !6545
  %idxprom = zext i32 %49 to i64, !dbg !6545
  %arrayidx88 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom, !dbg !6545
  %50 = load i64, i64* %arrayidx88, align 8, !dbg !6545
  %and = and i64 %48, %50, !dbg !6546
  %51 = load i32, i32* %bitnum, align 4, !dbg !6547
  %sh_prom = zext i32 %51 to i64, !dbg !6548
  %shl = shl i64 1, %sh_prom, !dbg !6548
  %cmp89 = icmp ne i64 %and, %shl, !dbg !6549
  br i1 %cmp89, label %if.then91, label %if.end92, !dbg !6550

if.then91:                                        ; preds = %lor.lhs.false80, %lor.lhs.false71, %if.then64
  store i32 0, i32* %retval, align 4, !dbg !6551
  br label %return, !dbg !6551

if.end92:                                         ; preds = %lor.lhs.false80
  %52 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6552
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !6552
  %bf.load93 = load i32, i32* %53, align 8, !dbg !6552
  %bf.clear94 = and i32 %bf.load93, 65535, !dbg !6552
  %cmp95 = icmp eq i32 %bf.clear94, 62, !dbg !6554
  br i1 %cmp95, label %if.then97, label %if.else101, !dbg !6555

if.then97:                                        ; preds = %if.end92
  %54 = load i32, i32* %code, align 4, !dbg !6556
  %cmp98 = icmp eq i32 %54, 80, !dbg !6557
  br i1 %cmp98, label %cond.true, label %cond.false, !dbg !6558

cond.true:                                        ; preds = %if.then97
  %55 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6559
  br label %cond.end, !dbg !6558

cond.false:                                       ; preds = %if.then97
  br label %cond.end, !dbg !6558

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond100 = phi %struct.rtx_def* [ %55, %cond.true ], [ null, %cond.false ], !dbg !6558
  store %struct.rtx_def* %cond100, %struct.rtx_def** %result, align 8, !dbg !6560
  br label %if.end115, !dbg !6561

if.else101:                                       ; preds = %if.end92
  %56 = load i32, i32* %code, align 4, !dbg !6562
  %cmp102 = icmp eq i32 %56, 80, !dbg !6564
  br i1 %cmp102, label %if.then104, label %if.else109, !dbg !6565

if.then104:                                       ; preds = %if.else101
  %57 = load i32, i32* %bitnum, align 4, !dbg !6566
  %sh_prom105 = zext i32 %57 to i64, !dbg !6568
  %shl106 = shl i64 1, %sh_prom105, !dbg !6568
  %58 = load i32, i32* %mode, align 4, !dbg !6569
  %call107 = call %struct.rtx_def* @gen_int_mode(i64 %shl106, i32 %58), !dbg !6570
  store %struct.rtx_def* %call107, %struct.rtx_def** %result, align 8, !dbg !6571
  %59 = load i32, i32* %mode, align 4, !dbg !6572
  %60 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6573
  %61 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6574
  %call108 = call %struct.rtx_def* @simplify_gen_binary(i32 62, i32 %59, %struct.rtx_def* %60, %struct.rtx_def* %61), !dbg !6575
  store %struct.rtx_def* %call108, %struct.rtx_def** %result, align 8, !dbg !6576
  br label %if.end114, !dbg !6577

if.else109:                                       ; preds = %if.else101
  %62 = load i32, i32* %bitnum, align 4, !dbg !6578
  %sh_prom110 = zext i32 %62 to i64, !dbg !6580
  %shl111 = shl i64 1, %sh_prom110, !dbg !6580
  %neg = xor i64 %shl111, -1, !dbg !6581
  %63 = load i32, i32* %mode, align 4, !dbg !6582
  %call112 = call %struct.rtx_def* @gen_int_mode(i64 %neg, i32 %63), !dbg !6583
  store %struct.rtx_def* %call112, %struct.rtx_def** %result, align 8, !dbg !6584
  %64 = load i32, i32* %mode, align 4, !dbg !6585
  %65 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6586
  %66 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6587
  %call113 = call %struct.rtx_def* @simplify_gen_binary(i32 61, i32 %64, %struct.rtx_def* %65, %struct.rtx_def* %66), !dbg !6588
  store %struct.rtx_def* %call113, %struct.rtx_def** %result, align 8, !dbg !6589
  br label %if.end114

if.end114:                                        ; preds = %if.else109, %if.then104
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %cond.end
  br label %if.end166, !dbg !6590

if.else116:                                       ; preds = %lor.lhs.false59
  %67 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6591
  %68 = bitcast %struct.rtx_def* %67 to i32*, !dbg !6591
  %bf.load117 = load i32, i32* %68, align 8, !dbg !6591
  %bf.clear118 = and i32 %bf.load117, 65535, !dbg !6591
  %cmp119 = icmp eq i32 %bf.clear118, 61, !dbg !6593
  br i1 %cmp119, label %if.then121, label %if.else164, !dbg !6594

if.then121:                                       ; preds = %if.else116
  %69 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6595
  %70 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6598
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !6598
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !6598
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 0, !dbg !6598
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !6598
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !6598
  %call126 = call i32 @rtx_equal_p(%struct.rtx_def* %69, %struct.rtx_def* %71), !dbg !6599
  %tobool127 = icmp ne i32 %call126, 0, !dbg !6599
  br i1 %tobool127, label %lor.lhs.false128, label %if.then156, !dbg !6600

lor.lhs.false128:                                 ; preds = %if.then121
  %72 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6601
  %u129 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !6601
  %fld130 = bitcast %union.u* %u129 to [1 x %union.rtunion_def]*, !dbg !6601
  %arrayidx131 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld130, i64 0, i64 1, !dbg !6601
  %rt_rtx132 = bitcast %union.rtunion_def* %arrayidx131 to %struct.rtx_def**, !dbg !6601
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx132, align 8, !dbg !6601
  %74 = bitcast %struct.rtx_def* %73 to i32*, !dbg !6601
  %bf.load133 = load i32, i32* %74, align 8, !dbg !6601
  %bf.clear134 = and i32 %bf.load133, 65535, !dbg !6601
  %cmp135 = icmp eq i32 %bf.clear134, 30, !dbg !6601
  br i1 %cmp135, label %lor.lhs.false137, label %if.then156, !dbg !6602

lor.lhs.false137:                                 ; preds = %lor.lhs.false128
  %75 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6603
  %u138 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !6603
  %fld139 = bitcast %union.u* %u138 to [1 x %union.rtunion_def]*, !dbg !6603
  %arrayidx140 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld139, i64 0, i64 1, !dbg !6603
  %rt_rtx141 = bitcast %union.rtunion_def* %arrayidx140 to %struct.rtx_def**, !dbg !6603
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx141, align 8, !dbg !6603
  %u142 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6603
  %hwint143 = bitcast %union.u* %u142 to [1 x i64]*, !dbg !6603
  %arrayidx144 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint143, i64 0, i64 0, !dbg !6603
  %77 = load i64, i64* %arrayidx144, align 8, !dbg !6603
  %78 = load i32, i32* %mode, align 4, !dbg !6604
  %idxprom145 = zext i32 %78 to i64, !dbg !6604
  %arrayidx146 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom145, !dbg !6604
  %79 = load i64, i64* %arrayidx146, align 8, !dbg !6604
  %and147 = and i64 %77, %79, !dbg !6605
  %80 = load i32, i32* %bitnum, align 4, !dbg !6606
  %sh_prom148 = zext i32 %80 to i64, !dbg !6607
  %shl149 = shl i64 1, %sh_prom148, !dbg !6607
  %neg150 = xor i64 %shl149, -1, !dbg !6608
  %81 = load i32, i32* %mode, align 4, !dbg !6609
  %idxprom151 = zext i32 %81 to i64, !dbg !6609
  %arrayidx152 = getelementptr inbounds [87 x i64], [87 x i64]* @mode_mask_array, i64 0, i64 %idxprom151, !dbg !6609
  %82 = load i64, i64* %arrayidx152, align 8, !dbg !6609
  %and153 = and i64 %neg150, %82, !dbg !6610
  %cmp154 = icmp ne i64 %and147, %and153, !dbg !6611
  br i1 %cmp154, label %if.then156, label %if.end157, !dbg !6612

if.then156:                                       ; preds = %lor.lhs.false137, %lor.lhs.false128, %if.then121
  store i32 0, i32* %retval, align 4, !dbg !6613
  br label %return, !dbg !6613

if.end157:                                        ; preds = %lor.lhs.false137
  %83 = load i32, i32* %code, align 4, !dbg !6614
  %cmp158 = icmp eq i32 %83, 81, !dbg !6615
  br i1 %cmp158, label %cond.true160, label %cond.false161, !dbg !6616

cond.true160:                                     ; preds = %if.end157
  %84 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6617
  br label %cond.end162, !dbg !6616

cond.false161:                                    ; preds = %if.end157
  br label %cond.end162, !dbg !6616

cond.end162:                                      ; preds = %cond.false161, %cond.true160
  %cond163 = phi %struct.rtx_def* [ %84, %cond.true160 ], [ null, %cond.false161 ], !dbg !6616
  store %struct.rtx_def* %cond163, %struct.rtx_def** %result, align 8, !dbg !6618
  br label %if.end165, !dbg !6619

if.else164:                                       ; preds = %if.else116
  store i32 0, i32* %retval, align 4, !dbg !6620
  br label %return, !dbg !6620

if.end165:                                        ; preds = %cond.end162
  br label %if.end166

if.end166:                                        ; preds = %if.end165, %if.end115
  %85 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6621
  %tobool167 = icmp ne %struct.rtx_def* %85, null, !dbg !6621
  br i1 %tobool167, label %if.then168, label %if.end177, !dbg !6623

if.then168:                                       ; preds = %if.end166
  call void @start_sequence(), !dbg !6624
  %86 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6626
  %87 = load %struct.rtx_def*, %struct.rtx_def** %result, align 8, !dbg !6627
  call void @noce_emit_move_insn(%struct.rtx_def* %86, %struct.rtx_def* %87), !dbg !6628
  %88 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6629
  %call169 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %88), !dbg !6630
  store %struct.rtx_def* %call169, %struct.rtx_def** %seq, align 8, !dbg !6631
  %89 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6632
  %tobool170 = icmp ne %struct.rtx_def* %89, null, !dbg !6632
  br i1 %tobool170, label %if.end172, label %if.then171, !dbg !6634

if.then171:                                       ; preds = %if.then168
  store i32 0, i32* %retval, align 4, !dbg !6635
  br label %return, !dbg !6635

if.end172:                                        ; preds = %if.then168
  %90 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6636
  %91 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6637
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %91, i32 0, i32 4, !dbg !6638
  %92 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !6638
  %93 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6639
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %93, i32 0, i32 7, !dbg !6639
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !6639
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !6639
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !6639
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 4, !dbg !6639
  %rt_int = bitcast %union.rtunion_def* %arrayidx175 to i32*, !dbg !6639
  %95 = load i32, i32* %rt_int, align 8, !dbg !6639
  %call176 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %90, %struct.rtx_def* %92, i32 %95), !dbg !6640
  br label %if.end177, !dbg !6641

if.end177:                                        ; preds = %if.end172, %if.end166
  store i32 1, i32* %retval, align 4, !dbg !6642
  br label %return, !dbg !6642

return:                                           ; preds = %if.end177, %if.then171, %if.else164, %if.then156, %if.then91, %if.else, %if.then51, %if.then36, %if.then7, %if.then4, %if.then
  %96 = load i32, i32* %retval, align 4, !dbg !6643
  ret i32 %96, !dbg !6643
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_minmax(%struct.noce_if_info* %if_info) #0 !dbg !6644 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %earliest = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  %op = alloca i32, align 4
  %unsignedp = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !6645, metadata !DIExpression()), !dbg !6646
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !6647, metadata !DIExpression()), !dbg !6648
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %earliest, metadata !6649, metadata !DIExpression()), !dbg !6650
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !6651, metadata !DIExpression()), !dbg !6652
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6653, metadata !DIExpression()), !dbg !6654
  call void @llvm.dbg.declare(metadata i32* %code, metadata !6655, metadata !DIExpression()), !dbg !6656
  call void @llvm.dbg.declare(metadata i32* %op, metadata !6657, metadata !DIExpression()), !dbg !6658
  call void @llvm.dbg.declare(metadata i32* %unsignedp, metadata !6659, metadata !DIExpression()), !dbg !6660
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 11, !dbg !6661
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6661
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6661
  %bf.load = load i32, i32* %2, align 8, !dbg !6661
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6661
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6661
  %idxprom = zext i32 %bf.clear to i64, !dbg !6661
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6661
  %3 = load i8, i8* %arrayidx, align 1, !dbg !6661
  %conv = zext i8 %3 to i32, !dbg !6661
  %cmp = icmp eq i32 %conv, 8, !dbg !6661
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6661

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 11, !dbg !6661
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x2, align 8, !dbg !6661
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6661
  %bf.load3 = load i32, i32* %6, align 8, !dbg !6661
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !6661
  %bf.clear5 = and i32 %bf.lshr4, 255, !dbg !6661
  %idxprom6 = zext i32 %bf.clear5 to i64, !dbg !6661
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !6661
  %7 = load i8, i8* %arrayidx7, align 1, !dbg !6661
  %conv8 = zext i8 %7 to i32, !dbg !6661
  %cmp9 = icmp eq i32 %conv8, 9, !dbg !6661
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11, !dbg !6661

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x12 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 11, !dbg !6661
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x12, align 8, !dbg !6661
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6661
  %bf.load13 = load i32, i32* %10, align 8, !dbg !6661
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !6661
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !6661
  %idxprom16 = zext i32 %bf.clear15 to i64, !dbg !6661
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom16, !dbg !6661
  %11 = load i8, i8* %arrayidx17, align 1, !dbg !6661
  %conv18 = zext i8 %11 to i32, !dbg !6661
  %cmp19 = icmp eq i32 %conv18, 11, !dbg !6661
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false21, !dbg !6661

lor.lhs.false21:                                  ; preds = %lor.lhs.false11
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x22 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 11, !dbg !6661
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x22, align 8, !dbg !6661
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6661
  %bf.load23 = load i32, i32* %14, align 8, !dbg !6661
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !6661
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !6661
  %idxprom26 = zext i32 %bf.clear25 to i64, !dbg !6661
  %arrayidx27 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom26, !dbg !6661
  %15 = load i8, i8* %arrayidx27, align 1, !dbg !6661
  %conv28 = zext i8 %15 to i32, !dbg !6661
  %cmp29 = icmp eq i32 %conv28, 17, !dbg !6661
  br i1 %cmp29, label %land.lhs.true, label %lor.lhs.false145, !dbg !6661

land.lhs.true:                                    ; preds = %lor.lhs.false21, %lor.lhs.false11, %lor.lhs.false, %entry
  %16 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x31 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %16, i32 0, i32 11, !dbg !6661
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x31, align 8, !dbg !6661
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6661
  %bf.load32 = load i32, i32* %18, align 8, !dbg !6661
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !6661
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !6661
  %idxprom35 = zext i32 %bf.clear34 to i64, !dbg !6661
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom35, !dbg !6661
  %19 = load i8, i8* %arrayidx36, align 1, !dbg !6661
  %conv37 = zext i8 %19 to i32, !dbg !6661
  %cmp38 = icmp eq i32 %conv37, 8, !dbg !6661
  br i1 %cmp38, label %cond.true, label %lor.lhs.false40, !dbg !6661

lor.lhs.false40:                                  ; preds = %land.lhs.true
  %20 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x41 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %20, i32 0, i32 11, !dbg !6661
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x41, align 8, !dbg !6661
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !6661
  %bf.load42 = load i32, i32* %22, align 8, !dbg !6661
  %bf.lshr43 = lshr i32 %bf.load42, 16, !dbg !6661
  %bf.clear44 = and i32 %bf.lshr43, 255, !dbg !6661
  %idxprom45 = zext i32 %bf.clear44 to i64, !dbg !6661
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !6661
  %23 = load i8, i8* %arrayidx46, align 1, !dbg !6661
  %conv47 = zext i8 %23 to i32, !dbg !6661
  %cmp48 = icmp eq i32 %conv47, 9, !dbg !6661
  br i1 %cmp48, label %cond.true, label %cond.false, !dbg !6661

cond.true:                                        ; preds = %lor.lhs.false40, %land.lhs.true
  %24 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x50 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %24, i32 0, i32 11, !dbg !6661
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x50, align 8, !dbg !6661
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !6661
  %bf.load51 = load i32, i32* %26, align 8, !dbg !6661
  %bf.lshr52 = lshr i32 %bf.load51, 16, !dbg !6661
  %bf.clear53 = and i32 %bf.lshr52, 255, !dbg !6661
  br label %cond.end, !dbg !6661

cond.false:                                       ; preds = %lor.lhs.false40
  %27 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x54 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %27, i32 0, i32 11, !dbg !6661
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x54, align 8, !dbg !6661
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !6661
  %bf.load55 = load i32, i32* %29, align 8, !dbg !6661
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !6661
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !6661
  %idxprom58 = zext i32 %bf.clear57 to i64, !dbg !6661
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom58, !dbg !6661
  %30 = load i8, i8* %arrayidx59, align 1, !dbg !6661
  %conv60 = zext i8 %30 to i32, !dbg !6661
  br label %cond.end, !dbg !6661

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond61 = phi i32 [ %bf.clear53, %cond.true ], [ %conv60, %cond.false ], !dbg !6661
  %idxprom62 = zext i32 %cond61 to i64, !dbg !6661
  %arrayidx63 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom62, !dbg !6661
  %31 = load i8, i8* %arrayidx63, align 1, !dbg !6661
  %conv64 = zext i8 %31 to i32, !dbg !6661
  %cmp65 = icmp eq i32 %conv64, 9, !dbg !6661
  br i1 %cmp65, label %cond.true67, label %cond.false102, !dbg !6661

cond.true67:                                      ; preds = %cond.end
  %32 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x68 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %32, i32 0, i32 11, !dbg !6661
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x68, align 8, !dbg !6661
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !6661
  %bf.load69 = load i32, i32* %34, align 8, !dbg !6661
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !6661
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !6661
  %idxprom72 = zext i32 %bf.clear71 to i64, !dbg !6661
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !6661
  %35 = load i8, i8* %arrayidx73, align 1, !dbg !6661
  %conv74 = zext i8 %35 to i32, !dbg !6661
  %cmp75 = icmp eq i32 %conv74, 8, !dbg !6661
  br i1 %cmp75, label %cond.true87, label %lor.lhs.false77, !dbg !6661

lor.lhs.false77:                                  ; preds = %cond.true67
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x78 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 11, !dbg !6661
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x78, align 8, !dbg !6661
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !6661
  %bf.load79 = load i32, i32* %38, align 8, !dbg !6661
  %bf.lshr80 = lshr i32 %bf.load79, 16, !dbg !6661
  %bf.clear81 = and i32 %bf.lshr80, 255, !dbg !6661
  %idxprom82 = zext i32 %bf.clear81 to i64, !dbg !6661
  %arrayidx83 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom82, !dbg !6661
  %39 = load i8, i8* %arrayidx83, align 1, !dbg !6661
  %conv84 = zext i8 %39 to i32, !dbg !6661
  %cmp85 = icmp eq i32 %conv84, 9, !dbg !6661
  br i1 %cmp85, label %cond.true87, label %cond.false92, !dbg !6661

cond.true87:                                      ; preds = %lor.lhs.false77, %cond.true67
  %40 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x88 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %40, i32 0, i32 11, !dbg !6661
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x88, align 8, !dbg !6661
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !6661
  %bf.load89 = load i32, i32* %42, align 8, !dbg !6661
  %bf.lshr90 = lshr i32 %bf.load89, 16, !dbg !6661
  %bf.clear91 = and i32 %bf.lshr90, 255, !dbg !6661
  br label %cond.end100, !dbg !6661

cond.false92:                                     ; preds = %lor.lhs.false77
  %43 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x93 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %43, i32 0, i32 11, !dbg !6661
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x93, align 8, !dbg !6661
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6661
  %bf.load94 = load i32, i32* %45, align 8, !dbg !6661
  %bf.lshr95 = lshr i32 %bf.load94, 16, !dbg !6661
  %bf.clear96 = and i32 %bf.lshr95, 255, !dbg !6661
  %idxprom97 = zext i32 %bf.clear96 to i64, !dbg !6661
  %arrayidx98 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom97, !dbg !6661
  %46 = load i8, i8* %arrayidx98, align 1, !dbg !6661
  %conv99 = zext i8 %46 to i32, !dbg !6661
  br label %cond.end100, !dbg !6661

cond.end100:                                      ; preds = %cond.false92, %cond.true87
  %cond101 = phi i32 [ %bf.clear91, %cond.true87 ], [ %conv99, %cond.false92 ], !dbg !6661
  %sub = sub i32 %cond101, 42, !dbg !6661
  %add = add i32 %sub, 4, !dbg !6661
  br label %cond.end138, !dbg !6661

cond.false102:                                    ; preds = %cond.end
  %47 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x103 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %47, i32 0, i32 11, !dbg !6661
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x103, align 8, !dbg !6661
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !6661
  %bf.load104 = load i32, i32* %49, align 8, !dbg !6661
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !6661
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !6661
  %idxprom107 = zext i32 %bf.clear106 to i64, !dbg !6661
  %arrayidx108 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom107, !dbg !6661
  %50 = load i8, i8* %arrayidx108, align 1, !dbg !6661
  %conv109 = zext i8 %50 to i32, !dbg !6661
  %cmp110 = icmp eq i32 %conv109, 8, !dbg !6661
  br i1 %cmp110, label %cond.true122, label %lor.lhs.false112, !dbg !6661

lor.lhs.false112:                                 ; preds = %cond.false102
  %51 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x113 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %51, i32 0, i32 11, !dbg !6661
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x113, align 8, !dbg !6661
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !6661
  %bf.load114 = load i32, i32* %53, align 8, !dbg !6661
  %bf.lshr115 = lshr i32 %bf.load114, 16, !dbg !6661
  %bf.clear116 = and i32 %bf.lshr115, 255, !dbg !6661
  %idxprom117 = zext i32 %bf.clear116 to i64, !dbg !6661
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom117, !dbg !6661
  %54 = load i8, i8* %arrayidx118, align 1, !dbg !6661
  %conv119 = zext i8 %54 to i32, !dbg !6661
  %cmp120 = icmp eq i32 %conv119, 9, !dbg !6661
  br i1 %cmp120, label %cond.true122, label %cond.false127, !dbg !6661

cond.true122:                                     ; preds = %lor.lhs.false112, %cond.false102
  %55 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x123 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %55, i32 0, i32 11, !dbg !6661
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x123, align 8, !dbg !6661
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !6661
  %bf.load124 = load i32, i32* %57, align 8, !dbg !6661
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !6661
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !6661
  br label %cond.end135, !dbg !6661

cond.false127:                                    ; preds = %lor.lhs.false112
  %58 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6661
  %x128 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %58, i32 0, i32 11, !dbg !6661
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x128, align 8, !dbg !6661
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !6661
  %bf.load129 = load i32, i32* %60, align 8, !dbg !6661
  %bf.lshr130 = lshr i32 %bf.load129, 16, !dbg !6661
  %bf.clear131 = and i32 %bf.lshr130, 255, !dbg !6661
  %idxprom132 = zext i32 %bf.clear131 to i64, !dbg !6661
  %arrayidx133 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom132, !dbg !6661
  %61 = load i8, i8* %arrayidx133, align 1, !dbg !6661
  %conv134 = zext i8 %61 to i32, !dbg !6661
  br label %cond.end135, !dbg !6661

cond.end135:                                      ; preds = %cond.false127, %cond.true122
  %cond136 = phi i32 [ %bf.clear126, %cond.true122 ], [ %conv134, %cond.false127 ], !dbg !6661
  %sub137 = sub i32 %cond136, 38, !dbg !6661
  br label %cond.end138, !dbg !6661

cond.end138:                                      ; preds = %cond.end135, %cond.end100
  %cond139 = phi i32 [ %add, %cond.end100 ], [ %sub137, %cond.end135 ], !dbg !6661
  %idxprom140 = zext i32 %cond139 to i64, !dbg !6661
  %arrayidx141 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom140, !dbg !6661
  %62 = load %struct.real_format*, %struct.real_format** %arrayidx141, align 8, !dbg !6661
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %62, i32 0, i32 14, !dbg !6661
  %63 = load i8, i8* %has_signed_zero, align 1, !dbg !6661
  %conv142 = zext i8 %63 to i32, !dbg !6661
  %tobool = icmp ne i32 %conv142, 0, !dbg !6661
  br i1 %tobool, label %land.lhs.true143, label %lor.lhs.false145, !dbg !6661

land.lhs.true143:                                 ; preds = %cond.end138
  %64 = load i32, i32* @flag_signed_zeros, align 4, !dbg !6661
  %tobool144 = icmp ne i32 %64, 0, !dbg !6661
  br i1 %tobool144, label %if.then, label %lor.lhs.false145, !dbg !6663

lor.lhs.false145:                                 ; preds = %land.lhs.true143, %cond.end138, %lor.lhs.false21
  %65 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x146 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %65, i32 0, i32 11, !dbg !6664
  %66 = load %struct.rtx_def*, %struct.rtx_def** %x146, align 8, !dbg !6664
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !6664
  %bf.load147 = load i32, i32* %67, align 8, !dbg !6664
  %bf.lshr148 = lshr i32 %bf.load147, 16, !dbg !6664
  %bf.clear149 = and i32 %bf.lshr148, 255, !dbg !6664
  %idxprom150 = zext i32 %bf.clear149 to i64, !dbg !6664
  %arrayidx151 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom150, !dbg !6664
  %68 = load i8, i8* %arrayidx151, align 1, !dbg !6664
  %conv152 = zext i8 %68 to i32, !dbg !6664
  %cmp153 = icmp eq i32 %conv152, 8, !dbg !6664
  br i1 %cmp153, label %land.lhs.true185, label %lor.lhs.false155, !dbg !6664

lor.lhs.false155:                                 ; preds = %lor.lhs.false145
  %69 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x156 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %69, i32 0, i32 11, !dbg !6664
  %70 = load %struct.rtx_def*, %struct.rtx_def** %x156, align 8, !dbg !6664
  %71 = bitcast %struct.rtx_def* %70 to i32*, !dbg !6664
  %bf.load157 = load i32, i32* %71, align 8, !dbg !6664
  %bf.lshr158 = lshr i32 %bf.load157, 16, !dbg !6664
  %bf.clear159 = and i32 %bf.lshr158, 255, !dbg !6664
  %idxprom160 = zext i32 %bf.clear159 to i64, !dbg !6664
  %arrayidx161 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom160, !dbg !6664
  %72 = load i8, i8* %arrayidx161, align 1, !dbg !6664
  %conv162 = zext i8 %72 to i32, !dbg !6664
  %cmp163 = icmp eq i32 %conv162, 9, !dbg !6664
  br i1 %cmp163, label %land.lhs.true185, label %lor.lhs.false165, !dbg !6664

lor.lhs.false165:                                 ; preds = %lor.lhs.false155
  %73 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x166 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %73, i32 0, i32 11, !dbg !6664
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x166, align 8, !dbg !6664
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !6664
  %bf.load167 = load i32, i32* %75, align 8, !dbg !6664
  %bf.lshr168 = lshr i32 %bf.load167, 16, !dbg !6664
  %bf.clear169 = and i32 %bf.lshr168, 255, !dbg !6664
  %idxprom170 = zext i32 %bf.clear169 to i64, !dbg !6664
  %arrayidx171 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom170, !dbg !6664
  %76 = load i8, i8* %arrayidx171, align 1, !dbg !6664
  %conv172 = zext i8 %76 to i32, !dbg !6664
  %cmp173 = icmp eq i32 %conv172, 11, !dbg !6664
  br i1 %cmp173, label %land.lhs.true185, label %lor.lhs.false175, !dbg !6664

lor.lhs.false175:                                 ; preds = %lor.lhs.false165
  %77 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x176 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %77, i32 0, i32 11, !dbg !6664
  %78 = load %struct.rtx_def*, %struct.rtx_def** %x176, align 8, !dbg !6664
  %79 = bitcast %struct.rtx_def* %78 to i32*, !dbg !6664
  %bf.load177 = load i32, i32* %79, align 8, !dbg !6664
  %bf.lshr178 = lshr i32 %bf.load177, 16, !dbg !6664
  %bf.clear179 = and i32 %bf.lshr178, 255, !dbg !6664
  %idxprom180 = zext i32 %bf.clear179 to i64, !dbg !6664
  %arrayidx181 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom180, !dbg !6664
  %80 = load i8, i8* %arrayidx181, align 1, !dbg !6664
  %conv182 = zext i8 %80 to i32, !dbg !6664
  %cmp183 = icmp eq i32 %conv182, 17, !dbg !6664
  br i1 %cmp183, label %land.lhs.true185, label %if.end, !dbg !6664

land.lhs.true185:                                 ; preds = %lor.lhs.false175, %lor.lhs.false165, %lor.lhs.false155, %lor.lhs.false145
  %81 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x186 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %81, i32 0, i32 11, !dbg !6664
  %82 = load %struct.rtx_def*, %struct.rtx_def** %x186, align 8, !dbg !6664
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !6664
  %bf.load187 = load i32, i32* %83, align 8, !dbg !6664
  %bf.lshr188 = lshr i32 %bf.load187, 16, !dbg !6664
  %bf.clear189 = and i32 %bf.lshr188, 255, !dbg !6664
  %idxprom190 = zext i32 %bf.clear189 to i64, !dbg !6664
  %arrayidx191 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom190, !dbg !6664
  %84 = load i8, i8* %arrayidx191, align 1, !dbg !6664
  %conv192 = zext i8 %84 to i32, !dbg !6664
  %cmp193 = icmp eq i32 %conv192, 8, !dbg !6664
  br i1 %cmp193, label %cond.true205, label %lor.lhs.false195, !dbg !6664

lor.lhs.false195:                                 ; preds = %land.lhs.true185
  %85 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x196 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %85, i32 0, i32 11, !dbg !6664
  %86 = load %struct.rtx_def*, %struct.rtx_def** %x196, align 8, !dbg !6664
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !6664
  %bf.load197 = load i32, i32* %87, align 8, !dbg !6664
  %bf.lshr198 = lshr i32 %bf.load197, 16, !dbg !6664
  %bf.clear199 = and i32 %bf.lshr198, 255, !dbg !6664
  %idxprom200 = zext i32 %bf.clear199 to i64, !dbg !6664
  %arrayidx201 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom200, !dbg !6664
  %88 = load i8, i8* %arrayidx201, align 1, !dbg !6664
  %conv202 = zext i8 %88 to i32, !dbg !6664
  %cmp203 = icmp eq i32 %conv202, 9, !dbg !6664
  br i1 %cmp203, label %cond.true205, label %cond.false210, !dbg !6664

cond.true205:                                     ; preds = %lor.lhs.false195, %land.lhs.true185
  %89 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x206 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %89, i32 0, i32 11, !dbg !6664
  %90 = load %struct.rtx_def*, %struct.rtx_def** %x206, align 8, !dbg !6664
  %91 = bitcast %struct.rtx_def* %90 to i32*, !dbg !6664
  %bf.load207 = load i32, i32* %91, align 8, !dbg !6664
  %bf.lshr208 = lshr i32 %bf.load207, 16, !dbg !6664
  %bf.clear209 = and i32 %bf.lshr208, 255, !dbg !6664
  br label %cond.end218, !dbg !6664

cond.false210:                                    ; preds = %lor.lhs.false195
  %92 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x211 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %92, i32 0, i32 11, !dbg !6664
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x211, align 8, !dbg !6664
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !6664
  %bf.load212 = load i32, i32* %94, align 8, !dbg !6664
  %bf.lshr213 = lshr i32 %bf.load212, 16, !dbg !6664
  %bf.clear214 = and i32 %bf.lshr213, 255, !dbg !6664
  %idxprom215 = zext i32 %bf.clear214 to i64, !dbg !6664
  %arrayidx216 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom215, !dbg !6664
  %95 = load i8, i8* %arrayidx216, align 1, !dbg !6664
  %conv217 = zext i8 %95 to i32, !dbg !6664
  br label %cond.end218, !dbg !6664

cond.end218:                                      ; preds = %cond.false210, %cond.true205
  %cond219 = phi i32 [ %bf.clear209, %cond.true205 ], [ %conv217, %cond.false210 ], !dbg !6664
  %idxprom220 = zext i32 %cond219 to i64, !dbg !6664
  %arrayidx221 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom220, !dbg !6664
  %96 = load i8, i8* %arrayidx221, align 1, !dbg !6664
  %conv222 = zext i8 %96 to i32, !dbg !6664
  %cmp223 = icmp eq i32 %conv222, 9, !dbg !6664
  br i1 %cmp223, label %cond.true225, label %cond.false262, !dbg !6664

cond.true225:                                     ; preds = %cond.end218
  %97 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x226 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %97, i32 0, i32 11, !dbg !6664
  %98 = load %struct.rtx_def*, %struct.rtx_def** %x226, align 8, !dbg !6664
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !6664
  %bf.load227 = load i32, i32* %99, align 8, !dbg !6664
  %bf.lshr228 = lshr i32 %bf.load227, 16, !dbg !6664
  %bf.clear229 = and i32 %bf.lshr228, 255, !dbg !6664
  %idxprom230 = zext i32 %bf.clear229 to i64, !dbg !6664
  %arrayidx231 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom230, !dbg !6664
  %100 = load i8, i8* %arrayidx231, align 1, !dbg !6664
  %conv232 = zext i8 %100 to i32, !dbg !6664
  %cmp233 = icmp eq i32 %conv232, 8, !dbg !6664
  br i1 %cmp233, label %cond.true245, label %lor.lhs.false235, !dbg !6664

lor.lhs.false235:                                 ; preds = %cond.true225
  %101 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x236 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %101, i32 0, i32 11, !dbg !6664
  %102 = load %struct.rtx_def*, %struct.rtx_def** %x236, align 8, !dbg !6664
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !6664
  %bf.load237 = load i32, i32* %103, align 8, !dbg !6664
  %bf.lshr238 = lshr i32 %bf.load237, 16, !dbg !6664
  %bf.clear239 = and i32 %bf.lshr238, 255, !dbg !6664
  %idxprom240 = zext i32 %bf.clear239 to i64, !dbg !6664
  %arrayidx241 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom240, !dbg !6664
  %104 = load i8, i8* %arrayidx241, align 1, !dbg !6664
  %conv242 = zext i8 %104 to i32, !dbg !6664
  %cmp243 = icmp eq i32 %conv242, 9, !dbg !6664
  br i1 %cmp243, label %cond.true245, label %cond.false250, !dbg !6664

cond.true245:                                     ; preds = %lor.lhs.false235, %cond.true225
  %105 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x246 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %105, i32 0, i32 11, !dbg !6664
  %106 = load %struct.rtx_def*, %struct.rtx_def** %x246, align 8, !dbg !6664
  %107 = bitcast %struct.rtx_def* %106 to i32*, !dbg !6664
  %bf.load247 = load i32, i32* %107, align 8, !dbg !6664
  %bf.lshr248 = lshr i32 %bf.load247, 16, !dbg !6664
  %bf.clear249 = and i32 %bf.lshr248, 255, !dbg !6664
  br label %cond.end258, !dbg !6664

cond.false250:                                    ; preds = %lor.lhs.false235
  %108 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x251 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %108, i32 0, i32 11, !dbg !6664
  %109 = load %struct.rtx_def*, %struct.rtx_def** %x251, align 8, !dbg !6664
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !6664
  %bf.load252 = load i32, i32* %110, align 8, !dbg !6664
  %bf.lshr253 = lshr i32 %bf.load252, 16, !dbg !6664
  %bf.clear254 = and i32 %bf.lshr253, 255, !dbg !6664
  %idxprom255 = zext i32 %bf.clear254 to i64, !dbg !6664
  %arrayidx256 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom255, !dbg !6664
  %111 = load i8, i8* %arrayidx256, align 1, !dbg !6664
  %conv257 = zext i8 %111 to i32, !dbg !6664
  br label %cond.end258, !dbg !6664

cond.end258:                                      ; preds = %cond.false250, %cond.true245
  %cond259 = phi i32 [ %bf.clear249, %cond.true245 ], [ %conv257, %cond.false250 ], !dbg !6664
  %sub260 = sub i32 %cond259, 42, !dbg !6664
  %add261 = add i32 %sub260, 4, !dbg !6664
  br label %cond.end298, !dbg !6664

cond.false262:                                    ; preds = %cond.end218
  %112 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x263 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %112, i32 0, i32 11, !dbg !6664
  %113 = load %struct.rtx_def*, %struct.rtx_def** %x263, align 8, !dbg !6664
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !6664
  %bf.load264 = load i32, i32* %114, align 8, !dbg !6664
  %bf.lshr265 = lshr i32 %bf.load264, 16, !dbg !6664
  %bf.clear266 = and i32 %bf.lshr265, 255, !dbg !6664
  %idxprom267 = zext i32 %bf.clear266 to i64, !dbg !6664
  %arrayidx268 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom267, !dbg !6664
  %115 = load i8, i8* %arrayidx268, align 1, !dbg !6664
  %conv269 = zext i8 %115 to i32, !dbg !6664
  %cmp270 = icmp eq i32 %conv269, 8, !dbg !6664
  br i1 %cmp270, label %cond.true282, label %lor.lhs.false272, !dbg !6664

lor.lhs.false272:                                 ; preds = %cond.false262
  %116 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x273 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %116, i32 0, i32 11, !dbg !6664
  %117 = load %struct.rtx_def*, %struct.rtx_def** %x273, align 8, !dbg !6664
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !6664
  %bf.load274 = load i32, i32* %118, align 8, !dbg !6664
  %bf.lshr275 = lshr i32 %bf.load274, 16, !dbg !6664
  %bf.clear276 = and i32 %bf.lshr275, 255, !dbg !6664
  %idxprom277 = zext i32 %bf.clear276 to i64, !dbg !6664
  %arrayidx278 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom277, !dbg !6664
  %119 = load i8, i8* %arrayidx278, align 1, !dbg !6664
  %conv279 = zext i8 %119 to i32, !dbg !6664
  %cmp280 = icmp eq i32 %conv279, 9, !dbg !6664
  br i1 %cmp280, label %cond.true282, label %cond.false287, !dbg !6664

cond.true282:                                     ; preds = %lor.lhs.false272, %cond.false262
  %120 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x283 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %120, i32 0, i32 11, !dbg !6664
  %121 = load %struct.rtx_def*, %struct.rtx_def** %x283, align 8, !dbg !6664
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !6664
  %bf.load284 = load i32, i32* %122, align 8, !dbg !6664
  %bf.lshr285 = lshr i32 %bf.load284, 16, !dbg !6664
  %bf.clear286 = and i32 %bf.lshr285, 255, !dbg !6664
  br label %cond.end295, !dbg !6664

cond.false287:                                    ; preds = %lor.lhs.false272
  %123 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6664
  %x288 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %123, i32 0, i32 11, !dbg !6664
  %124 = load %struct.rtx_def*, %struct.rtx_def** %x288, align 8, !dbg !6664
  %125 = bitcast %struct.rtx_def* %124 to i32*, !dbg !6664
  %bf.load289 = load i32, i32* %125, align 8, !dbg !6664
  %bf.lshr290 = lshr i32 %bf.load289, 16, !dbg !6664
  %bf.clear291 = and i32 %bf.lshr290, 255, !dbg !6664
  %idxprom292 = zext i32 %bf.clear291 to i64, !dbg !6664
  %arrayidx293 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom292, !dbg !6664
  %126 = load i8, i8* %arrayidx293, align 1, !dbg !6664
  %conv294 = zext i8 %126 to i32, !dbg !6664
  br label %cond.end295, !dbg !6664

cond.end295:                                      ; preds = %cond.false287, %cond.true282
  %cond296 = phi i32 [ %bf.clear286, %cond.true282 ], [ %conv294, %cond.false287 ], !dbg !6664
  %sub297 = sub i32 %cond296, 38, !dbg !6664
  br label %cond.end298, !dbg !6664

cond.end298:                                      ; preds = %cond.end295, %cond.end258
  %cond299 = phi i32 [ %add261, %cond.end258 ], [ %sub297, %cond.end295 ], !dbg !6664
  %idxprom300 = zext i32 %cond299 to i64, !dbg !6664
  %arrayidx301 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom300, !dbg !6664
  %127 = load %struct.real_format*, %struct.real_format** %arrayidx301, align 8, !dbg !6664
  %has_nans = getelementptr inbounds %struct.real_format, %struct.real_format* %127, i32 0, i32 11, !dbg !6664
  %128 = load i8, i8* %has_nans, align 2, !dbg !6664
  %conv302 = zext i8 %128 to i32, !dbg !6664
  %tobool303 = icmp ne i32 %conv302, 0, !dbg !6664
  br i1 %tobool303, label %land.lhs.true304, label %if.end, !dbg !6664

land.lhs.true304:                                 ; preds = %cond.end298
  %129 = load i32, i32* @flag_finite_math_only, align 4, !dbg !6664
  %tobool305 = icmp ne i32 %129, 0, !dbg !6664
  br i1 %tobool305, label %if.end, label %if.then, !dbg !6665

if.then:                                          ; preds = %land.lhs.true304, %land.lhs.true143
  store i32 0, i32* %retval, align 4, !dbg !6666
  br label %return, !dbg !6666

if.end:                                           ; preds = %land.lhs.true304, %cond.end298, %lor.lhs.false175
  %130 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6667
  %131 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6668
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %131, i32 0, i32 9, !dbg !6669
  %132 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6669
  %call = call %struct.rtx_def* @noce_get_alt_condition(%struct.noce_if_info* %130, %struct.rtx_def* %132, %struct.rtx_def** %earliest), !dbg !6670
  store %struct.rtx_def* %call, %struct.rtx_def** %cond, align 8, !dbg !6671
  %133 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6672
  %tobool306 = icmp ne %struct.rtx_def* %133, null, !dbg !6672
  br i1 %tobool306, label %if.end308, label %if.then307, !dbg !6674

if.then307:                                       ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !6675
  br label %return, !dbg !6675

if.end308:                                        ; preds = %if.end
  %134 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6676
  %135 = bitcast %struct.rtx_def* %134 to i32*, !dbg !6676
  %bf.load309 = load i32, i32* %135, align 8, !dbg !6676
  %bf.clear310 = and i32 %bf.load309, 65535, !dbg !6676
  store i32 %bf.clear310, i32* %code, align 4, !dbg !6677
  %136 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6678
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %136, i32 0, i32 1, !dbg !6678
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6678
  %arrayidx311 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6678
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx311 to %struct.rtx_def**, !dbg !6678
  %137 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6678
  %138 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6680
  %a312 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %138, i32 0, i32 9, !dbg !6681
  %139 = load %struct.rtx_def*, %struct.rtx_def** %a312, align 8, !dbg !6681
  %call313 = call i32 @rtx_equal_p(%struct.rtx_def* %137, %struct.rtx_def* %139), !dbg !6682
  %tobool314 = icmp ne i32 %call313, 0, !dbg !6682
  br i1 %tobool314, label %if.then315, label %if.else, !dbg !6683

if.then315:                                       ; preds = %if.end308
  %140 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6684
  %u316 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !6684
  %fld317 = bitcast %union.u* %u316 to [1 x %union.rtunion_def]*, !dbg !6684
  %arrayidx318 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld317, i64 0, i64 1, !dbg !6684
  %rt_rtx319 = bitcast %union.rtunion_def* %arrayidx318 to %struct.rtx_def**, !dbg !6684
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx319, align 8, !dbg !6684
  %142 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6687
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %142, i32 0, i32 10, !dbg !6688
  %143 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6688
  %call320 = call i32 @rtx_equal_p(%struct.rtx_def* %141, %struct.rtx_def* %143), !dbg !6689
  %tobool321 = icmp ne i32 %call320, 0, !dbg !6689
  br i1 %tobool321, label %if.end323, label %if.then322, !dbg !6690

if.then322:                                       ; preds = %if.then315
  store i32 0, i32* %retval, align 4, !dbg !6691
  br label %return, !dbg !6691

if.end323:                                        ; preds = %if.then315
  br label %if.end344, !dbg !6692

if.else:                                          ; preds = %if.end308
  %144 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6693
  %u324 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !6693
  %fld325 = bitcast %union.u* %u324 to [1 x %union.rtunion_def]*, !dbg !6693
  %arrayidx326 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld325, i64 0, i64 1, !dbg !6693
  %rt_rtx327 = bitcast %union.rtunion_def* %arrayidx326 to %struct.rtx_def**, !dbg !6693
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx327, align 8, !dbg !6693
  %146 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6695
  %a328 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %146, i32 0, i32 9, !dbg !6696
  %147 = load %struct.rtx_def*, %struct.rtx_def** %a328, align 8, !dbg !6696
  %call329 = call i32 @rtx_equal_p(%struct.rtx_def* %145, %struct.rtx_def* %147), !dbg !6697
  %tobool330 = icmp ne i32 %call329, 0, !dbg !6697
  br i1 %tobool330, label %if.then331, label %if.else342, !dbg !6698

if.then331:                                       ; preds = %if.else
  %148 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6699
  %u332 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %148, i32 0, i32 1, !dbg !6699
  %fld333 = bitcast %union.u* %u332 to [1 x %union.rtunion_def]*, !dbg !6699
  %arrayidx334 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld333, i64 0, i64 0, !dbg !6699
  %rt_rtx335 = bitcast %union.rtunion_def* %arrayidx334 to %struct.rtx_def**, !dbg !6699
  %149 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx335, align 8, !dbg !6699
  %150 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6702
  %b336 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %150, i32 0, i32 10, !dbg !6703
  %151 = load %struct.rtx_def*, %struct.rtx_def** %b336, align 8, !dbg !6703
  %call337 = call i32 @rtx_equal_p(%struct.rtx_def* %149, %struct.rtx_def* %151), !dbg !6704
  %tobool338 = icmp ne i32 %call337, 0, !dbg !6704
  br i1 %tobool338, label %if.end340, label %if.then339, !dbg !6705

if.then339:                                       ; preds = %if.then331
  store i32 0, i32* %retval, align 4, !dbg !6706
  br label %return, !dbg !6706

if.end340:                                        ; preds = %if.then331
  %152 = load i32, i32* %code, align 4, !dbg !6707
  %call341 = call i32 @swap_condition(i32 %152), !dbg !6708
  store i32 %call341, i32* %code, align 4, !dbg !6709
  br label %if.end343, !dbg !6710

if.else342:                                       ; preds = %if.else
  store i32 0, i32* %retval, align 4, !dbg !6711
  br label %return, !dbg !6711

if.end343:                                        ; preds = %if.end340
  br label %if.end344

if.end344:                                        ; preds = %if.end343, %if.end323
  %153 = load i32, i32* %code, align 4, !dbg !6712
  switch i32 %153, label %sw.default [
    i32 85, label %sw.bb
    i32 84, label %sw.bb
    i32 96, label %sw.bb
    i32 95, label %sw.bb
    i32 83, label %sw.bb345
    i32 82, label %sw.bb345
    i32 94, label %sw.bb345
    i32 93, label %sw.bb345
    i32 89, label %sw.bb346
    i32 88, label %sw.bb346
    i32 87, label %sw.bb347
    i32 86, label %sw.bb347
  ], !dbg !6713

sw.bb:                                            ; preds = %if.end344, %if.end344, %if.end344, %if.end344
  store i32 71, i32* %op, align 4, !dbg !6714
  store i32 0, i32* %unsignedp, align 4, !dbg !6716
  br label %sw.epilog, !dbg !6717

sw.bb345:                                         ; preds = %if.end344, %if.end344, %if.end344, %if.end344
  store i32 70, i32* %op, align 4, !dbg !6718
  store i32 0, i32* %unsignedp, align 4, !dbg !6719
  br label %sw.epilog, !dbg !6720

sw.bb346:                                         ; preds = %if.end344, %if.end344
  store i32 73, i32* %op, align 4, !dbg !6721
  store i32 1, i32* %unsignedp, align 4, !dbg !6722
  br label %sw.epilog, !dbg !6723

sw.bb347:                                         ; preds = %if.end344, %if.end344
  store i32 72, i32* %op, align 4, !dbg !6724
  store i32 1, i32* %unsignedp, align 4, !dbg !6725
  br label %sw.epilog, !dbg !6726

sw.default:                                       ; preds = %if.end344
  store i32 0, i32* %retval, align 4, !dbg !6727
  br label %return, !dbg !6727

sw.epilog:                                        ; preds = %sw.bb347, %sw.bb346, %sw.bb345, %sw.bb
  call void @start_sequence(), !dbg !6728
  %154 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6729
  %x348 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %154, i32 0, i32 11, !dbg !6729
  %155 = load %struct.rtx_def*, %struct.rtx_def** %x348, align 8, !dbg !6729
  %156 = bitcast %struct.rtx_def* %155 to i32*, !dbg !6729
  %bf.load349 = load i32, i32* %156, align 8, !dbg !6729
  %bf.lshr350 = lshr i32 %bf.load349, 16, !dbg !6729
  %bf.clear351 = and i32 %bf.lshr350, 255, !dbg !6729
  %157 = load i32, i32* %op, align 4, !dbg !6730
  %158 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6731
  %a352 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %158, i32 0, i32 9, !dbg !6732
  %159 = load %struct.rtx_def*, %struct.rtx_def** %a352, align 8, !dbg !6732
  %160 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6733
  %b353 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %160, i32 0, i32 10, !dbg !6734
  %161 = load %struct.rtx_def*, %struct.rtx_def** %b353, align 8, !dbg !6734
  %162 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6735
  %x354 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %162, i32 0, i32 11, !dbg !6736
  %163 = load %struct.rtx_def*, %struct.rtx_def** %x354, align 8, !dbg !6736
  %164 = load i32, i32* %unsignedp, align 4, !dbg !6737
  %call355 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear351, i32 %157, %struct.rtx_def* %159, %struct.rtx_def* %161, %struct.rtx_def* %163, i32 %164, i32 2), !dbg !6738
  store %struct.rtx_def* %call355, %struct.rtx_def** %target, align 8, !dbg !6739
  %165 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6740
  %tobool356 = icmp ne %struct.rtx_def* %165, null, !dbg !6740
  br i1 %tobool356, label %if.end358, label %if.then357, !dbg !6742

if.then357:                                       ; preds = %sw.epilog
  call void @end_sequence(), !dbg !6743
  store i32 0, i32* %retval, align 4, !dbg !6745
  br label %return, !dbg !6745

if.end358:                                        ; preds = %sw.epilog
  %166 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6746
  %167 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6748
  %x359 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %167, i32 0, i32 11, !dbg !6749
  %168 = load %struct.rtx_def*, %struct.rtx_def** %x359, align 8, !dbg !6749
  %cmp360 = icmp ne %struct.rtx_def* %166, %168, !dbg !6750
  br i1 %cmp360, label %if.then362, label %if.end364, !dbg !6751

if.then362:                                       ; preds = %if.end358
  %169 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6752
  %x363 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %169, i32 0, i32 11, !dbg !6753
  %170 = load %struct.rtx_def*, %struct.rtx_def** %x363, align 8, !dbg !6753
  %171 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6754
  call void @noce_emit_move_insn(%struct.rtx_def* %170, %struct.rtx_def* %171), !dbg !6755
  br label %if.end364, !dbg !6755

if.end364:                                        ; preds = %if.then362, %if.end358
  %172 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6756
  %call365 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %172), !dbg !6757
  store %struct.rtx_def* %call365, %struct.rtx_def** %seq, align 8, !dbg !6758
  %173 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6759
  %tobool366 = icmp ne %struct.rtx_def* %173, null, !dbg !6759
  br i1 %tobool366, label %if.end368, label %if.then367, !dbg !6761

if.then367:                                       ; preds = %if.end364
  store i32 0, i32* %retval, align 4, !dbg !6762
  br label %return, !dbg !6762

if.end368:                                        ; preds = %if.end364
  %174 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !6763
  %175 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6764
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %175, i32 0, i32 4, !dbg !6765
  %176 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !6765
  %177 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6766
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %177, i32 0, i32 7, !dbg !6766
  %178 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !6766
  %u369 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %178, i32 0, i32 1, !dbg !6766
  %fld370 = bitcast %union.u* %u369 to [1 x %union.rtunion_def]*, !dbg !6766
  %arrayidx371 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld370, i64 0, i64 4, !dbg !6766
  %rt_int = bitcast %union.rtunion_def* %arrayidx371 to i32*, !dbg !6766
  %179 = load i32, i32* %rt_int, align 8, !dbg !6766
  %call372 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %174, %struct.rtx_def* %176, i32 %179), !dbg !6767
  %180 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6768
  %181 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6769
  %cond373 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %181, i32 0, i32 5, !dbg !6770
  store %struct.rtx_def* %180, %struct.rtx_def** %cond373, align 8, !dbg !6771
  %182 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !6772
  %183 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6773
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %183, i32 0, i32 6, !dbg !6774
  store %struct.rtx_def* %182, %struct.rtx_def** %cond_earliest, align 8, !dbg !6775
  store i32 1, i32* %retval, align 4, !dbg !6776
  br label %return, !dbg !6776

return:                                           ; preds = %if.end368, %if.then367, %if.then357, %sw.default, %if.else342, %if.then339, %if.then322, %if.then307, %if.then
  %184 = load i32, i32* %retval, align 4, !dbg !6777
  ret i32 %184, !dbg !6777
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_abs(%struct.noce_if_info* %if_info) #0 !dbg !6778 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %earliest = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.rtx_def*, align 8
  %c = alloca %struct.rtx_def*, align 8
  %negate = alloca i32, align 4
  %one_cmpl = alloca i8, align 1
  %set = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !6779, metadata !DIExpression()), !dbg !6780
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !6781, metadata !DIExpression()), !dbg !6782
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %earliest, metadata !6783, metadata !DIExpression()), !dbg !6784
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !6785, metadata !DIExpression()), !dbg !6786
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !6787, metadata !DIExpression()), !dbg !6788
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !6789, metadata !DIExpression()), !dbg !6790
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b, metadata !6791, metadata !DIExpression()), !dbg !6792
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %c, metadata !6793, metadata !DIExpression()), !dbg !6794
  call void @llvm.dbg.declare(metadata i32* %negate, metadata !6795, metadata !DIExpression()), !dbg !6796
  call void @llvm.dbg.declare(metadata i8* %one_cmpl, metadata !6797, metadata !DIExpression()), !dbg !6798
  store i8 0, i8* %one_cmpl, align 1, !dbg !6798
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 11, !dbg !6799
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !6799
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !6799
  %bf.load = load i32, i32* %2, align 8, !dbg !6799
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !6799
  %bf.clear = and i32 %bf.lshr, 255, !dbg !6799
  %idxprom = zext i32 %bf.clear to i64, !dbg !6799
  %arrayidx = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !6799
  %3 = load i8, i8* %arrayidx, align 1, !dbg !6799
  %conv = zext i8 %3 to i32, !dbg !6799
  %cmp = icmp eq i32 %conv, 8, !dbg !6799
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !6799

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 11, !dbg !6799
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x2, align 8, !dbg !6799
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !6799
  %bf.load3 = load i32, i32* %6, align 8, !dbg !6799
  %bf.lshr4 = lshr i32 %bf.load3, 16, !dbg !6799
  %bf.clear5 = and i32 %bf.lshr4, 255, !dbg !6799
  %idxprom6 = zext i32 %bf.clear5 to i64, !dbg !6799
  %arrayidx7 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom6, !dbg !6799
  %7 = load i8, i8* %arrayidx7, align 1, !dbg !6799
  %conv8 = zext i8 %7 to i32, !dbg !6799
  %cmp9 = icmp eq i32 %conv8, 9, !dbg !6799
  br i1 %cmp9, label %land.lhs.true, label %lor.lhs.false11, !dbg !6799

lor.lhs.false11:                                  ; preds = %lor.lhs.false
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x12 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 11, !dbg !6799
  %9 = load %struct.rtx_def*, %struct.rtx_def** %x12, align 8, !dbg !6799
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !6799
  %bf.load13 = load i32, i32* %10, align 8, !dbg !6799
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !6799
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !6799
  %idxprom16 = zext i32 %bf.clear15 to i64, !dbg !6799
  %arrayidx17 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom16, !dbg !6799
  %11 = load i8, i8* %arrayidx17, align 1, !dbg !6799
  %conv18 = zext i8 %11 to i32, !dbg !6799
  %cmp19 = icmp eq i32 %conv18, 11, !dbg !6799
  br i1 %cmp19, label %land.lhs.true, label %lor.lhs.false21, !dbg !6799

lor.lhs.false21:                                  ; preds = %lor.lhs.false11
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x22 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 11, !dbg !6799
  %13 = load %struct.rtx_def*, %struct.rtx_def** %x22, align 8, !dbg !6799
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !6799
  %bf.load23 = load i32, i32* %14, align 8, !dbg !6799
  %bf.lshr24 = lshr i32 %bf.load23, 16, !dbg !6799
  %bf.clear25 = and i32 %bf.lshr24, 255, !dbg !6799
  %idxprom26 = zext i32 %bf.clear25 to i64, !dbg !6799
  %arrayidx27 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom26, !dbg !6799
  %15 = load i8, i8* %arrayidx27, align 1, !dbg !6799
  %conv28 = zext i8 %15 to i32, !dbg !6799
  %cmp29 = icmp eq i32 %conv28, 17, !dbg !6799
  br i1 %cmp29, label %land.lhs.true, label %if.end, !dbg !6799

land.lhs.true:                                    ; preds = %lor.lhs.false21, %lor.lhs.false11, %lor.lhs.false, %entry
  %16 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x31 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %16, i32 0, i32 11, !dbg !6799
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x31, align 8, !dbg !6799
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !6799
  %bf.load32 = load i32, i32* %18, align 8, !dbg !6799
  %bf.lshr33 = lshr i32 %bf.load32, 16, !dbg !6799
  %bf.clear34 = and i32 %bf.lshr33, 255, !dbg !6799
  %idxprom35 = zext i32 %bf.clear34 to i64, !dbg !6799
  %arrayidx36 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom35, !dbg !6799
  %19 = load i8, i8* %arrayidx36, align 1, !dbg !6799
  %conv37 = zext i8 %19 to i32, !dbg !6799
  %cmp38 = icmp eq i32 %conv37, 8, !dbg !6799
  br i1 %cmp38, label %cond.true, label %lor.lhs.false40, !dbg !6799

lor.lhs.false40:                                  ; preds = %land.lhs.true
  %20 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x41 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %20, i32 0, i32 11, !dbg !6799
  %21 = load %struct.rtx_def*, %struct.rtx_def** %x41, align 8, !dbg !6799
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !6799
  %bf.load42 = load i32, i32* %22, align 8, !dbg !6799
  %bf.lshr43 = lshr i32 %bf.load42, 16, !dbg !6799
  %bf.clear44 = and i32 %bf.lshr43, 255, !dbg !6799
  %idxprom45 = zext i32 %bf.clear44 to i64, !dbg !6799
  %arrayidx46 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom45, !dbg !6799
  %23 = load i8, i8* %arrayidx46, align 1, !dbg !6799
  %conv47 = zext i8 %23 to i32, !dbg !6799
  %cmp48 = icmp eq i32 %conv47, 9, !dbg !6799
  br i1 %cmp48, label %cond.true, label %cond.false, !dbg !6799

cond.true:                                        ; preds = %lor.lhs.false40, %land.lhs.true
  %24 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x50 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %24, i32 0, i32 11, !dbg !6799
  %25 = load %struct.rtx_def*, %struct.rtx_def** %x50, align 8, !dbg !6799
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !6799
  %bf.load51 = load i32, i32* %26, align 8, !dbg !6799
  %bf.lshr52 = lshr i32 %bf.load51, 16, !dbg !6799
  %bf.clear53 = and i32 %bf.lshr52, 255, !dbg !6799
  br label %cond.end, !dbg !6799

cond.false:                                       ; preds = %lor.lhs.false40
  %27 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x54 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %27, i32 0, i32 11, !dbg !6799
  %28 = load %struct.rtx_def*, %struct.rtx_def** %x54, align 8, !dbg !6799
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !6799
  %bf.load55 = load i32, i32* %29, align 8, !dbg !6799
  %bf.lshr56 = lshr i32 %bf.load55, 16, !dbg !6799
  %bf.clear57 = and i32 %bf.lshr56, 255, !dbg !6799
  %idxprom58 = zext i32 %bf.clear57 to i64, !dbg !6799
  %arrayidx59 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom58, !dbg !6799
  %30 = load i8, i8* %arrayidx59, align 1, !dbg !6799
  %conv60 = zext i8 %30 to i32, !dbg !6799
  br label %cond.end, !dbg !6799

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond61 = phi i32 [ %bf.clear53, %cond.true ], [ %conv60, %cond.false ], !dbg !6799
  %idxprom62 = zext i32 %cond61 to i64, !dbg !6799
  %arrayidx63 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom62, !dbg !6799
  %31 = load i8, i8* %arrayidx63, align 1, !dbg !6799
  %conv64 = zext i8 %31 to i32, !dbg !6799
  %cmp65 = icmp eq i32 %conv64, 9, !dbg !6799
  br i1 %cmp65, label %cond.true67, label %cond.false102, !dbg !6799

cond.true67:                                      ; preds = %cond.end
  %32 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x68 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %32, i32 0, i32 11, !dbg !6799
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x68, align 8, !dbg !6799
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !6799
  %bf.load69 = load i32, i32* %34, align 8, !dbg !6799
  %bf.lshr70 = lshr i32 %bf.load69, 16, !dbg !6799
  %bf.clear71 = and i32 %bf.lshr70, 255, !dbg !6799
  %idxprom72 = zext i32 %bf.clear71 to i64, !dbg !6799
  %arrayidx73 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom72, !dbg !6799
  %35 = load i8, i8* %arrayidx73, align 1, !dbg !6799
  %conv74 = zext i8 %35 to i32, !dbg !6799
  %cmp75 = icmp eq i32 %conv74, 8, !dbg !6799
  br i1 %cmp75, label %cond.true87, label %lor.lhs.false77, !dbg !6799

lor.lhs.false77:                                  ; preds = %cond.true67
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x78 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 11, !dbg !6799
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x78, align 8, !dbg !6799
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !6799
  %bf.load79 = load i32, i32* %38, align 8, !dbg !6799
  %bf.lshr80 = lshr i32 %bf.load79, 16, !dbg !6799
  %bf.clear81 = and i32 %bf.lshr80, 255, !dbg !6799
  %idxprom82 = zext i32 %bf.clear81 to i64, !dbg !6799
  %arrayidx83 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom82, !dbg !6799
  %39 = load i8, i8* %arrayidx83, align 1, !dbg !6799
  %conv84 = zext i8 %39 to i32, !dbg !6799
  %cmp85 = icmp eq i32 %conv84, 9, !dbg !6799
  br i1 %cmp85, label %cond.true87, label %cond.false92, !dbg !6799

cond.true87:                                      ; preds = %lor.lhs.false77, %cond.true67
  %40 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x88 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %40, i32 0, i32 11, !dbg !6799
  %41 = load %struct.rtx_def*, %struct.rtx_def** %x88, align 8, !dbg !6799
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !6799
  %bf.load89 = load i32, i32* %42, align 8, !dbg !6799
  %bf.lshr90 = lshr i32 %bf.load89, 16, !dbg !6799
  %bf.clear91 = and i32 %bf.lshr90, 255, !dbg !6799
  br label %cond.end100, !dbg !6799

cond.false92:                                     ; preds = %lor.lhs.false77
  %43 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x93 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %43, i32 0, i32 11, !dbg !6799
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x93, align 8, !dbg !6799
  %45 = bitcast %struct.rtx_def* %44 to i32*, !dbg !6799
  %bf.load94 = load i32, i32* %45, align 8, !dbg !6799
  %bf.lshr95 = lshr i32 %bf.load94, 16, !dbg !6799
  %bf.clear96 = and i32 %bf.lshr95, 255, !dbg !6799
  %idxprom97 = zext i32 %bf.clear96 to i64, !dbg !6799
  %arrayidx98 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom97, !dbg !6799
  %46 = load i8, i8* %arrayidx98, align 1, !dbg !6799
  %conv99 = zext i8 %46 to i32, !dbg !6799
  br label %cond.end100, !dbg !6799

cond.end100:                                      ; preds = %cond.false92, %cond.true87
  %cond101 = phi i32 [ %bf.clear91, %cond.true87 ], [ %conv99, %cond.false92 ], !dbg !6799
  %sub = sub i32 %cond101, 42, !dbg !6799
  %add = add i32 %sub, 4, !dbg !6799
  br label %cond.end138, !dbg !6799

cond.false102:                                    ; preds = %cond.end
  %47 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x103 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %47, i32 0, i32 11, !dbg !6799
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x103, align 8, !dbg !6799
  %49 = bitcast %struct.rtx_def* %48 to i32*, !dbg !6799
  %bf.load104 = load i32, i32* %49, align 8, !dbg !6799
  %bf.lshr105 = lshr i32 %bf.load104, 16, !dbg !6799
  %bf.clear106 = and i32 %bf.lshr105, 255, !dbg !6799
  %idxprom107 = zext i32 %bf.clear106 to i64, !dbg !6799
  %arrayidx108 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom107, !dbg !6799
  %50 = load i8, i8* %arrayidx108, align 1, !dbg !6799
  %conv109 = zext i8 %50 to i32, !dbg !6799
  %cmp110 = icmp eq i32 %conv109, 8, !dbg !6799
  br i1 %cmp110, label %cond.true122, label %lor.lhs.false112, !dbg !6799

lor.lhs.false112:                                 ; preds = %cond.false102
  %51 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x113 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %51, i32 0, i32 11, !dbg !6799
  %52 = load %struct.rtx_def*, %struct.rtx_def** %x113, align 8, !dbg !6799
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !6799
  %bf.load114 = load i32, i32* %53, align 8, !dbg !6799
  %bf.lshr115 = lshr i32 %bf.load114, 16, !dbg !6799
  %bf.clear116 = and i32 %bf.lshr115, 255, !dbg !6799
  %idxprom117 = zext i32 %bf.clear116 to i64, !dbg !6799
  %arrayidx118 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom117, !dbg !6799
  %54 = load i8, i8* %arrayidx118, align 1, !dbg !6799
  %conv119 = zext i8 %54 to i32, !dbg !6799
  %cmp120 = icmp eq i32 %conv119, 9, !dbg !6799
  br i1 %cmp120, label %cond.true122, label %cond.false127, !dbg !6799

cond.true122:                                     ; preds = %lor.lhs.false112, %cond.false102
  %55 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x123 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %55, i32 0, i32 11, !dbg !6799
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x123, align 8, !dbg !6799
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !6799
  %bf.load124 = load i32, i32* %57, align 8, !dbg !6799
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !6799
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !6799
  br label %cond.end135, !dbg !6799

cond.false127:                                    ; preds = %lor.lhs.false112
  %58 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6799
  %x128 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %58, i32 0, i32 11, !dbg !6799
  %59 = load %struct.rtx_def*, %struct.rtx_def** %x128, align 8, !dbg !6799
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !6799
  %bf.load129 = load i32, i32* %60, align 8, !dbg !6799
  %bf.lshr130 = lshr i32 %bf.load129, 16, !dbg !6799
  %bf.clear131 = and i32 %bf.lshr130, 255, !dbg !6799
  %idxprom132 = zext i32 %bf.clear131 to i64, !dbg !6799
  %arrayidx133 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_inner, i64 0, i64 %idxprom132, !dbg !6799
  %61 = load i8, i8* %arrayidx133, align 1, !dbg !6799
  %conv134 = zext i8 %61 to i32, !dbg !6799
  br label %cond.end135, !dbg !6799

cond.end135:                                      ; preds = %cond.false127, %cond.true122
  %cond136 = phi i32 [ %bf.clear126, %cond.true122 ], [ %conv134, %cond.false127 ], !dbg !6799
  %sub137 = sub i32 %cond136, 38, !dbg !6799
  br label %cond.end138, !dbg !6799

cond.end138:                                      ; preds = %cond.end135, %cond.end100
  %cond139 = phi i32 [ %add, %cond.end100 ], [ %sub137, %cond.end135 ], !dbg !6799
  %idxprom140 = zext i32 %cond139 to i64, !dbg !6799
  %arrayidx141 = getelementptr inbounds [7 x %struct.real_format*], [7 x %struct.real_format*]* @real_format_for_mode, i64 0, i64 %idxprom140, !dbg !6799
  %62 = load %struct.real_format*, %struct.real_format** %arrayidx141, align 8, !dbg !6799
  %has_signed_zero = getelementptr inbounds %struct.real_format, %struct.real_format* %62, i32 0, i32 14, !dbg !6799
  %63 = load i8, i8* %has_signed_zero, align 1, !dbg !6799
  %conv142 = zext i8 %63 to i32, !dbg !6799
  %tobool = icmp ne i32 %conv142, 0, !dbg !6799
  br i1 %tobool, label %land.lhs.true143, label %if.end, !dbg !6799

land.lhs.true143:                                 ; preds = %cond.end138
  %64 = load i32, i32* @flag_signed_zeros, align 4, !dbg !6799
  %tobool144 = icmp ne i32 %64, 0, !dbg !6799
  br i1 %tobool144, label %if.then, label %if.end, !dbg !6801

if.then:                                          ; preds = %land.lhs.true143
  store i32 0, i32* %retval, align 4, !dbg !6802
  br label %return, !dbg !6802

if.end:                                           ; preds = %land.lhs.true143, %cond.end138, %lor.lhs.false21
  %65 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6803
  %a145 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %65, i32 0, i32 9, !dbg !6804
  %66 = load %struct.rtx_def*, %struct.rtx_def** %a145, align 8, !dbg !6804
  store %struct.rtx_def* %66, %struct.rtx_def** %a, align 8, !dbg !6805
  %67 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6806
  %b146 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %67, i32 0, i32 10, !dbg !6807
  %68 = load %struct.rtx_def*, %struct.rtx_def** %b146, align 8, !dbg !6807
  store %struct.rtx_def* %68, %struct.rtx_def** %b, align 8, !dbg !6808
  %69 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6809
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !6809
  %bf.load147 = load i32, i32* %70, align 8, !dbg !6809
  %bf.clear148 = and i32 %bf.load147, 65535, !dbg !6809
  %cmp149 = icmp eq i32 %bf.clear148, 51, !dbg !6811
  br i1 %cmp149, label %land.lhs.true151, label %if.else, !dbg !6812

land.lhs.true151:                                 ; preds = %if.end
  %71 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6813
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !6813
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !6813
  %arrayidx152 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !6813
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx152 to %struct.rtx_def**, !dbg !6813
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !6813
  %73 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6814
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %72, %struct.rtx_def* %73), !dbg !6815
  %tobool153 = icmp ne i32 %call, 0, !dbg !6815
  br i1 %tobool153, label %if.then154, label %if.else, !dbg !6816

if.then154:                                       ; preds = %land.lhs.true151
  store i32 0, i32* %negate, align 4, !dbg !6817
  br label %if.end197, !dbg !6818

if.else:                                          ; preds = %land.lhs.true151, %if.end
  %74 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6819
  %75 = bitcast %struct.rtx_def* %74 to i32*, !dbg !6819
  %bf.load155 = load i32, i32* %75, align 8, !dbg !6819
  %bf.clear156 = and i32 %bf.load155, 65535, !dbg !6819
  %cmp157 = icmp eq i32 %bf.clear156, 51, !dbg !6821
  br i1 %cmp157, label %land.lhs.true159, label %if.else167, !dbg !6822

land.lhs.true159:                                 ; preds = %if.else
  %76 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6823
  %u160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !6823
  %fld161 = bitcast %union.u* %u160 to [1 x %union.rtunion_def]*, !dbg !6823
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i64 0, i64 0, !dbg !6823
  %rt_rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**, !dbg !6823
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx163, align 8, !dbg !6823
  %78 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6824
  %call164 = call i32 @rtx_equal_p(%struct.rtx_def* %77, %struct.rtx_def* %78), !dbg !6825
  %tobool165 = icmp ne i32 %call164, 0, !dbg !6825
  br i1 %tobool165, label %if.then166, label %if.else167, !dbg !6826

if.then166:                                       ; preds = %land.lhs.true159
  %79 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6827
  store %struct.rtx_def* %79, %struct.rtx_def** %c, align 8, !dbg !6829
  %80 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6830
  store %struct.rtx_def* %80, %struct.rtx_def** %a, align 8, !dbg !6831
  %81 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6832
  store %struct.rtx_def* %81, %struct.rtx_def** %b, align 8, !dbg !6833
  store i32 1, i32* %negate, align 4, !dbg !6834
  br label %if.end196, !dbg !6835

if.else167:                                       ; preds = %land.lhs.true159, %if.else
  %82 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6836
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !6836
  %bf.load168 = load i32, i32* %83, align 8, !dbg !6836
  %bf.clear169 = and i32 %bf.load168, 65535, !dbg !6836
  %cmp170 = icmp eq i32 %bf.clear169, 64, !dbg !6838
  br i1 %cmp170, label %land.lhs.true172, label %if.else180, !dbg !6839

land.lhs.true172:                                 ; preds = %if.else167
  %84 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6840
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %84, i32 0, i32 1, !dbg !6840
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !6840
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 0, !dbg !6840
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !6840
  %85 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !6840
  %86 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6841
  %call177 = call i32 @rtx_equal_p(%struct.rtx_def* %85, %struct.rtx_def* %86), !dbg !6842
  %tobool178 = icmp ne i32 %call177, 0, !dbg !6842
  br i1 %tobool178, label %if.then179, label %if.else180, !dbg !6843

if.then179:                                       ; preds = %land.lhs.true172
  store i32 0, i32* %negate, align 4, !dbg !6844
  store i8 1, i8* %one_cmpl, align 1, !dbg !6846
  br label %if.end195, !dbg !6847

if.else180:                                       ; preds = %land.lhs.true172, %if.else167
  %87 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6848
  %88 = bitcast %struct.rtx_def* %87 to i32*, !dbg !6848
  %bf.load181 = load i32, i32* %88, align 8, !dbg !6848
  %bf.clear182 = and i32 %bf.load181, 65535, !dbg !6848
  %cmp183 = icmp eq i32 %bf.clear182, 64, !dbg !6850
  br i1 %cmp183, label %land.lhs.true185, label %if.else193, !dbg !6851

land.lhs.true185:                                 ; preds = %if.else180
  %89 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6852
  %u186 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %89, i32 0, i32 1, !dbg !6852
  %fld187 = bitcast %union.u* %u186 to [1 x %union.rtunion_def]*, !dbg !6852
  %arrayidx188 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld187, i64 0, i64 0, !dbg !6852
  %rt_rtx189 = bitcast %union.rtunion_def* %arrayidx188 to %struct.rtx_def**, !dbg !6852
  %90 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx189, align 8, !dbg !6852
  %91 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6853
  %call190 = call i32 @rtx_equal_p(%struct.rtx_def* %90, %struct.rtx_def* %91), !dbg !6854
  %tobool191 = icmp ne i32 %call190, 0, !dbg !6854
  br i1 %tobool191, label %if.then192, label %if.else193, !dbg !6855

if.then192:                                       ; preds = %land.lhs.true185
  %92 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !6856
  store %struct.rtx_def* %92, %struct.rtx_def** %c, align 8, !dbg !6858
  %93 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6859
  store %struct.rtx_def* %93, %struct.rtx_def** %a, align 8, !dbg !6860
  %94 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6861
  store %struct.rtx_def* %94, %struct.rtx_def** %b, align 8, !dbg !6862
  store i32 1, i32* %negate, align 4, !dbg !6863
  store i8 1, i8* %one_cmpl, align 1, !dbg !6864
  br label %if.end194, !dbg !6865

if.else193:                                       ; preds = %land.lhs.true185, %if.else180
  store i32 0, i32* %retval, align 4, !dbg !6866
  br label %return, !dbg !6866

if.end194:                                        ; preds = %if.then192
  br label %if.end195

if.end195:                                        ; preds = %if.end194, %if.then179
  br label %if.end196

if.end196:                                        ; preds = %if.end195, %if.then166
  br label %if.end197

if.end197:                                        ; preds = %if.end196, %if.then154
  %95 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6867
  %96 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6868
  %call198 = call %struct.rtx_def* @noce_get_alt_condition(%struct.noce_if_info* %95, %struct.rtx_def* %96, %struct.rtx_def** %earliest), !dbg !6869
  store %struct.rtx_def* %call198, %struct.rtx_def** %cond, align 8, !dbg !6870
  %97 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6871
  %tobool199 = icmp ne %struct.rtx_def* %97, null, !dbg !6871
  br i1 %tobool199, label %if.end201, label %if.then200, !dbg !6873

if.then200:                                       ; preds = %if.end197
  store i32 0, i32* %retval, align 4, !dbg !6874
  br label %return, !dbg !6874

if.end201:                                        ; preds = %if.end197
  %98 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6875
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %98, i32 0, i32 1, !dbg !6875
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !6875
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 0, !dbg !6875
  %rt_rtx205 = bitcast %union.rtunion_def* %arrayidx204 to %struct.rtx_def**, !dbg !6875
  %99 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx205, align 8, !dbg !6875
  %100 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6877
  %call206 = call i32 @rtx_equal_p(%struct.rtx_def* %99, %struct.rtx_def* %100), !dbg !6878
  %tobool207 = icmp ne i32 %call206, 0, !dbg !6878
  br i1 %tobool207, label %if.then208, label %if.else213, !dbg !6879

if.then208:                                       ; preds = %if.end201
  %101 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6880
  %u209 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %101, i32 0, i32 1, !dbg !6880
  %fld210 = bitcast %union.u* %u209 to [1 x %union.rtunion_def]*, !dbg !6880
  %arrayidx211 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld210, i64 0, i64 1, !dbg !6880
  %rt_rtx212 = bitcast %union.rtunion_def* %arrayidx211 to %struct.rtx_def**, !dbg !6880
  %102 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx212, align 8, !dbg !6880
  store %struct.rtx_def* %102, %struct.rtx_def** %c, align 8, !dbg !6881
  br label %if.end228, !dbg !6882

if.else213:                                       ; preds = %if.end201
  %103 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6883
  %u214 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %103, i32 0, i32 1, !dbg !6883
  %fld215 = bitcast %union.u* %u214 to [1 x %union.rtunion_def]*, !dbg !6883
  %arrayidx216 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld215, i64 0, i64 1, !dbg !6883
  %rt_rtx217 = bitcast %union.rtunion_def* %arrayidx216 to %struct.rtx_def**, !dbg !6883
  %104 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx217, align 8, !dbg !6883
  %105 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6885
  %call218 = call i32 @rtx_equal_p(%struct.rtx_def* %104, %struct.rtx_def* %105), !dbg !6886
  %tobool219 = icmp ne i32 %call218, 0, !dbg !6886
  br i1 %tobool219, label %if.then220, label %if.else226, !dbg !6887

if.then220:                                       ; preds = %if.else213
  %106 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6888
  %u221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !6888
  %fld222 = bitcast %union.u* %u221 to [1 x %union.rtunion_def]*, !dbg !6888
  %arrayidx223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld222, i64 0, i64 0, !dbg !6888
  %rt_rtx224 = bitcast %union.rtunion_def* %arrayidx223 to %struct.rtx_def**, !dbg !6888
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx224, align 8, !dbg !6888
  store %struct.rtx_def* %107, %struct.rtx_def** %c, align 8, !dbg !6890
  %108 = load i32, i32* %negate, align 4, !dbg !6891
  %tobool225 = icmp ne i32 %108, 0, !dbg !6892
  %lnot = xor i1 %tobool225, true, !dbg !6892
  %lnot.ext = zext i1 %lnot to i32, !dbg !6892
  store i32 %lnot.ext, i32* %negate, align 4, !dbg !6893
  br label %if.end227, !dbg !6894

if.else226:                                       ; preds = %if.else213
  store i32 0, i32* %retval, align 4, !dbg !6895
  br label %return, !dbg !6895

if.end227:                                        ; preds = %if.then220
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.then208
  %109 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6896
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !6896
  %bf.load229 = load i32, i32* %110, align 8, !dbg !6896
  %bf.clear230 = and i32 %bf.load229, 65535, !dbg !6896
  %cmp231 = icmp eq i32 %bf.clear230, 37, !dbg !6896
  br i1 %cmp231, label %if.then233, label %if.end315, !dbg !6898

if.then233:                                       ; preds = %if.end228
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !6899, metadata !DIExpression()), !dbg !6901
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !6902, metadata !DIExpression()), !dbg !6903
  %111 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !6904
  %call234 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %111), !dbg !6905
  store %struct.rtx_def* %call234, %struct.rtx_def** %insn, align 8, !dbg !6903
  %112 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6906
  %tobool235 = icmp ne %struct.rtx_def* %112, null, !dbg !6906
  br i1 %tobool235, label %land.lhs.true236, label %if.else313, !dbg !6908

land.lhs.true236:                                 ; preds = %if.then233
  %113 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6909
  %u237 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !6909
  %fld238 = bitcast %union.u* %u237 to [1 x %union.rtunion_def]*, !dbg !6909
  %arrayidx239 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld238, i64 0, i64 3, !dbg !6909
  %rt_bb = bitcast %union.rtunion_def* %arrayidx239 to %struct.basic_block_def**, !dbg !6909
  %114 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !6909
  %115 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !6910
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %115, i32 0, i32 1, !dbg !6910
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !6910
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 3, !dbg !6910
  %rt_bb243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.basic_block_def**, !dbg !6910
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb243, align 8, !dbg !6910
  %cmp244 = icmp eq %struct.basic_block_def* %114, %116, !dbg !6911
  br i1 %cmp244, label %land.lhs.true246, label %if.else313, !dbg !6912

land.lhs.true246:                                 ; preds = %land.lhs.true236
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !6913
  %bf.load247 = load i32, i32* %118, align 8, !dbg !6913
  %bf.clear248 = and i32 %bf.load247, 65535, !dbg !6913
  %cmp249 = icmp eq i32 %bf.clear248, 8, !dbg !6913
  br i1 %cmp249, label %cond.true266, label %lor.lhs.false251, !dbg !6913

lor.lhs.false251:                                 ; preds = %land.lhs.true246
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !6913
  %bf.load252 = load i32, i32* %120, align 8, !dbg !6913
  %bf.clear253 = and i32 %bf.load252, 65535, !dbg !6913
  %cmp254 = icmp eq i32 %bf.clear253, 7, !dbg !6913
  br i1 %cmp254, label %cond.true266, label %lor.lhs.false256, !dbg !6913

lor.lhs.false256:                                 ; preds = %lor.lhs.false251
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !6913
  %bf.load257 = load i32, i32* %122, align 8, !dbg !6913
  %bf.clear258 = and i32 %bf.load257, 65535, !dbg !6913
  %cmp259 = icmp eq i32 %bf.clear258, 9, !dbg !6913
  br i1 %cmp259, label %cond.true266, label %lor.lhs.false261, !dbg !6913

lor.lhs.false261:                                 ; preds = %lor.lhs.false256
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !6913
  %bf.load262 = load i32, i32* %124, align 8, !dbg !6913
  %bf.clear263 = and i32 %bf.load262, 65535, !dbg !6913
  %cmp264 = icmp eq i32 %bf.clear263, 10, !dbg !6913
  br i1 %cmp264, label %cond.true266, label %cond.false288, !dbg !6913

cond.true266:                                     ; preds = %lor.lhs.false261, %lor.lhs.false256, %lor.lhs.false251, %land.lhs.true246
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %u267 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !6913
  %fld268 = bitcast %union.u* %u267 to [1 x %union.rtunion_def]*, !dbg !6913
  %arrayidx269 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld268, i64 0, i64 5, !dbg !6913
  %rt_rtx270 = bitcast %union.rtunion_def* %arrayidx269 to %struct.rtx_def**, !dbg !6913
  %126 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx270, align 8, !dbg !6913
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !6913
  %bf.load271 = load i32, i32* %127, align 8, !dbg !6913
  %bf.clear272 = and i32 %bf.load271, 65535, !dbg !6913
  %cmp273 = icmp eq i32 %bf.clear272, 23, !dbg !6913
  br i1 %cmp273, label %cond.true275, label %cond.false280, !dbg !6913

cond.true275:                                     ; preds = %cond.true266
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %u276 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %128, i32 0, i32 1, !dbg !6913
  %fld277 = bitcast %union.u* %u276 to [1 x %union.rtunion_def]*, !dbg !6913
  %arrayidx278 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld277, i64 0, i64 5, !dbg !6913
  %rt_rtx279 = bitcast %union.rtunion_def* %arrayidx278 to %struct.rtx_def**, !dbg !6913
  %129 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx279, align 8, !dbg !6913
  br label %cond.end286, !dbg !6913

cond.false280:                                    ; preds = %cond.true266
  %130 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %131 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6913
  %u281 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %131, i32 0, i32 1, !dbg !6913
  %fld282 = bitcast %union.u* %u281 to [1 x %union.rtunion_def]*, !dbg !6913
  %arrayidx283 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld282, i64 0, i64 5, !dbg !6913
  %rt_rtx284 = bitcast %union.rtunion_def* %arrayidx283 to %struct.rtx_def**, !dbg !6913
  %132 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx284, align 8, !dbg !6913
  %call285 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %130, %struct.rtx_def* %132), !dbg !6913
  br label %cond.end286, !dbg !6913

cond.end286:                                      ; preds = %cond.false280, %cond.true275
  %cond287 = phi %struct.rtx_def* [ %129, %cond.true275 ], [ %call285, %cond.false280 ], !dbg !6913
  br label %cond.end289, !dbg !6913

cond.false288:                                    ; preds = %lor.lhs.false261
  br label %cond.end289, !dbg !6913

cond.end289:                                      ; preds = %cond.false288, %cond.end286
  %cond290 = phi %struct.rtx_def* [ %cond287, %cond.end286 ], [ null, %cond.false288 ], !dbg !6913
  store %struct.rtx_def* %cond290, %struct.rtx_def** %set, align 8, !dbg !6914
  %tobool291 = icmp ne %struct.rtx_def* %cond290, null, !dbg !6914
  br i1 %tobool291, label %land.lhs.true292, label %if.else313, !dbg !6915

land.lhs.true292:                                 ; preds = %cond.end289
  %133 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6916
  %u293 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %133, i32 0, i32 1, !dbg !6916
  %fld294 = bitcast %union.u* %u293 to [1 x %union.rtunion_def]*, !dbg !6916
  %arrayidx295 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld294, i64 0, i64 0, !dbg !6916
  %rt_rtx296 = bitcast %union.rtunion_def* %arrayidx295 to %struct.rtx_def**, !dbg !6916
  %134 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx296, align 8, !dbg !6916
  %135 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6917
  %call297 = call i32 @rtx_equal_p(%struct.rtx_def* %134, %struct.rtx_def* %135), !dbg !6918
  %tobool298 = icmp ne i32 %call297, 0, !dbg !6918
  br i1 %tobool298, label %if.then299, label %if.else313, !dbg !6919

if.then299:                                       ; preds = %land.lhs.true292
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !6920, metadata !DIExpression()), !dbg !6922
  %136 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !6923
  %call300 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %136), !dbg !6924
  store %struct.rtx_def* %call300, %struct.rtx_def** %note, align 8, !dbg !6922
  %137 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6925
  %tobool301 = icmp ne %struct.rtx_def* %137, null, !dbg !6925
  br i1 %tobool301, label %if.then302, label %if.else307, !dbg !6927

if.then302:                                       ; preds = %if.then299
  %138 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !6928
  %u303 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %138, i32 0, i32 1, !dbg !6928
  %fld304 = bitcast %union.u* %u303 to [1 x %union.rtunion_def]*, !dbg !6928
  %arrayidx305 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld304, i64 0, i64 0, !dbg !6928
  %rt_rtx306 = bitcast %union.rtunion_def* %arrayidx305 to %struct.rtx_def**, !dbg !6928
  %139 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx306, align 8, !dbg !6928
  store %struct.rtx_def* %139, %struct.rtx_def** %c, align 8, !dbg !6929
  br label %if.end312, !dbg !6930

if.else307:                                       ; preds = %if.then299
  %140 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !6931
  %u308 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !6931
  %fld309 = bitcast %union.u* %u308 to [1 x %union.rtunion_def]*, !dbg !6931
  %arrayidx310 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld309, i64 0, i64 1, !dbg !6931
  %rt_rtx311 = bitcast %union.rtunion_def* %arrayidx310 to %struct.rtx_def**, !dbg !6931
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx311, align 8, !dbg !6931
  store %struct.rtx_def* %141, %struct.rtx_def** %c, align 8, !dbg !6932
  br label %if.end312

if.end312:                                        ; preds = %if.else307, %if.then302
  br label %if.end314, !dbg !6933

if.else313:                                       ; preds = %land.lhs.true292, %cond.end289, %land.lhs.true236, %if.then233
  store i32 0, i32* %retval, align 4, !dbg !6934
  br label %return, !dbg !6934

if.end314:                                        ; preds = %if.end312
  br label %if.end315, !dbg !6935

if.end315:                                        ; preds = %if.end314, %if.end228
  %142 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6936
  %143 = bitcast %struct.rtx_def* %142 to i32*, !dbg !6936
  %bf.load316 = load i32, i32* %143, align 8, !dbg !6936
  %bf.clear317 = and i32 %bf.load316, 65535, !dbg !6936
  %cmp318 = icmp eq i32 %bf.clear317, 43, !dbg !6936
  br i1 %cmp318, label %land.lhs.true320, label %if.end344, !dbg !6938

land.lhs.true320:                                 ; preds = %if.end315
  %144 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6939
  %u321 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %144, i32 0, i32 1, !dbg !6939
  %fld322 = bitcast %union.u* %u321 to [1 x %union.rtunion_def]*, !dbg !6939
  %arrayidx323 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld322, i64 0, i64 0, !dbg !6939
  %rt_rtx324 = bitcast %union.rtunion_def* %arrayidx323 to %struct.rtx_def**, !dbg !6939
  %145 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx324, align 8, !dbg !6939
  %146 = bitcast %struct.rtx_def* %145 to i32*, !dbg !6939
  %bf.load325 = load i32, i32* %146, align 8, !dbg !6939
  %bf.clear326 = and i32 %bf.load325, 65535, !dbg !6939
  %cmp327 = icmp eq i32 %bf.clear326, 45, !dbg !6940
  br i1 %cmp327, label %land.lhs.true329, label %if.end344, !dbg !6941

land.lhs.true329:                                 ; preds = %land.lhs.true320
  %147 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6942
  %u330 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !6942
  %fld331 = bitcast %union.u* %u330 to [1 x %union.rtunion_def]*, !dbg !6942
  %arrayidx332 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld331, i64 0, i64 0, !dbg !6942
  %rt_rtx333 = bitcast %union.rtunion_def* %arrayidx332 to %struct.rtx_def**, !dbg !6942
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx333, align 8, !dbg !6942
  %149 = bitcast %struct.rtx_def* %148 to i32*, !dbg !6942
  %bf.load334 = load i32, i32* %149, align 8, !dbg !6942
  %bf.lshr335 = lshr i32 %bf.load334, 26, !dbg !6942
  %bf.clear336 = and i32 %bf.lshr335, 1, !dbg !6942
  %tobool337 = icmp ne i32 %bf.clear336, 0, !dbg !6942
  br i1 %tobool337, label %if.then338, label %if.end344, !dbg !6943

if.then338:                                       ; preds = %land.lhs.true329
  %150 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6944
  %u339 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %150, i32 0, i32 1, !dbg !6944
  %fld340 = bitcast %union.u* %u339 to [1 x %union.rtunion_def]*, !dbg !6944
  %arrayidx341 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld340, i64 0, i64 0, !dbg !6944
  %rt_rtx342 = bitcast %union.rtunion_def* %arrayidx341 to %struct.rtx_def**, !dbg !6944
  %151 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx342, align 8, !dbg !6944
  %call343 = call %struct.rtx_def* @get_pool_constant(%struct.rtx_def* %151), !dbg !6945
  store %struct.rtx_def* %call343, %struct.rtx_def** %c, align 8, !dbg !6946
  br label %if.end344, !dbg !6947

if.end344:                                        ; preds = %if.then338, %land.lhs.true329, %land.lhs.true320, %if.end315
  %152 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6948
  %153 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !6950
  %cmp345 = icmp eq %struct.rtx_def* %152, %153, !dbg !6951
  br i1 %cmp345, label %land.lhs.true347, label %if.else353, !dbg !6952

land.lhs.true347:                                 ; preds = %if.end344
  %154 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6953
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !6953
  %bf.load348 = load i32, i32* %155, align 8, !dbg !6953
  %bf.clear349 = and i32 %bf.load348, 65535, !dbg !6953
  %cmp350 = icmp eq i32 %bf.clear349, 83, !dbg !6954
  br i1 %cmp350, label %if.then352, label %if.else353, !dbg !6955

if.then352:                                       ; preds = %land.lhs.true347
  br label %if.end373, !dbg !6955

if.else353:                                       ; preds = %land.lhs.true347, %if.end344
  %156 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6956
  %157 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !6958
  %cmp354 = icmp eq %struct.rtx_def* %156, %157, !dbg !6959
  br i1 %cmp354, label %land.lhs.true356, label %if.else362, !dbg !6960

land.lhs.true356:                                 ; preds = %if.else353
  %158 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6961
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !6961
  %bf.load357 = load i32, i32* %159, align 8, !dbg !6961
  %bf.clear358 = and i32 %bf.load357, 65535, !dbg !6961
  %cmp359 = icmp eq i32 %bf.clear358, 85, !dbg !6962
  br i1 %cmp359, label %if.then361, label %if.else362, !dbg !6963

if.then361:                                       ; preds = %land.lhs.true356
  br label %if.end372, !dbg !6963

if.else362:                                       ; preds = %land.lhs.true356, %if.else353
  %160 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !6964
  %161 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6966
  %162 = bitcast %struct.rtx_def* %161 to i32*, !dbg !6966
  %bf.load363 = load i32, i32* %162, align 8, !dbg !6966
  %bf.lshr364 = lshr i32 %bf.load363, 16, !dbg !6966
  %bf.clear365 = and i32 %bf.lshr364, 255, !dbg !6966
  %idxprom366 = sext i32 %bf.clear365 to i64, !dbg !6966
  %arrayidx367 = getelementptr inbounds [87 x %struct.rtx_def*], [87 x %struct.rtx_def*]* getelementptr inbounds ([3 x [87 x %struct.rtx_def*]], [3 x [87 x %struct.rtx_def*]]* @const_tiny_rtx, i64 0, i64 0), i64 0, i64 %idxprom366, !dbg !6966
  %163 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx367, align 8, !dbg !6966
  %cmp368 = icmp ne %struct.rtx_def* %160, %163, !dbg !6967
  br i1 %cmp368, label %if.then370, label %if.end371, !dbg !6968

if.then370:                                       ; preds = %if.else362
  store i32 0, i32* %retval, align 4, !dbg !6969
  br label %return, !dbg !6969

if.end371:                                        ; preds = %if.else362
  br label %if.end372

if.end372:                                        ; preds = %if.end371, %if.then361
  br label %if.end373

if.end373:                                        ; preds = %if.end372, %if.then352
  %164 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !6970
  %165 = bitcast %struct.rtx_def* %164 to i32*, !dbg !6970
  %bf.load374 = load i32, i32* %165, align 8, !dbg !6970
  %bf.clear375 = and i32 %bf.load374, 65535, !dbg !6970
  switch i32 %bf.clear375, label %sw.default [
    i32 85, label %sw.bb
    i32 84, label %sw.bb
    i32 96, label %sw.bb
    i32 95, label %sw.bb
    i32 83, label %sw.bb379
    i32 82, label %sw.bb379
    i32 94, label %sw.bb379
    i32 93, label %sw.bb379
  ], !dbg !6971

sw.bb:                                            ; preds = %if.end373, %if.end373, %if.end373, %if.end373
  %166 = load i32, i32* %negate, align 4, !dbg !6972
  %tobool376 = icmp ne i32 %166, 0, !dbg !6974
  %lnot377 = xor i1 %tobool376, true, !dbg !6974
  %lnot.ext378 = zext i1 %lnot377 to i32, !dbg !6974
  store i32 %lnot.ext378, i32* %negate, align 4, !dbg !6975
  br label %sw.epilog, !dbg !6976

sw.bb379:                                         ; preds = %if.end373, %if.end373, %if.end373, %if.end373
  br label %sw.epilog, !dbg !6977

sw.default:                                       ; preds = %if.end373
  store i32 0, i32* %retval, align 4, !dbg !6978
  br label %return, !dbg !6978

sw.epilog:                                        ; preds = %sw.bb379, %sw.bb
  call void @start_sequence(), !dbg !6979
  %167 = load i8, i8* %one_cmpl, align 1, !dbg !6980
  %tobool380 = icmp ne i8 %167, 0, !dbg !6980
  br i1 %tobool380, label %if.then381, label %if.else388, !dbg !6982

if.then381:                                       ; preds = %sw.epilog
  %168 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6983
  %x382 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %168, i32 0, i32 11, !dbg !6983
  %169 = load %struct.rtx_def*, %struct.rtx_def** %x382, align 8, !dbg !6983
  %170 = bitcast %struct.rtx_def* %169 to i32*, !dbg !6983
  %bf.load383 = load i32, i32* %170, align 8, !dbg !6983
  %bf.lshr384 = lshr i32 %bf.load383, 16, !dbg !6983
  %bf.clear385 = and i32 %bf.lshr384, 255, !dbg !6983
  %171 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6984
  %172 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6985
  %x386 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %172, i32 0, i32 11, !dbg !6986
  %173 = load %struct.rtx_def*, %struct.rtx_def** %x386, align 8, !dbg !6986
  %call387 = call %struct.rtx_def* @expand_one_cmpl_abs_nojump(i32 %bf.clear385, %struct.rtx_def* %171, %struct.rtx_def* %173), !dbg !6987
  store %struct.rtx_def* %call387, %struct.rtx_def** %target, align 8, !dbg !6988
  br label %if.end395, !dbg !6989

if.else388:                                       ; preds = %sw.epilog
  %174 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6990
  %x389 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %174, i32 0, i32 11, !dbg !6990
  %175 = load %struct.rtx_def*, %struct.rtx_def** %x389, align 8, !dbg !6990
  %176 = bitcast %struct.rtx_def* %175 to i32*, !dbg !6990
  %bf.load390 = load i32, i32* %176, align 8, !dbg !6990
  %bf.lshr391 = lshr i32 %bf.load390, 16, !dbg !6990
  %bf.clear392 = and i32 %bf.lshr391, 255, !dbg !6990
  %177 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !6991
  %178 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !6992
  %x393 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %178, i32 0, i32 11, !dbg !6993
  %179 = load %struct.rtx_def*, %struct.rtx_def** %x393, align 8, !dbg !6993
  %call394 = call %struct.rtx_def* @expand_abs_nojump(i32 %bf.clear392, %struct.rtx_def* %177, %struct.rtx_def* %179, i32 1), !dbg !6994
  store %struct.rtx_def* %call394, %struct.rtx_def** %target, align 8, !dbg !6995
  br label %if.end395

if.end395:                                        ; preds = %if.else388, %if.then381
  %180 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !6996
  %tobool396 = icmp ne %struct.rtx_def* %180, null, !dbg !6996
  br i1 %tobool396, label %land.lhs.true397, label %if.end414, !dbg !6998

land.lhs.true397:                                 ; preds = %if.end395
  %181 = load i32, i32* %negate, align 4, !dbg !6999
  %tobool398 = icmp ne i32 %181, 0, !dbg !6999
  br i1 %tobool398, label %if.then399, label %if.end414, !dbg !7000

if.then399:                                       ; preds = %land.lhs.true397
  %182 = load i8, i8* %one_cmpl, align 1, !dbg !7001
  %tobool400 = icmp ne i8 %182, 0, !dbg !7001
  br i1 %tobool400, label %if.then401, label %if.else407, !dbg !7004

if.then401:                                       ; preds = %if.then399
  %183 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7005
  %184 = bitcast %struct.rtx_def* %183 to i32*, !dbg !7005
  %bf.load402 = load i32, i32* %184, align 8, !dbg !7005
  %bf.lshr403 = lshr i32 %bf.load402, 16, !dbg !7005
  %bf.clear404 = and i32 %bf.lshr403, 255, !dbg !7005
  %185 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7006
  %186 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7007
  %x405 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %186, i32 0, i32 11, !dbg !7008
  %187 = load %struct.rtx_def*, %struct.rtx_def** %x405, align 8, !dbg !7008
  %call406 = call %struct.rtx_def* @expand_simple_unop(i32 %bf.clear404, i32 64, %struct.rtx_def* %185, %struct.rtx_def* %187, i32 0), !dbg !7009
  store %struct.rtx_def* %call406, %struct.rtx_def** %target, align 8, !dbg !7010
  br label %if.end413, !dbg !7011

if.else407:                                       ; preds = %if.then399
  %188 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7012
  %189 = bitcast %struct.rtx_def* %188 to i32*, !dbg !7012
  %bf.load408 = load i32, i32* %189, align 8, !dbg !7012
  %bf.lshr409 = lshr i32 %bf.load408, 16, !dbg !7012
  %bf.clear410 = and i32 %bf.lshr409, 255, !dbg !7012
  %190 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7013
  %191 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7014
  %x411 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %191, i32 0, i32 11, !dbg !7015
  %192 = load %struct.rtx_def*, %struct.rtx_def** %x411, align 8, !dbg !7015
  %call412 = call %struct.rtx_def* @expand_simple_unop(i32 %bf.clear410, i32 51, %struct.rtx_def* %190, %struct.rtx_def* %192, i32 0), !dbg !7016
  store %struct.rtx_def* %call412, %struct.rtx_def** %target, align 8, !dbg !7017
  br label %if.end413

if.end413:                                        ; preds = %if.else407, %if.then401
  br label %if.end414, !dbg !7018

if.end414:                                        ; preds = %if.end413, %land.lhs.true397, %if.end395
  %193 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7019
  %tobool415 = icmp ne %struct.rtx_def* %193, null, !dbg !7019
  br i1 %tobool415, label %if.end417, label %if.then416, !dbg !7021

if.then416:                                       ; preds = %if.end414
  call void @end_sequence(), !dbg !7022
  store i32 0, i32* %retval, align 4, !dbg !7024
  br label %return, !dbg !7024

if.end417:                                        ; preds = %if.end414
  %194 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7025
  %195 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7027
  %x418 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %195, i32 0, i32 11, !dbg !7028
  %196 = load %struct.rtx_def*, %struct.rtx_def** %x418, align 8, !dbg !7028
  %cmp419 = icmp ne %struct.rtx_def* %194, %196, !dbg !7029
  br i1 %cmp419, label %if.then421, label %if.end423, !dbg !7030

if.then421:                                       ; preds = %if.end417
  %197 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7031
  %x422 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %197, i32 0, i32 11, !dbg !7032
  %198 = load %struct.rtx_def*, %struct.rtx_def** %x422, align 8, !dbg !7032
  %199 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7033
  call void @noce_emit_move_insn(%struct.rtx_def* %198, %struct.rtx_def* %199), !dbg !7034
  br label %if.end423, !dbg !7034

if.end423:                                        ; preds = %if.then421, %if.end417
  %200 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7035
  %call424 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %200), !dbg !7036
  store %struct.rtx_def* %call424, %struct.rtx_def** %seq, align 8, !dbg !7037
  %201 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7038
  %tobool425 = icmp ne %struct.rtx_def* %201, null, !dbg !7038
  br i1 %tobool425, label %if.end427, label %if.then426, !dbg !7040

if.then426:                                       ; preds = %if.end423
  store i32 0, i32* %retval, align 4, !dbg !7041
  br label %return, !dbg !7041

if.end427:                                        ; preds = %if.end423
  %202 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7042
  %203 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7043
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %203, i32 0, i32 4, !dbg !7044
  %204 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7044
  %205 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7045
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %205, i32 0, i32 7, !dbg !7045
  %206 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7045
  %u428 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1, !dbg !7045
  %fld429 = bitcast %union.u* %u428 to [1 x %union.rtunion_def]*, !dbg !7045
  %arrayidx430 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld429, i64 0, i64 4, !dbg !7045
  %rt_int = bitcast %union.rtunion_def* %arrayidx430 to i32*, !dbg !7045
  %207 = load i32, i32* %rt_int, align 8, !dbg !7045
  %call431 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %202, %struct.rtx_def* %204, i32 %207), !dbg !7046
  %208 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !7047
  %209 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7048
  %cond432 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %209, i32 0, i32 5, !dbg !7049
  store %struct.rtx_def* %208, %struct.rtx_def** %cond432, align 8, !dbg !7050
  %210 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !7051
  %211 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7052
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %211, i32 0, i32 6, !dbg !7053
  store %struct.rtx_def* %210, %struct.rtx_def** %cond_earliest, align 8, !dbg !7054
  store i32 1, i32* %retval, align 4, !dbg !7055
  br label %return, !dbg !7055

return:                                           ; preds = %if.end427, %if.then426, %if.then416, %sw.default, %if.then370, %if.else313, %if.else226, %if.then200, %if.else193, %if.then
  %212 = load i32, i32* %retval, align 4, !dbg !7056
  ret i32 %212, !dbg !7056
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_cmove(%struct.noce_if_info* %if_info) #0 !dbg !7057 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %code = alloca i32, align 4
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !7058, metadata !DIExpression()), !dbg !7059
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7060, metadata !DIExpression()), !dbg !7061
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !7062, metadata !DIExpression()), !dbg !7063
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7064, metadata !DIExpression()), !dbg !7065
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7066
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 9, !dbg !7066
  %1 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7066
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7066
  %bf.load = load i32, i32* %2, align 8, !dbg !7066
  %bf.clear = and i32 %bf.load, 65535, !dbg !7066
  %idxprom = sext i32 %bf.clear to i64, !dbg !7066
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !7066
  %3 = load i32, i32* %arrayidx, align 4, !dbg !7066
  %cmp = icmp eq i32 %3, 9, !dbg !7066
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false, !dbg !7068

lor.lhs.false:                                    ; preds = %entry
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7069
  %a1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 9, !dbg !7070
  %5 = load %struct.rtx_def*, %struct.rtx_def** %a1, align 8, !dbg !7070
  %call = call i32 @register_operand(%struct.rtx_def* %5, i32 0), !dbg !7071
  %tobool = icmp ne i32 %call, 0, !dbg !7071
  br i1 %tobool, label %land.lhs.true, label %if.end37, !dbg !7072

land.lhs.true:                                    ; preds = %lor.lhs.false, %entry
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7073
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 10, !dbg !7073
  %7 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7073
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7073
  %bf.load2 = load i32, i32* %8, align 8, !dbg !7073
  %bf.clear3 = and i32 %bf.load2, 65535, !dbg !7073
  %idxprom4 = sext i32 %bf.clear3 to i64, !dbg !7073
  %arrayidx5 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom4, !dbg !7073
  %9 = load i32, i32* %arrayidx5, align 4, !dbg !7073
  %cmp6 = icmp eq i32 %9, 9, !dbg !7073
  br i1 %cmp6, label %if.then, label %lor.lhs.false7, !dbg !7074

lor.lhs.false7:                                   ; preds = %land.lhs.true
  %10 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7075
  %b8 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %10, i32 0, i32 10, !dbg !7076
  %11 = load %struct.rtx_def*, %struct.rtx_def** %b8, align 8, !dbg !7076
  %call9 = call i32 @register_operand(%struct.rtx_def* %11, i32 0), !dbg !7077
  %tobool10 = icmp ne i32 %call9, 0, !dbg !7077
  br i1 %tobool10, label %if.then, label %if.end37, !dbg !7078

if.then:                                          ; preds = %lor.lhs.false7, %land.lhs.true
  call void @start_sequence(), !dbg !7079
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7081
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 5, !dbg !7081
  %13 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !7081
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !7081
  %bf.load11 = load i32, i32* %14, align 8, !dbg !7081
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !7081
  store i32 %bf.clear12, i32* %code, align 4, !dbg !7082
  %15 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7083
  %16 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7084
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %16, i32 0, i32 11, !dbg !7085
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7085
  %18 = load i32, i32* %code, align 4, !dbg !7086
  %19 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7087
  %cond13 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %19, i32 0, i32 5, !dbg !7087
  %20 = load %struct.rtx_def*, %struct.rtx_def** %cond13, align 8, !dbg !7087
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !7087
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7087
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7087
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !7087
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7087
  %22 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7088
  %cond15 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %22, i32 0, i32 5, !dbg !7088
  %23 = load %struct.rtx_def*, %struct.rtx_def** %cond15, align 8, !dbg !7088
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !7088
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7088
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 1, !dbg !7088
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !7088
  %24 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !7088
  %25 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7089
  %a20 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %25, i32 0, i32 9, !dbg !7090
  %26 = load %struct.rtx_def*, %struct.rtx_def** %a20, align 8, !dbg !7090
  %27 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7091
  %b21 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %27, i32 0, i32 10, !dbg !7092
  %28 = load %struct.rtx_def*, %struct.rtx_def** %b21, align 8, !dbg !7092
  %call22 = call %struct.rtx_def* @noce_emit_cmove(%struct.noce_if_info* %15, %struct.rtx_def* %17, i32 %18, %struct.rtx_def* %21, %struct.rtx_def* %24, %struct.rtx_def* %26, %struct.rtx_def* %28), !dbg !7093
  store %struct.rtx_def* %call22, %struct.rtx_def** %target, align 8, !dbg !7094
  %29 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7095
  %tobool23 = icmp ne %struct.rtx_def* %29, null, !dbg !7095
  br i1 %tobool23, label %if.then24, label %if.else, !dbg !7097

if.then24:                                        ; preds = %if.then
  %30 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7098
  %31 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7101
  %x25 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %31, i32 0, i32 11, !dbg !7102
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x25, align 8, !dbg !7102
  %cmp26 = icmp ne %struct.rtx_def* %30, %32, !dbg !7103
  br i1 %cmp26, label %if.then27, label %if.end, !dbg !7104

if.then27:                                        ; preds = %if.then24
  %33 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7105
  %x28 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %33, i32 0, i32 11, !dbg !7106
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x28, align 8, !dbg !7106
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7107
  call void @noce_emit_move_insn(%struct.rtx_def* %34, %struct.rtx_def* %35), !dbg !7108
  br label %if.end, !dbg !7108

if.end:                                           ; preds = %if.then27, %if.then24
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7109
  %call29 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %36), !dbg !7110
  store %struct.rtx_def* %call29, %struct.rtx_def** %seq, align 8, !dbg !7111
  %37 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7112
  %tobool30 = icmp ne %struct.rtx_def* %37, null, !dbg !7112
  br i1 %tobool30, label %if.end32, label %if.then31, !dbg !7114

if.then31:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7115
  br label %return, !dbg !7115

if.end32:                                         ; preds = %if.end
  %38 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7116
  %39 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7117
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %39, i32 0, i32 4, !dbg !7118
  %40 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7118
  %41 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7119
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %41, i32 0, i32 7, !dbg !7119
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7119
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !7119
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7119
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 4, !dbg !7119
  %rt_int = bitcast %union.rtunion_def* %arrayidx35 to i32*, !dbg !7119
  %43 = load i32, i32* %rt_int, align 8, !dbg !7119
  %call36 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %38, %struct.rtx_def* %40, i32 %43), !dbg !7120
  store i32 1, i32* %retval, align 4, !dbg !7121
  br label %return, !dbg !7121

if.else:                                          ; preds = %if.then
  call void @end_sequence(), !dbg !7122
  store i32 0, i32* %retval, align 4, !dbg !7124
  br label %return, !dbg !7124

if.end37:                                         ; preds = %lor.lhs.false7, %lor.lhs.false
  store i32 0, i32* %retval, align 4, !dbg !7125
  br label %return, !dbg !7125

return:                                           ; preds = %if.end37, %if.else, %if.end32, %if.then31
  %44 = load i32, i32* %retval, align 4, !dbg !7126
  ret i32 %44, !dbg !7126
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_store_flag_constants(%struct.noce_if_info* %if_info) #0 !dbg !7127 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %reversep = alloca i32, align 4
  %itrue = alloca i64, align 8
  %ifalse = alloca i64, align 8
  %diff = alloca i64, align 8
  %tmp = alloca i64, align 8
  %normalize = alloca i32, align 4
  %can_reverse = alloca i32, align 4
  %mode = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !7128, metadata !DIExpression()), !dbg !7129
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !7130, metadata !DIExpression()), !dbg !7131
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7132, metadata !DIExpression()), !dbg !7133
  call void @llvm.dbg.declare(metadata i32* %reversep, metadata !7134, metadata !DIExpression()), !dbg !7135
  call void @llvm.dbg.declare(metadata i64* %itrue, metadata !7136, metadata !DIExpression()), !dbg !7137
  call void @llvm.dbg.declare(metadata i64* %ifalse, metadata !7138, metadata !DIExpression()), !dbg !7139
  call void @llvm.dbg.declare(metadata i64* %diff, metadata !7140, metadata !DIExpression()), !dbg !7141
  call void @llvm.dbg.declare(metadata i64* %tmp, metadata !7142, metadata !DIExpression()), !dbg !7143
  call void @llvm.dbg.declare(metadata i32* %normalize, metadata !7144, metadata !DIExpression()), !dbg !7145
  call void @llvm.dbg.declare(metadata i32* %can_reverse, metadata !7146, metadata !DIExpression()), !dbg !7147
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !7148, metadata !DIExpression()), !dbg !7149
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7150
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 9, !dbg !7150
  %1 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7150
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7150
  %bf.load = load i32, i32* %2, align 8, !dbg !7150
  %bf.clear = and i32 %bf.load, 65535, !dbg !7150
  %cmp = icmp eq i32 %bf.clear, 30, !dbg !7150
  br i1 %cmp, label %land.lhs.true, label %if.end156, !dbg !7152

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7153
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %3, i32 0, i32 10, !dbg !7153
  %4 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7153
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !7153
  %bf.load1 = load i32, i32* %5, align 8, !dbg !7153
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !7153
  %cmp3 = icmp eq i32 %bf.clear2, 30, !dbg !7153
  br i1 %cmp3, label %if.then, label %if.end156, !dbg !7154

if.then:                                          ; preds = %land.lhs.true
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7155
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 11, !dbg !7155
  %7 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7155
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7155
  %bf.load4 = load i32, i32* %8, align 8, !dbg !7155
  %bf.lshr = lshr i32 %bf.load4, 16, !dbg !7155
  %bf.clear5 = and i32 %bf.lshr, 255, !dbg !7155
  store i32 %bf.clear5, i32* %mode, align 4, !dbg !7157
  %9 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7158
  %a6 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %9, i32 0, i32 9, !dbg !7158
  %10 = load %struct.rtx_def*, %struct.rtx_def** %a6, align 8, !dbg !7158
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !7158
  %hwint = bitcast %union.u* %u to [1 x i64]*, !dbg !7158
  %arrayidx = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7158
  %11 = load i64, i64* %arrayidx, align 8, !dbg !7158
  store i64 %11, i64* %ifalse, align 8, !dbg !7159
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7160
  %b7 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 10, !dbg !7160
  %13 = load %struct.rtx_def*, %struct.rtx_def** %b7, align 8, !dbg !7160
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7160
  %hwint9 = bitcast %union.u* %u8 to [1 x i64]*, !dbg !7160
  %arrayidx10 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint9, i64 0, i64 0, !dbg !7160
  %14 = load i64, i64* %arrayidx10, align 8, !dbg !7160
  store i64 %14, i64* %itrue, align 8, !dbg !7161
  %15 = load i64, i64* %itrue, align 8, !dbg !7162
  %16 = load i64, i64* %ifalse, align 8, !dbg !7164
  %sub = sub nsw i64 %15, %16, !dbg !7165
  %cmp11 = icmp sgt i64 %sub, 0, !dbg !7166
  %conv = zext i1 %cmp11 to i32, !dbg !7166
  %17 = load i64, i64* %ifalse, align 8, !dbg !7167
  %cmp12 = icmp slt i64 %17, 0, !dbg !7168
  %conv13 = zext i1 %cmp12 to i32, !dbg !7168
  %18 = load i64, i64* %itrue, align 8, !dbg !7169
  %cmp14 = icmp slt i64 %18, 0, !dbg !7170
  %conv15 = zext i1 %cmp14 to i32, !dbg !7170
  %cmp16 = icmp ne i32 %conv13, %conv15, !dbg !7171
  br i1 %cmp16, label %cond.true, label %cond.false, !dbg !7172

cond.true:                                        ; preds = %if.then
  %19 = load i64, i64* %ifalse, align 8, !dbg !7173
  %cmp18 = icmp slt i64 %19, 0, !dbg !7174
  %conv19 = zext i1 %cmp18 to i32, !dbg !7174
  br label %cond.end, !dbg !7172

cond.false:                                       ; preds = %if.then
  %20 = load i64, i64* %ifalse, align 8, !dbg !7175
  %21 = load i64, i64* %itrue, align 8, !dbg !7176
  %cmp20 = icmp slt i64 %20, %21, !dbg !7177
  %conv21 = zext i1 %cmp20 to i32, !dbg !7177
  br label %cond.end, !dbg !7172

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv19, %cond.true ], [ %conv21, %cond.false ], !dbg !7172
  %cmp22 = icmp ne i32 %conv, %cond, !dbg !7178
  br i1 %cmp22, label %if.then24, label %if.end, !dbg !7179

if.then24:                                        ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !7180
  br label %return, !dbg !7180

if.end:                                           ; preds = %cond.end
  %22 = load i64, i64* %itrue, align 8, !dbg !7181
  %23 = load i64, i64* %ifalse, align 8, !dbg !7182
  %sub25 = sub nsw i64 %22, %23, !dbg !7183
  %24 = load i32, i32* %mode, align 4, !dbg !7184
  %call = call i64 @trunc_int_for_mode(i64 %sub25, i32 %24), !dbg !7185
  store i64 %call, i64* %diff, align 8, !dbg !7186
  %25 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7187
  %cond26 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %25, i32 0, i32 5, !dbg !7188
  %26 = load %struct.rtx_def*, %struct.rtx_def** %cond26, align 8, !dbg !7188
  %27 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7189
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %27, i32 0, i32 4, !dbg !7190
  %28 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7190
  %call27 = call i32 @reversed_comparison_code(%struct.rtx_def* %26, %struct.rtx_def* %28), !dbg !7191
  %cmp28 = icmp ne i32 %call27, 0, !dbg !7192
  %conv29 = zext i1 %cmp28 to i32, !dbg !7192
  store i32 %conv29, i32* %can_reverse, align 4, !dbg !7193
  store i32 0, i32* %reversep, align 4, !dbg !7194
  %29 = load i64, i64* %diff, align 8, !dbg !7195
  %cmp30 = icmp eq i64 %29, 1, !dbg !7197
  br i1 %cmp30, label %if.then34, label %lor.lhs.false, !dbg !7198

lor.lhs.false:                                    ; preds = %if.end
  %30 = load i64, i64* %diff, align 8, !dbg !7199
  %cmp32 = icmp eq i64 %30, -1, !dbg !7200
  br i1 %cmp32, label %if.then34, label %if.else, !dbg !7201

if.then34:                                        ; preds = %lor.lhs.false, %if.end
  store i32 0, i32* %normalize, align 4, !dbg !7202
  br label %if.end84, !dbg !7203

if.else:                                          ; preds = %lor.lhs.false
  %31 = load i64, i64* %ifalse, align 8, !dbg !7204
  %cmp35 = icmp eq i64 %31, 0, !dbg !7206
  br i1 %cmp35, label %land.lhs.true37, label %if.else42, !dbg !7207

land.lhs.true37:                                  ; preds = %if.else
  %32 = load i64, i64* %itrue, align 8, !dbg !7208
  %call38 = call i32 @exact_log2(i64 %32), !dbg !7209
  %cmp39 = icmp sge i32 %call38, 0, !dbg !7210
  br i1 %cmp39, label %if.then41, label %if.else42, !dbg !7211

if.then41:                                        ; preds = %land.lhs.true37
  store i32 1, i32* %normalize, align 4, !dbg !7212
  br label %if.end83, !dbg !7213

if.else42:                                        ; preds = %land.lhs.true37, %if.else
  %33 = load i64, i64* %itrue, align 8, !dbg !7214
  %cmp43 = icmp eq i64 %33, 0, !dbg !7216
  br i1 %cmp43, label %land.lhs.true45, label %if.else51, !dbg !7217

land.lhs.true45:                                  ; preds = %if.else42
  %34 = load i64, i64* %ifalse, align 8, !dbg !7218
  %call46 = call i32 @exact_log2(i64 %34), !dbg !7219
  %cmp47 = icmp sge i32 %call46, 0, !dbg !7220
  br i1 %cmp47, label %land.lhs.true49, label %if.else51, !dbg !7221

land.lhs.true49:                                  ; preds = %land.lhs.true45
  %35 = load i32, i32* %can_reverse, align 4, !dbg !7222
  %tobool = icmp ne i32 %35, 0, !dbg !7222
  br i1 %tobool, label %if.then50, label %if.else51, !dbg !7223

if.then50:                                        ; preds = %land.lhs.true49
  store i32 1, i32* %normalize, align 4, !dbg !7224
  store i32 1, i32* %reversep, align 4, !dbg !7225
  br label %if.end82, !dbg !7226

if.else51:                                        ; preds = %land.lhs.true49, %land.lhs.true45, %if.else42
  %36 = load i64, i64* %itrue, align 8, !dbg !7227
  %cmp52 = icmp eq i64 %36, -1, !dbg !7229
  br i1 %cmp52, label %land.lhs.true54, label %if.else58, !dbg !7230

land.lhs.true54:                                  ; preds = %if.else51
  %37 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7231
  %branch_cost = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %37, i32 0, i32 13, !dbg !7232
  %38 = load i32, i32* %branch_cost, align 4, !dbg !7232
  %cmp55 = icmp sge i32 %38, 2, !dbg !7233
  br i1 %cmp55, label %if.then57, label %if.else58, !dbg !7234

if.then57:                                        ; preds = %land.lhs.true54
  store i32 -1, i32* %normalize, align 4, !dbg !7235
  br label %if.end81, !dbg !7236

if.else58:                                        ; preds = %land.lhs.true54, %if.else51
  %39 = load i64, i64* %ifalse, align 8, !dbg !7237
  %cmp59 = icmp eq i64 %39, -1, !dbg !7239
  br i1 %cmp59, label %land.lhs.true61, label %if.else68, !dbg !7240

land.lhs.true61:                                  ; preds = %if.else58
  %40 = load i32, i32* %can_reverse, align 4, !dbg !7241
  %tobool62 = icmp ne i32 %40, 0, !dbg !7241
  br i1 %tobool62, label %land.lhs.true63, label %if.else68, !dbg !7242

land.lhs.true63:                                  ; preds = %land.lhs.true61
  %41 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7243
  %branch_cost64 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %41, i32 0, i32 13, !dbg !7244
  %42 = load i32, i32* %branch_cost64, align 4, !dbg !7244
  %cmp65 = icmp sge i32 %42, 2, !dbg !7245
  br i1 %cmp65, label %if.then67, label %if.else68, !dbg !7246

if.then67:                                        ; preds = %land.lhs.true63
  store i32 -1, i32* %normalize, align 4, !dbg !7247
  store i32 1, i32* %reversep, align 4, !dbg !7248
  br label %if.end80, !dbg !7249

if.else68:                                        ; preds = %land.lhs.true63, %land.lhs.true61, %if.else58
  %43 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7250
  %branch_cost69 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %43, i32 0, i32 13, !dbg !7252
  %44 = load i32, i32* %branch_cost69, align 4, !dbg !7252
  %cmp70 = icmp sge i32 %44, 2, !dbg !7253
  br i1 %cmp70, label %land.lhs.true72, label %lor.lhs.false73, !dbg !7254

land.lhs.true72:                                  ; preds = %if.else68
  br i1 false, label %if.then77, label %lor.lhs.false73, !dbg !7255

lor.lhs.false73:                                  ; preds = %land.lhs.true72, %if.else68
  %45 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7256
  %branch_cost74 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %45, i32 0, i32 13, !dbg !7257
  %46 = load i32, i32* %branch_cost74, align 4, !dbg !7257
  %cmp75 = icmp sge i32 %46, 3, !dbg !7258
  br i1 %cmp75, label %if.then77, label %if.else78, !dbg !7259

if.then77:                                        ; preds = %lor.lhs.false73, %land.lhs.true72
  store i32 -1, i32* %normalize, align 4, !dbg !7260
  br label %if.end79, !dbg !7261

if.else78:                                        ; preds = %lor.lhs.false73
  store i32 0, i32* %retval, align 4, !dbg !7262
  br label %return, !dbg !7262

if.end79:                                         ; preds = %if.then77
  br label %if.end80

if.end80:                                         ; preds = %if.end79, %if.then67
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then57
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.then50
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then41
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.then34
  %47 = load i32, i32* %reversep, align 4, !dbg !7263
  %tobool85 = icmp ne i32 %47, 0, !dbg !7263
  br i1 %tobool85, label %if.then86, label %if.end89, !dbg !7265

if.then86:                                        ; preds = %if.end84
  %48 = load i64, i64* %itrue, align 8, !dbg !7266
  store i64 %48, i64* %tmp, align 8, !dbg !7268
  %49 = load i64, i64* %ifalse, align 8, !dbg !7269
  store i64 %49, i64* %itrue, align 8, !dbg !7270
  %50 = load i64, i64* %tmp, align 8, !dbg !7271
  store i64 %50, i64* %ifalse, align 8, !dbg !7272
  %51 = load i64, i64* %diff, align 8, !dbg !7273
  %sub87 = sub nsw i64 0, %51, !dbg !7274
  %52 = load i32, i32* %mode, align 4, !dbg !7275
  %call88 = call i64 @trunc_int_for_mode(i64 %sub87, i32 %52), !dbg !7276
  store i64 %call88, i64* %diff, align 8, !dbg !7277
  br label %if.end89, !dbg !7278

if.end89:                                         ; preds = %if.then86, %if.end84
  call void @start_sequence(), !dbg !7279
  %53 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7280
  %54 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7281
  %x90 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %54, i32 0, i32 11, !dbg !7282
  %55 = load %struct.rtx_def*, %struct.rtx_def** %x90, align 8, !dbg !7282
  %56 = load i32, i32* %reversep, align 4, !dbg !7283
  %57 = load i32, i32* %normalize, align 4, !dbg !7284
  %call91 = call %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* %53, %struct.rtx_def* %55, i32 %56, i32 %57), !dbg !7285
  store %struct.rtx_def* %call91, %struct.rtx_def** %target, align 8, !dbg !7286
  %58 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7287
  %tobool92 = icmp ne %struct.rtx_def* %58, null, !dbg !7287
  br i1 %tobool92, label %if.end94, label %if.then93, !dbg !7289

if.then93:                                        ; preds = %if.end89
  call void @end_sequence(), !dbg !7290
  store i32 0, i32* %retval, align 4, !dbg !7292
  br label %return, !dbg !7292

if.end94:                                         ; preds = %if.end89
  %59 = load i64, i64* %diff, align 8, !dbg !7293
  %cmp95 = icmp eq i64 %59, 1, !dbg !7295
  br i1 %cmp95, label %if.then100, label %lor.lhs.false97, !dbg !7296

lor.lhs.false97:                                  ; preds = %if.end94
  %60 = load i64, i64* %diff, align 8, !dbg !7297
  %cmp98 = icmp eq i64 %60, -1, !dbg !7298
  br i1 %cmp98, label %if.then100, label %if.else107, !dbg !7299

if.then100:                                       ; preds = %lor.lhs.false97, %if.end94
  %61 = load i32, i32* %mode, align 4, !dbg !7300
  %62 = load i64, i64* %diff, align 8, !dbg !7302
  %cmp101 = icmp eq i64 %62, 1, !dbg !7303
  %63 = zext i1 %cmp101 to i64, !dbg !7302
  %cond103 = select i1 %cmp101, i32 49, i32 50, !dbg !7302
  %64 = load i64, i64* %ifalse, align 8, !dbg !7304
  %call104 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %64), !dbg !7304
  %65 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7305
  %66 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7306
  %x105 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %66, i32 0, i32 11, !dbg !7307
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x105, align 8, !dbg !7307
  %call106 = call %struct.rtx_def* @expand_simple_binop(i32 %61, i32 %cond103, %struct.rtx_def* %call104, %struct.rtx_def* %65, %struct.rtx_def* %67, i32 0, i32 2), !dbg !7308
  store %struct.rtx_def* %call106, %struct.rtx_def** %target, align 8, !dbg !7309
  br label %if.end138, !dbg !7310

if.else107:                                       ; preds = %lor.lhs.false97
  %68 = load i64, i64* %ifalse, align 8, !dbg !7311
  %cmp108 = icmp eq i64 %68, 0, !dbg !7313
  br i1 %cmp108, label %land.lhs.true110, label %if.else119, !dbg !7314

land.lhs.true110:                                 ; preds = %if.else107
  %69 = load i64, i64* %itrue, align 8, !dbg !7315
  %call111 = call i32 @exact_log2(i64 %69), !dbg !7316
  %conv112 = sext i32 %call111 to i64, !dbg !7316
  store i64 %conv112, i64* %tmp, align 8, !dbg !7317
  %cmp113 = icmp sge i64 %conv112, 0, !dbg !7318
  br i1 %cmp113, label %if.then115, label %if.else119, !dbg !7319

if.then115:                                       ; preds = %land.lhs.true110
  %70 = load i32, i32* %mode, align 4, !dbg !7320
  %71 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7322
  %72 = load i64, i64* %tmp, align 8, !dbg !7323
  %call116 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %72), !dbg !7323
  %73 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7324
  %x117 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %73, i32 0, i32 11, !dbg !7325
  %74 = load %struct.rtx_def*, %struct.rtx_def** %x117, align 8, !dbg !7325
  %call118 = call %struct.rtx_def* @expand_simple_binop(i32 %70, i32 65, %struct.rtx_def* %71, %struct.rtx_def* %call116, %struct.rtx_def* %74, i32 0, i32 2), !dbg !7326
  store %struct.rtx_def* %call118, %struct.rtx_def** %target, align 8, !dbg !7327
  br label %if.end137, !dbg !7328

if.else119:                                       ; preds = %land.lhs.true110, %if.else107
  %75 = load i64, i64* %itrue, align 8, !dbg !7329
  %cmp120 = icmp eq i64 %75, -1, !dbg !7331
  br i1 %cmp120, label %if.then122, label %if.else126, !dbg !7332

if.then122:                                       ; preds = %if.else119
  %76 = load i32, i32* %mode, align 4, !dbg !7333
  %77 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7335
  %78 = load i64, i64* %ifalse, align 8, !dbg !7336
  %call123 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %78), !dbg !7336
  %79 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7337
  %x124 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %79, i32 0, i32 11, !dbg !7338
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x124, align 8, !dbg !7338
  %call125 = call %struct.rtx_def* @expand_simple_binop(i32 %76, i32 62, %struct.rtx_def* %77, %struct.rtx_def* %call123, %struct.rtx_def* %80, i32 0, i32 2), !dbg !7339
  store %struct.rtx_def* %call125, %struct.rtx_def** %target, align 8, !dbg !7340
  br label %if.end136, !dbg !7341

if.else126:                                       ; preds = %if.else119
  %81 = load i32, i32* %mode, align 4, !dbg !7342
  %82 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7344
  %83 = load i64, i64* %diff, align 8, !dbg !7345
  %call127 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %83), !dbg !7345
  %84 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7346
  %x128 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %84, i32 0, i32 11, !dbg !7347
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x128, align 8, !dbg !7347
  %call129 = call %struct.rtx_def* @expand_simple_binop(i32 %81, i32 61, %struct.rtx_def* %82, %struct.rtx_def* %call127, %struct.rtx_def* %85, i32 0, i32 2), !dbg !7348
  store %struct.rtx_def* %call129, %struct.rtx_def** %target, align 8, !dbg !7349
  %86 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7350
  %tobool130 = icmp ne %struct.rtx_def* %86, null, !dbg !7350
  br i1 %tobool130, label %if.then131, label %if.end135, !dbg !7352

if.then131:                                       ; preds = %if.else126
  %87 = load i32, i32* %mode, align 4, !dbg !7353
  %88 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7354
  %89 = load i64, i64* %ifalse, align 8, !dbg !7355
  %call132 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %89), !dbg !7355
  %90 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7356
  %x133 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %90, i32 0, i32 11, !dbg !7357
  %91 = load %struct.rtx_def*, %struct.rtx_def** %x133, align 8, !dbg !7357
  %call134 = call %struct.rtx_def* @expand_simple_binop(i32 %87, i32 49, %struct.rtx_def* %88, %struct.rtx_def* %call132, %struct.rtx_def* %91, i32 0, i32 2), !dbg !7358
  store %struct.rtx_def* %call134, %struct.rtx_def** %target, align 8, !dbg !7359
  br label %if.end135, !dbg !7360

if.end135:                                        ; preds = %if.then131, %if.else126
  br label %if.end136

if.end136:                                        ; preds = %if.end135, %if.then122
  br label %if.end137

if.end137:                                        ; preds = %if.end136, %if.then115
  br label %if.end138

if.end138:                                        ; preds = %if.end137, %if.then100
  %92 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7361
  %tobool139 = icmp ne %struct.rtx_def* %92, null, !dbg !7361
  br i1 %tobool139, label %if.end141, label %if.then140, !dbg !7363

if.then140:                                       ; preds = %if.end138
  call void @end_sequence(), !dbg !7364
  store i32 0, i32* %retval, align 4, !dbg !7366
  br label %return, !dbg !7366

if.end141:                                        ; preds = %if.end138
  %93 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7367
  %94 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7369
  %x142 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %94, i32 0, i32 11, !dbg !7370
  %95 = load %struct.rtx_def*, %struct.rtx_def** %x142, align 8, !dbg !7370
  %cmp143 = icmp ne %struct.rtx_def* %93, %95, !dbg !7371
  br i1 %cmp143, label %if.then145, label %if.end147, !dbg !7372

if.then145:                                       ; preds = %if.end141
  %96 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7373
  %x146 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %96, i32 0, i32 11, !dbg !7374
  %97 = load %struct.rtx_def*, %struct.rtx_def** %x146, align 8, !dbg !7374
  %98 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7375
  call void @noce_emit_move_insn(%struct.rtx_def* %97, %struct.rtx_def* %98), !dbg !7376
  br label %if.end147, !dbg !7376

if.end147:                                        ; preds = %if.then145, %if.end141
  %99 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7377
  %call148 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %99), !dbg !7378
  store %struct.rtx_def* %call148, %struct.rtx_def** %seq, align 8, !dbg !7379
  %100 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7380
  %tobool149 = icmp ne %struct.rtx_def* %100, null, !dbg !7380
  br i1 %tobool149, label %if.end151, label %if.then150, !dbg !7382

if.then150:                                       ; preds = %if.end147
  store i32 0, i32* %retval, align 4, !dbg !7383
  br label %return, !dbg !7383

if.end151:                                        ; preds = %if.end147
  %101 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7384
  %102 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7385
  %jump152 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %102, i32 0, i32 4, !dbg !7386
  %103 = load %struct.rtx_def*, %struct.rtx_def** %jump152, align 8, !dbg !7386
  %104 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7387
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %104, i32 0, i32 7, !dbg !7387
  %105 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7387
  %u153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %105, i32 0, i32 1, !dbg !7387
  %fld = bitcast %union.u* %u153 to [1 x %union.rtunion_def]*, !dbg !7387
  %arrayidx154 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !7387
  %rt_int = bitcast %union.rtunion_def* %arrayidx154 to i32*, !dbg !7387
  %106 = load i32, i32* %rt_int, align 8, !dbg !7387
  %call155 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %101, %struct.rtx_def* %103, i32 %106), !dbg !7388
  store i32 1, i32* %retval, align 4, !dbg !7389
  br label %return, !dbg !7389

if.end156:                                        ; preds = %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !7390
  br label %return, !dbg !7390

return:                                           ; preds = %if.end156, %if.end151, %if.then150, %if.then140, %if.then93, %if.else78, %if.then24
  %107 = load i32, i32* %retval, align 4, !dbg !7391
  ret i32 %107, !dbg !7391
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_addcc(%struct.noce_if_info* %if_info) #0 !dbg !7392 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %subtract = alloca i32, align 4
  %normalize = alloca i32, align 4
  %cond5 = alloca %struct.rtx_def*, align 8
  %code = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !7393, metadata !DIExpression()), !dbg !7394
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !7395, metadata !DIExpression()), !dbg !7396
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7397, metadata !DIExpression()), !dbg !7398
  call void @llvm.dbg.declare(metadata i32* %subtract, metadata !7399, metadata !DIExpression()), !dbg !7400
  call void @llvm.dbg.declare(metadata i32* %normalize, metadata !7401, metadata !DIExpression()), !dbg !7402
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7403
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 9, !dbg !7403
  %1 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7403
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !7403
  %bf.load = load i32, i32* %2, align 8, !dbg !7403
  %bf.clear = and i32 %bf.load, 65535, !dbg !7403
  %cmp = icmp eq i32 %bf.clear, 49, !dbg !7405
  br i1 %cmp, label %land.lhs.true, label %if.end148, !dbg !7406

land.lhs.true:                                    ; preds = %entry
  %3 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7407
  %a1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %3, i32 0, i32 9, !dbg !7407
  %4 = load %struct.rtx_def*, %struct.rtx_def** %a1, align 8, !dbg !7407
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !7407
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7407
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !7407
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !7407
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7407
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7408
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 10, !dbg !7409
  %7 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7409
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %5, %struct.rtx_def* %7), !dbg !7410
  %tobool = icmp ne i32 %call, 0, !dbg !7410
  br i1 %tobool, label %land.lhs.true2, label %if.end148, !dbg !7411

land.lhs.true2:                                   ; preds = %land.lhs.true
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7412
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 5, !dbg !7413
  %9 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !7413
  %10 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7414
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %10, i32 0, i32 4, !dbg !7415
  %11 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7415
  %call3 = call i32 @reversed_comparison_code(%struct.rtx_def* %9, %struct.rtx_def* %11), !dbg !7416
  %cmp4 = icmp ne i32 %call3, 0, !dbg !7417
  br i1 %cmp4, label %if.then, label %if.end148, !dbg !7418

if.then:                                          ; preds = %land.lhs.true2
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond5, metadata !7419, metadata !DIExpression()), !dbg !7421
  %12 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7422
  %cond6 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %12, i32 0, i32 5, !dbg !7423
  %13 = load %struct.rtx_def*, %struct.rtx_def** %cond6, align 8, !dbg !7423
  store %struct.rtx_def* %13, %struct.rtx_def** %cond5, align 8, !dbg !7421
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7424, metadata !DIExpression()), !dbg !7425
  %14 = load %struct.rtx_def*, %struct.rtx_def** %cond5, align 8, !dbg !7426
  %15 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7427
  %jump7 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %15, i32 0, i32 4, !dbg !7428
  %16 = load %struct.rtx_def*, %struct.rtx_def** %jump7, align 8, !dbg !7428
  %call8 = call i32 @reversed_comparison_code(%struct.rtx_def* %14, %struct.rtx_def* %16), !dbg !7429
  store i32 %call8, i32* %code, align 4, !dbg !7425
  %17 = load %struct.rtx_def*, %struct.rtx_def** %cond5, align 8, !dbg !7430
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !7430
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !7430
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 0, !dbg !7430
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !7430
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !7430
  %call13 = call i32 @general_operand(%struct.rtx_def* %18, i32 0), !dbg !7432
  %tobool14 = icmp ne i32 %call13, 0, !dbg !7432
  br i1 %tobool14, label %land.lhs.true15, label %if.end62, !dbg !7433

land.lhs.true15:                                  ; preds = %if.then
  %19 = load %struct.rtx_def*, %struct.rtx_def** %cond5, align 8, !dbg !7434
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !7434
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !7434
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 1, !dbg !7434
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !7434
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !7434
  %call20 = call i32 @general_operand(%struct.rtx_def* %20, i32 0), !dbg !7435
  %tobool21 = icmp ne i32 %call20, 0, !dbg !7435
  br i1 %tobool21, label %if.then22, label %if.end62, !dbg !7436

if.then22:                                        ; preds = %land.lhs.true15
  call void @start_sequence(), !dbg !7437
  %21 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7439
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %21, i32 0, i32 11, !dbg !7440
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7440
  %23 = load i32, i32* %code, align 4, !dbg !7441
  %24 = load %struct.rtx_def*, %struct.rtx_def** %cond5, align 8, !dbg !7442
  %u23 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7442
  %fld24 = bitcast %union.u* %u23 to [1 x %union.rtunion_def]*, !dbg !7442
  %arrayidx25 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld24, i64 0, i64 0, !dbg !7442
  %rt_rtx26 = bitcast %union.rtunion_def* %arrayidx25 to %struct.rtx_def**, !dbg !7442
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx26, align 8, !dbg !7442
  %26 = load %struct.rtx_def*, %struct.rtx_def** %cond5, align 8, !dbg !7443
  %u27 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !7443
  %fld28 = bitcast %union.u* %u27 to [1 x %union.rtunion_def]*, !dbg !7443
  %arrayidx29 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld28, i64 0, i64 1, !dbg !7443
  %rt_rtx30 = bitcast %union.rtunion_def* %arrayidx29 to %struct.rtx_def**, !dbg !7443
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx30, align 8, !dbg !7443
  %28 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7444
  %b31 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %28, i32 0, i32 10, !dbg !7445
  %29 = load %struct.rtx_def*, %struct.rtx_def** %b31, align 8, !dbg !7445
  %30 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7446
  %a32 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %30, i32 0, i32 9, !dbg !7446
  %31 = load %struct.rtx_def*, %struct.rtx_def** %a32, align 8, !dbg !7446
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7446
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !7446
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 1, !dbg !7446
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !7446
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !7446
  %33 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7447
  %x37 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %33, i32 0, i32 11, !dbg !7447
  %34 = load %struct.rtx_def*, %struct.rtx_def** %x37, align 8, !dbg !7447
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !7447
  %bf.load38 = load i32, i32* %35, align 8, !dbg !7447
  %bf.lshr = lshr i32 %bf.load38, 16, !dbg !7447
  %bf.clear39 = and i32 %bf.lshr, 255, !dbg !7447
  %36 = load i32, i32* %code, align 4, !dbg !7448
  %cmp40 = icmp eq i32 %36, 89, !dbg !7449
  br i1 %cmp40, label %lor.end, label %lor.lhs.false, !dbg !7450

lor.lhs.false:                                    ; preds = %if.then22
  %37 = load i32, i32* %code, align 4, !dbg !7451
  %cmp41 = icmp eq i32 %37, 86, !dbg !7452
  br i1 %cmp41, label %lor.end, label %lor.lhs.false42, !dbg !7453

lor.lhs.false42:                                  ; preds = %lor.lhs.false
  %38 = load i32, i32* %code, align 4, !dbg !7454
  %cmp43 = icmp eq i32 %38, 88, !dbg !7455
  br i1 %cmp43, label %lor.end, label %lor.rhs, !dbg !7456

lor.rhs:                                          ; preds = %lor.lhs.false42
  %39 = load i32, i32* %code, align 4, !dbg !7457
  %cmp44 = icmp eq i32 %39, 87, !dbg !7458
  br label %lor.end, !dbg !7456

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false42, %lor.lhs.false, %if.then22
  %40 = phi i1 [ true, %lor.lhs.false42 ], [ true, %lor.lhs.false ], [ true, %if.then22 ], [ %cmp44, %lor.rhs ]
  %lor.ext = zext i1 %40 to i32, !dbg !7456
  %call45 = call %struct.rtx_def* @emit_conditional_add(%struct.rtx_def* %22, i32 %23, %struct.rtx_def* %25, %struct.rtx_def* %27, i32 0, %struct.rtx_def* %29, %struct.rtx_def* %32, i32 %bf.clear39, i32 %lor.ext), !dbg !7459
  store %struct.rtx_def* %call45, %struct.rtx_def** %target, align 8, !dbg !7460
  %41 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7461
  %tobool46 = icmp ne %struct.rtx_def* %41, null, !dbg !7461
  br i1 %tobool46, label %if.then47, label %if.end61, !dbg !7463

if.then47:                                        ; preds = %lor.end
  %42 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7464
  %43 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7467
  %x48 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %43, i32 0, i32 11, !dbg !7468
  %44 = load %struct.rtx_def*, %struct.rtx_def** %x48, align 8, !dbg !7468
  %cmp49 = icmp ne %struct.rtx_def* %42, %44, !dbg !7469
  br i1 %cmp49, label %if.then50, label %if.end, !dbg !7470

if.then50:                                        ; preds = %if.then47
  %45 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7471
  %x51 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %45, i32 0, i32 11, !dbg !7472
  %46 = load %struct.rtx_def*, %struct.rtx_def** %x51, align 8, !dbg !7472
  %47 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7473
  call void @noce_emit_move_insn(%struct.rtx_def* %46, %struct.rtx_def* %47), !dbg !7474
  br label %if.end, !dbg !7474

if.end:                                           ; preds = %if.then50, %if.then47
  %48 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7475
  %call52 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %48), !dbg !7476
  store %struct.rtx_def* %call52, %struct.rtx_def** %seq, align 8, !dbg !7477
  %49 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7478
  %tobool53 = icmp ne %struct.rtx_def* %49, null, !dbg !7478
  br i1 %tobool53, label %if.end55, label %if.then54, !dbg !7480

if.then54:                                        ; preds = %if.end
  store i32 0, i32* %retval, align 4, !dbg !7481
  br label %return, !dbg !7481

if.end55:                                         ; preds = %if.end
  %50 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7482
  %51 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7483
  %jump56 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %51, i32 0, i32 4, !dbg !7484
  %52 = load %struct.rtx_def*, %struct.rtx_def** %jump56, align 8, !dbg !7484
  %53 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7485
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %53, i32 0, i32 7, !dbg !7485
  %54 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7485
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %54, i32 0, i32 1, !dbg !7485
  %fld58 = bitcast %union.u* %u57 to [1 x %union.rtunion_def]*, !dbg !7485
  %arrayidx59 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld58, i64 0, i64 4, !dbg !7485
  %rt_int = bitcast %union.rtunion_def* %arrayidx59 to i32*, !dbg !7485
  %55 = load i32, i32* %rt_int, align 8, !dbg !7485
  %call60 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %50, %struct.rtx_def* %52, i32 %55), !dbg !7486
  store i32 1, i32* %retval, align 4, !dbg !7487
  br label %return, !dbg !7487

if.end61:                                         ; preds = %lor.end
  call void @end_sequence(), !dbg !7488
  br label %if.end62, !dbg !7489

if.end62:                                         ; preds = %if.end61, %land.lhs.true15, %if.then
  %56 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7490
  %branch_cost = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %56, i32 0, i32 13, !dbg !7492
  %57 = load i32, i32* %branch_cost, align 4, !dbg !7492
  %cmp63 = icmp sge i32 %57, 2, !dbg !7493
  br i1 %cmp63, label %land.lhs.true64, label %if.end147, !dbg !7494

land.lhs.true64:                                  ; preds = %if.end62
  %58 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7495
  %a65 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %58, i32 0, i32 9, !dbg !7495
  %59 = load %struct.rtx_def*, %struct.rtx_def** %a65, align 8, !dbg !7495
  %u66 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !7495
  %fld67 = bitcast %union.u* %u66 to [1 x %union.rtunion_def]*, !dbg !7495
  %arrayidx68 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld67, i64 0, i64 1, !dbg !7495
  %rt_rtx69 = bitcast %union.rtunion_def* %arrayidx68 to %struct.rtx_def**, !dbg !7495
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx69, align 8, !dbg !7495
  %61 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 65), align 8, !dbg !7496
  %cmp70 = icmp eq %struct.rtx_def* %60, %61, !dbg !7497
  br i1 %cmp70, label %if.then78, label %lor.lhs.false71, !dbg !7498

lor.lhs.false71:                                  ; preds = %land.lhs.true64
  %62 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7499
  %a72 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %62, i32 0, i32 9, !dbg !7499
  %63 = load %struct.rtx_def*, %struct.rtx_def** %a72, align 8, !dbg !7499
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %63, i32 0, i32 1, !dbg !7499
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !7499
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !7499
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !7499
  %64 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !7499
  %65 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !7500
  %cmp77 = icmp eq %struct.rtx_def* %64, %65, !dbg !7501
  br i1 %cmp77, label %if.then78, label %if.end147, !dbg !7502

if.then78:                                        ; preds = %lor.lhs.false71, %land.lhs.true64
  call void @start_sequence(), !dbg !7503
  %66 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7505
  %a79 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %66, i32 0, i32 9, !dbg !7505
  %67 = load %struct.rtx_def*, %struct.rtx_def** %a79, align 8, !dbg !7505
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !7505
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !7505
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 1, !dbg !7505
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !7505
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !7505
  %u84 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !7505
  %hwint = bitcast %union.u* %u84 to [1 x i64]*, !dbg !7505
  %arrayidx85 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !7505
  %69 = load i64, i64* %arrayidx85, align 8, !dbg !7505
  %cmp86 = icmp eq i64 1, %69, !dbg !7507
  br i1 %cmp86, label %if.then87, label %if.else, !dbg !7508

if.then87:                                        ; preds = %if.then78
  store i32 0, i32* %subtract, align 4, !dbg !7509
  store i32 0, i32* %normalize, align 4, !dbg !7510
  br label %if.end108, !dbg !7511

if.else:                                          ; preds = %if.then78
  %70 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7512
  %a88 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %70, i32 0, i32 9, !dbg !7512
  %71 = load %struct.rtx_def*, %struct.rtx_def** %a88, align 8, !dbg !7512
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !7512
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !7512
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 1, !dbg !7512
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !7512
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !7512
  %u93 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !7512
  %hwint94 = bitcast %union.u* %u93 to [1 x i64]*, !dbg !7512
  %arrayidx95 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint94, i64 0, i64 0, !dbg !7512
  %73 = load i64, i64* %arrayidx95, align 8, !dbg !7512
  %cmp96 = icmp eq i64 -1, %73, !dbg !7514
  br i1 %cmp96, label %if.then97, label %if.else98, !dbg !7515

if.then97:                                        ; preds = %if.else
  store i32 1, i32* %subtract, align 4, !dbg !7516
  store i32 0, i32* %normalize, align 4, !dbg !7517
  br label %if.end107, !dbg !7518

if.else98:                                        ; preds = %if.else
  store i32 0, i32* %subtract, align 4, !dbg !7519
  %74 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7520
  %a99 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %74, i32 0, i32 9, !dbg !7520
  %75 = load %struct.rtx_def*, %struct.rtx_def** %a99, align 8, !dbg !7520
  %u100 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %75, i32 0, i32 1, !dbg !7520
  %fld101 = bitcast %union.u* %u100 to [1 x %union.rtunion_def]*, !dbg !7520
  %arrayidx102 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld101, i64 0, i64 1, !dbg !7520
  %rt_rtx103 = bitcast %union.rtunion_def* %arrayidx102 to %struct.rtx_def**, !dbg !7520
  %76 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx103, align 8, !dbg !7520
  %u104 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !7520
  %hwint105 = bitcast %union.u* %u104 to [1 x i64]*, !dbg !7520
  %arrayidx106 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint105, i64 0, i64 0, !dbg !7520
  %77 = load i64, i64* %arrayidx106, align 8, !dbg !7520
  %conv = trunc i64 %77 to i32, !dbg !7520
  store i32 %conv, i32* %normalize, align 4, !dbg !7521
  br label %if.end107

if.end107:                                        ; preds = %if.else98, %if.then97
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then87
  %78 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7522
  %79 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7523
  %x109 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %79, i32 0, i32 11, !dbg !7523
  %80 = load %struct.rtx_def*, %struct.rtx_def** %x109, align 8, !dbg !7523
  %81 = bitcast %struct.rtx_def* %80 to i32*, !dbg !7523
  %bf.load110 = load i32, i32* %81, align 8, !dbg !7523
  %bf.lshr111 = lshr i32 %bf.load110, 16, !dbg !7523
  %bf.clear112 = and i32 %bf.lshr111, 255, !dbg !7523
  %call113 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear112), !dbg !7524
  %82 = load i32, i32* %normalize, align 4, !dbg !7525
  %call114 = call %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* %78, %struct.rtx_def* %call113, i32 1, i32 %82), !dbg !7526
  store %struct.rtx_def* %call114, %struct.rtx_def** %target, align 8, !dbg !7527
  %83 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7528
  %tobool115 = icmp ne %struct.rtx_def* %83, null, !dbg !7528
  br i1 %tobool115, label %if.then116, label %if.end126, !dbg !7530

if.then116:                                       ; preds = %if.end108
  %84 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7531
  %x117 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %84, i32 0, i32 11, !dbg !7531
  %85 = load %struct.rtx_def*, %struct.rtx_def** %x117, align 8, !dbg !7531
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !7531
  %bf.load118 = load i32, i32* %86, align 8, !dbg !7531
  %bf.lshr119 = lshr i32 %bf.load118, 16, !dbg !7531
  %bf.clear120 = and i32 %bf.lshr119, 255, !dbg !7531
  %87 = load i32, i32* %subtract, align 4, !dbg !7532
  %tobool121 = icmp ne i32 %87, 0, !dbg !7532
  %88 = zext i1 %tobool121 to i64, !dbg !7532
  %cond122 = select i1 %tobool121, i32 50, i32 49, !dbg !7532
  %89 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7533
  %b123 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %89, i32 0, i32 10, !dbg !7534
  %90 = load %struct.rtx_def*, %struct.rtx_def** %b123, align 8, !dbg !7534
  %91 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7535
  %92 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7536
  %x124 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %92, i32 0, i32 11, !dbg !7537
  %93 = load %struct.rtx_def*, %struct.rtx_def** %x124, align 8, !dbg !7537
  %call125 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear120, i32 %cond122, %struct.rtx_def* %90, %struct.rtx_def* %91, %struct.rtx_def* %93, i32 0, i32 2), !dbg !7538
  store %struct.rtx_def* %call125, %struct.rtx_def** %target, align 8, !dbg !7539
  br label %if.end126, !dbg !7540

if.end126:                                        ; preds = %if.then116, %if.end108
  %94 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7541
  %tobool127 = icmp ne %struct.rtx_def* %94, null, !dbg !7541
  br i1 %tobool127, label %if.then128, label %if.end146, !dbg !7543

if.then128:                                       ; preds = %if.end126
  %95 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7544
  %96 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7547
  %x129 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %96, i32 0, i32 11, !dbg !7548
  %97 = load %struct.rtx_def*, %struct.rtx_def** %x129, align 8, !dbg !7548
  %cmp130 = icmp ne %struct.rtx_def* %95, %97, !dbg !7549
  br i1 %cmp130, label %if.then132, label %if.end134, !dbg !7550

if.then132:                                       ; preds = %if.then128
  %98 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7551
  %x133 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %98, i32 0, i32 11, !dbg !7552
  %99 = load %struct.rtx_def*, %struct.rtx_def** %x133, align 8, !dbg !7552
  %100 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7553
  call void @noce_emit_move_insn(%struct.rtx_def* %99, %struct.rtx_def* %100), !dbg !7554
  br label %if.end134, !dbg !7554

if.end134:                                        ; preds = %if.then132, %if.then128
  %101 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7555
  %call135 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %101), !dbg !7556
  store %struct.rtx_def* %call135, %struct.rtx_def** %seq, align 8, !dbg !7557
  %102 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7558
  %tobool136 = icmp ne %struct.rtx_def* %102, null, !dbg !7558
  br i1 %tobool136, label %if.end138, label %if.then137, !dbg !7560

if.then137:                                       ; preds = %if.end134
  store i32 0, i32* %retval, align 4, !dbg !7561
  br label %return, !dbg !7561

if.end138:                                        ; preds = %if.end134
  %103 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7562
  %104 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7563
  %jump139 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %104, i32 0, i32 4, !dbg !7564
  %105 = load %struct.rtx_def*, %struct.rtx_def** %jump139, align 8, !dbg !7564
  %106 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7565
  %insn_a140 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %106, i32 0, i32 7, !dbg !7565
  %107 = load %struct.rtx_def*, %struct.rtx_def** %insn_a140, align 8, !dbg !7565
  %u141 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !7565
  %fld142 = bitcast %union.u* %u141 to [1 x %union.rtunion_def]*, !dbg !7565
  %arrayidx143 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld142, i64 0, i64 4, !dbg !7565
  %rt_int144 = bitcast %union.rtunion_def* %arrayidx143 to i32*, !dbg !7565
  %108 = load i32, i32* %rt_int144, align 8, !dbg !7565
  %call145 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %103, %struct.rtx_def* %105, i32 %108), !dbg !7566
  store i32 1, i32* %retval, align 4, !dbg !7567
  br label %return, !dbg !7567

if.end146:                                        ; preds = %if.end126
  call void @end_sequence(), !dbg !7568
  br label %if.end147, !dbg !7569

if.end147:                                        ; preds = %if.end146, %lor.lhs.false71, %if.end62
  br label %if.end148, !dbg !7570

if.end148:                                        ; preds = %if.end147, %land.lhs.true2, %land.lhs.true, %entry
  store i32 0, i32* %retval, align 4, !dbg !7571
  br label %return, !dbg !7571

return:                                           ; preds = %if.end148, %if.end138, %if.then137, %if.end55, %if.then54
  %109 = load i32, i32* %retval, align 4, !dbg !7572
  ret i32 %109, !dbg !7572
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_store_flag_mask(%struct.noce_if_info* %if_info) #0 !dbg !7573 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %reversep = alloca i32, align 4
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !7574, metadata !DIExpression()), !dbg !7575
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !7576, metadata !DIExpression()), !dbg !7577
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !7578, metadata !DIExpression()), !dbg !7579
  call void @llvm.dbg.declare(metadata i32* %reversep, metadata !7580, metadata !DIExpression()), !dbg !7581
  store i32 0, i32* %reversep, align 4, !dbg !7582
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7583
  %branch_cost = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 13, !dbg !7585
  %1 = load i32, i32* %branch_cost, align 4, !dbg !7585
  %cmp = icmp sge i32 %1, 2, !dbg !7586
  br i1 %cmp, label %land.lhs.true, label %if.end41, !dbg !7587

land.lhs.true:                                    ; preds = %entry
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7588
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 9, !dbg !7589
  %3 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7589
  %4 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7590
  %cmp1 = icmp eq %struct.rtx_def* %3, %4, !dbg !7591
  br i1 %cmp1, label %land.lhs.true2, label %lor.lhs.false, !dbg !7592

land.lhs.true2:                                   ; preds = %land.lhs.true
  %5 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7593
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %5, i32 0, i32 10, !dbg !7594
  %6 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7594
  %7 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7595
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %7, i32 0, i32 11, !dbg !7596
  %8 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7596
  %call = call i32 @rtx_equal_p(%struct.rtx_def* %6, %struct.rtx_def* %8), !dbg !7597
  %tobool = icmp ne i32 %call, 0, !dbg !7597
  br i1 %tobool, label %if.then, label %lor.lhs.false, !dbg !7598

lor.lhs.false:                                    ; preds = %land.lhs.true2, %land.lhs.true
  %9 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7599
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %9, i32 0, i32 5, !dbg !7600
  %10 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !7600
  %11 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7601
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %11, i32 0, i32 4, !dbg !7602
  %12 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7602
  %call3 = call i32 @reversed_comparison_code(%struct.rtx_def* %10, %struct.rtx_def* %12), !dbg !7603
  %cmp4 = icmp ne i32 %call3, 0, !dbg !7604
  %conv = zext i1 %cmp4 to i32, !dbg !7604
  store i32 %conv, i32* %reversep, align 4, !dbg !7605
  br i1 %cmp4, label %land.lhs.true5, label %if.end41, !dbg !7606

land.lhs.true5:                                   ; preds = %lor.lhs.false
  %13 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7607
  %b6 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %13, i32 0, i32 10, !dbg !7608
  %14 = load %struct.rtx_def*, %struct.rtx_def** %b6, align 8, !dbg !7608
  %15 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !7609
  %cmp7 = icmp eq %struct.rtx_def* %14, %15, !dbg !7610
  br i1 %cmp7, label %land.lhs.true9, label %if.end41, !dbg !7611

land.lhs.true9:                                   ; preds = %land.lhs.true5
  %16 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7612
  %a10 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %16, i32 0, i32 9, !dbg !7613
  %17 = load %struct.rtx_def*, %struct.rtx_def** %a10, align 8, !dbg !7613
  %18 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7614
  %x11 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %18, i32 0, i32 11, !dbg !7615
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x11, align 8, !dbg !7615
  %call12 = call i32 @rtx_equal_p(%struct.rtx_def* %17, %struct.rtx_def* %19), !dbg !7616
  %tobool13 = icmp ne i32 %call12, 0, !dbg !7616
  br i1 %tobool13, label %if.then, label %if.end41, !dbg !7617

if.then:                                          ; preds = %land.lhs.true9, %land.lhs.true2
  call void @start_sequence(), !dbg !7618
  %20 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7620
  %21 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7621
  %x14 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %21, i32 0, i32 11, !dbg !7621
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x14, align 8, !dbg !7621
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !7621
  %bf.load = load i32, i32* %23, align 8, !dbg !7621
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !7621
  %bf.clear = and i32 %bf.lshr, 255, !dbg !7621
  %call15 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear), !dbg !7622
  %24 = load i32, i32* %reversep, align 4, !dbg !7623
  %call16 = call %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* %20, %struct.rtx_def* %call15, i32 %24, i32 -1), !dbg !7624
  store %struct.rtx_def* %call16, %struct.rtx_def** %target, align 8, !dbg !7625
  %25 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7626
  %tobool17 = icmp ne %struct.rtx_def* %25, null, !dbg !7626
  br i1 %tobool17, label %if.then18, label %if.end, !dbg !7628

if.then18:                                        ; preds = %if.then
  %26 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7629
  %x19 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %26, i32 0, i32 11, !dbg !7629
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x19, align 8, !dbg !7629
  %28 = bitcast %struct.rtx_def* %27 to i32*, !dbg !7629
  %bf.load20 = load i32, i32* %28, align 8, !dbg !7629
  %bf.lshr21 = lshr i32 %bf.load20, 16, !dbg !7629
  %bf.clear22 = and i32 %bf.lshr21, 255, !dbg !7629
  %29 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7630
  %x23 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %29, i32 0, i32 11, !dbg !7631
  %30 = load %struct.rtx_def*, %struct.rtx_def** %x23, align 8, !dbg !7631
  %31 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7632
  %32 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7633
  %x24 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %32, i32 0, i32 11, !dbg !7634
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x24, align 8, !dbg !7634
  %call25 = call %struct.rtx_def* @expand_simple_binop(i32 %bf.clear22, i32 61, %struct.rtx_def* %30, %struct.rtx_def* %31, %struct.rtx_def* %33, i32 0, i32 2), !dbg !7635
  store %struct.rtx_def* %call25, %struct.rtx_def** %target, align 8, !dbg !7636
  br label %if.end, !dbg !7637

if.end:                                           ; preds = %if.then18, %if.then
  %34 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7638
  %tobool26 = icmp ne %struct.rtx_def* %34, null, !dbg !7638
  br i1 %tobool26, label %if.then27, label %if.end40, !dbg !7640

if.then27:                                        ; preds = %if.end
  %35 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7641
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7644
  %x28 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 11, !dbg !7645
  %37 = load %struct.rtx_def*, %struct.rtx_def** %x28, align 8, !dbg !7645
  %cmp29 = icmp ne %struct.rtx_def* %35, %37, !dbg !7646
  br i1 %cmp29, label %if.then31, label %if.end33, !dbg !7647

if.then31:                                        ; preds = %if.then27
  %38 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7648
  %x32 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %38, i32 0, i32 11, !dbg !7649
  %39 = load %struct.rtx_def*, %struct.rtx_def** %x32, align 8, !dbg !7649
  %40 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7650
  call void @noce_emit_move_insn(%struct.rtx_def* %39, %struct.rtx_def* %40), !dbg !7651
  br label %if.end33, !dbg !7651

if.end33:                                         ; preds = %if.then31, %if.then27
  %41 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7652
  %call34 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %41), !dbg !7653
  store %struct.rtx_def* %call34, %struct.rtx_def** %seq, align 8, !dbg !7654
  %42 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7655
  %tobool35 = icmp ne %struct.rtx_def* %42, null, !dbg !7655
  br i1 %tobool35, label %if.end37, label %if.then36, !dbg !7657

if.then36:                                        ; preds = %if.end33
  store i32 0, i32* %retval, align 4, !dbg !7658
  br label %return, !dbg !7658

if.end37:                                         ; preds = %if.end33
  %43 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !7659
  %44 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7660
  %jump38 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %44, i32 0, i32 4, !dbg !7661
  %45 = load %struct.rtx_def*, %struct.rtx_def** %jump38, align 8, !dbg !7661
  %46 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7662
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %46, i32 0, i32 7, !dbg !7662
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7662
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !7662
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7662
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 4, !dbg !7662
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !7662
  %48 = load i32, i32* %rt_int, align 8, !dbg !7662
  %call39 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %43, %struct.rtx_def* %45, i32 %48), !dbg !7663
  store i32 1, i32* %retval, align 4, !dbg !7664
  br label %return, !dbg !7664

if.end40:                                         ; preds = %if.end
  call void @end_sequence(), !dbg !7665
  br label %if.end41, !dbg !7666

if.end41:                                         ; preds = %if.end40, %land.lhs.true9, %land.lhs.true5, %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !7667
  br label %return, !dbg !7667

return:                                           ; preds = %if.end41, %if.end37, %if.then36
  %49 = load i32, i32* %retval, align 4, !dbg !7668
  ret i32 %49, !dbg !7668
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_cmove_arith(%struct.noce_if_info* %if_info) #0 !dbg !7669 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %a = alloca %struct.rtx_def*, align 8
  %b = alloca %struct.rtx_def*, align 8
  %x = alloca %struct.rtx_def*, align 8
  %orig_a = alloca %struct.rtx_def*, align 8
  %orig_b = alloca %struct.rtx_def*, align 8
  %insn_a = alloca %struct.rtx_def*, align 8
  %insn_b = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %is_mem = alloca i32, align 4
  %insn_cost = alloca i32, align 4
  %code = alloca i32, align 4
  %address_mode = alloca i32, align 4
  %reversep = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %set227 = alloca %struct.rtx_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !7670, metadata !DIExpression()), !dbg !7671
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %a, metadata !7672, metadata !DIExpression()), !dbg !7673
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7674
  %a1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 9, !dbg !7675
  %1 = load %struct.rtx_def*, %struct.rtx_def** %a1, align 8, !dbg !7675
  store %struct.rtx_def* %1, %struct.rtx_def** %a, align 8, !dbg !7673
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %b, metadata !7676, metadata !DIExpression()), !dbg !7677
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7678
  %b2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 10, !dbg !7679
  %3 = load %struct.rtx_def*, %struct.rtx_def** %b2, align 8, !dbg !7679
  store %struct.rtx_def* %3, %struct.rtx_def** %b, align 8, !dbg !7677
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x, metadata !7680, metadata !DIExpression()), !dbg !7681
  %4 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7682
  %x3 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %4, i32 0, i32 11, !dbg !7683
  %5 = load %struct.rtx_def*, %struct.rtx_def** %x3, align 8, !dbg !7683
  store %struct.rtx_def* %5, %struct.rtx_def** %x, align 8, !dbg !7681
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_a, metadata !7684, metadata !DIExpression()), !dbg !7685
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %orig_b, metadata !7686, metadata !DIExpression()), !dbg !7687
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_a, metadata !7688, metadata !DIExpression()), !dbg !7689
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn_b, metadata !7690, metadata !DIExpression()), !dbg !7691
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !7692, metadata !DIExpression()), !dbg !7693
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !7694, metadata !DIExpression()), !dbg !7695
  call void @llvm.dbg.declare(metadata i32* %is_mem, metadata !7696, metadata !DIExpression()), !dbg !7697
  store i32 0, i32* %is_mem, align 4, !dbg !7697
  call void @llvm.dbg.declare(metadata i32* %insn_cost, metadata !7698, metadata !DIExpression()), !dbg !7699
  call void @llvm.dbg.declare(metadata i32* %code, metadata !7700, metadata !DIExpression()), !dbg !7701
  %6 = load i32, i32* @cse_not_expected, align 4, !dbg !7702
  %tobool = icmp ne i32 %6, 0, !dbg !7702
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !7704

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7705
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !7705
  %bf.load = load i32, i32* %8, align 8, !dbg !7705
  %bf.clear = and i32 %bf.load, 65535, !dbg !7705
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !7705
  br i1 %cmp, label %land.lhs.true4, label %if.else, !dbg !7706

land.lhs.true4:                                   ; preds = %land.lhs.true
  %9 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7707
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !7707
  %bf.load5 = load i32, i32* %10, align 8, !dbg !7707
  %bf.clear6 = and i32 %bf.load5, 65535, !dbg !7707
  %cmp7 = icmp eq i32 %bf.clear6, 43, !dbg !7707
  br i1 %cmp7, label %land.lhs.true8, label %if.else, !dbg !7708

land.lhs.true8:                                   ; preds = %land.lhs.true4
  %11 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7709
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !7709
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !7709
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !7709
  %rt_mem = bitcast %union.rtunion_def* %arrayidx to %struct.mem_attrs**, !dbg !7709
  %12 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem, align 8, !dbg !7709
  %cmp9 = icmp eq %struct.mem_attrs* %12, null, !dbg !7709
  br i1 %cmp9, label %cond.true, label %cond.false, !dbg !7709

cond.true:                                        ; preds = %land.lhs.true8
  br label %cond.end, !dbg !7709

cond.false:                                       ; preds = %land.lhs.true8
  %13 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7709
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !7709
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !7709
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !7709
  %rt_mem13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.mem_attrs**, !dbg !7709
  %14 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem13, align 8, !dbg !7709
  %addrspace = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %14, i32 0, i32 5, !dbg !7709
  %15 = load i8, i8* %addrspace, align 8, !dbg !7709
  %conv = zext i8 %15 to i32, !dbg !7709
  br label %cond.end, !dbg !7709

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ %conv, %cond.false ], !dbg !7709
  %16 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7710
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !7710
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !7710
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 1, !dbg !7710
  %rt_mem17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.mem_attrs**, !dbg !7710
  %17 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem17, align 8, !dbg !7710
  %cmp18 = icmp eq %struct.mem_attrs* %17, null, !dbg !7710
  br i1 %cmp18, label %cond.true20, label %cond.false21, !dbg !7710

cond.true20:                                      ; preds = %cond.end
  br label %cond.end28, !dbg !7710

cond.false21:                                     ; preds = %cond.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7710
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !7710
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !7710
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 1, !dbg !7710
  %rt_mem25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.mem_attrs**, !dbg !7710
  %19 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem25, align 8, !dbg !7710
  %addrspace26 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %19, i32 0, i32 5, !dbg !7710
  %20 = load i8, i8* %addrspace26, align 8, !dbg !7710
  %conv27 = zext i8 %20 to i32, !dbg !7710
  br label %cond.end28, !dbg !7710

cond.end28:                                       ; preds = %cond.false21, %cond.true20
  %cond29 = phi i32 [ 0, %cond.true20 ], [ %conv27, %cond.false21 ], !dbg !7710
  %cmp30 = icmp eq i32 %cond, %cond29, !dbg !7711
  br i1 %cmp30, label %land.lhs.true32, label %if.else, !dbg !7712

land.lhs.true32:                                  ; preds = %cond.end28
  %21 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7713
  %branch_cost = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %21, i32 0, i32 13, !dbg !7714
  %22 = load i32, i32* %branch_cost, align 4, !dbg !7714
  %cmp33 = icmp sge i32 %22, 5, !dbg !7715
  br i1 %cmp33, label %if.then, label %if.else, !dbg !7716

if.then:                                          ; preds = %land.lhs.true32
  call void @llvm.dbg.declare(metadata i32* %address_mode, metadata !7717, metadata !DIExpression()), !dbg !7719
  %23 = load i32 (i8)*, i32 (i8)** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 57, i32 1), align 8, !dbg !7720
  %24 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7721
  %u35 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !7721
  %fld36 = bitcast %union.u* %u35 to [1 x %union.rtunion_def]*, !dbg !7721
  %arrayidx37 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld36, i64 0, i64 1, !dbg !7721
  %rt_mem38 = bitcast %union.rtunion_def* %arrayidx37 to %struct.mem_attrs**, !dbg !7721
  %25 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem38, align 8, !dbg !7721
  %cmp39 = icmp eq %struct.mem_attrs* %25, null, !dbg !7721
  br i1 %cmp39, label %cond.true41, label %cond.false42, !dbg !7721

cond.true41:                                      ; preds = %if.then
  br label %cond.end49, !dbg !7721

cond.false42:                                     ; preds = %if.then
  %26 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7721
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !7721
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !7721
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 1, !dbg !7721
  %rt_mem46 = bitcast %union.rtunion_def* %arrayidx45 to %struct.mem_attrs**, !dbg !7721
  %27 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem46, align 8, !dbg !7721
  %addrspace47 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %27, i32 0, i32 5, !dbg !7721
  %28 = load i8, i8* %addrspace47, align 8, !dbg !7721
  %conv48 = zext i8 %28 to i32, !dbg !7721
  br label %cond.end49, !dbg !7721

cond.end49:                                       ; preds = %cond.false42, %cond.true41
  %cond50 = phi i32 [ 0, %cond.true41 ], [ %conv48, %cond.false42 ], !dbg !7721
  %conv51 = trunc i32 %cond50 to i8, !dbg !7721
  %call = call i32 %23(i8 zeroext %conv51), !dbg !7722
  store i32 %call, i32* %address_mode, align 4, !dbg !7719
  %29 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7723
  %u52 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %29, i32 0, i32 1, !dbg !7723
  %fld53 = bitcast %union.u* %u52 to [1 x %union.rtunion_def]*, !dbg !7723
  %arrayidx54 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld53, i64 0, i64 0, !dbg !7723
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx54 to %struct.rtx_def**, !dbg !7723
  %30 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !7723
  store %struct.rtx_def* %30, %struct.rtx_def** %a, align 8, !dbg !7724
  %31 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7725
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %31, i32 0, i32 1, !dbg !7725
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !7725
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 0, !dbg !7725
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !7725
  %32 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !7725
  store %struct.rtx_def* %32, %struct.rtx_def** %b, align 8, !dbg !7726
  %33 = load i32, i32* %address_mode, align 4, !dbg !7727
  %call59 = call %struct.rtx_def* @gen_reg_rtx(i32 %33), !dbg !7728
  store %struct.rtx_def* %call59, %struct.rtx_def** %x, align 8, !dbg !7729
  store i32 1, i32* %is_mem, align 4, !dbg !7730
  br label %if.end65, !dbg !7731

if.else:                                          ; preds = %land.lhs.true32, %cond.end28, %land.lhs.true4, %land.lhs.true, %entry
  %34 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7732
  %call60 = call i32 @may_trap_p(%struct.rtx_def* %34), !dbg !7734
  %tobool61 = icmp ne i32 %call60, 0, !dbg !7734
  br i1 %tobool61, label %if.then64, label %lor.lhs.false, !dbg !7735

lor.lhs.false:                                    ; preds = %if.else
  %35 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7736
  %call62 = call i32 @may_trap_p(%struct.rtx_def* %35), !dbg !7737
  %tobool63 = icmp ne i32 %call62, 0, !dbg !7737
  br i1 %tobool63, label %if.then64, label %if.end, !dbg !7738

if.then64:                                        ; preds = %lor.lhs.false, %if.else
  store i32 0, i32* %retval, align 4, !dbg !7739
  br label %return, !dbg !7739

if.end:                                           ; preds = %lor.lhs.false
  br label %if.end65

if.end65:                                         ; preds = %if.end, %cond.end49
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7740
  %cond66 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 5, !dbg !7740
  %37 = load %struct.rtx_def*, %struct.rtx_def** %cond66, align 8, !dbg !7740
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !7740
  %bf.load67 = load i32, i32* %38, align 8, !dbg !7740
  %bf.clear68 = and i32 %bf.load67, 65535, !dbg !7740
  store i32 %bf.clear68, i32* %code, align 4, !dbg !7741
  %39 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7742
  %insn_a69 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %39, i32 0, i32 7, !dbg !7743
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn_a69, align 8, !dbg !7743
  store %struct.rtx_def* %40, %struct.rtx_def** %insn_a, align 8, !dbg !7744
  %41 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7745
  %insn_b70 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %41, i32 0, i32 8, !dbg !7746
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn_b70, align 8, !dbg !7746
  store %struct.rtx_def* %42, %struct.rtx_def** %insn_b, align 8, !dbg !7747
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7748
  %tobool71 = icmp ne %struct.rtx_def* %43, null, !dbg !7748
  br i1 %tobool71, label %if.then72, label %if.else90, !dbg !7750

if.then72:                                        ; preds = %if.end65
  %44 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7751
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !7751
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !7751
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 5, !dbg !7751
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !7751
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !7751
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7753
  %u77 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !7753
  %fld78 = bitcast %union.u* %u77 to [1 x %union.rtunion_def]*, !dbg !7753
  %arrayidx79 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld78, i64 0, i64 3, !dbg !7753
  %rt_bb = bitcast %union.rtunion_def* %arrayidx79 to %struct.basic_block_def**, !dbg !7753
  %47 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !7753
  %call80 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %47), !dbg !7754
  %call81 = call i32 @insn_rtx_cost(%struct.rtx_def* %45, i8 zeroext %call80), !dbg !7755
  store i32 %call81, i32* %insn_cost, align 4, !dbg !7756
  %48 = load i32, i32* %insn_cost, align 4, !dbg !7757
  %cmp82 = icmp eq i32 %48, 0, !dbg !7759
  br i1 %cmp82, label %if.then88, label %lor.lhs.false84, !dbg !7760

lor.lhs.false84:                                  ; preds = %if.then72
  %49 = load i32, i32* %insn_cost, align 4, !dbg !7761
  %50 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7762
  %branch_cost85 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %50, i32 0, i32 13, !dbg !7762
  %51 = load i32, i32* %branch_cost85, align 4, !dbg !7762
  %mul = mul nsw i32 %51, 4, !dbg !7762
  %cmp86 = icmp sgt i32 %49, %mul, !dbg !7763
  br i1 %cmp86, label %if.then88, label %if.end89, !dbg !7764

if.then88:                                        ; preds = %lor.lhs.false84, %if.then72
  store i32 0, i32* %retval, align 4, !dbg !7765
  br label %return, !dbg !7765

if.end89:                                         ; preds = %lor.lhs.false84
  br label %if.end91, !dbg !7766

if.else90:                                        ; preds = %if.end65
  store i32 0, i32* %insn_cost, align 4, !dbg !7767
  br label %if.end91

if.end91:                                         ; preds = %if.else90, %if.end89
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7768
  %tobool92 = icmp ne %struct.rtx_def* %52, null, !dbg !7768
  br i1 %tobool92, label %if.then93, label %if.end113, !dbg !7770

if.then93:                                        ; preds = %if.end91
  %53 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7771
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %53, i32 0, i32 1, !dbg !7771
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !7771
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 5, !dbg !7771
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !7771
  %54 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !7771
  %55 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7773
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !7773
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !7773
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 3, !dbg !7773
  %rt_bb101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.basic_block_def**, !dbg !7773
  %56 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb101, align 8, !dbg !7773
  %call102 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %56), !dbg !7774
  %call103 = call i32 @insn_rtx_cost(%struct.rtx_def* %54, i8 zeroext %call102), !dbg !7775
  %57 = load i32, i32* %insn_cost, align 4, !dbg !7776
  %add = add nsw i32 %57, %call103, !dbg !7776
  store i32 %add, i32* %insn_cost, align 4, !dbg !7776
  %58 = load i32, i32* %insn_cost, align 4, !dbg !7777
  %cmp104 = icmp eq i32 %58, 0, !dbg !7779
  br i1 %cmp104, label %if.then111, label %lor.lhs.false106, !dbg !7780

lor.lhs.false106:                                 ; preds = %if.then93
  %59 = load i32, i32* %insn_cost, align 4, !dbg !7781
  %60 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7782
  %branch_cost107 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %60, i32 0, i32 13, !dbg !7782
  %61 = load i32, i32* %branch_cost107, align 4, !dbg !7782
  %mul108 = mul nsw i32 %61, 4, !dbg !7782
  %cmp109 = icmp sgt i32 %59, %mul108, !dbg !7783
  br i1 %cmp109, label %if.then111, label %if.end112, !dbg !7784

if.then111:                                       ; preds = %lor.lhs.false106, %if.then93
  store i32 0, i32* %retval, align 4, !dbg !7785
  br label %return, !dbg !7785

if.end112:                                        ; preds = %lor.lhs.false106
  br label %if.end113, !dbg !7786

if.end113:                                        ; preds = %if.end112, %if.end91
  %62 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7787
  %cond114 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %62, i32 0, i32 5, !dbg !7789
  %63 = load %struct.rtx_def*, %struct.rtx_def** %cond114, align 8, !dbg !7789
  %64 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7790
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %64, i32 0, i32 4, !dbg !7791
  %65 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !7791
  %call115 = call i32 @reversed_comparison_code(%struct.rtx_def* %63, %struct.rtx_def* %65), !dbg !7792
  %cmp116 = icmp ne i32 %call115, 0, !dbg !7793
  br i1 %cmp116, label %if.then118, label %if.end136, !dbg !7794

if.then118:                                       ; preds = %if.end113
  call void @llvm.dbg.declare(metadata i32* %reversep, metadata !7795, metadata !DIExpression()), !dbg !7797
  store i32 0, i32* %reversep, align 4, !dbg !7797
  %66 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7798
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7800
  %call119 = call i32 @rtx_equal_p(%struct.rtx_def* %66, %struct.rtx_def* %67), !dbg !7801
  %tobool120 = icmp ne i32 %call119, 0, !dbg !7801
  br i1 %tobool120, label %if.then121, label %if.else122, !dbg !7802

if.then121:                                       ; preds = %if.then118
  store i32 1, i32* %reversep, align 4, !dbg !7803
  br label %if.end129, !dbg !7804

if.else122:                                       ; preds = %if.then118
  %68 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7805
  %69 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7807
  %70 = bitcast %struct.rtx_def* %69 to i32*, !dbg !7807
  %bf.load123 = load i32, i32* %70, align 8, !dbg !7807
  %bf.lshr = lshr i32 %bf.load123, 16, !dbg !7807
  %bf.clear124 = and i32 %bf.lshr, 255, !dbg !7807
  %call125 = call i32 @general_operand(%struct.rtx_def* %68, i32 %bf.clear124), !dbg !7808
  %tobool126 = icmp ne i32 %call125, 0, !dbg !7808
  br i1 %tobool126, label %if.then127, label %if.end128, !dbg !7809

if.then127:                                       ; preds = %if.else122
  store i32 1, i32* %reversep, align 4, !dbg !7810
  br label %if.end128, !dbg !7811

if.end128:                                        ; preds = %if.then127, %if.else122
  br label %if.end129

if.end129:                                        ; preds = %if.end128, %if.then121
  %71 = load i32, i32* %reversep, align 4, !dbg !7812
  %tobool130 = icmp ne i32 %71, 0, !dbg !7812
  br i1 %tobool130, label %if.then131, label %if.end135, !dbg !7814

if.then131:                                       ; preds = %if.end129
  %72 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7815
  %cond132 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %72, i32 0, i32 5, !dbg !7817
  %73 = load %struct.rtx_def*, %struct.rtx_def** %cond132, align 8, !dbg !7817
  %74 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7818
  %jump133 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %74, i32 0, i32 4, !dbg !7819
  %75 = load %struct.rtx_def*, %struct.rtx_def** %jump133, align 8, !dbg !7819
  %call134 = call i32 @reversed_comparison_code(%struct.rtx_def* %73, %struct.rtx_def* %75), !dbg !7820
  store i32 %call134, i32* %code, align 4, !dbg !7821
  %76 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7822
  store %struct.rtx_def* %76, %struct.rtx_def** %tmp, align 8, !dbg !7823
  %77 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7824
  store %struct.rtx_def* %77, %struct.rtx_def** %a, align 8, !dbg !7825
  %78 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7826
  store %struct.rtx_def* %78, %struct.rtx_def** %b, align 8, !dbg !7827
  %79 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7828
  store %struct.rtx_def* %79, %struct.rtx_def** %tmp, align 8, !dbg !7829
  %80 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7830
  store %struct.rtx_def* %80, %struct.rtx_def** %insn_a, align 8, !dbg !7831
  %81 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7832
  store %struct.rtx_def* %81, %struct.rtx_def** %insn_b, align 8, !dbg !7833
  br label %if.end135, !dbg !7834

if.end135:                                        ; preds = %if.then131, %if.end129
  br label %if.end136, !dbg !7835

if.end136:                                        ; preds = %if.end135, %if.end113
  call void @start_sequence(), !dbg !7836
  %82 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7837
  store %struct.rtx_def* %82, %struct.rtx_def** %orig_a, align 8, !dbg !7838
  %83 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7839
  store %struct.rtx_def* %83, %struct.rtx_def** %orig_b, align 8, !dbg !7840
  %84 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7841
  %85 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7843
  %86 = bitcast %struct.rtx_def* %85 to i32*, !dbg !7843
  %bf.load137 = load i32, i32* %86, align 8, !dbg !7843
  %bf.lshr138 = lshr i32 %bf.load137, 16, !dbg !7843
  %bf.clear139 = and i32 %bf.lshr138, 255, !dbg !7843
  %call140 = call i32 @general_operand(%struct.rtx_def* %84, i32 %bf.clear139), !dbg !7844
  %tobool141 = icmp ne i32 %call140, 0, !dbg !7844
  br i1 %tobool141, label %if.end220, label %if.then142, !dbg !7845

if.then142:                                       ; preds = %if.end136
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !7846, metadata !DIExpression()), !dbg !7848
  %87 = load i32, i32* %is_mem, align 4, !dbg !7849
  %tobool143 = icmp ne i32 %87, 0, !dbg !7849
  br i1 %tobool143, label %if.then144, label %if.else151, !dbg !7851

if.then144:                                       ; preds = %if.then142
  %88 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7852
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !7852
  %bf.load145 = load i32, i32* %89, align 8, !dbg !7852
  %bf.lshr146 = lshr i32 %bf.load145, 16, !dbg !7852
  %bf.clear147 = and i32 %bf.lshr146, 255, !dbg !7852
  %call148 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear147), !dbg !7854
  store %struct.rtx_def* %call148, %struct.rtx_def** %tmp, align 8, !dbg !7855
  %90 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7856
  %91 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7856
  %call149 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %90, %struct.rtx_def* %91), !dbg !7856
  %call150 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call149), !dbg !7857
  store %struct.rtx_def* %call150, %struct.rtx_def** %tmp, align 8, !dbg !7858
  br label %if.end214, !dbg !7859

if.else151:                                       ; preds = %if.then142
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7860
  %tobool152 = icmp ne %struct.rtx_def* %92, null, !dbg !7860
  br i1 %tobool152, label %if.else154, label %if.then153, !dbg !7862

if.then153:                                       ; preds = %if.else151
  br label %end_seq_and_fail, !dbg !7863

if.else154:                                       ; preds = %if.else151
  %93 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7864
  %94 = bitcast %struct.rtx_def* %93 to i32*, !dbg !7864
  %bf.load155 = load i32, i32* %94, align 8, !dbg !7864
  %bf.lshr156 = lshr i32 %bf.load155, 16, !dbg !7864
  %bf.clear157 = and i32 %bf.lshr156, 255, !dbg !7864
  %call158 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear157), !dbg !7866
  store %struct.rtx_def* %call158, %struct.rtx_def** %a, align 8, !dbg !7867
  %95 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !7868
  %call159 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %95), !dbg !7869
  store %struct.rtx_def* %call159, %struct.rtx_def** %tmp, align 8, !dbg !7870
  %96 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %97 = bitcast %struct.rtx_def* %96 to i32*, !dbg !7871
  %bf.load160 = load i32, i32* %97, align 8, !dbg !7871
  %bf.clear161 = and i32 %bf.load160, 65535, !dbg !7871
  %cmp162 = icmp eq i32 %bf.clear161, 8, !dbg !7871
  br i1 %cmp162, label %cond.true179, label %lor.lhs.false164, !dbg !7871

lor.lhs.false164:                                 ; preds = %if.else154
  %98 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %99 = bitcast %struct.rtx_def* %98 to i32*, !dbg !7871
  %bf.load165 = load i32, i32* %99, align 8, !dbg !7871
  %bf.clear166 = and i32 %bf.load165, 65535, !dbg !7871
  %cmp167 = icmp eq i32 %bf.clear166, 7, !dbg !7871
  br i1 %cmp167, label %cond.true179, label %lor.lhs.false169, !dbg !7871

lor.lhs.false169:                                 ; preds = %lor.lhs.false164
  %100 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %101 = bitcast %struct.rtx_def* %100 to i32*, !dbg !7871
  %bf.load170 = load i32, i32* %101, align 8, !dbg !7871
  %bf.clear171 = and i32 %bf.load170, 65535, !dbg !7871
  %cmp172 = icmp eq i32 %bf.clear171, 9, !dbg !7871
  br i1 %cmp172, label %cond.true179, label %lor.lhs.false174, !dbg !7871

lor.lhs.false174:                                 ; preds = %lor.lhs.false169
  %102 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !7871
  %bf.load175 = load i32, i32* %103, align 8, !dbg !7871
  %bf.clear176 = and i32 %bf.load175, 65535, !dbg !7871
  %cmp177 = icmp eq i32 %bf.clear176, 10, !dbg !7871
  br i1 %cmp177, label %cond.true179, label %cond.false201, !dbg !7871

cond.true179:                                     ; preds = %lor.lhs.false174, %lor.lhs.false169, %lor.lhs.false164, %if.else154
  %104 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %u180 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %104, i32 0, i32 1, !dbg !7871
  %fld181 = bitcast %union.u* %u180 to [1 x %union.rtunion_def]*, !dbg !7871
  %arrayidx182 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld181, i64 0, i64 5, !dbg !7871
  %rt_rtx183 = bitcast %union.rtunion_def* %arrayidx182 to %struct.rtx_def**, !dbg !7871
  %105 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx183, align 8, !dbg !7871
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !7871
  %bf.load184 = load i32, i32* %106, align 8, !dbg !7871
  %bf.clear185 = and i32 %bf.load184, 65535, !dbg !7871
  %cmp186 = icmp eq i32 %bf.clear185, 23, !dbg !7871
  br i1 %cmp186, label %cond.true188, label %cond.false193, !dbg !7871

cond.true188:                                     ; preds = %cond.true179
  %107 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %u189 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %107, i32 0, i32 1, !dbg !7871
  %fld190 = bitcast %union.u* %u189 to [1 x %union.rtunion_def]*, !dbg !7871
  %arrayidx191 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld190, i64 0, i64 5, !dbg !7871
  %rt_rtx192 = bitcast %union.rtunion_def* %arrayidx191 to %struct.rtx_def**, !dbg !7871
  %108 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx192, align 8, !dbg !7871
  br label %cond.end199, !dbg !7871

cond.false193:                                    ; preds = %cond.true179
  %109 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %110 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7871
  %u194 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !7871
  %fld195 = bitcast %union.u* %u194 to [1 x %union.rtunion_def]*, !dbg !7871
  %arrayidx196 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld195, i64 0, i64 5, !dbg !7871
  %rt_rtx197 = bitcast %union.rtunion_def* %arrayidx196 to %struct.rtx_def**, !dbg !7871
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx197, align 8, !dbg !7871
  %call198 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %109, %struct.rtx_def* %111), !dbg !7871
  br label %cond.end199, !dbg !7871

cond.end199:                                      ; preds = %cond.false193, %cond.true188
  %cond200 = phi %struct.rtx_def* [ %108, %cond.true188 ], [ %call198, %cond.false193 ], !dbg !7871
  br label %cond.end202, !dbg !7871

cond.false201:                                    ; preds = %lor.lhs.false174
  br label %cond.end202, !dbg !7871

cond.end202:                                      ; preds = %cond.false201, %cond.end199
  %cond203 = phi %struct.rtx_def* [ %cond200, %cond.end199 ], [ null, %cond.false201 ], !dbg !7871
  store %struct.rtx_def* %cond203, %struct.rtx_def** %set, align 8, !dbg !7872
  %112 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7873
  %113 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !7874
  %u204 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %113, i32 0, i32 1, !dbg !7874
  %fld205 = bitcast %union.u* %u204 to [1 x %union.rtunion_def]*, !dbg !7874
  %arrayidx206 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld205, i64 0, i64 0, !dbg !7874
  %rt_rtx207 = bitcast %union.rtunion_def* %arrayidx206 to %struct.rtx_def**, !dbg !7874
  store %struct.rtx_def* %112, %struct.rtx_def** %rt_rtx207, align 8, !dbg !7875
  %114 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7876
  %u208 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %114, i32 0, i32 1, !dbg !7876
  %fld209 = bitcast %union.u* %u208 to [1 x %union.rtunion_def]*, !dbg !7876
  %arrayidx210 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld209, i64 0, i64 5, !dbg !7876
  %rt_rtx211 = bitcast %union.rtunion_def* %arrayidx210 to %struct.rtx_def**, !dbg !7876
  %115 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx211, align 8, !dbg !7876
  %call212 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %115), !dbg !7877
  store %struct.rtx_def* %call212, %struct.rtx_def** %tmp, align 8, !dbg !7878
  br label %if.end213

if.end213:                                        ; preds = %cond.end202
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %if.then144
  %116 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7879
  %call215 = call i32 @recog_memoized(%struct.rtx_def* %116), !dbg !7881
  %cmp216 = icmp slt i32 %call215, 0, !dbg !7882
  br i1 %cmp216, label %if.then218, label %if.end219, !dbg !7883

if.then218:                                       ; preds = %if.end214
  br label %end_seq_and_fail, !dbg !7884

if.end219:                                        ; preds = %if.end214
  br label %if.end220, !dbg !7885

if.end220:                                        ; preds = %if.end219, %if.end136
  %117 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7886
  %118 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7888
  %119 = bitcast %struct.rtx_def* %118 to i32*, !dbg !7888
  %bf.load221 = load i32, i32* %119, align 8, !dbg !7888
  %bf.lshr222 = lshr i32 %bf.load221, 16, !dbg !7888
  %bf.clear223 = and i32 %bf.lshr222, 255, !dbg !7888
  %call224 = call i32 @general_operand(%struct.rtx_def* %117, i32 %bf.clear223), !dbg !7889
  %tobool225 = icmp ne i32 %call224, 0, !dbg !7889
  br i1 %tobool225, label %if.end318, label %if.then226, !dbg !7890

if.then226:                                       ; preds = %if.end220
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set227, metadata !7891, metadata !DIExpression()), !dbg !7893
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !7894, metadata !DIExpression()), !dbg !7895
  %120 = load i32, i32* %is_mem, align 4, !dbg !7896
  %tobool228 = icmp ne i32 %120, 0, !dbg !7896
  br i1 %tobool228, label %if.then229, label %if.else235, !dbg !7898

if.then229:                                       ; preds = %if.then226
  %121 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7899
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !7899
  %bf.load230 = load i32, i32* %122, align 8, !dbg !7899
  %bf.lshr231 = lshr i32 %bf.load230, 16, !dbg !7899
  %bf.clear232 = and i32 %bf.lshr231, 255, !dbg !7899
  %call233 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear232), !dbg !7901
  store %struct.rtx_def* %call233, %struct.rtx_def** %tmp, align 8, !dbg !7902
  %123 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7903
  %124 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7903
  %call234 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %123, %struct.rtx_def* %124), !dbg !7903
  store %struct.rtx_def* %call234, %struct.rtx_def** %tmp, align 8, !dbg !7904
  br label %if.end297, !dbg !7905

if.else235:                                       ; preds = %if.then226
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7906
  %tobool236 = icmp ne %struct.rtx_def* %125, null, !dbg !7906
  br i1 %tobool236, label %if.else238, label %if.then237, !dbg !7908

if.then237:                                       ; preds = %if.else235
  br label %end_seq_and_fail, !dbg !7909

if.else238:                                       ; preds = %if.else235
  %126 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7910
  %127 = bitcast %struct.rtx_def* %126 to i32*, !dbg !7910
  %bf.load239 = load i32, i32* %127, align 8, !dbg !7910
  %bf.lshr240 = lshr i32 %bf.load239, 16, !dbg !7910
  %bf.clear241 = and i32 %bf.lshr240, 255, !dbg !7910
  %call242 = call %struct.rtx_def* @gen_reg_rtx(i32 %bf.clear241), !dbg !7912
  store %struct.rtx_def* %call242, %struct.rtx_def** %b, align 8, !dbg !7913
  %128 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !7914
  %call243 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %128), !dbg !7915
  store %struct.rtx_def* %call243, %struct.rtx_def** %tmp, align 8, !dbg !7916
  %129 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %130 = bitcast %struct.rtx_def* %129 to i32*, !dbg !7917
  %bf.load244 = load i32, i32* %130, align 8, !dbg !7917
  %bf.clear245 = and i32 %bf.load244, 65535, !dbg !7917
  %cmp246 = icmp eq i32 %bf.clear245, 8, !dbg !7917
  br i1 %cmp246, label %cond.true263, label %lor.lhs.false248, !dbg !7917

lor.lhs.false248:                                 ; preds = %if.else238
  %131 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %132 = bitcast %struct.rtx_def* %131 to i32*, !dbg !7917
  %bf.load249 = load i32, i32* %132, align 8, !dbg !7917
  %bf.clear250 = and i32 %bf.load249, 65535, !dbg !7917
  %cmp251 = icmp eq i32 %bf.clear250, 7, !dbg !7917
  br i1 %cmp251, label %cond.true263, label %lor.lhs.false253, !dbg !7917

lor.lhs.false253:                                 ; preds = %lor.lhs.false248
  %133 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %134 = bitcast %struct.rtx_def* %133 to i32*, !dbg !7917
  %bf.load254 = load i32, i32* %134, align 8, !dbg !7917
  %bf.clear255 = and i32 %bf.load254, 65535, !dbg !7917
  %cmp256 = icmp eq i32 %bf.clear255, 9, !dbg !7917
  br i1 %cmp256, label %cond.true263, label %lor.lhs.false258, !dbg !7917

lor.lhs.false258:                                 ; preds = %lor.lhs.false253
  %135 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !7917
  %bf.load259 = load i32, i32* %136, align 8, !dbg !7917
  %bf.clear260 = and i32 %bf.load259, 65535, !dbg !7917
  %cmp261 = icmp eq i32 %bf.clear260, 10, !dbg !7917
  br i1 %cmp261, label %cond.true263, label %cond.false285, !dbg !7917

cond.true263:                                     ; preds = %lor.lhs.false258, %lor.lhs.false253, %lor.lhs.false248, %if.else238
  %137 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %u264 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %137, i32 0, i32 1, !dbg !7917
  %fld265 = bitcast %union.u* %u264 to [1 x %union.rtunion_def]*, !dbg !7917
  %arrayidx266 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld265, i64 0, i64 5, !dbg !7917
  %rt_rtx267 = bitcast %union.rtunion_def* %arrayidx266 to %struct.rtx_def**, !dbg !7917
  %138 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx267, align 8, !dbg !7917
  %139 = bitcast %struct.rtx_def* %138 to i32*, !dbg !7917
  %bf.load268 = load i32, i32* %139, align 8, !dbg !7917
  %bf.clear269 = and i32 %bf.load268, 65535, !dbg !7917
  %cmp270 = icmp eq i32 %bf.clear269, 23, !dbg !7917
  br i1 %cmp270, label %cond.true272, label %cond.false277, !dbg !7917

cond.true272:                                     ; preds = %cond.true263
  %140 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %u273 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !7917
  %fld274 = bitcast %union.u* %u273 to [1 x %union.rtunion_def]*, !dbg !7917
  %arrayidx275 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld274, i64 0, i64 5, !dbg !7917
  %rt_rtx276 = bitcast %union.rtunion_def* %arrayidx275 to %struct.rtx_def**, !dbg !7917
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx276, align 8, !dbg !7917
  br label %cond.end283, !dbg !7917

cond.false277:                                    ; preds = %cond.true263
  %142 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %143 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7917
  %u278 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %143, i32 0, i32 1, !dbg !7917
  %fld279 = bitcast %union.u* %u278 to [1 x %union.rtunion_def]*, !dbg !7917
  %arrayidx280 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld279, i64 0, i64 5, !dbg !7917
  %rt_rtx281 = bitcast %union.rtunion_def* %arrayidx280 to %struct.rtx_def**, !dbg !7917
  %144 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx281, align 8, !dbg !7917
  %call282 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %142, %struct.rtx_def* %144), !dbg !7917
  br label %cond.end283, !dbg !7917

cond.end283:                                      ; preds = %cond.false277, %cond.true272
  %cond284 = phi %struct.rtx_def* [ %141, %cond.true272 ], [ %call282, %cond.false277 ], !dbg !7917
  br label %cond.end286, !dbg !7917

cond.false285:                                    ; preds = %lor.lhs.false258
  br label %cond.end286, !dbg !7917

cond.end286:                                      ; preds = %cond.false285, %cond.end283
  %cond287 = phi %struct.rtx_def* [ %cond284, %cond.end283 ], [ null, %cond.false285 ], !dbg !7917
  store %struct.rtx_def* %cond287, %struct.rtx_def** %set227, align 8, !dbg !7918
  %145 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7919
  %146 = load %struct.rtx_def*, %struct.rtx_def** %set227, align 8, !dbg !7920
  %u288 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %146, i32 0, i32 1, !dbg !7920
  %fld289 = bitcast %union.u* %u288 to [1 x %union.rtunion_def]*, !dbg !7920
  %arrayidx290 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld289, i64 0, i64 0, !dbg !7920
  %rt_rtx291 = bitcast %union.rtunion_def* %arrayidx290 to %struct.rtx_def**, !dbg !7920
  store %struct.rtx_def* %145, %struct.rtx_def** %rt_rtx291, align 8, !dbg !7921
  %147 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7922
  %u292 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !7922
  %fld293 = bitcast %union.u* %u292 to [1 x %union.rtunion_def]*, !dbg !7922
  %arrayidx294 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld293, i64 0, i64 5, !dbg !7922
  %rt_rtx295 = bitcast %union.rtunion_def* %arrayidx294 to %struct.rtx_def**, !dbg !7922
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx295, align 8, !dbg !7922
  store %struct.rtx_def* %148, %struct.rtx_def** %tmp, align 8, !dbg !7923
  br label %if.end296

if.end296:                                        ; preds = %cond.end286
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.then229
  %call298 = call %struct.rtx_def* @get_last_insn(), !dbg !7924
  store %struct.rtx_def* %call298, %struct.rtx_def** %last, align 8, !dbg !7925
  %149 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7926
  %tobool299 = icmp ne %struct.rtx_def* %149, null, !dbg !7926
  br i1 %tobool299, label %land.lhs.true300, label %if.else310, !dbg !7928

land.lhs.true300:                                 ; preds = %if.end297
  %150 = load %struct.rtx_def*, %struct.rtx_def** %orig_b, align 8, !dbg !7929
  %151 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !7930
  %call301 = call i32 @modified_in_p(%struct.rtx_def* %150, %struct.rtx_def* %151), !dbg !7931
  %tobool302 = icmp ne i32 %call301, 0, !dbg !7931
  br i1 %tobool302, label %if.then303, label %if.else310, !dbg !7932

if.then303:                                       ; preds = %land.lhs.true300
  %152 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7933
  %call304 = call %struct.rtx_def* @get_insns(), !dbg !7935
  %call305 = call %struct.rtx_def* @emit_insn_before(%struct.rtx_def* %152, %struct.rtx_def* %call304), !dbg !7936
  store %struct.rtx_def* %call305, %struct.rtx_def** %tmp, align 8, !dbg !7937
  %153 = load %struct.rtx_def*, %struct.rtx_def** %orig_a, align 8, !dbg !7938
  %154 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7940
  %call306 = call i32 @modified_in_p(%struct.rtx_def* %153, %struct.rtx_def* %154), !dbg !7941
  %tobool307 = icmp ne i32 %call306, 0, !dbg !7941
  br i1 %tobool307, label %if.then308, label %if.end309, !dbg !7942

if.then308:                                       ; preds = %if.then303
  br label %end_seq_and_fail, !dbg !7943

if.end309:                                        ; preds = %if.then303
  br label %if.end312, !dbg !7944

if.else310:                                       ; preds = %land.lhs.true300, %if.end297
  %155 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7945
  %call311 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %155), !dbg !7946
  store %struct.rtx_def* %call311, %struct.rtx_def** %tmp, align 8, !dbg !7947
  br label %if.end312

if.end312:                                        ; preds = %if.else310, %if.end309
  %156 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7948
  %call313 = call i32 @recog_memoized(%struct.rtx_def* %156), !dbg !7950
  %cmp314 = icmp slt i32 %call313, 0, !dbg !7951
  br i1 %cmp314, label %if.then316, label %if.end317, !dbg !7952

if.then316:                                       ; preds = %if.end312
  br label %end_seq_and_fail, !dbg !7953

if.end317:                                        ; preds = %if.end312
  br label %if.end318, !dbg !7954

if.end318:                                        ; preds = %if.end317, %if.end220
  %157 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7955
  %158 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !7956
  %159 = load i32, i32* %code, align 4, !dbg !7957
  %160 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7958
  %cond319 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %160, i32 0, i32 5, !dbg !7958
  %161 = load %struct.rtx_def*, %struct.rtx_def** %cond319, align 8, !dbg !7958
  %u320 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %161, i32 0, i32 1, !dbg !7958
  %fld321 = bitcast %union.u* %u320 to [1 x %union.rtunion_def]*, !dbg !7958
  %arrayidx322 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld321, i64 0, i64 0, !dbg !7958
  %rt_rtx323 = bitcast %union.rtunion_def* %arrayidx322 to %struct.rtx_def**, !dbg !7958
  %162 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx323, align 8, !dbg !7958
  %163 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7959
  %cond324 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %163, i32 0, i32 5, !dbg !7959
  %164 = load %struct.rtx_def*, %struct.rtx_def** %cond324, align 8, !dbg !7959
  %u325 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %164, i32 0, i32 1, !dbg !7959
  %fld326 = bitcast %union.u* %u325 to [1 x %union.rtunion_def]*, !dbg !7959
  %arrayidx327 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld326, i64 0, i64 1, !dbg !7959
  %rt_rtx328 = bitcast %union.rtunion_def* %arrayidx327 to %struct.rtx_def**, !dbg !7959
  %165 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx328, align 8, !dbg !7959
  %166 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !7960
  %167 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !7961
  %call329 = call %struct.rtx_def* @noce_emit_cmove(%struct.noce_if_info* %157, %struct.rtx_def* %158, i32 %159, %struct.rtx_def* %162, %struct.rtx_def* %165, %struct.rtx_def* %166, %struct.rtx_def* %167), !dbg !7962
  store %struct.rtx_def* %call329, %struct.rtx_def** %target, align 8, !dbg !7963
  %168 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7964
  %tobool330 = icmp ne %struct.rtx_def* %168, null, !dbg !7964
  br i1 %tobool330, label %if.end332, label %if.then331, !dbg !7966

if.then331:                                       ; preds = %if.end318
  br label %end_seq_and_fail, !dbg !7967

if.end332:                                        ; preds = %if.end318
  %169 = load i32, i32* %is_mem, align 4, !dbg !7968
  %tobool333 = icmp ne i32 %169, 0, !dbg !7968
  br i1 %tobool333, label %if.then334, label %if.else574, !dbg !7970

if.then334:                                       ; preds = %if.end332
  %170 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7971
  %x335 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %170, i32 0, i32 11, !dbg !7971
  %171 = load %struct.rtx_def*, %struct.rtx_def** %x335, align 8, !dbg !7971
  %172 = bitcast %struct.rtx_def* %171 to i32*, !dbg !7971
  %bf.load336 = load i32, i32* %172, align 8, !dbg !7971
  %bf.lshr337 = lshr i32 %bf.load336, 16, !dbg !7971
  %bf.clear338 = and i32 %bf.lshr337, 255, !dbg !7971
  %173 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !7973
  %call339 = call %struct.rtx_def* @gen_rtx_MEM(i32 %bf.clear338, %struct.rtx_def* %173), !dbg !7974
  store %struct.rtx_def* %call339, %struct.rtx_def** %tmp, align 8, !dbg !7975
  %174 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7976
  %a340 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %174, i32 0, i32 9, !dbg !7976
  %175 = load %struct.rtx_def*, %struct.rtx_def** %a340, align 8, !dbg !7976
  %176 = bitcast %struct.rtx_def* %175 to i32*, !dbg !7976
  %bf.load341 = load i32, i32* %176, align 8, !dbg !7976
  %bf.lshr342 = lshr i32 %bf.load341, 27, !dbg !7976
  %bf.clear343 = and i32 %bf.lshr342, 1, !dbg !7976
  %tobool344 = icmp ne i32 %bf.clear343, 0, !dbg !7976
  br i1 %tobool344, label %if.then351, label %lor.lhs.false345, !dbg !7978

lor.lhs.false345:                                 ; preds = %if.then334
  %177 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7979
  %b346 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %177, i32 0, i32 10, !dbg !7979
  %178 = load %struct.rtx_def*, %struct.rtx_def** %b346, align 8, !dbg !7979
  %179 = bitcast %struct.rtx_def* %178 to i32*, !dbg !7979
  %bf.load347 = load i32, i32* %179, align 8, !dbg !7979
  %bf.lshr348 = lshr i32 %bf.load347, 27, !dbg !7979
  %bf.clear349 = and i32 %bf.lshr348, 1, !dbg !7979
  %tobool350 = icmp ne i32 %bf.clear349, 0, !dbg !7979
  br i1 %tobool350, label %if.then351, label %if.end354, !dbg !7980

if.then351:                                       ; preds = %lor.lhs.false345, %if.then334
  %180 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7981
  %181 = bitcast %struct.rtx_def* %180 to i32*, !dbg !7981
  %bf.load352 = load i32, i32* %181, align 8, !dbg !7982
  %bf.clear353 = and i32 %bf.load352, -134217729, !dbg !7982
  %bf.set = or i32 %bf.clear353, 134217728, !dbg !7982
  store i32 %bf.set, i32* %181, align 8, !dbg !7982
  br label %if.end354, !dbg !7981

if.end354:                                        ; preds = %if.then351, %lor.lhs.false345
  %182 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7983
  %a355 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %182, i32 0, i32 9, !dbg !7983
  %183 = load %struct.rtx_def*, %struct.rtx_def** %a355, align 8, !dbg !7983
  %184 = bitcast %struct.rtx_def* %183 to i32*, !dbg !7983
  %bf.load356 = load i32, i32* %184, align 8, !dbg !7983
  %bf.lshr357 = lshr i32 %bf.load356, 28, !dbg !7983
  %bf.clear358 = and i32 %bf.lshr357, 1, !dbg !7983
  %tobool359 = icmp ne i32 %bf.clear358, 0, !dbg !7983
  br i1 %tobool359, label %land.lhs.true360, label %if.end370, !dbg !7985

land.lhs.true360:                                 ; preds = %if.end354
  %185 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7986
  %b361 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %185, i32 0, i32 10, !dbg !7986
  %186 = load %struct.rtx_def*, %struct.rtx_def** %b361, align 8, !dbg !7986
  %187 = bitcast %struct.rtx_def* %186 to i32*, !dbg !7986
  %bf.load362 = load i32, i32* %187, align 8, !dbg !7986
  %bf.lshr363 = lshr i32 %bf.load362, 28, !dbg !7986
  %bf.clear364 = and i32 %bf.lshr363, 1, !dbg !7986
  %tobool365 = icmp ne i32 %bf.clear364, 0, !dbg !7986
  br i1 %tobool365, label %if.then366, label %if.end370, !dbg !7987

if.then366:                                       ; preds = %land.lhs.true360
  %188 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7988
  %189 = bitcast %struct.rtx_def* %188 to i32*, !dbg !7988
  %bf.load367 = load i32, i32* %189, align 8, !dbg !7989
  %bf.clear368 = and i32 %bf.load367, -268435457, !dbg !7989
  %bf.set369 = or i32 %bf.clear368, 268435456, !dbg !7989
  store i32 %bf.set369, i32* %189, align 8, !dbg !7989
  br label %if.end370, !dbg !7988

if.end370:                                        ; preds = %if.then366, %land.lhs.true360, %if.end354
  %190 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7990
  %a371 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %190, i32 0, i32 9, !dbg !7990
  %191 = load %struct.rtx_def*, %struct.rtx_def** %a371, align 8, !dbg !7990
  %192 = bitcast %struct.rtx_def* %191 to i32*, !dbg !7990
  %bf.load372 = load i32, i32* %192, align 8, !dbg !7990
  %bf.lshr373 = lshr i32 %bf.load372, 31, !dbg !7990
  %tobool374 = icmp ne i32 %bf.lshr373, 0, !dbg !7990
  br i1 %tobool374, label %land.lhs.true375, label %if.end384, !dbg !7992

land.lhs.true375:                                 ; preds = %if.end370
  %193 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7993
  %b376 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %193, i32 0, i32 10, !dbg !7993
  %194 = load %struct.rtx_def*, %struct.rtx_def** %b376, align 8, !dbg !7993
  %195 = bitcast %struct.rtx_def* %194 to i32*, !dbg !7993
  %bf.load377 = load i32, i32* %195, align 8, !dbg !7993
  %bf.lshr378 = lshr i32 %bf.load377, 31, !dbg !7993
  %tobool379 = icmp ne i32 %bf.lshr378, 0, !dbg !7993
  br i1 %tobool379, label %if.then380, label %if.end384, !dbg !7994

if.then380:                                       ; preds = %land.lhs.true375
  %196 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !7995
  %197 = bitcast %struct.rtx_def* %196 to i32*, !dbg !7995
  %bf.load381 = load i32, i32* %197, align 8, !dbg !7996
  %bf.clear382 = and i32 %bf.load381, 2147483647, !dbg !7996
  %bf.set383 = or i32 %bf.clear382, -2147483648, !dbg !7996
  store i32 %bf.set383, i32* %197, align 8, !dbg !7996
  br label %if.end384, !dbg !7995

if.end384:                                        ; preds = %if.then380, %land.lhs.true375, %if.end370
  %198 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7997
  %a385 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %198, i32 0, i32 9, !dbg !7997
  %199 = load %struct.rtx_def*, %struct.rtx_def** %a385, align 8, !dbg !7997
  %u386 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %199, i32 0, i32 1, !dbg !7997
  %fld387 = bitcast %union.u* %u386 to [1 x %union.rtunion_def]*, !dbg !7997
  %arrayidx388 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld387, i64 0, i64 1, !dbg !7997
  %rt_mem389 = bitcast %union.rtunion_def* %arrayidx388 to %struct.mem_attrs**, !dbg !7997
  %200 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem389, align 8, !dbg !7997
  %cmp390 = icmp eq %struct.mem_attrs* %200, null, !dbg !7997
  br i1 %cmp390, label %cond.true392, label %cond.false393, !dbg !7997

cond.true392:                                     ; preds = %if.end384
  br label %cond.end399, !dbg !7997

cond.false393:                                    ; preds = %if.end384
  %201 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7997
  %a394 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %201, i32 0, i32 9, !dbg !7997
  %202 = load %struct.rtx_def*, %struct.rtx_def** %a394, align 8, !dbg !7997
  %u395 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %202, i32 0, i32 1, !dbg !7997
  %fld396 = bitcast %union.u* %u395 to [1 x %union.rtunion_def]*, !dbg !7997
  %arrayidx397 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld396, i64 0, i64 1, !dbg !7997
  %rt_mem398 = bitcast %union.rtunion_def* %arrayidx397 to %struct.mem_attrs**, !dbg !7997
  %203 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem398, align 8, !dbg !7997
  %alias = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %203, i32 0, i32 3, !dbg !7997
  %204 = load i32, i32* %alias, align 8, !dbg !7997
  br label %cond.end399, !dbg !7997

cond.end399:                                      ; preds = %cond.false393, %cond.true392
  %cond400 = phi i32 [ 0, %cond.true392 ], [ %204, %cond.false393 ], !dbg !7997
  %205 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7999
  %b401 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %205, i32 0, i32 10, !dbg !7999
  %206 = load %struct.rtx_def*, %struct.rtx_def** %b401, align 8, !dbg !7999
  %u402 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %206, i32 0, i32 1, !dbg !7999
  %fld403 = bitcast %union.u* %u402 to [1 x %union.rtunion_def]*, !dbg !7999
  %arrayidx404 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld403, i64 0, i64 1, !dbg !7999
  %rt_mem405 = bitcast %union.rtunion_def* %arrayidx404 to %struct.mem_attrs**, !dbg !7999
  %207 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem405, align 8, !dbg !7999
  %cmp406 = icmp eq %struct.mem_attrs* %207, null, !dbg !7999
  br i1 %cmp406, label %cond.true408, label %cond.false409, !dbg !7999

cond.true408:                                     ; preds = %cond.end399
  br label %cond.end416, !dbg !7999

cond.false409:                                    ; preds = %cond.end399
  %208 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !7999
  %b410 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %208, i32 0, i32 10, !dbg !7999
  %209 = load %struct.rtx_def*, %struct.rtx_def** %b410, align 8, !dbg !7999
  %u411 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %209, i32 0, i32 1, !dbg !7999
  %fld412 = bitcast %union.u* %u411 to [1 x %union.rtunion_def]*, !dbg !7999
  %arrayidx413 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld412, i64 0, i64 1, !dbg !7999
  %rt_mem414 = bitcast %union.rtunion_def* %arrayidx413 to %struct.mem_attrs**, !dbg !7999
  %210 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem414, align 8, !dbg !7999
  %alias415 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %210, i32 0, i32 3, !dbg !7999
  %211 = load i32, i32* %alias415, align 8, !dbg !7999
  br label %cond.end416, !dbg !7999

cond.end416:                                      ; preds = %cond.false409, %cond.true408
  %cond417 = phi i32 [ 0, %cond.true408 ], [ %211, %cond.false409 ], !dbg !7999
  %cmp418 = icmp eq i32 %cond400, %cond417, !dbg !8000
  br i1 %cmp418, label %if.then420, label %if.end438, !dbg !8001

if.then420:                                       ; preds = %cond.end416
  %212 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8002
  %213 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8003
  %a421 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %213, i32 0, i32 9, !dbg !8003
  %214 = load %struct.rtx_def*, %struct.rtx_def** %a421, align 8, !dbg !8003
  %u422 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %214, i32 0, i32 1, !dbg !8003
  %fld423 = bitcast %union.u* %u422 to [1 x %union.rtunion_def]*, !dbg !8003
  %arrayidx424 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld423, i64 0, i64 1, !dbg !8003
  %rt_mem425 = bitcast %union.rtunion_def* %arrayidx424 to %struct.mem_attrs**, !dbg !8003
  %215 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem425, align 8, !dbg !8003
  %cmp426 = icmp eq %struct.mem_attrs* %215, null, !dbg !8003
  br i1 %cmp426, label %cond.true428, label %cond.false429, !dbg !8003

cond.true428:                                     ; preds = %if.then420
  br label %cond.end436, !dbg !8003

cond.false429:                                    ; preds = %if.then420
  %216 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8003
  %a430 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %216, i32 0, i32 9, !dbg !8003
  %217 = load %struct.rtx_def*, %struct.rtx_def** %a430, align 8, !dbg !8003
  %u431 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %217, i32 0, i32 1, !dbg !8003
  %fld432 = bitcast %union.u* %u431 to [1 x %union.rtunion_def]*, !dbg !8003
  %arrayidx433 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld432, i64 0, i64 1, !dbg !8003
  %rt_mem434 = bitcast %union.rtunion_def* %arrayidx433 to %struct.mem_attrs**, !dbg !8003
  %218 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem434, align 8, !dbg !8003
  %alias435 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %218, i32 0, i32 3, !dbg !8003
  %219 = load i32, i32* %alias435, align 8, !dbg !8003
  br label %cond.end436, !dbg !8003

cond.end436:                                      ; preds = %cond.false429, %cond.true428
  %cond437 = phi i32 [ 0, %cond.true428 ], [ %219, %cond.false429 ], !dbg !8003
  call void @set_mem_alias_set(%struct.rtx_def* %212, i32 %cond437), !dbg !8004
  br label %if.end438, !dbg !8004

if.end438:                                        ; preds = %cond.end436, %cond.end416
  %220 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8005
  %221 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %a439 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %221, i32 0, i32 9, !dbg !8006
  %222 = load %struct.rtx_def*, %struct.rtx_def** %a439, align 8, !dbg !8006
  %u440 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %222, i32 0, i32 1, !dbg !8006
  %fld441 = bitcast %union.u* %u440 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx442 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld441, i64 0, i64 1, !dbg !8006
  %rt_mem443 = bitcast %union.rtunion_def* %arrayidx442 to %struct.mem_attrs**, !dbg !8006
  %223 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem443, align 8, !dbg !8006
  %cmp444 = icmp ne %struct.mem_attrs* %223, null, !dbg !8006
  br i1 %cmp444, label %cond.true446, label %cond.false452, !dbg !8006

cond.true446:                                     ; preds = %if.end438
  %224 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %a447 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %224, i32 0, i32 9, !dbg !8006
  %225 = load %struct.rtx_def*, %struct.rtx_def** %a447, align 8, !dbg !8006
  %u448 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %225, i32 0, i32 1, !dbg !8006
  %fld449 = bitcast %union.u* %u448 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx450 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld449, i64 0, i64 1, !dbg !8006
  %rt_mem451 = bitcast %union.rtunion_def* %arrayidx450 to %struct.mem_attrs**, !dbg !8006
  %226 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem451, align 8, !dbg !8006
  %align = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %226, i32 0, i32 4, !dbg !8006
  %227 = load i32, i32* %align, align 4, !dbg !8006
  br label %cond.end453, !dbg !8006

cond.false452:                                    ; preds = %if.end438
  br label %cond.end453, !dbg !8006

cond.end453:                                      ; preds = %cond.false452, %cond.true446
  %cond454 = phi i32 [ %227, %cond.true446 ], [ 8, %cond.false452 ], !dbg !8006
  %228 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %b455 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %228, i32 0, i32 10, !dbg !8006
  %229 = load %struct.rtx_def*, %struct.rtx_def** %b455, align 8, !dbg !8006
  %u456 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %229, i32 0, i32 1, !dbg !8006
  %fld457 = bitcast %union.u* %u456 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx458 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld457, i64 0, i64 1, !dbg !8006
  %rt_mem459 = bitcast %union.rtunion_def* %arrayidx458 to %struct.mem_attrs**, !dbg !8006
  %230 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem459, align 8, !dbg !8006
  %cmp460 = icmp ne %struct.mem_attrs* %230, null, !dbg !8006
  br i1 %cmp460, label %cond.true462, label %cond.false469, !dbg !8006

cond.true462:                                     ; preds = %cond.end453
  %231 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %b463 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %231, i32 0, i32 10, !dbg !8006
  %232 = load %struct.rtx_def*, %struct.rtx_def** %b463, align 8, !dbg !8006
  %u464 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %232, i32 0, i32 1, !dbg !8006
  %fld465 = bitcast %union.u* %u464 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx466 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld465, i64 0, i64 1, !dbg !8006
  %rt_mem467 = bitcast %union.rtunion_def* %arrayidx466 to %struct.mem_attrs**, !dbg !8006
  %233 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem467, align 8, !dbg !8006
  %align468 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %233, i32 0, i32 4, !dbg !8006
  %234 = load i32, i32* %align468, align 4, !dbg !8006
  br label %cond.end470, !dbg !8006

cond.false469:                                    ; preds = %cond.end453
  br label %cond.end470, !dbg !8006

cond.end470:                                      ; preds = %cond.false469, %cond.true462
  %cond471 = phi i32 [ %234, %cond.true462 ], [ 8, %cond.false469 ], !dbg !8006
  %cmp472 = icmp ult i32 %cond454, %cond471, !dbg !8006
  br i1 %cmp472, label %cond.true474, label %cond.false492, !dbg !8006

cond.true474:                                     ; preds = %cond.end470
  %235 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %a475 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %235, i32 0, i32 9, !dbg !8006
  %236 = load %struct.rtx_def*, %struct.rtx_def** %a475, align 8, !dbg !8006
  %u476 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %236, i32 0, i32 1, !dbg !8006
  %fld477 = bitcast %union.u* %u476 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx478 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld477, i64 0, i64 1, !dbg !8006
  %rt_mem479 = bitcast %union.rtunion_def* %arrayidx478 to %struct.mem_attrs**, !dbg !8006
  %237 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem479, align 8, !dbg !8006
  %cmp480 = icmp ne %struct.mem_attrs* %237, null, !dbg !8006
  br i1 %cmp480, label %cond.true482, label %cond.false489, !dbg !8006

cond.true482:                                     ; preds = %cond.true474
  %238 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %a483 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %238, i32 0, i32 9, !dbg !8006
  %239 = load %struct.rtx_def*, %struct.rtx_def** %a483, align 8, !dbg !8006
  %u484 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %239, i32 0, i32 1, !dbg !8006
  %fld485 = bitcast %union.u* %u484 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx486 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld485, i64 0, i64 1, !dbg !8006
  %rt_mem487 = bitcast %union.rtunion_def* %arrayidx486 to %struct.mem_attrs**, !dbg !8006
  %240 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem487, align 8, !dbg !8006
  %align488 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %240, i32 0, i32 4, !dbg !8006
  %241 = load i32, i32* %align488, align 4, !dbg !8006
  br label %cond.end490, !dbg !8006

cond.false489:                                    ; preds = %cond.true474
  br label %cond.end490, !dbg !8006

cond.end490:                                      ; preds = %cond.false489, %cond.true482
  %cond491 = phi i32 [ %241, %cond.true482 ], [ 8, %cond.false489 ], !dbg !8006
  br label %cond.end510, !dbg !8006

cond.false492:                                    ; preds = %cond.end470
  %242 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %b493 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %242, i32 0, i32 10, !dbg !8006
  %243 = load %struct.rtx_def*, %struct.rtx_def** %b493, align 8, !dbg !8006
  %u494 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %243, i32 0, i32 1, !dbg !8006
  %fld495 = bitcast %union.u* %u494 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx496 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld495, i64 0, i64 1, !dbg !8006
  %rt_mem497 = bitcast %union.rtunion_def* %arrayidx496 to %struct.mem_attrs**, !dbg !8006
  %244 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem497, align 8, !dbg !8006
  %cmp498 = icmp ne %struct.mem_attrs* %244, null, !dbg !8006
  br i1 %cmp498, label %cond.true500, label %cond.false507, !dbg !8006

cond.true500:                                     ; preds = %cond.false492
  %245 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8006
  %b501 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %245, i32 0, i32 10, !dbg !8006
  %246 = load %struct.rtx_def*, %struct.rtx_def** %b501, align 8, !dbg !8006
  %u502 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %246, i32 0, i32 1, !dbg !8006
  %fld503 = bitcast %union.u* %u502 to [1 x %union.rtunion_def]*, !dbg !8006
  %arrayidx504 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld503, i64 0, i64 1, !dbg !8006
  %rt_mem505 = bitcast %union.rtunion_def* %arrayidx504 to %struct.mem_attrs**, !dbg !8006
  %247 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem505, align 8, !dbg !8006
  %align506 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %247, i32 0, i32 4, !dbg !8006
  %248 = load i32, i32* %align506, align 4, !dbg !8006
  br label %cond.end508, !dbg !8006

cond.false507:                                    ; preds = %cond.false492
  br label %cond.end508, !dbg !8006

cond.end508:                                      ; preds = %cond.false507, %cond.true500
  %cond509 = phi i32 [ %248, %cond.true500 ], [ 8, %cond.false507 ], !dbg !8006
  br label %cond.end510, !dbg !8006

cond.end510:                                      ; preds = %cond.end508, %cond.end490
  %cond511 = phi i32 [ %cond491, %cond.end490 ], [ %cond509, %cond.end508 ], !dbg !8006
  call void @set_mem_align(%struct.rtx_def* %220, i32 %cond511), !dbg !8007
  %249 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8008
  %a512 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %249, i32 0, i32 9, !dbg !8008
  %250 = load %struct.rtx_def*, %struct.rtx_def** %a512, align 8, !dbg !8008
  %u513 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %250, i32 0, i32 1, !dbg !8008
  %fld514 = bitcast %union.u* %u513 to [1 x %union.rtunion_def]*, !dbg !8008
  %arrayidx515 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld514, i64 0, i64 1, !dbg !8008
  %rt_mem516 = bitcast %union.rtunion_def* %arrayidx515 to %struct.mem_attrs**, !dbg !8008
  %251 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem516, align 8, !dbg !8008
  %cmp517 = icmp eq %struct.mem_attrs* %251, null, !dbg !8008
  br i1 %cmp517, label %cond.true519, label %cond.false520, !dbg !8008

cond.true519:                                     ; preds = %cond.end510
  br label %cond.end528, !dbg !8008

cond.false520:                                    ; preds = %cond.end510
  %252 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8008
  %a521 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %252, i32 0, i32 9, !dbg !8008
  %253 = load %struct.rtx_def*, %struct.rtx_def** %a521, align 8, !dbg !8008
  %u522 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %253, i32 0, i32 1, !dbg !8008
  %fld523 = bitcast %union.u* %u522 to [1 x %union.rtunion_def]*, !dbg !8008
  %arrayidx524 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld523, i64 0, i64 1, !dbg !8008
  %rt_mem525 = bitcast %union.rtunion_def* %arrayidx524 to %struct.mem_attrs**, !dbg !8008
  %254 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem525, align 8, !dbg !8008
  %addrspace526 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %254, i32 0, i32 5, !dbg !8008
  %255 = load i8, i8* %addrspace526, align 8, !dbg !8008
  %conv527 = zext i8 %255 to i32, !dbg !8008
  br label %cond.end528, !dbg !8008

cond.end528:                                      ; preds = %cond.false520, %cond.true519
  %cond529 = phi i32 [ 0, %cond.true519 ], [ %conv527, %cond.false520 ], !dbg !8008
  %256 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8008
  %b530 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %256, i32 0, i32 10, !dbg !8008
  %257 = load %struct.rtx_def*, %struct.rtx_def** %b530, align 8, !dbg !8008
  %u531 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %257, i32 0, i32 1, !dbg !8008
  %fld532 = bitcast %union.u* %u531 to [1 x %union.rtunion_def]*, !dbg !8008
  %arrayidx533 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld532, i64 0, i64 1, !dbg !8008
  %rt_mem534 = bitcast %union.rtunion_def* %arrayidx533 to %struct.mem_attrs**, !dbg !8008
  %258 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem534, align 8, !dbg !8008
  %cmp535 = icmp eq %struct.mem_attrs* %258, null, !dbg !8008
  br i1 %cmp535, label %cond.true537, label %cond.false538, !dbg !8008

cond.true537:                                     ; preds = %cond.end528
  br label %cond.end546, !dbg !8008

cond.false538:                                    ; preds = %cond.end528
  %259 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8008
  %b539 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %259, i32 0, i32 10, !dbg !8008
  %260 = load %struct.rtx_def*, %struct.rtx_def** %b539, align 8, !dbg !8008
  %u540 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %260, i32 0, i32 1, !dbg !8008
  %fld541 = bitcast %union.u* %u540 to [1 x %union.rtunion_def]*, !dbg !8008
  %arrayidx542 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld541, i64 0, i64 1, !dbg !8008
  %rt_mem543 = bitcast %union.rtunion_def* %arrayidx542 to %struct.mem_attrs**, !dbg !8008
  %261 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem543, align 8, !dbg !8008
  %addrspace544 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %261, i32 0, i32 5, !dbg !8008
  %262 = load i8, i8* %addrspace544, align 8, !dbg !8008
  %conv545 = zext i8 %262 to i32, !dbg !8008
  br label %cond.end546, !dbg !8008

cond.end546:                                      ; preds = %cond.false538, %cond.true537
  %cond547 = phi i32 [ 0, %cond.true537 ], [ %conv545, %cond.false538 ], !dbg !8008
  %cmp548 = icmp eq i32 %cond529, %cond547, !dbg !8008
  br i1 %cmp548, label %cond.false551, label %cond.true550, !dbg !8008

cond.true550:                                     ; preds = %cond.end546
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 1486, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8008
  br label %cond.end552, !dbg !8008

cond.false551:                                    ; preds = %cond.end546
  br label %cond.end552, !dbg !8008

cond.end552:                                      ; preds = %cond.false551, %cond.true550
  %cond553 = phi i32 [ 0, %cond.true550 ], [ 0, %cond.false551 ], !dbg !8008
  %263 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8009
  %264 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8010
  %a554 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %264, i32 0, i32 9, !dbg !8010
  %265 = load %struct.rtx_def*, %struct.rtx_def** %a554, align 8, !dbg !8010
  %u555 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %265, i32 0, i32 1, !dbg !8010
  %fld556 = bitcast %union.u* %u555 to [1 x %union.rtunion_def]*, !dbg !8010
  %arrayidx557 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld556, i64 0, i64 1, !dbg !8010
  %rt_mem558 = bitcast %union.rtunion_def* %arrayidx557 to %struct.mem_attrs**, !dbg !8010
  %266 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem558, align 8, !dbg !8010
  %cmp559 = icmp eq %struct.mem_attrs* %266, null, !dbg !8010
  br i1 %cmp559, label %cond.true561, label %cond.false562, !dbg !8010

cond.true561:                                     ; preds = %cond.end552
  br label %cond.end570, !dbg !8010

cond.false562:                                    ; preds = %cond.end552
  %267 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8010
  %a563 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %267, i32 0, i32 9, !dbg !8010
  %268 = load %struct.rtx_def*, %struct.rtx_def** %a563, align 8, !dbg !8010
  %u564 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %268, i32 0, i32 1, !dbg !8010
  %fld565 = bitcast %union.u* %u564 to [1 x %union.rtunion_def]*, !dbg !8010
  %arrayidx566 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld565, i64 0, i64 1, !dbg !8010
  %rt_mem567 = bitcast %union.rtunion_def* %arrayidx566 to %struct.mem_attrs**, !dbg !8010
  %269 = load %struct.mem_attrs*, %struct.mem_attrs** %rt_mem567, align 8, !dbg !8010
  %addrspace568 = getelementptr inbounds %struct.mem_attrs, %struct.mem_attrs* %269, i32 0, i32 5, !dbg !8010
  %270 = load i8, i8* %addrspace568, align 8, !dbg !8010
  %conv569 = zext i8 %270 to i32, !dbg !8010
  br label %cond.end570, !dbg !8010

cond.end570:                                      ; preds = %cond.false562, %cond.true561
  %cond571 = phi i32 [ 0, %cond.true561 ], [ %conv569, %cond.false562 ], !dbg !8010
  %conv572 = trunc i32 %cond571 to i8, !dbg !8010
  call void @set_mem_addr_space(%struct.rtx_def* %263, i8 zeroext %conv572), !dbg !8011
  %271 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8012
  %x573 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %271, i32 0, i32 11, !dbg !8013
  %272 = load %struct.rtx_def*, %struct.rtx_def** %x573, align 8, !dbg !8013
  %273 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8014
  call void @noce_emit_move_insn(%struct.rtx_def* %272, %struct.rtx_def* %273), !dbg !8015
  br label %if.end579, !dbg !8016

if.else574:                                       ; preds = %if.end332
  %274 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8017
  %275 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8019
  %cmp575 = icmp ne %struct.rtx_def* %274, %275, !dbg !8020
  br i1 %cmp575, label %if.then577, label %if.end578, !dbg !8021

if.then577:                                       ; preds = %if.else574
  %276 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8022
  %277 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8023
  call void @noce_emit_move_insn(%struct.rtx_def* %276, %struct.rtx_def* %277), !dbg !8024
  br label %if.end578, !dbg !8024

if.end578:                                        ; preds = %if.then577, %if.else574
  br label %if.end579

if.end579:                                        ; preds = %if.end578, %cond.end570
  %278 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8025
  %call580 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %278), !dbg !8026
  store %struct.rtx_def* %call580, %struct.rtx_def** %tmp, align 8, !dbg !8027
  %279 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8028
  %tobool581 = icmp ne %struct.rtx_def* %279, null, !dbg !8028
  br i1 %tobool581, label %if.end583, label %if.then582, !dbg !8030

if.then582:                                       ; preds = %if.end579
  store i32 0, i32* %retval, align 4, !dbg !8031
  br label %return, !dbg !8031

if.end583:                                        ; preds = %if.end579
  %280 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8032
  %281 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8033
  %jump584 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %281, i32 0, i32 4, !dbg !8034
  %282 = load %struct.rtx_def*, %struct.rtx_def** %jump584, align 8, !dbg !8034
  %283 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8035
  %insn_a585 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %283, i32 0, i32 7, !dbg !8035
  %284 = load %struct.rtx_def*, %struct.rtx_def** %insn_a585, align 8, !dbg !8035
  %u586 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %284, i32 0, i32 1, !dbg !8035
  %fld587 = bitcast %union.u* %u586 to [1 x %union.rtunion_def]*, !dbg !8035
  %arrayidx588 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld587, i64 0, i64 4, !dbg !8035
  %rt_int = bitcast %union.rtunion_def* %arrayidx588 to i32*, !dbg !8035
  %285 = load i32, i32* %rt_int, align 8, !dbg !8035
  %call589 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %280, %struct.rtx_def* %282, i32 %285), !dbg !8036
  store i32 1, i32* %retval, align 4, !dbg !8037
  br label %return, !dbg !8037

end_seq_and_fail:                                 ; preds = %if.then331, %if.then316, %if.then308, %if.then237, %if.then218, %if.then153
  call void @llvm.dbg.label(metadata !8038), !dbg !8039
  call void @end_sequence(), !dbg !8040
  store i32 0, i32* %retval, align 4, !dbg !8041
  br label %return, !dbg !8041

return:                                           ; preds = %end_seq_and_fail, %if.end583, %if.then582, %if.then111, %if.then88, %if.then64
  %286 = load i32, i32* %retval, align 4, !dbg !8042
  ret i32 %286, !dbg !8042
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @noce_try_sign_mask(%struct.noce_if_info* %if_info) #0 !dbg !8043 {
entry:
  %retval = alloca i32, align 4
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  %m = alloca %struct.rtx_def*, align 8
  %c = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  %mode = alloca i32, align 4
  %code = alloca i32, align 4
  %t_unconditional = alloca i8, align 1
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !8044, metadata !DIExpression()), !dbg !8045
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !8046, metadata !DIExpression()), !dbg !8047
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !8048, metadata !DIExpression()), !dbg !8049
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %m, metadata !8050, metadata !DIExpression()), !dbg !8051
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %c, metadata !8052, metadata !DIExpression()), !dbg !8053
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8054, metadata !DIExpression()), !dbg !8055
  call void @llvm.dbg.declare(metadata i32* %mode, metadata !8056, metadata !DIExpression()), !dbg !8057
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8058, metadata !DIExpression()), !dbg !8059
  call void @llvm.dbg.declare(metadata i8* %t_unconditional, metadata !8060, metadata !DIExpression()), !dbg !8061
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8062
  %cond1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 5, !dbg !8063
  %1 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !8063
  store %struct.rtx_def* %1, %struct.rtx_def** %cond, align 8, !dbg !8064
  %2 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8065
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8065
  %bf.load = load i32, i32* %3, align 8, !dbg !8065
  %bf.clear = and i32 %bf.load, 65535, !dbg !8065
  store i32 %bf.clear, i32* %code, align 4, !dbg !8066
  %4 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8067
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !8067
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8067
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8067
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8067
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8067
  store %struct.rtx_def* %5, %struct.rtx_def** %m, align 8, !dbg !8068
  %6 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8069
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8069
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !8069
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !8069
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !8069
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !8069
  store %struct.rtx_def* %7, %struct.rtx_def** %c, align 8, !dbg !8070
  store %struct.rtx_def* null, %struct.rtx_def** %t, align 8, !dbg !8071
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8072
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 9, !dbg !8074
  %9 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !8074
  %10 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8075
  %cmp = icmp eq %struct.rtx_def* %9, %10, !dbg !8076
  br i1 %cmp, label %if.then, label %if.else, !dbg !8077

if.then:                                          ; preds = %entry
  %11 = load i32, i32* %code, align 4, !dbg !8078
  %cmp6 = icmp eq i32 %11, 85, !dbg !8081
  br i1 %cmp6, label %land.lhs.true, label %lor.lhs.false, !dbg !8082

land.lhs.true:                                    ; preds = %if.then
  %12 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !8083
  %13 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8084
  %cmp7 = icmp eq %struct.rtx_def* %12, %13, !dbg !8085
  br i1 %cmp7, label %if.then11, label %lor.lhs.false, !dbg !8086

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then
  %14 = load i32, i32* %code, align 4, !dbg !8087
  %cmp8 = icmp eq i32 %14, 84, !dbg !8088
  br i1 %cmp8, label %land.lhs.true9, label %if.end, !dbg !8089

land.lhs.true9:                                   ; preds = %lor.lhs.false
  %15 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !8090
  %16 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !8091
  %cmp10 = icmp eq %struct.rtx_def* %15, %16, !dbg !8092
  br i1 %cmp10, label %if.then11, label %if.end, !dbg !8093

if.then11:                                        ; preds = %land.lhs.true9, %land.lhs.true
  %17 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8094
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %17, i32 0, i32 10, !dbg !8095
  %18 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !8095
  store %struct.rtx_def* %18, %struct.rtx_def** %t, align 8, !dbg !8096
  br label %if.end, !dbg !8097

if.end:                                           ; preds = %if.then11, %land.lhs.true9, %lor.lhs.false
  br label %if.end26, !dbg !8098

if.else:                                          ; preds = %entry
  %19 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8099
  %b12 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %19, i32 0, i32 10, !dbg !8101
  %20 = load %struct.rtx_def*, %struct.rtx_def** %b12, align 8, !dbg !8101
  %21 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8102
  %cmp13 = icmp eq %struct.rtx_def* %20, %21, !dbg !8103
  br i1 %cmp13, label %if.then14, label %if.end25, !dbg !8104

if.then14:                                        ; preds = %if.else
  %22 = load i32, i32* %code, align 4, !dbg !8105
  %cmp15 = icmp eq i32 %22, 82, !dbg !8108
  br i1 %cmp15, label %land.lhs.true16, label %lor.lhs.false18, !dbg !8109

land.lhs.true16:                                  ; preds = %if.then14
  %23 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !8110
  %24 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8111
  %cmp17 = icmp eq %struct.rtx_def* %23, %24, !dbg !8112
  br i1 %cmp17, label %if.then22, label %lor.lhs.false18, !dbg !8113

lor.lhs.false18:                                  ; preds = %land.lhs.true16, %if.then14
  %25 = load i32, i32* %code, align 4, !dbg !8114
  %cmp19 = icmp eq i32 %25, 83, !dbg !8115
  br i1 %cmp19, label %land.lhs.true20, label %if.end24, !dbg !8116

land.lhs.true20:                                  ; preds = %lor.lhs.false18
  %26 = load %struct.rtx_def*, %struct.rtx_def** %c, align 8, !dbg !8117
  %27 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 63), align 8, !dbg !8118
  %cmp21 = icmp eq %struct.rtx_def* %26, %27, !dbg !8119
  br i1 %cmp21, label %if.then22, label %if.end24, !dbg !8120

if.then22:                                        ; preds = %land.lhs.true20, %land.lhs.true16
  %28 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8121
  %a23 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %28, i32 0, i32 9, !dbg !8122
  %29 = load %struct.rtx_def*, %struct.rtx_def** %a23, align 8, !dbg !8122
  store %struct.rtx_def* %29, %struct.rtx_def** %t, align 8, !dbg !8123
  br label %if.end24, !dbg !8124

if.end24:                                         ; preds = %if.then22, %land.lhs.true20, %lor.lhs.false18
  br label %if.end25, !dbg !8125

if.end25:                                         ; preds = %if.end24, %if.else
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %if.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8126
  %tobool = icmp ne %struct.rtx_def* %30, null, !dbg !8126
  br i1 %tobool, label %lor.lhs.false27, label %if.then29, !dbg !8128

lor.lhs.false27:                                  ; preds = %if.end26
  %31 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8129
  %call = call i32 @side_effects_p(%struct.rtx_def* %31), !dbg !8130
  %tobool28 = icmp ne i32 %call, 0, !dbg !8130
  br i1 %tobool28, label %if.then29, label %if.end30, !dbg !8131

if.then29:                                        ; preds = %lor.lhs.false27, %if.end26
  store i32 0, i32* %retval, align 4, !dbg !8132
  br label %return, !dbg !8132

if.end30:                                         ; preds = %lor.lhs.false27
  %32 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8133
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !8133
  %bf.load31 = load i32, i32* %33, align 8, !dbg !8133
  %bf.lshr = lshr i32 %bf.load31, 16, !dbg !8133
  %bf.clear32 = and i32 %bf.lshr, 255, !dbg !8133
  store i32 %bf.clear32, i32* %mode, align 4, !dbg !8134
  %34 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8, !dbg !8135
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !8135
  %bf.load33 = load i32, i32* %35, align 8, !dbg !8135
  %bf.lshr34 = lshr i32 %bf.load33, 16, !dbg !8135
  %bf.clear35 = and i32 %bf.lshr34, 255, !dbg !8135
  %36 = load i32, i32* %mode, align 4, !dbg !8137
  %cmp36 = icmp ne i32 %bf.clear35, %36, !dbg !8138
  br i1 %cmp36, label %if.then37, label %if.end38, !dbg !8139

if.then37:                                        ; preds = %if.end30
  store i32 0, i32* %retval, align 4, !dbg !8140
  br label %return, !dbg !8140

if.end38:                                         ; preds = %if.end30
  %37 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8141
  %38 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8142
  %b39 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %38, i32 0, i32 10, !dbg !8143
  %39 = load %struct.rtx_def*, %struct.rtx_def** %b39, align 8, !dbg !8143
  %cmp40 = icmp eq %struct.rtx_def* %37, %39, !dbg !8144
  br i1 %cmp40, label %land.rhs, label %land.end, !dbg !8145

land.rhs:                                         ; preds = %if.end38
  %40 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8146
  %insn_b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %40, i32 0, i32 8, !dbg !8147
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn_b, align 8, !dbg !8147
  %cmp41 = icmp eq %struct.rtx_def* %41, null, !dbg !8148
  br i1 %cmp41, label %lor.end, label %lor.rhs, !dbg !8149

lor.rhs:                                          ; preds = %land.rhs
  %42 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8150
  %insn_b42 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %42, i32 0, i32 8, !dbg !8150
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn_b42, align 8, !dbg !8150
  %u43 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %43, i32 0, i32 1, !dbg !8150
  %fld44 = bitcast %union.u* %u43 to [1 x %union.rtunion_def]*, !dbg !8150
  %arrayidx45 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld44, i64 0, i64 3, !dbg !8150
  %rt_bb = bitcast %union.rtunion_def* %arrayidx45 to %struct.basic_block_def**, !dbg !8150
  %44 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8150
  %45 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8151
  %test_bb = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %45, i32 0, i32 0, !dbg !8152
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !8152
  %cmp46 = icmp eq %struct.basic_block_def* %44, %46, !dbg !8153
  br label %lor.end, !dbg !8149

lor.end:                                          ; preds = %lor.rhs, %land.rhs
  %47 = phi i1 [ true, %land.rhs ], [ %cmp46, %lor.rhs ]
  br label %land.end

land.end:                                         ; preds = %lor.end, %if.end38
  %48 = phi i1 [ false, %if.end38 ], [ %47, %lor.end ], !dbg !8154
  %land.ext = zext i1 %48 to i32, !dbg !8145
  %conv = trunc i32 %land.ext to i8, !dbg !8155
  store i8 %conv, i8* %t_unconditional, align 1, !dbg !8156
  %49 = load i8, i8* %t_unconditional, align 1, !dbg !8157
  %conv47 = zext i8 %49 to i32, !dbg !8157
  %tobool48 = icmp ne i32 %conv47, 0, !dbg !8157
  br i1 %tobool48, label %if.end56, label %lor.lhs.false49, !dbg !8159

lor.lhs.false49:                                  ; preds = %land.end
  %50 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8160
  %51 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8161
  %test_bb50 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %51, i32 0, i32 0, !dbg !8162
  %52 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb50, align 8, !dbg !8162
  %call51 = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %52), !dbg !8163
  %call52 = call i32 @rtx_cost(%struct.rtx_def* %50, i32 23, i8 zeroext %call51), !dbg !8164
  %cmp53 = icmp slt i32 %call52, 8, !dbg !8165
  br i1 %cmp53, label %if.end56, label %if.then55, !dbg !8166

if.then55:                                        ; preds = %lor.lhs.false49
  store i32 0, i32* %retval, align 4, !dbg !8167
  br label %return, !dbg !8167

if.end56:                                         ; preds = %lor.lhs.false49, %land.end
  call void @start_sequence(), !dbg !8168
  %53 = load i32, i32* %mode, align 4, !dbg !8169
  %call57 = call %struct.rtx_def* @gen_reg_rtx(i32 %53), !dbg !8170
  %54 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8, !dbg !8171
  %55 = load %struct.rtx_def*, %struct.rtx_def** getelementptr inbounds ([129 x %struct.rtx_def*], [129 x %struct.rtx_def*]* @const_int_rtx, i64 0, i64 64), align 16, !dbg !8172
  %56 = load i32, i32* %mode, align 4, !dbg !8173
  %call58 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %call57, i32 85, %struct.rtx_def* %54, %struct.rtx_def* %55, i32 %56, i32 0, i32 -1), !dbg !8174
  store %struct.rtx_def* %call58, %struct.rtx_def** %m, align 8, !dbg !8175
  %57 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8, !dbg !8176
  %tobool59 = icmp ne %struct.rtx_def* %57, null, !dbg !8176
  br i1 %tobool59, label %cond.true, label %cond.false, !dbg !8176

cond.true:                                        ; preds = %if.end56
  %58 = load i32, i32* %mode, align 4, !dbg !8177
  %59 = load %struct.rtx_def*, %struct.rtx_def** %m, align 8, !dbg !8178
  %60 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8179
  %call60 = call %struct.rtx_def* @expand_binop(i32 %58, %struct.optab_d* getelementptr inbounds ([159 x %struct.optab_d], [159 x %struct.optab_d]* @optab_table, i64 0, i64 41), %struct.rtx_def* %59, %struct.rtx_def* %60, %struct.rtx_def* null, i32 0, i32 0), !dbg !8180
  br label %cond.end, !dbg !8176

cond.false:                                       ; preds = %if.end56
  br label %cond.end, !dbg !8176

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond61 = phi %struct.rtx_def* [ %call60, %cond.true ], [ null, %cond.false ], !dbg !8176
  store %struct.rtx_def* %cond61, %struct.rtx_def** %t, align 8, !dbg !8181
  %61 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8182
  %tobool62 = icmp ne %struct.rtx_def* %61, null, !dbg !8182
  br i1 %tobool62, label %if.end64, label %if.then63, !dbg !8184

if.then63:                                        ; preds = %cond.end
  call void @end_sequence(), !dbg !8185
  store i32 0, i32* %retval, align 4, !dbg !8187
  br label %return, !dbg !8187

if.end64:                                         ; preds = %cond.end
  %62 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8188
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %62, i32 0, i32 11, !dbg !8189
  %63 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8189
  %64 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !8190
  call void @noce_emit_move_insn(%struct.rtx_def* %63, %struct.rtx_def* %64), !dbg !8191
  %65 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8192
  %call65 = call %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %65), !dbg !8193
  store %struct.rtx_def* %call65, %struct.rtx_def** %seq, align 8, !dbg !8194
  %66 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8195
  %tobool66 = icmp ne %struct.rtx_def* %66, null, !dbg !8195
  br i1 %tobool66, label %if.end68, label %if.then67, !dbg !8197

if.then67:                                        ; preds = %if.end64
  store i32 0, i32* %retval, align 4, !dbg !8198
  br label %return, !dbg !8198

if.end68:                                         ; preds = %if.end64
  %67 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8199
  %68 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8200
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %68, i32 0, i32 4, !dbg !8201
  %69 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8201
  %70 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8202
  %insn_a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %70, i32 0, i32 7, !dbg !8202
  %71 = load %struct.rtx_def*, %struct.rtx_def** %insn_a, align 8, !dbg !8202
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !8202
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !8202
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 4, !dbg !8202
  %rt_int = bitcast %union.rtunion_def* %arrayidx71 to i32*, !dbg !8202
  %72 = load i32, i32* %rt_int, align 8, !dbg !8202
  %call72 = call %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def* %67, %struct.rtx_def* %69, i32 %72), !dbg !8203
  store i32 1, i32* %retval, align 4, !dbg !8204
  br label %return, !dbg !8204

return:                                           ; preds = %if.end68, %if.then67, %if.then63, %if.then55, %if.then37, %if.then29
  %73 = load i32, i32* %retval, align 4, !dbg !8205
  ret i32 %73, !dbg !8205
}

declare dso_local void @start_sequence() #1

; Function Attrs: noinline nounwind uwtable
define internal void @noce_emit_move_insn(%struct.rtx_def* %x, %struct.rtx_def* %y) #0 !dbg !8206 {
entry:
  %x.addr = alloca %struct.rtx_def*, align 8
  %y.addr = alloca %struct.rtx_def*, align 8
  %outmode = alloca i32, align 4
  %outer = alloca %struct.rtx_def*, align 8
  %inner = alloca %struct.rtx_def*, align 8
  %bitpos = alloca i32, align 4
  %seq = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %ot = alloca %struct.optab_d*, align 8
  %op = alloca %struct.rtx_def*, align 8
  %size = alloca i64, align 8
  %start = alloca i64, align 8
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8209, metadata !DIExpression()), !dbg !8210
  store %struct.rtx_def* %y, %struct.rtx_def** %y.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %y.addr, metadata !8211, metadata !DIExpression()), !dbg !8212
  call void @llvm.dbg.declare(metadata i32* %outmode, metadata !8213, metadata !DIExpression()), !dbg !8214
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %outer, metadata !8215, metadata !DIExpression()), !dbg !8216
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %inner, metadata !8217, metadata !DIExpression()), !dbg !8218
  call void @llvm.dbg.declare(metadata i32* %bitpos, metadata !8219, metadata !DIExpression()), !dbg !8220
  %0 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8221
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !8221
  %bf.load = load i32, i32* %1, align 8, !dbg !8221
  %bf.clear = and i32 %bf.load, 65535, !dbg !8221
  %cmp = icmp ne i32 %bf.clear, 40, !dbg !8223
  br i1 %cmp, label %if.then, label %if.end109, !dbg !8224

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8225, metadata !DIExpression()), !dbg !8227
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8228, metadata !DIExpression()), !dbg !8229
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !8230, metadata !DIExpression()), !dbg !8231
  call void @llvm.dbg.declare(metadata %struct.optab_d** %ot, metadata !8232, metadata !DIExpression()), !dbg !8251
  call void @start_sequence(), !dbg !8252
  %2 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8253
  %3 = bitcast %struct.rtx_def* %2 to i32*, !dbg !8253
  %bf.load1 = load i32, i32* %3, align 8, !dbg !8253
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !8253
  %idxprom = sext i32 %bf.clear2 to i64, !dbg !8253
  %arrayidx = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !8253
  %4 = load i32, i32* %arrayidx, align 4, !dbg !8253
  %and = and i32 %4, -2, !dbg !8253
  %cmp3 = icmp eq i32 %and, 8, !dbg !8253
  br i1 %cmp3, label %cond.true, label %lor.lhs.false, !dbg !8254

lor.lhs.false:                                    ; preds = %if.then
  %5 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8255
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !8255
  %bf.load4 = load i32, i32* %6, align 8, !dbg !8255
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !8255
  %idxprom6 = sext i32 %bf.clear5 to i64, !dbg !8255
  %arrayidx7 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom6, !dbg !8255
  %7 = load i32, i32* %arrayidx7, align 4, !dbg !8255
  %cmp8 = icmp eq i32 %7, 9, !dbg !8255
  br i1 %cmp8, label %cond.true, label %lor.lhs.false9, !dbg !8256

lor.lhs.false9:                                   ; preds = %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8257
  %9 = bitcast %struct.rtx_def* %8 to i32*, !dbg !8257
  %bf.load10 = load i32, i32* %9, align 8, !dbg !8257
  %bf.clear11 = and i32 %bf.load10, 65535, !dbg !8257
  %cmp12 = icmp eq i32 %bf.clear11, 39, !dbg !8258
  br i1 %cmp12, label %cond.true, label %cond.false, !dbg !8259

cond.true:                                        ; preds = %lor.lhs.false9, %lor.lhs.false, %if.then
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8260
  %11 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8261
  %call = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %10, %struct.rtx_def* %11), !dbg !8262
  br label %cond.end, !dbg !8259

cond.false:                                       ; preds = %lor.lhs.false9
  %12 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8263
  %13 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8263
  %call13 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %12, %struct.rtx_def* %13), !dbg !8263
  %call14 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %call13), !dbg !8264
  br label %cond.end, !dbg !8259

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.rtx_def* [ %call, %cond.true ], [ %call14, %cond.false ], !dbg !8259
  store %struct.rtx_def* %cond, %struct.rtx_def** %insn, align 8, !dbg !8265
  %call15 = call %struct.rtx_def* @get_insns(), !dbg !8266
  store %struct.rtx_def* %call15, %struct.rtx_def** %seq, align 8, !dbg !8267
  call void @end_sequence(), !dbg !8268
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8269
  %call16 = call i32 @recog_memoized(%struct.rtx_def* %14), !dbg !8271
  %cmp17 = icmp sle i32 %call16, 0, !dbg !8272
  br i1 %cmp17, label %if.then18, label %if.end107, !dbg !8273

if.then18:                                        ; preds = %cond.end
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8274
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !8274
  %bf.load19 = load i32, i32* %16, align 8, !dbg !8274
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !8274
  %cmp21 = icmp eq i32 %bf.clear20, 120, !dbg !8277
  br i1 %cmp21, label %if.then22, label %if.end, !dbg !8278

if.then22:                                        ; preds = %if.then18
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op, metadata !8279, metadata !DIExpression()), !dbg !8281
  %17 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8282
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8282
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8282
  %arrayidx23 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8282
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx23 to %struct.rtx_def**, !dbg !8282
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8282
  store %struct.rtx_def* %18, %struct.rtx_def** %op, align 8, !dbg !8281
  call void @llvm.dbg.declare(metadata i64* %size, metadata !8283, metadata !DIExpression()), !dbg !8284
  %19 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8285
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !8285
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8285
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 1, !dbg !8285
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !8285
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !8285
  %u28 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !8285
  %hwint = bitcast %union.u* %u28 to [1 x i64]*, !dbg !8285
  %arrayidx29 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !8285
  %21 = load i64, i64* %arrayidx29, align 8, !dbg !8285
  store i64 %21, i64* %size, align 8, !dbg !8284
  call void @llvm.dbg.declare(metadata i64* %start, metadata !8286, metadata !DIExpression()), !dbg !8287
  %22 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8288
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !8288
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !8288
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 2, !dbg !8288
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !8288
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !8288
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %23, i32 0, i32 1, !dbg !8288
  %hwint35 = bitcast %union.u* %u34 to [1 x i64]*, !dbg !8288
  %arrayidx36 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint35, i64 0, i64 0, !dbg !8288
  %24 = load i64, i64* %arrayidx36, align 8, !dbg !8288
  store i64 %24, i64* %start, align 8, !dbg !8287
  %25 = load i64, i64* %start, align 8, !dbg !8289
  %26 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8, !dbg !8289
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !8289
  %bf.load37 = load i32, i32* %27, align 8, !dbg !8289
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !8289
  %cmp39 = icmp eq i32 %bf.clear38, 43, !dbg !8289
  %28 = zext i1 %cmp39 to i64, !dbg !8289
  %cond40 = select i1 %cmp39, i32 8, i32 32, !dbg !8289
  %conv = sext i32 %cond40 to i64, !dbg !8289
  %cmp41 = icmp ult i64 %25, %conv, !dbg !8289
  br i1 %cmp41, label %cond.false44, label %cond.true43, !dbg !8289

cond.true43:                                      ; preds = %if.then22
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 763, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !8289
  br label %cond.end45, !dbg !8289

cond.false44:                                     ; preds = %if.then22
  br label %cond.end45, !dbg !8289

cond.end45:                                       ; preds = %cond.false44, %cond.true43
  %cond46 = phi i32 [ 0, %cond.true43 ], [ 0, %cond.false44 ], !dbg !8289
  %29 = load %struct.rtx_def*, %struct.rtx_def** %op, align 8, !dbg !8290
  %30 = load i64, i64* %size, align 8, !dbg !8291
  %31 = load i64, i64* %start, align 8, !dbg !8292
  %32 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8293
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !8293
  %bf.load47 = load i32, i32* %33, align 8, !dbg !8293
  %bf.lshr = lshr i32 %bf.load47, 16, !dbg !8293
  %bf.clear48 = and i32 %bf.lshr, 255, !dbg !8293
  %34 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8294
  call void @store_bit_field(%struct.rtx_def* %29, i64 %30, i64 %31, i32 %bf.clear48, %struct.rtx_def* %34), !dbg !8295
  br label %return, !dbg !8296

if.end:                                           ; preds = %if.then18
  %35 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8297
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !8297
  %bf.load49 = load i32, i32* %36, align 8, !dbg !8297
  %bf.clear50 = and i32 %bf.load49, 65535, !dbg !8297
  %idxprom51 = sext i32 %bf.clear50 to i64, !dbg !8297
  %arrayidx52 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom51, !dbg !8297
  %37 = load i32, i32* %arrayidx52, align 4, !dbg !8297
  switch i32 %37, label %sw.default [
    i32 4, label %sw.bb
    i32 2, label %sw.bb77
    i32 3, label %sw.bb77
  ], !dbg !8298

sw.bb:                                            ; preds = %if.end
  %38 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8299
  %39 = bitcast %struct.rtx_def* %38 to i32*, !dbg !8299
  %bf.load53 = load i32, i32* %39, align 8, !dbg !8299
  %bf.clear54 = and i32 %bf.load53, 65535, !dbg !8299
  %idxprom55 = zext i32 %bf.clear54 to i64, !dbg !8301
  %arrayidx56 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom55, !dbg !8301
  %40 = load %struct.optab_d*, %struct.optab_d** %arrayidx56, align 8, !dbg !8301
  store %struct.optab_d* %40, %struct.optab_d** %ot, align 8, !dbg !8302
  %41 = load %struct.optab_d*, %struct.optab_d** %ot, align 8, !dbg !8303
  %tobool = icmp ne %struct.optab_d* %41, null, !dbg !8303
  br i1 %tobool, label %if.then57, label %if.end76, !dbg !8305

if.then57:                                        ; preds = %sw.bb
  call void @start_sequence(), !dbg !8306
  %42 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8308
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !8308
  %bf.load58 = load i32, i32* %43, align 8, !dbg !8308
  %bf.lshr59 = lshr i32 %bf.load58, 16, !dbg !8308
  %bf.clear60 = and i32 %bf.lshr59, 255, !dbg !8308
  %44 = load %struct.optab_d*, %struct.optab_d** %ot, align 8, !dbg !8309
  %45 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8310
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !8310
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !8310
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 0, !dbg !8310
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !8310
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !8310
  %47 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8311
  %call65 = call %struct.rtx_def* @expand_unop(i32 %bf.clear60, %struct.optab_d* %44, %struct.rtx_def* %46, %struct.rtx_def* %47, i32 0), !dbg !8312
  store %struct.rtx_def* %call65, %struct.rtx_def** %target, align 8, !dbg !8313
  %48 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8314
  %cmp66 = icmp ne %struct.rtx_def* %48, null, !dbg !8316
  br i1 %cmp66, label %if.then68, label %if.end75, !dbg !8317

if.then68:                                        ; preds = %if.then57
  %49 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8318
  %50 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8321
  %cmp69 = icmp ne %struct.rtx_def* %49, %50, !dbg !8322
  br i1 %cmp69, label %if.then71, label %if.end73, !dbg !8323

if.then71:                                        ; preds = %if.then68
  %51 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8324
  %52 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8325
  %call72 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %51, %struct.rtx_def* %52), !dbg !8326
  br label %if.end73, !dbg !8326

if.end73:                                         ; preds = %if.then71, %if.then68
  %call74 = call %struct.rtx_def* @get_insns(), !dbg !8327
  store %struct.rtx_def* %call74, %struct.rtx_def** %seq, align 8, !dbg !8328
  br label %if.end75, !dbg !8329

if.end75:                                         ; preds = %if.end73, %if.then57
  call void @end_sequence(), !dbg !8330
  br label %if.end76, !dbg !8331

if.end76:                                         ; preds = %if.end75, %sw.bb
  br label %sw.epilog, !dbg !8332

sw.bb77:                                          ; preds = %if.end, %if.end
  %53 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8333
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !8333
  %bf.load78 = load i32, i32* %54, align 8, !dbg !8333
  %bf.clear79 = and i32 %bf.load78, 65535, !dbg !8333
  %idxprom80 = zext i32 %bf.clear79 to i64, !dbg !8334
  %arrayidx81 = getelementptr inbounds [140 x %struct.optab_d*], [140 x %struct.optab_d*]* @code_to_optab, i64 0, i64 %idxprom80, !dbg !8334
  %55 = load %struct.optab_d*, %struct.optab_d** %arrayidx81, align 8, !dbg !8334
  store %struct.optab_d* %55, %struct.optab_d** %ot, align 8, !dbg !8335
  %56 = load %struct.optab_d*, %struct.optab_d** %ot, align 8, !dbg !8336
  %tobool82 = icmp ne %struct.optab_d* %56, null, !dbg !8336
  br i1 %tobool82, label %if.then83, label %if.end106, !dbg !8338

if.then83:                                        ; preds = %sw.bb77
  call void @start_sequence(), !dbg !8339
  %57 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8341
  %58 = bitcast %struct.rtx_def* %57 to i32*, !dbg !8341
  %bf.load84 = load i32, i32* %58, align 8, !dbg !8341
  %bf.lshr85 = lshr i32 %bf.load84, 16, !dbg !8341
  %bf.clear86 = and i32 %bf.lshr85, 255, !dbg !8341
  %59 = load %struct.optab_d*, %struct.optab_d** %ot, align 8, !dbg !8342
  %60 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8343
  %u87 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !8343
  %fld88 = bitcast %union.u* %u87 to [1 x %union.rtunion_def]*, !dbg !8343
  %arrayidx89 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld88, i64 0, i64 0, !dbg !8343
  %rt_rtx90 = bitcast %union.rtunion_def* %arrayidx89 to %struct.rtx_def**, !dbg !8343
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx90, align 8, !dbg !8343
  %62 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8344
  %u91 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %62, i32 0, i32 1, !dbg !8344
  %fld92 = bitcast %union.u* %u91 to [1 x %union.rtunion_def]*, !dbg !8344
  %arrayidx93 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld92, i64 0, i64 1, !dbg !8344
  %rt_rtx94 = bitcast %union.rtunion_def* %arrayidx93 to %struct.rtx_def**, !dbg !8344
  %63 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx94, align 8, !dbg !8344
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8345
  %call95 = call %struct.rtx_def* @expand_binop(i32 %bf.clear86, %struct.optab_d* %59, %struct.rtx_def* %61, %struct.rtx_def* %63, %struct.rtx_def* %64, i32 0, i32 0), !dbg !8346
  store %struct.rtx_def* %call95, %struct.rtx_def** %target, align 8, !dbg !8347
  %65 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8348
  %cmp96 = icmp ne %struct.rtx_def* %65, null, !dbg !8350
  br i1 %cmp96, label %if.then98, label %if.end105, !dbg !8351

if.then98:                                        ; preds = %if.then83
  %66 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8352
  %67 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8355
  %cmp99 = icmp ne %struct.rtx_def* %66, %67, !dbg !8356
  br i1 %cmp99, label %if.then101, label %if.end103, !dbg !8357

if.then101:                                       ; preds = %if.then98
  %68 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8358
  %69 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !8359
  %call102 = call %struct.rtx_def* @emit_move_insn(%struct.rtx_def* %68, %struct.rtx_def* %69), !dbg !8360
  br label %if.end103, !dbg !8360

if.end103:                                        ; preds = %if.then101, %if.then98
  %call104 = call %struct.rtx_def* @get_insns(), !dbg !8361
  store %struct.rtx_def* %call104, %struct.rtx_def** %seq, align 8, !dbg !8362
  br label %if.end105, !dbg !8363

if.end105:                                        ; preds = %if.end103, %if.then83
  call void @end_sequence(), !dbg !8364
  br label %if.end106, !dbg !8365

if.end106:                                        ; preds = %if.end105, %sw.bb77
  br label %sw.epilog, !dbg !8366

sw.default:                                       ; preds = %if.end
  br label %sw.epilog, !dbg !8367

sw.epilog:                                        ; preds = %sw.default, %if.end106, %if.end76
  br label %if.end107, !dbg !8368

if.end107:                                        ; preds = %sw.epilog, %cond.end
  %70 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8369
  %call108 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %70), !dbg !8370
  br label %return, !dbg !8371

if.end109:                                        ; preds = %entry
  %71 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8372
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !8372
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !8372
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 0, !dbg !8372
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !8372
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !8372
  store %struct.rtx_def* %72, %struct.rtx_def** %outer, align 8, !dbg !8373
  %73 = load %struct.rtx_def*, %struct.rtx_def** %outer, align 8, !dbg !8374
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !8374
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !8374
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 0, !dbg !8374
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !8374
  %74 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !8374
  store %struct.rtx_def* %74, %struct.rtx_def** %inner, align 8, !dbg !8375
  %75 = load %struct.rtx_def*, %struct.rtx_def** %outer, align 8, !dbg !8376
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !8376
  %bf.load118 = load i32, i32* %76, align 8, !dbg !8376
  %bf.lshr119 = lshr i32 %bf.load118, 16, !dbg !8376
  %bf.clear120 = and i32 %bf.lshr119, 255, !dbg !8376
  store i32 %bf.clear120, i32* %outmode, align 4, !dbg !8377
  %77 = load %struct.rtx_def*, %struct.rtx_def** %outer, align 8, !dbg !8378
  %u121 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %77, i32 0, i32 1, !dbg !8378
  %fld122 = bitcast %union.u* %u121 to [1 x %union.rtunion_def]*, !dbg !8378
  %arrayidx123 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld122, i64 0, i64 1, !dbg !8378
  %rt_uint = bitcast %union.rtunion_def* %arrayidx123 to i32*, !dbg !8378
  %78 = load i32, i32* %rt_uint, align 8, !dbg !8378
  %mul = mul i32 %78, 8, !dbg !8379
  store i32 %mul, i32* %bitpos, align 4, !dbg !8380
  %79 = load %struct.rtx_def*, %struct.rtx_def** %inner, align 8, !dbg !8381
  %80 = load i32, i32* %outmode, align 4, !dbg !8382
  %idxprom124 = zext i32 %80 to i64, !dbg !8382
  %arrayidx125 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_size, i64 0, i64 %idxprom124, !dbg !8382
  %81 = load i8, i8* %arrayidx125, align 1, !dbg !8382
  %conv126 = zext i8 %81 to i16, !dbg !8382
  %conv127 = zext i16 %conv126 to i32, !dbg !8382
  %mul128 = mul nsw i32 %conv127, 8, !dbg !8382
  %conv129 = trunc i32 %mul128 to i16, !dbg !8382
  %conv130 = zext i16 %conv129 to i64, !dbg !8382
  %82 = load i32, i32* %bitpos, align 4, !dbg !8383
  %conv131 = sext i32 %82 to i64, !dbg !8383
  %83 = load i32, i32* %outmode, align 4, !dbg !8384
  %84 = load %struct.rtx_def*, %struct.rtx_def** %y.addr, align 8, !dbg !8385
  call void @store_bit_field(%struct.rtx_def* %79, i64 %conv130, i64 %conv131, i32 %83, %struct.rtx_def* %84), !dbg !8386
  br label %return, !dbg !8387

return:                                           ; preds = %if.end109, %if.end107, %cond.end45
  ret void, !dbg !8387
}

declare dso_local void @set_used_flags(%struct.rtx_def*) #1

declare dso_local void @unshare_all_rtl_in_chain(%struct.rtx_def*) #1

declare dso_local void @end_sequence() #1

declare dso_local %struct.rtx_def* @emit_insn_before_setloc(%struct.rtx_def*, %struct.rtx_def*, i32) #1

declare dso_local void @delete_basic_block(%struct.basic_block_def*) #1

declare dso_local void @remove_edge(%struct.edge_def*) #1

declare dso_local %struct.edge_def* @find_edge(%struct.basic_block_def*, %struct.basic_block_def*) #1

declare dso_local %struct.basic_block_def* @redirect_edge_and_branch_force(%struct.edge_def*, %struct.basic_block_def*) #1

declare dso_local zeroext i8 @can_merge_blocks_p(%struct.basic_block_def*, %struct.basic_block_def*) #1

declare dso_local void @merge_blocks(%struct.basic_block_def*, %struct.basic_block_def*) #1

declare dso_local i32 @may_trap_p(%struct.rtx_def*) #1

declare dso_local i32 @may_trap_or_fault_p(%struct.rtx_def*) #1

declare dso_local zeroext i8 @decl_readonly_section(%union.tree_node*, i32) #1

declare dso_local %struct.basic_block_def* @get_immediate_dominator(i32, %struct.basic_block_def*) #1

declare dso_local i32 @volatile_insn_p(%struct.rtx_def*) #1

declare dso_local zeroext i8 @memory_modified_in_insn_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @modified_in_p(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @end_ifcvt_sequence(%struct.noce_if_info* %if_info) #0 !dbg !8388 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %seq = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !8391, metadata !DIExpression()), !dbg !8392
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8393, metadata !DIExpression()), !dbg !8394
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %seq, metadata !8395, metadata !DIExpression()), !dbg !8396
  %call = call %struct.rtx_def* @get_insns(), !dbg !8397
  store %struct.rtx_def* %call, %struct.rtx_def** %seq, align 8, !dbg !8396
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8398
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 11, !dbg !8399
  %1 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8399
  call void @set_used_flags(%struct.rtx_def* %1), !dbg !8400
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8401
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 5, !dbg !8402
  %3 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8402
  call void @set_used_flags(%struct.rtx_def* %3), !dbg !8403
  %4 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8404
  call void @unshare_all_rtl_in_chain(%struct.rtx_def* %4), !dbg !8405
  call void @end_sequence(), !dbg !8406
  %5 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8407
  store %struct.rtx_def* %5, %struct.rtx_def** %insn, align 8, !dbg !8409
  br label %for.cond, !dbg !8410

for.cond:                                         ; preds = %for.inc, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8411
  %tobool = icmp ne %struct.rtx_def* %6, null, !dbg !8413
  br i1 %tobool, label %for.body, label %for.end, !dbg !8413

for.body:                                         ; preds = %for.cond
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8414
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !8414
  %bf.load = load i32, i32* %8, align 8, !dbg !8414
  %bf.clear = and i32 %bf.load, 65535, !dbg !8414
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !8414
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !8416

lor.lhs.false:                                    ; preds = %for.body
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8417
  %call1 = call i32 @recog_memoized(%struct.rtx_def* %9), !dbg !8418
  %cmp2 = icmp eq i32 %call1, -1, !dbg !8419
  br i1 %cmp2, label %if.then, label %if.end, !dbg !8420

if.then:                                          ; preds = %lor.lhs.false, %for.body
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8421
  br label %return, !dbg !8421

if.end:                                           ; preds = %lor.lhs.false
  br label %for.inc, !dbg !8422

for.inc:                                          ; preds = %if.end
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8423
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8423
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8423
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8423
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8423
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8423
  store %struct.rtx_def* %11, %struct.rtx_def** %insn, align 8, !dbg !8424
  br label %for.cond, !dbg !8425, !llvm.loop !8426

for.end:                                          ; preds = %for.cond
  %12 = load %struct.rtx_def*, %struct.rtx_def** %seq, align 8, !dbg !8428
  store %struct.rtx_def* %12, %struct.rtx_def** %retval, align 8, !dbg !8429
  br label %return, !dbg !8429

return:                                           ; preds = %for.end, %if.then
  %13 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8430
  ret %struct.rtx_def* %13, !dbg !8430
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @recog_memoized(%struct.rtx_def* %insn) #0 !dbg !8431 {
entry:
  %insn.addr = alloca %struct.rtx_def*, align 8
  store %struct.rtx_def* %insn, %struct.rtx_def** %insn.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn.addr, metadata !8435, metadata !DIExpression()), !dbg !8436
  %0 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8437
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %0, i32 0, i32 1, !dbg !8437
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8437
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 6, !dbg !8437
  %rt_int = bitcast %union.rtunion_def* %arrayidx to i32*, !dbg !8437
  %1 = load i32, i32* %rt_int, align 8, !dbg !8437
  %cmp = icmp slt i32 %1, 0, !dbg !8439
  br i1 %cmp, label %if.then, label %if.end, !dbg !8440

if.then:                                          ; preds = %entry
  %2 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8441
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8441
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !8441
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 5, !dbg !8441
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !8441
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8441
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8442
  %call = call i32 @recog(%struct.rtx_def* %3, %struct.rtx_def* %4, i32* null), !dbg !8443
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8444
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !8444
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !8444
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 6, !dbg !8444
  %rt_int7 = bitcast %union.rtunion_def* %arrayidx6 to i32*, !dbg !8444
  store i32 %call, i32* %rt_int7, align 8, !dbg !8445
  br label %if.end, !dbg !8444

if.end:                                           ; preds = %if.then, %entry
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn.addr, align 8, !dbg !8446
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !8446
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8446
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 6, !dbg !8446
  %rt_int11 = bitcast %union.rtunion_def* %arrayidx10 to i32*, !dbg !8446
  %7 = load i32, i32* %rt_int11, align 8, !dbg !8446
  ret i32 %7, !dbg !8447
}

declare dso_local i32 @recog(%struct.rtx_def*, %struct.rtx_def*, i32*) #1

declare dso_local i32 @reversed_comparison_code(%struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @noce_emit_store_flag(%struct.noce_if_info* %if_info, %struct.rtx_def* %x, i32 %reversep, i32 %normalize) #0 !dbg !8448 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %reversep.addr = alloca i32, align 4
  %normalize.addr = alloca i32, align 4
  %cond = alloca %struct.rtx_def*, align 8
  %cond_complex = alloca i32, align 4
  %code = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !8451, metadata !DIExpression()), !dbg !8452
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8453, metadata !DIExpression()), !dbg !8454
  store i32 %reversep, i32* %reversep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reversep.addr, metadata !8455, metadata !DIExpression()), !dbg !8456
  store i32 %normalize, i32* %normalize.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %normalize.addr, metadata !8457, metadata !DIExpression()), !dbg !8458
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !8459, metadata !DIExpression()), !dbg !8460
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8461
  %cond1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 5, !dbg !8462
  %1 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !8462
  store %struct.rtx_def* %1, %struct.rtx_def** %cond, align 8, !dbg !8460
  call void @llvm.dbg.declare(metadata i32* %cond_complex, metadata !8463, metadata !DIExpression()), !dbg !8464
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8465, metadata !DIExpression()), !dbg !8466
  %2 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8467
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !8467
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8467
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !8467
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8467
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8467
  %call = call i32 @general_operand(%struct.rtx_def* %3, i32 0), !dbg !8468
  %tobool = icmp ne i32 %call, 0, !dbg !8468
  br i1 %tobool, label %lor.rhs, label %lor.end, !dbg !8469

lor.rhs:                                          ; preds = %entry
  %4 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8470
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !8470
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !8470
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 1, !dbg !8470
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !8470
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !8470
  %call6 = call i32 @general_operand(%struct.rtx_def* %5, i32 0), !dbg !8471
  %tobool7 = icmp ne i32 %call6, 0, !dbg !8472
  %lnot = xor i1 %tobool7, true, !dbg !8472
  br label %lor.end, !dbg !8469

lor.end:                                          ; preds = %lor.rhs, %entry
  %6 = phi i1 [ true, %entry ], [ %lnot, %lor.rhs ]
  %lor.ext = zext i1 %6 to i32, !dbg !8469
  store i32 %lor.ext, i32* %cond_complex, align 4, !dbg !8473
  %7 = load i32, i32* %cond_complex, align 4, !dbg !8474
  %tobool8 = icmp ne i32 %7, 0, !dbg !8474
  br i1 %tobool8, label %if.then, label %if.end53, !dbg !8476

if.then:                                          ; preds = %lor.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !8477, metadata !DIExpression()), !dbg !8479
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8480
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 4, !dbg !8481
  %9 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8481
  %call9 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %9), !dbg !8482
  store %struct.rtx_def* %call9, %struct.rtx_def** %set, align 8, !dbg !8479
  %10 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8483
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8483
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !8483
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 1, !dbg !8483
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !8483
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !8483
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8483
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !8483
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !8483
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !8483
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !8483
  store %struct.rtx_def* %12, %struct.rtx_def** %cond, align 8, !dbg !8484
  %13 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8485
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8485
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !8485
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 1, !dbg !8485
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !8485
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !8485
  %u22 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8485
  %fld23 = bitcast %union.u* %u22 to [1 x %union.rtunion_def]*, !dbg !8485
  %arrayidx24 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld23, i64 0, i64 2, !dbg !8485
  %rt_rtx25 = bitcast %union.rtunion_def* %arrayidx24 to %struct.rtx_def**, !dbg !8485
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx25, align 8, !dbg !8485
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !8485
  %bf.load = load i32, i32* %16, align 8, !dbg !8485
  %bf.clear = and i32 %bf.load, 65535, !dbg !8485
  %cmp = icmp eq i32 %bf.clear, 44, !dbg !8487
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8488

land.lhs.true:                                    ; preds = %if.then
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8489
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8489
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !8489
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 1, !dbg !8489
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !8489
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !8489
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8489
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !8489
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 2, !dbg !8489
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !8489
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !8489
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !8489
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !8489
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 0, !dbg !8489
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !8489
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !8489
  %21 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8490
  %jump38 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %21, i32 0, i32 4, !dbg !8490
  %22 = load %struct.rtx_def*, %struct.rtx_def** %jump38, align 8, !dbg !8490
  %u39 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !8490
  %fld40 = bitcast %union.u* %u39 to [1 x %union.rtunion_def]*, !dbg !8490
  %arrayidx41 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld40, i64 0, i64 8, !dbg !8490
  %rt_rtx42 = bitcast %union.rtunion_def* %arrayidx41 to %struct.rtx_def**, !dbg !8490
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx42, align 8, !dbg !8490
  %cmp43 = icmp eq %struct.rtx_def* %20, %23, !dbg !8491
  br i1 %cmp43, label %if.then44, label %if.end, !dbg !8492

if.then44:                                        ; preds = %land.lhs.true
  %24 = load i32, i32* %reversep.addr, align 4, !dbg !8493
  %tobool45 = icmp ne i32 %24, 0, !dbg !8494
  %lnot46 = xor i1 %tobool45, true, !dbg !8494
  %lnot.ext = zext i1 %lnot46 to i32, !dbg !8494
  store i32 %lnot.ext, i32* %reversep.addr, align 4, !dbg !8495
  br label %if.end, !dbg !8496

if.end:                                           ; preds = %if.then44, %land.lhs.true, %if.then
  %25 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8497
  %then_else_reversed = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %25, i32 0, i32 12, !dbg !8499
  %26 = load i8, i8* %then_else_reversed, align 8, !dbg !8499
  %tobool47 = icmp ne i8 %26, 0, !dbg !8497
  br i1 %tobool47, label %if.then48, label %if.end52, !dbg !8500

if.then48:                                        ; preds = %if.end
  %27 = load i32, i32* %reversep.addr, align 4, !dbg !8501
  %tobool49 = icmp ne i32 %27, 0, !dbg !8502
  %lnot50 = xor i1 %tobool49, true, !dbg !8502
  %lnot.ext51 = zext i1 %lnot50 to i32, !dbg !8502
  store i32 %lnot.ext51, i32* %reversep.addr, align 4, !dbg !8503
  br label %if.end52, !dbg !8504

if.end52:                                         ; preds = %if.then48, %if.end
  br label %if.end53, !dbg !8505

if.end53:                                         ; preds = %if.end52, %lor.end
  %28 = load i32, i32* %reversep.addr, align 4, !dbg !8506
  %tobool54 = icmp ne i32 %28, 0, !dbg !8506
  br i1 %tobool54, label %if.then55, label %if.else, !dbg !8508

if.then55:                                        ; preds = %if.end53
  %29 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8509
  %30 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8510
  %jump56 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %30, i32 0, i32 4, !dbg !8511
  %31 = load %struct.rtx_def*, %struct.rtx_def** %jump56, align 8, !dbg !8511
  %call57 = call i32 @reversed_comparison_code(%struct.rtx_def* %29, %struct.rtx_def* %31), !dbg !8512
  store i32 %call57, i32* %code, align 4, !dbg !8513
  br label %if.end60, !dbg !8514

if.else:                                          ; preds = %if.end53
  %32 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8515
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !8515
  %bf.load58 = load i32, i32* %33, align 8, !dbg !8515
  %bf.clear59 = and i32 %bf.load58, 65535, !dbg !8515
  store i32 %bf.clear59, i32* %code, align 4, !dbg !8516
  br label %if.end60

if.end60:                                         ; preds = %if.else, %if.then55
  %34 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8517
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %34, i32 0, i32 6, !dbg !8519
  %35 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !8519
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8520
  %jump61 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 4, !dbg !8521
  %37 = load %struct.rtx_def*, %struct.rtx_def** %jump61, align 8, !dbg !8521
  %cmp62 = icmp eq %struct.rtx_def* %35, %37, !dbg !8522
  br i1 %cmp62, label %land.lhs.true64, label %lor.lhs.false, !dbg !8523

lor.lhs.false:                                    ; preds = %if.end60
  %38 = load i32, i32* %cond_complex, align 4, !dbg !8524
  %tobool63 = icmp ne i32 %38, 0, !dbg !8524
  br i1 %tobool63, label %land.lhs.true64, label %if.end90, !dbg !8525

land.lhs.true64:                                  ; preds = %lor.lhs.false, %if.end60
  %39 = load i32, i32* %normalize.addr, align 4, !dbg !8526
  %cmp65 = icmp eq i32 %39, 0, !dbg !8527
  br i1 %cmp65, label %if.then68, label %lor.lhs.false66, !dbg !8528

lor.lhs.false66:                                  ; preds = %land.lhs.true64
  %40 = load i32, i32* %normalize.addr, align 4, !dbg !8529
  %cmp67 = icmp eq i32 1, %40, !dbg !8530
  br i1 %cmp67, label %if.then68, label %if.end90, !dbg !8531

if.then68:                                        ; preds = %lor.lhs.false66, %land.lhs.true64
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8532, metadata !DIExpression()), !dbg !8534
  %41 = load i32, i32* %code, align 4, !dbg !8535
  %42 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8535
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !8535
  %bf.load69 = load i32, i32* %43, align 8, !dbg !8535
  %bf.lshr = lshr i32 %bf.load69, 16, !dbg !8535
  %bf.clear70 = and i32 %bf.lshr, 255, !dbg !8535
  %44 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8535
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %44, i32 0, i32 1, !dbg !8535
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !8535
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !8535
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !8535
  %45 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !8535
  %46 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8535
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !8535
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !8535
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !8535
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !8535
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !8535
  %call79 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %41, i32 %bf.clear70, %struct.rtx_def* %45, %struct.rtx_def* %47), !dbg !8535
  store %struct.rtx_def* %call79, %struct.rtx_def** %tmp, align 8, !dbg !8536
  %48 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8537
  %49 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8537
  %call80 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %48, %struct.rtx_def* %49), !dbg !8537
  store %struct.rtx_def* %call80, %struct.rtx_def** %tmp, align 8, !dbg !8538
  call void @start_sequence(), !dbg !8539
  %50 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8540
  %call81 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %50), !dbg !8541
  store %struct.rtx_def* %call81, %struct.rtx_def** %tmp, align 8, !dbg !8542
  %51 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8543
  %call82 = call i32 @recog_memoized(%struct.rtx_def* %51), !dbg !8545
  %cmp83 = icmp sge i32 %call82, 0, !dbg !8546
  br i1 %cmp83, label %if.then84, label %if.end89, !dbg !8547

if.then84:                                        ; preds = %if.then68
  %call85 = call %struct.rtx_def* @get_insns(), !dbg !8548
  store %struct.rtx_def* %call85, %struct.rtx_def** %tmp, align 8, !dbg !8550
  call void @end_sequence(), !dbg !8551
  %52 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8552
  %call86 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %52), !dbg !8553
  %53 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8554
  %jump87 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %53, i32 0, i32 4, !dbg !8555
  %54 = load %struct.rtx_def*, %struct.rtx_def** %jump87, align 8, !dbg !8555
  %55 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8556
  %cond_earliest88 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %55, i32 0, i32 6, !dbg !8557
  store %struct.rtx_def* %54, %struct.rtx_def** %cond_earliest88, align 8, !dbg !8558
  %56 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8559
  store %struct.rtx_def* %56, %struct.rtx_def** %retval, align 8, !dbg !8560
  br label %return, !dbg !8560

if.end89:                                         ; preds = %if.then68
  call void @end_sequence(), !dbg !8561
  br label %if.end90, !dbg !8562

if.end90:                                         ; preds = %if.end89, %lor.lhs.false66, %lor.lhs.false
  %57 = load i32, i32* %cond_complex, align 4, !dbg !8563
  %tobool91 = icmp ne i32 %57, 0, !dbg !8563
  br i1 %tobool91, label %if.then108, label %lor.lhs.false92, !dbg !8565

lor.lhs.false92:                                  ; preds = %if.end90
  %58 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8566
  %59 = bitcast %struct.rtx_def* %58 to i32*, !dbg !8566
  %bf.load93 = load i32, i32* %59, align 8, !dbg !8566
  %bf.lshr94 = lshr i32 %bf.load93, 16, !dbg !8566
  %bf.clear95 = and i32 %bf.lshr94, 255, !dbg !8566
  %idxprom = zext i32 %bf.clear95 to i64, !dbg !8566
  %arrayidx96 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom, !dbg !8566
  %60 = load i8, i8* %arrayidx96, align 1, !dbg !8566
  %conv = zext i8 %60 to i32, !dbg !8566
  %cmp97 = icmp eq i32 %conv, 2, !dbg !8566
  br i1 %cmp97, label %if.end109, label %lor.lhs.false99, !dbg !8566

lor.lhs.false99:                                  ; preds = %lor.lhs.false92
  %61 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8566
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !8566
  %bf.load100 = load i32, i32* %62, align 8, !dbg !8566
  %bf.lshr101 = lshr i32 %bf.load100, 16, !dbg !8566
  %bf.clear102 = and i32 %bf.lshr101, 255, !dbg !8566
  %idxprom103 = zext i32 %bf.clear102 to i64, !dbg !8566
  %arrayidx104 = getelementptr inbounds [87 x i8], [87 x i8]* @mode_class, i64 0, i64 %idxprom103, !dbg !8566
  %63 = load i8, i8* %arrayidx104, align 1, !dbg !8566
  %conv105 = zext i8 %63 to i32, !dbg !8566
  %cmp106 = icmp eq i32 %conv105, 3, !dbg !8566
  br i1 %cmp106, label %if.end109, label %if.then108, !dbg !8567

if.then108:                                       ; preds = %lor.lhs.false99, %if.end90
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8568
  br label %return, !dbg !8568

if.end109:                                        ; preds = %lor.lhs.false99, %lor.lhs.false92
  %64 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8569
  %65 = load i32, i32* %code, align 4, !dbg !8570
  %66 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8571
  %u110 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !8571
  %fld111 = bitcast %union.u* %u110 to [1 x %union.rtunion_def]*, !dbg !8571
  %arrayidx112 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld111, i64 0, i64 0, !dbg !8571
  %rt_rtx113 = bitcast %union.rtunion_def* %arrayidx112 to %struct.rtx_def**, !dbg !8571
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx113, align 8, !dbg !8571
  %68 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8572
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !8572
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !8572
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 1, !dbg !8572
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !8572
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !8572
  %70 = load i32, i32* %code, align 4, !dbg !8573
  %cmp118 = icmp eq i32 %70, 89, !dbg !8574
  br i1 %cmp118, label %lor.end129, label %lor.lhs.false120, !dbg !8575

lor.lhs.false120:                                 ; preds = %if.end109
  %71 = load i32, i32* %code, align 4, !dbg !8576
  %cmp121 = icmp eq i32 %71, 88, !dbg !8577
  br i1 %cmp121, label %lor.end129, label %lor.lhs.false123, !dbg !8578

lor.lhs.false123:                                 ; preds = %lor.lhs.false120
  %72 = load i32, i32* %code, align 4, !dbg !8579
  %cmp124 = icmp eq i32 %72, 86, !dbg !8580
  br i1 %cmp124, label %lor.end129, label %lor.rhs126, !dbg !8581

lor.rhs126:                                       ; preds = %lor.lhs.false123
  %73 = load i32, i32* %code, align 4, !dbg !8582
  %cmp127 = icmp eq i32 %73, 87, !dbg !8583
  br label %lor.end129, !dbg !8581

lor.end129:                                       ; preds = %lor.rhs126, %lor.lhs.false123, %lor.lhs.false120, %if.end109
  %74 = phi i1 [ true, %lor.lhs.false123 ], [ true, %lor.lhs.false120 ], [ true, %if.end109 ], [ %cmp127, %lor.rhs126 ]
  %lor.ext130 = zext i1 %74 to i32, !dbg !8581
  %75 = load i32, i32* %normalize.addr, align 4, !dbg !8584
  %call131 = call %struct.rtx_def* @emit_store_flag(%struct.rtx_def* %64, i32 %65, %struct.rtx_def* %67, %struct.rtx_def* %69, i32 0, i32 %lor.ext130, i32 %75), !dbg !8585
  store %struct.rtx_def* %call131, %struct.rtx_def** %retval, align 8, !dbg !8586
  br label %return, !dbg !8586

return:                                           ; preds = %lor.end129, %if.then108, %if.then84
  %76 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8587
  ret %struct.rtx_def* %76, !dbg !8587
}

declare dso_local i32 @general_operand(%struct.rtx_def*, i32) #1

declare dso_local %struct.rtx_def* @emit_insn(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @emit_store_flag(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32, i32) #1

declare dso_local %struct.rtx_def* @gen_int_mode(i64, i32) #1

declare dso_local %struct.rtx_def* @simplify_gen_binary(i32, i32, %struct.rtx_def*, %struct.rtx_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @noce_get_alt_condition(%struct.noce_if_info* %if_info, %struct.rtx_def* %target, %struct.rtx_def** %earliest) #0 !dbg !8588 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %target.addr = alloca %struct.rtx_def*, align 8
  %earliest.addr = alloca %struct.rtx_def**, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %reverse = alloca i32, align 4
  %code = alloca i32, align 4
  %op_a = alloca %struct.rtx_def*, align 8
  %op_b = alloca %struct.rtx_def*, align 8
  %prev_insn = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  %desired_val = alloca i64, align 8
  %actual_val = alloca i64, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !8591, metadata !DIExpression()), !dbg !8592
  store %struct.rtx_def* %target, %struct.rtx_def** %target.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target.addr, metadata !8593, metadata !DIExpression()), !dbg !8594
  store %struct.rtx_def** %earliest, %struct.rtx_def*** %earliest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %earliest.addr, metadata !8595, metadata !DIExpression()), !dbg !8596
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !8597, metadata !DIExpression()), !dbg !8598
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !8599, metadata !DIExpression()), !dbg !8600
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8601, metadata !DIExpression()), !dbg !8602
  call void @llvm.dbg.declare(metadata i32* %reverse, metadata !8603, metadata !DIExpression()), !dbg !8604
  %0 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8605
  %1 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8607
  %cond1 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %1, i32 0, i32 5, !dbg !8608
  %2 = load %struct.rtx_def*, %struct.rtx_def** %cond1, align 8, !dbg !8608
  %call = call i32 @reg_mentioned_p(%struct.rtx_def* %0, %struct.rtx_def* %2), !dbg !8609
  %tobool = icmp ne i32 %call, 0, !dbg !8609
  br i1 %tobool, label %if.then, label %if.end, !dbg !8610

if.then:                                          ; preds = %entry
  %3 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8611
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %3, i32 0, i32 6, !dbg !8613
  %4 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !8613
  %5 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !8614
  store %struct.rtx_def* %4, %struct.rtx_def** %5, align 8, !dbg !8615
  %6 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8616
  %cond2 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %6, i32 0, i32 5, !dbg !8617
  %7 = load %struct.rtx_def*, %struct.rtx_def** %cond2, align 8, !dbg !8617
  store %struct.rtx_def* %7, %struct.rtx_def** %retval, align 8, !dbg !8618
  br label %return, !dbg !8618

if.end:                                           ; preds = %entry
  %8 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8619
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %8, i32 0, i32 4, !dbg !8620
  %9 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8620
  %call3 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %9), !dbg !8621
  store %struct.rtx_def* %call3, %struct.rtx_def** %set, align 8, !dbg !8622
  %10 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8623
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %10, i32 0, i32 1, !dbg !8623
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8623
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !8623
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8623
  %11 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8623
  %u4 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !8623
  %fld5 = bitcast %union.u* %u4 to [1 x %union.rtunion_def]*, !dbg !8623
  %arrayidx6 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld5, i64 0, i64 0, !dbg !8623
  %rt_rtx7 = bitcast %union.rtunion_def* %arrayidx6 to %struct.rtx_def**, !dbg !8623
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx7, align 8, !dbg !8623
  store %struct.rtx_def* %12, %struct.rtx_def** %cond, align 8, !dbg !8624
  %13 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8625
  %u8 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8625
  %fld9 = bitcast %union.u* %u8 to [1 x %union.rtunion_def]*, !dbg !8625
  %arrayidx10 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld9, i64 0, i64 1, !dbg !8625
  %rt_rtx11 = bitcast %union.rtunion_def* %arrayidx10 to %struct.rtx_def**, !dbg !8625
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx11, align 8, !dbg !8625
  %u12 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !8625
  %fld13 = bitcast %union.u* %u12 to [1 x %union.rtunion_def]*, !dbg !8625
  %arrayidx14 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld13, i64 0, i64 2, !dbg !8625
  %rt_rtx15 = bitcast %union.rtunion_def* %arrayidx14 to %struct.rtx_def**, !dbg !8625
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx15, align 8, !dbg !8625
  %16 = bitcast %struct.rtx_def* %15 to i32*, !dbg !8625
  %bf.load = load i32, i32* %16, align 8, !dbg !8625
  %bf.clear = and i32 %bf.load, 65535, !dbg !8625
  %cmp = icmp eq i32 %bf.clear, 44, !dbg !8626
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !8627

land.rhs:                                         ; preds = %if.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !8628
  %u16 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !8628
  %fld17 = bitcast %union.u* %u16 to [1 x %union.rtunion_def]*, !dbg !8628
  %arrayidx18 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld17, i64 0, i64 1, !dbg !8628
  %rt_rtx19 = bitcast %union.rtunion_def* %arrayidx18 to %struct.rtx_def**, !dbg !8628
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx19, align 8, !dbg !8628
  %u20 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !8628
  %fld21 = bitcast %union.u* %u20 to [1 x %union.rtunion_def]*, !dbg !8628
  %arrayidx22 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld21, i64 0, i64 2, !dbg !8628
  %rt_rtx23 = bitcast %union.rtunion_def* %arrayidx22 to %struct.rtx_def**, !dbg !8628
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx23, align 8, !dbg !8628
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !8628
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !8628
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 0, !dbg !8628
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !8628
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !8628
  %21 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8629
  %jump28 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %21, i32 0, i32 4, !dbg !8629
  %22 = load %struct.rtx_def*, %struct.rtx_def** %jump28, align 8, !dbg !8629
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %22, i32 0, i32 1, !dbg !8629
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !8629
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 8, !dbg !8629
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !8629
  %23 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !8629
  %cmp33 = icmp eq %struct.rtx_def* %20, %23, !dbg !8630
  br label %land.end

land.end:                                         ; preds = %land.rhs, %if.end
  %24 = phi i1 [ false, %if.end ], [ %cmp33, %land.rhs ], !dbg !8631
  %land.ext = zext i1 %24 to i32, !dbg !8627
  store i32 %land.ext, i32* %reverse, align 4, !dbg !8632
  %25 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8633
  %then_else_reversed = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %25, i32 0, i32 12, !dbg !8635
  %26 = load i8, i8* %then_else_reversed, align 8, !dbg !8635
  %tobool34 = icmp ne i8 %26, 0, !dbg !8633
  br i1 %tobool34, label %if.then35, label %if.end37, !dbg !8636

if.then35:                                        ; preds = %land.end
  %27 = load i32, i32* %reverse, align 4, !dbg !8637
  %tobool36 = icmp ne i32 %27, 0, !dbg !8638
  %lnot = xor i1 %tobool36, true, !dbg !8638
  %lnot.ext = zext i1 %lnot to i32, !dbg !8638
  store i32 %lnot.ext, i32* %reverse, align 4, !dbg !8639
  br label %if.end37, !dbg !8640

if.end37:                                         ; preds = %if.then35, %land.end
  %28 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8641
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !8641
  %bf.load38 = load i32, i32* %29, align 8, !dbg !8641
  %bf.clear39 = and i32 %bf.load38, 65535, !dbg !8641
  %cmp40 = icmp eq i32 %bf.clear39, 30, !dbg !8641
  br i1 %cmp40, label %if.then41, label %if.end194, !dbg !8643

if.then41:                                        ; preds = %if.end37
  call void @llvm.dbg.declare(metadata i32* %code, metadata !8644, metadata !DIExpression()), !dbg !8646
  %30 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8647
  %cond42 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %30, i32 0, i32 5, !dbg !8647
  %31 = load %struct.rtx_def*, %struct.rtx_def** %cond42, align 8, !dbg !8647
  %32 = bitcast %struct.rtx_def* %31 to i32*, !dbg !8647
  %bf.load43 = load i32, i32* %32, align 8, !dbg !8647
  %bf.clear44 = and i32 %bf.load43, 65535, !dbg !8647
  store i32 %bf.clear44, i32* %code, align 4, !dbg !8646
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op_a, metadata !8648, metadata !DIExpression()), !dbg !8649
  %33 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8650
  %cond45 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %33, i32 0, i32 5, !dbg !8650
  %34 = load %struct.rtx_def*, %struct.rtx_def** %cond45, align 8, !dbg !8650
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %34, i32 0, i32 1, !dbg !8650
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !8650
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !8650
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !8650
  %35 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !8650
  store %struct.rtx_def* %35, %struct.rtx_def** %op_a, align 8, !dbg !8649
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %op_b, metadata !8651, metadata !DIExpression()), !dbg !8652
  %36 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8653
  %cond50 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %36, i32 0, i32 5, !dbg !8653
  %37 = load %struct.rtx_def*, %struct.rtx_def** %cond50, align 8, !dbg !8653
  %u51 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %37, i32 0, i32 1, !dbg !8653
  %fld52 = bitcast %union.u* %u51 to [1 x %union.rtunion_def]*, !dbg !8653
  %arrayidx53 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld52, i64 0, i64 1, !dbg !8653
  %rt_rtx54 = bitcast %union.rtunion_def* %arrayidx53 to %struct.rtx_def**, !dbg !8653
  %38 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx54, align 8, !dbg !8653
  store %struct.rtx_def* %38, %struct.rtx_def** %op_b, align 8, !dbg !8652
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev_insn, metadata !8654, metadata !DIExpression()), !dbg !8655
  %39 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8656
  %cond_earliest55 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %39, i32 0, i32 6, !dbg !8657
  %40 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest55, align 8, !dbg !8657
  %call56 = call %struct.rtx_def* @prev_nonnote_insn(%struct.rtx_def* %40), !dbg !8658
  store %struct.rtx_def* %call56, %struct.rtx_def** %prev_insn, align 8, !dbg !8659
  %41 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8660
  %tobool57 = icmp ne %struct.rtx_def* %41, null, !dbg !8660
  br i1 %tobool57, label %land.lhs.true, label %if.end138, !dbg !8662

land.lhs.true:                                    ; preds = %if.then41
  %42 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8663
  %u58 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !8663
  %fld59 = bitcast %union.u* %u58 to [1 x %union.rtunion_def]*, !dbg !8663
  %arrayidx60 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld59, i64 0, i64 3, !dbg !8663
  %rt_bb = bitcast %union.rtunion_def* %arrayidx60 to %struct.basic_block_def**, !dbg !8663
  %43 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb, align 8, !dbg !8663
  %44 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8664
  %cond_earliest61 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %44, i32 0, i32 6, !dbg !8664
  %45 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest61, align 8, !dbg !8664
  %u62 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !8664
  %fld63 = bitcast %union.u* %u62 to [1 x %union.rtunion_def]*, !dbg !8664
  %arrayidx64 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld63, i64 0, i64 3, !dbg !8664
  %rt_bb65 = bitcast %union.rtunion_def* %arrayidx64 to %struct.basic_block_def**, !dbg !8664
  %46 = load %struct.basic_block_def*, %struct.basic_block_def** %rt_bb65, align 8, !dbg !8664
  %cmp66 = icmp eq %struct.basic_block_def* %43, %46, !dbg !8665
  br i1 %cmp66, label %land.lhs.true67, label %if.end138, !dbg !8666

land.lhs.true67:                                  ; preds = %land.lhs.true
  %47 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8667
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !8667
  %bf.load68 = load i32, i32* %48, align 8, !dbg !8667
  %bf.clear69 = and i32 %bf.load68, 65535, !dbg !8667
  %cmp70 = icmp eq i32 %bf.clear69, 8, !dbg !8667
  br i1 %cmp70, label %land.lhs.true82, label %lor.lhs.false, !dbg !8667

lor.lhs.false:                                    ; preds = %land.lhs.true67
  %49 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8667
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !8667
  %bf.load71 = load i32, i32* %50, align 8, !dbg !8667
  %bf.clear72 = and i32 %bf.load71, 65535, !dbg !8667
  %cmp73 = icmp eq i32 %bf.clear72, 7, !dbg !8667
  br i1 %cmp73, label %land.lhs.true82, label %lor.lhs.false74, !dbg !8667

lor.lhs.false74:                                  ; preds = %lor.lhs.false
  %51 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8667
  %52 = bitcast %struct.rtx_def* %51 to i32*, !dbg !8667
  %bf.load75 = load i32, i32* %52, align 8, !dbg !8667
  %bf.clear76 = and i32 %bf.load75, 65535, !dbg !8667
  %cmp77 = icmp eq i32 %bf.clear76, 9, !dbg !8667
  br i1 %cmp77, label %land.lhs.true82, label %lor.lhs.false78, !dbg !8667

lor.lhs.false78:                                  ; preds = %lor.lhs.false74
  %53 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8667
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !8667
  %bf.load79 = load i32, i32* %54, align 8, !dbg !8667
  %bf.clear80 = and i32 %bf.load79, 65535, !dbg !8667
  %cmp81 = icmp eq i32 %bf.clear80, 10, !dbg !8667
  br i1 %cmp81, label %land.lhs.true82, label %if.end138, !dbg !8668

land.lhs.true82:                                  ; preds = %lor.lhs.false78, %lor.lhs.false74, %lor.lhs.false, %land.lhs.true67
  %55 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8669
  %u83 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %55, i32 0, i32 1, !dbg !8669
  %fld84 = bitcast %union.u* %u83 to [1 x %union.rtunion_def]*, !dbg !8669
  %arrayidx85 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld84, i64 0, i64 5, !dbg !8669
  %rt_rtx86 = bitcast %union.rtunion_def* %arrayidx85 to %struct.rtx_def**, !dbg !8669
  %56 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx86, align 8, !dbg !8669
  %57 = bitcast %struct.rtx_def* %56 to i32*, !dbg !8669
  %bf.load87 = load i32, i32* %57, align 8, !dbg !8669
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !8669
  %cmp89 = icmp eq i32 %bf.clear88, 23, !dbg !8670
  br i1 %cmp89, label %if.then90, label %if.end138, !dbg !8671

if.then90:                                        ; preds = %land.lhs.true82
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !8672, metadata !DIExpression()), !dbg !8674
  %58 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8675
  %call91 = call %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def* %58), !dbg !8676
  store %struct.rtx_def* %call91, %struct.rtx_def** %src, align 8, !dbg !8674
  %59 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8677
  %tobool92 = icmp ne %struct.rtx_def* %59, null, !dbg !8677
  br i1 %tobool92, label %if.end102, label %if.then93, !dbg !8679

if.then93:                                        ; preds = %if.then90
  %60 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8680
  %u94 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %60, i32 0, i32 1, !dbg !8680
  %fld95 = bitcast %union.u* %u94 to [1 x %union.rtunion_def]*, !dbg !8680
  %arrayidx96 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld95, i64 0, i64 5, !dbg !8680
  %rt_rtx97 = bitcast %union.rtunion_def* %arrayidx96 to %struct.rtx_def**, !dbg !8680
  %61 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx97, align 8, !dbg !8680
  %u98 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %61, i32 0, i32 1, !dbg !8680
  %fld99 = bitcast %union.u* %u98 to [1 x %union.rtunion_def]*, !dbg !8680
  %arrayidx100 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld99, i64 0, i64 1, !dbg !8680
  %rt_rtx101 = bitcast %union.rtunion_def* %arrayidx100 to %struct.rtx_def**, !dbg !8680
  %62 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx101, align 8, !dbg !8680
  store %struct.rtx_def* %62, %struct.rtx_def** %src, align 8, !dbg !8681
  br label %if.end102, !dbg !8682

if.end102:                                        ; preds = %if.then93, %if.then90
  %63 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8683
  %64 = bitcast %struct.rtx_def* %63 to i32*, !dbg !8683
  %bf.load103 = load i32, i32* %64, align 8, !dbg !8683
  %bf.clear104 = and i32 %bf.load103, 65535, !dbg !8683
  %cmp105 = icmp eq i32 %bf.clear104, 30, !dbg !8683
  br i1 %cmp105, label %if.then106, label %if.end137, !dbg !8685

if.then106:                                       ; preds = %if.end102
  %65 = load %struct.rtx_def*, %struct.rtx_def** %op_a, align 8, !dbg !8686
  %66 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8689
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %66, i32 0, i32 1, !dbg !8689
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !8689
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 5, !dbg !8689
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !8689
  %67 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !8689
  %u111 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !8689
  %fld112 = bitcast %union.u* %u111 to [1 x %union.rtunion_def]*, !dbg !8689
  %arrayidx113 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld112, i64 0, i64 0, !dbg !8689
  %rt_rtx114 = bitcast %union.rtunion_def* %arrayidx113 to %struct.rtx_def**, !dbg !8689
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx114, align 8, !dbg !8689
  %call115 = call i32 @rtx_equal_p(%struct.rtx_def* %65, %struct.rtx_def* %68), !dbg !8690
  %tobool116 = icmp ne i32 %call115, 0, !dbg !8690
  br i1 %tobool116, label %if.then117, label %if.else, !dbg !8691

if.then117:                                       ; preds = %if.then106
  %69 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8692
  store %struct.rtx_def* %69, %struct.rtx_def** %op_a, align 8, !dbg !8693
  br label %if.end130, !dbg !8694

if.else:                                          ; preds = %if.then106
  %70 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8695
  %71 = load %struct.rtx_def*, %struct.rtx_def** %prev_insn, align 8, !dbg !8697
  %u118 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !8697
  %fld119 = bitcast %union.u* %u118 to [1 x %union.rtunion_def]*, !dbg !8697
  %arrayidx120 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld119, i64 0, i64 5, !dbg !8697
  %rt_rtx121 = bitcast %union.rtunion_def* %arrayidx120 to %struct.rtx_def**, !dbg !8697
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx121, align 8, !dbg !8697
  %u122 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %72, i32 0, i32 1, !dbg !8697
  %fld123 = bitcast %union.u* %u122 to [1 x %union.rtunion_def]*, !dbg !8697
  %arrayidx124 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld123, i64 0, i64 0, !dbg !8697
  %rt_rtx125 = bitcast %union.rtunion_def* %arrayidx124 to %struct.rtx_def**, !dbg !8697
  %73 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx125, align 8, !dbg !8697
  %call126 = call i32 @rtx_equal_p(%struct.rtx_def* %70, %struct.rtx_def* %73), !dbg !8698
  %tobool127 = icmp ne i32 %call126, 0, !dbg !8698
  br i1 %tobool127, label %if.then128, label %if.end129, !dbg !8699

if.then128:                                       ; preds = %if.else
  %74 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !8700
  store %struct.rtx_def* %74, %struct.rtx_def** %op_b, align 8, !dbg !8701
  br label %if.end129, !dbg !8702

if.end129:                                        ; preds = %if.then128, %if.else
  br label %if.end130

if.end130:                                        ; preds = %if.end129, %if.then117
  %75 = load %struct.rtx_def*, %struct.rtx_def** %op_a, align 8, !dbg !8703
  %76 = bitcast %struct.rtx_def* %75 to i32*, !dbg !8703
  %bf.load131 = load i32, i32* %76, align 8, !dbg !8703
  %bf.clear132 = and i32 %bf.load131, 65535, !dbg !8703
  %cmp133 = icmp eq i32 %bf.clear132, 30, !dbg !8703
  br i1 %cmp133, label %if.then134, label %if.end136, !dbg !8705

if.then134:                                       ; preds = %if.end130
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8706, metadata !DIExpression()), !dbg !8708
  %77 = load %struct.rtx_def*, %struct.rtx_def** %op_a, align 8, !dbg !8709
  store %struct.rtx_def* %77, %struct.rtx_def** %tmp, align 8, !dbg !8708
  %78 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8710
  store %struct.rtx_def* %78, %struct.rtx_def** %op_a, align 8, !dbg !8711
  %79 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8712
  store %struct.rtx_def* %79, %struct.rtx_def** %op_b, align 8, !dbg !8713
  %80 = load i32, i32* %code, align 4, !dbg !8714
  %call135 = call i32 @swap_condition(i32 %80), !dbg !8715
  store i32 %call135, i32* %code, align 4, !dbg !8716
  br label %if.end136, !dbg !8717

if.end136:                                        ; preds = %if.then134, %if.end130
  br label %if.end137, !dbg !8718

if.end137:                                        ; preds = %if.end136, %if.end102
  br label %if.end138, !dbg !8719

if.end138:                                        ; preds = %if.end137, %land.lhs.true82, %lor.lhs.false78, %land.lhs.true, %if.then41
  %81 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8720
  %82 = bitcast %struct.rtx_def* %81 to i32*, !dbg !8720
  %bf.load139 = load i32, i32* %82, align 8, !dbg !8720
  %bf.clear140 = and i32 %bf.load139, 65535, !dbg !8720
  %cmp141 = icmp eq i32 %bf.clear140, 30, !dbg !8720
  br i1 %cmp141, label %if.then142, label %if.end169, !dbg !8722

if.then142:                                       ; preds = %if.end138
  call void @llvm.dbg.declare(metadata i64* %desired_val, metadata !8723, metadata !DIExpression()), !dbg !8725
  %83 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8726
  %u143 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %83, i32 0, i32 1, !dbg !8726
  %hwint = bitcast %union.u* %u143 to [1 x i64]*, !dbg !8726
  %arrayidx144 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !8726
  %84 = load i64, i64* %arrayidx144, align 8, !dbg !8726
  store i64 %84, i64* %desired_val, align 8, !dbg !8725
  call void @llvm.dbg.declare(metadata i64* %actual_val, metadata !8727, metadata !DIExpression()), !dbg !8728
  %85 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8729
  %u145 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %85, i32 0, i32 1, !dbg !8729
  %hwint146 = bitcast %union.u* %u145 to [1 x i64]*, !dbg !8729
  %arrayidx147 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint146, i64 0, i64 0, !dbg !8729
  %86 = load i64, i64* %arrayidx147, align 8, !dbg !8729
  store i64 %86, i64* %actual_val, align 8, !dbg !8728
  %87 = load i32, i32* %code, align 4, !dbg !8730
  switch i32 %87, label %sw.default [
    i32 85, label %sw.bb
    i32 84, label %sw.bb152
    i32 83, label %sw.bb157
    i32 82, label %sw.bb163
  ], !dbg !8731

sw.bb:                                            ; preds = %if.then142
  %88 = load i64, i64* %actual_val, align 8, !dbg !8732
  %89 = load i64, i64* %desired_val, align 8, !dbg !8735
  %add = add nsw i64 %89, 1, !dbg !8736
  %cmp148 = icmp eq i64 %88, %add, !dbg !8737
  br i1 %cmp148, label %if.then149, label %if.end151, !dbg !8738

if.then149:                                       ; preds = %sw.bb
  store i32 84, i32* %code, align 4, !dbg !8739
  %90 = load i64, i64* %desired_val, align 8, !dbg !8741
  %call150 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %90), !dbg !8741
  store %struct.rtx_def* %call150, %struct.rtx_def** %op_b, align 8, !dbg !8742
  br label %if.end151, !dbg !8743

if.end151:                                        ; preds = %if.then149, %sw.bb
  br label %sw.epilog, !dbg !8744

sw.bb152:                                         ; preds = %if.then142
  %91 = load i64, i64* %actual_val, align 8, !dbg !8745
  %92 = load i64, i64* %desired_val, align 8, !dbg !8747
  %sub = sub nsw i64 %92, 1, !dbg !8748
  %cmp153 = icmp eq i64 %91, %sub, !dbg !8749
  br i1 %cmp153, label %if.then154, label %if.end156, !dbg !8750

if.then154:                                       ; preds = %sw.bb152
  store i32 85, i32* %code, align 4, !dbg !8751
  %93 = load i64, i64* %desired_val, align 8, !dbg !8753
  %call155 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %93), !dbg !8753
  store %struct.rtx_def* %call155, %struct.rtx_def** %op_b, align 8, !dbg !8754
  br label %if.end156, !dbg !8755

if.end156:                                        ; preds = %if.then154, %sw.bb152
  br label %sw.epilog, !dbg !8756

sw.bb157:                                         ; preds = %if.then142
  %94 = load i64, i64* %actual_val, align 8, !dbg !8757
  %95 = load i64, i64* %desired_val, align 8, !dbg !8759
  %sub158 = sub nsw i64 %95, 1, !dbg !8760
  %cmp159 = icmp eq i64 %94, %sub158, !dbg !8761
  br i1 %cmp159, label %if.then160, label %if.end162, !dbg !8762

if.then160:                                       ; preds = %sw.bb157
  store i32 82, i32* %code, align 4, !dbg !8763
  %96 = load i64, i64* %desired_val, align 8, !dbg !8765
  %call161 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %96), !dbg !8765
  store %struct.rtx_def* %call161, %struct.rtx_def** %op_b, align 8, !dbg !8766
  br label %if.end162, !dbg !8767

if.end162:                                        ; preds = %if.then160, %sw.bb157
  br label %sw.epilog, !dbg !8768

sw.bb163:                                         ; preds = %if.then142
  %97 = load i64, i64* %actual_val, align 8, !dbg !8769
  %98 = load i64, i64* %desired_val, align 8, !dbg !8771
  %add164 = add nsw i64 %98, 1, !dbg !8772
  %cmp165 = icmp eq i64 %97, %add164, !dbg !8773
  br i1 %cmp165, label %if.then166, label %if.end168, !dbg !8774

if.then166:                                       ; preds = %sw.bb163
  store i32 83, i32* %code, align 4, !dbg !8775
  %99 = load i64, i64* %desired_val, align 8, !dbg !8777
  %call167 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %99), !dbg !8777
  store %struct.rtx_def* %call167, %struct.rtx_def** %op_b, align 8, !dbg !8778
  br label %if.end168, !dbg !8779

if.end168:                                        ; preds = %if.then166, %sw.bb163
  br label %sw.epilog, !dbg !8780

sw.default:                                       ; preds = %if.then142
  br label %sw.epilog, !dbg !8781

sw.epilog:                                        ; preds = %sw.default, %if.end168, %if.end162, %if.end156, %if.end151
  br label %if.end169, !dbg !8782

if.end169:                                        ; preds = %sw.epilog, %if.end138
  %100 = load i32, i32* %code, align 4, !dbg !8783
  %101 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8785
  %cond170 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %101, i32 0, i32 5, !dbg !8785
  %102 = load %struct.rtx_def*, %struct.rtx_def** %cond170, align 8, !dbg !8785
  %103 = bitcast %struct.rtx_def* %102 to i32*, !dbg !8785
  %bf.load171 = load i32, i32* %103, align 8, !dbg !8785
  %bf.clear172 = and i32 %bf.load171, 65535, !dbg !8785
  %cmp173 = icmp ne i32 %100, %bf.clear172, !dbg !8786
  br i1 %cmp173, label %if.then188, label %lor.lhs.false174, !dbg !8787

lor.lhs.false174:                                 ; preds = %if.end169
  %104 = load %struct.rtx_def*, %struct.rtx_def** %op_a, align 8, !dbg !8788
  %105 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8789
  %cond175 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %105, i32 0, i32 5, !dbg !8789
  %106 = load %struct.rtx_def*, %struct.rtx_def** %cond175, align 8, !dbg !8789
  %u176 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %106, i32 0, i32 1, !dbg !8789
  %fld177 = bitcast %union.u* %u176 to [1 x %union.rtunion_def]*, !dbg !8789
  %arrayidx178 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld177, i64 0, i64 0, !dbg !8789
  %rt_rtx179 = bitcast %union.rtunion_def* %arrayidx178 to %struct.rtx_def**, !dbg !8789
  %107 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx179, align 8, !dbg !8789
  %cmp180 = icmp ne %struct.rtx_def* %104, %107, !dbg !8790
  br i1 %cmp180, label %if.then188, label %lor.lhs.false181, !dbg !8791

lor.lhs.false181:                                 ; preds = %lor.lhs.false174
  %108 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8792
  %109 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8793
  %cond182 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %109, i32 0, i32 5, !dbg !8793
  %110 = load %struct.rtx_def*, %struct.rtx_def** %cond182, align 8, !dbg !8793
  %u183 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %110, i32 0, i32 1, !dbg !8793
  %fld184 = bitcast %union.u* %u183 to [1 x %union.rtunion_def]*, !dbg !8793
  %arrayidx185 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld184, i64 0, i64 1, !dbg !8793
  %rt_rtx186 = bitcast %union.rtunion_def* %arrayidx185 to %struct.rtx_def**, !dbg !8793
  %111 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx186, align 8, !dbg !8793
  %cmp187 = icmp ne %struct.rtx_def* %108, %111, !dbg !8794
  br i1 %cmp187, label %if.then188, label %if.end193, !dbg !8795

if.then188:                                       ; preds = %lor.lhs.false181, %lor.lhs.false174, %if.end169
  %112 = load i32, i32* %code, align 4, !dbg !8796
  %113 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8796
  %114 = bitcast %struct.rtx_def* %113 to i32*, !dbg !8796
  %bf.load189 = load i32, i32* %114, align 8, !dbg !8796
  %bf.lshr = lshr i32 %bf.load189, 16, !dbg !8796
  %bf.clear190 = and i32 %bf.lshr, 255, !dbg !8796
  %115 = load %struct.rtx_def*, %struct.rtx_def** %op_a, align 8, !dbg !8796
  %116 = load %struct.rtx_def*, %struct.rtx_def** %op_b, align 8, !dbg !8796
  %call191 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %112, i32 %bf.clear190, %struct.rtx_def* %115, %struct.rtx_def* %116), !dbg !8796
  store %struct.rtx_def* %call191, %struct.rtx_def** %cond, align 8, !dbg !8798
  %117 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8799
  %cond_earliest192 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %117, i32 0, i32 6, !dbg !8800
  %118 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest192, align 8, !dbg !8800
  %119 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !8801
  store %struct.rtx_def* %118, %struct.rtx_def** %119, align 8, !dbg !8802
  %120 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8803
  store %struct.rtx_def* %120, %struct.rtx_def** %retval, align 8, !dbg !8804
  br label %return, !dbg !8804

if.end193:                                        ; preds = %lor.lhs.false181
  br label %if.end194, !dbg !8805

if.end194:                                        ; preds = %if.end193, %if.end37
  %121 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8806
  %jump195 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %121, i32 0, i32 4, !dbg !8807
  %122 = load %struct.rtx_def*, %struct.rtx_def** %jump195, align 8, !dbg !8807
  %123 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8808
  %124 = load i32, i32* %reverse, align 4, !dbg !8809
  %125 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !8810
  %126 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8811
  %call196 = call %struct.rtx_def* @canonicalize_condition(%struct.rtx_def* %122, %struct.rtx_def* %123, i32 %124, %struct.rtx_def** %125, %struct.rtx_def* %126, i32 0, i32 1), !dbg !8812
  store %struct.rtx_def* %call196, %struct.rtx_def** %cond, align 8, !dbg !8813
  %127 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8814
  %tobool197 = icmp ne %struct.rtx_def* %127, null, !dbg !8814
  br i1 %tobool197, label %lor.lhs.false198, label %if.then201, !dbg !8816

lor.lhs.false198:                                 ; preds = %if.end194
  %128 = load %struct.rtx_def*, %struct.rtx_def** %target.addr, align 8, !dbg !8817
  %129 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8818
  %call199 = call i32 @reg_mentioned_p(%struct.rtx_def* %128, %struct.rtx_def* %129), !dbg !8819
  %tobool200 = icmp ne i32 %call199, 0, !dbg !8819
  br i1 %tobool200, label %if.end202, label %if.then201, !dbg !8820

if.then201:                                       ; preds = %lor.lhs.false198, %if.end194
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8821
  br label %return, !dbg !8821

if.end202:                                        ; preds = %lor.lhs.false198
  %130 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8822
  %jump203 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %130, i32 0, i32 4, !dbg !8824
  %131 = load %struct.rtx_def*, %struct.rtx_def** %jump203, align 8, !dbg !8824
  store %struct.rtx_def* %131, %struct.rtx_def** %insn, align 8, !dbg !8825
  br label %for.cond, !dbg !8826

for.cond:                                         ; preds = %for.inc, %if.end202
  %132 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8827
  %133 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !8829
  %134 = load %struct.rtx_def*, %struct.rtx_def** %133, align 8, !dbg !8830
  %cmp204 = icmp ne %struct.rtx_def* %132, %134, !dbg !8831
  br i1 %cmp204, label %for.body, label %for.end, !dbg !8832

for.body:                                         ; preds = %for.cond
  %135 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8833
  %136 = bitcast %struct.rtx_def* %135 to i32*, !dbg !8833
  %bf.load205 = load i32, i32* %136, align 8, !dbg !8833
  %bf.clear206 = and i32 %bf.load205, 65535, !dbg !8833
  %cmp207 = icmp eq i32 %bf.clear206, 8, !dbg !8833
  br i1 %cmp207, label %land.lhs.true220, label %lor.lhs.false208, !dbg !8833

lor.lhs.false208:                                 ; preds = %for.body
  %137 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8833
  %138 = bitcast %struct.rtx_def* %137 to i32*, !dbg !8833
  %bf.load209 = load i32, i32* %138, align 8, !dbg !8833
  %bf.clear210 = and i32 %bf.load209, 65535, !dbg !8833
  %cmp211 = icmp eq i32 %bf.clear210, 7, !dbg !8833
  br i1 %cmp211, label %land.lhs.true220, label %lor.lhs.false212, !dbg !8833

lor.lhs.false212:                                 ; preds = %lor.lhs.false208
  %139 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8833
  %140 = bitcast %struct.rtx_def* %139 to i32*, !dbg !8833
  %bf.load213 = load i32, i32* %140, align 8, !dbg !8833
  %bf.clear214 = and i32 %bf.load213, 65535, !dbg !8833
  %cmp215 = icmp eq i32 %bf.clear214, 9, !dbg !8833
  br i1 %cmp215, label %land.lhs.true220, label %lor.lhs.false216, !dbg !8833

lor.lhs.false216:                                 ; preds = %lor.lhs.false212
  %141 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8833
  %142 = bitcast %struct.rtx_def* %141 to i32*, !dbg !8833
  %bf.load217 = load i32, i32* %142, align 8, !dbg !8833
  %bf.clear218 = and i32 %bf.load217, 65535, !dbg !8833
  %cmp219 = icmp eq i32 %bf.clear218, 10, !dbg !8833
  br i1 %cmp219, label %land.lhs.true220, label %if.end228, !dbg !8835

land.lhs.true220:                                 ; preds = %lor.lhs.false216, %lor.lhs.false212, %lor.lhs.false208, %for.body
  %143 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8836
  %x = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %143, i32 0, i32 11, !dbg !8837
  %144 = load %struct.rtx_def*, %struct.rtx_def** %x, align 8, !dbg !8837
  %145 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8838
  %u221 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %145, i32 0, i32 1, !dbg !8838
  %fld222 = bitcast %union.u* %u221 to [1 x %union.rtunion_def]*, !dbg !8838
  %arrayidx223 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld222, i64 0, i64 5, !dbg !8838
  %rt_rtx224 = bitcast %union.rtunion_def* %arrayidx223 to %struct.rtx_def**, !dbg !8838
  %146 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx224, align 8, !dbg !8838
  %call225 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %144, %struct.rtx_def* %146), !dbg !8839
  %tobool226 = icmp ne i32 %call225, 0, !dbg !8839
  br i1 %tobool226, label %if.then227, label %if.end228, !dbg !8840

if.then227:                                       ; preds = %land.lhs.true220
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8841
  br label %return, !dbg !8841

if.end228:                                        ; preds = %land.lhs.true220, %lor.lhs.false216
  br label %for.inc, !dbg !8842

for.inc:                                          ; preds = %if.end228
  %147 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8843
  %u229 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %147, i32 0, i32 1, !dbg !8843
  %fld230 = bitcast %union.u* %u229 to [1 x %union.rtunion_def]*, !dbg !8843
  %arrayidx231 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld230, i64 0, i64 1, !dbg !8843
  %rt_rtx232 = bitcast %union.rtunion_def* %arrayidx231 to %struct.rtx_def**, !dbg !8843
  %148 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx232, align 8, !dbg !8843
  store %struct.rtx_def* %148, %struct.rtx_def** %insn, align 8, !dbg !8844
  br label %for.cond, !dbg !8845, !llvm.loop !8846

for.end:                                          ; preds = %for.cond
  %149 = load %struct.rtx_def**, %struct.rtx_def*** %earliest.addr, align 8, !dbg !8848
  %150 = load %struct.rtx_def*, %struct.rtx_def** %149, align 8, !dbg !8850
  store %struct.rtx_def* %150, %struct.rtx_def** %insn, align 8, !dbg !8851
  br label %for.cond233, !dbg !8852

for.cond233:                                      ; preds = %for.inc260, %for.end
  %151 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8853
  %152 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8855
  %jump234 = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %152, i32 0, i32 4, !dbg !8856
  %153 = load %struct.rtx_def*, %struct.rtx_def** %jump234, align 8, !dbg !8856
  %cmp235 = icmp ne %struct.rtx_def* %151, %153, !dbg !8857
  br i1 %cmp235, label %for.body236, label %for.end265, !dbg !8858

for.body236:                                      ; preds = %for.cond233
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8859
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !8859
  %bf.load237 = load i32, i32* %155, align 8, !dbg !8859
  %bf.clear238 = and i32 %bf.load237, 65535, !dbg !8859
  %cmp239 = icmp eq i32 %bf.clear238, 8, !dbg !8859
  br i1 %cmp239, label %land.lhs.true252, label %lor.lhs.false240, !dbg !8859

lor.lhs.false240:                                 ; preds = %for.body236
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8859
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !8859
  %bf.load241 = load i32, i32* %157, align 8, !dbg !8859
  %bf.clear242 = and i32 %bf.load241, 65535, !dbg !8859
  %cmp243 = icmp eq i32 %bf.clear242, 7, !dbg !8859
  br i1 %cmp243, label %land.lhs.true252, label %lor.lhs.false244, !dbg !8859

lor.lhs.false244:                                 ; preds = %lor.lhs.false240
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8859
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !8859
  %bf.load245 = load i32, i32* %159, align 8, !dbg !8859
  %bf.clear246 = and i32 %bf.load245, 65535, !dbg !8859
  %cmp247 = icmp eq i32 %bf.clear246, 9, !dbg !8859
  br i1 %cmp247, label %land.lhs.true252, label %lor.lhs.false248, !dbg !8859

lor.lhs.false248:                                 ; preds = %lor.lhs.false244
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8859
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !8859
  %bf.load249 = load i32, i32* %161, align 8, !dbg !8859
  %bf.clear250 = and i32 %bf.load249, 65535, !dbg !8859
  %cmp251 = icmp eq i32 %bf.clear250, 10, !dbg !8859
  br i1 %cmp251, label %land.lhs.true252, label %if.end259, !dbg !8861

land.lhs.true252:                                 ; preds = %lor.lhs.false248, %lor.lhs.false244, %lor.lhs.false240, %for.body236
  %162 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8862
  %a = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %162, i32 0, i32 9, !dbg !8863
  %163 = load %struct.rtx_def*, %struct.rtx_def** %a, align 8, !dbg !8863
  %164 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8864
  %call253 = call i32 @modified_in_p(%struct.rtx_def* %163, %struct.rtx_def* %164), !dbg !8865
  %tobool254 = icmp ne i32 %call253, 0, !dbg !8865
  br i1 %tobool254, label %if.then258, label %lor.lhs.false255, !dbg !8866

lor.lhs.false255:                                 ; preds = %land.lhs.true252
  %165 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8867
  %b = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %165, i32 0, i32 10, !dbg !8868
  %166 = load %struct.rtx_def*, %struct.rtx_def** %b, align 8, !dbg !8868
  %167 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8869
  %call256 = call i32 @modified_in_p(%struct.rtx_def* %166, %struct.rtx_def* %167), !dbg !8870
  %tobool257 = icmp ne i32 %call256, 0, !dbg !8870
  br i1 %tobool257, label %if.then258, label %if.end259, !dbg !8871

if.then258:                                       ; preds = %lor.lhs.false255, %land.lhs.true252
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8872
  br label %return, !dbg !8872

if.end259:                                        ; preds = %lor.lhs.false255, %lor.lhs.false248
  br label %for.inc260, !dbg !8873

for.inc260:                                       ; preds = %if.end259
  %168 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8874
  %u261 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %168, i32 0, i32 1, !dbg !8874
  %fld262 = bitcast %union.u* %u261 to [1 x %union.rtunion_def]*, !dbg !8874
  %arrayidx263 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld262, i64 0, i64 2, !dbg !8874
  %rt_rtx264 = bitcast %union.rtunion_def* %arrayidx263 to %struct.rtx_def**, !dbg !8874
  %169 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx264, align 8, !dbg !8874
  store %struct.rtx_def* %169, %struct.rtx_def** %insn, align 8, !dbg !8875
  br label %for.cond233, !dbg !8876, !llvm.loop !8877

for.end265:                                       ; preds = %for.cond233
  %170 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8879
  store %struct.rtx_def* %170, %struct.rtx_def** %retval, align 8, !dbg !8880
  br label %return, !dbg !8880

return:                                           ; preds = %for.end265, %if.then258, %if.then227, %if.then201, %if.then188, %if.then
  %171 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8881
  ret %struct.rtx_def* %171, !dbg !8881
}

declare dso_local i32 @swap_condition(i32) #1

declare dso_local %struct.rtx_def* @expand_simple_binop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare dso_local i32 @reg_mentioned_p(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @find_reg_equal_equiv_note(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @gen_rtx_CONST_INT(i32, i64) #1

declare dso_local %struct.rtx_def* @get_pool_constant(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @expand_one_cmpl_abs_nojump(i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @expand_abs_nojump(i32, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare dso_local %struct.rtx_def* @expand_simple_unop(i32, i32, %struct.rtx_def*, %struct.rtx_def*, i32) #1

declare dso_local i32 @register_operand(%struct.rtx_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @noce_emit_cmove(%struct.noce_if_info* %if_info, %struct.rtx_def* %x, i32 %code, %struct.rtx_def* %cmp_a, %struct.rtx_def* %cmp_b, %struct.rtx_def* %vfalse, %struct.rtx_def* %vtrue) #0 !dbg !8882 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %if_info.addr = alloca %struct.noce_if_info*, align 8
  %x.addr = alloca %struct.rtx_def*, align 8
  %code.addr = alloca i32, align 4
  %cmp_a.addr = alloca %struct.rtx_def*, align 8
  %cmp_b.addr = alloca %struct.rtx_def*, align 8
  %vfalse.addr = alloca %struct.rtx_def*, align 8
  %vtrue.addr = alloca %struct.rtx_def*, align 8
  %tmp = alloca %struct.rtx_def*, align 8
  store %struct.noce_if_info* %if_info, %struct.noce_if_info** %if_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_info.addr, metadata !8885, metadata !DIExpression()), !dbg !8886
  store %struct.rtx_def* %x, %struct.rtx_def** %x.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %x.addr, metadata !8887, metadata !DIExpression()), !dbg !8888
  store i32 %code, i32* %code.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %code.addr, metadata !8889, metadata !DIExpression()), !dbg !8890
  store %struct.rtx_def* %cmp_a, %struct.rtx_def** %cmp_a.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp_a.addr, metadata !8891, metadata !DIExpression()), !dbg !8892
  store %struct.rtx_def* %cmp_b, %struct.rtx_def** %cmp_b.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cmp_b.addr, metadata !8893, metadata !DIExpression()), !dbg !8894
  store %struct.rtx_def* %vfalse, %struct.rtx_def** %vfalse.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %vfalse.addr, metadata !8895, metadata !DIExpression()), !dbg !8896
  store %struct.rtx_def* %vtrue, %struct.rtx_def** %vtrue.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %vtrue.addr, metadata !8897, metadata !DIExpression()), !dbg !8898
  %0 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8899
  %cond_earliest = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %0, i32 0, i32 6, !dbg !8901
  %1 = load %struct.rtx_def*, %struct.rtx_def** %cond_earliest, align 8, !dbg !8901
  %2 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8902
  %jump = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %2, i32 0, i32 4, !dbg !8903
  %3 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !8903
  %cmp = icmp eq %struct.rtx_def* %1, %3, !dbg !8904
  br i1 %cmp, label %if.then, label %if.end12, !dbg !8905

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %tmp, metadata !8906, metadata !DIExpression()), !dbg !8908
  %4 = load i32, i32* %code.addr, align 4, !dbg !8909
  %5 = load %struct.noce_if_info*, %struct.noce_if_info** %if_info.addr, align 8, !dbg !8909
  %cond = getelementptr inbounds %struct.noce_if_info, %struct.noce_if_info* %5, i32 0, i32 5, !dbg !8909
  %6 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !8909
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !8909
  %bf.load = load i32, i32* %7, align 8, !dbg !8909
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !8909
  %bf.clear = and i32 %bf.lshr, 255, !dbg !8909
  %8 = load %struct.rtx_def*, %struct.rtx_def** %cmp_a.addr, align 8, !dbg !8909
  %9 = load %struct.rtx_def*, %struct.rtx_def** %cmp_b.addr, align 8, !dbg !8909
  %call = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %4, i32 %bf.clear, %struct.rtx_def* %8, %struct.rtx_def* %9), !dbg !8909
  store %struct.rtx_def* %call, %struct.rtx_def** %tmp, align 8, !dbg !8910
  %10 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8911
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !8911
  %bf.load1 = load i32, i32* %11, align 8, !dbg !8911
  %bf.lshr2 = lshr i32 %bf.load1, 16, !dbg !8911
  %bf.clear3 = and i32 %bf.lshr2, 255, !dbg !8911
  %12 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8911
  %13 = load %struct.rtx_def*, %struct.rtx_def** %vtrue.addr, align 8, !dbg !8911
  %14 = load %struct.rtx_def*, %struct.rtx_def** %vfalse.addr, align 8, !dbg !8911
  %call4 = call %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32 47, i32 %bf.clear3, %struct.rtx_def* %12, %struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !8911
  store %struct.rtx_def* %call4, %struct.rtx_def** %tmp, align 8, !dbg !8912
  %15 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8913
  %16 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8913
  %call5 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 23, i32 0, %struct.rtx_def* %15, %struct.rtx_def* %16), !dbg !8913
  store %struct.rtx_def* %call5, %struct.rtx_def** %tmp, align 8, !dbg !8914
  call void @start_sequence(), !dbg !8915
  %17 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8916
  %call6 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %17), !dbg !8917
  store %struct.rtx_def* %call6, %struct.rtx_def** %tmp, align 8, !dbg !8918
  %18 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8919
  %call7 = call i32 @recog_memoized(%struct.rtx_def* %18), !dbg !8921
  %cmp8 = icmp sge i32 %call7, 0, !dbg !8922
  br i1 %cmp8, label %if.then9, label %if.end, !dbg !8923

if.then9:                                         ; preds = %if.then
  %call10 = call %struct.rtx_def* @get_insns(), !dbg !8924
  store %struct.rtx_def* %call10, %struct.rtx_def** %tmp, align 8, !dbg !8926
  call void @end_sequence(), !dbg !8927
  %19 = load %struct.rtx_def*, %struct.rtx_def** %tmp, align 8, !dbg !8928
  %call11 = call %struct.rtx_def* @emit_insn(%struct.rtx_def* %19), !dbg !8929
  %20 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8930
  store %struct.rtx_def* %20, %struct.rtx_def** %retval, align 8, !dbg !8931
  br label %return, !dbg !8931

if.end:                                           ; preds = %if.then
  call void @end_sequence(), !dbg !8932
  br label %if.end12, !dbg !8933

if.end12:                                         ; preds = %if.end, %entry
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cmp_a.addr, align 8, !dbg !8934
  %22 = load %struct.rtx_def*, %struct.rtx_def** %cmp_a.addr, align 8, !dbg !8936
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !8936
  %bf.load13 = load i32, i32* %23, align 8, !dbg !8936
  %bf.lshr14 = lshr i32 %bf.load13, 16, !dbg !8936
  %bf.clear15 = and i32 %bf.lshr14, 255, !dbg !8936
  %call16 = call i32 @general_operand(%struct.rtx_def* %21, i32 %bf.clear15), !dbg !8937
  %tobool = icmp ne i32 %call16, 0, !dbg !8937
  br i1 %tobool, label %lor.lhs.false, label %if.then22, !dbg !8938

lor.lhs.false:                                    ; preds = %if.end12
  %24 = load %struct.rtx_def*, %struct.rtx_def** %cmp_b.addr, align 8, !dbg !8939
  %25 = load %struct.rtx_def*, %struct.rtx_def** %cmp_b.addr, align 8, !dbg !8940
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !8940
  %bf.load17 = load i32, i32* %26, align 8, !dbg !8940
  %bf.lshr18 = lshr i32 %bf.load17, 16, !dbg !8940
  %bf.clear19 = and i32 %bf.lshr18, 255, !dbg !8940
  %call20 = call i32 @general_operand(%struct.rtx_def* %24, i32 %bf.clear19), !dbg !8941
  %tobool21 = icmp ne i32 %call20, 0, !dbg !8941
  br i1 %tobool21, label %if.end23, label %if.then22, !dbg !8942

if.then22:                                        ; preds = %lor.lhs.false, %if.end12
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !8943
  br label %return, !dbg !8943

if.end23:                                         ; preds = %lor.lhs.false
  %27 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8944
  %28 = load i32, i32* %code.addr, align 4, !dbg !8945
  %29 = load %struct.rtx_def*, %struct.rtx_def** %cmp_a.addr, align 8, !dbg !8946
  %30 = load %struct.rtx_def*, %struct.rtx_def** %cmp_b.addr, align 8, !dbg !8947
  %31 = load %struct.rtx_def*, %struct.rtx_def** %vtrue.addr, align 8, !dbg !8948
  %32 = load %struct.rtx_def*, %struct.rtx_def** %vfalse.addr, align 8, !dbg !8949
  %33 = load %struct.rtx_def*, %struct.rtx_def** %x.addr, align 8, !dbg !8950
  %34 = bitcast %struct.rtx_def* %33 to i32*, !dbg !8950
  %bf.load24 = load i32, i32* %34, align 8, !dbg !8950
  %bf.lshr25 = lshr i32 %bf.load24, 16, !dbg !8950
  %bf.clear26 = and i32 %bf.lshr25, 255, !dbg !8950
  %35 = load i32, i32* %code.addr, align 4, !dbg !8951
  %cmp27 = icmp eq i32 %35, 89, !dbg !8952
  br i1 %cmp27, label %lor.end, label %lor.lhs.false28, !dbg !8953

lor.lhs.false28:                                  ; preds = %if.end23
  %36 = load i32, i32* %code.addr, align 4, !dbg !8954
  %cmp29 = icmp eq i32 %36, 86, !dbg !8955
  br i1 %cmp29, label %lor.end, label %lor.lhs.false30, !dbg !8956

lor.lhs.false30:                                  ; preds = %lor.lhs.false28
  %37 = load i32, i32* %code.addr, align 4, !dbg !8957
  %cmp31 = icmp eq i32 %37, 88, !dbg !8958
  br i1 %cmp31, label %lor.end, label %lor.rhs, !dbg !8959

lor.rhs:                                          ; preds = %lor.lhs.false30
  %38 = load i32, i32* %code.addr, align 4, !dbg !8960
  %cmp32 = icmp eq i32 %38, 87, !dbg !8961
  br label %lor.end, !dbg !8959

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false30, %lor.lhs.false28, %if.end23
  %39 = phi i1 [ true, %lor.lhs.false30 ], [ true, %lor.lhs.false28 ], [ true, %if.end23 ], [ %cmp32, %lor.rhs ]
  %lor.ext = zext i1 %39 to i32, !dbg !8959
  %call33 = call %struct.rtx_def* @emit_conditional_move(%struct.rtx_def* %27, i32 %28, %struct.rtx_def* %29, %struct.rtx_def* %30, i32 0, %struct.rtx_def* %31, %struct.rtx_def* %32, i32 %bf.clear26, i32 %lor.ext), !dbg !8962
  store %struct.rtx_def* %call33, %struct.rtx_def** %retval, align 8, !dbg !8963
  br label %return, !dbg !8963

return:                                           ; preds = %lor.end, %if.then22, %if.then9
  %40 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !8964
  ret %struct.rtx_def* %40, !dbg !8964
}

declare dso_local %struct.rtx_def* @gen_rtx_fmt_eee_stat(i32, i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @emit_conditional_move(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare dso_local i64 @trunc_int_for_mode(i64, i32) #1

declare dso_local i32 @exact_log2(i64) #1

declare dso_local %struct.rtx_def* @emit_conditional_add(%struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare dso_local i32 @insn_rtx_cost(%struct.rtx_def*, i8 zeroext) #1

declare dso_local %struct.rtx_def* @copy_rtx(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @get_last_insn() #1

declare dso_local %struct.rtx_def* @emit_insn_before(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @gen_rtx_MEM(i32, %struct.rtx_def*) #1

declare dso_local void @set_mem_alias_set(%struct.rtx_def*, i32) #1

declare dso_local void @set_mem_align(%struct.rtx_def*, i32) #1

declare dso_local void @set_mem_addr_space(%struct.rtx_def*, i8 zeroext) #1

declare dso_local i32 @rtx_cost(%struct.rtx_def*, i32, i8 zeroext) #1

declare dso_local %struct.rtx_def* @expand_binop(i32, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare dso_local %struct.rtx_def* @emit_move_insn(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local void @store_bit_field(%struct.rtx_def*, i64, i64, i32, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @expand_unop(i32, %struct.optab_d*, %struct.rtx_def*, %struct.rtx_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @check_cond_move_block(%struct.basic_block_def* %bb, %struct.rtx_def** %vals, %struct.VEC_int_heap** %regs, %struct.rtx_def* %cond) #0 !dbg !8965 {
entry:
  %retval = alloca i32, align 4
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %vals.addr = alloca %struct.rtx_def**, align 8
  %regs.addr = alloca %struct.VEC_int_heap**, align 8
  %cond.addr = alloca %struct.rtx_def*, align 8
  %insn = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %src = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !8969, metadata !DIExpression()), !dbg !8970
  store %struct.rtx_def** %vals, %struct.rtx_def*** %vals.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %vals.addr, metadata !8971, metadata !DIExpression()), !dbg !8972
  store %struct.VEC_int_heap** %regs, %struct.VEC_int_heap*** %regs.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %regs.addr, metadata !8973, metadata !DIExpression()), !dbg !8974
  store %struct.rtx_def* %cond, %struct.rtx_def** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond.addr, metadata !8975, metadata !DIExpression()), !dbg !8976
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !8977, metadata !DIExpression()), !dbg !8978
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8979
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !8979
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !8979
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !8979
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !8979
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !8979
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !8980
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8981
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !8981
  %bf.load = load i32, i32* %4, align 8, !dbg !8981
  %bf.clear = and i32 %bf.load, 65535, !dbg !8981
  %cmp = icmp eq i32 %bf.clear, 9, !dbg !8981
  br i1 %cmp, label %land.lhs.true, label %if.end, !dbg !8983

land.lhs.true:                                    ; preds = %entry
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8984
  %call = call i32 @onlyjump_p(%struct.rtx_def* %5), !dbg !8985
  %tobool = icmp ne i32 %call, 0, !dbg !8985
  br i1 %tobool, label %if.end, label %if.then, !dbg !8986

if.then:                                          ; preds = %land.lhs.true
  store i32 0, i32* %retval, align 4, !dbg !8987
  br label %return, !dbg !8987

if.end:                                           ; preds = %land.lhs.true, %entry
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8988
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !8988
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !8988
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !8988
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !8988
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !8988
  store %struct.rtx_def* %8, %struct.rtx_def** %insn, align 8, !dbg !8988
  br label %for.cond, !dbg !8988

for.cond:                                         ; preds = %for.inc, %if.end
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8990
  %tobool3 = icmp ne %struct.rtx_def* %9, null, !dbg !8990
  br i1 %tobool3, label %land.rhs, label %land.end, !dbg !8990

land.rhs:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8990
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !8990
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !8990
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !8990
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !8990
  %end_6 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 1, !dbg !8990
  %13 = load %struct.rtx_def*, %struct.rtx_def** %end_6, align 8, !dbg !8990
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !8990
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !8990
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !8990
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !8990
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !8990
  %cmp7 = icmp ne %struct.rtx_def* %10, %14, !dbg !8990
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp7, %land.rhs ], !dbg !8992
  br i1 %15, label %for.body, label %for.end, !dbg !8988

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !8993, metadata !DIExpression()), !dbg !8995
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !8996, metadata !DIExpression()), !dbg !8997
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %src, metadata !8998, metadata !DIExpression()), !dbg !8999
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9000
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !9000
  %bf.load8 = load i32, i32* %17, align 8, !dbg !9000
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9000
  %cmp10 = icmp eq i32 %bf.clear9, 8, !dbg !9000
  br i1 %cmp10, label %land.lhs.true22, label %lor.lhs.false, !dbg !9000

lor.lhs.false:                                    ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9000
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9000
  %bf.load11 = load i32, i32* %19, align 8, !dbg !9000
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !9000
  %cmp13 = icmp eq i32 %bf.clear12, 7, !dbg !9000
  br i1 %cmp13, label %land.lhs.true22, label %lor.lhs.false14, !dbg !9000

lor.lhs.false14:                                  ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9000
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !9000
  %bf.load15 = load i32, i32* %21, align 8, !dbg !9000
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !9000
  %cmp17 = icmp eq i32 %bf.clear16, 9, !dbg !9000
  br i1 %cmp17, label %land.lhs.true22, label %lor.lhs.false18, !dbg !9000

lor.lhs.false18:                                  ; preds = %lor.lhs.false14
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9000
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !9000
  %bf.load19 = load i32, i32* %23, align 8, !dbg !9000
  %bf.clear20 = and i32 %bf.load19, 65535, !dbg !9000
  %cmp21 = icmp eq i32 %bf.clear20, 10, !dbg !9000
  br i1 %cmp21, label %land.lhs.true22, label %if.then30, !dbg !9000

land.lhs.true22:                                  ; preds = %lor.lhs.false18, %lor.lhs.false14, %lor.lhs.false, %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9000
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9000
  %bf.load23 = load i32, i32* %25, align 8, !dbg !9000
  %bf.clear24 = and i32 %bf.load23, 65535, !dbg !9000
  %cmp25 = icmp eq i32 %bf.clear24, 7, !dbg !9000
  br i1 %cmp25, label %if.then30, label %lor.lhs.false26, !dbg !9002

lor.lhs.false26:                                  ; preds = %land.lhs.true22
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9003
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !9003
  %bf.load27 = load i32, i32* %27, align 8, !dbg !9003
  %bf.clear28 = and i32 %bf.load27, 65535, !dbg !9003
  %cmp29 = icmp eq i32 %bf.clear28, 9, !dbg !9003
  br i1 %cmp29, label %if.then30, label %if.end31, !dbg !9004

if.then30:                                        ; preds = %lor.lhs.false26, %land.lhs.true22, %lor.lhs.false18
  br label %for.inc, !dbg !9005

if.end31:                                         ; preds = %lor.lhs.false26
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9006
  %bf.load32 = load i32, i32* %29, align 8, !dbg !9006
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !9006
  %cmp34 = icmp eq i32 %bf.clear33, 8, !dbg !9006
  br i1 %cmp34, label %cond.true, label %lor.lhs.false35, !dbg !9006

lor.lhs.false35:                                  ; preds = %if.end31
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !9006
  %bf.load36 = load i32, i32* %31, align 8, !dbg !9006
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !9006
  %cmp38 = icmp eq i32 %bf.clear37, 7, !dbg !9006
  br i1 %cmp38, label %cond.true, label %lor.lhs.false39, !dbg !9006

lor.lhs.false39:                                  ; preds = %lor.lhs.false35
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !9006
  %bf.load40 = load i32, i32* %33, align 8, !dbg !9006
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !9006
  %cmp42 = icmp eq i32 %bf.clear41, 9, !dbg !9006
  br i1 %cmp42, label %cond.true, label %lor.lhs.false43, !dbg !9006

lor.lhs.false43:                                  ; preds = %lor.lhs.false39
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !9006
  %bf.load44 = load i32, i32* %35, align 8, !dbg !9006
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !9006
  %cmp46 = icmp eq i32 %bf.clear45, 10, !dbg !9006
  br i1 %cmp46, label %cond.true, label %cond.false65, !dbg !9006

cond.true:                                        ; preds = %lor.lhs.false43, %lor.lhs.false39, %lor.lhs.false35, %if.end31
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9006
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !9006
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 5, !dbg !9006
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !9006
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !9006
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !9006
  %bf.load51 = load i32, i32* %38, align 8, !dbg !9006
  %bf.clear52 = and i32 %bf.load51, 65535, !dbg !9006
  %cmp53 = icmp eq i32 %bf.clear52, 23, !dbg !9006
  br i1 %cmp53, label %cond.true54, label %cond.false, !dbg !9006

cond.true54:                                      ; preds = %cond.true
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !9006
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !9006
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 5, !dbg !9006
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !9006
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !9006
  br label %cond.end, !dbg !9006

cond.false:                                       ; preds = %cond.true
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9006
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !9006
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !9006
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 5, !dbg !9006
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !9006
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !9006
  %call63 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %41, %struct.rtx_def* %43), !dbg !9006
  br label %cond.end, !dbg !9006

cond.end:                                         ; preds = %cond.false, %cond.true54
  %cond64 = phi %struct.rtx_def* [ %40, %cond.true54 ], [ %call63, %cond.false ], !dbg !9006
  br label %cond.end66, !dbg !9006

cond.false65:                                     ; preds = %lor.lhs.false43
  br label %cond.end66, !dbg !9006

cond.end66:                                       ; preds = %cond.false65, %cond.end
  %cond67 = phi %struct.rtx_def* [ %cond64, %cond.end ], [ null, %cond.false65 ], !dbg !9006
  store %struct.rtx_def* %cond67, %struct.rtx_def** %set, align 8, !dbg !9007
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9008
  %tobool68 = icmp ne %struct.rtx_def* %44, null, !dbg !9008
  br i1 %tobool68, label %if.end70, label %if.then69, !dbg !9010

if.then69:                                        ; preds = %cond.end66
  store i32 0, i32* %retval, align 4, !dbg !9011
  br label %return, !dbg !9011

if.end70:                                         ; preds = %cond.end66
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9012
  %u71 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !9012
  %fld72 = bitcast %union.u* %u71 to [1 x %union.rtunion_def]*, !dbg !9012
  %arrayidx73 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld72, i64 0, i64 0, !dbg !9012
  %rt_rtx74 = bitcast %union.rtunion_def* %arrayidx73 to %struct.rtx_def**, !dbg !9012
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx74, align 8, !dbg !9012
  store %struct.rtx_def* %46, %struct.rtx_def** %dest, align 8, !dbg !9013
  %47 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9014
  %u75 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %47, i32 0, i32 1, !dbg !9014
  %fld76 = bitcast %union.u* %u75 to [1 x %union.rtunion_def]*, !dbg !9014
  %arrayidx77 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld76, i64 0, i64 1, !dbg !9014
  %rt_rtx78 = bitcast %union.rtunion_def* %arrayidx77 to %struct.rtx_def**, !dbg !9014
  %48 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx78, align 8, !dbg !9014
  store %struct.rtx_def* %48, %struct.rtx_def** %src, align 8, !dbg !9015
  %49 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9016
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !9016
  %bf.load79 = load i32, i32* %50, align 8, !dbg !9016
  %bf.clear80 = and i32 %bf.load79, 65535, !dbg !9016
  %cmp81 = icmp eq i32 %bf.clear80, 37, !dbg !9016
  br i1 %cmp81, label %lor.lhs.false82, label %if.then85, !dbg !9018

lor.lhs.false82:                                  ; preds = %if.end70
  %51 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9019
  %call83 = call i32 @rhs_regno(%struct.rtx_def* %51), !dbg !9019
  %cmp84 = icmp ult i32 %call83, 53, !dbg !9019
  br i1 %cmp84, label %if.then85, label %if.end86, !dbg !9020

if.then85:                                        ; preds = %lor.lhs.false82, %if.end70
  store i32 0, i32* %retval, align 4, !dbg !9021
  br label %return, !dbg !9021

if.end86:                                         ; preds = %lor.lhs.false82
  %52 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9022
  %53 = bitcast %struct.rtx_def* %52 to i32*, !dbg !9022
  %bf.load87 = load i32, i32* %53, align 8, !dbg !9022
  %bf.clear88 = and i32 %bf.load87, 65535, !dbg !9022
  %idxprom = sext i32 %bf.clear88 to i64, !dbg !9022
  %arrayidx89 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom, !dbg !9022
  %54 = load i32, i32* %arrayidx89, align 4, !dbg !9022
  %cmp90 = icmp eq i32 %54, 9, !dbg !9022
  br i1 %cmp90, label %if.end95, label %land.lhs.true91, !dbg !9024

land.lhs.true91:                                  ; preds = %if.end86
  %55 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9025
  %call92 = call i32 @register_operand(%struct.rtx_def* %55, i32 0), !dbg !9026
  %tobool93 = icmp ne i32 %call92, 0, !dbg !9026
  br i1 %tobool93, label %if.end95, label %if.then94, !dbg !9027

if.then94:                                        ; preds = %land.lhs.true91
  store i32 0, i32* %retval, align 4, !dbg !9028
  br label %return, !dbg !9028

if.end95:                                         ; preds = %land.lhs.true91, %if.end86
  %56 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9029
  %call96 = call i32 @side_effects_p(%struct.rtx_def* %56), !dbg !9031
  %tobool97 = icmp ne i32 %call96, 0, !dbg !9031
  br i1 %tobool97, label %if.then101, label %lor.lhs.false98, !dbg !9032

lor.lhs.false98:                                  ; preds = %if.end95
  %57 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9033
  %call99 = call i32 @side_effects_p(%struct.rtx_def* %57), !dbg !9034
  %tobool100 = icmp ne i32 %call99, 0, !dbg !9034
  br i1 %tobool100, label %if.then101, label %if.end102, !dbg !9035

if.then101:                                       ; preds = %lor.lhs.false98, %if.end95
  store i32 0, i32* %retval, align 4, !dbg !9036
  br label %return, !dbg !9036

if.end102:                                        ; preds = %lor.lhs.false98
  %58 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9037
  %call103 = call i32 @may_trap_p(%struct.rtx_def* %58), !dbg !9039
  %tobool104 = icmp ne i32 %call103, 0, !dbg !9039
  br i1 %tobool104, label %if.then108, label %lor.lhs.false105, !dbg !9040

lor.lhs.false105:                                 ; preds = %if.end102
  %59 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9041
  %call106 = call i32 @may_trap_p(%struct.rtx_def* %59), !dbg !9042
  %tobool107 = icmp ne i32 %call106, 0, !dbg !9042
  br i1 %tobool107, label %if.then108, label %if.end109, !dbg !9043

if.then108:                                       ; preds = %lor.lhs.false105, %if.end102
  store i32 0, i32* %retval, align 4, !dbg !9044
  br label %return, !dbg !9044

if.end109:                                        ; preds = %lor.lhs.false105
  %60 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9045
  %61 = bitcast %struct.rtx_def* %60 to i32*, !dbg !9045
  %bf.load110 = load i32, i32* %61, align 8, !dbg !9045
  %bf.clear111 = and i32 %bf.load110, 65535, !dbg !9045
  %cmp112 = icmp eq i32 %bf.clear111, 37, !dbg !9045
  br i1 %cmp112, label %land.lhs.true113, label %lor.lhs.false118, !dbg !9047

land.lhs.true113:                                 ; preds = %if.end109
  %62 = load %struct.rtx_def**, %struct.rtx_def*** %vals.addr, align 8, !dbg !9048
  %63 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9049
  %call114 = call i32 @rhs_regno(%struct.rtx_def* %63), !dbg !9049
  %idxprom115 = zext i32 %call114 to i64, !dbg !9048
  %arrayidx116 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %62, i64 %idxprom115, !dbg !9048
  %64 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx116, align 8, !dbg !9048
  %cmp117 = icmp ne %struct.rtx_def* %64, null, !dbg !9050
  br i1 %cmp117, label %if.then139, label %lor.lhs.false118, !dbg !9051

lor.lhs.false118:                                 ; preds = %land.lhs.true113, %if.end109
  %65 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9052
  %66 = bitcast %struct.rtx_def* %65 to i32*, !dbg !9052
  %bf.load119 = load i32, i32* %66, align 8, !dbg !9052
  %bf.clear120 = and i32 %bf.load119, 65535, !dbg !9052
  %cmp121 = icmp eq i32 %bf.clear120, 39, !dbg !9053
  br i1 %cmp121, label %land.lhs.true122, label %if.end140, !dbg !9054

land.lhs.true122:                                 ; preds = %lor.lhs.false118
  %67 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9055
  %u123 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %67, i32 0, i32 1, !dbg !9055
  %fld124 = bitcast %union.u* %u123 to [1 x %union.rtunion_def]*, !dbg !9055
  %arrayidx125 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld124, i64 0, i64 0, !dbg !9055
  %rt_rtx126 = bitcast %union.rtunion_def* %arrayidx125 to %struct.rtx_def**, !dbg !9055
  %68 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx126, align 8, !dbg !9055
  %69 = bitcast %struct.rtx_def* %68 to i32*, !dbg !9055
  %bf.load127 = load i32, i32* %69, align 8, !dbg !9055
  %bf.clear128 = and i32 %bf.load127, 65535, !dbg !9055
  %cmp129 = icmp eq i32 %bf.clear128, 37, !dbg !9055
  br i1 %cmp129, label %land.lhs.true130, label %if.end140, !dbg !9056

land.lhs.true130:                                 ; preds = %land.lhs.true122
  %70 = load %struct.rtx_def**, %struct.rtx_def*** %vals.addr, align 8, !dbg !9057
  %71 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9058
  %u131 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %71, i32 0, i32 1, !dbg !9058
  %fld132 = bitcast %union.u* %u131 to [1 x %union.rtunion_def]*, !dbg !9058
  %arrayidx133 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld132, i64 0, i64 0, !dbg !9058
  %rt_rtx134 = bitcast %union.rtunion_def* %arrayidx133 to %struct.rtx_def**, !dbg !9058
  %72 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx134, align 8, !dbg !9058
  %call135 = call i32 @rhs_regno(%struct.rtx_def* %72), !dbg !9058
  %idxprom136 = zext i32 %call135 to i64, !dbg !9057
  %arrayidx137 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %70, i64 %idxprom136, !dbg !9057
  %73 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx137, align 8, !dbg !9057
  %cmp138 = icmp ne %struct.rtx_def* %73, null, !dbg !9059
  br i1 %cmp138, label %if.then139, label %if.end140, !dbg !9060

if.then139:                                       ; preds = %land.lhs.true130, %land.lhs.true113
  store i32 0, i32* %retval, align 4, !dbg !9061
  br label %return, !dbg !9061

if.end140:                                        ; preds = %land.lhs.true130, %land.lhs.true122, %lor.lhs.false118
  %74 = load %struct.rtx_def**, %struct.rtx_def*** %vals.addr, align 8, !dbg !9062
  %75 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9064
  %call141 = call i32 @rhs_regno(%struct.rtx_def* %75), !dbg !9064
  %idxprom142 = zext i32 %call141 to i64, !dbg !9062
  %arrayidx143 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %74, i64 %idxprom142, !dbg !9062
  %76 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx143, align 8, !dbg !9062
  %cmp144 = icmp ne %struct.rtx_def* %76, null, !dbg !9065
  br i1 %cmp144, label %if.then145, label %if.end146, !dbg !9066

if.then145:                                       ; preds = %if.end140
  store i32 0, i32* %retval, align 4, !dbg !9067
  br label %return, !dbg !9067

if.end146:                                        ; preds = %if.end140
  %77 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9068
  %78 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !9070
  %call147 = call i32 @reg_overlap_mentioned_p(%struct.rtx_def* %77, %struct.rtx_def* %78), !dbg !9071
  %tobool148 = icmp ne i32 %call147, 0, !dbg !9071
  br i1 %tobool148, label %if.then149, label %if.end150, !dbg !9072

if.then149:                                       ; preds = %if.end146
  store i32 0, i32* %retval, align 4, !dbg !9073
  br label %return, !dbg !9073

if.end150:                                        ; preds = %if.end146
  %79 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9074
  %80 = bitcast %struct.rtx_def* %79 to i32*, !dbg !9074
  %bf.load151 = load i32, i32* %80, align 8, !dbg !9074
  %bf.clear152 = and i32 %bf.load151, 65535, !dbg !9074
  %idxprom153 = sext i32 %bf.clear152 to i64, !dbg !9074
  %arrayidx154 = getelementptr inbounds [139 x i32], [139 x i32]* @rtx_class, i64 0, i64 %idxprom153, !dbg !9074
  %81 = load i32, i32* %arrayidx154, align 4, !dbg !9074
  %cmp155 = icmp eq i32 %81, 9, !dbg !9074
  br i1 %cmp155, label %if.end167, label %land.lhs.true156, !dbg !9076

land.lhs.true156:                                 ; preds = %if.end150
  %82 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9077
  %83 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9078
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9079
  %il157 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 7, !dbg !9079
  %rtl158 = bitcast %union.basic_block_il_dependent* %il157 to %struct.rtl_bb_info**, !dbg !9079
  %85 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl158, align 8, !dbg !9079
  %end_159 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %85, i32 0, i32 1, !dbg !9079
  %86 = load %struct.rtx_def*, %struct.rtx_def** %end_159, align 8, !dbg !9079
  %u160 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %86, i32 0, i32 1, !dbg !9079
  %fld161 = bitcast %union.u* %u160 to [1 x %union.rtunion_def]*, !dbg !9079
  %arrayidx162 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld161, i64 0, i64 2, !dbg !9079
  %rt_rtx163 = bitcast %union.rtunion_def* %arrayidx162 to %struct.rtx_def**, !dbg !9079
  %87 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx163, align 8, !dbg !9079
  %call164 = call i32 @modified_between_p(%struct.rtx_def* %82, %struct.rtx_def* %83, %struct.rtx_def* %87), !dbg !9080
  %tobool165 = icmp ne i32 %call164, 0, !dbg !9080
  br i1 %tobool165, label %if.then166, label %if.end167, !dbg !9081

if.then166:                                       ; preds = %land.lhs.true156
  store i32 0, i32* %retval, align 4, !dbg !9082
  br label %return, !dbg !9082

if.end167:                                        ; preds = %land.lhs.true156, %if.end150
  %88 = load %struct.rtx_def*, %struct.rtx_def** %src, align 8, !dbg !9083
  %89 = load %struct.rtx_def**, %struct.rtx_def*** %vals.addr, align 8, !dbg !9084
  %90 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9085
  %call168 = call i32 @rhs_regno(%struct.rtx_def* %90), !dbg !9085
  %idxprom169 = zext i32 %call168 to i64, !dbg !9084
  %arrayidx170 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %89, i64 %idxprom169, !dbg !9084
  store %struct.rtx_def* %88, %struct.rtx_def** %arrayidx170, align 8, !dbg !9086
  %91 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %regs.addr, align 8, !dbg !9087
  %92 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9087
  %call171 = call i32 @rhs_regno(%struct.rtx_def* %92), !dbg !9087
  %call172 = call i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %91, i32 %call171), !dbg !9087
  br label %for.inc, !dbg !9088

for.inc:                                          ; preds = %if.end167, %if.then30
  %93 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !8990
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !8990
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !8990
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 2, !dbg !8990
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !8990
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !8990
  store %struct.rtx_def* %94, %struct.rtx_def** %insn, align 8, !dbg !8990
  br label %for.cond, !dbg !8990, !llvm.loop !9089

for.end:                                          ; preds = %land.end
  store i32 1, i32* %retval, align 4, !dbg !9091
  br label %return, !dbg !9091

return:                                           ; preds = %for.end, %if.then166, %if.then149, %if.then145, %if.then139, %if.then108, %if.then101, %if.then94, %if.then85, %if.then69, %if.then
  %95 = load i32, i32* %retval, align 4, !dbg !9092
  ret i32 %95, !dbg !9092
}

; Function Attrs: noinline nounwind uwtable
define internal void @VEC_int_heap_free(%struct.VEC_int_heap** %vec_) #0 !dbg !9093 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !9096, metadata !DIExpression()), !dbg !9097
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9098
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !9098
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !9098
  br i1 %tobool, label %if.then, label %if.end, !dbg !9097

if.then:                                          ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9098
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !9098
  %4 = bitcast %struct.VEC_int_heap* %3 to i8*, !dbg !9098
  call void @free(i8* %4), !dbg !9098
  br label %if.end, !dbg !9098

if.end:                                           ; preds = %if.then, %entry
  %5 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9097
  store %struct.VEC_int_heap* null, %struct.VEC_int_heap** %5, align 8, !dbg !9097
  ret void, !dbg !9097
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_iterate(%struct.VEC_int_base* %vec_, i32 %ix_, i32* %ptr) #0 !dbg !9100 {
entry:
  %retval = alloca i32, align 4
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %ix_.addr = alloca i32, align 4
  %ptr.addr = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9106, metadata !DIExpression()), !dbg !9107
  store i32 %ix_, i32* %ix_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %ix_.addr, metadata !9108, metadata !DIExpression()), !dbg !9107
  store i32* %ptr, i32** %ptr.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %ptr.addr, metadata !9109, metadata !DIExpression()), !dbg !9107
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9110
  %tobool = icmp ne %struct.VEC_int_base* %0, null, !dbg !9110
  br i1 %tobool, label %land.lhs.true, label %if.else, !dbg !9110

land.lhs.true:                                    ; preds = %entry
  %1 = load i32, i32* %ix_.addr, align 4, !dbg !9110
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9110
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 0, !dbg !9110
  %3 = load i32, i32* %num, align 4, !dbg !9110
  %cmp = icmp ult i32 %1, %3, !dbg !9110
  br i1 %cmp, label %if.then, label %if.else, !dbg !9107

if.then:                                          ; preds = %land.lhs.true
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9112
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !9112
  %5 = load i32, i32* %ix_.addr, align 4, !dbg !9112
  %idxprom = zext i32 %5 to i64, !dbg !9112
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9112
  %6 = load i32, i32* %arrayidx, align 4, !dbg !9112
  %7 = load i32*, i32** %ptr.addr, align 8, !dbg !9112
  store i32 %6, i32* %7, align 4, !dbg !9112
  store i32 1, i32* %retval, align 4, !dbg !9112
  br label %return, !dbg !9112

if.else:                                          ; preds = %land.lhs.true, %entry
  %8 = load i32*, i32** %ptr.addr, align 8, !dbg !9114
  store i32 0, i32* %8, align 4, !dbg !9114
  store i32 0, i32* %retval, align 4, !dbg !9114
  br label %return, !dbg !9114

return:                                           ; preds = %if.else, %if.then
  %9 = load i32, i32* %retval, align 4, !dbg !9107
  ret i32 %9, !dbg !9107
}

declare dso_local zeroext i8 @optimize_function_for_speed_p(%struct.function*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cond_move_convert_if_block(%struct.noce_if_info* %if_infop, %struct.basic_block_def* %bb, %struct.rtx_def* %cond, %struct.rtx_def** %then_vals, %struct.rtx_def** %else_vals, i8 zeroext %else_block_p) #0 !dbg !9116 {
entry:
  %retval = alloca i8, align 1
  %if_infop.addr = alloca %struct.noce_if_info*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %cond.addr = alloca %struct.rtx_def*, align 8
  %then_vals.addr = alloca %struct.rtx_def**, align 8
  %else_vals.addr = alloca %struct.rtx_def**, align 8
  %else_block_p.addr = alloca i8, align 1
  %code = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %cond_arg0 = alloca %struct.rtx_def*, align 8
  %cond_arg1 = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  %target = alloca %struct.rtx_def*, align 8
  %dest = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  %e = alloca %struct.rtx_def*, align 8
  %regno = alloca i32, align 4
  store %struct.noce_if_info* %if_infop, %struct.noce_if_info** %if_infop.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.noce_if_info** %if_infop.addr, metadata !9119, metadata !DIExpression()), !dbg !9120
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9121, metadata !DIExpression()), !dbg !9122
  store %struct.rtx_def* %cond, %struct.rtx_def** %cond.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond.addr, metadata !9123, metadata !DIExpression()), !dbg !9124
  store %struct.rtx_def** %then_vals, %struct.rtx_def*** %then_vals.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %then_vals.addr, metadata !9125, metadata !DIExpression()), !dbg !9126
  store %struct.rtx_def** %else_vals, %struct.rtx_def*** %else_vals.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %else_vals.addr, metadata !9127, metadata !DIExpression()), !dbg !9128
  store i8 %else_block_p, i8* %else_block_p.addr, align 1
  call void @llvm.dbg.declare(metadata i8* %else_block_p.addr, metadata !9129, metadata !DIExpression()), !dbg !9130
  call void @llvm.dbg.declare(metadata i32* %code, metadata !9131, metadata !DIExpression()), !dbg !9132
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9133, metadata !DIExpression()), !dbg !9134
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond_arg0, metadata !9135, metadata !DIExpression()), !dbg !9136
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond_arg1, metadata !9137, metadata !DIExpression()), !dbg !9138
  %0 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !9139
  %1 = bitcast %struct.rtx_def* %0 to i32*, !dbg !9139
  %bf.load = load i32, i32* %1, align 8, !dbg !9139
  %bf.clear = and i32 %bf.load, 65535, !dbg !9139
  store i32 %bf.clear, i32* %code, align 4, !dbg !9140
  %2 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !9141
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %2, i32 0, i32 1, !dbg !9141
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9141
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9141
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9141
  %3 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9141
  store %struct.rtx_def* %3, %struct.rtx_def** %cond_arg0, align 8, !dbg !9142
  %4 = load %struct.rtx_def*, %struct.rtx_def** %cond.addr, align 8, !dbg !9143
  %u1 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %4, i32 0, i32 1, !dbg !9143
  %fld2 = bitcast %union.u* %u1 to [1 x %union.rtunion_def]*, !dbg !9143
  %arrayidx3 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld2, i64 0, i64 1, !dbg !9143
  %rt_rtx4 = bitcast %union.rtunion_def* %arrayidx3 to %struct.rtx_def**, !dbg !9143
  %5 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx4, align 8, !dbg !9143
  store %struct.rtx_def* %5, %struct.rtx_def** %cond_arg1, align 8, !dbg !9144
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9145
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !9145
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9145
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9145
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 0, !dbg !9145
  %8 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9145
  store %struct.rtx_def* %8, %struct.rtx_def** %insn, align 8, !dbg !9145
  br label %for.cond, !dbg !9145

for.cond:                                         ; preds = %for.inc, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9147
  %tobool = icmp ne %struct.rtx_def* %9, null, !dbg !9147
  br i1 %tobool, label %land.rhs, label %land.end, !dbg !9147

land.rhs:                                         ; preds = %for.cond
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9147
  %11 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9147
  %il5 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %11, i32 0, i32 7, !dbg !9147
  %rtl6 = bitcast %union.basic_block_il_dependent* %il5 to %struct.rtl_bb_info**, !dbg !9147
  %12 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl6, align 8, !dbg !9147
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %12, i32 0, i32 1, !dbg !9147
  %13 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9147
  %u7 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !9147
  %fld8 = bitcast %union.u* %u7 to [1 x %union.rtunion_def]*, !dbg !9147
  %arrayidx9 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld8, i64 0, i64 2, !dbg !9147
  %rt_rtx10 = bitcast %union.rtunion_def* %arrayidx9 to %struct.rtx_def**, !dbg !9147
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx10, align 8, !dbg !9147
  %cmp = icmp ne %struct.rtx_def* %10, %14, !dbg !9147
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %15 = phi i1 [ false, %for.cond ], [ %cmp, %land.rhs ], !dbg !9149
  br i1 %15, label %for.body, label %for.end, !dbg !9145

for.body:                                         ; preds = %land.end
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !9150, metadata !DIExpression()), !dbg !9152
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %target, metadata !9153, metadata !DIExpression()), !dbg !9154
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %dest, metadata !9155, metadata !DIExpression()), !dbg !9156
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !9157, metadata !DIExpression()), !dbg !9158
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %e, metadata !9159, metadata !DIExpression()), !dbg !9160
  call void @llvm.dbg.declare(metadata i32* %regno, metadata !9161, metadata !DIExpression()), !dbg !9162
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9163
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !9163
  %bf.load11 = load i32, i32* %17, align 8, !dbg !9163
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !9163
  %cmp13 = icmp eq i32 %bf.clear12, 8, !dbg !9163
  br i1 %cmp13, label %land.lhs.true, label %lor.lhs.false, !dbg !9163

lor.lhs.false:                                    ; preds = %for.body
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9163
  %19 = bitcast %struct.rtx_def* %18 to i32*, !dbg !9163
  %bf.load14 = load i32, i32* %19, align 8, !dbg !9163
  %bf.clear15 = and i32 %bf.load14, 65535, !dbg !9163
  %cmp16 = icmp eq i32 %bf.clear15, 7, !dbg !9163
  br i1 %cmp16, label %land.lhs.true, label %lor.lhs.false17, !dbg !9163

lor.lhs.false17:                                  ; preds = %lor.lhs.false
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9163
  %21 = bitcast %struct.rtx_def* %20 to i32*, !dbg !9163
  %bf.load18 = load i32, i32* %21, align 8, !dbg !9163
  %bf.clear19 = and i32 %bf.load18, 65535, !dbg !9163
  %cmp20 = icmp eq i32 %bf.clear19, 9, !dbg !9163
  br i1 %cmp20, label %land.lhs.true, label %lor.lhs.false21, !dbg !9163

lor.lhs.false21:                                  ; preds = %lor.lhs.false17
  %22 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9163
  %23 = bitcast %struct.rtx_def* %22 to i32*, !dbg !9163
  %bf.load22 = load i32, i32* %23, align 8, !dbg !9163
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !9163
  %cmp24 = icmp eq i32 %bf.clear23, 10, !dbg !9163
  br i1 %cmp24, label %land.lhs.true, label %if.then, !dbg !9163

land.lhs.true:                                    ; preds = %lor.lhs.false21, %lor.lhs.false17, %lor.lhs.false, %for.body
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9163
  %25 = bitcast %struct.rtx_def* %24 to i32*, !dbg !9163
  %bf.load25 = load i32, i32* %25, align 8, !dbg !9163
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !9163
  %cmp27 = icmp eq i32 %bf.clear26, 7, !dbg !9163
  br i1 %cmp27, label %if.then, label %lor.lhs.false28, !dbg !9165

lor.lhs.false28:                                  ; preds = %land.lhs.true
  %26 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9166
  %27 = bitcast %struct.rtx_def* %26 to i32*, !dbg !9166
  %bf.load29 = load i32, i32* %27, align 8, !dbg !9166
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !9166
  %cmp31 = icmp eq i32 %bf.clear30, 9, !dbg !9166
  br i1 %cmp31, label %if.then, label %if.end, !dbg !9167

if.then:                                          ; preds = %lor.lhs.false28, %land.lhs.true, %lor.lhs.false21
  br label %for.inc, !dbg !9168

if.end:                                           ; preds = %lor.lhs.false28
  %28 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9169
  %bf.load32 = load i32, i32* %29, align 8, !dbg !9169
  %bf.clear33 = and i32 %bf.load32, 65535, !dbg !9169
  %cmp34 = icmp eq i32 %bf.clear33, 8, !dbg !9169
  br i1 %cmp34, label %cond.true, label %lor.lhs.false35, !dbg !9169

lor.lhs.false35:                                  ; preds = %if.end
  %30 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !9169
  %bf.load36 = load i32, i32* %31, align 8, !dbg !9169
  %bf.clear37 = and i32 %bf.load36, 65535, !dbg !9169
  %cmp38 = icmp eq i32 %bf.clear37, 7, !dbg !9169
  br i1 %cmp38, label %cond.true, label %lor.lhs.false39, !dbg !9169

lor.lhs.false39:                                  ; preds = %lor.lhs.false35
  %32 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %33 = bitcast %struct.rtx_def* %32 to i32*, !dbg !9169
  %bf.load40 = load i32, i32* %33, align 8, !dbg !9169
  %bf.clear41 = and i32 %bf.load40, 65535, !dbg !9169
  %cmp42 = icmp eq i32 %bf.clear41, 9, !dbg !9169
  br i1 %cmp42, label %cond.true, label %lor.lhs.false43, !dbg !9169

lor.lhs.false43:                                  ; preds = %lor.lhs.false39
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !9169
  %bf.load44 = load i32, i32* %35, align 8, !dbg !9169
  %bf.clear45 = and i32 %bf.load44, 65535, !dbg !9169
  %cmp46 = icmp eq i32 %bf.clear45, 10, !dbg !9169
  br i1 %cmp46, label %cond.true, label %cond.false64, !dbg !9169

cond.true:                                        ; preds = %lor.lhs.false43, %lor.lhs.false39, %lor.lhs.false35, %if.end
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %u47 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %36, i32 0, i32 1, !dbg !9169
  %fld48 = bitcast %union.u* %u47 to [1 x %union.rtunion_def]*, !dbg !9169
  %arrayidx49 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld48, i64 0, i64 5, !dbg !9169
  %rt_rtx50 = bitcast %union.rtunion_def* %arrayidx49 to %struct.rtx_def**, !dbg !9169
  %37 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx50, align 8, !dbg !9169
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !9169
  %bf.load51 = load i32, i32* %38, align 8, !dbg !9169
  %bf.clear52 = and i32 %bf.load51, 65535, !dbg !9169
  %cmp53 = icmp eq i32 %bf.clear52, 23, !dbg !9169
  br i1 %cmp53, label %cond.true54, label %cond.false, !dbg !9169

cond.true54:                                      ; preds = %cond.true
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %u55 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !9169
  %fld56 = bitcast %union.u* %u55 to [1 x %union.rtunion_def]*, !dbg !9169
  %arrayidx57 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld56, i64 0, i64 5, !dbg !9169
  %rt_rtx58 = bitcast %union.rtunion_def* %arrayidx57 to %struct.rtx_def**, !dbg !9169
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx58, align 8, !dbg !9169
  br label %cond.end, !dbg !9169

cond.false:                                       ; preds = %cond.true
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9169
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !9169
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !9169
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 5, !dbg !9169
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !9169
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !9169
  %call = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %41, %struct.rtx_def* %43), !dbg !9169
  br label %cond.end, !dbg !9169

cond.end:                                         ; preds = %cond.false, %cond.true54
  %cond63 = phi %struct.rtx_def* [ %40, %cond.true54 ], [ %call, %cond.false ], !dbg !9169
  br label %cond.end65, !dbg !9169

cond.false64:                                     ; preds = %lor.lhs.false43
  br label %cond.end65, !dbg !9169

cond.end65:                                       ; preds = %cond.false64, %cond.end
  %cond66 = phi %struct.rtx_def* [ %cond63, %cond.end ], [ null, %cond.false64 ], !dbg !9169
  store %struct.rtx_def* %cond66, %struct.rtx_def** %set, align 8, !dbg !9170
  %44 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9171
  %tobool67 = icmp ne %struct.rtx_def* %44, null, !dbg !9171
  br i1 %tobool67, label %land.lhs.true68, label %cond.true76, !dbg !9171

land.lhs.true68:                                  ; preds = %cond.end65
  %45 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9171
  %u69 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !9171
  %fld70 = bitcast %union.u* %u69 to [1 x %union.rtunion_def]*, !dbg !9171
  %arrayidx71 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld70, i64 0, i64 0, !dbg !9171
  %rt_rtx72 = bitcast %union.rtunion_def* %arrayidx71 to %struct.rtx_def**, !dbg !9171
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx72, align 8, !dbg !9171
  %47 = bitcast %struct.rtx_def* %46 to i32*, !dbg !9171
  %bf.load73 = load i32, i32* %47, align 8, !dbg !9171
  %bf.clear74 = and i32 %bf.load73, 65535, !dbg !9171
  %cmp75 = icmp eq i32 %bf.clear74, 37, !dbg !9171
  br i1 %cmp75, label %cond.false77, label %cond.true76, !dbg !9171

cond.true76:                                      ; preds = %land.lhs.true68, %cond.end65
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2597, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9171
  br label %cond.end78, !dbg !9171

cond.false77:                                     ; preds = %land.lhs.true68
  br label %cond.end78, !dbg !9171

cond.end78:                                       ; preds = %cond.false77, %cond.true76
  %cond79 = phi i32 [ 0, %cond.true76 ], [ 0, %cond.false77 ], !dbg !9171
  %48 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !9172
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !9172
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !9172
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 0, !dbg !9172
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !9172
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !9172
  store %struct.rtx_def* %49, %struct.rtx_def** %dest, align 8, !dbg !9173
  %50 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9174
  %call84 = call i32 @rhs_regno(%struct.rtx_def* %50), !dbg !9174
  store i32 %call84, i32* %regno, align 4, !dbg !9175
  %51 = load %struct.rtx_def**, %struct.rtx_def*** %then_vals.addr, align 8, !dbg !9176
  %52 = load i32, i32* %regno, align 4, !dbg !9177
  %idxprom = zext i32 %52 to i64, !dbg !9176
  %arrayidx85 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %51, i64 %idxprom, !dbg !9176
  %53 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx85, align 8, !dbg !9176
  store %struct.rtx_def* %53, %struct.rtx_def** %t, align 8, !dbg !9178
  %54 = load %struct.rtx_def**, %struct.rtx_def*** %else_vals.addr, align 8, !dbg !9179
  %55 = load i32, i32* %regno, align 4, !dbg !9180
  %idxprom86 = zext i32 %55 to i64, !dbg !9179
  %arrayidx87 = getelementptr inbounds %struct.rtx_def*, %struct.rtx_def** %54, i64 %idxprom86, !dbg !9179
  %56 = load %struct.rtx_def*, %struct.rtx_def** %arrayidx87, align 8, !dbg !9179
  store %struct.rtx_def* %56, %struct.rtx_def** %e, align 8, !dbg !9181
  %57 = load i8, i8* %else_block_p.addr, align 1, !dbg !9182
  %tobool88 = icmp ne i8 %57, 0, !dbg !9182
  br i1 %tobool88, label %if.then89, label %if.else, !dbg !9184

if.then89:                                        ; preds = %cond.end78
  %58 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9185
  %tobool90 = icmp ne %struct.rtx_def* %58, null, !dbg !9185
  br i1 %tobool90, label %if.then91, label %if.end92, !dbg !9188

if.then91:                                        ; preds = %if.then89
  br label %for.inc, !dbg !9189

if.end92:                                         ; preds = %if.then89
  %59 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9190
  store %struct.rtx_def* %59, %struct.rtx_def** %t, align 8, !dbg !9191
  %60 = load %struct.rtx_def*, %struct.rtx_def** %e, align 8, !dbg !9192
  %tobool93 = icmp ne %struct.rtx_def* %60, null, !dbg !9192
  br i1 %tobool93, label %cond.false95, label %cond.true94, !dbg !9192

cond.true94:                                      ; preds = %if.end92
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2612, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9192
  br label %cond.end96, !dbg !9192

cond.false95:                                     ; preds = %if.end92
  br label %cond.end96, !dbg !9192

cond.end96:                                       ; preds = %cond.false95, %cond.true94
  %cond97 = phi i32 [ 0, %cond.true94 ], [ 0, %cond.false95 ], !dbg !9192
  br label %if.end106, !dbg !9193

if.else:                                          ; preds = %cond.end78
  %61 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9194
  %tobool98 = icmp ne %struct.rtx_def* %61, null, !dbg !9194
  br i1 %tobool98, label %cond.false100, label %cond.true99, !dbg !9194

cond.true99:                                      ; preds = %if.else
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2616, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9194
  br label %cond.end101, !dbg !9194

cond.false100:                                    ; preds = %if.else
  br label %cond.end101, !dbg !9194

cond.end101:                                      ; preds = %cond.false100, %cond.true99
  %cond102 = phi i32 [ 0, %cond.true99 ], [ 0, %cond.false100 ], !dbg !9194
  %62 = load %struct.rtx_def*, %struct.rtx_def** %e, align 8, !dbg !9196
  %tobool103 = icmp ne %struct.rtx_def* %62, null, !dbg !9196
  br i1 %tobool103, label %if.end105, label %if.then104, !dbg !9198

if.then104:                                       ; preds = %cond.end101
  %63 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9199
  store %struct.rtx_def* %63, %struct.rtx_def** %e, align 8, !dbg !9200
  br label %if.end105, !dbg !9201

if.end105:                                        ; preds = %if.then104, %cond.end101
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %cond.end96
  %64 = load %struct.noce_if_info*, %struct.noce_if_info** %if_infop.addr, align 8, !dbg !9202
  %65 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9203
  %66 = load i32, i32* %code, align 4, !dbg !9204
  %67 = load %struct.rtx_def*, %struct.rtx_def** %cond_arg0, align 8, !dbg !9205
  %68 = load %struct.rtx_def*, %struct.rtx_def** %cond_arg1, align 8, !dbg !9206
  %69 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9207
  %70 = load %struct.rtx_def*, %struct.rtx_def** %e, align 8, !dbg !9208
  %call107 = call %struct.rtx_def* @noce_emit_cmove(%struct.noce_if_info* %64, %struct.rtx_def* %65, i32 %66, %struct.rtx_def* %67, %struct.rtx_def* %68, %struct.rtx_def* %69, %struct.rtx_def* %70), !dbg !9209
  store %struct.rtx_def* %call107, %struct.rtx_def** %target, align 8, !dbg !9210
  %71 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9211
  %tobool108 = icmp ne %struct.rtx_def* %71, null, !dbg !9211
  br i1 %tobool108, label %if.end110, label %if.then109, !dbg !9213

if.then109:                                       ; preds = %if.end106
  store i8 0, i8* %retval, align 1, !dbg !9214
  br label %return, !dbg !9214

if.end110:                                        ; preds = %if.end106
  %72 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9215
  %73 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9217
  %cmp111 = icmp ne %struct.rtx_def* %72, %73, !dbg !9218
  br i1 %cmp111, label %if.then112, label %if.end113, !dbg !9219

if.then112:                                       ; preds = %if.end110
  %74 = load %struct.rtx_def*, %struct.rtx_def** %dest, align 8, !dbg !9220
  %75 = load %struct.rtx_def*, %struct.rtx_def** %target, align 8, !dbg !9221
  call void @noce_emit_move_insn(%struct.rtx_def* %74, %struct.rtx_def* %75), !dbg !9222
  br label %if.end113, !dbg !9222

if.end113:                                        ; preds = %if.then112, %if.end110
  br label %for.inc, !dbg !9223

for.inc:                                          ; preds = %if.end113, %if.then91, %if.then
  %76 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9147
  %u114 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %76, i32 0, i32 1, !dbg !9147
  %fld115 = bitcast %union.u* %u114 to [1 x %union.rtunion_def]*, !dbg !9147
  %arrayidx116 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld115, i64 0, i64 2, !dbg !9147
  %rt_rtx117 = bitcast %union.rtunion_def* %arrayidx116 to %struct.rtx_def**, !dbg !9147
  %77 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx117, align 8, !dbg !9147
  store %struct.rtx_def* %77, %struct.rtx_def** %insn, align 8, !dbg !9147
  br label %for.cond, !dbg !9147, !llvm.loop !9224

for.end:                                          ; preds = %land.end
  store i8 1, i8* %retval, align 1, !dbg !9226
  br label %return, !dbg !9226

return:                                           ; preds = %for.end, %if.then109
  %78 = load i8, i8* %retval, align 1, !dbg !9227
  ret i8 %78, !dbg !9227
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_heap_safe_push(%struct.VEC_int_heap** %vec_, i32 %obj_) #0 !dbg !9228 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %obj_.addr = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !9232, metadata !DIExpression()), !dbg !9233
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !9234, metadata !DIExpression()), !dbg !9233
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9233
  %call = call i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %0, i32 1), !dbg !9233
  %1 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9233
  %2 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %1, align 8, !dbg !9233
  %tobool = icmp ne %struct.VEC_int_heap* %2, null, !dbg !9233
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9233

cond.true:                                        ; preds = %entry
  %3 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9233
  %4 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %3, align 8, !dbg !9233
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %4, i32 0, i32 0, !dbg !9233
  br label %cond.end, !dbg !9233

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9233

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9233
  %5 = load i32, i32* %obj_.addr, align 4, !dbg !9233
  %call1 = call i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %cond, i32 %5), !dbg !9233
  ret i32* %call1, !dbg !9233
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_heap_reserve(%struct.VEC_int_heap** %vec_, i32 %alloc_) #0 !dbg !9235 {
entry:
  %vec_.addr = alloca %struct.VEC_int_heap**, align 8
  %alloc_.addr = alloca i32, align 4
  %extend = alloca i32, align 4
  store %struct.VEC_int_heap** %vec_, %struct.VEC_int_heap*** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_heap*** %vec_.addr, metadata !9238, metadata !DIExpression()), !dbg !9239
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9240, metadata !DIExpression()), !dbg !9239
  call void @llvm.dbg.declare(metadata i32* %extend, metadata !9241, metadata !DIExpression()), !dbg !9239
  %0 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9239
  %1 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %0, align 8, !dbg !9239
  %tobool = icmp ne %struct.VEC_int_heap* %1, null, !dbg !9239
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9239

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9239
  %3 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %2, align 8, !dbg !9239
  %base = getelementptr inbounds %struct.VEC_int_heap, %struct.VEC_int_heap* %3, i32 0, i32 0, !dbg !9239
  br label %cond.end, !dbg !9239

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9239

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_int_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9239
  %4 = load i32, i32* %alloc_.addr, align 4, !dbg !9239
  %call = call i32 @VEC_int_base_space(%struct.VEC_int_base* %cond, i32 %4), !dbg !9239
  %tobool1 = icmp ne i32 %call, 0, !dbg !9239
  %lnot = xor i1 %tobool1, true, !dbg !9239
  %lnot.ext = zext i1 %lnot to i32, !dbg !9239
  store i32 %lnot.ext, i32* %extend, align 4, !dbg !9239
  %5 = load i32, i32* %extend, align 4, !dbg !9242
  %tobool2 = icmp ne i32 %5, 0, !dbg !9242
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9239

if.then:                                          ; preds = %cond.end
  %6 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9242
  %7 = load %struct.VEC_int_heap*, %struct.VEC_int_heap** %6, align 8, !dbg !9242
  %8 = bitcast %struct.VEC_int_heap* %7 to i8*, !dbg !9242
  %9 = load i32, i32* %alloc_.addr, align 4, !dbg !9242
  %call3 = call i8* @vec_heap_o_reserve(i8* %8, i32 %9, i64 8, i64 4), !dbg !9242
  %10 = bitcast i8* %call3 to %struct.VEC_int_heap*, !dbg !9242
  %11 = load %struct.VEC_int_heap**, %struct.VEC_int_heap*** %vec_.addr, align 8, !dbg !9242
  store %struct.VEC_int_heap* %10, %struct.VEC_int_heap** %11, align 8, !dbg !9242
  br label %if.end, !dbg !9242

if.end:                                           ; preds = %if.then, %cond.end
  %12 = load i32, i32* %extend, align 4, !dbg !9239
  ret i32 %12, !dbg !9239
}

; Function Attrs: noinline nounwind uwtable
define internal i32* @VEC_int_base_quick_push(%struct.VEC_int_base* %vec_, i32 %obj_) #0 !dbg !9244 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %obj_.addr = alloca i32, align 4
  %slot_ = alloca i32*, align 8
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9248, metadata !DIExpression()), !dbg !9249
  store i32 %obj_, i32* %obj_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %obj_.addr, metadata !9250, metadata !DIExpression()), !dbg !9249
  call void @llvm.dbg.declare(metadata i32** %slot_, metadata !9251, metadata !DIExpression()), !dbg !9249
  %0 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9249
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %0, i32 0, i32 0, !dbg !9249
  %1 = load i32, i32* %num, align 4, !dbg !9249
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9249
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !9249
  %3 = load i32, i32* %alloc, align 4, !dbg !9249
  %cmp = icmp ult i32 %1, %3, !dbg !9249
  %conv = zext i1 %cmp to i32, !dbg !9249
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9249
  %vec = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 2, !dbg !9249
  %5 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9249
  %num1 = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %5, i32 0, i32 0, !dbg !9249
  %6 = load i32, i32* %num1, align 4, !dbg !9249
  %inc = add i32 %6, 1, !dbg !9249
  store i32 %inc, i32* %num1, align 4, !dbg !9249
  %idxprom = zext i32 %6 to i64, !dbg !9249
  %arrayidx = getelementptr inbounds [1 x i32], [1 x i32]* %vec, i64 0, i64 %idxprom, !dbg !9249
  store i32* %arrayidx, i32** %slot_, align 8, !dbg !9249
  %7 = load i32, i32* %obj_.addr, align 4, !dbg !9249
  %8 = load i32*, i32** %slot_, align 8, !dbg !9249
  store i32 %7, i32* %8, align 4, !dbg !9249
  %9 = load i32*, i32** %slot_, align 8, !dbg !9249
  ret i32* %9, !dbg !9249
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @VEC_int_base_space(%struct.VEC_int_base* %vec_, i32 %alloc_) #0 !dbg !9252 {
entry:
  %vec_.addr = alloca %struct.VEC_int_base*, align 8
  %alloc_.addr = alloca i32, align 4
  store %struct.VEC_int_base* %vec_, %struct.VEC_int_base** %vec_.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_int_base** %vec_.addr, metadata !9255, metadata !DIExpression()), !dbg !9256
  store i32 %alloc_, i32* %alloc_.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %alloc_.addr, metadata !9257, metadata !DIExpression()), !dbg !9256
  %0 = load i32, i32* %alloc_.addr, align 4, !dbg !9256
  %cmp = icmp sge i32 %0, 0, !dbg !9256
  %conv = zext i1 %cmp to i32, !dbg !9256
  %1 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9256
  %tobool = icmp ne %struct.VEC_int_base* %1, null, !dbg !9256
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9256

cond.true:                                        ; preds = %entry
  %2 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9256
  %alloc = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %2, i32 0, i32 1, !dbg !9256
  %3 = load i32, i32* %alloc, align 4, !dbg !9256
  %4 = load %struct.VEC_int_base*, %struct.VEC_int_base** %vec_.addr, align 8, !dbg !9256
  %num = getelementptr inbounds %struct.VEC_int_base, %struct.VEC_int_base* %4, i32 0, i32 0, !dbg !9256
  %5 = load i32, i32* %num, align 4, !dbg !9256
  %sub = sub i32 %3, %5, !dbg !9256
  %6 = load i32, i32* %alloc_.addr, align 4, !dbg !9256
  %cmp1 = icmp uge i32 %sub, %6, !dbg !9256
  %conv2 = zext i1 %cmp1 to i32, !dbg !9256
  br label %cond.end, !dbg !9256

cond.false:                                       ; preds = %entry
  %7 = load i32, i32* %alloc_.addr, align 4, !dbg !9256
  %tobool3 = icmp ne i32 %7, 0, !dbg !9256
  %lnot = xor i1 %tobool3, true, !dbg !9256
  %lnot.ext = zext i1 %lnot to i32, !dbg !9256
  br label %cond.end, !dbg !9256

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %conv2, %cond.true ], [ %lnot.ext, %cond.false ], !dbg !9256
  ret i32 %cond, !dbg !9256
}

declare dso_local i8* @vec_heap_o_reserve(i8*, i32, i64, i64) #1

declare dso_local void @free(i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %bb) #0 !dbg !9258 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9259, metadata !DIExpression()), !dbg !9260
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9261
  %call = call zeroext i8 @single_pred_p(%struct.basic_block_def* %0), !dbg !9261
  %tobool = icmp ne i8 %call, 0, !dbg !9261
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9261

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 655, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9261
  br label %cond.end, !dbg !9261

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9261

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9261
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9262
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %1, i32 0, i32 0, !dbg !9262
  %2 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !9262
  %tobool1 = icmp ne %struct.VEC_edge_gc* %2, null, !dbg !9262
  br i1 %tobool1, label %cond.true2, label %cond.false4, !dbg !9262

cond.true2:                                       ; preds = %cond.end
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9262
  %preds3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 0, !dbg !9262
  %4 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds3, align 8, !dbg !9262
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %4, i32 0, i32 0, !dbg !9262
  br label %cond.end5, !dbg !9262

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9262

cond.end5:                                        ; preds = %cond.false4, %cond.true2
  %cond6 = phi %struct.VEC_edge_base* [ %base, %cond.true2 ], [ null, %cond.false4 ], !dbg !9262
  %call7 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond6, i32 0), !dbg !9262
  ret %struct.edge_def* %call7, !dbg !9263
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @single_pred(%struct.basic_block_def* %bb) #0 !dbg !9264 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9265, metadata !DIExpression()), !dbg !9266
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9267
  %call = call %struct.edge_def* @single_pred_edge(%struct.basic_block_def* %0), !dbg !9268
  %src = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call, i32 0, i32 0, !dbg !9269
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %src, align 8, !dbg !9269
  ret %struct.basic_block_def* %1, !dbg !9270
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @block_jumps_and_fallthru_p(%struct.basic_block_def* %cur_bb, %struct.basic_block_def* %target_bb) #0 !dbg !9271 {
entry:
  %retval = alloca i32, align 4
  %cur_bb.addr = alloca %struct.basic_block_def*, align 8
  %target_bb.addr = alloca %struct.basic_block_def*, align 8
  %cur_edge = alloca %struct.edge_def*, align 8
  %fallthru_p = alloca i32, align 4
  %jump_p = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %n_insns = alloca i32, align 4
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %cur_bb, %struct.basic_block_def** %cur_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %cur_bb.addr, metadata !9274, metadata !DIExpression()), !dbg !9275
  store %struct.basic_block_def* %target_bb, %struct.basic_block_def** %target_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %target_bb.addr, metadata !9276, metadata !DIExpression()), !dbg !9277
  call void @llvm.dbg.declare(metadata %struct.edge_def** %cur_edge, metadata !9278, metadata !DIExpression()), !dbg !9279
  call void @llvm.dbg.declare(metadata i32* %fallthru_p, metadata !9280, metadata !DIExpression()), !dbg !9281
  store i32 0, i32* %fallthru_p, align 4, !dbg !9281
  call void @llvm.dbg.declare(metadata i32* %jump_p, metadata !9282, metadata !DIExpression()), !dbg !9283
  store i32 0, i32* %jump_p, align 4, !dbg !9283
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9284, metadata !DIExpression()), !dbg !9285
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !9286, metadata !DIExpression()), !dbg !9287
  call void @llvm.dbg.declare(metadata i32* %n_insns, metadata !9288, metadata !DIExpression()), !dbg !9289
  store i32 0, i32* %n_insns, align 4, !dbg !9289
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9290, metadata !DIExpression()), !dbg !9291
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9292
  %tobool = icmp ne %struct.basic_block_def* %0, null, !dbg !9292
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9294

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb.addr, align 8, !dbg !9295
  %tobool1 = icmp ne %struct.basic_block_def* %1, null, !dbg !9295
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9296

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 -1, i32* %retval, align 4, !dbg !9297
  br label %return, !dbg !9297

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9298
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %2, i32 0, i32 1, !dbg !9298
  %3 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !9298
  %tobool2 = icmp ne %struct.VEC_edge_gc* %3, null, !dbg !9298
  br i1 %tobool2, label %cond.true, label %cond.false, !dbg !9298

cond.true:                                        ; preds = %if.end
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9298
  %succs3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !9298
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs3, align 8, !dbg !9298
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %5, i32 0, i32 0, !dbg !9298
  br label %cond.end, !dbg !9298

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !9298

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9298
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9298
  %cmp = icmp eq i32 %call, 0, !dbg !9300
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !9301

if.then4:                                         ; preds = %cond.end
  store i32 0, i32* %retval, align 4, !dbg !9302
  br label %return, !dbg !9302

if.end5:                                          ; preds = %cond.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9303
  %succs6 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !9303
  %call7 = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs6), !dbg !9303
  %7 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9303
  %8 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 0, !dbg !9303
  %9 = extractvalue { i32, %struct.VEC_edge_gc** } %call7, 0, !dbg !9303
  store i32 %9, i32* %8, align 8, !dbg !9303
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %7, i32 0, i32 1, !dbg !9303
  %11 = extractvalue { i32, %struct.VEC_edge_gc** } %call7, 1, !dbg !9303
  store %struct.VEC_edge_gc** %11, %struct.VEC_edge_gc*** %10, align 8, !dbg !9303
  %12 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9303
  %13 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9303
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %12, i8* align 8 %13, i64 16, i1 false), !dbg !9303
  br label %for.cond, !dbg !9303

for.cond:                                         ; preds = %for.inc, %if.end5
  %14 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9305
  %15 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 0, !dbg !9305
  %16 = load i32, i32* %15, align 8, !dbg !9305
  %17 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %14, i32 0, i32 1, !dbg !9305
  %18 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %17, align 8, !dbg !9305
  %call8 = call zeroext i8 @ei_cond(i32 %16, %struct.VEC_edge_gc** %18, %struct.edge_def** %cur_edge), !dbg !9305
  %tobool9 = icmp ne i8 %call8, 0, !dbg !9303
  br i1 %tobool9, label %for.body, label %for.end, !dbg !9303

for.body:                                         ; preds = %for.cond
  %19 = load %struct.edge_def*, %struct.edge_def** %cur_edge, align 8, !dbg !9307
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %19, i32 0, i32 7, !dbg !9310
  %20 = load i32, i32* %flags, align 8, !dbg !9310
  %and = and i32 %20, 14, !dbg !9311
  %tobool10 = icmp ne i32 %and, 0, !dbg !9311
  br i1 %tobool10, label %if.then11, label %if.else, !dbg !9312

if.then11:                                        ; preds = %for.body
  store i32 -1, i32* %retval, align 4, !dbg !9313
  br label %return, !dbg !9313

if.else:                                          ; preds = %for.body
  %21 = load %struct.edge_def*, %struct.edge_def** %cur_edge, align 8, !dbg !9314
  %flags12 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %21, i32 0, i32 7, !dbg !9316
  %22 = load i32, i32* %flags12, align 8, !dbg !9316
  %and13 = and i32 %22, 1, !dbg !9317
  %tobool14 = icmp ne i32 %and13, 0, !dbg !9317
  br i1 %tobool14, label %if.then15, label %if.else16, !dbg !9318

if.then15:                                        ; preds = %if.else
  store i32 1, i32* %fallthru_p, align 4, !dbg !9319
  br label %if.end21, !dbg !9320

if.else16:                                        ; preds = %if.else
  %23 = load %struct.edge_def*, %struct.edge_def** %cur_edge, align 8, !dbg !9321
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %23, i32 0, i32 1, !dbg !9323
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9323
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %target_bb.addr, align 8, !dbg !9324
  %cmp17 = icmp eq %struct.basic_block_def* %24, %25, !dbg !9325
  br i1 %cmp17, label %if.then18, label %if.else19, !dbg !9326

if.then18:                                        ; preds = %if.else16
  store i32 1, i32* %jump_p, align 4, !dbg !9327
  br label %if.end20, !dbg !9328

if.else19:                                        ; preds = %if.else16
  store i32 -1, i32* %retval, align 4, !dbg !9329
  br label %return, !dbg !9329

if.end20:                                         ; preds = %if.then18
  br label %if.end21

if.end21:                                         ; preds = %if.end20, %if.then15
  br label %if.end22

if.end22:                                         ; preds = %if.end21
  br label %for.inc, !dbg !9330

for.inc:                                          ; preds = %if.end22
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9305
  br label %for.cond, !dbg !9305, !llvm.loop !9331

for.end:                                          ; preds = %for.cond
  %26 = load i32, i32* %jump_p, align 4, !dbg !9333
  %27 = load i32, i32* %fallthru_p, align 4, !dbg !9335
  %and23 = and i32 %26, %27, !dbg !9336
  %cmp24 = icmp eq i32 %and23, 0, !dbg !9337
  br i1 %cmp24, label %if.then25, label %if.end26, !dbg !9338

if.then25:                                        ; preds = %for.end
  store i32 -1, i32* %retval, align 4, !dbg !9339
  br label %return, !dbg !9339

if.end26:                                         ; preds = %for.end
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9340
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %28, i32 0, i32 7, !dbg !9340
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9340
  %29 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9340
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %29, i32 0, i32 1, !dbg !9340
  %30 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9340
  store %struct.rtx_def* %30, %struct.rtx_def** %end, align 8, !dbg !9341
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %cur_bb.addr, align 8, !dbg !9342
  %il27 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %31, i32 0, i32 7, !dbg !9342
  %rtl28 = bitcast %union.basic_block_il_dependent* %il27 to %struct.rtl_bb_info**, !dbg !9342
  %32 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl28, align 8, !dbg !9342
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %32, i32 0, i32 0, !dbg !9342
  %33 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9342
  store %struct.rtx_def* %33, %struct.rtx_def** %insn, align 8, !dbg !9343
  br label %while.cond, !dbg !9344

while.cond:                                       ; preds = %if.end71, %if.end26
  %34 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9345
  %cmp29 = icmp ne %struct.rtx_def* %34, null, !dbg !9346
  br i1 %cmp29, label %while.body, label %while.end, !dbg !9344

while.body:                                       ; preds = %while.cond
  %35 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9347
  %36 = bitcast %struct.rtx_def* %35 to i32*, !dbg !9347
  %bf.load = load i32, i32* %36, align 8, !dbg !9347
  %bf.clear = and i32 %bf.load, 65535, !dbg !9347
  %cmp30 = icmp eq i32 %bf.clear, 10, !dbg !9347
  br i1 %cmp30, label %if.then31, label %if.end32, !dbg !9350

if.then31:                                        ; preds = %while.body
  store i32 -1, i32* %retval, align 4, !dbg !9351
  br label %return, !dbg !9351

if.end32:                                         ; preds = %while.body
  %37 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9352
  %38 = bitcast %struct.rtx_def* %37 to i32*, !dbg !9352
  %bf.load33 = load i32, i32* %38, align 8, !dbg !9352
  %bf.clear34 = and i32 %bf.load33, 65535, !dbg !9352
  %cmp35 = icmp eq i32 %bf.clear34, 8, !dbg !9352
  br i1 %cmp35, label %land.lhs.true, label %lor.lhs.false36, !dbg !9352

lor.lhs.false36:                                  ; preds = %if.end32
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9352
  %40 = bitcast %struct.rtx_def* %39 to i32*, !dbg !9352
  %bf.load37 = load i32, i32* %40, align 8, !dbg !9352
  %bf.clear38 = and i32 %bf.load37, 65535, !dbg !9352
  %cmp39 = icmp eq i32 %bf.clear38, 7, !dbg !9352
  br i1 %cmp39, label %land.lhs.true, label %lor.lhs.false40, !dbg !9352

lor.lhs.false40:                                  ; preds = %lor.lhs.false36
  %41 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9352
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !9352
  %bf.load41 = load i32, i32* %42, align 8, !dbg !9352
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !9352
  %cmp43 = icmp eq i32 %bf.clear42, 9, !dbg !9352
  br i1 %cmp43, label %land.lhs.true, label %lor.lhs.false44, !dbg !9352

lor.lhs.false44:                                  ; preds = %lor.lhs.false40
  %43 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9352
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !9352
  %bf.load45 = load i32, i32* %44, align 8, !dbg !9352
  %bf.clear46 = and i32 %bf.load45, 65535, !dbg !9352
  %cmp47 = icmp eq i32 %bf.clear46, 10, !dbg !9352
  br i1 %cmp47, label %land.lhs.true, label %if.end68, !dbg !9354

land.lhs.true:                                    ; preds = %lor.lhs.false44, %lor.lhs.false40, %lor.lhs.false36, %if.end32
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9355
  %46 = bitcast %struct.rtx_def* %45 to i32*, !dbg !9355
  %bf.load48 = load i32, i32* %46, align 8, !dbg !9355
  %bf.clear49 = and i32 %bf.load48, 65535, !dbg !9355
  %cmp50 = icmp eq i32 %bf.clear49, 9, !dbg !9355
  br i1 %cmp50, label %if.end68, label %land.lhs.true51, !dbg !9356

land.lhs.true51:                                  ; preds = %land.lhs.true
  %47 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9357
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !9357
  %bf.load52 = load i32, i32* %48, align 8, !dbg !9357
  %bf.clear53 = and i32 %bf.load52, 65535, !dbg !9357
  %cmp54 = icmp eq i32 %bf.clear53, 7, !dbg !9357
  br i1 %cmp54, label %if.end68, label %land.lhs.true55, !dbg !9358

land.lhs.true55:                                  ; preds = %land.lhs.true51
  %49 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9359
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !9359
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9359
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9359
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9359
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9359
  %51 = bitcast %struct.rtx_def* %50 to i32*, !dbg !9359
  %bf.load56 = load i32, i32* %51, align 8, !dbg !9359
  %bf.clear57 = and i32 %bf.load56, 65535, !dbg !9359
  %cmp58 = icmp ne i32 %bf.clear57, 24, !dbg !9360
  br i1 %cmp58, label %land.lhs.true59, label %if.end68, !dbg !9361

land.lhs.true59:                                  ; preds = %land.lhs.true55
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9362
  %u60 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !9362
  %fld61 = bitcast %union.u* %u60 to [1 x %union.rtunion_def]*, !dbg !9362
  %arrayidx62 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld61, i64 0, i64 5, !dbg !9362
  %rt_rtx63 = bitcast %union.rtunion_def* %arrayidx62 to %struct.rtx_def**, !dbg !9362
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx63, align 8, !dbg !9362
  %54 = bitcast %struct.rtx_def* %53 to i32*, !dbg !9362
  %bf.load64 = load i32, i32* %54, align 8, !dbg !9362
  %bf.clear65 = and i32 %bf.load64, 65535, !dbg !9362
  %cmp66 = icmp ne i32 %bf.clear65, 25, !dbg !9363
  br i1 %cmp66, label %if.then67, label %if.end68, !dbg !9364

if.then67:                                        ; preds = %land.lhs.true59
  %55 = load i32, i32* %n_insns, align 4, !dbg !9365
  %inc = add nsw i32 %55, 1, !dbg !9365
  store i32 %inc, i32* %n_insns, align 4, !dbg !9365
  br label %if.end68, !dbg !9366

if.end68:                                         ; preds = %if.then67, %land.lhs.true59, %land.lhs.true55, %land.lhs.true51, %land.lhs.true, %lor.lhs.false44
  %56 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9367
  %57 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !9369
  %cmp69 = icmp eq %struct.rtx_def* %56, %57, !dbg !9370
  br i1 %cmp69, label %if.then70, label %if.end71, !dbg !9371

if.then70:                                        ; preds = %if.end68
  br label %while.end, !dbg !9372

if.end71:                                         ; preds = %if.end68
  %58 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9373
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %58, i32 0, i32 1, !dbg !9373
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !9373
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 2, !dbg !9373
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !9373
  %59 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !9373
  store %struct.rtx_def* %59, %struct.rtx_def** %insn, align 8, !dbg !9374
  br label %while.cond, !dbg !9344, !llvm.loop !9375

while.end:                                        ; preds = %if.then70, %while.cond
  %60 = load i32, i32* %n_insns, align 4, !dbg !9377
  store i32 %60, i32* %retval, align 4, !dbg !9378
  br label %return, !dbg !9378

return:                                           ; preds = %while.end, %if.then31, %if.then25, %if.else19, %if.then11, %if.then4, %if.then
  %61 = load i32, i32* %retval, align 4, !dbg !9379
  ret i32 %61, !dbg !9379
}

; Function Attrs: noinline nounwind uwtable
define internal { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %ev) #0 !dbg !9380 {
entry:
  %retval = alloca %struct.edge_iterator, align 8
  %ev.addr = alloca %struct.VEC_edge_gc**, align 8
  store %struct.VEC_edge_gc** %ev, %struct.VEC_edge_gc*** %ev.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.VEC_edge_gc*** %ev.addr, metadata !9383, metadata !DIExpression()), !dbg !9384
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %retval, metadata !9385, metadata !DIExpression()), !dbg !9386
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 0, !dbg !9387
  store i32 0, i32* %index, align 8, !dbg !9388
  %0 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %ev.addr, align 8, !dbg !9389
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %retval, i32 0, i32 1, !dbg !9390
  store %struct.VEC_edge_gc** %0, %struct.VEC_edge_gc*** %container, align 8, !dbg !9391
  %1 = bitcast %struct.edge_iterator* %retval to { i32, %struct.VEC_edge_gc** }*, !dbg !9392
  %2 = load { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, align 8, !dbg !9392
  ret { i32, %struct.VEC_edge_gc** } %2, !dbg !9392
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_cond(i32 %ei.coerce0, %struct.VEC_edge_gc** %ei.coerce1, %struct.edge_def** %p) #0 !dbg !9393 {
entry:
  %retval = alloca i8, align 1
  %ei = alloca %struct.edge_iterator, align 8
  %p.addr = alloca %struct.edge_def**, align 8
  %0 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %ei.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %ei.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9397, metadata !DIExpression()), !dbg !9398
  store %struct.edge_def** %p, %struct.edge_def*** %p.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_def*** %p.addr, metadata !9399, metadata !DIExpression()), !dbg !9400
  %3 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9401
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9401
  %5 = load i32, i32* %4, align 8, !dbg !9401
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9401
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9401
  %call = call zeroext i8 @ei_end_p(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9401
  %tobool = icmp ne i8 %call, 0, !dbg !9401
  br i1 %tobool, label %if.else, label %if.then, !dbg !9403

if.then:                                          ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9404
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9404
  %10 = load i32, i32* %9, align 8, !dbg !9404
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9404
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9404
  %call1 = call %struct.edge_def* @ei_edge(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9404
  %13 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9406
  store %struct.edge_def* %call1, %struct.edge_def** %13, align 8, !dbg !9407
  store i8 1, i8* %retval, align 1, !dbg !9408
  br label %return, !dbg !9408

if.else:                                          ; preds = %entry
  %14 = load %struct.edge_def**, %struct.edge_def*** %p.addr, align 8, !dbg !9409
  store %struct.edge_def* null, %struct.edge_def** %14, align 8, !dbg !9411
  store i8 0, i8* %retval, align 1, !dbg !9412
  br label %return, !dbg !9412

return:                                           ; preds = %if.else, %if.then
  %15 = load i8, i8* %retval, align 1, !dbg !9413
  ret i8 %15, !dbg !9413
}

; Function Attrs: noinline nounwind uwtable
define internal void @ei_next(%struct.edge_iterator* %i) #0 !dbg !9414 {
entry:
  %i.addr = alloca %struct.edge_iterator*, align 8
  store %struct.edge_iterator* %i, %struct.edge_iterator** %i.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator** %i.addr, metadata !9418, metadata !DIExpression()), !dbg !9419
  %0 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9420
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %0, i32 0, i32 0, !dbg !9420
  %1 = load i32, i32* %index, align 8, !dbg !9420
  %2 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9420
  %3 = bitcast %struct.edge_iterator* %2 to { i32, %struct.VEC_edge_gc** }*, !dbg !9420
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9420
  %5 = load i32, i32* %4, align 8, !dbg !9420
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9420
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9420
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9420
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !9420
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9420

cond.true:                                        ; preds = %entry
  %8 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9420
  %9 = bitcast %struct.edge_iterator* %8 to { i32, %struct.VEC_edge_gc** }*, !dbg !9420
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !9420
  %11 = load i32, i32* %10, align 8, !dbg !9420
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !9420
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !9420
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !9420
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !9420
  br label %cond.end, !dbg !9420

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9420

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9420
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9420
  %cmp = icmp ult i32 %1, %call2, !dbg !9420
  br i1 %cmp, label %cond.false4, label %cond.true3, !dbg !9420

cond.true3:                                       ; preds = %cond.end
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 738, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9420
  br label %cond.end5, !dbg !9420

cond.false4:                                      ; preds = %cond.end
  br label %cond.end5, !dbg !9420

cond.end5:                                        ; preds = %cond.false4, %cond.true3
  %cond6 = phi i32 [ 0, %cond.true3 ], [ 0, %cond.false4 ], !dbg !9420
  %14 = load %struct.edge_iterator*, %struct.edge_iterator** %i.addr, align 8, !dbg !9421
  %index7 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %14, i32 0, i32 0, !dbg !9422
  %15 = load i32, i32* %index7, align 8, !dbg !9423
  %inc = add i32 %15, 1, !dbg !9423
  store i32 %inc, i32* %index7, align 8, !dbg !9423
  ret void, !dbg !9424
}

declare dso_local zeroext i8 @tablejump_p(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def**) #1

declare dso_local i32 @simplejump_p(%struct.rtx_def*) #1

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @cond_exec_process_if_block(%struct.ce_if_block* %ce_info, i32 %do_multiple_p) #0 !dbg !9425 {
entry:
  %retval = alloca i32, align 4
  %ce_info.addr = alloca %struct.ce_if_block*, align 8
  %do_multiple_p.addr = alloca i32, align 4
  %test_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %test_expr = alloca %struct.rtx_def*, align 8
  %then_start = alloca %struct.rtx_def*, align 8
  %then_end = alloca %struct.rtx_def*, align 8
  %else_start = alloca %struct.rtx_def*, align 8
  %else_end = alloca %struct.rtx_def*, align 8
  %max = alloca i32, align 4
  %then_mod_ok = alloca i32, align 4
  %true_expr = alloca %struct.rtx_def*, align 8
  %false_expr = alloca %struct.rtx_def*, align 8
  %true_prob_val = alloca %struct.rtx_def*, align 8
  %false_prob_val = alloca %struct.rtx_def*, align 8
  %n_insns = alloca i32, align 4
  %false_code = alloca i32, align 4
  %bb = alloca %struct.basic_block_def*, align 8
  %last_test_bb65 = alloca %struct.basic_block_def*, align 8
  %start = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %t = alloca %struct.rtx_def*, align 8
  %f = alloca %struct.rtx_def*, align 8
  %f_code = alloca i32, align 4
  store %struct.ce_if_block* %ce_info, %struct.ce_if_block** %ce_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ce_if_block** %ce_info.addr, metadata !9429, metadata !DIExpression()), !dbg !9430
  store i32 %do_multiple_p, i32* %do_multiple_p.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %do_multiple_p.addr, metadata !9431, metadata !DIExpression()), !dbg !9432
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb, metadata !9433, metadata !DIExpression()), !dbg !9434
  %0 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9435
  %test_bb1 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %0, i32 0, i32 0, !dbg !9436
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb1, align 8, !dbg !9436
  store %struct.basic_block_def* %1, %struct.basic_block_def** %test_bb, align 8, !dbg !9434
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !9437, metadata !DIExpression()), !dbg !9438
  %2 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9439
  %then_bb2 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %2, i32 0, i32 1, !dbg !9440
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb2, align 8, !dbg !9440
  store %struct.basic_block_def* %3, %struct.basic_block_def** %then_bb, align 8, !dbg !9438
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !9441, metadata !DIExpression()), !dbg !9442
  %4 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9443
  %else_bb3 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %4, i32 0, i32 2, !dbg !9444
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb3, align 8, !dbg !9444
  store %struct.basic_block_def* %5, %struct.basic_block_def** %else_bb, align 8, !dbg !9442
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test_expr, metadata !9445, metadata !DIExpression()), !dbg !9446
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %then_start, metadata !9447, metadata !DIExpression()), !dbg !9448
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %then_end, metadata !9449, metadata !DIExpression()), !dbg !9450
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %else_start, metadata !9451, metadata !DIExpression()), !dbg !9452
  store %struct.rtx_def* null, %struct.rtx_def** %else_start, align 8, !dbg !9452
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %else_end, metadata !9453, metadata !DIExpression()), !dbg !9454
  store %struct.rtx_def* null, %struct.rtx_def** %else_end, align 8, !dbg !9454
  call void @llvm.dbg.declare(metadata i32* %max, metadata !9455, metadata !DIExpression()), !dbg !9456
  call void @llvm.dbg.declare(metadata i32* %then_mod_ok, metadata !9457, metadata !DIExpression()), !dbg !9458
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %true_expr, metadata !9459, metadata !DIExpression()), !dbg !9460
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %false_expr, metadata !9461, metadata !DIExpression()), !dbg !9462
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %true_prob_val, metadata !9463, metadata !DIExpression()), !dbg !9464
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %false_prob_val, metadata !9465, metadata !DIExpression()), !dbg !9466
  call void @llvm.dbg.declare(metadata i32* %n_insns, metadata !9467, metadata !DIExpression()), !dbg !9468
  call void @llvm.dbg.declare(metadata i32* %false_code, metadata !9469, metadata !DIExpression()), !dbg !9470
  %6 = load i32, i32* %do_multiple_p.addr, align 4, !dbg !9471
  %tobool = icmp ne i32 %6, 0, !dbg !9471
  br i1 %tobool, label %if.end10, label %land.lhs.true, !dbg !9473

land.lhs.true:                                    ; preds = %entry
  %7 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9474
  %num_multiple_test_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %7, i32 0, i32 5, !dbg !9475
  %8 = load i32, i32* %num_multiple_test_blocks, align 8, !dbg !9475
  %tobool4 = icmp ne i32 %8, 0, !dbg !9474
  br i1 %tobool4, label %if.then, label %if.end10, !dbg !9476

if.then:                                          ; preds = %land.lhs.true
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9477
  %tobool5 = icmp ne %struct.basic_block_def* %9, null, !dbg !9477
  br i1 %tobool5, label %if.then7, label %lor.lhs.false, !dbg !9480

lor.lhs.false:                                    ; preds = %if.then
  %10 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9481
  %and_and_p = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %10, i32 0, i32 9, !dbg !9482
  %11 = load i32, i32* %and_and_p, align 8, !dbg !9482
  %tobool6 = icmp ne i32 %11, 0, !dbg !9481
  br i1 %tobool6, label %if.end, label %if.then7, !dbg !9483

if.then7:                                         ; preds = %lor.lhs.false, %if.then
  store i32 0, i32* %retval, align 4, !dbg !9484
  br label %return, !dbg !9484

if.end:                                           ; preds = %lor.lhs.false
  %12 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9485
  %last_test_bb = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %12, i32 0, i32 4, !dbg !9486
  %13 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb, align 8, !dbg !9486
  store %struct.basic_block_def* %13, %struct.basic_block_def** %test_bb, align 8, !dbg !9487
  %14 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9488
  %test_bb8 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %14, i32 0, i32 0, !dbg !9489
  store %struct.basic_block_def* %13, %struct.basic_block_def** %test_bb8, align 8, !dbg !9490
  %15 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9491
  %num_multiple_test_blocks9 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %15, i32 0, i32 5, !dbg !9492
  store i32 0, i32* %num_multiple_test_blocks9, align 8, !dbg !9493
  %16 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9494
  %num_and_and_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %16, i32 0, i32 6, !dbg !9495
  store i32 0, i32* %num_and_and_blocks, align 4, !dbg !9496
  %17 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9497
  %num_or_or_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %17, i32 0, i32 7, !dbg !9498
  store i32 0, i32* %num_or_or_blocks, align 8, !dbg !9499
  br label %if.end10, !dbg !9500

if.end10:                                         ; preds = %if.end, %land.lhs.true, %entry
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !9501
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %18, i32 0, i32 7, !dbg !9501
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9501
  %19 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9501
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %19, i32 0, i32 1, !dbg !9501
  %20 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9501
  %call = call %struct.rtx_def* @cond_exec_get_condition(%struct.rtx_def* %20), !dbg !9502
  store %struct.rtx_def* %call, %struct.rtx_def** %test_expr, align 8, !dbg !9503
  %21 = load %struct.rtx_def*, %struct.rtx_def** %test_expr, align 8, !dbg !9504
  %tobool11 = icmp ne %struct.rtx_def* %21, null, !dbg !9504
  br i1 %tobool11, label %if.end13, label %if.then12, !dbg !9506

if.then12:                                        ; preds = %if.end10
  store i32 0, i32* %retval, align 4, !dbg !9507
  br label %return, !dbg !9507

if.end13:                                         ; preds = %if.end10
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !9508
  %il14 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %22, i32 0, i32 7, !dbg !9508
  %rtl15 = bitcast %union.basic_block_il_dependent* %il14 to %struct.rtl_bb_info**, !dbg !9508
  %23 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl15, align 8, !dbg !9508
  %end_16 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %23, i32 0, i32 1, !dbg !9508
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end_16, align 8, !dbg !9508
  %call17 = call i32 @onlyjump_p(%struct.rtx_def* %24), !dbg !9510
  %tobool18 = icmp ne i32 %call17, 0, !dbg !9510
  br i1 %tobool18, label %if.end20, label %if.then19, !dbg !9511

if.then19:                                        ; preds = %if.end13
  store i32 0, i32* %retval, align 4, !dbg !9512
  br label %return, !dbg !9512

if.end20:                                         ; preds = %if.end13
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !9513
  %call21 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %25), !dbg !9514
  store %struct.rtx_def* %call21, %struct.rtx_def** %then_start, align 8, !dbg !9515
  %26 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !9516
  %call22 = call %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %26, i32 1), !dbg !9517
  store %struct.rtx_def* %call22, %struct.rtx_def** %then_end, align 8, !dbg !9518
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !9519
  %call23 = call i32 @count_bb_insns(%struct.basic_block_def* %27), !dbg !9520
  %28 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9521
  %num_then_insns = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %28, i32 0, i32 10, !dbg !9522
  store i32 %call23, i32* %num_then_insns, align 4, !dbg !9523
  store i32 %call23, i32* %n_insns, align 4, !dbg !9524
  %29 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !9525
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %29, i64 0, !dbg !9525
  %call24 = call zeroext i8 @optimize_function_for_speed_p(%struct.function* %add.ptr), !dbg !9525
  %tobool25 = icmp ne i8 %call24, 0, !dbg !9525
  br i1 %tobool25, label %cond.false, label %cond.true, !dbg !9525

cond.true:                                        ; preds = %if.end20
  br label %cond.end, !dbg !9525

cond.false:                                       ; preds = %if.end20
  %30 = load i32, i32* @ix86_branch_cost, align 4, !dbg !9525
  br label %cond.end, !dbg !9525

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %30, %cond.false ], !dbg !9525
  %add = add nsw i32 %cond, 1, !dbg !9525
  store i32 %add, i32* %max, align 4, !dbg !9526
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9527
  %tobool26 = icmp ne %struct.basic_block_def* %31, null, !dbg !9527
  br i1 %tobool26, label %if.then27, label %if.end32, !dbg !9529

if.then27:                                        ; preds = %cond.end
  %32 = load i32, i32* %max, align 4, !dbg !9530
  %mul = mul nsw i32 %32, 2, !dbg !9530
  store i32 %mul, i32* %max, align 4, !dbg !9530
  %33 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9532
  %call28 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %33), !dbg !9533
  store %struct.rtx_def* %call28, %struct.rtx_def** %else_start, align 8, !dbg !9534
  %34 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9535
  %call29 = call %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %34, i32 1), !dbg !9536
  store %struct.rtx_def* %call29, %struct.rtx_def** %else_end, align 8, !dbg !9537
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9538
  %call30 = call i32 @count_bb_insns(%struct.basic_block_def* %35), !dbg !9539
  %36 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9540
  %num_else_insns = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %36, i32 0, i32 11, !dbg !9541
  store i32 %call30, i32* %num_else_insns, align 8, !dbg !9542
  %37 = load i32, i32* %n_insns, align 4, !dbg !9543
  %add31 = add nsw i32 %37, %call30, !dbg !9543
  store i32 %add31, i32* %n_insns, align 4, !dbg !9543
  br label %if.end32, !dbg !9544

if.end32:                                         ; preds = %if.then27, %cond.end
  %38 = load i32, i32* %n_insns, align 4, !dbg !9545
  %39 = load i32, i32* %max, align 4, !dbg !9547
  %cmp = icmp sgt i32 %38, %39, !dbg !9548
  br i1 %cmp, label %if.then33, label %if.end34, !dbg !9549

if.then33:                                        ; preds = %if.end32
  store i32 0, i32* %retval, align 4, !dbg !9550
  br label %return, !dbg !9550

if.end34:                                         ; preds = %if.end32
  %40 = load %struct.rtx_def*, %struct.rtx_def** %test_expr, align 8, !dbg !9551
  store %struct.rtx_def* %40, %struct.rtx_def** %true_expr, align 8, !dbg !9552
  %41 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9553
  %42 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !9554
  %il35 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %42, i32 0, i32 7, !dbg !9554
  %rtl36 = bitcast %union.basic_block_il_dependent* %il35 to %struct.rtl_bb_info**, !dbg !9554
  %43 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl36, align 8, !dbg !9554
  %end_37 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %43, i32 0, i32 1, !dbg !9554
  %44 = load %struct.rtx_def*, %struct.rtx_def** %end_37, align 8, !dbg !9554
  %call38 = call i32 @reversed_comparison_code(%struct.rtx_def* %41, %struct.rtx_def* %44), !dbg !9555
  store i32 %call38, i32* %false_code, align 4, !dbg !9556
  %45 = load i32, i32* %false_code, align 4, !dbg !9557
  %cmp39 = icmp ne i32 %45, 0, !dbg !9559
  br i1 %cmp39, label %if.then40, label %if.else, !dbg !9560

if.then40:                                        ; preds = %if.end34
  %46 = load i32, i32* %false_code, align 4, !dbg !9561
  %47 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9561
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !9561
  %bf.load = load i32, i32* %48, align 8, !dbg !9561
  %bf.lshr = lshr i32 %bf.load, 16, !dbg !9561
  %bf.clear = and i32 %bf.lshr, 255, !dbg !9561
  %49 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9561
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %49, i32 0, i32 1, !dbg !9561
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9561
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 0, !dbg !9561
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9561
  %50 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9561
  %51 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9561
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %51, i32 0, i32 1, !dbg !9561
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !9561
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 1, !dbg !9561
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !9561
  %52 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !9561
  %call45 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %46, i32 %bf.clear, %struct.rtx_def* %50, %struct.rtx_def* %52), !dbg !9561
  store %struct.rtx_def* %call45, %struct.rtx_def** %false_expr, align 8, !dbg !9562
  br label %if.end46, !dbg !9563

if.else:                                          ; preds = %if.end34
  store %struct.rtx_def* null, %struct.rtx_def** %false_expr, align 8, !dbg !9564
  br label %if.end46

if.end46:                                         ; preds = %if.else, %if.then40
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !9565
  %il47 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 7, !dbg !9565
  %rtl48 = bitcast %union.basic_block_il_dependent* %il47 to %struct.rtl_bb_info**, !dbg !9565
  %54 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl48, align 8, !dbg !9565
  %end_49 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %54, i32 0, i32 1, !dbg !9565
  %55 = load %struct.rtx_def*, %struct.rtx_def** %end_49, align 8, !dbg !9565
  %call50 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %55, i32 13, %struct.rtx_def* null), !dbg !9566
  store %struct.rtx_def* %call50, %struct.rtx_def** %true_prob_val, align 8, !dbg !9567
  %56 = load %struct.rtx_def*, %struct.rtx_def** %true_prob_val, align 8, !dbg !9568
  %tobool51 = icmp ne %struct.rtx_def* %56, null, !dbg !9568
  br i1 %tobool51, label %if.then52, label %if.else60, !dbg !9570

if.then52:                                        ; preds = %if.end46
  %57 = load %struct.rtx_def*, %struct.rtx_def** %true_prob_val, align 8, !dbg !9571
  %u53 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %57, i32 0, i32 1, !dbg !9571
  %fld54 = bitcast %union.u* %u53 to [1 x %union.rtunion_def]*, !dbg !9571
  %arrayidx55 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld54, i64 0, i64 0, !dbg !9571
  %rt_rtx56 = bitcast %union.rtunion_def* %arrayidx55 to %struct.rtx_def**, !dbg !9571
  %58 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx56, align 8, !dbg !9571
  store %struct.rtx_def* %58, %struct.rtx_def** %true_prob_val, align 8, !dbg !9573
  %59 = load %struct.rtx_def*, %struct.rtx_def** %true_prob_val, align 8, !dbg !9574
  %u57 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !9574
  %hwint = bitcast %union.u* %u57 to [1 x i64]*, !dbg !9574
  %arrayidx58 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !9574
  %60 = load i64, i64* %arrayidx58, align 8, !dbg !9574
  %sub = sub nsw i64 10000, %60, !dbg !9574
  %call59 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !9574
  store %struct.rtx_def* %call59, %struct.rtx_def** %false_prob_val, align 8, !dbg !9575
  br label %if.end61, !dbg !9576

if.else60:                                        ; preds = %if.end46
  store %struct.rtx_def* null, %struct.rtx_def** %false_prob_val, align 8, !dbg !9577
  br label %if.end61

if.end61:                                         ; preds = %if.else60, %if.then52
  %61 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9578
  %num_multiple_test_blocks62 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %61, i32 0, i32 5, !dbg !9580
  %62 = load i32, i32* %num_multiple_test_blocks62, align 8, !dbg !9580
  %cmp63 = icmp sgt i32 %62, 0, !dbg !9581
  br i1 %cmp63, label %if.then64, label %if.end134, !dbg !9582

if.then64:                                        ; preds = %if.end61
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !9583, metadata !DIExpression()), !dbg !9585
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !9586
  store %struct.basic_block_def* %63, %struct.basic_block_def** %bb, align 8, !dbg !9585
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_test_bb65, metadata !9587, metadata !DIExpression()), !dbg !9588
  %64 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9589
  %last_test_bb66 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %64, i32 0, i32 4, !dbg !9590
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb66, align 8, !dbg !9590
  store %struct.basic_block_def* %65, %struct.basic_block_def** %last_test_bb65, align 8, !dbg !9588
  %66 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9591
  %tobool67 = icmp ne %struct.rtx_def* %66, null, !dbg !9591
  br i1 %tobool67, label %if.end69, label %if.then68, !dbg !9593

if.then68:                                        ; preds = %if.then64
  br label %fail, !dbg !9594

if.end69:                                         ; preds = %if.then64
  br label %do.body, !dbg !9595

do.body:                                          ; preds = %do.cond, %if.end69
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start, metadata !9596, metadata !DIExpression()), !dbg !9598
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !9599, metadata !DIExpression()), !dbg !9600
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %t, metadata !9601, metadata !DIExpression()), !dbg !9602
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %f, metadata !9603, metadata !DIExpression()), !dbg !9604
  call void @llvm.dbg.declare(metadata i32* %f_code, metadata !9605, metadata !DIExpression()), !dbg !9606
  %67 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9607
  %call70 = call %struct.basic_block_def* @block_fallthru(%struct.basic_block_def* %67), !dbg !9608
  store %struct.basic_block_def* %call70, %struct.basic_block_def** %bb, align 8, !dbg !9609
  %68 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9610
  %call71 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %68), !dbg !9611
  store %struct.rtx_def* %call71, %struct.rtx_def** %start, align 8, !dbg !9612
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9613
  %call72 = call %struct.rtx_def* @last_active_insn(%struct.basic_block_def* %69, i32 1), !dbg !9614
  store %struct.rtx_def* %call72, %struct.rtx_def** %end, align 8, !dbg !9615
  %70 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8, !dbg !9616
  %tobool73 = icmp ne %struct.rtx_def* %70, null, !dbg !9616
  br i1 %tobool73, label %land.lhs.true74, label %if.end78, !dbg !9618

land.lhs.true74:                                  ; preds = %do.body
  %71 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9619
  %72 = load %struct.rtx_def*, %struct.rtx_def** %start, align 8, !dbg !9620
  %73 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !9621
  %74 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9622
  %75 = load %struct.rtx_def*, %struct.rtx_def** %false_prob_val, align 8, !dbg !9623
  %call75 = call i32 @cond_exec_process_insns(%struct.ce_if_block* %71, %struct.rtx_def* %72, %struct.rtx_def* %73, %struct.rtx_def* %74, %struct.rtx_def* %75, i32 0), !dbg !9624
  %tobool76 = icmp ne i32 %call75, 0, !dbg !9624
  br i1 %tobool76, label %if.end78, label %if.then77, !dbg !9625

if.then77:                                        ; preds = %land.lhs.true74
  br label %fail, !dbg !9626

if.end78:                                         ; preds = %land.lhs.true74, %do.body
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9627
  %il79 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %76, i32 0, i32 7, !dbg !9627
  %rtl80 = bitcast %union.basic_block_il_dependent* %il79 to %struct.rtl_bb_info**, !dbg !9627
  %77 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl80, align 8, !dbg !9627
  %end_81 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %77, i32 0, i32 1, !dbg !9627
  %78 = load %struct.rtx_def*, %struct.rtx_def** %end_81, align 8, !dbg !9627
  %call82 = call i32 @onlyjump_p(%struct.rtx_def* %78), !dbg !9629
  %tobool83 = icmp ne i32 %call82, 0, !dbg !9629
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !9630

if.then84:                                        ; preds = %if.end78
  br label %fail, !dbg !9631

if.end85:                                         ; preds = %if.end78
  %79 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9632
  %il86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %79, i32 0, i32 7, !dbg !9632
  %rtl87 = bitcast %union.basic_block_il_dependent* %il86 to %struct.rtl_bb_info**, !dbg !9632
  %80 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl87, align 8, !dbg !9632
  %end_88 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %80, i32 0, i32 1, !dbg !9632
  %81 = load %struct.rtx_def*, %struct.rtx_def** %end_88, align 8, !dbg !9632
  %call89 = call %struct.rtx_def* @cond_exec_get_condition(%struct.rtx_def* %81), !dbg !9633
  store %struct.rtx_def* %call89, %struct.rtx_def** %t, align 8, !dbg !9634
  %82 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9635
  %tobool90 = icmp ne %struct.rtx_def* %82, null, !dbg !9635
  br i1 %tobool90, label %if.end92, label %if.then91, !dbg !9637

if.then91:                                        ; preds = %if.end85
  br label %fail, !dbg !9638

if.end92:                                         ; preds = %if.end85
  %83 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9639
  %84 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9640
  %il93 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %84, i32 0, i32 7, !dbg !9640
  %rtl94 = bitcast %union.basic_block_il_dependent* %il93 to %struct.rtl_bb_info**, !dbg !9640
  %85 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl94, align 8, !dbg !9640
  %end_95 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %85, i32 0, i32 1, !dbg !9640
  %86 = load %struct.rtx_def*, %struct.rtx_def** %end_95, align 8, !dbg !9640
  %call96 = call i32 @reversed_comparison_code(%struct.rtx_def* %83, %struct.rtx_def* %86), !dbg !9641
  store i32 %call96, i32* %f_code, align 4, !dbg !9642
  %87 = load i32, i32* %f_code, align 4, !dbg !9643
  %cmp97 = icmp eq i32 %87, 0, !dbg !9645
  br i1 %cmp97, label %if.then98, label %if.end99, !dbg !9646

if.then98:                                        ; preds = %if.end92
  br label %fail, !dbg !9647

if.end99:                                         ; preds = %if.end92
  %88 = load i32, i32* %f_code, align 4, !dbg !9648
  %89 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9648
  %90 = bitcast %struct.rtx_def* %89 to i32*, !dbg !9648
  %bf.load100 = load i32, i32* %90, align 8, !dbg !9648
  %bf.lshr101 = lshr i32 %bf.load100, 16, !dbg !9648
  %bf.clear102 = and i32 %bf.lshr101, 255, !dbg !9648
  %91 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9648
  %u103 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %91, i32 0, i32 1, !dbg !9648
  %fld104 = bitcast %union.u* %u103 to [1 x %union.rtunion_def]*, !dbg !9648
  %arrayidx105 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld104, i64 0, i64 0, !dbg !9648
  %rt_rtx106 = bitcast %union.rtunion_def* %arrayidx105 to %struct.rtx_def**, !dbg !9648
  %92 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx106, align 8, !dbg !9648
  %93 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9648
  %u107 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %93, i32 0, i32 1, !dbg !9648
  %fld108 = bitcast %union.u* %u107 to [1 x %union.rtunion_def]*, !dbg !9648
  %arrayidx109 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld108, i64 0, i64 1, !dbg !9648
  %rt_rtx110 = bitcast %union.rtunion_def* %arrayidx109 to %struct.rtx_def**, !dbg !9648
  %94 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx110, align 8, !dbg !9648
  %call111 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %88, i32 %bf.clear102, %struct.rtx_def* %92, %struct.rtx_def* %94), !dbg !9648
  store %struct.rtx_def* %call111, %struct.rtx_def** %f, align 8, !dbg !9649
  %95 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9650
  %and_and_p112 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %95, i32 0, i32 9, !dbg !9652
  %96 = load i32, i32* %and_and_p112, align 8, !dbg !9652
  %tobool113 = icmp ne i32 %96, 0, !dbg !9650
  br i1 %tobool113, label %if.then114, label %if.else123, !dbg !9653

if.then114:                                       ; preds = %if.end99
  %97 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9654
  %98 = bitcast %struct.rtx_def* %97 to i32*, !dbg !9654
  %bf.load115 = load i32, i32* %98, align 8, !dbg !9654
  %bf.lshr116 = lshr i32 %bf.load115, 16, !dbg !9654
  %bf.clear117 = and i32 %bf.lshr116, 255, !dbg !9654
  %99 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9654
  %100 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9654
  %call118 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 61, i32 %bf.clear117, %struct.rtx_def* %99, %struct.rtx_def* %100), !dbg !9654
  store %struct.rtx_def* %call118, %struct.rtx_def** %t, align 8, !dbg !9656
  %101 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9657
  %102 = bitcast %struct.rtx_def* %101 to i32*, !dbg !9657
  %bf.load119 = load i32, i32* %102, align 8, !dbg !9657
  %bf.lshr120 = lshr i32 %bf.load119, 16, !dbg !9657
  %bf.clear121 = and i32 %bf.lshr120, 255, !dbg !9657
  %103 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9657
  %104 = load %struct.rtx_def*, %struct.rtx_def** %f, align 8, !dbg !9657
  %call122 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 62, i32 %bf.clear121, %struct.rtx_def* %103, %struct.rtx_def* %104), !dbg !9657
  store %struct.rtx_def* %call122, %struct.rtx_def** %f, align 8, !dbg !9658
  br label %if.end132, !dbg !9659

if.else123:                                       ; preds = %if.end99
  %105 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9660
  %106 = bitcast %struct.rtx_def* %105 to i32*, !dbg !9660
  %bf.load124 = load i32, i32* %106, align 8, !dbg !9660
  %bf.lshr125 = lshr i32 %bf.load124, 16, !dbg !9660
  %bf.clear126 = and i32 %bf.lshr125, 255, !dbg !9660
  %107 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9660
  %108 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9660
  %call127 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 62, i32 %bf.clear126, %struct.rtx_def* %107, %struct.rtx_def* %108), !dbg !9660
  store %struct.rtx_def* %call127, %struct.rtx_def** %t, align 8, !dbg !9662
  %109 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9663
  %110 = bitcast %struct.rtx_def* %109 to i32*, !dbg !9663
  %bf.load128 = load i32, i32* %110, align 8, !dbg !9663
  %bf.lshr129 = lshr i32 %bf.load128, 16, !dbg !9663
  %bf.clear130 = and i32 %bf.lshr129, 255, !dbg !9663
  %111 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9663
  %112 = load %struct.rtx_def*, %struct.rtx_def** %f, align 8, !dbg !9663
  %call131 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 61, i32 %bf.clear130, %struct.rtx_def* %111, %struct.rtx_def* %112), !dbg !9663
  store %struct.rtx_def* %call131, %struct.rtx_def** %f, align 8, !dbg !9664
  br label %if.end132

if.end132:                                        ; preds = %if.else123, %if.then114
  %113 = load %struct.rtx_def*, %struct.rtx_def** %t, align 8, !dbg !9665
  store %struct.rtx_def* %113, %struct.rtx_def** %true_expr, align 8, !dbg !9666
  %114 = load %struct.rtx_def*, %struct.rtx_def** %f, align 8, !dbg !9667
  store %struct.rtx_def* %114, %struct.rtx_def** %false_expr, align 8, !dbg !9668
  br label %do.cond, !dbg !9669

do.cond:                                          ; preds = %if.end132
  %115 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !9670
  %116 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb65, align 8, !dbg !9671
  %cmp133 = icmp ne %struct.basic_block_def* %115, %116, !dbg !9672
  br i1 %cmp133, label %do.body, label %do.end, !dbg !9669, !llvm.loop !9673

do.end:                                           ; preds = %do.cond
  br label %if.end134, !dbg !9675

if.end134:                                        ; preds = %do.end, %if.end61
  %117 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9676
  %cmp135 = icmp eq %struct.basic_block_def* %117, null, !dbg !9677
  %conv = zext i1 %cmp135 to i32, !dbg !9677
  store i32 %conv, i32* %then_mod_ok, align 4, !dbg !9678
  %118 = load %struct.rtx_def*, %struct.rtx_def** %then_end, align 8, !dbg !9679
  %tobool136 = icmp ne %struct.rtx_def* %118, null, !dbg !9679
  br i1 %tobool136, label %land.lhs.true137, label %if.end143, !dbg !9681

land.lhs.true137:                                 ; preds = %if.end134
  %119 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9682
  %tobool138 = icmp ne %struct.rtx_def* %119, null, !dbg !9682
  br i1 %tobool138, label %lor.lhs.false139, label %if.then142, !dbg !9683

lor.lhs.false139:                                 ; preds = %land.lhs.true137
  %120 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9684
  %121 = load %struct.rtx_def*, %struct.rtx_def** %then_start, align 8, !dbg !9685
  %122 = load %struct.rtx_def*, %struct.rtx_def** %then_end, align 8, !dbg !9686
  %123 = load %struct.rtx_def*, %struct.rtx_def** %false_expr, align 8, !dbg !9687
  %124 = load %struct.rtx_def*, %struct.rtx_def** %false_prob_val, align 8, !dbg !9688
  %125 = load i32, i32* %then_mod_ok, align 4, !dbg !9689
  %call140 = call i32 @cond_exec_process_insns(%struct.ce_if_block* %120, %struct.rtx_def* %121, %struct.rtx_def* %122, %struct.rtx_def* %123, %struct.rtx_def* %124, i32 %125), !dbg !9690
  %tobool141 = icmp ne i32 %call140, 0, !dbg !9690
  br i1 %tobool141, label %if.end143, label %if.then142, !dbg !9691

if.then142:                                       ; preds = %lor.lhs.false139, %land.lhs.true137
  br label %fail, !dbg !9692

if.end143:                                        ; preds = %lor.lhs.false139, %if.end134
  %126 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !9693
  %tobool144 = icmp ne %struct.basic_block_def* %126, null, !dbg !9693
  br i1 %tobool144, label %land.lhs.true145, label %if.end151, !dbg !9695

land.lhs.true145:                                 ; preds = %if.end143
  %127 = load %struct.rtx_def*, %struct.rtx_def** %else_end, align 8, !dbg !9696
  %tobool146 = icmp ne %struct.rtx_def* %127, null, !dbg !9696
  br i1 %tobool146, label %land.lhs.true147, label %if.end151, !dbg !9697

land.lhs.true147:                                 ; preds = %land.lhs.true145
  %128 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9698
  %129 = load %struct.rtx_def*, %struct.rtx_def** %else_start, align 8, !dbg !9699
  %130 = load %struct.rtx_def*, %struct.rtx_def** %else_end, align 8, !dbg !9700
  %131 = load %struct.rtx_def*, %struct.rtx_def** %true_expr, align 8, !dbg !9701
  %132 = load %struct.rtx_def*, %struct.rtx_def** %true_prob_val, align 8, !dbg !9702
  %call148 = call i32 @cond_exec_process_insns(%struct.ce_if_block* %128, %struct.rtx_def* %129, %struct.rtx_def* %130, %struct.rtx_def* %131, %struct.rtx_def* %132, i32 1), !dbg !9703
  %tobool149 = icmp ne i32 %call148, 0, !dbg !9703
  br i1 %tobool149, label %if.end151, label %if.then150, !dbg !9704

if.then150:                                       ; preds = %land.lhs.true147
  br label %fail, !dbg !9705

if.end151:                                        ; preds = %land.lhs.true147, %land.lhs.true145, %if.end143
  %call152 = call i32 @apply_change_group(), !dbg !9706
  %tobool153 = icmp ne i32 %call152, 0, !dbg !9706
  br i1 %tobool153, label %if.end155, label %if.then154, !dbg !9708

if.then154:                                       ; preds = %if.end151
  store i32 0, i32* %retval, align 4, !dbg !9709
  br label %return, !dbg !9709

if.end155:                                        ; preds = %if.end151
  %133 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9711
  %tobool156 = icmp ne %struct._IO_FILE* %133, null, !dbg !9711
  br i1 %tobool156, label %if.then157, label %if.end162, !dbg !9713

if.then157:                                       ; preds = %if.end155
  %134 = load %struct._IO_FILE*, %struct._IO_FILE** @dump_file, align 8, !dbg !9714
  %135 = load i32, i32* %n_insns, align 4, !dbg !9715
  %136 = load i32, i32* %n_insns, align 4, !dbg !9716
  %cmp158 = icmp eq i32 %136, 1, !dbg !9717
  %137 = zext i1 %cmp158 to i64, !dbg !9718
  %cond160 = select i1 %cmp158, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.26, i64 0, i64 0), !dbg !9718
  %call161 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %134, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.24, i64 0, i64 0), i32 %135, i8* %cond160), !dbg !9719
  br label %if.end162, !dbg !9719

if.end162:                                        ; preds = %if.then157, %if.end155
  %138 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9720
  call void @merge_if_block(%struct.ce_if_block* %138), !dbg !9721
  store i32 1, i32* @cond_exec_changed_p, align 4, !dbg !9722
  store i32 1, i32* %retval, align 4, !dbg !9723
  br label %return, !dbg !9723

fail:                                             ; preds = %if.then150, %if.then142, %if.then98, %if.then91, %if.then84, %if.then77, %if.then68
  call void @llvm.dbg.label(metadata !9724), !dbg !9725
  call void @cancel_changes(i32 0), !dbg !9726
  store i32 0, i32* %retval, align 4, !dbg !9727
  br label %return, !dbg !9727

return:                                           ; preds = %fail, %if.end162, %if.then154, %if.then33, %if.then19, %if.then12, %if.then7
  %139 = load i32, i32* %retval, align 4, !dbg !9728
  ret i32 %139, !dbg !9728
}

declare dso_local void @cancel_changes(i32) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @ei_end_p(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9729 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9732, metadata !DIExpression()), !dbg !9733
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !9734
  %3 = load i32, i32* %index, align 8, !dbg !9734
  %4 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9735
  %5 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 0, !dbg !9735
  %6 = load i32, i32* %5, align 8, !dbg !9735
  %7 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %4, i32 0, i32 1, !dbg !9735
  %8 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %7, align 8, !dbg !9735
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %6, %struct.VEC_edge_gc** %8), !dbg !9735
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !9735
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9735

cond.true:                                        ; preds = %entry
  %9 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9735
  %10 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 0, !dbg !9735
  %11 = load i32, i32* %10, align 8, !dbg !9735
  %12 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %9, i32 0, i32 1, !dbg !9735
  %13 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %12, align 8, !dbg !9735
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %11, %struct.VEC_edge_gc** %13), !dbg !9735
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !9735
  br label %cond.end, !dbg !9735

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9735

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9735
  %call2 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !9735
  %cmp = icmp eq i32 %3, %call2, !dbg !9736
  %conv = zext i1 %cmp to i32, !dbg !9736
  %conv3 = trunc i32 %conv to i8, !dbg !9737
  ret i8 %conv3, !dbg !9738
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.edge_def* @ei_edge(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9739 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9742, metadata !DIExpression()), !dbg !9743
  %3 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9744
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 0, !dbg !9744
  %5 = load i32, i32* %4, align 8, !dbg !9744
  %6 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %3, i32 0, i32 1, !dbg !9744
  %7 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %6, align 8, !dbg !9744
  %call = call %struct.VEC_edge_gc* @ei_container(i32 %5, %struct.VEC_edge_gc** %7), !dbg !9744
  %tobool = icmp ne %struct.VEC_edge_gc* %call, null, !dbg !9744
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !9744

cond.true:                                        ; preds = %entry
  %8 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*, !dbg !9744
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9744
  %10 = load i32, i32* %9, align 8, !dbg !9744
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9744
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9744
  %call1 = call %struct.VEC_edge_gc* @ei_container(i32 %10, %struct.VEC_edge_gc** %12), !dbg !9744
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %call1, i32 0, i32 0, !dbg !9744
  br label %cond.end, !dbg !9744

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9744

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !9744
  %index = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 0, !dbg !9744
  %13 = load i32, i32* %index, align 8, !dbg !9744
  %call2 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond, i32 %13), !dbg !9744
  ret %struct.edge_def* %call2, !dbg !9745
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.VEC_edge_gc* @ei_container(i32 %i.coerce0, %struct.VEC_edge_gc** %i.coerce1) #0 !dbg !9746 {
entry:
  %i = alloca %struct.edge_iterator, align 8
  %0 = bitcast %struct.edge_iterator* %i to { i32, %struct.VEC_edge_gc** }*
  %1 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 0
  store i32 %i.coerce0, i32* %1, align 8
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %0, i32 0, i32 1
  store %struct.VEC_edge_gc** %i.coerce1, %struct.VEC_edge_gc*** %2, align 8
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %i, metadata !9749, metadata !DIExpression()), !dbg !9750
  %container = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !9751
  %3 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container, align 8, !dbg !9751
  %tobool = icmp ne %struct.VEC_edge_gc** %3, null, !dbg !9751
  br i1 %tobool, label %cond.false, label %cond.true, !dbg !9751

cond.true:                                        ; preds = %entry
  call void @fancy_abort(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.16, i64 0, i64 0), i32 687, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9751
  br label %cond.end, !dbg !9751

cond.false:                                       ; preds = %entry
  br label %cond.end, !dbg !9751

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9751
  %container1 = getelementptr inbounds %struct.edge_iterator, %struct.edge_iterator* %i, i32 0, i32 1, !dbg !9752
  %4 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %container1, align 8, !dbg !9752
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %4, align 8, !dbg !9753
  ret %struct.VEC_edge_gc* %5, !dbg !9754
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @cond_exec_get_condition(%struct.rtx_def* %jump) #0 !dbg !9755 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %jump.addr = alloca %struct.rtx_def*, align 8
  %test_if = alloca %struct.rtx_def*, align 8
  %cond = alloca %struct.rtx_def*, align 8
  %rev = alloca i32, align 4
  store %struct.rtx_def* %jump, %struct.rtx_def** %jump.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump.addr, metadata !9758, metadata !DIExpression()), !dbg !9759
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test_if, metadata !9760, metadata !DIExpression()), !dbg !9761
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !9762, metadata !DIExpression()), !dbg !9763
  %0 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9764
  %call = call i32 @any_condjump_p(%struct.rtx_def* %0), !dbg !9766
  %tobool = icmp ne i32 %call, 0, !dbg !9766
  br i1 %tobool, label %if.then, label %if.else, !dbg !9767

if.then:                                          ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9768
  %call1 = call %struct.rtx_def* @pc_set(%struct.rtx_def* %1), !dbg !9768
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %call1, i32 0, i32 1, !dbg !9768
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9768
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !9768
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9768
  %2 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9768
  store %struct.rtx_def* %2, %struct.rtx_def** %test_if, align 8, !dbg !9769
  br label %if.end, !dbg !9770

if.else:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9771
  br label %return, !dbg !9771

if.end:                                           ; preds = %if.then
  %3 = load %struct.rtx_def*, %struct.rtx_def** %test_if, align 8, !dbg !9772
  %u2 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %3, i32 0, i32 1, !dbg !9772
  %fld3 = bitcast %union.u* %u2 to [1 x %union.rtunion_def]*, !dbg !9772
  %arrayidx4 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld3, i64 0, i64 0, !dbg !9772
  %rt_rtx5 = bitcast %union.rtunion_def* %arrayidx4 to %struct.rtx_def**, !dbg !9772
  %4 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx5, align 8, !dbg !9772
  store %struct.rtx_def* %4, %struct.rtx_def** %cond, align 8, !dbg !9773
  %5 = load %struct.rtx_def*, %struct.rtx_def** %test_if, align 8, !dbg !9774
  %u6 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %5, i32 0, i32 1, !dbg !9774
  %fld7 = bitcast %union.u* %u6 to [1 x %union.rtunion_def]*, !dbg !9774
  %arrayidx8 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld7, i64 0, i64 2, !dbg !9774
  %rt_rtx9 = bitcast %union.rtunion_def* %arrayidx8 to %struct.rtx_def**, !dbg !9774
  %6 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx9, align 8, !dbg !9774
  %7 = bitcast %struct.rtx_def* %6 to i32*, !dbg !9774
  %bf.load = load i32, i32* %7, align 8, !dbg !9774
  %bf.clear = and i32 %bf.load, 65535, !dbg !9774
  %cmp = icmp eq i32 %bf.clear, 44, !dbg !9776
  br i1 %cmp, label %land.lhs.true, label %if.end39, !dbg !9777

land.lhs.true:                                    ; preds = %if.end
  %8 = load %struct.rtx_def*, %struct.rtx_def** %test_if, align 8, !dbg !9778
  %u10 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %8, i32 0, i32 1, !dbg !9778
  %fld11 = bitcast %union.u* %u10 to [1 x %union.rtunion_def]*, !dbg !9778
  %arrayidx12 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld11, i64 0, i64 2, !dbg !9778
  %rt_rtx13 = bitcast %union.rtunion_def* %arrayidx12 to %struct.rtx_def**, !dbg !9778
  %9 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx13, align 8, !dbg !9778
  %u14 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %9, i32 0, i32 1, !dbg !9778
  %fld15 = bitcast %union.u* %u14 to [1 x %union.rtunion_def]*, !dbg !9778
  %arrayidx16 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld15, i64 0, i64 0, !dbg !9778
  %rt_rtx17 = bitcast %union.rtunion_def* %arrayidx16 to %struct.rtx_def**, !dbg !9778
  %10 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx17, align 8, !dbg !9778
  %11 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9779
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %11, i32 0, i32 1, !dbg !9779
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !9779
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 8, !dbg !9779
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !9779
  %12 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !9779
  %cmp22 = icmp eq %struct.rtx_def* %10, %12, !dbg !9780
  br i1 %cmp22, label %if.then23, label %if.end39, !dbg !9781

if.then23:                                        ; preds = %land.lhs.true
  call void @llvm.dbg.declare(metadata i32* %rev, metadata !9782, metadata !DIExpression()), !dbg !9784
  %13 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !9785
  %14 = load %struct.rtx_def*, %struct.rtx_def** %jump.addr, align 8, !dbg !9786
  %call24 = call i32 @reversed_comparison_code(%struct.rtx_def* %13, %struct.rtx_def* %14), !dbg !9787
  store i32 %call24, i32* %rev, align 4, !dbg !9784
  %15 = load i32, i32* %rev, align 4, !dbg !9788
  %cmp25 = icmp eq i32 %15, 0, !dbg !9790
  br i1 %cmp25, label %if.then26, label %if.end27, !dbg !9791

if.then26:                                        ; preds = %if.then23
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !9792
  br label %return, !dbg !9792

if.end27:                                         ; preds = %if.then23
  %16 = load i32, i32* %rev, align 4, !dbg !9793
  %17 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !9793
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !9793
  %bf.load28 = load i32, i32* %18, align 8, !dbg !9793
  %bf.lshr = lshr i32 %bf.load28, 16, !dbg !9793
  %bf.clear29 = and i32 %bf.lshr, 255, !dbg !9793
  %19 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !9793
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !9793
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !9793
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 0, !dbg !9793
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !9793
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !9793
  %21 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !9793
  %u34 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !9793
  %fld35 = bitcast %union.u* %u34 to [1 x %union.rtunion_def]*, !dbg !9793
  %arrayidx36 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld35, i64 0, i64 1, !dbg !9793
  %rt_rtx37 = bitcast %union.rtunion_def* %arrayidx36 to %struct.rtx_def**, !dbg !9793
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx37, align 8, !dbg !9793
  %call38 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %16, i32 %bf.clear29, %struct.rtx_def* %20, %struct.rtx_def* %22), !dbg !9793
  store %struct.rtx_def* %call38, %struct.rtx_def** %cond, align 8, !dbg !9794
  br label %if.end39, !dbg !9795

if.end39:                                         ; preds = %if.end27, %land.lhs.true, %if.end
  %23 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !9796
  store %struct.rtx_def* %23, %struct.rtx_def** %retval, align 8, !dbg !9797
  br label %return, !dbg !9797

return:                                           ; preds = %if.end39, %if.then26, %if.else
  %24 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !9798
  ret %struct.rtx_def* %24, !dbg !9798
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @count_bb_insns(%struct.basic_block_def* %bb) #0 !dbg !9799 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %count = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9802, metadata !DIExpression()), !dbg !9803
  call void @llvm.dbg.declare(metadata i32* %count, metadata !9804, metadata !DIExpression()), !dbg !9805
  store i32 0, i32* %count, align 4, !dbg !9805
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9806, metadata !DIExpression()), !dbg !9807
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9808
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !9808
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !9808
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !9808
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !9808
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !9808
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !9807
  br label %while.body, !dbg !9809

while.body:                                       ; preds = %entry, %if.end8
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9810
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9810
  %bf.load = load i32, i32* %4, align 8, !dbg !9810
  %bf.clear = and i32 %bf.load, 65535, !dbg !9810
  %cmp = icmp eq i32 %bf.clear, 10, !dbg !9810
  br i1 %cmp, label %if.then, label %lor.lhs.false, !dbg !9813

lor.lhs.false:                                    ; preds = %while.body
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9814
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !9814
  %bf.load1 = load i32, i32* %6, align 8, !dbg !9814
  %bf.clear2 = and i32 %bf.load1, 65535, !dbg !9814
  %cmp3 = icmp eq i32 %bf.clear2, 8, !dbg !9814
  br i1 %cmp3, label %if.then, label %if.end, !dbg !9815

if.then:                                          ; preds = %lor.lhs.false, %while.body
  %7 = load i32, i32* %count, align 4, !dbg !9816
  %inc = add nsw i32 %7, 1, !dbg !9816
  store i32 %inc, i32* %count, align 4, !dbg !9816
  br label %if.end, !dbg !9817

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %8 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9818
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9820
  %il4 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %9, i32 0, i32 7, !dbg !9820
  %rtl5 = bitcast %union.basic_block_il_dependent* %il4 to %struct.rtl_bb_info**, !dbg !9820
  %10 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl5, align 8, !dbg !9820
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %10, i32 0, i32 1, !dbg !9820
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !9820
  %cmp6 = icmp eq %struct.rtx_def* %8, %11, !dbg !9821
  br i1 %cmp6, label %if.then7, label %if.end8, !dbg !9822

if.then7:                                         ; preds = %if.end
  br label %while.end, !dbg !9823

if.end8:                                          ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9824
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9824
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9824
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 2, !dbg !9824
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9824
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9824
  store %struct.rtx_def* %13, %struct.rtx_def** %insn, align 8, !dbg !9825
  br label %while.body, !dbg !9809, !llvm.loop !9826

while.end:                                        ; preds = %if.then7
  %14 = load i32, i32* %count, align 4, !dbg !9828
  ret i32 %14, !dbg !9829
}

; Function Attrs: noinline nounwind uwtable
define internal %struct.basic_block_def* @block_fallthru(%struct.basic_block_def* %bb) #0 !dbg !9830 {
entry:
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %e = alloca %struct.edge_def*, align 8
  %ei = alloca %struct.edge_iterator, align 8
  %tmp = alloca %struct.edge_iterator, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !9833, metadata !DIExpression()), !dbg !9834
  call void @llvm.dbg.declare(metadata %struct.edge_def** %e, metadata !9835, metadata !DIExpression()), !dbg !9836
  call void @llvm.dbg.declare(metadata %struct.edge_iterator* %ei, metadata !9837, metadata !DIExpression()), !dbg !9838
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !9839
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 1, !dbg !9839
  %call = call { i32, %struct.VEC_edge_gc** } @ei_start_1(%struct.VEC_edge_gc** %succs), !dbg !9839
  %1 = bitcast %struct.edge_iterator* %tmp to { i32, %struct.VEC_edge_gc** }*, !dbg !9839
  %2 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 0, !dbg !9839
  %3 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 0, !dbg !9839
  store i32 %3, i32* %2, align 8, !dbg !9839
  %4 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %1, i32 0, i32 1, !dbg !9839
  %5 = extractvalue { i32, %struct.VEC_edge_gc** } %call, 1, !dbg !9839
  store %struct.VEC_edge_gc** %5, %struct.VEC_edge_gc*** %4, align 8, !dbg !9839
  %6 = bitcast %struct.edge_iterator* %ei to i8*, !dbg !9839
  %7 = bitcast %struct.edge_iterator* %tmp to i8*, !dbg !9839
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %6, i8* align 8 %7, i64 16, i1 false), !dbg !9839
  br label %for.cond, !dbg !9839

for.cond:                                         ; preds = %for.inc, %entry
  %8 = bitcast %struct.edge_iterator* %ei to { i32, %struct.VEC_edge_gc** }*, !dbg !9841
  %9 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 0, !dbg !9841
  %10 = load i32, i32* %9, align 8, !dbg !9841
  %11 = getelementptr inbounds { i32, %struct.VEC_edge_gc** }, { i32, %struct.VEC_edge_gc** }* %8, i32 0, i32 1, !dbg !9841
  %12 = load %struct.VEC_edge_gc**, %struct.VEC_edge_gc*** %11, align 8, !dbg !9841
  %call1 = call zeroext i8 @ei_cond(i32 %10, %struct.VEC_edge_gc** %12, %struct.edge_def** %e), !dbg !9841
  %tobool = icmp ne i8 %call1, 0, !dbg !9839
  br i1 %tobool, label %for.body, label %for.end, !dbg !9839

for.body:                                         ; preds = %for.cond
  %13 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9843
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %13, i32 0, i32 7, !dbg !9845
  %14 = load i32, i32* %flags, align 8, !dbg !9845
  %and = and i32 %14, 1, !dbg !9846
  %tobool2 = icmp ne i32 %and, 0, !dbg !9846
  br i1 %tobool2, label %if.then, label %if.end, !dbg !9847

if.then:                                          ; preds = %for.body
  br label %for.end, !dbg !9848

if.end:                                           ; preds = %for.body
  br label %for.inc, !dbg !9849

for.inc:                                          ; preds = %if.end
  call void @ei_next(%struct.edge_iterator* %ei), !dbg !9841
  br label %for.cond, !dbg !9841, !llvm.loop !9850

for.end:                                          ; preds = %if.then, %for.cond
  %15 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9852
  %tobool3 = icmp ne %struct.edge_def* %15, null, !dbg !9853
  br i1 %tobool3, label %cond.true, label %cond.false, !dbg !9853

cond.true:                                        ; preds = %for.end
  %16 = load %struct.edge_def*, %struct.edge_def** %e, align 8, !dbg !9854
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %16, i32 0, i32 1, !dbg !9855
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !9855
  br label %cond.end, !dbg !9853

cond.false:                                       ; preds = %for.end
  br label %cond.end, !dbg !9853

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.basic_block_def* [ %17, %cond.true ], [ null, %cond.false ], !dbg !9853
  ret %struct.basic_block_def* %cond, !dbg !9856
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @cond_exec_process_insns(%struct.ce_if_block* %ce_info, %struct.rtx_def* %start, %struct.rtx_def* %end, %struct.rtx_def* %test, %struct.rtx_def* %prob_val, i32 %mod_ok) #0 !dbg !9857 {
entry:
  %retval = alloca i32, align 4
  %ce_info.addr = alloca %struct.ce_if_block*, align 8
  %start.addr = alloca %struct.rtx_def*, align 8
  %end.addr = alloca %struct.rtx_def*, align 8
  %test.addr = alloca %struct.rtx_def*, align 8
  %prob_val.addr = alloca %struct.rtx_def*, align 8
  %mod_ok.addr = alloca i32, align 4
  %must_be_last = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %xtest = alloca %struct.rtx_def*, align 8
  %pattern = alloca %struct.rtx_def*, align 8
  store %struct.ce_if_block* %ce_info, %struct.ce_if_block** %ce_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ce_if_block** %ce_info.addr, metadata !9860, metadata !DIExpression()), !dbg !9861
  store %struct.rtx_def* %start, %struct.rtx_def** %start.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %start.addr, metadata !9862, metadata !DIExpression()), !dbg !9863
  store %struct.rtx_def* %end, %struct.rtx_def** %end.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end.addr, metadata !9864, metadata !DIExpression()), !dbg !9865
  store %struct.rtx_def* %test, %struct.rtx_def** %test.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %test.addr, metadata !9866, metadata !DIExpression()), !dbg !9867
  store %struct.rtx_def* %prob_val, %struct.rtx_def** %prob_val.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prob_val.addr, metadata !9868, metadata !DIExpression()), !dbg !9869
  store i32 %mod_ok, i32* %mod_ok.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %mod_ok.addr, metadata !9870, metadata !DIExpression()), !dbg !9871
  call void @llvm.dbg.declare(metadata i32* %must_be_last, metadata !9872, metadata !DIExpression()), !dbg !9873
  store i32 0, i32* %must_be_last, align 4, !dbg !9873
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !9874, metadata !DIExpression()), !dbg !9875
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %xtest, metadata !9876, metadata !DIExpression()), !dbg !9877
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %pattern, metadata !9878, metadata !DIExpression()), !dbg !9879
  %0 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !9880
  %tobool = icmp ne %struct.rtx_def* %0, null, !dbg !9880
  br i1 %tobool, label %lor.lhs.false, label %if.then, !dbg !9882

lor.lhs.false:                                    ; preds = %entry
  %1 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !9883
  %tobool1 = icmp ne %struct.rtx_def* %1, null, !dbg !9883
  br i1 %tobool1, label %if.end, label %if.then, !dbg !9884

if.then:                                          ; preds = %lor.lhs.false, %entry
  store i32 0, i32* %retval, align 4, !dbg !9885
  br label %return, !dbg !9885

if.end:                                           ; preds = %lor.lhs.false
  %2 = load %struct.rtx_def*, %struct.rtx_def** %start.addr, align 8, !dbg !9886
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !9888
  br label %for.cond, !dbg !9889

for.cond:                                         ; preds = %for.inc, %if.end
  %3 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9890
  %4 = bitcast %struct.rtx_def* %3 to i32*, !dbg !9890
  %bf.load = load i32, i32* %4, align 8, !dbg !9890
  %bf.clear = and i32 %bf.load, 65535, !dbg !9890
  %cmp = icmp eq i32 %bf.clear, 13, !dbg !9890
  br i1 %cmp, label %if.then6, label %lor.lhs.false2, !dbg !9894

lor.lhs.false2:                                   ; preds = %for.cond
  %5 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9895
  %6 = bitcast %struct.rtx_def* %5 to i32*, !dbg !9895
  %bf.load3 = load i32, i32* %6, align 8, !dbg !9895
  %bf.clear4 = and i32 %bf.load3, 65535, !dbg !9895
  %cmp5 = icmp eq i32 %bf.clear4, 7, !dbg !9895
  br i1 %cmp5, label %if.then6, label %if.end7, !dbg !9896

if.then6:                                         ; preds = %lor.lhs.false2, %for.cond
  br label %insn_done, !dbg !9897

if.end7:                                          ; preds = %lor.lhs.false2
  %7 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9898
  %8 = bitcast %struct.rtx_def* %7 to i32*, !dbg !9898
  %bf.load8 = load i32, i32* %8, align 8, !dbg !9898
  %bf.clear9 = and i32 %bf.load8, 65535, !dbg !9898
  %cmp10 = icmp eq i32 %bf.clear9, 8, !dbg !9898
  br i1 %cmp10, label %cond.false, label %lor.lhs.false11, !dbg !9898

lor.lhs.false11:                                  ; preds = %if.end7
  %9 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9898
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !9898
  %bf.load12 = load i32, i32* %10, align 8, !dbg !9898
  %bf.clear13 = and i32 %bf.load12, 65535, !dbg !9898
  %cmp14 = icmp eq i32 %bf.clear13, 10, !dbg !9898
  br i1 %cmp14, label %cond.false, label %cond.true, !dbg !9898

cond.true:                                        ; preds = %lor.lhs.false11
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 273, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !9898
  br label %cond.end, !dbg !9898

cond.false:                                       ; preds = %lor.lhs.false11, %if.end7
  br label %cond.end, !dbg !9898

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 0, %cond.true ], [ 0, %cond.false ], !dbg !9898
  %11 = load i32, i32* @reload_completed, align 4, !dbg !9899
  %tobool15 = icmp ne i32 %11, 0, !dbg !9899
  br i1 %tobool15, label %land.lhs.true, label %if.end20, !dbg !9901

land.lhs.true:                                    ; preds = %cond.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9902
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %12, i32 0, i32 1, !dbg !9902
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !9902
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !9902
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !9902
  %13 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !9902
  %14 = bitcast %struct.rtx_def* %13 to i32*, !dbg !9902
  %bf.load16 = load i32, i32* %14, align 8, !dbg !9902
  %bf.clear17 = and i32 %bf.load16, 65535, !dbg !9902
  %cmp18 = icmp eq i32 %bf.clear17, 24, !dbg !9903
  br i1 %cmp18, label %if.then19, label %if.end20, !dbg !9904

if.then19:                                        ; preds = %land.lhs.true
  %15 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9905
  call void @set_insn_deleted(%struct.rtx_def* %15), !dbg !9905
  br label %insn_done, !dbg !9907

if.end20:                                         ; preds = %land.lhs.true, %cond.end
  %16 = load i32, i32* %must_be_last, align 4, !dbg !9908
  %tobool21 = icmp ne i32 %16, 0, !dbg !9908
  br i1 %tobool21, label %if.then22, label %if.end23, !dbg !9910

if.then22:                                        ; preds = %if.end20
  store i32 0, i32* %retval, align 4, !dbg !9911
  br label %return, !dbg !9911

if.end23:                                         ; preds = %if.end20
  %17 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !9912
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9914
  %call = call i32 @modified_in_p(%struct.rtx_def* %17, %struct.rtx_def* %18), !dbg !9915
  %tobool24 = icmp ne i32 %call, 0, !dbg !9915
  br i1 %tobool24, label %if.then25, label %if.end29, !dbg !9916

if.then25:                                        ; preds = %if.end23
  %19 = load i32, i32* %mod_ok.addr, align 4, !dbg !9917
  %tobool26 = icmp ne i32 %19, 0, !dbg !9917
  br i1 %tobool26, label %if.end28, label %if.then27, !dbg !9920

if.then27:                                        ; preds = %if.then25
  store i32 0, i32* %retval, align 4, !dbg !9921
  br label %return, !dbg !9921

if.end28:                                         ; preds = %if.then25
  store i32 1, i32* %must_be_last, align 4, !dbg !9922
  br label %if.end29, !dbg !9923

if.end29:                                         ; preds = %if.end28, %if.end23
  %20 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9924
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %20, i32 0, i32 1, !dbg !9924
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !9924
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 5, !dbg !9924
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !9924
  %21 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !9924
  store %struct.rtx_def* %21, %struct.rtx_def** %pattern, align 8, !dbg !9925
  %22 = load %struct.rtx_def*, %struct.rtx_def** %test.addr, align 8, !dbg !9926
  %call34 = call %struct.rtx_def* @copy_rtx(%struct.rtx_def* %22), !dbg !9927
  store %struct.rtx_def* %call34, %struct.rtx_def** %xtest, align 8, !dbg !9928
  %23 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9929
  %24 = bitcast %struct.rtx_def* %23 to i32*, !dbg !9929
  %bf.load35 = load i32, i32* %24, align 8, !dbg !9929
  %bf.clear36 = and i32 %bf.load35, 65535, !dbg !9929
  %cmp37 = icmp eq i32 %bf.clear36, 14, !dbg !9931
  br i1 %cmp37, label %if.then38, label %if.end63, !dbg !9932

if.then38:                                        ; preds = %if.end29
  %25 = load %struct.rtx_def*, %struct.rtx_def** %xtest, align 8, !dbg !9933
  %26 = bitcast %struct.rtx_def* %25 to i32*, !dbg !9933
  %bf.load39 = load i32, i32* %26, align 8, !dbg !9933
  %bf.lshr = lshr i32 %bf.load39, 16, !dbg !9933
  %bf.clear40 = and i32 %bf.lshr, 255, !dbg !9933
  %27 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9936
  %u41 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !9936
  %fld42 = bitcast %union.u* %u41 to [1 x %union.rtunion_def]*, !dbg !9936
  %arrayidx43 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld42, i64 0, i64 0, !dbg !9936
  %rt_rtx44 = bitcast %union.rtunion_def* %arrayidx43 to %struct.rtx_def**, !dbg !9936
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx44, align 8, !dbg !9936
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !9936
  %bf.load45 = load i32, i32* %29, align 8, !dbg !9936
  %bf.lshr46 = lshr i32 %bf.load45, 16, !dbg !9936
  %bf.clear47 = and i32 %bf.lshr46, 255, !dbg !9936
  %cmp48 = icmp ne i32 %bf.clear40, %bf.clear47, !dbg !9937
  br i1 %cmp48, label %if.then49, label %if.end50, !dbg !9938

if.then49:                                        ; preds = %if.then38
  store i32 0, i32* %retval, align 4, !dbg !9939
  br label %return, !dbg !9939

if.end50:                                         ; preds = %if.then38
  %30 = load %struct.rtx_def*, %struct.rtx_def** %xtest, align 8, !dbg !9940
  %31 = bitcast %struct.rtx_def* %30 to i32*, !dbg !9940
  %bf.load51 = load i32, i32* %31, align 8, !dbg !9940
  %bf.lshr52 = lshr i32 %bf.load51, 16, !dbg !9940
  %bf.clear53 = and i32 %bf.lshr52, 255, !dbg !9940
  %32 = load %struct.rtx_def*, %struct.rtx_def** %xtest, align 8, !dbg !9940
  %33 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9940
  %u54 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %33, i32 0, i32 1, !dbg !9940
  %fld55 = bitcast %union.u* %u54 to [1 x %union.rtunion_def]*, !dbg !9940
  %arrayidx56 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld55, i64 0, i64 0, !dbg !9940
  %rt_rtx57 = bitcast %union.rtunion_def* %arrayidx56 to %struct.rtx_def**, !dbg !9940
  %34 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx57, align 8, !dbg !9940
  %call58 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 61, i32 %bf.clear53, %struct.rtx_def* %32, %struct.rtx_def* %34), !dbg !9940
  store %struct.rtx_def* %call58, %struct.rtx_def** %xtest, align 8, !dbg !9941
  %35 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9942
  %u59 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %35, i32 0, i32 1, !dbg !9942
  %fld60 = bitcast %union.u* %u59 to [1 x %union.rtunion_def]*, !dbg !9942
  %arrayidx61 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld60, i64 0, i64 1, !dbg !9942
  %rt_rtx62 = bitcast %union.rtunion_def* %arrayidx61 to %struct.rtx_def**, !dbg !9942
  %36 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx62, align 8, !dbg !9942
  store %struct.rtx_def* %36, %struct.rtx_def** %pattern, align 8, !dbg !9943
  br label %if.end63, !dbg !9944

if.end63:                                         ; preds = %if.end50, %if.end29
  %37 = load %struct.rtx_def*, %struct.rtx_def** %xtest, align 8, !dbg !9945
  %38 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9945
  %call64 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 14, i32 0, %struct.rtx_def* %37, %struct.rtx_def* %38), !dbg !9945
  store %struct.rtx_def* %call64, %struct.rtx_def** %pattern, align 8, !dbg !9946
  %39 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9947
  %40 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9948
  %u65 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %40, i32 0, i32 1, !dbg !9948
  %fld66 = bitcast %union.u* %u65 to [1 x %union.rtunion_def]*, !dbg !9948
  %arrayidx67 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld66, i64 0, i64 5, !dbg !9948
  %rt_rtx68 = bitcast %union.rtunion_def* %arrayidx67 to %struct.rtx_def**, !dbg !9948
  %41 = load %struct.rtx_def*, %struct.rtx_def** %pattern, align 8, !dbg !9949
  %call69 = call zeroext i8 @validate_change(%struct.rtx_def* %39, %struct.rtx_def** %rt_rtx68, %struct.rtx_def* %41, i8 zeroext 1), !dbg !9950
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9951
  %43 = bitcast %struct.rtx_def* %42 to i32*, !dbg !9951
  %bf.load70 = load i32, i32* %43, align 8, !dbg !9951
  %bf.clear71 = and i32 %bf.load70, 65535, !dbg !9951
  %cmp72 = icmp eq i32 %bf.clear71, 10, !dbg !9951
  br i1 %cmp72, label %land.lhs.true73, label %if.end86, !dbg !9953

land.lhs.true73:                                  ; preds = %if.end63
  %44 = load %struct.rtx_def*, %struct.rtx_def** %prob_val.addr, align 8, !dbg !9954
  %tobool74 = icmp ne %struct.rtx_def* %44, null, !dbg !9954
  br i1 %tobool74, label %if.then75, label %if.end86, !dbg !9955

if.then75:                                        ; preds = %land.lhs.true73
  %45 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9956
  %46 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9957
  %u76 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !9957
  %fld77 = bitcast %union.u* %u76 to [1 x %union.rtunion_def]*, !dbg !9957
  %arrayidx78 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld77, i64 0, i64 7, !dbg !9957
  %rt_rtx79 = bitcast %union.rtunion_def* %arrayidx78 to %struct.rtx_def**, !dbg !9957
  %47 = load %struct.rtx_def*, %struct.rtx_def** %prob_val.addr, align 8, !dbg !9958
  %48 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9959
  %u80 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %48, i32 0, i32 1, !dbg !9959
  %fld81 = bitcast %union.u* %u80 to [1 x %union.rtunion_def]*, !dbg !9959
  %arrayidx82 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld81, i64 0, i64 7, !dbg !9959
  %rt_rtx83 = bitcast %union.rtunion_def* %arrayidx82 to %struct.rtx_def**, !dbg !9959
  %49 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx83, align 8, !dbg !9959
  %call84 = call %struct.rtx_def* @alloc_EXPR_LIST(i32 13, %struct.rtx_def* %47, %struct.rtx_def* %49), !dbg !9960
  %call85 = call zeroext i8 @validate_change(%struct.rtx_def* %45, %struct.rtx_def** %rt_rtx79, %struct.rtx_def* %call84, i8 zeroext 1), !dbg !9961
  br label %if.end86, !dbg !9961

if.end86:                                         ; preds = %if.then75, %land.lhs.true73, %if.end63
  br label %insn_done, !dbg !9954

insn_done:                                        ; preds = %if.end86, %if.then19, %if.then6
  call void @llvm.dbg.label(metadata !9962), !dbg !9963
  %50 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9964
  %51 = load %struct.rtx_def*, %struct.rtx_def** %end.addr, align 8, !dbg !9966
  %cmp87 = icmp eq %struct.rtx_def* %50, %51, !dbg !9967
  br i1 %cmp87, label %if.then88, label %if.end89, !dbg !9968

if.then88:                                        ; preds = %insn_done
  br label %for.end, !dbg !9969

if.end89:                                         ; preds = %insn_done
  br label %for.inc, !dbg !9970

for.inc:                                          ; preds = %if.end89
  %52 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !9971
  %u90 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !9971
  %fld91 = bitcast %union.u* %u90 to [1 x %union.rtunion_def]*, !dbg !9971
  %arrayidx92 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld91, i64 0, i64 2, !dbg !9971
  %rt_rtx93 = bitcast %union.rtunion_def* %arrayidx92 to %struct.rtx_def**, !dbg !9971
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx93, align 8, !dbg !9971
  store %struct.rtx_def* %53, %struct.rtx_def** %insn, align 8, !dbg !9972
  br label %for.cond, !dbg !9973, !llvm.loop !9974

for.end:                                          ; preds = %if.then88
  store i32 1, i32* %retval, align 4, !dbg !9977
  br label %return, !dbg !9977

return:                                           ; preds = %for.end, %if.then49, %if.then27, %if.then22, %if.then
  %54 = load i32, i32* %retval, align 4, !dbg !9978
  ret i32 %54, !dbg !9978
}

declare dso_local i32 @apply_change_group() #1

; Function Attrs: noinline nounwind uwtable
define internal void @merge_if_block(%struct.ce_if_block* %ce_info) #0 !dbg !9979 {
entry:
  %ce_info.addr = alloca %struct.ce_if_block*, align 8
  %test_bb = alloca %struct.basic_block_def*, align 8
  %then_bb = alloca %struct.basic_block_def*, align 8
  %else_bb = alloca %struct.basic_block_def*, align 8
  %join_bb = alloca %struct.basic_block_def*, align 8
  %combo_bb = alloca %struct.basic_block_def*, align 8
  %bb = alloca %struct.basic_block_def*, align 8
  %last_test_bb = alloca %struct.basic_block_def*, align 8
  %fallthru = alloca %struct.basic_block_def*, align 8
  %last = alloca %struct.rtx_def*, align 8
  store %struct.ce_if_block* %ce_info, %struct.ce_if_block** %ce_info.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.ce_if_block** %ce_info.addr, metadata !9982, metadata !DIExpression()), !dbg !9983
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb, metadata !9984, metadata !DIExpression()), !dbg !9985
  %0 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9986
  %test_bb1 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %0, i32 0, i32 0, !dbg !9987
  %1 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb1, align 8, !dbg !9987
  store %struct.basic_block_def* %1, %struct.basic_block_def** %test_bb, align 8, !dbg !9985
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %then_bb, metadata !9988, metadata !DIExpression()), !dbg !9989
  %2 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9990
  %then_bb2 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %2, i32 0, i32 1, !dbg !9991
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb2, align 8, !dbg !9991
  store %struct.basic_block_def* %3, %struct.basic_block_def** %then_bb, align 8, !dbg !9989
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %else_bb, metadata !9992, metadata !DIExpression()), !dbg !9993
  %4 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9994
  %else_bb3 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %4, i32 0, i32 2, !dbg !9995
  %5 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb3, align 8, !dbg !9995
  store %struct.basic_block_def* %5, %struct.basic_block_def** %else_bb, align 8, !dbg !9993
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %join_bb, metadata !9996, metadata !DIExpression()), !dbg !9997
  %6 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !9998
  %join_bb4 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %6, i32 0, i32 3, !dbg !9999
  %7 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb4, align 8, !dbg !9999
  store %struct.basic_block_def* %7, %struct.basic_block_def** %join_bb, align 8, !dbg !9997
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %combo_bb, metadata !10000, metadata !DIExpression()), !dbg !10001
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !10002
  store %struct.basic_block_def* %8, %struct.basic_block_def** %combo_bb, align 8, !dbg !10003
  %9 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !10004
  call void @df_set_bb_dirty(%struct.basic_block_def* %9), !dbg !10005
  %10 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !10006
  %num_multiple_test_blocks = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %10, i32 0, i32 5, !dbg !10008
  %11 = load i32, i32* %num_multiple_test_blocks, align 8, !dbg !10008
  %cmp = icmp sgt i32 %11, 0, !dbg !10009
  br i1 %cmp, label %if.then, label %if.end, !dbg !10010

if.then:                                          ; preds = %entry
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb, metadata !10011, metadata !DIExpression()), !dbg !10013
  %12 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb, align 8, !dbg !10014
  store %struct.basic_block_def* %12, %struct.basic_block_def** %bb, align 8, !dbg !10013
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %last_test_bb, metadata !10015, metadata !DIExpression()), !dbg !10016
  %13 = load %struct.ce_if_block*, %struct.ce_if_block** %ce_info.addr, align 8, !dbg !10017
  %last_test_bb5 = getelementptr inbounds %struct.ce_if_block, %struct.ce_if_block* %13, i32 0, i32 4, !dbg !10018
  %14 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb5, align 8, !dbg !10018
  store %struct.basic_block_def* %14, %struct.basic_block_def** %last_test_bb, align 8, !dbg !10016
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %fallthru, metadata !10019, metadata !DIExpression()), !dbg !10020
  %15 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10021
  %call = call %struct.basic_block_def* @block_fallthru(%struct.basic_block_def* %15), !dbg !10022
  store %struct.basic_block_def* %call, %struct.basic_block_def** %fallthru, align 8, !dbg !10020
  br label %do.body, !dbg !10023

do.body:                                          ; preds = %do.cond, %if.then
  %16 = load %struct.basic_block_def*, %struct.basic_block_def** %fallthru, align 8, !dbg !10024
  store %struct.basic_block_def* %16, %struct.basic_block_def** %bb, align 8, !dbg !10026
  %17 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10027
  %call6 = call %struct.basic_block_def* @block_fallthru(%struct.basic_block_def* %17), !dbg !10028
  store %struct.basic_block_def* %call6, %struct.basic_block_def** %fallthru, align 8, !dbg !10029
  %18 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10030
  %19 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10031
  call void @merge_blocks(%struct.basic_block_def* %18, %struct.basic_block_def* %19), !dbg !10032
  %20 = load i32, i32* @num_true_changes, align 4, !dbg !10033
  %inc = add nsw i32 %20, 1, !dbg !10033
  store i32 %inc, i32* @num_true_changes, align 4, !dbg !10033
  br label %do.cond, !dbg !10034

do.cond:                                          ; preds = %do.body
  %21 = load %struct.basic_block_def*, %struct.basic_block_def** %bb, align 8, !dbg !10035
  %22 = load %struct.basic_block_def*, %struct.basic_block_def** %last_test_bb, align 8, !dbg !10036
  %cmp7 = icmp ne %struct.basic_block_def* %21, %22, !dbg !10037
  br i1 %cmp7, label %do.body, label %do.end, !dbg !10034, !llvm.loop !10038

do.end:                                           ; preds = %do.cond
  br label %if.end, !dbg !10040

if.end:                                           ; preds = %do.end, %entry
  %23 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !10041
  %tobool = icmp ne %struct.basic_block_def* %23, null, !dbg !10041
  br i1 %tobool, label %if.then8, label %if.end10, !dbg !10043

if.then8:                                         ; preds = %if.end
  %24 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10044
  %25 = load %struct.basic_block_def*, %struct.basic_block_def** %then_bb, align 8, !dbg !10046
  call void @merge_blocks(%struct.basic_block_def* %24, %struct.basic_block_def* %25), !dbg !10047
  %26 = load i32, i32* @num_true_changes, align 4, !dbg !10048
  %inc9 = add nsw i32 %26, 1, !dbg !10048
  store i32 %inc9, i32* @num_true_changes, align 4, !dbg !10048
  br label %if.end10, !dbg !10049

if.end10:                                         ; preds = %if.then8, %if.end
  %27 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !10050
  %tobool11 = icmp ne %struct.basic_block_def* %27, null, !dbg !10050
  br i1 %tobool11, label %if.then12, label %if.end14, !dbg !10052

if.then12:                                        ; preds = %if.end10
  %28 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10053
  %29 = load %struct.basic_block_def*, %struct.basic_block_def** %else_bb, align 8, !dbg !10055
  call void @merge_blocks(%struct.basic_block_def* %28, %struct.basic_block_def* %29), !dbg !10056
  %30 = load i32, i32* @num_true_changes, align 4, !dbg !10057
  %inc13 = add nsw i32 %30, 1, !dbg !10057
  store i32 %inc13, i32* @num_true_changes, align 4, !dbg !10057
  br label %if.end14, !dbg !10058

if.end14:                                         ; preds = %if.then12, %if.end10
  %31 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10059
  %tobool15 = icmp ne %struct.basic_block_def* %31, null, !dbg !10059
  br i1 %tobool15, label %if.else83, label %if.then16, !dbg !10061

if.then16:                                        ; preds = %if.end14
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %last, metadata !10062, metadata !DIExpression()), !dbg !10064
  %32 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10065
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %32, i32 0, i32 7, !dbg !10065
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10065
  %33 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10065
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %33, i32 0, i32 1, !dbg !10065
  %34 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10065
  store %struct.rtx_def* %34, %struct.rtx_def** %last, align 8, !dbg !10064
  %35 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10066
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %35, i32 0, i32 1, !dbg !10066
  %36 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !10066
  %tobool17 = icmp ne %struct.VEC_edge_gc* %36, null, !dbg !10066
  br i1 %tobool17, label %cond.true, label %cond.false, !dbg !10066

cond.true:                                        ; preds = %if.then16
  %37 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10066
  %succs18 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %37, i32 0, i32 1, !dbg !10066
  %38 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs18, align 8, !dbg !10066
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %38, i32 0, i32 0, !dbg !10066
  br label %cond.end, !dbg !10066

cond.false:                                       ; preds = %if.then16
  br label %cond.end, !dbg !10066

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10066
  %call19 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !10066
  %cmp20 = icmp eq i32 %call19, 0, !dbg !10068
  br i1 %cmp20, label %if.then21, label %if.else, !dbg !10069

if.then21:                                        ; preds = %cond.end
  %39 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10070
  %call22 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %39, i32 27, %struct.rtx_def* null), !dbg !10070
  %tobool23 = icmp ne %struct.rtx_def* %call22, null, !dbg !10070
  br i1 %tobool23, label %cond.false39, label %lor.lhs.false, !dbg !10070

lor.lhs.false:                                    ; preds = %if.then21
  %40 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10070
  %41 = bitcast %struct.rtx_def* %40 to i32*, !dbg !10070
  %bf.load = load i32, i32* %41, align 8, !dbg !10070
  %bf.clear = and i32 %bf.load, 65535, !dbg !10070
  %cmp24 = icmp eq i32 %bf.clear, 8, !dbg !10070
  br i1 %cmp24, label %land.lhs.true, label %cond.true38, !dbg !10070

land.lhs.true:                                    ; preds = %lor.lhs.false
  %42 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10070
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !10070
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10070
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10070
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10070
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10070
  %44 = bitcast %struct.rtx_def* %43 to i32*, !dbg !10070
  %bf.load25 = load i32, i32* %44, align 8, !dbg !10070
  %bf.clear26 = and i32 %bf.load25, 65535, !dbg !10070
  %cmp27 = icmp eq i32 %bf.clear26, 29, !dbg !10070
  br i1 %cmp27, label %land.lhs.true28, label %cond.true38, !dbg !10070

land.lhs.true28:                                  ; preds = %land.lhs.true
  %45 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10070
  %u29 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !10070
  %fld30 = bitcast %union.u* %u29 to [1 x %union.rtunion_def]*, !dbg !10070
  %arrayidx31 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld30, i64 0, i64 5, !dbg !10070
  %rt_rtx32 = bitcast %union.rtunion_def* %arrayidx31 to %struct.rtx_def**, !dbg !10070
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx32, align 8, !dbg !10070
  %u33 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %46, i32 0, i32 1, !dbg !10070
  %fld34 = bitcast %union.u* %u33 to [1 x %union.rtunion_def]*, !dbg !10070
  %arrayidx35 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld34, i64 0, i64 0, !dbg !10070
  %rt_rtx36 = bitcast %union.rtunion_def* %arrayidx35 to %struct.rtx_def**, !dbg !10070
  %47 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx36, align 8, !dbg !10070
  %48 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !10070
  %cmp37 = icmp eq %struct.rtx_def* %47, %48, !dbg !10070
  br i1 %cmp37, label %cond.false39, label %cond.true38, !dbg !10070

cond.true38:                                      ; preds = %land.lhs.true28, %land.lhs.true, %lor.lhs.false
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2966, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !10070
  br label %cond.end40, !dbg !10070

cond.false39:                                     ; preds = %land.lhs.true28, %if.then21
  br label %cond.end40, !dbg !10070

cond.end40:                                       ; preds = %cond.false39, %cond.true38
  %cond41 = phi i32 [ 0, %cond.true38 ], [ 0, %cond.false39 ], !dbg !10070
  br label %if.end82, !dbg !10070

if.else:                                          ; preds = %cond.end
  %49 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10071
  %50 = bitcast %struct.rtx_def* %49 to i32*, !dbg !10071
  %bf.load42 = load i32, i32* %50, align 8, !dbg !10071
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !10071
  %cmp44 = icmp eq i32 %bf.clear43, 9, !dbg !10071
  br i1 %cmp44, label %cond.false79, label %lor.lhs.false45, !dbg !10071

lor.lhs.false45:                                  ; preds = %if.else
  %51 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10071
  %succs46 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %51, i32 0, i32 1, !dbg !10071
  %52 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs46, align 8, !dbg !10071
  %tobool47 = icmp ne %struct.VEC_edge_gc* %52, null, !dbg !10071
  br i1 %tobool47, label %cond.true48, label %cond.false51, !dbg !10071

cond.true48:                                      ; preds = %lor.lhs.false45
  %53 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10071
  %succs49 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %53, i32 0, i32 1, !dbg !10071
  %54 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs49, align 8, !dbg !10071
  %base50 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %54, i32 0, i32 0, !dbg !10071
  br label %cond.end52, !dbg !10071

cond.false51:                                     ; preds = %lor.lhs.false45
  br label %cond.end52, !dbg !10071

cond.end52:                                       ; preds = %cond.false51, %cond.true48
  %cond53 = phi %struct.VEC_edge_base* [ %base50, %cond.true48 ], [ null, %cond.false51 ], !dbg !10071
  %call54 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond53, i32 0), !dbg !10071
  %dest = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call54, i32 0, i32 1, !dbg !10071
  %55 = load %struct.basic_block_def*, %struct.basic_block_def** %dest, align 8, !dbg !10071
  %56 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10071
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %56, i64 0, !dbg !10071
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10071
  %57 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10071
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %57, i32 0, i32 1, !dbg !10071
  %58 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10071
  %cmp55 = icmp eq %struct.basic_block_def* %55, %58, !dbg !10071
  br i1 %cmp55, label %land.lhs.true56, label %lor.lhs.false64, !dbg !10071

land.lhs.true56:                                  ; preds = %cond.end52
  %59 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10071
  %60 = bitcast %struct.rtx_def* %59 to i32*, !dbg !10071
  %bf.load57 = load i32, i32* %60, align 8, !dbg !10071
  %bf.clear58 = and i32 %bf.load57, 65535, !dbg !10071
  %cmp59 = icmp eq i32 %bf.clear58, 10, !dbg !10071
  br i1 %cmp59, label %land.lhs.true60, label %lor.lhs.false64, !dbg !10071

land.lhs.true60:                                  ; preds = %land.lhs.true56
  %61 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10071
  %62 = bitcast %struct.rtx_def* %61 to i32*, !dbg !10071
  %bf.load61 = load i32, i32* %62, align 8, !dbg !10071
  %bf.lshr = lshr i32 %bf.load61, 24, !dbg !10071
  %bf.clear62 = and i32 %bf.lshr, 1, !dbg !10071
  %tobool63 = icmp ne i32 %bf.clear62, 0, !dbg !10071
  br i1 %tobool63, label %cond.false79, label %lor.lhs.false64, !dbg !10071

lor.lhs.false64:                                  ; preds = %land.lhs.true60, %land.lhs.true56, %cond.end52
  %63 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10071
  %succs65 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %63, i32 0, i32 1, !dbg !10071
  %64 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs65, align 8, !dbg !10071
  %tobool66 = icmp ne %struct.VEC_edge_gc* %64, null, !dbg !10071
  br i1 %tobool66, label %cond.true67, label %cond.false70, !dbg !10071

cond.true67:                                      ; preds = %lor.lhs.false64
  %65 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10071
  %succs68 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %65, i32 0, i32 1, !dbg !10071
  %66 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs68, align 8, !dbg !10071
  %base69 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %66, i32 0, i32 0, !dbg !10071
  br label %cond.end71, !dbg !10071

cond.false70:                                     ; preds = %lor.lhs.false64
  br label %cond.end71, !dbg !10071

cond.end71:                                       ; preds = %cond.false70, %cond.true67
  %cond72 = phi %struct.VEC_edge_base* [ %base69, %cond.true67 ], [ null, %cond.false70 ], !dbg !10071
  %call73 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond72, i32 0), !dbg !10071
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call73, i32 0, i32 7, !dbg !10071
  %67 = load i32, i32* %flags, align 8, !dbg !10071
  %and = and i32 %67, 8, !dbg !10071
  %tobool74 = icmp ne i32 %and, 0, !dbg !10071
  br i1 %tobool74, label %land.lhs.true75, label %cond.true78, !dbg !10071

land.lhs.true75:                                  ; preds = %cond.end71
  %68 = load %struct.rtx_def*, %struct.rtx_def** %last, align 8, !dbg !10071
  %call76 = call zeroext i8 @can_throw_internal(%struct.rtx_def* %68), !dbg !10071
  %conv = zext i8 %call76 to i32, !dbg !10071
  %tobool77 = icmp ne i32 %conv, 0, !dbg !10071
  br i1 %tobool77, label %cond.false79, label %cond.true78, !dbg !10071

cond.true78:                                      ; preds = %land.lhs.true75, %cond.end71
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 2976, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !10071
  br label %cond.end80, !dbg !10071

cond.false79:                                     ; preds = %land.lhs.true75, %land.lhs.true60, %if.else
  br label %cond.end80, !dbg !10071

cond.end80:                                       ; preds = %cond.false79, %cond.true78
  %cond81 = phi i32 [ 0, %cond.true78 ], [ 0, %cond.false79 ], !dbg !10071
  br label %if.end82

if.end82:                                         ; preds = %cond.end80, %cond.end40
  br label %if.end123, !dbg !10072

if.else83:                                        ; preds = %if.end14
  %69 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10073
  %preds = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %69, i32 0, i32 0, !dbg !10073
  %70 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds, align 8, !dbg !10073
  %tobool84 = icmp ne %struct.VEC_edge_gc* %70, null, !dbg !10073
  br i1 %tobool84, label %cond.true85, label %cond.false88, !dbg !10073

cond.true85:                                      ; preds = %if.else83
  %71 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10073
  %preds86 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %71, i32 0, i32 0, !dbg !10073
  %72 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %preds86, align 8, !dbg !10073
  %base87 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %72, i32 0, i32 0, !dbg !10073
  br label %cond.end89, !dbg !10073

cond.false88:                                     ; preds = %if.else83
  br label %cond.end89, !dbg !10073

cond.end89:                                       ; preds = %cond.false88, %cond.true85
  %cond90 = phi %struct.VEC_edge_base* [ %base87, %cond.true85 ], [ null, %cond.false88 ], !dbg !10073
  %call91 = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond90), !dbg !10073
  %cmp92 = icmp ult i32 %call91, 2, !dbg !10075
  br i1 %cmp92, label %land.lhs.true94, label %if.else102, !dbg !10076

land.lhs.true94:                                  ; preds = %cond.end89
  %73 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10077
  %74 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10078
  %add.ptr95 = getelementptr inbounds %struct.function, %struct.function* %74, i64 0, !dbg !10078
  %cfg96 = getelementptr inbounds %struct.function, %struct.function* %add.ptr95, i32 0, i32 1, !dbg !10078
  %75 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg96, align 8, !dbg !10078
  %x_exit_block_ptr97 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %75, i32 0, i32 1, !dbg !10078
  %76 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr97, align 8, !dbg !10078
  %cmp98 = icmp ne %struct.basic_block_def* %73, %76, !dbg !10079
  br i1 %cmp98, label %if.then100, label %if.else102, !dbg !10080

if.then100:                                       ; preds = %land.lhs.true94
  %77 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10081
  %78 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10083
  call void @merge_blocks(%struct.basic_block_def* %77, %struct.basic_block_def* %78), !dbg !10084
  %79 = load i32, i32* @num_true_changes, align 4, !dbg !10085
  %inc101 = add nsw i32 %79, 1, !dbg !10085
  store i32 %inc101, i32* @num_true_changes, align 4, !dbg !10085
  br label %if.end122, !dbg !10086

if.else102:                                       ; preds = %land.lhs.true94, %cond.end89
  %80 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10087
  %call103 = call zeroext i8 @single_succ_p(%struct.basic_block_def* %80), !dbg !10087
  %conv104 = zext i8 %call103 to i32, !dbg !10087
  %tobool105 = icmp ne i32 %conv104, 0, !dbg !10087
  br i1 %tobool105, label %land.lhs.true106, label %cond.true110, !dbg !10087

land.lhs.true106:                                 ; preds = %if.else102
  %81 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10087
  %call107 = call %struct.basic_block_def* @single_succ(%struct.basic_block_def* %81), !dbg !10087
  %82 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10087
  %cmp108 = icmp eq %struct.basic_block_def* %call107, %82, !dbg !10087
  br i1 %cmp108, label %cond.false111, label %cond.true110, !dbg !10087

cond.true110:                                     ; preds = %land.lhs.true106, %if.else102
  call void @fancy_abort(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 3000, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0)), !dbg !10087
  br label %cond.end112, !dbg !10087

cond.false111:                                    ; preds = %land.lhs.true106
  br label %cond.end112, !dbg !10087

cond.end112:                                      ; preds = %cond.false111, %cond.true110
  %cond113 = phi i32 [ 0, %cond.true110 ], [ 0, %cond.false111 ], !dbg !10087
  %83 = load %struct.basic_block_def*, %struct.basic_block_def** %join_bb, align 8, !dbg !10089
  %84 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10091
  %add.ptr114 = getelementptr inbounds %struct.function, %struct.function* %84, i64 0, !dbg !10091
  %cfg115 = getelementptr inbounds %struct.function, %struct.function* %add.ptr114, i32 0, i32 1, !dbg !10091
  %85 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg115, align 8, !dbg !10091
  %x_exit_block_ptr116 = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %85, i32 0, i32 1, !dbg !10091
  %86 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr116, align 8, !dbg !10091
  %cmp117 = icmp ne %struct.basic_block_def* %83, %86, !dbg !10092
  br i1 %cmp117, label %if.then119, label %if.end121, !dbg !10093

if.then119:                                       ; preds = %cond.end112
  %87 = load %struct.basic_block_def*, %struct.basic_block_def** %combo_bb, align 8, !dbg !10094
  %call120 = call %struct.edge_def* @single_succ_edge(%struct.basic_block_def* %87), !dbg !10095
  call void @tidy_fallthru_edge(%struct.edge_def* %call120), !dbg !10096
  br label %if.end121, !dbg !10096

if.end121:                                        ; preds = %if.then119, %cond.end112
  br label %if.end122

if.end122:                                        ; preds = %if.end121, %if.then100
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.end82
  %88 = load i32, i32* @num_updated_if_blocks, align 4, !dbg !10097
  %inc124 = add nsw i32 %88, 1, !dbg !10097
  store i32 %inc124, i32* @num_updated_if_blocks, align 4, !dbg !10097
  ret void, !dbg !10098
}

declare dso_local void @set_insn_deleted(%struct.rtx_def*) #1

declare dso_local zeroext i8 @validate_change(%struct.rtx_def*, %struct.rtx_def**, %struct.rtx_def*, i8 zeroext) #1

declare dso_local %struct.rtx_def* @alloc_EXPR_LIST(i32, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local void @df_set_bb_dirty(%struct.basic_block_def*) #1

declare dso_local zeroext i8 @can_throw_internal(%struct.rtx_def*) #1

declare dso_local void @tidy_fallthru_edge(%struct.edge_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal %struct.rtx_def* @block_has_only_trap(%struct.basic_block_def* %bb) #0 !dbg !10099 {
entry:
  %retval = alloca %struct.rtx_def*, align 8
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %trap = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10100, metadata !DIExpression()), !dbg !10101
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %trap, metadata !10102, metadata !DIExpression()), !dbg !10103
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10104
  %1 = load %struct.function*, %struct.function** @cfun, align 8, !dbg !10106
  %add.ptr = getelementptr inbounds %struct.function, %struct.function* %1, i64 0, !dbg !10106
  %cfg = getelementptr inbounds %struct.function, %struct.function* %add.ptr, i32 0, i32 1, !dbg !10106
  %2 = load %struct.control_flow_graph*, %struct.control_flow_graph** %cfg, align 8, !dbg !10106
  %x_exit_block_ptr = getelementptr inbounds %struct.control_flow_graph, %struct.control_flow_graph* %2, i32 0, i32 1, !dbg !10106
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %x_exit_block_ptr, align 8, !dbg !10106
  %cmp = icmp eq %struct.basic_block_def* %0, %3, !dbg !10107
  br i1 %cmp, label %if.then, label %if.end, !dbg !10108

if.then:                                          ; preds = %entry
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10109
  br label %return, !dbg !10109

if.end:                                           ; preds = %entry
  %4 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10110
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %4, i32 0, i32 1, !dbg !10110
  %5 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !10110
  %tobool = icmp ne %struct.VEC_edge_gc* %5, null, !dbg !10110
  br i1 %tobool, label %cond.true, label %cond.false, !dbg !10110

cond.true:                                        ; preds = %if.end
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10110
  %succs1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 1, !dbg !10110
  %7 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs1, align 8, !dbg !10110
  %base = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %7, i32 0, i32 0, !dbg !10110
  br label %cond.end, !dbg !10110

cond.false:                                       ; preds = %if.end
  br label %cond.end, !dbg !10110

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi %struct.VEC_edge_base* [ %base, %cond.true ], [ null, %cond.false ], !dbg !10110
  %call = call i32 @VEC_edge_base_length(%struct.VEC_edge_base* %cond), !dbg !10110
  %cmp2 = icmp ugt i32 %call, 0, !dbg !10112
  br i1 %cmp2, label %if.then3, label %if.end4, !dbg !10113

if.then3:                                         ; preds = %cond.end
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10114
  br label %return, !dbg !10114

if.end4:                                          ; preds = %cond.end
  %8 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10115
  %call5 = call %struct.rtx_def* @first_active_insn(%struct.basic_block_def* %8), !dbg !10116
  store %struct.rtx_def* %call5, %struct.rtx_def** %trap, align 8, !dbg !10117
  %9 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !10118
  %10 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10120
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %10, i32 0, i32 7, !dbg !10120
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10120
  %11 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10120
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %11, i32 0, i32 1, !dbg !10120
  %12 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10120
  %cmp6 = icmp eq %struct.rtx_def* %9, %12, !dbg !10121
  br i1 %cmp6, label %land.lhs.true, label %if.then18, !dbg !10122

land.lhs.true:                                    ; preds = %if.end4
  %13 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !10123
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %13, i32 0, i32 1, !dbg !10123
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10123
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10123
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10123
  %14 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10123
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !10123
  %bf.load = load i32, i32* %15, align 8, !dbg !10123
  %bf.clear = and i32 %bf.load, 65535, !dbg !10123
  %cmp7 = icmp eq i32 %bf.clear, 29, !dbg !10124
  br i1 %cmp7, label %land.lhs.true8, label %if.then18, !dbg !10125

land.lhs.true8:                                   ; preds = %land.lhs.true
  %16 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !10126
  %u9 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %16, i32 0, i32 1, !dbg !10126
  %fld10 = bitcast %union.u* %u9 to [1 x %union.rtunion_def]*, !dbg !10126
  %arrayidx11 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld10, i64 0, i64 5, !dbg !10126
  %rt_rtx12 = bitcast %union.rtunion_def* %arrayidx11 to %struct.rtx_def**, !dbg !10126
  %17 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx12, align 8, !dbg !10126
  %u13 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %17, i32 0, i32 1, !dbg !10126
  %fld14 = bitcast %union.u* %u13 to [1 x %union.rtunion_def]*, !dbg !10126
  %arrayidx15 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld14, i64 0, i64 0, !dbg !10126
  %rt_rtx16 = bitcast %union.rtunion_def* %arrayidx15 to %struct.rtx_def**, !dbg !10126
  %18 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx16, align 8, !dbg !10126
  %19 = load %struct.rtx_def*, %struct.rtx_def** @const_true_rtx, align 8, !dbg !10127
  %cmp17 = icmp eq %struct.rtx_def* %18, %19, !dbg !10128
  br i1 %cmp17, label %if.end19, label %if.then18, !dbg !10129

if.then18:                                        ; preds = %land.lhs.true8, %land.lhs.true, %if.end4
  store %struct.rtx_def* null, %struct.rtx_def** %retval, align 8, !dbg !10130
  br label %return, !dbg !10130

if.end19:                                         ; preds = %land.lhs.true8
  %20 = load %struct.rtx_def*, %struct.rtx_def** %trap, align 8, !dbg !10131
  store %struct.rtx_def* %20, %struct.rtx_def** %retval, align 8, !dbg !10132
  br label %return, !dbg !10132

return:                                           ; preds = %if.end19, %if.then18, %if.then3, %if.then
  %21 = load %struct.rtx_def*, %struct.rtx_def** %retval, align 8, !dbg !10133
  ret %struct.rtx_def* %21, !dbg !10133
}

declare dso_local %struct.rtx_def* @gen_cond_trap(i32, %struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @current_ir_type() #1

declare dso_local %struct.rtx_def* @emit_jump_insn_after(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @gen_jump(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @emit_barrier_after(%struct.rtx_def*) #1

declare dso_local %struct.rtx_def* @delete_insn(%struct.rtx_def*) #1

declare dso_local zeroext i8 @forwarder_block_p(%struct.basic_block_def*) #1

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @cheap_bb_rtx_cost_p(%struct.basic_block_def* %bb, i32 %max_cost) #0 !dbg !10134 {
entry:
  %retval = alloca i8, align 1
  %bb.addr = alloca %struct.basic_block_def*, align 8
  %max_cost.addr = alloca i32, align 4
  %count = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %speed = alloca i8, align 1
  %cost = alloca i32, align 4
  %set = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %bb, %struct.basic_block_def** %bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %bb.addr, metadata !10137, metadata !DIExpression()), !dbg !10138
  store i32 %max_cost, i32* %max_cost.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %max_cost.addr, metadata !10139, metadata !DIExpression()), !dbg !10140
  call void @llvm.dbg.declare(metadata i32* %count, metadata !10141, metadata !DIExpression()), !dbg !10142
  store i32 0, i32* %count, align 4, !dbg !10142
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10143, metadata !DIExpression()), !dbg !10144
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10145
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !10145
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10145
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10145
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 0, !dbg !10145
  %2 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !10145
  store %struct.rtx_def* %2, %struct.rtx_def** %insn, align 8, !dbg !10144
  call void @llvm.dbg.declare(metadata i8* %speed, metadata !10146, metadata !DIExpression()), !dbg !10147
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10148
  %call = call zeroext i8 @optimize_bb_for_speed_p(%struct.basic_block_def* %3), !dbg !10149
  store i8 %call, i8* %speed, align 1, !dbg !10147
  br label %while.body, !dbg !10150

while.body:                                       ; preds = %entry, %if.end71
  %4 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10151
  %5 = bitcast %struct.rtx_def* %4 to i32*, !dbg !10151
  %bf.load = load i32, i32* %5, align 8, !dbg !10151
  %bf.clear = and i32 %bf.load, 65535, !dbg !10151
  %cmp = icmp eq i32 %bf.clear, 8, !dbg !10151
  br i1 %cmp, label %if.then, label %if.else, !dbg !10154

if.then:                                          ; preds = %while.body
  call void @llvm.dbg.declare(metadata i32* %cost, metadata !10155, metadata !DIExpression()), !dbg !10157
  %6 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10158
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %6, i32 0, i32 1, !dbg !10158
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10158
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 5, !dbg !10158
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10158
  %7 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10158
  %8 = load i8, i8* %speed, align 1, !dbg !10159
  %call1 = call i32 @insn_rtx_cost(%struct.rtx_def* %7, i8 zeroext %8), !dbg !10160
  store i32 %call1, i32* %cost, align 4, !dbg !10157
  %9 = load i32, i32* %cost, align 4, !dbg !10161
  %cmp2 = icmp eq i32 %9, 0, !dbg !10163
  br i1 %cmp2, label %if.then3, label %if.end, !dbg !10164

if.then3:                                         ; preds = %if.then
  store i8 0, i8* %retval, align 1, !dbg !10165
  br label %return, !dbg !10165

if.end:                                           ; preds = %if.then
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10166, metadata !DIExpression()), !dbg !10168
  %10 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %11 = bitcast %struct.rtx_def* %10 to i32*, !dbg !10169
  %bf.load4 = load i32, i32* %11, align 8, !dbg !10169
  %bf.clear5 = and i32 %bf.load4, 65535, !dbg !10169
  %cmp6 = icmp eq i32 %bf.clear5, 8, !dbg !10169
  br i1 %cmp6, label %cond.true, label %lor.lhs.false, !dbg !10169

lor.lhs.false:                                    ; preds = %if.end
  %12 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %13 = bitcast %struct.rtx_def* %12 to i32*, !dbg !10169
  %bf.load7 = load i32, i32* %13, align 8, !dbg !10169
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !10169
  %cmp9 = icmp eq i32 %bf.clear8, 7, !dbg !10169
  br i1 %cmp9, label %cond.true, label %lor.lhs.false10, !dbg !10169

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %14 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %15 = bitcast %struct.rtx_def* %14 to i32*, !dbg !10169
  %bf.load11 = load i32, i32* %15, align 8, !dbg !10169
  %bf.clear12 = and i32 %bf.load11, 65535, !dbg !10169
  %cmp13 = icmp eq i32 %bf.clear12, 9, !dbg !10169
  br i1 %cmp13, label %cond.true, label %lor.lhs.false14, !dbg !10169

lor.lhs.false14:                                  ; preds = %lor.lhs.false10
  %16 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %17 = bitcast %struct.rtx_def* %16 to i32*, !dbg !10169
  %bf.load15 = load i32, i32* %17, align 8, !dbg !10169
  %bf.clear16 = and i32 %bf.load15, 65535, !dbg !10169
  %cmp17 = icmp eq i32 %bf.clear16, 10, !dbg !10169
  br i1 %cmp17, label %cond.true, label %cond.false35, !dbg !10169

cond.true:                                        ; preds = %lor.lhs.false14, %lor.lhs.false10, %lor.lhs.false, %if.end
  %18 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %u18 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %18, i32 0, i32 1, !dbg !10169
  %fld19 = bitcast %union.u* %u18 to [1 x %union.rtunion_def]*, !dbg !10169
  %arrayidx20 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld19, i64 0, i64 5, !dbg !10169
  %rt_rtx21 = bitcast %union.rtunion_def* %arrayidx20 to %struct.rtx_def**, !dbg !10169
  %19 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx21, align 8, !dbg !10169
  %20 = bitcast %struct.rtx_def* %19 to i32*, !dbg !10169
  %bf.load22 = load i32, i32* %20, align 8, !dbg !10169
  %bf.clear23 = and i32 %bf.load22, 65535, !dbg !10169
  %cmp24 = icmp eq i32 %bf.clear23, 23, !dbg !10169
  br i1 %cmp24, label %cond.true25, label %cond.false, !dbg !10169

cond.true25:                                      ; preds = %cond.true
  %21 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %u26 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %21, i32 0, i32 1, !dbg !10169
  %fld27 = bitcast %union.u* %u26 to [1 x %union.rtunion_def]*, !dbg !10169
  %arrayidx28 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld27, i64 0, i64 5, !dbg !10169
  %rt_rtx29 = bitcast %union.rtunion_def* %arrayidx28 to %struct.rtx_def**, !dbg !10169
  %22 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx29, align 8, !dbg !10169
  br label %cond.end, !dbg !10169

cond.false:                                       ; preds = %cond.true
  %23 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %24 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10169
  %u30 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %24, i32 0, i32 1, !dbg !10169
  %fld31 = bitcast %union.u* %u30 to [1 x %union.rtunion_def]*, !dbg !10169
  %arrayidx32 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld31, i64 0, i64 5, !dbg !10169
  %rt_rtx33 = bitcast %union.rtunion_def* %arrayidx32 to %struct.rtx_def**, !dbg !10169
  %25 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx33, align 8, !dbg !10169
  %call34 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %23, %struct.rtx_def* %25), !dbg !10169
  br label %cond.end, !dbg !10169

cond.end:                                         ; preds = %cond.false, %cond.true25
  %cond = phi %struct.rtx_def* [ %22, %cond.true25 ], [ %call34, %cond.false ], !dbg !10169
  br label %cond.end36, !dbg !10169

cond.false35:                                     ; preds = %lor.lhs.false14
  br label %cond.end36, !dbg !10169

cond.end36:                                       ; preds = %cond.false35, %cond.end
  %cond37 = phi %struct.rtx_def* [ %cond, %cond.end ], [ null, %cond.false35 ], !dbg !10169
  store %struct.rtx_def* %cond37, %struct.rtx_def** %set, align 8, !dbg !10168
  %26 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10170
  %tobool = icmp ne %struct.rtx_def* %26, null, !dbg !10170
  br i1 %tobool, label %land.lhs.true, label %if.end54, !dbg !10172

land.lhs.true:                                    ; preds = %cond.end36
  %27 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10173
  %u38 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %27, i32 0, i32 1, !dbg !10173
  %fld39 = bitcast %union.u* %u38 to [1 x %union.rtunion_def]*, !dbg !10173
  %arrayidx40 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld39, i64 0, i64 0, !dbg !10173
  %rt_rtx41 = bitcast %union.rtunion_def* %arrayidx40 to %struct.rtx_def**, !dbg !10173
  %28 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx41, align 8, !dbg !10173
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !10173
  %bf.load42 = load i32, i32* %29, align 8, !dbg !10173
  %bf.clear43 = and i32 %bf.load42, 65535, !dbg !10173
  %cmp44 = icmp eq i32 %bf.clear43, 37, !dbg !10173
  br i1 %cmp44, label %land.lhs.true45, label %if.end54, !dbg !10173

land.lhs.true45:                                  ; preds = %land.lhs.true
  %30 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10173
  %u46 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %30, i32 0, i32 1, !dbg !10173
  %fld47 = bitcast %union.u* %u46 to [1 x %union.rtunion_def]*, !dbg !10173
  %arrayidx48 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld47, i64 0, i64 0, !dbg !10173
  %rt_rtx49 = bitcast %union.rtunion_def* %arrayidx48 to %struct.rtx_def**, !dbg !10173
  %31 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx49, align 8, !dbg !10173
  %call50 = call i32 @rhs_regno(%struct.rtx_def* %31), !dbg !10173
  %conv = zext i32 %call50 to i64, !dbg !10173
  %sub = sub i64 %conv, 8, !dbg !10173
  %cmp51 = icmp ule i64 %sub, 7, !dbg !10173
  br i1 %cmp51, label %if.then53, label %if.end54, !dbg !10174

if.then53:                                        ; preds = %land.lhs.true45
  store i8 0, i8* %retval, align 1, !dbg !10175
  br label %return, !dbg !10175

if.end54:                                         ; preds = %land.lhs.true45, %land.lhs.true, %cond.end36
  %32 = load i32, i32* %cost, align 4, !dbg !10176
  %33 = load i32, i32* %count, align 4, !dbg !10177
  %add = add nsw i32 %33, %32, !dbg !10177
  store i32 %add, i32* %count, align 4, !dbg !10177
  %34 = load i32, i32* %count, align 4, !dbg !10178
  %35 = load i32, i32* %max_cost.addr, align 4, !dbg !10180
  %cmp55 = icmp sge i32 %34, %35, !dbg !10181
  br i1 %cmp55, label %if.then57, label %if.end58, !dbg !10182

if.then57:                                        ; preds = %if.end54
  store i8 0, i8* %retval, align 1, !dbg !10183
  br label %return, !dbg !10183

if.end58:                                         ; preds = %if.end54
  br label %if.end65, !dbg !10184

if.else:                                          ; preds = %while.body
  %36 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10185
  %37 = bitcast %struct.rtx_def* %36 to i32*, !dbg !10185
  %bf.load59 = load i32, i32* %37, align 8, !dbg !10185
  %bf.clear60 = and i32 %bf.load59, 65535, !dbg !10185
  %cmp61 = icmp eq i32 %bf.clear60, 10, !dbg !10185
  br i1 %cmp61, label %if.then63, label %if.end64, !dbg !10187

if.then63:                                        ; preds = %if.else
  store i8 0, i8* %retval, align 1, !dbg !10188
  br label %return, !dbg !10188

if.end64:                                         ; preds = %if.else
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.end58
  %38 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10189
  %39 = load %struct.basic_block_def*, %struct.basic_block_def** %bb.addr, align 8, !dbg !10191
  %il66 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %39, i32 0, i32 7, !dbg !10191
  %rtl67 = bitcast %union.basic_block_il_dependent* %il66 to %struct.rtl_bb_info**, !dbg !10191
  %40 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl67, align 8, !dbg !10191
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %40, i32 0, i32 1, !dbg !10191
  %41 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10191
  %cmp68 = icmp eq %struct.rtx_def* %38, %41, !dbg !10192
  br i1 %cmp68, label %if.then70, label %if.end71, !dbg !10193

if.then70:                                        ; preds = %if.end65
  br label %while.end, !dbg !10194

if.end71:                                         ; preds = %if.end65
  %42 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10195
  %u72 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %42, i32 0, i32 1, !dbg !10195
  %fld73 = bitcast %union.u* %u72 to [1 x %union.rtunion_def]*, !dbg !10195
  %arrayidx74 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld73, i64 0, i64 2, !dbg !10195
  %rt_rtx75 = bitcast %union.rtunion_def* %arrayidx74 to %struct.rtx_def**, !dbg !10195
  %43 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx75, align 8, !dbg !10195
  store %struct.rtx_def* %43, %struct.rtx_def** %insn, align 8, !dbg !10196
  br label %while.body, !dbg !10150, !llvm.loop !10197

while.end:                                        ; preds = %if.then70
  store i8 1, i8* %retval, align 1, !dbg !10199
  br label %return, !dbg !10199

return:                                           ; preds = %while.end, %if.then63, %if.then57, %if.then53, %if.then3
  %44 = load i8, i8* %retval, align 1, !dbg !10200
  ret i8 %44, !dbg !10200
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @dead_or_predicable(%struct.basic_block_def* %test_bb, %struct.basic_block_def* %merge_bb, %struct.basic_block_def* %other_bb, %struct.basic_block_def* %new_dest, i32 %reversep) #0 !dbg !10201 {
entry:
  %retval = alloca i32, align 4
  %test_bb.addr = alloca %struct.basic_block_def*, align 8
  %merge_bb.addr = alloca %struct.basic_block_def*, align 8
  %other_bb.addr = alloca %struct.basic_block_def*, align 8
  %new_dest.addr = alloca %struct.basic_block_def*, align 8
  %reversep.addr = alloca i32, align 4
  %head = alloca %struct.rtx_def*, align 8
  %end = alloca %struct.rtx_def*, align 8
  %jump = alloca %struct.rtx_def*, align 8
  %earliest = alloca %struct.rtx_def*, align 8
  %old_dest = alloca %struct.rtx_def*, align 8
  %new_label = alloca %struct.rtx_def*, align 8
  %n_validated_changes = alloca i32, align 4
  %cond = alloca %struct.rtx_def*, align 8
  %prob_val = alloca %struct.rtx_def*, align 8
  %rev = alloca i32, align 4
  %insn = alloca %struct.rtx_def*, align 8
  %cond128 = alloca %struct.rtx_def*, align 8
  %prev = alloca %struct.rtx_def*, align 8
  %merge_set = alloca %struct.bitmap_head_def*, align 8
  %test_live = alloca %struct.bitmap_head_def*, align 8
  %test_set = alloca %struct.bitmap_head_def*, align 8
  %i = alloca i32, align 4
  %fail = alloca i32, align 4
  %bi = alloca %struct.bitmap_iterator, align 8
  %uid = alloca i32, align 4
  %def_rec = alloca %union.df_ref_d**, align 8
  %def = alloca %union.df_ref_d*, align 8
  %count = alloca i64, align 8
  %probability = alloca i64, align 8
  %insn653 = alloca %struct.rtx_def*, align 8
  %note = alloca %struct.rtx_def*, align 8
  %set = alloca %struct.rtx_def*, align 8
  store %struct.basic_block_def* %test_bb, %struct.basic_block_def** %test_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %test_bb.addr, metadata !10204, metadata !DIExpression()), !dbg !10205
  store %struct.basic_block_def* %merge_bb, %struct.basic_block_def** %merge_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %merge_bb.addr, metadata !10206, metadata !DIExpression()), !dbg !10207
  store %struct.basic_block_def* %other_bb, %struct.basic_block_def** %other_bb.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %other_bb.addr, metadata !10208, metadata !DIExpression()), !dbg !10209
  store %struct.basic_block_def* %new_dest, %struct.basic_block_def** %new_dest.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.basic_block_def** %new_dest.addr, metadata !10210, metadata !DIExpression()), !dbg !10211
  store i32 %reversep, i32* %reversep.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %reversep.addr, metadata !10212, metadata !DIExpression()), !dbg !10213
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %head, metadata !10214, metadata !DIExpression()), !dbg !10215
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %end, metadata !10216, metadata !DIExpression()), !dbg !10217
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %jump, metadata !10218, metadata !DIExpression()), !dbg !10219
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %earliest, metadata !10220, metadata !DIExpression()), !dbg !10221
  store %struct.rtx_def* null, %struct.rtx_def** %earliest, align 8, !dbg !10221
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %old_dest, metadata !10222, metadata !DIExpression()), !dbg !10223
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %new_label, metadata !10224, metadata !DIExpression()), !dbg !10225
  store %struct.rtx_def* null, %struct.rtx_def** %new_label, align 8, !dbg !10225
  call void @llvm.dbg.declare(metadata i32* %n_validated_changes, metadata !10226, metadata !DIExpression()), !dbg !10227
  store i32 0, i32* %n_validated_changes, align 4, !dbg !10227
  %0 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10228
  %il = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %0, i32 0, i32 7, !dbg !10228
  %rtl = bitcast %union.basic_block_il_dependent* %il to %struct.rtl_bb_info**, !dbg !10228
  %1 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl, align 8, !dbg !10228
  %end_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %1, i32 0, i32 1, !dbg !10228
  %2 = load %struct.rtx_def*, %struct.rtx_def** %end_, align 8, !dbg !10228
  store %struct.rtx_def* %2, %struct.rtx_def** %jump, align 8, !dbg !10229
  %3 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10230
  %il1 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %3, i32 0, i32 7, !dbg !10230
  %rtl2 = bitcast %union.basic_block_il_dependent* %il1 to %struct.rtl_bb_info**, !dbg !10230
  %4 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl2, align 8, !dbg !10230
  %head_ = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %4, i32 0, i32 0, !dbg !10230
  %5 = load %struct.rtx_def*, %struct.rtx_def** %head_, align 8, !dbg !10230
  store %struct.rtx_def* %5, %struct.rtx_def** %head, align 8, !dbg !10231
  %6 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10232
  %il3 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %6, i32 0, i32 7, !dbg !10232
  %rtl4 = bitcast %union.basic_block_il_dependent* %il3 to %struct.rtl_bb_info**, !dbg !10232
  %7 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl4, align 8, !dbg !10232
  %end_5 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %7, i32 0, i32 1, !dbg !10232
  %8 = load %struct.rtx_def*, %struct.rtx_def** %end_5, align 8, !dbg !10232
  store %struct.rtx_def* %8, %struct.rtx_def** %end, align 8, !dbg !10233
  br label %while.cond, !dbg !10234

while.cond:                                       ; preds = %while.body, %entry
  %9 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10235
  %10 = bitcast %struct.rtx_def* %9 to i32*, !dbg !10235
  %bf.load = load i32, i32* %10, align 8, !dbg !10235
  %bf.clear = and i32 %bf.load, 65535, !dbg !10235
  %cmp = icmp eq i32 %bf.clear, 7, !dbg !10235
  br i1 %cmp, label %land.rhs, label %land.end, !dbg !10236

land.rhs:                                         ; preds = %while.cond
  %11 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10237
  %12 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10238
  %cmp6 = icmp ne %struct.rtx_def* %11, %12, !dbg !10239
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %13 = phi i1 [ false, %while.cond ], [ %cmp6, %land.rhs ], !dbg !10240
  br i1 %13, label %while.body, label %while.end, !dbg !10234

while.body:                                       ; preds = %land.end
  %14 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10241
  %u = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %14, i32 0, i32 1, !dbg !10241
  %fld = bitcast %union.u* %u to [1 x %union.rtunion_def]*, !dbg !10241
  %arrayidx = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld, i64 0, i64 1, !dbg !10241
  %rt_rtx = bitcast %union.rtunion_def* %arrayidx to %struct.rtx_def**, !dbg !10241
  %15 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx, align 8, !dbg !10241
  store %struct.rtx_def* %15, %struct.rtx_def** %end, align 8, !dbg !10242
  br label %while.cond, !dbg !10234, !llvm.loop !10243

while.end:                                        ; preds = %land.end
  %16 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10244
  %call = call zeroext i8 @tablejump_p(%struct.rtx_def* %16, %struct.rtx_def** null, %struct.rtx_def** null), !dbg !10246
  %tobool = icmp ne i8 %call, 0, !dbg !10246
  br i1 %tobool, label %if.then, label %if.end, !dbg !10247

if.then:                                          ; preds = %while.end
  store i32 0, i32* %retval, align 4, !dbg !10248
  br label %return, !dbg !10248

if.end:                                           ; preds = %while.end
  %17 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10249
  %18 = bitcast %struct.rtx_def* %17 to i32*, !dbg !10249
  %bf.load7 = load i32, i32* %18, align 8, !dbg !10249
  %bf.clear8 = and i32 %bf.load7, 65535, !dbg !10249
  %cmp9 = icmp eq i32 %bf.clear8, 12, !dbg !10249
  br i1 %cmp9, label %if.then10, label %if.end15, !dbg !10251

if.then10:                                        ; preds = %if.end
  %19 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10252
  %u11 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %19, i32 0, i32 1, !dbg !10252
  %fld12 = bitcast %union.u* %u11 to [1 x %union.rtunion_def]*, !dbg !10252
  %arrayidx13 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld12, i64 0, i64 2, !dbg !10252
  %rt_rtx14 = bitcast %union.rtunion_def* %arrayidx13 to %struct.rtx_def**, !dbg !10252
  %20 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx14, align 8, !dbg !10252
  store %struct.rtx_def* %20, %struct.rtx_def** %head, align 8, !dbg !10253
  br label %if.end15, !dbg !10254

if.end15:                                         ; preds = %if.then10, %if.end
  br label %while.cond16, !dbg !10255

while.cond16:                                     ; preds = %while.body23, %if.end15
  %21 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10256
  %22 = bitcast %struct.rtx_def* %21 to i32*, !dbg !10256
  %bf.load17 = load i32, i32* %22, align 8, !dbg !10256
  %bf.clear18 = and i32 %bf.load17, 65535, !dbg !10256
  %cmp19 = icmp eq i32 %bf.clear18, 7, !dbg !10256
  br i1 %cmp19, label %land.rhs20, label %land.end22, !dbg !10257

land.rhs20:                                       ; preds = %while.cond16
  %23 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10258
  %24 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10259
  %cmp21 = icmp ne %struct.rtx_def* %23, %24, !dbg !10260
  br label %land.end22

land.end22:                                       ; preds = %land.rhs20, %while.cond16
  %25 = phi i1 [ false, %while.cond16 ], [ %cmp21, %land.rhs20 ], !dbg !10240
  br i1 %25, label %while.body23, label %while.end28, !dbg !10255

while.body23:                                     ; preds = %land.end22
  %26 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10261
  %u24 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %26, i32 0, i32 1, !dbg !10261
  %fld25 = bitcast %union.u* %u24 to [1 x %union.rtunion_def]*, !dbg !10261
  %arrayidx26 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld25, i64 0, i64 2, !dbg !10261
  %rt_rtx27 = bitcast %union.rtunion_def* %arrayidx26 to %struct.rtx_def**, !dbg !10261
  %27 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx27, align 8, !dbg !10261
  store %struct.rtx_def* %27, %struct.rtx_def** %head, align 8, !dbg !10262
  br label %while.cond16, !dbg !10255, !llvm.loop !10263

while.end28:                                      ; preds = %land.end22
  %28 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10264
  %29 = bitcast %struct.rtx_def* %28 to i32*, !dbg !10264
  %bf.load29 = load i32, i32* %29, align 8, !dbg !10264
  %bf.clear30 = and i32 %bf.load29, 65535, !dbg !10264
  %cmp31 = icmp eq i32 %bf.clear30, 13, !dbg !10264
  br i1 %cmp31, label %if.then32, label %if.end53, !dbg !10266

if.then32:                                        ; preds = %while.end28
  %30 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10267
  %31 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10270
  %cmp33 = icmp eq %struct.rtx_def* %30, %31, !dbg !10271
  br i1 %cmp33, label %if.then34, label %if.end35, !dbg !10272

if.then34:                                        ; preds = %if.then32
  store %struct.rtx_def* null, %struct.rtx_def** %end, align 8, !dbg !10273
  store %struct.rtx_def* null, %struct.rtx_def** %head, align 8, !dbg !10275
  br label %no_body, !dbg !10276

if.end35:                                         ; preds = %if.then32
  %32 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10277
  %u36 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %32, i32 0, i32 1, !dbg !10277
  %fld37 = bitcast %union.u* %u36 to [1 x %union.rtunion_def]*, !dbg !10277
  %arrayidx38 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld37, i64 0, i64 2, !dbg !10277
  %rt_rtx39 = bitcast %union.rtunion_def* %arrayidx38 to %struct.rtx_def**, !dbg !10277
  %33 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx39, align 8, !dbg !10277
  store %struct.rtx_def* %33, %struct.rtx_def** %head, align 8, !dbg !10278
  br label %while.cond40, !dbg !10279

while.cond40:                                     ; preds = %while.body47, %if.end35
  %34 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10280
  %35 = bitcast %struct.rtx_def* %34 to i32*, !dbg !10280
  %bf.load41 = load i32, i32* %35, align 8, !dbg !10280
  %bf.clear42 = and i32 %bf.load41, 65535, !dbg !10280
  %cmp43 = icmp eq i32 %bf.clear42, 7, !dbg !10280
  br i1 %cmp43, label %land.rhs44, label %land.end46, !dbg !10281

land.rhs44:                                       ; preds = %while.cond40
  %36 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10282
  %37 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10283
  %cmp45 = icmp ne %struct.rtx_def* %36, %37, !dbg !10284
  br label %land.end46

land.end46:                                       ; preds = %land.rhs44, %while.cond40
  %38 = phi i1 [ false, %while.cond40 ], [ %cmp45, %land.rhs44 ], !dbg !10285
  br i1 %38, label %while.body47, label %while.end52, !dbg !10279

while.body47:                                     ; preds = %land.end46
  %39 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10286
  %u48 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %39, i32 0, i32 1, !dbg !10286
  %fld49 = bitcast %union.u* %u48 to [1 x %union.rtunion_def]*, !dbg !10286
  %arrayidx50 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld49, i64 0, i64 2, !dbg !10286
  %rt_rtx51 = bitcast %union.rtunion_def* %arrayidx50 to %struct.rtx_def**, !dbg !10286
  %40 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx51, align 8, !dbg !10286
  store %struct.rtx_def* %40, %struct.rtx_def** %head, align 8, !dbg !10287
  br label %while.cond40, !dbg !10279, !llvm.loop !10288

while.end52:                                      ; preds = %land.end46
  br label %if.end53, !dbg !10289

if.end53:                                         ; preds = %while.end52, %while.end28
  %41 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10290
  %42 = bitcast %struct.rtx_def* %41 to i32*, !dbg !10290
  %bf.load54 = load i32, i32* %42, align 8, !dbg !10290
  %bf.clear55 = and i32 %bf.load54, 65535, !dbg !10290
  %cmp56 = icmp eq i32 %bf.clear55, 9, !dbg !10290
  br i1 %cmp56, label %if.then57, label %if.end78, !dbg !10292

if.then57:                                        ; preds = %if.end53
  %43 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10293
  %44 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10296
  %cmp58 = icmp eq %struct.rtx_def* %43, %44, !dbg !10297
  br i1 %cmp58, label %if.then59, label %if.end60, !dbg !10298

if.then59:                                        ; preds = %if.then57
  store %struct.rtx_def* null, %struct.rtx_def** %end, align 8, !dbg !10299
  store %struct.rtx_def* null, %struct.rtx_def** %head, align 8, !dbg !10301
  br label %no_body, !dbg !10302

if.end60:                                         ; preds = %if.then57
  %45 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10303
  %u61 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %45, i32 0, i32 1, !dbg !10303
  %fld62 = bitcast %union.u* %u61 to [1 x %union.rtunion_def]*, !dbg !10303
  %arrayidx63 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld62, i64 0, i64 1, !dbg !10303
  %rt_rtx64 = bitcast %union.rtunion_def* %arrayidx63 to %struct.rtx_def**, !dbg !10303
  %46 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx64, align 8, !dbg !10303
  store %struct.rtx_def* %46, %struct.rtx_def** %end, align 8, !dbg !10304
  br label %while.cond65, !dbg !10305

while.cond65:                                     ; preds = %while.body72, %if.end60
  %47 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10306
  %48 = bitcast %struct.rtx_def* %47 to i32*, !dbg !10306
  %bf.load66 = load i32, i32* %48, align 8, !dbg !10306
  %bf.clear67 = and i32 %bf.load66, 65535, !dbg !10306
  %cmp68 = icmp eq i32 %bf.clear67, 7, !dbg !10306
  br i1 %cmp68, label %land.rhs69, label %land.end71, !dbg !10307

land.rhs69:                                       ; preds = %while.cond65
  %49 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10308
  %50 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10309
  %cmp70 = icmp ne %struct.rtx_def* %49, %50, !dbg !10310
  br label %land.end71

land.end71:                                       ; preds = %land.rhs69, %while.cond65
  %51 = phi i1 [ false, %while.cond65 ], [ %cmp70, %land.rhs69 ], !dbg !10311
  br i1 %51, label %while.body72, label %while.end77, !dbg !10305

while.body72:                                     ; preds = %land.end71
  %52 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10312
  %u73 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %52, i32 0, i32 1, !dbg !10312
  %fld74 = bitcast %union.u* %u73 to [1 x %union.rtunion_def]*, !dbg !10312
  %arrayidx75 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld74, i64 0, i64 1, !dbg !10312
  %rt_rtx76 = bitcast %union.rtunion_def* %arrayidx75 to %struct.rtx_def**, !dbg !10312
  %53 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx76, align 8, !dbg !10312
  store %struct.rtx_def* %53, %struct.rtx_def** %end, align 8, !dbg !10313
  br label %while.cond65, !dbg !10305, !llvm.loop !10314

while.end77:                                      ; preds = %land.end71
  br label %if.end78, !dbg !10315

if.end78:                                         ; preds = %while.end77, %if.end53
  %54 = load i8 ()*, i8 ()** getelementptr inbounds (%struct.gcc_target, %struct.gcc_target* @targetm, i32 0, i32 35), align 8, !dbg !10316
  %call79 = call zeroext i8 %54(), !dbg !10318
  %tobool80 = icmp ne i8 %call79, 0, !dbg !10318
  br i1 %tobool80, label %if.then81, label %if.end125, !dbg !10319

if.then81:                                        ; preds = %if.end78
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond, metadata !10320, metadata !DIExpression()), !dbg !10322
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prob_val, metadata !10323, metadata !DIExpression()), !dbg !10324
  %55 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10325
  %call82 = call %struct.rtx_def* @cond_exec_get_condition(%struct.rtx_def* %55), !dbg !10326
  store %struct.rtx_def* %call82, %struct.rtx_def** %cond, align 8, !dbg !10327
  %56 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10328
  %tobool83 = icmp ne %struct.rtx_def* %56, null, !dbg !10328
  br i1 %tobool83, label %if.end85, label %if.then84, !dbg !10330

if.then84:                                        ; preds = %if.then81
  store i32 0, i32* %retval, align 4, !dbg !10331
  br label %return, !dbg !10331

if.end85:                                         ; preds = %if.then81
  %57 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10332
  %call86 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %57, i32 13, %struct.rtx_def* null), !dbg !10333
  store %struct.rtx_def* %call86, %struct.rtx_def** %prob_val, align 8, !dbg !10334
  %58 = load %struct.rtx_def*, %struct.rtx_def** %prob_val, align 8, !dbg !10335
  %tobool87 = icmp ne %struct.rtx_def* %58, null, !dbg !10335
  br i1 %tobool87, label %if.then88, label %if.end93, !dbg !10337

if.then88:                                        ; preds = %if.end85
  %59 = load %struct.rtx_def*, %struct.rtx_def** %prob_val, align 8, !dbg !10338
  %u89 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %59, i32 0, i32 1, !dbg !10338
  %fld90 = bitcast %union.u* %u89 to [1 x %union.rtunion_def]*, !dbg !10338
  %arrayidx91 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld90, i64 0, i64 0, !dbg !10338
  %rt_rtx92 = bitcast %union.rtunion_def* %arrayidx91 to %struct.rtx_def**, !dbg !10338
  %60 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx92, align 8, !dbg !10338
  store %struct.rtx_def* %60, %struct.rtx_def** %prob_val, align 8, !dbg !10339
  br label %if.end93, !dbg !10340

if.end93:                                         ; preds = %if.then88, %if.end85
  %61 = load i32, i32* %reversep.addr, align 4, !dbg !10341
  %tobool94 = icmp ne i32 %61, 0, !dbg !10341
  br i1 %tobool94, label %if.then95, label %if.end117, !dbg !10343

if.then95:                                        ; preds = %if.end93
  call void @llvm.dbg.declare(metadata i32* %rev, metadata !10344, metadata !DIExpression()), !dbg !10346
  %62 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10347
  %63 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10348
  %call96 = call i32 @reversed_comparison_code(%struct.rtx_def* %62, %struct.rtx_def* %63), !dbg !10349
  store i32 %call96, i32* %rev, align 4, !dbg !10346
  %64 = load i32, i32* %rev, align 4, !dbg !10350
  %cmp97 = icmp eq i32 %64, 0, !dbg !10352
  br i1 %cmp97, label %if.then98, label %if.end99, !dbg !10353

if.then98:                                        ; preds = %if.then95
  store i32 0, i32* %retval, align 4, !dbg !10354
  br label %return, !dbg !10354

if.end99:                                         ; preds = %if.then95
  %65 = load i32, i32* %rev, align 4, !dbg !10355
  %66 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10355
  %67 = bitcast %struct.rtx_def* %66 to i32*, !dbg !10355
  %bf.load100 = load i32, i32* %67, align 8, !dbg !10355
  %bf.lshr = lshr i32 %bf.load100, 16, !dbg !10355
  %bf.clear101 = and i32 %bf.lshr, 255, !dbg !10355
  %68 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10355
  %u102 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %68, i32 0, i32 1, !dbg !10355
  %fld103 = bitcast %union.u* %u102 to [1 x %union.rtunion_def]*, !dbg !10355
  %arrayidx104 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld103, i64 0, i64 0, !dbg !10355
  %rt_rtx105 = bitcast %union.rtunion_def* %arrayidx104 to %struct.rtx_def**, !dbg !10355
  %69 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx105, align 8, !dbg !10355
  %70 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10355
  %u106 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %70, i32 0, i32 1, !dbg !10355
  %fld107 = bitcast %union.u* %u106 to [1 x %union.rtunion_def]*, !dbg !10355
  %arrayidx108 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld107, i64 0, i64 1, !dbg !10355
  %rt_rtx109 = bitcast %union.rtunion_def* %arrayidx108 to %struct.rtx_def**, !dbg !10355
  %71 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx109, align 8, !dbg !10355
  %call110 = call %struct.rtx_def* @gen_rtx_fmt_ee_stat(i32 %65, i32 %bf.clear101, %struct.rtx_def* %69, %struct.rtx_def* %71), !dbg !10355
  store %struct.rtx_def* %call110, %struct.rtx_def** %cond, align 8, !dbg !10356
  %72 = load %struct.rtx_def*, %struct.rtx_def** %prob_val, align 8, !dbg !10357
  %tobool111 = icmp ne %struct.rtx_def* %72, null, !dbg !10357
  br i1 %tobool111, label %if.then112, label %if.end116, !dbg !10359

if.then112:                                       ; preds = %if.end99
  %73 = load %struct.rtx_def*, %struct.rtx_def** %prob_val, align 8, !dbg !10360
  %u113 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %73, i32 0, i32 1, !dbg !10360
  %hwint = bitcast %union.u* %u113 to [1 x i64]*, !dbg !10360
  %arrayidx114 = getelementptr inbounds [1 x i64], [1 x i64]* %hwint, i64 0, i64 0, !dbg !10360
  %74 = load i64, i64* %arrayidx114, align 8, !dbg !10360
  %sub = sub nsw i64 10000, %74, !dbg !10360
  %call115 = call %struct.rtx_def* @gen_rtx_CONST_INT(i32 0, i64 %sub), !dbg !10360
  store %struct.rtx_def* %call115, %struct.rtx_def** %prob_val, align 8, !dbg !10361
  br label %if.end116, !dbg !10362

if.end116:                                        ; preds = %if.then112, %if.end99
  br label %if.end117, !dbg !10363

if.end117:                                        ; preds = %if.end116, %if.end93
  %75 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10364
  %76 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10366
  %77 = load %struct.rtx_def*, %struct.rtx_def** %cond, align 8, !dbg !10367
  %78 = load %struct.rtx_def*, %struct.rtx_def** %prob_val, align 8, !dbg !10368
  %call118 = call i32 @cond_exec_process_insns(%struct.ce_if_block* null, %struct.rtx_def* %75, %struct.rtx_def* %76, %struct.rtx_def* %77, %struct.rtx_def* %78, i32 0), !dbg !10369
  %tobool119 = icmp ne i32 %call118, 0, !dbg !10369
  br i1 %tobool119, label %land.lhs.true, label %if.else, !dbg !10370

land.lhs.true:                                    ; preds = %if.end117
  %call120 = call i32 @verify_changes(i32 0), !dbg !10371
  %tobool121 = icmp ne i32 %call120, 0, !dbg !10371
  br i1 %tobool121, label %if.then122, label %if.else, !dbg !10372

if.then122:                                       ; preds = %land.lhs.true
  %call123 = call i32 @num_validated_changes(), !dbg !10373
  store i32 %call123, i32* %n_validated_changes, align 4, !dbg !10374
  br label %if.end124, !dbg !10375

if.else:                                          ; preds = %land.lhs.true, %if.end117
  call void @cancel_changes(i32 0), !dbg !10376
  br label %if.end124

if.end124:                                        ; preds = %if.else, %if.then122
  %79 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10377
  store %struct.rtx_def* %79, %struct.rtx_def** %earliest, align 8, !dbg !10378
  br label %if.end125, !dbg !10379

if.end125:                                        ; preds = %if.end124, %if.end78
  %80 = load i32, i32* %n_validated_changes, align 4, !dbg !10380
  %cmp126 = icmp eq i32 %80, 0, !dbg !10382
  br i1 %cmp126, label %if.then127, label %if.end309, !dbg !10383

if.then127:                                       ; preds = %if.end125
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn, metadata !10384, metadata !DIExpression()), !dbg !10386
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %cond128, metadata !10387, metadata !DIExpression()), !dbg !10388
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %prev, metadata !10389, metadata !DIExpression()), !dbg !10390
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %merge_set, metadata !10391, metadata !DIExpression()), !dbg !10392
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %test_live, metadata !10393, metadata !DIExpression()), !dbg !10394
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %test_set, metadata !10395, metadata !DIExpression()), !dbg !10396
  call void @llvm.dbg.declare(metadata i32* %i, metadata !10397, metadata !DIExpression()), !dbg !10398
  call void @llvm.dbg.declare(metadata i32* %fail, metadata !10399, metadata !DIExpression()), !dbg !10400
  store i32 0, i32* %fail, align 4, !dbg !10400
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator* %bi, metadata !10401, metadata !DIExpression()), !dbg !10409
  %81 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10410
  store %struct.rtx_def* %81, %struct.rtx_def** %insn, align 8, !dbg !10412
  br label %for.cond, !dbg !10413

for.cond:                                         ; preds = %for.inc, %if.then127
  %82 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10414
  %83 = bitcast %struct.rtx_def* %82 to i32*, !dbg !10414
  %bf.load129 = load i32, i32* %83, align 8, !dbg !10414
  %bf.clear130 = and i32 %bf.load129, 65535, !dbg !10414
  %cmp131 = icmp eq i32 %bf.clear130, 10, !dbg !10414
  br i1 %cmp131, label %if.then132, label %if.end133, !dbg !10418

if.then132:                                       ; preds = %for.cond
  store i32 0, i32* %retval, align 4, !dbg !10419
  br label %return, !dbg !10419

if.end133:                                        ; preds = %for.cond
  %84 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10420
  %85 = bitcast %struct.rtx_def* %84 to i32*, !dbg !10420
  %bf.load134 = load i32, i32* %85, align 8, !dbg !10420
  %bf.clear135 = and i32 %bf.load134, 65535, !dbg !10420
  %cmp136 = icmp eq i32 %bf.clear135, 8, !dbg !10420
  br i1 %cmp136, label %land.lhs.true148, label %lor.lhs.false, !dbg !10420

lor.lhs.false:                                    ; preds = %if.end133
  %86 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10420
  %87 = bitcast %struct.rtx_def* %86 to i32*, !dbg !10420
  %bf.load137 = load i32, i32* %87, align 8, !dbg !10420
  %bf.clear138 = and i32 %bf.load137, 65535, !dbg !10420
  %cmp139 = icmp eq i32 %bf.clear138, 7, !dbg !10420
  br i1 %cmp139, label %land.lhs.true148, label %lor.lhs.false140, !dbg !10420

lor.lhs.false140:                                 ; preds = %lor.lhs.false
  %88 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10420
  %89 = bitcast %struct.rtx_def* %88 to i32*, !dbg !10420
  %bf.load141 = load i32, i32* %89, align 8, !dbg !10420
  %bf.clear142 = and i32 %bf.load141, 65535, !dbg !10420
  %cmp143 = icmp eq i32 %bf.clear142, 9, !dbg !10420
  br i1 %cmp143, label %land.lhs.true148, label %lor.lhs.false144, !dbg !10420

lor.lhs.false144:                                 ; preds = %lor.lhs.false140
  %90 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10420
  %91 = bitcast %struct.rtx_def* %90 to i32*, !dbg !10420
  %bf.load145 = load i32, i32* %91, align 8, !dbg !10420
  %bf.clear146 = and i32 %bf.load145, 65535, !dbg !10420
  %cmp147 = icmp eq i32 %bf.clear146, 10, !dbg !10420
  br i1 %cmp147, label %land.lhs.true148, label %if.end169, !dbg !10420

land.lhs.true148:                                 ; preds = %lor.lhs.false144, %lor.lhs.false140, %lor.lhs.false, %if.end133
  %92 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10420
  %93 = bitcast %struct.rtx_def* %92 to i32*, !dbg !10420
  %bf.load149 = load i32, i32* %93, align 8, !dbg !10420
  %bf.clear150 = and i32 %bf.load149, 65535, !dbg !10420
  %cmp151 = icmp eq i32 %bf.clear150, 7, !dbg !10420
  br i1 %cmp151, label %if.end169, label %if.then152, !dbg !10422

if.then152:                                       ; preds = %land.lhs.true148
  %94 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10423
  %u153 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %94, i32 0, i32 1, !dbg !10423
  %fld154 = bitcast %union.u* %u153 to [1 x %union.rtunion_def]*, !dbg !10423
  %arrayidx155 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld154, i64 0, i64 5, !dbg !10423
  %rt_rtx156 = bitcast %union.rtunion_def* %arrayidx155 to %struct.rtx_def**, !dbg !10423
  %95 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx156, align 8, !dbg !10423
  %call157 = call i32 @may_trap_p(%struct.rtx_def* %95), !dbg !10426
  %tobool158 = icmp ne i32 %call157, 0, !dbg !10426
  br i1 %tobool158, label %if.then159, label %if.end160, !dbg !10427

if.then159:                                       ; preds = %if.then152
  store i32 0, i32* %retval, align 4, !dbg !10428
  br label %return, !dbg !10428

if.end160:                                        ; preds = %if.then152
  %96 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10429
  %u161 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %96, i32 0, i32 1, !dbg !10429
  %fld162 = bitcast %union.u* %u161 to [1 x %union.rtunion_def]*, !dbg !10429
  %arrayidx163 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld162, i64 0, i64 5, !dbg !10429
  %rt_rtx164 = bitcast %union.rtunion_def* %arrayidx163 to %struct.rtx_def**, !dbg !10429
  %call165 = call i32 @for_each_rtx(%struct.rtx_def** %rt_rtx164, i32 (%struct.rtx_def**, i8*)* @find_memory, i8* null), !dbg !10431
  %tobool166 = icmp ne i32 %call165, 0, !dbg !10431
  br i1 %tobool166, label %if.then167, label %if.end168, !dbg !10432

if.then167:                                       ; preds = %if.end160
  store i32 0, i32* %retval, align 4, !dbg !10433
  br label %return, !dbg !10433

if.end168:                                        ; preds = %if.end160
  br label %if.end169, !dbg !10434

if.end169:                                        ; preds = %if.end168, %land.lhs.true148, %lor.lhs.false144
  %97 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10435
  %98 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10437
  %cmp170 = icmp eq %struct.rtx_def* %97, %98, !dbg !10438
  br i1 %cmp170, label %if.then171, label %if.end172, !dbg !10439

if.then171:                                       ; preds = %if.end169
  br label %for.end, !dbg !10440

if.end172:                                        ; preds = %if.end169
  br label %for.inc, !dbg !10441

for.inc:                                          ; preds = %if.end172
  %99 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10442
  %u173 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %99, i32 0, i32 1, !dbg !10442
  %fld174 = bitcast %union.u* %u173 to [1 x %union.rtunion_def]*, !dbg !10442
  %arrayidx175 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld174, i64 0, i64 2, !dbg !10442
  %rt_rtx176 = bitcast %union.rtunion_def* %arrayidx175 to %struct.rtx_def**, !dbg !10442
  %100 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx176, align 8, !dbg !10442
  store %struct.rtx_def* %100, %struct.rtx_def** %insn, align 8, !dbg !10443
  br label %for.cond, !dbg !10444, !llvm.loop !10445

for.end:                                          ; preds = %if.then171
  %101 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10448
  %call177 = call i32 @any_condjump_p(%struct.rtx_def* %101), !dbg !10450
  %tobool178 = icmp ne i32 %call177, 0, !dbg !10450
  br i1 %tobool178, label %if.end180, label %if.then179, !dbg !10451

if.then179:                                       ; preds = %for.end
  store i32 0, i32* %retval, align 4, !dbg !10452
  br label %return, !dbg !10452

if.end180:                                        ; preds = %for.end
  %102 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10453
  %call181 = call %struct.rtx_def* @noce_get_condition(%struct.rtx_def* %102, %struct.rtx_def** %earliest, i8 zeroext 0), !dbg !10454
  store %struct.rtx_def* %call181, %struct.rtx_def** %cond128, align 8, !dbg !10455
  %103 = load %struct.rtx_def*, %struct.rtx_def** %cond128, align 8, !dbg !10456
  %tobool182 = icmp ne %struct.rtx_def* %103, null, !dbg !10456
  br i1 %tobool182, label %if.end184, label %if.then183, !dbg !10458

if.then183:                                       ; preds = %if.end180
  store i32 0, i32* %retval, align 4, !dbg !10459
  br label %return, !dbg !10459

if.end184:                                        ; preds = %if.end180
  %call185 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @reg_obstack), !dbg !10460
  store %struct.bitmap_head_def* %call185, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10461
  %call186 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @reg_obstack), !dbg !10462
  store %struct.bitmap_head_def* %call186, %struct.bitmap_head_def** %test_live, align 8, !dbg !10463
  %call187 = call %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack* @reg_obstack), !dbg !10464
  store %struct.bitmap_head_def* %call187, %struct.bitmap_head_def** %test_set, align 8, !dbg !10465
  %104 = load i32, i32* @max_regno, align 4, !dbg !10466
  %call188 = call i32 @max_reg_num(), !dbg !10468
  %cmp189 = icmp slt i32 %104, %call188, !dbg !10469
  br i1 %cmp189, label %if.then190, label %if.end192, !dbg !10470

if.then190:                                       ; preds = %if.end184
  %call191 = call i32 @max_reg_num(), !dbg !10471
  store i32 %call191, i32* @max_regno, align 4, !dbg !10472
  br label %if.end192, !dbg !10473

if.end192:                                        ; preds = %if.then190, %if.end184
  %105 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10474
  %il193 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %105, i32 0, i32 7, !dbg !10474
  %rtl194 = bitcast %union.basic_block_il_dependent* %il193 to %struct.rtl_bb_info**, !dbg !10474
  %106 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl194, align 8, !dbg !10474
  %head_195 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %106, i32 0, i32 0, !dbg !10474
  %107 = load %struct.rtx_def*, %struct.rtx_def** %head_195, align 8, !dbg !10474
  store %struct.rtx_def* %107, %struct.rtx_def** %insn, align 8, !dbg !10474
  br label %for.cond196, !dbg !10474

for.cond196:                                      ; preds = %for.inc239, %if.end192
  %108 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10476
  %tobool197 = icmp ne %struct.rtx_def* %108, null, !dbg !10476
  br i1 %tobool197, label %land.rhs198, label %land.end207, !dbg !10476

land.rhs198:                                      ; preds = %for.cond196
  %109 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10476
  %110 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10476
  %il199 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %110, i32 0, i32 7, !dbg !10476
  %rtl200 = bitcast %union.basic_block_il_dependent* %il199 to %struct.rtl_bb_info**, !dbg !10476
  %111 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl200, align 8, !dbg !10476
  %end_201 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %111, i32 0, i32 1, !dbg !10476
  %112 = load %struct.rtx_def*, %struct.rtx_def** %end_201, align 8, !dbg !10476
  %u202 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %112, i32 0, i32 1, !dbg !10476
  %fld203 = bitcast %union.u* %u202 to [1 x %union.rtunion_def]*, !dbg !10476
  %arrayidx204 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld203, i64 0, i64 2, !dbg !10476
  %rt_rtx205 = bitcast %union.rtunion_def* %arrayidx204 to %struct.rtx_def**, !dbg !10476
  %113 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx205, align 8, !dbg !10476
  %cmp206 = icmp ne %struct.rtx_def* %109, %113, !dbg !10476
  br label %land.end207

land.end207:                                      ; preds = %land.rhs198, %for.cond196
  %114 = phi i1 [ false, %for.cond196 ], [ %cmp206, %land.rhs198 ], !dbg !10478
  br i1 %114, label %for.body, label %for.end244, !dbg !10474

for.body:                                         ; preds = %land.end207
  %115 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10479
  %116 = bitcast %struct.rtx_def* %115 to i32*, !dbg !10479
  %bf.load208 = load i32, i32* %116, align 8, !dbg !10479
  %bf.clear209 = and i32 %bf.load208, 65535, !dbg !10479
  %cmp210 = icmp eq i32 %bf.clear209, 8, !dbg !10479
  br i1 %cmp210, label %land.lhs.true223, label %lor.lhs.false211, !dbg !10479

lor.lhs.false211:                                 ; preds = %for.body
  %117 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10479
  %118 = bitcast %struct.rtx_def* %117 to i32*, !dbg !10479
  %bf.load212 = load i32, i32* %118, align 8, !dbg !10479
  %bf.clear213 = and i32 %bf.load212, 65535, !dbg !10479
  %cmp214 = icmp eq i32 %bf.clear213, 7, !dbg !10479
  br i1 %cmp214, label %land.lhs.true223, label %lor.lhs.false215, !dbg !10479

lor.lhs.false215:                                 ; preds = %lor.lhs.false211
  %119 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10479
  %120 = bitcast %struct.rtx_def* %119 to i32*, !dbg !10479
  %bf.load216 = load i32, i32* %120, align 8, !dbg !10479
  %bf.clear217 = and i32 %bf.load216, 65535, !dbg !10479
  %cmp218 = icmp eq i32 %bf.clear217, 9, !dbg !10479
  br i1 %cmp218, label %land.lhs.true223, label %lor.lhs.false219, !dbg !10479

lor.lhs.false219:                                 ; preds = %lor.lhs.false215
  %121 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10479
  %122 = bitcast %struct.rtx_def* %121 to i32*, !dbg !10479
  %bf.load220 = load i32, i32* %122, align 8, !dbg !10479
  %bf.clear221 = and i32 %bf.load220, 65535, !dbg !10479
  %cmp222 = icmp eq i32 %bf.clear221, 10, !dbg !10479
  br i1 %cmp222, label %land.lhs.true223, label %if.end238, !dbg !10479

land.lhs.true223:                                 ; preds = %lor.lhs.false219, %lor.lhs.false215, %lor.lhs.false211, %for.body
  %123 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10479
  %124 = bitcast %struct.rtx_def* %123 to i32*, !dbg !10479
  %bf.load224 = load i32, i32* %124, align 8, !dbg !10479
  %bf.clear225 = and i32 %bf.load224, 65535, !dbg !10479
  %cmp226 = icmp eq i32 %bf.clear225, 7, !dbg !10479
  br i1 %cmp226, label %if.end238, label %if.then227, !dbg !10482

if.then227:                                       ; preds = %land.lhs.true223
  call void @llvm.dbg.declare(metadata i32* %uid, metadata !10483, metadata !DIExpression()), !dbg !10485
  %125 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10486
  %u228 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %125, i32 0, i32 1, !dbg !10486
  %fld229 = bitcast %union.u* %u228 to [1 x %union.rtunion_def]*, !dbg !10486
  %arrayidx230 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld229, i64 0, i64 0, !dbg !10486
  %rt_int = bitcast %union.rtunion_def* %arrayidx230 to i32*, !dbg !10486
  %126 = load i32, i32* %rt_int, align 8, !dbg !10486
  store i32 %126, i32* %uid, align 4, !dbg !10485
  call void @llvm.dbg.declare(metadata %union.df_ref_d*** %def_rec, metadata !10487, metadata !DIExpression()), !dbg !10548
  %127 = load %struct.df*, %struct.df** @df, align 8, !dbg !10549
  %insns = getelementptr inbounds %struct.df, %struct.df* %127, i32 0, i32 10, !dbg !10549
  %128 = load %struct.df_insn_info**, %struct.df_insn_info*** %insns, align 8, !dbg !10549
  %129 = load i32, i32* %uid, align 4, !dbg !10549
  %idxprom = zext i32 %129 to i64, !dbg !10549
  %arrayidx231 = getelementptr inbounds %struct.df_insn_info*, %struct.df_insn_info** %128, i64 %idxprom, !dbg !10549
  %130 = load %struct.df_insn_info*, %struct.df_insn_info** %arrayidx231, align 8, !dbg !10549
  %defs = getelementptr inbounds %struct.df_insn_info, %struct.df_insn_info* %130, i32 0, i32 1, !dbg !10549
  %131 = load %union.df_ref_d**, %union.df_ref_d*** %defs, align 8, !dbg !10549
  store %union.df_ref_d** %131, %union.df_ref_d*** %def_rec, align 8, !dbg !10551
  br label %for.cond232, !dbg !10552

for.cond232:                                      ; preds = %for.inc236, %if.then227
  %132 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !10553
  %133 = load %union.df_ref_d*, %union.df_ref_d** %132, align 8, !dbg !10555
  %tobool233 = icmp ne %union.df_ref_d* %133, null, !dbg !10556
  br i1 %tobool233, label %for.body234, label %for.end237, !dbg !10556

for.body234:                                      ; preds = %for.cond232
  call void @llvm.dbg.declare(metadata %union.df_ref_d** %def, metadata !10557, metadata !DIExpression()), !dbg !10559
  %134 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !10560
  %135 = load %union.df_ref_d*, %union.df_ref_d** %134, align 8, !dbg !10561
  store %union.df_ref_d* %135, %union.df_ref_d** %def, align 8, !dbg !10559
  %136 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10562
  %137 = load %union.df_ref_d*, %union.df_ref_d** %def, align 8, !dbg !10563
  %base = bitcast %union.df_ref_d* %137 to %struct.df_base_ref*, !dbg !10563
  %regno = getelementptr inbounds %struct.df_base_ref, %struct.df_base_ref* %base, i32 0, i32 6, !dbg !10563
  %138 = load i32, i32* %regno, align 8, !dbg !10563
  %call235 = call zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def* %136, i32 %138), !dbg !10564
  br label %for.inc236, !dbg !10565

for.inc236:                                       ; preds = %for.body234
  %139 = load %union.df_ref_d**, %union.df_ref_d*** %def_rec, align 8, !dbg !10566
  %incdec.ptr = getelementptr inbounds %union.df_ref_d*, %union.df_ref_d** %139, i32 1, !dbg !10566
  store %union.df_ref_d** %incdec.ptr, %union.df_ref_d*** %def_rec, align 8, !dbg !10566
  br label %for.cond232, !dbg !10567, !llvm.loop !10568

for.end237:                                       ; preds = %for.cond232
  br label %if.end238, !dbg !10570

if.end238:                                        ; preds = %for.end237, %land.lhs.true223, %lor.lhs.false219
  br label %for.inc239, !dbg !10571

for.inc239:                                       ; preds = %if.end238
  %140 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10476
  %u240 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %140, i32 0, i32 1, !dbg !10476
  %fld241 = bitcast %union.u* %u240 to [1 x %union.rtunion_def]*, !dbg !10476
  %arrayidx242 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld241, i64 0, i64 2, !dbg !10476
  %rt_rtx243 = bitcast %union.rtunion_def* %arrayidx242 to %struct.rtx_def**, !dbg !10476
  %141 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx243, align 8, !dbg !10476
  store %struct.rtx_def* %141, %struct.rtx_def** %insn, align 8, !dbg !10476
  br label %for.cond196, !dbg !10476, !llvm.loop !10572

for.end244:                                       ; preds = %land.end207
  %142 = load i32, i32* @reload_completed, align 4, !dbg !10574
  %tobool245 = icmp ne i32 %142, 0, !dbg !10574
  br i1 %tobool245, label %if.end264, label %if.then246, !dbg !10576

if.then246:                                       ; preds = %for.end244
  %143 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10577
  call void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %143, i32 0, i32* %i), !dbg !10577
  br label %for.cond247, !dbg !10577

for.cond247:                                      ; preds = %for.inc262, %if.then246
  %call248 = call zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10580
  %tobool249 = icmp ne i8 %call248, 0, !dbg !10577
  br i1 %tobool249, label %for.body250, label %for.end263, !dbg !10577

for.body250:                                      ; preds = %for.cond247
  %144 = load i32, i32* %i, align 4, !dbg !10582
  %cmp251 = icmp ult i32 %144, 53, !dbg !10585
  br i1 %cmp251, label %land.lhs.true252, label %if.end261, !dbg !10586

land.lhs.true252:                                 ; preds = %for.body250
  %145 = load i32, i32* %i, align 4, !dbg !10587
  %idxprom253 = zext i32 %145 to i64, !dbg !10588
  %arrayidx254 = getelementptr inbounds [53 x i8], [53 x i8]* @fixed_regs, i64 0, i64 %idxprom253, !dbg !10588
  %146 = load i8, i8* %arrayidx254, align 1, !dbg !10588
  %tobool255 = icmp ne i8 %146, 0, !dbg !10588
  br i1 %tobool255, label %if.end261, label %land.lhs.true256, !dbg !10589

land.lhs.true256:                                 ; preds = %land.lhs.true252
  %147 = load i32, i32* %i, align 4, !dbg !10590
  %idxprom257 = zext i32 %147 to i64, !dbg !10591
  %arrayidx258 = getelementptr inbounds [53 x i8], [53 x i8]* @global_regs, i64 0, i64 %idxprom257, !dbg !10591
  %148 = load i8, i8* %arrayidx258, align 1, !dbg !10591
  %tobool259 = icmp ne i8 %148, 0, !dbg !10591
  br i1 %tobool259, label %if.end261, label %if.then260, !dbg !10592

if.then260:                                       ; preds = %land.lhs.true256
  store i32 1, i32* %fail, align 4, !dbg !10593
  br label %if.end261, !dbg !10594

if.end261:                                        ; preds = %if.then260, %land.lhs.true256, %land.lhs.true252, %for.body250
  br label %for.inc262, !dbg !10595

for.inc262:                                       ; preds = %if.end261
  call void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %i), !dbg !10580
  br label %for.cond247, !dbg !10580, !llvm.loop !10596

for.end263:                                       ; preds = %for.cond247
  br label %if.end264, !dbg !10598

if.end264:                                        ; preds = %for.end263, %for.end244
  %149 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_live, align 8, !dbg !10599
  %150 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb.addr, align 8, !dbg !10600
  %call265 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %150), !dbg !10601
  call void @bitmap_copy(%struct.bitmap_head_def* %149, %struct.bitmap_head_def* %call265), !dbg !10602
  %151 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10603
  %152 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_live, align 8, !dbg !10604
  call void @df_simulate_initialize_backwards(%struct.basic_block_def* %151, %struct.bitmap_head_def* %152), !dbg !10605
  %153 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10606
  store %struct.rtx_def* %153, %struct.rtx_def** %insn, align 8, !dbg !10608
  br label %for.cond266, !dbg !10609

for.cond266:                                      ; preds = %for.inc291, %if.end264
  %154 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10610
  %155 = bitcast %struct.rtx_def* %154 to i32*, !dbg !10610
  %bf.load267 = load i32, i32* %155, align 8, !dbg !10610
  %bf.clear268 = and i32 %bf.load267, 65535, !dbg !10610
  %cmp269 = icmp eq i32 %bf.clear268, 8, !dbg !10610
  br i1 %cmp269, label %if.then282, label %lor.lhs.false270, !dbg !10610

lor.lhs.false270:                                 ; preds = %for.cond266
  %156 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10610
  %157 = bitcast %struct.rtx_def* %156 to i32*, !dbg !10610
  %bf.load271 = load i32, i32* %157, align 8, !dbg !10610
  %bf.clear272 = and i32 %bf.load271, 65535, !dbg !10610
  %cmp273 = icmp eq i32 %bf.clear272, 7, !dbg !10610
  br i1 %cmp273, label %if.then282, label %lor.lhs.false274, !dbg !10610

lor.lhs.false274:                                 ; preds = %lor.lhs.false270
  %158 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10610
  %159 = bitcast %struct.rtx_def* %158 to i32*, !dbg !10610
  %bf.load275 = load i32, i32* %159, align 8, !dbg !10610
  %bf.clear276 = and i32 %bf.load275, 65535, !dbg !10610
  %cmp277 = icmp eq i32 %bf.clear276, 9, !dbg !10610
  br i1 %cmp277, label %if.then282, label %lor.lhs.false278, !dbg !10610

lor.lhs.false278:                                 ; preds = %lor.lhs.false274
  %160 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10610
  %161 = bitcast %struct.rtx_def* %160 to i32*, !dbg !10610
  %bf.load279 = load i32, i32* %161, align 8, !dbg !10610
  %bf.clear280 = and i32 %bf.load279, 65535, !dbg !10610
  %cmp281 = icmp eq i32 %bf.clear280, 10, !dbg !10610
  br i1 %cmp281, label %if.then282, label %if.end283, !dbg !10614

if.then282:                                       ; preds = %lor.lhs.false278, %lor.lhs.false274, %lor.lhs.false270, %for.cond266
  %162 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10615
  %163 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_set, align 8, !dbg !10617
  call void @df_simulate_find_defs(%struct.rtx_def* %162, %struct.bitmap_head_def* %163), !dbg !10618
  %164 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10619
  %165 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10620
  %166 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_live, align 8, !dbg !10621
  call void @df_simulate_one_insn_backwards(%struct.basic_block_def* %164, %struct.rtx_def* %165, %struct.bitmap_head_def* %166), !dbg !10622
  br label %if.end283, !dbg !10623

if.end283:                                        ; preds = %if.then282, %lor.lhs.false278
  %167 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10624
  %u284 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %167, i32 0, i32 1, !dbg !10624
  %fld285 = bitcast %union.u* %u284 to [1 x %union.rtunion_def]*, !dbg !10624
  %arrayidx286 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld285, i64 0, i64 1, !dbg !10624
  %rt_rtx287 = bitcast %union.rtunion_def* %arrayidx286 to %struct.rtx_def**, !dbg !10624
  %168 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx287, align 8, !dbg !10624
  store %struct.rtx_def* %168, %struct.rtx_def** %prev, align 8, !dbg !10625
  %169 = load %struct.rtx_def*, %struct.rtx_def** %insn, align 8, !dbg !10626
  %170 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !10628
  %cmp288 = icmp eq %struct.rtx_def* %169, %170, !dbg !10629
  br i1 %cmp288, label %if.then289, label %if.end290, !dbg !10630

if.then289:                                       ; preds = %if.end283
  br label %for.end292, !dbg !10631

if.end290:                                        ; preds = %if.end283
  br label %for.inc291, !dbg !10632

for.inc291:                                       ; preds = %if.end290
  %171 = load %struct.rtx_def*, %struct.rtx_def** %prev, align 8, !dbg !10633
  store %struct.rtx_def* %171, %struct.rtx_def** %insn, align 8, !dbg !10634
  br label %for.cond266, !dbg !10635, !llvm.loop !10636

for.end292:                                       ; preds = %if.then289
  %172 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_set, align 8, !dbg !10639
  %173 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10641
  %call293 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %172, %struct.bitmap_head_def* %173), !dbg !10642
  %conv = zext i8 %call293 to i32, !dbg !10642
  %tobool294 = icmp ne i32 %conv, 0, !dbg !10642
  br i1 %tobool294, label %if.then304, label %lor.lhs.false295, !dbg !10643

lor.lhs.false295:                                 ; preds = %for.end292
  %174 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_live, align 8, !dbg !10644
  %175 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10645
  %call296 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %174, %struct.bitmap_head_def* %175), !dbg !10646
  %conv297 = zext i8 %call296 to i32, !dbg !10646
  %tobool298 = icmp ne i32 %conv297, 0, !dbg !10646
  br i1 %tobool298, label %if.then304, label %lor.lhs.false299, !dbg !10647

lor.lhs.false299:                                 ; preds = %lor.lhs.false295
  %176 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_set, align 8, !dbg !10648
  %177 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10649
  %call300 = call %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def* %177), !dbg !10650
  %call301 = call zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def* %176, %struct.bitmap_head_def* %call300), !dbg !10651
  %conv302 = zext i8 %call301 to i32, !dbg !10651
  %tobool303 = icmp ne i32 %conv302, 0, !dbg !10651
  br i1 %tobool303, label %if.then304, label %if.end305, !dbg !10652

if.then304:                                       ; preds = %lor.lhs.false299, %lor.lhs.false295, %for.end292
  store i32 1, i32* %fail, align 4, !dbg !10653
  br label %if.end305, !dbg !10654

if.end305:                                        ; preds = %if.then304, %lor.lhs.false299
  %178 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10655
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %178), !dbg !10655
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %merge_set, align 8, !dbg !10655
  %179 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_live, align 8, !dbg !10656
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %179), !dbg !10656
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %test_live, align 8, !dbg !10656
  %180 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %test_set, align 8, !dbg !10657
  call void @bitmap_obstack_free(%struct.bitmap_head_def* %180), !dbg !10657
  store %struct.bitmap_head_def* null, %struct.bitmap_head_def** %test_set, align 8, !dbg !10657
  %181 = load i32, i32* %fail, align 4, !dbg !10658
  %tobool306 = icmp ne i32 %181, 0, !dbg !10658
  br i1 %tobool306, label %if.then307, label %if.end308, !dbg !10660

if.then307:                                       ; preds = %if.end305
  store i32 0, i32* %retval, align 4, !dbg !10661
  br label %return, !dbg !10661

if.end308:                                        ; preds = %if.end305
  br label %if.end309, !dbg !10662

if.end309:                                        ; preds = %if.end308, %if.end125
  br label %no_body, !dbg !10663

no_body:                                          ; preds = %if.end309, %if.then59, %if.then34
  call void @llvm.dbg.label(metadata !10664), !dbg !10665
  %182 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10666
  %u310 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %182, i32 0, i32 1, !dbg !10666
  %fld311 = bitcast %union.u* %u310 to [1 x %union.rtunion_def]*, !dbg !10666
  %arrayidx312 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld311, i64 0, i64 8, !dbg !10666
  %rt_rtx313 = bitcast %union.rtunion_def* %arrayidx312 to %struct.rtx_def**, !dbg !10666
  %183 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx313, align 8, !dbg !10666
  store %struct.rtx_def* %183, %struct.rtx_def** %old_dest, align 8, !dbg !10667
  %184 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb.addr, align 8, !dbg !10668
  %185 = load %struct.basic_block_def*, %struct.basic_block_def** %new_dest.addr, align 8, !dbg !10670
  %cmp314 = icmp ne %struct.basic_block_def* %184, %185, !dbg !10671
  br i1 %cmp314, label %if.then316, label %if.end325, !dbg !10672

if.then316:                                       ; preds = %no_body
  %186 = load %struct.basic_block_def*, %struct.basic_block_def** %new_dest.addr, align 8, !dbg !10673
  %call317 = call %struct.rtx_def* @block_label(%struct.basic_block_def* %186), !dbg !10675
  store %struct.rtx_def* %call317, %struct.rtx_def** %new_label, align 8, !dbg !10676
  %187 = load i32, i32* %reversep.addr, align 4, !dbg !10677
  %tobool318 = icmp ne i32 %187, 0, !dbg !10677
  br i1 %tobool318, label %cond.true, label %cond.false, !dbg !10679

cond.true:                                        ; preds = %if.then316
  %188 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10680
  %189 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !10681
  %call319 = call i32 @invert_jump_1(%struct.rtx_def* %188, %struct.rtx_def* %189), !dbg !10682
  %tobool320 = icmp ne i32 %call319, 0, !dbg !10682
  br i1 %tobool320, label %if.end324, label %if.then323, !dbg !10677

cond.false:                                       ; preds = %if.then316
  %190 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10683
  %191 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !10684
  %call321 = call i32 @redirect_jump_1(%struct.rtx_def* %190, %struct.rtx_def* %191), !dbg !10685
  %tobool322 = icmp ne i32 %call321, 0, !dbg !10685
  br i1 %tobool322, label %if.end324, label %if.then323, !dbg !10679

if.then323:                                       ; preds = %cond.false, %cond.true
  br label %cancel, !dbg !10686

if.end324:                                        ; preds = %cond.false, %cond.true
  br label %if.end325, !dbg !10687

if.end325:                                        ; preds = %if.end324, %no_body
  %192 = load i32, i32* %n_validated_changes, align 4, !dbg !10688
  %call326 = call i32 @verify_changes(i32 %192), !dbg !10690
  %tobool327 = icmp ne i32 %call326, 0, !dbg !10690
  br i1 %tobool327, label %if.then328, label %if.else329, !dbg !10691

if.then328:                                       ; preds = %if.end325
  call void @confirm_change_group(), !dbg !10692
  br label %if.end330, !dbg !10692

if.else329:                                       ; preds = %if.end325
  br label %cancel, !dbg !10693

if.end330:                                        ; preds = %if.then328
  %193 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb.addr, align 8, !dbg !10694
  %194 = load %struct.basic_block_def*, %struct.basic_block_def** %new_dest.addr, align 8, !dbg !10696
  %cmp331 = icmp ne %struct.basic_block_def* %193, %194, !dbg !10697
  br i1 %cmp331, label %if.then333, label %if.end649, !dbg !10698

if.then333:                                       ; preds = %if.end330
  %195 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10699
  %196 = load %struct.rtx_def*, %struct.rtx_def** %old_dest, align 8, !dbg !10701
  %197 = load %struct.rtx_def*, %struct.rtx_def** %new_label, align 8, !dbg !10702
  %198 = load i32, i32* %reversep.addr, align 4, !dbg !10703
  call void @redirect_jump_2(%struct.rtx_def* %195, %struct.rtx_def* %196, %struct.rtx_def* %197, i32 0, i32 %198), !dbg !10704
  %199 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %199, i32 0, i32 1, !dbg !10705
  %200 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs, align 8, !dbg !10705
  %tobool334 = icmp ne %struct.VEC_edge_gc* %200, null, !dbg !10705
  br i1 %tobool334, label %cond.true335, label %cond.false338, !dbg !10705

cond.true335:                                     ; preds = %if.then333
  %201 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs336 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %201, i32 0, i32 1, !dbg !10705
  %202 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs336, align 8, !dbg !10705
  %base337 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %202, i32 0, i32 0, !dbg !10705
  br label %cond.end, !dbg !10705

cond.false338:                                    ; preds = %if.then333
  br label %cond.end, !dbg !10705

cond.end:                                         ; preds = %cond.false338, %cond.true335
  %cond339 = phi %struct.VEC_edge_base* [ %base337, %cond.true335 ], [ null, %cond.false338 ], !dbg !10705
  %call340 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond339, i32 0), !dbg !10705
  %flags = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call340, i32 0, i32 7, !dbg !10705
  %203 = load i32, i32* %flags, align 8, !dbg !10705
  %and = and i32 %203, 1, !dbg !10705
  %tobool341 = icmp ne i32 %and, 0, !dbg !10705
  br i1 %tobool341, label %cond.true342, label %cond.false352, !dbg !10705

cond.true342:                                     ; preds = %cond.end
  %204 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs343 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %204, i32 0, i32 1, !dbg !10705
  %205 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs343, align 8, !dbg !10705
  %tobool344 = icmp ne %struct.VEC_edge_gc* %205, null, !dbg !10705
  br i1 %tobool344, label %cond.true345, label %cond.false348, !dbg !10705

cond.true345:                                     ; preds = %cond.true342
  %206 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs346 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %206, i32 0, i32 1, !dbg !10705
  %207 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs346, align 8, !dbg !10705
  %base347 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %207, i32 0, i32 0, !dbg !10705
  br label %cond.end349, !dbg !10705

cond.false348:                                    ; preds = %cond.true342
  br label %cond.end349, !dbg !10705

cond.end349:                                      ; preds = %cond.false348, %cond.true345
  %cond350 = phi %struct.VEC_edge_base* [ %base347, %cond.true345 ], [ null, %cond.false348 ], !dbg !10705
  %call351 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond350, i32 1), !dbg !10705
  br label %cond.end362, !dbg !10705

cond.false352:                                    ; preds = %cond.end
  %208 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs353 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %208, i32 0, i32 1, !dbg !10705
  %209 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs353, align 8, !dbg !10705
  %tobool354 = icmp ne %struct.VEC_edge_gc* %209, null, !dbg !10705
  br i1 %tobool354, label %cond.true355, label %cond.false358, !dbg !10705

cond.true355:                                     ; preds = %cond.false352
  %210 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10705
  %succs356 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %210, i32 0, i32 1, !dbg !10705
  %211 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs356, align 8, !dbg !10705
  %base357 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %211, i32 0, i32 0, !dbg !10705
  br label %cond.end359, !dbg !10705

cond.false358:                                    ; preds = %cond.false352
  br label %cond.end359, !dbg !10705

cond.end359:                                      ; preds = %cond.false358, %cond.true355
  %cond360 = phi %struct.VEC_edge_base* [ %base357, %cond.true355 ], [ null, %cond.false358 ], !dbg !10705
  %call361 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond360, i32 0), !dbg !10705
  br label %cond.end362, !dbg !10705

cond.end362:                                      ; preds = %cond.end359, %cond.end349
  %cond363 = phi %struct.edge_def* [ %call351, %cond.end349 ], [ %call361, %cond.end359 ], !dbg !10705
  %212 = load %struct.basic_block_def*, %struct.basic_block_def** %new_dest.addr, align 8, !dbg !10706
  call void @redirect_edge_succ(%struct.edge_def* %cond363, %struct.basic_block_def* %212), !dbg !10707
  %213 = load i32, i32* %reversep.addr, align 4, !dbg !10708
  %tobool364 = icmp ne i32 %213, 0, !dbg !10708
  br i1 %tobool364, label %if.then365, label %if.end648, !dbg !10710

if.then365:                                       ; preds = %cond.end362
  call void @llvm.dbg.declare(metadata i64* %count, metadata !10711, metadata !DIExpression()), !dbg !10713
  call void @llvm.dbg.declare(metadata i64* %probability, metadata !10714, metadata !DIExpression()), !dbg !10715
  %214 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs366 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %214, i32 0, i32 1, !dbg !10716
  %215 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs366, align 8, !dbg !10716
  %tobool367 = icmp ne %struct.VEC_edge_gc* %215, null, !dbg !10716
  br i1 %tobool367, label %cond.true368, label %cond.false371, !dbg !10716

cond.true368:                                     ; preds = %if.then365
  %216 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs369 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %216, i32 0, i32 1, !dbg !10716
  %217 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs369, align 8, !dbg !10716
  %base370 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %217, i32 0, i32 0, !dbg !10716
  br label %cond.end372, !dbg !10716

cond.false371:                                    ; preds = %if.then365
  br label %cond.end372, !dbg !10716

cond.end372:                                      ; preds = %cond.false371, %cond.true368
  %cond373 = phi %struct.VEC_edge_base* [ %base370, %cond.true368 ], [ null, %cond.false371 ], !dbg !10716
  %call374 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond373, i32 0), !dbg !10716
  %flags375 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call374, i32 0, i32 7, !dbg !10716
  %218 = load i32, i32* %flags375, align 8, !dbg !10716
  %and376 = and i32 %218, 1, !dbg !10716
  %tobool377 = icmp ne i32 %and376, 0, !dbg !10716
  br i1 %tobool377, label %cond.true378, label %cond.false388, !dbg !10716

cond.true378:                                     ; preds = %cond.end372
  %219 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs379 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %219, i32 0, i32 1, !dbg !10716
  %220 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs379, align 8, !dbg !10716
  %tobool380 = icmp ne %struct.VEC_edge_gc* %220, null, !dbg !10716
  br i1 %tobool380, label %cond.true381, label %cond.false384, !dbg !10716

cond.true381:                                     ; preds = %cond.true378
  %221 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs382 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %221, i32 0, i32 1, !dbg !10716
  %222 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs382, align 8, !dbg !10716
  %base383 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %222, i32 0, i32 0, !dbg !10716
  br label %cond.end385, !dbg !10716

cond.false384:                                    ; preds = %cond.true378
  br label %cond.end385, !dbg !10716

cond.end385:                                      ; preds = %cond.false384, %cond.true381
  %cond386 = phi %struct.VEC_edge_base* [ %base383, %cond.true381 ], [ null, %cond.false384 ], !dbg !10716
  %call387 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond386, i32 1), !dbg !10716
  br label %cond.end398, !dbg !10716

cond.false388:                                    ; preds = %cond.end372
  %223 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs389 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %223, i32 0, i32 1, !dbg !10716
  %224 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs389, align 8, !dbg !10716
  %tobool390 = icmp ne %struct.VEC_edge_gc* %224, null, !dbg !10716
  br i1 %tobool390, label %cond.true391, label %cond.false394, !dbg !10716

cond.true391:                                     ; preds = %cond.false388
  %225 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10716
  %succs392 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %225, i32 0, i32 1, !dbg !10716
  %226 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs392, align 8, !dbg !10716
  %base393 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %226, i32 0, i32 0, !dbg !10716
  br label %cond.end395, !dbg !10716

cond.false394:                                    ; preds = %cond.false388
  br label %cond.end395, !dbg !10716

cond.end395:                                      ; preds = %cond.false394, %cond.true391
  %cond396 = phi %struct.VEC_edge_base* [ %base393, %cond.true391 ], [ null, %cond.false394 ], !dbg !10716
  %call397 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond396, i32 0), !dbg !10716
  br label %cond.end398, !dbg !10716

cond.end398:                                      ; preds = %cond.end395, %cond.end385
  %cond399 = phi %struct.edge_def* [ %call387, %cond.end385 ], [ %call397, %cond.end395 ], !dbg !10716
  %count400 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond399, i32 0, i32 9, !dbg !10717
  %227 = load i64, i64* %count400, align 8, !dbg !10717
  store i64 %227, i64* %count, align 8, !dbg !10718
  %228 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs401 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %228, i32 0, i32 1, !dbg !10719
  %229 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs401, align 8, !dbg !10719
  %tobool402 = icmp ne %struct.VEC_edge_gc* %229, null, !dbg !10719
  br i1 %tobool402, label %cond.true403, label %cond.false406, !dbg !10719

cond.true403:                                     ; preds = %cond.end398
  %230 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs404 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %230, i32 0, i32 1, !dbg !10719
  %231 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs404, align 8, !dbg !10719
  %base405 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %231, i32 0, i32 0, !dbg !10719
  br label %cond.end407, !dbg !10719

cond.false406:                                    ; preds = %cond.end398
  br label %cond.end407, !dbg !10719

cond.end407:                                      ; preds = %cond.false406, %cond.true403
  %cond408 = phi %struct.VEC_edge_base* [ %base405, %cond.true403 ], [ null, %cond.false406 ], !dbg !10719
  %call409 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond408, i32 0), !dbg !10719
  %flags410 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call409, i32 0, i32 7, !dbg !10719
  %232 = load i32, i32* %flags410, align 8, !dbg !10719
  %and411 = and i32 %232, 1, !dbg !10719
  %tobool412 = icmp ne i32 %and411, 0, !dbg !10719
  br i1 %tobool412, label %cond.true413, label %cond.false423, !dbg !10719

cond.true413:                                     ; preds = %cond.end407
  %233 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs414 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %233, i32 0, i32 1, !dbg !10719
  %234 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs414, align 8, !dbg !10719
  %tobool415 = icmp ne %struct.VEC_edge_gc* %234, null, !dbg !10719
  br i1 %tobool415, label %cond.true416, label %cond.false419, !dbg !10719

cond.true416:                                     ; preds = %cond.true413
  %235 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs417 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %235, i32 0, i32 1, !dbg !10719
  %236 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs417, align 8, !dbg !10719
  %base418 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %236, i32 0, i32 0, !dbg !10719
  br label %cond.end420, !dbg !10719

cond.false419:                                    ; preds = %cond.true413
  br label %cond.end420, !dbg !10719

cond.end420:                                      ; preds = %cond.false419, %cond.true416
  %cond421 = phi %struct.VEC_edge_base* [ %base418, %cond.true416 ], [ null, %cond.false419 ], !dbg !10719
  %call422 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond421, i32 0), !dbg !10719
  br label %cond.end433, !dbg !10719

cond.false423:                                    ; preds = %cond.end407
  %237 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs424 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %237, i32 0, i32 1, !dbg !10719
  %238 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs424, align 8, !dbg !10719
  %tobool425 = icmp ne %struct.VEC_edge_gc* %238, null, !dbg !10719
  br i1 %tobool425, label %cond.true426, label %cond.false429, !dbg !10719

cond.true426:                                     ; preds = %cond.false423
  %239 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10719
  %succs427 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %239, i32 0, i32 1, !dbg !10719
  %240 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs427, align 8, !dbg !10719
  %base428 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %240, i32 0, i32 0, !dbg !10719
  br label %cond.end430, !dbg !10719

cond.false429:                                    ; preds = %cond.false423
  br label %cond.end430, !dbg !10719

cond.end430:                                      ; preds = %cond.false429, %cond.true426
  %cond431 = phi %struct.VEC_edge_base* [ %base428, %cond.true426 ], [ null, %cond.false429 ], !dbg !10719
  %call432 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond431, i32 1), !dbg !10719
  br label %cond.end433, !dbg !10719

cond.end433:                                      ; preds = %cond.end430, %cond.end420
  %cond434 = phi %struct.edge_def* [ %call422, %cond.end420 ], [ %call432, %cond.end430 ], !dbg !10719
  %count435 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond434, i32 0, i32 9, !dbg !10720
  %241 = load i64, i64* %count435, align 8, !dbg !10720
  %242 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs436 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %242, i32 0, i32 1, !dbg !10721
  %243 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs436, align 8, !dbg !10721
  %tobool437 = icmp ne %struct.VEC_edge_gc* %243, null, !dbg !10721
  br i1 %tobool437, label %cond.true438, label %cond.false441, !dbg !10721

cond.true438:                                     ; preds = %cond.end433
  %244 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs439 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %244, i32 0, i32 1, !dbg !10721
  %245 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs439, align 8, !dbg !10721
  %base440 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %245, i32 0, i32 0, !dbg !10721
  br label %cond.end442, !dbg !10721

cond.false441:                                    ; preds = %cond.end433
  br label %cond.end442, !dbg !10721

cond.end442:                                      ; preds = %cond.false441, %cond.true438
  %cond443 = phi %struct.VEC_edge_base* [ %base440, %cond.true438 ], [ null, %cond.false441 ], !dbg !10721
  %call444 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond443, i32 0), !dbg !10721
  %flags445 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call444, i32 0, i32 7, !dbg !10721
  %246 = load i32, i32* %flags445, align 8, !dbg !10721
  %and446 = and i32 %246, 1, !dbg !10721
  %tobool447 = icmp ne i32 %and446, 0, !dbg !10721
  br i1 %tobool447, label %cond.true448, label %cond.false458, !dbg !10721

cond.true448:                                     ; preds = %cond.end442
  %247 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs449 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %247, i32 0, i32 1, !dbg !10721
  %248 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs449, align 8, !dbg !10721
  %tobool450 = icmp ne %struct.VEC_edge_gc* %248, null, !dbg !10721
  br i1 %tobool450, label %cond.true451, label %cond.false454, !dbg !10721

cond.true451:                                     ; preds = %cond.true448
  %249 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs452 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %249, i32 0, i32 1, !dbg !10721
  %250 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs452, align 8, !dbg !10721
  %base453 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %250, i32 0, i32 0, !dbg !10721
  br label %cond.end455, !dbg !10721

cond.false454:                                    ; preds = %cond.true448
  br label %cond.end455, !dbg !10721

cond.end455:                                      ; preds = %cond.false454, %cond.true451
  %cond456 = phi %struct.VEC_edge_base* [ %base453, %cond.true451 ], [ null, %cond.false454 ], !dbg !10721
  %call457 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond456, i32 1), !dbg !10721
  br label %cond.end468, !dbg !10721

cond.false458:                                    ; preds = %cond.end442
  %251 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs459 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %251, i32 0, i32 1, !dbg !10721
  %252 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs459, align 8, !dbg !10721
  %tobool460 = icmp ne %struct.VEC_edge_gc* %252, null, !dbg !10721
  br i1 %tobool460, label %cond.true461, label %cond.false464, !dbg !10721

cond.true461:                                     ; preds = %cond.false458
  %253 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10721
  %succs462 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %253, i32 0, i32 1, !dbg !10721
  %254 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs462, align 8, !dbg !10721
  %base463 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %254, i32 0, i32 0, !dbg !10721
  br label %cond.end465, !dbg !10721

cond.false464:                                    ; preds = %cond.false458
  br label %cond.end465, !dbg !10721

cond.end465:                                      ; preds = %cond.false464, %cond.true461
  %cond466 = phi %struct.VEC_edge_base* [ %base463, %cond.true461 ], [ null, %cond.false464 ], !dbg !10721
  %call467 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond466, i32 0), !dbg !10721
  br label %cond.end468, !dbg !10721

cond.end468:                                      ; preds = %cond.end465, %cond.end455
  %cond469 = phi %struct.edge_def* [ %call457, %cond.end455 ], [ %call467, %cond.end465 ], !dbg !10721
  %count470 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond469, i32 0, i32 9, !dbg !10722
  store i64 %241, i64* %count470, align 8, !dbg !10723
  %255 = load i64, i64* %count, align 8, !dbg !10724
  %256 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs471 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %256, i32 0, i32 1, !dbg !10725
  %257 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs471, align 8, !dbg !10725
  %tobool472 = icmp ne %struct.VEC_edge_gc* %257, null, !dbg !10725
  br i1 %tobool472, label %cond.true473, label %cond.false476, !dbg !10725

cond.true473:                                     ; preds = %cond.end468
  %258 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs474 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %258, i32 0, i32 1, !dbg !10725
  %259 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs474, align 8, !dbg !10725
  %base475 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %259, i32 0, i32 0, !dbg !10725
  br label %cond.end477, !dbg !10725

cond.false476:                                    ; preds = %cond.end468
  br label %cond.end477, !dbg !10725

cond.end477:                                      ; preds = %cond.false476, %cond.true473
  %cond478 = phi %struct.VEC_edge_base* [ %base475, %cond.true473 ], [ null, %cond.false476 ], !dbg !10725
  %call479 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond478, i32 0), !dbg !10725
  %flags480 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call479, i32 0, i32 7, !dbg !10725
  %260 = load i32, i32* %flags480, align 8, !dbg !10725
  %and481 = and i32 %260, 1, !dbg !10725
  %tobool482 = icmp ne i32 %and481, 0, !dbg !10725
  br i1 %tobool482, label %cond.true483, label %cond.false493, !dbg !10725

cond.true483:                                     ; preds = %cond.end477
  %261 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs484 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %261, i32 0, i32 1, !dbg !10725
  %262 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs484, align 8, !dbg !10725
  %tobool485 = icmp ne %struct.VEC_edge_gc* %262, null, !dbg !10725
  br i1 %tobool485, label %cond.true486, label %cond.false489, !dbg !10725

cond.true486:                                     ; preds = %cond.true483
  %263 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs487 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %263, i32 0, i32 1, !dbg !10725
  %264 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs487, align 8, !dbg !10725
  %base488 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %264, i32 0, i32 0, !dbg !10725
  br label %cond.end490, !dbg !10725

cond.false489:                                    ; preds = %cond.true483
  br label %cond.end490, !dbg !10725

cond.end490:                                      ; preds = %cond.false489, %cond.true486
  %cond491 = phi %struct.VEC_edge_base* [ %base488, %cond.true486 ], [ null, %cond.false489 ], !dbg !10725
  %call492 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond491, i32 0), !dbg !10725
  br label %cond.end503, !dbg !10725

cond.false493:                                    ; preds = %cond.end477
  %265 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs494 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %265, i32 0, i32 1, !dbg !10725
  %266 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs494, align 8, !dbg !10725
  %tobool495 = icmp ne %struct.VEC_edge_gc* %266, null, !dbg !10725
  br i1 %tobool495, label %cond.true496, label %cond.false499, !dbg !10725

cond.true496:                                     ; preds = %cond.false493
  %267 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10725
  %succs497 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %267, i32 0, i32 1, !dbg !10725
  %268 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs497, align 8, !dbg !10725
  %base498 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %268, i32 0, i32 0, !dbg !10725
  br label %cond.end500, !dbg !10725

cond.false499:                                    ; preds = %cond.false493
  br label %cond.end500, !dbg !10725

cond.end500:                                      ; preds = %cond.false499, %cond.true496
  %cond501 = phi %struct.VEC_edge_base* [ %base498, %cond.true496 ], [ null, %cond.false499 ], !dbg !10725
  %call502 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond501, i32 1), !dbg !10725
  br label %cond.end503, !dbg !10725

cond.end503:                                      ; preds = %cond.end500, %cond.end490
  %cond504 = phi %struct.edge_def* [ %call492, %cond.end490 ], [ %call502, %cond.end500 ], !dbg !10725
  %count505 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond504, i32 0, i32 9, !dbg !10726
  store i64 %255, i64* %count505, align 8, !dbg !10727
  %269 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs506 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %269, i32 0, i32 1, !dbg !10728
  %270 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs506, align 8, !dbg !10728
  %tobool507 = icmp ne %struct.VEC_edge_gc* %270, null, !dbg !10728
  br i1 %tobool507, label %cond.true508, label %cond.false511, !dbg !10728

cond.true508:                                     ; preds = %cond.end503
  %271 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs509 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %271, i32 0, i32 1, !dbg !10728
  %272 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs509, align 8, !dbg !10728
  %base510 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %272, i32 0, i32 0, !dbg !10728
  br label %cond.end512, !dbg !10728

cond.false511:                                    ; preds = %cond.end503
  br label %cond.end512, !dbg !10728

cond.end512:                                      ; preds = %cond.false511, %cond.true508
  %cond513 = phi %struct.VEC_edge_base* [ %base510, %cond.true508 ], [ null, %cond.false511 ], !dbg !10728
  %call514 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond513, i32 0), !dbg !10728
  %flags515 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call514, i32 0, i32 7, !dbg !10728
  %273 = load i32, i32* %flags515, align 8, !dbg !10728
  %and516 = and i32 %273, 1, !dbg !10728
  %tobool517 = icmp ne i32 %and516, 0, !dbg !10728
  br i1 %tobool517, label %cond.true518, label %cond.false528, !dbg !10728

cond.true518:                                     ; preds = %cond.end512
  %274 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs519 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %274, i32 0, i32 1, !dbg !10728
  %275 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs519, align 8, !dbg !10728
  %tobool520 = icmp ne %struct.VEC_edge_gc* %275, null, !dbg !10728
  br i1 %tobool520, label %cond.true521, label %cond.false524, !dbg !10728

cond.true521:                                     ; preds = %cond.true518
  %276 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs522 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %276, i32 0, i32 1, !dbg !10728
  %277 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs522, align 8, !dbg !10728
  %base523 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %277, i32 0, i32 0, !dbg !10728
  br label %cond.end525, !dbg !10728

cond.false524:                                    ; preds = %cond.true518
  br label %cond.end525, !dbg !10728

cond.end525:                                      ; preds = %cond.false524, %cond.true521
  %cond526 = phi %struct.VEC_edge_base* [ %base523, %cond.true521 ], [ null, %cond.false524 ], !dbg !10728
  %call527 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond526, i32 1), !dbg !10728
  br label %cond.end538, !dbg !10728

cond.false528:                                    ; preds = %cond.end512
  %278 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs529 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %278, i32 0, i32 1, !dbg !10728
  %279 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs529, align 8, !dbg !10728
  %tobool530 = icmp ne %struct.VEC_edge_gc* %279, null, !dbg !10728
  br i1 %tobool530, label %cond.true531, label %cond.false534, !dbg !10728

cond.true531:                                     ; preds = %cond.false528
  %280 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10728
  %succs532 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %280, i32 0, i32 1, !dbg !10728
  %281 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs532, align 8, !dbg !10728
  %base533 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %281, i32 0, i32 0, !dbg !10728
  br label %cond.end535, !dbg !10728

cond.false534:                                    ; preds = %cond.false528
  br label %cond.end535, !dbg !10728

cond.end535:                                      ; preds = %cond.false534, %cond.true531
  %cond536 = phi %struct.VEC_edge_base* [ %base533, %cond.true531 ], [ null, %cond.false534 ], !dbg !10728
  %call537 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond536, i32 0), !dbg !10728
  br label %cond.end538, !dbg !10728

cond.end538:                                      ; preds = %cond.end535, %cond.end525
  %cond539 = phi %struct.edge_def* [ %call527, %cond.end525 ], [ %call537, %cond.end535 ], !dbg !10728
  %probability540 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond539, i32 0, i32 8, !dbg !10729
  %282 = load i32, i32* %probability540, align 4, !dbg !10729
  %conv541 = sext i32 %282 to i64, !dbg !10728
  store i64 %conv541, i64* %probability, align 8, !dbg !10730
  %283 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs542 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %283, i32 0, i32 1, !dbg !10731
  %284 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs542, align 8, !dbg !10731
  %tobool543 = icmp ne %struct.VEC_edge_gc* %284, null, !dbg !10731
  br i1 %tobool543, label %cond.true544, label %cond.false547, !dbg !10731

cond.true544:                                     ; preds = %cond.end538
  %285 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs545 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %285, i32 0, i32 1, !dbg !10731
  %286 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs545, align 8, !dbg !10731
  %base546 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %286, i32 0, i32 0, !dbg !10731
  br label %cond.end548, !dbg !10731

cond.false547:                                    ; preds = %cond.end538
  br label %cond.end548, !dbg !10731

cond.end548:                                      ; preds = %cond.false547, %cond.true544
  %cond549 = phi %struct.VEC_edge_base* [ %base546, %cond.true544 ], [ null, %cond.false547 ], !dbg !10731
  %call550 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond549, i32 0), !dbg !10731
  %flags551 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call550, i32 0, i32 7, !dbg !10731
  %287 = load i32, i32* %flags551, align 8, !dbg !10731
  %and552 = and i32 %287, 1, !dbg !10731
  %tobool553 = icmp ne i32 %and552, 0, !dbg !10731
  br i1 %tobool553, label %cond.true554, label %cond.false564, !dbg !10731

cond.true554:                                     ; preds = %cond.end548
  %288 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs555 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %288, i32 0, i32 1, !dbg !10731
  %289 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs555, align 8, !dbg !10731
  %tobool556 = icmp ne %struct.VEC_edge_gc* %289, null, !dbg !10731
  br i1 %tobool556, label %cond.true557, label %cond.false560, !dbg !10731

cond.true557:                                     ; preds = %cond.true554
  %290 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs558 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %290, i32 0, i32 1, !dbg !10731
  %291 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs558, align 8, !dbg !10731
  %base559 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %291, i32 0, i32 0, !dbg !10731
  br label %cond.end561, !dbg !10731

cond.false560:                                    ; preds = %cond.true554
  br label %cond.end561, !dbg !10731

cond.end561:                                      ; preds = %cond.false560, %cond.true557
  %cond562 = phi %struct.VEC_edge_base* [ %base559, %cond.true557 ], [ null, %cond.false560 ], !dbg !10731
  %call563 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond562, i32 0), !dbg !10731
  br label %cond.end574, !dbg !10731

cond.false564:                                    ; preds = %cond.end548
  %292 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs565 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %292, i32 0, i32 1, !dbg !10731
  %293 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs565, align 8, !dbg !10731
  %tobool566 = icmp ne %struct.VEC_edge_gc* %293, null, !dbg !10731
  br i1 %tobool566, label %cond.true567, label %cond.false570, !dbg !10731

cond.true567:                                     ; preds = %cond.false564
  %294 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10731
  %succs568 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %294, i32 0, i32 1, !dbg !10731
  %295 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs568, align 8, !dbg !10731
  %base569 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %295, i32 0, i32 0, !dbg !10731
  br label %cond.end571, !dbg !10731

cond.false570:                                    ; preds = %cond.false564
  br label %cond.end571, !dbg !10731

cond.end571:                                      ; preds = %cond.false570, %cond.true567
  %cond572 = phi %struct.VEC_edge_base* [ %base569, %cond.true567 ], [ null, %cond.false570 ], !dbg !10731
  %call573 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond572, i32 1), !dbg !10731
  br label %cond.end574, !dbg !10731

cond.end574:                                      ; preds = %cond.end571, %cond.end561
  %cond575 = phi %struct.edge_def* [ %call563, %cond.end561 ], [ %call573, %cond.end571 ], !dbg !10731
  %probability576 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond575, i32 0, i32 8, !dbg !10732
  %296 = load i32, i32* %probability576, align 4, !dbg !10732
  %297 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs577 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %297, i32 0, i32 1, !dbg !10733
  %298 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs577, align 8, !dbg !10733
  %tobool578 = icmp ne %struct.VEC_edge_gc* %298, null, !dbg !10733
  br i1 %tobool578, label %cond.true579, label %cond.false582, !dbg !10733

cond.true579:                                     ; preds = %cond.end574
  %299 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs580 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %299, i32 0, i32 1, !dbg !10733
  %300 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs580, align 8, !dbg !10733
  %base581 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %300, i32 0, i32 0, !dbg !10733
  br label %cond.end583, !dbg !10733

cond.false582:                                    ; preds = %cond.end574
  br label %cond.end583, !dbg !10733

cond.end583:                                      ; preds = %cond.false582, %cond.true579
  %cond584 = phi %struct.VEC_edge_base* [ %base581, %cond.true579 ], [ null, %cond.false582 ], !dbg !10733
  %call585 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond584, i32 0), !dbg !10733
  %flags586 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call585, i32 0, i32 7, !dbg !10733
  %301 = load i32, i32* %flags586, align 8, !dbg !10733
  %and587 = and i32 %301, 1, !dbg !10733
  %tobool588 = icmp ne i32 %and587, 0, !dbg !10733
  br i1 %tobool588, label %cond.true589, label %cond.false599, !dbg !10733

cond.true589:                                     ; preds = %cond.end583
  %302 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs590 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %302, i32 0, i32 1, !dbg !10733
  %303 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs590, align 8, !dbg !10733
  %tobool591 = icmp ne %struct.VEC_edge_gc* %303, null, !dbg !10733
  br i1 %tobool591, label %cond.true592, label %cond.false595, !dbg !10733

cond.true592:                                     ; preds = %cond.true589
  %304 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs593 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %304, i32 0, i32 1, !dbg !10733
  %305 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs593, align 8, !dbg !10733
  %base594 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %305, i32 0, i32 0, !dbg !10733
  br label %cond.end596, !dbg !10733

cond.false595:                                    ; preds = %cond.true589
  br label %cond.end596, !dbg !10733

cond.end596:                                      ; preds = %cond.false595, %cond.true592
  %cond597 = phi %struct.VEC_edge_base* [ %base594, %cond.true592 ], [ null, %cond.false595 ], !dbg !10733
  %call598 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond597, i32 1), !dbg !10733
  br label %cond.end609, !dbg !10733

cond.false599:                                    ; preds = %cond.end583
  %306 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs600 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %306, i32 0, i32 1, !dbg !10733
  %307 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs600, align 8, !dbg !10733
  %tobool601 = icmp ne %struct.VEC_edge_gc* %307, null, !dbg !10733
  br i1 %tobool601, label %cond.true602, label %cond.false605, !dbg !10733

cond.true602:                                     ; preds = %cond.false599
  %308 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10733
  %succs603 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %308, i32 0, i32 1, !dbg !10733
  %309 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs603, align 8, !dbg !10733
  %base604 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %309, i32 0, i32 0, !dbg !10733
  br label %cond.end606, !dbg !10733

cond.false605:                                    ; preds = %cond.false599
  br label %cond.end606, !dbg !10733

cond.end606:                                      ; preds = %cond.false605, %cond.true602
  %cond607 = phi %struct.VEC_edge_base* [ %base604, %cond.true602 ], [ null, %cond.false605 ], !dbg !10733
  %call608 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond607, i32 0), !dbg !10733
  br label %cond.end609, !dbg !10733

cond.end609:                                      ; preds = %cond.end606, %cond.end596
  %cond610 = phi %struct.edge_def* [ %call598, %cond.end596 ], [ %call608, %cond.end606 ], !dbg !10733
  %probability611 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond610, i32 0, i32 8, !dbg !10734
  store i32 %296, i32* %probability611, align 4, !dbg !10735
  %310 = load i64, i64* %probability, align 8, !dbg !10736
  %conv612 = trunc i64 %310 to i32, !dbg !10736
  %311 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs613 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %311, i32 0, i32 1, !dbg !10737
  %312 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs613, align 8, !dbg !10737
  %tobool614 = icmp ne %struct.VEC_edge_gc* %312, null, !dbg !10737
  br i1 %tobool614, label %cond.true615, label %cond.false618, !dbg !10737

cond.true615:                                     ; preds = %cond.end609
  %313 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs616 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %313, i32 0, i32 1, !dbg !10737
  %314 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs616, align 8, !dbg !10737
  %base617 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %314, i32 0, i32 0, !dbg !10737
  br label %cond.end619, !dbg !10737

cond.false618:                                    ; preds = %cond.end609
  br label %cond.end619, !dbg !10737

cond.end619:                                      ; preds = %cond.false618, %cond.true615
  %cond620 = phi %struct.VEC_edge_base* [ %base617, %cond.true615 ], [ null, %cond.false618 ], !dbg !10737
  %call621 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond620, i32 0), !dbg !10737
  %flags622 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call621, i32 0, i32 7, !dbg !10737
  %315 = load i32, i32* %flags622, align 8, !dbg !10737
  %and623 = and i32 %315, 1, !dbg !10737
  %tobool624 = icmp ne i32 %and623, 0, !dbg !10737
  br i1 %tobool624, label %cond.true625, label %cond.false635, !dbg !10737

cond.true625:                                     ; preds = %cond.end619
  %316 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs626 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %316, i32 0, i32 1, !dbg !10737
  %317 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs626, align 8, !dbg !10737
  %tobool627 = icmp ne %struct.VEC_edge_gc* %317, null, !dbg !10737
  br i1 %tobool627, label %cond.true628, label %cond.false631, !dbg !10737

cond.true628:                                     ; preds = %cond.true625
  %318 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs629 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %318, i32 0, i32 1, !dbg !10737
  %319 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs629, align 8, !dbg !10737
  %base630 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %319, i32 0, i32 0, !dbg !10737
  br label %cond.end632, !dbg !10737

cond.false631:                                    ; preds = %cond.true625
  br label %cond.end632, !dbg !10737

cond.end632:                                      ; preds = %cond.false631, %cond.true628
  %cond633 = phi %struct.VEC_edge_base* [ %base630, %cond.true628 ], [ null, %cond.false631 ], !dbg !10737
  %call634 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond633, i32 0), !dbg !10737
  br label %cond.end645, !dbg !10737

cond.false635:                                    ; preds = %cond.end619
  %320 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs636 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %320, i32 0, i32 1, !dbg !10737
  %321 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs636, align 8, !dbg !10737
  %tobool637 = icmp ne %struct.VEC_edge_gc* %321, null, !dbg !10737
  br i1 %tobool637, label %cond.true638, label %cond.false641, !dbg !10737

cond.true638:                                     ; preds = %cond.false635
  %322 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10737
  %succs639 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %322, i32 0, i32 1, !dbg !10737
  %323 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs639, align 8, !dbg !10737
  %base640 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %323, i32 0, i32 0, !dbg !10737
  br label %cond.end642, !dbg !10737

cond.false641:                                    ; preds = %cond.false635
  br label %cond.end642, !dbg !10737

cond.end642:                                      ; preds = %cond.false641, %cond.true638
  %cond643 = phi %struct.VEC_edge_base* [ %base640, %cond.true638 ], [ null, %cond.false641 ], !dbg !10737
  %call644 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond643, i32 1), !dbg !10737
  br label %cond.end645, !dbg !10737

cond.end645:                                      ; preds = %cond.end642, %cond.end632
  %cond646 = phi %struct.edge_def* [ %call634, %cond.end632 ], [ %call644, %cond.end642 ], !dbg !10737
  %probability647 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %cond646, i32 0, i32 8, !dbg !10738
  store i32 %conv612, i32* %probability647, align 4, !dbg !10739
  %324 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10740
  call void @update_br_prob_note(%struct.basic_block_def* %324), !dbg !10741
  br label %if.end648, !dbg !10742

if.end648:                                        ; preds = %cond.end645, %cond.end362
  br label %if.end649, !dbg !10743

if.end649:                                        ; preds = %if.end648, %if.end330
  %325 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10744
  %cmp650 = icmp ne %struct.rtx_def* %325, null, !dbg !10746
  br i1 %cmp650, label %if.then652, label %if.end767, !dbg !10747

if.then652:                                       ; preds = %if.end649
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %insn653, metadata !10748, metadata !DIExpression()), !dbg !10750
  %326 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10751
  %327 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10753
  %il654 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %327, i32 0, i32 7, !dbg !10753
  %rtl655 = bitcast %union.basic_block_il_dependent* %il654 to %struct.rtl_bb_info**, !dbg !10753
  %328 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl655, align 8, !dbg !10753
  %end_656 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %328, i32 0, i32 1, !dbg !10753
  %329 = load %struct.rtx_def*, %struct.rtx_def** %end_656, align 8, !dbg !10753
  %cmp657 = icmp eq %struct.rtx_def* %326, %329, !dbg !10754
  br i1 %cmp657, label %if.then659, label %if.end667, !dbg !10755

if.then659:                                       ; preds = %if.then652
  %330 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10756
  %u660 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %330, i32 0, i32 1, !dbg !10756
  %fld661 = bitcast %union.u* %u660 to [1 x %union.rtunion_def]*, !dbg !10756
  %arrayidx662 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld661, i64 0, i64 1, !dbg !10756
  %rt_rtx663 = bitcast %union.rtunion_def* %arrayidx662 to %struct.rtx_def**, !dbg !10756
  %331 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx663, align 8, !dbg !10756
  %332 = load %struct.basic_block_def*, %struct.basic_block_def** %merge_bb.addr, align 8, !dbg !10757
  %il664 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %332, i32 0, i32 7, !dbg !10757
  %rtl665 = bitcast %union.basic_block_il_dependent* %il664 to %struct.rtl_bb_info**, !dbg !10757
  %333 = load %struct.rtl_bb_info*, %struct.rtl_bb_info** %rtl665, align 8, !dbg !10757
  %end_666 = getelementptr inbounds %struct.rtl_bb_info, %struct.rtl_bb_info* %333, i32 0, i32 1, !dbg !10757
  store %struct.rtx_def* %331, %struct.rtx_def** %end_666, align 8, !dbg !10758
  br label %if.end667, !dbg !10757

if.end667:                                        ; preds = %if.then659, %if.then652
  %334 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10759
  store %struct.rtx_def* %334, %struct.rtx_def** %insn653, align 8, !dbg !10760
  br label %do.body, !dbg !10761

do.body:                                          ; preds = %land.end762, %if.end667
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %note, metadata !10762, metadata !DIExpression()), !dbg !10764
  call void @llvm.dbg.declare(metadata %struct.rtx_def** %set, metadata !10765, metadata !DIExpression()), !dbg !10766
  %335 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10767
  %336 = bitcast %struct.rtx_def* %335 to i32*, !dbg !10767
  %bf.load668 = load i32, i32* %336, align 8, !dbg !10767
  %bf.clear669 = and i32 %bf.load668, 65535, !dbg !10767
  %cmp670 = icmp eq i32 %bf.clear669, 8, !dbg !10767
  br i1 %cmp670, label %if.end688, label %lor.lhs.false672, !dbg !10767

lor.lhs.false672:                                 ; preds = %do.body
  %337 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10767
  %338 = bitcast %struct.rtx_def* %337 to i32*, !dbg !10767
  %bf.load673 = load i32, i32* %338, align 8, !dbg !10767
  %bf.clear674 = and i32 %bf.load673, 65535, !dbg !10767
  %cmp675 = icmp eq i32 %bf.clear674, 7, !dbg !10767
  br i1 %cmp675, label %if.end688, label %lor.lhs.false677, !dbg !10767

lor.lhs.false677:                                 ; preds = %lor.lhs.false672
  %339 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10767
  %340 = bitcast %struct.rtx_def* %339 to i32*, !dbg !10767
  %bf.load678 = load i32, i32* %340, align 8, !dbg !10767
  %bf.clear679 = and i32 %bf.load678, 65535, !dbg !10767
  %cmp680 = icmp eq i32 %bf.clear679, 9, !dbg !10767
  br i1 %cmp680, label %if.end688, label %lor.lhs.false682, !dbg !10767

lor.lhs.false682:                                 ; preds = %lor.lhs.false677
  %341 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10767
  %342 = bitcast %struct.rtx_def* %341 to i32*, !dbg !10767
  %bf.load683 = load i32, i32* %342, align 8, !dbg !10767
  %bf.clear684 = and i32 %bf.load683, 65535, !dbg !10767
  %cmp685 = icmp eq i32 %bf.clear684, 10, !dbg !10767
  br i1 %cmp685, label %if.end688, label %if.then687, !dbg !10769

if.then687:                                       ; preds = %lor.lhs.false682
  br label %do.cond, !dbg !10770

if.end688:                                        ; preds = %lor.lhs.false682, %lor.lhs.false677, %lor.lhs.false672, %do.body
  %343 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10771
  %call689 = call %struct.rtx_def* @find_reg_note(%struct.rtx_def* %343, i32 4, %struct.rtx_def* null), !dbg !10772
  store %struct.rtx_def* %call689, %struct.rtx_def** %note, align 8, !dbg !10773
  %344 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !10774
  %tobool690 = icmp ne %struct.rtx_def* %344, null, !dbg !10774
  br i1 %tobool690, label %if.end692, label %if.then691, !dbg !10776

if.then691:                                       ; preds = %if.end688
  br label %do.cond, !dbg !10777

if.end692:                                        ; preds = %if.end688
  %345 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %346 = bitcast %struct.rtx_def* %345 to i32*, !dbg !10778
  %bf.load693 = load i32, i32* %346, align 8, !dbg !10778
  %bf.clear694 = and i32 %bf.load693, 65535, !dbg !10778
  %cmp695 = icmp eq i32 %bf.clear694, 8, !dbg !10778
  br i1 %cmp695, label %cond.true712, label %lor.lhs.false697, !dbg !10778

lor.lhs.false697:                                 ; preds = %if.end692
  %347 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %348 = bitcast %struct.rtx_def* %347 to i32*, !dbg !10778
  %bf.load698 = load i32, i32* %348, align 8, !dbg !10778
  %bf.clear699 = and i32 %bf.load698, 65535, !dbg !10778
  %cmp700 = icmp eq i32 %bf.clear699, 7, !dbg !10778
  br i1 %cmp700, label %cond.true712, label %lor.lhs.false702, !dbg !10778

lor.lhs.false702:                                 ; preds = %lor.lhs.false697
  %349 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %350 = bitcast %struct.rtx_def* %349 to i32*, !dbg !10778
  %bf.load703 = load i32, i32* %350, align 8, !dbg !10778
  %bf.clear704 = and i32 %bf.load703, 65535, !dbg !10778
  %cmp705 = icmp eq i32 %bf.clear704, 9, !dbg !10778
  br i1 %cmp705, label %cond.true712, label %lor.lhs.false707, !dbg !10778

lor.lhs.false707:                                 ; preds = %lor.lhs.false702
  %351 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %352 = bitcast %struct.rtx_def* %351 to i32*, !dbg !10778
  %bf.load708 = load i32, i32* %352, align 8, !dbg !10778
  %bf.clear709 = and i32 %bf.load708, 65535, !dbg !10778
  %cmp710 = icmp eq i32 %bf.clear709, 10, !dbg !10778
  br i1 %cmp710, label %cond.true712, label %cond.false734, !dbg !10778

cond.true712:                                     ; preds = %lor.lhs.false707, %lor.lhs.false702, %lor.lhs.false697, %if.end692
  %353 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %u713 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %353, i32 0, i32 1, !dbg !10778
  %fld714 = bitcast %union.u* %u713 to [1 x %union.rtunion_def]*, !dbg !10778
  %arrayidx715 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld714, i64 0, i64 5, !dbg !10778
  %rt_rtx716 = bitcast %union.rtunion_def* %arrayidx715 to %struct.rtx_def**, !dbg !10778
  %354 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx716, align 8, !dbg !10778
  %355 = bitcast %struct.rtx_def* %354 to i32*, !dbg !10778
  %bf.load717 = load i32, i32* %355, align 8, !dbg !10778
  %bf.clear718 = and i32 %bf.load717, 65535, !dbg !10778
  %cmp719 = icmp eq i32 %bf.clear718, 23, !dbg !10778
  br i1 %cmp719, label %cond.true721, label %cond.false726, !dbg !10778

cond.true721:                                     ; preds = %cond.true712
  %356 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %u722 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %356, i32 0, i32 1, !dbg !10778
  %fld723 = bitcast %union.u* %u722 to [1 x %union.rtunion_def]*, !dbg !10778
  %arrayidx724 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld723, i64 0, i64 5, !dbg !10778
  %rt_rtx725 = bitcast %union.rtunion_def* %arrayidx724 to %struct.rtx_def**, !dbg !10778
  %357 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx725, align 8, !dbg !10778
  br label %cond.end732, !dbg !10778

cond.false726:                                    ; preds = %cond.true712
  %358 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %359 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10778
  %u727 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %359, i32 0, i32 1, !dbg !10778
  %fld728 = bitcast %union.u* %u727 to [1 x %union.rtunion_def]*, !dbg !10778
  %arrayidx729 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld728, i64 0, i64 5, !dbg !10778
  %rt_rtx730 = bitcast %union.rtunion_def* %arrayidx729 to %struct.rtx_def**, !dbg !10778
  %360 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx730, align 8, !dbg !10778
  %call731 = call %struct.rtx_def* @single_set_2(%struct.rtx_def* %358, %struct.rtx_def* %360), !dbg !10778
  br label %cond.end732, !dbg !10778

cond.end732:                                      ; preds = %cond.false726, %cond.true721
  %cond733 = phi %struct.rtx_def* [ %357, %cond.true721 ], [ %call731, %cond.false726 ], !dbg !10778
  br label %cond.end735, !dbg !10778

cond.false734:                                    ; preds = %lor.lhs.false707
  br label %cond.end735, !dbg !10778

cond.end735:                                      ; preds = %cond.false734, %cond.end732
  %cond736 = phi %struct.rtx_def* [ %cond733, %cond.end732 ], [ null, %cond.false734 ], !dbg !10778
  store %struct.rtx_def* %cond736, %struct.rtx_def** %set, align 8, !dbg !10779
  %361 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10780
  %tobool737 = icmp ne %struct.rtx_def* %361, null, !dbg !10780
  br i1 %tobool737, label %lor.lhs.false738, label %if.then752, !dbg !10782

lor.lhs.false738:                                 ; preds = %cond.end735
  %362 = load %struct.rtx_def*, %struct.rtx_def** %set, align 8, !dbg !10783
  %u739 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %362, i32 0, i32 1, !dbg !10783
  %fld740 = bitcast %union.u* %u739 to [1 x %union.rtunion_def]*, !dbg !10783
  %arrayidx741 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld740, i64 0, i64 1, !dbg !10783
  %rt_rtx742 = bitcast %union.rtunion_def* %arrayidx741 to %struct.rtx_def**, !dbg !10783
  %363 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx742, align 8, !dbg !10783
  %call743 = call i32 @function_invariant_p(%struct.rtx_def* %363), !dbg !10784
  %tobool744 = icmp ne i32 %call743, 0, !dbg !10784
  br i1 %tobool744, label %lor.lhs.false745, label %if.then752, !dbg !10785

lor.lhs.false745:                                 ; preds = %lor.lhs.false738
  %364 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !10786
  %u746 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %364, i32 0, i32 1, !dbg !10786
  %fld747 = bitcast %union.u* %u746 to [1 x %union.rtunion_def]*, !dbg !10786
  %arrayidx748 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld747, i64 0, i64 0, !dbg !10786
  %rt_rtx749 = bitcast %union.rtunion_def* %arrayidx748 to %struct.rtx_def**, !dbg !10786
  %365 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx749, align 8, !dbg !10786
  %call750 = call i32 @function_invariant_p(%struct.rtx_def* %365), !dbg !10787
  %tobool751 = icmp ne i32 %call750, 0, !dbg !10787
  br i1 %tobool751, label %if.end753, label %if.then752, !dbg !10788

if.then752:                                       ; preds = %lor.lhs.false745, %lor.lhs.false738, %cond.end735
  %366 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10789
  %367 = load %struct.rtx_def*, %struct.rtx_def** %note, align 8, !dbg !10790
  call void @remove_note(%struct.rtx_def* %366, %struct.rtx_def* %367), !dbg !10791
  br label %if.end753, !dbg !10791

if.end753:                                        ; preds = %if.then752, %lor.lhs.false745
  br label %do.cond, !dbg !10792

do.cond:                                          ; preds = %if.end753, %if.then691, %if.then687
  %368 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10793
  %369 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10794
  %cmp754 = icmp ne %struct.rtx_def* %368, %369, !dbg !10795
  br i1 %cmp754, label %land.rhs756, label %land.end762, !dbg !10796

land.rhs756:                                      ; preds = %do.cond
  %370 = load %struct.rtx_def*, %struct.rtx_def** %insn653, align 8, !dbg !10797
  %u757 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %370, i32 0, i32 1, !dbg !10797
  %fld758 = bitcast %union.u* %u757 to [1 x %union.rtunion_def]*, !dbg !10797
  %arrayidx759 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld758, i64 0, i64 2, !dbg !10797
  %rt_rtx760 = bitcast %union.rtunion_def* %arrayidx759 to %struct.rtx_def**, !dbg !10797
  %371 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx760, align 8, !dbg !10797
  store %struct.rtx_def* %371, %struct.rtx_def** %insn653, align 8, !dbg !10798
  %tobool761 = icmp ne %struct.rtx_def* %371, null, !dbg !10796
  br label %land.end762

land.end762:                                      ; preds = %land.rhs756, %do.cond
  %372 = phi i1 [ false, %do.cond ], [ %tobool761, %land.rhs756 ], !dbg !10799
  br i1 %372, label %do.body, label %do.end, !dbg !10792, !llvm.loop !10800

do.end:                                           ; preds = %land.end762
  %373 = load %struct.rtx_def*, %struct.rtx_def** %head, align 8, !dbg !10802
  %374 = load %struct.rtx_def*, %struct.rtx_def** %end, align 8, !dbg !10803
  %375 = load %struct.rtx_def*, %struct.rtx_def** %earliest, align 8, !dbg !10804
  %u763 = getelementptr inbounds %struct.rtx_def, %struct.rtx_def* %375, i32 0, i32 1, !dbg !10804
  %fld764 = bitcast %union.u* %u763 to [1 x %union.rtunion_def]*, !dbg !10804
  %arrayidx765 = getelementptr inbounds [1 x %union.rtunion_def], [1 x %union.rtunion_def]* %fld764, i64 0, i64 1, !dbg !10804
  %rt_rtx766 = bitcast %union.rtunion_def* %arrayidx765 to %struct.rtx_def**, !dbg !10804
  %376 = load %struct.rtx_def*, %struct.rtx_def** %rt_rtx766, align 8, !dbg !10804
  call void @reorder_insns(%struct.rtx_def* %373, %struct.rtx_def* %374, %struct.rtx_def* %376), !dbg !10805
  br label %if.end767, !dbg !10806

if.end767:                                        ; preds = %do.end, %if.end649
  %377 = load %struct.basic_block_def*, %struct.basic_block_def** %other_bb.addr, align 8, !dbg !10807
  %378 = load %struct.basic_block_def*, %struct.basic_block_def** %new_dest.addr, align 8, !dbg !10809
  %cmp768 = icmp eq %struct.basic_block_def* %377, %378, !dbg !10810
  br i1 %cmp768, label %if.then770, label %if.end806, !dbg !10811

if.then770:                                       ; preds = %if.end767
  %379 = load %struct.rtx_def*, %struct.rtx_def** %jump, align 8, !dbg !10812
  %call771 = call %struct.rtx_def* @delete_insn(%struct.rtx_def* %379), !dbg !10814
  %380 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs772 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %380, i32 0, i32 1, !dbg !10815
  %381 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs772, align 8, !dbg !10815
  %tobool773 = icmp ne %struct.VEC_edge_gc* %381, null, !dbg !10815
  br i1 %tobool773, label %cond.true774, label %cond.false777, !dbg !10815

cond.true774:                                     ; preds = %if.then770
  %382 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs775 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %382, i32 0, i32 1, !dbg !10815
  %383 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs775, align 8, !dbg !10815
  %base776 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %383, i32 0, i32 0, !dbg !10815
  br label %cond.end778, !dbg !10815

cond.false777:                                    ; preds = %if.then770
  br label %cond.end778, !dbg !10815

cond.end778:                                      ; preds = %cond.false777, %cond.true774
  %cond779 = phi %struct.VEC_edge_base* [ %base776, %cond.true774 ], [ null, %cond.false777 ], !dbg !10815
  %call780 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond779, i32 0), !dbg !10815
  %flags781 = getelementptr inbounds %struct.edge_def, %struct.edge_def* %call780, i32 0, i32 7, !dbg !10815
  %384 = load i32, i32* %flags781, align 8, !dbg !10815
  %and782 = and i32 %384, 1, !dbg !10815
  %tobool783 = icmp ne i32 %and782, 0, !dbg !10815
  br i1 %tobool783, label %cond.true784, label %cond.false794, !dbg !10815

cond.true784:                                     ; preds = %cond.end778
  %385 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs785 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %385, i32 0, i32 1, !dbg !10815
  %386 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs785, align 8, !dbg !10815
  %tobool786 = icmp ne %struct.VEC_edge_gc* %386, null, !dbg !10815
  br i1 %tobool786, label %cond.true787, label %cond.false790, !dbg !10815

cond.true787:                                     ; preds = %cond.true784
  %387 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs788 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %387, i32 0, i32 1, !dbg !10815
  %388 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs788, align 8, !dbg !10815
  %base789 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %388, i32 0, i32 0, !dbg !10815
  br label %cond.end791, !dbg !10815

cond.false790:                                    ; preds = %cond.true784
  br label %cond.end791, !dbg !10815

cond.end791:                                      ; preds = %cond.false790, %cond.true787
  %cond792 = phi %struct.VEC_edge_base* [ %base789, %cond.true787 ], [ null, %cond.false790 ], !dbg !10815
  %call793 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond792, i32 1), !dbg !10815
  br label %cond.end804, !dbg !10815

cond.false794:                                    ; preds = %cond.end778
  %389 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs795 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %389, i32 0, i32 1, !dbg !10815
  %390 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs795, align 8, !dbg !10815
  %tobool796 = icmp ne %struct.VEC_edge_gc* %390, null, !dbg !10815
  br i1 %tobool796, label %cond.true797, label %cond.false800, !dbg !10815

cond.true797:                                     ; preds = %cond.false794
  %391 = load %struct.basic_block_def*, %struct.basic_block_def** %test_bb.addr, align 8, !dbg !10815
  %succs798 = getelementptr inbounds %struct.basic_block_def, %struct.basic_block_def* %391, i32 0, i32 1, !dbg !10815
  %392 = load %struct.VEC_edge_gc*, %struct.VEC_edge_gc** %succs798, align 8, !dbg !10815
  %base799 = getelementptr inbounds %struct.VEC_edge_gc, %struct.VEC_edge_gc* %392, i32 0, i32 0, !dbg !10815
  br label %cond.end801, !dbg !10815

cond.false800:                                    ; preds = %cond.false794
  br label %cond.end801, !dbg !10815

cond.end801:                                      ; preds = %cond.false800, %cond.true797
  %cond802 = phi %struct.VEC_edge_base* [ %base799, %cond.true797 ], [ null, %cond.false800 ], !dbg !10815
  %call803 = call %struct.edge_def* @VEC_edge_base_index(%struct.VEC_edge_base* %cond802, i32 0), !dbg !10815
  br label %cond.end804, !dbg !10815

cond.end804:                                      ; preds = %cond.end801, %cond.end791
  %cond805 = phi %struct.edge_def* [ %call793, %cond.end791 ], [ %call803, %cond.end801 ], !dbg !10815
  call void @remove_edge(%struct.edge_def* %cond805), !dbg !10816
  br label %if.end806, !dbg !10817

if.end806:                                        ; preds = %cond.end804, %if.end767
  store i32 1, i32* %retval, align 4, !dbg !10818
  br label %return, !dbg !10818

cancel:                                           ; preds = %if.else329, %if.then323
  call void @llvm.dbg.label(metadata !10819), !dbg !10820
  call void @cancel_changes(i32 0), !dbg !10821
  store i32 0, i32* %retval, align 4, !dbg !10822
  br label %return, !dbg !10822

return:                                           ; preds = %cancel, %if.end806, %if.then307, %if.then183, %if.then179, %if.then167, %if.then159, %if.then132, %if.then98, %if.then84, %if.then
  %393 = load i32, i32* %retval, align 4, !dbg !10823
  ret i32 %393, !dbg !10823
}

declare dso_local void @redirect_edge_succ(%struct.edge_def*, %struct.basic_block_def*) #1

declare dso_local void @df_bb_replace(i32, %struct.basic_block_def*) #1

declare dso_local i32 @verify_changes(i32) #1

declare dso_local i32 @num_validated_changes() #1

declare dso_local i32 @for_each_rtx(%struct.rtx_def**, i32 (%struct.rtx_def**, i8*)*, i8*) #1

; Function Attrs: noinline nounwind uwtable
define internal i32 @find_memory(%struct.rtx_def** %px, i8* %data) #0 !dbg !10824 {
entry:
  %px.addr = alloca %struct.rtx_def**, align 8
  %data.addr = alloca i8*, align 8
  store %struct.rtx_def** %px, %struct.rtx_def*** %px.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.rtx_def*** %px.addr, metadata !10827, metadata !DIExpression()), !dbg !10828
  store i8* %data, i8** %data.addr, align 8
  call void @llvm.dbg.declare(metadata i8** %data.addr, metadata !10829, metadata !DIExpression()), !dbg !10830
  %0 = load %struct.rtx_def**, %struct.rtx_def*** %px.addr, align 8, !dbg !10831
  %1 = load %struct.rtx_def*, %struct.rtx_def** %0, align 8, !dbg !10831
  %2 = bitcast %struct.rtx_def* %1 to i32*, !dbg !10831
  %bf.load = load i32, i32* %2, align 8, !dbg !10831
  %bf.clear = and i32 %bf.load, 65535, !dbg !10831
  %cmp = icmp eq i32 %bf.clear, 43, !dbg !10831
  %conv = zext i1 %cmp to i32, !dbg !10831
  ret i32 %conv, !dbg !10832
}

declare dso_local %struct.bitmap_head_def* @bitmap_obstack_alloc_stat(%struct.bitmap_obstack*) #1

declare dso_local zeroext i8 @bitmap_set_bit(%struct.bitmap_head_def*, i32) #1

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_set_init(%struct.bitmap_iterator* %bi, %struct.bitmap_head_def* %map, i32 %start_bit, i32* %bit_no) #0 !dbg !10833 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %map.addr = alloca %struct.bitmap_head_def*, align 8
  %start_bit.addr = alloca i32, align 4
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !10841, metadata !DIExpression()), !dbg !10842
  store %struct.bitmap_head_def* %map, %struct.bitmap_head_def** %map.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_head_def** %map.addr, metadata !10843, metadata !DIExpression()), !dbg !10844
  store i32 %start_bit, i32* %start_bit.addr, align 4
  call void @llvm.dbg.declare(metadata i32* %start_bit.addr, metadata !10845, metadata !DIExpression()), !dbg !10846
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !10847, metadata !DIExpression()), !dbg !10848
  %0 = load %struct.bitmap_head_def*, %struct.bitmap_head_def** %map.addr, align 8, !dbg !10849
  %first = getelementptr inbounds %struct.bitmap_head_def, %struct.bitmap_head_def* %0, i32 0, i32 0, !dbg !10850
  %1 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %first, align 8, !dbg !10850
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10851
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 0, !dbg !10852
  store %struct.bitmap_element_def* %1, %struct.bitmap_element_def** %elt1, align 8, !dbg !10853
  %3 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10854
  %elt2 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %3, i32 0, i32 1, !dbg !10855
  store %struct.bitmap_element_def* null, %struct.bitmap_element_def** %elt2, align 8, !dbg !10856
  br label %while.body, !dbg !10857

while.body:                                       ; preds = %entry, %if.end5
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10858
  %elt11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 0, !dbg !10861
  %5 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt11, align 8, !dbg !10861
  %tobool = icmp ne %struct.bitmap_element_def* %5, null, !dbg !10858
  br i1 %tobool, label %if.end, label %if.then, !dbg !10862

if.then:                                          ; preds = %while.body
  %6 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10863
  %elt12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %6, i32 0, i32 0, !dbg !10865
  store %struct.bitmap_element_def* @bitmap_zero_bits, %struct.bitmap_element_def** %elt12, align 8, !dbg !10866
  br label %while.end, !dbg !10867

if.end:                                           ; preds = %while.body
  %7 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10868
  %elt13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %7, i32 0, i32 0, !dbg !10870
  %8 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt13, align 8, !dbg !10870
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %8, i32 0, i32 2, !dbg !10871
  %9 = load i32, i32* %indx, align 8, !dbg !10871
  %10 = load i32, i32* %start_bit.addr, align 4, !dbg !10872
  %div = udiv i32 %10, 128, !dbg !10873
  %cmp = icmp uge i32 %9, %div, !dbg !10874
  br i1 %cmp, label %if.then4, label %if.end5, !dbg !10875

if.then4:                                         ; preds = %if.end
  br label %while.end, !dbg !10876

if.end5:                                          ; preds = %if.end
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10877
  %elt16 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 0, !dbg !10878
  %12 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt16, align 8, !dbg !10878
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %12, i32 0, i32 0, !dbg !10879
  %13 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !10879
  %14 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10880
  %elt17 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %14, i32 0, i32 0, !dbg !10881
  store %struct.bitmap_element_def* %13, %struct.bitmap_element_def** %elt17, align 8, !dbg !10882
  br label %while.body, !dbg !10857, !llvm.loop !10883

while.end:                                        ; preds = %if.then4, %if.then
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10885
  %elt18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !10887
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt18, align 8, !dbg !10887
  %indx9 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 2, !dbg !10888
  %17 = load i32, i32* %indx9, align 8, !dbg !10888
  %18 = load i32, i32* %start_bit.addr, align 4, !dbg !10889
  %div10 = udiv i32 %18, 128, !dbg !10890
  %cmp11 = icmp ne i32 %17, %div10, !dbg !10891
  br i1 %cmp11, label %if.then12, label %if.end15, !dbg !10892

if.then12:                                        ; preds = %while.end
  %19 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10893
  %elt113 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %19, i32 0, i32 0, !dbg !10894
  %20 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt113, align 8, !dbg !10894
  %indx14 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %20, i32 0, i32 2, !dbg !10895
  %21 = load i32, i32* %indx14, align 8, !dbg !10895
  %mul = mul i32 %21, 128, !dbg !10896
  store i32 %mul, i32* %start_bit.addr, align 4, !dbg !10897
  br label %if.end15, !dbg !10898

if.end15:                                         ; preds = %if.then12, %while.end
  %22 = load i32, i32* %start_bit.addr, align 4, !dbg !10899
  %div16 = udiv i32 %22, 64, !dbg !10900
  %rem = urem i32 %div16, 2, !dbg !10901
  %23 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10902
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %23, i32 0, i32 2, !dbg !10903
  store i32 %rem, i32* %word_no, align 8, !dbg !10904
  %24 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10905
  %elt117 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %24, i32 0, i32 0, !dbg !10906
  %25 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt117, align 8, !dbg !10906
  %bits = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %25, i32 0, i32 3, !dbg !10907
  %26 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10908
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %26, i32 0, i32 2, !dbg !10909
  %27 = load i32, i32* %word_no18, align 8, !dbg !10909
  %idxprom = zext i32 %27 to i64, !dbg !10905
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits, i64 0, i64 %idxprom, !dbg !10905
  %28 = load i64, i64* %arrayidx, align 8, !dbg !10905
  %29 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10910
  %bits19 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %29, i32 0, i32 3, !dbg !10911
  store i64 %28, i64* %bits19, align 8, !dbg !10912
  %30 = load i32, i32* %start_bit.addr, align 4, !dbg !10913
  %rem20 = urem i32 %30, 64, !dbg !10914
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10915
  %bits21 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 3, !dbg !10916
  %32 = load i64, i64* %bits21, align 8, !dbg !10917
  %sh_prom = zext i32 %rem20 to i64, !dbg !10917
  %shr = lshr i64 %32, %sh_prom, !dbg !10917
  store i64 %shr, i64* %bits21, align 8, !dbg !10917
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10918
  %bits22 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 3, !dbg !10919
  %34 = load i64, i64* %bits22, align 8, !dbg !10919
  %tobool23 = icmp ne i64 %34, 0, !dbg !10920
  %lnot = xor i1 %tobool23, true, !dbg !10920
  %lnot.ext = zext i1 %lnot to i32, !dbg !10920
  %35 = load i32, i32* %start_bit.addr, align 4, !dbg !10921
  %add = add i32 %35, %lnot.ext, !dbg !10921
  store i32 %add, i32* %start_bit.addr, align 4, !dbg !10921
  %36 = load i32, i32* %start_bit.addr, align 4, !dbg !10922
  %37 = load i32*, i32** %bit_no.addr, align 8, !dbg !10923
  store i32 %36, i32* %37, align 4, !dbg !10924
  ret void, !dbg !10925
}

; Function Attrs: noinline nounwind uwtable
define internal zeroext i8 @bmp_iter_set(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !10926 {
entry:
  %retval = alloca i8, align 1
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !10929, metadata !DIExpression()), !dbg !10930
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !10931, metadata !DIExpression()), !dbg !10932
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10933
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !10935
  %1 = load i64, i64* %bits, align 8, !dbg !10935
  %tobool = icmp ne i64 %1, 0, !dbg !10933
  br i1 %tobool, label %if.then, label %if.end, !dbg !10936

if.then:                                          ; preds = %entry
  br label %next_bit, !dbg !10937

next_bit:                                         ; preds = %if.then15, %if.then
  call void @llvm.dbg.label(metadata !10938), !dbg !10940
  br label %while.cond, !dbg !10941

while.cond:                                       ; preds = %while.body, %next_bit
  %2 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10942
  %bits1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %2, i32 0, i32 3, !dbg !10943
  %3 = load i64, i64* %bits1, align 8, !dbg !10943
  %and = and i64 %3, 1, !dbg !10944
  %tobool2 = icmp ne i64 %and, 0, !dbg !10945
  %lnot = xor i1 %tobool2, true, !dbg !10945
  br i1 %lnot, label %while.body, label %while.end, !dbg !10941

while.body:                                       ; preds = %while.cond
  %4 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10946
  %bits3 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %4, i32 0, i32 3, !dbg !10948
  %5 = load i64, i64* %bits3, align 8, !dbg !10949
  %shr = lshr i64 %5, 1, !dbg !10949
  store i64 %shr, i64* %bits3, align 8, !dbg !10949
  %6 = load i32*, i32** %bit_no.addr, align 8, !dbg !10950
  %7 = load i32, i32* %6, align 4, !dbg !10951
  %add = add i32 %7, 1, !dbg !10951
  store i32 %add, i32* %6, align 4, !dbg !10951
  br label %while.cond, !dbg !10941, !llvm.loop !10952

while.end:                                        ; preds = %while.cond
  store i8 1, i8* %retval, align 1, !dbg !10954
  br label %return, !dbg !10954

if.end:                                           ; preds = %entry
  %8 = load i32*, i32** %bit_no.addr, align 8, !dbg !10955
  %9 = load i32, i32* %8, align 4, !dbg !10956
  %add4 = add i32 %9, 64, !dbg !10957
  %sub = sub i32 %add4, 1, !dbg !10958
  %div = udiv i32 %sub, 64, !dbg !10959
  %mul = mul i32 %div, 64, !dbg !10960
  %10 = load i32*, i32** %bit_no.addr, align 8, !dbg !10961
  store i32 %mul, i32* %10, align 4, !dbg !10962
  %11 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10963
  %word_no = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %11, i32 0, i32 2, !dbg !10964
  %12 = load i32, i32* %word_no, align 8, !dbg !10965
  %inc = add i32 %12, 1, !dbg !10965
  store i32 %inc, i32* %word_no, align 8, !dbg !10965
  br label %while.body6, !dbg !10966

while.body6:                                      ; preds = %if.end, %if.end26
  br label %while.cond7, !dbg !10967

while.cond7:                                      ; preds = %if.end16, %while.body6
  %13 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10969
  %word_no8 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %13, i32 0, i32 2, !dbg !10970
  %14 = load i32, i32* %word_no8, align 8, !dbg !10970
  %cmp = icmp ne i32 %14, 2, !dbg !10971
  br i1 %cmp, label %while.body9, label %while.end20, !dbg !10967

while.body9:                                      ; preds = %while.cond7
  %15 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10972
  %elt1 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %15, i32 0, i32 0, !dbg !10974
  %16 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt1, align 8, !dbg !10974
  %bits10 = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %16, i32 0, i32 3, !dbg !10975
  %17 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10976
  %word_no11 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %17, i32 0, i32 2, !dbg !10977
  %18 = load i32, i32* %word_no11, align 8, !dbg !10977
  %idxprom = zext i32 %18 to i64, !dbg !10972
  %arrayidx = getelementptr inbounds [2 x i64], [2 x i64]* %bits10, i64 0, i64 %idxprom, !dbg !10972
  %19 = load i64, i64* %arrayidx, align 8, !dbg !10972
  %20 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10978
  %bits12 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %20, i32 0, i32 3, !dbg !10979
  store i64 %19, i64* %bits12, align 8, !dbg !10980
  %21 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10981
  %bits13 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %21, i32 0, i32 3, !dbg !10983
  %22 = load i64, i64* %bits13, align 8, !dbg !10983
  %tobool14 = icmp ne i64 %22, 0, !dbg !10981
  br i1 %tobool14, label %if.then15, label %if.end16, !dbg !10984

if.then15:                                        ; preds = %while.body9
  br label %next_bit, !dbg !10985

if.end16:                                         ; preds = %while.body9
  %23 = load i32*, i32** %bit_no.addr, align 8, !dbg !10986
  %24 = load i32, i32* %23, align 4, !dbg !10987
  %add17 = add i32 %24, 64, !dbg !10987
  store i32 %add17, i32* %23, align 4, !dbg !10987
  %25 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10988
  %word_no18 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %25, i32 0, i32 2, !dbg !10989
  %26 = load i32, i32* %word_no18, align 8, !dbg !10990
  %inc19 = add i32 %26, 1, !dbg !10990
  store i32 %inc19, i32* %word_no18, align 8, !dbg !10990
  br label %while.cond7, !dbg !10967, !llvm.loop !10991

while.end20:                                      ; preds = %while.cond7
  %27 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10993
  %elt121 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %27, i32 0, i32 0, !dbg !10994
  %28 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt121, align 8, !dbg !10994
  %next = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %28, i32 0, i32 0, !dbg !10995
  %29 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %next, align 8, !dbg !10995
  %30 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10996
  %elt122 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %30, i32 0, i32 0, !dbg !10997
  store %struct.bitmap_element_def* %29, %struct.bitmap_element_def** %elt122, align 8, !dbg !10998
  %31 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !10999
  %elt123 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %31, i32 0, i32 0, !dbg !11001
  %32 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt123, align 8, !dbg !11001
  %tobool24 = icmp ne %struct.bitmap_element_def* %32, null, !dbg !10999
  br i1 %tobool24, label %if.end26, label %if.then25, !dbg !11002

if.then25:                                        ; preds = %while.end20
  store i8 0, i8* %retval, align 1, !dbg !11003
  br label %return, !dbg !11003

if.end26:                                         ; preds = %while.end20
  %33 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !11004
  %elt127 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %33, i32 0, i32 0, !dbg !11005
  %34 = load %struct.bitmap_element_def*, %struct.bitmap_element_def** %elt127, align 8, !dbg !11005
  %indx = getelementptr inbounds %struct.bitmap_element_def, %struct.bitmap_element_def* %34, i32 0, i32 2, !dbg !11006
  %35 = load i32, i32* %indx, align 8, !dbg !11006
  %mul28 = mul i32 %35, 128, !dbg !11007
  %36 = load i32*, i32** %bit_no.addr, align 8, !dbg !11008
  store i32 %mul28, i32* %36, align 4, !dbg !11009
  %37 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !11010
  %word_no29 = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %37, i32 0, i32 2, !dbg !11011
  store i32 0, i32* %word_no29, align 8, !dbg !11012
  br label %while.body6, !dbg !10966, !llvm.loop !11013

return:                                           ; preds = %if.then25, %while.end
  %38 = load i8, i8* %retval, align 1, !dbg !11015
  ret i8 %38, !dbg !11015
}

; Function Attrs: noinline nounwind uwtable
define internal void @bmp_iter_next(%struct.bitmap_iterator* %bi, i32* %bit_no) #0 !dbg !11016 {
entry:
  %bi.addr = alloca %struct.bitmap_iterator*, align 8
  %bit_no.addr = alloca i32*, align 8
  store %struct.bitmap_iterator* %bi, %struct.bitmap_iterator** %bi.addr, align 8
  call void @llvm.dbg.declare(metadata %struct.bitmap_iterator** %bi.addr, metadata !11019, metadata !DIExpression()), !dbg !11020
  store i32* %bit_no, i32** %bit_no.addr, align 8
  call void @llvm.dbg.declare(metadata i32** %bit_no.addr, metadata !11021, metadata !DIExpression()), !dbg !11022
  %0 = load %struct.bitmap_iterator*, %struct.bitmap_iterator** %bi.addr, align 8, !dbg !11023
  %bits = getelementptr inbounds %struct.bitmap_iterator, %struct.bitmap_iterator* %0, i32 0, i32 3, !dbg !11024
  %1 = load i64, i64* %bits, align 8, !dbg !11025
  %shr = lshr i64 %1, 1, !dbg !11025
  store i64 %shr, i64* %bits, align 8, !dbg !11025
  %2 = load i32*, i32** %bit_no.addr, align 8, !dbg !11026
  %3 = load i32, i32* %2, align 4, !dbg !11027
  %add = add i32 %3, 1, !dbg !11027
  store i32 %add, i32* %2, align 4, !dbg !11027
  ret void, !dbg !11028
}

declare dso_local void @bitmap_copy(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare dso_local %struct.bitmap_head_def* @df_get_live_in(%struct.basic_block_def*) #1

declare dso_local void @df_simulate_initialize_backwards(%struct.basic_block_def*, %struct.bitmap_head_def*) #1

declare dso_local void @df_simulate_find_defs(%struct.rtx_def*, %struct.bitmap_head_def*) #1

declare dso_local void @df_simulate_one_insn_backwards(%struct.basic_block_def*, %struct.rtx_def*, %struct.bitmap_head_def*) #1

declare dso_local zeroext i8 @bitmap_intersect_p(%struct.bitmap_head_def*, %struct.bitmap_head_def*) #1

declare dso_local void @bitmap_obstack_free(%struct.bitmap_head_def*) #1

declare dso_local %struct.rtx_def* @block_label(%struct.basic_block_def*) #1

declare dso_local i32 @invert_jump_1(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local i32 @redirect_jump_1(%struct.rtx_def*, %struct.rtx_def*) #1

declare dso_local void @confirm_change_group() #1

declare dso_local void @redirect_jump_2(%struct.rtx_def*, %struct.rtx_def*, %struct.rtx_def*, i32, i32) #1

declare dso_local void @update_br_prob_note(%struct.basic_block_def*) #1

declare dso_local i32 @function_invariant_p(%struct.rtx_def*) #1

declare dso_local zeroext i8 @dominated_by_p(i32, %struct.basic_block_def*, %struct.basic_block_def*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable willreturn }
attributes #3 = { argmemonly nounwind willreturn }

!llvm.dbg.cu = !{!2}
!llvm.module.flags = !{!3830, !3831, !3832}
!llvm.ident = !{!3833}

!0 = !DIGlobalVariableExpression(var: !1, expr: !DIExpression())
!1 = distinct !DIGlobalVariable(name: "pass_rtl_ifcvt", scope: !2, file: !3, line: 4240, type: !3794, isLocal: false, isDefinition: true)
!2 = distinct !DICompileUnit(language: DW_LANG_C99, file: !3, producer: "clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !4, retainedTypes: !2543, globals: !3791, splitDebugInlining: false, nameTableKind: None)
!3 = !DIFile(filename: "ifcvt.c", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!4 = !{!5, !13, !189, !231, !359, !366, !372, !377, !386, !390, !395, !414, !421, !428, !622, !632, !636, !646, !809, !2301, !2444, !2466, !2500, !2508, !2523, !2529}
!5 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "opt_pass_type", file: !6, line: 104, baseType: !7, size: 32, elements: !8)
!6 = !DIFile(filename: "./tree-pass.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!7 = !DIBasicType(name: "unsigned int", size: 32, encoding: DW_ATE_unsigned)
!8 = !{!9, !10, !11, !12}
!9 = !DIEnumerator(name: "GIMPLE_PASS", value: 0, isUnsigned: true)
!10 = !DIEnumerator(name: "RTL_PASS", value: 1, isUnsigned: true)
!11 = !DIEnumerator(name: "SIMPLE_IPA_PASS", value: 2, isUnsigned: true)
!12 = !DIEnumerator(name: "IPA_PASS", value: 3, isUnsigned: true)
!13 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !14, line: 74, baseType: !7, size: 32, elements: !15)
!14 = !DIFile(filename: "./timevar.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!15 = !{!16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71, !72, !73, !74, !75, !76, !77, !78, !79, !80, !81, !82, !83, !84, !85, !86, !87, !88, !89, !90, !91, !92, !93, !94, !95, !96, !97, !98, !99, !100, !101, !102, !103, !104, !105, !106, !107, !108, !109, !110, !111, !112, !113, !114, !115, !116, !117, !118, !119, !120, !121, !122, !123, !124, !125, !126, !127, !128, !129, !130, !131, !132, !133, !134, !135, !136, !137, !138, !139, !140, !141, !142, !143, !144, !145, !146, !147, !148, !149, !150, !151, !152, !153, !154, !155, !156, !157, !158, !159, !160, !161, !162, !163, !164, !165, !166, !167, !168, !169, !170, !171, !172, !173, !174, !175, !176, !177, !178, !179, !180, !181, !182, !183, !184, !185, !186, !187, !188}
!16 = !DIEnumerator(name: "TV_NONE", value: 0, isUnsigned: true)
!17 = !DIEnumerator(name: "TV_TOTAL", value: 1, isUnsigned: true)
!18 = !DIEnumerator(name: "TV_GC", value: 2, isUnsigned: true)
!19 = !DIEnumerator(name: "TV_DUMP", value: 3, isUnsigned: true)
!20 = !DIEnumerator(name: "TV_CGRAPH", value: 4, isUnsigned: true)
!21 = !DIEnumerator(name: "TV_CGRAPHOPT", value: 5, isUnsigned: true)
!22 = !DIEnumerator(name: "TV_IPA_CONSTANT_PROP", value: 6, isUnsigned: true)
!23 = !DIEnumerator(name: "TV_IPA_LTO_GIMPLE_IO", value: 7, isUnsigned: true)
!24 = !DIEnumerator(name: "TV_IPA_LTO_DECL_IO", value: 8, isUnsigned: true)
!25 = !DIEnumerator(name: "TV_IPA_LTO_CGRAPH_IO", value: 9, isUnsigned: true)
!26 = !DIEnumerator(name: "TV_LTO", value: 10, isUnsigned: true)
!27 = !DIEnumerator(name: "TV_WHOPR_WPA", value: 11, isUnsigned: true)
!28 = !DIEnumerator(name: "TV_WHOPR_WPA_IO", value: 12, isUnsigned: true)
!29 = !DIEnumerator(name: "TV_WHOPR_LTRANS", value: 13, isUnsigned: true)
!30 = !DIEnumerator(name: "TV_WHOPR_WPA_FIXUP", value: 14, isUnsigned: true)
!31 = !DIEnumerator(name: "TV_WHOPR_WPA_LTRANS_EXEC", value: 15, isUnsigned: true)
!32 = !DIEnumerator(name: "TV_IPA_REFERENCE", value: 16, isUnsigned: true)
!33 = !DIEnumerator(name: "TV_IPA_PURE_CONST", value: 17, isUnsigned: true)
!34 = !DIEnumerator(name: "TV_IPA_TYPE_ESCAPE", value: 18, isUnsigned: true)
!35 = !DIEnumerator(name: "TV_IPA_PTA", value: 19, isUnsigned: true)
!36 = !DIEnumerator(name: "TV_IPA_SRA", value: 20, isUnsigned: true)
!37 = !DIEnumerator(name: "TV_IPA_FREE_LANG_DATA", value: 21, isUnsigned: true)
!38 = !DIEnumerator(name: "TV_CFG", value: 22, isUnsigned: true)
!39 = !DIEnumerator(name: "TV_CLEANUP_CFG", value: 23, isUnsigned: true)
!40 = !DIEnumerator(name: "TV_CFG_VERIFY", value: 24, isUnsigned: true)
!41 = !DIEnumerator(name: "TV_DELETE_TRIVIALLY_DEAD", value: 25, isUnsigned: true)
!42 = !DIEnumerator(name: "TV_LIFE", value: 26, isUnsigned: true)
!43 = !DIEnumerator(name: "TV_LIFE_UPDATE", value: 27, isUnsigned: true)
!44 = !DIEnumerator(name: "TV_DF_SCAN", value: 28, isUnsigned: true)
!45 = !DIEnumerator(name: "TV_DF_MD", value: 29, isUnsigned: true)
!46 = !DIEnumerator(name: "TV_DF_RD", value: 30, isUnsigned: true)
!47 = !DIEnumerator(name: "TV_DF_LR", value: 31, isUnsigned: true)
!48 = !DIEnumerator(name: "TV_DF_LIVE", value: 32, isUnsigned: true)
!49 = !DIEnumerator(name: "TV_DF_UREC", value: 33, isUnsigned: true)
!50 = !DIEnumerator(name: "TV_DF_CHAIN", value: 34, isUnsigned: true)
!51 = !DIEnumerator(name: "TV_DF_BYTE_LR", value: 35, isUnsigned: true)
!52 = !DIEnumerator(name: "TV_DF_NOTE", value: 36, isUnsigned: true)
!53 = !DIEnumerator(name: "TV_REG_STATS", value: 37, isUnsigned: true)
!54 = !DIEnumerator(name: "TV_ALIAS_ANALYSIS", value: 38, isUnsigned: true)
!55 = !DIEnumerator(name: "TV_ALIAS_STMT_WALK", value: 39, isUnsigned: true)
!56 = !DIEnumerator(name: "TV_REG_SCAN", value: 40, isUnsigned: true)
!57 = !DIEnumerator(name: "TV_REBUILD_JUMP", value: 41, isUnsigned: true)
!58 = !DIEnumerator(name: "TV_CPP", value: 42, isUnsigned: true)
!59 = !DIEnumerator(name: "TV_LEX", value: 43, isUnsigned: true)
!60 = !DIEnumerator(name: "TV_PARSE", value: 44, isUnsigned: true)
!61 = !DIEnumerator(name: "TV_NAME_LOOKUP", value: 45, isUnsigned: true)
!62 = !DIEnumerator(name: "TV_INLINE_HEURISTICS", value: 46, isUnsigned: true)
!63 = !DIEnumerator(name: "TV_INTEGRATION", value: 47, isUnsigned: true)
!64 = !DIEnumerator(name: "TV_TREE_GIMPLIFY", value: 48, isUnsigned: true)
!65 = !DIEnumerator(name: "TV_TREE_EH", value: 49, isUnsigned: true)
!66 = !DIEnumerator(name: "TV_TREE_CFG", value: 50, isUnsigned: true)
!67 = !DIEnumerator(name: "TV_TREE_CLEANUP_CFG", value: 51, isUnsigned: true)
!68 = !DIEnumerator(name: "TV_TREE_VRP", value: 52, isUnsigned: true)
!69 = !DIEnumerator(name: "TV_TREE_COPY_PROP", value: 53, isUnsigned: true)
!70 = !DIEnumerator(name: "TV_TREE_STORE_COPY_PROP", value: 54, isUnsigned: true)
!71 = !DIEnumerator(name: "TV_FIND_REFERENCED_VARS", value: 55, isUnsigned: true)
!72 = !DIEnumerator(name: "TV_TREE_PTA", value: 56, isUnsigned: true)
!73 = !DIEnumerator(name: "TV_TREE_INSERT_PHI_NODES", value: 57, isUnsigned: true)
!74 = !DIEnumerator(name: "TV_TREE_SSA_REWRITE_BLOCKS", value: 58, isUnsigned: true)
!75 = !DIEnumerator(name: "TV_TREE_SSA_OTHER", value: 59, isUnsigned: true)
!76 = !DIEnumerator(name: "TV_TREE_SSA_INCREMENTAL", value: 60, isUnsigned: true)
!77 = !DIEnumerator(name: "TV_TREE_OPS", value: 61, isUnsigned: true)
!78 = !DIEnumerator(name: "TV_TREE_SSA_DOMINATOR_OPTS", value: 62, isUnsigned: true)
!79 = !DIEnumerator(name: "TV_TREE_SRA", value: 63, isUnsigned: true)
!80 = !DIEnumerator(name: "TV_TREE_STORE_CCP", value: 64, isUnsigned: true)
!81 = !DIEnumerator(name: "TV_TREE_CCP", value: 65, isUnsigned: true)
!82 = !DIEnumerator(name: "TV_TREE_PHI_CPROP", value: 66, isUnsigned: true)
!83 = !DIEnumerator(name: "TV_TREE_SPLIT_EDGES", value: 67, isUnsigned: true)
!84 = !DIEnumerator(name: "TV_TREE_REASSOC", value: 68, isUnsigned: true)
!85 = !DIEnumerator(name: "TV_TREE_PRE", value: 69, isUnsigned: true)
!86 = !DIEnumerator(name: "TV_TREE_REDPHI", value: 70, isUnsigned: true)
!87 = !DIEnumerator(name: "TV_TREE_FRE", value: 71, isUnsigned: true)
!88 = !DIEnumerator(name: "TV_TREE_SINK", value: 72, isUnsigned: true)
!89 = !DIEnumerator(name: "TV_TREE_PHIOPT", value: 73, isUnsigned: true)
!90 = !DIEnumerator(name: "TV_TREE_FORWPROP", value: 74, isUnsigned: true)
!91 = !DIEnumerator(name: "TV_TREE_PHIPROP", value: 75, isUnsigned: true)
!92 = !DIEnumerator(name: "TV_TREE_DCE", value: 76, isUnsigned: true)
!93 = !DIEnumerator(name: "TV_TREE_CD_DCE", value: 77, isUnsigned: true)
!94 = !DIEnumerator(name: "TV_TREE_CALL_CDCE", value: 78, isUnsigned: true)
!95 = !DIEnumerator(name: "TV_TREE_DSE", value: 79, isUnsigned: true)
!96 = !DIEnumerator(name: "TV_TREE_MERGE_PHI", value: 80, isUnsigned: true)
!97 = !DIEnumerator(name: "TV_TREE_LOOP", value: 81, isUnsigned: true)
!98 = !DIEnumerator(name: "TV_TREE_LOOP_BOUNDS", value: 82, isUnsigned: true)
!99 = !DIEnumerator(name: "TV_LIM", value: 83, isUnsigned: true)
!100 = !DIEnumerator(name: "TV_TREE_LOOP_IVCANON", value: 84, isUnsigned: true)
!101 = !DIEnumerator(name: "TV_SCEV_CONST", value: 85, isUnsigned: true)
!102 = !DIEnumerator(name: "TV_TREE_LOOP_UNSWITCH", value: 86, isUnsigned: true)
!103 = !DIEnumerator(name: "TV_COMPLETE_UNROLL", value: 87, isUnsigned: true)
!104 = !DIEnumerator(name: "TV_TREE_PARALLELIZE_LOOPS", value: 88, isUnsigned: true)
!105 = !DIEnumerator(name: "TV_TREE_VECTORIZATION", value: 89, isUnsigned: true)
!106 = !DIEnumerator(name: "TV_TREE_SLP_VECTORIZATION", value: 90, isUnsigned: true)
!107 = !DIEnumerator(name: "TV_GRAPHITE_TRANSFORMS", value: 91, isUnsigned: true)
!108 = !DIEnumerator(name: "TV_GRAPHITE_DATA_DEPS", value: 92, isUnsigned: true)
!109 = !DIEnumerator(name: "TV_GRAPHITE_CODE_GEN", value: 93, isUnsigned: true)
!110 = !DIEnumerator(name: "TV_TREE_LINEAR_TRANSFORM", value: 94, isUnsigned: true)
!111 = !DIEnumerator(name: "TV_TREE_LOOP_DISTRIBUTION", value: 95, isUnsigned: true)
!112 = !DIEnumerator(name: "TV_CHECK_DATA_DEPS", value: 96, isUnsigned: true)
!113 = !DIEnumerator(name: "TV_TREE_PREFETCH", value: 97, isUnsigned: true)
!114 = !DIEnumerator(name: "TV_TREE_LOOP_IVOPTS", value: 98, isUnsigned: true)
!115 = !DIEnumerator(name: "TV_PREDCOM", value: 99, isUnsigned: true)
!116 = !DIEnumerator(name: "TV_TREE_LOOP_INIT", value: 100, isUnsigned: true)
!117 = !DIEnumerator(name: "TV_TREE_LOOP_FINI", value: 101, isUnsigned: true)
!118 = !DIEnumerator(name: "TV_TREE_CH", value: 102, isUnsigned: true)
!119 = !DIEnumerator(name: "TV_TREE_SSA_UNCPROP", value: 103, isUnsigned: true)
!120 = !DIEnumerator(name: "TV_TREE_SSA_TO_NORMAL", value: 104, isUnsigned: true)
!121 = !DIEnumerator(name: "TV_TREE_NRV", value: 105, isUnsigned: true)
!122 = !DIEnumerator(name: "TV_TREE_COPY_RENAME", value: 106, isUnsigned: true)
!123 = !DIEnumerator(name: "TV_TREE_SSA_VERIFY", value: 107, isUnsigned: true)
!124 = !DIEnumerator(name: "TV_TREE_STMT_VERIFY", value: 108, isUnsigned: true)
!125 = !DIEnumerator(name: "TV_TREE_SWITCH_CONVERSION", value: 109, isUnsigned: true)
!126 = !DIEnumerator(name: "TV_CGRAPH_VERIFY", value: 110, isUnsigned: true)
!127 = !DIEnumerator(name: "TV_DOM_FRONTIERS", value: 111, isUnsigned: true)
!128 = !DIEnumerator(name: "TV_DOMINANCE", value: 112, isUnsigned: true)
!129 = !DIEnumerator(name: "TV_CONTROL_DEPENDENCES", value: 113, isUnsigned: true)
!130 = !DIEnumerator(name: "TV_OVERLOAD", value: 114, isUnsigned: true)
!131 = !DIEnumerator(name: "TV_TEMPLATE_INSTANTIATION", value: 115, isUnsigned: true)
!132 = !DIEnumerator(name: "TV_EXPAND", value: 116, isUnsigned: true)
!133 = !DIEnumerator(name: "TV_VARCONST", value: 117, isUnsigned: true)
!134 = !DIEnumerator(name: "TV_LOWER_SUBREG", value: 118, isUnsigned: true)
!135 = !DIEnumerator(name: "TV_JUMP", value: 119, isUnsigned: true)
!136 = !DIEnumerator(name: "TV_FWPROP", value: 120, isUnsigned: true)
!137 = !DIEnumerator(name: "TV_CSE", value: 121, isUnsigned: true)
!138 = !DIEnumerator(name: "TV_DCE", value: 122, isUnsigned: true)
!139 = !DIEnumerator(name: "TV_DSE1", value: 123, isUnsigned: true)
!140 = !DIEnumerator(name: "TV_DSE2", value: 124, isUnsigned: true)
!141 = !DIEnumerator(name: "TV_LOOP", value: 125, isUnsigned: true)
!142 = !DIEnumerator(name: "TV_LOOP_MOVE_INVARIANTS", value: 126, isUnsigned: true)
!143 = !DIEnumerator(name: "TV_LOOP_UNSWITCH", value: 127, isUnsigned: true)
!144 = !DIEnumerator(name: "TV_LOOP_UNROLL", value: 128, isUnsigned: true)
!145 = !DIEnumerator(name: "TV_LOOP_DOLOOP", value: 129, isUnsigned: true)
!146 = !DIEnumerator(name: "TV_CPROP", value: 130, isUnsigned: true)
!147 = !DIEnumerator(name: "TV_PRE", value: 131, isUnsigned: true)
!148 = !DIEnumerator(name: "TV_HOIST", value: 132, isUnsigned: true)
!149 = !DIEnumerator(name: "TV_LSM", value: 133, isUnsigned: true)
!150 = !DIEnumerator(name: "TV_TRACER", value: 134, isUnsigned: true)
!151 = !DIEnumerator(name: "TV_WEB", value: 135, isUnsigned: true)
!152 = !DIEnumerator(name: "TV_AUTO_INC_DEC", value: 136, isUnsigned: true)
!153 = !DIEnumerator(name: "TV_CSE2", value: 137, isUnsigned: true)
!154 = !DIEnumerator(name: "TV_BRANCH_PROB", value: 138, isUnsigned: true)
!155 = !DIEnumerator(name: "TV_VPT", value: 139, isUnsigned: true)
!156 = !DIEnumerator(name: "TV_COMBINE", value: 140, isUnsigned: true)
!157 = !DIEnumerator(name: "TV_IFCVT", value: 141, isUnsigned: true)
!158 = !DIEnumerator(name: "TV_REGMOVE", value: 142, isUnsigned: true)
!159 = !DIEnumerator(name: "TV_MODE_SWITCH", value: 143, isUnsigned: true)
!160 = !DIEnumerator(name: "TV_SMS", value: 144, isUnsigned: true)
!161 = !DIEnumerator(name: "TV_SCHED", value: 145, isUnsigned: true)
!162 = !DIEnumerator(name: "TV_LOCAL_ALLOC", value: 146, isUnsigned: true)
!163 = !DIEnumerator(name: "TV_GLOBAL_ALLOC", value: 147, isUnsigned: true)
!164 = !DIEnumerator(name: "TV_IRA", value: 148, isUnsigned: true)
!165 = !DIEnumerator(name: "TV_RELOAD", value: 149, isUnsigned: true)
!166 = !DIEnumerator(name: "TV_RELOAD_CSE_REGS", value: 150, isUnsigned: true)
!167 = !DIEnumerator(name: "TV_SEQABSTR", value: 151, isUnsigned: true)
!168 = !DIEnumerator(name: "TV_GCSE_AFTER_RELOAD", value: 152, isUnsigned: true)
!169 = !DIEnumerator(name: "TV_THREAD_PROLOGUE_AND_EPILOGUE", value: 153, isUnsigned: true)
!170 = !DIEnumerator(name: "TV_IFCVT2", value: 154, isUnsigned: true)
!171 = !DIEnumerator(name: "TV_COMBINE_STACK_ADJUST", value: 155, isUnsigned: true)
!172 = !DIEnumerator(name: "TV_PEEPHOLE2", value: 156, isUnsigned: true)
!173 = !DIEnumerator(name: "TV_RENAME_REGISTERS", value: 157, isUnsigned: true)
!174 = !DIEnumerator(name: "TV_CPROP_REGISTERS", value: 158, isUnsigned: true)
!175 = !DIEnumerator(name: "TV_SCHED2", value: 159, isUnsigned: true)
!176 = !DIEnumerator(name: "TV_MACH_DEP", value: 160, isUnsigned: true)
!177 = !DIEnumerator(name: "TV_DBR_SCHED", value: 161, isUnsigned: true)
!178 = !DIEnumerator(name: "TV_REORDER_BLOCKS", value: 162, isUnsigned: true)
!179 = !DIEnumerator(name: "TV_SHORTEN_BRANCH", value: 163, isUnsigned: true)
!180 = !DIEnumerator(name: "TV_REG_STACK", value: 164, isUnsigned: true)
!181 = !DIEnumerator(name: "TV_FINAL", value: 165, isUnsigned: true)
!182 = !DIEnumerator(name: "TV_SYMOUT", value: 166, isUnsigned: true)
!183 = !DIEnumerator(name: "TV_VAR_TRACKING", value: 167, isUnsigned: true)
!184 = !DIEnumerator(name: "TV_TREE_IFCOMBINE", value: 168, isUnsigned: true)
!185 = !DIEnumerator(name: "TV_PLUGIN_INIT", value: 169, isUnsigned: true)
!186 = !DIEnumerator(name: "TV_PLUGIN_RUN", value: 170, isUnsigned: true)
!187 = !DIEnumerator(name: "TV_REST_OF_COMPILATION", value: 171, isUnsigned: true)
!188 = !DIEnumerator(name: "TIMEVAR_LAST", value: 172, isUnsigned: true)
!189 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "debug_counter", file: !190, line: 27, baseType: !7, size: 32, elements: !191)
!190 = !DIFile(filename: "./dbgcnt.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!191 = !{!192, !193, !194, !195, !196, !197, !198, !199, !200, !201, !202, !203, !204, !205, !206, !207, !208, !209, !210, !211, !212, !213, !214, !215, !216, !217, !218, !219, !220, !221, !222, !223, !224, !225, !226, !227, !228, !229, !230}
!192 = !DIEnumerator(name: "auto_inc_dec", value: 0, isUnsigned: true)
!193 = !DIEnumerator(name: "ccp", value: 1, isUnsigned: true)
!194 = !DIEnumerator(name: "cfg_cleanup", value: 2, isUnsigned: true)
!195 = !DIEnumerator(name: "cse2_move2add", value: 3, isUnsigned: true)
!196 = !DIEnumerator(name: "cprop", value: 4, isUnsigned: true)
!197 = !DIEnumerator(name: "dce", value: 5, isUnsigned: true)
!198 = !DIEnumerator(name: "dce_fast", value: 6, isUnsigned: true)
!199 = !DIEnumerator(name: "dce_ud", value: 7, isUnsigned: true)
!200 = !DIEnumerator(name: "delete_trivial_dead", value: 8, isUnsigned: true)
!201 = !DIEnumerator(name: "df_byte_scan", value: 9, isUnsigned: true)
!202 = !DIEnumerator(name: "dse", value: 10, isUnsigned: true)
!203 = !DIEnumerator(name: "dse1", value: 11, isUnsigned: true)
!204 = !DIEnumerator(name: "dse2", value: 12, isUnsigned: true)
!205 = !DIEnumerator(name: "gcse2_delete", value: 13, isUnsigned: true)
!206 = !DIEnumerator(name: "global_alloc_at_func", value: 14, isUnsigned: true)
!207 = !DIEnumerator(name: "global_alloc_at_reg", value: 15, isUnsigned: true)
!208 = !DIEnumerator(name: "hoist", value: 16, isUnsigned: true)
!209 = !DIEnumerator(name: "ia64_sched2", value: 17, isUnsigned: true)
!210 = !DIEnumerator(name: "if_conversion", value: 18, isUnsigned: true)
!211 = !DIEnumerator(name: "if_after_combine", value: 19, isUnsigned: true)
!212 = !DIEnumerator(name: "if_after_reload", value: 20, isUnsigned: true)
!213 = !DIEnumerator(name: "local_alloc_for_sched", value: 21, isUnsigned: true)
!214 = !DIEnumerator(name: "postreload_cse", value: 22, isUnsigned: true)
!215 = !DIEnumerator(name: "pre", value: 23, isUnsigned: true)
!216 = !DIEnumerator(name: "pre_insn", value: 24, isUnsigned: true)
!217 = !DIEnumerator(name: "treepre_insert", value: 25, isUnsigned: true)
!218 = !DIEnumerator(name: "sched2_func", value: 26, isUnsigned: true)
!219 = !DIEnumerator(name: "sched_block", value: 27, isUnsigned: true)
!220 = !DIEnumerator(name: "sched_func", value: 28, isUnsigned: true)
!221 = !DIEnumerator(name: "sched_insn", value: 29, isUnsigned: true)
!222 = !DIEnumerator(name: "sched_region", value: 30, isUnsigned: true)
!223 = !DIEnumerator(name: "sel_sched_cnt", value: 31, isUnsigned: true)
!224 = !DIEnumerator(name: "sel_sched_region_cnt", value: 32, isUnsigned: true)
!225 = !DIEnumerator(name: "sel_sched_insn_cnt", value: 33, isUnsigned: true)
!226 = !DIEnumerator(name: "sms_sched_loop", value: 34, isUnsigned: true)
!227 = !DIEnumerator(name: "store_motion", value: 35, isUnsigned: true)
!228 = !DIEnumerator(name: "split_for_sched2", value: 36, isUnsigned: true)
!229 = !DIEnumerator(name: "tail_call", value: 37, isUnsigned: true)
!230 = !DIEnumerator(name: "debug_counter_number_of_counters", value: 38, isUnsigned: true)
!231 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "machine_mode", file: !232, line: 7, baseType: !7, size: 32, elements: !233)
!232 = !DIFile(filename: "./insn-modes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!233 = !{!234, !235, !236, !237, !238, !239, !240, !241, !242, !243, !244, !245, !246, !247, !248, !249, !250, !251, !252, !253, !254, !255, !256, !257, !258, !259, !260, !261, !262, !263, !264, !265, !266, !267, !268, !269, !270, !271, !272, !273, !274, !275, !276, !277, !278, !279, !280, !281, !282, !283, !284, !285, !286, !287, !288, !289, !290, !291, !292, !293, !294, !295, !296, !297, !298, !299, !300, !301, !302, !303, !304, !305, !306, !307, !308, !309, !310, !311, !312, !313, !314, !315, !316, !317, !318, !319, !320, !321, !322, !323, !324, !325, !326, !327, !328, !329, !330, !331, !332, !333, !334, !335, !336, !337, !338, !339, !340, !341, !342, !343, !344, !345, !346, !347, !348, !349, !350, !351, !352, !353, !354, !355, !356, !357, !358}
!234 = !DIEnumerator(name: "VOIDmode", value: 0, isUnsigned: true)
!235 = !DIEnumerator(name: "BLKmode", value: 1, isUnsigned: true)
!236 = !DIEnumerator(name: "CCmode", value: 2, isUnsigned: true)
!237 = !DIEnumerator(name: "CCGCmode", value: 3, isUnsigned: true)
!238 = !DIEnumerator(name: "CCGOCmode", value: 4, isUnsigned: true)
!239 = !DIEnumerator(name: "CCNOmode", value: 5, isUnsigned: true)
!240 = !DIEnumerator(name: "CCAmode", value: 6, isUnsigned: true)
!241 = !DIEnumerator(name: "CCCmode", value: 7, isUnsigned: true)
!242 = !DIEnumerator(name: "CCOmode", value: 8, isUnsigned: true)
!243 = !DIEnumerator(name: "CCSmode", value: 9, isUnsigned: true)
!244 = !DIEnumerator(name: "CCZmode", value: 10, isUnsigned: true)
!245 = !DIEnumerator(name: "CCFPmode", value: 11, isUnsigned: true)
!246 = !DIEnumerator(name: "CCFPUmode", value: 12, isUnsigned: true)
!247 = !DIEnumerator(name: "BImode", value: 13, isUnsigned: true)
!248 = !DIEnumerator(name: "QImode", value: 14, isUnsigned: true)
!249 = !DIEnumerator(name: "HImode", value: 15, isUnsigned: true)
!250 = !DIEnumerator(name: "SImode", value: 16, isUnsigned: true)
!251 = !DIEnumerator(name: "DImode", value: 17, isUnsigned: true)
!252 = !DIEnumerator(name: "TImode", value: 18, isUnsigned: true)
!253 = !DIEnumerator(name: "OImode", value: 19, isUnsigned: true)
!254 = !DIEnumerator(name: "QQmode", value: 20, isUnsigned: true)
!255 = !DIEnumerator(name: "HQmode", value: 21, isUnsigned: true)
!256 = !DIEnumerator(name: "SQmode", value: 22, isUnsigned: true)
!257 = !DIEnumerator(name: "DQmode", value: 23, isUnsigned: true)
!258 = !DIEnumerator(name: "TQmode", value: 24, isUnsigned: true)
!259 = !DIEnumerator(name: "UQQmode", value: 25, isUnsigned: true)
!260 = !DIEnumerator(name: "UHQmode", value: 26, isUnsigned: true)
!261 = !DIEnumerator(name: "USQmode", value: 27, isUnsigned: true)
!262 = !DIEnumerator(name: "UDQmode", value: 28, isUnsigned: true)
!263 = !DIEnumerator(name: "UTQmode", value: 29, isUnsigned: true)
!264 = !DIEnumerator(name: "HAmode", value: 30, isUnsigned: true)
!265 = !DIEnumerator(name: "SAmode", value: 31, isUnsigned: true)
!266 = !DIEnumerator(name: "DAmode", value: 32, isUnsigned: true)
!267 = !DIEnumerator(name: "TAmode", value: 33, isUnsigned: true)
!268 = !DIEnumerator(name: "UHAmode", value: 34, isUnsigned: true)
!269 = !DIEnumerator(name: "USAmode", value: 35, isUnsigned: true)
!270 = !DIEnumerator(name: "UDAmode", value: 36, isUnsigned: true)
!271 = !DIEnumerator(name: "UTAmode", value: 37, isUnsigned: true)
!272 = !DIEnumerator(name: "SFmode", value: 38, isUnsigned: true)
!273 = !DIEnumerator(name: "DFmode", value: 39, isUnsigned: true)
!274 = !DIEnumerator(name: "XFmode", value: 40, isUnsigned: true)
!275 = !DIEnumerator(name: "TFmode", value: 41, isUnsigned: true)
!276 = !DIEnumerator(name: "SDmode", value: 42, isUnsigned: true)
!277 = !DIEnumerator(name: "DDmode", value: 43, isUnsigned: true)
!278 = !DIEnumerator(name: "TDmode", value: 44, isUnsigned: true)
!279 = !DIEnumerator(name: "CQImode", value: 45, isUnsigned: true)
!280 = !DIEnumerator(name: "CHImode", value: 46, isUnsigned: true)
!281 = !DIEnumerator(name: "CSImode", value: 47, isUnsigned: true)
!282 = !DIEnumerator(name: "CDImode", value: 48, isUnsigned: true)
!283 = !DIEnumerator(name: "CTImode", value: 49, isUnsigned: true)
!284 = !DIEnumerator(name: "COImode", value: 50, isUnsigned: true)
!285 = !DIEnumerator(name: "SCmode", value: 51, isUnsigned: true)
!286 = !DIEnumerator(name: "DCmode", value: 52, isUnsigned: true)
!287 = !DIEnumerator(name: "XCmode", value: 53, isUnsigned: true)
!288 = !DIEnumerator(name: "TCmode", value: 54, isUnsigned: true)
!289 = !DIEnumerator(name: "V2QImode", value: 55, isUnsigned: true)
!290 = !DIEnumerator(name: "V4QImode", value: 56, isUnsigned: true)
!291 = !DIEnumerator(name: "V2HImode", value: 57, isUnsigned: true)
!292 = !DIEnumerator(name: "V1SImode", value: 58, isUnsigned: true)
!293 = !DIEnumerator(name: "V8QImode", value: 59, isUnsigned: true)
!294 = !DIEnumerator(name: "V4HImode", value: 60, isUnsigned: true)
!295 = !DIEnumerator(name: "V2SImode", value: 61, isUnsigned: true)
!296 = !DIEnumerator(name: "V1DImode", value: 62, isUnsigned: true)
!297 = !DIEnumerator(name: "V16QImode", value: 63, isUnsigned: true)
!298 = !DIEnumerator(name: "V8HImode", value: 64, isUnsigned: true)
!299 = !DIEnumerator(name: "V4SImode", value: 65, isUnsigned: true)
!300 = !DIEnumerator(name: "V2DImode", value: 66, isUnsigned: true)
!301 = !DIEnumerator(name: "V1TImode", value: 67, isUnsigned: true)
!302 = !DIEnumerator(name: "V32QImode", value: 68, isUnsigned: true)
!303 = !DIEnumerator(name: "V16HImode", value: 69, isUnsigned: true)
!304 = !DIEnumerator(name: "V8SImode", value: 70, isUnsigned: true)
!305 = !DIEnumerator(name: "V4DImode", value: 71, isUnsigned: true)
!306 = !DIEnumerator(name: "V2TImode", value: 72, isUnsigned: true)
!307 = !DIEnumerator(name: "V64QImode", value: 73, isUnsigned: true)
!308 = !DIEnumerator(name: "V32HImode", value: 74, isUnsigned: true)
!309 = !DIEnumerator(name: "V16SImode", value: 75, isUnsigned: true)
!310 = !DIEnumerator(name: "V8DImode", value: 76, isUnsigned: true)
!311 = !DIEnumerator(name: "V4TImode", value: 77, isUnsigned: true)
!312 = !DIEnumerator(name: "V2SFmode", value: 78, isUnsigned: true)
!313 = !DIEnumerator(name: "V4SFmode", value: 79, isUnsigned: true)
!314 = !DIEnumerator(name: "V2DFmode", value: 80, isUnsigned: true)
!315 = !DIEnumerator(name: "V8SFmode", value: 81, isUnsigned: true)
!316 = !DIEnumerator(name: "V4DFmode", value: 82, isUnsigned: true)
!317 = !DIEnumerator(name: "V2TFmode", value: 83, isUnsigned: true)
!318 = !DIEnumerator(name: "V16SFmode", value: 84, isUnsigned: true)
!319 = !DIEnumerator(name: "V8DFmode", value: 85, isUnsigned: true)
!320 = !DIEnumerator(name: "V4TFmode", value: 86, isUnsigned: true)
!321 = !DIEnumerator(name: "MAX_MACHINE_MODE", value: 87, isUnsigned: true)
!322 = !DIEnumerator(name: "MIN_MODE_RANDOM", value: 0, isUnsigned: true)
!323 = !DIEnumerator(name: "MAX_MODE_RANDOM", value: 1, isUnsigned: true)
!324 = !DIEnumerator(name: "MIN_MODE_CC", value: 2, isUnsigned: true)
!325 = !DIEnumerator(name: "MAX_MODE_CC", value: 12, isUnsigned: true)
!326 = !DIEnumerator(name: "MIN_MODE_INT", value: 14, isUnsigned: true)
!327 = !DIEnumerator(name: "MAX_MODE_INT", value: 19, isUnsigned: true)
!328 = !DIEnumerator(name: "MIN_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!329 = !DIEnumerator(name: "MAX_MODE_PARTIAL_INT", value: 0, isUnsigned: true)
!330 = !DIEnumerator(name: "MIN_MODE_FRACT", value: 20, isUnsigned: true)
!331 = !DIEnumerator(name: "MAX_MODE_FRACT", value: 24, isUnsigned: true)
!332 = !DIEnumerator(name: "MIN_MODE_UFRACT", value: 25, isUnsigned: true)
!333 = !DIEnumerator(name: "MAX_MODE_UFRACT", value: 29, isUnsigned: true)
!334 = !DIEnumerator(name: "MIN_MODE_ACCUM", value: 30, isUnsigned: true)
!335 = !DIEnumerator(name: "MAX_MODE_ACCUM", value: 33, isUnsigned: true)
!336 = !DIEnumerator(name: "MIN_MODE_UACCUM", value: 34, isUnsigned: true)
!337 = !DIEnumerator(name: "MAX_MODE_UACCUM", value: 37, isUnsigned: true)
!338 = !DIEnumerator(name: "MIN_MODE_FLOAT", value: 38, isUnsigned: true)
!339 = !DIEnumerator(name: "MAX_MODE_FLOAT", value: 41, isUnsigned: true)
!340 = !DIEnumerator(name: "MIN_MODE_DECIMAL_FLOAT", value: 42, isUnsigned: true)
!341 = !DIEnumerator(name: "MAX_MODE_DECIMAL_FLOAT", value: 44, isUnsigned: true)
!342 = !DIEnumerator(name: "MIN_MODE_COMPLEX_INT", value: 45, isUnsigned: true)
!343 = !DIEnumerator(name: "MAX_MODE_COMPLEX_INT", value: 50, isUnsigned: true)
!344 = !DIEnumerator(name: "MIN_MODE_COMPLEX_FLOAT", value: 51, isUnsigned: true)
!345 = !DIEnumerator(name: "MAX_MODE_COMPLEX_FLOAT", value: 54, isUnsigned: true)
!346 = !DIEnumerator(name: "MIN_MODE_VECTOR_INT", value: 55, isUnsigned: true)
!347 = !DIEnumerator(name: "MAX_MODE_VECTOR_INT", value: 77, isUnsigned: true)
!348 = !DIEnumerator(name: "MIN_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!349 = !DIEnumerator(name: "MAX_MODE_VECTOR_FRACT", value: 0, isUnsigned: true)
!350 = !DIEnumerator(name: "MIN_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!351 = !DIEnumerator(name: "MAX_MODE_VECTOR_UFRACT", value: 0, isUnsigned: true)
!352 = !DIEnumerator(name: "MIN_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!353 = !DIEnumerator(name: "MAX_MODE_VECTOR_ACCUM", value: 0, isUnsigned: true)
!354 = !DIEnumerator(name: "MIN_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!355 = !DIEnumerator(name: "MAX_MODE_VECTOR_UACCUM", value: 0, isUnsigned: true)
!356 = !DIEnumerator(name: "MIN_MODE_VECTOR_FLOAT", value: 78, isUnsigned: true)
!357 = !DIEnumerator(name: "MAX_MODE_VECTOR_FLOAT", value: 86, isUnsigned: true)
!358 = !DIEnumerator(name: "NUM_MACHINE_MODES", value: 87, isUnsigned: true)
!359 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "eh_region_type", file: !360, line: 30, baseType: !7, size: 32, elements: !361)
!360 = !DIFile(filename: "./except.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!361 = !{!362, !363, !364, !365}
!362 = !DIEnumerator(name: "ERT_CLEANUP", value: 0, isUnsigned: true)
!363 = !DIEnumerator(name: "ERT_TRY", value: 1, isUnsigned: true)
!364 = !DIEnumerator(name: "ERT_ALLOWED_EXCEPTIONS", value: 2, isUnsigned: true)
!365 = !DIEnumerator(name: "ERT_MUST_NOT_THROW", value: 3, isUnsigned: true)
!366 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "profile_status_d", file: !367, line: 363, baseType: !7, size: 32, elements: !368)
!367 = !DIFile(filename: "./basic-block.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!368 = !{!369, !370, !371}
!369 = !DIEnumerator(name: "PROFILE_ABSENT", value: 0, isUnsigned: true)
!370 = !DIEnumerator(name: "PROFILE_GUESSED", value: 1, isUnsigned: true)
!371 = !DIEnumerator(name: "PROFILE_READ", value: 2, isUnsigned: true)
!372 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "dom_state", file: !367, line: 355, baseType: !7, size: 32, elements: !373)
!373 = !{!374, !375, !376}
!374 = !DIEnumerator(name: "DOM_NONE", value: 0, isUnsigned: true)
!375 = !DIEnumerator(name: "DOM_NO_FAST_QUERY", value: 1, isUnsigned: true)
!376 = !DIEnumerator(name: "DOM_OK", value: 2, isUnsigned: true)
!377 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "lpt_dec", file: !378, line: 31, baseType: !7, size: 32, elements: !379)
!378 = !DIFile(filename: "./cfgloop.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!379 = !{!380, !381, !382, !383, !384, !385}
!380 = !DIEnumerator(name: "LPT_NONE", value: 0, isUnsigned: true)
!381 = !DIEnumerator(name: "LPT_PEEL_COMPLETELY", value: 1, isUnsigned: true)
!382 = !DIEnumerator(name: "LPT_PEEL_SIMPLE", value: 2, isUnsigned: true)
!383 = !DIEnumerator(name: "LPT_UNROLL_CONSTANT", value: 3, isUnsigned: true)
!384 = !DIEnumerator(name: "LPT_UNROLL_RUNTIME", value: 4, isUnsigned: true)
!385 = !DIEnumerator(name: "LPT_UNROLL_STUPID", value: 5, isUnsigned: true)
!386 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "loop_estimation", file: !378, line: 91, baseType: !7, size: 32, elements: !387)
!387 = !{!388, !389}
!388 = !DIEnumerator(name: "EST_NOT_COMPUTED", value: 0, isUnsigned: true)
!389 = !DIEnumerator(name: "EST_AVAILABLE", value: 1, isUnsigned: true)
!390 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "calling_abi", file: !391, line: 474, baseType: !7, size: 32, elements: !392)
!391 = !DIFile(filename: "./config/i386/i386.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!392 = !{!393, !394}
!393 = !DIEnumerator(name: "SYSV_ABI", value: 0, isUnsigned: true)
!394 = !DIEnumerator(name: "MS_ABI", value: 1, isUnsigned: true)
!395 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_code", file: !396, line: 280, baseType: !7, size: 32, elements: !397)
!396 = !DIFile(filename: "./tree.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!397 = !{!398, !399, !400, !401, !402, !403, !404, !405, !406, !407, !408, !409, !410, !411, !412, !413}
!398 = !DIEnumerator(name: "OMP_CLAUSE_ERROR", value: 0, isUnsigned: true)
!399 = !DIEnumerator(name: "OMP_CLAUSE_PRIVATE", value: 1, isUnsigned: true)
!400 = !DIEnumerator(name: "OMP_CLAUSE_SHARED", value: 2, isUnsigned: true)
!401 = !DIEnumerator(name: "OMP_CLAUSE_FIRSTPRIVATE", value: 3, isUnsigned: true)
!402 = !DIEnumerator(name: "OMP_CLAUSE_LASTPRIVATE", value: 4, isUnsigned: true)
!403 = !DIEnumerator(name: "OMP_CLAUSE_REDUCTION", value: 5, isUnsigned: true)
!404 = !DIEnumerator(name: "OMP_CLAUSE_COPYIN", value: 6, isUnsigned: true)
!405 = !DIEnumerator(name: "OMP_CLAUSE_COPYPRIVATE", value: 7, isUnsigned: true)
!406 = !DIEnumerator(name: "OMP_CLAUSE_IF", value: 8, isUnsigned: true)
!407 = !DIEnumerator(name: "OMP_CLAUSE_NUM_THREADS", value: 9, isUnsigned: true)
!408 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE", value: 10, isUnsigned: true)
!409 = !DIEnumerator(name: "OMP_CLAUSE_NOWAIT", value: 11, isUnsigned: true)
!410 = !DIEnumerator(name: "OMP_CLAUSE_ORDERED", value: 12, isUnsigned: true)
!411 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT", value: 13, isUnsigned: true)
!412 = !DIEnumerator(name: "OMP_CLAUSE_COLLAPSE", value: 14, isUnsigned: true)
!413 = !DIEnumerator(name: "OMP_CLAUSE_UNTIED", value: 15, isUnsigned: true)
!414 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_default_kind", file: !396, line: 1817, baseType: !7, size: 32, elements: !415)
!415 = !{!416, !417, !418, !419, !420}
!416 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_UNSPECIFIED", value: 0, isUnsigned: true)
!417 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_SHARED", value: 1, isUnsigned: true)
!418 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_NONE", value: 2, isUnsigned: true)
!419 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_PRIVATE", value: 3, isUnsigned: true)
!420 = !DIEnumerator(name: "OMP_CLAUSE_DEFAULT_FIRSTPRIVATE", value: 4, isUnsigned: true)
!421 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "omp_clause_schedule_kind", file: !396, line: 1805, baseType: !7, size: 32, elements: !422)
!422 = !{!423, !424, !425, !426, !427}
!423 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_STATIC", value: 0, isUnsigned: true)
!424 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_DYNAMIC", value: 1, isUnsigned: true)
!425 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_GUIDED", value: 2, isUnsigned: true)
!426 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_AUTO", value: 3, isUnsigned: true)
!427 = !DIEnumerator(name: "OMP_CLAUSE_SCHEDULE_RUNTIME", value: 4, isUnsigned: true)
!428 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "tree_code", file: !396, line: 39, baseType: !7, size: 32, elements: !429)
!429 = !{!430, !431, !432, !433, !434, !435, !436, !437, !438, !439, !440, !441, !442, !443, !444, !445, !446, !447, !448, !449, !450, !451, !452, !453, !454, !455, !456, !457, !458, !459, !460, !461, !462, !463, !464, !465, !466, !467, !468, !469, !470, !471, !472, !473, !474, !475, !476, !477, !478, !479, !480, !481, !482, !483, !484, !485, !486, !487, !488, !489, !490, !491, !492, !493, !494, !495, !496, !497, !498, !499, !500, !501, !502, !503, !504, !505, !506, !507, !508, !509, !510, !511, !512, !513, !514, !515, !516, !517, !518, !519, !520, !521, !522, !523, !524, !525, !526, !527, !528, !529, !530, !531, !532, !533, !534, !535, !536, !537, !538, !539, !540, !541, !542, !543, !544, !545, !546, !547, !548, !549, !550, !551, !552, !553, !554, !555, !556, !557, !558, !559, !560, !561, !562, !563, !564, !565, !566, !567, !568, !569, !570, !571, !572, !573, !574, !575, !576, !577, !578, !579, !580, !581, !582, !583, !584, !585, !586, !587, !588, !589, !590, !591, !592, !593, !594, !595, !596, !597, !598, !599, !600, !601, !602, !603, !604, !605, !606, !607, !608, !609, !610, !611, !612, !613, !614, !615, !616, !617, !618, !619, !620, !621}
!430 = !DIEnumerator(name: "ERROR_MARK", value: 0, isUnsigned: true)
!431 = !DIEnumerator(name: "IDENTIFIER_NODE", value: 1, isUnsigned: true)
!432 = !DIEnumerator(name: "TREE_LIST", value: 2, isUnsigned: true)
!433 = !DIEnumerator(name: "TREE_VEC", value: 3, isUnsigned: true)
!434 = !DIEnumerator(name: "BLOCK", value: 4, isUnsigned: true)
!435 = !DIEnumerator(name: "OFFSET_TYPE", value: 5, isUnsigned: true)
!436 = !DIEnumerator(name: "ENUMERAL_TYPE", value: 6, isUnsigned: true)
!437 = !DIEnumerator(name: "BOOLEAN_TYPE", value: 7, isUnsigned: true)
!438 = !DIEnumerator(name: "INTEGER_TYPE", value: 8, isUnsigned: true)
!439 = !DIEnumerator(name: "REAL_TYPE", value: 9, isUnsigned: true)
!440 = !DIEnumerator(name: "POINTER_TYPE", value: 10, isUnsigned: true)
!441 = !DIEnumerator(name: "FIXED_POINT_TYPE", value: 11, isUnsigned: true)
!442 = !DIEnumerator(name: "REFERENCE_TYPE", value: 12, isUnsigned: true)
!443 = !DIEnumerator(name: "COMPLEX_TYPE", value: 13, isUnsigned: true)
!444 = !DIEnumerator(name: "VECTOR_TYPE", value: 14, isUnsigned: true)
!445 = !DIEnumerator(name: "ARRAY_TYPE", value: 15, isUnsigned: true)
!446 = !DIEnumerator(name: "RECORD_TYPE", value: 16, isUnsigned: true)
!447 = !DIEnumerator(name: "UNION_TYPE", value: 17, isUnsigned: true)
!448 = !DIEnumerator(name: "QUAL_UNION_TYPE", value: 18, isUnsigned: true)
!449 = !DIEnumerator(name: "VOID_TYPE", value: 19, isUnsigned: true)
!450 = !DIEnumerator(name: "FUNCTION_TYPE", value: 20, isUnsigned: true)
!451 = !DIEnumerator(name: "METHOD_TYPE", value: 21, isUnsigned: true)
!452 = !DIEnumerator(name: "LANG_TYPE", value: 22, isUnsigned: true)
!453 = !DIEnumerator(name: "INTEGER_CST", value: 23, isUnsigned: true)
!454 = !DIEnumerator(name: "REAL_CST", value: 24, isUnsigned: true)
!455 = !DIEnumerator(name: "FIXED_CST", value: 25, isUnsigned: true)
!456 = !DIEnumerator(name: "COMPLEX_CST", value: 26, isUnsigned: true)
!457 = !DIEnumerator(name: "VECTOR_CST", value: 27, isUnsigned: true)
!458 = !DIEnumerator(name: "STRING_CST", value: 28, isUnsigned: true)
!459 = !DIEnumerator(name: "FUNCTION_DECL", value: 29, isUnsigned: true)
!460 = !DIEnumerator(name: "LABEL_DECL", value: 30, isUnsigned: true)
!461 = !DIEnumerator(name: "FIELD_DECL", value: 31, isUnsigned: true)
!462 = !DIEnumerator(name: "VAR_DECL", value: 32, isUnsigned: true)
!463 = !DIEnumerator(name: "CONST_DECL", value: 33, isUnsigned: true)
!464 = !DIEnumerator(name: "PARM_DECL", value: 34, isUnsigned: true)
!465 = !DIEnumerator(name: "TYPE_DECL", value: 35, isUnsigned: true)
!466 = !DIEnumerator(name: "RESULT_DECL", value: 36, isUnsigned: true)
!467 = !DIEnumerator(name: "DEBUG_EXPR_DECL", value: 37, isUnsigned: true)
!468 = !DIEnumerator(name: "NAMESPACE_DECL", value: 38, isUnsigned: true)
!469 = !DIEnumerator(name: "IMPORTED_DECL", value: 39, isUnsigned: true)
!470 = !DIEnumerator(name: "TRANSLATION_UNIT_DECL", value: 40, isUnsigned: true)
!471 = !DIEnumerator(name: "COMPONENT_REF", value: 41, isUnsigned: true)
!472 = !DIEnumerator(name: "BIT_FIELD_REF", value: 42, isUnsigned: true)
!473 = !DIEnumerator(name: "REALPART_EXPR", value: 43, isUnsigned: true)
!474 = !DIEnumerator(name: "IMAGPART_EXPR", value: 44, isUnsigned: true)
!475 = !DIEnumerator(name: "ARRAY_REF", value: 45, isUnsigned: true)
!476 = !DIEnumerator(name: "ARRAY_RANGE_REF", value: 46, isUnsigned: true)
!477 = !DIEnumerator(name: "INDIRECT_REF", value: 47, isUnsigned: true)
!478 = !DIEnumerator(name: "ALIGN_INDIRECT_REF", value: 48, isUnsigned: true)
!479 = !DIEnumerator(name: "MISALIGNED_INDIRECT_REF", value: 49, isUnsigned: true)
!480 = !DIEnumerator(name: "OBJ_TYPE_REF", value: 50, isUnsigned: true)
!481 = !DIEnumerator(name: "CONSTRUCTOR", value: 51, isUnsigned: true)
!482 = !DIEnumerator(name: "COMPOUND_EXPR", value: 52, isUnsigned: true)
!483 = !DIEnumerator(name: "MODIFY_EXPR", value: 53, isUnsigned: true)
!484 = !DIEnumerator(name: "INIT_EXPR", value: 54, isUnsigned: true)
!485 = !DIEnumerator(name: "TARGET_EXPR", value: 55, isUnsigned: true)
!486 = !DIEnumerator(name: "COND_EXPR", value: 56, isUnsigned: true)
!487 = !DIEnumerator(name: "VEC_COND_EXPR", value: 57, isUnsigned: true)
!488 = !DIEnumerator(name: "BIND_EXPR", value: 58, isUnsigned: true)
!489 = !DIEnumerator(name: "CALL_EXPR", value: 59, isUnsigned: true)
!490 = !DIEnumerator(name: "WITH_CLEANUP_EXPR", value: 60, isUnsigned: true)
!491 = !DIEnumerator(name: "CLEANUP_POINT_EXPR", value: 61, isUnsigned: true)
!492 = !DIEnumerator(name: "PLACEHOLDER_EXPR", value: 62, isUnsigned: true)
!493 = !DIEnumerator(name: "PLUS_EXPR", value: 63, isUnsigned: true)
!494 = !DIEnumerator(name: "MINUS_EXPR", value: 64, isUnsigned: true)
!495 = !DIEnumerator(name: "MULT_EXPR", value: 65, isUnsigned: true)
!496 = !DIEnumerator(name: "POINTER_PLUS_EXPR", value: 66, isUnsigned: true)
!497 = !DIEnumerator(name: "TRUNC_DIV_EXPR", value: 67, isUnsigned: true)
!498 = !DIEnumerator(name: "CEIL_DIV_EXPR", value: 68, isUnsigned: true)
!499 = !DIEnumerator(name: "FLOOR_DIV_EXPR", value: 69, isUnsigned: true)
!500 = !DIEnumerator(name: "ROUND_DIV_EXPR", value: 70, isUnsigned: true)
!501 = !DIEnumerator(name: "TRUNC_MOD_EXPR", value: 71, isUnsigned: true)
!502 = !DIEnumerator(name: "CEIL_MOD_EXPR", value: 72, isUnsigned: true)
!503 = !DIEnumerator(name: "FLOOR_MOD_EXPR", value: 73, isUnsigned: true)
!504 = !DIEnumerator(name: "ROUND_MOD_EXPR", value: 74, isUnsigned: true)
!505 = !DIEnumerator(name: "RDIV_EXPR", value: 75, isUnsigned: true)
!506 = !DIEnumerator(name: "EXACT_DIV_EXPR", value: 76, isUnsigned: true)
!507 = !DIEnumerator(name: "FIX_TRUNC_EXPR", value: 77, isUnsigned: true)
!508 = !DIEnumerator(name: "FLOAT_EXPR", value: 78, isUnsigned: true)
!509 = !DIEnumerator(name: "NEGATE_EXPR", value: 79, isUnsigned: true)
!510 = !DIEnumerator(name: "MIN_EXPR", value: 80, isUnsigned: true)
!511 = !DIEnumerator(name: "MAX_EXPR", value: 81, isUnsigned: true)
!512 = !DIEnumerator(name: "ABS_EXPR", value: 82, isUnsigned: true)
!513 = !DIEnumerator(name: "LSHIFT_EXPR", value: 83, isUnsigned: true)
!514 = !DIEnumerator(name: "RSHIFT_EXPR", value: 84, isUnsigned: true)
!515 = !DIEnumerator(name: "LROTATE_EXPR", value: 85, isUnsigned: true)
!516 = !DIEnumerator(name: "RROTATE_EXPR", value: 86, isUnsigned: true)
!517 = !DIEnumerator(name: "BIT_IOR_EXPR", value: 87, isUnsigned: true)
!518 = !DIEnumerator(name: "BIT_XOR_EXPR", value: 88, isUnsigned: true)
!519 = !DIEnumerator(name: "BIT_AND_EXPR", value: 89, isUnsigned: true)
!520 = !DIEnumerator(name: "BIT_NOT_EXPR", value: 90, isUnsigned: true)
!521 = !DIEnumerator(name: "TRUTH_ANDIF_EXPR", value: 91, isUnsigned: true)
!522 = !DIEnumerator(name: "TRUTH_ORIF_EXPR", value: 92, isUnsigned: true)
!523 = !DIEnumerator(name: "TRUTH_AND_EXPR", value: 93, isUnsigned: true)
!524 = !DIEnumerator(name: "TRUTH_OR_EXPR", value: 94, isUnsigned: true)
!525 = !DIEnumerator(name: "TRUTH_XOR_EXPR", value: 95, isUnsigned: true)
!526 = !DIEnumerator(name: "TRUTH_NOT_EXPR", value: 96, isUnsigned: true)
!527 = !DIEnumerator(name: "LT_EXPR", value: 97, isUnsigned: true)
!528 = !DIEnumerator(name: "LE_EXPR", value: 98, isUnsigned: true)
!529 = !DIEnumerator(name: "GT_EXPR", value: 99, isUnsigned: true)
!530 = !DIEnumerator(name: "GE_EXPR", value: 100, isUnsigned: true)
!531 = !DIEnumerator(name: "EQ_EXPR", value: 101, isUnsigned: true)
!532 = !DIEnumerator(name: "NE_EXPR", value: 102, isUnsigned: true)
!533 = !DIEnumerator(name: "UNORDERED_EXPR", value: 103, isUnsigned: true)
!534 = !DIEnumerator(name: "ORDERED_EXPR", value: 104, isUnsigned: true)
!535 = !DIEnumerator(name: "UNLT_EXPR", value: 105, isUnsigned: true)
!536 = !DIEnumerator(name: "UNLE_EXPR", value: 106, isUnsigned: true)
!537 = !DIEnumerator(name: "UNGT_EXPR", value: 107, isUnsigned: true)
!538 = !DIEnumerator(name: "UNGE_EXPR", value: 108, isUnsigned: true)
!539 = !DIEnumerator(name: "UNEQ_EXPR", value: 109, isUnsigned: true)
!540 = !DIEnumerator(name: "LTGT_EXPR", value: 110, isUnsigned: true)
!541 = !DIEnumerator(name: "RANGE_EXPR", value: 111, isUnsigned: true)
!542 = !DIEnumerator(name: "PAREN_EXPR", value: 112, isUnsigned: true)
!543 = !DIEnumerator(name: "CONVERT_EXPR", value: 113, isUnsigned: true)
!544 = !DIEnumerator(name: "ADDR_SPACE_CONVERT_EXPR", value: 114, isUnsigned: true)
!545 = !DIEnumerator(name: "FIXED_CONVERT_EXPR", value: 115, isUnsigned: true)
!546 = !DIEnumerator(name: "NOP_EXPR", value: 116, isUnsigned: true)
!547 = !DIEnumerator(name: "NON_LVALUE_EXPR", value: 117, isUnsigned: true)
!548 = !DIEnumerator(name: "VIEW_CONVERT_EXPR", value: 118, isUnsigned: true)
!549 = !DIEnumerator(name: "COMPOUND_LITERAL_EXPR", value: 119, isUnsigned: true)
!550 = !DIEnumerator(name: "SAVE_EXPR", value: 120, isUnsigned: true)
!551 = !DIEnumerator(name: "ADDR_EXPR", value: 121, isUnsigned: true)
!552 = !DIEnumerator(name: "FDESC_EXPR", value: 122, isUnsigned: true)
!553 = !DIEnumerator(name: "COMPLEX_EXPR", value: 123, isUnsigned: true)
!554 = !DIEnumerator(name: "CONJ_EXPR", value: 124, isUnsigned: true)
!555 = !DIEnumerator(name: "PREDECREMENT_EXPR", value: 125, isUnsigned: true)
!556 = !DIEnumerator(name: "PREINCREMENT_EXPR", value: 126, isUnsigned: true)
!557 = !DIEnumerator(name: "POSTDECREMENT_EXPR", value: 127, isUnsigned: true)
!558 = !DIEnumerator(name: "POSTINCREMENT_EXPR", value: 128, isUnsigned: true)
!559 = !DIEnumerator(name: "VA_ARG_EXPR", value: 129, isUnsigned: true)
!560 = !DIEnumerator(name: "TRY_CATCH_EXPR", value: 130, isUnsigned: true)
!561 = !DIEnumerator(name: "TRY_FINALLY_EXPR", value: 131, isUnsigned: true)
!562 = !DIEnumerator(name: "DECL_EXPR", value: 132, isUnsigned: true)
!563 = !DIEnumerator(name: "LABEL_EXPR", value: 133, isUnsigned: true)
!564 = !DIEnumerator(name: "GOTO_EXPR", value: 134, isUnsigned: true)
!565 = !DIEnumerator(name: "RETURN_EXPR", value: 135, isUnsigned: true)
!566 = !DIEnumerator(name: "EXIT_EXPR", value: 136, isUnsigned: true)
!567 = !DIEnumerator(name: "LOOP_EXPR", value: 137, isUnsigned: true)
!568 = !DIEnumerator(name: "SWITCH_EXPR", value: 138, isUnsigned: true)
!569 = !DIEnumerator(name: "CASE_LABEL_EXPR", value: 139, isUnsigned: true)
!570 = !DIEnumerator(name: "ASM_EXPR", value: 140, isUnsigned: true)
!571 = !DIEnumerator(name: "SSA_NAME", value: 141, isUnsigned: true)
!572 = !DIEnumerator(name: "CATCH_EXPR", value: 142, isUnsigned: true)
!573 = !DIEnumerator(name: "EH_FILTER_EXPR", value: 143, isUnsigned: true)
!574 = !DIEnumerator(name: "SCEV_KNOWN", value: 144, isUnsigned: true)
!575 = !DIEnumerator(name: "SCEV_NOT_KNOWN", value: 145, isUnsigned: true)
!576 = !DIEnumerator(name: "POLYNOMIAL_CHREC", value: 146, isUnsigned: true)
!577 = !DIEnumerator(name: "STATEMENT_LIST", value: 147, isUnsigned: true)
!578 = !DIEnumerator(name: "ASSERT_EXPR", value: 148, isUnsigned: true)
!579 = !DIEnumerator(name: "TREE_BINFO", value: 149, isUnsigned: true)
!580 = !DIEnumerator(name: "WITH_SIZE_EXPR", value: 150, isUnsigned: true)
!581 = !DIEnumerator(name: "REALIGN_LOAD_EXPR", value: 151, isUnsigned: true)
!582 = !DIEnumerator(name: "TARGET_MEM_REF", value: 152, isUnsigned: true)
!583 = !DIEnumerator(name: "OMP_PARALLEL", value: 153, isUnsigned: true)
!584 = !DIEnumerator(name: "OMP_TASK", value: 154, isUnsigned: true)
!585 = !DIEnumerator(name: "OMP_FOR", value: 155, isUnsigned: true)
!586 = !DIEnumerator(name: "OMP_SECTIONS", value: 156, isUnsigned: true)
!587 = !DIEnumerator(name: "OMP_SINGLE", value: 157, isUnsigned: true)
!588 = !DIEnumerator(name: "OMP_SECTION", value: 158, isUnsigned: true)
!589 = !DIEnumerator(name: "OMP_MASTER", value: 159, isUnsigned: true)
!590 = !DIEnumerator(name: "OMP_ORDERED", value: 160, isUnsigned: true)
!591 = !DIEnumerator(name: "OMP_CRITICAL", value: 161, isUnsigned: true)
!592 = !DIEnumerator(name: "OMP_ATOMIC", value: 162, isUnsigned: true)
!593 = !DIEnumerator(name: "OMP_CLAUSE", value: 163, isUnsigned: true)
!594 = !DIEnumerator(name: "REDUC_MAX_EXPR", value: 164, isUnsigned: true)
!595 = !DIEnumerator(name: "REDUC_MIN_EXPR", value: 165, isUnsigned: true)
!596 = !DIEnumerator(name: "REDUC_PLUS_EXPR", value: 166, isUnsigned: true)
!597 = !DIEnumerator(name: "DOT_PROD_EXPR", value: 167, isUnsigned: true)
!598 = !DIEnumerator(name: "WIDEN_SUM_EXPR", value: 168, isUnsigned: true)
!599 = !DIEnumerator(name: "WIDEN_MULT_EXPR", value: 169, isUnsigned: true)
!600 = !DIEnumerator(name: "VEC_LSHIFT_EXPR", value: 170, isUnsigned: true)
!601 = !DIEnumerator(name: "VEC_RSHIFT_EXPR", value: 171, isUnsigned: true)
!602 = !DIEnumerator(name: "VEC_WIDEN_MULT_HI_EXPR", value: 172, isUnsigned: true)
!603 = !DIEnumerator(name: "VEC_WIDEN_MULT_LO_EXPR", value: 173, isUnsigned: true)
!604 = !DIEnumerator(name: "VEC_UNPACK_HI_EXPR", value: 174, isUnsigned: true)
!605 = !DIEnumerator(name: "VEC_UNPACK_LO_EXPR", value: 175, isUnsigned: true)
!606 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_HI_EXPR", value: 176, isUnsigned: true)
!607 = !DIEnumerator(name: "VEC_UNPACK_FLOAT_LO_EXPR", value: 177, isUnsigned: true)
!608 = !DIEnumerator(name: "VEC_PACK_TRUNC_EXPR", value: 178, isUnsigned: true)
!609 = !DIEnumerator(name: "VEC_PACK_SAT_EXPR", value: 179, isUnsigned: true)
!610 = !DIEnumerator(name: "VEC_PACK_FIX_TRUNC_EXPR", value: 180, isUnsigned: true)
!611 = !DIEnumerator(name: "VEC_EXTRACT_EVEN_EXPR", value: 181, isUnsigned: true)
!612 = !DIEnumerator(name: "VEC_EXTRACT_ODD_EXPR", value: 182, isUnsigned: true)
!613 = !DIEnumerator(name: "VEC_INTERLEAVE_HIGH_EXPR", value: 183, isUnsigned: true)
!614 = !DIEnumerator(name: "VEC_INTERLEAVE_LOW_EXPR", value: 184, isUnsigned: true)
!615 = !DIEnumerator(name: "PREDICT_EXPR", value: 185, isUnsigned: true)
!616 = !DIEnumerator(name: "OPTIMIZATION_NODE", value: 186, isUnsigned: true)
!617 = !DIEnumerator(name: "TARGET_OPTION_NODE", value: 187, isUnsigned: true)
!618 = !DIEnumerator(name: "LAST_AND_UNUSED_TREE_CODE", value: 188, isUnsigned: true)
!619 = !DIEnumerator(name: "C_MAYBE_CONST_EXPR", value: 189, isUnsigned: true)
!620 = !DIEnumerator(name: "EXCESS_PRECISION_EXPR", value: 190, isUnsigned: true)
!621 = !DIEnumerator(name: "MAX_TREE_CODES", value: 191, isUnsigned: true)
!622 = !DICompositeType(tag: DW_TAG_enumeration_type, file: !378, line: 170, baseType: !7, size: 32, elements: !623)
!623 = !{!624, !625, !626, !627, !628, !629, !630, !631}
!624 = !DIEnumerator(name: "LOOPS_HAVE_PREHEADERS", value: 1, isUnsigned: true)
!625 = !DIEnumerator(name: "LOOPS_HAVE_SIMPLE_LATCHES", value: 2, isUnsigned: true)
!626 = !DIEnumerator(name: "LOOPS_HAVE_MARKED_IRREDUCIBLE_REGIONS", value: 4, isUnsigned: true)
!627 = !DIEnumerator(name: "LOOPS_HAVE_RECORDED_EXITS", value: 8, isUnsigned: true)
!628 = !DIEnumerator(name: "LOOPS_MAY_HAVE_MULTIPLE_LATCHES", value: 16, isUnsigned: true)
!629 = !DIEnumerator(name: "LOOP_CLOSED_SSA", value: 32, isUnsigned: true)
!630 = !DIEnumerator(name: "LOOPS_NEED_FIXUP", value: 64, isUnsigned: true)
!631 = !DIEnumerator(name: "LOOPS_HAVE_FALLTHRU_PREHEADERS", value: 128, isUnsigned: true)
!632 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "cdi_direction", file: !367, line: 912, baseType: !7, size: 32, elements: !633)
!633 = !{!634, !635}
!634 = !DIEnumerator(name: "CDI_DOMINATORS", value: 1, isUnsigned: true)
!635 = !DIEnumerator(name: "CDI_POST_DOMINATORS", value: 2, isUnsigned: true)
!636 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "df_changeable_flags", file: !637, line: 463, baseType: !7, size: 32, elements: !638)
!637 = !DIFile(filename: "./df.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!638 = !{!639, !640, !641, !642, !643, !644, !645}
!639 = !DIEnumerator(name: "DF_LR_RUN_DCE", value: 1, isUnsigned: true)
!640 = !DIEnumerator(name: "DF_NO_HARD_REGS", value: 2, isUnsigned: true)
!641 = !DIEnumerator(name: "DF_EQ_NOTES", value: 4, isUnsigned: true)
!642 = !DIEnumerator(name: "DF_NO_REGS_EVER_LIVE", value: 8, isUnsigned: true)
!643 = !DIEnumerator(name: "DF_NO_INSN_RESCAN", value: 16, isUnsigned: true)
!644 = !DIEnumerator(name: "DF_DEFER_INSN_RESCAN", value: 32, isUnsigned: true)
!645 = !DIEnumerator(name: "DF_VERIFY_SCHEDULED", value: 64, isUnsigned: true)
!646 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_index", file: !647, line: 76, baseType: !7, size: 32, elements: !648)
!647 = !DIFile(filename: "./optabs.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!648 = !{!649, !650, !651, !652, !653, !654, !655, !656, !657, !658, !659, !660, !661, !662, !663, !664, !665, !666, !667, !668, !669, !670, !671, !672, !673, !674, !675, !676, !677, !678, !679, !680, !681, !682, !683, !684, !685, !686, !687, !688, !689, !690, !691, !692, !693, !694, !695, !696, !697, !698, !699, !700, !701, !702, !703, !704, !705, !706, !707, !708, !709, !710, !711, !712, !713, !714, !715, !716, !717, !718, !719, !720, !721, !722, !723, !724, !725, !726, !727, !728, !729, !730, !731, !732, !733, !734, !735, !736, !737, !738, !739, !740, !741, !742, !743, !744, !745, !746, !747, !748, !749, !750, !751, !752, !753, !754, !755, !756, !757, !758, !759, !760, !761, !762, !763, !764, !765, !766, !767, !768, !769, !770, !771, !772, !773, !774, !775, !776, !777, !778, !779, !780, !781, !782, !783, !784, !785, !786, !787, !788, !789, !790, !791, !792, !793, !794, !795, !796, !797, !798, !799, !800, !801, !802, !803, !804, !805, !806, !807, !808}
!649 = !DIEnumerator(name: "OTI_ssadd", value: 0, isUnsigned: true)
!650 = !DIEnumerator(name: "OTI_usadd", value: 1, isUnsigned: true)
!651 = !DIEnumerator(name: "OTI_sssub", value: 2, isUnsigned: true)
!652 = !DIEnumerator(name: "OTI_ussub", value: 3, isUnsigned: true)
!653 = !DIEnumerator(name: "OTI_ssmul", value: 4, isUnsigned: true)
!654 = !DIEnumerator(name: "OTI_usmul", value: 5, isUnsigned: true)
!655 = !DIEnumerator(name: "OTI_ssdiv", value: 6, isUnsigned: true)
!656 = !DIEnumerator(name: "OTI_usdiv", value: 7, isUnsigned: true)
!657 = !DIEnumerator(name: "OTI_ssneg", value: 8, isUnsigned: true)
!658 = !DIEnumerator(name: "OTI_usneg", value: 9, isUnsigned: true)
!659 = !DIEnumerator(name: "OTI_ssashl", value: 10, isUnsigned: true)
!660 = !DIEnumerator(name: "OTI_usashl", value: 11, isUnsigned: true)
!661 = !DIEnumerator(name: "OTI_add", value: 12, isUnsigned: true)
!662 = !DIEnumerator(name: "OTI_addv", value: 13, isUnsigned: true)
!663 = !DIEnumerator(name: "OTI_sub", value: 14, isUnsigned: true)
!664 = !DIEnumerator(name: "OTI_subv", value: 15, isUnsigned: true)
!665 = !DIEnumerator(name: "OTI_smul", value: 16, isUnsigned: true)
!666 = !DIEnumerator(name: "OTI_smulv", value: 17, isUnsigned: true)
!667 = !DIEnumerator(name: "OTI_smul_highpart", value: 18, isUnsigned: true)
!668 = !DIEnumerator(name: "OTI_umul_highpart", value: 19, isUnsigned: true)
!669 = !DIEnumerator(name: "OTI_smul_widen", value: 20, isUnsigned: true)
!670 = !DIEnumerator(name: "OTI_umul_widen", value: 21, isUnsigned: true)
!671 = !DIEnumerator(name: "OTI_usmul_widen", value: 22, isUnsigned: true)
!672 = !DIEnumerator(name: "OTI_smadd_widen", value: 23, isUnsigned: true)
!673 = !DIEnumerator(name: "OTI_umadd_widen", value: 24, isUnsigned: true)
!674 = !DIEnumerator(name: "OTI_ssmadd_widen", value: 25, isUnsigned: true)
!675 = !DIEnumerator(name: "OTI_usmadd_widen", value: 26, isUnsigned: true)
!676 = !DIEnumerator(name: "OTI_smsub_widen", value: 27, isUnsigned: true)
!677 = !DIEnumerator(name: "OTI_umsub_widen", value: 28, isUnsigned: true)
!678 = !DIEnumerator(name: "OTI_ssmsub_widen", value: 29, isUnsigned: true)
!679 = !DIEnumerator(name: "OTI_usmsub_widen", value: 30, isUnsigned: true)
!680 = !DIEnumerator(name: "OTI_sdiv", value: 31, isUnsigned: true)
!681 = !DIEnumerator(name: "OTI_sdivv", value: 32, isUnsigned: true)
!682 = !DIEnumerator(name: "OTI_sdivmod", value: 33, isUnsigned: true)
!683 = !DIEnumerator(name: "OTI_udiv", value: 34, isUnsigned: true)
!684 = !DIEnumerator(name: "OTI_udivmod", value: 35, isUnsigned: true)
!685 = !DIEnumerator(name: "OTI_smod", value: 36, isUnsigned: true)
!686 = !DIEnumerator(name: "OTI_umod", value: 37, isUnsigned: true)
!687 = !DIEnumerator(name: "OTI_fmod", value: 38, isUnsigned: true)
!688 = !DIEnumerator(name: "OTI_remainder", value: 39, isUnsigned: true)
!689 = !DIEnumerator(name: "OTI_ftrunc", value: 40, isUnsigned: true)
!690 = !DIEnumerator(name: "OTI_and", value: 41, isUnsigned: true)
!691 = !DIEnumerator(name: "OTI_ior", value: 42, isUnsigned: true)
!692 = !DIEnumerator(name: "OTI_xor", value: 43, isUnsigned: true)
!693 = !DIEnumerator(name: "OTI_ashl", value: 44, isUnsigned: true)
!694 = !DIEnumerator(name: "OTI_lshr", value: 45, isUnsigned: true)
!695 = !DIEnumerator(name: "OTI_ashr", value: 46, isUnsigned: true)
!696 = !DIEnumerator(name: "OTI_rotl", value: 47, isUnsigned: true)
!697 = !DIEnumerator(name: "OTI_rotr", value: 48, isUnsigned: true)
!698 = !DIEnumerator(name: "OTI_vashl", value: 49, isUnsigned: true)
!699 = !DIEnumerator(name: "OTI_vlshr", value: 50, isUnsigned: true)
!700 = !DIEnumerator(name: "OTI_vashr", value: 51, isUnsigned: true)
!701 = !DIEnumerator(name: "OTI_vrotl", value: 52, isUnsigned: true)
!702 = !DIEnumerator(name: "OTI_vrotr", value: 53, isUnsigned: true)
!703 = !DIEnumerator(name: "OTI_smin", value: 54, isUnsigned: true)
!704 = !DIEnumerator(name: "OTI_smax", value: 55, isUnsigned: true)
!705 = !DIEnumerator(name: "OTI_umin", value: 56, isUnsigned: true)
!706 = !DIEnumerator(name: "OTI_umax", value: 57, isUnsigned: true)
!707 = !DIEnumerator(name: "OTI_pow", value: 58, isUnsigned: true)
!708 = !DIEnumerator(name: "OTI_atan2", value: 59, isUnsigned: true)
!709 = !DIEnumerator(name: "OTI_mov", value: 60, isUnsigned: true)
!710 = !DIEnumerator(name: "OTI_movstrict", value: 61, isUnsigned: true)
!711 = !DIEnumerator(name: "OTI_movmisalign", value: 62, isUnsigned: true)
!712 = !DIEnumerator(name: "OTI_storent", value: 63, isUnsigned: true)
!713 = !DIEnumerator(name: "OTI_neg", value: 64, isUnsigned: true)
!714 = !DIEnumerator(name: "OTI_negv", value: 65, isUnsigned: true)
!715 = !DIEnumerator(name: "OTI_abs", value: 66, isUnsigned: true)
!716 = !DIEnumerator(name: "OTI_absv", value: 67, isUnsigned: true)
!717 = !DIEnumerator(name: "OTI_bswap", value: 68, isUnsigned: true)
!718 = !DIEnumerator(name: "OTI_one_cmpl", value: 69, isUnsigned: true)
!719 = !DIEnumerator(name: "OTI_ffs", value: 70, isUnsigned: true)
!720 = !DIEnumerator(name: "OTI_clz", value: 71, isUnsigned: true)
!721 = !DIEnumerator(name: "OTI_ctz", value: 72, isUnsigned: true)
!722 = !DIEnumerator(name: "OTI_popcount", value: 73, isUnsigned: true)
!723 = !DIEnumerator(name: "OTI_parity", value: 74, isUnsigned: true)
!724 = !DIEnumerator(name: "OTI_sqrt", value: 75, isUnsigned: true)
!725 = !DIEnumerator(name: "OTI_sincos", value: 76, isUnsigned: true)
!726 = !DIEnumerator(name: "OTI_sin", value: 77, isUnsigned: true)
!727 = !DIEnumerator(name: "OTI_asin", value: 78, isUnsigned: true)
!728 = !DIEnumerator(name: "OTI_cos", value: 79, isUnsigned: true)
!729 = !DIEnumerator(name: "OTI_acos", value: 80, isUnsigned: true)
!730 = !DIEnumerator(name: "OTI_exp", value: 81, isUnsigned: true)
!731 = !DIEnumerator(name: "OTI_exp10", value: 82, isUnsigned: true)
!732 = !DIEnumerator(name: "OTI_exp2", value: 83, isUnsigned: true)
!733 = !DIEnumerator(name: "OTI_expm1", value: 84, isUnsigned: true)
!734 = !DIEnumerator(name: "OTI_ldexp", value: 85, isUnsigned: true)
!735 = !DIEnumerator(name: "OTI_scalb", value: 86, isUnsigned: true)
!736 = !DIEnumerator(name: "OTI_significand", value: 87, isUnsigned: true)
!737 = !DIEnumerator(name: "OTI_logb", value: 88, isUnsigned: true)
!738 = !DIEnumerator(name: "OTI_ilogb", value: 89, isUnsigned: true)
!739 = !DIEnumerator(name: "OTI_log", value: 90, isUnsigned: true)
!740 = !DIEnumerator(name: "OTI_log10", value: 91, isUnsigned: true)
!741 = !DIEnumerator(name: "OTI_log2", value: 92, isUnsigned: true)
!742 = !DIEnumerator(name: "OTI_log1p", value: 93, isUnsigned: true)
!743 = !DIEnumerator(name: "OTI_floor", value: 94, isUnsigned: true)
!744 = !DIEnumerator(name: "OTI_ceil", value: 95, isUnsigned: true)
!745 = !DIEnumerator(name: "OTI_btrunc", value: 96, isUnsigned: true)
!746 = !DIEnumerator(name: "OTI_round", value: 97, isUnsigned: true)
!747 = !DIEnumerator(name: "OTI_nearbyint", value: 98, isUnsigned: true)
!748 = !DIEnumerator(name: "OTI_rint", value: 99, isUnsigned: true)
!749 = !DIEnumerator(name: "OTI_tan", value: 100, isUnsigned: true)
!750 = !DIEnumerator(name: "OTI_atan", value: 101, isUnsigned: true)
!751 = !DIEnumerator(name: "OTI_copysign", value: 102, isUnsigned: true)
!752 = !DIEnumerator(name: "OTI_signbit", value: 103, isUnsigned: true)
!753 = !DIEnumerator(name: "OTI_isinf", value: 104, isUnsigned: true)
!754 = !DIEnumerator(name: "OTI_cmp", value: 105, isUnsigned: true)
!755 = !DIEnumerator(name: "OTI_ucmp", value: 106, isUnsigned: true)
!756 = !DIEnumerator(name: "OTI_eq", value: 107, isUnsigned: true)
!757 = !DIEnumerator(name: "OTI_ne", value: 108, isUnsigned: true)
!758 = !DIEnumerator(name: "OTI_gt", value: 109, isUnsigned: true)
!759 = !DIEnumerator(name: "OTI_ge", value: 110, isUnsigned: true)
!760 = !DIEnumerator(name: "OTI_lt", value: 111, isUnsigned: true)
!761 = !DIEnumerator(name: "OTI_le", value: 112, isUnsigned: true)
!762 = !DIEnumerator(name: "OTI_unord", value: 113, isUnsigned: true)
!763 = !DIEnumerator(name: "OTI_strlen", value: 114, isUnsigned: true)
!764 = !DIEnumerator(name: "OTI_cbranch", value: 115, isUnsigned: true)
!765 = !DIEnumerator(name: "OTI_cmov", value: 116, isUnsigned: true)
!766 = !DIEnumerator(name: "OTI_cstore", value: 117, isUnsigned: true)
!767 = !DIEnumerator(name: "OTI_ctrap", value: 118, isUnsigned: true)
!768 = !DIEnumerator(name: "OTI_push", value: 119, isUnsigned: true)
!769 = !DIEnumerator(name: "OTI_addcc", value: 120, isUnsigned: true)
!770 = !DIEnumerator(name: "OTI_reduc_smax", value: 121, isUnsigned: true)
!771 = !DIEnumerator(name: "OTI_reduc_umax", value: 122, isUnsigned: true)
!772 = !DIEnumerator(name: "OTI_reduc_smin", value: 123, isUnsigned: true)
!773 = !DIEnumerator(name: "OTI_reduc_umin", value: 124, isUnsigned: true)
!774 = !DIEnumerator(name: "OTI_reduc_splus", value: 125, isUnsigned: true)
!775 = !DIEnumerator(name: "OTI_reduc_uplus", value: 126, isUnsigned: true)
!776 = !DIEnumerator(name: "OTI_ssum_widen", value: 127, isUnsigned: true)
!777 = !DIEnumerator(name: "OTI_usum_widen", value: 128, isUnsigned: true)
!778 = !DIEnumerator(name: "OTI_sdot_prod", value: 129, isUnsigned: true)
!779 = !DIEnumerator(name: "OTI_udot_prod", value: 130, isUnsigned: true)
!780 = !DIEnumerator(name: "OTI_vec_set", value: 131, isUnsigned: true)
!781 = !DIEnumerator(name: "OTI_vec_extract", value: 132, isUnsigned: true)
!782 = !DIEnumerator(name: "OTI_vec_extract_even", value: 133, isUnsigned: true)
!783 = !DIEnumerator(name: "OTI_vec_extract_odd", value: 134, isUnsigned: true)
!784 = !DIEnumerator(name: "OTI_vec_interleave_high", value: 135, isUnsigned: true)
!785 = !DIEnumerator(name: "OTI_vec_interleave_low", value: 136, isUnsigned: true)
!786 = !DIEnumerator(name: "OTI_vec_init", value: 137, isUnsigned: true)
!787 = !DIEnumerator(name: "OTI_vec_shl", value: 138, isUnsigned: true)
!788 = !DIEnumerator(name: "OTI_vec_shr", value: 139, isUnsigned: true)
!789 = !DIEnumerator(name: "OTI_vec_realign_load", value: 140, isUnsigned: true)
!790 = !DIEnumerator(name: "OTI_vec_widen_umult_hi", value: 141, isUnsigned: true)
!791 = !DIEnumerator(name: "OTI_vec_widen_umult_lo", value: 142, isUnsigned: true)
!792 = !DIEnumerator(name: "OTI_vec_widen_smult_hi", value: 143, isUnsigned: true)
!793 = !DIEnumerator(name: "OTI_vec_widen_smult_lo", value: 144, isUnsigned: true)
!794 = !DIEnumerator(name: "OTI_vec_unpacks_hi", value: 145, isUnsigned: true)
!795 = !DIEnumerator(name: "OTI_vec_unpacks_lo", value: 146, isUnsigned: true)
!796 = !DIEnumerator(name: "OTI_vec_unpacku_hi", value: 147, isUnsigned: true)
!797 = !DIEnumerator(name: "OTI_vec_unpacku_lo", value: 148, isUnsigned: true)
!798 = !DIEnumerator(name: "OTI_vec_unpacks_float_hi", value: 149, isUnsigned: true)
!799 = !DIEnumerator(name: "OTI_vec_unpacks_float_lo", value: 150, isUnsigned: true)
!800 = !DIEnumerator(name: "OTI_vec_unpacku_float_hi", value: 151, isUnsigned: true)
!801 = !DIEnumerator(name: "OTI_vec_unpacku_float_lo", value: 152, isUnsigned: true)
!802 = !DIEnumerator(name: "OTI_vec_pack_trunc", value: 153, isUnsigned: true)
!803 = !DIEnumerator(name: "OTI_vec_pack_usat", value: 154, isUnsigned: true)
!804 = !DIEnumerator(name: "OTI_vec_pack_ssat", value: 155, isUnsigned: true)
!805 = !DIEnumerator(name: "OTI_vec_pack_sfix_trunc", value: 156, isUnsigned: true)
!806 = !DIEnumerator(name: "OTI_vec_pack_ufix_trunc", value: 157, isUnsigned: true)
!807 = !DIEnumerator(name: "OTI_powi", value: 158, isUnsigned: true)
!808 = !DIEnumerator(name: "OTI_MAX", value: 159, isUnsigned: true)
!809 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "insn_code", file: !810, line: 7, baseType: !7, size: 32, elements: !811)
!810 = !DIFile(filename: "./insn-codes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!811 = !{!812, !813, !814, !815, !816, !817, !818, !819, !820, !821, !822, !823, !824, !825, !826, !827, !828, !829, !830, !831, !832, !833, !834, !835, !836, !837, !838, !839, !840, !841, !842, !843, !844, !845, !846, !847, !848, !849, !850, !851, !852, !853, !854, !855, !856, !857, !858, !859, !860, !861, !862, !863, !864, !865, !866, !867, !868, !869, !870, !871, !872, !873, !874, !875, !876, !877, !878, !879, !880, !881, !882, !883, !884, !885, !886, !887, !888, !889, !890, !891, !892, !893, !894, !895, !896, !897, !898, !899, !900, !901, !902, !903, !904, !905, !906, !907, !908, !909, !910, !911, !912, !913, !914, !915, !916, !917, !918, !919, !920, !921, !922, !923, !924, !925, !926, !927, !928, !929, !930, !931, !932, !933, !934, !935, !936, !937, !938, !939, !940, !941, !942, !943, !944, !945, !946, !947, !948, !949, !950, !951, !952, !953, !954, !955, !956, !957, !958, !959, !960, !961, !962, !963, !964, !965, !966, !967, !968, !969, !970, !971, !972, !973, !974, !975, !976, !977, !978, !979, !980, !981, !982, !983, !984, !985, !986, !987, !988, !989, !990, !991, !992, !993, !994, !995, !996, !997, !998, !999, !1000, !1001, !1002, !1003, !1004, !1005, !1006, !1007, !1008, !1009, !1010, !1011, !1012, !1013, !1014, !1015, !1016, !1017, !1018, !1019, !1020, !1021, !1022, !1023, !1024, !1025, !1026, !1027, !1028, !1029, !1030, !1031, !1032, !1033, !1034, !1035, !1036, !1037, !1038, !1039, !1040, !1041, !1042, !1043, !1044, !1045, !1046, !1047, !1048, !1049, !1050, !1051, !1052, !1053, !1054, !1055, !1056, !1057, !1058, !1059, !1060, !1061, !1062, !1063, !1064, !1065, !1066, !1067, !1068, !1069, !1070, !1071, !1072, !1073, !1074, !1075, !1076, !1077, !1078, !1079, !1080, !1081, !1082, !1083, !1084, !1085, !1086, !1087, !1088, !1089, !1090, !1091, !1092, !1093, !1094, !1095, !1096, !1097, !1098, !1099, !1100, !1101, !1102, !1103, !1104, !1105, !1106, !1107, !1108, !1109, !1110, !1111, !1112, !1113, !1114, !1115, !1116, !1117, !1118, !1119, !1120, !1121, !1122, !1123, !1124, !1125, !1126, !1127, !1128, !1129, !1130, !1131, !1132, !1133, !1134, !1135, !1136, !1137, !1138, !1139, !1140, !1141, !1142, !1143, !1144, !1145, !1146, !1147, !1148, !1149, !1150, !1151, !1152, !1153, !1154, !1155, !1156, !1157, !1158, !1159, !1160, !1161, !1162, !1163, !1164, !1165, !1166, !1167, !1168, !1169, !1170, !1171, !1172, !1173, !1174, !1175, !1176, !1177, !1178, !1179, !1180, !1181, !1182, !1183, !1184, !1185, !1186, !1187, !1188, !1189, !1190, !1191, !1192, !1193, !1194, !1195, !1196, !1197, !1198, !1199, !1200, !1201, !1202, !1203, !1204, !1205, !1206, !1207, !1208, !1209, !1210, !1211, !1212, !1213, !1214, !1215, !1216, !1217, !1218, !1219, !1220, !1221, !1222, !1223, !1224, !1225, !1226, !1227, !1228, !1229, !1230, !1231, !1232, !1233, !1234, !1235, !1236, !1237, !1238, !1239, !1240, !1241, !1242, !1243, !1244, !1245, !1246, !1247, !1248, !1249, !1250, !1251, !1252, !1253, !1254, !1255, !1256, !1257, !1258, !1259, !1260, !1261, !1262, !1263, !1264, !1265, !1266, !1267, !1268, !1269, !1270, !1271, !1272, !1273, !1274, !1275, !1276, !1277, !1278, !1279, !1280, !1281, !1282, !1283, !1284, !1285, !1286, !1287, !1288, !1289, !1290, !1291, !1292, !1293, !1294, !1295, !1296, !1297, !1298, !1299, !1300, !1301, !1302, !1303, !1304, !1305, !1306, !1307, !1308, !1309, !1310, !1311, !1312, !1313, !1314, !1315, !1316, !1317, !1318, !1319, !1320, !1321, !1322, !1323, !1324, !1325, !1326, !1327, !1328, !1329, !1330, !1331, !1332, !1333, !1334, !1335, !1336, !1337, !1338, !1339, !1340, !1341, !1342, !1343, !1344, !1345, !1346, !1347, !1348, !1349, !1350, !1351, !1352, !1353, !1354, !1355, !1356, !1357, !1358, !1359, !1360, !1361, !1362, !1363, !1364, !1365, !1366, !1367, !1368, !1369, !1370, !1371, !1372, !1373, !1374, !1375, !1376, !1377, !1378, !1379, !1380, !1381, !1382, !1383, !1384, !1385, !1386, !1387, !1388, !1389, !1390, !1391, !1392, !1393, !1394, !1395, !1396, !1397, !1398, !1399, !1400, !1401, !1402, !1403, !1404, !1405, !1406, !1407, !1408, !1409, !1410, !1411, !1412, !1413, !1414, !1415, !1416, !1417, !1418, !1419, !1420, !1421, !1422, !1423, !1424, !1425, !1426, !1427, !1428, !1429, !1430, !1431, !1432, !1433, !1434, !1435, !1436, !1437, !1438, !1439, !1440, !1441, !1442, !1443, !1444, !1445, !1446, !1447, !1448, !1449, !1450, !1451, !1452, !1453, !1454, !1455, !1456, !1457, !1458, !1459, !1460, !1461, !1462, !1463, !1464, !1465, !1466, !1467, !1468, !1469, !1470, !1471, !1472, !1473, !1474, !1475, !1476, !1477, !1478, !1479, !1480, !1481, !1482, !1483, !1484, !1485, !1486, !1487, !1488, !1489, !1490, !1491, !1492, !1493, !1494, !1495, !1496, !1497, !1498, !1499, !1500, !1501, !1502, !1503, !1504, !1505, !1506, !1507, !1508, !1509, !1510, !1511, !1512, !1513, !1514, !1515, !1516, !1517, !1518, !1519, !1520, !1521, !1522, !1523, !1524, !1525, !1526, !1527, !1528, !1529, !1530, !1531, !1532, !1533, !1534, !1535, !1536, !1537, !1538, !1539, !1540, !1541, !1542, !1543, !1544, !1545, !1546, !1547, !1548, !1549, !1550, !1551, !1552, !1553, !1554, !1555, !1556, !1557, !1558, !1559, !1560, !1561, !1562, !1563, !1564, !1565, !1566, !1567, !1568, !1569, !1570, !1571, !1572, !1573, !1574, !1575, !1576, !1577, !1578, !1579, !1580, !1581, !1582, !1583, !1584, !1585, !1586, !1587, !1588, !1589, !1590, !1591, !1592, !1593, !1594, !1595, !1596, !1597, !1598, !1599, !1600, !1601, !1602, !1603, !1604, !1605, !1606, !1607, !1608, !1609, !1610, !1611, !1612, !1613, !1614, !1615, !1616, !1617, !1618, !1619, !1620, !1621, !1622, !1623, !1624, !1625, !1626, !1627, !1628, !1629, !1630, !1631, !1632, !1633, !1634, !1635, !1636, !1637, !1638, !1639, !1640, !1641, !1642, !1643, !1644, !1645, !1646, !1647, !1648, !1649, !1650, !1651, !1652, !1653, !1654, !1655, !1656, !1657, !1658, !1659, !1660, !1661, !1662, !1663, !1664, !1665, !1666, !1667, !1668, !1669, !1670, !1671, !1672, !1673, !1674, !1675, !1676, !1677, !1678, !1679, !1680, !1681, !1682, !1683, !1684, !1685, !1686, !1687, !1688, !1689, !1690, !1691, !1692, !1693, !1694, !1695, !1696, !1697, !1698, !1699, !1700, !1701, !1702, !1703, !1704, !1705, !1706, !1707, !1708, !1709, !1710, !1711, !1712, !1713, !1714, !1715, !1716, !1717, !1718, !1719, !1720, !1721, !1722, !1723, !1724, !1725, !1726, !1727, !1728, !1729, !1730, !1731, !1732, !1733, !1734, !1735, !1736, !1737, !1738, !1739, !1740, !1741, !1742, !1743, !1744, !1745, !1746, !1747, !1748, !1749, !1750, !1751, !1752, !1753, !1754, !1755, !1756, !1757, !1758, !1759, !1760, !1761, !1762, !1763, !1764, !1765, !1766, !1767, !1768, !1769, !1770, !1771, !1772, !1773, !1774, !1775, !1776, !1777, !1778, !1779, !1780, !1781, !1782, !1783, !1784, !1785, !1786, !1787, !1788, !1789, !1790, !1791, !1792, !1793, !1794, !1795, !1796, !1797, !1798, !1799, !1800, !1801, !1802, !1803, !1804, !1805, !1806, !1807, !1808, !1809, !1810, !1811, !1812, !1813, !1814, !1815, !1816, !1817, !1818, !1819, !1820, !1821, !1822, !1823, !1824, !1825, !1826, !1827, !1828, !1829, !1830, !1831, !1832, !1833, !1834, !1835, !1836, !1837, !1838, !1839, !1840, !1841, !1842, !1843, !1844, !1845, !1846, !1847, !1848, !1849, !1850, !1851, !1852, !1853, !1854, !1855, !1856, !1857, !1858, !1859, !1860, !1861, !1862, !1863, !1864, !1865, !1866, !1867, !1868, !1869, !1870, !1871, !1872, !1873, !1874, !1875, !1876, !1877, !1878, !1879, !1880, !1881, !1882, !1883, !1884, !1885, !1886, !1887, !1888, !1889, !1890, !1891, !1892, !1893, !1894, !1895, !1896, !1897, !1898, !1899, !1900, !1901, !1902, !1903, !1904, !1905, !1906, !1907, !1908, !1909, !1910, !1911, !1912, !1913, !1914, !1915, !1916, !1917, !1918, !1919, !1920, !1921, !1922, !1923, !1924, !1925, !1926, !1927, !1928, !1929, !1930, !1931, !1932, !1933, !1934, !1935, !1936, !1937, !1938, !1939, !1940, !1941, !1942, !1943, !1944, !1945, !1946, !1947, !1948, !1949, !1950, !1951, !1952, !1953, !1954, !1955, !1956, !1957, !1958, !1959, !1960, !1961, !1962, !1963, !1964, !1965, !1966, !1967, !1968, !1969, !1970, !1971, !1972, !1973, !1974, !1975, !1976, !1977, !1978, !1979, !1980, !1981, !1982, !1983, !1984, !1985, !1986, !1987, !1988, !1989, !1990, !1991, !1992, !1993, !1994, !1995, !1996, !1997, !1998, !1999, !2000, !2001, !2002, !2003, !2004, !2005, !2006, !2007, !2008, !2009, !2010, !2011, !2012, !2013, !2014, !2015, !2016, !2017, !2018, !2019, !2020, !2021, !2022, !2023, !2024, !2025, !2026, !2027, !2028, !2029, !2030, !2031, !2032, !2033, !2034, !2035, !2036, !2037, !2038, !2039, !2040, !2041, !2042, !2043, !2044, !2045, !2046, !2047, !2048, !2049, !2050, !2051, !2052, !2053, !2054, !2055, !2056, !2057, !2058, !2059, !2060, !2061, !2062, !2063, !2064, !2065, !2066, !2067, !2068, !2069, !2070, !2071, !2072, !2073, !2074, !2075, !2076, !2077, !2078, !2079, !2080, !2081, !2082, !2083, !2084, !2085, !2086, !2087, !2088, !2089, !2090, !2091, !2092, !2093, !2094, !2095, !2096, !2097, !2098, !2099, !2100, !2101, !2102, !2103, !2104, !2105, !2106, !2107, !2108, !2109, !2110, !2111, !2112, !2113, !2114, !2115, !2116, !2117, !2118, !2119, !2120, !2121, !2122, !2123, !2124, !2125, !2126, !2127, !2128, !2129, !2130, !2131, !2132, !2133, !2134, !2135, !2136, !2137, !2138, !2139, !2140, !2141, !2142, !2143, !2144, !2145, !2146, !2147, !2148, !2149, !2150, !2151, !2152, !2153, !2154, !2155, !2156, !2157, !2158, !2159, !2160, !2161, !2162, !2163, !2164, !2165, !2166, !2167, !2168, !2169, !2170, !2171, !2172, !2173, !2174, !2175, !2176, !2177, !2178, !2179, !2180, !2181, !2182, !2183, !2184, !2185, !2186, !2187, !2188, !2189, !2190, !2191, !2192, !2193, !2194, !2195, !2196, !2197, !2198, !2199, !2200, !2201, !2202, !2203, !2204, !2205, !2206, !2207, !2208, !2209, !2210, !2211, !2212, !2213, !2214, !2215, !2216, !2217, !2218, !2219, !2220, !2221, !2222, !2223, !2224, !2225, !2226, !2227, !2228, !2229, !2230, !2231, !2232, !2233, !2234, !2235, !2236, !2237, !2238, !2239, !2240, !2241, !2242, !2243, !2244, !2245, !2246, !2247, !2248, !2249, !2250, !2251, !2252, !2253, !2254, !2255, !2256, !2257, !2258, !2259, !2260, !2261, !2262, !2263, !2264, !2265, !2266, !2267, !2268, !2269, !2270, !2271, !2272, !2273, !2274, !2275, !2276, !2277, !2278, !2279, !2280, !2281, !2282, !2283, !2284, !2285, !2286, !2287, !2288, !2289, !2290, !2291, !2292, !2293, !2294, !2295, !2296, !2297, !2298, !2299, !2300}
!812 = !DIEnumerator(name: "CODE_FOR_x86_fnstsw_1", value: 30, isUnsigned: true)
!813 = !DIEnumerator(name: "CODE_FOR_x86_sahf_1", value: 31, isUnsigned: true)
!814 = !DIEnumerator(name: "CODE_FOR_popsi1", value: 41, isUnsigned: true)
!815 = !DIEnumerator(name: "CODE_FOR_movsi_insv_1", value: 63, isUnsigned: true)
!816 = !DIEnumerator(name: "CODE_FOR_swapxf", value: 83, isUnsigned: true)
!817 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2_and", value: 84, isUnsigned: true)
!818 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2_32", value: 92, isUnsigned: true)
!819 = !DIEnumerator(name: "CODE_FOR_extendhisi2", value: 94, isUnsigned: true)
!820 = !DIEnumerator(name: "CODE_FOR_extendqihi2", value: 95, isUnsigned: true)
!821 = !DIEnumerator(name: "CODE_FOR_extendqisi2", value: 96, isUnsigned: true)
!822 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop", value: 110, isUnsigned: true)
!823 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop", value: 111, isUnsigned: true)
!824 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi_sse", value: 116, isUnsigned: true)
!825 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi_sse", value: 117, isUnsigned: true)
!826 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_fisttp_i387_1", value: 118, isUnsigned: true)
!827 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_fisttp_i387_1", value: 119, isUnsigned: true)
!828 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_fisttp_i387_1", value: 120, isUnsigned: true)
!829 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp", value: 121, isUnsigned: true)
!830 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp", value: 122, isUnsigned: true)
!831 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp", value: 123, isUnsigned: true)
!832 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_fisttp_with_temp", value: 124, isUnsigned: true)
!833 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_fisttp_with_temp", value: 125, isUnsigned: true)
!834 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_fisttp_with_temp", value: 126, isUnsigned: true)
!835 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387", value: 130, isUnsigned: true)
!836 = !DIEnumerator(name: "CODE_FOR_fix_truncdi_i387_with_temp", value: 131, isUnsigned: true)
!837 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387", value: 132, isUnsigned: true)
!838 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387", value: 133, isUnsigned: true)
!839 = !DIEnumerator(name: "CODE_FOR_fix_trunchi_i387_with_temp", value: 134, isUnsigned: true)
!840 = !DIEnumerator(name: "CODE_FOR_fix_truncsi_i387_with_temp", value: 135, isUnsigned: true)
!841 = !DIEnumerator(name: "CODE_FOR_x86_fnstcw_1", value: 136, isUnsigned: true)
!842 = !DIEnumerator(name: "CODE_FOR_x86_fldcw_1", value: 137, isUnsigned: true)
!843 = !DIEnumerator(name: "CODE_FOR_floatdisf2_i387_with_xmm", value: 185, isUnsigned: true)
!844 = !DIEnumerator(name: "CODE_FOR_floatdidf2_i387_with_xmm", value: 186, isUnsigned: true)
!845 = !DIEnumerator(name: "CODE_FOR_floatdixf2_i387_with_xmm", value: 187, isUnsigned: true)
!846 = !DIEnumerator(name: "CODE_FOR_addqi3_cc", value: 195, isUnsigned: true)
!847 = !DIEnumerator(name: "CODE_FOR_addqi_ext_1", value: 219, isUnsigned: true)
!848 = !DIEnumerator(name: "CODE_FOR_divqi3", value: 271, isUnsigned: true)
!849 = !DIEnumerator(name: "CODE_FOR_udivqi3", value: 272, isUnsigned: true)
!850 = !DIEnumerator(name: "CODE_FOR_andqi_ext_0", value: 298, isUnsigned: true)
!851 = !DIEnumerator(name: "CODE_FOR_copysignsf3_const", value: 367, isUnsigned: true)
!852 = !DIEnumerator(name: "CODE_FOR_copysigndf3_const", value: 368, isUnsigned: true)
!853 = !DIEnumerator(name: "CODE_FOR_copysigntf3_const", value: 369, isUnsigned: true)
!854 = !DIEnumerator(name: "CODE_FOR_copysignsf3_var", value: 370, isUnsigned: true)
!855 = !DIEnumerator(name: "CODE_FOR_copysigndf3_var", value: 371, isUnsigned: true)
!856 = !DIEnumerator(name: "CODE_FOR_copysigntf3_var", value: 372, isUnsigned: true)
!857 = !DIEnumerator(name: "CODE_FOR_x86_shld", value: 382, isUnsigned: true)
!858 = !DIEnumerator(name: "CODE_FOR_x86_shrd", value: 395, isUnsigned: true)
!859 = !DIEnumerator(name: "CODE_FOR_ix86_rotldi3", value: 438, isUnsigned: true)
!860 = !DIEnumerator(name: "CODE_FOR_ix86_rotrdi3", value: 447, isUnsigned: true)
!861 = !DIEnumerator(name: "CODE_FOR_jump", value: 478, isUnsigned: true)
!862 = !DIEnumerator(name: "CODE_FOR_blockage", value: 487, isUnsigned: true)
!863 = !DIEnumerator(name: "CODE_FOR_prologue_use", value: 489, isUnsigned: true)
!864 = !DIEnumerator(name: "CODE_FOR_return_internal", value: 490, isUnsigned: true)
!865 = !DIEnumerator(name: "CODE_FOR_return_internal_long", value: 491, isUnsigned: true)
!866 = !DIEnumerator(name: "CODE_FOR_return_pop_internal", value: 492, isUnsigned: true)
!867 = !DIEnumerator(name: "CODE_FOR_return_indirect_internal", value: 493, isUnsigned: true)
!868 = !DIEnumerator(name: "CODE_FOR_nop", value: 494, isUnsigned: true)
!869 = !DIEnumerator(name: "CODE_FOR_vswapmov", value: 495, isUnsigned: true)
!870 = !DIEnumerator(name: "CODE_FOR_pad", value: 496, isUnsigned: true)
!871 = !DIEnumerator(name: "CODE_FOR_set_got", value: 497, isUnsigned: true)
!872 = !DIEnumerator(name: "CODE_FOR_set_got_labelled", value: 498, isUnsigned: true)
!873 = !DIEnumerator(name: "CODE_FOR_eh_return_internal", value: 499, isUnsigned: true)
!874 = !DIEnumerator(name: "CODE_FOR_leave", value: 500, isUnsigned: true)
!875 = !DIEnumerator(name: "CODE_FOR_ctzsi2", value: 503, isUnsigned: true)
!876 = !DIEnumerator(name: "CODE_FOR_clzsi2_abm", value: 504, isUnsigned: true)
!877 = !DIEnumerator(name: "CODE_FOR_bsr", value: 505, isUnsigned: true)
!878 = !DIEnumerator(name: "CODE_FOR_popcounthi2", value: 506, isUnsigned: true)
!879 = !DIEnumerator(name: "CODE_FOR_popcountsi2", value: 507, isUnsigned: true)
!880 = !DIEnumerator(name: "CODE_FOR_bswaphi_lowpart", value: 514, isUnsigned: true)
!881 = !DIEnumerator(name: "CODE_FOR_clzhi2_abm", value: 515, isUnsigned: true)
!882 = !DIEnumerator(name: "CODE_FOR_paritydi2_cmp", value: 517, isUnsigned: true)
!883 = !DIEnumerator(name: "CODE_FOR_paritysi2_cmp", value: 518, isUnsigned: true)
!884 = !DIEnumerator(name: "CODE_FOR_truncxfsf2_i387_noop_unspec", value: 573, isUnsigned: true)
!885 = !DIEnumerator(name: "CODE_FOR_truncxfdf2_i387_noop_unspec", value: 574, isUnsigned: true)
!886 = !DIEnumerator(name: "CODE_FOR_sqrtxf2", value: 575, isUnsigned: true)
!887 = !DIEnumerator(name: "CODE_FOR_sqrt_extendsfxf2_i387", value: 576, isUnsigned: true)
!888 = !DIEnumerator(name: "CODE_FOR_sqrt_extenddfxf2_i387", value: 577, isUnsigned: true)
!889 = !DIEnumerator(name: "CODE_FOR_fpremxf4_i387", value: 581, isUnsigned: true)
!890 = !DIEnumerator(name: "CODE_FOR_fprem1xf4_i387", value: 582, isUnsigned: true)
!891 = !DIEnumerator(name: "CODE_FOR_sincosxf3", value: 589, isUnsigned: true)
!892 = !DIEnumerator(name: "CODE_FOR_sincos_extendsfxf3_i387", value: 590, isUnsigned: true)
!893 = !DIEnumerator(name: "CODE_FOR_sincos_extenddfxf3_i387", value: 591, isUnsigned: true)
!894 = !DIEnumerator(name: "CODE_FOR_fptanxf4_i387", value: 592, isUnsigned: true)
!895 = !DIEnumerator(name: "CODE_FOR_fptan_extendsfxf4_i387", value: 593, isUnsigned: true)
!896 = !DIEnumerator(name: "CODE_FOR_fptan_extenddfxf4_i387", value: 594, isUnsigned: true)
!897 = !DIEnumerator(name: "CODE_FOR_fpatan_extendsfxf3_i387", value: 596, isUnsigned: true)
!898 = !DIEnumerator(name: "CODE_FOR_fpatan_extenddfxf3_i387", value: 597, isUnsigned: true)
!899 = !DIEnumerator(name: "CODE_FOR_fyl2xxf3_i387", value: 598, isUnsigned: true)
!900 = !DIEnumerator(name: "CODE_FOR_fyl2x_extendsfxf3_i387", value: 599, isUnsigned: true)
!901 = !DIEnumerator(name: "CODE_FOR_fyl2x_extenddfxf3_i387", value: 600, isUnsigned: true)
!902 = !DIEnumerator(name: "CODE_FOR_fyl2xp1xf3_i387", value: 601, isUnsigned: true)
!903 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extendsfxf3_i387", value: 602, isUnsigned: true)
!904 = !DIEnumerator(name: "CODE_FOR_fyl2xp1_extenddfxf3_i387", value: 603, isUnsigned: true)
!905 = !DIEnumerator(name: "CODE_FOR_fxtractxf3_i387", value: 604, isUnsigned: true)
!906 = !DIEnumerator(name: "CODE_FOR_fxtract_extendsfxf3_i387", value: 605, isUnsigned: true)
!907 = !DIEnumerator(name: "CODE_FOR_fxtract_extenddfxf3_i387", value: 606, isUnsigned: true)
!908 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsf2", value: 609, isUnsigned: true)
!909 = !DIEnumerator(name: "CODE_FOR_sse4_1_rounddf2", value: 610, isUnsigned: true)
!910 = !DIEnumerator(name: "CODE_FOR_rintxf2", value: 611, isUnsigned: true)
!911 = !DIEnumerator(name: "CODE_FOR_fistdi2", value: 613, isUnsigned: true)
!912 = !DIEnumerator(name: "CODE_FOR_fistdi2_with_temp", value: 614, isUnsigned: true)
!913 = !DIEnumerator(name: "CODE_FOR_fisthi2", value: 617, isUnsigned: true)
!914 = !DIEnumerator(name: "CODE_FOR_fistsi2", value: 618, isUnsigned: true)
!915 = !DIEnumerator(name: "CODE_FOR_fisthi2_with_temp", value: 619, isUnsigned: true)
!916 = !DIEnumerator(name: "CODE_FOR_fistsi2_with_temp", value: 620, isUnsigned: true)
!917 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor", value: 621, isUnsigned: true)
!918 = !DIEnumerator(name: "CODE_FOR_frndintxf2_floor_i387", value: 622, isUnsigned: true)
!919 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor", value: 626, isUnsigned: true)
!920 = !DIEnumerator(name: "CODE_FOR_fistdi2_floor_with_temp", value: 627, isUnsigned: true)
!921 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor", value: 628, isUnsigned: true)
!922 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor", value: 629, isUnsigned: true)
!923 = !DIEnumerator(name: "CODE_FOR_fisthi2_floor_with_temp", value: 630, isUnsigned: true)
!924 = !DIEnumerator(name: "CODE_FOR_fistsi2_floor_with_temp", value: 631, isUnsigned: true)
!925 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil", value: 632, isUnsigned: true)
!926 = !DIEnumerator(name: "CODE_FOR_frndintxf2_ceil_i387", value: 633, isUnsigned: true)
!927 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil", value: 637, isUnsigned: true)
!928 = !DIEnumerator(name: "CODE_FOR_fistdi2_ceil_with_temp", value: 638, isUnsigned: true)
!929 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil", value: 639, isUnsigned: true)
!930 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil", value: 640, isUnsigned: true)
!931 = !DIEnumerator(name: "CODE_FOR_fisthi2_ceil_with_temp", value: 641, isUnsigned: true)
!932 = !DIEnumerator(name: "CODE_FOR_fistsi2_ceil_with_temp", value: 642, isUnsigned: true)
!933 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc", value: 643, isUnsigned: true)
!934 = !DIEnumerator(name: "CODE_FOR_frndintxf2_trunc_i387", value: 644, isUnsigned: true)
!935 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm", value: 645, isUnsigned: true)
!936 = !DIEnumerator(name: "CODE_FOR_frndintxf2_mask_pm_i387", value: 646, isUnsigned: true)
!937 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387", value: 647, isUnsigned: true)
!938 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387", value: 648, isUnsigned: true)
!939 = !DIEnumerator(name: "CODE_FOR_fxamxf2_i387", value: 649, isUnsigned: true)
!940 = !DIEnumerator(name: "CODE_FOR_fxamsf2_i387_with_temp", value: 650, isUnsigned: true)
!941 = !DIEnumerator(name: "CODE_FOR_fxamdf2_i387_with_temp", value: 651, isUnsigned: true)
!942 = !DIEnumerator(name: "CODE_FOR_cld", value: 652, isUnsigned: true)
!943 = !DIEnumerator(name: "CODE_FOR_smaxsf3", value: 681, isUnsigned: true)
!944 = !DIEnumerator(name: "CODE_FOR_sminsf3", value: 682, isUnsigned: true)
!945 = !DIEnumerator(name: "CODE_FOR_smaxdf3", value: 683, isUnsigned: true)
!946 = !DIEnumerator(name: "CODE_FOR_smindf3", value: 684, isUnsigned: true)
!947 = !DIEnumerator(name: "CODE_FOR_pro_epilogue_adjust_stack_1", value: 693, isUnsigned: true)
!948 = !DIEnumerator(name: "CODE_FOR_allocate_stack_worker_32", value: 694, isUnsigned: true)
!949 = !DIEnumerator(name: "CODE_FOR_trap", value: 701, isUnsigned: true)
!950 = !DIEnumerator(name: "CODE_FOR_stack_protect_set_si", value: 704, isUnsigned: true)
!951 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_set_si", value: 705, isUnsigned: true)
!952 = !DIEnumerator(name: "CODE_FOR_stack_protect_test_si", value: 706, isUnsigned: true)
!953 = !DIEnumerator(name: "CODE_FOR_stack_tls_protect_test_si", value: 707, isUnsigned: true)
!954 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32qi", value: 708, isUnsigned: true)
!955 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32hi", value: 709, isUnsigned: true)
!956 = !DIEnumerator(name: "CODE_FOR_sse4_2_crc32si", value: 710, isUnsigned: true)
!957 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcbsi", value: 715, isUnsigned: true)
!958 = !DIEnumerator(name: "CODE_FOR_sse_movntdi", value: 728, isUnsigned: true)
!959 = !DIEnumerator(name: "CODE_FOR_mmx_rcpv2sf2", value: 736, isUnsigned: true)
!960 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit1v2sf3", value: 737, isUnsigned: true)
!961 = !DIEnumerator(name: "CODE_FOR_mmx_rcpit2v2sf3", value: 738, isUnsigned: true)
!962 = !DIEnumerator(name: "CODE_FOR_mmx_rsqrtv2sf2", value: 739, isUnsigned: true)
!963 = !DIEnumerator(name: "CODE_FOR_mmx_rsqit1v2sf3", value: 740, isUnsigned: true)
!964 = !DIEnumerator(name: "CODE_FOR_mmx_haddv2sf3", value: 741, isUnsigned: true)
!965 = !DIEnumerator(name: "CODE_FOR_mmx_hsubv2sf3", value: 742, isUnsigned: true)
!966 = !DIEnumerator(name: "CODE_FOR_mmx_addsubv2sf3", value: 743, isUnsigned: true)
!967 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2sf3", value: 745, isUnsigned: true)
!968 = !DIEnumerator(name: "CODE_FOR_mmx_gev2sf3", value: 746, isUnsigned: true)
!969 = !DIEnumerator(name: "CODE_FOR_mmx_pf2id", value: 747, isUnsigned: true)
!970 = !DIEnumerator(name: "CODE_FOR_mmx_pf2iw", value: 748, isUnsigned: true)
!971 = !DIEnumerator(name: "CODE_FOR_mmx_pi2fw", value: 749, isUnsigned: true)
!972 = !DIEnumerator(name: "CODE_FOR_mmx_floatv2si2", value: 750, isUnsigned: true)
!973 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2sf2", value: 751, isUnsigned: true)
!974 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv4hi3", value: 782, isUnsigned: true)
!975 = !DIEnumerator(name: "CODE_FOR_mmx_ashrv2si3", value: 783, isUnsigned: true)
!976 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv4hi3", value: 784, isUnsigned: true)
!977 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv2si3", value: 785, isUnsigned: true)
!978 = !DIEnumerator(name: "CODE_FOR_mmx_lshrv1di3", value: 786, isUnsigned: true)
!979 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv4hi3", value: 787, isUnsigned: true)
!980 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv2si3", value: 788, isUnsigned: true)
!981 = !DIEnumerator(name: "CODE_FOR_mmx_ashlv1di3", value: 789, isUnsigned: true)
!982 = !DIEnumerator(name: "CODE_FOR_mmx_gtv8qi3", value: 793, isUnsigned: true)
!983 = !DIEnumerator(name: "CODE_FOR_mmx_gtv4hi3", value: 794, isUnsigned: true)
!984 = !DIEnumerator(name: "CODE_FOR_mmx_gtv2si3", value: 795, isUnsigned: true)
!985 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv8qi3", value: 796, isUnsigned: true)
!986 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv4hi3", value: 797, isUnsigned: true)
!987 = !DIEnumerator(name: "CODE_FOR_mmx_andnotv2si3", value: 798, isUnsigned: true)
!988 = !DIEnumerator(name: "CODE_FOR_mmx_packsswb", value: 808, isUnsigned: true)
!989 = !DIEnumerator(name: "CODE_FOR_mmx_packssdw", value: 809, isUnsigned: true)
!990 = !DIEnumerator(name: "CODE_FOR_mmx_packuswb", value: 810, isUnsigned: true)
!991 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhbw", value: 811, isUnsigned: true)
!992 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklbw", value: 812, isUnsigned: true)
!993 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhwd", value: 813, isUnsigned: true)
!994 = !DIEnumerator(name: "CODE_FOR_mmx_punpcklwd", value: 814, isUnsigned: true)
!995 = !DIEnumerator(name: "CODE_FOR_mmx_punpckhdq", value: 815, isUnsigned: true)
!996 = !DIEnumerator(name: "CODE_FOR_mmx_punpckldq", value: 816, isUnsigned: true)
!997 = !DIEnumerator(name: "CODE_FOR_mmx_pextrw", value: 818, isUnsigned: true)
!998 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw_1", value: 819, isUnsigned: true)
!999 = !DIEnumerator(name: "CODE_FOR_mmx_pswapdv2si2", value: 820, isUnsigned: true)
!1000 = !DIEnumerator(name: "CODE_FOR_mmx_psadbw", value: 828, isUnsigned: true)
!1001 = !DIEnumerator(name: "CODE_FOR_mmx_pmovmskb", value: 829, isUnsigned: true)
!1002 = !DIEnumerator(name: "CODE_FOR_movdi_to_sse", value: 853, isUnsigned: true)
!1003 = !DIEnumerator(name: "CODE_FOR_avx_movups", value: 854, isUnsigned: true)
!1004 = !DIEnumerator(name: "CODE_FOR_avx_movupd", value: 855, isUnsigned: true)
!1005 = !DIEnumerator(name: "CODE_FOR_avx_movups256", value: 856, isUnsigned: true)
!1006 = !DIEnumerator(name: "CODE_FOR_avx_movupd256", value: 857, isUnsigned: true)
!1007 = !DIEnumerator(name: "CODE_FOR_sse2_movq128", value: 858, isUnsigned: true)
!1008 = !DIEnumerator(name: "CODE_FOR_sse_movups", value: 859, isUnsigned: true)
!1009 = !DIEnumerator(name: "CODE_FOR_sse2_movupd", value: 860, isUnsigned: true)
!1010 = !DIEnumerator(name: "CODE_FOR_avx_movdqu256", value: 861, isUnsigned: true)
!1011 = !DIEnumerator(name: "CODE_FOR_avx_movdqu", value: 862, isUnsigned: true)
!1012 = !DIEnumerator(name: "CODE_FOR_sse2_movdqu", value: 863, isUnsigned: true)
!1013 = !DIEnumerator(name: "CODE_FOR_avx_movntv4sf", value: 864, isUnsigned: true)
!1014 = !DIEnumerator(name: "CODE_FOR_avx_movntv2df", value: 865, isUnsigned: true)
!1015 = !DIEnumerator(name: "CODE_FOR_avx_movntv8sf", value: 866, isUnsigned: true)
!1016 = !DIEnumerator(name: "CODE_FOR_avx_movntv4df", value: 867, isUnsigned: true)
!1017 = !DIEnumerator(name: "CODE_FOR_sse_movntv4sf", value: 868, isUnsigned: true)
!1018 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2df", value: 869, isUnsigned: true)
!1019 = !DIEnumerator(name: "CODE_FOR_avx_movntv4di", value: 870, isUnsigned: true)
!1020 = !DIEnumerator(name: "CODE_FOR_avx_movntv2di", value: 871, isUnsigned: true)
!1021 = !DIEnumerator(name: "CODE_FOR_sse2_movntv2di", value: 872, isUnsigned: true)
!1022 = !DIEnumerator(name: "CODE_FOR_sse2_movntsi", value: 873, isUnsigned: true)
!1023 = !DIEnumerator(name: "CODE_FOR_avx_lddqu256", value: 874, isUnsigned: true)
!1024 = !DIEnumerator(name: "CODE_FOR_avx_lddqu", value: 875, isUnsigned: true)
!1025 = !DIEnumerator(name: "CODE_FOR_sse3_lddqu", value: 876, isUnsigned: true)
!1026 = !DIEnumerator(name: "CODE_FOR_sse_vmaddv4sf3", value: 893, isUnsigned: true)
!1027 = !DIEnumerator(name: "CODE_FOR_sse_vmsubv4sf3", value: 894, isUnsigned: true)
!1028 = !DIEnumerator(name: "CODE_FOR_sse2_vmaddv2df3", value: 895, isUnsigned: true)
!1029 = !DIEnumerator(name: "CODE_FOR_sse2_vmsubv2df3", value: 896, isUnsigned: true)
!1030 = !DIEnumerator(name: "CODE_FOR_sse_vmmulv4sf3", value: 905, isUnsigned: true)
!1031 = !DIEnumerator(name: "CODE_FOR_sse2_vmmulv2df3", value: 906, isUnsigned: true)
!1032 = !DIEnumerator(name: "CODE_FOR_avx_divv4sf3", value: 907, isUnsigned: true)
!1033 = !DIEnumerator(name: "CODE_FOR_avx_divv2df3", value: 908, isUnsigned: true)
!1034 = !DIEnumerator(name: "CODE_FOR_avx_divv8sf3", value: 909, isUnsigned: true)
!1035 = !DIEnumerator(name: "CODE_FOR_avx_divv4df3", value: 910, isUnsigned: true)
!1036 = !DIEnumerator(name: "CODE_FOR_sse_divv4sf3", value: 913, isUnsigned: true)
!1037 = !DIEnumerator(name: "CODE_FOR_sse2_divv2df3", value: 914, isUnsigned: true)
!1038 = !DIEnumerator(name: "CODE_FOR_sse_vmdivv4sf3", value: 917, isUnsigned: true)
!1039 = !DIEnumerator(name: "CODE_FOR_sse2_vmdivv2df3", value: 918, isUnsigned: true)
!1040 = !DIEnumerator(name: "CODE_FOR_avx_rcpv8sf2", value: 919, isUnsigned: true)
!1041 = !DIEnumerator(name: "CODE_FOR_sse_rcpv4sf2", value: 920, isUnsigned: true)
!1042 = !DIEnumerator(name: "CODE_FOR_sse_vmrcpv4sf2", value: 922, isUnsigned: true)
!1043 = !DIEnumerator(name: "CODE_FOR_avx_sqrtv8sf2", value: 923, isUnsigned: true)
!1044 = !DIEnumerator(name: "CODE_FOR_sse_sqrtv4sf2", value: 924, isUnsigned: true)
!1045 = !DIEnumerator(name: "CODE_FOR_sqrtv4df2", value: 925, isUnsigned: true)
!1046 = !DIEnumerator(name: "CODE_FOR_sqrtv2df2", value: 926, isUnsigned: true)
!1047 = !DIEnumerator(name: "CODE_FOR_sse_vmsqrtv4sf2", value: 929, isUnsigned: true)
!1048 = !DIEnumerator(name: "CODE_FOR_sse2_vmsqrtv2df2", value: 930, isUnsigned: true)
!1049 = !DIEnumerator(name: "CODE_FOR_avx_rsqrtv8sf2", value: 931, isUnsigned: true)
!1050 = !DIEnumerator(name: "CODE_FOR_sse_rsqrtv4sf2", value: 932, isUnsigned: true)
!1051 = !DIEnumerator(name: "CODE_FOR_sse_vmrsqrtv4sf2", value: 934, isUnsigned: true)
!1052 = !DIEnumerator(name: "CODE_FOR_sse_vmsmaxv4sf3", value: 963, isUnsigned: true)
!1053 = !DIEnumerator(name: "CODE_FOR_sse_vmsminv4sf3", value: 964, isUnsigned: true)
!1054 = !DIEnumerator(name: "CODE_FOR_sse2_vmsmaxv2df3", value: 965, isUnsigned: true)
!1055 = !DIEnumerator(name: "CODE_FOR_sse2_vmsminv2df3", value: 966, isUnsigned: true)
!1056 = !DIEnumerator(name: "CODE_FOR_avx_addsubv8sf3", value: 979, isUnsigned: true)
!1057 = !DIEnumerator(name: "CODE_FOR_avx_addsubv4df3", value: 980, isUnsigned: true)
!1058 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv4sf3", value: 982, isUnsigned: true)
!1059 = !DIEnumerator(name: "CODE_FOR_sse3_addsubv2df3", value: 984, isUnsigned: true)
!1060 = !DIEnumerator(name: "CODE_FOR_avx_haddv4df3", value: 985, isUnsigned: true)
!1061 = !DIEnumerator(name: "CODE_FOR_avx_hsubv4df3", value: 986, isUnsigned: true)
!1062 = !DIEnumerator(name: "CODE_FOR_avx_haddv8sf3", value: 987, isUnsigned: true)
!1063 = !DIEnumerator(name: "CODE_FOR_avx_hsubv8sf3", value: 988, isUnsigned: true)
!1064 = !DIEnumerator(name: "CODE_FOR_sse3_haddv4sf3", value: 991, isUnsigned: true)
!1065 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv4sf3", value: 992, isUnsigned: true)
!1066 = !DIEnumerator(name: "CODE_FOR_sse3_haddv2df3", value: 995, isUnsigned: true)
!1067 = !DIEnumerator(name: "CODE_FOR_sse3_hsubv2df3", value: 996, isUnsigned: true)
!1068 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv4sf3", value: 997, isUnsigned: true)
!1069 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv2df3", value: 998, isUnsigned: true)
!1070 = !DIEnumerator(name: "CODE_FOR_avx_cmppsv8sf3", value: 999, isUnsigned: true)
!1071 = !DIEnumerator(name: "CODE_FOR_avx_cmppdv4df3", value: 1000, isUnsigned: true)
!1072 = !DIEnumerator(name: "CODE_FOR_avx_cmpssv4sf3", value: 1001, isUnsigned: true)
!1073 = !DIEnumerator(name: "CODE_FOR_avx_cmpsdv2df3", value: 1002, isUnsigned: true)
!1074 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpsf3", value: 1007, isUnsigned: true)
!1075 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpdf3", value: 1008, isUnsigned: true)
!1076 = !DIEnumerator(name: "CODE_FOR_sse_maskcmpv4sf3", value: 1009, isUnsigned: true)
!1077 = !DIEnumerator(name: "CODE_FOR_sse2_maskcmpv2df3", value: 1010, isUnsigned: true)
!1078 = !DIEnumerator(name: "CODE_FOR_sse_vmmaskcmpv4sf3", value: 1011, isUnsigned: true)
!1079 = !DIEnumerator(name: "CODE_FOR_sse2_vmmaskcmpv2df3", value: 1012, isUnsigned: true)
!1080 = !DIEnumerator(name: "CODE_FOR_sse_comi", value: 1013, isUnsigned: true)
!1081 = !DIEnumerator(name: "CODE_FOR_sse2_comi", value: 1014, isUnsigned: true)
!1082 = !DIEnumerator(name: "CODE_FOR_sse_ucomi", value: 1015, isUnsigned: true)
!1083 = !DIEnumerator(name: "CODE_FOR_sse2_ucomi", value: 1016, isUnsigned: true)
!1084 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4sf3", value: 1017, isUnsigned: true)
!1085 = !DIEnumerator(name: "CODE_FOR_avx_andnotv2df3", value: 1018, isUnsigned: true)
!1086 = !DIEnumerator(name: "CODE_FOR_avx_andnotv8sf3", value: 1019, isUnsigned: true)
!1087 = !DIEnumerator(name: "CODE_FOR_avx_andnotv4df3", value: 1020, isUnsigned: true)
!1088 = !DIEnumerator(name: "CODE_FOR_sse_andnotv4sf3", value: 1021, isUnsigned: true)
!1089 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2df3", value: 1022, isUnsigned: true)
!1090 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv8sf4256", value: 1057, isUnsigned: true)
!1091 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4df4256", value: 1058, isUnsigned: true)
!1092 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv8sf4256", value: 1059, isUnsigned: true)
!1093 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4df4256", value: 1060, isUnsigned: true)
!1094 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv8sf4256", value: 1061, isUnsigned: true)
!1095 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4df4256", value: 1062, isUnsigned: true)
!1096 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv8sf4256", value: 1063, isUnsigned: true)
!1097 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4df4256", value: 1064, isUnsigned: true)
!1098 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsf4", value: 1065, isUnsigned: true)
!1099 = !DIEnumerator(name: "CODE_FOR_fma4_fmadddf4", value: 1066, isUnsigned: true)
!1100 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv4sf4", value: 1067, isUnsigned: true)
!1101 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddv2df4", value: 1068, isUnsigned: true)
!1102 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv4sf4", value: 1069, isUnsigned: true)
!1103 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmaddv2df4", value: 1070, isUnsigned: true)
!1104 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubsf4", value: 1071, isUnsigned: true)
!1105 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubdf4", value: 1072, isUnsigned: true)
!1106 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv4sf4", value: 1073, isUnsigned: true)
!1107 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubv2df4", value: 1074, isUnsigned: true)
!1108 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv4sf4", value: 1075, isUnsigned: true)
!1109 = !DIEnumerator(name: "CODE_FOR_fma4_vmfmsubv2df4", value: 1076, isUnsigned: true)
!1110 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddsf4", value: 1077, isUnsigned: true)
!1111 = !DIEnumerator(name: "CODE_FOR_fma4_fnmadddf4", value: 1078, isUnsigned: true)
!1112 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv4sf4", value: 1079, isUnsigned: true)
!1113 = !DIEnumerator(name: "CODE_FOR_fma4_fnmaddv2df4", value: 1080, isUnsigned: true)
!1114 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv4sf4", value: 1081, isUnsigned: true)
!1115 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmaddv2df4", value: 1082, isUnsigned: true)
!1116 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubsf4", value: 1083, isUnsigned: true)
!1117 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubdf4", value: 1084, isUnsigned: true)
!1118 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv4sf4", value: 1085, isUnsigned: true)
!1119 = !DIEnumerator(name: "CODE_FOR_fma4_fnmsubv2df4", value: 1086, isUnsigned: true)
!1120 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv4sf4", value: 1087, isUnsigned: true)
!1121 = !DIEnumerator(name: "CODE_FOR_fma4_vmfnmsubv2df4", value: 1088, isUnsigned: true)
!1122 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv8sf4256", value: 1089, isUnsigned: true)
!1123 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4df4256", value: 1090, isUnsigned: true)
!1124 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv8sf4256", value: 1091, isUnsigned: true)
!1125 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4df4256", value: 1092, isUnsigned: true)
!1126 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv8sf4256", value: 1093, isUnsigned: true)
!1127 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4df4256", value: 1094, isUnsigned: true)
!1128 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv8sf4256", value: 1095, isUnsigned: true)
!1129 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4df4256", value: 1096, isUnsigned: true)
!1130 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv4sf4", value: 1097, isUnsigned: true)
!1131 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddv2df4", value: 1098, isUnsigned: true)
!1132 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv4sf4", value: 1099, isUnsigned: true)
!1133 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubv2df4", value: 1100, isUnsigned: true)
!1134 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv4sf4", value: 1101, isUnsigned: true)
!1135 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmaddv2df4", value: 1102, isUnsigned: true)
!1136 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv4sf4", value: 1103, isUnsigned: true)
!1137 = !DIEnumerator(name: "CODE_FOR_fma4i_fnmsubv2df4", value: 1104, isUnsigned: true)
!1138 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv4sf4", value: 1105, isUnsigned: true)
!1139 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmaddv2df4", value: 1106, isUnsigned: true)
!1140 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv4sf4", value: 1107, isUnsigned: true)
!1141 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfmsubv2df4", value: 1108, isUnsigned: true)
!1142 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv4sf4", value: 1109, isUnsigned: true)
!1143 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmaddv2df4", value: 1110, isUnsigned: true)
!1144 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv4sf4", value: 1111, isUnsigned: true)
!1145 = !DIEnumerator(name: "CODE_FOR_fma4i_vmfnmsubv2df4", value: 1112, isUnsigned: true)
!1146 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv8sf4", value: 1113, isUnsigned: true)
!1147 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4df4", value: 1114, isUnsigned: true)
!1148 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv4sf4", value: 1115, isUnsigned: true)
!1149 = !DIEnumerator(name: "CODE_FOR_fma4_fmaddsubv2df4", value: 1116, isUnsigned: true)
!1150 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv8sf4", value: 1117, isUnsigned: true)
!1151 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4df4", value: 1118, isUnsigned: true)
!1152 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv4sf4", value: 1119, isUnsigned: true)
!1153 = !DIEnumerator(name: "CODE_FOR_fma4_fmsubaddv2df4", value: 1120, isUnsigned: true)
!1154 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv8sf4", value: 1121, isUnsigned: true)
!1155 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4df4", value: 1122, isUnsigned: true)
!1156 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv4sf4", value: 1123, isUnsigned: true)
!1157 = !DIEnumerator(name: "CODE_FOR_fma4i_fmaddsubv2df4", value: 1124, isUnsigned: true)
!1158 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv8sf4", value: 1125, isUnsigned: true)
!1159 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4df4", value: 1126, isUnsigned: true)
!1160 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv4sf4", value: 1127, isUnsigned: true)
!1161 = !DIEnumerator(name: "CODE_FOR_fma4i_fmsubaddv2df4", value: 1128, isUnsigned: true)
!1162 = !DIEnumerator(name: "CODE_FOR_sse_cvtpi2ps", value: 1129, isUnsigned: true)
!1163 = !DIEnumerator(name: "CODE_FOR_sse_cvtps2pi", value: 1130, isUnsigned: true)
!1164 = !DIEnumerator(name: "CODE_FOR_sse_cvttps2pi", value: 1131, isUnsigned: true)
!1165 = !DIEnumerator(name: "CODE_FOR_sse_cvtsi2ss", value: 1133, isUnsigned: true)
!1166 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si", value: 1134, isUnsigned: true)
!1167 = !DIEnumerator(name: "CODE_FOR_sse_cvtss2si_2", value: 1135, isUnsigned: true)
!1168 = !DIEnumerator(name: "CODE_FOR_sse_cvttss2si", value: 1136, isUnsigned: true)
!1169 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps", value: 1137, isUnsigned: true)
!1170 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2ps256", value: 1138, isUnsigned: true)
!1171 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2ps", value: 1139, isUnsigned: true)
!1172 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq", value: 1140, isUnsigned: true)
!1173 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2dq256", value: 1141, isUnsigned: true)
!1174 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2dq", value: 1142, isUnsigned: true)
!1175 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq", value: 1143, isUnsigned: true)
!1176 = !DIEnumerator(name: "CODE_FOR_avx_cvttps2dq256", value: 1144, isUnsigned: true)
!1177 = !DIEnumerator(name: "CODE_FOR_sse2_cvttps2dq", value: 1145, isUnsigned: true)
!1178 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpi2pd", value: 1146, isUnsigned: true)
!1179 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2pi", value: 1147, isUnsigned: true)
!1180 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2pi", value: 1148, isUnsigned: true)
!1181 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsi2sd", value: 1150, isUnsigned: true)
!1182 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si", value: 1151, isUnsigned: true)
!1183 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2si_2", value: 1152, isUnsigned: true)
!1184 = !DIEnumerator(name: "CODE_FOR_sse2_cvttsd2si", value: 1153, isUnsigned: true)
!1185 = !DIEnumerator(name: "CODE_FOR_avx_cvtdq2pd256", value: 1154, isUnsigned: true)
!1186 = !DIEnumerator(name: "CODE_FOR_sse2_cvtdq2pd", value: 1155, isUnsigned: true)
!1187 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2dq256", value: 1156, isUnsigned: true)
!1188 = !DIEnumerator(name: "CODE_FOR_avx_cvttpd2dq256", value: 1158, isUnsigned: true)
!1189 = !DIEnumerator(name: "CODE_FOR_sse2_cvtsd2ss", value: 1161, isUnsigned: true)
!1190 = !DIEnumerator(name: "CODE_FOR_sse2_cvtss2sd", value: 1163, isUnsigned: true)
!1191 = !DIEnumerator(name: "CODE_FOR_avx_cvtpd2ps256", value: 1164, isUnsigned: true)
!1192 = !DIEnumerator(name: "CODE_FOR_avx_cvtps2pd256", value: 1166, isUnsigned: true)
!1193 = !DIEnumerator(name: "CODE_FOR_sse2_cvtps2pd", value: 1167, isUnsigned: true)
!1194 = !DIEnumerator(name: "CODE_FOR_sse_movhlps", value: 1169, isUnsigned: true)
!1195 = !DIEnumerator(name: "CODE_FOR_sse_movlhps", value: 1171, isUnsigned: true)
!1196 = !DIEnumerator(name: "CODE_FOR_avx_unpckhps256", value: 1172, isUnsigned: true)
!1197 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4sf", value: 1174, isUnsigned: true)
!1198 = !DIEnumerator(name: "CODE_FOR_avx_unpcklps256", value: 1175, isUnsigned: true)
!1199 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4sf", value: 1177, isUnsigned: true)
!1200 = !DIEnumerator(name: "CODE_FOR_avx_movshdup256", value: 1178, isUnsigned: true)
!1201 = !DIEnumerator(name: "CODE_FOR_sse3_movshdup", value: 1179, isUnsigned: true)
!1202 = !DIEnumerator(name: "CODE_FOR_avx_movsldup256", value: 1180, isUnsigned: true)
!1203 = !DIEnumerator(name: "CODE_FOR_sse3_movsldup", value: 1181, isUnsigned: true)
!1204 = !DIEnumerator(name: "CODE_FOR_avx_shufps256_1", value: 1182, isUnsigned: true)
!1205 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4sf", value: 1185, isUnsigned: true)
!1206 = !DIEnumerator(name: "CODE_FOR_sse_shufps_v4si", value: 1186, isUnsigned: true)
!1207 = !DIEnumerator(name: "CODE_FOR_sse_storehps", value: 1187, isUnsigned: true)
!1208 = !DIEnumerator(name: "CODE_FOR_sse_loadhps", value: 1189, isUnsigned: true)
!1209 = !DIEnumerator(name: "CODE_FOR_sse_storelps", value: 1191, isUnsigned: true)
!1210 = !DIEnumerator(name: "CODE_FOR_sse_loadlps", value: 1193, isUnsigned: true)
!1211 = !DIEnumerator(name: "CODE_FOR_sse_movss", value: 1195, isUnsigned: true)
!1212 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf_0", value: 1209, isUnsigned: true)
!1213 = !DIEnumerator(name: "CODE_FOR_vec_setv4si_0", value: 1210, isUnsigned: true)
!1214 = !DIEnumerator(name: "CODE_FOR_sse4_1_insertps", value: 1214, isUnsigned: true)
!1215 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4di", value: 1216, isUnsigned: true)
!1216 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v4df", value: 1217, isUnsigned: true)
!1217 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4di", value: 1218, isUnsigned: true)
!1218 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v4df", value: 1219, isUnsigned: true)
!1219 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8si", value: 1220, isUnsigned: true)
!1220 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v8sf", value: 1221, isUnsigned: true)
!1221 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8si", value: 1222, isUnsigned: true)
!1222 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v8sf", value: 1223, isUnsigned: true)
!1223 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v16hi", value: 1224, isUnsigned: true)
!1224 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v16hi", value: 1225, isUnsigned: true)
!1225 = !DIEnumerator(name: "CODE_FOR_vec_extract_lo_v32qi", value: 1226, isUnsigned: true)
!1226 = !DIEnumerator(name: "CODE_FOR_vec_extract_hi_v32qi", value: 1227, isUnsigned: true)
!1227 = !DIEnumerator(name: "CODE_FOR_avx_unpckhpd256", value: 1230, isUnsigned: true)
!1228 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256_1", value: 1238, isUnsigned: true)
!1229 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2di", value: 1240, isUnsigned: true)
!1230 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2di", value: 1242, isUnsigned: true)
!1231 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2df", value: 1245, isUnsigned: true)
!1232 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd_v2di", value: 1246, isUnsigned: true)
!1233 = !DIEnumerator(name: "CODE_FOR_sse2_storehpd", value: 1248, isUnsigned: true)
!1234 = !DIEnumerator(name: "CODE_FOR_sse2_storelpd", value: 1249, isUnsigned: true)
!1235 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd", value: 1251, isUnsigned: true)
!1236 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd", value: 1253, isUnsigned: true)
!1237 = !DIEnumerator(name: "CODE_FOR_sse2_movsd", value: 1257, isUnsigned: true)
!1238 = !DIEnumerator(name: "CODE_FOR_vec_dupv2df", value: 1259, isUnsigned: true)
!1239 = !DIEnumerator(name: "CODE_FOR_mulv16qi3", value: 1295, isUnsigned: true)
!1240 = !DIEnumerator(name: "CODE_FOR_mulv2di3", value: 1311, isUnsigned: true)
!1241 = !DIEnumerator(name: "CODE_FOR_ashrv8hi3", value: 1314, isUnsigned: true)
!1242 = !DIEnumerator(name: "CODE_FOR_ashrv4si3", value: 1315, isUnsigned: true)
!1243 = !DIEnumerator(name: "CODE_FOR_sse2_lshrv1ti3", value: 1320, isUnsigned: true)
!1244 = !DIEnumerator(name: "CODE_FOR_lshrv8hi3", value: 1321, isUnsigned: true)
!1245 = !DIEnumerator(name: "CODE_FOR_lshrv4si3", value: 1322, isUnsigned: true)
!1246 = !DIEnumerator(name: "CODE_FOR_lshrv2di3", value: 1323, isUnsigned: true)
!1247 = !DIEnumerator(name: "CODE_FOR_sse2_ashlv1ti3", value: 1328, isUnsigned: true)
!1248 = !DIEnumerator(name: "CODE_FOR_ashlv8hi3", value: 1329, isUnsigned: true)
!1249 = !DIEnumerator(name: "CODE_FOR_ashlv4si3", value: 1330, isUnsigned: true)
!1250 = !DIEnumerator(name: "CODE_FOR_ashlv2di3", value: 1331, isUnsigned: true)
!1251 = !DIEnumerator(name: "CODE_FOR_sse2_gtv16qi3", value: 1368, isUnsigned: true)
!1252 = !DIEnumerator(name: "CODE_FOR_sse2_gtv8hi3", value: 1369, isUnsigned: true)
!1253 = !DIEnumerator(name: "CODE_FOR_sse2_gtv4si3", value: 1370, isUnsigned: true)
!1254 = !DIEnumerator(name: "CODE_FOR_sse4_2_gtv2di3", value: 1371, isUnsigned: true)
!1255 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv16qi3", value: 1384, isUnsigned: true)
!1256 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv8hi3", value: 1385, isUnsigned: true)
!1257 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv4si3", value: 1386, isUnsigned: true)
!1258 = !DIEnumerator(name: "CODE_FOR_sse2_andnotv2di3", value: 1387, isUnsigned: true)
!1259 = !DIEnumerator(name: "CODE_FOR_sse2_packsswb", value: 1441, isUnsigned: true)
!1260 = !DIEnumerator(name: "CODE_FOR_sse2_packssdw", value: 1443, isUnsigned: true)
!1261 = !DIEnumerator(name: "CODE_FOR_sse2_packuswb", value: 1445, isUnsigned: true)
!1262 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv16qi", value: 1447, isUnsigned: true)
!1263 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv16qi", value: 1449, isUnsigned: true)
!1264 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv8hi", value: 1451, isUnsigned: true)
!1265 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv8hi", value: 1453, isUnsigned: true)
!1266 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv4si", value: 1455, isUnsigned: true)
!1267 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv4si", value: 1457, isUnsigned: true)
!1268 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd_1", value: 1469, isUnsigned: true)
!1269 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw_1", value: 1470, isUnsigned: true)
!1270 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw_1", value: 1471, isUnsigned: true)
!1271 = !DIEnumerator(name: "CODE_FOR_sse2_loadld", value: 1473, isUnsigned: true)
!1272 = !DIEnumerator(name: "CODE_FOR_sse2_stored", value: 1474, isUnsigned: true)
!1273 = !DIEnumerator(name: "CODE_FOR_vec_concatv2di", value: 1492, isUnsigned: true)
!1274 = !DIEnumerator(name: "CODE_FOR_sse2_psadbw", value: 1498, isUnsigned: true)
!1275 = !DIEnumerator(name: "CODE_FOR_avx_movmskps256", value: 1499, isUnsigned: true)
!1276 = !DIEnumerator(name: "CODE_FOR_avx_movmskpd256", value: 1500, isUnsigned: true)
!1277 = !DIEnumerator(name: "CODE_FOR_sse_movmskps", value: 1501, isUnsigned: true)
!1278 = !DIEnumerator(name: "CODE_FOR_sse2_movmskpd", value: 1502, isUnsigned: true)
!1279 = !DIEnumerator(name: "CODE_FOR_sse2_pmovmskb", value: 1503, isUnsigned: true)
!1280 = !DIEnumerator(name: "CODE_FOR_sse_ldmxcsr", value: 1505, isUnsigned: true)
!1281 = !DIEnumerator(name: "CODE_FOR_sse_stmxcsr", value: 1506, isUnsigned: true)
!1282 = !DIEnumerator(name: "CODE_FOR_sse2_clflush", value: 1508, isUnsigned: true)
!1283 = !DIEnumerator(name: "CODE_FOR_sse3_mwait", value: 1511, isUnsigned: true)
!1284 = !DIEnumerator(name: "CODE_FOR_sse3_monitor", value: 1512, isUnsigned: true)
!1285 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv8hi3", value: 1514, isUnsigned: true)
!1286 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddwv4hi3", value: 1515, isUnsigned: true)
!1287 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv4si3", value: 1517, isUnsigned: true)
!1288 = !DIEnumerator(name: "CODE_FOR_ssse3_phadddv2si3", value: 1518, isUnsigned: true)
!1289 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv8hi3", value: 1520, isUnsigned: true)
!1290 = !DIEnumerator(name: "CODE_FOR_ssse3_phaddswv4hi3", value: 1521, isUnsigned: true)
!1291 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv8hi3", value: 1523, isUnsigned: true)
!1292 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubwv4hi3", value: 1524, isUnsigned: true)
!1293 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv4si3", value: 1526, isUnsigned: true)
!1294 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubdv2si3", value: 1527, isUnsigned: true)
!1295 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv8hi3", value: 1529, isUnsigned: true)
!1296 = !DIEnumerator(name: "CODE_FOR_ssse3_phsubswv4hi3", value: 1530, isUnsigned: true)
!1297 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw128", value: 1532, isUnsigned: true)
!1298 = !DIEnumerator(name: "CODE_FOR_ssse3_pmaddubsw", value: 1533, isUnsigned: true)
!1299 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv16qi3", value: 1538, isUnsigned: true)
!1300 = !DIEnumerator(name: "CODE_FOR_ssse3_pshufbv8qi3", value: 1539, isUnsigned: true)
!1301 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv16qi3", value: 1543, isUnsigned: true)
!1302 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8hi3", value: 1544, isUnsigned: true)
!1303 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4si3", value: 1545, isUnsigned: true)
!1304 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv8qi3", value: 1546, isUnsigned: true)
!1305 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv4hi3", value: 1547, isUnsigned: true)
!1306 = !DIEnumerator(name: "CODE_FOR_ssse3_psignv2si3", value: 1548, isUnsigned: true)
!1307 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrti", value: 1550, isUnsigned: true)
!1308 = !DIEnumerator(name: "CODE_FOR_ssse3_palignrdi", value: 1551, isUnsigned: true)
!1309 = !DIEnumerator(name: "CODE_FOR_absv16qi2", value: 1552, isUnsigned: true)
!1310 = !DIEnumerator(name: "CODE_FOR_absv8hi2", value: 1553, isUnsigned: true)
!1311 = !DIEnumerator(name: "CODE_FOR_absv4si2", value: 1554, isUnsigned: true)
!1312 = !DIEnumerator(name: "CODE_FOR_absv8qi2", value: 1555, isUnsigned: true)
!1313 = !DIEnumerator(name: "CODE_FOR_absv4hi2", value: 1556, isUnsigned: true)
!1314 = !DIEnumerator(name: "CODE_FOR_absv2si2", value: 1557, isUnsigned: true)
!1315 = !DIEnumerator(name: "CODE_FOR_sse4a_movntsf", value: 1558, isUnsigned: true)
!1316 = !DIEnumerator(name: "CODE_FOR_sse4a_movntdf", value: 1559, isUnsigned: true)
!1317 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv4sf", value: 1560, isUnsigned: true)
!1318 = !DIEnumerator(name: "CODE_FOR_sse4a_vmmovntv2df", value: 1561, isUnsigned: true)
!1319 = !DIEnumerator(name: "CODE_FOR_sse4a_extrqi", value: 1562, isUnsigned: true)
!1320 = !DIEnumerator(name: "CODE_FOR_sse4a_extrq", value: 1563, isUnsigned: true)
!1321 = !DIEnumerator(name: "CODE_FOR_sse4a_insertqi", value: 1564, isUnsigned: true)
!1322 = !DIEnumerator(name: "CODE_FOR_sse4a_insertq", value: 1565, isUnsigned: true)
!1323 = !DIEnumerator(name: "CODE_FOR_avx_blendps", value: 1566, isUnsigned: true)
!1324 = !DIEnumerator(name: "CODE_FOR_avx_blendpd", value: 1567, isUnsigned: true)
!1325 = !DIEnumerator(name: "CODE_FOR_avx_blendps256", value: 1568, isUnsigned: true)
!1326 = !DIEnumerator(name: "CODE_FOR_avx_blendpd256", value: 1569, isUnsigned: true)
!1327 = !DIEnumerator(name: "CODE_FOR_avx_blendvps", value: 1570, isUnsigned: true)
!1328 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd", value: 1571, isUnsigned: true)
!1329 = !DIEnumerator(name: "CODE_FOR_avx_blendvps256", value: 1572, isUnsigned: true)
!1330 = !DIEnumerator(name: "CODE_FOR_avx_blendvpd256", value: 1573, isUnsigned: true)
!1331 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendps", value: 1574, isUnsigned: true)
!1332 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendpd", value: 1575, isUnsigned: true)
!1333 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvps", value: 1576, isUnsigned: true)
!1334 = !DIEnumerator(name: "CODE_FOR_sse4_1_blendvpd", value: 1577, isUnsigned: true)
!1335 = !DIEnumerator(name: "CODE_FOR_avx_dpps", value: 1578, isUnsigned: true)
!1336 = !DIEnumerator(name: "CODE_FOR_avx_dppd", value: 1579, isUnsigned: true)
!1337 = !DIEnumerator(name: "CODE_FOR_avx_dpps256", value: 1580, isUnsigned: true)
!1338 = !DIEnumerator(name: "CODE_FOR_avx_dppd256", value: 1581, isUnsigned: true)
!1339 = !DIEnumerator(name: "CODE_FOR_sse4_1_dpps", value: 1582, isUnsigned: true)
!1340 = !DIEnumerator(name: "CODE_FOR_sse4_1_dppd", value: 1583, isUnsigned: true)
!1341 = !DIEnumerator(name: "CODE_FOR_sse4_1_movntdqa", value: 1584, isUnsigned: true)
!1342 = !DIEnumerator(name: "CODE_FOR_sse4_1_mpsadbw", value: 1586, isUnsigned: true)
!1343 = !DIEnumerator(name: "CODE_FOR_sse4_1_packusdw", value: 1588, isUnsigned: true)
!1344 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendvb", value: 1590, isUnsigned: true)
!1345 = !DIEnumerator(name: "CODE_FOR_sse4_1_pblendw", value: 1592, isUnsigned: true)
!1346 = !DIEnumerator(name: "CODE_FOR_sse4_1_phminposuw", value: 1593, isUnsigned: true)
!1347 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv8qiv8hi2", value: 1594, isUnsigned: true)
!1348 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4qiv4si2", value: 1596, isUnsigned: true)
!1349 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2qiv2di2", value: 1598, isUnsigned: true)
!1350 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv4hiv4si2", value: 1600, isUnsigned: true)
!1351 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2hiv2di2", value: 1602, isUnsigned: true)
!1352 = !DIEnumerator(name: "CODE_FOR_sse4_1_extendv2siv2di2", value: 1604, isUnsigned: true)
!1353 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv8qiv8hi2", value: 1606, isUnsigned: true)
!1354 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4qiv4si2", value: 1608, isUnsigned: true)
!1355 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2qiv2di2", value: 1610, isUnsigned: true)
!1356 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv4hiv4si2", value: 1612, isUnsigned: true)
!1357 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2hiv2di2", value: 1614, isUnsigned: true)
!1358 = !DIEnumerator(name: "CODE_FOR_sse4_1_zero_extendv2siv2di2", value: 1616, isUnsigned: true)
!1359 = !DIEnumerator(name: "CODE_FOR_avx_vtestps", value: 1618, isUnsigned: true)
!1360 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd", value: 1619, isUnsigned: true)
!1361 = !DIEnumerator(name: "CODE_FOR_avx_vtestps256", value: 1620, isUnsigned: true)
!1362 = !DIEnumerator(name: "CODE_FOR_avx_vtestpd256", value: 1621, isUnsigned: true)
!1363 = !DIEnumerator(name: "CODE_FOR_avx_ptest256", value: 1622, isUnsigned: true)
!1364 = !DIEnumerator(name: "CODE_FOR_sse4_1_ptest", value: 1623, isUnsigned: true)
!1365 = !DIEnumerator(name: "CODE_FOR_avx_roundps256", value: 1624, isUnsigned: true)
!1366 = !DIEnumerator(name: "CODE_FOR_avx_roundpd256", value: 1625, isUnsigned: true)
!1367 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundps", value: 1626, isUnsigned: true)
!1368 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundpd", value: 1627, isUnsigned: true)
!1369 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundss", value: 1630, isUnsigned: true)
!1370 = !DIEnumerator(name: "CODE_FOR_sse4_1_roundsd", value: 1631, isUnsigned: true)
!1371 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr", value: 1632, isUnsigned: true)
!1372 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestri", value: 1633, isUnsigned: true)
!1373 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestrm", value: 1634, isUnsigned: true)
!1374 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpestr_cconly", value: 1635, isUnsigned: true)
!1375 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr", value: 1636, isUnsigned: true)
!1376 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistri", value: 1637, isUnsigned: true)
!1377 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistrm", value: 1638, isUnsigned: true)
!1378 = !DIEnumerator(name: "CODE_FOR_sse4_2_pcmpistr_cconly", value: 1639, isUnsigned: true)
!1379 = !DIEnumerator(name: "CODE_FOR_xop_pmacsww", value: 1640, isUnsigned: true)
!1380 = !DIEnumerator(name: "CODE_FOR_xop_pmacssww", value: 1641, isUnsigned: true)
!1381 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdd", value: 1642, isUnsigned: true)
!1382 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdd", value: 1643, isUnsigned: true)
!1383 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdql", value: 1644, isUnsigned: true)
!1384 = !DIEnumerator(name: "CODE_FOR_xop_pmacssdqh", value: 1645, isUnsigned: true)
!1385 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdql", value: 1646, isUnsigned: true)
!1386 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_low", value: 1647, isUnsigned: true)
!1387 = !DIEnumerator(name: "CODE_FOR_xop_pmacsdqh", value: 1648, isUnsigned: true)
!1388 = !DIEnumerator(name: "CODE_FOR_xop_mulv2div2di3_high", value: 1649, isUnsigned: true)
!1389 = !DIEnumerator(name: "CODE_FOR_xop_pmacsswd", value: 1650, isUnsigned: true)
!1390 = !DIEnumerator(name: "CODE_FOR_xop_pmacswd", value: 1651, isUnsigned: true)
!1391 = !DIEnumerator(name: "CODE_FOR_xop_pmadcsswd", value: 1652, isUnsigned: true)
!1392 = !DIEnumerator(name: "CODE_FOR_xop_pmadcswd", value: 1653, isUnsigned: true)
!1393 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16qi", value: 1654, isUnsigned: true)
!1394 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8hi", value: 1655, isUnsigned: true)
!1395 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4si", value: 1656, isUnsigned: true)
!1396 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2di", value: 1657, isUnsigned: true)
!1397 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4sf", value: 1658, isUnsigned: true)
!1398 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v2df", value: 1659, isUnsigned: true)
!1399 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v32qi256", value: 1660, isUnsigned: true)
!1400 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v16hi256", value: 1661, isUnsigned: true)
!1401 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8si256", value: 1662, isUnsigned: true)
!1402 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4di256", value: 1663, isUnsigned: true)
!1403 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v8sf256", value: 1664, isUnsigned: true)
!1404 = !DIEnumerator(name: "CODE_FOR_xop_pcmov_v4df256", value: 1665, isUnsigned: true)
!1405 = !DIEnumerator(name: "CODE_FOR_xop_phaddbw", value: 1666, isUnsigned: true)
!1406 = !DIEnumerator(name: "CODE_FOR_xop_phaddbd", value: 1667, isUnsigned: true)
!1407 = !DIEnumerator(name: "CODE_FOR_xop_phaddbq", value: 1668, isUnsigned: true)
!1408 = !DIEnumerator(name: "CODE_FOR_xop_phaddwd", value: 1669, isUnsigned: true)
!1409 = !DIEnumerator(name: "CODE_FOR_xop_phaddwq", value: 1670, isUnsigned: true)
!1410 = !DIEnumerator(name: "CODE_FOR_xop_phadddq", value: 1671, isUnsigned: true)
!1411 = !DIEnumerator(name: "CODE_FOR_xop_phaddubw", value: 1672, isUnsigned: true)
!1412 = !DIEnumerator(name: "CODE_FOR_xop_phaddubd", value: 1673, isUnsigned: true)
!1413 = !DIEnumerator(name: "CODE_FOR_xop_phaddubq", value: 1674, isUnsigned: true)
!1414 = !DIEnumerator(name: "CODE_FOR_xop_phadduwd", value: 1675, isUnsigned: true)
!1415 = !DIEnumerator(name: "CODE_FOR_xop_phadduwq", value: 1676, isUnsigned: true)
!1416 = !DIEnumerator(name: "CODE_FOR_xop_phaddudq", value: 1677, isUnsigned: true)
!1417 = !DIEnumerator(name: "CODE_FOR_xop_phsubbw", value: 1678, isUnsigned: true)
!1418 = !DIEnumerator(name: "CODE_FOR_xop_phsubwd", value: 1679, isUnsigned: true)
!1419 = !DIEnumerator(name: "CODE_FOR_xop_phsubdq", value: 1680, isUnsigned: true)
!1420 = !DIEnumerator(name: "CODE_FOR_xop_pperm", value: 1681, isUnsigned: true)
!1421 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v2di_v4si", value: 1682, isUnsigned: true)
!1422 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v4si_v8hi", value: 1683, isUnsigned: true)
!1423 = !DIEnumerator(name: "CODE_FOR_xop_pperm_pack_v8hi_v16qi", value: 1684, isUnsigned: true)
!1424 = !DIEnumerator(name: "CODE_FOR_xop_rotlv16qi3", value: 1685, isUnsigned: true)
!1425 = !DIEnumerator(name: "CODE_FOR_xop_rotlv8hi3", value: 1686, isUnsigned: true)
!1426 = !DIEnumerator(name: "CODE_FOR_xop_rotlv4si3", value: 1687, isUnsigned: true)
!1427 = !DIEnumerator(name: "CODE_FOR_xop_rotlv2di3", value: 1688, isUnsigned: true)
!1428 = !DIEnumerator(name: "CODE_FOR_xop_rotrv16qi3", value: 1689, isUnsigned: true)
!1429 = !DIEnumerator(name: "CODE_FOR_xop_rotrv8hi3", value: 1690, isUnsigned: true)
!1430 = !DIEnumerator(name: "CODE_FOR_xop_rotrv4si3", value: 1691, isUnsigned: true)
!1431 = !DIEnumerator(name: "CODE_FOR_xop_rotrv2di3", value: 1692, isUnsigned: true)
!1432 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv16qi3", value: 1693, isUnsigned: true)
!1433 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv8hi3", value: 1694, isUnsigned: true)
!1434 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv4si3", value: 1695, isUnsigned: true)
!1435 = !DIEnumerator(name: "CODE_FOR_xop_vrotlv2di3", value: 1696, isUnsigned: true)
!1436 = !DIEnumerator(name: "CODE_FOR_xop_ashlv16qi3", value: 1697, isUnsigned: true)
!1437 = !DIEnumerator(name: "CODE_FOR_xop_ashlv8hi3", value: 1698, isUnsigned: true)
!1438 = !DIEnumerator(name: "CODE_FOR_xop_ashlv4si3", value: 1699, isUnsigned: true)
!1439 = !DIEnumerator(name: "CODE_FOR_xop_ashlv2di3", value: 1700, isUnsigned: true)
!1440 = !DIEnumerator(name: "CODE_FOR_xop_lshlv16qi3", value: 1701, isUnsigned: true)
!1441 = !DIEnumerator(name: "CODE_FOR_xop_lshlv8hi3", value: 1702, isUnsigned: true)
!1442 = !DIEnumerator(name: "CODE_FOR_xop_lshlv4si3", value: 1703, isUnsigned: true)
!1443 = !DIEnumerator(name: "CODE_FOR_xop_lshlv2di3", value: 1704, isUnsigned: true)
!1444 = !DIEnumerator(name: "CODE_FOR_xop_frczv4sf2", value: 1705, isUnsigned: true)
!1445 = !DIEnumerator(name: "CODE_FOR_xop_frczv2df2", value: 1706, isUnsigned: true)
!1446 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv4sf2", value: 1707, isUnsigned: true)
!1447 = !DIEnumerator(name: "CODE_FOR_xop_vmfrczv2df2", value: 1708, isUnsigned: true)
!1448 = !DIEnumerator(name: "CODE_FOR_xop_frczv8sf2256", value: 1709, isUnsigned: true)
!1449 = !DIEnumerator(name: "CODE_FOR_xop_frczv4df2256", value: 1710, isUnsigned: true)
!1450 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv16qi3", value: 1711, isUnsigned: true)
!1451 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv8hi3", value: 1712, isUnsigned: true)
!1452 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv4si3", value: 1713, isUnsigned: true)
!1453 = !DIEnumerator(name: "CODE_FOR_xop_maskcmpv2di3", value: 1714, isUnsigned: true)
!1454 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv16qi3", value: 1715, isUnsigned: true)
!1455 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv8hi3", value: 1716, isUnsigned: true)
!1456 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv4si3", value: 1717, isUnsigned: true)
!1457 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_unsv2di3", value: 1718, isUnsigned: true)
!1458 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v16qi3", value: 1719, isUnsigned: true)
!1459 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v8hi3", value: 1720, isUnsigned: true)
!1460 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v4si3", value: 1721, isUnsigned: true)
!1461 = !DIEnumerator(name: "CODE_FOR_xop_maskcmp_uns2v2di3", value: 1722, isUnsigned: true)
!1462 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv16qi3", value: 1723, isUnsigned: true)
!1463 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv8hi3", value: 1724, isUnsigned: true)
!1464 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv4si3", value: 1725, isUnsigned: true)
!1465 = !DIEnumerator(name: "CODE_FOR_xop_pcom_tfv2di3", value: 1726, isUnsigned: true)
!1466 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4sf3", value: 1727, isUnsigned: true)
!1467 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v2df3", value: 1728, isUnsigned: true)
!1468 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v8sf3", value: 1729, isUnsigned: true)
!1469 = !DIEnumerator(name: "CODE_FOR_xop_vpermil2v4df3", value: 1730, isUnsigned: true)
!1470 = !DIEnumerator(name: "CODE_FOR_aesenc", value: 1732, isUnsigned: true)
!1471 = !DIEnumerator(name: "CODE_FOR_aesenclast", value: 1734, isUnsigned: true)
!1472 = !DIEnumerator(name: "CODE_FOR_aesdec", value: 1736, isUnsigned: true)
!1473 = !DIEnumerator(name: "CODE_FOR_aesdeclast", value: 1738, isUnsigned: true)
!1474 = !DIEnumerator(name: "CODE_FOR_aesimc", value: 1739, isUnsigned: true)
!1475 = !DIEnumerator(name: "CODE_FOR_aeskeygenassist", value: 1740, isUnsigned: true)
!1476 = !DIEnumerator(name: "CODE_FOR_pclmulqdq", value: 1742, isUnsigned: true)
!1477 = !DIEnumerator(name: "CODE_FOR_vec_dupv8si", value: 1745, isUnsigned: true)
!1478 = !DIEnumerator(name: "CODE_FOR_vec_dupv8sf", value: 1746, isUnsigned: true)
!1479 = !DIEnumerator(name: "CODE_FOR_vec_dupv4di", value: 1747, isUnsigned: true)
!1480 = !DIEnumerator(name: "CODE_FOR_vec_dupv4df", value: 1748, isUnsigned: true)
!1481 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v32qi", value: 1749, isUnsigned: true)
!1482 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v16hi", value: 1750, isUnsigned: true)
!1483 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8si", value: 1751, isUnsigned: true)
!1484 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4di", value: 1752, isUnsigned: true)
!1485 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v8sf", value: 1753, isUnsigned: true)
!1486 = !DIEnumerator(name: "CODE_FOR_avx_vbroadcastf128_v4df", value: 1754, isUnsigned: true)
!1487 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4sf3", value: 1762, isUnsigned: true)
!1488 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv2df3", value: 1763, isUnsigned: true)
!1489 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv8sf3", value: 1764, isUnsigned: true)
!1490 = !DIEnumerator(name: "CODE_FOR_avx_vpermilvarv4df3", value: 1765, isUnsigned: true)
!1491 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4di", value: 1772, isUnsigned: true)
!1492 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v4df", value: 1773, isUnsigned: true)
!1493 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4di", value: 1774, isUnsigned: true)
!1494 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v4df", value: 1775, isUnsigned: true)
!1495 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8si", value: 1776, isUnsigned: true)
!1496 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v8sf", value: 1777, isUnsigned: true)
!1497 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8si", value: 1778, isUnsigned: true)
!1498 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v8sf", value: 1779, isUnsigned: true)
!1499 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v16hi", value: 1780, isUnsigned: true)
!1500 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v16hi", value: 1781, isUnsigned: true)
!1501 = !DIEnumerator(name: "CODE_FOR_vec_set_lo_v32qi", value: 1782, isUnsigned: true)
!1502 = !DIEnumerator(name: "CODE_FOR_vec_set_hi_v32qi", value: 1783, isUnsigned: true)
!1503 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps", value: 1784, isUnsigned: true)
!1504 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd", value: 1785, isUnsigned: true)
!1505 = !DIEnumerator(name: "CODE_FOR_avx_maskloadps256", value: 1786, isUnsigned: true)
!1506 = !DIEnumerator(name: "CODE_FOR_avx_maskloadpd256", value: 1787, isUnsigned: true)
!1507 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps", value: 1788, isUnsigned: true)
!1508 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd", value: 1789, isUnsigned: true)
!1509 = !DIEnumerator(name: "CODE_FOR_avx_maskstoreps256", value: 1790, isUnsigned: true)
!1510 = !DIEnumerator(name: "CODE_FOR_avx_maskstorepd256", value: 1791, isUnsigned: true)
!1511 = !DIEnumerator(name: "CODE_FOR_avx_si256_si", value: 1792, isUnsigned: true)
!1512 = !DIEnumerator(name: "CODE_FOR_avx_ps256_ps", value: 1793, isUnsigned: true)
!1513 = !DIEnumerator(name: "CODE_FOR_avx_pd256_pd", value: 1794, isUnsigned: true)
!1514 = !DIEnumerator(name: "CODE_FOR_avx_si_si256", value: 1795, isUnsigned: true)
!1515 = !DIEnumerator(name: "CODE_FOR_avx_ps_ps256", value: 1796, isUnsigned: true)
!1516 = !DIEnumerator(name: "CODE_FOR_avx_pd_pd256", value: 1797, isUnsigned: true)
!1517 = !DIEnumerator(name: "CODE_FOR_memory_barrier_nosse", value: 1804, isUnsigned: true)
!1518 = !DIEnumerator(name: "CODE_FOR_sync_double_compare_and_swapdi", value: 1808, isUnsigned: true)
!1519 = !DIEnumerator(name: "CODE_FOR_sync_old_addqi", value: 1810, isUnsigned: true)
!1520 = !DIEnumerator(name: "CODE_FOR_sync_old_addhi", value: 1811, isUnsigned: true)
!1521 = !DIEnumerator(name: "CODE_FOR_sync_old_addsi", value: 1812, isUnsigned: true)
!1522 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setqi", value: 1813, isUnsigned: true)
!1523 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_sethi", value: 1814, isUnsigned: true)
!1524 = !DIEnumerator(name: "CODE_FOR_sync_lock_test_and_setsi", value: 1815, isUnsigned: true)
!1525 = !DIEnumerator(name: "CODE_FOR_sync_addqi", value: 1816, isUnsigned: true)
!1526 = !DIEnumerator(name: "CODE_FOR_sync_addhi", value: 1817, isUnsigned: true)
!1527 = !DIEnumerator(name: "CODE_FOR_sync_addsi", value: 1818, isUnsigned: true)
!1528 = !DIEnumerator(name: "CODE_FOR_sync_subqi", value: 1819, isUnsigned: true)
!1529 = !DIEnumerator(name: "CODE_FOR_sync_subhi", value: 1820, isUnsigned: true)
!1530 = !DIEnumerator(name: "CODE_FOR_sync_subsi", value: 1821, isUnsigned: true)
!1531 = !DIEnumerator(name: "CODE_FOR_sync_andqi", value: 1822, isUnsigned: true)
!1532 = !DIEnumerator(name: "CODE_FOR_sync_iorqi", value: 1823, isUnsigned: true)
!1533 = !DIEnumerator(name: "CODE_FOR_sync_xorqi", value: 1824, isUnsigned: true)
!1534 = !DIEnumerator(name: "CODE_FOR_sync_andhi", value: 1825, isUnsigned: true)
!1535 = !DIEnumerator(name: "CODE_FOR_sync_iorhi", value: 1826, isUnsigned: true)
!1536 = !DIEnumerator(name: "CODE_FOR_sync_xorhi", value: 1827, isUnsigned: true)
!1537 = !DIEnumerator(name: "CODE_FOR_sync_andsi", value: 1828, isUnsigned: true)
!1538 = !DIEnumerator(name: "CODE_FOR_sync_iorsi", value: 1829, isUnsigned: true)
!1539 = !DIEnumerator(name: "CODE_FOR_sync_xorsi", value: 1830, isUnsigned: true)
!1540 = !DIEnumerator(name: "CODE_FOR_cbranchqi4", value: 1831, isUnsigned: true)
!1541 = !DIEnumerator(name: "CODE_FOR_cbranchhi4", value: 1832, isUnsigned: true)
!1542 = !DIEnumerator(name: "CODE_FOR_cbranchsi4", value: 1833, isUnsigned: true)
!1543 = !DIEnumerator(name: "CODE_FOR_cbranchdi4", value: 1834, isUnsigned: true)
!1544 = !DIEnumerator(name: "CODE_FOR_cstoreqi4", value: 1835, isUnsigned: true)
!1545 = !DIEnumerator(name: "CODE_FOR_cstorehi4", value: 1836, isUnsigned: true)
!1546 = !DIEnumerator(name: "CODE_FOR_cstoresi4", value: 1837, isUnsigned: true)
!1547 = !DIEnumerator(name: "CODE_FOR_cmpsi_1", value: 1838, isUnsigned: true)
!1548 = !DIEnumerator(name: "CODE_FOR_cmpqi_ext_3", value: 1839, isUnsigned: true)
!1549 = !DIEnumerator(name: "CODE_FOR_cbranchxf4", value: 1840, isUnsigned: true)
!1550 = !DIEnumerator(name: "CODE_FOR_cstorexf4", value: 1841, isUnsigned: true)
!1551 = !DIEnumerator(name: "CODE_FOR_cbranchsf4", value: 1842, isUnsigned: true)
!1552 = !DIEnumerator(name: "CODE_FOR_cbranchdf4", value: 1843, isUnsigned: true)
!1553 = !DIEnumerator(name: "CODE_FOR_cstoresf4", value: 1844, isUnsigned: true)
!1554 = !DIEnumerator(name: "CODE_FOR_cstoredf4", value: 1845, isUnsigned: true)
!1555 = !DIEnumerator(name: "CODE_FOR_cbranchcc4", value: 1846, isUnsigned: true)
!1556 = !DIEnumerator(name: "CODE_FOR_cstorecc4", value: 1847, isUnsigned: true)
!1557 = !DIEnumerator(name: "CODE_FOR_movsi", value: 1855, isUnsigned: true)
!1558 = !DIEnumerator(name: "CODE_FOR_movhi", value: 1856, isUnsigned: true)
!1559 = !DIEnumerator(name: "CODE_FOR_movstricthi", value: 1857, isUnsigned: true)
!1560 = !DIEnumerator(name: "CODE_FOR_movqi", value: 1858, isUnsigned: true)
!1561 = !DIEnumerator(name: "CODE_FOR_movstrictqi", value: 1859, isUnsigned: true)
!1562 = !DIEnumerator(name: "CODE_FOR_movdi", value: 1860, isUnsigned: true)
!1563 = !DIEnumerator(name: "CODE_FOR_movoi", value: 1863, isUnsigned: true)
!1564 = !DIEnumerator(name: "CODE_FOR_movti", value: 1864, isUnsigned: true)
!1565 = !DIEnumerator(name: "CODE_FOR_movcdi", value: 1866, isUnsigned: true)
!1566 = !DIEnumerator(name: "CODE_FOR_movsf", value: 1867, isUnsigned: true)
!1567 = !DIEnumerator(name: "CODE_FOR_movdf", value: 1870, isUnsigned: true)
!1568 = !DIEnumerator(name: "CODE_FOR_movxf", value: 1874, isUnsigned: true)
!1569 = !DIEnumerator(name: "CODE_FOR_movtf", value: 1877, isUnsigned: true)
!1570 = !DIEnumerator(name: "CODE_FOR_zero_extendhisi2", value: 1887, isUnsigned: true)
!1571 = !DIEnumerator(name: "CODE_FOR_zero_extendqihi2", value: 1889, isUnsigned: true)
!1572 = !DIEnumerator(name: "CODE_FOR_zero_extendqisi2", value: 1893, isUnsigned: true)
!1573 = !DIEnumerator(name: "CODE_FOR_zero_extendsidi2", value: 1897, isUnsigned: true)
!1574 = !DIEnumerator(name: "CODE_FOR_extendsidi2", value: 1900, isUnsigned: true)
!1575 = !DIEnumerator(name: "CODE_FOR_extendsfdf2", value: 1907, isUnsigned: true)
!1576 = !DIEnumerator(name: "CODE_FOR_extendsfxf2", value: 1909, isUnsigned: true)
!1577 = !DIEnumerator(name: "CODE_FOR_extenddfxf2", value: 1910, isUnsigned: true)
!1578 = !DIEnumerator(name: "CODE_FOR_truncdfsf2", value: 1911, isUnsigned: true)
!1579 = !DIEnumerator(name: "CODE_FOR_truncdfsf2_with_temp", value: 1913, isUnsigned: true)
!1580 = !DIEnumerator(name: "CODE_FOR_truncxfsf2", value: 1915, isUnsigned: true)
!1581 = !DIEnumerator(name: "CODE_FOR_truncxfdf2", value: 1916, isUnsigned: true)
!1582 = !DIEnumerator(name: "CODE_FOR_fix_truncxfdi2", value: 1921, isUnsigned: true)
!1583 = !DIEnumerator(name: "CODE_FOR_fix_truncsfdi2", value: 1922, isUnsigned: true)
!1584 = !DIEnumerator(name: "CODE_FOR_fix_truncdfdi2", value: 1923, isUnsigned: true)
!1585 = !DIEnumerator(name: "CODE_FOR_fix_truncxfsi2", value: 1924, isUnsigned: true)
!1586 = !DIEnumerator(name: "CODE_FOR_fix_truncsfsi2", value: 1925, isUnsigned: true)
!1587 = !DIEnumerator(name: "CODE_FOR_fix_truncdfsi2", value: 1926, isUnsigned: true)
!1588 = !DIEnumerator(name: "CODE_FOR_fix_truncsfhi2", value: 1927, isUnsigned: true)
!1589 = !DIEnumerator(name: "CODE_FOR_fix_truncdfhi2", value: 1928, isUnsigned: true)
!1590 = !DIEnumerator(name: "CODE_FOR_fix_truncxfhi2", value: 1929, isUnsigned: true)
!1591 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfsi2", value: 1930, isUnsigned: true)
!1592 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfsi2", value: 1931, isUnsigned: true)
!1593 = !DIEnumerator(name: "CODE_FOR_fixuns_truncsfhi2", value: 1934, isUnsigned: true)
!1594 = !DIEnumerator(name: "CODE_FOR_fixuns_truncdfhi2", value: 1935, isUnsigned: true)
!1595 = !DIEnumerator(name: "CODE_FOR_floathisf2", value: 1962, isUnsigned: true)
!1596 = !DIEnumerator(name: "CODE_FOR_floathidf2", value: 1963, isUnsigned: true)
!1597 = !DIEnumerator(name: "CODE_FOR_floathixf2", value: 1964, isUnsigned: true)
!1598 = !DIEnumerator(name: "CODE_FOR_floatsisf2", value: 1974, isUnsigned: true)
!1599 = !DIEnumerator(name: "CODE_FOR_floatdisf2", value: 1975, isUnsigned: true)
!1600 = !DIEnumerator(name: "CODE_FOR_floatsidf2", value: 1976, isUnsigned: true)
!1601 = !DIEnumerator(name: "CODE_FOR_floatdidf2", value: 1977, isUnsigned: true)
!1602 = !DIEnumerator(name: "CODE_FOR_floatsixf2", value: 1978, isUnsigned: true)
!1603 = !DIEnumerator(name: "CODE_FOR_floatdixf2", value: 1979, isUnsigned: true)
!1604 = !DIEnumerator(name: "CODE_FOR_floatunssisf2", value: 2028, isUnsigned: true)
!1605 = !DIEnumerator(name: "CODE_FOR_floatunssidf2", value: 2029, isUnsigned: true)
!1606 = !DIEnumerator(name: "CODE_FOR_floatunssixf2", value: 2030, isUnsigned: true)
!1607 = !DIEnumerator(name: "CODE_FOR_addqi3", value: 2031, isUnsigned: true)
!1608 = !DIEnumerator(name: "CODE_FOR_addhi3", value: 2032, isUnsigned: true)
!1609 = !DIEnumerator(name: "CODE_FOR_addsi3", value: 2033, isUnsigned: true)
!1610 = !DIEnumerator(name: "CODE_FOR_adddi3", value: 2034, isUnsigned: true)
!1611 = !DIEnumerator(name: "CODE_FOR_subqi3", value: 2040, isUnsigned: true)
!1612 = !DIEnumerator(name: "CODE_FOR_subhi3", value: 2041, isUnsigned: true)
!1613 = !DIEnumerator(name: "CODE_FOR_subsi3", value: 2042, isUnsigned: true)
!1614 = !DIEnumerator(name: "CODE_FOR_subdi3", value: 2043, isUnsigned: true)
!1615 = !DIEnumerator(name: "CODE_FOR_addqi3_carry", value: 2045, isUnsigned: true)
!1616 = !DIEnumerator(name: "CODE_FOR_subqi3_carry", value: 2046, isUnsigned: true)
!1617 = !DIEnumerator(name: "CODE_FOR_addhi3_carry", value: 2047, isUnsigned: true)
!1618 = !DIEnumerator(name: "CODE_FOR_subhi3_carry", value: 2048, isUnsigned: true)
!1619 = !DIEnumerator(name: "CODE_FOR_addsi3_carry", value: 2049, isUnsigned: true)
!1620 = !DIEnumerator(name: "CODE_FOR_subsi3_carry", value: 2050, isUnsigned: true)
!1621 = !DIEnumerator(name: "CODE_FOR_adddi3_carry", value: 2051, isUnsigned: true)
!1622 = !DIEnumerator(name: "CODE_FOR_subdi3_carry", value: 2052, isUnsigned: true)
!1623 = !DIEnumerator(name: "CODE_FOR_addxf3", value: 2053, isUnsigned: true)
!1624 = !DIEnumerator(name: "CODE_FOR_subxf3", value: 2054, isUnsigned: true)
!1625 = !DIEnumerator(name: "CODE_FOR_addsf3", value: 2055, isUnsigned: true)
!1626 = !DIEnumerator(name: "CODE_FOR_subsf3", value: 2056, isUnsigned: true)
!1627 = !DIEnumerator(name: "CODE_FOR_adddf3", value: 2057, isUnsigned: true)
!1628 = !DIEnumerator(name: "CODE_FOR_subdf3", value: 2058, isUnsigned: true)
!1629 = !DIEnumerator(name: "CODE_FOR_mulhi3", value: 2059, isUnsigned: true)
!1630 = !DIEnumerator(name: "CODE_FOR_mulsi3", value: 2060, isUnsigned: true)
!1631 = !DIEnumerator(name: "CODE_FOR_mulqi3", value: 2061, isUnsigned: true)
!1632 = !DIEnumerator(name: "CODE_FOR_mulsidi3", value: 2062, isUnsigned: true)
!1633 = !DIEnumerator(name: "CODE_FOR_umulsidi3", value: 2063, isUnsigned: true)
!1634 = !DIEnumerator(name: "CODE_FOR_mulqihi3", value: 2064, isUnsigned: true)
!1635 = !DIEnumerator(name: "CODE_FOR_umulqihi3", value: 2065, isUnsigned: true)
!1636 = !DIEnumerator(name: "CODE_FOR_smulsi3_highpart", value: 2066, isUnsigned: true)
!1637 = !DIEnumerator(name: "CODE_FOR_umulsi3_highpart", value: 2067, isUnsigned: true)
!1638 = !DIEnumerator(name: "CODE_FOR_mulxf3", value: 2068, isUnsigned: true)
!1639 = !DIEnumerator(name: "CODE_FOR_mulsf3", value: 2069, isUnsigned: true)
!1640 = !DIEnumerator(name: "CODE_FOR_muldf3", value: 2070, isUnsigned: true)
!1641 = !DIEnumerator(name: "CODE_FOR_divxf3", value: 2071, isUnsigned: true)
!1642 = !DIEnumerator(name: "CODE_FOR_divdf3", value: 2072, isUnsigned: true)
!1643 = !DIEnumerator(name: "CODE_FOR_divsf3", value: 2073, isUnsigned: true)
!1644 = !DIEnumerator(name: "CODE_FOR_divmodhi4", value: 2074, isUnsigned: true)
!1645 = !DIEnumerator(name: "CODE_FOR_divmodsi4", value: 2075, isUnsigned: true)
!1646 = !DIEnumerator(name: "CODE_FOR_udivmodhi4", value: 2078, isUnsigned: true)
!1647 = !DIEnumerator(name: "CODE_FOR_udivmodsi4", value: 2079, isUnsigned: true)
!1648 = !DIEnumerator(name: "CODE_FOR_testsi_ccno_1", value: 2082, isUnsigned: true)
!1649 = !DIEnumerator(name: "CODE_FOR_testqi_ccz_1", value: 2083, isUnsigned: true)
!1650 = !DIEnumerator(name: "CODE_FOR_testqi_ext_ccno_0", value: 2084, isUnsigned: true)
!1651 = !DIEnumerator(name: "CODE_FOR_andqi3", value: 2088, isUnsigned: true)
!1652 = !DIEnumerator(name: "CODE_FOR_andhi3", value: 2089, isUnsigned: true)
!1653 = !DIEnumerator(name: "CODE_FOR_andsi3", value: 2090, isUnsigned: true)
!1654 = !DIEnumerator(name: "CODE_FOR_iorqi3", value: 2096, isUnsigned: true)
!1655 = !DIEnumerator(name: "CODE_FOR_xorqi3", value: 2097, isUnsigned: true)
!1656 = !DIEnumerator(name: "CODE_FOR_iorhi3", value: 2098, isUnsigned: true)
!1657 = !DIEnumerator(name: "CODE_FOR_xorhi3", value: 2099, isUnsigned: true)
!1658 = !DIEnumerator(name: "CODE_FOR_iorsi3", value: 2100, isUnsigned: true)
!1659 = !DIEnumerator(name: "CODE_FOR_xorsi3", value: 2101, isUnsigned: true)
!1660 = !DIEnumerator(name: "CODE_FOR_xorqi_cc_ext_1", value: 2106, isUnsigned: true)
!1661 = !DIEnumerator(name: "CODE_FOR_negqi2", value: 2107, isUnsigned: true)
!1662 = !DIEnumerator(name: "CODE_FOR_neghi2", value: 2108, isUnsigned: true)
!1663 = !DIEnumerator(name: "CODE_FOR_negsi2", value: 2109, isUnsigned: true)
!1664 = !DIEnumerator(name: "CODE_FOR_negdi2", value: 2110, isUnsigned: true)
!1665 = !DIEnumerator(name: "CODE_FOR_abssf2", value: 2112, isUnsigned: true)
!1666 = !DIEnumerator(name: "CODE_FOR_negsf2", value: 2113, isUnsigned: true)
!1667 = !DIEnumerator(name: "CODE_FOR_absdf2", value: 2114, isUnsigned: true)
!1668 = !DIEnumerator(name: "CODE_FOR_negdf2", value: 2115, isUnsigned: true)
!1669 = !DIEnumerator(name: "CODE_FOR_absxf2", value: 2116, isUnsigned: true)
!1670 = !DIEnumerator(name: "CODE_FOR_negxf2", value: 2117, isUnsigned: true)
!1671 = !DIEnumerator(name: "CODE_FOR_abstf2", value: 2118, isUnsigned: true)
!1672 = !DIEnumerator(name: "CODE_FOR_negtf2", value: 2119, isUnsigned: true)
!1673 = !DIEnumerator(name: "CODE_FOR_copysignsf3", value: 2125, isUnsigned: true)
!1674 = !DIEnumerator(name: "CODE_FOR_copysigndf3", value: 2126, isUnsigned: true)
!1675 = !DIEnumerator(name: "CODE_FOR_copysigntf3", value: 2127, isUnsigned: true)
!1676 = !DIEnumerator(name: "CODE_FOR_one_cmplqi2", value: 2134, isUnsigned: true)
!1677 = !DIEnumerator(name: "CODE_FOR_one_cmplhi2", value: 2135, isUnsigned: true)
!1678 = !DIEnumerator(name: "CODE_FOR_one_cmplsi2", value: 2136, isUnsigned: true)
!1679 = !DIEnumerator(name: "CODE_FOR_ashldi3", value: 2142, isUnsigned: true)
!1680 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_1", value: 2145, isUnsigned: true)
!1681 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_2", value: 2146, isUnsigned: true)
!1682 = !DIEnumerator(name: "CODE_FOR_ashlsi3", value: 2147, isUnsigned: true)
!1683 = !DIEnumerator(name: "CODE_FOR_ashlhi3", value: 2150, isUnsigned: true)
!1684 = !DIEnumerator(name: "CODE_FOR_ashlqi3", value: 2151, isUnsigned: true)
!1685 = !DIEnumerator(name: "CODE_FOR_ashrdi3", value: 2152, isUnsigned: true)
!1686 = !DIEnumerator(name: "CODE_FOR_x86_64_shift_adj_3", value: 2153, isUnsigned: true)
!1687 = !DIEnumerator(name: "CODE_FOR_x86_shift_adj_3", value: 2156, isUnsigned: true)
!1688 = !DIEnumerator(name: "CODE_FOR_ashrsi3_31", value: 2157, isUnsigned: true)
!1689 = !DIEnumerator(name: "CODE_FOR_ashrsi3", value: 2158, isUnsigned: true)
!1690 = !DIEnumerator(name: "CODE_FOR_ashrhi3", value: 2159, isUnsigned: true)
!1691 = !DIEnumerator(name: "CODE_FOR_ashrqi3", value: 2160, isUnsigned: true)
!1692 = !DIEnumerator(name: "CODE_FOR_lshrdi3", value: 2161, isUnsigned: true)
!1693 = !DIEnumerator(name: "CODE_FOR_lshrsi3", value: 2164, isUnsigned: true)
!1694 = !DIEnumerator(name: "CODE_FOR_lshrhi3", value: 2165, isUnsigned: true)
!1695 = !DIEnumerator(name: "CODE_FOR_lshrqi3", value: 2166, isUnsigned: true)
!1696 = !DIEnumerator(name: "CODE_FOR_rotldi3", value: 2167, isUnsigned: true)
!1697 = !DIEnumerator(name: "CODE_FOR_rotlsi3", value: 2169, isUnsigned: true)
!1698 = !DIEnumerator(name: "CODE_FOR_rotlhi3", value: 2170, isUnsigned: true)
!1699 = !DIEnumerator(name: "CODE_FOR_rotlqi3", value: 2172, isUnsigned: true)
!1700 = !DIEnumerator(name: "CODE_FOR_rotrdi3", value: 2173, isUnsigned: true)
!1701 = !DIEnumerator(name: "CODE_FOR_rotrsi3", value: 2175, isUnsigned: true)
!1702 = !DIEnumerator(name: "CODE_FOR_rotrhi3", value: 2176, isUnsigned: true)
!1703 = !DIEnumerator(name: "CODE_FOR_rotrqi3", value: 2178, isUnsigned: true)
!1704 = !DIEnumerator(name: "CODE_FOR_extv", value: 2179, isUnsigned: true)
!1705 = !DIEnumerator(name: "CODE_FOR_extzv", value: 2180, isUnsigned: true)
!1706 = !DIEnumerator(name: "CODE_FOR_insv", value: 2181, isUnsigned: true)
!1707 = !DIEnumerator(name: "CODE_FOR_indirect_jump", value: 2200, isUnsigned: true)
!1708 = !DIEnumerator(name: "CODE_FOR_tablejump", value: 2201, isUnsigned: true)
!1709 = !DIEnumerator(name: "CODE_FOR_call_pop", value: 2204, isUnsigned: true)
!1710 = !DIEnumerator(name: "CODE_FOR_call", value: 2205, isUnsigned: true)
!1711 = !DIEnumerator(name: "CODE_FOR_sibcall", value: 2206, isUnsigned: true)
!1712 = !DIEnumerator(name: "CODE_FOR_call_value_pop", value: 2207, isUnsigned: true)
!1713 = !DIEnumerator(name: "CODE_FOR_call_value", value: 2208, isUnsigned: true)
!1714 = !DIEnumerator(name: "CODE_FOR_sibcall_value", value: 2209, isUnsigned: true)
!1715 = !DIEnumerator(name: "CODE_FOR_untyped_call", value: 2210, isUnsigned: true)
!1716 = !DIEnumerator(name: "CODE_FOR_memory_blockage", value: 2211, isUnsigned: true)
!1717 = !DIEnumerator(name: "CODE_FOR_return", value: 2212, isUnsigned: true)
!1718 = !DIEnumerator(name: "CODE_FOR_prologue", value: 2213, isUnsigned: true)
!1719 = !DIEnumerator(name: "CODE_FOR_epilogue", value: 2214, isUnsigned: true)
!1720 = !DIEnumerator(name: "CODE_FOR_sibcall_epilogue", value: 2215, isUnsigned: true)
!1721 = !DIEnumerator(name: "CODE_FOR_eh_return", value: 2216, isUnsigned: true)
!1722 = !DIEnumerator(name: "CODE_FOR_ffssi2", value: 2218, isUnsigned: true)
!1723 = !DIEnumerator(name: "CODE_FOR_ffs_cmove", value: 2219, isUnsigned: true)
!1724 = !DIEnumerator(name: "CODE_FOR_clzsi2", value: 2221, isUnsigned: true)
!1725 = !DIEnumerator(name: "CODE_FOR_bswapsi2", value: 2222, isUnsigned: true)
!1726 = !DIEnumerator(name: "CODE_FOR_clzhi2", value: 2223, isUnsigned: true)
!1727 = !DIEnumerator(name: "CODE_FOR_paritydi2", value: 2224, isUnsigned: true)
!1728 = !DIEnumerator(name: "CODE_FOR_paritysi2", value: 2226, isUnsigned: true)
!1729 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_32", value: 2228, isUnsigned: true)
!1730 = !DIEnumerator(name: "CODE_FOR_tls_global_dynamic_64", value: 2229, isUnsigned: true)
!1731 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_32", value: 2230, isUnsigned: true)
!1732 = !DIEnumerator(name: "CODE_FOR_tls_local_dynamic_base_64", value: 2231, isUnsigned: true)
!1733 = !DIEnumerator(name: "CODE_FOR_tls_dynamic_gnu2_32", value: 2233, isUnsigned: true)
!1734 = !DIEnumerator(name: "CODE_FOR_rsqrtsf2", value: 2240, isUnsigned: true)
!1735 = !DIEnumerator(name: "CODE_FOR_sqrtsf2", value: 2241, isUnsigned: true)
!1736 = !DIEnumerator(name: "CODE_FOR_sqrtdf2", value: 2242, isUnsigned: true)
!1737 = !DIEnumerator(name: "CODE_FOR_fmodxf3", value: 2243, isUnsigned: true)
!1738 = !DIEnumerator(name: "CODE_FOR_fmodsf3", value: 2244, isUnsigned: true)
!1739 = !DIEnumerator(name: "CODE_FOR_fmoddf3", value: 2245, isUnsigned: true)
!1740 = !DIEnumerator(name: "CODE_FOR_remainderxf3", value: 2246, isUnsigned: true)
!1741 = !DIEnumerator(name: "CODE_FOR_remaindersf3", value: 2247, isUnsigned: true)
!1742 = !DIEnumerator(name: "CODE_FOR_remainderdf3", value: 2248, isUnsigned: true)
!1743 = !DIEnumerator(name: "CODE_FOR_sincossf3", value: 2255, isUnsigned: true)
!1744 = !DIEnumerator(name: "CODE_FOR_sincosdf3", value: 2256, isUnsigned: true)
!1745 = !DIEnumerator(name: "CODE_FOR_tanxf2", value: 2257, isUnsigned: true)
!1746 = !DIEnumerator(name: "CODE_FOR_tansf2", value: 2258, isUnsigned: true)
!1747 = !DIEnumerator(name: "CODE_FOR_tandf2", value: 2259, isUnsigned: true)
!1748 = !DIEnumerator(name: "CODE_FOR_atan2xf3", value: 2260, isUnsigned: true)
!1749 = !DIEnumerator(name: "CODE_FOR_atan2sf3", value: 2261, isUnsigned: true)
!1750 = !DIEnumerator(name: "CODE_FOR_atan2df3", value: 2262, isUnsigned: true)
!1751 = !DIEnumerator(name: "CODE_FOR_atanxf2", value: 2263, isUnsigned: true)
!1752 = !DIEnumerator(name: "CODE_FOR_atansf2", value: 2264, isUnsigned: true)
!1753 = !DIEnumerator(name: "CODE_FOR_atandf2", value: 2265, isUnsigned: true)
!1754 = !DIEnumerator(name: "CODE_FOR_asinxf2", value: 2266, isUnsigned: true)
!1755 = !DIEnumerator(name: "CODE_FOR_asinsf2", value: 2267, isUnsigned: true)
!1756 = !DIEnumerator(name: "CODE_FOR_asindf2", value: 2268, isUnsigned: true)
!1757 = !DIEnumerator(name: "CODE_FOR_acosxf2", value: 2269, isUnsigned: true)
!1758 = !DIEnumerator(name: "CODE_FOR_acossf2", value: 2270, isUnsigned: true)
!1759 = !DIEnumerator(name: "CODE_FOR_acosdf2", value: 2271, isUnsigned: true)
!1760 = !DIEnumerator(name: "CODE_FOR_logxf2", value: 2272, isUnsigned: true)
!1761 = !DIEnumerator(name: "CODE_FOR_logsf2", value: 2273, isUnsigned: true)
!1762 = !DIEnumerator(name: "CODE_FOR_logdf2", value: 2274, isUnsigned: true)
!1763 = !DIEnumerator(name: "CODE_FOR_log10xf2", value: 2275, isUnsigned: true)
!1764 = !DIEnumerator(name: "CODE_FOR_log10sf2", value: 2276, isUnsigned: true)
!1765 = !DIEnumerator(name: "CODE_FOR_log10df2", value: 2277, isUnsigned: true)
!1766 = !DIEnumerator(name: "CODE_FOR_log2xf2", value: 2278, isUnsigned: true)
!1767 = !DIEnumerator(name: "CODE_FOR_log2sf2", value: 2279, isUnsigned: true)
!1768 = !DIEnumerator(name: "CODE_FOR_log2df2", value: 2280, isUnsigned: true)
!1769 = !DIEnumerator(name: "CODE_FOR_log1pxf2", value: 2281, isUnsigned: true)
!1770 = !DIEnumerator(name: "CODE_FOR_log1psf2", value: 2282, isUnsigned: true)
!1771 = !DIEnumerator(name: "CODE_FOR_log1pdf2", value: 2283, isUnsigned: true)
!1772 = !DIEnumerator(name: "CODE_FOR_logbxf2", value: 2284, isUnsigned: true)
!1773 = !DIEnumerator(name: "CODE_FOR_logbsf2", value: 2285, isUnsigned: true)
!1774 = !DIEnumerator(name: "CODE_FOR_logbdf2", value: 2286, isUnsigned: true)
!1775 = !DIEnumerator(name: "CODE_FOR_ilogbxf2", value: 2287, isUnsigned: true)
!1776 = !DIEnumerator(name: "CODE_FOR_ilogbsf2", value: 2288, isUnsigned: true)
!1777 = !DIEnumerator(name: "CODE_FOR_ilogbdf2", value: 2289, isUnsigned: true)
!1778 = !DIEnumerator(name: "CODE_FOR_expNcorexf3", value: 2290, isUnsigned: true)
!1779 = !DIEnumerator(name: "CODE_FOR_expxf2", value: 2291, isUnsigned: true)
!1780 = !DIEnumerator(name: "CODE_FOR_expsf2", value: 2292, isUnsigned: true)
!1781 = !DIEnumerator(name: "CODE_FOR_expdf2", value: 2293, isUnsigned: true)
!1782 = !DIEnumerator(name: "CODE_FOR_exp10xf2", value: 2294, isUnsigned: true)
!1783 = !DIEnumerator(name: "CODE_FOR_exp10sf2", value: 2295, isUnsigned: true)
!1784 = !DIEnumerator(name: "CODE_FOR_exp10df2", value: 2296, isUnsigned: true)
!1785 = !DIEnumerator(name: "CODE_FOR_exp2xf2", value: 2297, isUnsigned: true)
!1786 = !DIEnumerator(name: "CODE_FOR_exp2sf2", value: 2298, isUnsigned: true)
!1787 = !DIEnumerator(name: "CODE_FOR_exp2df2", value: 2299, isUnsigned: true)
!1788 = !DIEnumerator(name: "CODE_FOR_expm1xf2", value: 2300, isUnsigned: true)
!1789 = !DIEnumerator(name: "CODE_FOR_expm1sf2", value: 2301, isUnsigned: true)
!1790 = !DIEnumerator(name: "CODE_FOR_expm1df2", value: 2302, isUnsigned: true)
!1791 = !DIEnumerator(name: "CODE_FOR_ldexpxf3", value: 2303, isUnsigned: true)
!1792 = !DIEnumerator(name: "CODE_FOR_ldexpsf3", value: 2304, isUnsigned: true)
!1793 = !DIEnumerator(name: "CODE_FOR_ldexpdf3", value: 2305, isUnsigned: true)
!1794 = !DIEnumerator(name: "CODE_FOR_scalbxf3", value: 2306, isUnsigned: true)
!1795 = !DIEnumerator(name: "CODE_FOR_scalbsf3", value: 2307, isUnsigned: true)
!1796 = !DIEnumerator(name: "CODE_FOR_scalbdf3", value: 2308, isUnsigned: true)
!1797 = !DIEnumerator(name: "CODE_FOR_significandxf2", value: 2309, isUnsigned: true)
!1798 = !DIEnumerator(name: "CODE_FOR_significandsf2", value: 2310, isUnsigned: true)
!1799 = !DIEnumerator(name: "CODE_FOR_significanddf2", value: 2311, isUnsigned: true)
!1800 = !DIEnumerator(name: "CODE_FOR_rintsf2", value: 2312, isUnsigned: true)
!1801 = !DIEnumerator(name: "CODE_FOR_rintdf2", value: 2313, isUnsigned: true)
!1802 = !DIEnumerator(name: "CODE_FOR_roundsf2", value: 2314, isUnsigned: true)
!1803 = !DIEnumerator(name: "CODE_FOR_rounddf2", value: 2315, isUnsigned: true)
!1804 = !DIEnumerator(name: "CODE_FOR_lrintxfhi2", value: 2325, isUnsigned: true)
!1805 = !DIEnumerator(name: "CODE_FOR_lrintxfsi2", value: 2326, isUnsigned: true)
!1806 = !DIEnumerator(name: "CODE_FOR_lrintxfdi2", value: 2327, isUnsigned: true)
!1807 = !DIEnumerator(name: "CODE_FOR_lrintsfsi2", value: 2328, isUnsigned: true)
!1808 = !DIEnumerator(name: "CODE_FOR_lrintdfsi2", value: 2329, isUnsigned: true)
!1809 = !DIEnumerator(name: "CODE_FOR_lroundsfsi2", value: 2330, isUnsigned: true)
!1810 = !DIEnumerator(name: "CODE_FOR_lrounddfsi2", value: 2331, isUnsigned: true)
!1811 = !DIEnumerator(name: "CODE_FOR_floorxf2", value: 2333, isUnsigned: true)
!1812 = !DIEnumerator(name: "CODE_FOR_floorsf2", value: 2334, isUnsigned: true)
!1813 = !DIEnumerator(name: "CODE_FOR_floordf2", value: 2335, isUnsigned: true)
!1814 = !DIEnumerator(name: "CODE_FOR_lfloorxfhi2", value: 2345, isUnsigned: true)
!1815 = !DIEnumerator(name: "CODE_FOR_lfloorxfsi2", value: 2346, isUnsigned: true)
!1816 = !DIEnumerator(name: "CODE_FOR_lfloorxfdi2", value: 2347, isUnsigned: true)
!1817 = !DIEnumerator(name: "CODE_FOR_lfloorsfsi2", value: 2348, isUnsigned: true)
!1818 = !DIEnumerator(name: "CODE_FOR_lfloordfsi2", value: 2349, isUnsigned: true)
!1819 = !DIEnumerator(name: "CODE_FOR_ceilxf2", value: 2351, isUnsigned: true)
!1820 = !DIEnumerator(name: "CODE_FOR_ceilsf2", value: 2352, isUnsigned: true)
!1821 = !DIEnumerator(name: "CODE_FOR_ceildf2", value: 2353, isUnsigned: true)
!1822 = !DIEnumerator(name: "CODE_FOR_lceilxfhi2", value: 2363, isUnsigned: true)
!1823 = !DIEnumerator(name: "CODE_FOR_lceilxfsi2", value: 2364, isUnsigned: true)
!1824 = !DIEnumerator(name: "CODE_FOR_lceilxfdi2", value: 2365, isUnsigned: true)
!1825 = !DIEnumerator(name: "CODE_FOR_lceilsfsi2", value: 2366, isUnsigned: true)
!1826 = !DIEnumerator(name: "CODE_FOR_lceildfsi2", value: 2367, isUnsigned: true)
!1827 = !DIEnumerator(name: "CODE_FOR_btruncxf2", value: 2369, isUnsigned: true)
!1828 = !DIEnumerator(name: "CODE_FOR_btruncsf2", value: 2370, isUnsigned: true)
!1829 = !DIEnumerator(name: "CODE_FOR_btruncdf2", value: 2371, isUnsigned: true)
!1830 = !DIEnumerator(name: "CODE_FOR_nearbyintxf2", value: 2373, isUnsigned: true)
!1831 = !DIEnumerator(name: "CODE_FOR_nearbyintsf2", value: 2374, isUnsigned: true)
!1832 = !DIEnumerator(name: "CODE_FOR_nearbyintdf2", value: 2375, isUnsigned: true)
!1833 = !DIEnumerator(name: "CODE_FOR_isinfxf2", value: 2378, isUnsigned: true)
!1834 = !DIEnumerator(name: "CODE_FOR_isinfsf2", value: 2379, isUnsigned: true)
!1835 = !DIEnumerator(name: "CODE_FOR_isinfdf2", value: 2380, isUnsigned: true)
!1836 = !DIEnumerator(name: "CODE_FOR_signbitsf2", value: 2381, isUnsigned: true)
!1837 = !DIEnumerator(name: "CODE_FOR_signbitdf2", value: 2382, isUnsigned: true)
!1838 = !DIEnumerator(name: "CODE_FOR_signbitxf2", value: 2383, isUnsigned: true)
!1839 = !DIEnumerator(name: "CODE_FOR_movmemsi", value: 2384, isUnsigned: true)
!1840 = !DIEnumerator(name: "CODE_FOR_strmov", value: 2385, isUnsigned: true)
!1841 = !DIEnumerator(name: "CODE_FOR_strmov_singleop", value: 2386, isUnsigned: true)
!1842 = !DIEnumerator(name: "CODE_FOR_rep_mov", value: 2387, isUnsigned: true)
!1843 = !DIEnumerator(name: "CODE_FOR_setmemsi", value: 2388, isUnsigned: true)
!1844 = !DIEnumerator(name: "CODE_FOR_strset", value: 2389, isUnsigned: true)
!1845 = !DIEnumerator(name: "CODE_FOR_strset_singleop", value: 2390, isUnsigned: true)
!1846 = !DIEnumerator(name: "CODE_FOR_rep_stos", value: 2391, isUnsigned: true)
!1847 = !DIEnumerator(name: "CODE_FOR_cmpstrnsi", value: 2392, isUnsigned: true)
!1848 = !DIEnumerator(name: "CODE_FOR_cmpintqi", value: 2393, isUnsigned: true)
!1849 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_nz_1", value: 2394, isUnsigned: true)
!1850 = !DIEnumerator(name: "CODE_FOR_cmpstrnqi_1", value: 2395, isUnsigned: true)
!1851 = !DIEnumerator(name: "CODE_FOR_strlensi", value: 2396, isUnsigned: true)
!1852 = !DIEnumerator(name: "CODE_FOR_strlendi", value: 2397, isUnsigned: true)
!1853 = !DIEnumerator(name: "CODE_FOR_strlenqi_1", value: 2398, isUnsigned: true)
!1854 = !DIEnumerator(name: "CODE_FOR_movqicc", value: 2401, isUnsigned: true)
!1855 = !DIEnumerator(name: "CODE_FOR_movhicc", value: 2402, isUnsigned: true)
!1856 = !DIEnumerator(name: "CODE_FOR_movsicc", value: 2403, isUnsigned: true)
!1857 = !DIEnumerator(name: "CODE_FOR_x86_movsicc_0_m1", value: 2404, isUnsigned: true)
!1858 = !DIEnumerator(name: "CODE_FOR_movsfcc", value: 2406, isUnsigned: true)
!1859 = !DIEnumerator(name: "CODE_FOR_movdfcc", value: 2407, isUnsigned: true)
!1860 = !DIEnumerator(name: "CODE_FOR_movxfcc", value: 2408, isUnsigned: true)
!1861 = !DIEnumerator(name: "CODE_FOR_addqicc", value: 2411, isUnsigned: true)
!1862 = !DIEnumerator(name: "CODE_FOR_addhicc", value: 2412, isUnsigned: true)
!1863 = !DIEnumerator(name: "CODE_FOR_addsicc", value: 2413, isUnsigned: true)
!1864 = !DIEnumerator(name: "CODE_FOR_allocate_stack", value: 2414, isUnsigned: true)
!1865 = !DIEnumerator(name: "CODE_FOR_probe_stack", value: 2415, isUnsigned: true)
!1866 = !DIEnumerator(name: "CODE_FOR_builtin_setjmp_receiver", value: 2416, isUnsigned: true)
!1867 = !DIEnumerator(name: "CODE_FOR_prefetch", value: 2486, isUnsigned: true)
!1868 = !DIEnumerator(name: "CODE_FOR_stack_protect_set", value: 2487, isUnsigned: true)
!1869 = !DIEnumerator(name: "CODE_FOR_stack_protect_test", value: 2488, isUnsigned: true)
!1870 = !DIEnumerator(name: "CODE_FOR_rdpmc", value: 2489, isUnsigned: true)
!1871 = !DIEnumerator(name: "CODE_FOR_rdtsc", value: 2490, isUnsigned: true)
!1872 = !DIEnumerator(name: "CODE_FOR_rdtscp", value: 2491, isUnsigned: true)
!1873 = !DIEnumerator(name: "CODE_FOR_lwp_llwpcb", value: 2492, isUnsigned: true)
!1874 = !DIEnumerator(name: "CODE_FOR_lwp_slwpcb", value: 2493, isUnsigned: true)
!1875 = !DIEnumerator(name: "CODE_FOR_lwp_lwpvalsi3", value: 2494, isUnsigned: true)
!1876 = !DIEnumerator(name: "CODE_FOR_lwp_lwpinssi3", value: 2495, isUnsigned: true)
!1877 = !DIEnumerator(name: "CODE_FOR_movv8qi", value: 2496, isUnsigned: true)
!1878 = !DIEnumerator(name: "CODE_FOR_movv4hi", value: 2497, isUnsigned: true)
!1879 = !DIEnumerator(name: "CODE_FOR_movv2si", value: 2498, isUnsigned: true)
!1880 = !DIEnumerator(name: "CODE_FOR_movv1di", value: 2499, isUnsigned: true)
!1881 = !DIEnumerator(name: "CODE_FOR_movv2sf", value: 2500, isUnsigned: true)
!1882 = !DIEnumerator(name: "CODE_FOR_pushv8qi1", value: 2506, isUnsigned: true)
!1883 = !DIEnumerator(name: "CODE_FOR_pushv4hi1", value: 2507, isUnsigned: true)
!1884 = !DIEnumerator(name: "CODE_FOR_pushv2si1", value: 2508, isUnsigned: true)
!1885 = !DIEnumerator(name: "CODE_FOR_pushv1di1", value: 2509, isUnsigned: true)
!1886 = !DIEnumerator(name: "CODE_FOR_pushv2sf1", value: 2510, isUnsigned: true)
!1887 = !DIEnumerator(name: "CODE_FOR_movmisalignv8qi", value: 2511, isUnsigned: true)
!1888 = !DIEnumerator(name: "CODE_FOR_movmisalignv4hi", value: 2512, isUnsigned: true)
!1889 = !DIEnumerator(name: "CODE_FOR_movmisalignv2si", value: 2513, isUnsigned: true)
!1890 = !DIEnumerator(name: "CODE_FOR_movmisalignv1di", value: 2514, isUnsigned: true)
!1891 = !DIEnumerator(name: "CODE_FOR_movmisalignv2sf", value: 2515, isUnsigned: true)
!1892 = !DIEnumerator(name: "CODE_FOR_mmx_addv2sf3", value: 2516, isUnsigned: true)
!1893 = !DIEnumerator(name: "CODE_FOR_mmx_subv2sf3", value: 2517, isUnsigned: true)
!1894 = !DIEnumerator(name: "CODE_FOR_mmx_subrv2sf3", value: 2518, isUnsigned: true)
!1895 = !DIEnumerator(name: "CODE_FOR_mmx_mulv2sf3", value: 2519, isUnsigned: true)
!1896 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv2sf3", value: 2520, isUnsigned: true)
!1897 = !DIEnumerator(name: "CODE_FOR_mmx_sminv2sf3", value: 2521, isUnsigned: true)
!1898 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2sf3", value: 2522, isUnsigned: true)
!1899 = !DIEnumerator(name: "CODE_FOR_vec_setv2sf", value: 2523, isUnsigned: true)
!1900 = !DIEnumerator(name: "CODE_FOR_vec_extractv2sf", value: 2526, isUnsigned: true)
!1901 = !DIEnumerator(name: "CODE_FOR_vec_initv2sf", value: 2527, isUnsigned: true)
!1902 = !DIEnumerator(name: "CODE_FOR_mmx_addv8qi3", value: 2528, isUnsigned: true)
!1903 = !DIEnumerator(name: "CODE_FOR_mmx_subv8qi3", value: 2529, isUnsigned: true)
!1904 = !DIEnumerator(name: "CODE_FOR_mmx_addv4hi3", value: 2530, isUnsigned: true)
!1905 = !DIEnumerator(name: "CODE_FOR_mmx_subv4hi3", value: 2531, isUnsigned: true)
!1906 = !DIEnumerator(name: "CODE_FOR_mmx_addv2si3", value: 2532, isUnsigned: true)
!1907 = !DIEnumerator(name: "CODE_FOR_mmx_subv2si3", value: 2533, isUnsigned: true)
!1908 = !DIEnumerator(name: "CODE_FOR_mmx_addv1di3", value: 2534, isUnsigned: true)
!1909 = !DIEnumerator(name: "CODE_FOR_mmx_subv1di3", value: 2535, isUnsigned: true)
!1910 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv8qi3", value: 2536, isUnsigned: true)
!1911 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv8qi3", value: 2537, isUnsigned: true)
!1912 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv8qi3", value: 2538, isUnsigned: true)
!1913 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv8qi3", value: 2539, isUnsigned: true)
!1914 = !DIEnumerator(name: "CODE_FOR_mmx_ssaddv4hi3", value: 2540, isUnsigned: true)
!1915 = !DIEnumerator(name: "CODE_FOR_mmx_usaddv4hi3", value: 2541, isUnsigned: true)
!1916 = !DIEnumerator(name: "CODE_FOR_mmx_sssubv4hi3", value: 2542, isUnsigned: true)
!1917 = !DIEnumerator(name: "CODE_FOR_mmx_ussubv4hi3", value: 2543, isUnsigned: true)
!1918 = !DIEnumerator(name: "CODE_FOR_mmx_mulv4hi3", value: 2544, isUnsigned: true)
!1919 = !DIEnumerator(name: "CODE_FOR_mmx_smulv4hi3_highpart", value: 2545, isUnsigned: true)
!1920 = !DIEnumerator(name: "CODE_FOR_mmx_umulv4hi3_highpart", value: 2546, isUnsigned: true)
!1921 = !DIEnumerator(name: "CODE_FOR_mmx_pmaddwd", value: 2547, isUnsigned: true)
!1922 = !DIEnumerator(name: "CODE_FOR_mmx_pmulhrwv4hi3", value: 2548, isUnsigned: true)
!1923 = !DIEnumerator(name: "CODE_FOR_sse2_umulv1siv1di3", value: 2549, isUnsigned: true)
!1924 = !DIEnumerator(name: "CODE_FOR_mmx_smaxv4hi3", value: 2550, isUnsigned: true)
!1925 = !DIEnumerator(name: "CODE_FOR_mmx_sminv4hi3", value: 2551, isUnsigned: true)
!1926 = !DIEnumerator(name: "CODE_FOR_mmx_umaxv8qi3", value: 2552, isUnsigned: true)
!1927 = !DIEnumerator(name: "CODE_FOR_mmx_uminv8qi3", value: 2553, isUnsigned: true)
!1928 = !DIEnumerator(name: "CODE_FOR_mmx_eqv8qi3", value: 2554, isUnsigned: true)
!1929 = !DIEnumerator(name: "CODE_FOR_mmx_eqv4hi3", value: 2555, isUnsigned: true)
!1930 = !DIEnumerator(name: "CODE_FOR_mmx_eqv2si3", value: 2556, isUnsigned: true)
!1931 = !DIEnumerator(name: "CODE_FOR_mmx_andv8qi3", value: 2557, isUnsigned: true)
!1932 = !DIEnumerator(name: "CODE_FOR_mmx_iorv8qi3", value: 2558, isUnsigned: true)
!1933 = !DIEnumerator(name: "CODE_FOR_mmx_xorv8qi3", value: 2559, isUnsigned: true)
!1934 = !DIEnumerator(name: "CODE_FOR_mmx_andv4hi3", value: 2560, isUnsigned: true)
!1935 = !DIEnumerator(name: "CODE_FOR_mmx_iorv4hi3", value: 2561, isUnsigned: true)
!1936 = !DIEnumerator(name: "CODE_FOR_mmx_xorv4hi3", value: 2562, isUnsigned: true)
!1937 = !DIEnumerator(name: "CODE_FOR_mmx_andv2si3", value: 2563, isUnsigned: true)
!1938 = !DIEnumerator(name: "CODE_FOR_mmx_iorv2si3", value: 2564, isUnsigned: true)
!1939 = !DIEnumerator(name: "CODE_FOR_mmx_xorv2si3", value: 2565, isUnsigned: true)
!1940 = !DIEnumerator(name: "CODE_FOR_mmx_pinsrw", value: 2566, isUnsigned: true)
!1941 = !DIEnumerator(name: "CODE_FOR_mmx_pshufw", value: 2567, isUnsigned: true)
!1942 = !DIEnumerator(name: "CODE_FOR_vec_setv2si", value: 2568, isUnsigned: true)
!1943 = !DIEnumerator(name: "CODE_FOR_vec_extractv2si", value: 2571, isUnsigned: true)
!1944 = !DIEnumerator(name: "CODE_FOR_vec_initv2si", value: 2572, isUnsigned: true)
!1945 = !DIEnumerator(name: "CODE_FOR_vec_setv4hi", value: 2573, isUnsigned: true)
!1946 = !DIEnumerator(name: "CODE_FOR_vec_extractv4hi", value: 2574, isUnsigned: true)
!1947 = !DIEnumerator(name: "CODE_FOR_vec_initv4hi", value: 2575, isUnsigned: true)
!1948 = !DIEnumerator(name: "CODE_FOR_vec_setv8qi", value: 2576, isUnsigned: true)
!1949 = !DIEnumerator(name: "CODE_FOR_vec_extractv8qi", value: 2577, isUnsigned: true)
!1950 = !DIEnumerator(name: "CODE_FOR_vec_initv8qi", value: 2578, isUnsigned: true)
!1951 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv8qi3", value: 2579, isUnsigned: true)
!1952 = !DIEnumerator(name: "CODE_FOR_mmx_uavgv4hi3", value: 2580, isUnsigned: true)
!1953 = !DIEnumerator(name: "CODE_FOR_mmx_maskmovq", value: 2581, isUnsigned: true)
!1954 = !DIEnumerator(name: "CODE_FOR_mmx_emms", value: 2582, isUnsigned: true)
!1955 = !DIEnumerator(name: "CODE_FOR_mmx_femms", value: 2583, isUnsigned: true)
!1956 = !DIEnumerator(name: "CODE_FOR_movv32qi", value: 2584, isUnsigned: true)
!1957 = !DIEnumerator(name: "CODE_FOR_movv16hi", value: 2585, isUnsigned: true)
!1958 = !DIEnumerator(name: "CODE_FOR_movv8si", value: 2586, isUnsigned: true)
!1959 = !DIEnumerator(name: "CODE_FOR_movv4di", value: 2587, isUnsigned: true)
!1960 = !DIEnumerator(name: "CODE_FOR_movv8sf", value: 2588, isUnsigned: true)
!1961 = !DIEnumerator(name: "CODE_FOR_movv4df", value: 2589, isUnsigned: true)
!1962 = !DIEnumerator(name: "CODE_FOR_movv16qi", value: 2590, isUnsigned: true)
!1963 = !DIEnumerator(name: "CODE_FOR_movv8hi", value: 2591, isUnsigned: true)
!1964 = !DIEnumerator(name: "CODE_FOR_movv4si", value: 2592, isUnsigned: true)
!1965 = !DIEnumerator(name: "CODE_FOR_movv2di", value: 2593, isUnsigned: true)
!1966 = !DIEnumerator(name: "CODE_FOR_movv1ti", value: 2594, isUnsigned: true)
!1967 = !DIEnumerator(name: "CODE_FOR_movv4sf", value: 2595, isUnsigned: true)
!1968 = !DIEnumerator(name: "CODE_FOR_movv2df", value: 2596, isUnsigned: true)
!1969 = !DIEnumerator(name: "CODE_FOR_pushv32qi1", value: 2600, isUnsigned: true)
!1970 = !DIEnumerator(name: "CODE_FOR_pushv16hi1", value: 2601, isUnsigned: true)
!1971 = !DIEnumerator(name: "CODE_FOR_pushv8si1", value: 2602, isUnsigned: true)
!1972 = !DIEnumerator(name: "CODE_FOR_pushv4di1", value: 2603, isUnsigned: true)
!1973 = !DIEnumerator(name: "CODE_FOR_pushv8sf1", value: 2604, isUnsigned: true)
!1974 = !DIEnumerator(name: "CODE_FOR_pushv4df1", value: 2605, isUnsigned: true)
!1975 = !DIEnumerator(name: "CODE_FOR_pushv16qi1", value: 2606, isUnsigned: true)
!1976 = !DIEnumerator(name: "CODE_FOR_pushv8hi1", value: 2607, isUnsigned: true)
!1977 = !DIEnumerator(name: "CODE_FOR_pushv4si1", value: 2608, isUnsigned: true)
!1978 = !DIEnumerator(name: "CODE_FOR_pushv2di1", value: 2609, isUnsigned: true)
!1979 = !DIEnumerator(name: "CODE_FOR_pushv1ti1", value: 2610, isUnsigned: true)
!1980 = !DIEnumerator(name: "CODE_FOR_pushv4sf1", value: 2611, isUnsigned: true)
!1981 = !DIEnumerator(name: "CODE_FOR_pushv2df1", value: 2612, isUnsigned: true)
!1982 = !DIEnumerator(name: "CODE_FOR_movmisalignv32qi", value: 2613, isUnsigned: true)
!1983 = !DIEnumerator(name: "CODE_FOR_movmisalignv16hi", value: 2614, isUnsigned: true)
!1984 = !DIEnumerator(name: "CODE_FOR_movmisalignv8si", value: 2615, isUnsigned: true)
!1985 = !DIEnumerator(name: "CODE_FOR_movmisalignv4di", value: 2616, isUnsigned: true)
!1986 = !DIEnumerator(name: "CODE_FOR_movmisalignv8sf", value: 2617, isUnsigned: true)
!1987 = !DIEnumerator(name: "CODE_FOR_movmisalignv4df", value: 2618, isUnsigned: true)
!1988 = !DIEnumerator(name: "CODE_FOR_movmisalignv16qi", value: 2619, isUnsigned: true)
!1989 = !DIEnumerator(name: "CODE_FOR_movmisalignv8hi", value: 2620, isUnsigned: true)
!1990 = !DIEnumerator(name: "CODE_FOR_movmisalignv4si", value: 2621, isUnsigned: true)
!1991 = !DIEnumerator(name: "CODE_FOR_movmisalignv2di", value: 2622, isUnsigned: true)
!1992 = !DIEnumerator(name: "CODE_FOR_movmisalignv1ti", value: 2623, isUnsigned: true)
!1993 = !DIEnumerator(name: "CODE_FOR_movmisalignv4sf", value: 2624, isUnsigned: true)
!1994 = !DIEnumerator(name: "CODE_FOR_movmisalignv2df", value: 2625, isUnsigned: true)
!1995 = !DIEnumerator(name: "CODE_FOR_storentv4sf", value: 2626, isUnsigned: true)
!1996 = !DIEnumerator(name: "CODE_FOR_storentv2df", value: 2627, isUnsigned: true)
!1997 = !DIEnumerator(name: "CODE_FOR_storentsf", value: 2628, isUnsigned: true)
!1998 = !DIEnumerator(name: "CODE_FOR_storentdf", value: 2629, isUnsigned: true)
!1999 = !DIEnumerator(name: "CODE_FOR_storentv2di", value: 2630, isUnsigned: true)
!2000 = !DIEnumerator(name: "CODE_FOR_storentsi", value: 2631, isUnsigned: true)
!2001 = !DIEnumerator(name: "CODE_FOR_absv4sf2", value: 2632, isUnsigned: true)
!2002 = !DIEnumerator(name: "CODE_FOR_negv4sf2", value: 2633, isUnsigned: true)
!2003 = !DIEnumerator(name: "CODE_FOR_absv2df2", value: 2634, isUnsigned: true)
!2004 = !DIEnumerator(name: "CODE_FOR_negv2df2", value: 2635, isUnsigned: true)
!2005 = !DIEnumerator(name: "CODE_FOR_addv8sf3", value: 2636, isUnsigned: true)
!2006 = !DIEnumerator(name: "CODE_FOR_subv8sf3", value: 2637, isUnsigned: true)
!2007 = !DIEnumerator(name: "CODE_FOR_addv4df3", value: 2638, isUnsigned: true)
!2008 = !DIEnumerator(name: "CODE_FOR_subv4df3", value: 2639, isUnsigned: true)
!2009 = !DIEnumerator(name: "CODE_FOR_addv4sf3", value: 2640, isUnsigned: true)
!2010 = !DIEnumerator(name: "CODE_FOR_subv4sf3", value: 2641, isUnsigned: true)
!2011 = !DIEnumerator(name: "CODE_FOR_addv2df3", value: 2642, isUnsigned: true)
!2012 = !DIEnumerator(name: "CODE_FOR_subv2df3", value: 2643, isUnsigned: true)
!2013 = !DIEnumerator(name: "CODE_FOR_mulv8sf3", value: 2644, isUnsigned: true)
!2014 = !DIEnumerator(name: "CODE_FOR_mulv4df3", value: 2645, isUnsigned: true)
!2015 = !DIEnumerator(name: "CODE_FOR_mulv4sf3", value: 2646, isUnsigned: true)
!2016 = !DIEnumerator(name: "CODE_FOR_mulv2df3", value: 2647, isUnsigned: true)
!2017 = !DIEnumerator(name: "CODE_FOR_divv8sf3", value: 2648, isUnsigned: true)
!2018 = !DIEnumerator(name: "CODE_FOR_divv4df3", value: 2649, isUnsigned: true)
!2019 = !DIEnumerator(name: "CODE_FOR_divv4sf3", value: 2650, isUnsigned: true)
!2020 = !DIEnumerator(name: "CODE_FOR_divv2df3", value: 2651, isUnsigned: true)
!2021 = !DIEnumerator(name: "CODE_FOR_sqrtv8sf2", value: 2652, isUnsigned: true)
!2022 = !DIEnumerator(name: "CODE_FOR_sqrtv4sf2", value: 2653, isUnsigned: true)
!2023 = !DIEnumerator(name: "CODE_FOR_rsqrtv8sf2", value: 2654, isUnsigned: true)
!2024 = !DIEnumerator(name: "CODE_FOR_rsqrtv4sf2", value: 2655, isUnsigned: true)
!2025 = !DIEnumerator(name: "CODE_FOR_smaxv8sf3", value: 2656, isUnsigned: true)
!2026 = !DIEnumerator(name: "CODE_FOR_sminv8sf3", value: 2657, isUnsigned: true)
!2027 = !DIEnumerator(name: "CODE_FOR_smaxv4df3", value: 2658, isUnsigned: true)
!2028 = !DIEnumerator(name: "CODE_FOR_sminv4df3", value: 2659, isUnsigned: true)
!2029 = !DIEnumerator(name: "CODE_FOR_smaxv4sf3", value: 2660, isUnsigned: true)
!2030 = !DIEnumerator(name: "CODE_FOR_sminv4sf3", value: 2661, isUnsigned: true)
!2031 = !DIEnumerator(name: "CODE_FOR_smaxv2df3", value: 2662, isUnsigned: true)
!2032 = !DIEnumerator(name: "CODE_FOR_sminv2df3", value: 2663, isUnsigned: true)
!2033 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v4sf", value: 2664, isUnsigned: true)
!2034 = !DIEnumerator(name: "CODE_FOR_reduc_splus_v2df", value: 2665, isUnsigned: true)
!2035 = !DIEnumerator(name: "CODE_FOR_reduc_smax_v4sf", value: 2666, isUnsigned: true)
!2036 = !DIEnumerator(name: "CODE_FOR_reduc_smin_v4sf", value: 2667, isUnsigned: true)
!2037 = !DIEnumerator(name: "CODE_FOR_vcondv4sf", value: 2668, isUnsigned: true)
!2038 = !DIEnumerator(name: "CODE_FOR_vcondv2df", value: 2669, isUnsigned: true)
!2039 = !DIEnumerator(name: "CODE_FOR_andv8sf3", value: 2670, isUnsigned: true)
!2040 = !DIEnumerator(name: "CODE_FOR_iorv8sf3", value: 2671, isUnsigned: true)
!2041 = !DIEnumerator(name: "CODE_FOR_xorv8sf3", value: 2672, isUnsigned: true)
!2042 = !DIEnumerator(name: "CODE_FOR_andv4df3", value: 2673, isUnsigned: true)
!2043 = !DIEnumerator(name: "CODE_FOR_iorv4df3", value: 2674, isUnsigned: true)
!2044 = !DIEnumerator(name: "CODE_FOR_xorv4df3", value: 2675, isUnsigned: true)
!2045 = !DIEnumerator(name: "CODE_FOR_andv4sf3", value: 2676, isUnsigned: true)
!2046 = !DIEnumerator(name: "CODE_FOR_iorv4sf3", value: 2677, isUnsigned: true)
!2047 = !DIEnumerator(name: "CODE_FOR_xorv4sf3", value: 2678, isUnsigned: true)
!2048 = !DIEnumerator(name: "CODE_FOR_andv2df3", value: 2679, isUnsigned: true)
!2049 = !DIEnumerator(name: "CODE_FOR_iorv2df3", value: 2680, isUnsigned: true)
!2050 = !DIEnumerator(name: "CODE_FOR_xorv2df3", value: 2681, isUnsigned: true)
!2051 = !DIEnumerator(name: "CODE_FOR_copysignv4sf3", value: 2682, isUnsigned: true)
!2052 = !DIEnumerator(name: "CODE_FOR_copysignv2df3", value: 2683, isUnsigned: true)
!2053 = !DIEnumerator(name: "CODE_FOR_sse2_cvtudq2ps", value: 2684, isUnsigned: true)
!2054 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2dq", value: 2685, isUnsigned: true)
!2055 = !DIEnumerator(name: "CODE_FOR_sse2_cvttpd2dq", value: 2686, isUnsigned: true)
!2056 = !DIEnumerator(name: "CODE_FOR_sse2_cvtpd2ps", value: 2687, isUnsigned: true)
!2057 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4sf", value: 2688, isUnsigned: true)
!2058 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4sf", value: 2689, isUnsigned: true)
!2059 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v8hi", value: 2690, isUnsigned: true)
!2060 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v8hi", value: 2691, isUnsigned: true)
!2061 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v8hi", value: 2692, isUnsigned: true)
!2062 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v8hi", value: 2693, isUnsigned: true)
!2063 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_hi_v4si", value: 2694, isUnsigned: true)
!2064 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_float_lo_v4si", value: 2695, isUnsigned: true)
!2065 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_hi_v4si", value: 2696, isUnsigned: true)
!2066 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_float_lo_v4si", value: 2697, isUnsigned: true)
!2067 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2df", value: 2698, isUnsigned: true)
!2068 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_trunc_v2df", value: 2699, isUnsigned: true)
!2069 = !DIEnumerator(name: "CODE_FOR_vec_pack_sfix_v2df", value: 2700, isUnsigned: true)
!2070 = !DIEnumerator(name: "CODE_FOR_sse_movhlps_exp", value: 2701, isUnsigned: true)
!2071 = !DIEnumerator(name: "CODE_FOR_sse_movlhps_exp", value: 2702, isUnsigned: true)
!2072 = !DIEnumerator(name: "CODE_FOR_avx_shufps256", value: 2703, isUnsigned: true)
!2073 = !DIEnumerator(name: "CODE_FOR_sse_shufps", value: 2704, isUnsigned: true)
!2074 = !DIEnumerator(name: "CODE_FOR_sse_loadhps_exp", value: 2705, isUnsigned: true)
!2075 = !DIEnumerator(name: "CODE_FOR_sse_loadlps_exp", value: 2706, isUnsigned: true)
!2076 = !DIEnumerator(name: "CODE_FOR_vec_dupv4sf", value: 2707, isUnsigned: true)
!2077 = !DIEnumerator(name: "CODE_FOR_vec_initv16qi", value: 2708, isUnsigned: true)
!2078 = !DIEnumerator(name: "CODE_FOR_vec_initv8hi", value: 2709, isUnsigned: true)
!2079 = !DIEnumerator(name: "CODE_FOR_vec_initv4si", value: 2710, isUnsigned: true)
!2080 = !DIEnumerator(name: "CODE_FOR_vec_initv2di", value: 2711, isUnsigned: true)
!2081 = !DIEnumerator(name: "CODE_FOR_vec_initv4sf", value: 2712, isUnsigned: true)
!2082 = !DIEnumerator(name: "CODE_FOR_vec_initv2df", value: 2713, isUnsigned: true)
!2083 = !DIEnumerator(name: "CODE_FOR_vec_setv16qi", value: 2715, isUnsigned: true)
!2084 = !DIEnumerator(name: "CODE_FOR_vec_setv8hi", value: 2716, isUnsigned: true)
!2085 = !DIEnumerator(name: "CODE_FOR_vec_setv4si", value: 2717, isUnsigned: true)
!2086 = !DIEnumerator(name: "CODE_FOR_vec_setv2di", value: 2718, isUnsigned: true)
!2087 = !DIEnumerator(name: "CODE_FOR_vec_setv4sf", value: 2719, isUnsigned: true)
!2088 = !DIEnumerator(name: "CODE_FOR_vec_setv2df", value: 2720, isUnsigned: true)
!2089 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v32qi", value: 2722, isUnsigned: true)
!2090 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v16hi", value: 2723, isUnsigned: true)
!2091 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8si", value: 2724, isUnsigned: true)
!2092 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4di", value: 2725, isUnsigned: true)
!2093 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v8sf", value: 2726, isUnsigned: true)
!2094 = !DIEnumerator(name: "CODE_FOR_avx_vextractf128v4df", value: 2727, isUnsigned: true)
!2095 = !DIEnumerator(name: "CODE_FOR_vec_extractv16qi", value: 2729, isUnsigned: true)
!2096 = !DIEnumerator(name: "CODE_FOR_vec_extractv8hi", value: 2730, isUnsigned: true)
!2097 = !DIEnumerator(name: "CODE_FOR_vec_extractv4si", value: 2731, isUnsigned: true)
!2098 = !DIEnumerator(name: "CODE_FOR_vec_extractv2di", value: 2732, isUnsigned: true)
!2099 = !DIEnumerator(name: "CODE_FOR_vec_extractv4sf", value: 2733, isUnsigned: true)
!2100 = !DIEnumerator(name: "CODE_FOR_vec_extractv2df", value: 2734, isUnsigned: true)
!2101 = !DIEnumerator(name: "CODE_FOR_vec_interleave_highv2df", value: 2735, isUnsigned: true)
!2102 = !DIEnumerator(name: "CODE_FOR_avx_movddup256", value: 2736, isUnsigned: true)
!2103 = !DIEnumerator(name: "CODE_FOR_avx_unpcklpd256", value: 2737, isUnsigned: true)
!2104 = !DIEnumerator(name: "CODE_FOR_vec_interleave_lowv2df", value: 2738, isUnsigned: true)
!2105 = !DIEnumerator(name: "CODE_FOR_avx_shufpd256", value: 2741, isUnsigned: true)
!2106 = !DIEnumerator(name: "CODE_FOR_sse2_shufpd", value: 2742, isUnsigned: true)
!2107 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4sf", value: 2743, isUnsigned: true)
!2108 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2df", value: 2744, isUnsigned: true)
!2109 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv2di", value: 2745, isUnsigned: true)
!2110 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4si", value: 2746, isUnsigned: true)
!2111 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8hi", value: 2747, isUnsigned: true)
!2112 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv16qi", value: 2748, isUnsigned: true)
!2113 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv4df", value: 2749, isUnsigned: true)
!2114 = !DIEnumerator(name: "CODE_FOR_vec_extract_evenv8sf", value: 2750, isUnsigned: true)
!2115 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4sf", value: 2751, isUnsigned: true)
!2116 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2df", value: 2752, isUnsigned: true)
!2117 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv2di", value: 2753, isUnsigned: true)
!2118 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4si", value: 2754, isUnsigned: true)
!2119 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8hi", value: 2755, isUnsigned: true)
!2120 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv16qi", value: 2756, isUnsigned: true)
!2121 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv4df", value: 2757, isUnsigned: true)
!2122 = !DIEnumerator(name: "CODE_FOR_vec_extract_oddv8sf", value: 2758, isUnsigned: true)
!2123 = !DIEnumerator(name: "CODE_FOR_sse2_loadhpd_exp", value: 2761, isUnsigned: true)
!2124 = !DIEnumerator(name: "CODE_FOR_sse2_loadlpd_exp", value: 2763, isUnsigned: true)
!2125 = !DIEnumerator(name: "CODE_FOR_negv16qi2", value: 2765, isUnsigned: true)
!2126 = !DIEnumerator(name: "CODE_FOR_negv8hi2", value: 2766, isUnsigned: true)
!2127 = !DIEnumerator(name: "CODE_FOR_negv4si2", value: 2767, isUnsigned: true)
!2128 = !DIEnumerator(name: "CODE_FOR_negv2di2", value: 2768, isUnsigned: true)
!2129 = !DIEnumerator(name: "CODE_FOR_addv16qi3", value: 2769, isUnsigned: true)
!2130 = !DIEnumerator(name: "CODE_FOR_subv16qi3", value: 2770, isUnsigned: true)
!2131 = !DIEnumerator(name: "CODE_FOR_addv8hi3", value: 2771, isUnsigned: true)
!2132 = !DIEnumerator(name: "CODE_FOR_subv8hi3", value: 2772, isUnsigned: true)
!2133 = !DIEnumerator(name: "CODE_FOR_addv4si3", value: 2773, isUnsigned: true)
!2134 = !DIEnumerator(name: "CODE_FOR_subv4si3", value: 2774, isUnsigned: true)
!2135 = !DIEnumerator(name: "CODE_FOR_addv2di3", value: 2775, isUnsigned: true)
!2136 = !DIEnumerator(name: "CODE_FOR_subv2di3", value: 2776, isUnsigned: true)
!2137 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv16qi3", value: 2777, isUnsigned: true)
!2138 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv16qi3", value: 2778, isUnsigned: true)
!2139 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv16qi3", value: 2779, isUnsigned: true)
!2140 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv16qi3", value: 2780, isUnsigned: true)
!2141 = !DIEnumerator(name: "CODE_FOR_sse2_ssaddv8hi3", value: 2781, isUnsigned: true)
!2142 = !DIEnumerator(name: "CODE_FOR_sse2_usaddv8hi3", value: 2782, isUnsigned: true)
!2143 = !DIEnumerator(name: "CODE_FOR_sse2_sssubv8hi3", value: 2783, isUnsigned: true)
!2144 = !DIEnumerator(name: "CODE_FOR_sse2_ussubv8hi3", value: 2784, isUnsigned: true)
!2145 = !DIEnumerator(name: "CODE_FOR_mulv8hi3", value: 2786, isUnsigned: true)
!2146 = !DIEnumerator(name: "CODE_FOR_smulv8hi3_highpart", value: 2787, isUnsigned: true)
!2147 = !DIEnumerator(name: "CODE_FOR_umulv8hi3_highpart", value: 2788, isUnsigned: true)
!2148 = !DIEnumerator(name: "CODE_FOR_sse2_umulv2siv2di3", value: 2789, isUnsigned: true)
!2149 = !DIEnumerator(name: "CODE_FOR_sse4_1_mulv2siv2di3", value: 2790, isUnsigned: true)
!2150 = !DIEnumerator(name: "CODE_FOR_sse2_pmaddwd", value: 2791, isUnsigned: true)
!2151 = !DIEnumerator(name: "CODE_FOR_mulv4si3", value: 2792, isUnsigned: true)
!2152 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v8hi", value: 2795, isUnsigned: true)
!2153 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v8hi", value: 2796, isUnsigned: true)
!2154 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v8hi", value: 2797, isUnsigned: true)
!2155 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v8hi", value: 2798, isUnsigned: true)
!2156 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_hi_v4si", value: 2799, isUnsigned: true)
!2157 = !DIEnumerator(name: "CODE_FOR_vec_widen_smult_lo_v4si", value: 2800, isUnsigned: true)
!2158 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_hi_v4si", value: 2801, isUnsigned: true)
!2159 = !DIEnumerator(name: "CODE_FOR_vec_widen_umult_lo_v4si", value: 2802, isUnsigned: true)
!2160 = !DIEnumerator(name: "CODE_FOR_sdot_prodv8hi", value: 2803, isUnsigned: true)
!2161 = !DIEnumerator(name: "CODE_FOR_udot_prodv4si", value: 2804, isUnsigned: true)
!2162 = !DIEnumerator(name: "CODE_FOR_vec_shl_v16qi", value: 2805, isUnsigned: true)
!2163 = !DIEnumerator(name: "CODE_FOR_vec_shl_v8hi", value: 2806, isUnsigned: true)
!2164 = !DIEnumerator(name: "CODE_FOR_vec_shl_v4si", value: 2807, isUnsigned: true)
!2165 = !DIEnumerator(name: "CODE_FOR_vec_shl_v2di", value: 2808, isUnsigned: true)
!2166 = !DIEnumerator(name: "CODE_FOR_vec_shr_v16qi", value: 2809, isUnsigned: true)
!2167 = !DIEnumerator(name: "CODE_FOR_vec_shr_v8hi", value: 2810, isUnsigned: true)
!2168 = !DIEnumerator(name: "CODE_FOR_vec_shr_v4si", value: 2811, isUnsigned: true)
!2169 = !DIEnumerator(name: "CODE_FOR_vec_shr_v2di", value: 2812, isUnsigned: true)
!2170 = !DIEnumerator(name: "CODE_FOR_umaxv16qi3", value: 2813, isUnsigned: true)
!2171 = !DIEnumerator(name: "CODE_FOR_uminv16qi3", value: 2814, isUnsigned: true)
!2172 = !DIEnumerator(name: "CODE_FOR_smaxv8hi3", value: 2815, isUnsigned: true)
!2173 = !DIEnumerator(name: "CODE_FOR_sminv8hi3", value: 2816, isUnsigned: true)
!2174 = !DIEnumerator(name: "CODE_FOR_umaxv8hi3", value: 2817, isUnsigned: true)
!2175 = !DIEnumerator(name: "CODE_FOR_smaxv16qi3", value: 2818, isUnsigned: true)
!2176 = !DIEnumerator(name: "CODE_FOR_smaxv4si3", value: 2819, isUnsigned: true)
!2177 = !DIEnumerator(name: "CODE_FOR_smaxv2di3", value: 2820, isUnsigned: true)
!2178 = !DIEnumerator(name: "CODE_FOR_umaxv4si3", value: 2821, isUnsigned: true)
!2179 = !DIEnumerator(name: "CODE_FOR_umaxv2di3", value: 2822, isUnsigned: true)
!2180 = !DIEnumerator(name: "CODE_FOR_sminv16qi3", value: 2823, isUnsigned: true)
!2181 = !DIEnumerator(name: "CODE_FOR_sminv4si3", value: 2824, isUnsigned: true)
!2182 = !DIEnumerator(name: "CODE_FOR_sminv2di3", value: 2825, isUnsigned: true)
!2183 = !DIEnumerator(name: "CODE_FOR_uminv8hi3", value: 2826, isUnsigned: true)
!2184 = !DIEnumerator(name: "CODE_FOR_uminv4si3", value: 2827, isUnsigned: true)
!2185 = !DIEnumerator(name: "CODE_FOR_uminv2di3", value: 2828, isUnsigned: true)
!2186 = !DIEnumerator(name: "CODE_FOR_sse2_eqv16qi3", value: 2829, isUnsigned: true)
!2187 = !DIEnumerator(name: "CODE_FOR_sse2_eqv8hi3", value: 2830, isUnsigned: true)
!2188 = !DIEnumerator(name: "CODE_FOR_sse2_eqv4si3", value: 2831, isUnsigned: true)
!2189 = !DIEnumerator(name: "CODE_FOR_sse4_1_eqv2di3", value: 2832, isUnsigned: true)
!2190 = !DIEnumerator(name: "CODE_FOR_vcondv16qi", value: 2833, isUnsigned: true)
!2191 = !DIEnumerator(name: "CODE_FOR_vcondv8hi", value: 2834, isUnsigned: true)
!2192 = !DIEnumerator(name: "CODE_FOR_vcondv4si", value: 2835, isUnsigned: true)
!2193 = !DIEnumerator(name: "CODE_FOR_vcondv2di", value: 2836, isUnsigned: true)
!2194 = !DIEnumerator(name: "CODE_FOR_vconduv16qi", value: 2837, isUnsigned: true)
!2195 = !DIEnumerator(name: "CODE_FOR_vconduv8hi", value: 2838, isUnsigned: true)
!2196 = !DIEnumerator(name: "CODE_FOR_vconduv4si", value: 2839, isUnsigned: true)
!2197 = !DIEnumerator(name: "CODE_FOR_vconduv2di", value: 2840, isUnsigned: true)
!2198 = !DIEnumerator(name: "CODE_FOR_one_cmplv16qi2", value: 2841, isUnsigned: true)
!2199 = !DIEnumerator(name: "CODE_FOR_one_cmplv8hi2", value: 2842, isUnsigned: true)
!2200 = !DIEnumerator(name: "CODE_FOR_one_cmplv4si2", value: 2843, isUnsigned: true)
!2201 = !DIEnumerator(name: "CODE_FOR_one_cmplv2di2", value: 2844, isUnsigned: true)
!2202 = !DIEnumerator(name: "CODE_FOR_andv16qi3", value: 2845, isUnsigned: true)
!2203 = !DIEnumerator(name: "CODE_FOR_iorv16qi3", value: 2846, isUnsigned: true)
!2204 = !DIEnumerator(name: "CODE_FOR_xorv16qi3", value: 2847, isUnsigned: true)
!2205 = !DIEnumerator(name: "CODE_FOR_andv8hi3", value: 2848, isUnsigned: true)
!2206 = !DIEnumerator(name: "CODE_FOR_iorv8hi3", value: 2849, isUnsigned: true)
!2207 = !DIEnumerator(name: "CODE_FOR_xorv8hi3", value: 2850, isUnsigned: true)
!2208 = !DIEnumerator(name: "CODE_FOR_andv4si3", value: 2851, isUnsigned: true)
!2209 = !DIEnumerator(name: "CODE_FOR_iorv4si3", value: 2852, isUnsigned: true)
!2210 = !DIEnumerator(name: "CODE_FOR_xorv4si3", value: 2853, isUnsigned: true)
!2211 = !DIEnumerator(name: "CODE_FOR_andv2di3", value: 2854, isUnsigned: true)
!2212 = !DIEnumerator(name: "CODE_FOR_iorv2di3", value: 2855, isUnsigned: true)
!2213 = !DIEnumerator(name: "CODE_FOR_xorv2di3", value: 2856, isUnsigned: true)
!2214 = !DIEnumerator(name: "CODE_FOR_andtf3", value: 2857, isUnsigned: true)
!2215 = !DIEnumerator(name: "CODE_FOR_iortf3", value: 2858, isUnsigned: true)
!2216 = !DIEnumerator(name: "CODE_FOR_xortf3", value: 2859, isUnsigned: true)
!2217 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v8hi", value: 2860, isUnsigned: true)
!2218 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v4si", value: 2861, isUnsigned: true)
!2219 = !DIEnumerator(name: "CODE_FOR_vec_pack_trunc_v2di", value: 2862, isUnsigned: true)
!2220 = !DIEnumerator(name: "CODE_FOR_sse2_pshufd", value: 2863, isUnsigned: true)
!2221 = !DIEnumerator(name: "CODE_FOR_sse2_pshuflw", value: 2864, isUnsigned: true)
!2222 = !DIEnumerator(name: "CODE_FOR_sse2_pshufhw", value: 2865, isUnsigned: true)
!2223 = !DIEnumerator(name: "CODE_FOR_sse2_loadd", value: 2866, isUnsigned: true)
!2224 = !DIEnumerator(name: "CODE_FOR_sse_storeq", value: 2869, isUnsigned: true)
!2225 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v16qi", value: 2871, isUnsigned: true)
!2226 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v16qi", value: 2872, isUnsigned: true)
!2227 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v16qi", value: 2873, isUnsigned: true)
!2228 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v16qi", value: 2874, isUnsigned: true)
!2229 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v8hi", value: 2875, isUnsigned: true)
!2230 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v8hi", value: 2876, isUnsigned: true)
!2231 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v8hi", value: 2877, isUnsigned: true)
!2232 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v8hi", value: 2878, isUnsigned: true)
!2233 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_hi_v4si", value: 2879, isUnsigned: true)
!2234 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_hi_v4si", value: 2880, isUnsigned: true)
!2235 = !DIEnumerator(name: "CODE_FOR_vec_unpacku_lo_v4si", value: 2881, isUnsigned: true)
!2236 = !DIEnumerator(name: "CODE_FOR_vec_unpacks_lo_v4si", value: 2882, isUnsigned: true)
!2237 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv16qi3", value: 2883, isUnsigned: true)
!2238 = !DIEnumerator(name: "CODE_FOR_sse2_uavgv8hi3", value: 2884, isUnsigned: true)
!2239 = !DIEnumerator(name: "CODE_FOR_sse2_maskmovdqu", value: 2885, isUnsigned: true)
!2240 = !DIEnumerator(name: "CODE_FOR_sse_sfence", value: 2886, isUnsigned: true)
!2241 = !DIEnumerator(name: "CODE_FOR_sse2_mfence", value: 2887, isUnsigned: true)
!2242 = !DIEnumerator(name: "CODE_FOR_sse2_lfence", value: 2888, isUnsigned: true)
!2243 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv8hi3", value: 2889, isUnsigned: true)
!2244 = !DIEnumerator(name: "CODE_FOR_ssse3_pmulhrswv4hi3", value: 2890, isUnsigned: true)
!2245 = !DIEnumerator(name: "CODE_FOR_rotlv16qi3", value: 2895, isUnsigned: true)
!2246 = !DIEnumerator(name: "CODE_FOR_rotlv8hi3", value: 2896, isUnsigned: true)
!2247 = !DIEnumerator(name: "CODE_FOR_rotlv4si3", value: 2897, isUnsigned: true)
!2248 = !DIEnumerator(name: "CODE_FOR_rotlv2di3", value: 2898, isUnsigned: true)
!2249 = !DIEnumerator(name: "CODE_FOR_rotrv16qi3", value: 2899, isUnsigned: true)
!2250 = !DIEnumerator(name: "CODE_FOR_rotrv8hi3", value: 2900, isUnsigned: true)
!2251 = !DIEnumerator(name: "CODE_FOR_rotrv4si3", value: 2901, isUnsigned: true)
!2252 = !DIEnumerator(name: "CODE_FOR_rotrv2di3", value: 2902, isUnsigned: true)
!2253 = !DIEnumerator(name: "CODE_FOR_vrotrv16qi3", value: 2903, isUnsigned: true)
!2254 = !DIEnumerator(name: "CODE_FOR_vrotrv8hi3", value: 2904, isUnsigned: true)
!2255 = !DIEnumerator(name: "CODE_FOR_vrotrv4si3", value: 2905, isUnsigned: true)
!2256 = !DIEnumerator(name: "CODE_FOR_vrotrv2di3", value: 2906, isUnsigned: true)
!2257 = !DIEnumerator(name: "CODE_FOR_vrotlv16qi3", value: 2907, isUnsigned: true)
!2258 = !DIEnumerator(name: "CODE_FOR_vrotlv8hi3", value: 2908, isUnsigned: true)
!2259 = !DIEnumerator(name: "CODE_FOR_vrotlv4si3", value: 2909, isUnsigned: true)
!2260 = !DIEnumerator(name: "CODE_FOR_vrotlv2di3", value: 2910, isUnsigned: true)
!2261 = !DIEnumerator(name: "CODE_FOR_vlshrv16qi3", value: 2911, isUnsigned: true)
!2262 = !DIEnumerator(name: "CODE_FOR_vlshrv8hi3", value: 2912, isUnsigned: true)
!2263 = !DIEnumerator(name: "CODE_FOR_vlshrv4si3", value: 2913, isUnsigned: true)
!2264 = !DIEnumerator(name: "CODE_FOR_vashrv16qi3", value: 2914, isUnsigned: true)
!2265 = !DIEnumerator(name: "CODE_FOR_vashrv8hi3", value: 2915, isUnsigned: true)
!2266 = !DIEnumerator(name: "CODE_FOR_vashrv4si3", value: 2916, isUnsigned: true)
!2267 = !DIEnumerator(name: "CODE_FOR_vashlv16qi3", value: 2917, isUnsigned: true)
!2268 = !DIEnumerator(name: "CODE_FOR_vashlv8hi3", value: 2918, isUnsigned: true)
!2269 = !DIEnumerator(name: "CODE_FOR_vashlv4si3", value: 2919, isUnsigned: true)
!2270 = !DIEnumerator(name: "CODE_FOR_ashlv16qi3", value: 2920, isUnsigned: true)
!2271 = !DIEnumerator(name: "CODE_FOR_lshlv16qi3", value: 2921, isUnsigned: true)
!2272 = !DIEnumerator(name: "CODE_FOR_ashrv16qi3", value: 2922, isUnsigned: true)
!2273 = !DIEnumerator(name: "CODE_FOR_ashrv2di3", value: 2923, isUnsigned: true)
!2274 = !DIEnumerator(name: "CODE_FOR_avx_vzeroall", value: 2924, isUnsigned: true)
!2275 = !DIEnumerator(name: "CODE_FOR_avx_vzeroupper", value: 2925, isUnsigned: true)
!2276 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv2df", value: 2932, isUnsigned: true)
!2277 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4df", value: 2933, isUnsigned: true)
!2278 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv4sf", value: 2934, isUnsigned: true)
!2279 = !DIEnumerator(name: "CODE_FOR_avx_vpermilv8sf", value: 2935, isUnsigned: true)
!2280 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8si3", value: 2936, isUnsigned: true)
!2281 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v8sf3", value: 2937, isUnsigned: true)
!2282 = !DIEnumerator(name: "CODE_FOR_avx_vperm2f128v4df3", value: 2938, isUnsigned: true)
!2283 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v32qi", value: 2939, isUnsigned: true)
!2284 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v16hi", value: 2940, isUnsigned: true)
!2285 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8si", value: 2941, isUnsigned: true)
!2286 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4di", value: 2942, isUnsigned: true)
!2287 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v8sf", value: 2943, isUnsigned: true)
!2288 = !DIEnumerator(name: "CODE_FOR_avx_vinsertf128v4df", value: 2944, isUnsigned: true)
!2289 = !DIEnumerator(name: "CODE_FOR_vec_initv32qi", value: 2945, isUnsigned: true)
!2290 = !DIEnumerator(name: "CODE_FOR_vec_initv16hi", value: 2946, isUnsigned: true)
!2291 = !DIEnumerator(name: "CODE_FOR_vec_initv8si", value: 2947, isUnsigned: true)
!2292 = !DIEnumerator(name: "CODE_FOR_vec_initv4di", value: 2948, isUnsigned: true)
!2293 = !DIEnumerator(name: "CODE_FOR_vec_initv8sf", value: 2949, isUnsigned: true)
!2294 = !DIEnumerator(name: "CODE_FOR_vec_initv4df", value: 2950, isUnsigned: true)
!2295 = !DIEnumerator(name: "CODE_FOR_memory_barrier", value: 2951, isUnsigned: true)
!2296 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapqi", value: 2952, isUnsigned: true)
!2297 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swaphi", value: 2953, isUnsigned: true)
!2298 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapsi", value: 2954, isUnsigned: true)
!2299 = !DIEnumerator(name: "CODE_FOR_sync_compare_and_swapdi", value: 2955, isUnsigned: true)
!2300 = !DIEnumerator(name: "CODE_FOR_nothing", value: 2956, isUnsigned: true)
!2301 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_code", file: !2302, line: 45, baseType: !7, size: 32, elements: !2303)
!2302 = !DIFile(filename: "./rtl.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2303 = !{!2304, !2305, !2306, !2307, !2308, !2309, !2310, !2311, !2312, !2313, !2314, !2315, !2316, !2317, !2318, !2319, !2320, !2321, !2322, !2323, !2324, !2325, !2326, !2327, !2328, !2329, !2330, !2331, !2332, !2333, !2334, !2335, !2336, !2337, !2338, !2339, !2340, !2341, !2342, !2343, !2344, !2345, !2346, !2347, !2348, !2349, !2350, !2351, !2352, !2353, !2354, !2355, !2356, !2357, !2358, !2359, !2360, !2361, !2362, !2363, !2364, !2365, !2366, !2367, !2368, !2369, !2370, !2371, !2372, !2373, !2374, !2375, !2376, !2377, !2378, !2379, !2380, !2381, !2382, !2383, !2384, !2385, !2386, !2387, !2388, !2389, !2390, !2391, !2392, !2393, !2394, !2395, !2396, !2397, !2398, !2399, !2400, !2401, !2402, !2403, !2404, !2405, !2406, !2407, !2408, !2409, !2410, !2411, !2412, !2413, !2414, !2415, !2416, !2417, !2418, !2419, !2420, !2421, !2422, !2423, !2424, !2425, !2426, !2427, !2428, !2429, !2430, !2431, !2432, !2433, !2434, !2435, !2436, !2437, !2438, !2439, !2440, !2441, !2442, !2443}
!2304 = !DIEnumerator(name: "UNKNOWN", value: 0, isUnsigned: true)
!2305 = !DIEnumerator(name: "VALUE", value: 1, isUnsigned: true)
!2306 = !DIEnumerator(name: "DEBUG_EXPR", value: 2, isUnsigned: true)
!2307 = !DIEnumerator(name: "EXPR_LIST", value: 3, isUnsigned: true)
!2308 = !DIEnumerator(name: "INSN_LIST", value: 4, isUnsigned: true)
!2309 = !DIEnumerator(name: "SEQUENCE", value: 5, isUnsigned: true)
!2310 = !DIEnumerator(name: "ADDRESS", value: 6, isUnsigned: true)
!2311 = !DIEnumerator(name: "DEBUG_INSN", value: 7, isUnsigned: true)
!2312 = !DIEnumerator(name: "INSN", value: 8, isUnsigned: true)
!2313 = !DIEnumerator(name: "JUMP_INSN", value: 9, isUnsigned: true)
!2314 = !DIEnumerator(name: "CALL_INSN", value: 10, isUnsigned: true)
!2315 = !DIEnumerator(name: "BARRIER", value: 11, isUnsigned: true)
!2316 = !DIEnumerator(name: "CODE_LABEL", value: 12, isUnsigned: true)
!2317 = !DIEnumerator(name: "NOTE", value: 13, isUnsigned: true)
!2318 = !DIEnumerator(name: "COND_EXEC", value: 14, isUnsigned: true)
!2319 = !DIEnumerator(name: "PARALLEL", value: 15, isUnsigned: true)
!2320 = !DIEnumerator(name: "ASM_INPUT", value: 16, isUnsigned: true)
!2321 = !DIEnumerator(name: "ASM_OPERANDS", value: 17, isUnsigned: true)
!2322 = !DIEnumerator(name: "UNSPEC", value: 18, isUnsigned: true)
!2323 = !DIEnumerator(name: "UNSPEC_VOLATILE", value: 19, isUnsigned: true)
!2324 = !DIEnumerator(name: "ADDR_VEC", value: 20, isUnsigned: true)
!2325 = !DIEnumerator(name: "ADDR_DIFF_VEC", value: 21, isUnsigned: true)
!2326 = !DIEnumerator(name: "PREFETCH", value: 22, isUnsigned: true)
!2327 = !DIEnumerator(name: "SET", value: 23, isUnsigned: true)
!2328 = !DIEnumerator(name: "USE", value: 24, isUnsigned: true)
!2329 = !DIEnumerator(name: "CLOBBER", value: 25, isUnsigned: true)
!2330 = !DIEnumerator(name: "CALL", value: 26, isUnsigned: true)
!2331 = !DIEnumerator(name: "RETURN", value: 27, isUnsigned: true)
!2332 = !DIEnumerator(name: "EH_RETURN", value: 28, isUnsigned: true)
!2333 = !DIEnumerator(name: "TRAP_IF", value: 29, isUnsigned: true)
!2334 = !DIEnumerator(name: "CONST_INT", value: 30, isUnsigned: true)
!2335 = !DIEnumerator(name: "CONST_FIXED", value: 31, isUnsigned: true)
!2336 = !DIEnumerator(name: "CONST_DOUBLE", value: 32, isUnsigned: true)
!2337 = !DIEnumerator(name: "CONST_VECTOR", value: 33, isUnsigned: true)
!2338 = !DIEnumerator(name: "CONST_STRING", value: 34, isUnsigned: true)
!2339 = !DIEnumerator(name: "CONST", value: 35, isUnsigned: true)
!2340 = !DIEnumerator(name: "PC", value: 36, isUnsigned: true)
!2341 = !DIEnumerator(name: "REG", value: 37, isUnsigned: true)
!2342 = !DIEnumerator(name: "SCRATCH", value: 38, isUnsigned: true)
!2343 = !DIEnumerator(name: "SUBREG", value: 39, isUnsigned: true)
!2344 = !DIEnumerator(name: "STRICT_LOW_PART", value: 40, isUnsigned: true)
!2345 = !DIEnumerator(name: "CONCAT", value: 41, isUnsigned: true)
!2346 = !DIEnumerator(name: "CONCATN", value: 42, isUnsigned: true)
!2347 = !DIEnumerator(name: "MEM", value: 43, isUnsigned: true)
!2348 = !DIEnumerator(name: "LABEL_REF", value: 44, isUnsigned: true)
!2349 = !DIEnumerator(name: "SYMBOL_REF", value: 45, isUnsigned: true)
!2350 = !DIEnumerator(name: "CC0", value: 46, isUnsigned: true)
!2351 = !DIEnumerator(name: "IF_THEN_ELSE", value: 47, isUnsigned: true)
!2352 = !DIEnumerator(name: "COMPARE", value: 48, isUnsigned: true)
!2353 = !DIEnumerator(name: "PLUS", value: 49, isUnsigned: true)
!2354 = !DIEnumerator(name: "MINUS", value: 50, isUnsigned: true)
!2355 = !DIEnumerator(name: "NEG", value: 51, isUnsigned: true)
!2356 = !DIEnumerator(name: "MULT", value: 52, isUnsigned: true)
!2357 = !DIEnumerator(name: "SS_MULT", value: 53, isUnsigned: true)
!2358 = !DIEnumerator(name: "US_MULT", value: 54, isUnsigned: true)
!2359 = !DIEnumerator(name: "DIV", value: 55, isUnsigned: true)
!2360 = !DIEnumerator(name: "SS_DIV", value: 56, isUnsigned: true)
!2361 = !DIEnumerator(name: "US_DIV", value: 57, isUnsigned: true)
!2362 = !DIEnumerator(name: "MOD", value: 58, isUnsigned: true)
!2363 = !DIEnumerator(name: "UDIV", value: 59, isUnsigned: true)
!2364 = !DIEnumerator(name: "UMOD", value: 60, isUnsigned: true)
!2365 = !DIEnumerator(name: "AND", value: 61, isUnsigned: true)
!2366 = !DIEnumerator(name: "IOR", value: 62, isUnsigned: true)
!2367 = !DIEnumerator(name: "XOR", value: 63, isUnsigned: true)
!2368 = !DIEnumerator(name: "NOT", value: 64, isUnsigned: true)
!2369 = !DIEnumerator(name: "ASHIFT", value: 65, isUnsigned: true)
!2370 = !DIEnumerator(name: "ROTATE", value: 66, isUnsigned: true)
!2371 = !DIEnumerator(name: "ASHIFTRT", value: 67, isUnsigned: true)
!2372 = !DIEnumerator(name: "LSHIFTRT", value: 68, isUnsigned: true)
!2373 = !DIEnumerator(name: "ROTATERT", value: 69, isUnsigned: true)
!2374 = !DIEnumerator(name: "SMIN", value: 70, isUnsigned: true)
!2375 = !DIEnumerator(name: "SMAX", value: 71, isUnsigned: true)
!2376 = !DIEnumerator(name: "UMIN", value: 72, isUnsigned: true)
!2377 = !DIEnumerator(name: "UMAX", value: 73, isUnsigned: true)
!2378 = !DIEnumerator(name: "PRE_DEC", value: 74, isUnsigned: true)
!2379 = !DIEnumerator(name: "PRE_INC", value: 75, isUnsigned: true)
!2380 = !DIEnumerator(name: "POST_DEC", value: 76, isUnsigned: true)
!2381 = !DIEnumerator(name: "POST_INC", value: 77, isUnsigned: true)
!2382 = !DIEnumerator(name: "PRE_MODIFY", value: 78, isUnsigned: true)
!2383 = !DIEnumerator(name: "POST_MODIFY", value: 79, isUnsigned: true)
!2384 = !DIEnumerator(name: "NE", value: 80, isUnsigned: true)
!2385 = !DIEnumerator(name: "EQ", value: 81, isUnsigned: true)
!2386 = !DIEnumerator(name: "GE", value: 82, isUnsigned: true)
!2387 = !DIEnumerator(name: "GT", value: 83, isUnsigned: true)
!2388 = !DIEnumerator(name: "LE", value: 84, isUnsigned: true)
!2389 = !DIEnumerator(name: "LT", value: 85, isUnsigned: true)
!2390 = !DIEnumerator(name: "GEU", value: 86, isUnsigned: true)
!2391 = !DIEnumerator(name: "GTU", value: 87, isUnsigned: true)
!2392 = !DIEnumerator(name: "LEU", value: 88, isUnsigned: true)
!2393 = !DIEnumerator(name: "LTU", value: 89, isUnsigned: true)
!2394 = !DIEnumerator(name: "UNORDERED", value: 90, isUnsigned: true)
!2395 = !DIEnumerator(name: "ORDERED", value: 91, isUnsigned: true)
!2396 = !DIEnumerator(name: "UNEQ", value: 92, isUnsigned: true)
!2397 = !DIEnumerator(name: "UNGE", value: 93, isUnsigned: true)
!2398 = !DIEnumerator(name: "UNGT", value: 94, isUnsigned: true)
!2399 = !DIEnumerator(name: "UNLE", value: 95, isUnsigned: true)
!2400 = !DIEnumerator(name: "UNLT", value: 96, isUnsigned: true)
!2401 = !DIEnumerator(name: "LTGT", value: 97, isUnsigned: true)
!2402 = !DIEnumerator(name: "SIGN_EXTEND", value: 98, isUnsigned: true)
!2403 = !DIEnumerator(name: "ZERO_EXTEND", value: 99, isUnsigned: true)
!2404 = !DIEnumerator(name: "TRUNCATE", value: 100, isUnsigned: true)
!2405 = !DIEnumerator(name: "FLOAT_EXTEND", value: 101, isUnsigned: true)
!2406 = !DIEnumerator(name: "FLOAT_TRUNCATE", value: 102, isUnsigned: true)
!2407 = !DIEnumerator(name: "FLOAT", value: 103, isUnsigned: true)
!2408 = !DIEnumerator(name: "FIX", value: 104, isUnsigned: true)
!2409 = !DIEnumerator(name: "UNSIGNED_FLOAT", value: 105, isUnsigned: true)
!2410 = !DIEnumerator(name: "UNSIGNED_FIX", value: 106, isUnsigned: true)
!2411 = !DIEnumerator(name: "FRACT_CONVERT", value: 107, isUnsigned: true)
!2412 = !DIEnumerator(name: "UNSIGNED_FRACT_CONVERT", value: 108, isUnsigned: true)
!2413 = !DIEnumerator(name: "SAT_FRACT", value: 109, isUnsigned: true)
!2414 = !DIEnumerator(name: "UNSIGNED_SAT_FRACT", value: 110, isUnsigned: true)
!2415 = !DIEnumerator(name: "ABS", value: 111, isUnsigned: true)
!2416 = !DIEnumerator(name: "SQRT", value: 112, isUnsigned: true)
!2417 = !DIEnumerator(name: "BSWAP", value: 113, isUnsigned: true)
!2418 = !DIEnumerator(name: "FFS", value: 114, isUnsigned: true)
!2419 = !DIEnumerator(name: "CLZ", value: 115, isUnsigned: true)
!2420 = !DIEnumerator(name: "CTZ", value: 116, isUnsigned: true)
!2421 = !DIEnumerator(name: "POPCOUNT", value: 117, isUnsigned: true)
!2422 = !DIEnumerator(name: "PARITY", value: 118, isUnsigned: true)
!2423 = !DIEnumerator(name: "SIGN_EXTRACT", value: 119, isUnsigned: true)
!2424 = !DIEnumerator(name: "ZERO_EXTRACT", value: 120, isUnsigned: true)
!2425 = !DIEnumerator(name: "HIGH", value: 121, isUnsigned: true)
!2426 = !DIEnumerator(name: "LO_SUM", value: 122, isUnsigned: true)
!2427 = !DIEnumerator(name: "VEC_MERGE", value: 123, isUnsigned: true)
!2428 = !DIEnumerator(name: "VEC_SELECT", value: 124, isUnsigned: true)
!2429 = !DIEnumerator(name: "VEC_CONCAT", value: 125, isUnsigned: true)
!2430 = !DIEnumerator(name: "VEC_DUPLICATE", value: 126, isUnsigned: true)
!2431 = !DIEnumerator(name: "SS_PLUS", value: 127, isUnsigned: true)
!2432 = !DIEnumerator(name: "US_PLUS", value: 128, isUnsigned: true)
!2433 = !DIEnumerator(name: "SS_MINUS", value: 129, isUnsigned: true)
!2434 = !DIEnumerator(name: "SS_NEG", value: 130, isUnsigned: true)
!2435 = !DIEnumerator(name: "US_NEG", value: 131, isUnsigned: true)
!2436 = !DIEnumerator(name: "SS_ABS", value: 132, isUnsigned: true)
!2437 = !DIEnumerator(name: "SS_ASHIFT", value: 133, isUnsigned: true)
!2438 = !DIEnumerator(name: "US_ASHIFT", value: 134, isUnsigned: true)
!2439 = !DIEnumerator(name: "US_MINUS", value: 135, isUnsigned: true)
!2440 = !DIEnumerator(name: "SS_TRUNCATE", value: 136, isUnsigned: true)
!2441 = !DIEnumerator(name: "US_TRUNCATE", value: 137, isUnsigned: true)
!2442 = !DIEnumerator(name: "VAR_LOCATION", value: 138, isUnsigned: true)
!2443 = !DIEnumerator(name: "LAST_AND_UNUSED_RTX_CODE", value: 139, isUnsigned: true)
!2444 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "mode_class", file: !2445, line: 36, baseType: !7, size: 32, elements: !2446)
!2445 = !DIFile(filename: "./machmode.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2446 = !{!2447, !2448, !2449, !2450, !2451, !2452, !2453, !2454, !2455, !2456, !2457, !2458, !2459, !2460, !2461, !2462, !2463, !2464, !2465}
!2447 = !DIEnumerator(name: "MODE_RANDOM", value: 0, isUnsigned: true)
!2448 = !DIEnumerator(name: "MODE_CC", value: 1, isUnsigned: true)
!2449 = !DIEnumerator(name: "MODE_INT", value: 2, isUnsigned: true)
!2450 = !DIEnumerator(name: "MODE_PARTIAL_INT", value: 3, isUnsigned: true)
!2451 = !DIEnumerator(name: "MODE_FRACT", value: 4, isUnsigned: true)
!2452 = !DIEnumerator(name: "MODE_UFRACT", value: 5, isUnsigned: true)
!2453 = !DIEnumerator(name: "MODE_ACCUM", value: 6, isUnsigned: true)
!2454 = !DIEnumerator(name: "MODE_UACCUM", value: 7, isUnsigned: true)
!2455 = !DIEnumerator(name: "MODE_FLOAT", value: 8, isUnsigned: true)
!2456 = !DIEnumerator(name: "MODE_DECIMAL_FLOAT", value: 9, isUnsigned: true)
!2457 = !DIEnumerator(name: "MODE_COMPLEX_INT", value: 10, isUnsigned: true)
!2458 = !DIEnumerator(name: "MODE_COMPLEX_FLOAT", value: 11, isUnsigned: true)
!2459 = !DIEnumerator(name: "MODE_VECTOR_INT", value: 12, isUnsigned: true)
!2460 = !DIEnumerator(name: "MODE_VECTOR_FRACT", value: 13, isUnsigned: true)
!2461 = !DIEnumerator(name: "MODE_VECTOR_UFRACT", value: 14, isUnsigned: true)
!2462 = !DIEnumerator(name: "MODE_VECTOR_ACCUM", value: 15, isUnsigned: true)
!2463 = !DIEnumerator(name: "MODE_VECTOR_UACCUM", value: 16, isUnsigned: true)
!2464 = !DIEnumerator(name: "MODE_VECTOR_FLOAT", value: 17, isUnsigned: true)
!2465 = !DIEnumerator(name: "MAX_MODE_CLASS", value: 18, isUnsigned: true)
!2466 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "reg_note", file: !2302, line: 836, baseType: !7, size: 32, elements: !2467)
!2467 = !{!2468, !2469, !2470, !2471, !2472, !2473, !2474, !2475, !2476, !2477, !2478, !2479, !2480, !2481, !2482, !2483, !2484, !2485, !2486, !2487, !2488, !2489, !2490, !2491, !2492, !2493, !2494, !2495, !2496, !2497, !2498, !2499}
!2468 = !DIEnumerator(name: "REG_DEP_TRUE", value: 0, isUnsigned: true)
!2469 = !DIEnumerator(name: "REG_DEAD", value: 1, isUnsigned: true)
!2470 = !DIEnumerator(name: "REG_INC", value: 2, isUnsigned: true)
!2471 = !DIEnumerator(name: "REG_EQUIV", value: 3, isUnsigned: true)
!2472 = !DIEnumerator(name: "REG_EQUAL", value: 4, isUnsigned: true)
!2473 = !DIEnumerator(name: "REG_NONNEG", value: 5, isUnsigned: true)
!2474 = !DIEnumerator(name: "REG_UNUSED", value: 6, isUnsigned: true)
!2475 = !DIEnumerator(name: "REG_CC_SETTER", value: 7, isUnsigned: true)
!2476 = !DIEnumerator(name: "REG_CC_USER", value: 8, isUnsigned: true)
!2477 = !DIEnumerator(name: "REG_LABEL_TARGET", value: 9, isUnsigned: true)
!2478 = !DIEnumerator(name: "REG_LABEL_OPERAND", value: 10, isUnsigned: true)
!2479 = !DIEnumerator(name: "REG_DEP_OUTPUT", value: 11, isUnsigned: true)
!2480 = !DIEnumerator(name: "REG_DEP_ANTI", value: 12, isUnsigned: true)
!2481 = !DIEnumerator(name: "REG_BR_PROB", value: 13, isUnsigned: true)
!2482 = !DIEnumerator(name: "REG_VALUE_PROFILE", value: 14, isUnsigned: true)
!2483 = !DIEnumerator(name: "REG_NOALIAS", value: 15, isUnsigned: true)
!2484 = !DIEnumerator(name: "REG_BR_PRED", value: 16, isUnsigned: true)
!2485 = !DIEnumerator(name: "REG_FRAME_RELATED_EXPR", value: 17, isUnsigned: true)
!2486 = !DIEnumerator(name: "REG_CFA_DEF_CFA", value: 18, isUnsigned: true)
!2487 = !DIEnumerator(name: "REG_CFA_ADJUST_CFA", value: 19, isUnsigned: true)
!2488 = !DIEnumerator(name: "REG_CFA_OFFSET", value: 20, isUnsigned: true)
!2489 = !DIEnumerator(name: "REG_CFA_REGISTER", value: 21, isUnsigned: true)
!2490 = !DIEnumerator(name: "REG_CFA_RESTORE", value: 22, isUnsigned: true)
!2491 = !DIEnumerator(name: "REG_CFA_SET_VDRAP", value: 23, isUnsigned: true)
!2492 = !DIEnumerator(name: "REG_EH_CONTEXT", value: 24, isUnsigned: true)
!2493 = !DIEnumerator(name: "REG_EH_REGION", value: 25, isUnsigned: true)
!2494 = !DIEnumerator(name: "REG_SAVE_NOTE", value: 26, isUnsigned: true)
!2495 = !DIEnumerator(name: "REG_NORETURN", value: 27, isUnsigned: true)
!2496 = !DIEnumerator(name: "REG_NON_LOCAL_GOTO", value: 28, isUnsigned: true)
!2497 = !DIEnumerator(name: "REG_CROSSING_JUMP", value: 29, isUnsigned: true)
!2498 = !DIEnumerator(name: "REG_SETJMP", value: 30, isUnsigned: true)
!2499 = !DIEnumerator(name: "REG_NOTE_MAX", value: 31, isUnsigned: true)
!2500 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "optab_methods", file: !2501, line: 291, baseType: !7, size: 32, elements: !2502)
!2501 = !DIFile(filename: "./expr.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2502 = !{!2503, !2504, !2505, !2506, !2507}
!2503 = !DIEnumerator(name: "OPTAB_DIRECT", value: 0, isUnsigned: true)
!2504 = !DIEnumerator(name: "OPTAB_LIB", value: 1, isUnsigned: true)
!2505 = !DIEnumerator(name: "OPTAB_WIDEN", value: 2, isUnsigned: true)
!2506 = !DIEnumerator(name: "OPTAB_LIB_WIDEN", value: 3, isUnsigned: true)
!2507 = !DIEnumerator(name: "OPTAB_MUST_WIDEN", value: 4, isUnsigned: true)
!2508 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "rtx_class", file: !2302, line: 60, baseType: !7, size: 32, elements: !2509)
!2509 = !{!2510, !2511, !2512, !2513, !2514, !2515, !2516, !2517, !2518, !2519, !2520, !2521, !2522}
!2510 = !DIEnumerator(name: "RTX_COMPARE", value: 0, isUnsigned: true)
!2511 = !DIEnumerator(name: "RTX_COMM_COMPARE", value: 1, isUnsigned: true)
!2512 = !DIEnumerator(name: "RTX_BIN_ARITH", value: 2, isUnsigned: true)
!2513 = !DIEnumerator(name: "RTX_COMM_ARITH", value: 3, isUnsigned: true)
!2514 = !DIEnumerator(name: "RTX_UNARY", value: 4, isUnsigned: true)
!2515 = !DIEnumerator(name: "RTX_EXTRA", value: 5, isUnsigned: true)
!2516 = !DIEnumerator(name: "RTX_MATCH", value: 6, isUnsigned: true)
!2517 = !DIEnumerator(name: "RTX_INSN", value: 7, isUnsigned: true)
!2518 = !DIEnumerator(name: "RTX_OBJ", value: 8, isUnsigned: true)
!2519 = !DIEnumerator(name: "RTX_CONST_OBJ", value: 9, isUnsigned: true)
!2520 = !DIEnumerator(name: "RTX_TERNARY", value: 10, isUnsigned: true)
!2521 = !DIEnumerator(name: "RTX_BITFIELD_OPS", value: 11, isUnsigned: true)
!2522 = !DIEnumerator(name: "RTX_AUTOINC", value: 12, isUnsigned: true)
!2523 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "ir_type", file: !2524, line: 80, baseType: !7, size: 32, elements: !2525)
!2524 = !DIFile(filename: "./coretypes.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2525 = !{!2526, !2527, !2528}
!2526 = !DIEnumerator(name: "IR_GIMPLE", value: 0, isUnsigned: true)
!2527 = !DIEnumerator(name: "IR_RTL_CFGRTL", value: 1, isUnsigned: true)
!2528 = !DIEnumerator(name: "IR_RTL_CFGLAYOUT", value: 2, isUnsigned: true)
!2529 = !DICompositeType(tag: DW_TAG_enumeration_type, name: "bb_flags", file: !367, line: 295, baseType: !7, size: 32, elements: !2530)
!2530 = !{!2531, !2532, !2533, !2534, !2535, !2536, !2537, !2538, !2539, !2540, !2541, !2542}
!2531 = !DIEnumerator(name: "BB_NEW", value: 1, isUnsigned: true)
!2532 = !DIEnumerator(name: "BB_REACHABLE", value: 2, isUnsigned: true)
!2533 = !DIEnumerator(name: "BB_IRREDUCIBLE_LOOP", value: 4, isUnsigned: true)
!2534 = !DIEnumerator(name: "BB_SUPERBLOCK", value: 8, isUnsigned: true)
!2535 = !DIEnumerator(name: "BB_DISABLE_SCHEDULE", value: 16, isUnsigned: true)
!2536 = !DIEnumerator(name: "BB_HOT_PARTITION", value: 32, isUnsigned: true)
!2537 = !DIEnumerator(name: "BB_COLD_PARTITION", value: 64, isUnsigned: true)
!2538 = !DIEnumerator(name: "BB_DUPLICATED", value: 128, isUnsigned: true)
!2539 = !DIEnumerator(name: "BB_NON_LOCAL_GOTO_TARGET", value: 256, isUnsigned: true)
!2540 = !DIEnumerator(name: "BB_RTL", value: 512, isUnsigned: true)
!2541 = !DIEnumerator(name: "BB_FORWARDER_BLOCK", value: 1024, isUnsigned: true)
!2542 = !DIEnumerator(name: "BB_NONTHREADABLE_BLOCK", value: 2048, isUnsigned: true)
!2543 = !{!2544, !2545, !2546, !231, !2577, !2301, !2444, !2649, !2666, !3776, !3777, !3778, !7, !3790}
!2544 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null, size: 64)
!2545 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!2546 = !DIDerivedType(tag: DW_TAG_typedef, name: "basic_block", file: !2524, line: 111, baseType: !2547)
!2547 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2548, size: 64)
!2548 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "basic_block_def", file: !367, line: 217, size: 832, elements: !2549)
!2549 = !{!2550, !3743, !3744, !3745, !3746, !3750, !3751, !3752, !3770, !3771, !3772, !3773, !3774, !3775}
!2550 = !DIDerivedType(tag: DW_TAG_member, name: "preds", scope: !2548, file: !367, line: 219, baseType: !2551, size: 64)
!2551 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2552, size: 64)
!2552 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_gc", file: !367, line: 151, baseType: !2553)
!2553 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_gc", file: !367, line: 151, size: 128, elements: !2554)
!2554 = !{!2555}
!2555 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2553, file: !367, line: 151, baseType: !2556, size: 128)
!2556 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_edge_base", file: !367, line: 150, baseType: !2557)
!2557 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_edge_base", file: !367, line: 150, size: 128, elements: !2558)
!2558 = !{!2559, !2560, !2561}
!2559 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !2557, file: !367, line: 150, baseType: !7, size: 32)
!2560 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !2557, file: !367, line: 150, baseType: !7, size: 32, offset: 32)
!2561 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2557, file: !367, line: 150, baseType: !2562, size: 64, offset: 64)
!2562 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2563, size: 64, elements: !2614)
!2563 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge", file: !2524, line: 108, baseType: !2564)
!2564 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2565, size: 64)
!2565 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "edge_def", file: !367, line: 122, size: 512, elements: !2566)
!2566 = !{!2567, !2568, !2569, !3735, !3736, !3737, !3738, !3739, !3740, !3741}
!2567 = !DIDerivedType(tag: DW_TAG_member, name: "src", scope: !2565, file: !367, line: 124, baseType: !2547, size: 64)
!2568 = !DIDerivedType(tag: DW_TAG_member, name: "dest", scope: !2565, file: !367, line: 125, baseType: !2547, size: 64, offset: 64)
!2569 = !DIDerivedType(tag: DW_TAG_member, name: "insns", scope: !2565, file: !367, line: 131, baseType: !2570, size: 64, offset: 128)
!2570 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "edge_def_insns", file: !367, line: 128, size: 64, elements: !2571)
!2571 = !{!2572, !2576}
!2572 = !DIDerivedType(tag: DW_TAG_member, name: "g", scope: !2570, file: !367, line: 129, baseType: !2573, size: 64)
!2573 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple_seq", file: !2524, line: 66, baseType: !2574)
!2574 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2575, size: 64)
!2575 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_seq_d", file: !2524, line: 65, flags: DIFlagFwdDecl)
!2576 = !DIDerivedType(tag: DW_TAG_member, name: "r", scope: !2570, file: !367, line: 130, baseType: !2577, size: 64)
!2577 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtx", file: !2524, line: 50, baseType: !2578)
!2578 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2579, size: 64)
!2579 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtx_def", file: !2302, line: 240, size: 384, elements: !2580)
!2580 = !{!2581, !2582, !2583, !2584, !2585, !2586, !2587, !2588, !2589, !2590, !2591}
!2581 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2579, file: !2302, line: 242, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2582 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2579, file: !2302, line: 245, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2583 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !2579, file: !2302, line: 252, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2584 = !DIDerivedType(tag: DW_TAG_member, name: "call", scope: !2579, file: !2302, line: 257, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2585 = !DIDerivedType(tag: DW_TAG_member, name: "unchanging", scope: !2579, file: !2302, line: 265, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2586 = !DIDerivedType(tag: DW_TAG_member, name: "volatil", scope: !2579, file: !2302, line: 277, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2587 = !DIDerivedType(tag: DW_TAG_member, name: "in_struct", scope: !2579, file: !2302, line: 291, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2588 = !DIDerivedType(tag: DW_TAG_member, name: "used", scope: !2579, file: !2302, line: 298, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2589 = !DIDerivedType(tag: DW_TAG_member, name: "frame_related", scope: !2579, file: !2302, line: 305, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2590 = !DIDerivedType(tag: DW_TAG_member, name: "return_val", scope: !2579, file: !2302, line: 310, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2591 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2579, file: !2302, line: 321, baseType: !2592, size: 320, offset: 64)
!2592 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "u", file: !2302, line: 315, size: 320, elements: !2593)
!2593 = !{!2594, !3670, !3672, !3733, !3734}
!2594 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !2592, file: !2302, line: 316, baseType: !2595, size: 64)
!2595 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2596, size: 64, elements: !2614)
!2596 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtunion", file: !2302, line: 183, baseType: !2597)
!2597 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "rtunion_def", file: !2302, line: 166, size: 64, elements: !2598)
!2598 = !{!2599, !2600, !2601, !2605, !2606, !2616, !2617, !2629, !2632, !2695, !3648, !3649, !3660, !3667}
!2599 = !DIDerivedType(tag: DW_TAG_member, name: "rt_int", scope: !2597, file: !2302, line: 168, baseType: !2545, size: 32)
!2600 = !DIDerivedType(tag: DW_TAG_member, name: "rt_uint", scope: !2597, file: !2302, line: 169, baseType: !7, size: 32)
!2601 = !DIDerivedType(tag: DW_TAG_member, name: "rt_str", scope: !2597, file: !2302, line: 170, baseType: !2602, size: 64)
!2602 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2603, size: 64)
!2603 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2604)
!2604 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!2605 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtx", scope: !2597, file: !2302, line: 171, baseType: !2577, size: 64)
!2606 = !DIDerivedType(tag: DW_TAG_member, name: "rt_rtvec", scope: !2597, file: !2302, line: 172, baseType: !2607, size: 64)
!2607 = !DIDerivedType(tag: DW_TAG_typedef, name: "rtvec", file: !2524, line: 53, baseType: !2608)
!2608 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2609, size: 64)
!2609 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtvec_def", file: !2302, line: 359, size: 128, elements: !2610)
!2610 = !{!2611, !2612}
!2611 = !DIDerivedType(tag: DW_TAG_member, name: "num_elem", scope: !2609, file: !2302, line: 360, baseType: !2545, size: 32)
!2612 = !DIDerivedType(tag: DW_TAG_member, name: "elem", scope: !2609, file: !2302, line: 361, baseType: !2613, size: 64, offset: 64)
!2613 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2577, size: 64, elements: !2614)
!2614 = !{!2615}
!2615 = !DISubrange(count: 1)
!2616 = !DIDerivedType(tag: DW_TAG_member, name: "rt_type", scope: !2597, file: !2302, line: 173, baseType: !231, size: 32)
!2617 = !DIDerivedType(tag: DW_TAG_member, name: "rt_addr_diff_vec_flags", scope: !2597, file: !2302, line: 174, baseType: !2618, size: 32)
!2618 = !DIDerivedType(tag: DW_TAG_typedef, name: "addr_diff_vec_flags", file: !2302, line: 133, baseType: !2619)
!2619 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2302, line: 115, size: 32, elements: !2620)
!2620 = !{!2621, !2622, !2623, !2624, !2625, !2626, !2627, !2628}
!2621 = !DIDerivedType(tag: DW_TAG_member, name: "min_align", scope: !2619, file: !2302, line: 118, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!2622 = !DIDerivedType(tag: DW_TAG_member, name: "base_after_vec", scope: !2619, file: !2302, line: 120, baseType: !7, size: 1, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!2623 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_vec", scope: !2619, file: !2302, line: 121, baseType: !7, size: 1, offset: 9, flags: DIFlagBitField, extraData: i64 0)
!2624 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_vec", scope: !2619, file: !2302, line: 123, baseType: !7, size: 1, offset: 10, flags: DIFlagBitField, extraData: i64 0)
!2625 = !DIDerivedType(tag: DW_TAG_member, name: "min_after_base", scope: !2619, file: !2302, line: 125, baseType: !7, size: 1, offset: 11, flags: DIFlagBitField, extraData: i64 0)
!2626 = !DIDerivedType(tag: DW_TAG_member, name: "max_after_base", scope: !2619, file: !2302, line: 127, baseType: !7, size: 1, offset: 12, flags: DIFlagBitField, extraData: i64 0)
!2627 = !DIDerivedType(tag: DW_TAG_member, name: "offset_unsigned", scope: !2619, file: !2302, line: 130, baseType: !7, size: 1, offset: 13, flags: DIFlagBitField, extraData: i64 0)
!2628 = !DIDerivedType(tag: DW_TAG_member, name: "scale", scope: !2619, file: !2302, line: 132, baseType: !7, size: 8, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2629 = !DIDerivedType(tag: DW_TAG_member, name: "rt_cselib", scope: !2597, file: !2302, line: 175, baseType: !2630, size: 64)
!2630 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2631, size: 64)
!2631 = !DICompositeType(tag: DW_TAG_structure_type, name: "cselib_val_struct", file: !2302, line: 175, flags: DIFlagFwdDecl)
!2632 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bit", scope: !2597, file: !2302, line: 176, baseType: !2633, size: 64)
!2633 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2634, size: 64)
!2634 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_head_def", file: !2635, line: 75, size: 256, elements: !2636)
!2635 = !DIFile(filename: "./bitmap.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2636 = !{!2637, !2652, !2653, !2654}
!2637 = !DIDerivedType(tag: DW_TAG_member, name: "first", scope: !2634, file: !2635, line: 76, baseType: !2638, size: 64)
!2638 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2639, size: 64)
!2639 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_element", file: !2635, line: 68, baseType: !2640)
!2640 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_element_def", file: !2635, line: 63, size: 320, elements: !2641)
!2641 = !{!2642, !2644, !2645, !2646}
!2642 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !2640, file: !2635, line: 64, baseType: !2643, size: 64)
!2643 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2640, size: 64)
!2644 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2640, file: !2635, line: 65, baseType: !2643, size: 64, offset: 64)
!2645 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2640, file: !2635, line: 66, baseType: !7, size: 32, offset: 128)
!2646 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !2640, file: !2635, line: 67, baseType: !2647, size: 128, offset: 192)
!2647 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2648, size: 128, elements: !2650)
!2648 = !DIDerivedType(tag: DW_TAG_typedef, name: "BITMAP_WORD", file: !2635, line: 29, baseType: !2649)
!2649 = !DIBasicType(name: "long unsigned int", size: 64, encoding: DW_ATE_unsigned)
!2650 = !{!2651}
!2651 = !DISubrange(count: 2)
!2652 = !DIDerivedType(tag: DW_TAG_member, name: "current", scope: !2634, file: !2635, line: 77, baseType: !2638, size: 64, offset: 64)
!2653 = !DIDerivedType(tag: DW_TAG_member, name: "indx", scope: !2634, file: !2635, line: 78, baseType: !7, size: 32, offset: 128)
!2654 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2634, file: !2635, line: 79, baseType: !2655, size: 64, offset: 192)
!2655 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2656, size: 64)
!2656 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_obstack", file: !2635, line: 49, baseType: !2657)
!2657 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "bitmap_obstack", file: !2635, line: 45, size: 832, elements: !2658)
!2658 = !{!2659, !2660, !2661}
!2659 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2657, file: !2635, line: 46, baseType: !2643, size: 64)
!2660 = !DIDerivedType(tag: DW_TAG_member, name: "heads", scope: !2657, file: !2635, line: 47, baseType: !2633, size: 64, offset: 64)
!2661 = !DIDerivedType(tag: DW_TAG_member, name: "obstack", scope: !2657, file: !2635, line: 48, baseType: !2662, size: 704, offset: 128)
!2662 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "obstack", file: !2663, line: 164, size: 704, elements: !2664)
!2663 = !DIFile(filename: "./include/obstack.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2664 = !{!2665, !2667, !2678, !2679, !2680, !2681, !2682, !2683, !2687, !2691, !2692, !2693, !2694}
!2665 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_size", scope: !2662, file: !2663, line: 166, baseType: !2666, size: 64)
!2666 = !DIBasicType(name: "long int", size: 64, encoding: DW_ATE_signed)
!2667 = !DIDerivedType(tag: DW_TAG_member, name: "chunk", scope: !2662, file: !2663, line: 167, baseType: !2668, size: 64, offset: 64)
!2668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2669, size: 64)
!2669 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "_obstack_chunk", file: !2663, line: 157, size: 192, elements: !2670)
!2670 = !{!2671, !2673, !2674}
!2671 = !DIDerivedType(tag: DW_TAG_member, name: "limit", scope: !2669, file: !2663, line: 159, baseType: !2672, size: 64)
!2672 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2604, size: 64)
!2673 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !2669, file: !2663, line: 160, baseType: !2668, size: 64, offset: 64)
!2674 = !DIDerivedType(tag: DW_TAG_member, name: "contents", scope: !2669, file: !2663, line: 161, baseType: !2675, size: 32, offset: 128)
!2675 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2604, size: 32, elements: !2676)
!2676 = !{!2677}
!2677 = !DISubrange(count: 4)
!2678 = !DIDerivedType(tag: DW_TAG_member, name: "object_base", scope: !2662, file: !2663, line: 168, baseType: !2672, size: 64, offset: 128)
!2679 = !DIDerivedType(tag: DW_TAG_member, name: "next_free", scope: !2662, file: !2663, line: 169, baseType: !2672, size: 64, offset: 192)
!2680 = !DIDerivedType(tag: DW_TAG_member, name: "chunk_limit", scope: !2662, file: !2663, line: 170, baseType: !2672, size: 64, offset: 256)
!2681 = !DIDerivedType(tag: DW_TAG_member, name: "temp", scope: !2662, file: !2663, line: 171, baseType: !2666, size: 64, offset: 320)
!2682 = !DIDerivedType(tag: DW_TAG_member, name: "alignment_mask", scope: !2662, file: !2663, line: 172, baseType: !2545, size: 32, offset: 384)
!2683 = !DIDerivedType(tag: DW_TAG_member, name: "chunkfun", scope: !2662, file: !2663, line: 176, baseType: !2684, size: 64, offset: 448)
!2684 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2685, size: 64)
!2685 = !DISubroutineType(types: !2686)
!2686 = !{!2668, !2544, !2666}
!2687 = !DIDerivedType(tag: DW_TAG_member, name: "freefun", scope: !2662, file: !2663, line: 177, baseType: !2688, size: 64, offset: 512)
!2688 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2689, size: 64)
!2689 = !DISubroutineType(types: !2690)
!2690 = !{null, !2544, !2668}
!2691 = !DIDerivedType(tag: DW_TAG_member, name: "extra_arg", scope: !2662, file: !2663, line: 178, baseType: !2544, size: 64, offset: 576)
!2692 = !DIDerivedType(tag: DW_TAG_member, name: "use_extra_arg", scope: !2662, file: !2663, line: 179, baseType: !7, size: 1, offset: 640, flags: DIFlagBitField, extraData: i64 640)
!2693 = !DIDerivedType(tag: DW_TAG_member, name: "maybe_empty_object", scope: !2662, file: !2663, line: 180, baseType: !7, size: 1, offset: 641, flags: DIFlagBitField, extraData: i64 640)
!2694 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_failed", scope: !2662, file: !2663, line: 184, baseType: !7, size: 1, offset: 642, flags: DIFlagBitField, extraData: i64 640)
!2695 = !DIDerivedType(tag: DW_TAG_member, name: "rt_tree", scope: !2597, file: !2302, line: 177, baseType: !2696, size: 64)
!2696 = !DIDerivedType(tag: DW_TAG_typedef, name: "tree", file: !2524, line: 56, baseType: !2697)
!2697 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2698, size: 64)
!2698 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_node", file: !396, line: 3371, size: 1792, elements: !2699)
!2699 = !{!2700, !2733, !2739, !2750, !2769, !2780, !2785, !2792, !2798, !2812, !2824, !2862, !2867, !2895, !2903, !2904, !2909, !2918, !2924, !2929, !2933, !2937, !3287, !3336, !3342, !3348, !3355, !3378, !3392, !3409, !3421, !3443, !3458, !3630}
!2700 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2698, file: !396, line: 3372, baseType: !2701, size: 64)
!2701 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_base", file: !396, line: 360, size: 64, elements: !2702)
!2702 = !{!2703, !2704, !2705, !2706, !2707, !2708, !2709, !2710, !2711, !2712, !2713, !2714, !2715, !2716, !2717, !2718, !2719, !2720, !2721, !2722, !2723, !2724, !2725, !2726, !2727, !2728, !2729, !2730, !2731, !2732}
!2703 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !2701, file: !396, line: 361, baseType: !7, size: 16, flags: DIFlagBitField, extraData: i64 0)
!2704 = !DIDerivedType(tag: DW_TAG_member, name: "side_effects_flag", scope: !2701, file: !396, line: 363, baseType: !7, size: 1, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!2705 = !DIDerivedType(tag: DW_TAG_member, name: "constant_flag", scope: !2701, file: !396, line: 364, baseType: !7, size: 1, offset: 17, flags: DIFlagBitField, extraData: i64 0)
!2706 = !DIDerivedType(tag: DW_TAG_member, name: "addressable_flag", scope: !2701, file: !396, line: 365, baseType: !7, size: 1, offset: 18, flags: DIFlagBitField, extraData: i64 0)
!2707 = !DIDerivedType(tag: DW_TAG_member, name: "volatile_flag", scope: !2701, file: !396, line: 366, baseType: !7, size: 1, offset: 19, flags: DIFlagBitField, extraData: i64 0)
!2708 = !DIDerivedType(tag: DW_TAG_member, name: "readonly_flag", scope: !2701, file: !396, line: 367, baseType: !7, size: 1, offset: 20, flags: DIFlagBitField, extraData: i64 0)
!2709 = !DIDerivedType(tag: DW_TAG_member, name: "unsigned_flag", scope: !2701, file: !396, line: 368, baseType: !7, size: 1, offset: 21, flags: DIFlagBitField, extraData: i64 0)
!2710 = !DIDerivedType(tag: DW_TAG_member, name: "asm_written_flag", scope: !2701, file: !396, line: 369, baseType: !7, size: 1, offset: 22, flags: DIFlagBitField, extraData: i64 0)
!2711 = !DIDerivedType(tag: DW_TAG_member, name: "nowarning_flag", scope: !2701, file: !396, line: 370, baseType: !7, size: 1, offset: 23, flags: DIFlagBitField, extraData: i64 0)
!2712 = !DIDerivedType(tag: DW_TAG_member, name: "used_flag", scope: !2701, file: !396, line: 372, baseType: !7, size: 1, offset: 24, flags: DIFlagBitField, extraData: i64 0)
!2713 = !DIDerivedType(tag: DW_TAG_member, name: "nothrow_flag", scope: !2701, file: !396, line: 373, baseType: !7, size: 1, offset: 25, flags: DIFlagBitField, extraData: i64 0)
!2714 = !DIDerivedType(tag: DW_TAG_member, name: "static_flag", scope: !2701, file: !396, line: 374, baseType: !7, size: 1, offset: 26, flags: DIFlagBitField, extraData: i64 0)
!2715 = !DIDerivedType(tag: DW_TAG_member, name: "public_flag", scope: !2701, file: !396, line: 375, baseType: !7, size: 1, offset: 27, flags: DIFlagBitField, extraData: i64 0)
!2716 = !DIDerivedType(tag: DW_TAG_member, name: "private_flag", scope: !2701, file: !396, line: 376, baseType: !7, size: 1, offset: 28, flags: DIFlagBitField, extraData: i64 0)
!2717 = !DIDerivedType(tag: DW_TAG_member, name: "protected_flag", scope: !2701, file: !396, line: 377, baseType: !7, size: 1, offset: 29, flags: DIFlagBitField, extraData: i64 0)
!2718 = !DIDerivedType(tag: DW_TAG_member, name: "deprecated_flag", scope: !2701, file: !396, line: 378, baseType: !7, size: 1, offset: 30, flags: DIFlagBitField, extraData: i64 0)
!2719 = !DIDerivedType(tag: DW_TAG_member, name: "saturating_flag", scope: !2701, file: !396, line: 379, baseType: !7, size: 1, offset: 31, flags: DIFlagBitField, extraData: i64 0)
!2720 = !DIDerivedType(tag: DW_TAG_member, name: "default_def_flag", scope: !2701, file: !396, line: 381, baseType: !7, size: 1, offset: 32, flags: DIFlagBitField, extraData: i64 0)
!2721 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2701, file: !396, line: 382, baseType: !7, size: 1, offset: 33, flags: DIFlagBitField, extraData: i64 0)
!2722 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2701, file: !396, line: 383, baseType: !7, size: 1, offset: 34, flags: DIFlagBitField, extraData: i64 0)
!2723 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2701, file: !396, line: 384, baseType: !7, size: 1, offset: 35, flags: DIFlagBitField, extraData: i64 0)
!2724 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2701, file: !396, line: 385, baseType: !7, size: 1, offset: 36, flags: DIFlagBitField, extraData: i64 0)
!2725 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2701, file: !396, line: 386, baseType: !7, size: 1, offset: 37, flags: DIFlagBitField, extraData: i64 0)
!2726 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2701, file: !396, line: 387, baseType: !7, size: 1, offset: 38, flags: DIFlagBitField, extraData: i64 0)
!2727 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2701, file: !396, line: 388, baseType: !7, size: 1, offset: 39, flags: DIFlagBitField, extraData: i64 0)
!2728 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !2701, file: !396, line: 390, baseType: !7, size: 1, offset: 40, flags: DIFlagBitField, extraData: i64 0)
!2729 = !DIDerivedType(tag: DW_TAG_member, name: "packed_flag", scope: !2701, file: !396, line: 391, baseType: !7, size: 1, offset: 41, flags: DIFlagBitField, extraData: i64 0)
!2730 = !DIDerivedType(tag: DW_TAG_member, name: "user_align", scope: !2701, file: !396, line: 392, baseType: !7, size: 1, offset: 42, flags: DIFlagBitField, extraData: i64 0)
!2731 = !DIDerivedType(tag: DW_TAG_member, name: "spare", scope: !2701, file: !396, line: 394, baseType: !7, size: 13, offset: 43, flags: DIFlagBitField, extraData: i64 0)
!2732 = !DIDerivedType(tag: DW_TAG_member, name: "address_space", scope: !2701, file: !396, line: 399, baseType: !7, size: 8, offset: 56, flags: DIFlagBitField, extraData: i64 0)
!2733 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2698, file: !396, line: 3373, baseType: !2734, size: 192)
!2734 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_common", file: !396, line: 402, size: 192, elements: !2735)
!2735 = !{!2736, !2737, !2738}
!2736 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !2734, file: !396, line: 403, baseType: !2701, size: 64)
!2737 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !2734, file: !396, line: 404, baseType: !2696, size: 64, offset: 64)
!2738 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2734, file: !396, line: 405, baseType: !2696, size: 64, offset: 128)
!2739 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2698, file: !396, line: 3374, baseType: !2740, size: 320)
!2740 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_int_cst", file: !396, line: 1384, size: 320, elements: !2741)
!2741 = !{!2742, !2743}
!2742 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2740, file: !396, line: 1385, baseType: !2734, size: 192)
!2743 = !DIDerivedType(tag: DW_TAG_member, name: "int_cst", scope: !2740, file: !396, line: 1386, baseType: !2744, size: 128, offset: 192)
!2744 = !DIDerivedType(tag: DW_TAG_typedef, name: "double_int", file: !2745, line: 58, baseType: !2746)
!2745 = !DIFile(filename: "./double-int.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2746 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2745, line: 54, size: 128, elements: !2747)
!2747 = !{!2748, !2749}
!2748 = !DIDerivedType(tag: DW_TAG_member, name: "low", scope: !2746, file: !2745, line: 56, baseType: !2649, size: 64)
!2749 = !DIDerivedType(tag: DW_TAG_member, name: "high", scope: !2746, file: !2745, line: 57, baseType: !2666, size: 64, offset: 64)
!2750 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst", scope: !2698, file: !396, line: 3375, baseType: !2751, size: 256)
!2751 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_real_cst", file: !396, line: 1397, size: 256, elements: !2752)
!2752 = !{!2753, !2754}
!2753 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2751, file: !396, line: 1398, baseType: !2734, size: 192)
!2754 = !DIDerivedType(tag: DW_TAG_member, name: "real_cst_ptr", scope: !2751, file: !396, line: 1399, baseType: !2755, size: 64, offset: 192)
!2755 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2756, size: 64)
!2756 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "real_value", file: !2757, line: 52, size: 256, elements: !2758)
!2757 = !DIFile(filename: "./real.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2758 = !{!2759, !2760, !2761, !2762, !2763, !2764, !2765}
!2759 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !2756, file: !2757, line: 56, baseType: !7, size: 2, flags: DIFlagBitField, extraData: i64 0)
!2760 = !DIDerivedType(tag: DW_TAG_member, name: "decimal", scope: !2756, file: !2757, line: 57, baseType: !7, size: 1, offset: 2, flags: DIFlagBitField, extraData: i64 0)
!2761 = !DIDerivedType(tag: DW_TAG_member, name: "sign", scope: !2756, file: !2757, line: 58, baseType: !7, size: 1, offset: 3, flags: DIFlagBitField, extraData: i64 0)
!2762 = !DIDerivedType(tag: DW_TAG_member, name: "signalling", scope: !2756, file: !2757, line: 59, baseType: !7, size: 1, offset: 4, flags: DIFlagBitField, extraData: i64 0)
!2763 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !2756, file: !2757, line: 60, baseType: !7, size: 1, offset: 5, flags: DIFlagBitField, extraData: i64 0)
!2764 = !DIDerivedType(tag: DW_TAG_member, name: "uexp", scope: !2756, file: !2757, line: 61, baseType: !7, size: 26, offset: 6, flags: DIFlagBitField, extraData: i64 0)
!2765 = !DIDerivedType(tag: DW_TAG_member, name: "sig", scope: !2756, file: !2757, line: 62, baseType: !2766, size: 192, offset: 64)
!2766 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2649, size: 192, elements: !2767)
!2767 = !{!2768}
!2768 = !DISubrange(count: 3)
!2769 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst", scope: !2698, file: !396, line: 3376, baseType: !2770, size: 256)
!2770 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_fixed_cst", file: !396, line: 1408, size: 256, elements: !2771)
!2771 = !{!2772, !2773}
!2772 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2770, file: !396, line: 1409, baseType: !2734, size: 192)
!2773 = !DIDerivedType(tag: DW_TAG_member, name: "fixed_cst_ptr", scope: !2770, file: !396, line: 1410, baseType: !2774, size: 64, offset: 192)
!2774 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2775, size: 64)
!2775 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fixed_value", file: !2776, line: 27, size: 192, elements: !2777)
!2776 = !DIFile(filename: "./fixed-value.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2777 = !{!2778, !2779}
!2778 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !2775, file: !2776, line: 29, baseType: !2744, size: 128)
!2779 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2775, file: !2776, line: 30, baseType: !231, size: 32, offset: 128)
!2780 = !DIDerivedType(tag: DW_TAG_member, name: "vector", scope: !2698, file: !396, line: 3377, baseType: !2781, size: 256)
!2781 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vector", file: !396, line: 1437, size: 256, elements: !2782)
!2782 = !{!2783, !2784}
!2783 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2781, file: !396, line: 1438, baseType: !2734, size: 192)
!2784 = !DIDerivedType(tag: DW_TAG_member, name: "elements", scope: !2781, file: !396, line: 1439, baseType: !2696, size: 64, offset: 192)
!2785 = !DIDerivedType(tag: DW_TAG_member, name: "string", scope: !2698, file: !396, line: 3378, baseType: !2786, size: 256)
!2786 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_string", file: !396, line: 1418, size: 256, elements: !2787)
!2787 = !{!2788, !2789, !2790}
!2788 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2786, file: !396, line: 1419, baseType: !2734, size: 192)
!2789 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !2786, file: !396, line: 1420, baseType: !2545, size: 32, offset: 192)
!2790 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2786, file: !396, line: 1421, baseType: !2791, size: 8, offset: 224)
!2791 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2604, size: 8, elements: !2614)
!2792 = !DIDerivedType(tag: DW_TAG_member, name: "complex", scope: !2698, file: !396, line: 3379, baseType: !2793, size: 320)
!2793 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_complex", file: !396, line: 1428, size: 320, elements: !2794)
!2794 = !{!2795, !2796, !2797}
!2795 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2793, file: !396, line: 1429, baseType: !2734, size: 192)
!2796 = !DIDerivedType(tag: DW_TAG_member, name: "real", scope: !2793, file: !396, line: 1430, baseType: !2696, size: 64, offset: 192)
!2797 = !DIDerivedType(tag: DW_TAG_member, name: "imag", scope: !2793, file: !396, line: 1431, baseType: !2696, size: 64, offset: 256)
!2798 = !DIDerivedType(tag: DW_TAG_member, name: "identifier", scope: !2698, file: !396, line: 3380, baseType: !2799, size: 320)
!2799 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_identifier", file: !396, line: 1460, size: 320, elements: !2800)
!2800 = !{!2801, !2802}
!2801 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2799, file: !396, line: 1461, baseType: !2734, size: 192)
!2802 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !2799, file: !396, line: 1462, baseType: !2803, size: 128, offset: 192)
!2803 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ht_identifier", file: !2804, line: 31, size: 128, elements: !2805)
!2804 = !DIFile(filename: "./symtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2805 = !{!2806, !2810, !2811}
!2806 = !DIDerivedType(tag: DW_TAG_member, name: "str", scope: !2803, file: !2804, line: 32, baseType: !2807, size: 64)
!2807 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2808, size: 64)
!2808 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2809)
!2809 = !DIBasicType(name: "unsigned char", size: 8, encoding: DW_ATE_unsigned_char)
!2810 = !DIDerivedType(tag: DW_TAG_member, name: "len", scope: !2803, file: !2804, line: 33, baseType: !7, size: 32, offset: 64)
!2811 = !DIDerivedType(tag: DW_TAG_member, name: "hash_value", scope: !2803, file: !2804, line: 34, baseType: !7, size: 32, offset: 96)
!2812 = !DIDerivedType(tag: DW_TAG_member, name: "decl_minimal", scope: !2698, file: !396, line: 3381, baseType: !2813, size: 384)
!2813 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_minimal", file: !396, line: 2507, size: 384, elements: !2814)
!2814 = !{!2815, !2816, !2821, !2822, !2823}
!2815 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2813, file: !396, line: 2508, baseType: !2734, size: 192)
!2816 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !2813, file: !396, line: 2509, baseType: !2817, size: 32, offset: 192)
!2817 = !DIDerivedType(tag: DW_TAG_typedef, name: "location_t", file: !2818, line: 58, baseType: !2819)
!2818 = !DIFile(filename: "./input.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2819 = !DIDerivedType(tag: DW_TAG_typedef, name: "source_location", file: !2820, line: 44, baseType: !7)
!2820 = !DIFile(filename: "./line-map.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2821 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !2813, file: !396, line: 2510, baseType: !7, size: 32, offset: 224)
!2822 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !2813, file: !396, line: 2511, baseType: !2696, size: 64, offset: 256)
!2823 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !2813, file: !396, line: 2512, baseType: !2696, size: 64, offset: 320)
!2824 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common", scope: !2698, file: !396, line: 3382, baseType: !2825, size: 896)
!2825 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_common", file: !396, line: 2652, size: 896, elements: !2826)
!2826 = !{!2827, !2828, !2829, !2830, !2831, !2832, !2833, !2834, !2835, !2836, !2837, !2838, !2839, !2840, !2841, !2842, !2843, !2844, !2845, !2846, !2847, !2848, !2849, !2850, !2851, !2852, !2853, !2854, !2855, !2856, !2857, !2858, !2859}
!2827 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2825, file: !396, line: 2653, baseType: !2813, size: 384)
!2828 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !2825, file: !396, line: 2654, baseType: !2696, size: 64, offset: 384)
!2829 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !2825, file: !396, line: 2656, baseType: !7, size: 8, offset: 448, flags: DIFlagBitField, extraData: i64 448)
!2830 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_flag", scope: !2825, file: !396, line: 2658, baseType: !7, size: 1, offset: 456, flags: DIFlagBitField, extraData: i64 448)
!2831 = !DIDerivedType(tag: DW_TAG_member, name: "virtual_flag", scope: !2825, file: !396, line: 2659, baseType: !7, size: 1, offset: 457, flags: DIFlagBitField, extraData: i64 448)
!2832 = !DIDerivedType(tag: DW_TAG_member, name: "ignored_flag", scope: !2825, file: !396, line: 2660, baseType: !7, size: 1, offset: 458, flags: DIFlagBitField, extraData: i64 448)
!2833 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !2825, file: !396, line: 2661, baseType: !7, size: 1, offset: 459, flags: DIFlagBitField, extraData: i64 448)
!2834 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_flag", scope: !2825, file: !396, line: 2662, baseType: !7, size: 1, offset: 460, flags: DIFlagBitField, extraData: i64 448)
!2835 = !DIDerivedType(tag: DW_TAG_member, name: "preserve_flag", scope: !2825, file: !396, line: 2663, baseType: !7, size: 1, offset: 461, flags: DIFlagBitField, extraData: i64 448)
!2836 = !DIDerivedType(tag: DW_TAG_member, name: "debug_expr_is_from", scope: !2825, file: !396, line: 2664, baseType: !7, size: 1, offset: 462, flags: DIFlagBitField, extraData: i64 448)
!2837 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !2825, file: !396, line: 2666, baseType: !7, size: 1, offset: 463, flags: DIFlagBitField, extraData: i64 448)
!2838 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !2825, file: !396, line: 2667, baseType: !7, size: 1, offset: 464, flags: DIFlagBitField, extraData: i64 448)
!2839 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !2825, file: !396, line: 2668, baseType: !7, size: 1, offset: 465, flags: DIFlagBitField, extraData: i64 448)
!2840 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !2825, file: !396, line: 2669, baseType: !7, size: 1, offset: 466, flags: DIFlagBitField, extraData: i64 448)
!2841 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !2825, file: !396, line: 2670, baseType: !7, size: 1, offset: 467, flags: DIFlagBitField, extraData: i64 448)
!2842 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !2825, file: !396, line: 2671, baseType: !7, size: 1, offset: 468, flags: DIFlagBitField, extraData: i64 448)
!2843 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !2825, file: !396, line: 2672, baseType: !7, size: 1, offset: 469, flags: DIFlagBitField, extraData: i64 448)
!2844 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_7", scope: !2825, file: !396, line: 2673, baseType: !7, size: 1, offset: 470, flags: DIFlagBitField, extraData: i64 448)
!2845 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_8", scope: !2825, file: !396, line: 2674, baseType: !7, size: 1, offset: 471, flags: DIFlagBitField, extraData: i64 448)
!2846 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_0", scope: !2825, file: !396, line: 2678, baseType: !7, size: 1, offset: 472, flags: DIFlagBitField, extraData: i64 448)
!2847 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_1", scope: !2825, file: !396, line: 2682, baseType: !7, size: 1, offset: 473, flags: DIFlagBitField, extraData: i64 448)
!2848 = !DIDerivedType(tag: DW_TAG_member, name: "decl_flag_2", scope: !2825, file: !396, line: 2685, baseType: !7, size: 1, offset: 474, flags: DIFlagBitField, extraData: i64 448)
!2849 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reg_flag", scope: !2825, file: !396, line: 2688, baseType: !7, size: 1, offset: 475, flags: DIFlagBitField, extraData: i64 448)
!2850 = !DIDerivedType(tag: DW_TAG_member, name: "decl_by_reference_flag", scope: !2825, file: !396, line: 2690, baseType: !7, size: 1, offset: 476, flags: DIFlagBitField, extraData: i64 448)
!2851 = !DIDerivedType(tag: DW_TAG_member, name: "decl_restricted_flag", scope: !2825, file: !396, line: 2692, baseType: !7, size: 1, offset: 477, flags: DIFlagBitField, extraData: i64 448)
!2852 = !DIDerivedType(tag: DW_TAG_member, name: "decl_common_unused", scope: !2825, file: !396, line: 2695, baseType: !7, size: 2, offset: 478, flags: DIFlagBitField, extraData: i64 448)
!2853 = !DIDerivedType(tag: DW_TAG_member, name: "off_align", scope: !2825, file: !396, line: 2698, baseType: !7, size: 8, offset: 480, flags: DIFlagBitField, extraData: i64 448)
!2854 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !2825, file: !396, line: 2703, baseType: !7, size: 32, offset: 512)
!2855 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !2825, file: !396, line: 2705, baseType: !2696, size: 64, offset: 576)
!2856 = !DIDerivedType(tag: DW_TAG_member, name: "initial", scope: !2825, file: !396, line: 2706, baseType: !2696, size: 64, offset: 640)
!2857 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !2825, file: !396, line: 2707, baseType: !2696, size: 64, offset: 704)
!2858 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !2825, file: !396, line: 2708, baseType: !2696, size: 64, offset: 768)
!2859 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !2825, file: !396, line: 2711, baseType: !2860, size: 64, offset: 832)
!2860 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2861, size: 64)
!2861 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_decl", file: !396, line: 2711, flags: DIFlagFwdDecl)
!2862 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_rtl", scope: !2698, file: !396, line: 3383, baseType: !2863, size: 960)
!2863 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_rtl", file: !396, line: 2756, size: 960, elements: !2864)
!2864 = !{!2865, !2866}
!2865 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2863, file: !396, line: 2757, baseType: !2825, size: 896)
!2866 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !2863, file: !396, line: 2758, baseType: !2577, size: 64, offset: 896)
!2867 = !DIDerivedType(tag: DW_TAG_member, name: "decl_non_common", scope: !2698, file: !396, line: 3384, baseType: !2868, size: 1472)
!2868 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_non_common", file: !396, line: 3114, size: 1472, elements: !2869)
!2869 = !{!2870, !2891, !2892, !2893, !2894}
!2870 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2868, file: !396, line: 3115, baseType: !2871, size: 1216)
!2871 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_decl_with_vis", file: !396, line: 2984, size: 1216, elements: !2872)
!2872 = !{!2873, !2874, !2875, !2876, !2877, !2878, !2879, !2880, !2881, !2882, !2883, !2884, !2885, !2886, !2887, !2888, !2889, !2890}
!2873 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2871, file: !396, line: 2985, baseType: !2863, size: 960)
!2874 = !DIDerivedType(tag: DW_TAG_member, name: "assembler_name", scope: !2871, file: !396, line: 2986, baseType: !2696, size: 64, offset: 960)
!2875 = !DIDerivedType(tag: DW_TAG_member, name: "section_name", scope: !2871, file: !396, line: 2987, baseType: !2696, size: 64, offset: 1024)
!2876 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_group", scope: !2871, file: !396, line: 2988, baseType: !2696, size: 64, offset: 1088)
!2877 = !DIDerivedType(tag: DW_TAG_member, name: "defer_output", scope: !2871, file: !396, line: 2991, baseType: !7, size: 1, offset: 1152, flags: DIFlagBitField, extraData: i64 1152)
!2878 = !DIDerivedType(tag: DW_TAG_member, name: "hard_register", scope: !2871, file: !396, line: 2992, baseType: !7, size: 1, offset: 1153, flags: DIFlagBitField, extraData: i64 1152)
!2879 = !DIDerivedType(tag: DW_TAG_member, name: "thread_local", scope: !2871, file: !396, line: 2993, baseType: !7, size: 1, offset: 1154, flags: DIFlagBitField, extraData: i64 1152)
!2880 = !DIDerivedType(tag: DW_TAG_member, name: "common_flag", scope: !2871, file: !396, line: 2994, baseType: !7, size: 1, offset: 1155, flags: DIFlagBitField, extraData: i64 1152)
!2881 = !DIDerivedType(tag: DW_TAG_member, name: "in_text_section", scope: !2871, file: !396, line: 2995, baseType: !7, size: 1, offset: 1156, flags: DIFlagBitField, extraData: i64 1152)
!2882 = !DIDerivedType(tag: DW_TAG_member, name: "dllimport_flag", scope: !2871, file: !396, line: 2996, baseType: !7, size: 1, offset: 1157, flags: DIFlagBitField, extraData: i64 1152)
!2883 = !DIDerivedType(tag: DW_TAG_member, name: "shadowed_for_var_p", scope: !2871, file: !396, line: 2998, baseType: !7, size: 1, offset: 1158, flags: DIFlagBitField, extraData: i64 1152)
!2884 = !DIDerivedType(tag: DW_TAG_member, name: "weak_flag", scope: !2871, file: !396, line: 3000, baseType: !7, size: 1, offset: 1159, flags: DIFlagBitField, extraData: i64 1152)
!2885 = !DIDerivedType(tag: DW_TAG_member, name: "seen_in_bind_expr", scope: !2871, file: !396, line: 3002, baseType: !7, size: 1, offset: 1160, flags: DIFlagBitField, extraData: i64 1152)
!2886 = !DIDerivedType(tag: DW_TAG_member, name: "comdat_flag", scope: !2871, file: !396, line: 3003, baseType: !7, size: 1, offset: 1161, flags: DIFlagBitField, extraData: i64 1152)
!2887 = !DIDerivedType(tag: DW_TAG_member, name: "visibility", scope: !2871, file: !396, line: 3004, baseType: !7, size: 2, offset: 1162, flags: DIFlagBitField, extraData: i64 1152)
!2888 = !DIDerivedType(tag: DW_TAG_member, name: "visibility_specified", scope: !2871, file: !396, line: 3005, baseType: !7, size: 1, offset: 1164, flags: DIFlagBitField, extraData: i64 1152)
!2889 = !DIDerivedType(tag: DW_TAG_member, name: "tls_model", scope: !2871, file: !396, line: 3007, baseType: !7, size: 3, offset: 1165, flags: DIFlagBitField, extraData: i64 1152)
!2890 = !DIDerivedType(tag: DW_TAG_member, name: "init_priority_p", scope: !2871, file: !396, line: 3010, baseType: !7, size: 1, offset: 1168, flags: DIFlagBitField, extraData: i64 1152)
!2891 = !DIDerivedType(tag: DW_TAG_member, name: "saved_tree", scope: !2868, file: !396, line: 3117, baseType: !2696, size: 64, offset: 1216)
!2892 = !DIDerivedType(tag: DW_TAG_member, name: "arguments", scope: !2868, file: !396, line: 3119, baseType: !2696, size: 64, offset: 1280)
!2893 = !DIDerivedType(tag: DW_TAG_member, name: "result", scope: !2868, file: !396, line: 3121, baseType: !2696, size: 64, offset: 1344)
!2894 = !DIDerivedType(tag: DW_TAG_member, name: "vindex", scope: !2868, file: !396, line: 3123, baseType: !2696, size: 64, offset: 1408)
!2895 = !DIDerivedType(tag: DW_TAG_member, name: "parm_decl", scope: !2698, file: !396, line: 3385, baseType: !2896, size: 1088)
!2896 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_parm_decl", file: !396, line: 2874, size: 1088, elements: !2897)
!2897 = !{!2898, !2899, !2900}
!2898 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2896, file: !396, line: 2875, baseType: !2863, size: 960)
!2899 = !DIDerivedType(tag: DW_TAG_member, name: "incoming_rtl", scope: !2896, file: !396, line: 2876, baseType: !2577, size: 64, offset: 960)
!2900 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2896, file: !396, line: 2877, baseType: !2901, size: 64, offset: 1024)
!2901 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2902, size: 64)
!2902 = !DICompositeType(tag: DW_TAG_structure_type, name: "var_ann_d", file: !396, line: 2856, flags: DIFlagFwdDecl)
!2903 = !DIDerivedType(tag: DW_TAG_member, name: "decl_with_vis", scope: !2698, file: !396, line: 3386, baseType: !2871, size: 1216)
!2904 = !DIDerivedType(tag: DW_TAG_member, name: "var_decl", scope: !2698, file: !396, line: 3387, baseType: !2905, size: 1280)
!2905 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_var_decl", file: !396, line: 3093, size: 1280, elements: !2906)
!2906 = !{!2907, !2908}
!2907 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2905, file: !396, line: 3094, baseType: !2871, size: 1216)
!2908 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2905, file: !396, line: 3095, baseType: !2901, size: 64, offset: 1216)
!2909 = !DIDerivedType(tag: DW_TAG_member, name: "field_decl", scope: !2698, file: !396, line: 3388, baseType: !2910, size: 1216)
!2910 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_field_decl", file: !396, line: 2824, size: 1216, elements: !2911)
!2911 = !{!2912, !2913, !2914, !2915, !2916, !2917}
!2912 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2910, file: !396, line: 2825, baseType: !2825, size: 896)
!2913 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !2910, file: !396, line: 2827, baseType: !2696, size: 64, offset: 896)
!2914 = !DIDerivedType(tag: DW_TAG_member, name: "bit_field_type", scope: !2910, file: !396, line: 2828, baseType: !2696, size: 64, offset: 960)
!2915 = !DIDerivedType(tag: DW_TAG_member, name: "qualifier", scope: !2910, file: !396, line: 2829, baseType: !2696, size: 64, offset: 1024)
!2916 = !DIDerivedType(tag: DW_TAG_member, name: "bit_offset", scope: !2910, file: !396, line: 2830, baseType: !2696, size: 64, offset: 1088)
!2917 = !DIDerivedType(tag: DW_TAG_member, name: "fcontext", scope: !2910, file: !396, line: 2831, baseType: !2696, size: 64, offset: 1152)
!2918 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl", scope: !2698, file: !396, line: 3389, baseType: !2919, size: 1024)
!2919 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_label_decl", file: !396, line: 2850, size: 1024, elements: !2920)
!2920 = !{!2921, !2922, !2923}
!2921 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2919, file: !396, line: 2851, baseType: !2863, size: 960)
!2922 = !DIDerivedType(tag: DW_TAG_member, name: "label_decl_uid", scope: !2919, file: !396, line: 2852, baseType: !2545, size: 32, offset: 960)
!2923 = !DIDerivedType(tag: DW_TAG_member, name: "eh_landing_pad_nr", scope: !2919, file: !396, line: 2853, baseType: !2545, size: 32, offset: 992)
!2924 = !DIDerivedType(tag: DW_TAG_member, name: "result_decl", scope: !2698, file: !396, line: 3390, baseType: !2925, size: 1024)
!2925 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_result_decl", file: !396, line: 2857, size: 1024, elements: !2926)
!2926 = !{!2927, !2928}
!2927 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2925, file: !396, line: 2858, baseType: !2863, size: 960)
!2928 = !DIDerivedType(tag: DW_TAG_member, name: "ann", scope: !2925, file: !396, line: 2859, baseType: !2901, size: 64, offset: 960)
!2929 = !DIDerivedType(tag: DW_TAG_member, name: "const_decl", scope: !2698, file: !396, line: 3391, baseType: !2930, size: 960)
!2930 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_const_decl", file: !396, line: 2862, size: 960, elements: !2931)
!2931 = !{!2932}
!2932 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2930, file: !396, line: 2863, baseType: !2863, size: 960)
!2933 = !DIDerivedType(tag: DW_TAG_member, name: "type_decl", scope: !2698, file: !396, line: 3392, baseType: !2934, size: 1472)
!2934 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type_decl", file: !396, line: 3304, size: 1472, elements: !2935)
!2935 = !{!2936}
!2936 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2934, file: !396, line: 3305, baseType: !2868, size: 1472)
!2937 = !DIDerivedType(tag: DW_TAG_member, name: "function_decl", scope: !2698, file: !396, line: 3393, baseType: !2938, size: 1792)
!2938 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_function_decl", file: !396, line: 3248, size: 1792, elements: !2939)
!2939 = !{!2940, !2941, !3266, !3267, !3268, !3269, !3270, !3271, !3272, !3273, !3274, !3275, !3276, !3277, !3278, !3279, !3280, !3281, !3282, !3283, !3284, !3285, !3286}
!2940 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !2938, file: !396, line: 3249, baseType: !2868, size: 1472)
!2941 = !DIDerivedType(tag: DW_TAG_member, name: "f", scope: !2938, file: !396, line: 3251, baseType: !2942, size: 64, offset: 1472)
!2942 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2943, size: 64)
!2943 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "function", file: !2944, line: 463, size: 1152, elements: !2945)
!2944 = !DIFile(filename: "./function.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!2945 = !{!2946, !3110, !3140, !3141, !3144, !3210, !3211, !3212, !3213, !3214, !3215, !3239, !3242, !3243, !3244, !3245, !3246, !3247, !3248, !3249, !3250, !3251, !3252, !3253, !3254, !3255, !3256, !3257, !3258, !3259, !3260, !3261, !3262, !3263, !3264, !3265}
!2946 = !DIDerivedType(tag: DW_TAG_member, name: "eh", scope: !2943, file: !2944, line: 464, baseType: !2947, size: 64)
!2947 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2948, size: 64)
!2948 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_status", file: !360, line: 194, size: 384, elements: !2949)
!2949 = !{!2950, !2999, !3012, !3026, !3078, !3091}
!2950 = !DIDerivedType(tag: DW_TAG_member, name: "region_tree", scope: !2948, file: !360, line: 197, baseType: !2951, size: 64)
!2951 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_region", file: !360, line: 182, baseType: !2952)
!2952 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2953, size: 64)
!2953 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_d", file: !360, line: 116, size: 704, elements: !2954)
!2954 = !{!2955, !2956, !2957, !2958, !2959, !2960, !2987, !2996, !2997, !2998}
!2955 = !DIDerivedType(tag: DW_TAG_member, name: "outer", scope: !2953, file: !360, line: 119, baseType: !2952, size: 64)
!2956 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !2953, file: !360, line: 122, baseType: !2952, size: 64, offset: 64)
!2957 = !DIDerivedType(tag: DW_TAG_member, name: "next_peer", scope: !2953, file: !360, line: 123, baseType: !2952, size: 64, offset: 128)
!2958 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2953, file: !360, line: 126, baseType: !2545, size: 32, offset: 192)
!2959 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2953, file: !360, line: 129, baseType: !359, size: 32, offset: 224)
!2960 = !DIDerivedType(tag: DW_TAG_member, name: "u", scope: !2953, file: !360, line: 165, baseType: !2961, size: 192, offset: 256)
!2961 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_region_u", file: !360, line: 132, size: 192, elements: !2962)
!2962 = !{!2963, !2976, !2982}
!2963 = !DIDerivedType(tag: DW_TAG_member, name: "eh_try", scope: !2961, file: !360, line: 137, baseType: !2964, size: 128)
!2964 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_try", file: !360, line: 133, size: 128, elements: !2965)
!2965 = !{!2966, !2975}
!2966 = !DIDerivedType(tag: DW_TAG_member, name: "first_catch", scope: !2964, file: !360, line: 135, baseType: !2967, size: 64)
!2967 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2968, size: 64)
!2968 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_catch_d", file: !360, line: 93, size: 320, elements: !2969)
!2969 = !{!2970, !2971, !2972, !2973, !2974}
!2970 = !DIDerivedType(tag: DW_TAG_member, name: "next_catch", scope: !2968, file: !360, line: 96, baseType: !2967, size: 64)
!2971 = !DIDerivedType(tag: DW_TAG_member, name: "prev_catch", scope: !2968, file: !360, line: 97, baseType: !2967, size: 64, offset: 64)
!2972 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2968, file: !360, line: 101, baseType: !2696, size: 64, offset: 128)
!2973 = !DIDerivedType(tag: DW_TAG_member, name: "filter_list", scope: !2968, file: !360, line: 106, baseType: !2696, size: 64, offset: 192)
!2974 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2968, file: !360, line: 111, baseType: !2696, size: 64, offset: 256)
!2975 = !DIDerivedType(tag: DW_TAG_member, name: "last_catch", scope: !2964, file: !360, line: 136, baseType: !2967, size: 64, offset: 64)
!2976 = !DIDerivedType(tag: DW_TAG_member, name: "allowed", scope: !2961, file: !360, line: 151, baseType: !2977, size: 192)
!2977 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_allowed", file: !360, line: 139, size: 192, elements: !2978)
!2978 = !{!2979, !2980, !2981}
!2979 = !DIDerivedType(tag: DW_TAG_member, name: "type_list", scope: !2977, file: !360, line: 141, baseType: !2696, size: 64)
!2980 = !DIDerivedType(tag: DW_TAG_member, name: "label", scope: !2977, file: !360, line: 145, baseType: !2696, size: 64, offset: 64)
!2981 = !DIDerivedType(tag: DW_TAG_member, name: "filter", scope: !2977, file: !360, line: 150, baseType: !2545, size: 32, offset: 128)
!2982 = !DIDerivedType(tag: DW_TAG_member, name: "must_not_throw", scope: !2961, file: !360, line: 164, baseType: !2983, size: 128)
!2983 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_region_u_must_not_throw", file: !360, line: 153, size: 128, elements: !2984)
!2984 = !{!2985, !2986}
!2985 = !DIDerivedType(tag: DW_TAG_member, name: "failure_decl", scope: !2983, file: !360, line: 161, baseType: !2696, size: 64)
!2986 = !DIDerivedType(tag: DW_TAG_member, name: "failure_loc", scope: !2983, file: !360, line: 163, baseType: !2817, size: 32, offset: 64)
!2987 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pads", scope: !2953, file: !360, line: 168, baseType: !2988, size: 64, offset: 448)
!2988 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2989, size: 64)
!2989 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "eh_landing_pad_d", file: !360, line: 67, size: 320, elements: !2990)
!2990 = !{!2991, !2992, !2993, !2994, !2995}
!2991 = !DIDerivedType(tag: DW_TAG_member, name: "next_lp", scope: !2989, file: !360, line: 70, baseType: !2988, size: 64)
!2992 = !DIDerivedType(tag: DW_TAG_member, name: "region", scope: !2989, file: !360, line: 73, baseType: !2952, size: 64, offset: 64)
!2993 = !DIDerivedType(tag: DW_TAG_member, name: "post_landing_pad", scope: !2989, file: !360, line: 78, baseType: !2696, size: 64, offset: 128)
!2994 = !DIDerivedType(tag: DW_TAG_member, name: "landing_pad", scope: !2989, file: !360, line: 85, baseType: !2577, size: 64, offset: 192)
!2995 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2989, file: !360, line: 88, baseType: !2545, size: 32, offset: 256)
!2996 = !DIDerivedType(tag: DW_TAG_member, name: "exc_ptr_reg", scope: !2953, file: !360, line: 173, baseType: !2577, size: 64, offset: 512)
!2997 = !DIDerivedType(tag: DW_TAG_member, name: "filter_reg", scope: !2953, file: !360, line: 173, baseType: !2577, size: 64, offset: 576)
!2998 = !DIDerivedType(tag: DW_TAG_member, name: "use_cxa_end_cleanup", scope: !2953, file: !360, line: 177, baseType: !2809, size: 8, offset: 640)
!2999 = !DIDerivedType(tag: DW_TAG_member, name: "region_array", scope: !2948, file: !360, line: 200, baseType: !3000, size: 64, offset: 64)
!3000 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3001, size: 64)
!3001 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_gc", file: !360, line: 185, baseType: !3002)
!3002 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_gc", file: !360, line: 185, size: 128, elements: !3003)
!3003 = !{!3004}
!3004 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3002, file: !360, line: 185, baseType: !3005, size: 128)
!3005 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_region_base", file: !360, line: 184, baseType: !3006)
!3006 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_region_base", file: !360, line: 184, size: 128, elements: !3007)
!3007 = !{!3008, !3009, !3010}
!3008 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3006, file: !360, line: 184, baseType: !7, size: 32)
!3009 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3006, file: !360, line: 184, baseType: !7, size: 32, offset: 32)
!3010 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3006, file: !360, line: 184, baseType: !3011, size: 64, offset: 64)
!3011 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2951, size: 64, elements: !2614)
!3012 = !DIDerivedType(tag: DW_TAG_member, name: "lp_array", scope: !2948, file: !360, line: 203, baseType: !3013, size: 64, offset: 128)
!3013 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3014, size: 64)
!3014 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_gc", file: !360, line: 189, baseType: !3015)
!3015 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_gc", file: !360, line: 189, size: 128, elements: !3016)
!3016 = !{!3017}
!3017 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3015, file: !360, line: 189, baseType: !3018, size: 128)
!3018 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_eh_landing_pad_base", file: !360, line: 188, baseType: !3019)
!3019 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_eh_landing_pad_base", file: !360, line: 188, size: 128, elements: !3020)
!3020 = !{!3021, !3022, !3023}
!3021 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3019, file: !360, line: 188, baseType: !7, size: 32)
!3022 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3019, file: !360, line: 188, baseType: !7, size: 32, offset: 32)
!3023 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3019, file: !360, line: 188, baseType: !3024, size: 64, offset: 64)
!3024 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3025, size: 64, elements: !2614)
!3025 = !DIDerivedType(tag: DW_TAG_typedef, name: "eh_landing_pad", file: !360, line: 180, baseType: !2988)
!3026 = !DIDerivedType(tag: DW_TAG_member, name: "throw_stmt_table", scope: !2948, file: !360, line: 207, baseType: !3027, size: 64, offset: 192)
!3027 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_t", file: !3028, line: 144, baseType: !3029)
!3028 = !DIFile(filename: "./include/hashtab.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3029 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3030, size: 64)
!3030 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "htab", file: !3028, line: 100, size: 896, elements: !3031)
!3031 = !{!3032, !3040, !3045, !3050, !3052, !3055, !3056, !3057, !3058, !3059, !3064, !3066, !3067, !3072, !3077}
!3032 = !DIDerivedType(tag: DW_TAG_member, name: "hash_f", scope: !3030, file: !3028, line: 102, baseType: !3033, size: 64)
!3033 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_hash", file: !3028, line: 52, baseType: !3034)
!3034 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3035, size: 64)
!3035 = !DISubroutineType(types: !3036)
!3036 = !{!3037, !3038}
!3037 = !DIDerivedType(tag: DW_TAG_typedef, name: "hashval_t", file: !3028, line: 47, baseType: !7)
!3038 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3039, size: 64)
!3039 = !DIDerivedType(tag: DW_TAG_const_type, baseType: null)
!3040 = !DIDerivedType(tag: DW_TAG_member, name: "eq_f", scope: !3030, file: !3028, line: 105, baseType: !3041, size: 64, offset: 64)
!3041 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_eq", file: !3028, line: 59, baseType: !3042)
!3042 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3043, size: 64)
!3043 = !DISubroutineType(types: !3044)
!3044 = !{!2545, !3038, !3038}
!3045 = !DIDerivedType(tag: DW_TAG_member, name: "del_f", scope: !3030, file: !3028, line: 108, baseType: !3046, size: 64, offset: 128)
!3046 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_del", file: !3028, line: 63, baseType: !3047)
!3047 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3048, size: 64)
!3048 = !DISubroutineType(types: !3049)
!3049 = !{null, !2544}
!3050 = !DIDerivedType(tag: DW_TAG_member, name: "entries", scope: !3030, file: !3028, line: 111, baseType: !3051, size: 64, offset: 192)
!3051 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2544, size: 64)
!3052 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3030, file: !3028, line: 114, baseType: !3053, size: 64, offset: 256)
!3053 = !DIDerivedType(tag: DW_TAG_typedef, name: "size_t", file: !3054, line: 46, baseType: !2649)
!3054 = !DIFile(filename: "Rohit/IR2Vec-LoopOptimizationFramework/build_REL_AsrtON/lib/clang/10.0.1/include/stddef.h", directory: "/home/venkat/IF-DV")
!3055 = !DIDerivedType(tag: DW_TAG_member, name: "n_elements", scope: !3030, file: !3028, line: 117, baseType: !3053, size: 64, offset: 320)
!3056 = !DIDerivedType(tag: DW_TAG_member, name: "n_deleted", scope: !3030, file: !3028, line: 120, baseType: !3053, size: 64, offset: 384)
!3057 = !DIDerivedType(tag: DW_TAG_member, name: "searches", scope: !3030, file: !3028, line: 124, baseType: !7, size: 32, offset: 448)
!3058 = !DIDerivedType(tag: DW_TAG_member, name: "collisions", scope: !3030, file: !3028, line: 128, baseType: !7, size: 32, offset: 480)
!3059 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_f", scope: !3030, file: !3028, line: 131, baseType: !3060, size: 64, offset: 512)
!3060 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc", file: !3028, line: 75, baseType: !3061)
!3061 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3062, size: 64)
!3062 = !DISubroutineType(types: !3063)
!3063 = !{!2544, !3053, !3053}
!3064 = !DIDerivedType(tag: DW_TAG_member, name: "free_f", scope: !3030, file: !3028, line: 132, baseType: !3065, size: 64, offset: 576)
!3065 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free", file: !3028, line: 78, baseType: !3047)
!3066 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_arg", scope: !3030, file: !3028, line: 135, baseType: !2544, size: 64, offset: 640)
!3067 = !DIDerivedType(tag: DW_TAG_member, name: "alloc_with_arg_f", scope: !3030, file: !3028, line: 136, baseType: !3068, size: 64, offset: 704)
!3068 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_alloc_with_arg", file: !3028, line: 82, baseType: !3069)
!3069 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3070, size: 64)
!3070 = !DISubroutineType(types: !3071)
!3071 = !{!2544, !2544, !3053, !3053}
!3072 = !DIDerivedType(tag: DW_TAG_member, name: "free_with_arg_f", scope: !3030, file: !3028, line: 137, baseType: !3073, size: 64, offset: 768)
!3073 = !DIDerivedType(tag: DW_TAG_typedef, name: "htab_free_with_arg", file: !3028, line: 83, baseType: !3074)
!3074 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3075, size: 64)
!3075 = !DISubroutineType(types: !3076)
!3076 = !{null, !2544, !2544}
!3077 = !DIDerivedType(tag: DW_TAG_member, name: "size_prime_index", scope: !3030, file: !3028, line: 141, baseType: !7, size: 32, offset: 832)
!3078 = !DIDerivedType(tag: DW_TAG_member, name: "ttype_data", scope: !2948, file: !360, line: 211, baseType: !3079, size: 64, offset: 256)
!3079 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3080, size: 64)
!3080 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_gc", file: !396, line: 183, baseType: !3081)
!3081 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_gc", file: !396, line: 183, size: 128, elements: !3082)
!3082 = !{!3083}
!3083 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3081, file: !396, line: 183, baseType: !3084, size: 128)
!3084 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_base", file: !396, line: 182, baseType: !3085)
!3085 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_base", file: !396, line: 182, size: 128, elements: !3086)
!3086 = !{!3087, !3088, !3089}
!3087 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3085, file: !396, line: 182, baseType: !7, size: 32)
!3088 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3085, file: !396, line: 182, baseType: !7, size: 32, offset: 32)
!3089 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3085, file: !396, line: 182, baseType: !3090, size: 64, offset: 64)
!3090 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2696, size: 64, elements: !2614)
!3091 = !DIDerivedType(tag: DW_TAG_member, name: "ehspec_data", scope: !2948, file: !360, line: 220, baseType: !3092, size: 64, offset: 320)
!3092 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "eh_status_u", file: !360, line: 217, size: 64, elements: !3093)
!3093 = !{!3094, !3095}
!3094 = !DIDerivedType(tag: DW_TAG_member, name: "arm_eabi", scope: !3092, file: !360, line: 218, baseType: !3079, size: 64)
!3095 = !DIDerivedType(tag: DW_TAG_member, name: "other", scope: !3092, file: !360, line: 219, baseType: !3096, size: 64)
!3096 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3097, size: 64)
!3097 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_gc", file: !3098, line: 29, baseType: !3099)
!3098 = !DIFile(filename: "./vecprim.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3099 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_gc", file: !3098, line: 29, size: 96, elements: !3100)
!3100 = !{!3101}
!3101 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3099, file: !3098, line: 29, baseType: !3102, size: 96)
!3102 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_uchar_base", file: !3098, line: 27, baseType: !3103)
!3103 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_uchar_base", file: !3098, line: 27, size: 96, elements: !3104)
!3104 = !{!3105, !3106, !3107}
!3105 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3103, file: !3098, line: 27, baseType: !7, size: 32)
!3106 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3103, file: !3098, line: 27, baseType: !7, size: 32, offset: 32)
!3107 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3103, file: !3098, line: 27, baseType: !3108, size: 8, offset: 64)
!3108 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3109, size: 8, elements: !2614)
!3109 = !DIDerivedType(tag: DW_TAG_typedef, name: "uchar", file: !3098, line: 26, baseType: !2809)
!3110 = !DIDerivedType(tag: DW_TAG_member, name: "cfg", scope: !2943, file: !2944, line: 467, baseType: !3111, size: 64, offset: 64)
!3111 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3112, size: 64)
!3112 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "control_flow_graph", file: !367, line: 374, size: 640, elements: !3113)
!3113 = !{!3114, !3115, !3116, !3129, !3130, !3131, !3132, !3133, !3134, !3136, !3138, !3139}
!3114 = !DIDerivedType(tag: DW_TAG_member, name: "x_entry_block_ptr", scope: !3112, file: !367, line: 377, baseType: !2546, size: 64)
!3115 = !DIDerivedType(tag: DW_TAG_member, name: "x_exit_block_ptr", scope: !3112, file: !367, line: 378, baseType: !2546, size: 64, offset: 64)
!3116 = !DIDerivedType(tag: DW_TAG_member, name: "x_basic_block_info", scope: !3112, file: !367, line: 381, baseType: !3117, size: 64, offset: 128)
!3117 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3118, size: 64)
!3118 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_gc", file: !367, line: 282, baseType: !3119)
!3119 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_gc", file: !367, line: 282, size: 128, elements: !3120)
!3120 = !{!3121}
!3121 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3119, file: !367, line: 282, baseType: !3122, size: 128)
!3122 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_basic_block_base", file: !367, line: 281, baseType: !3123)
!3123 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_basic_block_base", file: !367, line: 281, size: 128, elements: !3124)
!3124 = !{!3125, !3126, !3127}
!3125 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3123, file: !367, line: 281, baseType: !7, size: 32)
!3126 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3123, file: !367, line: 281, baseType: !7, size: 32, offset: 32)
!3127 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3123, file: !367, line: 281, baseType: !3128, size: 64, offset: 64)
!3128 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2546, size: 64, elements: !2614)
!3129 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_basic_blocks", scope: !3112, file: !367, line: 384, baseType: !2545, size: 32, offset: 192)
!3130 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_edges", scope: !3112, file: !367, line: 387, baseType: !2545, size: 32, offset: 224)
!3131 = !DIDerivedType(tag: DW_TAG_member, name: "x_last_basic_block", scope: !3112, file: !367, line: 390, baseType: !2545, size: 32, offset: 256)
!3132 = !DIDerivedType(tag: DW_TAG_member, name: "x_label_to_block_map", scope: !3112, file: !367, line: 394, baseType: !3117, size: 64, offset: 320)
!3133 = !DIDerivedType(tag: DW_TAG_member, name: "x_profile_status", scope: !3112, file: !367, line: 396, baseType: !366, size: 32, offset: 384)
!3134 = !DIDerivedType(tag: DW_TAG_member, name: "x_dom_computed", scope: !3112, file: !367, line: 399, baseType: !3135, size: 64, offset: 416)
!3135 = !DICompositeType(tag: DW_TAG_array_type, baseType: !372, size: 64, elements: !2650)
!3136 = !DIDerivedType(tag: DW_TAG_member, name: "x_n_bbs_in_dom_tree", scope: !3112, file: !367, line: 402, baseType: !3137, size: 64, offset: 480)
!3137 = !DICompositeType(tag: DW_TAG_array_type, baseType: !7, size: 64, elements: !2650)
!3138 = !DIDerivedType(tag: DW_TAG_member, name: "max_jumptable_ents", scope: !3112, file: !367, line: 406, baseType: !2545, size: 32, offset: 544)
!3139 = !DIDerivedType(tag: DW_TAG_member, name: "last_label_uid", scope: !3112, file: !367, line: 409, baseType: !2545, size: 32, offset: 576)
!3140 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_body", scope: !2943, file: !2944, line: 470, baseType: !2574, size: 64, offset: 128)
!3141 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_df", scope: !2943, file: !2944, line: 473, baseType: !3142, size: 64, offset: 192)
!3142 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3143, size: 64)
!3143 = !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_df", file: !2944, line: 166, flags: DIFlagFwdDecl)
!3144 = !DIDerivedType(tag: DW_TAG_member, name: "x_current_loops", scope: !2943, file: !2944, line: 476, baseType: !3145, size: 64, offset: 256)
!3145 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3146, size: 64)
!3146 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loops", file: !378, line: 187, size: 256, elements: !3147)
!3147 = !{!3148, !3149, !3208, !3209}
!3148 = !DIDerivedType(tag: DW_TAG_member, name: "state", scope: !3146, file: !378, line: 189, baseType: !2545, size: 32)
!3149 = !DIDerivedType(tag: DW_TAG_member, name: "larray", scope: !3146, file: !378, line: 192, baseType: !3150, size: 64, offset: 64)
!3150 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3151, size: 64)
!3151 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_gc", file: !378, line: 87, baseType: !3152)
!3152 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_gc", file: !378, line: 87, size: 128, elements: !3153)
!3153 = !{!3154}
!3154 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3152, file: !378, line: 87, baseType: !3155, size: 128)
!3155 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_loop_p_base", file: !378, line: 85, baseType: !3156)
!3156 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_loop_p_base", file: !378, line: 85, size: 128, elements: !3157)
!3157 = !{!3158, !3159, !3160}
!3158 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3156, file: !378, line: 85, baseType: !7, size: 32)
!3159 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3156, file: !378, line: 85, baseType: !7, size: 32, offset: 32)
!3160 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3156, file: !378, line: 85, baseType: !3161, size: 64, offset: 64)
!3161 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3162, size: 64, elements: !2614)
!3162 = !DIDerivedType(tag: DW_TAG_typedef, name: "loop_p", file: !378, line: 84, baseType: !3163)
!3163 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3164, size: 64)
!3164 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop", file: !378, line: 100, size: 1216, elements: !3165)
!3165 = !{!3166, !3167, !3168, !3169, !3170, !3175, !3176, !3177, !3178, !3179, !3180, !3181, !3182, !3183, !3184, !3185, !3186, !3187, !3198, !3206, !3207}
!3166 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3164, file: !378, line: 102, baseType: !2545, size: 32)
!3167 = !DIDerivedType(tag: DW_TAG_member, name: "ninsns", scope: !3164, file: !378, line: 105, baseType: !7, size: 32, offset: 32)
!3168 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3164, file: !378, line: 108, baseType: !2547, size: 64, offset: 64)
!3169 = !DIDerivedType(tag: DW_TAG_member, name: "latch", scope: !3164, file: !378, line: 111, baseType: !2547, size: 64, offset: 128)
!3170 = !DIDerivedType(tag: DW_TAG_member, name: "lpt_decision", scope: !3164, file: !378, line: 114, baseType: !3171, size: 64, offset: 192)
!3171 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "lpt_decision", file: !378, line: 41, size: 64, elements: !3172)
!3172 = !{!3173, !3174}
!3173 = !DIDerivedType(tag: DW_TAG_member, name: "decision", scope: !3171, file: !378, line: 42, baseType: !377, size: 32)
!3174 = !DIDerivedType(tag: DW_TAG_member, name: "times", scope: !3171, file: !378, line: 43, baseType: !7, size: 32, offset: 32)
!3175 = !DIDerivedType(tag: DW_TAG_member, name: "av_ninsns", scope: !3164, file: !378, line: 117, baseType: !7, size: 32, offset: 256)
!3176 = !DIDerivedType(tag: DW_TAG_member, name: "num_nodes", scope: !3164, file: !378, line: 120, baseType: !7, size: 32, offset: 288)
!3177 = !DIDerivedType(tag: DW_TAG_member, name: "superloops", scope: !3164, file: !378, line: 123, baseType: !3150, size: 64, offset: 320)
!3178 = !DIDerivedType(tag: DW_TAG_member, name: "inner", scope: !3164, file: !378, line: 126, baseType: !3163, size: 64, offset: 384)
!3179 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3164, file: !378, line: 129, baseType: !3163, size: 64, offset: 448)
!3180 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !3164, file: !378, line: 132, baseType: !2544, size: 64, offset: 512)
!3181 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations", scope: !3164, file: !378, line: 139, baseType: !2696, size: 64, offset: 576)
!3182 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_upper_bound", scope: !3164, file: !378, line: 143, baseType: !2744, size: 128, offset: 640)
!3183 = !DIDerivedType(tag: DW_TAG_member, name: "nb_iterations_estimate", scope: !3164, file: !378, line: 146, baseType: !2744, size: 128, offset: 768)
!3184 = !DIDerivedType(tag: DW_TAG_member, name: "any_upper_bound", scope: !3164, file: !378, line: 148, baseType: !2809, size: 8, offset: 896)
!3185 = !DIDerivedType(tag: DW_TAG_member, name: "any_estimate", scope: !3164, file: !378, line: 149, baseType: !2809, size: 8, offset: 904)
!3186 = !DIDerivedType(tag: DW_TAG_member, name: "estimate_state", scope: !3164, file: !378, line: 153, baseType: !386, size: 32, offset: 928)
!3187 = !DIDerivedType(tag: DW_TAG_member, name: "bounds", scope: !3164, file: !378, line: 156, baseType: !3188, size: 64, offset: 960)
!3188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3189, size: 64)
!3189 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "nb_iter_bound", file: !378, line: 48, size: 320, elements: !3190)
!3190 = !{!3191, !3195, !3196, !3197}
!3191 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3189, file: !378, line: 50, baseType: !3192, size: 64)
!3192 = !DIDerivedType(tag: DW_TAG_typedef, name: "gimple", file: !2524, line: 58, baseType: !3193)
!3193 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3194, size: 64)
!3194 = !DICompositeType(tag: DW_TAG_union_type, name: "gimple_statement_d", file: !2524, line: 57, flags: DIFlagFwdDecl)
!3195 = !DIDerivedType(tag: DW_TAG_member, name: "bound", scope: !3189, file: !378, line: 59, baseType: !2744, size: 128, offset: 64)
!3196 = !DIDerivedType(tag: DW_TAG_member, name: "is_exit", scope: !3189, file: !378, line: 64, baseType: !2809, size: 8, offset: 192)
!3197 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3189, file: !378, line: 67, baseType: !3188, size: 64, offset: 256)
!3198 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !3164, file: !378, line: 159, baseType: !3199, size: 64, offset: 1024)
!3199 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3200, size: 64)
!3200 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "loop_exit", file: !378, line: 72, size: 256, elements: !3201)
!3201 = !{!3202, !3203, !3204, !3205}
!3202 = !DIDerivedType(tag: DW_TAG_member, name: "e", scope: !3200, file: !378, line: 74, baseType: !2564, size: 64)
!3203 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3200, file: !378, line: 77, baseType: !3199, size: 64, offset: 64)
!3204 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3200, file: !378, line: 78, baseType: !3199, size: 64, offset: 128)
!3205 = !DIDerivedType(tag: DW_TAG_member, name: "next_e", scope: !3200, file: !378, line: 81, baseType: !3199, size: 64, offset: 192)
!3206 = !DIDerivedType(tag: DW_TAG_member, name: "can_be_parallel", scope: !3164, file: !378, line: 162, baseType: !2809, size: 8, offset: 1088)
!3207 = !DIDerivedType(tag: DW_TAG_member, name: "single_iv", scope: !3164, file: !378, line: 166, baseType: !2696, size: 64, offset: 1152)
!3208 = !DIDerivedType(tag: DW_TAG_member, name: "exits", scope: !3146, file: !378, line: 197, baseType: !3027, size: 64, offset: 128)
!3209 = !DIDerivedType(tag: DW_TAG_member, name: "tree_root", scope: !3146, file: !378, line: 200, baseType: !3163, size: 64, offset: 192)
!3210 = !DIDerivedType(tag: DW_TAG_member, name: "value_histograms", scope: !2943, file: !2944, line: 479, baseType: !3027, size: 64, offset: 320)
!3211 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !2943, file: !2944, line: 484, baseType: !2696, size: 64, offset: 384)
!3212 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_decl", scope: !2943, file: !2944, line: 488, baseType: !2696, size: 64, offset: 448)
!3213 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocal_goto_save_area", scope: !2943, file: !2944, line: 493, baseType: !2696, size: 64, offset: 512)
!3214 = !DIDerivedType(tag: DW_TAG_member, name: "local_decls", scope: !2943, file: !2944, line: 496, baseType: !2696, size: 64, offset: 576)
!3215 = !DIDerivedType(tag: DW_TAG_member, name: "machine", scope: !2943, file: !2944, line: 501, baseType: !3216, size: 64, offset: 640)
!3216 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3217, size: 64)
!3217 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_function", file: !391, line: 2355, size: 576, elements: !3218)
!3218 = !{!3219, !3222, !3223, !3224, !3225, !3227, !3228, !3233, !3234, !3235, !3236, !3237, !3238}
!3219 = !DIDerivedType(tag: DW_TAG_member, name: "stack_locals", scope: !3217, file: !391, line: 2356, baseType: !3220, size: 64)
!3220 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3221, size: 64)
!3221 = !DICompositeType(tag: DW_TAG_structure_type, name: "stack_local_entry", file: !391, line: 2356, flags: DIFlagFwdDecl)
!3222 = !DIDerivedType(tag: DW_TAG_member, name: "some_ld_name", scope: !3217, file: !391, line: 2357, baseType: !2602, size: 64, offset: 64)
!3223 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_gpr_size", scope: !3217, file: !391, line: 2358, baseType: !2545, size: 32, offset: 128)
!3224 = !DIDerivedType(tag: DW_TAG_member, name: "varargs_fpr_size", scope: !3217, file: !391, line: 2359, baseType: !2545, size: 32, offset: 160)
!3225 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_mode_switching", scope: !3217, file: !391, line: 2360, baseType: !3226, size: 128, offset: 192)
!3226 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2545, size: 128, elements: !2676)
!3227 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue_nregs", scope: !3217, file: !391, line: 2364, baseType: !2545, size: 32, offset: 320)
!3228 = !DIDerivedType(tag: DW_TAG_member, name: "cfa", scope: !3217, file: !391, line: 2367, baseType: !3229, size: 128, offset: 384)
!3229 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "machine_cfa_state", file: !391, line: 2349, size: 128, elements: !3230)
!3230 = !{!3231, !3232}
!3231 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !3229, file: !391, line: 2351, baseType: !2577, size: 64)
!3232 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3229, file: !391, line: 2352, baseType: !2666, size: 64, offset: 64)
!3233 = !DIDerivedType(tag: DW_TAG_member, name: "call_abi", scope: !3217, file: !391, line: 2371, baseType: !390, size: 32, offset: 512)
!3234 = !DIDerivedType(tag: DW_TAG_member, name: "accesses_prev_frame", scope: !3217, file: !391, line: 2374, baseType: !7, size: 1, offset: 544, flags: DIFlagBitField, extraData: i64 544)
!3235 = !DIDerivedType(tag: DW_TAG_member, name: "needs_cld", scope: !3217, file: !391, line: 2377, baseType: !7, size: 1, offset: 545, flags: DIFlagBitField, extraData: i64 544)
!3236 = !DIDerivedType(tag: DW_TAG_member, name: "use_fast_prologue_epilogue", scope: !3217, file: !391, line: 2381, baseType: !7, size: 1, offset: 546, flags: DIFlagBitField, extraData: i64 544)
!3237 = !DIDerivedType(tag: DW_TAG_member, name: "tls_descriptor_call_expanded_p", scope: !3217, file: !391, line: 2392, baseType: !7, size: 1, offset: 547, flags: DIFlagBitField, extraData: i64 544)
!3238 = !DIDerivedType(tag: DW_TAG_member, name: "static_chain_on_stack", scope: !3217, file: !391, line: 2396, baseType: !7, size: 1, offset: 548, flags: DIFlagBitField, extraData: i64 544)
!3239 = !DIDerivedType(tag: DW_TAG_member, name: "language", scope: !2943, file: !2944, line: 504, baseType: !3240, size: 64, offset: 704)
!3240 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3241, size: 64)
!3241 = !DICompositeType(tag: DW_TAG_structure_type, name: "language_function", file: !2944, line: 504, flags: DIFlagFwdDecl)
!3242 = !DIDerivedType(tag: DW_TAG_member, name: "used_types_hash", scope: !2943, file: !2944, line: 507, baseType: !3027, size: 64, offset: 768)
!3243 = !DIDerivedType(tag: DW_TAG_member, name: "last_stmt_uid", scope: !2943, file: !2944, line: 510, baseType: !2545, size: 32, offset: 832)
!3244 = !DIDerivedType(tag: DW_TAG_member, name: "funcdef_no", scope: !2943, file: !2944, line: 513, baseType: !2545, size: 32, offset: 864)
!3245 = !DIDerivedType(tag: DW_TAG_member, name: "function_start_locus", scope: !2943, file: !2944, line: 516, baseType: !2817, size: 32, offset: 896)
!3246 = !DIDerivedType(tag: DW_TAG_member, name: "function_end_locus", scope: !2943, file: !2944, line: 519, baseType: !2817, size: 32, offset: 928)
!3247 = !DIDerivedType(tag: DW_TAG_member, name: "curr_properties", scope: !2943, file: !2944, line: 522, baseType: !7, size: 32, offset: 960)
!3248 = !DIDerivedType(tag: DW_TAG_member, name: "last_verified", scope: !2943, file: !2944, line: 523, baseType: !7, size: 32, offset: 992)
!3249 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_reason", scope: !2943, file: !2944, line: 528, baseType: !2602, size: 64, offset: 1024)
!3250 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_gpr_size", scope: !2943, file: !2944, line: 535, baseType: !7, size: 8, offset: 1088, flags: DIFlagBitField, extraData: i64 1088)
!3251 = !DIDerivedType(tag: DW_TAG_member, name: "va_list_fpr_size", scope: !2943, file: !2944, line: 539, baseType: !7, size: 8, offset: 1096, flags: DIFlagBitField, extraData: i64 1088)
!3252 = !DIDerivedType(tag: DW_TAG_member, name: "function_frequency", scope: !2943, file: !2944, line: 543, baseType: !7, size: 2, offset: 1104, flags: DIFlagBitField, extraData: i64 1088)
!3253 = !DIDerivedType(tag: DW_TAG_member, name: "calls_setjmp", scope: !2943, file: !2944, line: 546, baseType: !7, size: 1, offset: 1106, flags: DIFlagBitField, extraData: i64 1088)
!3254 = !DIDerivedType(tag: DW_TAG_member, name: "calls_alloca", scope: !2943, file: !2944, line: 550, baseType: !7, size: 1, offset: 1107, flags: DIFlagBitField, extraData: i64 1088)
!3255 = !DIDerivedType(tag: DW_TAG_member, name: "has_nonlocal_label", scope: !2943, file: !2944, line: 554, baseType: !7, size: 1, offset: 1108, flags: DIFlagBitField, extraData: i64 1088)
!3256 = !DIDerivedType(tag: DW_TAG_member, name: "cannot_be_copied_set", scope: !2943, file: !2944, line: 559, baseType: !7, size: 1, offset: 1109, flags: DIFlagBitField, extraData: i64 1088)
!3257 = !DIDerivedType(tag: DW_TAG_member, name: "stdarg", scope: !2943, file: !2944, line: 562, baseType: !7, size: 1, offset: 1110, flags: DIFlagBitField, extraData: i64 1088)
!3258 = !DIDerivedType(tag: DW_TAG_member, name: "dont_save_pending_sizes_p", scope: !2943, file: !2944, line: 571, baseType: !7, size: 1, offset: 1111, flags: DIFlagBitField, extraData: i64 1088)
!3259 = !DIDerivedType(tag: DW_TAG_member, name: "after_inlining", scope: !2943, file: !2944, line: 573, baseType: !7, size: 1, offset: 1112, flags: DIFlagBitField, extraData: i64 1088)
!3260 = !DIDerivedType(tag: DW_TAG_member, name: "always_inline_functions_inlined", scope: !2943, file: !2944, line: 574, baseType: !7, size: 1, offset: 1113, flags: DIFlagBitField, extraData: i64 1088)
!3261 = !DIDerivedType(tag: DW_TAG_member, name: "returns_struct", scope: !2943, file: !2944, line: 581, baseType: !7, size: 1, offset: 1114, flags: DIFlagBitField, extraData: i64 1088)
!3262 = !DIDerivedType(tag: DW_TAG_member, name: "returns_pcc_struct", scope: !2943, file: !2944, line: 585, baseType: !7, size: 1, offset: 1115, flags: DIFlagBitField, extraData: i64 1088)
!3263 = !DIDerivedType(tag: DW_TAG_member, name: "after_tree_profile", scope: !2943, file: !2944, line: 588, baseType: !7, size: 1, offset: 1116, flags: DIFlagBitField, extraData: i64 1088)
!3264 = !DIDerivedType(tag: DW_TAG_member, name: "has_local_explicit_reg_vars", scope: !2943, file: !2944, line: 592, baseType: !7, size: 1, offset: 1117, flags: DIFlagBitField, extraData: i64 1088)
!3265 = !DIDerivedType(tag: DW_TAG_member, name: "is_thunk", scope: !2943, file: !2944, line: 598, baseType: !7, size: 1, offset: 1118, flags: DIFlagBitField, extraData: i64 1088)
!3266 = !DIDerivedType(tag: DW_TAG_member, name: "personality", scope: !2938, file: !396, line: 3254, baseType: !2696, size: 64, offset: 1536)
!3267 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_target", scope: !2938, file: !396, line: 3257, baseType: !2696, size: 64, offset: 1600)
!3268 = !DIDerivedType(tag: DW_TAG_member, name: "function_specific_optimization", scope: !2938, file: !396, line: 3258, baseType: !2696, size: 64, offset: 1664)
!3269 = !DIDerivedType(tag: DW_TAG_member, name: "function_code", scope: !2938, file: !396, line: 3264, baseType: !7, size: 11, offset: 1728, flags: DIFlagBitField, extraData: i64 1728)
!3270 = !DIDerivedType(tag: DW_TAG_member, name: "built_in_class", scope: !2938, file: !396, line: 3265, baseType: !7, size: 2, offset: 1739, flags: DIFlagBitField, extraData: i64 1728)
!3271 = !DIDerivedType(tag: DW_TAG_member, name: "static_ctor_flag", scope: !2938, file: !396, line: 3267, baseType: !7, size: 1, offset: 1741, flags: DIFlagBitField, extraData: i64 1728)
!3272 = !DIDerivedType(tag: DW_TAG_member, name: "static_dtor_flag", scope: !2938, file: !396, line: 3268, baseType: !7, size: 1, offset: 1742, flags: DIFlagBitField, extraData: i64 1728)
!3273 = !DIDerivedType(tag: DW_TAG_member, name: "uninlinable", scope: !2938, file: !396, line: 3269, baseType: !7, size: 1, offset: 1743, flags: DIFlagBitField, extraData: i64 1728)
!3274 = !DIDerivedType(tag: DW_TAG_member, name: "possibly_inlined", scope: !2938, file: !396, line: 3271, baseType: !7, size: 1, offset: 1744, flags: DIFlagBitField, extraData: i64 1728)
!3275 = !DIDerivedType(tag: DW_TAG_member, name: "novops_flag", scope: !2938, file: !396, line: 3272, baseType: !7, size: 1, offset: 1745, flags: DIFlagBitField, extraData: i64 1728)
!3276 = !DIDerivedType(tag: DW_TAG_member, name: "returns_twice_flag", scope: !2938, file: !396, line: 3273, baseType: !7, size: 1, offset: 1746, flags: DIFlagBitField, extraData: i64 1728)
!3277 = !DIDerivedType(tag: DW_TAG_member, name: "malloc_flag", scope: !2938, file: !396, line: 3274, baseType: !7, size: 1, offset: 1747, flags: DIFlagBitField, extraData: i64 1728)
!3278 = !DIDerivedType(tag: DW_TAG_member, name: "operator_new_flag", scope: !2938, file: !396, line: 3275, baseType: !7, size: 1, offset: 1748, flags: DIFlagBitField, extraData: i64 1728)
!3279 = !DIDerivedType(tag: DW_TAG_member, name: "declared_inline_flag", scope: !2938, file: !396, line: 3276, baseType: !7, size: 1, offset: 1749, flags: DIFlagBitField, extraData: i64 1728)
!3280 = !DIDerivedType(tag: DW_TAG_member, name: "regdecl_flag", scope: !2938, file: !396, line: 3277, baseType: !7, size: 1, offset: 1750, flags: DIFlagBitField, extraData: i64 1728)
!3281 = !DIDerivedType(tag: DW_TAG_member, name: "no_inline_warning_flag", scope: !2938, file: !396, line: 3279, baseType: !7, size: 1, offset: 1751, flags: DIFlagBitField, extraData: i64 1728)
!3282 = !DIDerivedType(tag: DW_TAG_member, name: "no_instrument_function_entry_exit", scope: !2938, file: !396, line: 3280, baseType: !7, size: 1, offset: 1752, flags: DIFlagBitField, extraData: i64 1728)
!3283 = !DIDerivedType(tag: DW_TAG_member, name: "no_limit_stack", scope: !2938, file: !396, line: 3281, baseType: !7, size: 1, offset: 1753, flags: DIFlagBitField, extraData: i64 1728)
!3284 = !DIDerivedType(tag: DW_TAG_member, name: "disregard_inline_limits", scope: !2938, file: !396, line: 3282, baseType: !7, size: 1, offset: 1754, flags: DIFlagBitField, extraData: i64 1728)
!3285 = !DIDerivedType(tag: DW_TAG_member, name: "pure_flag", scope: !2938, file: !396, line: 3283, baseType: !7, size: 1, offset: 1755, flags: DIFlagBitField, extraData: i64 1728)
!3286 = !DIDerivedType(tag: DW_TAG_member, name: "looping_const_or_pure_flag", scope: !2938, file: !396, line: 3284, baseType: !7, size: 1, offset: 1756, flags: DIFlagBitField, extraData: i64 1728)
!3287 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !2698, file: !396, line: 3394, baseType: !3288, size: 1344)
!3288 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_type", file: !396, line: 2279, size: 1344, elements: !3289)
!3289 = !{!3290, !3291, !3292, !3293, !3294, !3295, !3296, !3297, !3298, !3299, !3300, !3301, !3302, !3303, !3304, !3305, !3306, !3307, !3308, !3309, !3310, !3311, !3312, !3315, !3316, !3317, !3325, !3326, !3327, !3328, !3329, !3330, !3331, !3332, !3333}
!3290 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3288, file: !396, line: 2280, baseType: !2734, size: 192)
!3291 = !DIDerivedType(tag: DW_TAG_member, name: "values", scope: !3288, file: !396, line: 2281, baseType: !2696, size: 64, offset: 192)
!3292 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3288, file: !396, line: 2282, baseType: !2696, size: 64, offset: 256)
!3293 = !DIDerivedType(tag: DW_TAG_member, name: "size_unit", scope: !3288, file: !396, line: 2283, baseType: !2696, size: 64, offset: 320)
!3294 = !DIDerivedType(tag: DW_TAG_member, name: "attributes", scope: !3288, file: !396, line: 2284, baseType: !2696, size: 64, offset: 384)
!3295 = !DIDerivedType(tag: DW_TAG_member, name: "uid", scope: !3288, file: !396, line: 2285, baseType: !7, size: 32, offset: 448)
!3296 = !DIDerivedType(tag: DW_TAG_member, name: "precision", scope: !3288, file: !396, line: 2287, baseType: !7, size: 10, offset: 480, flags: DIFlagBitField, extraData: i64 480)
!3297 = !DIDerivedType(tag: DW_TAG_member, name: "no_force_blk_flag", scope: !3288, file: !396, line: 2288, baseType: !7, size: 1, offset: 490, flags: DIFlagBitField, extraData: i64 480)
!3298 = !DIDerivedType(tag: DW_TAG_member, name: "needs_constructing_flag", scope: !3288, file: !396, line: 2289, baseType: !7, size: 1, offset: 491, flags: DIFlagBitField, extraData: i64 480)
!3299 = !DIDerivedType(tag: DW_TAG_member, name: "transparent_aggr_flag", scope: !3288, file: !396, line: 2290, baseType: !7, size: 1, offset: 492, flags: DIFlagBitField, extraData: i64 480)
!3300 = !DIDerivedType(tag: DW_TAG_member, name: "restrict_flag", scope: !3288, file: !396, line: 2291, baseType: !7, size: 1, offset: 493, flags: DIFlagBitField, extraData: i64 480)
!3301 = !DIDerivedType(tag: DW_TAG_member, name: "contains_placeholder_bits", scope: !3288, file: !396, line: 2292, baseType: !7, size: 2, offset: 494, flags: DIFlagBitField, extraData: i64 480)
!3302 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !3288, file: !396, line: 2294, baseType: !7, size: 8, offset: 496, flags: DIFlagBitField, extraData: i64 480)
!3303 = !DIDerivedType(tag: DW_TAG_member, name: "string_flag", scope: !3288, file: !396, line: 2296, baseType: !7, size: 1, offset: 504, flags: DIFlagBitField, extraData: i64 480)
!3304 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_0", scope: !3288, file: !396, line: 2297, baseType: !7, size: 1, offset: 505, flags: DIFlagBitField, extraData: i64 480)
!3305 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_1", scope: !3288, file: !396, line: 2298, baseType: !7, size: 1, offset: 506, flags: DIFlagBitField, extraData: i64 480)
!3306 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_2", scope: !3288, file: !396, line: 2299, baseType: !7, size: 1, offset: 507, flags: DIFlagBitField, extraData: i64 480)
!3307 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_3", scope: !3288, file: !396, line: 2300, baseType: !7, size: 1, offset: 508, flags: DIFlagBitField, extraData: i64 480)
!3308 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_4", scope: !3288, file: !396, line: 2301, baseType: !7, size: 1, offset: 509, flags: DIFlagBitField, extraData: i64 480)
!3309 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_5", scope: !3288, file: !396, line: 2302, baseType: !7, size: 1, offset: 510, flags: DIFlagBitField, extraData: i64 480)
!3310 = !DIDerivedType(tag: DW_TAG_member, name: "lang_flag_6", scope: !3288, file: !396, line: 2303, baseType: !7, size: 1, offset: 511, flags: DIFlagBitField, extraData: i64 480)
!3311 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3288, file: !396, line: 2305, baseType: !7, size: 32, offset: 512)
!3312 = !DIDerivedType(tag: DW_TAG_member, name: "alias_set", scope: !3288, file: !396, line: 2306, baseType: !3313, size: 32, offset: 544)
!3313 = !DIDerivedType(tag: DW_TAG_typedef, name: "alias_set_type", file: !3314, line: 31, baseType: !2545)
!3314 = !DIFile(filename: "./alias.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3315 = !DIDerivedType(tag: DW_TAG_member, name: "pointer_to", scope: !3288, file: !396, line: 2307, baseType: !2696, size: 64, offset: 576)
!3316 = !DIDerivedType(tag: DW_TAG_member, name: "reference_to", scope: !3288, file: !396, line: 2308, baseType: !2696, size: 64, offset: 640)
!3317 = !DIDerivedType(tag: DW_TAG_member, name: "symtab", scope: !3288, file: !396, line: 2314, baseType: !3318, size: 64, offset: 704)
!3318 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "tree_type_symtab", file: !396, line: 2309, size: 64, elements: !3319)
!3319 = !{!3320, !3321, !3322}
!3320 = !DIDerivedType(tag: DW_TAG_member, name: "address", scope: !3318, file: !396, line: 2310, baseType: !2545, size: 32)
!3321 = !DIDerivedType(tag: DW_TAG_member, name: "pointer", scope: !3318, file: !396, line: 2311, baseType: !2602, size: 64)
!3322 = !DIDerivedType(tag: DW_TAG_member, name: "die", scope: !3318, file: !396, line: 2312, baseType: !3323, size: 64)
!3323 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3324, size: 64)
!3324 = !DICompositeType(tag: DW_TAG_structure_type, name: "die_struct", file: !396, line: 2277, flags: DIFlagFwdDecl)
!3325 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3288, file: !396, line: 2315, baseType: !2696, size: 64, offset: 768)
!3326 = !DIDerivedType(tag: DW_TAG_member, name: "minval", scope: !3288, file: !396, line: 2316, baseType: !2696, size: 64, offset: 832)
!3327 = !DIDerivedType(tag: DW_TAG_member, name: "maxval", scope: !3288, file: !396, line: 2317, baseType: !2696, size: 64, offset: 896)
!3328 = !DIDerivedType(tag: DW_TAG_member, name: "next_variant", scope: !3288, file: !396, line: 2318, baseType: !2696, size: 64, offset: 960)
!3329 = !DIDerivedType(tag: DW_TAG_member, name: "main_variant", scope: !3288, file: !396, line: 2319, baseType: !2696, size: 64, offset: 1024)
!3330 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !3288, file: !396, line: 2320, baseType: !2696, size: 64, offset: 1088)
!3331 = !DIDerivedType(tag: DW_TAG_member, name: "context", scope: !3288, file: !396, line: 2321, baseType: !2696, size: 64, offset: 1152)
!3332 = !DIDerivedType(tag: DW_TAG_member, name: "canonical", scope: !3288, file: !396, line: 2322, baseType: !2696, size: 64, offset: 1216)
!3333 = !DIDerivedType(tag: DW_TAG_member, name: "lang_specific", scope: !3288, file: !396, line: 2324, baseType: !3334, size: 64, offset: 1280)
!3334 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3335, size: 64)
!3335 = !DICompositeType(tag: DW_TAG_structure_type, name: "lang_type", file: !396, line: 2324, flags: DIFlagFwdDecl)
!3336 = !DIDerivedType(tag: DW_TAG_member, name: "list", scope: !2698, file: !396, line: 3395, baseType: !3337, size: 320)
!3337 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_list", file: !396, line: 1469, size: 320, elements: !3338)
!3338 = !{!3339, !3340, !3341}
!3339 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3337, file: !396, line: 1470, baseType: !2734, size: 192)
!3340 = !DIDerivedType(tag: DW_TAG_member, name: "purpose", scope: !3337, file: !396, line: 1471, baseType: !2696, size: 64, offset: 192)
!3341 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3337, file: !396, line: 1472, baseType: !2696, size: 64, offset: 256)
!3342 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !2698, file: !396, line: 3396, baseType: !3343, size: 320)
!3343 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_vec", file: !396, line: 1482, size: 320, elements: !3344)
!3344 = !{!3345, !3346, !3347}
!3345 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3343, file: !396, line: 1483, baseType: !2734, size: 192)
!3346 = !DIDerivedType(tag: DW_TAG_member, name: "length", scope: !3343, file: !396, line: 1484, baseType: !2545, size: 32, offset: 192)
!3347 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !3343, file: !396, line: 1485, baseType: !3090, size: 64, offset: 256)
!3348 = !DIDerivedType(tag: DW_TAG_member, name: "exp", scope: !2698, file: !396, line: 3397, baseType: !3349, size: 384)
!3349 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_exp", file: !396, line: 1829, size: 384, elements: !3350)
!3350 = !{!3351, !3352, !3353, !3354}
!3351 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3349, file: !396, line: 1830, baseType: !2734, size: 192)
!3352 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3349, file: !396, line: 1831, baseType: !2817, size: 32, offset: 192)
!3353 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3349, file: !396, line: 1832, baseType: !2696, size: 64, offset: 256)
!3354 = !DIDerivedType(tag: DW_TAG_member, name: "operands", scope: !3349, file: !396, line: 1835, baseType: !3090, size: 64, offset: 320)
!3355 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !2698, file: !396, line: 3398, baseType: !3356, size: 704)
!3356 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_ssa_name", file: !396, line: 1898, size: 704, elements: !3357)
!3357 = !{!3358, !3359, !3360, !3361, !3362, !3365}
!3358 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3356, file: !396, line: 1899, baseType: !2734, size: 192)
!3359 = !DIDerivedType(tag: DW_TAG_member, name: "var", scope: !3356, file: !396, line: 1902, baseType: !2696, size: 64, offset: 192)
!3360 = !DIDerivedType(tag: DW_TAG_member, name: "def_stmt", scope: !3356, file: !396, line: 1905, baseType: !3192, size: 64, offset: 256)
!3361 = !DIDerivedType(tag: DW_TAG_member, name: "version", scope: !3356, file: !396, line: 1908, baseType: !7, size: 32, offset: 320)
!3362 = !DIDerivedType(tag: DW_TAG_member, name: "ptr_info", scope: !3356, file: !396, line: 1911, baseType: !3363, size: 64, offset: 384)
!3363 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3364, size: 64)
!3364 = !DICompositeType(tag: DW_TAG_structure_type, name: "ptr_info_def", file: !396, line: 1876, flags: DIFlagFwdDecl)
!3365 = !DIDerivedType(tag: DW_TAG_member, name: "imm_uses", scope: !3356, file: !396, line: 1914, baseType: !3366, size: 256, offset: 448)
!3366 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ssa_use_operand_d", file: !396, line: 1883, size: 256, elements: !3367)
!3367 = !{!3368, !3370, !3371, !3376}
!3368 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3366, file: !396, line: 1884, baseType: !3369, size: 64)
!3369 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3366, size: 64)
!3370 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3366, file: !396, line: 1885, baseType: !3369, size: 64, offset: 64)
!3371 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !3366, file: !396, line: 1891, baseType: !3372, size: 64, offset: 128)
!3372 = distinct !DICompositeType(tag: DW_TAG_union_type, scope: !3366, file: !396, line: 1891, size: 64, elements: !3373)
!3373 = !{!3374, !3375}
!3374 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3372, file: !396, line: 1891, baseType: !3192, size: 64)
!3375 = !DIDerivedType(tag: DW_TAG_member, name: "ssa_name", scope: !3372, file: !396, line: 1891, baseType: !2696, size: 64)
!3376 = !DIDerivedType(tag: DW_TAG_member, name: "use", scope: !3366, file: !396, line: 1892, baseType: !3377, size: 64, offset: 192)
!3377 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2696, size: 64)
!3378 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !2698, file: !396, line: 3399, baseType: !3379, size: 704)
!3379 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_block", file: !396, line: 2008, size: 704, elements: !3380)
!3380 = !{!3381, !3382, !3383, !3384, !3385, !3386, !3387, !3388, !3389, !3390, !3391}
!3381 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3379, file: !396, line: 2009, baseType: !2734, size: 192)
!3382 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_flag", scope: !3379, file: !396, line: 2011, baseType: !7, size: 1, offset: 192, flags: DIFlagBitField, extraData: i64 192)
!3383 = !DIDerivedType(tag: DW_TAG_member, name: "block_num", scope: !3379, file: !396, line: 2012, baseType: !7, size: 31, offset: 193, flags: DIFlagBitField, extraData: i64 192)
!3384 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3379, file: !396, line: 2014, baseType: !2817, size: 32, offset: 224)
!3385 = !DIDerivedType(tag: DW_TAG_member, name: "vars", scope: !3379, file: !396, line: 2016, baseType: !2696, size: 64, offset: 256)
!3386 = !DIDerivedType(tag: DW_TAG_member, name: "nonlocalized_vars", scope: !3379, file: !396, line: 2017, baseType: !3079, size: 64, offset: 320)
!3387 = !DIDerivedType(tag: DW_TAG_member, name: "subblocks", scope: !3379, file: !396, line: 2019, baseType: !2696, size: 64, offset: 384)
!3388 = !DIDerivedType(tag: DW_TAG_member, name: "supercontext", scope: !3379, file: !396, line: 2020, baseType: !2696, size: 64, offset: 448)
!3389 = !DIDerivedType(tag: DW_TAG_member, name: "abstract_origin", scope: !3379, file: !396, line: 2021, baseType: !2696, size: 64, offset: 512)
!3390 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_origin", scope: !3379, file: !396, line: 2022, baseType: !2696, size: 64, offset: 576)
!3391 = !DIDerivedType(tag: DW_TAG_member, name: "fragment_chain", scope: !3379, file: !396, line: 2023, baseType: !2696, size: 64, offset: 640)
!3392 = !DIDerivedType(tag: DW_TAG_member, name: "binfo", scope: !2698, file: !396, line: 3400, baseType: !3393, size: 832)
!3393 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_binfo", file: !396, line: 2430, size: 832, elements: !3394)
!3394 = !{!3395, !3396, !3397, !3398, !3399, !3400, !3401, !3402, !3403, !3404}
!3395 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3393, file: !396, line: 2431, baseType: !2734, size: 192)
!3396 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3393, file: !396, line: 2433, baseType: !2696, size: 64, offset: 192)
!3397 = !DIDerivedType(tag: DW_TAG_member, name: "vtable", scope: !3393, file: !396, line: 2434, baseType: !2696, size: 64, offset: 256)
!3398 = !DIDerivedType(tag: DW_TAG_member, name: "virtuals", scope: !3393, file: !396, line: 2435, baseType: !2696, size: 64, offset: 320)
!3399 = !DIDerivedType(tag: DW_TAG_member, name: "vptr_field", scope: !3393, file: !396, line: 2436, baseType: !2696, size: 64, offset: 384)
!3400 = !DIDerivedType(tag: DW_TAG_member, name: "base_accesses", scope: !3393, file: !396, line: 2437, baseType: !3079, size: 64, offset: 448)
!3401 = !DIDerivedType(tag: DW_TAG_member, name: "inheritance", scope: !3393, file: !396, line: 2438, baseType: !2696, size: 64, offset: 512)
!3402 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_subvtt", scope: !3393, file: !396, line: 2440, baseType: !2696, size: 64, offset: 576)
!3403 = !DIDerivedType(tag: DW_TAG_member, name: "vtt_vptr", scope: !3393, file: !396, line: 2441, baseType: !2696, size: 64, offset: 640)
!3404 = !DIDerivedType(tag: DW_TAG_member, name: "base_binfos", scope: !3393, file: !396, line: 2443, baseType: !3405, size: 128, offset: 704)
!3405 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_tree_none", file: !396, line: 182, baseType: !3406)
!3406 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_tree_none", file: !396, line: 182, size: 128, elements: !3407)
!3407 = !{!3408}
!3408 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3406, file: !396, line: 182, baseType: !3084, size: 128)
!3409 = !DIDerivedType(tag: DW_TAG_member, name: "stmt_list", scope: !2698, file: !396, line: 3401, baseType: !3410, size: 320)
!3410 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list", file: !396, line: 3327, size: 320, elements: !3411)
!3411 = !{!3412, !3413, !3420}
!3412 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3410, file: !396, line: 3329, baseType: !2734, size: 192)
!3413 = !DIDerivedType(tag: DW_TAG_member, name: "head", scope: !3410, file: !396, line: 3330, baseType: !3414, size: 64, offset: 192)
!3414 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3415, size: 64)
!3415 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_statement_list_node", file: !396, line: 3320, size: 192, elements: !3416)
!3416 = !{!3417, !3418, !3419}
!3417 = !DIDerivedType(tag: DW_TAG_member, name: "prev", scope: !3415, file: !396, line: 3322, baseType: !3414, size: 64)
!3418 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3415, file: !396, line: 3323, baseType: !3414, size: 64, offset: 64)
!3419 = !DIDerivedType(tag: DW_TAG_member, name: "stmt", scope: !3415, file: !396, line: 3324, baseType: !2696, size: 64, offset: 128)
!3420 = !DIDerivedType(tag: DW_TAG_member, name: "tail", scope: !3410, file: !396, line: 3331, baseType: !3414, size: 64, offset: 256)
!3421 = !DIDerivedType(tag: DW_TAG_member, name: "constructor", scope: !2698, file: !396, line: 3402, baseType: !3422, size: 256)
!3422 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_constructor", file: !396, line: 1540, size: 256, elements: !3423)
!3423 = !{!3424, !3425}
!3424 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3422, file: !396, line: 1541, baseType: !2734, size: 192)
!3425 = !DIDerivedType(tag: DW_TAG_member, name: "elts", scope: !3422, file: !396, line: 1542, baseType: !3426, size: 64, offset: 192)
!3426 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3427, size: 64)
!3427 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_gc", file: !396, line: 1538, baseType: !3428)
!3428 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_gc", file: !396, line: 1538, size: 192, elements: !3429)
!3429 = !{!3430}
!3430 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3428, file: !396, line: 1538, baseType: !3431, size: 192)
!3431 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_constructor_elt_base", file: !396, line: 1537, baseType: !3432)
!3432 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_constructor_elt_base", file: !396, line: 1537, size: 192, elements: !3433)
!3433 = !{!3434, !3435, !3436}
!3434 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3432, file: !396, line: 1537, baseType: !7, size: 32)
!3435 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3432, file: !396, line: 1537, baseType: !7, size: 32, offset: 32)
!3436 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3432, file: !396, line: 1537, baseType: !3437, size: 128, offset: 64)
!3437 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3438, size: 128, elements: !2614)
!3438 = !DIDerivedType(tag: DW_TAG_typedef, name: "constructor_elt", file: !396, line: 1535, baseType: !3439)
!3439 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "constructor_elt_d", file: !396, line: 1532, size: 128, elements: !3440)
!3440 = !{!3441, !3442}
!3441 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !3439, file: !396, line: 1533, baseType: !2696, size: 64)
!3442 = !DIDerivedType(tag: DW_TAG_member, name: "value", scope: !3439, file: !396, line: 1534, baseType: !2696, size: 64, offset: 64)
!3443 = !DIDerivedType(tag: DW_TAG_member, name: "omp_clause", scope: !2698, file: !396, line: 3403, baseType: !3444, size: 512)
!3444 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_omp_clause", file: !396, line: 1938, size: 512, elements: !3445)
!3445 = !{!3446, !3447, !3448, !3449, !3455, !3456, !3457}
!3446 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3444, file: !396, line: 1939, baseType: !2734, size: 192)
!3447 = !DIDerivedType(tag: DW_TAG_member, name: "locus", scope: !3444, file: !396, line: 1940, baseType: !2817, size: 32, offset: 192)
!3448 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !3444, file: !396, line: 1941, baseType: !395, size: 32, offset: 224)
!3449 = !DIDerivedType(tag: DW_TAG_member, name: "subcode", scope: !3444, file: !396, line: 1946, baseType: !3450, size: 32, offset: 256)
!3450 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "omp_clause_subcode", file: !396, line: 1942, size: 32, elements: !3451)
!3451 = !{!3452, !3453, !3454}
!3452 = !DIDerivedType(tag: DW_TAG_member, name: "default_kind", scope: !3450, file: !396, line: 1943, baseType: !414, size: 32)
!3453 = !DIDerivedType(tag: DW_TAG_member, name: "schedule_kind", scope: !3450, file: !396, line: 1944, baseType: !421, size: 32)
!3454 = !DIDerivedType(tag: DW_TAG_member, name: "reduction_code", scope: !3450, file: !396, line: 1945, baseType: !428, size: 32)
!3455 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_init", scope: !3444, file: !396, line: 1950, baseType: !2573, size: 64, offset: 320)
!3456 = !DIDerivedType(tag: DW_TAG_member, name: "gimple_reduction_merge", scope: !3444, file: !396, line: 1951, baseType: !2573, size: 64, offset: 384)
!3457 = !DIDerivedType(tag: DW_TAG_member, name: "ops", scope: !3444, file: !396, line: 1953, baseType: !3090, size: 64, offset: 448)
!3458 = !DIDerivedType(tag: DW_TAG_member, name: "optimization", scope: !2698, file: !396, line: 3404, baseType: !3459, size: 1664)
!3459 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_optimization_option", file: !396, line: 3337, size: 1664, elements: !3460)
!3460 = !{!3461, !3462}
!3461 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3459, file: !396, line: 3338, baseType: !2734, size: 192)
!3462 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3459, file: !396, line: 3341, baseType: !3463, size: 1472, offset: 192)
!3463 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_optimization", file: !3464, line: 410, size: 1472, elements: !3465)
!3464 = !DIFile(filename: "./options.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3465 = !{!3466, !3467, !3468, !3469, !3470, !3471, !3472, !3473, !3474, !3476, !3477, !3478, !3479, !3480, !3481, !3482, !3483, !3484, !3485, !3486, !3487, !3488, !3489, !3490, !3491, !3492, !3493, !3494, !3495, !3496, !3497, !3498, !3499, !3500, !3501, !3502, !3503, !3504, !3505, !3506, !3507, !3508, !3509, !3510, !3511, !3512, !3513, !3514, !3515, !3516, !3517, !3518, !3519, !3520, !3521, !3522, !3523, !3524, !3525, !3526, !3527, !3528, !3529, !3530, !3531, !3532, !3533, !3534, !3535, !3536, !3537, !3538, !3539, !3540, !3541, !3542, !3543, !3544, !3545, !3546, !3547, !3548, !3549, !3550, !3551, !3552, !3553, !3554, !3555, !3556, !3557, !3558, !3559, !3560, !3561, !3562, !3563, !3564, !3565, !3566, !3567, !3568, !3569, !3570, !3571, !3572, !3573, !3574, !3575, !3576, !3577, !3578, !3579, !3580, !3581, !3582, !3583, !3584, !3585, !3586, !3587, !3588, !3589, !3590, !3591, !3592, !3593, !3594, !3595, !3596, !3597, !3598, !3599, !3600, !3601, !3602, !3603, !3604, !3605, !3606, !3607, !3608, !3609, !3610, !3611, !3612, !3613, !3614, !3615, !3616, !3617, !3618, !3619, !3620, !3621, !3622, !3623, !3624, !3625, !3626, !3627, !3628, !3629}
!3466 = !DIDerivedType(tag: DW_TAG_member, name: "align_functions", scope: !3463, file: !3464, line: 412, baseType: !2545, size: 32)
!3467 = !DIDerivedType(tag: DW_TAG_member, name: "align_jumps", scope: !3463, file: !3464, line: 413, baseType: !2545, size: 32, offset: 32)
!3468 = !DIDerivedType(tag: DW_TAG_member, name: "align_labels", scope: !3463, file: !3464, line: 414, baseType: !2545, size: 32, offset: 64)
!3469 = !DIDerivedType(tag: DW_TAG_member, name: "align_loops", scope: !3463, file: !3464, line: 415, baseType: !2545, size: 32, offset: 96)
!3470 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns", scope: !3463, file: !3464, line: 416, baseType: !2545, size: 32, offset: 128)
!3471 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_stalled_insns_dep", scope: !3463, file: !3464, line: 417, baseType: !2545, size: 32, offset: 160)
!3472 = !DIDerivedType(tag: DW_TAG_member, name: "optimize", scope: !3463, file: !3464, line: 418, baseType: !2809, size: 8, offset: 192)
!3473 = !DIDerivedType(tag: DW_TAG_member, name: "optimize_size", scope: !3463, file: !3464, line: 419, baseType: !2809, size: 8, offset: 200)
!3474 = !DIDerivedType(tag: DW_TAG_member, name: "flag_argument_noalias", scope: !3463, file: !3464, line: 420, baseType: !3475, size: 8, offset: 208)
!3475 = !DIBasicType(name: "signed char", size: 8, encoding: DW_ATE_signed_char)
!3476 = !DIDerivedType(tag: DW_TAG_member, name: "flag_asynchronous_unwind_tables", scope: !3463, file: !3464, line: 421, baseType: !3475, size: 8, offset: 216)
!3477 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_on_count_reg", scope: !3463, file: !3464, line: 422, baseType: !3475, size: 8, offset: 224)
!3478 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_probabilities", scope: !3463, file: !3464, line: 423, baseType: !3475, size: 8, offset: 232)
!3479 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize", scope: !3463, file: !3464, line: 424, baseType: !3475, size: 8, offset: 240)
!3480 = !DIDerivedType(tag: DW_TAG_member, name: "flag_branch_target_load_optimize2", scope: !3463, file: !3464, line: 425, baseType: !3475, size: 8, offset: 248)
!3481 = !DIDerivedType(tag: DW_TAG_member, name: "flag_btr_bb_exclusive", scope: !3463, file: !3464, line: 426, baseType: !3475, size: 8, offset: 256)
!3482 = !DIDerivedType(tag: DW_TAG_member, name: "flag_caller_saves", scope: !3463, file: !3464, line: 427, baseType: !3475, size: 8, offset: 264)
!3483 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_common", scope: !3463, file: !3464, line: 428, baseType: !3475, size: 8, offset: 272)
!3484 = !DIDerivedType(tag: DW_TAG_member, name: "flag_conserve_stack", scope: !3463, file: !3464, line: 429, baseType: !3475, size: 8, offset: 280)
!3485 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cprop_registers", scope: !3463, file: !3464, line: 430, baseType: !3475, size: 8, offset: 288)
!3486 = !DIDerivedType(tag: DW_TAG_member, name: "flag_crossjumping", scope: !3463, file: !3464, line: 431, baseType: !3475, size: 8, offset: 296)
!3487 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cse_follow_jumps", scope: !3463, file: !3464, line: 432, baseType: !3475, size: 8, offset: 304)
!3488 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_fortran_rules", scope: !3463, file: !3464, line: 433, baseType: !3475, size: 8, offset: 312)
!3489 = !DIDerivedType(tag: DW_TAG_member, name: "flag_cx_limited_range", scope: !3463, file: !3464, line: 434, baseType: !3475, size: 8, offset: 320)
!3490 = !DIDerivedType(tag: DW_TAG_member, name: "flag_data_sections", scope: !3463, file: !3464, line: 435, baseType: !3475, size: 8, offset: 328)
!3491 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dce", scope: !3463, file: !3464, line: 436, baseType: !3475, size: 8, offset: 336)
!3492 = !DIDerivedType(tag: DW_TAG_member, name: "flag_defer_pop", scope: !3463, file: !3464, line: 437, baseType: !3475, size: 8, offset: 344)
!3493 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delayed_branch", scope: !3463, file: !3464, line: 438, baseType: !3475, size: 8, offset: 352)
!3494 = !DIDerivedType(tag: DW_TAG_member, name: "flag_delete_null_pointer_checks", scope: !3463, file: !3464, line: 439, baseType: !3475, size: 8, offset: 360)
!3495 = !DIDerivedType(tag: DW_TAG_member, name: "flag_dse", scope: !3463, file: !3464, line: 440, baseType: !3475, size: 8, offset: 368)
!3496 = !DIDerivedType(tag: DW_TAG_member, name: "flag_early_inlining", scope: !3463, file: !3464, line: 441, baseType: !3475, size: 8, offset: 376)
!3497 = !DIDerivedType(tag: DW_TAG_member, name: "flag_exceptions", scope: !3463, file: !3464, line: 442, baseType: !3475, size: 8, offset: 384)
!3498 = !DIDerivedType(tag: DW_TAG_member, name: "flag_expensive_optimizations", scope: !3463, file: !3464, line: 443, baseType: !3475, size: 8, offset: 392)
!3499 = !DIDerivedType(tag: DW_TAG_member, name: "flag_finite_math_only", scope: !3463, file: !3464, line: 444, baseType: !3475, size: 8, offset: 400)
!3500 = !DIDerivedType(tag: DW_TAG_member, name: "flag_float_store", scope: !3463, file: !3464, line: 445, baseType: !3475, size: 8, offset: 408)
!3501 = !DIDerivedType(tag: DW_TAG_member, name: "flag_forward_propagate", scope: !3463, file: !3464, line: 446, baseType: !3475, size: 8, offset: 416)
!3502 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse", scope: !3463, file: !3464, line: 447, baseType: !3475, size: 8, offset: 424)
!3503 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_after_reload", scope: !3463, file: !3464, line: 448, baseType: !3475, size: 8, offset: 432)
!3504 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_las", scope: !3463, file: !3464, line: 449, baseType: !3475, size: 8, offset: 440)
!3505 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_lm", scope: !3463, file: !3464, line: 450, baseType: !3475, size: 8, offset: 448)
!3506 = !DIDerivedType(tag: DW_TAG_member, name: "flag_gcse_sm", scope: !3463, file: !3464, line: 451, baseType: !3475, size: 8, offset: 456)
!3507 = !DIDerivedType(tag: DW_TAG_member, name: "flag_graphite_identity", scope: !3463, file: !3464, line: 452, baseType: !3475, size: 8, offset: 464)
!3508 = !DIDerivedType(tag: DW_TAG_member, name: "flag_guess_branch_prob", scope: !3463, file: !3464, line: 453, baseType: !3475, size: 8, offset: 472)
!3509 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion", scope: !3463, file: !3464, line: 454, baseType: !3475, size: 8, offset: 480)
!3510 = !DIDerivedType(tag: DW_TAG_member, name: "flag_if_conversion2", scope: !3463, file: !3464, line: 455, baseType: !3475, size: 8, offset: 488)
!3511 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions", scope: !3463, file: !3464, line: 456, baseType: !3475, size: 8, offset: 496)
!3512 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_functions_called_once", scope: !3463, file: !3464, line: 457, baseType: !3475, size: 8, offset: 504)
!3513 = !DIDerivedType(tag: DW_TAG_member, name: "flag_inline_small_functions", scope: !3463, file: !3464, line: 458, baseType: !3475, size: 8, offset: 512)
!3514 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp", scope: !3463, file: !3464, line: 459, baseType: !3475, size: 8, offset: 520)
!3515 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_cp_clone", scope: !3463, file: !3464, line: 460, baseType: !3475, size: 8, offset: 528)
!3516 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_matrix_reorg", scope: !3463, file: !3464, line: 461, baseType: !3475, size: 8, offset: 536)
!3517 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pta", scope: !3463, file: !3464, line: 462, baseType: !3475, size: 8, offset: 544)
!3518 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_pure_const", scope: !3463, file: !3464, line: 463, baseType: !3475, size: 8, offset: 552)
!3519 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_reference", scope: !3463, file: !3464, line: 464, baseType: !3475, size: 8, offset: 560)
!3520 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_sra", scope: !3463, file: !3464, line: 465, baseType: !3475, size: 8, offset: 568)
!3521 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ipa_type_escape", scope: !3463, file: !3464, line: 466, baseType: !3475, size: 8, offset: 576)
!3522 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ivopts", scope: !3463, file: !3464, line: 467, baseType: !3475, size: 8, offset: 584)
!3523 = !DIDerivedType(tag: DW_TAG_member, name: "flag_jump_tables", scope: !3463, file: !3464, line: 468, baseType: !3475, size: 8, offset: 592)
!3524 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_block", scope: !3463, file: !3464, line: 469, baseType: !3475, size: 8, offset: 600)
!3525 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_interchange", scope: !3463, file: !3464, line: 470, baseType: !3475, size: 8, offset: 608)
!3526 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_parallelize_all", scope: !3463, file: !3464, line: 471, baseType: !3475, size: 8, offset: 616)
!3527 = !DIDerivedType(tag: DW_TAG_member, name: "flag_loop_strip_mine", scope: !3463, file: !3464, line: 472, baseType: !3475, size: 8, offset: 624)
!3528 = !DIDerivedType(tag: DW_TAG_member, name: "flag_lto_report", scope: !3463, file: !3464, line: 473, baseType: !3475, size: 8, offset: 632)
!3529 = !DIDerivedType(tag: DW_TAG_member, name: "flag_ltrans", scope: !3463, file: !3464, line: 474, baseType: !3475, size: 8, offset: 640)
!3530 = !DIDerivedType(tag: DW_TAG_member, name: "flag_errno_math", scope: !3463, file: !3464, line: 475, baseType: !3475, size: 8, offset: 648)
!3531 = !DIDerivedType(tag: DW_TAG_member, name: "flag_merge_constants", scope: !3463, file: !3464, line: 476, baseType: !3475, size: 8, offset: 656)
!3532 = !DIDerivedType(tag: DW_TAG_member, name: "flag_modulo_sched", scope: !3463, file: !3464, line: 477, baseType: !3475, size: 8, offset: 664)
!3533 = !DIDerivedType(tag: DW_TAG_member, name: "flag_move_loop_invariants", scope: !3463, file: !3464, line: 478, baseType: !3475, size: 8, offset: 672)
!3534 = !DIDerivedType(tag: DW_TAG_member, name: "flag_non_call_exceptions", scope: !3463, file: !3464, line: 479, baseType: !3475, size: 8, offset: 680)
!3535 = !DIDerivedType(tag: DW_TAG_member, name: "flag_omit_frame_pointer", scope: !3463, file: !3464, line: 480, baseType: !3475, size: 8, offset: 688)
!3536 = !DIDerivedType(tag: DW_TAG_member, name: "flag_regmove", scope: !3463, file: !3464, line: 481, baseType: !3475, size: 8, offset: 696)
!3537 = !DIDerivedType(tag: DW_TAG_member, name: "flag_optimize_sibling_calls", scope: !3463, file: !3464, line: 482, baseType: !3475, size: 8, offset: 704)
!3538 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pack_struct", scope: !3463, file: !3464, line: 483, baseType: !3475, size: 8, offset: 712)
!3539 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peel_loops", scope: !3463, file: !3464, line: 484, baseType: !3475, size: 8, offset: 720)
!3540 = !DIDerivedType(tag: DW_TAG_member, name: "flag_no_peephole", scope: !3463, file: !3464, line: 485, baseType: !3475, size: 8, offset: 728)
!3541 = !DIDerivedType(tag: DW_TAG_member, name: "flag_peephole2", scope: !3463, file: !3464, line: 486, baseType: !3475, size: 8, offset: 736)
!3542 = !DIDerivedType(tag: DW_TAG_member, name: "flag_predictive_commoning", scope: !3463, file: !3464, line: 487, baseType: !3475, size: 8, offset: 744)
!3543 = !DIDerivedType(tag: DW_TAG_member, name: "flag_prefetch_loop_arrays", scope: !3463, file: !3464, line: 488, baseType: !3475, size: 8, offset: 752)
!3544 = !DIDerivedType(tag: DW_TAG_member, name: "flag_pcc_struct_return", scope: !3463, file: !3464, line: 489, baseType: !3475, size: 8, offset: 760)
!3545 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rename_registers", scope: !3463, file: !3464, line: 490, baseType: !3475, size: 8, offset: 768)
!3546 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks", scope: !3463, file: !3464, line: 491, baseType: !3475, size: 8, offset: 776)
!3547 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_blocks_and_partition", scope: !3463, file: !3464, line: 492, baseType: !3475, size: 8, offset: 784)
!3548 = !DIDerivedType(tag: DW_TAG_member, name: "flag_reorder_functions", scope: !3463, file: !3464, line: 493, baseType: !3475, size: 8, offset: 792)
!3549 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rerun_cse_after_loop", scope: !3463, file: !3464, line: 494, baseType: !3475, size: 8, offset: 800)
!3550 = !DIDerivedType(tag: DW_TAG_member, name: "flag_resched_modulo_sched", scope: !3463, file: !3464, line: 495, baseType: !3475, size: 8, offset: 808)
!3551 = !DIDerivedType(tag: DW_TAG_member, name: "flag_rounding_math", scope: !3463, file: !3464, line: 496, baseType: !3475, size: 8, offset: 816)
!3552 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_critical_path_heuristic", scope: !3463, file: !3464, line: 497, baseType: !3475, size: 8, offset: 824)
!3553 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_dep_count_heuristic", scope: !3463, file: !3464, line: 498, baseType: !3475, size: 8, offset: 832)
!3554 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_group_heuristic", scope: !3463, file: !3464, line: 499, baseType: !3475, size: 8, offset: 840)
!3555 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_interblock", scope: !3463, file: !3464, line: 500, baseType: !3475, size: 8, offset: 848)
!3556 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_last_insn_heuristic", scope: !3463, file: !3464, line: 501, baseType: !3475, size: 8, offset: 856)
!3557 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_pressure", scope: !3463, file: !3464, line: 502, baseType: !3475, size: 8, offset: 864)
!3558 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_rank_heuristic", scope: !3463, file: !3464, line: 503, baseType: !3475, size: 8, offset: 872)
!3559 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative", scope: !3463, file: !3464, line: 504, baseType: !3475, size: 8, offset: 880)
!3560 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched_spec_insn_heuristic", scope: !3463, file: !3464, line: 505, baseType: !3475, size: 8, offset: 888)
!3561 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load", scope: !3463, file: !3464, line: 506, baseType: !3475, size: 8, offset: 896)
!3562 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_speculative_load_dangerous", scope: !3463, file: !3464, line: 507, baseType: !3475, size: 8, offset: 904)
!3563 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sched2_use_superblocks", scope: !3463, file: !3464, line: 508, baseType: !3475, size: 8, offset: 912)
!3564 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns", scope: !3463, file: !3464, line: 509, baseType: !3475, size: 8, offset: 920)
!3565 = !DIDerivedType(tag: DW_TAG_member, name: "flag_schedule_insns_after_reload", scope: !3463, file: !3464, line: 510, baseType: !3475, size: 8, offset: 928)
!3566 = !DIDerivedType(tag: DW_TAG_member, name: "flag_section_anchors", scope: !3463, file: !3464, line: 511, baseType: !3475, size: 8, offset: 936)
!3567 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining", scope: !3463, file: !3464, line: 512, baseType: !3475, size: 8, offset: 944)
!3568 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_pipelining_outer_loops", scope: !3463, file: !3464, line: 513, baseType: !3475, size: 8, offset: 952)
!3569 = !DIDerivedType(tag: DW_TAG_member, name: "flag_sel_sched_reschedule_pipelined", scope: !3463, file: !3464, line: 514, baseType: !3475, size: 8, offset: 960)
!3570 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling", scope: !3463, file: !3464, line: 515, baseType: !3475, size: 8, offset: 968)
!3571 = !DIDerivedType(tag: DW_TAG_member, name: "flag_selective_scheduling2", scope: !3463, file: !3464, line: 516, baseType: !3475, size: 8, offset: 976)
!3572 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signaling_nans", scope: !3463, file: !3464, line: 517, baseType: !3475, size: 8, offset: 984)
!3573 = !DIDerivedType(tag: DW_TAG_member, name: "flag_signed_zeros", scope: !3463, file: !3464, line: 518, baseType: !3475, size: 8, offset: 992)
!3574 = !DIDerivedType(tag: DW_TAG_member, name: "flag_single_precision_constant", scope: !3463, file: !3464, line: 519, baseType: !3475, size: 8, offset: 1000)
!3575 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_ivs_in_unroller", scope: !3463, file: !3464, line: 520, baseType: !3475, size: 8, offset: 1008)
!3576 = !DIDerivedType(tag: DW_TAG_member, name: "flag_split_wide_types", scope: !3463, file: !3464, line: 521, baseType: !3475, size: 8, offset: 1016)
!3577 = !DIDerivedType(tag: DW_TAG_member, name: "flag_strict_aliasing", scope: !3463, file: !3464, line: 522, baseType: !3475, size: 8, offset: 1024)
!3578 = !DIDerivedType(tag: DW_TAG_member, name: "flag_thread_jumps", scope: !3463, file: !3464, line: 523, baseType: !3475, size: 8, offset: 1032)
!3579 = !DIDerivedType(tag: DW_TAG_member, name: "flag_toplevel_reorder", scope: !3463, file: !3464, line: 524, baseType: !3475, size: 8, offset: 1040)
!3580 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapping_math", scope: !3463, file: !3464, line: 525, baseType: !3475, size: 8, offset: 1048)
!3581 = !DIDerivedType(tag: DW_TAG_member, name: "flag_trapv", scope: !3463, file: !3464, line: 526, baseType: !3475, size: 8, offset: 1056)
!3582 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_builtin_call_dce", scope: !3463, file: !3464, line: 527, baseType: !3475, size: 8, offset: 1064)
!3583 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ccp", scope: !3463, file: !3464, line: 528, baseType: !3475, size: 8, offset: 1072)
!3584 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ch", scope: !3463, file: !3464, line: 529, baseType: !3475, size: 8, offset: 1080)
!3585 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copy_prop", scope: !3463, file: !3464, line: 530, baseType: !3475, size: 8, offset: 1088)
!3586 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_copyrename", scope: !3463, file: !3464, line: 531, baseType: !3475, size: 8, offset: 1096)
!3587 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_cselim", scope: !3463, file: !3464, line: 532, baseType: !3475, size: 8, offset: 1104)
!3588 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dce", scope: !3463, file: !3464, line: 533, baseType: !3475, size: 8, offset: 1112)
!3589 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dom", scope: !3463, file: !3464, line: 534, baseType: !3475, size: 8, offset: 1120)
!3590 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_dse", scope: !3463, file: !3464, line: 535, baseType: !3475, size: 8, offset: 1128)
!3591 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_forwprop", scope: !3463, file: !3464, line: 536, baseType: !3475, size: 8, offset: 1136)
!3592 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_fre", scope: !3463, file: !3464, line: 537, baseType: !3475, size: 8, offset: 1144)
!3593 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_distribution", scope: !3463, file: !3464, line: 538, baseType: !3475, size: 8, offset: 1152)
!3594 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_im", scope: !3463, file: !3464, line: 539, baseType: !3475, size: 8, offset: 1160)
!3595 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_ivcanon", scope: !3463, file: !3464, line: 540, baseType: !3475, size: 8, offset: 1168)
!3596 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_linear", scope: !3463, file: !3464, line: 541, baseType: !3475, size: 8, offset: 1176)
!3597 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_loop_optimize", scope: !3463, file: !3464, line: 542, baseType: !3475, size: 8, offset: 1184)
!3598 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_live_range_split", scope: !3463, file: !3464, line: 543, baseType: !3475, size: 8, offset: 1192)
!3599 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_phiprop", scope: !3463, file: !3464, line: 544, baseType: !3475, size: 8, offset: 1200)
!3600 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pre", scope: !3463, file: !3464, line: 545, baseType: !3475, size: 8, offset: 1208)
!3601 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_pta", scope: !3463, file: !3464, line: 546, baseType: !3475, size: 8, offset: 1216)
!3602 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_reassoc", scope: !3463, file: !3464, line: 547, baseType: !3475, size: 8, offset: 1224)
!3603 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_scev_cprop", scope: !3463, file: !3464, line: 548, baseType: !3475, size: 8, offset: 1232)
!3604 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sink", scope: !3463, file: !3464, line: 549, baseType: !3475, size: 8, offset: 1240)
!3605 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_slp_vectorize", scope: !3463, file: !3464, line: 550, baseType: !3475, size: 8, offset: 1248)
!3606 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_sra", scope: !3463, file: !3464, line: 551, baseType: !3475, size: 8, offset: 1256)
!3607 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_switch_conversion", scope: !3463, file: !3464, line: 552, baseType: !3475, size: 8, offset: 1264)
!3608 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_ter", scope: !3463, file: !3464, line: 553, baseType: !3475, size: 8, offset: 1272)
!3609 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vect_loop_version", scope: !3463, file: !3464, line: 554, baseType: !3475, size: 8, offset: 1280)
!3610 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vectorize", scope: !3463, file: !3464, line: 555, baseType: !3475, size: 8, offset: 1288)
!3611 = !DIDerivedType(tag: DW_TAG_member, name: "flag_tree_vrp", scope: !3463, file: !3464, line: 556, baseType: !3475, size: 8, offset: 1296)
!3612 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unit_at_a_time", scope: !3463, file: !3464, line: 557, baseType: !3475, size: 8, offset: 1304)
!3613 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_all_loops", scope: !3463, file: !3464, line: 558, baseType: !3475, size: 8, offset: 1312)
!3614 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unroll_loops", scope: !3463, file: !3464, line: 559, baseType: !3475, size: 8, offset: 1320)
!3615 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_loop_optimizations", scope: !3463, file: !3464, line: 560, baseType: !3475, size: 8, offset: 1328)
!3616 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unsafe_math_optimizations", scope: !3463, file: !3464, line: 561, baseType: !3475, size: 8, offset: 1336)
!3617 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unswitch_loops", scope: !3463, file: !3464, line: 562, baseType: !3475, size: 8, offset: 1344)
!3618 = !DIDerivedType(tag: DW_TAG_member, name: "flag_unwind_tables", scope: !3463, file: !3464, line: 563, baseType: !3475, size: 8, offset: 1352)
!3619 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking", scope: !3463, file: !3464, line: 564, baseType: !3475, size: 8, offset: 1360)
!3620 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments", scope: !3463, file: !3464, line: 565, baseType: !3475, size: 8, offset: 1368)
!3621 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_assignments_toggle", scope: !3463, file: !3464, line: 566, baseType: !3475, size: 8, offset: 1376)
!3622 = !DIDerivedType(tag: DW_TAG_member, name: "flag_var_tracking_uninit", scope: !3463, file: !3464, line: 567, baseType: !3475, size: 8, offset: 1384)
!3623 = !DIDerivedType(tag: DW_TAG_member, name: "flag_variable_expansion_in_unroller", scope: !3463, file: !3464, line: 568, baseType: !3475, size: 8, offset: 1392)
!3624 = !DIDerivedType(tag: DW_TAG_member, name: "flag_vect_cost_model", scope: !3463, file: !3464, line: 569, baseType: !3475, size: 8, offset: 1400)
!3625 = !DIDerivedType(tag: DW_TAG_member, name: "flag_value_profile_transformations", scope: !3463, file: !3464, line: 570, baseType: !3475, size: 8, offset: 1408)
!3626 = !DIDerivedType(tag: DW_TAG_member, name: "flag_web", scope: !3463, file: !3464, line: 571, baseType: !3475, size: 8, offset: 1416)
!3627 = !DIDerivedType(tag: DW_TAG_member, name: "flag_whole_program", scope: !3463, file: !3464, line: 572, baseType: !3475, size: 8, offset: 1424)
!3628 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wpa", scope: !3463, file: !3464, line: 573, baseType: !3475, size: 8, offset: 1432)
!3629 = !DIDerivedType(tag: DW_TAG_member, name: "flag_wrapv", scope: !3463, file: !3464, line: 574, baseType: !3475, size: 8, offset: 1440)
!3630 = !DIDerivedType(tag: DW_TAG_member, name: "target_option", scope: !2698, file: !396, line: 3405, baseType: !3631, size: 384)
!3631 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "tree_target_option", file: !396, line: 3352, size: 384, elements: !3632)
!3632 = !{!3633, !3634}
!3633 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3631, file: !396, line: 3353, baseType: !2734, size: 192)
!3634 = !DIDerivedType(tag: DW_TAG_member, name: "opts", scope: !3631, file: !396, line: 3356, baseType: !3635, size: 192, offset: 192)
!3635 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "cl_target_option", file: !3464, line: 578, size: 192, elements: !3636)
!3636 = !{!3637, !3638, !3639, !3640, !3641, !3642, !3643, !3644, !3645, !3646, !3647}
!3637 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags_explicit", scope: !3635, file: !3464, line: 580, baseType: !2545, size: 32)
!3638 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags_explicit", scope: !3635, file: !3464, line: 581, baseType: !2545, size: 32, offset: 32)
!3639 = !DIDerivedType(tag: DW_TAG_member, name: "target_flags", scope: !3635, file: !3464, line: 582, baseType: !2545, size: 32, offset: 64)
!3640 = !DIDerivedType(tag: DW_TAG_member, name: "ix86_isa_flags", scope: !3635, file: !3464, line: 583, baseType: !2545, size: 32, offset: 96)
!3641 = !DIDerivedType(tag: DW_TAG_member, name: "arch", scope: !3635, file: !3464, line: 584, baseType: !2809, size: 8, offset: 128)
!3642 = !DIDerivedType(tag: DW_TAG_member, name: "arch_specified", scope: !3635, file: !3464, line: 585, baseType: !2809, size: 8, offset: 136)
!3643 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !3635, file: !3464, line: 586, baseType: !2809, size: 8, offset: 144)
!3644 = !DIDerivedType(tag: DW_TAG_member, name: "fpmath", scope: !3635, file: !3464, line: 587, baseType: !2809, size: 8, offset: 152)
!3645 = !DIDerivedType(tag: DW_TAG_member, name: "schedule", scope: !3635, file: !3464, line: 588, baseType: !2809, size: 8, offset: 160)
!3646 = !DIDerivedType(tag: DW_TAG_member, name: "tune", scope: !3635, file: !3464, line: 589, baseType: !2809, size: 8, offset: 168)
!3647 = !DIDerivedType(tag: DW_TAG_member, name: "tune_defaulted", scope: !3635, file: !3464, line: 590, baseType: !2809, size: 8, offset: 176)
!3648 = !DIDerivedType(tag: DW_TAG_member, name: "rt_bb", scope: !2597, file: !2302, line: 178, baseType: !2547, size: 64)
!3649 = !DIDerivedType(tag: DW_TAG_member, name: "rt_mem", scope: !2597, file: !2302, line: 179, baseType: !3650, size: 64)
!3650 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3651, size: 64)
!3651 = !DIDerivedType(tag: DW_TAG_typedef, name: "mem_attrs", file: !2302, line: 150, baseType: !3652)
!3652 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "mem_attrs", file: !2302, line: 142, size: 320, elements: !3653)
!3653 = !{!3654, !3655, !3656, !3657, !3658, !3659}
!3654 = !DIDerivedType(tag: DW_TAG_member, name: "expr", scope: !3652, file: !2302, line: 144, baseType: !2696, size: 64)
!3655 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3652, file: !2302, line: 145, baseType: !2577, size: 64, offset: 64)
!3656 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3652, file: !2302, line: 146, baseType: !2577, size: 64, offset: 128)
!3657 = !DIDerivedType(tag: DW_TAG_member, name: "alias", scope: !3652, file: !2302, line: 147, baseType: !3313, size: 32, offset: 192)
!3658 = !DIDerivedType(tag: DW_TAG_member, name: "align", scope: !3652, file: !2302, line: 148, baseType: !7, size: 32, offset: 224)
!3659 = !DIDerivedType(tag: DW_TAG_member, name: "addrspace", scope: !3652, file: !2302, line: 149, baseType: !2809, size: 8, offset: 256)
!3660 = !DIDerivedType(tag: DW_TAG_member, name: "rt_reg", scope: !2597, file: !2302, line: 180, baseType: !3661, size: 64)
!3661 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3662, size: 64)
!3662 = !DIDerivedType(tag: DW_TAG_typedef, name: "reg_attrs", file: !2302, line: 162, baseType: !3663)
!3663 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "reg_attrs", file: !2302, line: 159, size: 128, elements: !3664)
!3664 = !{!3665, !3666}
!3665 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3663, file: !2302, line: 160, baseType: !2696, size: 64)
!3666 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3663, file: !2302, line: 161, baseType: !2666, size: 64, offset: 64)
!3667 = !DIDerivedType(tag: DW_TAG_member, name: "rt_constant", scope: !2597, file: !2302, line: 181, baseType: !3668, size: 64)
!3668 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3669, size: 64)
!3669 = !DICompositeType(tag: DW_TAG_structure_type, name: "constant_descriptor_rtx", file: !2302, line: 181, flags: DIFlagFwdDecl)
!3670 = !DIDerivedType(tag: DW_TAG_member, name: "hwint", scope: !2592, file: !2302, line: 317, baseType: !3671, size: 64)
!3671 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2666, size: 64, elements: !2614)
!3672 = !DIDerivedType(tag: DW_TAG_member, name: "block_sym", scope: !2592, file: !2302, line: 318, baseType: !3673, size: 320)
!3673 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "block_symbol", file: !2302, line: 188, size: 320, elements: !3674)
!3674 = !{!3675, !3677, !3732}
!3675 = !DIDerivedType(tag: DW_TAG_member, name: "fld", scope: !3673, file: !2302, line: 190, baseType: !3676, size: 192)
!3676 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2596, size: 192, elements: !2767)
!3677 = !DIDerivedType(tag: DW_TAG_member, name: "block", scope: !3673, file: !2302, line: 193, baseType: !3678, size: 64, offset: 192)
!3678 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3679, size: 64)
!3679 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "object_block", file: !2302, line: 206, size: 320, elements: !3680)
!3680 = !{!3681, !3717, !3718, !3719, !3731}
!3681 = !DIDerivedType(tag: DW_TAG_member, name: "sect", scope: !3679, file: !2302, line: 208, baseType: !3682, size: 64)
!3682 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3683, size: 64)
!3683 = !DIDerivedType(tag: DW_TAG_typedef, name: "section", file: !2524, line: 62, baseType: !3684)
!3684 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "section", file: !3685, line: 538, size: 256, elements: !3686)
!3685 = !DIFile(filename: "./output.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!3686 = !{!3687, !3691, !3697, !3708}
!3687 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3684, file: !3685, line: 539, baseType: !3688, size: 32)
!3688 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "section_common", file: !3685, line: 482, size: 32, elements: !3689)
!3689 = !{!3690}
!3690 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !3688, file: !3685, line: 484, baseType: !7, size: 32)
!3691 = !DIDerivedType(tag: DW_TAG_member, name: "named", scope: !3684, file: !3685, line: 540, baseType: !3692, size: 192)
!3692 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "named_section", file: !3685, line: 488, size: 192, elements: !3693)
!3693 = !{!3694, !3695, !3696}
!3694 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3692, file: !3685, line: 489, baseType: !3688, size: 32)
!3695 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3692, file: !3685, line: 492, baseType: !2602, size: 64, offset: 64)
!3696 = !DIDerivedType(tag: DW_TAG_member, name: "decl", scope: !3692, file: !3685, line: 496, baseType: !2696, size: 64, offset: 128)
!3697 = !DIDerivedType(tag: DW_TAG_member, name: "unnamed", scope: !3684, file: !3685, line: 541, baseType: !3698, size: 256)
!3698 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "unnamed_section", file: !3685, line: 504, size: 256, elements: !3699)
!3699 = !{!3700, !3701, !3706, !3707}
!3700 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3698, file: !3685, line: 505, baseType: !3688, size: 32)
!3701 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3698, file: !3685, line: 509, baseType: !3702, size: 64, offset: 64)
!3702 = !DIDerivedType(tag: DW_TAG_typedef, name: "unnamed_section_callback", file: !3685, line: 501, baseType: !3703)
!3703 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3704, size: 64)
!3704 = !DISubroutineType(types: !3705)
!3705 = !{null, !3038}
!3706 = !DIDerivedType(tag: DW_TAG_member, name: "data", scope: !3698, file: !3685, line: 510, baseType: !3038, size: 64, offset: 128)
!3707 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3698, file: !3685, line: 513, baseType: !3682, size: 64, offset: 192)
!3708 = !DIDerivedType(tag: DW_TAG_member, name: "noswitch", scope: !3684, file: !3685, line: 542, baseType: !3709, size: 128)
!3709 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noswitch_section", file: !3685, line: 530, size: 128, elements: !3710)
!3710 = !{!3711, !3712}
!3711 = !DIDerivedType(tag: DW_TAG_member, name: "common", scope: !3709, file: !3685, line: 531, baseType: !3688, size: 32)
!3712 = !DIDerivedType(tag: DW_TAG_member, name: "callback", scope: !3709, file: !3685, line: 534, baseType: !3713, size: 64, offset: 64)
!3713 = !DIDerivedType(tag: DW_TAG_typedef, name: "noswitch_section_callback", file: !3685, line: 525, baseType: !3714)
!3714 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3715, size: 64)
!3715 = !DISubroutineType(types: !3716)
!3716 = !{!2809, !2696, !2602, !2649, !2649}
!3717 = !DIDerivedType(tag: DW_TAG_member, name: "alignment", scope: !3679, file: !2302, line: 211, baseType: !7, size: 32, offset: 64)
!3718 = !DIDerivedType(tag: DW_TAG_member, name: "size", scope: !3679, file: !2302, line: 214, baseType: !2666, size: 64, offset: 128)
!3719 = !DIDerivedType(tag: DW_TAG_member, name: "objects", scope: !3679, file: !2302, line: 224, baseType: !3720, size: 64, offset: 192)
!3720 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3721, size: 64)
!3721 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_gc", file: !2302, line: 202, baseType: !3722)
!3722 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_gc", file: !2302, line: 202, size: 128, elements: !3723)
!3723 = !{!3724}
!3724 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3722, file: !2302, line: 202, baseType: !3725, size: 128)
!3725 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_rtx_base", file: !2302, line: 200, baseType: !3726)
!3726 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_rtx_base", file: !2302, line: 200, size: 128, elements: !3727)
!3727 = !{!3728, !3729, !3730}
!3728 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3726, file: !2302, line: 200, baseType: !7, size: 32)
!3729 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3726, file: !2302, line: 200, baseType: !7, size: 32, offset: 32)
!3730 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3726, file: !2302, line: 200, baseType: !2613, size: 64, offset: 64)
!3731 = !DIDerivedType(tag: DW_TAG_member, name: "anchors", scope: !3679, file: !2302, line: 234, baseType: !3720, size: 64, offset: 256)
!3732 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !3673, file: !2302, line: 197, baseType: !2666, size: 64, offset: 256)
!3733 = !DIDerivedType(tag: DW_TAG_member, name: "rv", scope: !2592, file: !2302, line: 319, baseType: !2756, size: 256)
!3734 = !DIDerivedType(tag: DW_TAG_member, name: "fv", scope: !2592, file: !2302, line: 320, baseType: !2775, size: 192)
!3735 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2565, file: !367, line: 134, baseType: !2544, size: 64, offset: 192)
!3736 = !DIDerivedType(tag: DW_TAG_member, name: "goto_block", scope: !2565, file: !367, line: 137, baseType: !2696, size: 64, offset: 256)
!3737 = !DIDerivedType(tag: DW_TAG_member, name: "goto_locus", scope: !2565, file: !367, line: 138, baseType: !2817, size: 32, offset: 320)
!3738 = !DIDerivedType(tag: DW_TAG_member, name: "dest_idx", scope: !2565, file: !367, line: 142, baseType: !7, size: 32, offset: 352)
!3739 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2565, file: !367, line: 144, baseType: !2545, size: 32, offset: 384)
!3740 = !DIDerivedType(tag: DW_TAG_member, name: "probability", scope: !2565, file: !367, line: 145, baseType: !2545, size: 32, offset: 416)
!3741 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2565, file: !367, line: 146, baseType: !3742, size: 64, offset: 448)
!3742 = !DIDerivedType(tag: DW_TAG_typedef, name: "gcov_type", file: !367, line: 119, baseType: !2666)
!3743 = !DIDerivedType(tag: DW_TAG_member, name: "succs", scope: !2548, file: !367, line: 220, baseType: !2551, size: 64, offset: 64)
!3744 = !DIDerivedType(tag: DW_TAG_member, name: "aux", scope: !2548, file: !367, line: 223, baseType: !2544, size: 64, offset: 128)
!3745 = !DIDerivedType(tag: DW_TAG_member, name: "loop_father", scope: !2548, file: !367, line: 226, baseType: !3163, size: 64, offset: 192)
!3746 = !DIDerivedType(tag: DW_TAG_member, name: "dom", scope: !2548, file: !367, line: 229, baseType: !3747, size: 128, offset: 256)
!3747 = !DICompositeType(tag: DW_TAG_array_type, baseType: !3748, size: 128, elements: !2650)
!3748 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3749, size: 64)
!3749 = !DICompositeType(tag: DW_TAG_structure_type, name: "et_node", file: !367, line: 229, flags: DIFlagFwdDecl)
!3750 = !DIDerivedType(tag: DW_TAG_member, name: "prev_bb", scope: !2548, file: !367, line: 232, baseType: !2547, size: 64, offset: 384)
!3751 = !DIDerivedType(tag: DW_TAG_member, name: "next_bb", scope: !2548, file: !367, line: 233, baseType: !2547, size: 64, offset: 448)
!3752 = !DIDerivedType(tag: DW_TAG_member, name: "il", scope: !2548, file: !367, line: 238, baseType: !3753, size: 64, offset: 512)
!3753 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "basic_block_il_dependent", file: !367, line: 235, size: 64, elements: !3754)
!3754 = !{!3755, !3761}
!3755 = !DIDerivedType(tag: DW_TAG_member, name: "gimple", scope: !3753, file: !367, line: 236, baseType: !3756, size: 64)
!3756 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3757, size: 64)
!3757 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "gimple_bb_info", file: !367, line: 273, size: 128, elements: !3758)
!3758 = !{!3759, !3760}
!3759 = !DIDerivedType(tag: DW_TAG_member, name: "seq", scope: !3757, file: !367, line: 275, baseType: !2573, size: 64)
!3760 = !DIDerivedType(tag: DW_TAG_member, name: "phi_nodes", scope: !3757, file: !367, line: 278, baseType: !2573, size: 64, offset: 64)
!3761 = !DIDerivedType(tag: DW_TAG_member, name: "rtl", scope: !3753, file: !367, line: 237, baseType: !3762, size: 64)
!3762 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3763, size: 64)
!3763 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_bb_info", file: !367, line: 259, size: 320, elements: !3764)
!3764 = !{!3765, !3766, !3767, !3768, !3769}
!3765 = !DIDerivedType(tag: DW_TAG_member, name: "head_", scope: !3763, file: !367, line: 261, baseType: !2577, size: 64)
!3766 = !DIDerivedType(tag: DW_TAG_member, name: "end_", scope: !3763, file: !367, line: 262, baseType: !2577, size: 64, offset: 64)
!3767 = !DIDerivedType(tag: DW_TAG_member, name: "header", scope: !3763, file: !367, line: 266, baseType: !2577, size: 64, offset: 128)
!3768 = !DIDerivedType(tag: DW_TAG_member, name: "footer", scope: !3763, file: !367, line: 267, baseType: !2577, size: 64, offset: 192)
!3769 = !DIDerivedType(tag: DW_TAG_member, name: "visited", scope: !3763, file: !367, line: 270, baseType: !2545, size: 32, offset: 256)
!3770 = !DIDerivedType(tag: DW_TAG_member, name: "count", scope: !2548, file: !367, line: 241, baseType: !3742, size: 64, offset: 576)
!3771 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !2548, file: !367, line: 244, baseType: !2545, size: 32, offset: 640)
!3772 = !DIDerivedType(tag: DW_TAG_member, name: "loop_depth", scope: !2548, file: !367, line: 247, baseType: !2545, size: 32, offset: 672)
!3773 = !DIDerivedType(tag: DW_TAG_member, name: "frequency", scope: !2548, file: !367, line: 250, baseType: !2545, size: 32, offset: 704)
!3774 = !DIDerivedType(tag: DW_TAG_member, name: "discriminator", scope: !2548, file: !367, line: 253, baseType: !2545, size: 32, offset: 736)
!3775 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !2548, file: !367, line: 256, baseType: !2545, size: 32, offset: 768)
!3776 = !DIBasicType(name: "unsigned short", size: 16, encoding: DW_ATE_unsigned)
!3777 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2577, size: 64)
!3778 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3779, size: 64)
!3779 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_heap", file: !3098, line: 32, baseType: !3780)
!3780 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_heap", file: !3098, line: 32, size: 96, elements: !3781)
!3781 = !{!3782}
!3782 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !3780, file: !3098, line: 32, baseType: !3783, size: 96)
!3783 = !DIDerivedType(tag: DW_TAG_typedef, name: "VEC_int_base", file: !3098, line: 31, baseType: !3784)
!3784 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "VEC_int_base", file: !3098, line: 31, size: 96, elements: !3785)
!3785 = !{!3786, !3787, !3788}
!3786 = !DIDerivedType(tag: DW_TAG_member, name: "num", scope: !3784, file: !3098, line: 31, baseType: !7, size: 32)
!3787 = !DIDerivedType(tag: DW_TAG_member, name: "alloc", scope: !3784, file: !3098, line: 31, baseType: !7, size: 32, offset: 32)
!3788 = !DIDerivedType(tag: DW_TAG_member, name: "vec", scope: !3784, file: !3098, line: 31, baseType: !3789, size: 32, offset: 64)
!3789 = !DICompositeType(tag: DW_TAG_array_type, baseType: !2545, size: 32, elements: !2614)
!3790 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap", file: !2524, line: 47, baseType: !2633)
!3791 = !{!0, !3792, !3820, !3822, !3824, !3826, !3828}
!3792 = !DIGlobalVariableExpression(var: !3793, expr: !DIExpression())
!3793 = distinct !DIGlobalVariable(name: "pass_if_after_combine", scope: !2, file: !3, line: 4277, type: !3794, isLocal: false, isDefinition: true)
!3794 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "rtl_opt_pass", file: !6, line: 162, size: 640, elements: !3795)
!3795 = !{!3796}
!3796 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !3794, file: !6, line: 164, baseType: !3797, size: 640)
!3797 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "opt_pass", file: !6, line: 114, size: 640, elements: !3798)
!3798 = !{!3799, !3800, !3801, !3805, !3809, !3811, !3812, !3813, !3815, !3816, !3817, !3818, !3819}
!3799 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !3797, file: !6, line: 117, baseType: !5, size: 32)
!3800 = !DIDerivedType(tag: DW_TAG_member, name: "name", scope: !3797, file: !6, line: 121, baseType: !2602, size: 64, offset: 64)
!3801 = !DIDerivedType(tag: DW_TAG_member, name: "gate", scope: !3797, file: !6, line: 125, baseType: !3802, size: 64, offset: 128)
!3802 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3803, size: 64)
!3803 = !DISubroutineType(types: !3804)
!3804 = !{!2809}
!3805 = !DIDerivedType(tag: DW_TAG_member, name: "execute", scope: !3797, file: !6, line: 130, baseType: !3806, size: 64, offset: 192)
!3806 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3807, size: 64)
!3807 = !DISubroutineType(types: !3808)
!3808 = !{!7}
!3809 = !DIDerivedType(tag: DW_TAG_member, name: "sub", scope: !3797, file: !6, line: 133, baseType: !3810, size: 64, offset: 256)
!3810 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3797, size: 64)
!3811 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !3797, file: !6, line: 136, baseType: !3810, size: 64, offset: 320)
!3812 = !DIDerivedType(tag: DW_TAG_member, name: "static_pass_number", scope: !3797, file: !6, line: 139, baseType: !2545, size: 32, offset: 384)
!3813 = !DIDerivedType(tag: DW_TAG_member, name: "tv_id", scope: !3797, file: !6, line: 143, baseType: !3814, size: 32, offset: 416)
!3814 = !DIDerivedType(tag: DW_TAG_typedef, name: "timevar_id_t", file: !14, line: 80, baseType: !13)
!3815 = !DIDerivedType(tag: DW_TAG_member, name: "properties_required", scope: !3797, file: !6, line: 146, baseType: !7, size: 32, offset: 448)
!3816 = !DIDerivedType(tag: DW_TAG_member, name: "properties_provided", scope: !3797, file: !6, line: 147, baseType: !7, size: 32, offset: 480)
!3817 = !DIDerivedType(tag: DW_TAG_member, name: "properties_destroyed", scope: !3797, file: !6, line: 148, baseType: !7, size: 32, offset: 512)
!3818 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_start", scope: !3797, file: !6, line: 151, baseType: !7, size: 32, offset: 544)
!3819 = !DIDerivedType(tag: DW_TAG_member, name: "todo_flags_finish", scope: !3797, file: !6, line: 152, baseType: !7, size: 32, offset: 576)
!3820 = !DIGlobalVariableExpression(var: !3821, expr: !DIExpression())
!3821 = distinct !DIGlobalVariable(name: "pass_if_after_reload", scope: !2, file: !3, line: 4314, type: !3794, isLocal: false, isDefinition: true)
!3822 = !DIGlobalVariableExpression(var: !3823, expr: !DIExpression())
!3823 = distinct !DIGlobalVariable(name: "num_possible_if_blocks", scope: !2, file: !3, line: 74, type: !2545, isLocal: true, isDefinition: true)
!3824 = !DIGlobalVariableExpression(var: !3825, expr: !DIExpression())
!3825 = distinct !DIGlobalVariable(name: "num_updated_if_blocks", scope: !2, file: !3, line: 78, type: !2545, isLocal: true, isDefinition: true)
!3826 = !DIGlobalVariableExpression(var: !3827, expr: !DIExpression())
!3827 = distinct !DIGlobalVariable(name: "num_true_changes", scope: !2, file: !3, line: 81, type: !2545, isLocal: true, isDefinition: true)
!3828 = !DIGlobalVariableExpression(var: !3829, expr: !DIExpression())
!3829 = distinct !DIGlobalVariable(name: "cond_exec_changed_p", scope: !2, file: !3, line: 84, type: !2545, isLocal: true, isDefinition: true)
!3830 = !{i32 7, !"Dwarf Version", i32 4}
!3831 = !{i32 2, !"Debug Info Version", i32 3}
!3832 = !{i32 1, !"wchar_size", i32 4}
!3833 = !{!"clang version 10.0.1 (https://github.com/svkeerthy/IR2Vec-LoopOptimizationFramework.git 561ac470e63b728263a0ac06ef987886ac648486)"}
!3834 = distinct !DISubprogram(name: "gate_handle_if_conversion", scope: !3, file: !3, line: 4218, type: !3803, scopeLine: 4219, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3835 = !{}
!3836 = !DILocation(line: 4220, column: 11, scope: !3834)
!3837 = !DILocation(line: 4220, column: 20, scope: !3834)
!3838 = !DILocation(line: 4221, column: 5, scope: !3834)
!3839 = !DILocation(line: 4221, column: 8, scope: !3834)
!3840 = !DILocation(line: 0, scope: !3834)
!3841 = !DILocation(line: 4220, column: 10, scope: !3834)
!3842 = !DILocation(line: 4220, column: 3, scope: !3834)
!3843 = distinct !DISubprogram(name: "rest_of_handle_if_conversion", scope: !3, file: !3, line: 4226, type: !3807, scopeLine: 4227, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3844 = !DILocation(line: 4228, column: 7, scope: !3845)
!3845 = distinct !DILexicalBlock(scope: !3843, file: !3, line: 4228, column: 7)
!3846 = !DILocation(line: 4228, column: 7, scope: !3843)
!3847 = !DILocation(line: 4230, column: 11, scope: !3848)
!3848 = distinct !DILexicalBlock(scope: !3849, file: !3, line: 4230, column: 11)
!3849 = distinct !DILexicalBlock(scope: !3845, file: !3, line: 4229, column: 5)
!3850 = !DILocation(line: 4230, column: 11, scope: !3849)
!3851 = !DILocation(line: 4231, column: 25, scope: !3848)
!3852 = !DILocation(line: 4231, column: 36, scope: !3848)
!3853 = !DILocation(line: 4231, column: 9, scope: !3848)
!3854 = !DILocation(line: 4232, column: 7, scope: !3849)
!3855 = !DILocation(line: 4233, column: 7, scope: !3849)
!3856 = !DILocation(line: 4234, column: 5, scope: !3849)
!3857 = !DILocation(line: 4236, column: 3, scope: !3843)
!3858 = !DILocation(line: 4237, column: 3, scope: !3843)
!3859 = distinct !DISubprogram(name: "gate_handle_if_after_combine", scope: !3, file: !3, line: 4261, type: !3803, scopeLine: 4262, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3860 = !DILocation(line: 4263, column: 10, scope: !3859)
!3861 = !DILocation(line: 4263, column: 19, scope: !3859)
!3862 = !DILocation(line: 4263, column: 23, scope: !3859)
!3863 = !DILocation(line: 4263, column: 26, scope: !3859)
!3864 = !DILocation(line: 4264, column: 5, scope: !3859)
!3865 = !DILocation(line: 4264, column: 8, scope: !3859)
!3866 = !DILocation(line: 0, scope: !3859)
!3867 = !DILocation(line: 4263, column: 3, scope: !3859)
!3868 = distinct !DISubprogram(name: "rest_of_handle_if_after_combine", scope: !3, file: !3, line: 4271, type: !3807, scopeLine: 4272, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3869 = !DILocation(line: 4273, column: 3, scope: !3868)
!3870 = !DILocation(line: 4274, column: 3, scope: !3868)
!3871 = distinct !DISubprogram(name: "gate_handle_if_after_reload", scope: !3, file: !3, line: 4300, type: !3803, scopeLine: 4301, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3872 = !DILocation(line: 4302, column: 10, scope: !3871)
!3873 = !DILocation(line: 4302, column: 19, scope: !3871)
!3874 = !DILocation(line: 4302, column: 23, scope: !3871)
!3875 = !DILocation(line: 4302, column: 26, scope: !3871)
!3876 = !DILocation(line: 4303, column: 5, scope: !3871)
!3877 = !DILocation(line: 4303, column: 8, scope: !3871)
!3878 = !DILocation(line: 0, scope: !3871)
!3879 = !DILocation(line: 4302, column: 3, scope: !3871)
!3880 = distinct !DISubprogram(name: "rest_of_handle_if_after_reload", scope: !3, file: !3, line: 4307, type: !3807, scopeLine: 4308, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3881 = !DILocation(line: 4309, column: 3, scope: !3880)
!3882 = !DILocation(line: 4310, column: 3, scope: !3880)
!3883 = distinct !DISubprogram(name: "if_convert", scope: !3, file: !3, line: 4117, type: !3884, scopeLine: 4118, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!3884 = !DISubroutineType(types: !3885)
!3885 = !{null}
!3886 = !DILocalVariable(name: "bb", scope: !3883, file: !3, line: 4119, type: !2546)
!3887 = !DILocation(line: 4119, column: 15, scope: !3883)
!3888 = !DILocalVariable(name: "pass", scope: !3883, file: !3, line: 4120, type: !2545)
!3889 = !DILocation(line: 4120, column: 7, scope: !3883)
!3890 = !DILocation(line: 4122, column: 7, scope: !3891)
!3891 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4122, column: 7)
!3892 = !DILocation(line: 4122, column: 16, scope: !3891)
!3893 = !DILocation(line: 4122, column: 7, scope: !3883)
!3894 = !DILocation(line: 4124, column: 7, scope: !3895)
!3895 = distinct !DILexicalBlock(scope: !3891, file: !3, line: 4123, column: 5)
!3896 = !DILocation(line: 4125, column: 7, scope: !3895)
!3897 = !DILocation(line: 4126, column: 5, scope: !3895)
!3898 = !DILocation(line: 4128, column: 26, scope: !3883)
!3899 = !DILocation(line: 4129, column: 25, scope: !3883)
!3900 = !DILocation(line: 4130, column: 20, scope: !3883)
!3901 = !DILocation(line: 4132, column: 3, scope: !3883)
!3902 = !DILocation(line: 4133, column: 3, scope: !3883)
!3903 = !DILocation(line: 4134, column: 3, scope: !3883)
!3904 = !DILocation(line: 4135, column: 3, scope: !3883)
!3905 = !DILocation(line: 4138, column: 3, scope: !3883)
!3906 = !DILocation(line: 4140, column: 3, scope: !3883)
!3907 = !DILocation(line: 4145, column: 8, scope: !3883)
!3908 = !DILocation(line: 4146, column: 3, scope: !3883)
!3909 = !DILocation(line: 4148, column: 7, scope: !3910)
!3910 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4147, column: 5)
!3911 = !DILocation(line: 4150, column: 7, scope: !3910)
!3912 = !DILocation(line: 4151, column: 27, scope: !3910)
!3913 = !DILocation(line: 4152, column: 11, scope: !3910)
!3914 = !DILocation(line: 4155, column: 11, scope: !3915)
!3915 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 4155, column: 11)
!3916 = !DILocation(line: 4155, column: 21, scope: !3915)
!3917 = !DILocation(line: 4155, column: 24, scope: !3915)
!3918 = !DILocation(line: 4155, column: 29, scope: !3915)
!3919 = !DILocation(line: 4155, column: 11, scope: !3910)
!3920 = !DILocation(line: 4156, column: 11, scope: !3915)
!3921 = !DILocation(line: 4156, column: 61, scope: !3915)
!3922 = !DILocation(line: 4156, column: 2, scope: !3915)
!3923 = !DILocation(line: 4159, column: 7, scope: !3924)
!3924 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 4159, column: 7)
!3925 = !DILocation(line: 4159, column: 7, scope: !3926)
!3926 = distinct !DILexicalBlock(scope: !3924, file: !3, line: 4159, column: 7)
!3927 = !DILocalVariable(name: "new_bb", scope: !3928, file: !3, line: 4161, type: !2546)
!3928 = distinct !DILexicalBlock(scope: !3926, file: !3, line: 4160, column: 2)
!3929 = !DILocation(line: 4161, column: 23, scope: !3928)
!3930 = !DILocation(line: 4162, column: 11, scope: !3928)
!3931 = !DILocation(line: 4162, column: 36, scope: !3928)
!3932 = !DILocation(line: 4162, column: 19, scope: !3928)
!3933 = !DILocation(line: 4163, column: 18, scope: !3928)
!3934 = !DILocation(line: 4163, column: 47, scope: !3928)
!3935 = !DILocation(line: 4163, column: 51, scope: !3928)
!3936 = !DILocation(line: 4163, column: 31, scope: !3928)
!3937 = !DILocation(line: 4163, column: 29, scope: !3928)
!3938 = !DILocation(line: 4163, column: 58, scope: !3928)
!3939 = !DILocation(line: 0, scope: !3928)
!3940 = !DILocation(line: 4164, column: 18, scope: !3928)
!3941 = !DILocation(line: 4164, column: 16, scope: !3928)
!3942 = distinct !{!3942, !3930, !3940}
!3943 = !DILocation(line: 4165, column: 2, scope: !3928)
!3944 = distinct !{!3944, !3923, !3945}
!3945 = !DILocation(line: 4165, column: 2, scope: !3924)
!3946 = !DILocation(line: 4168, column: 11, scope: !3947)
!3947 = distinct !DILexicalBlock(scope: !3910, file: !3, line: 4168, column: 11)
!3948 = !DILocation(line: 4168, column: 21, scope: !3947)
!3949 = !DILocation(line: 4168, column: 24, scope: !3947)
!3950 = !DILocation(line: 4168, column: 11, scope: !3910)
!3951 = !DILocation(line: 4170, column: 8, scope: !3952)
!3952 = distinct !DILexicalBlock(scope: !3953, file: !3, line: 4170, column: 8)
!3953 = distinct !DILexicalBlock(scope: !3947, file: !3, line: 4169, column: 2)
!3954 = !DILocation(line: 4170, column: 19, scope: !3952)
!3955 = !DILocation(line: 4170, column: 8, scope: !3953)
!3956 = !DILocation(line: 4171, column: 30, scope: !3952)
!3957 = !DILocation(line: 4171, column: 41, scope: !3952)
!3958 = !DILocation(line: 4171, column: 55, scope: !3952)
!3959 = !DILocation(line: 4171, column: 6, scope: !3952)
!3960 = !DILocation(line: 4173, column: 25, scope: !3952)
!3961 = !DILocation(line: 4173, column: 36, scope: !3952)
!3962 = !DILocation(line: 4173, column: 6, scope: !3952)
!3963 = !DILocation(line: 4174, column: 2, scope: !3953)
!3964 = !DILocation(line: 4176, column: 5, scope: !3910)
!3965 = !DILocation(line: 4177, column: 10, scope: !3883)
!3966 = distinct !{!3966, !3908, !3967}
!3967 = !DILocation(line: 4177, column: 29, scope: !3883)
!3968 = !DILocation(line: 4180, column: 7, scope: !3969)
!3969 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4180, column: 7)
!3970 = !DILocation(line: 4180, column: 7, scope: !3883)
!3971 = !DILocation(line: 4181, column: 14, scope: !3969)
!3972 = !DILocation(line: 4181, column: 5, scope: !3969)
!3973 = !DILocation(line: 4184, column: 3, scope: !3883)
!3974 = !DILocation(line: 4186, column: 7, scope: !3975)
!3975 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4186, column: 7)
!3976 = !DILocation(line: 4186, column: 7, scope: !3883)
!3977 = !DILocation(line: 4187, column: 13, scope: !3975)
!3978 = !DILocation(line: 4187, column: 5, scope: !3975)
!3979 = !DILocation(line: 4189, column: 3, scope: !3883)
!3980 = !DILocation(line: 4192, column: 7, scope: !3981)
!3981 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4192, column: 7)
!3982 = !DILocation(line: 4192, column: 19, scope: !3981)
!3983 = !DILocation(line: 4192, column: 17, scope: !3981)
!3984 = !DILocation(line: 4192, column: 7, scope: !3883)
!3985 = !DILocation(line: 4193, column: 17, scope: !3981)
!3986 = !DILocation(line: 4193, column: 15, scope: !3981)
!3987 = !DILocation(line: 4193, column: 5, scope: !3981)
!3988 = !DILocation(line: 4196, column: 7, scope: !3989)
!3989 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4196, column: 7)
!3990 = !DILocation(line: 4196, column: 17, scope: !3989)
!3991 = !DILocation(line: 4196, column: 20, scope: !3989)
!3992 = !DILocation(line: 4196, column: 43, scope: !3989)
!3993 = !DILocation(line: 4196, column: 7, scope: !3883)
!3994 = !DILocation(line: 4198, column: 16, scope: !3995)
!3995 = distinct !DILexicalBlock(scope: !3989, file: !3, line: 4197, column: 5)
!3996 = !DILocation(line: 4200, column: 9, scope: !3995)
!3997 = !DILocation(line: 4198, column: 7, scope: !3995)
!3998 = !DILocation(line: 4201, column: 16, scope: !3995)
!3999 = !DILocation(line: 4203, column: 9, scope: !3995)
!4000 = !DILocation(line: 4201, column: 7, scope: !3995)
!4001 = !DILocation(line: 4204, column: 16, scope: !3995)
!4002 = !DILocation(line: 4206, column: 9, scope: !3995)
!4003 = !DILocation(line: 4204, column: 7, scope: !3995)
!4004 = !DILocation(line: 4207, column: 5, scope: !3995)
!4005 = !DILocation(line: 4209, column: 7, scope: !4006)
!4006 = distinct !DILexicalBlock(scope: !3883, file: !3, line: 4209, column: 7)
!4007 = !DILocation(line: 4209, column: 16, scope: !4006)
!4008 = !DILocation(line: 4209, column: 7, scope: !3883)
!4009 = !DILocation(line: 4210, column: 24, scope: !4006)
!4010 = !DILocation(line: 4210, column: 5, scope: !4006)
!4011 = !DILocation(line: 4215, column: 1, scope: !3883)
!4012 = distinct !DISubprogram(name: "find_if_header", scope: !3, file: !3, line: 3016, type: !4013, scopeLine: 3017, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4013 = !DISubroutineType(types: !4014)
!4014 = !{!2546, !2546, !2545}
!4015 = !DILocalVariable(name: "test_bb", arg: 1, scope: !4012, file: !3, line: 3016, type: !2546)
!4016 = !DILocation(line: 3016, column: 29, scope: !4012)
!4017 = !DILocalVariable(name: "pass", arg: 2, scope: !4012, file: !3, line: 3016, type: !2545)
!4018 = !DILocation(line: 3016, column: 42, scope: !4012)
!4019 = !DILocalVariable(name: "ce_info", scope: !4012, file: !3, line: 3018, type: !4020)
!4020 = !DIDerivedType(tag: DW_TAG_typedef, name: "ce_if_block_t", file: !367, line: 569, baseType: !4021)
!4021 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "ce_if_block", file: !367, line: 549, size: 576, elements: !4022)
!4022 = !{!4023, !4024, !4025, !4026, !4027, !4028, !4029, !4030, !4031, !4032, !4033, !4034, !4035}
!4023 = !DIDerivedType(tag: DW_TAG_member, name: "test_bb", scope: !4021, file: !367, line: 551, baseType: !2546, size: 64)
!4024 = !DIDerivedType(tag: DW_TAG_member, name: "then_bb", scope: !4021, file: !367, line: 552, baseType: !2546, size: 64, offset: 64)
!4025 = !DIDerivedType(tag: DW_TAG_member, name: "else_bb", scope: !4021, file: !367, line: 553, baseType: !2546, size: 64, offset: 128)
!4026 = !DIDerivedType(tag: DW_TAG_member, name: "join_bb", scope: !4021, file: !367, line: 554, baseType: !2546, size: 64, offset: 192)
!4027 = !DIDerivedType(tag: DW_TAG_member, name: "last_test_bb", scope: !4021, file: !367, line: 555, baseType: !2546, size: 64, offset: 256)
!4028 = !DIDerivedType(tag: DW_TAG_member, name: "num_multiple_test_blocks", scope: !4021, file: !367, line: 556, baseType: !2545, size: 32, offset: 320)
!4029 = !DIDerivedType(tag: DW_TAG_member, name: "num_and_and_blocks", scope: !4021, file: !367, line: 557, baseType: !2545, size: 32, offset: 352)
!4030 = !DIDerivedType(tag: DW_TAG_member, name: "num_or_or_blocks", scope: !4021, file: !367, line: 558, baseType: !2545, size: 32, offset: 384)
!4031 = !DIDerivedType(tag: DW_TAG_member, name: "num_multiple_test_insns", scope: !4021, file: !367, line: 559, baseType: !2545, size: 32, offset: 416)
!4032 = !DIDerivedType(tag: DW_TAG_member, name: "and_and_p", scope: !4021, file: !367, line: 560, baseType: !2545, size: 32, offset: 448)
!4033 = !DIDerivedType(tag: DW_TAG_member, name: "num_then_insns", scope: !4021, file: !367, line: 561, baseType: !2545, size: 32, offset: 480)
!4034 = !DIDerivedType(tag: DW_TAG_member, name: "num_else_insns", scope: !4021, file: !367, line: 562, baseType: !2545, size: 32, offset: 512)
!4035 = !DIDerivedType(tag: DW_TAG_member, name: "pass", scope: !4021, file: !367, line: 563, baseType: !2545, size: 32, offset: 544)
!4036 = !DILocation(line: 3018, column: 17, scope: !4012)
!4037 = !DILocalVariable(name: "then_edge", scope: !4012, file: !3, line: 3019, type: !2563)
!4038 = !DILocation(line: 3019, column: 8, scope: !4012)
!4039 = !DILocalVariable(name: "else_edge", scope: !4012, file: !3, line: 3020, type: !2563)
!4040 = !DILocation(line: 3020, column: 8, scope: !4012)
!4041 = !DILocation(line: 3023, column: 7, scope: !4042)
!4042 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3023, column: 7)
!4043 = !DILocation(line: 3023, column: 35, scope: !4042)
!4044 = !DILocation(line: 3023, column: 7, scope: !4012)
!4045 = !DILocation(line: 3024, column: 5, scope: !4042)
!4046 = !DILocation(line: 3026, column: 15, scope: !4012)
!4047 = !DILocation(line: 3026, column: 13, scope: !4012)
!4048 = !DILocation(line: 3027, column: 15, scope: !4012)
!4049 = !DILocation(line: 3027, column: 13, scope: !4012)
!4050 = !DILocation(line: 3029, column: 24, scope: !4051)
!4051 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3029, column: 7)
!4052 = !DILocation(line: 3029, column: 35, scope: !4051)
!4053 = !DILocation(line: 3029, column: 7, scope: !4051)
!4054 = !DILocation(line: 3029, column: 7, scope: !4012)
!4055 = !DILocation(line: 3030, column: 5, scope: !4051)
!4056 = !DILocation(line: 3031, column: 24, scope: !4057)
!4057 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3031, column: 7)
!4058 = !DILocation(line: 3031, column: 35, scope: !4057)
!4059 = !DILocation(line: 3031, column: 7, scope: !4057)
!4060 = !DILocation(line: 3031, column: 7, scope: !4012)
!4061 = !DILocation(line: 3032, column: 5, scope: !4057)
!4062 = !DILocation(line: 3035, column: 8, scope: !4063)
!4063 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3035, column: 7)
!4064 = !DILocation(line: 3035, column: 19, scope: !4063)
!4065 = !DILocation(line: 3035, column: 25, scope: !4063)
!4066 = !DILocation(line: 3036, column: 7, scope: !4063)
!4067 = !DILocation(line: 3036, column: 11, scope: !4063)
!4068 = !DILocation(line: 3036, column: 22, scope: !4063)
!4069 = !DILocation(line: 3036, column: 28, scope: !4063)
!4070 = !DILocation(line: 3035, column: 7, scope: !4012)
!4071 = !DILocation(line: 3037, column: 5, scope: !4063)
!4072 = !DILocation(line: 3040, column: 8, scope: !4073)
!4073 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3040, column: 7)
!4074 = !DILocation(line: 3040, column: 19, scope: !4073)
!4075 = !DILocation(line: 3040, column: 25, scope: !4073)
!4076 = !DILocation(line: 3041, column: 7, scope: !4073)
!4077 = !DILocation(line: 3041, column: 11, scope: !4073)
!4078 = !DILocation(line: 3041, column: 22, scope: !4073)
!4079 = !DILocation(line: 3041, column: 28, scope: !4073)
!4080 = !DILocation(line: 3040, column: 7, scope: !4012)
!4081 = !DILocation(line: 3042, column: 5, scope: !4073)
!4082 = !DILocation(line: 3045, column: 7, scope: !4083)
!4083 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3045, column: 7)
!4084 = !DILocation(line: 3045, column: 18, scope: !4083)
!4085 = !DILocation(line: 3045, column: 24, scope: !4083)
!4086 = !DILocation(line: 3045, column: 7, scope: !4012)
!4087 = !DILocation(line: 3047, column: 12, scope: !4088)
!4088 = distinct !DILexicalBlock(scope: !4083, file: !3, line: 3047, column: 12)
!4089 = !DILocation(line: 3047, column: 23, scope: !4088)
!4090 = !DILocation(line: 3047, column: 29, scope: !4088)
!4091 = !DILocation(line: 3047, column: 12, scope: !4083)
!4092 = !DILocalVariable(name: "e", scope: !4093, file: !3, line: 3049, type: !2563)
!4093 = distinct !DILexicalBlock(scope: !4088, file: !3, line: 3048, column: 5)
!4094 = !DILocation(line: 3049, column: 12, scope: !4093)
!4095 = !DILocation(line: 3049, column: 16, scope: !4093)
!4096 = !DILocation(line: 3050, column: 19, scope: !4093)
!4097 = !DILocation(line: 3050, column: 17, scope: !4093)
!4098 = !DILocation(line: 3051, column: 19, scope: !4093)
!4099 = !DILocation(line: 3051, column: 17, scope: !4093)
!4100 = !DILocation(line: 3052, column: 5, scope: !4093)
!4101 = !DILocation(line: 3055, column: 5, scope: !4088)
!4102 = !DILocation(line: 3057, column: 3, scope: !4012)
!4103 = !DILocation(line: 3058, column: 21, scope: !4012)
!4104 = !DILocation(line: 3058, column: 11, scope: !4012)
!4105 = !DILocation(line: 3058, column: 19, scope: !4012)
!4106 = !DILocation(line: 3059, column: 21, scope: !4012)
!4107 = !DILocation(line: 3059, column: 32, scope: !4012)
!4108 = !DILocation(line: 3059, column: 11, scope: !4012)
!4109 = !DILocation(line: 3059, column: 19, scope: !4012)
!4110 = !DILocation(line: 3060, column: 21, scope: !4012)
!4111 = !DILocation(line: 3060, column: 32, scope: !4012)
!4112 = !DILocation(line: 3060, column: 11, scope: !4012)
!4113 = !DILocation(line: 3060, column: 19, scope: !4012)
!4114 = !DILocation(line: 3061, column: 18, scope: !4012)
!4115 = !DILocation(line: 3061, column: 11, scope: !4012)
!4116 = !DILocation(line: 3061, column: 16, scope: !4012)
!4117 = !DILocation(line: 3067, column: 9, scope: !4118)
!4118 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3067, column: 7)
!4119 = !DILocation(line: 3068, column: 7, scope: !4118)
!4120 = !DILocation(line: 3068, column: 30, scope: !4118)
!4121 = !DILocation(line: 3068, column: 39, scope: !4118)
!4122 = !DILocation(line: 3068, column: 50, scope: !4118)
!4123 = !DILocation(line: 3068, column: 61, scope: !4118)
!4124 = !DILocation(line: 3068, column: 10, scope: !4118)
!4125 = !DILocation(line: 3067, column: 7, scope: !4012)
!4126 = !DILocation(line: 3069, column: 5, scope: !4118)
!4127 = !DILocation(line: 3071, column: 15, scope: !4128)
!4128 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3071, column: 7)
!4129 = !DILocation(line: 3071, column: 7, scope: !4128)
!4130 = !DILocation(line: 3071, column: 45, scope: !4128)
!4131 = !DILocation(line: 3071, column: 48, scope: !4128)
!4132 = !DILocation(line: 3072, column: 7, scope: !4128)
!4133 = !DILocation(line: 3072, column: 10, scope: !4128)
!4134 = !DILocation(line: 3071, column: 7, scope: !4012)
!4135 = !DILocation(line: 3073, column: 5, scope: !4128)
!4136 = !DILocation(line: 3076, column: 10, scope: !4137)
!4137 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3075, column: 7)
!4138 = !DILocation(line: 3076, column: 50, scope: !4137)
!4139 = !DILocation(line: 3076, column: 60, scope: !4137)
!4140 = !DILocation(line: 3077, column: 7, scope: !4137)
!4141 = !DILocation(line: 3077, column: 26, scope: !4137)
!4142 = !DILocation(line: 3077, column: 35, scope: !4137)
!4143 = !DILocation(line: 3077, column: 46, scope: !4137)
!4144 = !DILocation(line: 3077, column: 10, scope: !4137)
!4145 = !DILocation(line: 3075, column: 7, scope: !4012)
!4146 = !DILocation(line: 3078, column: 5, scope: !4137)
!4147 = !DILocation(line: 3080, column: 7, scope: !4148)
!4148 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3080, column: 7)
!4149 = !DILocation(line: 3080, column: 44, scope: !4148)
!4150 = !DILocation(line: 3081, column: 7, scope: !4148)
!4151 = !DILocation(line: 3081, column: 21, scope: !4148)
!4152 = !DILocation(line: 3081, column: 13, scope: !4148)
!4153 = !DILocation(line: 3081, column: 51, scope: !4148)
!4154 = !DILocation(line: 3081, column: 54, scope: !4148)
!4155 = !DILocation(line: 3080, column: 7, scope: !4012)
!4156 = !DILocation(line: 3083, column: 27, scope: !4157)
!4157 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 3083, column: 11)
!4158 = distinct !DILexicalBlock(scope: !4148, file: !3, line: 3082, column: 5)
!4159 = !DILocation(line: 3083, column: 36, scope: !4157)
!4160 = !DILocation(line: 3083, column: 47, scope: !4157)
!4161 = !DILocation(line: 3083, column: 11, scope: !4157)
!4162 = !DILocation(line: 3083, column: 11, scope: !4158)
!4163 = !DILocation(line: 3084, column: 2, scope: !4157)
!4164 = !DILocation(line: 3085, column: 27, scope: !4165)
!4165 = distinct !DILexicalBlock(scope: !4158, file: !3, line: 3085, column: 11)
!4166 = !DILocation(line: 3085, column: 36, scope: !4165)
!4167 = !DILocation(line: 3085, column: 47, scope: !4165)
!4168 = !DILocation(line: 3085, column: 11, scope: !4165)
!4169 = !DILocation(line: 3085, column: 11, scope: !4158)
!4170 = !DILocation(line: 3086, column: 2, scope: !4165)
!4171 = !DILocation(line: 3087, column: 5, scope: !4158)
!4172 = !DILocation(line: 3089, column: 3, scope: !4012)
!4173 = !DILabel(scope: !4012, name: "success", file: !3, line: 3091)
!4174 = !DILocation(line: 3091, column: 2, scope: !4012)
!4175 = !DILocation(line: 3092, column: 7, scope: !4176)
!4176 = distinct !DILexicalBlock(scope: !4012, file: !3, line: 3092, column: 7)
!4177 = !DILocation(line: 3092, column: 7, scope: !4012)
!4178 = !DILocation(line: 3093, column: 14, scope: !4176)
!4179 = !DILocation(line: 3093, column: 63, scope: !4176)
!4180 = !DILocation(line: 3093, column: 5, scope: !4176)
!4181 = !DILocation(line: 3095, column: 23, scope: !4012)
!4182 = !DILocation(line: 3096, column: 18, scope: !4012)
!4183 = !DILocation(line: 3096, column: 3, scope: !4012)
!4184 = !DILocation(line: 3097, column: 1, scope: !4012)
!4185 = distinct !DISubprogram(name: "VEC_edge_base_length", scope: !367, file: !367, line: 150, type: !4186, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4186 = !DISubroutineType(types: !4187)
!4187 = !{!7, !4188}
!4188 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4189, size: 64)
!4189 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2556)
!4190 = !DILocalVariable(name: "vec_", arg: 1, scope: !4185, file: !367, line: 150, type: !4188)
!4191 = !DILocation(line: 150, column: 1, scope: !4185)
!4192 = distinct !DISubprogram(name: "VEC_edge_base_index", scope: !367, file: !367, line: 150, type: !4193, scopeLine: 150, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4193 = !DISubroutineType(types: !4194)
!4194 = !{!2563, !4188, !7}
!4195 = !DILocalVariable(name: "vec_", arg: 1, scope: !4192, file: !367, line: 150, type: !4188)
!4196 = !DILocation(line: 150, column: 1, scope: !4192)
!4197 = !DILocalVariable(name: "ix_", arg: 2, scope: !4192, file: !367, line: 150, type: !7)
!4198 = !DILocation(line: 0, scope: !4192)
!4199 = distinct !DISubprogram(name: "noce_find_if_block", scope: !3, file: !3, line: 2781, type: !4200, scopeLine: 2784, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4200 = !DISubroutineType(types: !4201)
!4201 = !{!2545, !2546, !2563, !2563, !2545}
!4202 = !DILocalVariable(name: "test_bb", arg: 1, scope: !4199, file: !3, line: 2781, type: !2546)
!4203 = !DILocation(line: 2781, column: 33, scope: !4199)
!4204 = !DILocalVariable(name: "then_edge", arg: 2, scope: !4199, file: !3, line: 2782, type: !2563)
!4205 = !DILocation(line: 2782, column: 12, scope: !4199)
!4206 = !DILocalVariable(name: "else_edge", arg: 3, scope: !4199, file: !3, line: 2782, type: !2563)
!4207 = !DILocation(line: 2782, column: 28, scope: !4199)
!4208 = !DILocalVariable(name: "pass", arg: 4, scope: !4199, file: !3, line: 2783, type: !2545)
!4209 = !DILocation(line: 2783, column: 11, scope: !4199)
!4210 = !DILocalVariable(name: "then_bb", scope: !4199, file: !3, line: 2785, type: !2546)
!4211 = !DILocation(line: 2785, column: 15, scope: !4199)
!4212 = !DILocalVariable(name: "else_bb", scope: !4199, file: !3, line: 2785, type: !2546)
!4213 = !DILocation(line: 2785, column: 24, scope: !4199)
!4214 = !DILocalVariable(name: "join_bb", scope: !4199, file: !3, line: 2785, type: !2546)
!4215 = !DILocation(line: 2785, column: 33, scope: !4199)
!4216 = !DILocalVariable(name: "then_else_reversed", scope: !4199, file: !3, line: 2786, type: !2809)
!4217 = !DILocation(line: 2786, column: 8, scope: !4199)
!4218 = !DILocalVariable(name: "jump", scope: !4199, file: !3, line: 2787, type: !2577)
!4219 = !DILocation(line: 2787, column: 7, scope: !4199)
!4220 = !DILocalVariable(name: "cond", scope: !4199, file: !3, line: 2787, type: !2577)
!4221 = !DILocation(line: 2787, column: 13, scope: !4199)
!4222 = !DILocalVariable(name: "cond_earliest", scope: !4199, file: !3, line: 2788, type: !2577)
!4223 = !DILocation(line: 2788, column: 7, scope: !4199)
!4224 = !DILocalVariable(name: "if_info", scope: !4199, file: !3, line: 2789, type: !4225)
!4225 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "noce_if_info", file: !3, line: 594, size: 832, elements: !4226)
!4226 = !{!4227, !4228, !4229, !4230, !4231, !4232, !4233, !4234, !4235, !4236, !4237, !4238, !4239, !4240}
!4227 = !DIDerivedType(tag: DW_TAG_member, name: "test_bb", scope: !4225, file: !3, line: 597, baseType: !2546, size: 64)
!4228 = !DIDerivedType(tag: DW_TAG_member, name: "then_bb", scope: !4225, file: !3, line: 597, baseType: !2546, size: 64, offset: 64)
!4229 = !DIDerivedType(tag: DW_TAG_member, name: "else_bb", scope: !4225, file: !3, line: 597, baseType: !2546, size: 64, offset: 128)
!4230 = !DIDerivedType(tag: DW_TAG_member, name: "join_bb", scope: !4225, file: !3, line: 597, baseType: !2546, size: 64, offset: 192)
!4231 = !DIDerivedType(tag: DW_TAG_member, name: "jump", scope: !4225, file: !3, line: 600, baseType: !2577, size: 64, offset: 256)
!4232 = !DIDerivedType(tag: DW_TAG_member, name: "cond", scope: !4225, file: !3, line: 603, baseType: !2577, size: 64, offset: 320)
!4233 = !DIDerivedType(tag: DW_TAG_member, name: "cond_earliest", scope: !4225, file: !3, line: 606, baseType: !2577, size: 64, offset: 384)
!4234 = !DIDerivedType(tag: DW_TAG_member, name: "insn_a", scope: !4225, file: !3, line: 614, baseType: !2577, size: 64, offset: 448)
!4235 = !DIDerivedType(tag: DW_TAG_member, name: "insn_b", scope: !4225, file: !3, line: 614, baseType: !2577, size: 64, offset: 512)
!4236 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !4225, file: !3, line: 617, baseType: !2577, size: 64, offset: 576)
!4237 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !4225, file: !3, line: 617, baseType: !2577, size: 64, offset: 640)
!4238 = !DIDerivedType(tag: DW_TAG_member, name: "x", scope: !4225, file: !3, line: 620, baseType: !2577, size: 64, offset: 704)
!4239 = !DIDerivedType(tag: DW_TAG_member, name: "then_else_reversed", scope: !4225, file: !3, line: 626, baseType: !2809, size: 8, offset: 768)
!4240 = !DIDerivedType(tag: DW_TAG_member, name: "branch_cost", scope: !4225, file: !3, line: 629, baseType: !2545, size: 32, offset: 800)
!4241 = !DILocation(line: 2789, column: 23, scope: !4199)
!4242 = !DILocation(line: 2792, column: 3, scope: !4199)
!4243 = !DILocation(line: 2795, column: 22, scope: !4244)
!4244 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2795, column: 7)
!4245 = !DILocation(line: 2795, column: 33, scope: !4244)
!4246 = !DILocation(line: 2795, column: 7, scope: !4244)
!4247 = !DILocation(line: 2796, column: 7, scope: !4244)
!4248 = !DILocation(line: 2796, column: 25, scope: !4244)
!4249 = !DILocation(line: 2796, column: 36, scope: !4244)
!4250 = !DILocation(line: 2796, column: 10, scope: !4244)
!4251 = !DILocation(line: 2797, column: 7, scope: !4244)
!4252 = !DILocation(line: 2797, column: 25, scope: !4244)
!4253 = !DILocation(line: 2797, column: 36, scope: !4244)
!4254 = !DILocation(line: 2797, column: 10, scope: !4244)
!4255 = !DILocation(line: 2798, column: 7, scope: !4244)
!4256 = !DILocation(line: 2798, column: 25, scope: !4244)
!4257 = !DILocation(line: 2798, column: 36, scope: !4244)
!4258 = !DILocation(line: 2798, column: 10, scope: !4244)
!4259 = !DILocation(line: 2799, column: 7, scope: !4244)
!4260 = !DILocation(line: 2799, column: 23, scope: !4244)
!4261 = !DILocation(line: 2799, column: 34, scope: !4244)
!4262 = !DILocation(line: 2799, column: 10, scope: !4244)
!4263 = !DILocation(line: 2799, column: 56, scope: !4244)
!4264 = !DILocation(line: 2799, column: 67, scope: !4244)
!4265 = !DILocation(line: 2799, column: 43, scope: !4244)
!4266 = !DILocation(line: 2799, column: 40, scope: !4244)
!4267 = !DILocation(line: 2795, column: 7, scope: !4199)
!4268 = !DILocation(line: 2801, column: 17, scope: !4269)
!4269 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 2800, column: 5)
!4270 = !DILocation(line: 2801, column: 28, scope: !4269)
!4271 = !DILocation(line: 2801, column: 15, scope: !4269)
!4272 = !DILocation(line: 2802, column: 17, scope: !4269)
!4273 = !DILocation(line: 2802, column: 28, scope: !4269)
!4274 = !DILocation(line: 2802, column: 15, scope: !4269)
!4275 = !DILocation(line: 2803, column: 30, scope: !4269)
!4276 = !DILocation(line: 2803, column: 17, scope: !4269)
!4277 = !DILocation(line: 2803, column: 15, scope: !4269)
!4278 = !DILocation(line: 2804, column: 5, scope: !4269)
!4279 = !DILocation(line: 2806, column: 27, scope: !4280)
!4280 = distinct !DILexicalBlock(scope: !4244, file: !3, line: 2806, column: 12)
!4281 = !DILocation(line: 2806, column: 38, scope: !4280)
!4282 = !DILocation(line: 2806, column: 12, scope: !4280)
!4283 = !DILocation(line: 2807, column: 5, scope: !4280)
!4284 = !DILocation(line: 2807, column: 23, scope: !4280)
!4285 = !DILocation(line: 2807, column: 34, scope: !4280)
!4286 = !DILocation(line: 2807, column: 8, scope: !4280)
!4287 = !DILocation(line: 2808, column: 5, scope: !4280)
!4288 = !DILocation(line: 2808, column: 21, scope: !4280)
!4289 = !DILocation(line: 2808, column: 32, scope: !4280)
!4290 = !DILocation(line: 2808, column: 8, scope: !4280)
!4291 = !DILocation(line: 2808, column: 41, scope: !4280)
!4292 = !DILocation(line: 2808, column: 52, scope: !4280)
!4293 = !DILocation(line: 2808, column: 38, scope: !4280)
!4294 = !DILocation(line: 2806, column: 12, scope: !4244)
!4295 = !DILocation(line: 2810, column: 17, scope: !4296)
!4296 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2809, column: 5)
!4297 = !DILocation(line: 2810, column: 28, scope: !4296)
!4298 = !DILocation(line: 2810, column: 15, scope: !4296)
!4299 = !DILocation(line: 2811, column: 15, scope: !4296)
!4300 = !DILocation(line: 2812, column: 17, scope: !4296)
!4301 = !DILocation(line: 2812, column: 28, scope: !4296)
!4302 = !DILocation(line: 2812, column: 15, scope: !4296)
!4303 = !DILocation(line: 2813, column: 5, scope: !4296)
!4304 = !DILocation(line: 2818, column: 27, scope: !4305)
!4305 = distinct !DILexicalBlock(scope: !4280, file: !3, line: 2818, column: 12)
!4306 = !DILocation(line: 2818, column: 38, scope: !4305)
!4307 = !DILocation(line: 2818, column: 12, scope: !4305)
!4308 = !DILocation(line: 2819, column: 5, scope: !4305)
!4309 = !DILocation(line: 2819, column: 23, scope: !4305)
!4310 = !DILocation(line: 2819, column: 34, scope: !4305)
!4311 = !DILocation(line: 2819, column: 8, scope: !4305)
!4312 = !DILocation(line: 2820, column: 5, scope: !4305)
!4313 = !DILocation(line: 2820, column: 21, scope: !4305)
!4314 = !DILocation(line: 2820, column: 32, scope: !4305)
!4315 = !DILocation(line: 2820, column: 8, scope: !4305)
!4316 = !DILocation(line: 2820, column: 41, scope: !4305)
!4317 = !DILocation(line: 2820, column: 52, scope: !4305)
!4318 = !DILocation(line: 2820, column: 38, scope: !4305)
!4319 = !DILocation(line: 2818, column: 12, scope: !4280)
!4320 = !DILocation(line: 2825, column: 17, scope: !4321)
!4321 = distinct !DILexicalBlock(scope: !4305, file: !3, line: 2821, column: 5)
!4322 = !DILocation(line: 2825, column: 28, scope: !4321)
!4323 = !DILocation(line: 2825, column: 15, scope: !4321)
!4324 = !DILocation(line: 2826, column: 15, scope: !4321)
!4325 = !DILocation(line: 2827, column: 30, scope: !4321)
!4326 = !DILocation(line: 2827, column: 17, scope: !4321)
!4327 = !DILocation(line: 2827, column: 15, scope: !4321)
!4328 = !DILocation(line: 2828, column: 26, scope: !4321)
!4329 = !DILocation(line: 2829, column: 5, scope: !4321)
!4330 = !DILocation(line: 2832, column: 5, scope: !4305)
!4331 = !DILocation(line: 2835, column: 25, scope: !4332)
!4332 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2835, column: 7)
!4333 = !DILocation(line: 2835, column: 7, scope: !4332)
!4334 = !DILocation(line: 2835, column: 35, scope: !4332)
!4335 = !DILocation(line: 2835, column: 41, scope: !4332)
!4336 = !DILocation(line: 2835, column: 7, scope: !4199)
!4337 = !DILocation(line: 2836, column: 5, scope: !4332)
!4338 = !DILocation(line: 2837, column: 7, scope: !4339)
!4339 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2837, column: 7)
!4340 = !DILocation(line: 2838, column: 7, scope: !4339)
!4341 = !DILocation(line: 2838, column: 28, scope: !4339)
!4342 = !DILocation(line: 2838, column: 10, scope: !4339)
!4343 = !DILocation(line: 2838, column: 38, scope: !4339)
!4344 = !DILocation(line: 2838, column: 44, scope: !4339)
!4345 = !DILocation(line: 2837, column: 7, scope: !4199)
!4346 = !DILocation(line: 2839, column: 5, scope: !4339)
!4347 = !DILocation(line: 2841, column: 25, scope: !4199)
!4348 = !DILocation(line: 2843, column: 7, scope: !4349)
!4349 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2843, column: 7)
!4350 = !DILocation(line: 2843, column: 7, scope: !4199)
!4351 = !DILocation(line: 2845, column: 16, scope: !4352)
!4352 = distinct !DILexicalBlock(scope: !4349, file: !3, line: 2844, column: 5)
!4353 = !DILocation(line: 2847, column: 10, scope: !4352)
!4354 = !DILocation(line: 2847, column: 9, scope: !4352)
!4355 = !DILocation(line: 2848, column: 9, scope: !4352)
!4356 = !DILocation(line: 2848, column: 15, scope: !4352)
!4357 = !DILocation(line: 2848, column: 24, scope: !4352)
!4358 = !DILocation(line: 2848, column: 31, scope: !4352)
!4359 = !DILocation(line: 2848, column: 40, scope: !4352)
!4360 = !DILocation(line: 2845, column: 7, scope: !4352)
!4361 = !DILocation(line: 2850, column: 11, scope: !4362)
!4362 = distinct !DILexicalBlock(scope: !4352, file: !3, line: 2850, column: 11)
!4363 = !DILocation(line: 2850, column: 11, scope: !4352)
!4364 = !DILocation(line: 2851, column: 11, scope: !4362)
!4365 = !DILocation(line: 2851, column: 35, scope: !4362)
!4366 = !DILocation(line: 2851, column: 44, scope: !4362)
!4367 = !DILocation(line: 2851, column: 2, scope: !4362)
!4368 = !DILocation(line: 2853, column: 16, scope: !4352)
!4369 = !DILocation(line: 2853, column: 42, scope: !4352)
!4370 = !DILocation(line: 2853, column: 51, scope: !4352)
!4371 = !DILocation(line: 2853, column: 7, scope: !4352)
!4372 = !DILocation(line: 2854, column: 5, scope: !4352)
!4373 = !DILocation(line: 2858, column: 10, scope: !4199)
!4374 = !DILocation(line: 2858, column: 8, scope: !4199)
!4375 = !DILocation(line: 2859, column: 21, scope: !4376)
!4376 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2859, column: 7)
!4377 = !DILocation(line: 2859, column: 9, scope: !4376)
!4378 = !DILocation(line: 2859, column: 7, scope: !4199)
!4379 = !DILocation(line: 2860, column: 5, scope: !4376)
!4380 = !DILocation(line: 2863, column: 30, scope: !4199)
!4381 = !DILocation(line: 2865, column: 9, scope: !4199)
!4382 = !DILocation(line: 2863, column: 10, scope: !4199)
!4383 = !DILocation(line: 2863, column: 8, scope: !4199)
!4384 = !DILocation(line: 2866, column: 8, scope: !4385)
!4385 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2866, column: 7)
!4386 = !DILocation(line: 2866, column: 7, scope: !4199)
!4387 = !DILocation(line: 2867, column: 5, scope: !4385)
!4388 = !DILocation(line: 2870, column: 7, scope: !4389)
!4389 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2870, column: 7)
!4390 = !DILocation(line: 2870, column: 33, scope: !4389)
!4391 = !DILocation(line: 2870, column: 7, scope: !4199)
!4392 = !DILocation(line: 2871, column: 5, scope: !4389)
!4393 = !DILocation(line: 2874, column: 3, scope: !4199)
!4394 = !DILocation(line: 2875, column: 21, scope: !4199)
!4395 = !DILocation(line: 2875, column: 11, scope: !4199)
!4396 = !DILocation(line: 2875, column: 19, scope: !4199)
!4397 = !DILocation(line: 2876, column: 21, scope: !4199)
!4398 = !DILocation(line: 2876, column: 11, scope: !4199)
!4399 = !DILocation(line: 2876, column: 19, scope: !4199)
!4400 = !DILocation(line: 2877, column: 21, scope: !4199)
!4401 = !DILocation(line: 2877, column: 11, scope: !4199)
!4402 = !DILocation(line: 2877, column: 19, scope: !4199)
!4403 = !DILocation(line: 2878, column: 21, scope: !4199)
!4404 = !DILocation(line: 2878, column: 11, scope: !4199)
!4405 = !DILocation(line: 2878, column: 19, scope: !4199)
!4406 = !DILocation(line: 2879, column: 18, scope: !4199)
!4407 = !DILocation(line: 2879, column: 11, scope: !4199)
!4408 = !DILocation(line: 2879, column: 16, scope: !4199)
!4409 = !DILocation(line: 2880, column: 27, scope: !4199)
!4410 = !DILocation(line: 2880, column: 11, scope: !4199)
!4411 = !DILocation(line: 2880, column: 25, scope: !4199)
!4412 = !DILocation(line: 2881, column: 18, scope: !4199)
!4413 = !DILocation(line: 2881, column: 11, scope: !4199)
!4414 = !DILocation(line: 2881, column: 16, scope: !4199)
!4415 = !DILocation(line: 2882, column: 32, scope: !4199)
!4416 = !DILocation(line: 2882, column: 11, scope: !4199)
!4417 = !DILocation(line: 2882, column: 30, scope: !4199)
!4418 = !DILocation(line: 2883, column: 25, scope: !4199)
!4419 = !DILocation(line: 2883, column: 11, scope: !4199)
!4420 = !DILocation(line: 2883, column: 23, scope: !4199)
!4421 = !DILocation(line: 2888, column: 7, scope: !4422)
!4422 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2888, column: 7)
!4423 = !DILocation(line: 2888, column: 7, scope: !4199)
!4424 = !DILocation(line: 2889, column: 5, scope: !4422)
!4425 = !DILocation(line: 2892, column: 10, scope: !4426)
!4426 = distinct !DILexicalBlock(scope: !4199, file: !3, line: 2891, column: 7)
!4427 = !DILocation(line: 2891, column: 7, scope: !4199)
!4428 = !DILocation(line: 2893, column: 5, scope: !4426)
!4429 = !DILocation(line: 2895, column: 3, scope: !4199)
!4430 = !DILocation(line: 2896, column: 1, scope: !4199)
!4431 = distinct !DISubprogram(name: "cond_exec_find_if_block", scope: !3, file: !3, line: 3174, type: !4432, scopeLine: 3175, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4432 = !DISubroutineType(types: !4433)
!4433 = !{!2545, !4434}
!4434 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4021, size: 64)
!4435 = !DILocalVariable(name: "ce_info", arg: 1, scope: !4431, file: !3, line: 3174, type: !4434)
!4436 = !DILocation(line: 3174, column: 47, scope: !4431)
!4437 = !DILocalVariable(name: "test_bb", scope: !4431, file: !3, line: 3176, type: !2546)
!4438 = !DILocation(line: 3176, column: 15, scope: !4431)
!4439 = !DILocation(line: 3176, column: 25, scope: !4431)
!4440 = !DILocation(line: 3176, column: 34, scope: !4431)
!4441 = !DILocalVariable(name: "then_bb", scope: !4431, file: !3, line: 3177, type: !2546)
!4442 = !DILocation(line: 3177, column: 15, scope: !4431)
!4443 = !DILocation(line: 3177, column: 25, scope: !4431)
!4444 = !DILocation(line: 3177, column: 34, scope: !4431)
!4445 = !DILocalVariable(name: "else_bb", scope: !4431, file: !3, line: 3178, type: !2546)
!4446 = !DILocation(line: 3178, column: 15, scope: !4431)
!4447 = !DILocation(line: 3178, column: 25, scope: !4431)
!4448 = !DILocation(line: 3178, column: 34, scope: !4431)
!4449 = !DILocalVariable(name: "join_bb", scope: !4431, file: !3, line: 3179, type: !2546)
!4450 = !DILocation(line: 3179, column: 15, scope: !4431)
!4451 = !DILocalVariable(name: "cur_edge", scope: !4431, file: !3, line: 3180, type: !2563)
!4452 = !DILocation(line: 3180, column: 8, scope: !4431)
!4453 = !DILocalVariable(name: "next", scope: !4431, file: !3, line: 3181, type: !2546)
!4454 = !DILocation(line: 3181, column: 15, scope: !4431)
!4455 = !DILocalVariable(name: "ei", scope: !4431, file: !3, line: 3182, type: !4456)
!4456 = !DIDerivedType(tag: DW_TAG_typedef, name: "edge_iterator", file: !367, line: 682, baseType: !4457)
!4457 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !367, line: 679, size: 128, elements: !4458)
!4458 = !{!4459, !4460}
!4459 = !DIDerivedType(tag: DW_TAG_member, name: "index", scope: !4457, file: !367, line: 680, baseType: !7, size: 32)
!4460 = !DIDerivedType(tag: DW_TAG_member, name: "container", scope: !4457, file: !367, line: 681, baseType: !4461, size: 64, offset: 64)
!4461 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2551, size: 64)
!4462 = !DILocation(line: 3182, column: 17, scope: !4431)
!4463 = !DILocation(line: 3184, column: 27, scope: !4431)
!4464 = !DILocation(line: 3184, column: 3, scope: !4431)
!4465 = !DILocation(line: 3184, column: 12, scope: !4431)
!4466 = !DILocation(line: 3184, column: 25, scope: !4431)
!4467 = !DILocation(line: 3188, column: 3, scope: !4431)
!4468 = !DILocation(line: 3193, column: 22, scope: !4469)
!4469 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3193, column: 7)
!4470 = !DILocation(line: 3193, column: 7, scope: !4469)
!4471 = !DILocation(line: 3194, column: 7, scope: !4469)
!4472 = !DILocation(line: 3194, column: 28, scope: !4469)
!4473 = !DILocation(line: 3194, column: 10, scope: !4469)
!4474 = !DILocation(line: 3194, column: 38, scope: !4469)
!4475 = !DILocation(line: 3194, column: 44, scope: !4469)
!4476 = !DILocation(line: 3193, column: 7, scope: !4431)
!4477 = !DILocalVariable(name: "bb", scope: !4478, file: !3, line: 3196, type: !2546)
!4478 = distinct !DILexicalBlock(scope: !4469, file: !3, line: 3195, column: 5)
!4479 = !DILocation(line: 3196, column: 19, scope: !4478)
!4480 = !DILocation(line: 3196, column: 37, scope: !4478)
!4481 = !DILocation(line: 3196, column: 24, scope: !4478)
!4482 = !DILocalVariable(name: "target_bb", scope: !4478, file: !3, line: 3197, type: !2546)
!4483 = !DILocation(line: 3197, column: 19, scope: !4478)
!4484 = !DILocalVariable(name: "max_insns", scope: !4478, file: !3, line: 3198, type: !2545)
!4485 = !DILocation(line: 3198, column: 11, scope: !4478)
!4486 = !DILocation(line: 3198, column: 23, scope: !4478)
!4487 = !DILocalVariable(name: "n_insns", scope: !4478, file: !3, line: 3199, type: !2545)
!4488 = !DILocation(line: 3199, column: 11, scope: !4478)
!4489 = !DILocation(line: 3202, column: 50, scope: !4490)
!4490 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 3202, column: 11)
!4491 = !DILocation(line: 3202, column: 54, scope: !4490)
!4492 = !DILocation(line: 3202, column: 22, scope: !4490)
!4493 = !DILocation(line: 3202, column: 20, scope: !4490)
!4494 = !DILocation(line: 3202, column: 64, scope: !4490)
!4495 = !DILocation(line: 3202, column: 11, scope: !4478)
!4496 = !DILocation(line: 3204, column: 4, scope: !4497)
!4497 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 3203, column: 2)
!4498 = !DILocation(line: 3204, column: 13, scope: !4497)
!4499 = !DILocation(line: 3204, column: 23, scope: !4497)
!4500 = !DILocation(line: 3205, column: 16, scope: !4497)
!4501 = !DILocation(line: 3205, column: 14, scope: !4497)
!4502 = !DILocation(line: 3206, column: 2, scope: !4497)
!4503 = !DILocation(line: 3207, column: 55, scope: !4504)
!4504 = distinct !DILexicalBlock(scope: !4490, file: !3, line: 3207, column: 16)
!4505 = !DILocation(line: 3207, column: 59, scope: !4504)
!4506 = !DILocation(line: 3207, column: 27, scope: !4504)
!4507 = !DILocation(line: 3207, column: 25, scope: !4504)
!4508 = !DILocation(line: 3207, column: 69, scope: !4504)
!4509 = !DILocation(line: 3207, column: 16, scope: !4490)
!4510 = !DILocation(line: 3209, column: 4, scope: !4511)
!4511 = distinct !DILexicalBlock(scope: !4504, file: !3, line: 3208, column: 2)
!4512 = !DILocation(line: 3209, column: 13, scope: !4511)
!4513 = !DILocation(line: 3209, column: 23, scope: !4511)
!4514 = !DILocation(line: 3210, column: 16, scope: !4511)
!4515 = !DILocation(line: 3210, column: 14, scope: !4511)
!4516 = !DILocation(line: 3211, column: 2, scope: !4511)
!4517 = !DILocation(line: 3213, column: 12, scope: !4504)
!4518 = !DILocation(line: 3215, column: 11, scope: !4519)
!4519 = distinct !DILexicalBlock(scope: !4478, file: !3, line: 3215, column: 11)
!4520 = !DILocation(line: 3215, column: 21, scope: !4519)
!4521 = !DILocation(line: 3215, column: 24, scope: !4519)
!4522 = !DILocation(line: 3215, column: 35, scope: !4519)
!4523 = !DILocation(line: 3215, column: 32, scope: !4519)
!4524 = !DILocation(line: 3215, column: 11, scope: !4478)
!4525 = !DILocalVariable(name: "total_insns", scope: !4526, file: !3, line: 3217, type: !2545)
!4526 = distinct !DILexicalBlock(scope: !4519, file: !3, line: 3216, column: 2)
!4527 = !DILocation(line: 3217, column: 8, scope: !4526)
!4528 = !DILocalVariable(name: "blocks", scope: !4526, file: !3, line: 3218, type: !2545)
!4529 = !DILocation(line: 3218, column: 8, scope: !4526)
!4530 = !DILocation(line: 3220, column: 28, scope: !4526)
!4531 = !DILocation(line: 3220, column: 4, scope: !4526)
!4532 = !DILocation(line: 3220, column: 13, scope: !4526)
!4533 = !DILocation(line: 3220, column: 26, scope: !4526)
!4534 = !DILocation(line: 3223, column: 4, scope: !4526)
!4535 = !DILocation(line: 3225, column: 37, scope: !4536)
!4536 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 3224, column: 6)
!4537 = !DILocation(line: 3225, column: 35, scope: !4536)
!4538 = !DILocation(line: 3225, column: 8, scope: !4536)
!4539 = !DILocation(line: 3225, column: 17, scope: !4536)
!4540 = !DILocation(line: 3225, column: 25, scope: !4536)
!4541 = !DILocation(line: 3226, column: 23, scope: !4536)
!4542 = !DILocation(line: 3226, column: 20, scope: !4536)
!4543 = !DILocation(line: 3227, column: 14, scope: !4536)
!4544 = !DILocation(line: 3229, column: 28, scope: !4545)
!4545 = distinct !DILexicalBlock(scope: !4536, file: !3, line: 3229, column: 12)
!4546 = !DILocation(line: 3229, column: 13, scope: !4545)
!4547 = !DILocation(line: 3229, column: 12, scope: !4536)
!4548 = !DILocation(line: 3230, column: 3, scope: !4545)
!4549 = !DILocation(line: 3232, column: 26, scope: !4536)
!4550 = !DILocation(line: 3232, column: 13, scope: !4536)
!4551 = !DILocation(line: 3232, column: 11, scope: !4536)
!4552 = !DILocation(line: 3233, column: 46, scope: !4536)
!4553 = !DILocation(line: 3233, column: 50, scope: !4536)
!4554 = !DILocation(line: 3233, column: 18, scope: !4536)
!4555 = !DILocation(line: 3233, column: 16, scope: !4536)
!4556 = !DILocation(line: 3234, column: 6, scope: !4536)
!4557 = !DILocation(line: 3235, column: 11, scope: !4526)
!4558 = !DILocation(line: 3235, column: 19, scope: !4526)
!4559 = !DILocation(line: 3235, column: 24, scope: !4526)
!4560 = !DILocation(line: 3235, column: 28, scope: !4526)
!4561 = !DILocation(line: 3235, column: 42, scope: !4526)
!4562 = !DILocation(line: 3235, column: 40, scope: !4526)
!4563 = !DILocation(line: 3235, column: 54, scope: !4526)
!4564 = !DILocation(line: 3235, column: 51, scope: !4526)
!4565 = !DILocation(line: 0, scope: !4526)
!4566 = distinct !{!4566, !4534, !4567}
!4567 = !DILocation(line: 3235, column: 63, scope: !4526)
!4568 = !DILocation(line: 3237, column: 40, scope: !4526)
!4569 = !DILocation(line: 3237, column: 4, scope: !4526)
!4570 = !DILocation(line: 3237, column: 13, scope: !4526)
!4571 = !DILocation(line: 3237, column: 38, scope: !4526)
!4572 = !DILocation(line: 3238, column: 39, scope: !4526)
!4573 = !DILocation(line: 3238, column: 4, scope: !4526)
!4574 = !DILocation(line: 3238, column: 13, scope: !4526)
!4575 = !DILocation(line: 3238, column: 37, scope: !4526)
!4576 = !DILocation(line: 3240, column: 8, scope: !4577)
!4577 = distinct !DILexicalBlock(scope: !4526, file: !3, line: 3240, column: 8)
!4578 = !DILocation(line: 3240, column: 17, scope: !4577)
!4579 = !DILocation(line: 3240, column: 8, scope: !4526)
!4580 = !DILocation(line: 3241, column: 36, scope: !4577)
!4581 = !DILocation(line: 3241, column: 6, scope: !4577)
!4582 = !DILocation(line: 3241, column: 15, scope: !4577)
!4583 = !DILocation(line: 3241, column: 34, scope: !4577)
!4584 = !DILocation(line: 3243, column: 34, scope: !4577)
!4585 = !DILocation(line: 3243, column: 6, scope: !4577)
!4586 = !DILocation(line: 3243, column: 15, scope: !4577)
!4587 = !DILocation(line: 3243, column: 32, scope: !4577)
!4588 = !DILocation(line: 3244, column: 2, scope: !4526)
!4589 = !DILocation(line: 3245, column: 5, scope: !4478)
!4590 = !DILocation(line: 3249, column: 8, scope: !4591)
!4591 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3249, column: 7)
!4592 = !DILocation(line: 3249, column: 38, scope: !4591)
!4593 = !DILocation(line: 3249, column: 47, scope: !4591)
!4594 = !DILocation(line: 3249, column: 36, scope: !4591)
!4595 = !DILocation(line: 3249, column: 65, scope: !4591)
!4596 = !DILocation(line: 3249, column: 7, scope: !4431)
!4597 = !DILocation(line: 3250, column: 5, scope: !4591)
!4598 = !DILocation(line: 3253, column: 3, scope: !4599)
!4599 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3253, column: 3)
!4600 = !DILocation(line: 3253, column: 3, scope: !4601)
!4601 = distinct !DILexicalBlock(scope: !4599, file: !3, line: 3253, column: 3)
!4602 = !DILocation(line: 3255, column: 11, scope: !4603)
!4603 = distinct !DILexicalBlock(scope: !4604, file: !3, line: 3255, column: 11)
!4604 = distinct !DILexicalBlock(scope: !4601, file: !3, line: 3254, column: 5)
!4605 = !DILocation(line: 3255, column: 21, scope: !4603)
!4606 = !DILocation(line: 3255, column: 27, scope: !4603)
!4607 = !DILocation(line: 3255, column: 11, scope: !4604)
!4608 = !DILocation(line: 3256, column: 2, scope: !4603)
!4609 = !DILocation(line: 3257, column: 5, scope: !4604)
!4610 = distinct !{!4610, !4598, !4611}
!4611 = !DILocation(line: 3257, column: 5, scope: !4599)
!4612 = !DILocation(line: 3259, column: 3, scope: !4613)
!4613 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3259, column: 3)
!4614 = !DILocation(line: 3259, column: 3, scope: !4615)
!4615 = distinct !DILexicalBlock(scope: !4613, file: !3, line: 3259, column: 3)
!4616 = !DILocation(line: 3261, column: 11, scope: !4617)
!4617 = distinct !DILexicalBlock(scope: !4618, file: !3, line: 3261, column: 11)
!4618 = distinct !DILexicalBlock(scope: !4615, file: !3, line: 3260, column: 5)
!4619 = !DILocation(line: 3261, column: 21, scope: !4617)
!4620 = !DILocation(line: 3261, column: 27, scope: !4617)
!4621 = !DILocation(line: 3261, column: 11, scope: !4618)
!4622 = !DILocation(line: 3262, column: 2, scope: !4617)
!4623 = !DILocation(line: 3263, column: 5, scope: !4618)
!4624 = distinct !{!4624, !4612, !4625}
!4625 = !DILocation(line: 3263, column: 5, scope: !4613)
!4626 = !DILocation(line: 3266, column: 7, scope: !4627)
!4627 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3266, column: 7)
!4628 = !DILocation(line: 3266, column: 35, scope: !4627)
!4629 = !DILocation(line: 3267, column: 7, scope: !4627)
!4630 = !DILocation(line: 3267, column: 27, scope: !4627)
!4631 = !DILocation(line: 3267, column: 12, scope: !4627)
!4632 = !DILocation(line: 3268, column: 11, scope: !4627)
!4633 = !DILocation(line: 3268, column: 33, scope: !4627)
!4634 = !DILocation(line: 3268, column: 15, scope: !4627)
!4635 = !DILocation(line: 3268, column: 43, scope: !4627)
!4636 = !DILocation(line: 3268, column: 49, scope: !4627)
!4637 = !DILocation(line: 3269, column: 4, scope: !4627)
!4638 = !DILocation(line: 3269, column: 8, scope: !4627)
!4639 = !DILocation(line: 3269, column: 27, scope: !4627)
!4640 = !DILocation(line: 3269, column: 43, scope: !4627)
!4641 = !DILocation(line: 3269, column: 30, scope: !4627)
!4642 = !DILocation(line: 3266, column: 7, scope: !4431)
!4643 = !DILocation(line: 3270, column: 5, scope: !4627)
!4644 = !DILocation(line: 3278, column: 7, scope: !4645)
!4645 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3278, column: 7)
!4646 = !DILocation(line: 3278, column: 35, scope: !4645)
!4647 = !DILocation(line: 3278, column: 7, scope: !4431)
!4648 = !DILocation(line: 3280, column: 26, scope: !4649)
!4649 = distinct !DILexicalBlock(scope: !4650, file: !3, line: 3280, column: 11)
!4650 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 3279, column: 5)
!4651 = !DILocation(line: 3280, column: 11, scope: !4649)
!4652 = !DILocation(line: 3280, column: 11, scope: !4650)
!4653 = !DILocalVariable(name: "last_insn", scope: !4654, file: !3, line: 3282, type: !2577)
!4654 = distinct !DILexicalBlock(scope: !4649, file: !3, line: 3281, column: 2)
!4655 = !DILocation(line: 3282, column: 8, scope: !4654)
!4656 = !DILocation(line: 3282, column: 20, scope: !4654)
!4657 = !DILocation(line: 3284, column: 4, scope: !4654)
!4658 = !DILocation(line: 3284, column: 11, scope: !4654)
!4659 = !DILocation(line: 3285, column: 4, scope: !4654)
!4660 = !DILocation(line: 3285, column: 7, scope: !4654)
!4661 = !DILocation(line: 3286, column: 4, scope: !4654)
!4662 = !DILocation(line: 3286, column: 7, scope: !4654)
!4663 = !DILocation(line: 3286, column: 20, scope: !4654)
!4664 = !DILocation(line: 3286, column: 17, scope: !4654)
!4665 = !DILocation(line: 0, scope: !4654)
!4666 = !DILocation(line: 3287, column: 18, scope: !4654)
!4667 = !DILocation(line: 3287, column: 16, scope: !4654)
!4668 = distinct !{!4668, !4657, !4666}
!4669 = !DILocation(line: 3289, column: 8, scope: !4670)
!4670 = distinct !DILexicalBlock(scope: !4654, file: !3, line: 3289, column: 8)
!4671 = !DILocation(line: 3290, column: 8, scope: !4670)
!4672 = !DILocation(line: 3290, column: 11, scope: !4670)
!4673 = !DILocation(line: 3291, column: 8, scope: !4670)
!4674 = !DILocation(line: 3291, column: 27, scope: !4670)
!4675 = !DILocation(line: 3291, column: 13, scope: !4670)
!4676 = !DILocation(line: 3289, column: 8, scope: !4654)
!4677 = !DILocation(line: 3292, column: 6, scope: !4670)
!4678 = !DILocation(line: 3294, column: 14, scope: !4654)
!4679 = !DILocation(line: 3294, column: 12, scope: !4654)
!4680 = !DILocation(line: 3295, column: 12, scope: !4654)
!4681 = !DILocation(line: 3296, column: 2, scope: !4654)
!4682 = !DILocation(line: 3298, column: 2, scope: !4649)
!4683 = !DILocation(line: 3299, column: 5, scope: !4650)
!4684 = !DILocation(line: 3303, column: 25, scope: !4685)
!4685 = distinct !DILexicalBlock(scope: !4645, file: !3, line: 3303, column: 12)
!4686 = !DILocation(line: 3303, column: 12, scope: !4685)
!4687 = !DILocation(line: 3303, column: 37, scope: !4685)
!4688 = !DILocation(line: 3303, column: 34, scope: !4685)
!4689 = !DILocation(line: 3303, column: 12, scope: !4645)
!4690 = !DILocation(line: 3305, column: 17, scope: !4691)
!4691 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 3304, column: 5)
!4692 = !DILocation(line: 3305, column: 15, scope: !4691)
!4693 = !DILocation(line: 3306, column: 15, scope: !4691)
!4694 = !DILocation(line: 3307, column: 5, scope: !4691)
!4695 = !DILocation(line: 3312, column: 27, scope: !4696)
!4696 = distinct !DILexicalBlock(scope: !4685, file: !3, line: 3312, column: 12)
!4697 = !DILocation(line: 3312, column: 12, scope: !4696)
!4698 = !DILocation(line: 3313, column: 5, scope: !4696)
!4699 = !DILocation(line: 3313, column: 21, scope: !4696)
!4700 = !DILocation(line: 3313, column: 8, scope: !4696)
!4701 = !DILocation(line: 3313, column: 46, scope: !4696)
!4702 = !DILocation(line: 3313, column: 33, scope: !4696)
!4703 = !DILocation(line: 3313, column: 30, scope: !4696)
!4704 = !DILocation(line: 3314, column: 5, scope: !4696)
!4705 = !DILocation(line: 3314, column: 23, scope: !4696)
!4706 = !DILocation(line: 3314, column: 8, scope: !4696)
!4707 = !DILocation(line: 3315, column: 5, scope: !4696)
!4708 = !DILocation(line: 3315, column: 29, scope: !4696)
!4709 = !DILocation(line: 3315, column: 11, scope: !4696)
!4710 = !DILocation(line: 3315, column: 39, scope: !4696)
!4711 = !DILocation(line: 3315, column: 45, scope: !4696)
!4712 = !DILocation(line: 3316, column: 5, scope: !4696)
!4713 = !DILocation(line: 3316, column: 11, scope: !4696)
!4714 = !DILocation(line: 3316, column: 30, scope: !4696)
!4715 = !DILocation(line: 3316, column: 46, scope: !4696)
!4716 = !DILocation(line: 3316, column: 33, scope: !4696)
!4717 = !DILocation(line: 3312, column: 12, scope: !4685)
!4718 = !DILocation(line: 3317, column: 28, scope: !4696)
!4719 = !DILocation(line: 3317, column: 15, scope: !4696)
!4720 = !DILocation(line: 3317, column: 13, scope: !4696)
!4721 = !DILocation(line: 3317, column: 5, scope: !4696)
!4722 = !DILocation(line: 3321, column: 5, scope: !4696)
!4723 = !DILocation(line: 3323, column: 25, scope: !4431)
!4724 = !DILocation(line: 3325, column: 7, scope: !4725)
!4725 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3325, column: 7)
!4726 = !DILocation(line: 3325, column: 7, scope: !4431)
!4727 = !DILocation(line: 3327, column: 16, scope: !4728)
!4728 = distinct !DILexicalBlock(scope: !4725, file: !3, line: 3326, column: 5)
!4729 = !DILocation(line: 3330, column: 10, scope: !4728)
!4730 = !DILocation(line: 3330, column: 9, scope: !4728)
!4731 = !DILocation(line: 3331, column: 9, scope: !4728)
!4732 = !DILocation(line: 3331, column: 18, scope: !4728)
!4733 = !DILocation(line: 3332, column: 9, scope: !4728)
!4734 = !DILocation(line: 3332, column: 18, scope: !4728)
!4735 = !DILocation(line: 3333, column: 9, scope: !4728)
!4736 = !DILocation(line: 3333, column: 34, scope: !4728)
!4737 = !DILocation(line: 3334, column: 9, scope: !4728)
!4738 = !DILocation(line: 3334, column: 18, scope: !4728)
!4739 = !DILocation(line: 3335, column: 9, scope: !4728)
!4740 = !DILocation(line: 3335, column: 34, scope: !4728)
!4741 = !DILocation(line: 3327, column: 7, scope: !4728)
!4742 = !DILocation(line: 3337, column: 11, scope: !4743)
!4743 = distinct !DILexicalBlock(scope: !4728, file: !3, line: 3337, column: 11)
!4744 = !DILocation(line: 3337, column: 11, scope: !4728)
!4745 = !DILocation(line: 3338, column: 11, scope: !4743)
!4746 = !DILocation(line: 3339, column: 4, scope: !4743)
!4747 = !DILocation(line: 3339, column: 13, scope: !4743)
!4748 = !DILocation(line: 3340, column: 4, scope: !4743)
!4749 = !DILocation(line: 3340, column: 29, scope: !4743)
!4750 = !DILocation(line: 3338, column: 2, scope: !4743)
!4751 = !DILocation(line: 3342, column: 16, scope: !4728)
!4752 = !DILocation(line: 3343, column: 9, scope: !4728)
!4753 = !DILocation(line: 3343, column: 18, scope: !4728)
!4754 = !DILocation(line: 3344, column: 9, scope: !4728)
!4755 = !DILocation(line: 3344, column: 34, scope: !4728)
!4756 = !DILocation(line: 3342, column: 7, scope: !4728)
!4757 = !DILocation(line: 3346, column: 11, scope: !4758)
!4758 = distinct !DILexicalBlock(scope: !4728, file: !3, line: 3346, column: 11)
!4759 = !DILocation(line: 3346, column: 20, scope: !4758)
!4760 = !DILocation(line: 3346, column: 45, scope: !4758)
!4761 = !DILocation(line: 3346, column: 11, scope: !4728)
!4762 = !DILocation(line: 3347, column: 11, scope: !4758)
!4763 = !DILocation(line: 3348, column: 4, scope: !4758)
!4764 = !DILocation(line: 3348, column: 13, scope: !4758)
!4765 = !DILocation(line: 3349, column: 5, scope: !4758)
!4766 = !DILocation(line: 3349, column: 14, scope: !4758)
!4767 = !DILocation(line: 3349, column: 4, scope: !4758)
!4768 = !DILocation(line: 3350, column: 5, scope: !4758)
!4769 = !DILocation(line: 3350, column: 14, scope: !4758)
!4770 = !DILocation(line: 3350, column: 39, scope: !4758)
!4771 = !DILocation(line: 3350, column: 4, scope: !4758)
!4772 = !DILocation(line: 3351, column: 4, scope: !4758)
!4773 = !DILocation(line: 3351, column: 13, scope: !4758)
!4774 = !DILocation(line: 3351, column: 27, scope: !4758)
!4775 = !DILocation(line: 3352, column: 6, scope: !4758)
!4776 = !DILocation(line: 3352, column: 5, scope: !4758)
!4777 = !DILocation(line: 3353, column: 12, scope: !4758)
!4778 = !DILocation(line: 3347, column: 2, scope: !4758)
!4779 = !DILocation(line: 3356, column: 20, scope: !4728)
!4780 = !DILocation(line: 3356, column: 7, scope: !4728)
!4781 = !DILocation(line: 3357, column: 5, scope: !4728)
!4782 = !DILocation(line: 3367, column: 10, scope: !4431)
!4783 = !DILocation(line: 3367, column: 8, scope: !4431)
!4784 = !DILocation(line: 3368, column: 7, scope: !4785)
!4785 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3368, column: 7)
!4786 = !DILocation(line: 3368, column: 15, scope: !4785)
!4787 = !DILocation(line: 3368, column: 26, scope: !4785)
!4788 = !DILocation(line: 3368, column: 32, scope: !4785)
!4789 = !DILocation(line: 3368, column: 24, scope: !4785)
!4790 = !DILocation(line: 3368, column: 44, scope: !4785)
!4791 = !DILocation(line: 3368, column: 41, scope: !4785)
!4792 = !DILocation(line: 3368, column: 7, scope: !4431)
!4793 = !DILocation(line: 3369, column: 5, scope: !4785)
!4794 = !DILocation(line: 3370, column: 15, scope: !4795)
!4795 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3370, column: 7)
!4796 = !DILocation(line: 3370, column: 21, scope: !4795)
!4797 = !DILocation(line: 3370, column: 13, scope: !4795)
!4798 = !DILocation(line: 3370, column: 33, scope: !4795)
!4799 = !DILocation(line: 3370, column: 30, scope: !4795)
!4800 = !DILocation(line: 3370, column: 41, scope: !4795)
!4801 = !DILocation(line: 3370, column: 44, scope: !4795)
!4802 = !DILocation(line: 3370, column: 55, scope: !4795)
!4803 = !DILocation(line: 3370, column: 52, scope: !4795)
!4804 = !DILocation(line: 3370, column: 7, scope: !4431)
!4805 = !DILocation(line: 3372, column: 11, scope: !4806)
!4806 = distinct !DILexicalBlock(scope: !4807, file: !3, line: 3372, column: 11)
!4807 = distinct !DILexicalBlock(scope: !4795, file: !3, line: 3371, column: 5)
!4808 = !DILocation(line: 3372, column: 11, scope: !4807)
!4809 = !DILocation(line: 3373, column: 10, scope: !4806)
!4810 = !DILocation(line: 3373, column: 2, scope: !4806)
!4811 = !DILocation(line: 3375, column: 2, scope: !4806)
!4812 = !DILocation(line: 3376, column: 5, scope: !4807)
!4813 = !DILocation(line: 3380, column: 22, scope: !4431)
!4814 = !DILocation(line: 3380, column: 3, scope: !4431)
!4815 = !DILocation(line: 3380, column: 12, scope: !4431)
!4816 = !DILocation(line: 3380, column: 20, scope: !4431)
!4817 = !DILocation(line: 3381, column: 22, scope: !4431)
!4818 = !DILocation(line: 3381, column: 3, scope: !4431)
!4819 = !DILocation(line: 3381, column: 12, scope: !4431)
!4820 = !DILocation(line: 3381, column: 20, scope: !4431)
!4821 = !DILocation(line: 3387, column: 35, scope: !4822)
!4822 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3387, column: 7)
!4823 = !DILocation(line: 3387, column: 7, scope: !4822)
!4824 = !DILocation(line: 3387, column: 7, scope: !4431)
!4825 = !DILocation(line: 3388, column: 5, scope: !4822)
!4826 = !DILocation(line: 3390, column: 7, scope: !4827)
!4827 = distinct !DILexicalBlock(scope: !4431, file: !3, line: 3390, column: 7)
!4828 = !DILocation(line: 3390, column: 16, scope: !4827)
!4829 = !DILocation(line: 3390, column: 7, scope: !4431)
!4830 = !DILocation(line: 3392, column: 7, scope: !4831)
!4831 = distinct !DILexicalBlock(scope: !4827, file: !3, line: 3391, column: 5)
!4832 = !DILocation(line: 3394, column: 39, scope: !4833)
!4833 = distinct !DILexicalBlock(scope: !4831, file: !3, line: 3394, column: 11)
!4834 = !DILocation(line: 3394, column: 11, scope: !4833)
!4835 = !DILocation(line: 3394, column: 11, scope: !4831)
!4836 = !DILocation(line: 3395, column: 2, scope: !4833)
!4837 = !DILocation(line: 3396, column: 5, scope: !4831)
!4838 = !DILocation(line: 3398, column: 3, scope: !4431)
!4839 = !DILocation(line: 3399, column: 1, scope: !4431)
!4840 = distinct !DISubprogram(name: "find_cond_trap", scope: !3, file: !3, line: 3405, type: !4841, scopeLine: 3406, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!4841 = !DISubroutineType(types: !4842)
!4842 = !{!2545, !2546, !2563, !2563}
!4843 = !DILocalVariable(name: "test_bb", arg: 1, scope: !4840, file: !3, line: 3405, type: !2546)
!4844 = !DILocation(line: 3405, column: 29, scope: !4840)
!4845 = !DILocalVariable(name: "then_edge", arg: 2, scope: !4840, file: !3, line: 3405, type: !2563)
!4846 = !DILocation(line: 3405, column: 43, scope: !4840)
!4847 = !DILocalVariable(name: "else_edge", arg: 3, scope: !4840, file: !3, line: 3405, type: !2563)
!4848 = !DILocation(line: 3405, column: 59, scope: !4840)
!4849 = !DILocalVariable(name: "then_bb", scope: !4840, file: !3, line: 3407, type: !2546)
!4850 = !DILocation(line: 3407, column: 15, scope: !4840)
!4851 = !DILocation(line: 3407, column: 25, scope: !4840)
!4852 = !DILocation(line: 3407, column: 36, scope: !4840)
!4853 = !DILocalVariable(name: "else_bb", scope: !4840, file: !3, line: 3408, type: !2546)
!4854 = !DILocation(line: 3408, column: 15, scope: !4840)
!4855 = !DILocation(line: 3408, column: 25, scope: !4840)
!4856 = !DILocation(line: 3408, column: 36, scope: !4840)
!4857 = !DILocalVariable(name: "other_bb", scope: !4840, file: !3, line: 3409, type: !2546)
!4858 = !DILocation(line: 3409, column: 15, scope: !4840)
!4859 = !DILocalVariable(name: "trap_bb", scope: !4840, file: !3, line: 3409, type: !2546)
!4860 = !DILocation(line: 3409, column: 25, scope: !4840)
!4861 = !DILocalVariable(name: "trap", scope: !4840, file: !3, line: 3410, type: !2577)
!4862 = !DILocation(line: 3410, column: 7, scope: !4840)
!4863 = !DILocalVariable(name: "jump", scope: !4840, file: !3, line: 3410, type: !2577)
!4864 = !DILocation(line: 3410, column: 13, scope: !4840)
!4865 = !DILocalVariable(name: "cond", scope: !4840, file: !3, line: 3410, type: !2577)
!4866 = !DILocation(line: 3410, column: 19, scope: !4840)
!4867 = !DILocalVariable(name: "cond_earliest", scope: !4840, file: !3, line: 3410, type: !2577)
!4868 = !DILocation(line: 3410, column: 25, scope: !4840)
!4869 = !DILocalVariable(name: "seq", scope: !4840, file: !3, line: 3410, type: !2577)
!4870 = !DILocation(line: 3410, column: 40, scope: !4840)
!4871 = !DILocalVariable(name: "code", scope: !4840, file: !3, line: 3411, type: !2301)
!4872 = !DILocation(line: 3411, column: 17, scope: !4840)
!4873 = !DILocation(line: 3416, column: 36, scope: !4874)
!4874 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3416, column: 7)
!4875 = !DILocation(line: 3416, column: 15, scope: !4874)
!4876 = !DILocation(line: 3416, column: 13, scope: !4874)
!4877 = !DILocation(line: 3416, column: 46, scope: !4874)
!4878 = !DILocation(line: 3416, column: 7, scope: !4840)
!4879 = !DILocation(line: 3417, column: 15, scope: !4874)
!4880 = !DILocation(line: 3417, column: 13, scope: !4874)
!4881 = !DILocation(line: 3417, column: 35, scope: !4874)
!4882 = !DILocation(line: 3417, column: 33, scope: !4874)
!4883 = !DILocation(line: 3417, column: 5, scope: !4874)
!4884 = !DILocation(line: 3418, column: 41, scope: !4885)
!4885 = distinct !DILexicalBlock(scope: !4874, file: !3, line: 3418, column: 12)
!4886 = !DILocation(line: 3418, column: 20, scope: !4885)
!4887 = !DILocation(line: 3418, column: 18, scope: !4885)
!4888 = !DILocation(line: 3418, column: 51, scope: !4885)
!4889 = !DILocation(line: 3418, column: 12, scope: !4874)
!4890 = !DILocation(line: 3419, column: 15, scope: !4885)
!4891 = !DILocation(line: 3419, column: 13, scope: !4885)
!4892 = !DILocation(line: 3419, column: 35, scope: !4885)
!4893 = !DILocation(line: 3419, column: 33, scope: !4885)
!4894 = !DILocation(line: 3419, column: 5, scope: !4885)
!4895 = !DILocation(line: 3421, column: 5, scope: !4885)
!4896 = !DILocation(line: 3423, column: 7, scope: !4897)
!4897 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3423, column: 7)
!4898 = !DILocation(line: 3423, column: 7, scope: !4840)
!4899 = !DILocation(line: 3425, column: 16, scope: !4900)
!4900 = distinct !DILexicalBlock(scope: !4897, file: !3, line: 3424, column: 5)
!4901 = !DILocation(line: 3426, column: 9, scope: !4900)
!4902 = !DILocation(line: 3426, column: 18, scope: !4900)
!4903 = !DILocation(line: 3426, column: 25, scope: !4900)
!4904 = !DILocation(line: 3426, column: 34, scope: !4900)
!4905 = !DILocation(line: 3425, column: 7, scope: !4900)
!4906 = !DILocation(line: 3427, column: 5, scope: !4900)
!4907 = !DILocation(line: 3430, column: 10, scope: !4840)
!4908 = !DILocation(line: 3430, column: 8, scope: !4840)
!4909 = !DILocation(line: 3431, column: 30, scope: !4840)
!4910 = !DILocation(line: 3431, column: 10, scope: !4840)
!4911 = !DILocation(line: 3431, column: 8, scope: !4840)
!4912 = !DILocation(line: 3432, column: 9, scope: !4913)
!4913 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3432, column: 7)
!4914 = !DILocation(line: 3432, column: 7, scope: !4840)
!4915 = !DILocation(line: 3433, column: 5, scope: !4913)
!4916 = !DILocation(line: 3437, column: 21, scope: !4917)
!4917 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3437, column: 7)
!4918 = !DILocation(line: 3437, column: 9, scope: !4917)
!4919 = !DILocation(line: 3437, column: 7, scope: !4840)
!4920 = !DILocation(line: 3438, column: 5, scope: !4917)
!4921 = !DILocation(line: 3441, column: 7, scope: !4922)
!4922 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3441, column: 7)
!4923 = !DILocation(line: 3441, column: 33, scope: !4922)
!4924 = !DILocation(line: 3441, column: 7, scope: !4840)
!4925 = !DILocation(line: 3442, column: 5, scope: !4922)
!4926 = !DILocation(line: 3445, column: 10, scope: !4840)
!4927 = !DILocation(line: 3445, column: 8, scope: !4840)
!4928 = !DILocation(line: 3446, column: 7, scope: !4929)
!4929 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3446, column: 7)
!4930 = !DILocation(line: 3446, column: 18, scope: !4929)
!4931 = !DILocation(line: 3446, column: 15, scope: !4929)
!4932 = !DILocation(line: 3446, column: 7, scope: !4840)
!4933 = !DILocation(line: 3448, column: 40, scope: !4934)
!4934 = distinct !DILexicalBlock(scope: !4929, file: !3, line: 3447, column: 5)
!4935 = !DILocation(line: 3448, column: 46, scope: !4934)
!4936 = !DILocation(line: 3448, column: 14, scope: !4934)
!4937 = !DILocation(line: 3448, column: 12, scope: !4934)
!4938 = !DILocation(line: 3449, column: 11, scope: !4939)
!4939 = distinct !DILexicalBlock(scope: !4934, file: !3, line: 3449, column: 11)
!4940 = !DILocation(line: 3449, column: 16, scope: !4939)
!4941 = !DILocation(line: 3449, column: 11, scope: !4934)
!4942 = !DILocation(line: 3450, column: 2, scope: !4939)
!4943 = !DILocation(line: 3451, column: 5, scope: !4934)
!4944 = !DILocation(line: 3454, column: 24, scope: !4840)
!4945 = !DILocation(line: 3454, column: 40, scope: !4840)
!4946 = !DILocation(line: 3454, column: 30, scope: !4840)
!4947 = !DILocation(line: 3455, column: 20, scope: !4840)
!4948 = !DILocation(line: 3455, column: 10, scope: !4840)
!4949 = !DILocation(line: 3456, column: 10, scope: !4840)
!4950 = !DILocation(line: 3454, column: 9, scope: !4840)
!4951 = !DILocation(line: 3454, column: 7, scope: !4840)
!4952 = !DILocation(line: 3457, column: 7, scope: !4953)
!4953 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3457, column: 7)
!4954 = !DILocation(line: 3457, column: 11, scope: !4953)
!4955 = !DILocation(line: 3457, column: 7, scope: !4840)
!4956 = !DILocation(line: 3458, column: 5, scope: !4953)
!4957 = !DILocation(line: 3461, column: 28, scope: !4840)
!4958 = !DILocation(line: 3461, column: 33, scope: !4840)
!4959 = !DILocation(line: 3461, column: 48, scope: !4840)
!4960 = !DILocation(line: 3461, column: 3, scope: !4840)
!4961 = !DILocation(line: 3464, column: 16, scope: !4840)
!4962 = !DILocation(line: 3464, column: 27, scope: !4840)
!4963 = !DILocation(line: 3464, column: 24, scope: !4840)
!4964 = !DILocation(line: 3464, column: 37, scope: !4840)
!4965 = !DILocation(line: 3464, column: 49, scope: !4840)
!4966 = !DILocation(line: 3464, column: 3, scope: !4840)
!4967 = !DILocation(line: 3465, column: 20, scope: !4840)
!4968 = !DILocation(line: 3465, column: 3, scope: !4840)
!4969 = !DILocation(line: 3466, column: 20, scope: !4840)
!4970 = !DILocation(line: 3466, column: 3, scope: !4840)
!4971 = !DILocation(line: 3467, column: 20, scope: !4840)
!4972 = !DILocation(line: 3467, column: 3, scope: !4840)
!4973 = !DILocation(line: 3469, column: 7, scope: !4974)
!4974 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3469, column: 7)
!4975 = !DILocation(line: 3469, column: 35, scope: !4974)
!4976 = !DILocation(line: 3469, column: 7, scope: !4840)
!4977 = !DILocation(line: 3471, column: 27, scope: !4978)
!4978 = distinct !DILexicalBlock(scope: !4974, file: !3, line: 3470, column: 5)
!4979 = !DILocation(line: 3471, column: 7, scope: !4978)
!4980 = !DILocation(line: 3472, column: 23, scope: !4978)
!4981 = !DILocation(line: 3473, column: 5, scope: !4978)
!4982 = !DILocation(line: 3476, column: 7, scope: !4983)
!4983 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3476, column: 7)
!4984 = !DILocation(line: 3476, column: 26, scope: !4983)
!4985 = !DILocation(line: 3476, column: 7, scope: !4840)
!4986 = !DILocation(line: 3477, column: 23, scope: !4983)
!4987 = !DILocation(line: 3477, column: 5, scope: !4983)
!4988 = !DILocation(line: 3477, column: 33, scope: !4983)
!4989 = !DILocation(line: 3477, column: 39, scope: !4983)
!4990 = !DILocalVariable(name: "lab", scope: !4991, file: !3, line: 3480, type: !2577)
!4991 = distinct !DILexicalBlock(scope: !4983, file: !3, line: 3479, column: 5)
!4992 = !DILocation(line: 3480, column: 11, scope: !4991)
!4993 = !DILocalVariable(name: "newjump", scope: !4991, file: !3, line: 3480, type: !2577)
!4994 = !DILocation(line: 3480, column: 16, scope: !4991)
!4995 = !DILocation(line: 3482, column: 13, scope: !4991)
!4996 = !DILocation(line: 3482, column: 11, scope: !4991)
!4997 = !DILocation(line: 3483, column: 49, scope: !4991)
!4998 = !DILocation(line: 3483, column: 39, scope: !4991)
!4999 = !DILocation(line: 3483, column: 55, scope: !4991)
!5000 = !DILocation(line: 3483, column: 17, scope: !4991)
!5001 = !DILocation(line: 3483, column: 15, scope: !4991)
!5002 = !DILocation(line: 3484, column: 7, scope: !4991)
!5003 = !DILocation(line: 3484, column: 25, scope: !4991)
!5004 = !DILocation(line: 3485, column: 30, scope: !4991)
!5005 = !DILocation(line: 3485, column: 7, scope: !4991)
!5006 = !DILocation(line: 3485, column: 28, scope: !4991)
!5007 = !DILocation(line: 3486, column: 27, scope: !4991)
!5008 = !DILocation(line: 3486, column: 7, scope: !4991)
!5009 = !DILocation(line: 3488, column: 16, scope: !4840)
!5010 = !DILocation(line: 3488, column: 3, scope: !4840)
!5011 = !DILocation(line: 3490, column: 27, scope: !5012)
!5012 = distinct !DILexicalBlock(scope: !4840, file: !3, line: 3490, column: 7)
!5013 = !DILocation(line: 3490, column: 36, scope: !5012)
!5014 = !DILocation(line: 3490, column: 7, scope: !5012)
!5015 = !DILocation(line: 3490, column: 7, scope: !4840)
!5016 = !DILocation(line: 3492, column: 21, scope: !5017)
!5017 = distinct !DILexicalBlock(scope: !5012, file: !3, line: 3491, column: 5)
!5018 = !DILocation(line: 3492, column: 30, scope: !5017)
!5019 = !DILocation(line: 3492, column: 7, scope: !5017)
!5020 = !DILocation(line: 3493, column: 23, scope: !5017)
!5021 = !DILocation(line: 3494, column: 5, scope: !5017)
!5022 = !DILocation(line: 3496, column: 24, scope: !4840)
!5023 = !DILocation(line: 3497, column: 3, scope: !4840)
!5024 = !DILocation(line: 3498, column: 1, scope: !4840)
!5025 = distinct !DISubprogram(name: "find_if_case_1", scope: !3, file: !3, line: 3604, type: !4841, scopeLine: 3605, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5026 = !DILocalVariable(name: "test_bb", arg: 1, scope: !5025, file: !3, line: 3604, type: !2546)
!5027 = !DILocation(line: 3604, column: 29, scope: !5025)
!5028 = !DILocalVariable(name: "then_edge", arg: 2, scope: !5025, file: !3, line: 3604, type: !2563)
!5029 = !DILocation(line: 3604, column: 43, scope: !5025)
!5030 = !DILocalVariable(name: "else_edge", arg: 3, scope: !5025, file: !3, line: 3604, type: !2563)
!5031 = !DILocation(line: 3604, column: 59, scope: !5025)
!5032 = !DILocalVariable(name: "then_bb", scope: !5025, file: !3, line: 3606, type: !2546)
!5033 = !DILocation(line: 3606, column: 15, scope: !5025)
!5034 = !DILocation(line: 3606, column: 25, scope: !5025)
!5035 = !DILocation(line: 3606, column: 36, scope: !5025)
!5036 = !DILocalVariable(name: "else_bb", scope: !5025, file: !3, line: 3607, type: !2546)
!5037 = !DILocation(line: 3607, column: 15, scope: !5025)
!5038 = !DILocation(line: 3607, column: 25, scope: !5025)
!5039 = !DILocation(line: 3607, column: 36, scope: !5025)
!5040 = !DILocalVariable(name: "new_bb", scope: !5025, file: !3, line: 3608, type: !2546)
!5041 = !DILocation(line: 3608, column: 15, scope: !5025)
!5042 = !DILocalVariable(name: "then_bb_index", scope: !5025, file: !3, line: 3609, type: !2545)
!5043 = !DILocation(line: 3609, column: 7, scope: !5025)
!5044 = !DILocation(line: 3621, column: 8, scope: !5045)
!5045 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3621, column: 7)
!5046 = !DILocation(line: 3622, column: 8, scope: !5045)
!5047 = !DILocation(line: 3622, column: 26, scope: !5045)
!5048 = !DILocation(line: 3622, column: 11, scope: !5045)
!5049 = !DILocation(line: 3623, column: 7, scope: !5045)
!5050 = !DILocation(line: 3623, column: 11, scope: !5045)
!5051 = !DILocation(line: 3624, column: 4, scope: !5045)
!5052 = !DILocation(line: 3624, column: 22, scope: !5045)
!5053 = !DILocation(line: 3624, column: 7, scope: !5045)
!5054 = !DILocation(line: 3625, column: 7, scope: !5045)
!5055 = !DILocation(line: 3625, column: 11, scope: !5045)
!5056 = !DILocation(line: 3626, column: 4, scope: !5045)
!5057 = !DILocation(line: 3626, column: 22, scope: !5045)
!5058 = !DILocation(line: 3626, column: 7, scope: !5045)
!5059 = !DILocation(line: 3621, column: 7, scope: !5025)
!5060 = !DILocation(line: 3628, column: 5, scope: !5045)
!5061 = !DILocation(line: 3631, column: 23, scope: !5062)
!5062 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3631, column: 7)
!5063 = !DILocation(line: 3631, column: 8, scope: !5062)
!5064 = !DILocation(line: 3631, column: 7, scope: !5025)
!5065 = !DILocation(line: 3632, column: 5, scope: !5062)
!5066 = !DILocation(line: 3635, column: 25, scope: !5067)
!5067 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3635, column: 7)
!5068 = !DILocation(line: 3635, column: 7, scope: !5067)
!5069 = !DILocation(line: 3635, column: 35, scope: !5067)
!5070 = !DILocation(line: 3635, column: 41, scope: !5067)
!5071 = !DILocation(line: 3635, column: 7, scope: !5025)
!5072 = !DILocation(line: 3636, column: 5, scope: !5067)
!5073 = !DILocation(line: 3639, column: 23, scope: !5074)
!5074 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3639, column: 7)
!5075 = !DILocation(line: 3639, column: 8, scope: !5074)
!5076 = !DILocation(line: 3639, column: 7, scope: !5025)
!5077 = !DILocation(line: 3640, column: 5, scope: !5074)
!5078 = !DILocation(line: 3643, column: 26, scope: !5079)
!5079 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3643, column: 7)
!5080 = !DILocation(line: 3643, column: 7, scope: !5079)
!5081 = !DILocation(line: 3643, column: 7, scope: !5025)
!5082 = !DILocation(line: 3644, column: 5, scope: !5079)
!5083 = !DILocation(line: 3646, column: 25, scope: !5025)
!5084 = !DILocation(line: 3647, column: 7, scope: !5085)
!5085 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3647, column: 7)
!5086 = !DILocation(line: 3647, column: 7, scope: !5025)
!5087 = !DILocation(line: 3648, column: 14, scope: !5085)
!5088 = !DILocation(line: 3650, column: 7, scope: !5085)
!5089 = !DILocation(line: 3650, column: 16, scope: !5085)
!5090 = !DILocation(line: 3650, column: 23, scope: !5085)
!5091 = !DILocation(line: 3650, column: 32, scope: !5085)
!5092 = !DILocation(line: 3648, column: 5, scope: !5085)
!5093 = !DILocation(line: 3653, column: 30, scope: !5094)
!5094 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3653, column: 7)
!5095 = !DILocation(line: 3654, column: 2, scope: !5094)
!5096 = !DILocation(line: 3653, column: 9, scope: !5094)
!5097 = !DILocation(line: 3653, column: 7, scope: !5025)
!5098 = !DILocation(line: 3656, column: 5, scope: !5094)
!5099 = !DILocation(line: 3659, column: 29, scope: !5100)
!5100 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3659, column: 7)
!5101 = !DILocation(line: 3659, column: 38, scope: !5100)
!5102 = !DILocation(line: 3659, column: 47, scope: !5100)
!5103 = !DILocation(line: 3660, column: 21, scope: !5100)
!5104 = !DILocation(line: 3660, column: 8, scope: !5100)
!5105 = !DILocation(line: 3659, column: 9, scope: !5100)
!5106 = !DILocation(line: 3659, column: 7, scope: !5025)
!5107 = !DILocation(line: 3661, column: 5, scope: !5100)
!5108 = !DILocation(line: 3670, column: 7, scope: !5109)
!5109 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3670, column: 7)
!5110 = !DILocation(line: 3670, column: 16, scope: !5109)
!5111 = !DILocation(line: 3670, column: 27, scope: !5109)
!5112 = !DILocation(line: 3670, column: 24, scope: !5109)
!5113 = !DILocation(line: 3671, column: 7, scope: !5109)
!5114 = !DILocation(line: 3671, column: 10, scope: !5109)
!5115 = !DILocation(line: 3671, column: 19, scope: !5109)
!5116 = !DILocation(line: 3671, column: 30, scope: !5109)
!5117 = !DILocation(line: 3671, column: 27, scope: !5109)
!5118 = !DILocation(line: 3672, column: 7, scope: !5109)
!5119 = !DILocation(line: 3672, column: 10, scope: !5109)
!5120 = !DILocation(line: 3672, column: 21, scope: !5109)
!5121 = !DILocation(line: 3672, column: 18, scope: !5109)
!5122 = !DILocation(line: 3670, column: 7, scope: !5025)
!5123 = !DILocation(line: 3674, column: 27, scope: !5124)
!5124 = distinct !DILexicalBlock(scope: !5109, file: !3, line: 3673, column: 5)
!5125 = !DILocation(line: 3674, column: 52, scope: !5124)
!5126 = !DILocation(line: 3674, column: 7, scope: !5124)
!5127 = !DILocation(line: 3675, column: 14, scope: !5124)
!5128 = !DILocation(line: 3676, column: 5, scope: !5124)
!5129 = !DILocation(line: 3678, column: 46, scope: !5109)
!5130 = !DILocation(line: 3679, column: 11, scope: !5109)
!5131 = !DILocation(line: 3678, column: 14, scope: !5109)
!5132 = !DILocation(line: 3678, column: 12, scope: !5109)
!5133 = !DILocation(line: 3681, column: 20, scope: !5025)
!5134 = !DILocation(line: 3681, column: 3, scope: !5025)
!5135 = !DILocation(line: 3682, column: 20, scope: !5025)
!5136 = !DILocation(line: 3682, column: 3, scope: !5025)
!5137 = !DILocation(line: 3684, column: 19, scope: !5025)
!5138 = !DILocation(line: 3684, column: 28, scope: !5025)
!5139 = !DILocation(line: 3684, column: 17, scope: !5025)
!5140 = !DILocation(line: 3685, column: 23, scope: !5025)
!5141 = !DILocation(line: 3685, column: 3, scope: !5025)
!5142 = !DILocation(line: 3689, column: 7, scope: !5143)
!5143 = distinct !DILexicalBlock(scope: !5025, file: !3, line: 3689, column: 7)
!5144 = !DILocation(line: 3689, column: 7, scope: !5025)
!5145 = !DILocation(line: 3691, column: 22, scope: !5146)
!5146 = distinct !DILexicalBlock(scope: !5143, file: !3, line: 3690, column: 5)
!5147 = !DILocation(line: 3691, column: 37, scope: !5146)
!5148 = !DILocation(line: 3691, column: 7, scope: !5146)
!5149 = !DILocation(line: 3695, column: 7, scope: !5146)
!5150 = !DILocalVariable(name: "bb_", scope: !5151, file: !3, line: 3695, type: !2546)
!5151 = distinct !DILexicalBlock(scope: !5146, file: !3, line: 3695, column: 7)
!5152 = !DILocation(line: 3695, column: 7, scope: !5151)
!5153 = !DILocation(line: 3696, column: 5, scope: !5146)
!5154 = !DILocation(line: 3698, column: 19, scope: !5025)
!5155 = !DILocation(line: 3699, column: 24, scope: !5025)
!5156 = !DILocation(line: 3701, column: 3, scope: !5025)
!5157 = !DILocation(line: 3702, column: 1, scope: !5025)
!5158 = distinct !DISubprogram(name: "find_if_case_2", scope: !3, file: !3, line: 3707, type: !4841, scopeLine: 3708, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5159 = !DILocalVariable(name: "test_bb", arg: 1, scope: !5158, file: !3, line: 3707, type: !2546)
!5160 = !DILocation(line: 3707, column: 29, scope: !5158)
!5161 = !DILocalVariable(name: "then_edge", arg: 2, scope: !5158, file: !3, line: 3707, type: !2563)
!5162 = !DILocation(line: 3707, column: 43, scope: !5158)
!5163 = !DILocalVariable(name: "else_edge", arg: 3, scope: !5158, file: !3, line: 3707, type: !2563)
!5164 = !DILocation(line: 3707, column: 59, scope: !5158)
!5165 = !DILocalVariable(name: "then_bb", scope: !5158, file: !3, line: 3709, type: !2546)
!5166 = !DILocation(line: 3709, column: 15, scope: !5158)
!5167 = !DILocation(line: 3709, column: 25, scope: !5158)
!5168 = !DILocation(line: 3709, column: 36, scope: !5158)
!5169 = !DILocalVariable(name: "else_bb", scope: !5158, file: !3, line: 3710, type: !2546)
!5170 = !DILocation(line: 3710, column: 15, scope: !5158)
!5171 = !DILocation(line: 3710, column: 25, scope: !5158)
!5172 = !DILocation(line: 3710, column: 36, scope: !5158)
!5173 = !DILocalVariable(name: "else_succ", scope: !5158, file: !3, line: 3711, type: !2563)
!5174 = !DILocation(line: 3711, column: 8, scope: !5158)
!5175 = !DILocalVariable(name: "note", scope: !5158, file: !3, line: 3712, type: !2577)
!5176 = !DILocation(line: 3712, column: 7, scope: !5158)
!5177 = !DILocation(line: 3724, column: 8, scope: !5178)
!5178 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3724, column: 7)
!5179 = !DILocation(line: 3725, column: 8, scope: !5178)
!5180 = !DILocation(line: 3725, column: 26, scope: !5178)
!5181 = !DILocation(line: 3725, column: 11, scope: !5178)
!5182 = !DILocation(line: 3726, column: 7, scope: !5178)
!5183 = !DILocation(line: 3726, column: 11, scope: !5178)
!5184 = !DILocation(line: 3727, column: 4, scope: !5178)
!5185 = !DILocation(line: 3727, column: 22, scope: !5178)
!5186 = !DILocation(line: 3727, column: 7, scope: !5178)
!5187 = !DILocation(line: 3728, column: 7, scope: !5178)
!5188 = !DILocation(line: 3728, column: 11, scope: !5178)
!5189 = !DILocation(line: 3729, column: 4, scope: !5178)
!5190 = !DILocation(line: 3729, column: 22, scope: !5178)
!5191 = !DILocation(line: 3729, column: 7, scope: !5178)
!5192 = !DILocation(line: 3724, column: 7, scope: !5158)
!5193 = !DILocation(line: 3731, column: 5, scope: !5178)
!5194 = !DILocation(line: 3734, column: 23, scope: !5195)
!5195 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3734, column: 7)
!5196 = !DILocation(line: 3734, column: 8, scope: !5195)
!5197 = !DILocation(line: 3734, column: 7, scope: !5158)
!5198 = !DILocation(line: 3735, column: 5, scope: !5195)
!5199 = !DILocation(line: 3737, column: 35, scope: !5195)
!5200 = !DILocation(line: 3737, column: 17, scope: !5195)
!5201 = !DILocation(line: 3737, column: 15, scope: !5195)
!5202 = !DILocation(line: 3740, column: 7, scope: !5203)
!5203 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3740, column: 7)
!5204 = !DILocation(line: 3740, column: 18, scope: !5203)
!5205 = !DILocation(line: 3740, column: 24, scope: !5203)
!5206 = !DILocation(line: 3740, column: 7, scope: !5158)
!5207 = !DILocation(line: 3741, column: 5, scope: !5203)
!5208 = !DILocation(line: 3744, column: 23, scope: !5209)
!5209 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3744, column: 7)
!5210 = !DILocation(line: 3744, column: 8, scope: !5209)
!5211 = !DILocation(line: 3744, column: 7, scope: !5158)
!5212 = !DILocation(line: 3745, column: 5, scope: !5209)
!5213 = !DILocation(line: 3748, column: 7, scope: !5214)
!5214 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3748, column: 7)
!5215 = !DILocation(line: 3748, column: 16, scope: !5214)
!5216 = !DILocation(line: 3748, column: 22, scope: !5214)
!5217 = !DILocation(line: 3748, column: 7, scope: !5158)
!5218 = !DILocation(line: 3749, column: 5, scope: !5214)
!5219 = !DILocation(line: 3752, column: 25, scope: !5158)
!5220 = !DILocation(line: 3752, column: 10, scope: !5158)
!5221 = !DILocation(line: 3752, column: 8, scope: !5158)
!5222 = !DILocation(line: 3753, column: 7, scope: !5223)
!5223 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3753, column: 7)
!5224 = !DILocation(line: 3753, column: 12, scope: !5223)
!5225 = !DILocation(line: 3753, column: 15, scope: !5223)
!5226 = !DILocation(line: 3753, column: 39, scope: !5223)
!5227 = !DILocation(line: 3753, column: 7, scope: !5158)
!5228 = !DILocation(line: 3755, column: 12, scope: !5229)
!5229 = distinct !DILexicalBlock(scope: !5223, file: !3, line: 3755, column: 12)
!5230 = !DILocation(line: 3755, column: 23, scope: !5229)
!5231 = !DILocation(line: 3755, column: 29, scope: !5229)
!5232 = !DILocation(line: 3755, column: 35, scope: !5229)
!5233 = !DILocation(line: 3756, column: 5, scope: !5229)
!5234 = !DILocation(line: 3756, column: 45, scope: !5229)
!5235 = !DILocation(line: 3757, column: 10, scope: !5229)
!5236 = !DILocation(line: 3757, column: 21, scope: !5229)
!5237 = !DILocation(line: 3756, column: 8, scope: !5229)
!5238 = !DILocation(line: 3755, column: 12, scope: !5223)
!5239 = !DILocation(line: 3760, column: 5, scope: !5229)
!5240 = !DILocation(line: 3762, column: 25, scope: !5158)
!5241 = !DILocation(line: 3763, column: 7, scope: !5242)
!5242 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3763, column: 7)
!5243 = !DILocation(line: 3763, column: 7, scope: !5158)
!5244 = !DILocation(line: 3764, column: 14, scope: !5242)
!5245 = !DILocation(line: 3766, column: 7, scope: !5242)
!5246 = !DILocation(line: 3766, column: 16, scope: !5242)
!5247 = !DILocation(line: 3766, column: 23, scope: !5242)
!5248 = !DILocation(line: 3766, column: 32, scope: !5242)
!5249 = !DILocation(line: 3764, column: 5, scope: !5242)
!5250 = !DILocation(line: 3769, column: 30, scope: !5251)
!5251 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3769, column: 7)
!5252 = !DILocation(line: 3770, column: 2, scope: !5251)
!5253 = !DILocation(line: 3769, column: 9, scope: !5251)
!5254 = !DILocation(line: 3769, column: 7, scope: !5158)
!5255 = !DILocation(line: 3772, column: 5, scope: !5251)
!5256 = !DILocation(line: 3775, column: 29, scope: !5257)
!5257 = distinct !DILexicalBlock(scope: !5158, file: !3, line: 3775, column: 7)
!5258 = !DILocation(line: 3775, column: 38, scope: !5257)
!5259 = !DILocation(line: 3775, column: 47, scope: !5257)
!5260 = !DILocation(line: 3775, column: 56, scope: !5257)
!5261 = !DILocation(line: 3775, column: 67, scope: !5257)
!5262 = !DILocation(line: 3775, column: 9, scope: !5257)
!5263 = !DILocation(line: 3775, column: 7, scope: !5158)
!5264 = !DILocation(line: 3776, column: 5, scope: !5257)
!5265 = !DILocation(line: 3781, column: 20, scope: !5158)
!5266 = !DILocation(line: 3781, column: 3, scope: !5158)
!5267 = !DILocation(line: 3782, column: 20, scope: !5158)
!5268 = !DILocation(line: 3782, column: 3, scope: !5158)
!5269 = !DILocation(line: 3783, column: 23, scope: !5158)
!5270 = !DILocation(line: 3783, column: 3, scope: !5158)
!5271 = !DILocation(line: 3785, column: 19, scope: !5158)
!5272 = !DILocation(line: 3786, column: 24, scope: !5158)
!5273 = !DILocation(line: 3791, column: 3, scope: !5158)
!5274 = !DILocation(line: 3792, column: 1, scope: !5158)
!5275 = distinct !DISubprogram(name: "single_pred_p", scope: !367, file: !367, line: 634, type: !5276, scopeLine: 635, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5276 = !DISubroutineType(types: !5277)
!5277 = !{!2809, !5278}
!5278 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_basic_block", file: !2524, line: 112, baseType: !5279)
!5279 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !5280, size: 64)
!5280 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2548)
!5281 = !DILocalVariable(name: "bb", arg: 1, scope: !5275, file: !367, line: 634, type: !5278)
!5282 = !DILocation(line: 634, column: 34, scope: !5275)
!5283 = !DILocation(line: 636, column: 10, scope: !5275)
!5284 = !DILocation(line: 636, column: 33, scope: !5275)
!5285 = !DILocation(line: 636, column: 3, scope: !5275)
!5286 = distinct !DISubprogram(name: "single_succ_p", scope: !367, file: !367, line: 626, type: !5276, scopeLine: 627, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5287 = !DILocalVariable(name: "bb", arg: 1, scope: !5286, file: !367, line: 626, type: !5278)
!5288 = !DILocation(line: 626, column: 34, scope: !5286)
!5289 = !DILocation(line: 628, column: 10, scope: !5286)
!5290 = !DILocation(line: 628, column: 33, scope: !5286)
!5291 = !DILocation(line: 628, column: 3, scope: !5286)
!5292 = distinct !DISubprogram(name: "single_succ", scope: !367, file: !367, line: 663, type: !5293, scopeLine: 664, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5293 = !DISubroutineType(types: !5294)
!5294 = !{!2546, !5278}
!5295 = !DILocalVariable(name: "bb", arg: 1, scope: !5292, file: !367, line: 663, type: !5278)
!5296 = !DILocation(line: 663, column: 32, scope: !5292)
!5297 = !DILocation(line: 665, column: 28, scope: !5292)
!5298 = !DILocation(line: 665, column: 10, scope: !5292)
!5299 = !DILocation(line: 665, column: 33, scope: !5292)
!5300 = !DILocation(line: 665, column: 3, scope: !5292)
!5301 = distinct !DISubprogram(name: "single_succ_edge", scope: !367, file: !367, line: 643, type: !5302, scopeLine: 644, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5302 = !DISubroutineType(types: !5303)
!5303 = !{!2563, !5278}
!5304 = !DILocalVariable(name: "bb", arg: 1, scope: !5301, file: !367, line: 643, type: !5278)
!5305 = !DILocation(line: 643, column: 37, scope: !5301)
!5306 = !DILocation(line: 645, column: 3, scope: !5301)
!5307 = !DILocation(line: 646, column: 10, scope: !5301)
!5308 = !DILocation(line: 646, column: 3, scope: !5301)
!5309 = distinct !DISubprogram(name: "noce_get_condition", scope: !3, file: !3, line: 2084, type: !5310, scopeLine: 2085, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5310 = !DISubroutineType(types: !5311)
!5311 = !{!2577, !2577, !3777, !2809}
!5312 = !DILocalVariable(name: "jump", arg: 1, scope: !5309, file: !3, line: 2084, type: !2577)
!5313 = !DILocation(line: 2084, column: 25, scope: !5309)
!5314 = !DILocalVariable(name: "earliest", arg: 2, scope: !5309, file: !3, line: 2084, type: !3777)
!5315 = !DILocation(line: 2084, column: 36, scope: !5309)
!5316 = !DILocalVariable(name: "then_else_reversed", arg: 3, scope: !5309, file: !3, line: 2084, type: !2809)
!5317 = !DILocation(line: 2084, column: 51, scope: !5309)
!5318 = !DILocalVariable(name: "cond", scope: !5309, file: !3, line: 2086, type: !2577)
!5319 = !DILocation(line: 2086, column: 7, scope: !5309)
!5320 = !DILocalVariable(name: "set", scope: !5309, file: !3, line: 2086, type: !2577)
!5321 = !DILocation(line: 2086, column: 13, scope: !5309)
!5322 = !DILocalVariable(name: "tmp", scope: !5309, file: !3, line: 2086, type: !2577)
!5323 = !DILocation(line: 2086, column: 18, scope: !5309)
!5324 = !DILocalVariable(name: "reverse", scope: !5309, file: !3, line: 2087, type: !2809)
!5325 = !DILocation(line: 2087, column: 8, scope: !5309)
!5326 = !DILocation(line: 2089, column: 25, scope: !5327)
!5327 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 2089, column: 7)
!5328 = !DILocation(line: 2089, column: 9, scope: !5327)
!5329 = !DILocation(line: 2089, column: 7, scope: !5309)
!5330 = !DILocation(line: 2090, column: 5, scope: !5327)
!5331 = !DILocation(line: 2092, column: 17, scope: !5309)
!5332 = !DILocation(line: 2092, column: 9, scope: !5309)
!5333 = !DILocation(line: 2092, column: 7, scope: !5309)
!5334 = !DILocation(line: 2096, column: 14, scope: !5309)
!5335 = !DILocation(line: 2096, column: 49, scope: !5309)
!5336 = !DILocation(line: 2097, column: 7, scope: !5309)
!5337 = !DILocation(line: 2097, column: 10, scope: !5309)
!5338 = !DILocation(line: 2097, column: 47, scope: !5309)
!5339 = !DILocation(line: 2097, column: 44, scope: !5309)
!5340 = !DILocation(line: 0, scope: !5309)
!5341 = !DILocation(line: 2096, column: 13, scope: !5309)
!5342 = !DILocation(line: 2096, column: 11, scope: !5309)
!5343 = !DILocation(line: 2102, column: 7, scope: !5344)
!5344 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 2102, column: 7)
!5345 = !DILocation(line: 2102, column: 7, scope: !5309)
!5346 = !DILocation(line: 2103, column: 16, scope: !5344)
!5347 = !DILocation(line: 2103, column: 15, scope: !5344)
!5348 = !DILocation(line: 2103, column: 13, scope: !5344)
!5349 = !DILocation(line: 2103, column: 5, scope: !5344)
!5350 = !DILocation(line: 2107, column: 10, scope: !5309)
!5351 = !DILocation(line: 2107, column: 8, scope: !5309)
!5352 = !DILocation(line: 2108, column: 9, scope: !5309)
!5353 = !DILocation(line: 2108, column: 7, scope: !5309)
!5354 = !DILocation(line: 2109, column: 7, scope: !5355)
!5355 = distinct !DILexicalBlock(scope: !5309, file: !3, line: 2109, column: 7)
!5356 = !DILocation(line: 2109, column: 19, scope: !5355)
!5357 = !DILocation(line: 2109, column: 22, scope: !5355)
!5358 = !DILocation(line: 2109, column: 54, scope: !5355)
!5359 = !DILocation(line: 2109, column: 7, scope: !5309)
!5360 = !DILocation(line: 2111, column: 19, scope: !5361)
!5361 = distinct !DILexicalBlock(scope: !5355, file: !3, line: 2110, column: 5)
!5362 = !DILocation(line: 2111, column: 8, scope: !5361)
!5363 = !DILocation(line: 2111, column: 17, scope: !5361)
!5364 = !DILocation(line: 2113, column: 11, scope: !5365)
!5365 = distinct !DILexicalBlock(scope: !5361, file: !3, line: 2113, column: 11)
!5366 = !DILocation(line: 2113, column: 11, scope: !5361)
!5367 = !DILocation(line: 2114, column: 9, scope: !5365)
!5368 = !DILocation(line: 2114, column: 7, scope: !5365)
!5369 = !DILocation(line: 2114, column: 2, scope: !5365)
!5370 = !DILocation(line: 2116, column: 14, scope: !5361)
!5371 = !DILocation(line: 2116, column: 7, scope: !5361)
!5372 = !DILocation(line: 2121, column: 34, scope: !5309)
!5373 = !DILocation(line: 2121, column: 40, scope: !5309)
!5374 = !DILocation(line: 2121, column: 46, scope: !5309)
!5375 = !DILocation(line: 2121, column: 55, scope: !5309)
!5376 = !DILocation(line: 2121, column: 10, scope: !5309)
!5377 = !DILocation(line: 2121, column: 3, scope: !5309)
!5378 = !DILocation(line: 2123, column: 1, scope: !5309)
!5379 = distinct !DISubprogram(name: "noce_process_if_block", scope: !3, file: !3, line: 2237, type: !5380, scopeLine: 2238, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5380 = !DISubroutineType(types: !5381)
!5381 = !{!2545, !5382}
!5382 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4225, size: 64)
!5383 = !DILocalVariable(name: "if_info", arg: 1, scope: !5379, file: !3, line: 2237, type: !5382)
!5384 = !DILocation(line: 2237, column: 45, scope: !5379)
!5385 = !DILocalVariable(name: "test_bb", scope: !5379, file: !3, line: 2239, type: !2546)
!5386 = !DILocation(line: 2239, column: 15, scope: !5379)
!5387 = !DILocation(line: 2239, column: 25, scope: !5379)
!5388 = !DILocation(line: 2239, column: 34, scope: !5379)
!5389 = !DILocalVariable(name: "then_bb", scope: !5379, file: !3, line: 2240, type: !2546)
!5390 = !DILocation(line: 2240, column: 15, scope: !5379)
!5391 = !DILocation(line: 2240, column: 25, scope: !5379)
!5392 = !DILocation(line: 2240, column: 34, scope: !5379)
!5393 = !DILocalVariable(name: "else_bb", scope: !5379, file: !3, line: 2241, type: !2546)
!5394 = !DILocation(line: 2241, column: 15, scope: !5379)
!5395 = !DILocation(line: 2241, column: 25, scope: !5379)
!5396 = !DILocation(line: 2241, column: 34, scope: !5379)
!5397 = !DILocalVariable(name: "join_bb", scope: !5379, file: !3, line: 2242, type: !2546)
!5398 = !DILocation(line: 2242, column: 15, scope: !5379)
!5399 = !DILocation(line: 2242, column: 25, scope: !5379)
!5400 = !DILocation(line: 2242, column: 34, scope: !5379)
!5401 = !DILocalVariable(name: "jump", scope: !5379, file: !3, line: 2243, type: !2577)
!5402 = !DILocation(line: 2243, column: 7, scope: !5379)
!5403 = !DILocation(line: 2243, column: 14, scope: !5379)
!5404 = !DILocation(line: 2243, column: 23, scope: !5379)
!5405 = !DILocalVariable(name: "cond", scope: !5379, file: !3, line: 2244, type: !2577)
!5406 = !DILocation(line: 2244, column: 7, scope: !5379)
!5407 = !DILocation(line: 2244, column: 14, scope: !5379)
!5408 = !DILocation(line: 2244, column: 23, scope: !5379)
!5409 = !DILocalVariable(name: "insn_a", scope: !5379, file: !3, line: 2245, type: !2577)
!5410 = !DILocation(line: 2245, column: 7, scope: !5379)
!5411 = !DILocalVariable(name: "insn_b", scope: !5379, file: !3, line: 2245, type: !2577)
!5412 = !DILocation(line: 2245, column: 15, scope: !5379)
!5413 = !DILocalVariable(name: "set_a", scope: !5379, file: !3, line: 2246, type: !2577)
!5414 = !DILocation(line: 2246, column: 7, scope: !5379)
!5415 = !DILocalVariable(name: "set_b", scope: !5379, file: !3, line: 2246, type: !2577)
!5416 = !DILocation(line: 2246, column: 14, scope: !5379)
!5417 = !DILocalVariable(name: "orig_x", scope: !5379, file: !3, line: 2247, type: !2577)
!5418 = !DILocation(line: 2247, column: 7, scope: !5379)
!5419 = !DILocalVariable(name: "x", scope: !5379, file: !3, line: 2247, type: !2577)
!5420 = !DILocation(line: 2247, column: 15, scope: !5379)
!5421 = !DILocalVariable(name: "a", scope: !5379, file: !3, line: 2247, type: !2577)
!5422 = !DILocation(line: 2247, column: 18, scope: !5379)
!5423 = !DILocalVariable(name: "b", scope: !5379, file: !3, line: 2247, type: !2577)
!5424 = !DILocation(line: 2247, column: 21, scope: !5379)
!5425 = !DILocation(line: 2260, column: 31, scope: !5379)
!5426 = !DILocation(line: 2260, column: 12, scope: !5379)
!5427 = !DILocation(line: 2260, column: 10, scope: !5379)
!5428 = !DILocation(line: 2261, column: 9, scope: !5429)
!5429 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2261, column: 7)
!5430 = !DILocation(line: 2262, column: 7, scope: !5429)
!5431 = !DILocation(line: 2262, column: 10, scope: !5429)
!5432 = !DILocation(line: 2262, column: 38, scope: !5429)
!5433 = !DILocation(line: 2262, column: 20, scope: !5429)
!5434 = !DILocation(line: 2262, column: 17, scope: !5429)
!5435 = !DILocation(line: 2263, column: 7, scope: !5429)
!5436 = !DILocation(line: 2263, column: 19, scope: !5429)
!5437 = !DILocation(line: 2263, column: 17, scope: !5429)
!5438 = !DILocation(line: 2263, column: 40, scope: !5429)
!5439 = !DILocation(line: 2261, column: 7, scope: !5379)
!5440 = !DILocation(line: 2264, column: 5, scope: !5429)
!5441 = !DILocation(line: 2266, column: 7, scope: !5379)
!5442 = !DILocation(line: 2266, column: 5, scope: !5379)
!5443 = !DILocation(line: 2267, column: 7, scope: !5379)
!5444 = !DILocation(line: 2267, column: 5, scope: !5379)
!5445 = !DILocation(line: 2276, column: 9, scope: !5379)
!5446 = !DILocation(line: 2277, column: 7, scope: !5447)
!5447 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2277, column: 7)
!5448 = !DILocation(line: 2277, column: 7, scope: !5379)
!5449 = !DILocation(line: 2279, column: 35, scope: !5450)
!5450 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2278, column: 5)
!5451 = !DILocation(line: 2279, column: 16, scope: !5450)
!5452 = !DILocation(line: 2279, column: 14, scope: !5450)
!5453 = !DILocation(line: 2280, column: 13, scope: !5454)
!5454 = distinct !DILexicalBlock(scope: !5450, file: !3, line: 2280, column: 11)
!5455 = !DILocation(line: 2281, column: 4, scope: !5454)
!5456 = !DILocation(line: 2281, column: 7, scope: !5454)
!5457 = !DILocation(line: 2281, column: 35, scope: !5454)
!5458 = !DILocation(line: 2281, column: 17, scope: !5454)
!5459 = !DILocation(line: 2281, column: 14, scope: !5454)
!5460 = !DILocation(line: 2282, column: 4, scope: !5454)
!5461 = !DILocation(line: 2282, column: 16, scope: !5454)
!5462 = !DILocation(line: 2282, column: 14, scope: !5454)
!5463 = !DILocation(line: 2282, column: 37, scope: !5454)
!5464 = !DILocation(line: 2283, column: 4, scope: !5454)
!5465 = !DILocation(line: 2283, column: 22, scope: !5454)
!5466 = !DILocation(line: 2283, column: 25, scope: !5454)
!5467 = !DILocation(line: 2283, column: 9, scope: !5454)
!5468 = !DILocation(line: 2280, column: 11, scope: !5450)
!5469 = !DILocation(line: 2284, column: 2, scope: !5454)
!5470 = !DILocation(line: 2285, column: 5, scope: !5450)
!5471 = !DILocation(line: 2288, column: 35, scope: !5472)
!5472 = distinct !DILexicalBlock(scope: !5447, file: !3, line: 2287, column: 5)
!5473 = !DILocation(line: 2288, column: 44, scope: !5472)
!5474 = !DILocation(line: 2288, column: 16, scope: !5472)
!5475 = !DILocation(line: 2288, column: 14, scope: !5472)
!5476 = !DILocation(line: 2289, column: 7, scope: !5472)
!5477 = !DILocation(line: 2289, column: 14, scope: !5472)
!5478 = !DILocation(line: 2289, column: 21, scope: !5472)
!5479 = !DILocation(line: 2289, column: 24, scope: !5472)
!5480 = !DILocation(line: 0, scope: !5472)
!5481 = !DILocation(line: 2290, column: 30, scope: !5472)
!5482 = !DILocation(line: 2290, column: 11, scope: !5472)
!5483 = !DILocation(line: 2290, column: 9, scope: !5472)
!5484 = distinct !{!5484, !5476, !5485}
!5485 = !DILocation(line: 2290, column: 36, scope: !5472)
!5486 = !DILocation(line: 2294, column: 13, scope: !5487)
!5487 = distinct !DILexicalBlock(scope: !5472, file: !3, line: 2294, column: 11)
!5488 = !DILocation(line: 2295, column: 4, scope: !5487)
!5489 = !DILocation(line: 2295, column: 7, scope: !5487)
!5490 = !DILocation(line: 2295, column: 34, scope: !5487)
!5491 = !DILocation(line: 2295, column: 31, scope: !5487)
!5492 = !DILocation(line: 2296, column: 4, scope: !5487)
!5493 = !DILocation(line: 2296, column: 8, scope: !5487)
!5494 = !DILocation(line: 2297, column: 4, scope: !5487)
!5495 = !DILocation(line: 2297, column: 16, scope: !5487)
!5496 = !DILocation(line: 2297, column: 14, scope: !5487)
!5497 = !DILocation(line: 2297, column: 37, scope: !5487)
!5498 = !DILocation(line: 2298, column: 4, scope: !5487)
!5499 = !DILocation(line: 2298, column: 22, scope: !5487)
!5500 = !DILocation(line: 2298, column: 25, scope: !5487)
!5501 = !DILocation(line: 2298, column: 9, scope: !5487)
!5502 = !DILocation(line: 2299, column: 4, scope: !5487)
!5503 = !DILocation(line: 2299, column: 26, scope: !5487)
!5504 = !DILocation(line: 2299, column: 9, scope: !5487)
!5505 = !DILocation(line: 2300, column: 4, scope: !5487)
!5506 = !DILocation(line: 2300, column: 32, scope: !5487)
!5507 = !DILocation(line: 2300, column: 35, scope: !5487)
!5508 = !DILocation(line: 2300, column: 7, scope: !5487)
!5509 = !DILocation(line: 2301, column: 4, scope: !5487)
!5510 = !DILocation(line: 2301, column: 27, scope: !5487)
!5511 = !DILocation(line: 2301, column: 44, scope: !5487)
!5512 = !DILocation(line: 2301, column: 52, scope: !5487)
!5513 = !DILocation(line: 2301, column: 7, scope: !5487)
!5514 = !DILocation(line: 2305, column: 4, scope: !5487)
!5515 = !DILocation(line: 2305, column: 32, scope: !5487)
!5516 = !DILocation(line: 2305, column: 35, scope: !5487)
!5517 = !DILocation(line: 2305, column: 7, scope: !5487)
!5518 = !DILocation(line: 2306, column: 4, scope: !5487)
!5519 = !DILocation(line: 2306, column: 32, scope: !5487)
!5520 = !DILocation(line: 2306, column: 35, scope: !5487)
!5521 = !DILocation(line: 2306, column: 7, scope: !5487)
!5522 = !DILocation(line: 2307, column: 4, scope: !5487)
!5523 = !DILocation(line: 2307, column: 27, scope: !5487)
!5524 = !DILocation(line: 2307, column: 30, scope: !5487)
!5525 = !DILocation(line: 2307, column: 38, scope: !5487)
!5526 = !DILocation(line: 2307, column: 7, scope: !5487)
!5527 = !DILocation(line: 2294, column: 11, scope: !5472)
!5528 = !DILocation(line: 2308, column: 17, scope: !5487)
!5529 = !DILocation(line: 2308, column: 9, scope: !5487)
!5530 = !DILocation(line: 2308, column: 2, scope: !5487)
!5531 = !DILocation(line: 2316, column: 23, scope: !5532)
!5532 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2316, column: 7)
!5533 = !DILocation(line: 2316, column: 7, scope: !5532)
!5534 = !DILocation(line: 2316, column: 7, scope: !5379)
!5535 = !DILocation(line: 2317, column: 5, scope: !5532)
!5536 = !DILocation(line: 2319, column: 8, scope: !5379)
!5537 = !DILocation(line: 2319, column: 16, scope: !5379)
!5538 = !DILocation(line: 2319, column: 34, scope: !5379)
!5539 = !DILocation(line: 2319, column: 5, scope: !5379)
!5540 = !DILocation(line: 2323, column: 12, scope: !5379)
!5541 = !DILocation(line: 2323, column: 10, scope: !5379)
!5542 = !DILocation(line: 2324, column: 8, scope: !5543)
!5543 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2324, column: 7)
!5544 = !DILocation(line: 2325, column: 7, scope: !5543)
!5545 = !DILocation(line: 2326, column: 7, scope: !5543)
!5546 = !DILocation(line: 2326, column: 17, scope: !5543)
!5547 = !DILocation(line: 2324, column: 7, scope: !5379)
!5548 = !DILocation(line: 2328, column: 11, scope: !5549)
!5549 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 2328, column: 11)
!5550 = distinct !DILexicalBlock(scope: !5543, file: !3, line: 2327, column: 5)
!5551 = !DILocation(line: 2328, column: 24, scope: !5549)
!5552 = !DILocation(line: 2328, column: 11, scope: !5550)
!5553 = !DILocation(line: 2329, column: 2, scope: !5549)
!5554 = !DILocation(line: 2331, column: 11, scope: !5555)
!5555 = distinct !DILexicalBlock(scope: !5550, file: !3, line: 2331, column: 11)
!5556 = !DILocation(line: 2331, column: 24, scope: !5555)
!5557 = !DILocation(line: 2332, column: 4, scope: !5555)
!5558 = !DILocation(line: 2332, column: 9, scope: !5555)
!5559 = !DILocation(line: 2333, column: 8, scope: !5555)
!5560 = !DILocation(line: 2333, column: 12, scope: !5555)
!5561 = !DILocation(line: 2331, column: 11, scope: !5550)
!5562 = !DILocation(line: 2334, column: 2, scope: !5555)
!5563 = !DILocation(line: 2336, column: 24, scope: !5550)
!5564 = !DILocation(line: 2336, column: 11, scope: !5550)
!5565 = !DILocation(line: 2336, column: 9, scope: !5550)
!5566 = !DILocation(line: 2338, column: 5, scope: !5550)
!5567 = !DILocation(line: 2341, column: 26, scope: !5568)
!5568 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2341, column: 7)
!5569 = !DILocation(line: 2341, column: 9, scope: !5568)
!5570 = !DILocation(line: 2341, column: 29, scope: !5568)
!5571 = !DILocation(line: 2341, column: 51, scope: !5568)
!5572 = !DILocation(line: 2341, column: 34, scope: !5568)
!5573 = !DILocation(line: 2341, column: 7, scope: !5379)
!5574 = !DILocation(line: 2342, column: 5, scope: !5568)
!5575 = !DILocation(line: 2341, column: 52, scope: !5568)
!5576 = !DILabel(scope: !5379, name: "retry", file: !3, line: 2344)
!5577 = !DILocation(line: 2344, column: 2, scope: !5379)
!5578 = !DILocation(line: 2346, column: 21, scope: !5379)
!5579 = !DILocation(line: 2346, column: 3, scope: !5379)
!5580 = !DILocation(line: 2346, column: 12, scope: !5379)
!5581 = !DILocation(line: 2346, column: 19, scope: !5379)
!5582 = !DILocation(line: 2347, column: 21, scope: !5379)
!5583 = !DILocation(line: 2347, column: 3, scope: !5379)
!5584 = !DILocation(line: 2347, column: 12, scope: !5379)
!5585 = !DILocation(line: 2347, column: 19, scope: !5379)
!5586 = !DILocation(line: 2348, column: 16, scope: !5379)
!5587 = !DILocation(line: 2348, column: 3, scope: !5379)
!5588 = !DILocation(line: 2348, column: 12, scope: !5379)
!5589 = !DILocation(line: 2348, column: 14, scope: !5379)
!5590 = !DILocation(line: 2349, column: 16, scope: !5379)
!5591 = !DILocation(line: 2349, column: 3, scope: !5379)
!5592 = !DILocation(line: 2349, column: 12, scope: !5379)
!5593 = !DILocation(line: 2349, column: 14, scope: !5379)
!5594 = !DILocation(line: 2350, column: 16, scope: !5379)
!5595 = !DILocation(line: 2350, column: 3, scope: !5379)
!5596 = !DILocation(line: 2350, column: 12, scope: !5379)
!5597 = !DILocation(line: 2350, column: 14, scope: !5379)
!5598 = !DILocation(line: 2358, column: 20, scope: !5599)
!5599 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2358, column: 7)
!5600 = !DILocation(line: 2358, column: 23, scope: !5599)
!5601 = !DILocation(line: 2358, column: 7, scope: !5599)
!5602 = !DILocation(line: 2358, column: 7, scope: !5379)
!5603 = !DILocation(line: 2364, column: 11, scope: !5604)
!5604 = distinct !DILexicalBlock(scope: !5605, file: !3, line: 2364, column: 11)
!5605 = distinct !DILexicalBlock(scope: !5599, file: !3, line: 2359, column: 5)
!5606 = !DILocation(line: 2364, column: 18, scope: !5604)
!5607 = !DILocation(line: 2364, column: 21, scope: !5604)
!5608 = !DILocation(line: 2364, column: 11, scope: !5605)
!5609 = !DILocalVariable(name: "note", scope: !5610, file: !3, line: 2366, type: !2577)
!5610 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 2365, column: 2)
!5611 = !DILocation(line: 2366, column: 8, scope: !5610)
!5612 = !DILocation(line: 2368, column: 8, scope: !5613)
!5613 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 2368, column: 8)
!5614 = !DILocation(line: 2368, column: 16, scope: !5613)
!5615 = !DILocation(line: 2368, column: 19, scope: !5613)
!5616 = !DILocation(line: 2368, column: 29, scope: !5613)
!5617 = !DILocation(line: 2368, column: 26, scope: !5613)
!5618 = !DILocation(line: 2368, column: 8, scope: !5610)
!5619 = !DILocation(line: 2369, column: 25, scope: !5613)
!5620 = !DILocation(line: 2369, column: 6, scope: !5613)
!5621 = !DILocation(line: 2369, column: 23, scope: !5613)
!5622 = !DILocation(line: 2370, column: 19, scope: !5610)
!5623 = !DILocation(line: 2370, column: 27, scope: !5610)
!5624 = !DILocation(line: 2370, column: 35, scope: !5610)
!5625 = !DILocation(line: 2370, column: 4, scope: !5610)
!5626 = !DILocation(line: 2374, column: 31, scope: !5627)
!5627 = distinct !DILexicalBlock(scope: !5610, file: !3, line: 2374, column: 8)
!5628 = !DILocation(line: 2374, column: 16, scope: !5627)
!5629 = !DILocation(line: 2374, column: 14, scope: !5627)
!5630 = !DILocation(line: 2374, column: 61, scope: !5627)
!5631 = !DILocation(line: 2374, column: 8, scope: !5610)
!5632 = !DILocation(line: 2375, column: 19, scope: !5627)
!5633 = !DILocation(line: 2375, column: 27, scope: !5627)
!5634 = !DILocation(line: 2375, column: 6, scope: !5627)
!5635 = !DILocation(line: 2377, column: 11, scope: !5610)
!5636 = !DILocation(line: 2378, column: 2, scope: !5610)
!5637 = !DILocation(line: 2381, column: 16, scope: !5638)
!5638 = distinct !DILexicalBlock(scope: !5604, file: !3, line: 2381, column: 16)
!5639 = !DILocation(line: 2381, column: 23, scope: !5638)
!5640 = !DILocation(line: 2381, column: 42, scope: !5638)
!5641 = !DILocation(line: 2381, column: 26, scope: !5638)
!5642 = !DILocation(line: 2381, column: 16, scope: !5604)
!5643 = !DILocation(line: 2382, column: 2, scope: !5638)
!5644 = !DILocation(line: 2384, column: 11, scope: !5605)
!5645 = !DILocation(line: 2384, column: 9, scope: !5605)
!5646 = !DILocation(line: 2385, column: 7, scope: !5605)
!5647 = !DILocation(line: 2388, column: 8, scope: !5648)
!5648 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2388, column: 7)
!5649 = !DILocation(line: 2388, column: 14, scope: !5648)
!5650 = !DILocation(line: 2388, column: 17, scope: !5648)
!5651 = !DILocation(line: 2388, column: 7, scope: !5379)
!5652 = !DILocation(line: 2399, column: 47, scope: !5653)
!5653 = distinct !DILexicalBlock(scope: !5654, file: !3, line: 2399, column: 11)
!5654 = distinct !DILexicalBlock(scope: !5648, file: !3, line: 2389, column: 5)
!5655 = !DILocation(line: 2399, column: 11, scope: !5653)
!5656 = !DILocation(line: 2399, column: 11, scope: !5654)
!5657 = !DILocation(line: 2400, column: 2, scope: !5653)
!5658 = !DILocation(line: 2410, column: 40, scope: !5659)
!5659 = distinct !DILexicalBlock(scope: !5654, file: !3, line: 2410, column: 11)
!5660 = !DILocation(line: 2410, column: 49, scope: !5659)
!5661 = !DILocation(line: 2410, column: 12, scope: !5659)
!5662 = !DILocation(line: 2410, column: 11, scope: !5654)
!5663 = !DILocation(line: 2411, column: 2, scope: !5659)
!5664 = !DILocation(line: 2412, column: 5, scope: !5654)
!5665 = !DILocation(line: 2414, column: 22, scope: !5666)
!5666 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2414, column: 7)
!5667 = !DILocation(line: 2414, column: 7, scope: !5666)
!5668 = !DILocation(line: 2414, column: 7, scope: !5379)
!5669 = !DILocation(line: 2415, column: 5, scope: !5666)
!5670 = !DILocation(line: 2416, column: 28, scope: !5671)
!5671 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2416, column: 7)
!5672 = !DILocation(line: 2416, column: 7, scope: !5671)
!5673 = !DILocation(line: 2416, column: 7, scope: !5379)
!5674 = !DILocation(line: 2417, column: 5, scope: !5671)
!5675 = !DILocation(line: 2418, column: 23, scope: !5676)
!5676 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2418, column: 7)
!5677 = !DILocation(line: 2418, column: 7, scope: !5676)
!5678 = !DILocation(line: 2418, column: 7, scope: !5379)
!5679 = !DILocation(line: 2419, column: 5, scope: !5676)
!5680 = !DILocation(line: 2420, column: 24, scope: !5681)
!5681 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2420, column: 7)
!5682 = !DILocation(line: 2420, column: 7, scope: !5681)
!5683 = !DILocation(line: 2420, column: 7, scope: !5379)
!5684 = !DILocation(line: 2421, column: 5, scope: !5681)
!5685 = !DILocation(line: 2422, column: 21, scope: !5686)
!5686 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2422, column: 7)
!5687 = !DILocation(line: 2422, column: 7, scope: !5686)
!5688 = !DILocation(line: 2422, column: 7, scope: !5379)
!5689 = !DILocation(line: 2423, column: 5, scope: !5686)
!5690 = !DILocation(line: 2425, column: 26, scope: !5691)
!5691 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2424, column: 7)
!5692 = !DILocation(line: 2425, column: 10, scope: !5691)
!5693 = !DILocation(line: 2424, column: 7, scope: !5379)
!5694 = !DILocation(line: 2426, column: 5, scope: !5691)
!5695 = !DILocation(line: 2427, column: 17, scope: !5696)
!5696 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2427, column: 7)
!5697 = !DILocation(line: 2427, column: 9, scope: !5696)
!5698 = !DILocation(line: 2427, column: 7, scope: !5379)
!5699 = !DILocation(line: 2429, column: 42, scope: !5700)
!5700 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2429, column: 11)
!5701 = distinct !DILexicalBlock(scope: !5696, file: !3, line: 2428, column: 5)
!5702 = !DILocation(line: 2429, column: 11, scope: !5700)
!5703 = !DILocation(line: 2429, column: 11, scope: !5701)
!5704 = !DILocation(line: 2430, column: 2, scope: !5700)
!5705 = !DILocation(line: 2431, column: 27, scope: !5706)
!5706 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2431, column: 11)
!5707 = !DILocation(line: 2431, column: 11, scope: !5706)
!5708 = !DILocation(line: 2431, column: 11, scope: !5701)
!5709 = !DILocation(line: 2432, column: 2, scope: !5706)
!5710 = !DILocation(line: 2433, column: 37, scope: !5711)
!5711 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2433, column: 11)
!5712 = !DILocation(line: 2433, column: 11, scope: !5711)
!5713 = !DILocation(line: 2433, column: 11, scope: !5701)
!5714 = !DILocation(line: 2434, column: 2, scope: !5711)
!5715 = !DILocation(line: 2436, column: 29, scope: !5716)
!5716 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2435, column: 11)
!5717 = !DILocation(line: 2436, column: 7, scope: !5716)
!5718 = !DILocation(line: 2435, column: 11, scope: !5701)
!5719 = !DILocation(line: 2437, column: 2, scope: !5716)
!5720 = !DILocation(line: 2438, column: 31, scope: !5721)
!5721 = distinct !DILexicalBlock(scope: !5701, file: !3, line: 2438, column: 11)
!5722 = !DILocation(line: 2438, column: 11, scope: !5721)
!5723 = !DILocation(line: 2438, column: 11, scope: !5701)
!5724 = !DILocation(line: 2439, column: 2, scope: !5721)
!5725 = !DILocation(line: 2440, column: 5, scope: !5701)
!5726 = !DILocation(line: 2442, column: 8, scope: !5727)
!5727 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2442, column: 7)
!5728 = !DILocation(line: 2442, column: 16, scope: !5727)
!5729 = !DILocation(line: 2442, column: 19, scope: !5727)
!5730 = !DILocation(line: 2442, column: 7, scope: !5379)
!5731 = !DILocation(line: 2444, column: 22, scope: !5732)
!5732 = distinct !DILexicalBlock(scope: !5727, file: !3, line: 2443, column: 5)
!5733 = !DILocation(line: 2444, column: 14, scope: !5732)
!5734 = !DILocation(line: 2445, column: 11, scope: !5732)
!5735 = !DILocation(line: 2445, column: 9, scope: !5732)
!5736 = !DILocation(line: 2446, column: 7, scope: !5732)
!5737 = !DILocation(line: 2449, column: 3, scope: !5379)
!5738 = !DILabel(scope: !5379, name: "success", file: !3, line: 2451)
!5739 = !DILocation(line: 2451, column: 2, scope: !5379)
!5740 = !DILocation(line: 2454, column: 7, scope: !5741)
!5741 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2454, column: 7)
!5742 = !DILocation(line: 2454, column: 17, scope: !5741)
!5743 = !DILocation(line: 2454, column: 14, scope: !5741)
!5744 = !DILocation(line: 2454, column: 7, scope: !5379)
!5745 = !DILocalVariable(name: "seq", scope: !5746, file: !3, line: 2456, type: !2577)
!5746 = distinct !DILexicalBlock(scope: !5741, file: !3, line: 2455, column: 5)
!5747 = !DILocation(line: 2456, column: 11, scope: !5746)
!5748 = !DILocation(line: 2458, column: 7, scope: !5746)
!5749 = !DILocation(line: 2459, column: 28, scope: !5746)
!5750 = !DILocation(line: 2459, column: 36, scope: !5746)
!5751 = !DILocation(line: 2459, column: 7, scope: !5746)
!5752 = !DILocation(line: 2460, column: 13, scope: !5746)
!5753 = !DILocation(line: 2460, column: 11, scope: !5746)
!5754 = !DILocation(line: 2461, column: 23, scope: !5746)
!5755 = !DILocation(line: 2461, column: 7, scope: !5746)
!5756 = !DILocation(line: 2462, column: 33, scope: !5746)
!5757 = !DILocation(line: 2462, column: 7, scope: !5746)
!5758 = !DILocation(line: 2463, column: 7, scope: !5746)
!5759 = !DILocation(line: 2465, column: 32, scope: !5746)
!5760 = !DILocation(line: 2465, column: 37, scope: !5746)
!5761 = !DILocation(line: 2465, column: 55, scope: !5746)
!5762 = !DILocation(line: 2465, column: 7, scope: !5746)
!5763 = !DILocation(line: 2466, column: 5, scope: !5746)
!5764 = !DILocation(line: 2471, column: 7, scope: !5765)
!5765 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2471, column: 7)
!5766 = !DILocation(line: 2471, column: 7, scope: !5379)
!5767 = !DILocation(line: 2473, column: 27, scope: !5768)
!5768 = distinct !DILexicalBlock(scope: !5765, file: !3, line: 2472, column: 5)
!5769 = !DILocation(line: 2473, column: 7, scope: !5768)
!5770 = !DILocation(line: 2474, column: 23, scope: !5768)
!5771 = !DILocation(line: 2475, column: 5, scope: !5768)
!5772 = !DILocation(line: 2477, column: 29, scope: !5765)
!5773 = !DILocation(line: 2477, column: 38, scope: !5765)
!5774 = !DILocation(line: 2477, column: 18, scope: !5765)
!5775 = !DILocation(line: 2477, column: 5, scope: !5765)
!5776 = !DILocation(line: 2479, column: 27, scope: !5379)
!5777 = !DILocation(line: 2479, column: 36, scope: !5379)
!5778 = !DILocation(line: 2479, column: 16, scope: !5379)
!5779 = !DILocation(line: 2479, column: 3, scope: !5379)
!5780 = !DILocation(line: 2480, column: 53, scope: !5379)
!5781 = !DILocation(line: 2480, column: 35, scope: !5379)
!5782 = !DILocation(line: 2480, column: 63, scope: !5379)
!5783 = !DILocation(line: 2480, column: 3, scope: !5379)
!5784 = !DILocation(line: 2481, column: 23, scope: !5379)
!5785 = !DILocation(line: 2481, column: 3, scope: !5379)
!5786 = !DILocation(line: 2482, column: 19, scope: !5379)
!5787 = !DILocation(line: 2484, column: 27, scope: !5788)
!5788 = distinct !DILexicalBlock(scope: !5379, file: !3, line: 2484, column: 7)
!5789 = !DILocation(line: 2484, column: 36, scope: !5788)
!5790 = !DILocation(line: 2484, column: 7, scope: !5788)
!5791 = !DILocation(line: 2484, column: 7, scope: !5379)
!5792 = !DILocation(line: 2486, column: 21, scope: !5793)
!5793 = distinct !DILexicalBlock(scope: !5788, file: !3, line: 2485, column: 5)
!5794 = !DILocation(line: 2486, column: 30, scope: !5793)
!5795 = !DILocation(line: 2486, column: 7, scope: !5793)
!5796 = !DILocation(line: 2487, column: 23, scope: !5793)
!5797 = !DILocation(line: 2488, column: 5, scope: !5793)
!5798 = !DILocation(line: 2490, column: 24, scope: !5379)
!5799 = !DILocation(line: 2491, column: 3, scope: !5379)
!5800 = !DILocation(line: 2492, column: 1, scope: !5379)
!5801 = distinct !DISubprogram(name: "cond_move_process_if_block", scope: !3, file: !3, line: 2638, type: !5380, scopeLine: 2639, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!5802 = !DILocalVariable(name: "if_info", arg: 1, scope: !5801, file: !3, line: 2638, type: !5382)
!5803 = !DILocation(line: 2638, column: 50, scope: !5801)
!5804 = !DILocalVariable(name: "test_bb", scope: !5801, file: !3, line: 2640, type: !2546)
!5805 = !DILocation(line: 2640, column: 15, scope: !5801)
!5806 = !DILocation(line: 2640, column: 25, scope: !5801)
!5807 = !DILocation(line: 2640, column: 34, scope: !5801)
!5808 = !DILocalVariable(name: "then_bb", scope: !5801, file: !3, line: 2641, type: !2546)
!5809 = !DILocation(line: 2641, column: 15, scope: !5801)
!5810 = !DILocation(line: 2641, column: 25, scope: !5801)
!5811 = !DILocation(line: 2641, column: 34, scope: !5801)
!5812 = !DILocalVariable(name: "else_bb", scope: !5801, file: !3, line: 2642, type: !2546)
!5813 = !DILocation(line: 2642, column: 15, scope: !5801)
!5814 = !DILocation(line: 2642, column: 25, scope: !5801)
!5815 = !DILocation(line: 2642, column: 34, scope: !5801)
!5816 = !DILocalVariable(name: "join_bb", scope: !5801, file: !3, line: 2643, type: !2546)
!5817 = !DILocation(line: 2643, column: 15, scope: !5801)
!5818 = !DILocation(line: 2643, column: 25, scope: !5801)
!5819 = !DILocation(line: 2643, column: 34, scope: !5801)
!5820 = !DILocalVariable(name: "jump", scope: !5801, file: !3, line: 2644, type: !2577)
!5821 = !DILocation(line: 2644, column: 7, scope: !5801)
!5822 = !DILocation(line: 2644, column: 14, scope: !5801)
!5823 = !DILocation(line: 2644, column: 23, scope: !5801)
!5824 = !DILocalVariable(name: "cond", scope: !5801, file: !3, line: 2645, type: !2577)
!5825 = !DILocation(line: 2645, column: 7, scope: !5801)
!5826 = !DILocation(line: 2645, column: 14, scope: !5801)
!5827 = !DILocation(line: 2645, column: 23, scope: !5801)
!5828 = !DILocalVariable(name: "seq", scope: !5801, file: !3, line: 2646, type: !2577)
!5829 = !DILocation(line: 2646, column: 7, scope: !5801)
!5830 = !DILocalVariable(name: "loc_insn", scope: !5801, file: !3, line: 2646, type: !2577)
!5831 = !DILocation(line: 2646, column: 12, scope: !5801)
!5832 = !DILocalVariable(name: "max_reg", scope: !5801, file: !3, line: 2647, type: !2545)
!5833 = !DILocation(line: 2647, column: 7, scope: !5801)
!5834 = !DILocalVariable(name: "size", scope: !5801, file: !3, line: 2647, type: !2545)
!5835 = !DILocation(line: 2647, column: 16, scope: !5801)
!5836 = !DILocalVariable(name: "c", scope: !5801, file: !3, line: 2647, type: !2545)
!5837 = !DILocation(line: 2647, column: 22, scope: !5801)
!5838 = !DILocalVariable(name: "reg", scope: !5801, file: !3, line: 2647, type: !2545)
!5839 = !DILocation(line: 2647, column: 25, scope: !5801)
!5840 = !DILocalVariable(name: "then_vals", scope: !5801, file: !3, line: 2648, type: !3777)
!5841 = !DILocation(line: 2648, column: 8, scope: !5801)
!5842 = !DILocalVariable(name: "else_vals", scope: !5801, file: !3, line: 2649, type: !3777)
!5843 = !DILocation(line: 2649, column: 8, scope: !5801)
!5844 = !DILocalVariable(name: "then_regs", scope: !5801, file: !3, line: 2650, type: !3778)
!5845 = !DILocation(line: 2650, column: 20, scope: !5801)
!5846 = !DILocalVariable(name: "else_regs", scope: !5801, file: !3, line: 2651, type: !3778)
!5847 = !DILocation(line: 2651, column: 20, scope: !5801)
!5848 = !DILocalVariable(name: "i", scope: !5801, file: !3, line: 2652, type: !7)
!5849 = !DILocation(line: 2652, column: 16, scope: !5801)
!5850 = !DILocation(line: 2656, column: 13, scope: !5801)
!5851 = !DILocation(line: 2656, column: 11, scope: !5801)
!5852 = !DILocation(line: 2657, column: 11, scope: !5801)
!5853 = !DILocation(line: 2657, column: 19, scope: !5801)
!5854 = !DILocation(line: 2657, column: 10, scope: !5801)
!5855 = !DILocation(line: 2657, column: 24, scope: !5801)
!5856 = !DILocation(line: 2657, column: 8, scope: !5801)
!5857 = !DILocation(line: 2658, column: 23, scope: !5801)
!5858 = !DILocation(line: 2658, column: 15, scope: !5801)
!5859 = !DILocation(line: 2658, column: 13, scope: !5801)
!5860 = !DILocation(line: 2659, column: 23, scope: !5801)
!5861 = !DILocation(line: 2659, column: 15, scope: !5801)
!5862 = !DILocation(line: 2659, column: 13, scope: !5801)
!5863 = !DILocation(line: 2660, column: 11, scope: !5801)
!5864 = !DILocation(line: 2660, column: 3, scope: !5801)
!5865 = !DILocation(line: 2660, column: 25, scope: !5801)
!5866 = !DILocation(line: 2661, column: 11, scope: !5801)
!5867 = !DILocation(line: 2661, column: 3, scope: !5801)
!5868 = !DILocation(line: 2661, column: 25, scope: !5801)
!5869 = !DILocation(line: 2664, column: 31, scope: !5870)
!5870 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2664, column: 7)
!5871 = !DILocation(line: 2664, column: 40, scope: !5870)
!5872 = !DILocation(line: 2664, column: 63, scope: !5870)
!5873 = !DILocation(line: 2664, column: 8, scope: !5870)
!5874 = !DILocation(line: 2665, column: 7, scope: !5870)
!5875 = !DILocation(line: 2665, column: 11, scope: !5870)
!5876 = !DILocation(line: 2665, column: 19, scope: !5870)
!5877 = !DILocation(line: 2665, column: 46, scope: !5870)
!5878 = !DILocation(line: 2665, column: 55, scope: !5870)
!5879 = !DILocation(line: 2665, column: 78, scope: !5870)
!5880 = !DILocation(line: 2665, column: 23, scope: !5870)
!5881 = !DILocation(line: 2664, column: 7, scope: !5801)
!5882 = !DILocation(line: 2667, column: 7, scope: !5883)
!5883 = distinct !DILexicalBlock(scope: !5870, file: !3, line: 2666, column: 5)
!5884 = !DILocation(line: 2668, column: 7, scope: !5883)
!5885 = !DILocation(line: 2669, column: 7, scope: !5883)
!5886 = !DILocation(line: 2678, column: 5, scope: !5801)
!5887 = !DILocation(line: 2679, column: 10, scope: !5888)
!5888 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2679, column: 3)
!5889 = !DILocation(line: 2679, column: 8, scope: !5888)
!5890 = !DILocation(line: 2679, column: 15, scope: !5891)
!5891 = distinct !DILexicalBlock(scope: !5888, file: !3, line: 2679, column: 3)
!5892 = !DILocation(line: 2679, column: 3, scope: !5888)
!5893 = !DILocation(line: 2681, column: 12, scope: !5894)
!5894 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2681, column: 11)
!5895 = distinct !DILexicalBlock(scope: !5891, file: !3, line: 2680, column: 5)
!5896 = !DILocation(line: 2681, column: 22, scope: !5894)
!5897 = !DILocation(line: 2681, column: 27, scope: !5894)
!5898 = !DILocation(line: 2681, column: 31, scope: !5894)
!5899 = !DILocation(line: 2681, column: 41, scope: !5894)
!5900 = !DILocation(line: 2681, column: 11, scope: !5895)
!5901 = !DILocation(line: 2682, column: 2, scope: !5894)
!5902 = !DILocation(line: 2684, column: 12, scope: !5903)
!5903 = distinct !DILexicalBlock(scope: !5895, file: !3, line: 2684, column: 11)
!5904 = !DILocation(line: 2684, column: 22, scope: !5903)
!5905 = !DILocation(line: 2684, column: 11, scope: !5895)
!5906 = !DILocation(line: 2685, column: 2, scope: !5903)
!5907 = !DILocation(line: 2688, column: 9, scope: !5908)
!5908 = distinct !DILexicalBlock(scope: !5909, file: !3, line: 2688, column: 8)
!5909 = distinct !DILexicalBlock(scope: !5903, file: !3, line: 2687, column: 2)
!5910 = !DILocation(line: 2689, column: 8, scope: !5908)
!5911 = !DILocation(line: 2689, column: 12, scope: !5908)
!5912 = !DILocation(line: 2690, column: 8, scope: !5908)
!5913 = !DILocation(line: 2690, column: 25, scope: !5908)
!5914 = !DILocation(line: 2690, column: 35, scope: !5908)
!5915 = !DILocation(line: 2690, column: 41, scope: !5908)
!5916 = !DILocation(line: 2690, column: 51, scope: !5908)
!5917 = !DILocation(line: 2690, column: 12, scope: !5908)
!5918 = !DILocation(line: 2688, column: 8, scope: !5909)
!5919 = !DILocation(line: 2692, column: 8, scope: !5920)
!5920 = distinct !DILexicalBlock(scope: !5908, file: !3, line: 2691, column: 6)
!5921 = !DILocation(line: 2693, column: 8, scope: !5920)
!5922 = !DILocation(line: 2694, column: 8, scope: !5920)
!5923 = !DILocation(line: 2697, column: 5, scope: !5895)
!5924 = !DILocation(line: 2679, column: 54, scope: !5891)
!5925 = !DILocation(line: 2679, column: 3, scope: !5891)
!5926 = distinct !{!5926, !5892, !5927}
!5927 = !DILocation(line: 2697, column: 5, scope: !5888)
!5928 = !DILocation(line: 2700, column: 10, scope: !5929)
!5929 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2700, column: 3)
!5930 = !DILocation(line: 2700, column: 8, scope: !5929)
!5931 = !DILocation(line: 2700, column: 15, scope: !5932)
!5932 = distinct !DILexicalBlock(scope: !5929, file: !3, line: 2700, column: 3)
!5933 = !DILocation(line: 2700, column: 3, scope: !5929)
!5934 = !DILocation(line: 2701, column: 10, scope: !5935)
!5935 = distinct !DILexicalBlock(scope: !5932, file: !3, line: 2701, column: 9)
!5936 = !DILocation(line: 2701, column: 20, scope: !5935)
!5937 = !DILocation(line: 2701, column: 9, scope: !5932)
!5938 = !DILocation(line: 2702, column: 7, scope: !5935)
!5939 = !DILocation(line: 2701, column: 23, scope: !5935)
!5940 = !DILocation(line: 2700, column: 53, scope: !5932)
!5941 = !DILocation(line: 2700, column: 3, scope: !5932)
!5942 = distinct !{!5942, !5933, !5943}
!5943 = !DILocation(line: 2702, column: 9, scope: !5929)
!5944 = !DILocation(line: 2708, column: 7, scope: !5945)
!5945 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2708, column: 7)
!5946 = !DILocation(line: 2708, column: 11, scope: !5945)
!5947 = !DILocation(line: 2708, column: 9, scope: !5945)
!5948 = !DILocation(line: 2708, column: 7, scope: !5801)
!5949 = !DILocation(line: 2710, column: 7, scope: !5950)
!5950 = distinct !DILexicalBlock(scope: !5945, file: !3, line: 2709, column: 5)
!5951 = !DILocation(line: 2711, column: 7, scope: !5950)
!5952 = !DILocation(line: 2712, column: 7, scope: !5950)
!5953 = !DILocation(line: 2717, column: 3, scope: !5801)
!5954 = !DILocation(line: 2718, column: 36, scope: !5955)
!5955 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2718, column: 7)
!5956 = !DILocation(line: 2718, column: 45, scope: !5955)
!5957 = !DILocation(line: 2718, column: 54, scope: !5955)
!5958 = !DILocation(line: 2719, column: 8, scope: !5955)
!5959 = !DILocation(line: 2719, column: 19, scope: !5955)
!5960 = !DILocation(line: 2718, column: 8, scope: !5955)
!5961 = !DILocation(line: 2720, column: 7, scope: !5955)
!5962 = !DILocation(line: 2720, column: 11, scope: !5955)
!5963 = !DILocation(line: 2721, column: 4, scope: !5955)
!5964 = !DILocation(line: 2721, column: 36, scope: !5955)
!5965 = !DILocation(line: 2721, column: 45, scope: !5955)
!5966 = !DILocation(line: 2721, column: 54, scope: !5955)
!5967 = !DILocation(line: 2722, column: 8, scope: !5955)
!5968 = !DILocation(line: 2722, column: 19, scope: !5955)
!5969 = !DILocation(line: 2721, column: 8, scope: !5955)
!5970 = !DILocation(line: 2718, column: 7, scope: !5801)
!5971 = !DILocation(line: 2724, column: 7, scope: !5972)
!5972 = distinct !DILexicalBlock(scope: !5955, file: !3, line: 2723, column: 5)
!5973 = !DILocation(line: 2725, column: 7, scope: !5972)
!5974 = !DILocation(line: 2726, column: 7, scope: !5972)
!5975 = !DILocation(line: 2727, column: 7, scope: !5972)
!5976 = !DILocation(line: 2729, column: 29, scope: !5801)
!5977 = !DILocation(line: 2729, column: 9, scope: !5801)
!5978 = !DILocation(line: 2729, column: 7, scope: !5801)
!5979 = !DILocation(line: 2730, column: 8, scope: !5980)
!5980 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2730, column: 7)
!5981 = !DILocation(line: 2730, column: 7, scope: !5801)
!5982 = !DILocation(line: 2732, column: 7, scope: !5983)
!5983 = distinct !DILexicalBlock(scope: !5980, file: !3, line: 2731, column: 5)
!5984 = !DILocation(line: 2733, column: 7, scope: !5983)
!5985 = !DILocation(line: 2734, column: 7, scope: !5983)
!5986 = !DILocation(line: 2737, column: 33, scope: !5801)
!5987 = !DILocation(line: 2737, column: 14, scope: !5801)
!5988 = !DILocation(line: 2737, column: 12, scope: !5801)
!5989 = !DILocation(line: 2738, column: 8, scope: !5990)
!5990 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2738, column: 7)
!5991 = !DILocation(line: 2738, column: 7, scope: !5801)
!5992 = !DILocation(line: 2740, column: 37, scope: !5993)
!5993 = distinct !DILexicalBlock(scope: !5990, file: !3, line: 2739, column: 5)
!5994 = !DILocation(line: 2740, column: 18, scope: !5993)
!5995 = !DILocation(line: 2740, column: 16, scope: !5993)
!5996 = !DILocation(line: 2741, column: 7, scope: !5993)
!5997 = !DILocation(line: 2742, column: 5, scope: !5993)
!5998 = !DILocation(line: 2743, column: 28, scope: !5801)
!5999 = !DILocation(line: 2743, column: 33, scope: !5801)
!6000 = !DILocation(line: 2743, column: 39, scope: !5801)
!6001 = !DILocation(line: 2743, column: 3, scope: !5801)
!6002 = !DILocation(line: 2745, column: 7, scope: !6003)
!6003 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2745, column: 7)
!6004 = !DILocation(line: 2745, column: 7, scope: !5801)
!6005 = !DILocation(line: 2747, column: 27, scope: !6006)
!6006 = distinct !DILexicalBlock(scope: !6003, file: !3, line: 2746, column: 5)
!6007 = !DILocation(line: 2747, column: 7, scope: !6006)
!6008 = !DILocation(line: 2748, column: 23, scope: !6006)
!6009 = !DILocation(line: 2749, column: 5, scope: !6006)
!6010 = !DILocation(line: 2751, column: 29, scope: !6003)
!6011 = !DILocation(line: 2751, column: 38, scope: !6003)
!6012 = !DILocation(line: 2751, column: 18, scope: !6003)
!6013 = !DILocation(line: 2751, column: 5, scope: !6003)
!6014 = !DILocation(line: 2753, column: 27, scope: !5801)
!6015 = !DILocation(line: 2753, column: 36, scope: !5801)
!6016 = !DILocation(line: 2753, column: 16, scope: !5801)
!6017 = !DILocation(line: 2753, column: 3, scope: !5801)
!6018 = !DILocation(line: 2754, column: 53, scope: !5801)
!6019 = !DILocation(line: 2754, column: 35, scope: !5801)
!6020 = !DILocation(line: 2754, column: 63, scope: !5801)
!6021 = !DILocation(line: 2754, column: 3, scope: !5801)
!6022 = !DILocation(line: 2755, column: 23, scope: !5801)
!6023 = !DILocation(line: 2755, column: 3, scope: !5801)
!6024 = !DILocation(line: 2756, column: 19, scope: !5801)
!6025 = !DILocation(line: 2758, column: 27, scope: !6026)
!6026 = distinct !DILexicalBlock(scope: !5801, file: !3, line: 2758, column: 7)
!6027 = !DILocation(line: 2758, column: 36, scope: !6026)
!6028 = !DILocation(line: 2758, column: 7, scope: !6026)
!6029 = !DILocation(line: 2758, column: 7, scope: !5801)
!6030 = !DILocation(line: 2760, column: 21, scope: !6031)
!6031 = distinct !DILexicalBlock(scope: !6026, file: !3, line: 2759, column: 5)
!6032 = !DILocation(line: 2760, column: 30, scope: !6031)
!6033 = !DILocation(line: 2760, column: 7, scope: !6031)
!6034 = !DILocation(line: 2761, column: 23, scope: !6031)
!6035 = !DILocation(line: 2762, column: 5, scope: !6031)
!6036 = !DILocation(line: 2764, column: 24, scope: !5801)
!6037 = !DILocation(line: 2766, column: 3, scope: !5801)
!6038 = !DILocation(line: 2767, column: 3, scope: !5801)
!6039 = !DILocation(line: 2768, column: 3, scope: !5801)
!6040 = !DILocation(line: 2769, column: 1, scope: !5801)
!6041 = distinct !DISubprogram(name: "first_active_insn", scope: !3, file: !3, line: 183, type: !6042, scopeLine: 184, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6042 = !DISubroutineType(types: !6043)
!6043 = !{!2577, !2546}
!6044 = !DILocalVariable(name: "bb", arg: 1, scope: !6041, file: !3, line: 183, type: !2546)
!6045 = !DILocation(line: 183, column: 32, scope: !6041)
!6046 = !DILocalVariable(name: "insn", scope: !6041, file: !3, line: 185, type: !2577)
!6047 = !DILocation(line: 185, column: 7, scope: !6041)
!6048 = !DILocation(line: 185, column: 14, scope: !6041)
!6049 = !DILocation(line: 187, column: 7, scope: !6050)
!6050 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 187, column: 7)
!6051 = !DILocation(line: 187, column: 7, scope: !6041)
!6052 = !DILocation(line: 189, column: 11, scope: !6053)
!6053 = distinct !DILexicalBlock(scope: !6054, file: !3, line: 189, column: 11)
!6054 = distinct !DILexicalBlock(scope: !6050, file: !3, line: 188, column: 5)
!6055 = !DILocation(line: 189, column: 19, scope: !6053)
!6056 = !DILocation(line: 189, column: 16, scope: !6053)
!6057 = !DILocation(line: 189, column: 11, scope: !6054)
!6058 = !DILocation(line: 190, column: 2, scope: !6053)
!6059 = !DILocation(line: 191, column: 14, scope: !6054)
!6060 = !DILocation(line: 191, column: 12, scope: !6054)
!6061 = !DILocation(line: 192, column: 5, scope: !6054)
!6062 = !DILocation(line: 194, column: 3, scope: !6041)
!6063 = !DILocation(line: 194, column: 10, scope: !6041)
!6064 = !DILocation(line: 194, column: 24, scope: !6041)
!6065 = !DILocation(line: 194, column: 27, scope: !6041)
!6066 = !DILocation(line: 196, column: 11, scope: !6067)
!6067 = distinct !DILexicalBlock(scope: !6068, file: !3, line: 196, column: 11)
!6068 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 195, column: 5)
!6069 = !DILocation(line: 196, column: 19, scope: !6067)
!6070 = !DILocation(line: 196, column: 16, scope: !6067)
!6071 = !DILocation(line: 196, column: 11, scope: !6068)
!6072 = !DILocation(line: 197, column: 2, scope: !6067)
!6073 = !DILocation(line: 198, column: 14, scope: !6068)
!6074 = !DILocation(line: 198, column: 12, scope: !6068)
!6075 = distinct !{!6075, !6062, !6076}
!6076 = !DILocation(line: 199, column: 5, scope: !6041)
!6077 = !DILocation(line: 201, column: 7, scope: !6078)
!6078 = distinct !DILexicalBlock(scope: !6041, file: !3, line: 201, column: 7)
!6079 = !DILocation(line: 201, column: 7, scope: !6041)
!6080 = !DILocation(line: 202, column: 5, scope: !6078)
!6081 = !DILocation(line: 204, column: 10, scope: !6041)
!6082 = !DILocation(line: 204, column: 3, scope: !6041)
!6083 = !DILocation(line: 205, column: 1, scope: !6041)
!6084 = distinct !DISubprogram(name: "last_active_insn", scope: !3, file: !3, line: 210, type: !6085, scopeLine: 211, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6085 = !DISubroutineType(types: !6086)
!6086 = !{!2577, !2546, !2545}
!6087 = !DILocalVariable(name: "bb", arg: 1, scope: !6084, file: !3, line: 210, type: !2546)
!6088 = !DILocation(line: 210, column: 31, scope: !6084)
!6089 = !DILocalVariable(name: "skip_use_p", arg: 2, scope: !6084, file: !3, line: 210, type: !2545)
!6090 = !DILocation(line: 210, column: 39, scope: !6084)
!6091 = !DILocalVariable(name: "insn", scope: !6084, file: !3, line: 212, type: !2577)
!6092 = !DILocation(line: 212, column: 7, scope: !6084)
!6093 = !DILocation(line: 212, column: 14, scope: !6084)
!6094 = !DILocalVariable(name: "head", scope: !6084, file: !3, line: 213, type: !2577)
!6095 = !DILocation(line: 213, column: 7, scope: !6084)
!6096 = !DILocation(line: 213, column: 14, scope: !6084)
!6097 = !DILocation(line: 215, column: 3, scope: !6084)
!6098 = !DILocation(line: 215, column: 10, scope: !6084)
!6099 = !DILocation(line: 216, column: 3, scope: !6084)
!6100 = !DILocation(line: 216, column: 6, scope: !6084)
!6101 = !DILocation(line: 217, column: 3, scope: !6084)
!6102 = !DILocation(line: 217, column: 6, scope: !6084)
!6103 = !DILocation(line: 218, column: 3, scope: !6084)
!6104 = !DILocation(line: 218, column: 7, scope: !6084)
!6105 = !DILocation(line: 219, column: 7, scope: !6084)
!6106 = !DILocation(line: 219, column: 10, scope: !6084)
!6107 = !DILocation(line: 220, column: 7, scope: !6084)
!6108 = !DILocation(line: 220, column: 10, scope: !6084)
!6109 = !DILocation(line: 220, column: 36, scope: !6084)
!6110 = !DILocation(line: 0, scope: !6084)
!6111 = !DILocation(line: 222, column: 11, scope: !6112)
!6112 = distinct !DILexicalBlock(scope: !6113, file: !3, line: 222, column: 11)
!6113 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 221, column: 5)
!6114 = !DILocation(line: 222, column: 19, scope: !6112)
!6115 = !DILocation(line: 222, column: 16, scope: !6112)
!6116 = !DILocation(line: 222, column: 11, scope: !6113)
!6117 = !DILocation(line: 223, column: 2, scope: !6112)
!6118 = !DILocation(line: 224, column: 14, scope: !6113)
!6119 = !DILocation(line: 224, column: 12, scope: !6113)
!6120 = distinct !{!6120, !6097, !6121}
!6121 = !DILocation(line: 225, column: 5, scope: !6084)
!6122 = !DILocation(line: 227, column: 7, scope: !6123)
!6123 = distinct !DILexicalBlock(scope: !6084, file: !3, line: 227, column: 7)
!6124 = !DILocation(line: 227, column: 7, scope: !6084)
!6125 = !DILocation(line: 228, column: 5, scope: !6123)
!6126 = !DILocation(line: 230, column: 10, scope: !6084)
!6127 = !DILocation(line: 230, column: 3, scope: !6084)
!6128 = !DILocation(line: 231, column: 1, scope: !6084)
!6129 = distinct !DISubprogram(name: "noce_operand_ok", scope: !3, file: !3, line: 2128, type: !6130, scopeLine: 2129, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6130 = !DISubroutineType(types: !6131)
!6131 = !{!2545, !6132}
!6132 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_rtx", file: !2524, line: 51, baseType: !6133)
!6133 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !6134, size: 64)
!6134 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2579)
!6135 = !DILocalVariable(name: "op", arg: 1, scope: !6129, file: !3, line: 2128, type: !6132)
!6136 = !DILocation(line: 2128, column: 28, scope: !6129)
!6137 = !DILocation(line: 2132, column: 7, scope: !6138)
!6138 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 2132, column: 7)
!6139 = !DILocation(line: 2132, column: 7, scope: !6129)
!6140 = !DILocation(line: 2133, column: 30, scope: !6138)
!6141 = !DILocation(line: 2133, column: 14, scope: !6138)
!6142 = !DILocation(line: 2133, column: 12, scope: !6138)
!6143 = !DILocation(line: 2133, column: 5, scope: !6138)
!6144 = !DILocation(line: 2135, column: 23, scope: !6145)
!6145 = distinct !DILexicalBlock(scope: !6129, file: !3, line: 2135, column: 7)
!6146 = !DILocation(line: 2135, column: 7, scope: !6145)
!6147 = !DILocation(line: 2135, column: 7, scope: !6129)
!6148 = !DILocation(line: 2136, column: 5, scope: !6145)
!6149 = !DILocation(line: 2138, column: 24, scope: !6129)
!6150 = !DILocation(line: 2138, column: 12, scope: !6129)
!6151 = !DILocation(line: 2138, column: 10, scope: !6129)
!6152 = !DILocation(line: 2138, column: 3, scope: !6129)
!6153 = !DILocation(line: 2139, column: 1, scope: !6129)
!6154 = distinct !DISubprogram(name: "rhs_regno", scope: !2302, file: !2302, line: 1051, type: !6155, scopeLine: 1052, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6155 = !DISubroutineType(types: !6156)
!6156 = !{!7, !6132}
!6157 = !DILocalVariable(name: "x", arg: 1, scope: !6154, file: !2302, line: 1051, type: !6132)
!6158 = !DILocation(line: 1051, column: 22, scope: !6154)
!6159 = !DILocation(line: 1053, column: 10, scope: !6154)
!6160 = !DILocation(line: 1053, column: 3, scope: !6154)
!6161 = distinct !DISubprogram(name: "noce_mem_write_may_trap_or_fault_p", scope: !3, file: !3, line: 2144, type: !6162, scopeLine: 2145, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6162 = !DISubroutineType(types: !6163)
!6163 = !{!2809, !6132}
!6164 = !DILocalVariable(name: "mem", arg: 1, scope: !6161, file: !3, line: 2144, type: !6132)
!6165 = !DILocation(line: 2144, column: 47, scope: !6161)
!6166 = !DILocalVariable(name: "addr", scope: !6161, file: !3, line: 2146, type: !2577)
!6167 = !DILocation(line: 2146, column: 7, scope: !6161)
!6168 = !DILocation(line: 2148, column: 7, scope: !6169)
!6169 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 2148, column: 7)
!6170 = !DILocation(line: 2148, column: 7, scope: !6161)
!6171 = !DILocation(line: 2149, column: 5, scope: !6169)
!6172 = !DILocation(line: 2151, column: 28, scope: !6173)
!6173 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 2151, column: 7)
!6174 = !DILocation(line: 2151, column: 7, scope: !6173)
!6175 = !DILocation(line: 2151, column: 7, scope: !6161)
!6176 = !DILocation(line: 2152, column: 5, scope: !6173)
!6177 = !DILocation(line: 2154, column: 10, scope: !6161)
!6178 = !DILocation(line: 2154, column: 8, scope: !6161)
!6179 = !DILocation(line: 2157, column: 18, scope: !6161)
!6180 = !DILocation(line: 2157, column: 40, scope: !6161)
!6181 = !DILocation(line: 2157, column: 10, scope: !6161)
!6182 = !DILocation(line: 2157, column: 8, scope: !6161)
!6183 = !DILocation(line: 2159, column: 3, scope: !6161)
!6184 = !DILocation(line: 2159, column: 10, scope: !6161)
!6185 = !DILocation(line: 2160, column: 13, scope: !6161)
!6186 = !DILocation(line: 2160, column: 5, scope: !6161)
!6187 = !DILocation(line: 2168, column: 9, scope: !6188)
!6188 = distinct !DILexicalBlock(scope: !6161, file: !3, line: 2161, column: 7)
!6189 = !DILocation(line: 2168, column: 7, scope: !6188)
!6190 = !DILocation(line: 2169, column: 2, scope: !6188)
!6191 = !DILocation(line: 2172, column: 9, scope: !6188)
!6192 = !DILocation(line: 2172, column: 7, scope: !6188)
!6193 = !DILocation(line: 2173, column: 2, scope: !6188)
!6194 = !DILocation(line: 2175, column: 6, scope: !6195)
!6195 = distinct !DILexicalBlock(scope: !6188, file: !3, line: 2175, column: 6)
!6196 = !DILocation(line: 2175, column: 6, scope: !6188)
!6197 = !DILocation(line: 2176, column: 11, scope: !6195)
!6198 = !DILocation(line: 2176, column: 9, scope: !6195)
!6199 = !DILocation(line: 2176, column: 4, scope: !6195)
!6200 = !DILocation(line: 2178, column: 4, scope: !6195)
!6201 = !DILocation(line: 2179, column: 2, scope: !6188)
!6202 = !DILocation(line: 2181, column: 2, scope: !6188)
!6203 = !DILocation(line: 2183, column: 6, scope: !6204)
!6204 = distinct !DILexicalBlock(scope: !6188, file: !3, line: 2183, column: 6)
!6205 = !DILocation(line: 2184, column: 6, scope: !6204)
!6206 = !DILocation(line: 2184, column: 32, scope: !6204)
!6207 = !DILocation(line: 2184, column: 9, scope: !6204)
!6208 = !DILocation(line: 2183, column: 6, scope: !6188)
!6209 = !DILocation(line: 2185, column: 4, scope: !6204)
!6210 = !DILocation(line: 2186, column: 2, scope: !6188)
!6211 = !DILocation(line: 2188, column: 2, scope: !6188)
!6212 = distinct !{!6212, !6183, !6213}
!6213 = !DILocation(line: 2189, column: 7, scope: !6161)
!6214 = !DILocation(line: 2191, column: 3, scope: !6161)
!6215 = !DILocation(line: 2192, column: 1, scope: !6161)
!6216 = distinct !DISubprogram(name: "noce_can_store_speculate_p", scope: !3, file: !3, line: 2200, type: !6217, scopeLine: 2201, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6217 = !DISubroutineType(types: !6218)
!6218 = !{!2809, !2546, !6132}
!6219 = !DILocalVariable(name: "top_bb", arg: 1, scope: !6216, file: !3, line: 2200, type: !2546)
!6220 = !DILocation(line: 2200, column: 41, scope: !6216)
!6221 = !DILocalVariable(name: "mem", arg: 2, scope: !6216, file: !3, line: 2200, type: !6132)
!6222 = !DILocation(line: 2200, column: 59, scope: !6216)
!6223 = !DILocalVariable(name: "dominator", scope: !6216, file: !3, line: 2202, type: !2546)
!6224 = !DILocation(line: 2202, column: 15, scope: !6216)
!6225 = !DILocation(line: 2204, column: 66, scope: !6226)
!6226 = distinct !DILexicalBlock(scope: !6216, file: !3, line: 2204, column: 3)
!6227 = !DILocation(line: 2204, column: 20, scope: !6226)
!6228 = !DILocation(line: 2204, column: 18, scope: !6226)
!6229 = !DILocation(line: 2204, column: 8, scope: !6226)
!6230 = !DILocation(line: 2205, column: 8, scope: !6231)
!6231 = distinct !DILexicalBlock(scope: !6226, file: !3, line: 2204, column: 3)
!6232 = !DILocation(line: 2205, column: 18, scope: !6231)
!6233 = !DILocation(line: 2204, column: 3, scope: !6226)
!6234 = !DILocalVariable(name: "insn", scope: !6235, file: !3, line: 2208, type: !2577)
!6235 = distinct !DILexicalBlock(scope: !6231, file: !3, line: 2207, column: 5)
!6236 = !DILocation(line: 2208, column: 11, scope: !6235)
!6237 = !DILocation(line: 2210, column: 7, scope: !6238)
!6238 = distinct !DILexicalBlock(scope: !6235, file: !3, line: 2210, column: 7)
!6239 = !DILocation(line: 2210, column: 7, scope: !6240)
!6240 = distinct !DILexicalBlock(scope: !6238, file: !3, line: 2210, column: 7)
!6241 = !DILocation(line: 0, scope: !6240)
!6242 = !DILocation(line: 2216, column: 8, scope: !6243)
!6243 = distinct !DILexicalBlock(scope: !6244, file: !3, line: 2216, column: 8)
!6244 = distinct !DILexicalBlock(scope: !6240, file: !3, line: 2211, column: 2)
!6245 = !DILocation(line: 2217, column: 8, scope: !6243)
!6246 = !DILocation(line: 2217, column: 29, scope: !6243)
!6247 = !DILocation(line: 2217, column: 12, scope: !6243)
!6248 = !DILocation(line: 2218, column: 5, scope: !6243)
!6249 = !DILocation(line: 2218, column: 9, scope: !6243)
!6250 = !DILocation(line: 2218, column: 23, scope: !6243)
!6251 = !DILocation(line: 2218, column: 28, scope: !6243)
!6252 = !DILocation(line: 2216, column: 8, scope: !6244)
!6253 = !DILocation(line: 2219, column: 6, scope: !6243)
!6254 = !DILocation(line: 2221, column: 35, scope: !6255)
!6255 = distinct !DILexicalBlock(scope: !6244, file: !3, line: 2221, column: 8)
!6256 = !DILocation(line: 2221, column: 40, scope: !6255)
!6257 = !DILocation(line: 2221, column: 8, scope: !6255)
!6258 = !DILocation(line: 2221, column: 8, scope: !6244)
!6259 = !DILocation(line: 2222, column: 6, scope: !6255)
!6260 = !DILocation(line: 2223, column: 23, scope: !6261)
!6261 = distinct !DILexicalBlock(scope: !6244, file: !3, line: 2223, column: 8)
!6262 = !DILocation(line: 2223, column: 38, scope: !6261)
!6263 = !DILocation(line: 2223, column: 8, scope: !6261)
!6264 = !DILocation(line: 2223, column: 8, scope: !6244)
!6265 = !DILocation(line: 2224, column: 6, scope: !6261)
!6266 = !DILocation(line: 2226, column: 2, scope: !6244)
!6267 = distinct !{!6267, !6237, !6268}
!6268 = !DILocation(line: 2226, column: 2, scope: !6238)
!6269 = !DILocation(line: 2227, column: 5, scope: !6235)
!6270 = !DILocation(line: 2206, column: 66, scope: !6231)
!6271 = !DILocation(line: 2206, column: 20, scope: !6231)
!6272 = !DILocation(line: 2206, column: 18, scope: !6231)
!6273 = !DILocation(line: 2204, column: 3, scope: !6231)
!6274 = distinct !{!6274, !6233, !6275}
!6275 = !DILocation(line: 2227, column: 5, scope: !6226)
!6276 = !DILocation(line: 2229, column: 3, scope: !6216)
!6277 = !DILocation(line: 2230, column: 1, scope: !6216)
!6278 = distinct !DISubprogram(name: "noce_try_move", scope: !3, file: !3, line: 853, type: !5380, scopeLine: 854, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6279 = !DILocalVariable(name: "if_info", arg: 1, scope: !6278, file: !3, line: 853, type: !5382)
!6280 = !DILocation(line: 853, column: 37, scope: !6278)
!6281 = !DILocalVariable(name: "cond", scope: !6278, file: !3, line: 855, type: !2577)
!6282 = !DILocation(line: 855, column: 7, scope: !6278)
!6283 = !DILocation(line: 855, column: 14, scope: !6278)
!6284 = !DILocation(line: 855, column: 23, scope: !6278)
!6285 = !DILocalVariable(name: "code", scope: !6278, file: !3, line: 856, type: !2301)
!6286 = !DILocation(line: 856, column: 17, scope: !6278)
!6287 = !DILocation(line: 856, column: 24, scope: !6278)
!6288 = !DILocalVariable(name: "y", scope: !6278, file: !3, line: 857, type: !2577)
!6289 = !DILocation(line: 857, column: 7, scope: !6278)
!6290 = !DILocalVariable(name: "seq", scope: !6278, file: !3, line: 857, type: !2577)
!6291 = !DILocation(line: 857, column: 10, scope: !6278)
!6292 = !DILocation(line: 859, column: 7, scope: !6293)
!6293 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 859, column: 7)
!6294 = !DILocation(line: 859, column: 12, scope: !6293)
!6295 = !DILocation(line: 859, column: 18, scope: !6293)
!6296 = !DILocation(line: 859, column: 21, scope: !6293)
!6297 = !DILocation(line: 859, column: 26, scope: !6293)
!6298 = !DILocation(line: 859, column: 7, scope: !6278)
!6299 = !DILocation(line: 860, column: 5, scope: !6293)
!6300 = !DILocation(line: 864, column: 7, scope: !6301)
!6301 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 864, column: 7)
!6302 = !DILocation(line: 865, column: 7, scope: !6301)
!6303 = !DILocation(line: 865, column: 10, scope: !6301)
!6304 = !DILocation(line: 864, column: 7, scope: !6278)
!6305 = !DILocation(line: 866, column: 5, scope: !6301)
!6306 = !DILocation(line: 870, column: 21, scope: !6307)
!6307 = distinct !DILexicalBlock(scope: !6278, file: !3, line: 870, column: 7)
!6308 = !DILocation(line: 870, column: 30, scope: !6307)
!6309 = !DILocation(line: 870, column: 33, scope: !6307)
!6310 = !DILocation(line: 870, column: 8, scope: !6307)
!6311 = !DILocation(line: 871, column: 8, scope: !6307)
!6312 = !DILocation(line: 871, column: 24, scope: !6307)
!6313 = !DILocation(line: 871, column: 33, scope: !6307)
!6314 = !DILocation(line: 871, column: 36, scope: !6307)
!6315 = !DILocation(line: 871, column: 11, scope: !6307)
!6316 = !DILocation(line: 872, column: 7, scope: !6307)
!6317 = !DILocation(line: 872, column: 24, scope: !6307)
!6318 = !DILocation(line: 872, column: 33, scope: !6307)
!6319 = !DILocation(line: 872, column: 36, scope: !6307)
!6320 = !DILocation(line: 872, column: 11, scope: !6307)
!6321 = !DILocation(line: 873, column: 4, scope: !6307)
!6322 = !DILocation(line: 873, column: 20, scope: !6307)
!6323 = !DILocation(line: 873, column: 29, scope: !6307)
!6324 = !DILocation(line: 873, column: 32, scope: !6307)
!6325 = !DILocation(line: 873, column: 7, scope: !6307)
!6326 = !DILocation(line: 870, column: 7, scope: !6278)
!6327 = !DILocation(line: 875, column: 12, scope: !6328)
!6328 = distinct !DILexicalBlock(scope: !6307, file: !3, line: 874, column: 5)
!6329 = !DILocation(line: 875, column: 17, scope: !6328)
!6330 = !DILocation(line: 875, column: 11, scope: !6328)
!6331 = !DILocation(line: 875, column: 26, scope: !6328)
!6332 = !DILocation(line: 875, column: 35, scope: !6328)
!6333 = !DILocation(line: 875, column: 39, scope: !6328)
!6334 = !DILocation(line: 875, column: 48, scope: !6328)
!6335 = !DILocation(line: 875, column: 9, scope: !6328)
!6336 = !DILocation(line: 878, column: 26, scope: !6337)
!6337 = distinct !DILexicalBlock(scope: !6328, file: !3, line: 878, column: 11)
!6338 = !DILocation(line: 878, column: 35, scope: !6337)
!6339 = !DILocation(line: 878, column: 38, scope: !6337)
!6340 = !DILocation(line: 878, column: 13, scope: !6337)
!6341 = !DILocation(line: 878, column: 11, scope: !6328)
!6342 = !DILocation(line: 880, column: 4, scope: !6343)
!6343 = distinct !DILexicalBlock(scope: !6337, file: !3, line: 879, column: 2)
!6344 = !DILocation(line: 881, column: 25, scope: !6343)
!6345 = !DILocation(line: 881, column: 34, scope: !6343)
!6346 = !DILocation(line: 881, column: 37, scope: !6343)
!6347 = !DILocation(line: 881, column: 4, scope: !6343)
!6348 = !DILocation(line: 882, column: 30, scope: !6343)
!6349 = !DILocation(line: 882, column: 10, scope: !6343)
!6350 = !DILocation(line: 882, column: 8, scope: !6343)
!6351 = !DILocation(line: 883, column: 9, scope: !6352)
!6352 = distinct !DILexicalBlock(scope: !6343, file: !3, line: 883, column: 8)
!6353 = !DILocation(line: 883, column: 8, scope: !6343)
!6354 = !DILocation(line: 884, column: 6, scope: !6352)
!6355 = !DILocation(line: 886, column: 29, scope: !6343)
!6356 = !DILocation(line: 886, column: 34, scope: !6343)
!6357 = !DILocation(line: 886, column: 43, scope: !6343)
!6358 = !DILocation(line: 887, column: 8, scope: !6343)
!6359 = !DILocation(line: 886, column: 4, scope: !6343)
!6360 = !DILocation(line: 888, column: 2, scope: !6343)
!6361 = !DILocation(line: 889, column: 7, scope: !6328)
!6362 = !DILocation(line: 891, column: 3, scope: !6278)
!6363 = !DILocation(line: 892, column: 1, scope: !6278)
!6364 = distinct !DISubprogram(name: "noce_try_store_flag", scope: !3, file: !3, line: 901, type: !5380, scopeLine: 902, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6365 = !DILocalVariable(name: "if_info", arg: 1, scope: !6364, file: !3, line: 901, type: !5382)
!6366 = !DILocation(line: 901, column: 43, scope: !6364)
!6367 = !DILocalVariable(name: "reversep", scope: !6364, file: !3, line: 903, type: !2545)
!6368 = !DILocation(line: 903, column: 7, scope: !6364)
!6369 = !DILocalVariable(name: "target", scope: !6364, file: !3, line: 904, type: !2577)
!6370 = !DILocation(line: 904, column: 7, scope: !6364)
!6371 = !DILocalVariable(name: "seq", scope: !6364, file: !3, line: 904, type: !2577)
!6372 = !DILocation(line: 904, column: 15, scope: !6364)
!6373 = !DILocation(line: 906, column: 7, scope: !6374)
!6374 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 906, column: 7)
!6375 = !DILocation(line: 907, column: 7, scope: !6374)
!6376 = !DILocation(line: 907, column: 10, scope: !6374)
!6377 = !DILocation(line: 907, column: 30, scope: !6374)
!6378 = !DILocation(line: 908, column: 7, scope: !6374)
!6379 = !DILocation(line: 908, column: 10, scope: !6374)
!6380 = !DILocation(line: 908, column: 19, scope: !6374)
!6381 = !DILocation(line: 908, column: 24, scope: !6374)
!6382 = !DILocation(line: 908, column: 21, scope: !6374)
!6383 = !DILocation(line: 906, column: 7, scope: !6364)
!6384 = !DILocation(line: 909, column: 14, scope: !6374)
!6385 = !DILocation(line: 909, column: 5, scope: !6374)
!6386 = !DILocation(line: 910, column: 12, scope: !6387)
!6387 = distinct !DILexicalBlock(scope: !6374, file: !3, line: 910, column: 12)
!6388 = !DILocation(line: 910, column: 21, scope: !6387)
!6389 = !DILocation(line: 910, column: 26, scope: !6387)
!6390 = !DILocation(line: 910, column: 23, scope: !6387)
!6391 = !DILocation(line: 911, column: 5, scope: !6387)
!6392 = !DILocation(line: 911, column: 8, scope: !6387)
!6393 = !DILocation(line: 912, column: 5, scope: !6387)
!6394 = !DILocation(line: 912, column: 8, scope: !6387)
!6395 = !DILocation(line: 912, column: 28, scope: !6387)
!6396 = !DILocation(line: 913, column: 5, scope: !6387)
!6397 = !DILocation(line: 913, column: 35, scope: !6387)
!6398 = !DILocation(line: 913, column: 44, scope: !6387)
!6399 = !DILocation(line: 913, column: 50, scope: !6387)
!6400 = !DILocation(line: 913, column: 59, scope: !6387)
!6401 = !DILocation(line: 913, column: 9, scope: !6387)
!6402 = !DILocation(line: 914, column: 9, scope: !6387)
!6403 = !DILocation(line: 910, column: 12, scope: !6374)
!6404 = !DILocation(line: 915, column: 14, scope: !6387)
!6405 = !DILocation(line: 915, column: 5, scope: !6387)
!6406 = !DILocation(line: 917, column: 5, scope: !6387)
!6407 = !DILocation(line: 919, column: 3, scope: !6364)
!6408 = !DILocation(line: 921, column: 34, scope: !6364)
!6409 = !DILocation(line: 921, column: 43, scope: !6364)
!6410 = !DILocation(line: 921, column: 52, scope: !6364)
!6411 = !DILocation(line: 921, column: 55, scope: !6364)
!6412 = !DILocation(line: 921, column: 12, scope: !6364)
!6413 = !DILocation(line: 921, column: 10, scope: !6364)
!6414 = !DILocation(line: 922, column: 7, scope: !6415)
!6415 = distinct !DILexicalBlock(scope: !6364, file: !3, line: 922, column: 7)
!6416 = !DILocation(line: 922, column: 7, scope: !6364)
!6417 = !DILocation(line: 924, column: 11, scope: !6418)
!6418 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 924, column: 11)
!6419 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 923, column: 5)
!6420 = !DILocation(line: 924, column: 21, scope: !6418)
!6421 = !DILocation(line: 924, column: 30, scope: !6418)
!6422 = !DILocation(line: 924, column: 18, scope: !6418)
!6423 = !DILocation(line: 924, column: 11, scope: !6419)
!6424 = !DILocation(line: 925, column: 23, scope: !6418)
!6425 = !DILocation(line: 925, column: 32, scope: !6418)
!6426 = !DILocation(line: 925, column: 35, scope: !6418)
!6427 = !DILocation(line: 925, column: 2, scope: !6418)
!6428 = !DILocation(line: 927, column: 33, scope: !6419)
!6429 = !DILocation(line: 927, column: 13, scope: !6419)
!6430 = !DILocation(line: 927, column: 11, scope: !6419)
!6431 = !DILocation(line: 928, column: 13, scope: !6432)
!6432 = distinct !DILexicalBlock(scope: !6419, file: !3, line: 928, column: 11)
!6433 = !DILocation(line: 928, column: 11, scope: !6419)
!6434 = !DILocation(line: 929, column: 2, scope: !6432)
!6435 = !DILocation(line: 931, column: 32, scope: !6419)
!6436 = !DILocation(line: 931, column: 37, scope: !6419)
!6437 = !DILocation(line: 931, column: 46, scope: !6419)
!6438 = !DILocation(line: 932, column: 11, scope: !6419)
!6439 = !DILocation(line: 931, column: 7, scope: !6419)
!6440 = !DILocation(line: 933, column: 7, scope: !6419)
!6441 = !DILocation(line: 937, column: 7, scope: !6442)
!6442 = distinct !DILexicalBlock(scope: !6415, file: !3, line: 936, column: 5)
!6443 = !DILocation(line: 938, column: 7, scope: !6442)
!6444 = !DILocation(line: 940, column: 1, scope: !6364)
!6445 = distinct !DISubprogram(name: "noce_try_bitop", scope: !3, file: !3, line: 1980, type: !5380, scopeLine: 1981, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6446 = !DILocalVariable(name: "if_info", arg: 1, scope: !6445, file: !3, line: 1980, type: !5382)
!6447 = !DILocation(line: 1980, column: 38, scope: !6445)
!6448 = !DILocalVariable(name: "cond", scope: !6445, file: !3, line: 1982, type: !2577)
!6449 = !DILocation(line: 1982, column: 7, scope: !6445)
!6450 = !DILocalVariable(name: "x", scope: !6445, file: !3, line: 1982, type: !2577)
!6451 = !DILocation(line: 1982, column: 13, scope: !6445)
!6452 = !DILocalVariable(name: "a", scope: !6445, file: !3, line: 1982, type: !2577)
!6453 = !DILocation(line: 1982, column: 16, scope: !6445)
!6454 = !DILocalVariable(name: "result", scope: !6445, file: !3, line: 1982, type: !2577)
!6455 = !DILocation(line: 1982, column: 19, scope: !6445)
!6456 = !DILocalVariable(name: "seq", scope: !6445, file: !3, line: 1982, type: !2577)
!6457 = !DILocation(line: 1982, column: 27, scope: !6445)
!6458 = !DILocalVariable(name: "mode", scope: !6445, file: !3, line: 1983, type: !231)
!6459 = !DILocation(line: 1983, column: 21, scope: !6445)
!6460 = !DILocalVariable(name: "code", scope: !6445, file: !3, line: 1984, type: !2301)
!6461 = !DILocation(line: 1984, column: 17, scope: !6445)
!6462 = !DILocalVariable(name: "bitnum", scope: !6445, file: !3, line: 1985, type: !2545)
!6463 = !DILocation(line: 1985, column: 7, scope: !6445)
!6464 = !DILocation(line: 1987, column: 7, scope: !6445)
!6465 = !DILocation(line: 1987, column: 16, scope: !6445)
!6466 = !DILocation(line: 1987, column: 5, scope: !6445)
!6467 = !DILocation(line: 1988, column: 10, scope: !6445)
!6468 = !DILocation(line: 1988, column: 19, scope: !6445)
!6469 = !DILocation(line: 1988, column: 8, scope: !6445)
!6470 = !DILocation(line: 1989, column: 10, scope: !6445)
!6471 = !DILocation(line: 1989, column: 8, scope: !6445)
!6472 = !DILocation(line: 1992, column: 22, scope: !6473)
!6473 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 1992, column: 7)
!6474 = !DILocation(line: 1992, column: 25, scope: !6473)
!6475 = !DILocation(line: 1992, column: 34, scope: !6473)
!6476 = !DILocation(line: 1992, column: 9, scope: !6473)
!6477 = !DILocation(line: 1992, column: 7, scope: !6445)
!6478 = !DILocation(line: 1993, column: 5, scope: !6473)
!6479 = !DILocation(line: 1996, column: 7, scope: !6480)
!6480 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 1996, column: 7)
!6481 = !DILocation(line: 1996, column: 12, scope: !6480)
!6482 = !DILocation(line: 1996, column: 18, scope: !6480)
!6483 = !DILocation(line: 1996, column: 21, scope: !6480)
!6484 = !DILocation(line: 1996, column: 26, scope: !6480)
!6485 = !DILocation(line: 1996, column: 7, scope: !6445)
!6486 = !DILocation(line: 1997, column: 5, scope: !6480)
!6487 = !DILocation(line: 1998, column: 7, scope: !6488)
!6488 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 1998, column: 7)
!6489 = !DILocation(line: 1998, column: 25, scope: !6488)
!6490 = !DILocation(line: 1998, column: 22, scope: !6488)
!6491 = !DILocation(line: 1998, column: 7, scope: !6445)
!6492 = !DILocation(line: 1999, column: 5, scope: !6488)
!6493 = !DILocation(line: 2000, column: 10, scope: !6445)
!6494 = !DILocation(line: 2000, column: 8, scope: !6445)
!6495 = !DILocation(line: 2003, column: 7, scope: !6496)
!6496 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 2003, column: 7)
!6497 = !DILocation(line: 2003, column: 23, scope: !6496)
!6498 = !DILocation(line: 2003, column: 7, scope: !6445)
!6499 = !DILocation(line: 2005, column: 11, scope: !6500)
!6500 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 2005, column: 11)
!6501 = distinct !DILexicalBlock(scope: !6496, file: !3, line: 2004, column: 5)
!6502 = !DILocation(line: 2005, column: 29, scope: !6500)
!6503 = !DILocation(line: 2005, column: 26, scope: !6500)
!6504 = !DILocation(line: 2006, column: 4, scope: !6500)
!6505 = !DILocation(line: 2006, column: 8, scope: !6500)
!6506 = !DILocation(line: 2007, column: 4, scope: !6500)
!6507 = !DILocation(line: 2007, column: 22, scope: !6500)
!6508 = !DILocation(line: 2007, column: 25, scope: !6500)
!6509 = !DILocation(line: 2007, column: 9, scope: !6500)
!6510 = !DILocation(line: 2005, column: 11, scope: !6501)
!6511 = !DILocation(line: 2008, column: 2, scope: !6500)
!6512 = !DILocation(line: 2009, column: 16, scope: !6501)
!6513 = !DILocation(line: 2009, column: 14, scope: !6501)
!6514 = !DILocation(line: 2010, column: 14, scope: !6501)
!6515 = !DILocation(line: 2010, column: 12, scope: !6501)
!6516 = !DILocation(line: 2013, column: 11, scope: !6517)
!6517 = distinct !DILexicalBlock(scope: !6501, file: !3, line: 2013, column: 11)
!6518 = !DILocation(line: 2013, column: 18, scope: !6517)
!6519 = !DILocation(line: 2013, column: 22, scope: !6517)
!6520 = !DILocation(line: 2013, column: 25, scope: !6517)
!6521 = !DILocation(line: 2013, column: 32, scope: !6517)
!6522 = !DILocation(line: 2013, column: 11, scope: !6501)
!6523 = !DILocation(line: 2014, column: 2, scope: !6517)
!6524 = !DILocation(line: 2015, column: 5, scope: !6501)
!6525 = !DILocation(line: 2017, column: 5, scope: !6496)
!6526 = !DILocation(line: 2019, column: 7, scope: !6445)
!6527 = !DILocation(line: 2019, column: 16, scope: !6445)
!6528 = !DILocation(line: 2019, column: 5, scope: !6445)
!6529 = !DILocation(line: 2020, column: 7, scope: !6530)
!6530 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 2020, column: 7)
!6531 = !DILocation(line: 2020, column: 20, scope: !6530)
!6532 = !DILocation(line: 2020, column: 27, scope: !6530)
!6533 = !DILocation(line: 2020, column: 30, scope: !6530)
!6534 = !DILocation(line: 2020, column: 43, scope: !6530)
!6535 = !DILocation(line: 2020, column: 7, scope: !6445)
!6536 = !DILocation(line: 2023, column: 26, scope: !6537)
!6537 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 2023, column: 11)
!6538 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 2021, column: 5)
!6539 = !DILocation(line: 2023, column: 29, scope: !6537)
!6540 = !DILocation(line: 2023, column: 13, scope: !6537)
!6541 = !DILocation(line: 2024, column: 11, scope: !6537)
!6542 = !DILocation(line: 2024, column: 15, scope: !6537)
!6543 = !DILocation(line: 2025, column: 4, scope: !6537)
!6544 = !DILocation(line: 2025, column: 8, scope: !6537)
!6545 = !DILocation(line: 2025, column: 31, scope: !6537)
!6546 = !DILocation(line: 2025, column: 29, scope: !6537)
!6547 = !DILocation(line: 2026, column: 40, scope: !6537)
!6548 = !DILocation(line: 2026, column: 37, scope: !6537)
!6549 = !DILocation(line: 2026, column: 7, scope: !6537)
!6550 = !DILocation(line: 2023, column: 11, scope: !6538)
!6551 = !DILocation(line: 2027, column: 9, scope: !6537)
!6552 = !DILocation(line: 2031, column: 11, scope: !6553)
!6553 = distinct !DILexicalBlock(scope: !6538, file: !3, line: 2031, column: 11)
!6554 = !DILocation(line: 2031, column: 24, scope: !6553)
!6555 = !DILocation(line: 2031, column: 11, scope: !6538)
!6556 = !DILocation(line: 2032, column: 12, scope: !6553)
!6557 = !DILocation(line: 2032, column: 17, scope: !6553)
!6558 = !DILocation(line: 2032, column: 11, scope: !6553)
!6559 = !DILocation(line: 2032, column: 26, scope: !6553)
!6560 = !DILocation(line: 2032, column: 9, scope: !6553)
!6561 = !DILocation(line: 2032, column: 2, scope: !6553)
!6562 = !DILocation(line: 2033, column: 16, scope: !6563)
!6563 = distinct !DILexicalBlock(scope: !6553, file: !3, line: 2033, column: 16)
!6564 = !DILocation(line: 2033, column: 21, scope: !6563)
!6565 = !DILocation(line: 2033, column: 16, scope: !6553)
!6566 = !DILocation(line: 2036, column: 48, scope: !6567)
!6567 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 2034, column: 2)
!6568 = !DILocation(line: 2036, column: 45, scope: !6567)
!6569 = !DILocation(line: 2036, column: 56, scope: !6567)
!6570 = !DILocation(line: 2036, column: 13, scope: !6567)
!6571 = !DILocation(line: 2036, column: 11, scope: !6567)
!6572 = !DILocation(line: 2037, column: 39, scope: !6567)
!6573 = !DILocation(line: 2037, column: 45, scope: !6567)
!6574 = !DILocation(line: 2037, column: 48, scope: !6567)
!6575 = !DILocation(line: 2037, column: 13, scope: !6567)
!6576 = !DILocation(line: 2037, column: 11, scope: !6567)
!6577 = !DILocation(line: 2038, column: 2, scope: !6567)
!6578 = !DILocation(line: 2042, column: 50, scope: !6579)
!6579 = distinct !DILexicalBlock(scope: !6563, file: !3, line: 2040, column: 2)
!6580 = !DILocation(line: 2042, column: 47, scope: !6579)
!6581 = !DILocation(line: 2042, column: 27, scope: !6579)
!6582 = !DILocation(line: 2042, column: 59, scope: !6579)
!6583 = !DILocation(line: 2042, column: 13, scope: !6579)
!6584 = !DILocation(line: 2042, column: 11, scope: !6579)
!6585 = !DILocation(line: 2043, column: 39, scope: !6579)
!6586 = !DILocation(line: 2043, column: 45, scope: !6579)
!6587 = !DILocation(line: 2043, column: 48, scope: !6579)
!6588 = !DILocation(line: 2043, column: 13, scope: !6579)
!6589 = !DILocation(line: 2043, column: 11, scope: !6579)
!6590 = !DILocation(line: 2045, column: 5, scope: !6538)
!6591 = !DILocation(line: 2046, column: 12, scope: !6592)
!6592 = distinct !DILexicalBlock(scope: !6530, file: !3, line: 2046, column: 12)
!6593 = !DILocation(line: 2046, column: 25, scope: !6592)
!6594 = !DILocation(line: 2046, column: 12, scope: !6530)
!6595 = !DILocation(line: 2049, column: 26, scope: !6596)
!6596 = distinct !DILexicalBlock(scope: !6597, file: !3, line: 2049, column: 11)
!6597 = distinct !DILexicalBlock(scope: !6592, file: !3, line: 2047, column: 5)
!6598 = !DILocation(line: 2049, column: 29, scope: !6596)
!6599 = !DILocation(line: 2049, column: 13, scope: !6596)
!6600 = !DILocation(line: 2050, column: 4, scope: !6596)
!6601 = !DILocation(line: 2050, column: 8, scope: !6596)
!6602 = !DILocation(line: 2051, column: 4, scope: !6596)
!6603 = !DILocation(line: 2051, column: 8, scope: !6596)
!6604 = !DILocation(line: 2051, column: 31, scope: !6596)
!6605 = !DILocation(line: 2051, column: 29, scope: !6596)
!6606 = !DILocation(line: 2052, column: 34, scope: !6596)
!6607 = !DILocation(line: 2052, column: 31, scope: !6596)
!6608 = !DILocation(line: 2052, column: 11, scope: !6596)
!6609 = !DILocation(line: 2052, column: 44, scope: !6596)
!6610 = !DILocation(line: 2052, column: 42, scope: !6596)
!6611 = !DILocation(line: 2052, column: 7, scope: !6596)
!6612 = !DILocation(line: 2049, column: 11, scope: !6597)
!6613 = !DILocation(line: 2053, column: 9, scope: !6596)
!6614 = !DILocation(line: 2057, column: 17, scope: !6597)
!6615 = !DILocation(line: 2057, column: 22, scope: !6597)
!6616 = !DILocation(line: 2057, column: 16, scope: !6597)
!6617 = !DILocation(line: 2057, column: 31, scope: !6597)
!6618 = !DILocation(line: 2057, column: 14, scope: !6597)
!6619 = !DILocation(line: 2058, column: 5, scope: !6597)
!6620 = !DILocation(line: 2060, column: 5, scope: !6592)
!6621 = !DILocation(line: 2062, column: 7, scope: !6622)
!6622 = distinct !DILexicalBlock(scope: !6445, file: !3, line: 2062, column: 7)
!6623 = !DILocation(line: 2062, column: 7, scope: !6445)
!6624 = !DILocation(line: 2064, column: 7, scope: !6625)
!6625 = distinct !DILexicalBlock(scope: !6622, file: !3, line: 2063, column: 5)
!6626 = !DILocation(line: 2065, column: 28, scope: !6625)
!6627 = !DILocation(line: 2065, column: 31, scope: !6625)
!6628 = !DILocation(line: 2065, column: 7, scope: !6625)
!6629 = !DILocation(line: 2066, column: 33, scope: !6625)
!6630 = !DILocation(line: 2066, column: 13, scope: !6625)
!6631 = !DILocation(line: 2066, column: 11, scope: !6625)
!6632 = !DILocation(line: 2067, column: 12, scope: !6633)
!6633 = distinct !DILexicalBlock(scope: !6625, file: !3, line: 2067, column: 11)
!6634 = !DILocation(line: 2067, column: 11, scope: !6625)
!6635 = !DILocation(line: 2068, column: 2, scope: !6633)
!6636 = !DILocation(line: 2070, column: 32, scope: !6625)
!6637 = !DILocation(line: 2070, column: 37, scope: !6625)
!6638 = !DILocation(line: 2070, column: 46, scope: !6625)
!6639 = !DILocation(line: 2071, column: 11, scope: !6625)
!6640 = !DILocation(line: 2070, column: 7, scope: !6625)
!6641 = !DILocation(line: 2072, column: 5, scope: !6625)
!6642 = !DILocation(line: 2073, column: 3, scope: !6445)
!6643 = !DILocation(line: 2074, column: 1, scope: !6445)
!6644 = distinct !DISubprogram(name: "noce_try_minmax", scope: !3, file: !3, line: 1662, type: !5380, scopeLine: 1663, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6645 = !DILocalVariable(name: "if_info", arg: 1, scope: !6644, file: !3, line: 1662, type: !5382)
!6646 = !DILocation(line: 1662, column: 39, scope: !6644)
!6647 = !DILocalVariable(name: "cond", scope: !6644, file: !3, line: 1664, type: !2577)
!6648 = !DILocation(line: 1664, column: 7, scope: !6644)
!6649 = !DILocalVariable(name: "earliest", scope: !6644, file: !3, line: 1664, type: !2577)
!6650 = !DILocation(line: 1664, column: 13, scope: !6644)
!6651 = !DILocalVariable(name: "target", scope: !6644, file: !3, line: 1664, type: !2577)
!6652 = !DILocation(line: 1664, column: 23, scope: !6644)
!6653 = !DILocalVariable(name: "seq", scope: !6644, file: !3, line: 1664, type: !2577)
!6654 = !DILocation(line: 1664, column: 31, scope: !6644)
!6655 = !DILocalVariable(name: "code", scope: !6644, file: !3, line: 1665, type: !2301)
!6656 = !DILocation(line: 1665, column: 17, scope: !6644)
!6657 = !DILocalVariable(name: "op", scope: !6644, file: !3, line: 1665, type: !2301)
!6658 = !DILocation(line: 1665, column: 23, scope: !6644)
!6659 = !DILocalVariable(name: "unsignedp", scope: !6644, file: !3, line: 1666, type: !2545)
!6660 = !DILocation(line: 1666, column: 7, scope: !6644)
!6661 = !DILocation(line: 1671, column: 7, scope: !6662)
!6662 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1671, column: 7)
!6663 = !DILocation(line: 1672, column: 7, scope: !6662)
!6664 = !DILocation(line: 1672, column: 10, scope: !6662)
!6665 = !DILocation(line: 1671, column: 7, scope: !6644)
!6666 = !DILocation(line: 1673, column: 5, scope: !6662)
!6667 = !DILocation(line: 1675, column: 34, scope: !6644)
!6668 = !DILocation(line: 1675, column: 43, scope: !6644)
!6669 = !DILocation(line: 1675, column: 52, scope: !6644)
!6670 = !DILocation(line: 1675, column: 10, scope: !6644)
!6671 = !DILocation(line: 1675, column: 8, scope: !6644)
!6672 = !DILocation(line: 1676, column: 8, scope: !6673)
!6673 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1676, column: 7)
!6674 = !DILocation(line: 1676, column: 7, scope: !6644)
!6675 = !DILocation(line: 1677, column: 5, scope: !6673)
!6676 = !DILocation(line: 1681, column: 10, scope: !6644)
!6677 = !DILocation(line: 1681, column: 8, scope: !6644)
!6678 = !DILocation(line: 1682, column: 20, scope: !6679)
!6679 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1682, column: 7)
!6680 = !DILocation(line: 1682, column: 36, scope: !6679)
!6681 = !DILocation(line: 1682, column: 45, scope: !6679)
!6682 = !DILocation(line: 1682, column: 7, scope: !6679)
!6683 = !DILocation(line: 1682, column: 7, scope: !6644)
!6684 = !DILocation(line: 1684, column: 26, scope: !6685)
!6685 = distinct !DILexicalBlock(scope: !6686, file: !3, line: 1684, column: 11)
!6686 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1683, column: 5)
!6687 = !DILocation(line: 1684, column: 42, scope: !6685)
!6688 = !DILocation(line: 1684, column: 51, scope: !6685)
!6689 = !DILocation(line: 1684, column: 13, scope: !6685)
!6690 = !DILocation(line: 1684, column: 11, scope: !6686)
!6691 = !DILocation(line: 1685, column: 2, scope: !6685)
!6692 = !DILocation(line: 1686, column: 5, scope: !6686)
!6693 = !DILocation(line: 1687, column: 25, scope: !6694)
!6694 = distinct !DILexicalBlock(scope: !6679, file: !3, line: 1687, column: 12)
!6695 = !DILocation(line: 1687, column: 41, scope: !6694)
!6696 = !DILocation(line: 1687, column: 50, scope: !6694)
!6697 = !DILocation(line: 1687, column: 12, scope: !6694)
!6698 = !DILocation(line: 1687, column: 12, scope: !6679)
!6699 = !DILocation(line: 1689, column: 26, scope: !6700)
!6700 = distinct !DILexicalBlock(scope: !6701, file: !3, line: 1689, column: 11)
!6701 = distinct !DILexicalBlock(scope: !6694, file: !3, line: 1688, column: 5)
!6702 = !DILocation(line: 1689, column: 42, scope: !6700)
!6703 = !DILocation(line: 1689, column: 51, scope: !6700)
!6704 = !DILocation(line: 1689, column: 13, scope: !6700)
!6705 = !DILocation(line: 1689, column: 11, scope: !6701)
!6706 = !DILocation(line: 1690, column: 2, scope: !6700)
!6707 = !DILocation(line: 1691, column: 30, scope: !6701)
!6708 = !DILocation(line: 1691, column: 14, scope: !6701)
!6709 = !DILocation(line: 1691, column: 12, scope: !6701)
!6710 = !DILocation(line: 1692, column: 5, scope: !6701)
!6711 = !DILocation(line: 1694, column: 5, scope: !6694)
!6712 = !DILocation(line: 1698, column: 11, scope: !6644)
!6713 = !DILocation(line: 1698, column: 3, scope: !6644)
!6714 = !DILocation(line: 1704, column: 10, scope: !6715)
!6715 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1699, column: 5)
!6716 = !DILocation(line: 1705, column: 17, scope: !6715)
!6717 = !DILocation(line: 1706, column: 7, scope: !6715)
!6718 = !DILocation(line: 1711, column: 10, scope: !6715)
!6719 = !DILocation(line: 1712, column: 17, scope: !6715)
!6720 = !DILocation(line: 1713, column: 7, scope: !6715)
!6721 = !DILocation(line: 1716, column: 10, scope: !6715)
!6722 = !DILocation(line: 1717, column: 17, scope: !6715)
!6723 = !DILocation(line: 1718, column: 7, scope: !6715)
!6724 = !DILocation(line: 1721, column: 10, scope: !6715)
!6725 = !DILocation(line: 1722, column: 17, scope: !6715)
!6726 = !DILocation(line: 1723, column: 7, scope: !6715)
!6727 = !DILocation(line: 1725, column: 7, scope: !6715)
!6728 = !DILocation(line: 1728, column: 3, scope: !6644)
!6729 = !DILocation(line: 1730, column: 33, scope: !6644)
!6730 = !DILocation(line: 1730, column: 56, scope: !6644)
!6731 = !DILocation(line: 1731, column: 5, scope: !6644)
!6732 = !DILocation(line: 1731, column: 14, scope: !6644)
!6733 = !DILocation(line: 1731, column: 17, scope: !6644)
!6734 = !DILocation(line: 1731, column: 26, scope: !6644)
!6735 = !DILocation(line: 1732, column: 5, scope: !6644)
!6736 = !DILocation(line: 1732, column: 14, scope: !6644)
!6737 = !DILocation(line: 1732, column: 17, scope: !6644)
!6738 = !DILocation(line: 1730, column: 12, scope: !6644)
!6739 = !DILocation(line: 1730, column: 10, scope: !6644)
!6740 = !DILocation(line: 1733, column: 9, scope: !6741)
!6741 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1733, column: 7)
!6742 = !DILocation(line: 1733, column: 7, scope: !6644)
!6743 = !DILocation(line: 1735, column: 7, scope: !6744)
!6744 = distinct !DILexicalBlock(scope: !6741, file: !3, line: 1734, column: 5)
!6745 = !DILocation(line: 1736, column: 7, scope: !6744)
!6746 = !DILocation(line: 1738, column: 7, scope: !6747)
!6747 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1738, column: 7)
!6748 = !DILocation(line: 1738, column: 17, scope: !6747)
!6749 = !DILocation(line: 1738, column: 26, scope: !6747)
!6750 = !DILocation(line: 1738, column: 14, scope: !6747)
!6751 = !DILocation(line: 1738, column: 7, scope: !6644)
!6752 = !DILocation(line: 1739, column: 26, scope: !6747)
!6753 = !DILocation(line: 1739, column: 35, scope: !6747)
!6754 = !DILocation(line: 1739, column: 38, scope: !6747)
!6755 = !DILocation(line: 1739, column: 5, scope: !6747)
!6756 = !DILocation(line: 1741, column: 29, scope: !6644)
!6757 = !DILocation(line: 1741, column: 9, scope: !6644)
!6758 = !DILocation(line: 1741, column: 7, scope: !6644)
!6759 = !DILocation(line: 1742, column: 8, scope: !6760)
!6760 = distinct !DILexicalBlock(scope: !6644, file: !3, line: 1742, column: 7)
!6761 = !DILocation(line: 1742, column: 7, scope: !6644)
!6762 = !DILocation(line: 1743, column: 5, scope: !6760)
!6763 = !DILocation(line: 1745, column: 28, scope: !6644)
!6764 = !DILocation(line: 1745, column: 33, scope: !6644)
!6765 = !DILocation(line: 1745, column: 42, scope: !6644)
!6766 = !DILocation(line: 1745, column: 48, scope: !6644)
!6767 = !DILocation(line: 1745, column: 3, scope: !6644)
!6768 = !DILocation(line: 1746, column: 19, scope: !6644)
!6769 = !DILocation(line: 1746, column: 3, scope: !6644)
!6770 = !DILocation(line: 1746, column: 12, scope: !6644)
!6771 = !DILocation(line: 1746, column: 17, scope: !6644)
!6772 = !DILocation(line: 1747, column: 28, scope: !6644)
!6773 = !DILocation(line: 1747, column: 3, scope: !6644)
!6774 = !DILocation(line: 1747, column: 12, scope: !6644)
!6775 = !DILocation(line: 1747, column: 26, scope: !6644)
!6776 = !DILocation(line: 1749, column: 3, scope: !6644)
!6777 = !DILocation(line: 1750, column: 1, scope: !6644)
!6778 = distinct !DISubprogram(name: "noce_try_abs", scope: !3, file: !3, line: 1757, type: !5380, scopeLine: 1758, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!6779 = !DILocalVariable(name: "if_info", arg: 1, scope: !6778, file: !3, line: 1757, type: !5382)
!6780 = !DILocation(line: 1757, column: 36, scope: !6778)
!6781 = !DILocalVariable(name: "cond", scope: !6778, file: !3, line: 1759, type: !2577)
!6782 = !DILocation(line: 1759, column: 7, scope: !6778)
!6783 = !DILocalVariable(name: "earliest", scope: !6778, file: !3, line: 1759, type: !2577)
!6784 = !DILocation(line: 1759, column: 13, scope: !6778)
!6785 = !DILocalVariable(name: "target", scope: !6778, file: !3, line: 1759, type: !2577)
!6786 = !DILocation(line: 1759, column: 23, scope: !6778)
!6787 = !DILocalVariable(name: "seq", scope: !6778, file: !3, line: 1759, type: !2577)
!6788 = !DILocation(line: 1759, column: 31, scope: !6778)
!6789 = !DILocalVariable(name: "a", scope: !6778, file: !3, line: 1759, type: !2577)
!6790 = !DILocation(line: 1759, column: 36, scope: !6778)
!6791 = !DILocalVariable(name: "b", scope: !6778, file: !3, line: 1759, type: !2577)
!6792 = !DILocation(line: 1759, column: 39, scope: !6778)
!6793 = !DILocalVariable(name: "c", scope: !6778, file: !3, line: 1759, type: !2577)
!6794 = !DILocation(line: 1759, column: 42, scope: !6778)
!6795 = !DILocalVariable(name: "negate", scope: !6778, file: !3, line: 1760, type: !2545)
!6796 = !DILocation(line: 1760, column: 7, scope: !6778)
!6797 = !DILocalVariable(name: "one_cmpl", scope: !6778, file: !3, line: 1761, type: !2809)
!6798 = !DILocation(line: 1761, column: 8, scope: !6778)
!6799 = !DILocation(line: 1764, column: 7, scope: !6800)
!6800 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1764, column: 7)
!6801 = !DILocation(line: 1764, column: 7, scope: !6778)
!6802 = !DILocation(line: 1765, column: 5, scope: !6800)
!6803 = !DILocation(line: 1770, column: 7, scope: !6778)
!6804 = !DILocation(line: 1770, column: 16, scope: !6778)
!6805 = !DILocation(line: 1770, column: 5, scope: !6778)
!6806 = !DILocation(line: 1771, column: 7, scope: !6778)
!6807 = !DILocation(line: 1771, column: 16, scope: !6778)
!6808 = !DILocation(line: 1771, column: 5, scope: !6778)
!6809 = !DILocation(line: 1772, column: 7, scope: !6810)
!6810 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1772, column: 7)
!6811 = !DILocation(line: 1772, column: 20, scope: !6810)
!6812 = !DILocation(line: 1772, column: 27, scope: !6810)
!6813 = !DILocation(line: 1772, column: 43, scope: !6810)
!6814 = !DILocation(line: 1772, column: 56, scope: !6810)
!6815 = !DILocation(line: 1772, column: 30, scope: !6810)
!6816 = !DILocation(line: 1772, column: 7, scope: !6778)
!6817 = !DILocation(line: 1773, column: 12, scope: !6810)
!6818 = !DILocation(line: 1773, column: 5, scope: !6810)
!6819 = !DILocation(line: 1774, column: 12, scope: !6820)
!6820 = distinct !DILexicalBlock(scope: !6810, file: !3, line: 1774, column: 12)
!6821 = !DILocation(line: 1774, column: 25, scope: !6820)
!6822 = !DILocation(line: 1774, column: 32, scope: !6820)
!6823 = !DILocation(line: 1774, column: 48, scope: !6820)
!6824 = !DILocation(line: 1774, column: 61, scope: !6820)
!6825 = !DILocation(line: 1774, column: 35, scope: !6820)
!6826 = !DILocation(line: 1774, column: 12, scope: !6810)
!6827 = !DILocation(line: 1776, column: 11, scope: !6828)
!6828 = distinct !DILexicalBlock(scope: !6820, file: !3, line: 1775, column: 5)
!6829 = !DILocation(line: 1776, column: 9, scope: !6828)
!6830 = !DILocation(line: 1776, column: 18, scope: !6828)
!6831 = !DILocation(line: 1776, column: 16, scope: !6828)
!6832 = !DILocation(line: 1776, column: 25, scope: !6828)
!6833 = !DILocation(line: 1776, column: 23, scope: !6828)
!6834 = !DILocation(line: 1777, column: 14, scope: !6828)
!6835 = !DILocation(line: 1778, column: 5, scope: !6828)
!6836 = !DILocation(line: 1779, column: 12, scope: !6837)
!6837 = distinct !DILexicalBlock(scope: !6820, file: !3, line: 1779, column: 12)
!6838 = !DILocation(line: 1779, column: 25, scope: !6837)
!6839 = !DILocation(line: 1779, column: 32, scope: !6837)
!6840 = !DILocation(line: 1779, column: 48, scope: !6837)
!6841 = !DILocation(line: 1779, column: 61, scope: !6837)
!6842 = !DILocation(line: 1779, column: 35, scope: !6837)
!6843 = !DILocation(line: 1779, column: 12, scope: !6820)
!6844 = !DILocation(line: 1781, column: 14, scope: !6845)
!6845 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 1780, column: 5)
!6846 = !DILocation(line: 1782, column: 16, scope: !6845)
!6847 = !DILocation(line: 1783, column: 5, scope: !6845)
!6848 = !DILocation(line: 1784, column: 12, scope: !6849)
!6849 = distinct !DILexicalBlock(scope: !6837, file: !3, line: 1784, column: 12)
!6850 = !DILocation(line: 1784, column: 25, scope: !6849)
!6851 = !DILocation(line: 1784, column: 32, scope: !6849)
!6852 = !DILocation(line: 1784, column: 48, scope: !6849)
!6853 = !DILocation(line: 1784, column: 61, scope: !6849)
!6854 = !DILocation(line: 1784, column: 35, scope: !6849)
!6855 = !DILocation(line: 1784, column: 12, scope: !6837)
!6856 = !DILocation(line: 1786, column: 11, scope: !6857)
!6857 = distinct !DILexicalBlock(scope: !6849, file: !3, line: 1785, column: 5)
!6858 = !DILocation(line: 1786, column: 9, scope: !6857)
!6859 = !DILocation(line: 1786, column: 18, scope: !6857)
!6860 = !DILocation(line: 1786, column: 16, scope: !6857)
!6861 = !DILocation(line: 1786, column: 25, scope: !6857)
!6862 = !DILocation(line: 1786, column: 23, scope: !6857)
!6863 = !DILocation(line: 1787, column: 14, scope: !6857)
!6864 = !DILocation(line: 1788, column: 16, scope: !6857)
!6865 = !DILocation(line: 1789, column: 5, scope: !6857)
!6866 = !DILocation(line: 1791, column: 5, scope: !6849)
!6867 = !DILocation(line: 1793, column: 34, scope: !6778)
!6868 = !DILocation(line: 1793, column: 43, scope: !6778)
!6869 = !DILocation(line: 1793, column: 10, scope: !6778)
!6870 = !DILocation(line: 1793, column: 8, scope: !6778)
!6871 = !DILocation(line: 1794, column: 8, scope: !6872)
!6872 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1794, column: 7)
!6873 = !DILocation(line: 1794, column: 7, scope: !6778)
!6874 = !DILocation(line: 1795, column: 5, scope: !6872)
!6875 = !DILocation(line: 1798, column: 20, scope: !6876)
!6876 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1798, column: 7)
!6877 = !DILocation(line: 1798, column: 36, scope: !6876)
!6878 = !DILocation(line: 1798, column: 7, scope: !6876)
!6879 = !DILocation(line: 1798, column: 7, scope: !6778)
!6880 = !DILocation(line: 1799, column: 9, scope: !6876)
!6881 = !DILocation(line: 1799, column: 7, scope: !6876)
!6882 = !DILocation(line: 1799, column: 5, scope: !6876)
!6883 = !DILocation(line: 1800, column: 25, scope: !6884)
!6884 = distinct !DILexicalBlock(scope: !6876, file: !3, line: 1800, column: 12)
!6885 = !DILocation(line: 1800, column: 41, scope: !6884)
!6886 = !DILocation(line: 1800, column: 12, scope: !6884)
!6887 = !DILocation(line: 1800, column: 12, scope: !6876)
!6888 = !DILocation(line: 1802, column: 11, scope: !6889)
!6889 = distinct !DILexicalBlock(scope: !6884, file: !3, line: 1801, column: 5)
!6890 = !DILocation(line: 1802, column: 9, scope: !6889)
!6891 = !DILocation(line: 1803, column: 17, scope: !6889)
!6892 = !DILocation(line: 1803, column: 16, scope: !6889)
!6893 = !DILocation(line: 1803, column: 14, scope: !6889)
!6894 = !DILocation(line: 1804, column: 5, scope: !6889)
!6895 = !DILocation(line: 1806, column: 5, scope: !6884)
!6896 = !DILocation(line: 1810, column: 7, scope: !6897)
!6897 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1810, column: 7)
!6898 = !DILocation(line: 1810, column: 7, scope: !6778)
!6899 = !DILocalVariable(name: "set", scope: !6900, file: !3, line: 1812, type: !2577)
!6900 = distinct !DILexicalBlock(scope: !6897, file: !3, line: 1811, column: 5)
!6901 = !DILocation(line: 1812, column: 11, scope: !6900)
!6902 = !DILocalVariable(name: "insn", scope: !6900, file: !3, line: 1812, type: !2577)
!6903 = !DILocation(line: 1812, column: 16, scope: !6900)
!6904 = !DILocation(line: 1812, column: 42, scope: !6900)
!6905 = !DILocation(line: 1812, column: 23, scope: !6900)
!6906 = !DILocation(line: 1813, column: 11, scope: !6907)
!6907 = distinct !DILexicalBlock(scope: !6900, file: !3, line: 1813, column: 11)
!6908 = !DILocation(line: 1814, column: 4, scope: !6907)
!6909 = !DILocation(line: 1814, column: 7, scope: !6907)
!6910 = !DILocation(line: 1814, column: 32, scope: !6907)
!6911 = !DILocation(line: 1814, column: 29, scope: !6907)
!6912 = !DILocation(line: 1815, column: 4, scope: !6907)
!6913 = !DILocation(line: 1815, column: 14, scope: !6907)
!6914 = !DILocation(line: 1815, column: 12, scope: !6907)
!6915 = !DILocation(line: 1816, column: 4, scope: !6907)
!6916 = !DILocation(line: 1816, column: 20, scope: !6907)
!6917 = !DILocation(line: 1816, column: 36, scope: !6907)
!6918 = !DILocation(line: 1816, column: 7, scope: !6907)
!6919 = !DILocation(line: 1813, column: 11, scope: !6900)
!6920 = !DILocalVariable(name: "note", scope: !6921, file: !3, line: 1818, type: !2577)
!6921 = distinct !DILexicalBlock(scope: !6907, file: !3, line: 1817, column: 2)
!6922 = !DILocation(line: 1818, column: 8, scope: !6921)
!6923 = !DILocation(line: 1818, column: 42, scope: !6921)
!6924 = !DILocation(line: 1818, column: 15, scope: !6921)
!6925 = !DILocation(line: 1819, column: 8, scope: !6926)
!6926 = distinct !DILexicalBlock(scope: !6921, file: !3, line: 1819, column: 8)
!6927 = !DILocation(line: 1819, column: 8, scope: !6921)
!6928 = !DILocation(line: 1820, column: 10, scope: !6926)
!6929 = !DILocation(line: 1820, column: 8, scope: !6926)
!6930 = !DILocation(line: 1820, column: 6, scope: !6926)
!6931 = !DILocation(line: 1822, column: 10, scope: !6926)
!6932 = !DILocation(line: 1822, column: 8, scope: !6926)
!6933 = !DILocation(line: 1823, column: 2, scope: !6921)
!6934 = !DILocation(line: 1825, column: 2, scope: !6907)
!6935 = !DILocation(line: 1826, column: 5, scope: !6900)
!6936 = !DILocation(line: 1827, column: 7, scope: !6937)
!6937 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1827, column: 7)
!6938 = !DILocation(line: 1828, column: 7, scope: !6937)
!6939 = !DILocation(line: 1828, column: 10, scope: !6937)
!6940 = !DILocation(line: 1828, column: 33, scope: !6937)
!6941 = !DILocation(line: 1829, column: 7, scope: !6937)
!6942 = !DILocation(line: 1829, column: 10, scope: !6937)
!6943 = !DILocation(line: 1827, column: 7, scope: !6778)
!6944 = !DILocation(line: 1830, column: 28, scope: !6937)
!6945 = !DILocation(line: 1830, column: 9, scope: !6937)
!6946 = !DILocation(line: 1830, column: 7, scope: !6937)
!6947 = !DILocation(line: 1830, column: 5, scope: !6937)
!6948 = !DILocation(line: 1835, column: 7, scope: !6949)
!6949 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1835, column: 7)
!6950 = !DILocation(line: 1835, column: 12, scope: !6949)
!6951 = !DILocation(line: 1835, column: 9, scope: !6949)
!6952 = !DILocation(line: 1835, column: 24, scope: !6949)
!6953 = !DILocation(line: 1835, column: 27, scope: !6949)
!6954 = !DILocation(line: 1835, column: 43, scope: !6949)
!6955 = !DILocation(line: 1835, column: 7, scope: !6778)
!6956 = !DILocation(line: 1837, column: 12, scope: !6957)
!6957 = distinct !DILexicalBlock(scope: !6949, file: !3, line: 1837, column: 12)
!6958 = !DILocation(line: 1837, column: 17, scope: !6957)
!6959 = !DILocation(line: 1837, column: 14, scope: !6957)
!6960 = !DILocation(line: 1837, column: 28, scope: !6957)
!6961 = !DILocation(line: 1837, column: 31, scope: !6957)
!6962 = !DILocation(line: 1837, column: 47, scope: !6957)
!6963 = !DILocation(line: 1837, column: 12, scope: !6949)
!6964 = !DILocation(line: 1839, column: 12, scope: !6965)
!6965 = distinct !DILexicalBlock(scope: !6957, file: !3, line: 1839, column: 12)
!6966 = !DILocation(line: 1839, column: 17, scope: !6965)
!6967 = !DILocation(line: 1839, column: 14, scope: !6965)
!6968 = !DILocation(line: 1839, column: 12, scope: !6957)
!6969 = !DILocation(line: 1840, column: 5, scope: !6965)
!6970 = !DILocation(line: 1843, column: 11, scope: !6778)
!6971 = !DILocation(line: 1843, column: 3, scope: !6778)
!6972 = !DILocation(line: 1849, column: 17, scope: !6973)
!6973 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1844, column: 5)
!6974 = !DILocation(line: 1849, column: 16, scope: !6973)
!6975 = !DILocation(line: 1849, column: 14, scope: !6973)
!6976 = !DILocation(line: 1850, column: 7, scope: !6973)
!6977 = !DILocation(line: 1855, column: 7, scope: !6973)
!6978 = !DILocation(line: 1857, column: 7, scope: !6973)
!6979 = !DILocation(line: 1860, column: 3, scope: !6778)
!6980 = !DILocation(line: 1861, column: 7, scope: !6981)
!6981 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1861, column: 7)
!6982 = !DILocation(line: 1861, column: 7, scope: !6778)
!6983 = !DILocation(line: 1862, column: 42, scope: !6981)
!6984 = !DILocation(line: 1862, column: 65, scope: !6981)
!6985 = !DILocation(line: 1863, column: 42, scope: !6981)
!6986 = !DILocation(line: 1863, column: 51, scope: !6981)
!6987 = !DILocation(line: 1862, column: 14, scope: !6981)
!6988 = !DILocation(line: 1862, column: 12, scope: !6981)
!6989 = !DILocation(line: 1862, column: 5, scope: !6981)
!6990 = !DILocation(line: 1865, column: 33, scope: !6981)
!6991 = !DILocation(line: 1865, column: 56, scope: !6981)
!6992 = !DILocation(line: 1865, column: 59, scope: !6981)
!6993 = !DILocation(line: 1865, column: 68, scope: !6981)
!6994 = !DILocation(line: 1865, column: 14, scope: !6981)
!6995 = !DILocation(line: 1865, column: 12, scope: !6981)
!6996 = !DILocation(line: 1869, column: 7, scope: !6997)
!6997 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1869, column: 7)
!6998 = !DILocation(line: 1869, column: 14, scope: !6997)
!6999 = !DILocation(line: 1869, column: 17, scope: !6997)
!7000 = !DILocation(line: 1869, column: 7, scope: !6778)
!7001 = !DILocation(line: 1871, column: 11, scope: !7002)
!7002 = distinct !DILexicalBlock(scope: !7003, file: !3, line: 1871, column: 11)
!7003 = distinct !DILexicalBlock(scope: !6997, file: !3, line: 1870, column: 5)
!7004 = !DILocation(line: 1871, column: 11, scope: !7003)
!7005 = !DILocation(line: 1872, column: 38, scope: !7002)
!7006 = !DILocation(line: 1872, column: 62, scope: !7002)
!7007 = !DILocation(line: 1873, column: 38, scope: !7002)
!7008 = !DILocation(line: 1873, column: 47, scope: !7002)
!7009 = !DILocation(line: 1872, column: 18, scope: !7002)
!7010 = !DILocation(line: 1872, column: 16, scope: !7002)
!7011 = !DILocation(line: 1872, column: 9, scope: !7002)
!7012 = !DILocation(line: 1875, column: 38, scope: !7002)
!7013 = !DILocation(line: 1875, column: 62, scope: !7002)
!7014 = !DILocation(line: 1876, column: 38, scope: !7002)
!7015 = !DILocation(line: 1876, column: 47, scope: !7002)
!7016 = !DILocation(line: 1875, column: 18, scope: !7002)
!7017 = !DILocation(line: 1875, column: 16, scope: !7002)
!7018 = !DILocation(line: 1877, column: 5, scope: !7003)
!7019 = !DILocation(line: 1879, column: 9, scope: !7020)
!7020 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1879, column: 7)
!7021 = !DILocation(line: 1879, column: 7, scope: !6778)
!7022 = !DILocation(line: 1881, column: 7, scope: !7023)
!7023 = distinct !DILexicalBlock(scope: !7020, file: !3, line: 1880, column: 5)
!7024 = !DILocation(line: 1882, column: 7, scope: !7023)
!7025 = !DILocation(line: 1885, column: 7, scope: !7026)
!7026 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1885, column: 7)
!7027 = !DILocation(line: 1885, column: 17, scope: !7026)
!7028 = !DILocation(line: 1885, column: 26, scope: !7026)
!7029 = !DILocation(line: 1885, column: 14, scope: !7026)
!7030 = !DILocation(line: 1885, column: 7, scope: !6778)
!7031 = !DILocation(line: 1886, column: 26, scope: !7026)
!7032 = !DILocation(line: 1886, column: 35, scope: !7026)
!7033 = !DILocation(line: 1886, column: 38, scope: !7026)
!7034 = !DILocation(line: 1886, column: 5, scope: !7026)
!7035 = !DILocation(line: 1888, column: 29, scope: !6778)
!7036 = !DILocation(line: 1888, column: 9, scope: !6778)
!7037 = !DILocation(line: 1888, column: 7, scope: !6778)
!7038 = !DILocation(line: 1889, column: 8, scope: !7039)
!7039 = distinct !DILexicalBlock(scope: !6778, file: !3, line: 1889, column: 7)
!7040 = !DILocation(line: 1889, column: 7, scope: !6778)
!7041 = !DILocation(line: 1890, column: 5, scope: !7039)
!7042 = !DILocation(line: 1892, column: 28, scope: !6778)
!7043 = !DILocation(line: 1892, column: 33, scope: !6778)
!7044 = !DILocation(line: 1892, column: 42, scope: !6778)
!7045 = !DILocation(line: 1892, column: 48, scope: !6778)
!7046 = !DILocation(line: 1892, column: 3, scope: !6778)
!7047 = !DILocation(line: 1893, column: 19, scope: !6778)
!7048 = !DILocation(line: 1893, column: 3, scope: !6778)
!7049 = !DILocation(line: 1893, column: 12, scope: !6778)
!7050 = !DILocation(line: 1893, column: 17, scope: !6778)
!7051 = !DILocation(line: 1894, column: 28, scope: !6778)
!7052 = !DILocation(line: 1894, column: 3, scope: !6778)
!7053 = !DILocation(line: 1894, column: 12, scope: !6778)
!7054 = !DILocation(line: 1894, column: 26, scope: !6778)
!7055 = !DILocation(line: 1896, column: 3, scope: !6778)
!7056 = !DILocation(line: 1897, column: 1, scope: !6778)
!7057 = distinct !DISubprogram(name: "noce_try_cmove", scope: !3, file: !3, line: 1268, type: !5380, scopeLine: 1269, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!7058 = !DILocalVariable(name: "if_info", arg: 1, scope: !7057, file: !3, line: 1268, type: !5382)
!7059 = !DILocation(line: 1268, column: 38, scope: !7057)
!7060 = !DILocalVariable(name: "code", scope: !7057, file: !3, line: 1270, type: !2301)
!7061 = !DILocation(line: 1270, column: 17, scope: !7057)
!7062 = !DILocalVariable(name: "target", scope: !7057, file: !3, line: 1271, type: !2577)
!7063 = !DILocation(line: 1271, column: 7, scope: !7057)
!7064 = !DILocalVariable(name: "seq", scope: !7057, file: !3, line: 1271, type: !2577)
!7065 = !DILocation(line: 1271, column: 15, scope: !7057)
!7066 = !DILocation(line: 1273, column: 8, scope: !7067)
!7067 = distinct !DILexicalBlock(scope: !7057, file: !3, line: 1273, column: 7)
!7068 = !DILocation(line: 1273, column: 32, scope: !7067)
!7069 = !DILocation(line: 1273, column: 53, scope: !7067)
!7070 = !DILocation(line: 1273, column: 62, scope: !7067)
!7071 = !DILocation(line: 1273, column: 35, scope: !7067)
!7072 = !DILocation(line: 1274, column: 7, scope: !7067)
!7073 = !DILocation(line: 1274, column: 11, scope: !7067)
!7074 = !DILocation(line: 1274, column: 35, scope: !7067)
!7075 = !DILocation(line: 1274, column: 56, scope: !7067)
!7076 = !DILocation(line: 1274, column: 65, scope: !7067)
!7077 = !DILocation(line: 1274, column: 38, scope: !7067)
!7078 = !DILocation(line: 1273, column: 7, scope: !7057)
!7079 = !DILocation(line: 1276, column: 7, scope: !7080)
!7080 = distinct !DILexicalBlock(scope: !7067, file: !3, line: 1275, column: 5)
!7081 = !DILocation(line: 1278, column: 14, scope: !7080)
!7082 = !DILocation(line: 1278, column: 12, scope: !7080)
!7083 = !DILocation(line: 1279, column: 33, scope: !7080)
!7084 = !DILocation(line: 1279, column: 42, scope: !7080)
!7085 = !DILocation(line: 1279, column: 51, scope: !7080)
!7086 = !DILocation(line: 1279, column: 54, scope: !7080)
!7087 = !DILocation(line: 1280, column: 5, scope: !7080)
!7088 = !DILocation(line: 1281, column: 5, scope: !7080)
!7089 = !DILocation(line: 1282, column: 5, scope: !7080)
!7090 = !DILocation(line: 1282, column: 14, scope: !7080)
!7091 = !DILocation(line: 1282, column: 17, scope: !7080)
!7092 = !DILocation(line: 1282, column: 26, scope: !7080)
!7093 = !DILocation(line: 1279, column: 16, scope: !7080)
!7094 = !DILocation(line: 1279, column: 14, scope: !7080)
!7095 = !DILocation(line: 1284, column: 11, scope: !7096)
!7096 = distinct !DILexicalBlock(scope: !7080, file: !3, line: 1284, column: 11)
!7097 = !DILocation(line: 1284, column: 11, scope: !7080)
!7098 = !DILocation(line: 1286, column: 8, scope: !7099)
!7099 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1286, column: 8)
!7100 = distinct !DILexicalBlock(scope: !7096, file: !3, line: 1285, column: 2)
!7101 = !DILocation(line: 1286, column: 18, scope: !7099)
!7102 = !DILocation(line: 1286, column: 27, scope: !7099)
!7103 = !DILocation(line: 1286, column: 15, scope: !7099)
!7104 = !DILocation(line: 1286, column: 8, scope: !7100)
!7105 = !DILocation(line: 1287, column: 27, scope: !7099)
!7106 = !DILocation(line: 1287, column: 36, scope: !7099)
!7107 = !DILocation(line: 1287, column: 39, scope: !7099)
!7108 = !DILocation(line: 1287, column: 6, scope: !7099)
!7109 = !DILocation(line: 1289, column: 30, scope: !7100)
!7110 = !DILocation(line: 1289, column: 10, scope: !7100)
!7111 = !DILocation(line: 1289, column: 8, scope: !7100)
!7112 = !DILocation(line: 1290, column: 9, scope: !7113)
!7113 = distinct !DILexicalBlock(scope: !7100, file: !3, line: 1290, column: 8)
!7114 = !DILocation(line: 1290, column: 8, scope: !7100)
!7115 = !DILocation(line: 1291, column: 6, scope: !7113)
!7116 = !DILocation(line: 1293, column: 29, scope: !7100)
!7117 = !DILocation(line: 1293, column: 34, scope: !7100)
!7118 = !DILocation(line: 1293, column: 43, scope: !7100)
!7119 = !DILocation(line: 1294, column: 8, scope: !7100)
!7120 = !DILocation(line: 1293, column: 4, scope: !7100)
!7121 = !DILocation(line: 1295, column: 4, scope: !7100)
!7122 = !DILocation(line: 1299, column: 4, scope: !7123)
!7123 = distinct !DILexicalBlock(scope: !7096, file: !3, line: 1298, column: 2)
!7124 = !DILocation(line: 1300, column: 4, scope: !7123)
!7125 = !DILocation(line: 1304, column: 3, scope: !7057)
!7126 = !DILocation(line: 1305, column: 1, scope: !7057)
!7127 = distinct !DISubprogram(name: "noce_try_store_flag_constants", scope: !3, file: !3, line: 945, type: !5380, scopeLine: 946, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!7128 = !DILocalVariable(name: "if_info", arg: 1, scope: !7127, file: !3, line: 945, type: !5382)
!7129 = !DILocation(line: 945, column: 53, scope: !7127)
!7130 = !DILocalVariable(name: "target", scope: !7127, file: !3, line: 947, type: !2577)
!7131 = !DILocation(line: 947, column: 7, scope: !7127)
!7132 = !DILocalVariable(name: "seq", scope: !7127, file: !3, line: 947, type: !2577)
!7133 = !DILocation(line: 947, column: 15, scope: !7127)
!7134 = !DILocalVariable(name: "reversep", scope: !7127, file: !3, line: 948, type: !2545)
!7135 = !DILocation(line: 948, column: 7, scope: !7127)
!7136 = !DILocalVariable(name: "itrue", scope: !7127, file: !3, line: 949, type: !2666)
!7137 = !DILocation(line: 949, column: 17, scope: !7127)
!7138 = !DILocalVariable(name: "ifalse", scope: !7127, file: !3, line: 949, type: !2666)
!7139 = !DILocation(line: 949, column: 24, scope: !7127)
!7140 = !DILocalVariable(name: "diff", scope: !7127, file: !3, line: 949, type: !2666)
!7141 = !DILocation(line: 949, column: 32, scope: !7127)
!7142 = !DILocalVariable(name: "tmp", scope: !7127, file: !3, line: 949, type: !2666)
!7143 = !DILocation(line: 949, column: 38, scope: !7127)
!7144 = !DILocalVariable(name: "normalize", scope: !7127, file: !3, line: 950, type: !2545)
!7145 = !DILocation(line: 950, column: 7, scope: !7127)
!7146 = !DILocalVariable(name: "can_reverse", scope: !7127, file: !3, line: 950, type: !2545)
!7147 = !DILocation(line: 950, column: 18, scope: !7127)
!7148 = !DILocalVariable(name: "mode", scope: !7127, file: !3, line: 951, type: !231)
!7149 = !DILocation(line: 951, column: 21, scope: !7127)
!7150 = !DILocation(line: 953, column: 7, scope: !7151)
!7151 = distinct !DILexicalBlock(scope: !7127, file: !3, line: 953, column: 7)
!7152 = !DILocation(line: 954, column: 7, scope: !7151)
!7153 = !DILocation(line: 954, column: 10, scope: !7151)
!7154 = !DILocation(line: 953, column: 7, scope: !7127)
!7155 = !DILocation(line: 956, column: 14, scope: !7156)
!7156 = distinct !DILexicalBlock(scope: !7151, file: !3, line: 955, column: 5)
!7157 = !DILocation(line: 956, column: 12, scope: !7156)
!7158 = !DILocation(line: 957, column: 16, scope: !7156)
!7159 = !DILocation(line: 957, column: 14, scope: !7156)
!7160 = !DILocation(line: 958, column: 15, scope: !7156)
!7161 = !DILocation(line: 958, column: 13, scope: !7156)
!7162 = !DILocation(line: 961, column: 12, scope: !7163)
!7163 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 961, column: 11)
!7164 = !DILocation(line: 961, column: 20, scope: !7163)
!7165 = !DILocation(line: 961, column: 18, scope: !7163)
!7166 = !DILocation(line: 961, column: 27, scope: !7163)
!7167 = !DILocation(line: 962, column: 9, scope: !7163)
!7168 = !DILocation(line: 962, column: 16, scope: !7163)
!7169 = !DILocation(line: 962, column: 25, scope: !7163)
!7170 = !DILocation(line: 962, column: 31, scope: !7163)
!7171 = !DILocation(line: 962, column: 21, scope: !7163)
!7172 = !DILocation(line: 962, column: 8, scope: !7163)
!7173 = !DILocation(line: 962, column: 38, scope: !7163)
!7174 = !DILocation(line: 962, column: 45, scope: !7163)
!7175 = !DILocation(line: 962, column: 51, scope: !7163)
!7176 = !DILocation(line: 962, column: 60, scope: !7163)
!7177 = !DILocation(line: 962, column: 58, scope: !7163)
!7178 = !DILocation(line: 962, column: 4, scope: !7163)
!7179 = !DILocation(line: 961, column: 11, scope: !7156)
!7180 = !DILocation(line: 963, column: 2, scope: !7163)
!7181 = !DILocation(line: 965, column: 34, scope: !7156)
!7182 = !DILocation(line: 965, column: 42, scope: !7156)
!7183 = !DILocation(line: 965, column: 40, scope: !7156)
!7184 = !DILocation(line: 965, column: 50, scope: !7156)
!7185 = !DILocation(line: 965, column: 14, scope: !7156)
!7186 = !DILocation(line: 965, column: 12, scope: !7156)
!7187 = !DILocation(line: 967, column: 48, scope: !7156)
!7188 = !DILocation(line: 967, column: 57, scope: !7156)
!7189 = !DILocation(line: 967, column: 63, scope: !7156)
!7190 = !DILocation(line: 967, column: 72, scope: !7156)
!7191 = !DILocation(line: 967, column: 22, scope: !7156)
!7192 = !DILocation(line: 968, column: 8, scope: !7156)
!7193 = !DILocation(line: 967, column: 19, scope: !7156)
!7194 = !DILocation(line: 970, column: 16, scope: !7156)
!7195 = !DILocation(line: 971, column: 11, scope: !7196)
!7196 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 971, column: 11)
!7197 = !DILocation(line: 971, column: 16, scope: !7196)
!7198 = !DILocation(line: 971, column: 36, scope: !7196)
!7199 = !DILocation(line: 971, column: 39, scope: !7196)
!7200 = !DILocation(line: 971, column: 44, scope: !7196)
!7201 = !DILocation(line: 971, column: 11, scope: !7156)
!7202 = !DILocation(line: 972, column: 12, scope: !7196)
!7203 = !DILocation(line: 972, column: 2, scope: !7196)
!7204 = !DILocation(line: 973, column: 16, scope: !7205)
!7205 = distinct !DILexicalBlock(scope: !7196, file: !3, line: 973, column: 16)
!7206 = !DILocation(line: 973, column: 23, scope: !7205)
!7207 = !DILocation(line: 973, column: 28, scope: !7205)
!7208 = !DILocation(line: 973, column: 43, scope: !7205)
!7209 = !DILocation(line: 973, column: 31, scope: !7205)
!7210 = !DILocation(line: 973, column: 50, scope: !7205)
!7211 = !DILocation(line: 973, column: 16, scope: !7196)
!7212 = !DILocation(line: 976, column: 12, scope: !7205)
!7213 = !DILocation(line: 976, column: 2, scope: !7205)
!7214 = !DILocation(line: 977, column: 16, scope: !7215)
!7215 = distinct !DILexicalBlock(scope: !7205, file: !3, line: 977, column: 16)
!7216 = !DILocation(line: 977, column: 22, scope: !7215)
!7217 = !DILocation(line: 977, column: 27, scope: !7215)
!7218 = !DILocation(line: 977, column: 42, scope: !7215)
!7219 = !DILocation(line: 977, column: 30, scope: !7215)
!7220 = !DILocation(line: 977, column: 50, scope: !7215)
!7221 = !DILocation(line: 977, column: 55, scope: !7215)
!7222 = !DILocation(line: 977, column: 58, scope: !7215)
!7223 = !DILocation(line: 977, column: 16, scope: !7205)
!7224 = !DILocation(line: 979, column: 12, scope: !7215)
!7225 = !DILocation(line: 979, column: 26, scope: !7215)
!7226 = !DILocation(line: 979, column: 2, scope: !7215)
!7227 = !DILocation(line: 980, column: 16, scope: !7228)
!7228 = distinct !DILexicalBlock(scope: !7215, file: !3, line: 980, column: 16)
!7229 = !DILocation(line: 980, column: 22, scope: !7228)
!7230 = !DILocation(line: 981, column: 9, scope: !7228)
!7231 = !DILocation(line: 982, column: 9, scope: !7228)
!7232 = !DILocation(line: 982, column: 18, scope: !7228)
!7233 = !DILocation(line: 982, column: 30, scope: !7228)
!7234 = !DILocation(line: 980, column: 16, scope: !7215)
!7235 = !DILocation(line: 983, column: 12, scope: !7228)
!7236 = !DILocation(line: 983, column: 2, scope: !7228)
!7237 = !DILocation(line: 984, column: 16, scope: !7238)
!7238 = distinct !DILexicalBlock(scope: !7228, file: !3, line: 984, column: 16)
!7239 = !DILocation(line: 984, column: 23, scope: !7238)
!7240 = !DILocation(line: 984, column: 29, scope: !7238)
!7241 = !DILocation(line: 984, column: 32, scope: !7238)
!7242 = !DILocation(line: 985, column: 9, scope: !7238)
!7243 = !DILocation(line: 985, column: 39, scope: !7238)
!7244 = !DILocation(line: 985, column: 48, scope: !7238)
!7245 = !DILocation(line: 985, column: 60, scope: !7238)
!7246 = !DILocation(line: 984, column: 16, scope: !7228)
!7247 = !DILocation(line: 986, column: 12, scope: !7238)
!7248 = !DILocation(line: 986, column: 27, scope: !7238)
!7249 = !DILocation(line: 986, column: 2, scope: !7238)
!7250 = !DILocation(line: 987, column: 17, scope: !7251)
!7251 = distinct !DILexicalBlock(scope: !7238, file: !3, line: 987, column: 16)
!7252 = !DILocation(line: 987, column: 26, scope: !7251)
!7253 = !DILocation(line: 987, column: 38, scope: !7251)
!7254 = !DILocation(line: 987, column: 43, scope: !7251)
!7255 = !DILocation(line: 988, column: 9, scope: !7251)
!7256 = !DILocation(line: 988, column: 12, scope: !7251)
!7257 = !DILocation(line: 988, column: 21, scope: !7251)
!7258 = !DILocation(line: 988, column: 33, scope: !7251)
!7259 = !DILocation(line: 987, column: 16, scope: !7238)
!7260 = !DILocation(line: 989, column: 12, scope: !7251)
!7261 = !DILocation(line: 989, column: 2, scope: !7251)
!7262 = !DILocation(line: 991, column: 2, scope: !7251)
!7263 = !DILocation(line: 993, column: 11, scope: !7264)
!7264 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 993, column: 11)
!7265 = !DILocation(line: 993, column: 11, scope: !7156)
!7266 = !DILocation(line: 995, column: 10, scope: !7267)
!7267 = distinct !DILexicalBlock(scope: !7264, file: !3, line: 994, column: 2)
!7268 = !DILocation(line: 995, column: 8, scope: !7267)
!7269 = !DILocation(line: 995, column: 25, scope: !7267)
!7270 = !DILocation(line: 995, column: 23, scope: !7267)
!7271 = !DILocation(line: 995, column: 42, scope: !7267)
!7272 = !DILocation(line: 995, column: 40, scope: !7267)
!7273 = !DILocation(line: 996, column: 32, scope: !7267)
!7274 = !DILocation(line: 996, column: 31, scope: !7267)
!7275 = !DILocation(line: 996, column: 38, scope: !7267)
!7276 = !DILocation(line: 996, column: 11, scope: !7267)
!7277 = !DILocation(line: 996, column: 9, scope: !7267)
!7278 = !DILocation(line: 997, column: 2, scope: !7267)
!7279 = !DILocation(line: 999, column: 7, scope: !7156)
!7280 = !DILocation(line: 1000, column: 38, scope: !7156)
!7281 = !DILocation(line: 1000, column: 47, scope: !7156)
!7282 = !DILocation(line: 1000, column: 56, scope: !7156)
!7283 = !DILocation(line: 1000, column: 59, scope: !7156)
!7284 = !DILocation(line: 1000, column: 69, scope: !7156)
!7285 = !DILocation(line: 1000, column: 16, scope: !7156)
!7286 = !DILocation(line: 1000, column: 14, scope: !7156)
!7287 = !DILocation(line: 1001, column: 13, scope: !7288)
!7288 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 1001, column: 11)
!7289 = !DILocation(line: 1001, column: 11, scope: !7156)
!7290 = !DILocation(line: 1003, column: 4, scope: !7291)
!7291 = distinct !DILexicalBlock(scope: !7288, file: !3, line: 1002, column: 2)
!7292 = !DILocation(line: 1004, column: 4, scope: !7291)
!7293 = !DILocation(line: 1009, column: 11, scope: !7294)
!7294 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 1009, column: 11)
!7295 = !DILocation(line: 1009, column: 16, scope: !7294)
!7296 = !DILocation(line: 1009, column: 36, scope: !7294)
!7297 = !DILocation(line: 1009, column: 39, scope: !7294)
!7298 = !DILocation(line: 1009, column: 44, scope: !7294)
!7299 = !DILocation(line: 1009, column: 11, scope: !7156)
!7300 = !DILocation(line: 1011, column: 34, scope: !7301)
!7301 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 1010, column: 2)
!7302 = !DILocation(line: 1012, column: 7, scope: !7301)
!7303 = !DILocation(line: 1012, column: 12, scope: !7301)
!7304 = !DILocation(line: 1014, column: 6, scope: !7301)
!7305 = !DILocation(line: 1014, column: 24, scope: !7301)
!7306 = !DILocation(line: 1014, column: 32, scope: !7301)
!7307 = !DILocation(line: 1014, column: 41, scope: !7301)
!7308 = !DILocation(line: 1011, column: 13, scope: !7301)
!7309 = !DILocation(line: 1011, column: 11, scope: !7301)
!7310 = !DILocation(line: 1016, column: 2, scope: !7301)
!7311 = !DILocation(line: 1020, column: 16, scope: !7312)
!7312 = distinct !DILexicalBlock(scope: !7294, file: !3, line: 1020, column: 16)
!7313 = !DILocation(line: 1020, column: 23, scope: !7312)
!7314 = !DILocation(line: 1020, column: 28, scope: !7312)
!7315 = !DILocation(line: 1020, column: 50, scope: !7312)
!7316 = !DILocation(line: 1020, column: 38, scope: !7312)
!7317 = !DILocation(line: 1020, column: 36, scope: !7312)
!7318 = !DILocation(line: 1020, column: 58, scope: !7312)
!7319 = !DILocation(line: 1020, column: 16, scope: !7294)
!7320 = !DILocation(line: 1022, column: 34, scope: !7321)
!7321 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 1021, column: 2)
!7322 = !DILocation(line: 1023, column: 6, scope: !7321)
!7323 = !DILocation(line: 1023, column: 14, scope: !7321)
!7324 = !DILocation(line: 1023, column: 29, scope: !7321)
!7325 = !DILocation(line: 1023, column: 38, scope: !7321)
!7326 = !DILocation(line: 1022, column: 13, scope: !7321)
!7327 = !DILocation(line: 1022, column: 11, scope: !7321)
!7328 = !DILocation(line: 1025, column: 2, scope: !7321)
!7329 = !DILocation(line: 1029, column: 16, scope: !7330)
!7330 = distinct !DILexicalBlock(scope: !7312, file: !3, line: 1029, column: 16)
!7331 = !DILocation(line: 1029, column: 22, scope: !7330)
!7332 = !DILocation(line: 1029, column: 16, scope: !7312)
!7333 = !DILocation(line: 1031, column: 34, scope: !7334)
!7334 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 1030, column: 2)
!7335 = !DILocation(line: 1032, column: 6, scope: !7334)
!7336 = !DILocation(line: 1032, column: 14, scope: !7334)
!7337 = !DILocation(line: 1032, column: 32, scope: !7334)
!7338 = !DILocation(line: 1032, column: 41, scope: !7334)
!7339 = !DILocation(line: 1031, column: 13, scope: !7334)
!7340 = !DILocation(line: 1031, column: 11, scope: !7334)
!7341 = !DILocation(line: 1034, column: 2, scope: !7334)
!7342 = !DILocation(line: 1040, column: 34, scope: !7343)
!7343 = distinct !DILexicalBlock(scope: !7330, file: !3, line: 1039, column: 2)
!7344 = !DILocation(line: 1041, column: 6, scope: !7343)
!7345 = !DILocation(line: 1041, column: 14, scope: !7343)
!7346 = !DILocation(line: 1041, column: 30, scope: !7343)
!7347 = !DILocation(line: 1041, column: 39, scope: !7343)
!7348 = !DILocation(line: 1040, column: 13, scope: !7343)
!7349 = !DILocation(line: 1040, column: 11, scope: !7343)
!7350 = !DILocation(line: 1043, column: 8, scope: !7351)
!7351 = distinct !DILexicalBlock(scope: !7343, file: !3, line: 1043, column: 8)
!7352 = !DILocation(line: 1043, column: 8, scope: !7343)
!7353 = !DILocation(line: 1044, column: 36, scope: !7351)
!7354 = !DILocation(line: 1045, column: 8, scope: !7351)
!7355 = !DILocation(line: 1045, column: 16, scope: !7351)
!7356 = !DILocation(line: 1046, column: 8, scope: !7351)
!7357 = !DILocation(line: 1046, column: 17, scope: !7351)
!7358 = !DILocation(line: 1044, column: 15, scope: !7351)
!7359 = !DILocation(line: 1044, column: 13, scope: !7351)
!7360 = !DILocation(line: 1044, column: 6, scope: !7351)
!7361 = !DILocation(line: 1049, column: 13, scope: !7362)
!7362 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 1049, column: 11)
!7363 = !DILocation(line: 1049, column: 11, scope: !7156)
!7364 = !DILocation(line: 1051, column: 4, scope: !7365)
!7365 = distinct !DILexicalBlock(scope: !7362, file: !3, line: 1050, column: 2)
!7366 = !DILocation(line: 1052, column: 4, scope: !7365)
!7367 = !DILocation(line: 1055, column: 11, scope: !7368)
!7368 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 1055, column: 11)
!7369 = !DILocation(line: 1055, column: 21, scope: !7368)
!7370 = !DILocation(line: 1055, column: 30, scope: !7368)
!7371 = !DILocation(line: 1055, column: 18, scope: !7368)
!7372 = !DILocation(line: 1055, column: 11, scope: !7156)
!7373 = !DILocation(line: 1056, column: 23, scope: !7368)
!7374 = !DILocation(line: 1056, column: 32, scope: !7368)
!7375 = !DILocation(line: 1056, column: 35, scope: !7368)
!7376 = !DILocation(line: 1056, column: 2, scope: !7368)
!7377 = !DILocation(line: 1058, column: 33, scope: !7156)
!7378 = !DILocation(line: 1058, column: 13, scope: !7156)
!7379 = !DILocation(line: 1058, column: 11, scope: !7156)
!7380 = !DILocation(line: 1059, column: 12, scope: !7381)
!7381 = distinct !DILexicalBlock(scope: !7156, file: !3, line: 1059, column: 11)
!7382 = !DILocation(line: 1059, column: 11, scope: !7156)
!7383 = !DILocation(line: 1060, column: 2, scope: !7381)
!7384 = !DILocation(line: 1062, column: 32, scope: !7156)
!7385 = !DILocation(line: 1062, column: 37, scope: !7156)
!7386 = !DILocation(line: 1062, column: 46, scope: !7156)
!7387 = !DILocation(line: 1063, column: 11, scope: !7156)
!7388 = !DILocation(line: 1062, column: 7, scope: !7156)
!7389 = !DILocation(line: 1064, column: 7, scope: !7156)
!7390 = !DILocation(line: 1067, column: 3, scope: !7127)
!7391 = !DILocation(line: 1068, column: 1, scope: !7127)
!7392 = distinct !DISubprogram(name: "noce_try_addcc", scope: !3, file: !3, line: 1074, type: !5380, scopeLine: 1075, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!7393 = !DILocalVariable(name: "if_info", arg: 1, scope: !7392, file: !3, line: 1074, type: !5382)
!7394 = !DILocation(line: 1074, column: 38, scope: !7392)
!7395 = !DILocalVariable(name: "target", scope: !7392, file: !3, line: 1076, type: !2577)
!7396 = !DILocation(line: 1076, column: 7, scope: !7392)
!7397 = !DILocalVariable(name: "seq", scope: !7392, file: !3, line: 1076, type: !2577)
!7398 = !DILocation(line: 1076, column: 15, scope: !7392)
!7399 = !DILocalVariable(name: "subtract", scope: !7392, file: !3, line: 1077, type: !2545)
!7400 = !DILocation(line: 1077, column: 7, scope: !7392)
!7401 = !DILocalVariable(name: "normalize", scope: !7392, file: !3, line: 1077, type: !2545)
!7402 = !DILocation(line: 1077, column: 17, scope: !7392)
!7403 = !DILocation(line: 1079, column: 7, scope: !7404)
!7404 = distinct !DILexicalBlock(scope: !7392, file: !3, line: 1079, column: 7)
!7405 = !DILocation(line: 1079, column: 29, scope: !7404)
!7406 = !DILocation(line: 1080, column: 7, scope: !7404)
!7407 = !DILocation(line: 1080, column: 23, scope: !7404)
!7408 = !DILocation(line: 1080, column: 45, scope: !7404)
!7409 = !DILocation(line: 1080, column: 54, scope: !7404)
!7410 = !DILocation(line: 1080, column: 10, scope: !7404)
!7411 = !DILocation(line: 1081, column: 7, scope: !7404)
!7412 = !DILocation(line: 1081, column: 37, scope: !7404)
!7413 = !DILocation(line: 1081, column: 46, scope: !7404)
!7414 = !DILocation(line: 1081, column: 52, scope: !7404)
!7415 = !DILocation(line: 1081, column: 61, scope: !7404)
!7416 = !DILocation(line: 1081, column: 11, scope: !7404)
!7417 = !DILocation(line: 1082, column: 4, scope: !7404)
!7418 = !DILocation(line: 1079, column: 7, scope: !7392)
!7419 = !DILocalVariable(name: "cond", scope: !7420, file: !3, line: 1084, type: !2577)
!7420 = distinct !DILexicalBlock(scope: !7404, file: !3, line: 1083, column: 5)
!7421 = !DILocation(line: 1084, column: 11, scope: !7420)
!7422 = !DILocation(line: 1084, column: 18, scope: !7420)
!7423 = !DILocation(line: 1084, column: 27, scope: !7420)
!7424 = !DILocalVariable(name: "code", scope: !7420, file: !3, line: 1085, type: !2301)
!7425 = !DILocation(line: 1085, column: 21, scope: !7420)
!7426 = !DILocation(line: 1085, column: 54, scope: !7420)
!7427 = !DILocation(line: 1085, column: 60, scope: !7420)
!7428 = !DILocation(line: 1085, column: 69, scope: !7420)
!7429 = !DILocation(line: 1085, column: 28, scope: !7420)
!7430 = !DILocation(line: 1088, column: 28, scope: !7431)
!7431 = distinct !DILexicalBlock(scope: !7420, file: !3, line: 1088, column: 11)
!7432 = !DILocation(line: 1088, column: 11, scope: !7431)
!7433 = !DILocation(line: 1089, column: 4, scope: !7431)
!7434 = !DILocation(line: 1089, column: 24, scope: !7431)
!7435 = !DILocation(line: 1089, column: 7, scope: !7431)
!7436 = !DILocation(line: 1088, column: 11, scope: !7420)
!7437 = !DILocation(line: 1091, column: 4, scope: !7438)
!7438 = distinct !DILexicalBlock(scope: !7431, file: !3, line: 1090, column: 2)
!7439 = !DILocation(line: 1092, column: 35, scope: !7438)
!7440 = !DILocation(line: 1092, column: 44, scope: !7438)
!7441 = !DILocation(line: 1092, column: 47, scope: !7438)
!7442 = !DILocation(line: 1093, column: 7, scope: !7438)
!7443 = !DILocation(line: 1094, column: 7, scope: !7438)
!7444 = !DILocation(line: 1096, column: 7, scope: !7438)
!7445 = !DILocation(line: 1096, column: 16, scope: !7438)
!7446 = !DILocation(line: 1097, column: 7, scope: !7438)
!7447 = !DILocation(line: 1098, column: 7, scope: !7438)
!7448 = !DILocation(line: 1099, column: 8, scope: !7438)
!7449 = !DILocation(line: 1099, column: 13, scope: !7438)
!7450 = !DILocation(line: 1099, column: 20, scope: !7438)
!7451 = !DILocation(line: 1099, column: 23, scope: !7438)
!7452 = !DILocation(line: 1099, column: 28, scope: !7438)
!7453 = !DILocation(line: 1100, column: 8, scope: !7438)
!7454 = !DILocation(line: 1100, column: 11, scope: !7438)
!7455 = !DILocation(line: 1100, column: 16, scope: !7438)
!7456 = !DILocation(line: 1100, column: 23, scope: !7438)
!7457 = !DILocation(line: 1100, column: 26, scope: !7438)
!7458 = !DILocation(line: 1100, column: 31, scope: !7438)
!7459 = !DILocation(line: 1092, column: 13, scope: !7438)
!7460 = !DILocation(line: 1092, column: 11, scope: !7438)
!7461 = !DILocation(line: 1101, column: 8, scope: !7462)
!7462 = distinct !DILexicalBlock(scope: !7438, file: !3, line: 1101, column: 8)
!7463 = !DILocation(line: 1101, column: 8, scope: !7438)
!7464 = !DILocation(line: 1103, column: 12, scope: !7465)
!7465 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 1103, column: 12)
!7466 = distinct !DILexicalBlock(scope: !7462, file: !3, line: 1102, column: 6)
!7467 = !DILocation(line: 1103, column: 22, scope: !7465)
!7468 = !DILocation(line: 1103, column: 31, scope: !7465)
!7469 = !DILocation(line: 1103, column: 19, scope: !7465)
!7470 = !DILocation(line: 1103, column: 12, scope: !7466)
!7471 = !DILocation(line: 1104, column: 24, scope: !7465)
!7472 = !DILocation(line: 1104, column: 33, scope: !7465)
!7473 = !DILocation(line: 1104, column: 36, scope: !7465)
!7474 = !DILocation(line: 1104, column: 3, scope: !7465)
!7475 = !DILocation(line: 1106, column: 34, scope: !7466)
!7476 = !DILocation(line: 1106, column: 14, scope: !7466)
!7477 = !DILocation(line: 1106, column: 12, scope: !7466)
!7478 = !DILocation(line: 1107, column: 13, scope: !7479)
!7479 = distinct !DILexicalBlock(scope: !7466, file: !3, line: 1107, column: 12)
!7480 = !DILocation(line: 1107, column: 12, scope: !7466)
!7481 = !DILocation(line: 1108, column: 3, scope: !7479)
!7482 = !DILocation(line: 1110, column: 33, scope: !7466)
!7483 = !DILocation(line: 1110, column: 38, scope: !7466)
!7484 = !DILocation(line: 1110, column: 47, scope: !7466)
!7485 = !DILocation(line: 1111, column: 12, scope: !7466)
!7486 = !DILocation(line: 1110, column: 8, scope: !7466)
!7487 = !DILocation(line: 1112, column: 8, scope: !7466)
!7488 = !DILocation(line: 1114, column: 4, scope: !7438)
!7489 = !DILocation(line: 1115, column: 2, scope: !7438)
!7490 = !DILocation(line: 1119, column: 11, scope: !7491)
!7491 = distinct !DILexicalBlock(scope: !7420, file: !3, line: 1119, column: 11)
!7492 = !DILocation(line: 1119, column: 20, scope: !7491)
!7493 = !DILocation(line: 1119, column: 32, scope: !7491)
!7494 = !DILocation(line: 1120, column: 4, scope: !7491)
!7495 = !DILocation(line: 1120, column: 8, scope: !7491)
!7496 = !DILocation(line: 1120, column: 32, scope: !7491)
!7497 = !DILocation(line: 1120, column: 29, scope: !7491)
!7498 = !DILocation(line: 1121, column: 8, scope: !7491)
!7499 = !DILocation(line: 1121, column: 11, scope: !7491)
!7500 = !DILocation(line: 1121, column: 35, scope: !7491)
!7501 = !DILocation(line: 1121, column: 32, scope: !7491)
!7502 = !DILocation(line: 1119, column: 11, scope: !7420)
!7503 = !DILocation(line: 1123, column: 4, scope: !7504)
!7504 = distinct !DILexicalBlock(scope: !7491, file: !3, line: 1122, column: 9)
!7505 = !DILocation(line: 1124, column: 28, scope: !7506)
!7506 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1124, column: 8)
!7507 = !DILocation(line: 1124, column: 25, scope: !7506)
!7508 = !DILocation(line: 1124, column: 8, scope: !7504)
!7509 = !DILocation(line: 1125, column: 15, scope: !7506)
!7510 = !DILocation(line: 1125, column: 30, scope: !7506)
!7511 = !DILocation(line: 1125, column: 6, scope: !7506)
!7512 = !DILocation(line: 1126, column: 34, scope: !7513)
!7513 = distinct !DILexicalBlock(scope: !7506, file: !3, line: 1126, column: 13)
!7514 = !DILocation(line: 1126, column: 31, scope: !7513)
!7515 = !DILocation(line: 1126, column: 13, scope: !7506)
!7516 = !DILocation(line: 1127, column: 15, scope: !7513)
!7517 = !DILocation(line: 1127, column: 30, scope: !7513)
!7518 = !DILocation(line: 1127, column: 6, scope: !7513)
!7519 = !DILocation(line: 1129, column: 15, scope: !7513)
!7520 = !DILocation(line: 1129, column: 32, scope: !7513)
!7521 = !DILocation(line: 1129, column: 30, scope: !7513)
!7522 = !DILocation(line: 1132, column: 35, scope: !7504)
!7523 = !DILocation(line: 1133, column: 20, scope: !7504)
!7524 = !DILocation(line: 1133, column: 7, scope: !7504)
!7525 = !DILocation(line: 1134, column: 10, scope: !7504)
!7526 = !DILocation(line: 1132, column: 13, scope: !7504)
!7527 = !DILocation(line: 1132, column: 11, scope: !7504)
!7528 = !DILocation(line: 1136, column: 8, scope: !7529)
!7529 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1136, column: 8)
!7530 = !DILocation(line: 1136, column: 8, scope: !7504)
!7531 = !DILocation(line: 1137, column: 36, scope: !7529)
!7532 = !DILocation(line: 1138, column: 8, scope: !7529)
!7533 = !DILocation(line: 1139, column: 8, scope: !7529)
!7534 = !DILocation(line: 1139, column: 17, scope: !7529)
!7535 = !DILocation(line: 1139, column: 20, scope: !7529)
!7536 = !DILocation(line: 1139, column: 28, scope: !7529)
!7537 = !DILocation(line: 1139, column: 37, scope: !7529)
!7538 = !DILocation(line: 1137, column: 15, scope: !7529)
!7539 = !DILocation(line: 1137, column: 13, scope: !7529)
!7540 = !DILocation(line: 1137, column: 6, scope: !7529)
!7541 = !DILocation(line: 1141, column: 8, scope: !7542)
!7542 = distinct !DILexicalBlock(scope: !7504, file: !3, line: 1141, column: 8)
!7543 = !DILocation(line: 1141, column: 8, scope: !7504)
!7544 = !DILocation(line: 1143, column: 12, scope: !7545)
!7545 = distinct !DILexicalBlock(scope: !7546, file: !3, line: 1143, column: 12)
!7546 = distinct !DILexicalBlock(scope: !7542, file: !3, line: 1142, column: 6)
!7547 = !DILocation(line: 1143, column: 22, scope: !7545)
!7548 = !DILocation(line: 1143, column: 31, scope: !7545)
!7549 = !DILocation(line: 1143, column: 19, scope: !7545)
!7550 = !DILocation(line: 1143, column: 12, scope: !7546)
!7551 = !DILocation(line: 1144, column: 24, scope: !7545)
!7552 = !DILocation(line: 1144, column: 33, scope: !7545)
!7553 = !DILocation(line: 1144, column: 36, scope: !7545)
!7554 = !DILocation(line: 1144, column: 3, scope: !7545)
!7555 = !DILocation(line: 1146, column: 34, scope: !7546)
!7556 = !DILocation(line: 1146, column: 14, scope: !7546)
!7557 = !DILocation(line: 1146, column: 12, scope: !7546)
!7558 = !DILocation(line: 1147, column: 13, scope: !7559)
!7559 = distinct !DILexicalBlock(scope: !7546, file: !3, line: 1147, column: 12)
!7560 = !DILocation(line: 1147, column: 12, scope: !7546)
!7561 = !DILocation(line: 1148, column: 3, scope: !7559)
!7562 = !DILocation(line: 1150, column: 33, scope: !7546)
!7563 = !DILocation(line: 1150, column: 38, scope: !7546)
!7564 = !DILocation(line: 1150, column: 47, scope: !7546)
!7565 = !DILocation(line: 1151, column: 12, scope: !7546)
!7566 = !DILocation(line: 1150, column: 8, scope: !7546)
!7567 = !DILocation(line: 1152, column: 8, scope: !7546)
!7568 = !DILocation(line: 1154, column: 4, scope: !7504)
!7569 = !DILocation(line: 1155, column: 2, scope: !7504)
!7570 = !DILocation(line: 1156, column: 5, scope: !7420)
!7571 = !DILocation(line: 1158, column: 3, scope: !7392)
!7572 = !DILocation(line: 1159, column: 1, scope: !7392)
!7573 = distinct !DISubprogram(name: "noce_try_store_flag_mask", scope: !3, file: !3, line: 1164, type: !5380, scopeLine: 1165, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!7574 = !DILocalVariable(name: "if_info", arg: 1, scope: !7573, file: !3, line: 1164, type: !5382)
!7575 = !DILocation(line: 1164, column: 48, scope: !7573)
!7576 = !DILocalVariable(name: "target", scope: !7573, file: !3, line: 1166, type: !2577)
!7577 = !DILocation(line: 1166, column: 7, scope: !7573)
!7578 = !DILocalVariable(name: "seq", scope: !7573, file: !3, line: 1166, type: !2577)
!7579 = !DILocation(line: 1166, column: 15, scope: !7573)
!7580 = !DILocalVariable(name: "reversep", scope: !7573, file: !3, line: 1167, type: !2545)
!7581 = !DILocation(line: 1167, column: 7, scope: !7573)
!7582 = !DILocation(line: 1169, column: 12, scope: !7573)
!7583 = !DILocation(line: 1170, column: 8, scope: !7584)
!7584 = distinct !DILexicalBlock(scope: !7573, file: !3, line: 1170, column: 7)
!7585 = !DILocation(line: 1170, column: 17, scope: !7584)
!7586 = !DILocation(line: 1170, column: 29, scope: !7584)
!7587 = !DILocation(line: 1172, column: 7, scope: !7584)
!7588 = !DILocation(line: 1172, column: 12, scope: !7584)
!7589 = !DILocation(line: 1172, column: 21, scope: !7584)
!7590 = !DILocation(line: 1172, column: 26, scope: !7584)
!7591 = !DILocation(line: 1172, column: 23, scope: !7584)
!7592 = !DILocation(line: 1173, column: 5, scope: !7584)
!7593 = !DILocation(line: 1173, column: 21, scope: !7584)
!7594 = !DILocation(line: 1173, column: 30, scope: !7584)
!7595 = !DILocation(line: 1173, column: 33, scope: !7584)
!7596 = !DILocation(line: 1173, column: 42, scope: !7584)
!7597 = !DILocation(line: 1173, column: 8, scope: !7584)
!7598 = !DILocation(line: 1174, column: 4, scope: !7584)
!7599 = !DILocation(line: 1174, column: 47, scope: !7584)
!7600 = !DILocation(line: 1174, column: 56, scope: !7584)
!7601 = !DILocation(line: 1175, column: 12, scope: !7584)
!7602 = !DILocation(line: 1175, column: 21, scope: !7584)
!7603 = !DILocation(line: 1174, column: 21, scope: !7584)
!7604 = !DILocation(line: 1176, column: 7, scope: !7584)
!7605 = !DILocation(line: 1174, column: 18, scope: !7584)
!7606 = !DILocation(line: 1177, column: 8, scope: !7584)
!7607 = !DILocation(line: 1177, column: 11, scope: !7584)
!7608 = !DILocation(line: 1177, column: 20, scope: !7584)
!7609 = !DILocation(line: 1177, column: 25, scope: !7584)
!7610 = !DILocation(line: 1177, column: 22, scope: !7584)
!7611 = !DILocation(line: 1178, column: 8, scope: !7584)
!7612 = !DILocation(line: 1178, column: 24, scope: !7584)
!7613 = !DILocation(line: 1178, column: 33, scope: !7584)
!7614 = !DILocation(line: 1178, column: 36, scope: !7584)
!7615 = !DILocation(line: 1178, column: 45, scope: !7584)
!7616 = !DILocation(line: 1178, column: 11, scope: !7584)
!7617 = !DILocation(line: 1170, column: 7, scope: !7573)
!7618 = !DILocation(line: 1180, column: 7, scope: !7619)
!7619 = distinct !DILexicalBlock(scope: !7584, file: !3, line: 1179, column: 5)
!7620 = !DILocation(line: 1181, column: 38, scope: !7619)
!7621 = !DILocation(line: 1182, column: 23, scope: !7619)
!7622 = !DILocation(line: 1182, column: 10, scope: !7619)
!7623 = !DILocation(line: 1183, column: 10, scope: !7619)
!7624 = !DILocation(line: 1181, column: 16, scope: !7619)
!7625 = !DILocation(line: 1181, column: 14, scope: !7619)
!7626 = !DILocation(line: 1184, column: 11, scope: !7627)
!7627 = distinct !DILexicalBlock(scope: !7619, file: !3, line: 1184, column: 11)
!7628 = !DILocation(line: 1184, column: 11, scope: !7619)
!7629 = !DILocation(line: 1185, column: 39, scope: !7627)
!7630 = !DILocation(line: 1186, column: 11, scope: !7627)
!7631 = !DILocation(line: 1186, column: 20, scope: !7627)
!7632 = !DILocation(line: 1187, column: 11, scope: !7627)
!7633 = !DILocation(line: 1187, column: 19, scope: !7627)
!7634 = !DILocation(line: 1187, column: 28, scope: !7627)
!7635 = !DILocation(line: 1185, column: 18, scope: !7627)
!7636 = !DILocation(line: 1185, column: 16, scope: !7627)
!7637 = !DILocation(line: 1185, column: 9, scope: !7627)
!7638 = !DILocation(line: 1190, column: 11, scope: !7639)
!7639 = distinct !DILexicalBlock(scope: !7619, file: !3, line: 1190, column: 11)
!7640 = !DILocation(line: 1190, column: 11, scope: !7619)
!7641 = !DILocation(line: 1192, column: 8, scope: !7642)
!7642 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 1192, column: 8)
!7643 = distinct !DILexicalBlock(scope: !7639, file: !3, line: 1191, column: 2)
!7644 = !DILocation(line: 1192, column: 18, scope: !7642)
!7645 = !DILocation(line: 1192, column: 27, scope: !7642)
!7646 = !DILocation(line: 1192, column: 15, scope: !7642)
!7647 = !DILocation(line: 1192, column: 8, scope: !7643)
!7648 = !DILocation(line: 1193, column: 27, scope: !7642)
!7649 = !DILocation(line: 1193, column: 36, scope: !7642)
!7650 = !DILocation(line: 1193, column: 39, scope: !7642)
!7651 = !DILocation(line: 1193, column: 6, scope: !7642)
!7652 = !DILocation(line: 1195, column: 30, scope: !7643)
!7653 = !DILocation(line: 1195, column: 10, scope: !7643)
!7654 = !DILocation(line: 1195, column: 8, scope: !7643)
!7655 = !DILocation(line: 1196, column: 9, scope: !7656)
!7656 = distinct !DILexicalBlock(scope: !7643, file: !3, line: 1196, column: 8)
!7657 = !DILocation(line: 1196, column: 8, scope: !7643)
!7658 = !DILocation(line: 1197, column: 6, scope: !7656)
!7659 = !DILocation(line: 1199, column: 29, scope: !7643)
!7660 = !DILocation(line: 1199, column: 34, scope: !7643)
!7661 = !DILocation(line: 1199, column: 43, scope: !7643)
!7662 = !DILocation(line: 1200, column: 8, scope: !7643)
!7663 = !DILocation(line: 1199, column: 4, scope: !7643)
!7664 = !DILocation(line: 1201, column: 4, scope: !7643)
!7665 = !DILocation(line: 1204, column: 7, scope: !7619)
!7666 = !DILocation(line: 1205, column: 5, scope: !7619)
!7667 = !DILocation(line: 1207, column: 3, scope: !7573)
!7668 = !DILocation(line: 1208, column: 1, scope: !7573)
!7669 = distinct !DISubprogram(name: "noce_try_cmove_arith", scope: !3, file: !3, line: 1310, type: !5380, scopeLine: 1311, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!7670 = !DILocalVariable(name: "if_info", arg: 1, scope: !7669, file: !3, line: 1310, type: !5382)
!7671 = !DILocation(line: 1310, column: 44, scope: !7669)
!7672 = !DILocalVariable(name: "a", scope: !7669, file: !3, line: 1312, type: !2577)
!7673 = !DILocation(line: 1312, column: 7, scope: !7669)
!7674 = !DILocation(line: 1312, column: 11, scope: !7669)
!7675 = !DILocation(line: 1312, column: 20, scope: !7669)
!7676 = !DILocalVariable(name: "b", scope: !7669, file: !3, line: 1313, type: !2577)
!7677 = !DILocation(line: 1313, column: 7, scope: !7669)
!7678 = !DILocation(line: 1313, column: 11, scope: !7669)
!7679 = !DILocation(line: 1313, column: 20, scope: !7669)
!7680 = !DILocalVariable(name: "x", scope: !7669, file: !3, line: 1314, type: !2577)
!7681 = !DILocation(line: 1314, column: 7, scope: !7669)
!7682 = !DILocation(line: 1314, column: 11, scope: !7669)
!7683 = !DILocation(line: 1314, column: 20, scope: !7669)
!7684 = !DILocalVariable(name: "orig_a", scope: !7669, file: !3, line: 1315, type: !2577)
!7685 = !DILocation(line: 1315, column: 7, scope: !7669)
!7686 = !DILocalVariable(name: "orig_b", scope: !7669, file: !3, line: 1315, type: !2577)
!7687 = !DILocation(line: 1315, column: 15, scope: !7669)
!7688 = !DILocalVariable(name: "insn_a", scope: !7669, file: !3, line: 1316, type: !2577)
!7689 = !DILocation(line: 1316, column: 7, scope: !7669)
!7690 = !DILocalVariable(name: "insn_b", scope: !7669, file: !3, line: 1316, type: !2577)
!7691 = !DILocation(line: 1316, column: 15, scope: !7669)
!7692 = !DILocalVariable(name: "tmp", scope: !7669, file: !3, line: 1317, type: !2577)
!7693 = !DILocation(line: 1317, column: 7, scope: !7669)
!7694 = !DILocalVariable(name: "target", scope: !7669, file: !3, line: 1317, type: !2577)
!7695 = !DILocation(line: 1317, column: 12, scope: !7669)
!7696 = !DILocalVariable(name: "is_mem", scope: !7669, file: !3, line: 1318, type: !2545)
!7697 = !DILocation(line: 1318, column: 7, scope: !7669)
!7698 = !DILocalVariable(name: "insn_cost", scope: !7669, file: !3, line: 1319, type: !2545)
!7699 = !DILocation(line: 1319, column: 7, scope: !7669)
!7700 = !DILocalVariable(name: "code", scope: !7669, file: !3, line: 1320, type: !2301)
!7701 = !DILocation(line: 1320, column: 17, scope: !7669)
!7702 = !DILocation(line: 1327, column: 7, scope: !7703)
!7703 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1327, column: 7)
!7704 = !DILocation(line: 1328, column: 7, scope: !7703)
!7705 = !DILocation(line: 1328, column: 10, scope: !7703)
!7706 = !DILocation(line: 1328, column: 20, scope: !7703)
!7707 = !DILocation(line: 1328, column: 23, scope: !7703)
!7708 = !DILocation(line: 1329, column: 7, scope: !7703)
!7709 = !DILocation(line: 1329, column: 10, scope: !7703)
!7710 = !DILocation(line: 1329, column: 32, scope: !7703)
!7711 = !DILocation(line: 1329, column: 29, scope: !7703)
!7712 = !DILocation(line: 1330, column: 7, scope: !7703)
!7713 = !DILocation(line: 1330, column: 10, scope: !7703)
!7714 = !DILocation(line: 1330, column: 19, scope: !7703)
!7715 = !DILocation(line: 1330, column: 31, scope: !7703)
!7716 = !DILocation(line: 1327, column: 7, scope: !7669)
!7717 = !DILocalVariable(name: "address_mode", scope: !7718, file: !3, line: 1332, type: !231)
!7718 = distinct !DILexicalBlock(scope: !7703, file: !3, line: 1331, column: 5)
!7719 = !DILocation(line: 1332, column: 25, scope: !7718)
!7720 = !DILocation(line: 1333, column: 23, scope: !7718)
!7721 = !DILocation(line: 1333, column: 37, scope: !7718)
!7722 = !DILocation(line: 1333, column: 4, scope: !7718)
!7723 = !DILocation(line: 1335, column: 11, scope: !7718)
!7724 = !DILocation(line: 1335, column: 9, scope: !7718)
!7725 = !DILocation(line: 1336, column: 11, scope: !7718)
!7726 = !DILocation(line: 1336, column: 9, scope: !7718)
!7727 = !DILocation(line: 1337, column: 24, scope: !7718)
!7728 = !DILocation(line: 1337, column: 11, scope: !7718)
!7729 = !DILocation(line: 1337, column: 9, scope: !7718)
!7730 = !DILocation(line: 1338, column: 14, scope: !7718)
!7731 = !DILocation(line: 1339, column: 5, scope: !7718)
!7732 = !DILocation(line: 1344, column: 24, scope: !7733)
!7733 = distinct !DILexicalBlock(scope: !7703, file: !3, line: 1344, column: 12)
!7734 = !DILocation(line: 1344, column: 12, scope: !7733)
!7735 = !DILocation(line: 1344, column: 27, scope: !7733)
!7736 = !DILocation(line: 1344, column: 42, scope: !7733)
!7737 = !DILocation(line: 1344, column: 30, scope: !7733)
!7738 = !DILocation(line: 1344, column: 12, scope: !7703)
!7739 = !DILocation(line: 1345, column: 5, scope: !7733)
!7740 = !DILocation(line: 1354, column: 10, scope: !7669)
!7741 = !DILocation(line: 1354, column: 8, scope: !7669)
!7742 = !DILocation(line: 1355, column: 12, scope: !7669)
!7743 = !DILocation(line: 1355, column: 21, scope: !7669)
!7744 = !DILocation(line: 1355, column: 10, scope: !7669)
!7745 = !DILocation(line: 1356, column: 12, scope: !7669)
!7746 = !DILocation(line: 1356, column: 21, scope: !7669)
!7747 = !DILocation(line: 1356, column: 10, scope: !7669)
!7748 = !DILocation(line: 1360, column: 7, scope: !7749)
!7749 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1360, column: 7)
!7750 = !DILocation(line: 1360, column: 7, scope: !7669)
!7751 = !DILocation(line: 1362, column: 34, scope: !7752)
!7752 = distinct !DILexicalBlock(scope: !7749, file: !3, line: 1361, column: 5)
!7753 = !DILocation(line: 1363, column: 37, scope: !7752)
!7754 = !DILocation(line: 1363, column: 12, scope: !7752)
!7755 = !DILocation(line: 1362, column: 19, scope: !7752)
!7756 = !DILocation(line: 1362, column: 17, scope: !7752)
!7757 = !DILocation(line: 1364, column: 11, scope: !7758)
!7758 = distinct !DILexicalBlock(scope: !7752, file: !3, line: 1364, column: 11)
!7759 = !DILocation(line: 1364, column: 21, scope: !7758)
!7760 = !DILocation(line: 1364, column: 26, scope: !7758)
!7761 = !DILocation(line: 1364, column: 29, scope: !7758)
!7762 = !DILocation(line: 1364, column: 41, scope: !7758)
!7763 = !DILocation(line: 1364, column: 39, scope: !7758)
!7764 = !DILocation(line: 1364, column: 11, scope: !7752)
!7765 = !DILocation(line: 1365, column: 2, scope: !7758)
!7766 = !DILocation(line: 1366, column: 5, scope: !7752)
!7767 = !DILocation(line: 1368, column: 15, scope: !7749)
!7768 = !DILocation(line: 1370, column: 7, scope: !7769)
!7769 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1370, column: 7)
!7770 = !DILocation(line: 1370, column: 7, scope: !7669)
!7771 = !DILocation(line: 1372, column: 35, scope: !7772)
!7772 = distinct !DILexicalBlock(scope: !7769, file: !3, line: 1371, column: 5)
!7773 = !DILocation(line: 1373, column: 37, scope: !7772)
!7774 = !DILocation(line: 1373, column: 12, scope: !7772)
!7775 = !DILocation(line: 1372, column: 20, scope: !7772)
!7776 = !DILocation(line: 1372, column: 17, scope: !7772)
!7777 = !DILocation(line: 1374, column: 11, scope: !7778)
!7778 = distinct !DILexicalBlock(scope: !7772, file: !3, line: 1374, column: 11)
!7779 = !DILocation(line: 1374, column: 21, scope: !7778)
!7780 = !DILocation(line: 1374, column: 26, scope: !7778)
!7781 = !DILocation(line: 1374, column: 29, scope: !7778)
!7782 = !DILocation(line: 1374, column: 41, scope: !7778)
!7783 = !DILocation(line: 1374, column: 39, scope: !7778)
!7784 = !DILocation(line: 1374, column: 11, scope: !7772)
!7785 = !DILocation(line: 1375, column: 9, scope: !7778)
!7786 = !DILocation(line: 1376, column: 5, scope: !7772)
!7787 = !DILocation(line: 1379, column: 33, scope: !7788)
!7788 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1379, column: 7)
!7789 = !DILocation(line: 1379, column: 42, scope: !7788)
!7790 = !DILocation(line: 1379, column: 48, scope: !7788)
!7791 = !DILocation(line: 1379, column: 57, scope: !7788)
!7792 = !DILocation(line: 1379, column: 7, scope: !7788)
!7793 = !DILocation(line: 1379, column: 63, scope: !7788)
!7794 = !DILocation(line: 1379, column: 7, scope: !7669)
!7795 = !DILocalVariable(name: "reversep", scope: !7796, file: !3, line: 1381, type: !2545)
!7796 = distinct !DILexicalBlock(scope: !7788, file: !3, line: 1380, column: 5)
!7797 = !DILocation(line: 1381, column: 11, scope: !7796)
!7798 = !DILocation(line: 1382, column: 24, scope: !7799)
!7799 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 1382, column: 11)
!7800 = !DILocation(line: 1382, column: 27, scope: !7799)
!7801 = !DILocation(line: 1382, column: 11, scope: !7799)
!7802 = !DILocation(line: 1382, column: 11, scope: !7796)
!7803 = !DILocation(line: 1383, column: 11, scope: !7799)
!7804 = !DILocation(line: 1383, column: 2, scope: !7799)
!7805 = !DILocation(line: 1384, column: 33, scope: !7806)
!7806 = distinct !DILexicalBlock(scope: !7799, file: !3, line: 1384, column: 16)
!7807 = !DILocation(line: 1384, column: 36, scope: !7806)
!7808 = !DILocation(line: 1384, column: 16, scope: !7806)
!7809 = !DILocation(line: 1384, column: 16, scope: !7799)
!7810 = !DILocation(line: 1385, column: 11, scope: !7806)
!7811 = !DILocation(line: 1385, column: 2, scope: !7806)
!7812 = !DILocation(line: 1387, column: 11, scope: !7813)
!7813 = distinct !DILexicalBlock(scope: !7796, file: !3, line: 1387, column: 11)
!7814 = !DILocation(line: 1387, column: 11, scope: !7796)
!7815 = !DILocation(line: 1389, column: 37, scope: !7816)
!7816 = distinct !DILexicalBlock(scope: !7813, file: !3, line: 1388, column: 2)
!7817 = !DILocation(line: 1389, column: 46, scope: !7816)
!7818 = !DILocation(line: 1389, column: 52, scope: !7816)
!7819 = !DILocation(line: 1389, column: 61, scope: !7816)
!7820 = !DILocation(line: 1389, column: 11, scope: !7816)
!7821 = !DILocation(line: 1389, column: 9, scope: !7816)
!7822 = !DILocation(line: 1390, column: 10, scope: !7816)
!7823 = !DILocation(line: 1390, column: 8, scope: !7816)
!7824 = !DILocation(line: 1390, column: 17, scope: !7816)
!7825 = !DILocation(line: 1390, column: 15, scope: !7816)
!7826 = !DILocation(line: 1390, column: 24, scope: !7816)
!7827 = !DILocation(line: 1390, column: 22, scope: !7816)
!7828 = !DILocation(line: 1391, column: 10, scope: !7816)
!7829 = !DILocation(line: 1391, column: 8, scope: !7816)
!7830 = !DILocation(line: 1391, column: 27, scope: !7816)
!7831 = !DILocation(line: 1391, column: 25, scope: !7816)
!7832 = !DILocation(line: 1391, column: 44, scope: !7816)
!7833 = !DILocation(line: 1391, column: 42, scope: !7816)
!7834 = !DILocation(line: 1392, column: 2, scope: !7816)
!7835 = !DILocation(line: 1393, column: 5, scope: !7796)
!7836 = !DILocation(line: 1395, column: 3, scope: !7669)
!7837 = !DILocation(line: 1397, column: 12, scope: !7669)
!7838 = !DILocation(line: 1397, column: 10, scope: !7669)
!7839 = !DILocation(line: 1398, column: 12, scope: !7669)
!7840 = !DILocation(line: 1398, column: 10, scope: !7669)
!7841 = !DILocation(line: 1404, column: 26, scope: !7842)
!7842 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1404, column: 7)
!7843 = !DILocation(line: 1404, column: 29, scope: !7842)
!7844 = !DILocation(line: 1404, column: 9, scope: !7842)
!7845 = !DILocation(line: 1404, column: 7, scope: !7669)
!7846 = !DILocalVariable(name: "set", scope: !7847, file: !3, line: 1406, type: !2577)
!7847 = distinct !DILexicalBlock(scope: !7842, file: !3, line: 1405, column: 5)
!7848 = !DILocation(line: 1406, column: 11, scope: !7847)
!7849 = !DILocation(line: 1408, column: 11, scope: !7850)
!7850 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 1408, column: 11)
!7851 = !DILocation(line: 1408, column: 11, scope: !7847)
!7852 = !DILocation(line: 1410, column: 23, scope: !7853)
!7853 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 1409, column: 2)
!7854 = !DILocation(line: 1410, column: 10, scope: !7853)
!7855 = !DILocation(line: 1410, column: 8, scope: !7853)
!7856 = !DILocation(line: 1411, column: 21, scope: !7853)
!7857 = !DILocation(line: 1411, column: 10, scope: !7853)
!7858 = !DILocation(line: 1411, column: 8, scope: !7853)
!7859 = !DILocation(line: 1412, column: 2, scope: !7853)
!7860 = !DILocation(line: 1413, column: 18, scope: !7861)
!7861 = distinct !DILexicalBlock(scope: !7850, file: !3, line: 1413, column: 16)
!7862 = !DILocation(line: 1413, column: 16, scope: !7850)
!7863 = !DILocation(line: 1414, column: 2, scope: !7861)
!7864 = !DILocation(line: 1417, column: 21, scope: !7865)
!7865 = distinct !DILexicalBlock(scope: !7861, file: !3, line: 1416, column: 2)
!7866 = !DILocation(line: 1417, column: 8, scope: !7865)
!7867 = !DILocation(line: 1417, column: 6, scope: !7865)
!7868 = !DILocation(line: 1418, column: 20, scope: !7865)
!7869 = !DILocation(line: 1418, column: 10, scope: !7865)
!7870 = !DILocation(line: 1418, column: 8, scope: !7865)
!7871 = !DILocation(line: 1419, column: 10, scope: !7865)
!7872 = !DILocation(line: 1419, column: 8, scope: !7865)
!7873 = !DILocation(line: 1420, column: 21, scope: !7865)
!7874 = !DILocation(line: 1420, column: 4, scope: !7865)
!7875 = !DILocation(line: 1420, column: 19, scope: !7865)
!7876 = !DILocation(line: 1421, column: 21, scope: !7865)
!7877 = !DILocation(line: 1421, column: 10, scope: !7865)
!7878 = !DILocation(line: 1421, column: 8, scope: !7865)
!7879 = !DILocation(line: 1423, column: 27, scope: !7880)
!7880 = distinct !DILexicalBlock(scope: !7847, file: !3, line: 1423, column: 11)
!7881 = !DILocation(line: 1423, column: 11, scope: !7880)
!7882 = !DILocation(line: 1423, column: 32, scope: !7880)
!7883 = !DILocation(line: 1423, column: 11, scope: !7847)
!7884 = !DILocation(line: 1424, column: 2, scope: !7880)
!7885 = !DILocation(line: 1425, column: 5, scope: !7847)
!7886 = !DILocation(line: 1426, column: 26, scope: !7887)
!7887 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1426, column: 7)
!7888 = !DILocation(line: 1426, column: 29, scope: !7887)
!7889 = !DILocation(line: 1426, column: 9, scope: !7887)
!7890 = !DILocation(line: 1426, column: 7, scope: !7669)
!7891 = !DILocalVariable(name: "set", scope: !7892, file: !3, line: 1428, type: !2577)
!7892 = distinct !DILexicalBlock(scope: !7887, file: !3, line: 1427, column: 5)
!7893 = !DILocation(line: 1428, column: 11, scope: !7892)
!7894 = !DILocalVariable(name: "last", scope: !7892, file: !3, line: 1428, type: !2577)
!7895 = !DILocation(line: 1428, column: 16, scope: !7892)
!7896 = !DILocation(line: 1430, column: 11, scope: !7897)
!7897 = distinct !DILexicalBlock(scope: !7892, file: !3, line: 1430, column: 11)
!7898 = !DILocation(line: 1430, column: 11, scope: !7892)
!7899 = !DILocation(line: 1432, column: 30, scope: !7900)
!7900 = distinct !DILexicalBlock(scope: !7897, file: !3, line: 1431, column: 2)
!7901 = !DILocation(line: 1432, column: 17, scope: !7900)
!7902 = !DILocation(line: 1432, column: 15, scope: !7900)
!7903 = !DILocation(line: 1433, column: 10, scope: !7900)
!7904 = !DILocation(line: 1433, column: 8, scope: !7900)
!7905 = !DILocation(line: 1434, column: 2, scope: !7900)
!7906 = !DILocation(line: 1435, column: 18, scope: !7907)
!7907 = distinct !DILexicalBlock(scope: !7897, file: !3, line: 1435, column: 16)
!7908 = !DILocation(line: 1435, column: 16, scope: !7897)
!7909 = !DILocation(line: 1436, column: 2, scope: !7907)
!7910 = !DILocation(line: 1439, column: 28, scope: !7911)
!7911 = distinct !DILexicalBlock(scope: !7907, file: !3, line: 1438, column: 2)
!7912 = !DILocation(line: 1439, column: 15, scope: !7911)
!7913 = !DILocation(line: 1439, column: 13, scope: !7911)
!7914 = !DILocation(line: 1440, column: 20, scope: !7911)
!7915 = !DILocation(line: 1440, column: 10, scope: !7911)
!7916 = !DILocation(line: 1440, column: 8, scope: !7911)
!7917 = !DILocation(line: 1441, column: 10, scope: !7911)
!7918 = !DILocation(line: 1441, column: 8, scope: !7911)
!7919 = !DILocation(line: 1442, column: 21, scope: !7911)
!7920 = !DILocation(line: 1442, column: 4, scope: !7911)
!7921 = !DILocation(line: 1442, column: 19, scope: !7911)
!7922 = !DILocation(line: 1443, column: 10, scope: !7911)
!7923 = !DILocation(line: 1443, column: 8, scope: !7911)
!7924 = !DILocation(line: 1449, column: 14, scope: !7892)
!7925 = !DILocation(line: 1449, column: 12, scope: !7892)
!7926 = !DILocation(line: 1450, column: 11, scope: !7927)
!7927 = distinct !DILexicalBlock(scope: !7892, file: !3, line: 1450, column: 11)
!7928 = !DILocation(line: 1450, column: 16, scope: !7927)
!7929 = !DILocation(line: 1450, column: 34, scope: !7927)
!7930 = !DILocation(line: 1450, column: 42, scope: !7927)
!7931 = !DILocation(line: 1450, column: 19, scope: !7927)
!7932 = !DILocation(line: 1450, column: 11, scope: !7892)
!7933 = !DILocation(line: 1452, column: 28, scope: !7934)
!7934 = distinct !DILexicalBlock(scope: !7927, file: !3, line: 1451, column: 2)
!7935 = !DILocation(line: 1452, column: 33, scope: !7934)
!7936 = !DILocation(line: 1452, column: 10, scope: !7934)
!7937 = !DILocation(line: 1452, column: 8, scope: !7934)
!7938 = !DILocation(line: 1453, column: 23, scope: !7939)
!7939 = distinct !DILexicalBlock(scope: !7934, file: !3, line: 1453, column: 8)
!7940 = !DILocation(line: 1453, column: 31, scope: !7939)
!7941 = !DILocation(line: 1453, column: 8, scope: !7939)
!7942 = !DILocation(line: 1453, column: 8, scope: !7934)
!7943 = !DILocation(line: 1454, column: 6, scope: !7939)
!7944 = !DILocation(line: 1455, column: 2, scope: !7934)
!7945 = !DILocation(line: 1457, column: 19, scope: !7927)
!7946 = !DILocation(line: 1457, column: 8, scope: !7927)
!7947 = !DILocation(line: 1457, column: 6, scope: !7927)
!7948 = !DILocation(line: 1459, column: 27, scope: !7949)
!7949 = distinct !DILexicalBlock(scope: !7892, file: !3, line: 1459, column: 11)
!7950 = !DILocation(line: 1459, column: 11, scope: !7949)
!7951 = !DILocation(line: 1459, column: 32, scope: !7949)
!7952 = !DILocation(line: 1459, column: 11, scope: !7892)
!7953 = !DILocation(line: 1460, column: 2, scope: !7949)
!7954 = !DILocation(line: 1461, column: 5, scope: !7892)
!7955 = !DILocation(line: 1463, column: 29, scope: !7669)
!7956 = !DILocation(line: 1463, column: 38, scope: !7669)
!7957 = !DILocation(line: 1463, column: 41, scope: !7669)
!7958 = !DILocation(line: 1463, column: 47, scope: !7669)
!7959 = !DILocation(line: 1464, column: 8, scope: !7669)
!7960 = !DILocation(line: 1464, column: 33, scope: !7669)
!7961 = !DILocation(line: 1464, column: 36, scope: !7669)
!7962 = !DILocation(line: 1463, column: 12, scope: !7669)
!7963 = !DILocation(line: 1463, column: 10, scope: !7669)
!7964 = !DILocation(line: 1466, column: 9, scope: !7965)
!7965 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1466, column: 7)
!7966 = !DILocation(line: 1466, column: 7, scope: !7669)
!7967 = !DILocation(line: 1467, column: 5, scope: !7965)
!7968 = !DILocation(line: 1470, column: 7, scope: !7969)
!7969 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1470, column: 7)
!7970 = !DILocation(line: 1470, column: 7, scope: !7669)
!7971 = !DILocation(line: 1472, column: 26, scope: !7972)
!7972 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 1471, column: 5)
!7973 = !DILocation(line: 1472, column: 49, scope: !7972)
!7974 = !DILocation(line: 1472, column: 13, scope: !7972)
!7975 = !DILocation(line: 1472, column: 11, scope: !7972)
!7976 = !DILocation(line: 1475, column: 11, scope: !7977)
!7977 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 1475, column: 11)
!7978 = !DILocation(line: 1475, column: 39, scope: !7977)
!7979 = !DILocation(line: 1475, column: 42, scope: !7977)
!7980 = !DILocation(line: 1475, column: 11, scope: !7972)
!7981 = !DILocation(line: 1476, column: 2, scope: !7977)
!7982 = !DILocation(line: 1476, column: 23, scope: !7977)
!7983 = !DILocation(line: 1477, column: 11, scope: !7984)
!7984 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 1477, column: 11)
!7985 = !DILocation(line: 1477, column: 40, scope: !7984)
!7986 = !DILocation(line: 1477, column: 43, scope: !7984)
!7987 = !DILocation(line: 1477, column: 11, scope: !7972)
!7988 = !DILocation(line: 1478, column: 2, scope: !7984)
!7989 = !DILocation(line: 1478, column: 24, scope: !7984)
!7990 = !DILocation(line: 1479, column: 11, scope: !7991)
!7991 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 1479, column: 11)
!7992 = !DILocation(line: 1479, column: 37, scope: !7991)
!7993 = !DILocation(line: 1479, column: 40, scope: !7991)
!7994 = !DILocation(line: 1479, column: 11, scope: !7972)
!7995 = !DILocation(line: 1480, column: 2, scope: !7991)
!7996 = !DILocation(line: 1480, column: 21, scope: !7991)
!7997 = !DILocation(line: 1481, column: 11, scope: !7998)
!7998 = distinct !DILexicalBlock(scope: !7972, file: !3, line: 1481, column: 11)
!7999 = !DILocation(line: 1481, column: 41, scope: !7998)
!8000 = !DILocation(line: 1481, column: 38, scope: !7998)
!8001 = !DILocation(line: 1481, column: 11, scope: !7972)
!8002 = !DILocation(line: 1482, column: 21, scope: !7998)
!8003 = !DILocation(line: 1482, column: 26, scope: !7998)
!8004 = !DILocation(line: 1482, column: 2, scope: !7998)
!8005 = !DILocation(line: 1483, column: 22, scope: !7972)
!8006 = !DILocation(line: 1484, column: 8, scope: !7972)
!8007 = !DILocation(line: 1483, column: 7, scope: !7972)
!8008 = !DILocation(line: 1486, column: 7, scope: !7972)
!8009 = !DILocation(line: 1487, column: 27, scope: !7972)
!8010 = !DILocation(line: 1487, column: 32, scope: !7972)
!8011 = !DILocation(line: 1487, column: 7, scope: !7972)
!8012 = !DILocation(line: 1489, column: 28, scope: !7972)
!8013 = !DILocation(line: 1489, column: 37, scope: !7972)
!8014 = !DILocation(line: 1489, column: 40, scope: !7972)
!8015 = !DILocation(line: 1489, column: 7, scope: !7972)
!8016 = !DILocation(line: 1490, column: 5, scope: !7972)
!8017 = !DILocation(line: 1491, column: 12, scope: !8018)
!8018 = distinct !DILexicalBlock(scope: !7969, file: !3, line: 1491, column: 12)
!8019 = !DILocation(line: 1491, column: 22, scope: !8018)
!8020 = !DILocation(line: 1491, column: 19, scope: !8018)
!8021 = !DILocation(line: 1491, column: 12, scope: !7969)
!8022 = !DILocation(line: 1492, column: 26, scope: !8018)
!8023 = !DILocation(line: 1492, column: 29, scope: !8018)
!8024 = !DILocation(line: 1492, column: 5, scope: !8018)
!8025 = !DILocation(line: 1494, column: 29, scope: !7669)
!8026 = !DILocation(line: 1494, column: 9, scope: !7669)
!8027 = !DILocation(line: 1494, column: 7, scope: !7669)
!8028 = !DILocation(line: 1495, column: 8, scope: !8029)
!8029 = distinct !DILexicalBlock(scope: !7669, file: !3, line: 1495, column: 7)
!8030 = !DILocation(line: 1495, column: 7, scope: !7669)
!8031 = !DILocation(line: 1496, column: 5, scope: !8029)
!8032 = !DILocation(line: 1498, column: 28, scope: !7669)
!8033 = !DILocation(line: 1498, column: 33, scope: !7669)
!8034 = !DILocation(line: 1498, column: 42, scope: !7669)
!8035 = !DILocation(line: 1498, column: 48, scope: !7669)
!8036 = !DILocation(line: 1498, column: 3, scope: !7669)
!8037 = !DILocation(line: 1499, column: 3, scope: !7669)
!8038 = !DILabel(scope: !7669, name: "end_seq_and_fail", file: !3, line: 1501)
!8039 = !DILocation(line: 1501, column: 2, scope: !7669)
!8040 = !DILocation(line: 1502, column: 3, scope: !7669)
!8041 = !DILocation(line: 1503, column: 3, scope: !7669)
!8042 = !DILocation(line: 1504, column: 1, scope: !7669)
!8043 = distinct !DISubprogram(name: "noce_try_sign_mask", scope: !3, file: !3, line: 1902, type: !5380, scopeLine: 1903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8044 = !DILocalVariable(name: "if_info", arg: 1, scope: !8043, file: !3, line: 1902, type: !5382)
!8045 = !DILocation(line: 1902, column: 42, scope: !8043)
!8046 = !DILocalVariable(name: "cond", scope: !8043, file: !3, line: 1904, type: !2577)
!8047 = !DILocation(line: 1904, column: 7, scope: !8043)
!8048 = !DILocalVariable(name: "t", scope: !8043, file: !3, line: 1904, type: !2577)
!8049 = !DILocation(line: 1904, column: 13, scope: !8043)
!8050 = !DILocalVariable(name: "m", scope: !8043, file: !3, line: 1904, type: !2577)
!8051 = !DILocation(line: 1904, column: 16, scope: !8043)
!8052 = !DILocalVariable(name: "c", scope: !8043, file: !3, line: 1904, type: !2577)
!8053 = !DILocation(line: 1904, column: 19, scope: !8043)
!8054 = !DILocalVariable(name: "seq", scope: !8043, file: !3, line: 1904, type: !2577)
!8055 = !DILocation(line: 1904, column: 22, scope: !8043)
!8056 = !DILocalVariable(name: "mode", scope: !8043, file: !3, line: 1905, type: !231)
!8057 = !DILocation(line: 1905, column: 21, scope: !8043)
!8058 = !DILocalVariable(name: "code", scope: !8043, file: !3, line: 1906, type: !2301)
!8059 = !DILocation(line: 1906, column: 17, scope: !8043)
!8060 = !DILocalVariable(name: "t_unconditional", scope: !8043, file: !3, line: 1907, type: !2809)
!8061 = !DILocation(line: 1907, column: 8, scope: !8043)
!8062 = !DILocation(line: 1909, column: 10, scope: !8043)
!8063 = !DILocation(line: 1909, column: 19, scope: !8043)
!8064 = !DILocation(line: 1909, column: 8, scope: !8043)
!8065 = !DILocation(line: 1910, column: 10, scope: !8043)
!8066 = !DILocation(line: 1910, column: 8, scope: !8043)
!8067 = !DILocation(line: 1911, column: 7, scope: !8043)
!8068 = !DILocation(line: 1911, column: 5, scope: !8043)
!8069 = !DILocation(line: 1912, column: 7, scope: !8043)
!8070 = !DILocation(line: 1912, column: 5, scope: !8043)
!8071 = !DILocation(line: 1914, column: 5, scope: !8043)
!8072 = !DILocation(line: 1915, column: 7, scope: !8073)
!8073 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1915, column: 7)
!8074 = !DILocation(line: 1915, column: 16, scope: !8073)
!8075 = !DILocation(line: 1915, column: 21, scope: !8073)
!8076 = !DILocation(line: 1915, column: 18, scope: !8073)
!8077 = !DILocation(line: 1915, column: 7, scope: !8043)
!8078 = !DILocation(line: 1917, column: 12, scope: !8079)
!8079 = distinct !DILexicalBlock(scope: !8080, file: !3, line: 1917, column: 11)
!8080 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 1916, column: 5)
!8081 = !DILocation(line: 1917, column: 17, scope: !8079)
!8082 = !DILocation(line: 1917, column: 23, scope: !8079)
!8083 = !DILocation(line: 1917, column: 26, scope: !8079)
!8084 = !DILocation(line: 1917, column: 31, scope: !8079)
!8085 = !DILocation(line: 1917, column: 28, scope: !8079)
!8086 = !DILocation(line: 1918, column: 4, scope: !8079)
!8087 = !DILocation(line: 1918, column: 8, scope: !8079)
!8088 = !DILocation(line: 1918, column: 13, scope: !8079)
!8089 = !DILocation(line: 1918, column: 19, scope: !8079)
!8090 = !DILocation(line: 1918, column: 22, scope: !8079)
!8091 = !DILocation(line: 1918, column: 27, scope: !8079)
!8092 = !DILocation(line: 1918, column: 24, scope: !8079)
!8093 = !DILocation(line: 1917, column: 11, scope: !8080)
!8094 = !DILocation(line: 1919, column: 6, scope: !8079)
!8095 = !DILocation(line: 1919, column: 15, scope: !8079)
!8096 = !DILocation(line: 1919, column: 4, scope: !8079)
!8097 = !DILocation(line: 1919, column: 2, scope: !8079)
!8098 = !DILocation(line: 1920, column: 5, scope: !8080)
!8099 = !DILocation(line: 1921, column: 12, scope: !8100)
!8100 = distinct !DILexicalBlock(scope: !8073, file: !3, line: 1921, column: 12)
!8101 = !DILocation(line: 1921, column: 21, scope: !8100)
!8102 = !DILocation(line: 1921, column: 26, scope: !8100)
!8103 = !DILocation(line: 1921, column: 23, scope: !8100)
!8104 = !DILocation(line: 1921, column: 12, scope: !8073)
!8105 = !DILocation(line: 1923, column: 12, scope: !8106)
!8106 = distinct !DILexicalBlock(scope: !8107, file: !3, line: 1923, column: 11)
!8107 = distinct !DILexicalBlock(scope: !8100, file: !3, line: 1922, column: 5)
!8108 = !DILocation(line: 1923, column: 17, scope: !8106)
!8109 = !DILocation(line: 1923, column: 23, scope: !8106)
!8110 = !DILocation(line: 1923, column: 26, scope: !8106)
!8111 = !DILocation(line: 1923, column: 31, scope: !8106)
!8112 = !DILocation(line: 1923, column: 28, scope: !8106)
!8113 = !DILocation(line: 1924, column: 4, scope: !8106)
!8114 = !DILocation(line: 1924, column: 8, scope: !8106)
!8115 = !DILocation(line: 1924, column: 13, scope: !8106)
!8116 = !DILocation(line: 1924, column: 19, scope: !8106)
!8117 = !DILocation(line: 1924, column: 22, scope: !8106)
!8118 = !DILocation(line: 1924, column: 27, scope: !8106)
!8119 = !DILocation(line: 1924, column: 24, scope: !8106)
!8120 = !DILocation(line: 1923, column: 11, scope: !8107)
!8121 = !DILocation(line: 1925, column: 6, scope: !8106)
!8122 = !DILocation(line: 1925, column: 15, scope: !8106)
!8123 = !DILocation(line: 1925, column: 4, scope: !8106)
!8124 = !DILocation(line: 1925, column: 2, scope: !8106)
!8125 = !DILocation(line: 1926, column: 5, scope: !8107)
!8126 = !DILocation(line: 1928, column: 9, scope: !8127)
!8127 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1928, column: 7)
!8128 = !DILocation(line: 1928, column: 11, scope: !8127)
!8129 = !DILocation(line: 1928, column: 30, scope: !8127)
!8130 = !DILocation(line: 1928, column: 14, scope: !8127)
!8131 = !DILocation(line: 1928, column: 7, scope: !8043)
!8132 = !DILocation(line: 1929, column: 5, scope: !8127)
!8133 = !DILocation(line: 1932, column: 10, scope: !8043)
!8134 = !DILocation(line: 1932, column: 8, scope: !8043)
!8135 = !DILocation(line: 1933, column: 7, scope: !8136)
!8136 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1933, column: 7)
!8137 = !DILocation(line: 1933, column: 23, scope: !8136)
!8138 = !DILocation(line: 1933, column: 20, scope: !8136)
!8139 = !DILocation(line: 1933, column: 7, scope: !8043)
!8140 = !DILocation(line: 1934, column: 5, scope: !8136)
!8141 = !DILocation(line: 1943, column: 6, scope: !8043)
!8142 = !DILocation(line: 1943, column: 11, scope: !8043)
!8143 = !DILocation(line: 1943, column: 20, scope: !8043)
!8144 = !DILocation(line: 1943, column: 8, scope: !8043)
!8145 = !DILocation(line: 1944, column: 6, scope: !8043)
!8146 = !DILocation(line: 1944, column: 10, scope: !8043)
!8147 = !DILocation(line: 1944, column: 19, scope: !8043)
!8148 = !DILocation(line: 1944, column: 26, scope: !8043)
!8149 = !DILocation(line: 1945, column: 3, scope: !8043)
!8150 = !DILocation(line: 1945, column: 6, scope: !8043)
!8151 = !DILocation(line: 1945, column: 42, scope: !8043)
!8152 = !DILocation(line: 1945, column: 51, scope: !8043)
!8153 = !DILocation(line: 1945, column: 39, scope: !8043)
!8154 = !DILocation(line: 0, scope: !8043)
!8155 = !DILocation(line: 1943, column: 5, scope: !8043)
!8156 = !DILocation(line: 1942, column: 19, scope: !8043)
!8157 = !DILocation(line: 1946, column: 9, scope: !8158)
!8158 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1946, column: 7)
!8159 = !DILocation(line: 1947, column: 2, scope: !8158)
!8160 = !DILocation(line: 1947, column: 16, scope: !8158)
!8161 = !DILocation(line: 1947, column: 49, scope: !8158)
!8162 = !DILocation(line: 1947, column: 58, scope: !8158)
!8163 = !DILocation(line: 1947, column: 24, scope: !8158)
!8164 = !DILocation(line: 1947, column: 6, scope: !8158)
!8165 = !DILocation(line: 1948, column: 6, scope: !8158)
!8166 = !DILocation(line: 1946, column: 7, scope: !8043)
!8167 = !DILocation(line: 1949, column: 5, scope: !8158)
!8168 = !DILocation(line: 1951, column: 3, scope: !8043)
!8169 = !DILocation(line: 1955, column: 37, scope: !8043)
!8170 = !DILocation(line: 1955, column: 24, scope: !8043)
!8171 = !DILocation(line: 1955, column: 48, scope: !8043)
!8172 = !DILocation(line: 1955, column: 51, scope: !8043)
!8173 = !DILocation(line: 1955, column: 63, scope: !8043)
!8174 = !DILocation(line: 1955, column: 7, scope: !8043)
!8175 = !DILocation(line: 1955, column: 5, scope: !8043)
!8176 = !DILocation(line: 1956, column: 7, scope: !8043)
!8177 = !DILocation(line: 1956, column: 25, scope: !8043)
!8178 = !DILocation(line: 1956, column: 42, scope: !8043)
!8179 = !DILocation(line: 1956, column: 45, scope: !8043)
!8180 = !DILocation(line: 1956, column: 11, scope: !8043)
!8181 = !DILocation(line: 1956, column: 5, scope: !8043)
!8182 = !DILocation(line: 1959, column: 8, scope: !8183)
!8183 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1959, column: 7)
!8184 = !DILocation(line: 1959, column: 7, scope: !8043)
!8185 = !DILocation(line: 1961, column: 7, scope: !8186)
!8186 = distinct !DILexicalBlock(scope: !8183, file: !3, line: 1960, column: 5)
!8187 = !DILocation(line: 1962, column: 7, scope: !8186)
!8188 = !DILocation(line: 1965, column: 24, scope: !8043)
!8189 = !DILocation(line: 1965, column: 33, scope: !8043)
!8190 = !DILocation(line: 1965, column: 36, scope: !8043)
!8191 = !DILocation(line: 1965, column: 3, scope: !8043)
!8192 = !DILocation(line: 1967, column: 29, scope: !8043)
!8193 = !DILocation(line: 1967, column: 9, scope: !8043)
!8194 = !DILocation(line: 1967, column: 7, scope: !8043)
!8195 = !DILocation(line: 1968, column: 8, scope: !8196)
!8196 = distinct !DILexicalBlock(scope: !8043, file: !3, line: 1968, column: 7)
!8197 = !DILocation(line: 1968, column: 7, scope: !8043)
!8198 = !DILocation(line: 1969, column: 5, scope: !8196)
!8199 = !DILocation(line: 1971, column: 28, scope: !8043)
!8200 = !DILocation(line: 1971, column: 33, scope: !8043)
!8201 = !DILocation(line: 1971, column: 42, scope: !8043)
!8202 = !DILocation(line: 1971, column: 48, scope: !8043)
!8203 = !DILocation(line: 1971, column: 3, scope: !8043)
!8204 = !DILocation(line: 1972, column: 3, scope: !8043)
!8205 = !DILocation(line: 1973, column: 1, scope: !8043)
!8206 = distinct !DISubprogram(name: "noce_emit_move_insn", scope: !3, file: !3, line: 719, type: !8207, scopeLine: 720, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8207 = !DISubroutineType(types: !8208)
!8208 = !{null, !2577, !2577}
!8209 = !DILocalVariable(name: "x", arg: 1, scope: !8206, file: !3, line: 719, type: !2577)
!8210 = !DILocation(line: 719, column: 26, scope: !8206)
!8211 = !DILocalVariable(name: "y", arg: 2, scope: !8206, file: !3, line: 719, type: !2577)
!8212 = !DILocation(line: 719, column: 33, scope: !8206)
!8213 = !DILocalVariable(name: "outmode", scope: !8206, file: !3, line: 721, type: !231)
!8214 = !DILocation(line: 721, column: 21, scope: !8206)
!8215 = !DILocalVariable(name: "outer", scope: !8206, file: !3, line: 722, type: !2577)
!8216 = !DILocation(line: 722, column: 7, scope: !8206)
!8217 = !DILocalVariable(name: "inner", scope: !8206, file: !3, line: 722, type: !2577)
!8218 = !DILocation(line: 722, column: 14, scope: !8206)
!8219 = !DILocalVariable(name: "bitpos", scope: !8206, file: !3, line: 723, type: !2545)
!8220 = !DILocation(line: 723, column: 7, scope: !8206)
!8221 = !DILocation(line: 725, column: 7, scope: !8222)
!8222 = distinct !DILexicalBlock(scope: !8206, file: !3, line: 725, column: 7)
!8223 = !DILocation(line: 725, column: 20, scope: !8222)
!8224 = !DILocation(line: 725, column: 7, scope: !8206)
!8225 = !DILocalVariable(name: "seq", scope: !8226, file: !3, line: 727, type: !2577)
!8226 = distinct !DILexicalBlock(scope: !8222, file: !3, line: 726, column: 5)
!8227 = !DILocation(line: 727, column: 11, scope: !8226)
!8228 = !DILocalVariable(name: "insn", scope: !8226, file: !3, line: 727, type: !2577)
!8229 = !DILocation(line: 727, column: 16, scope: !8226)
!8230 = !DILocalVariable(name: "target", scope: !8226, file: !3, line: 727, type: !2577)
!8231 = !DILocation(line: 727, column: 22, scope: !8226)
!8232 = !DILocalVariable(name: "ot", scope: !8226, file: !3, line: 728, type: !8233)
!8233 = !DIDerivedType(tag: DW_TAG_typedef, name: "optab", file: !647, line: 55, baseType: !8234)
!8234 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8235, size: 64)
!8235 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_d", file: !647, line: 46, size: 3072, elements: !8236)
!8236 = !{!8237, !8238, !8239, !8240, !8244}
!8237 = !DIDerivedType(tag: DW_TAG_member, name: "code", scope: !8235, file: !647, line: 48, baseType: !2301, size: 32)
!8238 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_basename", scope: !8235, file: !647, line: 49, baseType: !2602, size: 64, offset: 64)
!8239 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_suffix", scope: !8235, file: !647, line: 50, baseType: !2604, size: 8, offset: 128)
!8240 = !DIDerivedType(tag: DW_TAG_member, name: "libcall_gen", scope: !8235, file: !647, line: 51, baseType: !8241, size: 64, offset: 192)
!8241 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8242, size: 64)
!8242 = !DISubroutineType(types: !8243)
!8243 = !{null, !8234, !2602, !2604, !231}
!8244 = !DIDerivedType(tag: DW_TAG_member, name: "handlers", scope: !8235, file: !647, line: 53, baseType: !8245, size: 2784, offset: 256)
!8245 = !DICompositeType(tag: DW_TAG_array_type, baseType: !8246, size: 2784, elements: !8249)
!8246 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "optab_handlers", file: !647, line: 41, size: 32, elements: !8247)
!8247 = !{!8248}
!8248 = !DIDerivedType(tag: DW_TAG_member, name: "insn_code", scope: !8246, file: !647, line: 43, baseType: !809, size: 32)
!8249 = !{!8250}
!8250 = !DISubrange(count: 87)
!8251 = !DILocation(line: 728, column: 13, scope: !8226)
!8252 = !DILocation(line: 730, column: 7, scope: !8226)
!8253 = !DILocation(line: 733, column: 15, scope: !8226)
!8254 = !DILocation(line: 733, column: 28, scope: !8226)
!8255 = !DILocation(line: 733, column: 31, scope: !8226)
!8256 = !DILocation(line: 733, column: 46, scope: !8226)
!8257 = !DILocation(line: 733, column: 49, scope: !8226)
!8258 = !DILocation(line: 733, column: 62, scope: !8226)
!8259 = !DILocation(line: 733, column: 14, scope: !8226)
!8260 = !DILocation(line: 734, column: 25, scope: !8226)
!8261 = !DILocation(line: 734, column: 28, scope: !8226)
!8262 = !DILocation(line: 734, column: 9, scope: !8226)
!8263 = !DILocation(line: 735, column: 20, scope: !8226)
!8264 = !DILocation(line: 735, column: 9, scope: !8226)
!8265 = !DILocation(line: 733, column: 12, scope: !8226)
!8266 = !DILocation(line: 736, column: 13, scope: !8226)
!8267 = !DILocation(line: 736, column: 11, scope: !8226)
!8268 = !DILocation(line: 737, column: 7, scope: !8226)
!8269 = !DILocation(line: 739, column: 27, scope: !8270)
!8270 = distinct !DILexicalBlock(scope: !8226, file: !3, line: 739, column: 11)
!8271 = !DILocation(line: 739, column: 11, scope: !8270)
!8272 = !DILocation(line: 739, column: 33, scope: !8270)
!8273 = !DILocation(line: 739, column: 11, scope: !8226)
!8274 = !DILocation(line: 741, column: 8, scope: !8275)
!8275 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 741, column: 8)
!8276 = distinct !DILexicalBlock(scope: !8270, file: !3, line: 740, column: 2)
!8277 = !DILocation(line: 741, column: 21, scope: !8275)
!8278 = !DILocation(line: 741, column: 8, scope: !8276)
!8279 = !DILocalVariable(name: "op", scope: !8280, file: !3, line: 743, type: !2577)
!8280 = distinct !DILexicalBlock(scope: !8275, file: !3, line: 742, column: 6)
!8281 = !DILocation(line: 743, column: 12, scope: !8280)
!8282 = !DILocation(line: 743, column: 17, scope: !8280)
!8283 = !DILocalVariable(name: "size", scope: !8280, file: !3, line: 744, type: !2649)
!8284 = !DILocation(line: 744, column: 31, scope: !8280)
!8285 = !DILocation(line: 744, column: 38, scope: !8280)
!8286 = !DILocalVariable(name: "start", scope: !8280, file: !3, line: 745, type: !2649)
!8287 = !DILocation(line: 745, column: 31, scope: !8280)
!8288 = !DILocation(line: 745, column: 39, scope: !8280)
!8289 = !DILocation(line: 763, column: 8, scope: !8280)
!8290 = !DILocation(line: 764, column: 25, scope: !8280)
!8291 = !DILocation(line: 764, column: 29, scope: !8280)
!8292 = !DILocation(line: 764, column: 35, scope: !8280)
!8293 = !DILocation(line: 764, column: 42, scope: !8280)
!8294 = !DILocation(line: 764, column: 56, scope: !8280)
!8295 = !DILocation(line: 764, column: 8, scope: !8280)
!8296 = !DILocation(line: 765, column: 8, scope: !8280)
!8297 = !DILocation(line: 768, column: 12, scope: !8276)
!8298 = !DILocation(line: 768, column: 4, scope: !8276)
!8299 = !DILocation(line: 771, column: 27, scope: !8300)
!8300 = distinct !DILexicalBlock(scope: !8276, file: !3, line: 769, column: 6)
!8301 = !DILocation(line: 771, column: 13, scope: !8300)
!8302 = !DILocation(line: 771, column: 11, scope: !8300)
!8303 = !DILocation(line: 772, column: 12, scope: !8304)
!8304 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 772, column: 12)
!8305 = !DILocation(line: 772, column: 12, scope: !8300)
!8306 = !DILocation(line: 774, column: 5, scope: !8307)
!8307 = distinct !DILexicalBlock(scope: !8304, file: !3, line: 773, column: 3)
!8308 = !DILocation(line: 775, column: 27, scope: !8307)
!8309 = !DILocation(line: 775, column: 41, scope: !8307)
!8310 = !DILocation(line: 775, column: 45, scope: !8307)
!8311 = !DILocation(line: 775, column: 58, scope: !8307)
!8312 = !DILocation(line: 775, column: 14, scope: !8307)
!8313 = !DILocation(line: 775, column: 12, scope: !8307)
!8314 = !DILocation(line: 776, column: 9, scope: !8315)
!8315 = distinct !DILexicalBlock(scope: !8307, file: !3, line: 776, column: 9)
!8316 = !DILocation(line: 776, column: 16, scope: !8315)
!8317 = !DILocation(line: 776, column: 9, scope: !8307)
!8318 = !DILocation(line: 778, column: 13, scope: !8319)
!8319 = distinct !DILexicalBlock(scope: !8320, file: !3, line: 778, column: 13)
!8320 = distinct !DILexicalBlock(scope: !8315, file: !3, line: 777, column: 7)
!8321 = !DILocation(line: 778, column: 23, scope: !8319)
!8322 = !DILocation(line: 778, column: 20, scope: !8319)
!8323 = !DILocation(line: 778, column: 13, scope: !8320)
!8324 = !DILocation(line: 779, column: 20, scope: !8319)
!8325 = !DILocation(line: 779, column: 23, scope: !8319)
!8326 = !DILocation(line: 779, column: 4, scope: !8319)
!8327 = !DILocation(line: 780, column: 15, scope: !8320)
!8328 = !DILocation(line: 780, column: 13, scope: !8320)
!8329 = !DILocation(line: 781, column: 7, scope: !8320)
!8330 = !DILocation(line: 782, column: 5, scope: !8307)
!8331 = !DILocation(line: 783, column: 3, scope: !8307)
!8332 = !DILocation(line: 784, column: 8, scope: !8300)
!8333 = !DILocation(line: 788, column: 27, scope: !8300)
!8334 = !DILocation(line: 788, column: 13, scope: !8300)
!8335 = !DILocation(line: 788, column: 11, scope: !8300)
!8336 = !DILocation(line: 789, column: 12, scope: !8337)
!8337 = distinct !DILexicalBlock(scope: !8300, file: !3, line: 789, column: 12)
!8338 = !DILocation(line: 789, column: 12, scope: !8300)
!8339 = !DILocation(line: 791, column: 5, scope: !8340)
!8340 = distinct !DILexicalBlock(scope: !8337, file: !3, line: 790, column: 3)
!8341 = !DILocation(line: 792, column: 28, scope: !8340)
!8342 = !DILocation(line: 792, column: 42, scope: !8340)
!8343 = !DILocation(line: 793, column: 7, scope: !8340)
!8344 = !DILocation(line: 793, column: 20, scope: !8340)
!8345 = !DILocation(line: 794, column: 7, scope: !8340)
!8346 = !DILocation(line: 792, column: 14, scope: !8340)
!8347 = !DILocation(line: 792, column: 12, scope: !8340)
!8348 = !DILocation(line: 795, column: 9, scope: !8349)
!8349 = distinct !DILexicalBlock(scope: !8340, file: !3, line: 795, column: 9)
!8350 = !DILocation(line: 795, column: 16, scope: !8349)
!8351 = !DILocation(line: 795, column: 9, scope: !8340)
!8352 = !DILocation(line: 797, column: 13, scope: !8353)
!8353 = distinct !DILexicalBlock(scope: !8354, file: !3, line: 797, column: 13)
!8354 = distinct !DILexicalBlock(scope: !8349, file: !3, line: 796, column: 7)
!8355 = !DILocation(line: 797, column: 23, scope: !8353)
!8356 = !DILocation(line: 797, column: 20, scope: !8353)
!8357 = !DILocation(line: 797, column: 13, scope: !8354)
!8358 = !DILocation(line: 798, column: 22, scope: !8353)
!8359 = !DILocation(line: 798, column: 25, scope: !8353)
!8360 = !DILocation(line: 798, column: 6, scope: !8353)
!8361 = !DILocation(line: 799, column: 15, scope: !8354)
!8362 = !DILocation(line: 799, column: 13, scope: !8354)
!8363 = !DILocation(line: 800, column: 7, scope: !8354)
!8364 = !DILocation(line: 801, column: 5, scope: !8340)
!8365 = !DILocation(line: 802, column: 3, scope: !8340)
!8366 = !DILocation(line: 803, column: 8, scope: !8300)
!8367 = !DILocation(line: 806, column: 8, scope: !8300)
!8368 = !DILocation(line: 808, column: 2, scope: !8276)
!8369 = !DILocation(line: 810, column: 18, scope: !8226)
!8370 = !DILocation(line: 810, column: 7, scope: !8226)
!8371 = !DILocation(line: 811, column: 7, scope: !8226)
!8372 = !DILocation(line: 814, column: 11, scope: !8206)
!8373 = !DILocation(line: 814, column: 9, scope: !8206)
!8374 = !DILocation(line: 815, column: 11, scope: !8206)
!8375 = !DILocation(line: 815, column: 9, scope: !8206)
!8376 = !DILocation(line: 816, column: 13, scope: !8206)
!8377 = !DILocation(line: 816, column: 11, scope: !8206)
!8378 = !DILocation(line: 817, column: 12, scope: !8206)
!8379 = !DILocation(line: 817, column: 32, scope: !8206)
!8380 = !DILocation(line: 817, column: 10, scope: !8206)
!8381 = !DILocation(line: 818, column: 20, scope: !8206)
!8382 = !DILocation(line: 818, column: 27, scope: !8206)
!8383 = !DILocation(line: 818, column: 55, scope: !8206)
!8384 = !DILocation(line: 818, column: 63, scope: !8206)
!8385 = !DILocation(line: 818, column: 72, scope: !8206)
!8386 = !DILocation(line: 818, column: 3, scope: !8206)
!8387 = !DILocation(line: 819, column: 1, scope: !8206)
!8388 = distinct !DISubprogram(name: "end_ifcvt_sequence", scope: !3, file: !3, line: 827, type: !8389, scopeLine: 828, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8389 = !DISubroutineType(types: !8390)
!8390 = !{!2577, !5382}
!8391 = !DILocalVariable(name: "if_info", arg: 1, scope: !8388, file: !3, line: 827, type: !5382)
!8392 = !DILocation(line: 827, column: 42, scope: !8388)
!8393 = !DILocalVariable(name: "insn", scope: !8388, file: !3, line: 829, type: !2577)
!8394 = !DILocation(line: 829, column: 7, scope: !8388)
!8395 = !DILocalVariable(name: "seq", scope: !8388, file: !3, line: 830, type: !2577)
!8396 = !DILocation(line: 830, column: 7, scope: !8388)
!8397 = !DILocation(line: 830, column: 13, scope: !8388)
!8398 = !DILocation(line: 832, column: 19, scope: !8388)
!8399 = !DILocation(line: 832, column: 28, scope: !8388)
!8400 = !DILocation(line: 832, column: 3, scope: !8388)
!8401 = !DILocation(line: 833, column: 19, scope: !8388)
!8402 = !DILocation(line: 833, column: 28, scope: !8388)
!8403 = !DILocation(line: 833, column: 3, scope: !8388)
!8404 = !DILocation(line: 834, column: 29, scope: !8388)
!8405 = !DILocation(line: 834, column: 3, scope: !8388)
!8406 = !DILocation(line: 835, column: 3, scope: !8388)
!8407 = !DILocation(line: 841, column: 15, scope: !8408)
!8408 = distinct !DILexicalBlock(scope: !8388, file: !3, line: 841, column: 3)
!8409 = !DILocation(line: 841, column: 13, scope: !8408)
!8410 = !DILocation(line: 841, column: 8, scope: !8408)
!8411 = !DILocation(line: 841, column: 20, scope: !8412)
!8412 = distinct !DILexicalBlock(scope: !8408, file: !3, line: 841, column: 3)
!8413 = !DILocation(line: 841, column: 3, scope: !8408)
!8414 = !DILocation(line: 842, column: 9, scope: !8415)
!8415 = distinct !DILexicalBlock(scope: !8412, file: !3, line: 842, column: 9)
!8416 = !DILocation(line: 843, column: 2, scope: !8415)
!8417 = !DILocation(line: 843, column: 21, scope: !8415)
!8418 = !DILocation(line: 843, column: 5, scope: !8415)
!8419 = !DILocation(line: 843, column: 27, scope: !8415)
!8420 = !DILocation(line: 842, column: 9, scope: !8412)
!8421 = !DILocation(line: 844, column: 7, scope: !8415)
!8422 = !DILocation(line: 843, column: 31, scope: !8415)
!8423 = !DILocation(line: 841, column: 33, scope: !8412)
!8424 = !DILocation(line: 841, column: 31, scope: !8412)
!8425 = !DILocation(line: 841, column: 3, scope: !8412)
!8426 = distinct !{!8426, !8413, !8427}
!8427 = !DILocation(line: 844, column: 14, scope: !8408)
!8428 = !DILocation(line: 846, column: 10, scope: !8388)
!8429 = !DILocation(line: 846, column: 3, scope: !8388)
!8430 = !DILocation(line: 847, column: 1, scope: !8388)
!8431 = distinct !DISubprogram(name: "recog_memoized", scope: !8432, file: !8432, line: 150, type: !8433, scopeLine: 151, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8432 = !DIFile(filename: "./recog.h", directory: "/home/venkat/IF-DV/spec_build_release/CPU_2017/benchspec/CPU/502.gcc_r/build/build_base_ld-loop-ext-m64.0000")
!8433 = !DISubroutineType(types: !8434)
!8434 = !{!2545, !2577}
!8435 = !DILocalVariable(name: "insn", arg: 1, scope: !8431, file: !8432, line: 150, type: !2577)
!8436 = !DILocation(line: 150, column: 21, scope: !8431)
!8437 = !DILocation(line: 152, column: 7, scope: !8438)
!8438 = distinct !DILexicalBlock(scope: !8431, file: !8432, line: 152, column: 7)
!8439 = !DILocation(line: 152, column: 24, scope: !8438)
!8440 = !DILocation(line: 152, column: 7, scope: !8431)
!8441 = !DILocation(line: 153, column: 31, scope: !8438)
!8442 = !DILocation(line: 153, column: 47, scope: !8438)
!8443 = !DILocation(line: 153, column: 24, scope: !8438)
!8444 = !DILocation(line: 153, column: 5, scope: !8438)
!8445 = !DILocation(line: 153, column: 22, scope: !8438)
!8446 = !DILocation(line: 154, column: 10, scope: !8431)
!8447 = !DILocation(line: 154, column: 3, scope: !8431)
!8448 = distinct !DISubprogram(name: "noce_emit_store_flag", scope: !3, file: !3, line: 650, type: !8449, scopeLine: 652, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8449 = !DISubroutineType(types: !8450)
!8450 = !{!2577, !5382, !2577, !2545, !2545}
!8451 = !DILocalVariable(name: "if_info", arg: 1, scope: !8448, file: !3, line: 650, type: !5382)
!8452 = !DILocation(line: 650, column: 44, scope: !8448)
!8453 = !DILocalVariable(name: "x", arg: 2, scope: !8448, file: !3, line: 650, type: !2577)
!8454 = !DILocation(line: 650, column: 57, scope: !8448)
!8455 = !DILocalVariable(name: "reversep", arg: 3, scope: !8448, file: !3, line: 650, type: !2545)
!8456 = !DILocation(line: 650, column: 64, scope: !8448)
!8457 = !DILocalVariable(name: "normalize", arg: 4, scope: !8448, file: !3, line: 651, type: !2545)
!8458 = !DILocation(line: 651, column: 13, scope: !8448)
!8459 = !DILocalVariable(name: "cond", scope: !8448, file: !3, line: 653, type: !2577)
!8460 = !DILocation(line: 653, column: 7, scope: !8448)
!8461 = !DILocation(line: 653, column: 14, scope: !8448)
!8462 = !DILocation(line: 653, column: 23, scope: !8448)
!8463 = !DILocalVariable(name: "cond_complex", scope: !8448, file: !3, line: 654, type: !2545)
!8464 = !DILocation(line: 654, column: 7, scope: !8448)
!8465 = !DILocalVariable(name: "code", scope: !8448, file: !3, line: 655, type: !2301)
!8466 = !DILocation(line: 655, column: 17, scope: !8448)
!8467 = !DILocation(line: 657, column: 38, scope: !8448)
!8468 = !DILocation(line: 657, column: 21, scope: !8448)
!8469 = !DILocation(line: 658, column: 5, scope: !8448)
!8470 = !DILocation(line: 658, column: 27, scope: !8448)
!8471 = !DILocation(line: 658, column: 10, scope: !8448)
!8472 = !DILocation(line: 658, column: 8, scope: !8448)
!8473 = !DILocation(line: 657, column: 16, scope: !8448)
!8474 = !DILocation(line: 663, column: 7, scope: !8475)
!8475 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 663, column: 7)
!8476 = !DILocation(line: 663, column: 7, scope: !8448)
!8477 = !DILocalVariable(name: "set", scope: !8478, file: !3, line: 665, type: !2577)
!8478 = distinct !DILexicalBlock(scope: !8475, file: !3, line: 664, column: 5)
!8479 = !DILocation(line: 665, column: 11, scope: !8478)
!8480 = !DILocation(line: 665, column: 25, scope: !8478)
!8481 = !DILocation(line: 665, column: 34, scope: !8478)
!8482 = !DILocation(line: 665, column: 17, scope: !8478)
!8483 = !DILocation(line: 666, column: 14, scope: !8478)
!8484 = !DILocation(line: 666, column: 12, scope: !8478)
!8485 = !DILocation(line: 667, column: 11, scope: !8486)
!8486 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 667, column: 11)
!8487 = !DILocation(line: 667, column: 46, scope: !8486)
!8488 = !DILocation(line: 668, column: 4, scope: !8486)
!8489 = !DILocation(line: 668, column: 7, scope: !8486)
!8490 = !DILocation(line: 668, column: 44, scope: !8486)
!8491 = !DILocation(line: 668, column: 41, scope: !8486)
!8492 = !DILocation(line: 667, column: 11, scope: !8478)
!8493 = !DILocation(line: 669, column: 14, scope: !8486)
!8494 = !DILocation(line: 669, column: 13, scope: !8486)
!8495 = !DILocation(line: 669, column: 11, scope: !8486)
!8496 = !DILocation(line: 669, column: 2, scope: !8486)
!8497 = !DILocation(line: 670, column: 11, scope: !8498)
!8498 = distinct !DILexicalBlock(scope: !8478, file: !3, line: 670, column: 11)
!8499 = !DILocation(line: 670, column: 20, scope: !8498)
!8500 = !DILocation(line: 670, column: 11, scope: !8478)
!8501 = !DILocation(line: 671, column: 14, scope: !8498)
!8502 = !DILocation(line: 671, column: 13, scope: !8498)
!8503 = !DILocation(line: 671, column: 11, scope: !8498)
!8504 = !DILocation(line: 671, column: 2, scope: !8498)
!8505 = !DILocation(line: 672, column: 5, scope: !8478)
!8506 = !DILocation(line: 674, column: 7, scope: !8507)
!8507 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 674, column: 7)
!8508 = !DILocation(line: 674, column: 7, scope: !8448)
!8509 = !DILocation(line: 675, column: 38, scope: !8507)
!8510 = !DILocation(line: 675, column: 44, scope: !8507)
!8511 = !DILocation(line: 675, column: 53, scope: !8507)
!8512 = !DILocation(line: 675, column: 12, scope: !8507)
!8513 = !DILocation(line: 675, column: 10, scope: !8507)
!8514 = !DILocation(line: 675, column: 5, scope: !8507)
!8515 = !DILocation(line: 677, column: 12, scope: !8507)
!8516 = !DILocation(line: 677, column: 10, scope: !8507)
!8517 = !DILocation(line: 679, column: 8, scope: !8518)
!8518 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 679, column: 7)
!8519 = !DILocation(line: 679, column: 17, scope: !8518)
!8520 = !DILocation(line: 679, column: 34, scope: !8518)
!8521 = !DILocation(line: 679, column: 43, scope: !8518)
!8522 = !DILocation(line: 679, column: 31, scope: !8518)
!8523 = !DILocation(line: 679, column: 48, scope: !8518)
!8524 = !DILocation(line: 679, column: 51, scope: !8518)
!8525 = !DILocation(line: 680, column: 7, scope: !8518)
!8526 = !DILocation(line: 680, column: 11, scope: !8518)
!8527 = !DILocation(line: 680, column: 21, scope: !8518)
!8528 = !DILocation(line: 680, column: 26, scope: !8518)
!8529 = !DILocation(line: 680, column: 49, scope: !8518)
!8530 = !DILocation(line: 680, column: 46, scope: !8518)
!8531 = !DILocation(line: 679, column: 7, scope: !8448)
!8532 = !DILocalVariable(name: "tmp", scope: !8533, file: !3, line: 682, type: !2577)
!8533 = distinct !DILexicalBlock(scope: !8518, file: !3, line: 681, column: 5)
!8534 = !DILocation(line: 682, column: 11, scope: !8533)
!8535 = !DILocation(line: 684, column: 13, scope: !8533)
!8536 = !DILocation(line: 684, column: 11, scope: !8533)
!8537 = !DILocation(line: 686, column: 13, scope: !8533)
!8538 = !DILocation(line: 686, column: 11, scope: !8533)
!8539 = !DILocation(line: 688, column: 7, scope: !8533)
!8540 = !DILocation(line: 689, column: 24, scope: !8533)
!8541 = !DILocation(line: 689, column: 13, scope: !8533)
!8542 = !DILocation(line: 689, column: 11, scope: !8533)
!8543 = !DILocation(line: 691, column: 27, scope: !8544)
!8544 = distinct !DILexicalBlock(scope: !8533, file: !3, line: 691, column: 11)
!8545 = !DILocation(line: 691, column: 11, scope: !8544)
!8546 = !DILocation(line: 691, column: 32, scope: !8544)
!8547 = !DILocation(line: 691, column: 11, scope: !8533)
!8548 = !DILocation(line: 693, column: 10, scope: !8549)
!8549 = distinct !DILexicalBlock(scope: !8544, file: !3, line: 692, column: 2)
!8550 = !DILocation(line: 693, column: 8, scope: !8549)
!8551 = !DILocation(line: 694, column: 4, scope: !8549)
!8552 = !DILocation(line: 695, column: 15, scope: !8549)
!8553 = !DILocation(line: 695, column: 4, scope: !8549)
!8554 = !DILocation(line: 697, column: 29, scope: !8549)
!8555 = !DILocation(line: 697, column: 38, scope: !8549)
!8556 = !DILocation(line: 697, column: 4, scope: !8549)
!8557 = !DILocation(line: 697, column: 13, scope: !8549)
!8558 = !DILocation(line: 697, column: 27, scope: !8549)
!8559 = !DILocation(line: 699, column: 11, scope: !8549)
!8560 = !DILocation(line: 699, column: 4, scope: !8549)
!8561 = !DILocation(line: 702, column: 7, scope: !8533)
!8562 = !DILocation(line: 703, column: 5, scope: !8533)
!8563 = !DILocation(line: 706, column: 7, scope: !8564)
!8564 = distinct !DILexicalBlock(scope: !8448, file: !3, line: 706, column: 7)
!8565 = !DILocation(line: 706, column: 20, scope: !8564)
!8566 = !DILocation(line: 706, column: 24, scope: !8564)
!8567 = !DILocation(line: 706, column: 7, scope: !8448)
!8568 = !DILocation(line: 707, column: 5, scope: !8564)
!8569 = !DILocation(line: 709, column: 27, scope: !8448)
!8570 = !DILocation(line: 709, column: 30, scope: !8448)
!8571 = !DILocation(line: 709, column: 36, scope: !8448)
!8572 = !DILocation(line: 710, column: 6, scope: !8448)
!8573 = !DILocation(line: 711, column: 7, scope: !8448)
!8574 = !DILocation(line: 711, column: 12, scope: !8448)
!8575 = !DILocation(line: 711, column: 19, scope: !8448)
!8576 = !DILocation(line: 711, column: 22, scope: !8448)
!8577 = !DILocation(line: 711, column: 27, scope: !8448)
!8578 = !DILocation(line: 712, column: 7, scope: !8448)
!8579 = !DILocation(line: 712, column: 10, scope: !8448)
!8580 = !DILocation(line: 712, column: 15, scope: !8448)
!8581 = !DILocation(line: 712, column: 22, scope: !8448)
!8582 = !DILocation(line: 712, column: 25, scope: !8448)
!8583 = !DILocation(line: 712, column: 30, scope: !8448)
!8584 = !DILocation(line: 712, column: 39, scope: !8448)
!8585 = !DILocation(line: 709, column: 10, scope: !8448)
!8586 = !DILocation(line: 709, column: 3, scope: !8448)
!8587 = !DILocation(line: 713, column: 1, scope: !8448)
!8588 = distinct !DISubprogram(name: "noce_get_alt_condition", scope: !3, file: !3, line: 1511, type: !8589, scopeLine: 1513, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8589 = !DISubroutineType(types: !8590)
!8590 = !{!2577, !5382, !2577, !3777}
!8591 = !DILocalVariable(name: "if_info", arg: 1, scope: !8588, file: !3, line: 1511, type: !5382)
!8592 = !DILocation(line: 1511, column: 46, scope: !8588)
!8593 = !DILocalVariable(name: "target", arg: 2, scope: !8588, file: !3, line: 1511, type: !2577)
!8594 = !DILocation(line: 1511, column: 59, scope: !8588)
!8595 = !DILocalVariable(name: "earliest", arg: 3, scope: !8588, file: !3, line: 1512, type: !3777)
!8596 = !DILocation(line: 1512, column: 9, scope: !8588)
!8597 = !DILocalVariable(name: "cond", scope: !8588, file: !3, line: 1514, type: !2577)
!8598 = !DILocation(line: 1514, column: 7, scope: !8588)
!8599 = !DILocalVariable(name: "set", scope: !8588, file: !3, line: 1514, type: !2577)
!8600 = !DILocation(line: 1514, column: 13, scope: !8588)
!8601 = !DILocalVariable(name: "insn", scope: !8588, file: !3, line: 1514, type: !2577)
!8602 = !DILocation(line: 1514, column: 18, scope: !8588)
!8603 = !DILocalVariable(name: "reverse", scope: !8588, file: !3, line: 1515, type: !2545)
!8604 = !DILocation(line: 1515, column: 7, scope: !8588)
!8605 = !DILocation(line: 1518, column: 24, scope: !8606)
!8606 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1518, column: 7)
!8607 = !DILocation(line: 1518, column: 32, scope: !8606)
!8608 = !DILocation(line: 1518, column: 41, scope: !8606)
!8609 = !DILocation(line: 1518, column: 7, scope: !8606)
!8610 = !DILocation(line: 1518, column: 7, scope: !8588)
!8611 = !DILocation(line: 1520, column: 19, scope: !8612)
!8612 = distinct !DILexicalBlock(scope: !8606, file: !3, line: 1519, column: 5)
!8613 = !DILocation(line: 1520, column: 28, scope: !8612)
!8614 = !DILocation(line: 1520, column: 8, scope: !8612)
!8615 = !DILocation(line: 1520, column: 17, scope: !8612)
!8616 = !DILocation(line: 1521, column: 14, scope: !8612)
!8617 = !DILocation(line: 1521, column: 23, scope: !8612)
!8618 = !DILocation(line: 1521, column: 7, scope: !8612)
!8619 = !DILocation(line: 1524, column: 17, scope: !8588)
!8620 = !DILocation(line: 1524, column: 26, scope: !8588)
!8621 = !DILocation(line: 1524, column: 9, scope: !8588)
!8622 = !DILocation(line: 1524, column: 7, scope: !8588)
!8623 = !DILocation(line: 1525, column: 10, scope: !8588)
!8624 = !DILocation(line: 1525, column: 8, scope: !8588)
!8625 = !DILocation(line: 1527, column: 7, scope: !8588)
!8626 = !DILocation(line: 1527, column: 42, scope: !8588)
!8627 = !DILocation(line: 1528, column: 7, scope: !8588)
!8628 = !DILocation(line: 1528, column: 10, scope: !8588)
!8629 = !DILocation(line: 1528, column: 47, scope: !8588)
!8630 = !DILocation(line: 1528, column: 44, scope: !8588)
!8631 = !DILocation(line: 0, scope: !8588)
!8632 = !DILocation(line: 1527, column: 5, scope: !8588)
!8633 = !DILocation(line: 1529, column: 7, scope: !8634)
!8634 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1529, column: 7)
!8635 = !DILocation(line: 1529, column: 16, scope: !8634)
!8636 = !DILocation(line: 1529, column: 7, scope: !8588)
!8637 = !DILocation(line: 1530, column: 16, scope: !8634)
!8638 = !DILocation(line: 1530, column: 15, scope: !8634)
!8639 = !DILocation(line: 1530, column: 13, scope: !8634)
!8640 = !DILocation(line: 1530, column: 5, scope: !8634)
!8641 = !DILocation(line: 1546, column: 7, scope: !8642)
!8642 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1546, column: 7)
!8643 = !DILocation(line: 1546, column: 7, scope: !8588)
!8644 = !DILocalVariable(name: "code", scope: !8645, file: !3, line: 1548, type: !2301)
!8645 = distinct !DILexicalBlock(scope: !8642, file: !3, line: 1547, column: 5)
!8646 = !DILocation(line: 1548, column: 21, scope: !8645)
!8647 = !DILocation(line: 1548, column: 28, scope: !8645)
!8648 = !DILocalVariable(name: "op_a", scope: !8645, file: !3, line: 1549, type: !2577)
!8649 = !DILocation(line: 1549, column: 11, scope: !8645)
!8650 = !DILocation(line: 1549, column: 18, scope: !8645)
!8651 = !DILocalVariable(name: "op_b", scope: !8645, file: !3, line: 1550, type: !2577)
!8652 = !DILocation(line: 1550, column: 11, scope: !8645)
!8653 = !DILocation(line: 1550, column: 18, scope: !8645)
!8654 = !DILocalVariable(name: "prev_insn", scope: !8645, file: !3, line: 1551, type: !2577)
!8655 = !DILocation(line: 1551, column: 11, scope: !8645)
!8656 = !DILocation(line: 1554, column: 38, scope: !8645)
!8657 = !DILocation(line: 1554, column: 47, scope: !8645)
!8658 = !DILocation(line: 1554, column: 19, scope: !8645)
!8659 = !DILocation(line: 1554, column: 17, scope: !8645)
!8660 = !DILocation(line: 1555, column: 11, scope: !8661)
!8661 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 1555, column: 11)
!8662 = !DILocation(line: 1556, column: 4, scope: !8661)
!8663 = !DILocation(line: 1556, column: 7, scope: !8661)
!8664 = !DILocation(line: 1557, column: 10, scope: !8661)
!8665 = !DILocation(line: 1557, column: 7, scope: !8661)
!8666 = !DILocation(line: 1558, column: 4, scope: !8661)
!8667 = !DILocation(line: 1558, column: 7, scope: !8661)
!8668 = !DILocation(line: 1559, column: 4, scope: !8661)
!8669 = !DILocation(line: 1559, column: 7, scope: !8661)
!8670 = !DILocation(line: 1559, column: 38, scope: !8661)
!8671 = !DILocation(line: 1555, column: 11, scope: !8645)
!8672 = !DILocalVariable(name: "src", scope: !8673, file: !3, line: 1561, type: !2577)
!8673 = distinct !DILexicalBlock(scope: !8661, file: !3, line: 1560, column: 2)
!8674 = !DILocation(line: 1561, column: 8, scope: !8673)
!8675 = !DILocation(line: 1561, column: 41, scope: !8673)
!8676 = !DILocation(line: 1561, column: 14, scope: !8673)
!8677 = !DILocation(line: 1562, column: 9, scope: !8678)
!8678 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 1562, column: 8)
!8679 = !DILocation(line: 1562, column: 8, scope: !8673)
!8680 = !DILocation(line: 1563, column: 12, scope: !8678)
!8681 = !DILocation(line: 1563, column: 10, scope: !8678)
!8682 = !DILocation(line: 1563, column: 6, scope: !8678)
!8683 = !DILocation(line: 1564, column: 8, scope: !8684)
!8684 = distinct !DILexicalBlock(scope: !8673, file: !3, line: 1564, column: 8)
!8685 = !DILocation(line: 1564, column: 8, scope: !8673)
!8686 = !DILocation(line: 1566, column: 25, scope: !8687)
!8687 = distinct !DILexicalBlock(scope: !8688, file: !3, line: 1566, column: 12)
!8688 = distinct !DILexicalBlock(scope: !8684, file: !3, line: 1565, column: 6)
!8689 = !DILocation(line: 1566, column: 31, scope: !8687)
!8690 = !DILocation(line: 1566, column: 12, scope: !8687)
!8691 = !DILocation(line: 1566, column: 12, scope: !8688)
!8692 = !DILocation(line: 1567, column: 10, scope: !8687)
!8693 = !DILocation(line: 1567, column: 8, scope: !8687)
!8694 = !DILocation(line: 1567, column: 3, scope: !8687)
!8695 = !DILocation(line: 1568, column: 30, scope: !8696)
!8696 = distinct !DILexicalBlock(scope: !8687, file: !3, line: 1568, column: 17)
!8697 = !DILocation(line: 1568, column: 36, scope: !8696)
!8698 = !DILocation(line: 1568, column: 17, scope: !8696)
!8699 = !DILocation(line: 1568, column: 17, scope: !8687)
!8700 = !DILocation(line: 1569, column: 10, scope: !8696)
!8701 = !DILocation(line: 1569, column: 8, scope: !8696)
!8702 = !DILocation(line: 1569, column: 3, scope: !8696)
!8703 = !DILocation(line: 1571, column: 12, scope: !8704)
!8704 = distinct !DILexicalBlock(scope: !8688, file: !3, line: 1571, column: 12)
!8705 = !DILocation(line: 1571, column: 12, scope: !8688)
!8706 = !DILocalVariable(name: "tmp", scope: !8707, file: !3, line: 1573, type: !2577)
!8707 = distinct !DILexicalBlock(scope: !8704, file: !3, line: 1572, column: 3)
!8708 = !DILocation(line: 1573, column: 9, scope: !8707)
!8709 = !DILocation(line: 1573, column: 15, scope: !8707)
!8710 = !DILocation(line: 1574, column: 12, scope: !8707)
!8711 = !DILocation(line: 1574, column: 10, scope: !8707)
!8712 = !DILocation(line: 1575, column: 12, scope: !8707)
!8713 = !DILocation(line: 1575, column: 10, scope: !8707)
!8714 = !DILocation(line: 1576, column: 28, scope: !8707)
!8715 = !DILocation(line: 1576, column: 12, scope: !8707)
!8716 = !DILocation(line: 1576, column: 10, scope: !8707)
!8717 = !DILocation(line: 1577, column: 3, scope: !8707)
!8718 = !DILocation(line: 1578, column: 6, scope: !8688)
!8719 = !DILocation(line: 1579, column: 2, scope: !8673)
!8720 = !DILocation(line: 1583, column: 11, scope: !8721)
!8721 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 1583, column: 11)
!8722 = !DILocation(line: 1583, column: 11, scope: !8645)
!8723 = !DILocalVariable(name: "desired_val", scope: !8724, file: !3, line: 1585, type: !2666)
!8724 = distinct !DILexicalBlock(scope: !8721, file: !3, line: 1584, column: 2)
!8725 = !DILocation(line: 1585, column: 18, scope: !8724)
!8726 = !DILocation(line: 1585, column: 32, scope: !8724)
!8727 = !DILocalVariable(name: "actual_val", scope: !8724, file: !3, line: 1586, type: !2666)
!8728 = !DILocation(line: 1586, column: 18, scope: !8724)
!8729 = !DILocation(line: 1586, column: 31, scope: !8724)
!8730 = !DILocation(line: 1588, column: 12, scope: !8724)
!8731 = !DILocation(line: 1588, column: 4, scope: !8724)
!8732 = !DILocation(line: 1591, column: 12, scope: !8733)
!8733 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 1591, column: 12)
!8734 = distinct !DILexicalBlock(scope: !8724, file: !3, line: 1589, column: 6)
!8735 = !DILocation(line: 1591, column: 26, scope: !8733)
!8736 = !DILocation(line: 1591, column: 38, scope: !8733)
!8737 = !DILocation(line: 1591, column: 23, scope: !8733)
!8738 = !DILocation(line: 1591, column: 12, scope: !8734)
!8739 = !DILocation(line: 1593, column: 10, scope: !8740)
!8740 = distinct !DILexicalBlock(scope: !8733, file: !3, line: 1592, column: 3)
!8741 = !DILocation(line: 1594, column: 12, scope: !8740)
!8742 = !DILocation(line: 1594, column: 10, scope: !8740)
!8743 = !DILocation(line: 1595, column: 3, scope: !8740)
!8744 = !DILocation(line: 1596, column: 8, scope: !8734)
!8745 = !DILocation(line: 1598, column: 12, scope: !8746)
!8746 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 1598, column: 12)
!8747 = !DILocation(line: 1598, column: 26, scope: !8746)
!8748 = !DILocation(line: 1598, column: 38, scope: !8746)
!8749 = !DILocation(line: 1598, column: 23, scope: !8746)
!8750 = !DILocation(line: 1598, column: 12, scope: !8734)
!8751 = !DILocation(line: 1600, column: 10, scope: !8752)
!8752 = distinct !DILexicalBlock(scope: !8746, file: !3, line: 1599, column: 3)
!8753 = !DILocation(line: 1601, column: 12, scope: !8752)
!8754 = !DILocation(line: 1601, column: 10, scope: !8752)
!8755 = !DILocation(line: 1602, column: 3, scope: !8752)
!8756 = !DILocation(line: 1603, column: 8, scope: !8734)
!8757 = !DILocation(line: 1605, column: 12, scope: !8758)
!8758 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 1605, column: 12)
!8759 = !DILocation(line: 1605, column: 26, scope: !8758)
!8760 = !DILocation(line: 1605, column: 38, scope: !8758)
!8761 = !DILocation(line: 1605, column: 23, scope: !8758)
!8762 = !DILocation(line: 1605, column: 12, scope: !8734)
!8763 = !DILocation(line: 1607, column: 10, scope: !8764)
!8764 = distinct !DILexicalBlock(scope: !8758, file: !3, line: 1606, column: 3)
!8765 = !DILocation(line: 1608, column: 12, scope: !8764)
!8766 = !DILocation(line: 1608, column: 10, scope: !8764)
!8767 = !DILocation(line: 1609, column: 3, scope: !8764)
!8768 = !DILocation(line: 1610, column: 8, scope: !8734)
!8769 = !DILocation(line: 1612, column: 12, scope: !8770)
!8770 = distinct !DILexicalBlock(scope: !8734, file: !3, line: 1612, column: 12)
!8771 = !DILocation(line: 1612, column: 26, scope: !8770)
!8772 = !DILocation(line: 1612, column: 38, scope: !8770)
!8773 = !DILocation(line: 1612, column: 23, scope: !8770)
!8774 = !DILocation(line: 1612, column: 12, scope: !8734)
!8775 = !DILocation(line: 1614, column: 10, scope: !8776)
!8776 = distinct !DILexicalBlock(scope: !8770, file: !3, line: 1613, column: 3)
!8777 = !DILocation(line: 1615, column: 12, scope: !8776)
!8778 = !DILocation(line: 1615, column: 10, scope: !8776)
!8779 = !DILocation(line: 1616, column: 3, scope: !8776)
!8780 = !DILocation(line: 1617, column: 8, scope: !8734)
!8781 = !DILocation(line: 1619, column: 8, scope: !8734)
!8782 = !DILocation(line: 1621, column: 2, scope: !8724)
!8783 = !DILocation(line: 1626, column: 11, scope: !8784)
!8784 = distinct !DILexicalBlock(scope: !8645, file: !3, line: 1626, column: 11)
!8785 = !DILocation(line: 1626, column: 19, scope: !8784)
!8786 = !DILocation(line: 1626, column: 16, scope: !8784)
!8787 = !DILocation(line: 1627, column: 4, scope: !8784)
!8788 = !DILocation(line: 1627, column: 7, scope: !8784)
!8789 = !DILocation(line: 1627, column: 15, scope: !8784)
!8790 = !DILocation(line: 1627, column: 12, scope: !8784)
!8791 = !DILocation(line: 1628, column: 4, scope: !8784)
!8792 = !DILocation(line: 1628, column: 7, scope: !8784)
!8793 = !DILocation(line: 1628, column: 15, scope: !8784)
!8794 = !DILocation(line: 1628, column: 12, scope: !8784)
!8795 = !DILocation(line: 1626, column: 11, scope: !8645)
!8796 = !DILocation(line: 1630, column: 11, scope: !8797)
!8797 = distinct !DILexicalBlock(scope: !8784, file: !3, line: 1629, column: 2)
!8798 = !DILocation(line: 1630, column: 9, scope: !8797)
!8799 = !DILocation(line: 1631, column: 16, scope: !8797)
!8800 = !DILocation(line: 1631, column: 25, scope: !8797)
!8801 = !DILocation(line: 1631, column: 5, scope: !8797)
!8802 = !DILocation(line: 1631, column: 14, scope: !8797)
!8803 = !DILocation(line: 1632, column: 11, scope: !8797)
!8804 = !DILocation(line: 1632, column: 4, scope: !8797)
!8805 = !DILocation(line: 1634, column: 5, scope: !8645)
!8806 = !DILocation(line: 1636, column: 34, scope: !8588)
!8807 = !DILocation(line: 1636, column: 43, scope: !8588)
!8808 = !DILocation(line: 1636, column: 49, scope: !8588)
!8809 = !DILocation(line: 1636, column: 55, scope: !8588)
!8810 = !DILocation(line: 1637, column: 6, scope: !8588)
!8811 = !DILocation(line: 1637, column: 16, scope: !8588)
!8812 = !DILocation(line: 1636, column: 10, scope: !8588)
!8813 = !DILocation(line: 1636, column: 8, scope: !8588)
!8814 = !DILocation(line: 1638, column: 9, scope: !8815)
!8815 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1638, column: 7)
!8816 = !DILocation(line: 1638, column: 14, scope: !8815)
!8817 = !DILocation(line: 1638, column: 36, scope: !8815)
!8818 = !DILocation(line: 1638, column: 44, scope: !8815)
!8819 = !DILocation(line: 1638, column: 19, scope: !8815)
!8820 = !DILocation(line: 1638, column: 7, scope: !8588)
!8821 = !DILocation(line: 1639, column: 5, scope: !8815)
!8822 = !DILocation(line: 1645, column: 15, scope: !8823)
!8823 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1645, column: 3)
!8824 = !DILocation(line: 1645, column: 24, scope: !8823)
!8825 = !DILocation(line: 1645, column: 13, scope: !8823)
!8826 = !DILocation(line: 1645, column: 8, scope: !8823)
!8827 = !DILocation(line: 1645, column: 30, scope: !8828)
!8828 = distinct !DILexicalBlock(scope: !8823, file: !3, line: 1645, column: 3)
!8829 = !DILocation(line: 1645, column: 39, scope: !8828)
!8830 = !DILocation(line: 1645, column: 38, scope: !8828)
!8831 = !DILocation(line: 1645, column: 35, scope: !8828)
!8832 = !DILocation(line: 1645, column: 3, scope: !8823)
!8833 = !DILocation(line: 1646, column: 9, scope: !8834)
!8834 = distinct !DILexicalBlock(scope: !8828, file: !3, line: 1646, column: 9)
!8835 = !DILocation(line: 1646, column: 23, scope: !8834)
!8836 = !DILocation(line: 1646, column: 51, scope: !8834)
!8837 = !DILocation(line: 1646, column: 60, scope: !8834)
!8838 = !DILocation(line: 1646, column: 63, scope: !8834)
!8839 = !DILocation(line: 1646, column: 26, scope: !8834)
!8840 = !DILocation(line: 1646, column: 9, scope: !8828)
!8841 = !DILocation(line: 1647, column: 7, scope: !8834)
!8842 = !DILocation(line: 1646, column: 77, scope: !8834)
!8843 = !DILocation(line: 1645, column: 56, scope: !8828)
!8844 = !DILocation(line: 1645, column: 54, scope: !8828)
!8845 = !DILocation(line: 1645, column: 3, scope: !8828)
!8846 = distinct !{!8846, !8832, !8847}
!8847 = !DILocation(line: 1647, column: 14, scope: !8823)
!8848 = !DILocation(line: 1650, column: 16, scope: !8849)
!8849 = distinct !DILexicalBlock(scope: !8588, file: !3, line: 1650, column: 3)
!8850 = !DILocation(line: 1650, column: 15, scope: !8849)
!8851 = !DILocation(line: 1650, column: 13, scope: !8849)
!8852 = !DILocation(line: 1650, column: 8, scope: !8849)
!8853 = !DILocation(line: 1650, column: 26, scope: !8854)
!8854 = distinct !DILexicalBlock(scope: !8849, file: !3, line: 1650, column: 3)
!8855 = !DILocation(line: 1650, column: 34, scope: !8854)
!8856 = !DILocation(line: 1650, column: 43, scope: !8854)
!8857 = !DILocation(line: 1650, column: 31, scope: !8854)
!8858 = !DILocation(line: 1650, column: 3, scope: !8849)
!8859 = !DILocation(line: 1651, column: 9, scope: !8860)
!8860 = distinct !DILexicalBlock(scope: !8854, file: !3, line: 1651, column: 9)
!8861 = !DILocation(line: 1652, column: 2, scope: !8860)
!8862 = !DILocation(line: 1652, column: 21, scope: !8860)
!8863 = !DILocation(line: 1652, column: 30, scope: !8860)
!8864 = !DILocation(line: 1652, column: 33, scope: !8860)
!8865 = !DILocation(line: 1652, column: 6, scope: !8860)
!8866 = !DILocation(line: 1653, column: 6, scope: !8860)
!8867 = !DILocation(line: 1653, column: 24, scope: !8860)
!8868 = !DILocation(line: 1653, column: 33, scope: !8860)
!8869 = !DILocation(line: 1653, column: 36, scope: !8860)
!8870 = !DILocation(line: 1653, column: 9, scope: !8860)
!8871 = !DILocation(line: 1651, column: 9, scope: !8854)
!8872 = !DILocation(line: 1654, column: 7, scope: !8860)
!8873 = !DILocation(line: 1653, column: 41, scope: !8860)
!8874 = !DILocation(line: 1650, column: 56, scope: !8854)
!8875 = !DILocation(line: 1650, column: 54, scope: !8854)
!8876 = !DILocation(line: 1650, column: 3, scope: !8854)
!8877 = distinct !{!8877, !8858, !8878}
!8878 = !DILocation(line: 1654, column: 14, scope: !8849)
!8879 = !DILocation(line: 1656, column: 10, scope: !8588)
!8880 = !DILocation(line: 1656, column: 3, scope: !8588)
!8881 = !DILocation(line: 1657, column: 1, scope: !8588)
!8882 = distinct !DISubprogram(name: "noce_emit_cmove", scope: !3, file: !3, line: 1213, type: !8883, scopeLine: 1215, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8883 = !DISubroutineType(types: !8884)
!8884 = !{!2577, !5382, !2577, !2301, !2577, !2577, !2577, !2577}
!8885 = !DILocalVariable(name: "if_info", arg: 1, scope: !8882, file: !3, line: 1213, type: !5382)
!8886 = !DILocation(line: 1213, column: 39, scope: !8882)
!8887 = !DILocalVariable(name: "x", arg: 2, scope: !8882, file: !3, line: 1213, type: !2577)
!8888 = !DILocation(line: 1213, column: 52, scope: !8882)
!8889 = !DILocalVariable(name: "code", arg: 3, scope: !8882, file: !3, line: 1213, type: !2301)
!8890 = !DILocation(line: 1213, column: 69, scope: !8882)
!8891 = !DILocalVariable(name: "cmp_a", arg: 4, scope: !8882, file: !3, line: 1214, type: !2577)
!8892 = !DILocation(line: 1214, column: 8, scope: !8882)
!8893 = !DILocalVariable(name: "cmp_b", arg: 5, scope: !8882, file: !3, line: 1214, type: !2577)
!8894 = !DILocation(line: 1214, column: 19, scope: !8882)
!8895 = !DILocalVariable(name: "vfalse", arg: 6, scope: !8882, file: !3, line: 1214, type: !2577)
!8896 = !DILocation(line: 1214, column: 30, scope: !8882)
!8897 = !DILocalVariable(name: "vtrue", arg: 7, scope: !8882, file: !3, line: 1214, type: !2577)
!8898 = !DILocation(line: 1214, column: 42, scope: !8882)
!8899 = !DILocation(line: 1221, column: 7, scope: !8900)
!8900 = distinct !DILexicalBlock(scope: !8882, file: !3, line: 1221, column: 7)
!8901 = !DILocation(line: 1221, column: 16, scope: !8900)
!8902 = !DILocation(line: 1221, column: 33, scope: !8900)
!8903 = !DILocation(line: 1221, column: 42, scope: !8900)
!8904 = !DILocation(line: 1221, column: 30, scope: !8900)
!8905 = !DILocation(line: 1221, column: 7, scope: !8882)
!8906 = !DILocalVariable(name: "tmp", scope: !8907, file: !3, line: 1223, type: !2577)
!8907 = distinct !DILexicalBlock(scope: !8900, file: !3, line: 1222, column: 5)
!8908 = !DILocation(line: 1223, column: 11, scope: !8907)
!8909 = !DILocation(line: 1225, column: 13, scope: !8907)
!8910 = !DILocation(line: 1225, column: 11, scope: !8907)
!8911 = !DILocation(line: 1226, column: 13, scope: !8907)
!8912 = !DILocation(line: 1226, column: 11, scope: !8907)
!8913 = !DILocation(line: 1227, column: 13, scope: !8907)
!8914 = !DILocation(line: 1227, column: 11, scope: !8907)
!8915 = !DILocation(line: 1229, column: 7, scope: !8907)
!8916 = !DILocation(line: 1230, column: 24, scope: !8907)
!8917 = !DILocation(line: 1230, column: 13, scope: !8907)
!8918 = !DILocation(line: 1230, column: 11, scope: !8907)
!8919 = !DILocation(line: 1232, column: 27, scope: !8920)
!8920 = distinct !DILexicalBlock(scope: !8907, file: !3, line: 1232, column: 11)
!8921 = !DILocation(line: 1232, column: 11, scope: !8920)
!8922 = !DILocation(line: 1232, column: 32, scope: !8920)
!8923 = !DILocation(line: 1232, column: 11, scope: !8907)
!8924 = !DILocation(line: 1234, column: 10, scope: !8925)
!8925 = distinct !DILexicalBlock(scope: !8920, file: !3, line: 1233, column: 2)
!8926 = !DILocation(line: 1234, column: 8, scope: !8925)
!8927 = !DILocation(line: 1235, column: 4, scope: !8925)
!8928 = !DILocation(line: 1236, column: 15, scope: !8925)
!8929 = !DILocation(line: 1236, column: 4, scope: !8925)
!8930 = !DILocation(line: 1238, column: 11, scope: !8925)
!8931 = !DILocation(line: 1238, column: 4, scope: !8925)
!8932 = !DILocation(line: 1241, column: 7, scope: !8907)
!8933 = !DILocation(line: 1242, column: 5, scope: !8907)
!8934 = !DILocation(line: 1245, column: 26, scope: !8935)
!8935 = distinct !DILexicalBlock(scope: !8882, file: !3, line: 1245, column: 7)
!8936 = !DILocation(line: 1245, column: 33, scope: !8935)
!8937 = !DILocation(line: 1245, column: 9, scope: !8935)
!8938 = !DILocation(line: 1246, column: 7, scope: !8935)
!8939 = !DILocation(line: 1246, column: 29, scope: !8935)
!8940 = !DILocation(line: 1246, column: 36, scope: !8935)
!8941 = !DILocation(line: 1246, column: 12, scope: !8935)
!8942 = !DILocation(line: 1245, column: 7, scope: !8882)
!8943 = !DILocation(line: 1247, column: 5, scope: !8935)
!8944 = !DILocation(line: 1250, column: 33, scope: !8882)
!8945 = !DILocation(line: 1250, column: 36, scope: !8882)
!8946 = !DILocation(line: 1250, column: 42, scope: !8882)
!8947 = !DILocation(line: 1250, column: 49, scope: !8882)
!8948 = !DILocation(line: 1251, column: 5, scope: !8882)
!8949 = !DILocation(line: 1251, column: 12, scope: !8882)
!8950 = !DILocation(line: 1251, column: 20, scope: !8882)
!8951 = !DILocation(line: 1252, column: 13, scope: !8882)
!8952 = !DILocation(line: 1252, column: 18, scope: !8882)
!8953 = !DILocation(line: 1252, column: 25, scope: !8882)
!8954 = !DILocation(line: 1252, column: 28, scope: !8882)
!8955 = !DILocation(line: 1252, column: 33, scope: !8882)
!8956 = !DILocation(line: 1253, column: 6, scope: !8882)
!8957 = !DILocation(line: 1253, column: 9, scope: !8882)
!8958 = !DILocation(line: 1253, column: 14, scope: !8882)
!8959 = !DILocation(line: 1253, column: 21, scope: !8882)
!8960 = !DILocation(line: 1253, column: 24, scope: !8882)
!8961 = !DILocation(line: 1253, column: 29, scope: !8882)
!8962 = !DILocation(line: 1250, column: 10, scope: !8882)
!8963 = !DILocation(line: 1250, column: 3, scope: !8882)
!8964 = !DILocation(line: 1261, column: 1, scope: !8882)
!8965 = distinct !DISubprogram(name: "check_cond_move_block", scope: !3, file: !3, line: 2501, type: !8966, scopeLine: 2502, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!8966 = !DISubroutineType(types: !8967)
!8967 = !{!2545, !2546, !3777, !8968, !2577}
!8968 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3778, size: 64)
!8969 = !DILocalVariable(name: "bb", arg: 1, scope: !8965, file: !3, line: 2501, type: !2546)
!8970 = !DILocation(line: 2501, column: 36, scope: !8965)
!8971 = !DILocalVariable(name: "vals", arg: 2, scope: !8965, file: !3, line: 2501, type: !3777)
!8972 = !DILocation(line: 2501, column: 45, scope: !8965)
!8973 = !DILocalVariable(name: "regs", arg: 3, scope: !8965, file: !3, line: 2501, type: !8968)
!8974 = !DILocation(line: 2501, column: 69, scope: !8965)
!8975 = !DILocalVariable(name: "cond", arg: 4, scope: !8965, file: !3, line: 2501, type: !2577)
!8976 = !DILocation(line: 2501, column: 79, scope: !8965)
!8977 = !DILocalVariable(name: "insn", scope: !8965, file: !3, line: 2503, type: !2577)
!8978 = !DILocation(line: 2503, column: 7, scope: !8965)
!8979 = !DILocation(line: 2507, column: 10, scope: !8965)
!8980 = !DILocation(line: 2507, column: 8, scope: !8965)
!8981 = !DILocation(line: 2508, column: 7, scope: !8982)
!8982 = distinct !DILexicalBlock(scope: !8965, file: !3, line: 2508, column: 7)
!8983 = !DILocation(line: 2508, column: 21, scope: !8982)
!8984 = !DILocation(line: 2508, column: 37, scope: !8982)
!8985 = !DILocation(line: 2508, column: 25, scope: !8982)
!8986 = !DILocation(line: 2508, column: 7, scope: !8965)
!8987 = !DILocation(line: 2509, column: 5, scope: !8982)
!8988 = !DILocation(line: 2511, column: 3, scope: !8989)
!8989 = distinct !DILexicalBlock(scope: !8965, file: !3, line: 2511, column: 3)
!8990 = !DILocation(line: 2511, column: 3, scope: !8991)
!8991 = distinct !DILexicalBlock(scope: !8989, file: !3, line: 2511, column: 3)
!8992 = !DILocation(line: 0, scope: !8991)
!8993 = !DILocalVariable(name: "set", scope: !8994, file: !3, line: 2513, type: !2577)
!8994 = distinct !DILexicalBlock(scope: !8991, file: !3, line: 2512, column: 5)
!8995 = !DILocation(line: 2513, column: 11, scope: !8994)
!8996 = !DILocalVariable(name: "dest", scope: !8994, file: !3, line: 2513, type: !2577)
!8997 = !DILocation(line: 2513, column: 16, scope: !8994)
!8998 = !DILocalVariable(name: "src", scope: !8994, file: !3, line: 2513, type: !2577)
!8999 = !DILocation(line: 2513, column: 22, scope: !8994)
!9000 = !DILocation(line: 2515, column: 12, scope: !9001)
!9001 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2515, column: 11)
!9002 = !DILocation(line: 2515, column: 35, scope: !9001)
!9003 = !DILocation(line: 2515, column: 38, scope: !9001)
!9004 = !DILocation(line: 2515, column: 11, scope: !8994)
!9005 = !DILocation(line: 2516, column: 2, scope: !9001)
!9006 = !DILocation(line: 2517, column: 13, scope: !8994)
!9007 = !DILocation(line: 2517, column: 11, scope: !8994)
!9008 = !DILocation(line: 2518, column: 12, scope: !9009)
!9009 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2518, column: 11)
!9010 = !DILocation(line: 2518, column: 11, scope: !8994)
!9011 = !DILocation(line: 2519, column: 2, scope: !9009)
!9012 = !DILocation(line: 2521, column: 14, scope: !8994)
!9013 = !DILocation(line: 2521, column: 12, scope: !8994)
!9014 = !DILocation(line: 2522, column: 13, scope: !8994)
!9015 = !DILocation(line: 2522, column: 11, scope: !8994)
!9016 = !DILocation(line: 2523, column: 12, scope: !9017)
!9017 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2523, column: 11)
!9018 = !DILocation(line: 2524, column: 4, scope: !9017)
!9019 = !DILocation(line: 2524, column: 34, scope: !9017)
!9020 = !DILocation(line: 2523, column: 11, scope: !8994)
!9021 = !DILocation(line: 2525, column: 2, scope: !9017)
!9022 = !DILocation(line: 2527, column: 12, scope: !9023)
!9023 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2527, column: 11)
!9024 = !DILocation(line: 2527, column: 29, scope: !9023)
!9025 = !DILocation(line: 2527, column: 51, scope: !9023)
!9026 = !DILocation(line: 2527, column: 33, scope: !9023)
!9027 = !DILocation(line: 2527, column: 11, scope: !8994)
!9028 = !DILocation(line: 2528, column: 2, scope: !9023)
!9029 = !DILocation(line: 2530, column: 27, scope: !9030)
!9030 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2530, column: 11)
!9031 = !DILocation(line: 2530, column: 11, scope: !9030)
!9032 = !DILocation(line: 2530, column: 32, scope: !9030)
!9033 = !DILocation(line: 2530, column: 51, scope: !9030)
!9034 = !DILocation(line: 2530, column: 35, scope: !9030)
!9035 = !DILocation(line: 2530, column: 11, scope: !8994)
!9036 = !DILocation(line: 2531, column: 2, scope: !9030)
!9037 = !DILocation(line: 2533, column: 23, scope: !9038)
!9038 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2533, column: 11)
!9039 = !DILocation(line: 2533, column: 11, scope: !9038)
!9040 = !DILocation(line: 2533, column: 28, scope: !9038)
!9041 = !DILocation(line: 2533, column: 43, scope: !9038)
!9042 = !DILocation(line: 2533, column: 31, scope: !9038)
!9043 = !DILocation(line: 2533, column: 11, scope: !8994)
!9044 = !DILocation(line: 2534, column: 2, scope: !9038)
!9045 = !DILocation(line: 2538, column: 12, scope: !9046)
!9046 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2538, column: 11)
!9047 = !DILocation(line: 2539, column: 5, scope: !9046)
!9048 = !DILocation(line: 2539, column: 8, scope: !9046)
!9049 = !DILocation(line: 2539, column: 13, scope: !9046)
!9050 = !DILocation(line: 2539, column: 26, scope: !9046)
!9051 = !DILocation(line: 2540, column: 4, scope: !9046)
!9052 = !DILocation(line: 2540, column: 8, scope: !9046)
!9053 = !DILocation(line: 2540, column: 23, scope: !9046)
!9054 = !DILocation(line: 2540, column: 33, scope: !9046)
!9055 = !DILocation(line: 2540, column: 36, scope: !9046)
!9056 = !DILocation(line: 2541, column: 8, scope: !9046)
!9057 = !DILocation(line: 2541, column: 11, scope: !9046)
!9058 = !DILocation(line: 2541, column: 16, scope: !9046)
!9059 = !DILocation(line: 2541, column: 42, scope: !9046)
!9060 = !DILocation(line: 2538, column: 11, scope: !8994)
!9061 = !DILocation(line: 2542, column: 2, scope: !9046)
!9062 = !DILocation(line: 2546, column: 11, scope: !9063)
!9063 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2546, column: 11)
!9064 = !DILocation(line: 2546, column: 16, scope: !9063)
!9065 = !DILocation(line: 2546, column: 30, scope: !9063)
!9066 = !DILocation(line: 2546, column: 11, scope: !8994)
!9067 = !DILocation(line: 2547, column: 2, scope: !9063)
!9068 = !DILocation(line: 2551, column: 36, scope: !9069)
!9069 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2551, column: 11)
!9070 = !DILocation(line: 2551, column: 42, scope: !9069)
!9071 = !DILocation(line: 2551, column: 11, scope: !9069)
!9072 = !DILocation(line: 2551, column: 11, scope: !8994)
!9073 = !DILocation(line: 2552, column: 2, scope: !9069)
!9074 = !DILocation(line: 2556, column: 12, scope: !9075)
!9075 = distinct !DILexicalBlock(scope: !8994, file: !3, line: 2556, column: 11)
!9076 = !DILocation(line: 2557, column: 4, scope: !9075)
!9077 = !DILocation(line: 2557, column: 27, scope: !9075)
!9078 = !DILocation(line: 2557, column: 32, scope: !9075)
!9079 = !DILocation(line: 2557, column: 38, scope: !9075)
!9080 = !DILocation(line: 2557, column: 7, scope: !9075)
!9081 = !DILocation(line: 2556, column: 11, scope: !8994)
!9082 = !DILocation(line: 2558, column: 2, scope: !9075)
!9083 = !DILocation(line: 2560, column: 28, scope: !8994)
!9084 = !DILocation(line: 2560, column: 7, scope: !8994)
!9085 = !DILocation(line: 2560, column: 12, scope: !8994)
!9086 = !DILocation(line: 2560, column: 26, scope: !8994)
!9087 = !DILocation(line: 2562, column: 7, scope: !8994)
!9088 = !DILocation(line: 2563, column: 5, scope: !8994)
!9089 = distinct !{!9089, !8988, !9090}
!9090 = !DILocation(line: 2563, column: 5, scope: !8989)
!9091 = !DILocation(line: 2565, column: 3, scope: !8965)
!9092 = !DILocation(line: 2566, column: 1, scope: !8965)
!9093 = distinct !DISubprogram(name: "VEC_int_heap_free", scope: !3098, file: !3098, line: 32, type: !9094, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9094 = !DISubroutineType(types: !9095)
!9095 = !{null, !8968}
!9096 = !DILocalVariable(name: "vec_", arg: 1, scope: !9093, file: !3098, line: 32, type: !8968)
!9097 = !DILocation(line: 32, column: 1, scope: !9093)
!9098 = !DILocation(line: 32, column: 1, scope: !9099)
!9099 = distinct !DILexicalBlock(scope: !9093, file: !3098, line: 32, column: 1)
!9100 = distinct !DISubprogram(name: "VEC_int_base_iterate", scope: !3098, file: !3098, line: 31, type: !9101, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9101 = !DISubroutineType(types: !9102)
!9102 = !{!2545, !9103, !7, !9105}
!9103 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !9104, size: 64)
!9104 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !3783)
!9105 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2545, size: 64)
!9106 = !DILocalVariable(name: "vec_", arg: 1, scope: !9100, file: !3098, line: 31, type: !9103)
!9107 = !DILocation(line: 31, column: 1, scope: !9100)
!9108 = !DILocalVariable(name: "ix_", arg: 2, scope: !9100, file: !3098, line: 31, type: !7)
!9109 = !DILocalVariable(name: "ptr", arg: 3, scope: !9100, file: !3098, line: 31, type: !9105)
!9110 = !DILocation(line: 31, column: 1, scope: !9111)
!9111 = distinct !DILexicalBlock(scope: !9100, file: !3098, line: 31, column: 1)
!9112 = !DILocation(line: 31, column: 1, scope: !9113)
!9113 = distinct !DILexicalBlock(scope: !9111, file: !3098, line: 31, column: 1)
!9114 = !DILocation(line: 31, column: 1, scope: !9115)
!9115 = distinct !DILexicalBlock(scope: !9111, file: !3098, line: 31, column: 1)
!9116 = distinct !DISubprogram(name: "cond_move_convert_if_block", scope: !3, file: !3, line: 2576, type: !9117, scopeLine: 2580, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9117 = !DISubroutineType(types: !9118)
!9118 = !{!2809, !5382, !2546, !2577, !3777, !3777, !2809}
!9119 = !DILocalVariable(name: "if_infop", arg: 1, scope: !9116, file: !3, line: 2576, type: !5382)
!9120 = !DILocation(line: 2576, column: 50, scope: !9116)
!9121 = !DILocalVariable(name: "bb", arg: 2, scope: !9116, file: !3, line: 2577, type: !2546)
!9122 = !DILocation(line: 2577, column: 20, scope: !9116)
!9123 = !DILocalVariable(name: "cond", arg: 3, scope: !9116, file: !3, line: 2577, type: !2577)
!9124 = !DILocation(line: 2577, column: 28, scope: !9116)
!9125 = !DILocalVariable(name: "then_vals", arg: 4, scope: !9116, file: !3, line: 2578, type: !3777)
!9126 = !DILocation(line: 2578, column: 13, scope: !9116)
!9127 = !DILocalVariable(name: "else_vals", arg: 5, scope: !9116, file: !3, line: 2578, type: !3777)
!9128 = !DILocation(line: 2578, column: 29, scope: !9116)
!9129 = !DILocalVariable(name: "else_block_p", arg: 6, scope: !9116, file: !3, line: 2579, type: !2809)
!9130 = !DILocation(line: 2579, column: 13, scope: !9116)
!9131 = !DILocalVariable(name: "code", scope: !9116, file: !3, line: 2581, type: !2301)
!9132 = !DILocation(line: 2581, column: 17, scope: !9116)
!9133 = !DILocalVariable(name: "insn", scope: !9116, file: !3, line: 2582, type: !2577)
!9134 = !DILocation(line: 2582, column: 7, scope: !9116)
!9135 = !DILocalVariable(name: "cond_arg0", scope: !9116, file: !3, line: 2582, type: !2577)
!9136 = !DILocation(line: 2582, column: 13, scope: !9116)
!9137 = !DILocalVariable(name: "cond_arg1", scope: !9116, file: !3, line: 2582, type: !2577)
!9138 = !DILocation(line: 2582, column: 24, scope: !9116)
!9139 = !DILocation(line: 2584, column: 10, scope: !9116)
!9140 = !DILocation(line: 2584, column: 8, scope: !9116)
!9141 = !DILocation(line: 2585, column: 15, scope: !9116)
!9142 = !DILocation(line: 2585, column: 13, scope: !9116)
!9143 = !DILocation(line: 2586, column: 15, scope: !9116)
!9144 = !DILocation(line: 2586, column: 13, scope: !9116)
!9145 = !DILocation(line: 2588, column: 3, scope: !9146)
!9146 = distinct !DILexicalBlock(scope: !9116, file: !3, line: 2588, column: 3)
!9147 = !DILocation(line: 2588, column: 3, scope: !9148)
!9148 = distinct !DILexicalBlock(scope: !9146, file: !3, line: 2588, column: 3)
!9149 = !DILocation(line: 0, scope: !9148)
!9150 = !DILocalVariable(name: "set", scope: !9151, file: !3, line: 2590, type: !2577)
!9151 = distinct !DILexicalBlock(scope: !9148, file: !3, line: 2589, column: 5)
!9152 = !DILocation(line: 2590, column: 11, scope: !9151)
!9153 = !DILocalVariable(name: "target", scope: !9151, file: !3, line: 2590, type: !2577)
!9154 = !DILocation(line: 2590, column: 16, scope: !9151)
!9155 = !DILocalVariable(name: "dest", scope: !9151, file: !3, line: 2590, type: !2577)
!9156 = !DILocation(line: 2590, column: 24, scope: !9151)
!9157 = !DILocalVariable(name: "t", scope: !9151, file: !3, line: 2590, type: !2577)
!9158 = !DILocation(line: 2590, column: 30, scope: !9151)
!9159 = !DILocalVariable(name: "e", scope: !9151, file: !3, line: 2590, type: !2577)
!9160 = !DILocation(line: 2590, column: 33, scope: !9151)
!9161 = !DILocalVariable(name: "regno", scope: !9151, file: !3, line: 2591, type: !7)
!9162 = !DILocation(line: 2591, column: 20, scope: !9151)
!9163 = !DILocation(line: 2594, column: 12, scope: !9164)
!9164 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 2594, column: 11)
!9165 = !DILocation(line: 2594, column: 35, scope: !9164)
!9166 = !DILocation(line: 2594, column: 38, scope: !9164)
!9167 = !DILocation(line: 2594, column: 11, scope: !9151)
!9168 = !DILocation(line: 2595, column: 2, scope: !9164)
!9169 = !DILocation(line: 2596, column: 13, scope: !9151)
!9170 = !DILocation(line: 2596, column: 11, scope: !9151)
!9171 = !DILocation(line: 2597, column: 7, scope: !9151)
!9172 = !DILocation(line: 2599, column: 14, scope: !9151)
!9173 = !DILocation(line: 2599, column: 12, scope: !9151)
!9174 = !DILocation(line: 2600, column: 15, scope: !9151)
!9175 = !DILocation(line: 2600, column: 13, scope: !9151)
!9176 = !DILocation(line: 2602, column: 11, scope: !9151)
!9177 = !DILocation(line: 2602, column: 21, scope: !9151)
!9178 = !DILocation(line: 2602, column: 9, scope: !9151)
!9179 = !DILocation(line: 2603, column: 11, scope: !9151)
!9180 = !DILocation(line: 2603, column: 21, scope: !9151)
!9181 = !DILocation(line: 2603, column: 9, scope: !9151)
!9182 = !DILocation(line: 2605, column: 11, scope: !9183)
!9183 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 2605, column: 11)
!9184 = !DILocation(line: 2605, column: 11, scope: !9151)
!9185 = !DILocation(line: 2609, column: 8, scope: !9186)
!9186 = distinct !DILexicalBlock(scope: !9187, file: !3, line: 2609, column: 8)
!9187 = distinct !DILexicalBlock(scope: !9183, file: !3, line: 2606, column: 2)
!9188 = !DILocation(line: 2609, column: 8, scope: !9187)
!9189 = !DILocation(line: 2610, column: 6, scope: !9186)
!9190 = !DILocation(line: 2611, column: 8, scope: !9187)
!9191 = !DILocation(line: 2611, column: 6, scope: !9187)
!9192 = !DILocation(line: 2612, column: 4, scope: !9187)
!9193 = !DILocation(line: 2613, column: 2, scope: !9187)
!9194 = !DILocation(line: 2616, column: 4, scope: !9195)
!9195 = distinct !DILexicalBlock(scope: !9183, file: !3, line: 2615, column: 2)
!9196 = !DILocation(line: 2617, column: 9, scope: !9197)
!9197 = distinct !DILexicalBlock(scope: !9195, file: !3, line: 2617, column: 8)
!9198 = !DILocation(line: 2617, column: 8, scope: !9195)
!9199 = !DILocation(line: 2618, column: 10, scope: !9197)
!9200 = !DILocation(line: 2618, column: 8, scope: !9197)
!9201 = !DILocation(line: 2618, column: 6, scope: !9197)
!9202 = !DILocation(line: 2621, column: 33, scope: !9151)
!9203 = !DILocation(line: 2621, column: 43, scope: !9151)
!9204 = !DILocation(line: 2621, column: 49, scope: !9151)
!9205 = !DILocation(line: 2621, column: 55, scope: !9151)
!9206 = !DILocation(line: 2621, column: 66, scope: !9151)
!9207 = !DILocation(line: 2622, column: 5, scope: !9151)
!9208 = !DILocation(line: 2622, column: 8, scope: !9151)
!9209 = !DILocation(line: 2621, column: 16, scope: !9151)
!9210 = !DILocation(line: 2621, column: 14, scope: !9151)
!9211 = !DILocation(line: 2623, column: 12, scope: !9212)
!9212 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 2623, column: 11)
!9213 = !DILocation(line: 2623, column: 11, scope: !9151)
!9214 = !DILocation(line: 2624, column: 2, scope: !9212)
!9215 = !DILocation(line: 2626, column: 11, scope: !9216)
!9216 = distinct !DILexicalBlock(scope: !9151, file: !3, line: 2626, column: 11)
!9217 = !DILocation(line: 2626, column: 21, scope: !9216)
!9218 = !DILocation(line: 2626, column: 18, scope: !9216)
!9219 = !DILocation(line: 2626, column: 11, scope: !9151)
!9220 = !DILocation(line: 2627, column: 23, scope: !9216)
!9221 = !DILocation(line: 2627, column: 29, scope: !9216)
!9222 = !DILocation(line: 2627, column: 2, scope: !9216)
!9223 = !DILocation(line: 2628, column: 5, scope: !9151)
!9224 = distinct !{!9224, !9145, !9225}
!9225 = !DILocation(line: 2628, column: 5, scope: !9146)
!9226 = !DILocation(line: 2630, column: 3, scope: !9116)
!9227 = !DILocation(line: 2631, column: 1, scope: !9116)
!9228 = distinct !DISubprogram(name: "VEC_int_heap_safe_push", scope: !3098, file: !3098, line: 32, type: !9229, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9229 = !DISubroutineType(types: !9230)
!9230 = !{!9105, !8968, !9231}
!9231 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2545)
!9232 = !DILocalVariable(name: "vec_", arg: 1, scope: !9228, file: !3098, line: 32, type: !8968)
!9233 = !DILocation(line: 32, column: 1, scope: !9228)
!9234 = !DILocalVariable(name: "obj_", arg: 2, scope: !9228, file: !3098, line: 32, type: !9231)
!9235 = distinct !DISubprogram(name: "VEC_int_heap_reserve", scope: !3098, file: !3098, line: 32, type: !9236, scopeLine: 32, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9236 = !DISubroutineType(types: !9237)
!9237 = !{!2545, !8968, !2545}
!9238 = !DILocalVariable(name: "vec_", arg: 1, scope: !9235, file: !3098, line: 32, type: !8968)
!9239 = !DILocation(line: 32, column: 1, scope: !9235)
!9240 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9235, file: !3098, line: 32, type: !2545)
!9241 = !DILocalVariable(name: "extend", scope: !9235, file: !3098, line: 32, type: !2545)
!9242 = !DILocation(line: 32, column: 1, scope: !9243)
!9243 = distinct !DILexicalBlock(scope: !9235, file: !3098, line: 32, column: 1)
!9244 = distinct !DISubprogram(name: "VEC_int_base_quick_push", scope: !3098, file: !3098, line: 31, type: !9245, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9245 = !DISubroutineType(types: !9246)
!9246 = !{!9105, !9247, !2545}
!9247 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !3783, size: 64)
!9248 = !DILocalVariable(name: "vec_", arg: 1, scope: !9244, file: !3098, line: 31, type: !9247)
!9249 = !DILocation(line: 31, column: 1, scope: !9244)
!9250 = !DILocalVariable(name: "obj_", arg: 2, scope: !9244, file: !3098, line: 31, type: !2545)
!9251 = !DILocalVariable(name: "slot_", scope: !9244, file: !3098, line: 31, type: !9105)
!9252 = distinct !DISubprogram(name: "VEC_int_base_space", scope: !3098, file: !3098, line: 31, type: !9253, scopeLine: 31, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9253 = !DISubroutineType(types: !9254)
!9254 = !{!2545, !9247, !2545}
!9255 = !DILocalVariable(name: "vec_", arg: 1, scope: !9252, file: !3098, line: 31, type: !9247)
!9256 = !DILocation(line: 31, column: 1, scope: !9252)
!9257 = !DILocalVariable(name: "alloc_", arg: 2, scope: !9252, file: !3098, line: 31, type: !2545)
!9258 = distinct !DISubprogram(name: "single_pred_edge", scope: !367, file: !367, line: 653, type: !5302, scopeLine: 654, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9259 = !DILocalVariable(name: "bb", arg: 1, scope: !9258, file: !367, line: 653, type: !5278)
!9260 = !DILocation(line: 653, column: 37, scope: !9258)
!9261 = !DILocation(line: 655, column: 3, scope: !9258)
!9262 = !DILocation(line: 656, column: 10, scope: !9258)
!9263 = !DILocation(line: 656, column: 3, scope: !9258)
!9264 = distinct !DISubprogram(name: "single_pred", scope: !367, file: !367, line: 672, type: !5293, scopeLine: 673, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9265 = !DILocalVariable(name: "bb", arg: 1, scope: !9264, file: !367, line: 672, type: !5278)
!9266 = !DILocation(line: 672, column: 32, scope: !9264)
!9267 = !DILocation(line: 674, column: 28, scope: !9264)
!9268 = !DILocation(line: 674, column: 10, scope: !9264)
!9269 = !DILocation(line: 674, column: 33, scope: !9264)
!9270 = !DILocation(line: 674, column: 3, scope: !9264)
!9271 = distinct !DISubprogram(name: "block_jumps_and_fallthru_p", scope: !3, file: !3, line: 3105, type: !9272, scopeLine: 3106, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9272 = !DISubroutineType(types: !9273)
!9273 = !{!2545, !2546, !2546}
!9274 = !DILocalVariable(name: "cur_bb", arg: 1, scope: !9271, file: !3, line: 3105, type: !2546)
!9275 = !DILocation(line: 3105, column: 41, scope: !9271)
!9276 = !DILocalVariable(name: "target_bb", arg: 2, scope: !9271, file: !3, line: 3105, type: !2546)
!9277 = !DILocation(line: 3105, column: 61, scope: !9271)
!9278 = !DILocalVariable(name: "cur_edge", scope: !9271, file: !3, line: 3107, type: !2563)
!9279 = !DILocation(line: 3107, column: 8, scope: !9271)
!9280 = !DILocalVariable(name: "fallthru_p", scope: !9271, file: !3, line: 3108, type: !2545)
!9281 = !DILocation(line: 3108, column: 7, scope: !9271)
!9282 = !DILocalVariable(name: "jump_p", scope: !9271, file: !3, line: 3109, type: !2545)
!9283 = !DILocation(line: 3109, column: 7, scope: !9271)
!9284 = !DILocalVariable(name: "insn", scope: !9271, file: !3, line: 3110, type: !2577)
!9285 = !DILocation(line: 3110, column: 7, scope: !9271)
!9286 = !DILocalVariable(name: "end", scope: !9271, file: !3, line: 3111, type: !2577)
!9287 = !DILocation(line: 3111, column: 7, scope: !9271)
!9288 = !DILocalVariable(name: "n_insns", scope: !9271, file: !3, line: 3112, type: !2545)
!9289 = !DILocation(line: 3112, column: 7, scope: !9271)
!9290 = !DILocalVariable(name: "ei", scope: !9271, file: !3, line: 3113, type: !4456)
!9291 = !DILocation(line: 3113, column: 17, scope: !9271)
!9292 = !DILocation(line: 3115, column: 8, scope: !9293)
!9293 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 3115, column: 7)
!9294 = !DILocation(line: 3115, column: 15, scope: !9293)
!9295 = !DILocation(line: 3115, column: 19, scope: !9293)
!9296 = !DILocation(line: 3115, column: 7, scope: !9271)
!9297 = !DILocation(line: 3116, column: 5, scope: !9293)
!9298 = !DILocation(line: 3119, column: 7, scope: !9299)
!9299 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 3119, column: 7)
!9300 = !DILocation(line: 3119, column: 34, scope: !9299)
!9301 = !DILocation(line: 3119, column: 7, scope: !9271)
!9302 = !DILocation(line: 3120, column: 5, scope: !9299)
!9303 = !DILocation(line: 3122, column: 3, scope: !9304)
!9304 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 3122, column: 3)
!9305 = !DILocation(line: 3122, column: 3, scope: !9306)
!9306 = distinct !DILexicalBlock(scope: !9304, file: !3, line: 3122, column: 3)
!9307 = !DILocation(line: 3124, column: 11, scope: !9308)
!9308 = distinct !DILexicalBlock(scope: !9309, file: !3, line: 3124, column: 11)
!9309 = distinct !DILexicalBlock(scope: !9306, file: !3, line: 3123, column: 5)
!9310 = !DILocation(line: 3124, column: 21, scope: !9308)
!9311 = !DILocation(line: 3124, column: 27, scope: !9308)
!9312 = !DILocation(line: 3124, column: 11, scope: !9309)
!9313 = !DILocation(line: 3126, column: 2, scope: !9308)
!9314 = !DILocation(line: 3128, column: 16, scope: !9315)
!9315 = distinct !DILexicalBlock(scope: !9308, file: !3, line: 3128, column: 16)
!9316 = !DILocation(line: 3128, column: 26, scope: !9315)
!9317 = !DILocation(line: 3128, column: 32, scope: !9315)
!9318 = !DILocation(line: 3128, column: 16, scope: !9308)
!9319 = !DILocation(line: 3129, column: 13, scope: !9315)
!9320 = !DILocation(line: 3129, column: 2, scope: !9315)
!9321 = !DILocation(line: 3131, column: 16, scope: !9322)
!9322 = distinct !DILexicalBlock(scope: !9315, file: !3, line: 3131, column: 16)
!9323 = !DILocation(line: 3131, column: 26, scope: !9322)
!9324 = !DILocation(line: 3131, column: 34, scope: !9322)
!9325 = !DILocation(line: 3131, column: 31, scope: !9322)
!9326 = !DILocation(line: 3131, column: 16, scope: !9315)
!9327 = !DILocation(line: 3132, column: 9, scope: !9322)
!9328 = !DILocation(line: 3132, column: 2, scope: !9322)
!9329 = !DILocation(line: 3135, column: 2, scope: !9322)
!9330 = !DILocation(line: 3136, column: 5, scope: !9309)
!9331 = distinct !{!9331, !9303, !9332}
!9332 = !DILocation(line: 3136, column: 5, scope: !9304)
!9333 = !DILocation(line: 3138, column: 8, scope: !9334)
!9334 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 3138, column: 7)
!9335 = !DILocation(line: 3138, column: 17, scope: !9334)
!9336 = !DILocation(line: 3138, column: 15, scope: !9334)
!9337 = !DILocation(line: 3138, column: 29, scope: !9334)
!9338 = !DILocation(line: 3138, column: 7, scope: !9271)
!9339 = !DILocation(line: 3139, column: 5, scope: !9334)
!9340 = !DILocation(line: 3145, column: 9, scope: !9271)
!9341 = !DILocation(line: 3145, column: 7, scope: !9271)
!9342 = !DILocation(line: 3146, column: 10, scope: !9271)
!9343 = !DILocation(line: 3146, column: 8, scope: !9271)
!9344 = !DILocation(line: 3148, column: 3, scope: !9271)
!9345 = !DILocation(line: 3148, column: 10, scope: !9271)
!9346 = !DILocation(line: 3148, column: 15, scope: !9271)
!9347 = !DILocation(line: 3150, column: 11, scope: !9348)
!9348 = distinct !DILexicalBlock(scope: !9349, file: !3, line: 3150, column: 11)
!9349 = distinct !DILexicalBlock(scope: !9271, file: !3, line: 3149, column: 5)
!9350 = !DILocation(line: 3150, column: 11, scope: !9349)
!9351 = !DILocation(line: 3151, column: 2, scope: !9348)
!9352 = !DILocation(line: 3153, column: 11, scope: !9353)
!9353 = distinct !DILexicalBlock(scope: !9349, file: !3, line: 3153, column: 11)
!9354 = !DILocation(line: 3154, column: 4, scope: !9353)
!9355 = !DILocation(line: 3154, column: 8, scope: !9353)
!9356 = !DILocation(line: 3155, column: 4, scope: !9353)
!9357 = !DILocation(line: 3155, column: 8, scope: !9353)
!9358 = !DILocation(line: 3156, column: 4, scope: !9353)
!9359 = !DILocation(line: 3156, column: 7, scope: !9353)
!9360 = !DILocation(line: 3156, column: 33, scope: !9353)
!9361 = !DILocation(line: 3157, column: 4, scope: !9353)
!9362 = !DILocation(line: 3157, column: 7, scope: !9353)
!9363 = !DILocation(line: 3157, column: 33, scope: !9353)
!9364 = !DILocation(line: 3153, column: 11, scope: !9349)
!9365 = !DILocation(line: 3158, column: 9, scope: !9353)
!9366 = !DILocation(line: 3158, column: 2, scope: !9353)
!9367 = !DILocation(line: 3160, column: 11, scope: !9368)
!9368 = distinct !DILexicalBlock(scope: !9349, file: !3, line: 3160, column: 11)
!9369 = !DILocation(line: 3160, column: 19, scope: !9368)
!9370 = !DILocation(line: 3160, column: 16, scope: !9368)
!9371 = !DILocation(line: 3160, column: 11, scope: !9349)
!9372 = !DILocation(line: 3161, column: 2, scope: !9368)
!9373 = !DILocation(line: 3163, column: 14, scope: !9349)
!9374 = !DILocation(line: 3163, column: 12, scope: !9349)
!9375 = distinct !{!9375, !9344, !9376}
!9376 = !DILocation(line: 3164, column: 5, scope: !9271)
!9377 = !DILocation(line: 3166, column: 10, scope: !9271)
!9378 = !DILocation(line: 3166, column: 3, scope: !9271)
!9379 = !DILocation(line: 3167, column: 1, scope: !9271)
!9380 = distinct !DISubprogram(name: "ei_start_1", scope: !367, file: !367, line: 696, type: !9381, scopeLine: 697, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9381 = !DISubroutineType(types: !9382)
!9382 = !{!4456, !4461}
!9383 = !DILocalVariable(name: "ev", arg: 1, scope: !9380, file: !367, line: 696, type: !4461)
!9384 = !DILocation(line: 696, column: 28, scope: !9380)
!9385 = !DILocalVariable(name: "i", scope: !9380, file: !367, line: 698, type: !4456)
!9386 = !DILocation(line: 698, column: 17, scope: !9380)
!9387 = !DILocation(line: 700, column: 5, scope: !9380)
!9388 = !DILocation(line: 700, column: 11, scope: !9380)
!9389 = !DILocation(line: 701, column: 17, scope: !9380)
!9390 = !DILocation(line: 701, column: 5, scope: !9380)
!9391 = !DILocation(line: 701, column: 15, scope: !9380)
!9392 = !DILocation(line: 703, column: 3, scope: !9380)
!9393 = distinct !DISubprogram(name: "ei_cond", scope: !367, file: !367, line: 771, type: !9394, scopeLine: 772, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9394 = !DISubroutineType(types: !9395)
!9395 = !{!2809, !4456, !9396}
!9396 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !2563, size: 64)
!9397 = !DILocalVariable(name: "ei", arg: 1, scope: !9393, file: !367, line: 771, type: !4456)
!9398 = !DILocation(line: 771, column: 24, scope: !9393)
!9399 = !DILocalVariable(name: "p", arg: 2, scope: !9393, file: !367, line: 771, type: !9396)
!9400 = !DILocation(line: 771, column: 34, scope: !9393)
!9401 = !DILocation(line: 773, column: 8, scope: !9402)
!9402 = distinct !DILexicalBlock(scope: !9393, file: !367, line: 773, column: 7)
!9403 = !DILocation(line: 773, column: 7, scope: !9393)
!9404 = !DILocation(line: 775, column: 12, scope: !9405)
!9405 = distinct !DILexicalBlock(scope: !9402, file: !367, line: 774, column: 5)
!9406 = !DILocation(line: 775, column: 8, scope: !9405)
!9407 = !DILocation(line: 775, column: 10, scope: !9405)
!9408 = !DILocation(line: 776, column: 7, scope: !9405)
!9409 = !DILocation(line: 780, column: 8, scope: !9410)
!9410 = distinct !DILexicalBlock(scope: !9402, file: !367, line: 779, column: 5)
!9411 = !DILocation(line: 780, column: 10, scope: !9410)
!9412 = !DILocation(line: 781, column: 7, scope: !9410)
!9413 = !DILocation(line: 783, column: 1, scope: !9393)
!9414 = distinct !DISubprogram(name: "ei_next", scope: !367, file: !367, line: 736, type: !9415, scopeLine: 737, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9415 = !DISubroutineType(types: !9416)
!9416 = !{null, !9417}
!9417 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4456, size: 64)
!9418 = !DILocalVariable(name: "i", arg: 1, scope: !9414, file: !367, line: 736, type: !9417)
!9419 = !DILocation(line: 736, column: 25, scope: !9414)
!9420 = !DILocation(line: 738, column: 3, scope: !9414)
!9421 = !DILocation(line: 739, column: 3, scope: !9414)
!9422 = !DILocation(line: 739, column: 6, scope: !9414)
!9423 = !DILocation(line: 739, column: 11, scope: !9414)
!9424 = !DILocation(line: 740, column: 1, scope: !9414)
!9425 = distinct !DISubprogram(name: "cond_exec_process_if_block", scope: !3, file: !3, line: 371, type: !9426, scopeLine: 373, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9426 = !DISubroutineType(types: !9427)
!9427 = !{!2545, !9428, !2545}
!9428 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !4020, size: 64)
!9429 = !DILocalVariable(name: "ce_info", arg: 1, scope: !9425, file: !3, line: 371, type: !9428)
!9430 = !DILocation(line: 371, column: 45, scope: !9425)
!9431 = !DILocalVariable(name: "do_multiple_p", arg: 2, scope: !9425, file: !3, line: 372, type: !2545)
!9432 = !DILocation(line: 372, column: 38, scope: !9425)
!9433 = !DILocalVariable(name: "test_bb", scope: !9425, file: !3, line: 374, type: !2546)
!9434 = !DILocation(line: 374, column: 15, scope: !9425)
!9435 = !DILocation(line: 374, column: 25, scope: !9425)
!9436 = !DILocation(line: 374, column: 34, scope: !9425)
!9437 = !DILocalVariable(name: "then_bb", scope: !9425, file: !3, line: 375, type: !2546)
!9438 = !DILocation(line: 375, column: 15, scope: !9425)
!9439 = !DILocation(line: 375, column: 25, scope: !9425)
!9440 = !DILocation(line: 375, column: 34, scope: !9425)
!9441 = !DILocalVariable(name: "else_bb", scope: !9425, file: !3, line: 376, type: !2546)
!9442 = !DILocation(line: 376, column: 15, scope: !9425)
!9443 = !DILocation(line: 376, column: 25, scope: !9425)
!9444 = !DILocation(line: 376, column: 34, scope: !9425)
!9445 = !DILocalVariable(name: "test_expr", scope: !9425, file: !3, line: 377, type: !2577)
!9446 = !DILocation(line: 377, column: 7, scope: !9425)
!9447 = !DILocalVariable(name: "then_start", scope: !9425, file: !3, line: 378, type: !2577)
!9448 = !DILocation(line: 378, column: 7, scope: !9425)
!9449 = !DILocalVariable(name: "then_end", scope: !9425, file: !3, line: 379, type: !2577)
!9450 = !DILocation(line: 379, column: 7, scope: !9425)
!9451 = !DILocalVariable(name: "else_start", scope: !9425, file: !3, line: 380, type: !2577)
!9452 = !DILocation(line: 380, column: 7, scope: !9425)
!9453 = !DILocalVariable(name: "else_end", scope: !9425, file: !3, line: 381, type: !2577)
!9454 = !DILocation(line: 381, column: 7, scope: !9425)
!9455 = !DILocalVariable(name: "max", scope: !9425, file: !3, line: 382, type: !2545)
!9456 = !DILocation(line: 382, column: 7, scope: !9425)
!9457 = !DILocalVariable(name: "then_mod_ok", scope: !9425, file: !3, line: 383, type: !2545)
!9458 = !DILocation(line: 383, column: 7, scope: !9425)
!9459 = !DILocalVariable(name: "true_expr", scope: !9425, file: !3, line: 384, type: !2577)
!9460 = !DILocation(line: 384, column: 7, scope: !9425)
!9461 = !DILocalVariable(name: "false_expr", scope: !9425, file: !3, line: 385, type: !2577)
!9462 = !DILocation(line: 385, column: 7, scope: !9425)
!9463 = !DILocalVariable(name: "true_prob_val", scope: !9425, file: !3, line: 386, type: !2577)
!9464 = !DILocation(line: 386, column: 7, scope: !9425)
!9465 = !DILocalVariable(name: "false_prob_val", scope: !9425, file: !3, line: 387, type: !2577)
!9466 = !DILocation(line: 387, column: 7, scope: !9425)
!9467 = !DILocalVariable(name: "n_insns", scope: !9425, file: !3, line: 388, type: !2545)
!9468 = !DILocation(line: 388, column: 7, scope: !9425)
!9469 = !DILocalVariable(name: "false_code", scope: !9425, file: !3, line: 389, type: !2301)
!9470 = !DILocation(line: 389, column: 17, scope: !9425)
!9471 = !DILocation(line: 394, column: 8, scope: !9472)
!9472 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 394, column: 7)
!9473 = !DILocation(line: 394, column: 22, scope: !9472)
!9474 = !DILocation(line: 394, column: 25, scope: !9472)
!9475 = !DILocation(line: 394, column: 34, scope: !9472)
!9476 = !DILocation(line: 394, column: 7, scope: !9425)
!9477 = !DILocation(line: 396, column: 11, scope: !9478)
!9478 = distinct !DILexicalBlock(scope: !9479, file: !3, line: 396, column: 11)
!9479 = distinct !DILexicalBlock(scope: !9472, file: !3, line: 395, column: 5)
!9480 = !DILocation(line: 396, column: 19, scope: !9478)
!9481 = !DILocation(line: 396, column: 24, scope: !9478)
!9482 = !DILocation(line: 396, column: 33, scope: !9478)
!9483 = !DILocation(line: 396, column: 11, scope: !9479)
!9484 = !DILocation(line: 397, column: 2, scope: !9478)
!9485 = !DILocation(line: 399, column: 36, scope: !9479)
!9486 = !DILocation(line: 399, column: 45, scope: !9479)
!9487 = !DILocation(line: 399, column: 34, scope: !9479)
!9488 = !DILocation(line: 399, column: 7, scope: !9479)
!9489 = !DILocation(line: 399, column: 16, scope: !9479)
!9490 = !DILocation(line: 399, column: 24, scope: !9479)
!9491 = !DILocation(line: 400, column: 7, scope: !9479)
!9492 = !DILocation(line: 400, column: 16, scope: !9479)
!9493 = !DILocation(line: 400, column: 41, scope: !9479)
!9494 = !DILocation(line: 401, column: 7, scope: !9479)
!9495 = !DILocation(line: 401, column: 16, scope: !9479)
!9496 = !DILocation(line: 401, column: 35, scope: !9479)
!9497 = !DILocation(line: 402, column: 7, scope: !9479)
!9498 = !DILocation(line: 402, column: 16, scope: !9479)
!9499 = !DILocation(line: 402, column: 33, scope: !9479)
!9500 = !DILocation(line: 403, column: 5, scope: !9479)
!9501 = !DILocation(line: 407, column: 40, scope: !9425)
!9502 = !DILocation(line: 407, column: 15, scope: !9425)
!9503 = !DILocation(line: 407, column: 13, scope: !9425)
!9504 = !DILocation(line: 408, column: 9, scope: !9505)
!9505 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 408, column: 7)
!9506 = !DILocation(line: 408, column: 7, scope: !9425)
!9507 = !DILocation(line: 409, column: 5, scope: !9505)
!9508 = !DILocation(line: 413, column: 21, scope: !9509)
!9509 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 413, column: 7)
!9510 = !DILocation(line: 413, column: 9, scope: !9509)
!9511 = !DILocation(line: 413, column: 7, scope: !9425)
!9512 = !DILocation(line: 414, column: 5, scope: !9509)
!9513 = !DILocation(line: 419, column: 35, scope: !9425)
!9514 = !DILocation(line: 419, column: 16, scope: !9425)
!9515 = !DILocation(line: 419, column: 14, scope: !9425)
!9516 = !DILocation(line: 420, column: 32, scope: !9425)
!9517 = !DILocation(line: 420, column: 14, scope: !9425)
!9518 = !DILocation(line: 420, column: 12, scope: !9425)
!9519 = !DILocation(line: 421, column: 55, scope: !9425)
!9520 = !DILocation(line: 421, column: 39, scope: !9425)
!9521 = !DILocation(line: 421, column: 13, scope: !9425)
!9522 = !DILocation(line: 421, column: 22, scope: !9425)
!9523 = !DILocation(line: 421, column: 37, scope: !9425)
!9524 = !DILocation(line: 421, column: 11, scope: !9425)
!9525 = !DILocation(line: 422, column: 9, scope: !9425)
!9526 = !DILocation(line: 422, column: 7, scope: !9425)
!9527 = !DILocation(line: 424, column: 7, scope: !9528)
!9528 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 424, column: 7)
!9529 = !DILocation(line: 424, column: 7, scope: !9425)
!9530 = !DILocation(line: 426, column: 11, scope: !9531)
!9531 = distinct !DILexicalBlock(scope: !9528, file: !3, line: 425, column: 5)
!9532 = !DILocation(line: 427, column: 39, scope: !9531)
!9533 = !DILocation(line: 427, column: 20, scope: !9531)
!9534 = !DILocation(line: 427, column: 18, scope: !9531)
!9535 = !DILocation(line: 428, column: 36, scope: !9531)
!9536 = !DILocation(line: 428, column: 18, scope: !9531)
!9537 = !DILocation(line: 428, column: 16, scope: !9531)
!9538 = !DILocation(line: 429, column: 60, scope: !9531)
!9539 = !DILocation(line: 429, column: 44, scope: !9531)
!9540 = !DILocation(line: 429, column: 18, scope: !9531)
!9541 = !DILocation(line: 429, column: 27, scope: !9531)
!9542 = !DILocation(line: 429, column: 42, scope: !9531)
!9543 = !DILocation(line: 429, column: 15, scope: !9531)
!9544 = !DILocation(line: 430, column: 5, scope: !9531)
!9545 = !DILocation(line: 432, column: 7, scope: !9546)
!9546 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 432, column: 7)
!9547 = !DILocation(line: 432, column: 17, scope: !9546)
!9548 = !DILocation(line: 432, column: 15, scope: !9546)
!9549 = !DILocation(line: 432, column: 7, scope: !9425)
!9550 = !DILocation(line: 433, column: 5, scope: !9546)
!9551 = !DILocation(line: 438, column: 15, scope: !9425)
!9552 = !DILocation(line: 438, column: 13, scope: !9425)
!9553 = !DILocation(line: 440, column: 42, scope: !9425)
!9554 = !DILocation(line: 440, column: 53, scope: !9425)
!9555 = !DILocation(line: 440, column: 16, scope: !9425)
!9556 = !DILocation(line: 440, column: 14, scope: !9425)
!9557 = !DILocation(line: 441, column: 7, scope: !9558)
!9558 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 441, column: 7)
!9559 = !DILocation(line: 441, column: 18, scope: !9558)
!9560 = !DILocation(line: 441, column: 7, scope: !9425)
!9561 = !DILocation(line: 442, column: 18, scope: !9558)
!9562 = !DILocation(line: 442, column: 16, scope: !9558)
!9563 = !DILocation(line: 442, column: 5, scope: !9558)
!9564 = !DILocation(line: 445, column: 16, scope: !9558)
!9565 = !DILocation(line: 457, column: 34, scope: !9425)
!9566 = !DILocation(line: 457, column: 19, scope: !9425)
!9567 = !DILocation(line: 457, column: 17, scope: !9425)
!9568 = !DILocation(line: 458, column: 7, scope: !9569)
!9569 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 458, column: 7)
!9570 = !DILocation(line: 458, column: 7, scope: !9425)
!9571 = !DILocation(line: 460, column: 23, scope: !9572)
!9572 = distinct !DILexicalBlock(scope: !9569, file: !3, line: 459, column: 5)
!9573 = !DILocation(line: 460, column: 21, scope: !9572)
!9574 = !DILocation(line: 461, column: 24, scope: !9572)
!9575 = !DILocation(line: 461, column: 22, scope: !9572)
!9576 = !DILocation(line: 462, column: 5, scope: !9572)
!9577 = !DILocation(line: 464, column: 20, scope: !9569)
!9578 = !DILocation(line: 468, column: 7, scope: !9579)
!9579 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 468, column: 7)
!9580 = !DILocation(line: 468, column: 16, scope: !9579)
!9581 = !DILocation(line: 468, column: 41, scope: !9579)
!9582 = !DILocation(line: 468, column: 7, scope: !9425)
!9583 = !DILocalVariable(name: "bb", scope: !9584, file: !3, line: 470, type: !2546)
!9584 = distinct !DILexicalBlock(scope: !9579, file: !3, line: 469, column: 5)
!9585 = !DILocation(line: 470, column: 19, scope: !9584)
!9586 = !DILocation(line: 470, column: 24, scope: !9584)
!9587 = !DILocalVariable(name: "last_test_bb", scope: !9584, file: !3, line: 471, type: !2546)
!9588 = !DILocation(line: 471, column: 19, scope: !9584)
!9589 = !DILocation(line: 471, column: 34, scope: !9584)
!9590 = !DILocation(line: 471, column: 43, scope: !9584)
!9591 = !DILocation(line: 473, column: 13, scope: !9592)
!9592 = distinct !DILexicalBlock(scope: !9584, file: !3, line: 473, column: 11)
!9593 = !DILocation(line: 473, column: 11, scope: !9584)
!9594 = !DILocation(line: 474, column: 2, scope: !9592)
!9595 = !DILocation(line: 476, column: 7, scope: !9584)
!9596 = !DILocalVariable(name: "start", scope: !9597, file: !3, line: 478, type: !2577)
!9597 = distinct !DILexicalBlock(scope: !9584, file: !3, line: 477, column: 2)
!9598 = !DILocation(line: 478, column: 8, scope: !9597)
!9599 = !DILocalVariable(name: "end", scope: !9597, file: !3, line: 478, type: !2577)
!9600 = !DILocation(line: 478, column: 15, scope: !9597)
!9601 = !DILocalVariable(name: "t", scope: !9597, file: !3, line: 479, type: !2577)
!9602 = !DILocation(line: 479, column: 8, scope: !9597)
!9603 = !DILocalVariable(name: "f", scope: !9597, file: !3, line: 479, type: !2577)
!9604 = !DILocation(line: 479, column: 11, scope: !9597)
!9605 = !DILocalVariable(name: "f_code", scope: !9597, file: !3, line: 480, type: !2301)
!9606 = !DILocation(line: 480, column: 18, scope: !9597)
!9607 = !DILocation(line: 482, column: 25, scope: !9597)
!9608 = !DILocation(line: 482, column: 9, scope: !9597)
!9609 = !DILocation(line: 482, column: 7, scope: !9597)
!9610 = !DILocation(line: 483, column: 31, scope: !9597)
!9611 = !DILocation(line: 483, column: 12, scope: !9597)
!9612 = !DILocation(line: 483, column: 10, scope: !9597)
!9613 = !DILocation(line: 484, column: 28, scope: !9597)
!9614 = !DILocation(line: 484, column: 10, scope: !9597)
!9615 = !DILocation(line: 484, column: 8, scope: !9597)
!9616 = !DILocation(line: 485, column: 8, scope: !9617)
!9617 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 485, column: 8)
!9618 = !DILocation(line: 486, column: 8, scope: !9617)
!9619 = !DILocation(line: 486, column: 38, scope: !9617)
!9620 = !DILocation(line: 486, column: 47, scope: !9617)
!9621 = !DILocation(line: 486, column: 54, scope: !9617)
!9622 = !DILocation(line: 486, column: 59, scope: !9617)
!9623 = !DILocation(line: 487, column: 10, scope: !9617)
!9624 = !DILocation(line: 486, column: 13, scope: !9617)
!9625 = !DILocation(line: 485, column: 8, scope: !9597)
!9626 = !DILocation(line: 488, column: 6, scope: !9617)
!9627 = !DILocation(line: 492, column: 22, scope: !9628)
!9628 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 492, column: 8)
!9629 = !DILocation(line: 492, column: 10, scope: !9628)
!9630 = !DILocation(line: 492, column: 8, scope: !9597)
!9631 = !DILocation(line: 493, column: 6, scope: !9628)
!9632 = !DILocation(line: 496, column: 33, scope: !9597)
!9633 = !DILocation(line: 496, column: 8, scope: !9597)
!9634 = !DILocation(line: 496, column: 6, scope: !9597)
!9635 = !DILocation(line: 497, column: 10, scope: !9636)
!9636 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 497, column: 8)
!9637 = !DILocation(line: 497, column: 8, scope: !9597)
!9638 = !DILocation(line: 498, column: 6, scope: !9636)
!9639 = !DILocation(line: 500, column: 39, scope: !9597)
!9640 = !DILocation(line: 500, column: 42, scope: !9597)
!9641 = !DILocation(line: 500, column: 13, scope: !9597)
!9642 = !DILocation(line: 500, column: 11, scope: !9597)
!9643 = !DILocation(line: 501, column: 8, scope: !9644)
!9644 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 501, column: 8)
!9645 = !DILocation(line: 501, column: 15, scope: !9644)
!9646 = !DILocation(line: 501, column: 8, scope: !9597)
!9647 = !DILocation(line: 502, column: 6, scope: !9644)
!9648 = !DILocation(line: 504, column: 8, scope: !9597)
!9649 = !DILocation(line: 504, column: 6, scope: !9597)
!9650 = !DILocation(line: 505, column: 8, scope: !9651)
!9651 = distinct !DILexicalBlock(scope: !9597, file: !3, line: 505, column: 8)
!9652 = !DILocation(line: 505, column: 17, scope: !9651)
!9653 = !DILocation(line: 505, column: 8, scope: !9597)
!9654 = !DILocation(line: 507, column: 12, scope: !9655)
!9655 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 506, column: 6)
!9656 = !DILocation(line: 507, column: 10, scope: !9655)
!9657 = !DILocation(line: 508, column: 12, scope: !9655)
!9658 = !DILocation(line: 508, column: 10, scope: !9655)
!9659 = !DILocation(line: 509, column: 6, scope: !9655)
!9660 = !DILocation(line: 512, column: 12, scope: !9661)
!9661 = distinct !DILexicalBlock(scope: !9651, file: !3, line: 511, column: 6)
!9662 = !DILocation(line: 512, column: 10, scope: !9661)
!9663 = !DILocation(line: 513, column: 12, scope: !9661)
!9664 = !DILocation(line: 513, column: 10, scope: !9661)
!9665 = !DILocation(line: 527, column: 16, scope: !9597)
!9666 = !DILocation(line: 527, column: 14, scope: !9597)
!9667 = !DILocation(line: 528, column: 17, scope: !9597)
!9668 = !DILocation(line: 528, column: 15, scope: !9597)
!9669 = !DILocation(line: 529, column: 2, scope: !9597)
!9670 = !DILocation(line: 530, column: 14, scope: !9584)
!9671 = !DILocation(line: 530, column: 20, scope: !9584)
!9672 = !DILocation(line: 530, column: 17, scope: !9584)
!9673 = distinct !{!9673, !9595, !9674}
!9674 = !DILocation(line: 530, column: 32, scope: !9584)
!9675 = !DILocation(line: 531, column: 5, scope: !9584)
!9676 = !DILocation(line: 535, column: 18, scope: !9425)
!9677 = !DILocation(line: 535, column: 26, scope: !9425)
!9678 = !DILocation(line: 535, column: 15, scope: !9425)
!9679 = !DILocation(line: 540, column: 7, scope: !9680)
!9680 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 540, column: 7)
!9681 = !DILocation(line: 541, column: 7, scope: !9680)
!9682 = !DILocation(line: 541, column: 13, scope: !9680)
!9683 = !DILocation(line: 542, column: 4, scope: !9680)
!9684 = !DILocation(line: 542, column: 34, scope: !9680)
!9685 = !DILocation(line: 542, column: 43, scope: !9680)
!9686 = !DILocation(line: 542, column: 55, scope: !9680)
!9687 = !DILocation(line: 543, column: 6, scope: !9680)
!9688 = !DILocation(line: 543, column: 18, scope: !9680)
!9689 = !DILocation(line: 544, column: 6, scope: !9680)
!9690 = !DILocation(line: 542, column: 9, scope: !9680)
!9691 = !DILocation(line: 540, column: 7, scope: !9425)
!9692 = !DILocation(line: 545, column: 5, scope: !9680)
!9693 = !DILocation(line: 547, column: 7, scope: !9694)
!9694 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 547, column: 7)
!9695 = !DILocation(line: 547, column: 15, scope: !9694)
!9696 = !DILocation(line: 547, column: 18, scope: !9694)
!9697 = !DILocation(line: 548, column: 7, scope: !9694)
!9698 = !DILocation(line: 548, column: 37, scope: !9694)
!9699 = !DILocation(line: 548, column: 46, scope: !9694)
!9700 = !DILocation(line: 548, column: 58, scope: !9694)
!9701 = !DILocation(line: 549, column: 9, scope: !9694)
!9702 = !DILocation(line: 549, column: 20, scope: !9694)
!9703 = !DILocation(line: 548, column: 12, scope: !9694)
!9704 = !DILocation(line: 547, column: 7, scope: !9425)
!9705 = !DILocation(line: 550, column: 5, scope: !9694)
!9706 = !DILocation(line: 554, column: 9, scope: !9707)
!9707 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 554, column: 7)
!9708 = !DILocation(line: 554, column: 7, scope: !9425)
!9709 = !DILocation(line: 560, column: 7, scope: !9710)
!9710 = distinct !DILexicalBlock(scope: !9707, file: !3, line: 555, column: 5)
!9711 = !DILocation(line: 569, column: 7, scope: !9712)
!9712 = distinct !DILexicalBlock(scope: !9425, file: !3, line: 569, column: 7)
!9713 = !DILocation(line: 569, column: 7, scope: !9425)
!9714 = !DILocation(line: 570, column: 14, scope: !9712)
!9715 = !DILocation(line: 571, column: 7, scope: !9712)
!9716 = !DILocation(line: 571, column: 17, scope: !9712)
!9717 = !DILocation(line: 571, column: 25, scope: !9712)
!9718 = !DILocation(line: 571, column: 16, scope: !9712)
!9719 = !DILocation(line: 570, column: 5, scope: !9712)
!9720 = !DILocation(line: 574, column: 19, scope: !9425)
!9721 = !DILocation(line: 574, column: 3, scope: !9425)
!9722 = !DILocation(line: 575, column: 23, scope: !9425)
!9723 = !DILocation(line: 576, column: 3, scope: !9425)
!9724 = !DILabel(scope: !9425, name: "fail", file: !3, line: 578)
!9725 = !DILocation(line: 578, column: 2, scope: !9425)
!9726 = !DILocation(line: 584, column: 3, scope: !9425)
!9727 = !DILocation(line: 585, column: 3, scope: !9425)
!9728 = !DILocation(line: 586, column: 1, scope: !9425)
!9729 = distinct !DISubprogram(name: "ei_end_p", scope: !367, file: !367, line: 721, type: !9730, scopeLine: 722, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9730 = !DISubroutineType(types: !9731)
!9731 = !{!2809, !4456}
!9732 = !DILocalVariable(name: "i", arg: 1, scope: !9729, file: !367, line: 721, type: !4456)
!9733 = !DILocation(line: 721, column: 25, scope: !9729)
!9734 = !DILocation(line: 723, column: 13, scope: !9729)
!9735 = !DILocation(line: 723, column: 22, scope: !9729)
!9736 = !DILocation(line: 723, column: 19, scope: !9729)
!9737 = !DILocation(line: 723, column: 10, scope: !9729)
!9738 = !DILocation(line: 723, column: 3, scope: !9729)
!9739 = distinct !DISubprogram(name: "ei_edge", scope: !367, file: !367, line: 752, type: !9740, scopeLine: 753, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9740 = !DISubroutineType(types: !9741)
!9741 = !{!2563, !4456}
!9742 = !DILocalVariable(name: "i", arg: 1, scope: !9739, file: !367, line: 752, type: !4456)
!9743 = !DILocation(line: 752, column: 24, scope: !9739)
!9744 = !DILocation(line: 754, column: 10, scope: !9739)
!9745 = !DILocation(line: 754, column: 3, scope: !9739)
!9746 = distinct !DISubprogram(name: "ei_container", scope: !367, file: !367, line: 685, type: !9747, scopeLine: 686, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9747 = !DISubroutineType(types: !9748)
!9748 = !{!2551, !4456}
!9749 = !DILocalVariable(name: "i", arg: 1, scope: !9746, file: !367, line: 685, type: !4456)
!9750 = !DILocation(line: 685, column: 29, scope: !9746)
!9751 = !DILocation(line: 687, column: 3, scope: !9746)
!9752 = !DILocation(line: 688, column: 13, scope: !9746)
!9753 = !DILocation(line: 688, column: 10, scope: !9746)
!9754 = !DILocation(line: 688, column: 3, scope: !9746)
!9755 = distinct !DISubprogram(name: "cond_exec_get_condition", scope: !3, file: !3, line: 340, type: !9756, scopeLine: 341, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9756 = !DISubroutineType(types: !9757)
!9757 = !{!2577, !2577}
!9758 = !DILocalVariable(name: "jump", arg: 1, scope: !9755, file: !3, line: 340, type: !2577)
!9759 = !DILocation(line: 340, column: 30, scope: !9755)
!9760 = !DILocalVariable(name: "test_if", scope: !9755, file: !3, line: 342, type: !2577)
!9761 = !DILocation(line: 342, column: 7, scope: !9755)
!9762 = !DILocalVariable(name: "cond", scope: !9755, file: !3, line: 342, type: !2577)
!9763 = !DILocation(line: 342, column: 16, scope: !9755)
!9764 = !DILocation(line: 344, column: 23, scope: !9765)
!9765 = distinct !DILexicalBlock(scope: !9755, file: !3, line: 344, column: 7)
!9766 = !DILocation(line: 344, column: 7, scope: !9765)
!9767 = !DILocation(line: 344, column: 7, scope: !9755)
!9768 = !DILocation(line: 345, column: 15, scope: !9765)
!9769 = !DILocation(line: 345, column: 13, scope: !9765)
!9770 = !DILocation(line: 345, column: 5, scope: !9765)
!9771 = !DILocation(line: 347, column: 5, scope: !9765)
!9772 = !DILocation(line: 348, column: 10, scope: !9755)
!9773 = !DILocation(line: 348, column: 8, scope: !9755)
!9774 = !DILocation(line: 352, column: 7, scope: !9775)
!9775 = distinct !DILexicalBlock(scope: !9755, file: !3, line: 352, column: 7)
!9776 = !DILocation(line: 352, column: 36, scope: !9775)
!9777 = !DILocation(line: 353, column: 7, scope: !9775)
!9778 = !DILocation(line: 353, column: 10, scope: !9775)
!9779 = !DILocation(line: 353, column: 41, scope: !9775)
!9780 = !DILocation(line: 353, column: 38, scope: !9775)
!9781 = !DILocation(line: 352, column: 7, scope: !9755)
!9782 = !DILocalVariable(name: "rev", scope: !9783, file: !3, line: 355, type: !2301)
!9783 = distinct !DILexicalBlock(scope: !9775, file: !3, line: 354, column: 5)
!9784 = !DILocation(line: 355, column: 21, scope: !9783)
!9785 = !DILocation(line: 355, column: 53, scope: !9783)
!9786 = !DILocation(line: 355, column: 59, scope: !9783)
!9787 = !DILocation(line: 355, column: 27, scope: !9783)
!9788 = !DILocation(line: 356, column: 11, scope: !9789)
!9789 = distinct !DILexicalBlock(scope: !9783, file: !3, line: 356, column: 11)
!9790 = !DILocation(line: 356, column: 15, scope: !9789)
!9791 = !DILocation(line: 356, column: 11, scope: !9783)
!9792 = !DILocation(line: 357, column: 2, scope: !9789)
!9793 = !DILocation(line: 359, column: 14, scope: !9783)
!9794 = !DILocation(line: 359, column: 12, scope: !9783)
!9795 = !DILocation(line: 361, column: 5, scope: !9783)
!9796 = !DILocation(line: 363, column: 10, scope: !9755)
!9797 = !DILocation(line: 363, column: 3, scope: !9755)
!9798 = !DILocation(line: 364, column: 1, scope: !9755)
!9799 = distinct !DISubprogram(name: "count_bb_insns", scope: !3, file: !3, line: 113, type: !9800, scopeLine: 114, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9800 = !DISubroutineType(types: !9801)
!9801 = !{!2545, !5278}
!9802 = !DILocalVariable(name: "bb", arg: 1, scope: !9799, file: !3, line: 113, type: !5278)
!9803 = !DILocation(line: 113, column: 35, scope: !9799)
!9804 = !DILocalVariable(name: "count", scope: !9799, file: !3, line: 115, type: !2545)
!9805 = !DILocation(line: 115, column: 7, scope: !9799)
!9806 = !DILocalVariable(name: "insn", scope: !9799, file: !3, line: 116, type: !2577)
!9807 = !DILocation(line: 116, column: 7, scope: !9799)
!9808 = !DILocation(line: 116, column: 14, scope: !9799)
!9809 = !DILocation(line: 118, column: 3, scope: !9799)
!9810 = !DILocation(line: 120, column: 11, scope: !9811)
!9811 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 120, column: 11)
!9812 = distinct !DILexicalBlock(scope: !9799, file: !3, line: 119, column: 5)
!9813 = !DILocation(line: 120, column: 25, scope: !9811)
!9814 = !DILocation(line: 120, column: 28, scope: !9811)
!9815 = !DILocation(line: 120, column: 11, scope: !9812)
!9816 = !DILocation(line: 121, column: 7, scope: !9811)
!9817 = !DILocation(line: 121, column: 2, scope: !9811)
!9818 = !DILocation(line: 123, column: 11, scope: !9819)
!9819 = distinct !DILexicalBlock(scope: !9812, file: !3, line: 123, column: 11)
!9820 = !DILocation(line: 123, column: 19, scope: !9819)
!9821 = !DILocation(line: 123, column: 16, scope: !9819)
!9822 = !DILocation(line: 123, column: 11, scope: !9812)
!9823 = !DILocation(line: 124, column: 2, scope: !9819)
!9824 = !DILocation(line: 125, column: 14, scope: !9812)
!9825 = !DILocation(line: 125, column: 12, scope: !9812)
!9826 = distinct !{!9826, !9809, !9827}
!9827 = !DILocation(line: 126, column: 5, scope: !9799)
!9828 = !DILocation(line: 128, column: 10, scope: !9799)
!9829 = !DILocation(line: 128, column: 3, scope: !9799)
!9830 = distinct !DISubprogram(name: "block_fallthru", scope: !3, file: !3, line: 236, type: !9831, scopeLine: 237, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9831 = !DISubroutineType(types: !9832)
!9832 = !{!2546, !2546}
!9833 = !DILocalVariable(name: "bb", arg: 1, scope: !9830, file: !3, line: 236, type: !2546)
!9834 = !DILocation(line: 236, column: 29, scope: !9830)
!9835 = !DILocalVariable(name: "e", scope: !9830, file: !3, line: 238, type: !2563)
!9836 = !DILocation(line: 238, column: 8, scope: !9830)
!9837 = !DILocalVariable(name: "ei", scope: !9830, file: !3, line: 239, type: !4456)
!9838 = !DILocation(line: 239, column: 17, scope: !9830)
!9839 = !DILocation(line: 241, column: 3, scope: !9840)
!9840 = distinct !DILexicalBlock(scope: !9830, file: !3, line: 241, column: 3)
!9841 = !DILocation(line: 241, column: 3, scope: !9842)
!9842 = distinct !DILexicalBlock(scope: !9840, file: !3, line: 241, column: 3)
!9843 = !DILocation(line: 242, column: 9, scope: !9844)
!9844 = distinct !DILexicalBlock(scope: !9842, file: !3, line: 242, column: 9)
!9845 = !DILocation(line: 242, column: 12, scope: !9844)
!9846 = !DILocation(line: 242, column: 18, scope: !9844)
!9847 = !DILocation(line: 242, column: 9, scope: !9842)
!9848 = !DILocation(line: 243, column: 7, scope: !9844)
!9849 = !DILocation(line: 242, column: 20, scope: !9844)
!9850 = distinct !{!9850, !9839, !9851}
!9851 = !DILocation(line: 243, column: 7, scope: !9840)
!9852 = !DILocation(line: 245, column: 11, scope: !9830)
!9853 = !DILocation(line: 245, column: 10, scope: !9830)
!9854 = !DILocation(line: 245, column: 16, scope: !9830)
!9855 = !DILocation(line: 245, column: 19, scope: !9830)
!9856 = !DILocation(line: 245, column: 3, scope: !9830)
!9857 = distinct !DISubprogram(name: "cond_exec_process_insns", scope: !3, file: !3, line: 253, type: !9858, scopeLine: 259, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9858 = !DISubroutineType(types: !9859)
!9859 = !{!2545, !9428, !2577, !2577, !2577, !2577, !2545}
!9860 = !DILocalVariable(name: "ce_info", arg: 1, scope: !9857, file: !3, line: 253, type: !9428)
!9861 = !DILocation(line: 253, column: 41, scope: !9857)
!9862 = !DILocalVariable(name: "start", arg: 2, scope: !9857, file: !3, line: 254, type: !2577)
!9863 = !DILocation(line: 254, column: 35, scope: !9857)
!9864 = !DILocalVariable(name: "end", arg: 3, scope: !9857, file: !3, line: 255, type: !2577)
!9865 = !DILocation(line: 255, column: 36, scope: !9857)
!9866 = !DILocalVariable(name: "test", arg: 4, scope: !9857, file: !3, line: 256, type: !2577)
!9867 = !DILocation(line: 256, column: 35, scope: !9857)
!9868 = !DILocalVariable(name: "prob_val", arg: 5, scope: !9857, file: !3, line: 257, type: !2577)
!9869 = !DILocation(line: 257, column: 41, scope: !9857)
!9870 = !DILocalVariable(name: "mod_ok", arg: 6, scope: !9857, file: !3, line: 258, type: !2545)
!9871 = !DILocation(line: 258, column: 43, scope: !9857)
!9872 = !DILocalVariable(name: "must_be_last", scope: !9857, file: !3, line: 260, type: !2545)
!9873 = !DILocation(line: 260, column: 7, scope: !9857)
!9874 = !DILocalVariable(name: "insn", scope: !9857, file: !3, line: 261, type: !2577)
!9875 = !DILocation(line: 261, column: 7, scope: !9857)
!9876 = !DILocalVariable(name: "xtest", scope: !9857, file: !3, line: 262, type: !2577)
!9877 = !DILocation(line: 262, column: 7, scope: !9857)
!9878 = !DILocalVariable(name: "pattern", scope: !9857, file: !3, line: 263, type: !2577)
!9879 = !DILocation(line: 263, column: 7, scope: !9857)
!9880 = !DILocation(line: 265, column: 8, scope: !9881)
!9881 = distinct !DILexicalBlock(scope: !9857, file: !3, line: 265, column: 7)
!9882 = !DILocation(line: 265, column: 14, scope: !9881)
!9883 = !DILocation(line: 265, column: 18, scope: !9881)
!9884 = !DILocation(line: 265, column: 7, scope: !9857)
!9885 = !DILocation(line: 266, column: 5, scope: !9881)
!9886 = !DILocation(line: 268, column: 15, scope: !9887)
!9887 = distinct !DILexicalBlock(scope: !9857, file: !3, line: 268, column: 3)
!9888 = !DILocation(line: 268, column: 13, scope: !9887)
!9889 = !DILocation(line: 268, column: 8, scope: !9887)
!9890 = !DILocation(line: 270, column: 11, scope: !9891)
!9891 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 270, column: 11)
!9892 = distinct !DILexicalBlock(scope: !9893, file: !3, line: 269, column: 5)
!9893 = distinct !DILexicalBlock(scope: !9887, file: !3, line: 268, column: 3)
!9894 = !DILocation(line: 270, column: 25, scope: !9891)
!9895 = !DILocation(line: 270, column: 28, scope: !9891)
!9896 = !DILocation(line: 270, column: 11, scope: !9892)
!9897 = !DILocation(line: 271, column: 2, scope: !9891)
!9898 = !DILocation(line: 273, column: 7, scope: !9892)
!9899 = !DILocation(line: 276, column: 11, scope: !9900)
!9900 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 276, column: 11)
!9901 = !DILocation(line: 276, column: 28, scope: !9900)
!9902 = !DILocation(line: 276, column: 31, scope: !9900)
!9903 = !DILocation(line: 276, column: 57, scope: !9900)
!9904 = !DILocation(line: 276, column: 11, scope: !9892)
!9905 = !DILocation(line: 280, column: 4, scope: !9906)
!9906 = distinct !DILexicalBlock(scope: !9900, file: !3, line: 277, column: 2)
!9907 = !DILocation(line: 281, column: 4, scope: !9906)
!9908 = !DILocation(line: 285, column: 11, scope: !9909)
!9909 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 285, column: 11)
!9910 = !DILocation(line: 285, column: 11, scope: !9892)
!9911 = !DILocation(line: 286, column: 2, scope: !9909)
!9912 = !DILocation(line: 288, column: 26, scope: !9913)
!9913 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 288, column: 11)
!9914 = !DILocation(line: 288, column: 32, scope: !9913)
!9915 = !DILocation(line: 288, column: 11, scope: !9913)
!9916 = !DILocation(line: 288, column: 11, scope: !9892)
!9917 = !DILocation(line: 290, column: 9, scope: !9918)
!9918 = distinct !DILexicalBlock(scope: !9919, file: !3, line: 290, column: 8)
!9919 = distinct !DILexicalBlock(scope: !9913, file: !3, line: 289, column: 2)
!9920 = !DILocation(line: 290, column: 8, scope: !9919)
!9921 = !DILocation(line: 291, column: 6, scope: !9918)
!9922 = !DILocation(line: 292, column: 17, scope: !9919)
!9923 = !DILocation(line: 293, column: 2, scope: !9919)
!9924 = !DILocation(line: 296, column: 17, scope: !9892)
!9925 = !DILocation(line: 296, column: 15, scope: !9892)
!9926 = !DILocation(line: 297, column: 25, scope: !9892)
!9927 = !DILocation(line: 297, column: 15, scope: !9892)
!9928 = !DILocation(line: 297, column: 13, scope: !9892)
!9929 = !DILocation(line: 301, column: 11, scope: !9930)
!9930 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 301, column: 11)
!9931 = !DILocation(line: 301, column: 30, scope: !9930)
!9932 = !DILocation(line: 301, column: 11, scope: !9892)
!9933 = !DILocation(line: 303, column: 8, scope: !9934)
!9934 = distinct !DILexicalBlock(scope: !9935, file: !3, line: 303, column: 8)
!9935 = distinct !DILexicalBlock(scope: !9930, file: !3, line: 302, column: 2)
!9936 = !DILocation(line: 303, column: 28, scope: !9934)
!9937 = !DILocation(line: 303, column: 25, scope: !9934)
!9938 = !DILocation(line: 303, column: 8, scope: !9935)
!9939 = !DILocation(line: 304, column: 6, scope: !9934)
!9940 = !DILocation(line: 306, column: 12, scope: !9935)
!9941 = !DILocation(line: 306, column: 10, scope: !9935)
!9942 = !DILocation(line: 308, column: 14, scope: !9935)
!9943 = !DILocation(line: 308, column: 12, scope: !9935)
!9944 = !DILocation(line: 309, column: 2, scope: !9935)
!9945 = !DILocation(line: 311, column: 17, scope: !9892)
!9946 = !DILocation(line: 311, column: 15, scope: !9892)
!9947 = !DILocation(line: 322, column: 24, scope: !9892)
!9948 = !DILocation(line: 322, column: 31, scope: !9892)
!9949 = !DILocation(line: 322, column: 47, scope: !9892)
!9950 = !DILocation(line: 322, column: 7, scope: !9892)
!9951 = !DILocation(line: 324, column: 11, scope: !9952)
!9952 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 324, column: 11)
!9953 = !DILocation(line: 324, column: 25, scope: !9952)
!9954 = !DILocation(line: 324, column: 28, scope: !9952)
!9955 = !DILocation(line: 324, column: 11, scope: !9892)
!9956 = !DILocation(line: 325, column: 19, scope: !9952)
!9957 = !DILocation(line: 325, column: 26, scope: !9952)
!9958 = !DILocation(line: 326, column: 35, scope: !9952)
!9959 = !DILocation(line: 327, column: 8, scope: !9952)
!9960 = !DILocation(line: 326, column: 5, scope: !9952)
!9961 = !DILocation(line: 325, column: 2, scope: !9952)
!9962 = !DILabel(scope: !9892, name: "insn_done", file: !3, line: 329)
!9963 = !DILocation(line: 329, column: 5, scope: !9892)
!9964 = !DILocation(line: 330, column: 11, scope: !9965)
!9965 = distinct !DILexicalBlock(scope: !9892, file: !3, line: 330, column: 11)
!9966 = !DILocation(line: 330, column: 19, scope: !9965)
!9967 = !DILocation(line: 330, column: 16, scope: !9965)
!9968 = !DILocation(line: 330, column: 11, scope: !9892)
!9969 = !DILocation(line: 331, column: 2, scope: !9965)
!9970 = !DILocation(line: 332, column: 5, scope: !9892)
!9971 = !DILocation(line: 268, column: 31, scope: !9893)
!9972 = !DILocation(line: 268, column: 29, scope: !9893)
!9973 = !DILocation(line: 268, column: 3, scope: !9893)
!9974 = distinct !{!9974, !9975, !9976}
!9975 = !DILocation(line: 268, column: 3, scope: !9887)
!9976 = !DILocation(line: 332, column: 5, scope: !9887)
!9977 = !DILocation(line: 334, column: 3, scope: !9857)
!9978 = !DILocation(line: 335, column: 1, scope: !9857)
!9979 = distinct !DISubprogram(name: "merge_if_block", scope: !3, file: !3, line: 2902, type: !9980, scopeLine: 2903, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!9980 = !DISubroutineType(types: !9981)
!9981 = !{null, !4434}
!9982 = !DILocalVariable(name: "ce_info", arg: 1, scope: !9979, file: !3, line: 2902, type: !4434)
!9983 = !DILocation(line: 2902, column: 38, scope: !9979)
!9984 = !DILocalVariable(name: "test_bb", scope: !9979, file: !3, line: 2904, type: !2546)
!9985 = !DILocation(line: 2904, column: 15, scope: !9979)
!9986 = !DILocation(line: 2904, column: 25, scope: !9979)
!9987 = !DILocation(line: 2904, column: 34, scope: !9979)
!9988 = !DILocalVariable(name: "then_bb", scope: !9979, file: !3, line: 2905, type: !2546)
!9989 = !DILocation(line: 2905, column: 15, scope: !9979)
!9990 = !DILocation(line: 2905, column: 25, scope: !9979)
!9991 = !DILocation(line: 2905, column: 34, scope: !9979)
!9992 = !DILocalVariable(name: "else_bb", scope: !9979, file: !3, line: 2906, type: !2546)
!9993 = !DILocation(line: 2906, column: 15, scope: !9979)
!9994 = !DILocation(line: 2906, column: 25, scope: !9979)
!9995 = !DILocation(line: 2906, column: 34, scope: !9979)
!9996 = !DILocalVariable(name: "join_bb", scope: !9979, file: !3, line: 2907, type: !2546)
!9997 = !DILocation(line: 2907, column: 15, scope: !9979)
!9998 = !DILocation(line: 2907, column: 25, scope: !9979)
!9999 = !DILocation(line: 2907, column: 34, scope: !9979)
!10000 = !DILocalVariable(name: "combo_bb", scope: !9979, file: !3, line: 2908, type: !2546)
!10001 = !DILocation(line: 2908, column: 15, scope: !9979)
!10002 = !DILocation(line: 2912, column: 14, scope: !9979)
!10003 = !DILocation(line: 2912, column: 12, scope: !9979)
!10004 = !DILocation(line: 2913, column: 20, scope: !9979)
!10005 = !DILocation(line: 2913, column: 3, scope: !9979)
!10006 = !DILocation(line: 2917, column: 7, scope: !10007)
!10007 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 2917, column: 7)
!10008 = !DILocation(line: 2917, column: 16, scope: !10007)
!10009 = !DILocation(line: 2917, column: 41, scope: !10007)
!10010 = !DILocation(line: 2917, column: 7, scope: !9979)
!10011 = !DILocalVariable(name: "bb", scope: !10012, file: !3, line: 2919, type: !2546)
!10012 = distinct !DILexicalBlock(scope: !10007, file: !3, line: 2918, column: 5)
!10013 = !DILocation(line: 2919, column: 19, scope: !10012)
!10014 = !DILocation(line: 2919, column: 24, scope: !10012)
!10015 = !DILocalVariable(name: "last_test_bb", scope: !10012, file: !3, line: 2920, type: !2546)
!10016 = !DILocation(line: 2920, column: 19, scope: !10012)
!10017 = !DILocation(line: 2920, column: 34, scope: !10012)
!10018 = !DILocation(line: 2920, column: 43, scope: !10012)
!10019 = !DILocalVariable(name: "fallthru", scope: !10012, file: !3, line: 2921, type: !2546)
!10020 = !DILocation(line: 2921, column: 19, scope: !10012)
!10021 = !DILocation(line: 2921, column: 46, scope: !10012)
!10022 = !DILocation(line: 2921, column: 30, scope: !10012)
!10023 = !DILocation(line: 2923, column: 7, scope: !10012)
!10024 = !DILocation(line: 2925, column: 9, scope: !10025)
!10025 = distinct !DILexicalBlock(scope: !10012, file: !3, line: 2924, column: 2)
!10026 = !DILocation(line: 2925, column: 7, scope: !10025)
!10027 = !DILocation(line: 2926, column: 31, scope: !10025)
!10028 = !DILocation(line: 2926, column: 15, scope: !10025)
!10029 = !DILocation(line: 2926, column: 13, scope: !10025)
!10030 = !DILocation(line: 2927, column: 18, scope: !10025)
!10031 = !DILocation(line: 2927, column: 28, scope: !10025)
!10032 = !DILocation(line: 2927, column: 4, scope: !10025)
!10033 = !DILocation(line: 2928, column: 20, scope: !10025)
!10034 = !DILocation(line: 2929, column: 2, scope: !10025)
!10035 = !DILocation(line: 2930, column: 14, scope: !10012)
!10036 = !DILocation(line: 2930, column: 20, scope: !10012)
!10037 = !DILocation(line: 2930, column: 17, scope: !10012)
!10038 = distinct !{!10038, !10023, !10039}
!10039 = !DILocation(line: 2930, column: 32, scope: !10012)
!10040 = !DILocation(line: 2931, column: 5, scope: !10012)
!10041 = !DILocation(line: 2937, column: 7, scope: !10042)
!10042 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 2937, column: 7)
!10043 = !DILocation(line: 2937, column: 7, scope: !9979)
!10044 = !DILocation(line: 2939, column: 21, scope: !10045)
!10045 = distinct !DILexicalBlock(scope: !10042, file: !3, line: 2938, column: 5)
!10046 = !DILocation(line: 2939, column: 31, scope: !10045)
!10047 = !DILocation(line: 2939, column: 7, scope: !10045)
!10048 = !DILocation(line: 2940, column: 23, scope: !10045)
!10049 = !DILocation(line: 2941, column: 5, scope: !10045)
!10050 = !DILocation(line: 2946, column: 7, scope: !10051)
!10051 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 2946, column: 7)
!10052 = !DILocation(line: 2946, column: 7, scope: !9979)
!10053 = !DILocation(line: 2948, column: 21, scope: !10054)
!10054 = distinct !DILexicalBlock(scope: !10051, file: !3, line: 2947, column: 5)
!10055 = !DILocation(line: 2948, column: 31, scope: !10054)
!10056 = !DILocation(line: 2948, column: 7, scope: !10054)
!10057 = !DILocation(line: 2949, column: 23, scope: !10054)
!10058 = !DILocation(line: 2950, column: 5, scope: !10054)
!10059 = !DILocation(line: 2955, column: 9, scope: !10060)
!10060 = distinct !DILexicalBlock(scope: !9979, file: !3, line: 2955, column: 7)
!10061 = !DILocation(line: 2955, column: 7, scope: !9979)
!10062 = !DILocalVariable(name: "last", scope: !10063, file: !3, line: 2957, type: !2577)
!10063 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 2956, column: 5)
!10064 = !DILocation(line: 2957, column: 11, scope: !10063)
!10065 = !DILocation(line: 2957, column: 18, scope: !10063)
!10066 = !DILocation(line: 2961, column: 11, scope: !10067)
!10067 = distinct !DILexicalBlock(scope: !10063, file: !3, line: 2961, column: 11)
!10068 = !DILocation(line: 2961, column: 40, scope: !10067)
!10069 = !DILocation(line: 2961, column: 11, scope: !10063)
!10070 = !DILocation(line: 2962, column: 2, scope: !10067)
!10071 = !DILocation(line: 2971, column: 2, scope: !10067)
!10072 = !DILocation(line: 2977, column: 5, scope: !10063)
!10073 = !DILocation(line: 2985, column: 12, scope: !10074)
!10074 = distinct !DILexicalBlock(scope: !10060, file: !3, line: 2985, column: 12)
!10075 = !DILocation(line: 2985, column: 40, scope: !10074)
!10076 = !DILocation(line: 2986, column: 5, scope: !10074)
!10077 = !DILocation(line: 2986, column: 8, scope: !10074)
!10078 = !DILocation(line: 2986, column: 19, scope: !10074)
!10079 = !DILocation(line: 2986, column: 16, scope: !10074)
!10080 = !DILocation(line: 2985, column: 12, scope: !10060)
!10081 = !DILocation(line: 2990, column: 21, scope: !10082)
!10082 = distinct !DILexicalBlock(scope: !10074, file: !3, line: 2987, column: 5)
!10083 = !DILocation(line: 2990, column: 31, scope: !10082)
!10084 = !DILocation(line: 2990, column: 7, scope: !10082)
!10085 = !DILocation(line: 2991, column: 23, scope: !10082)
!10086 = !DILocation(line: 2992, column: 5, scope: !10082)
!10087 = !DILocation(line: 2999, column: 7, scope: !10088)
!10088 = distinct !DILexicalBlock(scope: !10074, file: !3, line: 2994, column: 5)
!10089 = !DILocation(line: 3003, column: 11, scope: !10090)
!10090 = distinct !DILexicalBlock(scope: !10088, file: !3, line: 3003, column: 11)
!10091 = !DILocation(line: 3003, column: 22, scope: !10090)
!10092 = !DILocation(line: 3003, column: 19, scope: !10090)
!10093 = !DILocation(line: 3003, column: 11, scope: !10088)
!10094 = !DILocation(line: 3004, column: 40, scope: !10090)
!10095 = !DILocation(line: 3004, column: 22, scope: !10090)
!10096 = !DILocation(line: 3004, column: 2, scope: !10090)
!10097 = !DILocation(line: 3007, column: 24, scope: !9979)
!10098 = !DILocation(line: 3008, column: 1, scope: !9979)
!10099 = distinct !DISubprogram(name: "block_has_only_trap", scope: !3, file: !3, line: 3504, type: !6042, scopeLine: 3505, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10100 = !DILocalVariable(name: "bb", arg: 1, scope: !10099, file: !3, line: 3504, type: !2546)
!10101 = !DILocation(line: 3504, column: 34, scope: !10099)
!10102 = !DILocalVariable(name: "trap", scope: !10099, file: !3, line: 3506, type: !2577)
!10103 = !DILocation(line: 3506, column: 7, scope: !10099)
!10104 = !DILocation(line: 3509, column: 7, scope: !10105)
!10105 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3509, column: 7)
!10106 = !DILocation(line: 3509, column: 13, scope: !10105)
!10107 = !DILocation(line: 3509, column: 10, scope: !10105)
!10108 = !DILocation(line: 3509, column: 7, scope: !10099)
!10109 = !DILocation(line: 3510, column: 5, scope: !10105)
!10110 = !DILocation(line: 3513, column: 7, scope: !10111)
!10111 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3513, column: 7)
!10112 = !DILocation(line: 3513, column: 30, scope: !10111)
!10113 = !DILocation(line: 3513, column: 7, scope: !10099)
!10114 = !DILocation(line: 3514, column: 5, scope: !10111)
!10115 = !DILocation(line: 3517, column: 29, scope: !10099)
!10116 = !DILocation(line: 3517, column: 10, scope: !10099)
!10117 = !DILocation(line: 3517, column: 8, scope: !10099)
!10118 = !DILocation(line: 3518, column: 10, scope: !10119)
!10119 = distinct !DILexicalBlock(scope: !10099, file: !3, line: 3518, column: 7)
!10120 = !DILocation(line: 3518, column: 18, scope: !10119)
!10121 = !DILocation(line: 3518, column: 15, scope: !10119)
!10122 = !DILocation(line: 3519, column: 3, scope: !10119)
!10123 = !DILocation(line: 3519, column: 6, scope: !10119)
!10124 = !DILocation(line: 3519, column: 32, scope: !10119)
!10125 = !DILocation(line: 3520, column: 10, scope: !10119)
!10126 = !DILocation(line: 3520, column: 13, scope: !10119)
!10127 = !DILocation(line: 3520, column: 48, scope: !10119)
!10128 = !DILocation(line: 3520, column: 45, scope: !10119)
!10129 = !DILocation(line: 3518, column: 7, scope: !10099)
!10130 = !DILocation(line: 3521, column: 5, scope: !10119)
!10131 = !DILocation(line: 3523, column: 10, scope: !10099)
!10132 = !DILocation(line: 3523, column: 3, scope: !10099)
!10133 = !DILocation(line: 3524, column: 1, scope: !10099)
!10134 = distinct !DISubprogram(name: "cheap_bb_rtx_cost_p", scope: !3, file: !3, line: 136, type: !10135, scopeLine: 137, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10135 = !DISubroutineType(types: !10136)
!10136 = !{!2809, !5278, !2545}
!10137 = !DILocalVariable(name: "bb", arg: 1, scope: !10134, file: !3, line: 136, type: !5278)
!10138 = !DILocation(line: 136, column: 40, scope: !10134)
!10139 = !DILocalVariable(name: "max_cost", arg: 2, scope: !10134, file: !3, line: 136, type: !2545)
!10140 = !DILocation(line: 136, column: 48, scope: !10134)
!10141 = !DILocalVariable(name: "count", scope: !10134, file: !3, line: 138, type: !2545)
!10142 = !DILocation(line: 138, column: 7, scope: !10134)
!10143 = !DILocalVariable(name: "insn", scope: !10134, file: !3, line: 139, type: !2577)
!10144 = !DILocation(line: 139, column: 7, scope: !10134)
!10145 = !DILocation(line: 139, column: 14, scope: !10134)
!10146 = !DILocalVariable(name: "speed", scope: !10134, file: !3, line: 140, type: !2809)
!10147 = !DILocation(line: 140, column: 8, scope: !10134)
!10148 = !DILocation(line: 140, column: 41, scope: !10134)
!10149 = !DILocation(line: 140, column: 16, scope: !10134)
!10150 = !DILocation(line: 142, column: 3, scope: !10134)
!10151 = !DILocation(line: 144, column: 11, scope: !10152)
!10152 = distinct !DILexicalBlock(scope: !10153, file: !3, line: 144, column: 11)
!10153 = distinct !DILexicalBlock(scope: !10134, file: !3, line: 143, column: 5)
!10154 = !DILocation(line: 144, column: 11, scope: !10153)
!10155 = !DILocalVariable(name: "cost", scope: !10156, file: !3, line: 146, type: !2545)
!10156 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 145, column: 2)
!10157 = !DILocation(line: 146, column: 8, scope: !10156)
!10158 = !DILocation(line: 146, column: 30, scope: !10156)
!10159 = !DILocation(line: 146, column: 46, scope: !10156)
!10160 = !DILocation(line: 146, column: 15, scope: !10156)
!10161 = !DILocation(line: 147, column: 8, scope: !10162)
!10162 = distinct !DILexicalBlock(scope: !10156, file: !3, line: 147, column: 8)
!10163 = !DILocation(line: 147, column: 13, scope: !10162)
!10164 = !DILocation(line: 147, column: 8, scope: !10156)
!10165 = !DILocation(line: 148, column: 6, scope: !10162)
!10166 = !DILocalVariable(name: "set", scope: !10167, file: !3, line: 159, type: !2577)
!10167 = distinct !DILexicalBlock(scope: !10156, file: !3, line: 158, column: 4)
!10168 = !DILocation(line: 159, column: 10, scope: !10167)
!10169 = !DILocation(line: 159, column: 16, scope: !10167)
!10170 = !DILocation(line: 160, column: 10, scope: !10171)
!10171 = distinct !DILexicalBlock(scope: !10167, file: !3, line: 160, column: 10)
!10172 = !DILocation(line: 160, column: 14, scope: !10171)
!10173 = !DILocation(line: 160, column: 17, scope: !10171)
!10174 = !DILocation(line: 160, column: 10, scope: !10167)
!10175 = !DILocation(line: 161, column: 8, scope: !10171)
!10176 = !DILocation(line: 165, column: 13, scope: !10156)
!10177 = !DILocation(line: 165, column: 10, scope: !10156)
!10178 = !DILocation(line: 166, column: 8, scope: !10179)
!10179 = distinct !DILexicalBlock(scope: !10156, file: !3, line: 166, column: 8)
!10180 = !DILocation(line: 166, column: 17, scope: !10179)
!10181 = !DILocation(line: 166, column: 14, scope: !10179)
!10182 = !DILocation(line: 166, column: 8, scope: !10156)
!10183 = !DILocation(line: 167, column: 6, scope: !10179)
!10184 = !DILocation(line: 168, column: 2, scope: !10156)
!10185 = !DILocation(line: 169, column: 16, scope: !10186)
!10186 = distinct !DILexicalBlock(scope: !10152, file: !3, line: 169, column: 16)
!10187 = !DILocation(line: 169, column: 16, scope: !10152)
!10188 = !DILocation(line: 170, column: 2, scope: !10186)
!10189 = !DILocation(line: 172, column: 11, scope: !10190)
!10190 = distinct !DILexicalBlock(scope: !10153, file: !3, line: 172, column: 11)
!10191 = !DILocation(line: 172, column: 19, scope: !10190)
!10192 = !DILocation(line: 172, column: 16, scope: !10190)
!10193 = !DILocation(line: 172, column: 11, scope: !10153)
!10194 = !DILocation(line: 173, column: 2, scope: !10190)
!10195 = !DILocation(line: 174, column: 14, scope: !10153)
!10196 = !DILocation(line: 174, column: 12, scope: !10153)
!10197 = distinct !{!10197, !10150, !10198}
!10198 = !DILocation(line: 175, column: 5, scope: !10134)
!10199 = !DILocation(line: 177, column: 3, scope: !10134)
!10200 = !DILocation(line: 178, column: 1, scope: !10134)
!10201 = distinct !DISubprogram(name: "dead_or_predicable", scope: !3, file: !3, line: 3812, type: !10202, scopeLine: 3814, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10202 = !DISubroutineType(types: !10203)
!10203 = !{!2545, !2546, !2546, !2546, !2546, !2545}
!10204 = !DILocalVariable(name: "test_bb", arg: 1, scope: !10201, file: !3, line: 3812, type: !2546)
!10205 = !DILocation(line: 3812, column: 33, scope: !10201)
!10206 = !DILocalVariable(name: "merge_bb", arg: 2, scope: !10201, file: !3, line: 3812, type: !2546)
!10207 = !DILocation(line: 3812, column: 54, scope: !10201)
!10208 = !DILocalVariable(name: "other_bb", arg: 3, scope: !10201, file: !3, line: 3813, type: !2546)
!10209 = !DILocation(line: 3813, column: 19, scope: !10201)
!10210 = !DILocalVariable(name: "new_dest", arg: 4, scope: !10201, file: !3, line: 3813, type: !2546)
!10211 = !DILocation(line: 3813, column: 41, scope: !10201)
!10212 = !DILocalVariable(name: "reversep", arg: 5, scope: !10201, file: !3, line: 3813, type: !2545)
!10213 = !DILocation(line: 3813, column: 55, scope: !10201)
!10214 = !DILocalVariable(name: "head", scope: !10201, file: !3, line: 3815, type: !2577)
!10215 = !DILocation(line: 3815, column: 7, scope: !10201)
!10216 = !DILocalVariable(name: "end", scope: !10201, file: !3, line: 3815, type: !2577)
!10217 = !DILocation(line: 3815, column: 13, scope: !10201)
!10218 = !DILocalVariable(name: "jump", scope: !10201, file: !3, line: 3815, type: !2577)
!10219 = !DILocation(line: 3815, column: 18, scope: !10201)
!10220 = !DILocalVariable(name: "earliest", scope: !10201, file: !3, line: 3815, type: !2577)
!10221 = !DILocation(line: 3815, column: 24, scope: !10201)
!10222 = !DILocalVariable(name: "old_dest", scope: !10201, file: !3, line: 3815, type: !2577)
!10223 = !DILocation(line: 3815, column: 45, scope: !10201)
!10224 = !DILocalVariable(name: "new_label", scope: !10201, file: !3, line: 3815, type: !2577)
!10225 = !DILocation(line: 3815, column: 55, scope: !10201)
!10226 = !DILocalVariable(name: "n_validated_changes", scope: !10201, file: !3, line: 3817, type: !2545)
!10227 = !DILocation(line: 3817, column: 7, scope: !10201)
!10228 = !DILocation(line: 3819, column: 10, scope: !10201)
!10229 = !DILocation(line: 3819, column: 8, scope: !10201)
!10230 = !DILocation(line: 3822, column: 10, scope: !10201)
!10231 = !DILocation(line: 3822, column: 8, scope: !10201)
!10232 = !DILocation(line: 3823, column: 9, scope: !10201)
!10233 = !DILocation(line: 3823, column: 7, scope: !10201)
!10234 = !DILocation(line: 3825, column: 3, scope: !10201)
!10235 = !DILocation(line: 3825, column: 10, scope: !10201)
!10236 = !DILocation(line: 3825, column: 29, scope: !10201)
!10237 = !DILocation(line: 3825, column: 32, scope: !10201)
!10238 = !DILocation(line: 3825, column: 39, scope: !10201)
!10239 = !DILocation(line: 3825, column: 36, scope: !10201)
!10240 = !DILocation(line: 0, scope: !10201)
!10241 = !DILocation(line: 3826, column: 11, scope: !10201)
!10242 = !DILocation(line: 3826, column: 9, scope: !10201)
!10243 = distinct !{!10243, !10234, !10241}
!10244 = !DILocation(line: 3832, column: 20, scope: !10245)
!10245 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3832, column: 7)
!10246 = !DILocation(line: 3832, column: 7, scope: !10245)
!10247 = !DILocation(line: 3832, column: 7, scope: !10201)
!10248 = !DILocation(line: 3833, column: 5, scope: !10245)
!10249 = !DILocation(line: 3835, column: 7, scope: !10250)
!10250 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3835, column: 7)
!10251 = !DILocation(line: 3835, column: 7, scope: !10201)
!10252 = !DILocation(line: 3836, column: 12, scope: !10250)
!10253 = !DILocation(line: 3836, column: 10, scope: !10250)
!10254 = !DILocation(line: 3836, column: 5, scope: !10250)
!10255 = !DILocation(line: 3837, column: 3, scope: !10201)
!10256 = !DILocation(line: 3837, column: 10, scope: !10201)
!10257 = !DILocation(line: 3837, column: 30, scope: !10201)
!10258 = !DILocation(line: 3837, column: 33, scope: !10201)
!10259 = !DILocation(line: 3837, column: 41, scope: !10201)
!10260 = !DILocation(line: 3837, column: 38, scope: !10201)
!10261 = !DILocation(line: 3838, column: 12, scope: !10201)
!10262 = !DILocation(line: 3838, column: 10, scope: !10201)
!10263 = distinct !{!10263, !10255, !10261}
!10264 = !DILocation(line: 3839, column: 7, scope: !10265)
!10265 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3839, column: 7)
!10266 = !DILocation(line: 3839, column: 7, scope: !10201)
!10267 = !DILocation(line: 3841, column: 11, scope: !10268)
!10268 = distinct !DILexicalBlock(scope: !10269, file: !3, line: 3841, column: 11)
!10269 = distinct !DILexicalBlock(scope: !10265, file: !3, line: 3840, column: 5)
!10270 = !DILocation(line: 3841, column: 19, scope: !10268)
!10271 = !DILocation(line: 3841, column: 16, scope: !10268)
!10272 = !DILocation(line: 3841, column: 11, scope: !10269)
!10273 = !DILocation(line: 3843, column: 15, scope: !10274)
!10274 = distinct !DILexicalBlock(scope: !10268, file: !3, line: 3842, column: 2)
!10275 = !DILocation(line: 3843, column: 9, scope: !10274)
!10276 = !DILocation(line: 3844, column: 4, scope: !10274)
!10277 = !DILocation(line: 3846, column: 14, scope: !10269)
!10278 = !DILocation(line: 3846, column: 12, scope: !10269)
!10279 = !DILocation(line: 3847, column: 7, scope: !10269)
!10280 = !DILocation(line: 3847, column: 14, scope: !10269)
!10281 = !DILocation(line: 3847, column: 34, scope: !10269)
!10282 = !DILocation(line: 3847, column: 37, scope: !10269)
!10283 = !DILocation(line: 3847, column: 45, scope: !10269)
!10284 = !DILocation(line: 3847, column: 42, scope: !10269)
!10285 = !DILocation(line: 0, scope: !10269)
!10286 = !DILocation(line: 3848, column: 9, scope: !10269)
!10287 = !DILocation(line: 3848, column: 7, scope: !10269)
!10288 = distinct !{!10288, !10279, !10286}
!10289 = !DILocation(line: 3849, column: 5, scope: !10269)
!10290 = !DILocation(line: 3851, column: 7, scope: !10291)
!10291 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3851, column: 7)
!10292 = !DILocation(line: 3851, column: 7, scope: !10201)
!10293 = !DILocation(line: 3853, column: 11, scope: !10294)
!10294 = distinct !DILexicalBlock(scope: !10295, file: !3, line: 3853, column: 11)
!10295 = distinct !DILexicalBlock(scope: !10291, file: !3, line: 3852, column: 5)
!10296 = !DILocation(line: 3853, column: 19, scope: !10294)
!10297 = !DILocation(line: 3853, column: 16, scope: !10294)
!10298 = !DILocation(line: 3853, column: 11, scope: !10295)
!10299 = !DILocation(line: 3855, column: 15, scope: !10300)
!10300 = distinct !DILexicalBlock(scope: !10294, file: !3, line: 3854, column: 2)
!10301 = !DILocation(line: 3855, column: 9, scope: !10300)
!10302 = !DILocation(line: 3856, column: 4, scope: !10300)
!10303 = !DILocation(line: 3858, column: 13, scope: !10295)
!10304 = !DILocation(line: 3858, column: 11, scope: !10295)
!10305 = !DILocation(line: 3859, column: 7, scope: !10295)
!10306 = !DILocation(line: 3859, column: 14, scope: !10295)
!10307 = !DILocation(line: 3859, column: 33, scope: !10295)
!10308 = !DILocation(line: 3859, column: 36, scope: !10295)
!10309 = !DILocation(line: 3859, column: 43, scope: !10295)
!10310 = !DILocation(line: 3859, column: 40, scope: !10295)
!10311 = !DILocation(line: 0, scope: !10295)
!10312 = !DILocation(line: 3860, column: 8, scope: !10295)
!10313 = !DILocation(line: 3860, column: 6, scope: !10295)
!10314 = distinct !{!10314, !10305, !10312}
!10315 = !DILocation(line: 3861, column: 5, scope: !10295)
!10316 = !DILocation(line: 3866, column: 15, scope: !10317)
!10317 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3866, column: 7)
!10318 = !DILocation(line: 3866, column: 7, scope: !10317)
!10319 = !DILocation(line: 3866, column: 7, scope: !10201)
!10320 = !DILocalVariable(name: "cond", scope: !10321, file: !3, line: 3874, type: !2577)
!10321 = distinct !DILexicalBlock(scope: !10317, file: !3, line: 3867, column: 5)
!10322 = !DILocation(line: 3874, column: 11, scope: !10321)
!10323 = !DILocalVariable(name: "prob_val", scope: !10321, file: !3, line: 3874, type: !2577)
!10324 = !DILocation(line: 3874, column: 17, scope: !10321)
!10325 = !DILocation(line: 3876, column: 39, scope: !10321)
!10326 = !DILocation(line: 3876, column: 14, scope: !10321)
!10327 = !DILocation(line: 3876, column: 12, scope: !10321)
!10328 = !DILocation(line: 3877, column: 13, scope: !10329)
!10329 = distinct !DILexicalBlock(scope: !10321, file: !3, line: 3877, column: 11)
!10330 = !DILocation(line: 3877, column: 11, scope: !10321)
!10331 = !DILocation(line: 3878, column: 2, scope: !10329)
!10332 = !DILocation(line: 3880, column: 33, scope: !10321)
!10333 = !DILocation(line: 3880, column: 18, scope: !10321)
!10334 = !DILocation(line: 3880, column: 16, scope: !10321)
!10335 = !DILocation(line: 3881, column: 11, scope: !10336)
!10336 = distinct !DILexicalBlock(scope: !10321, file: !3, line: 3881, column: 11)
!10337 = !DILocation(line: 3881, column: 11, scope: !10321)
!10338 = !DILocation(line: 3882, column: 13, scope: !10336)
!10339 = !DILocation(line: 3882, column: 11, scope: !10336)
!10340 = !DILocation(line: 3882, column: 2, scope: !10336)
!10341 = !DILocation(line: 3884, column: 11, scope: !10342)
!10342 = distinct !DILexicalBlock(scope: !10321, file: !3, line: 3884, column: 11)
!10343 = !DILocation(line: 3884, column: 11, scope: !10321)
!10344 = !DILocalVariable(name: "rev", scope: !10345, file: !3, line: 3886, type: !2301)
!10345 = distinct !DILexicalBlock(scope: !10342, file: !3, line: 3885, column: 2)
!10346 = !DILocation(line: 3886, column: 18, scope: !10345)
!10347 = !DILocation(line: 3886, column: 50, scope: !10345)
!10348 = !DILocation(line: 3886, column: 56, scope: !10345)
!10349 = !DILocation(line: 3886, column: 24, scope: !10345)
!10350 = !DILocation(line: 3887, column: 8, scope: !10351)
!10351 = distinct !DILexicalBlock(scope: !10345, file: !3, line: 3887, column: 8)
!10352 = !DILocation(line: 3887, column: 12, scope: !10351)
!10353 = !DILocation(line: 3887, column: 8, scope: !10345)
!10354 = !DILocation(line: 3888, column: 6, scope: !10351)
!10355 = !DILocation(line: 3889, column: 11, scope: !10345)
!10356 = !DILocation(line: 3889, column: 9, scope: !10345)
!10357 = !DILocation(line: 3891, column: 8, scope: !10358)
!10358 = distinct !DILexicalBlock(scope: !10345, file: !3, line: 3891, column: 8)
!10359 = !DILocation(line: 3891, column: 8, scope: !10345)
!10360 = !DILocation(line: 3892, column: 17, scope: !10358)
!10361 = !DILocation(line: 3892, column: 15, scope: !10358)
!10362 = !DILocation(line: 3892, column: 6, scope: !10358)
!10363 = !DILocation(line: 3893, column: 2, scope: !10345)
!10364 = !DILocation(line: 3895, column: 42, scope: !10365)
!10365 = distinct !DILexicalBlock(scope: !10321, file: !3, line: 3895, column: 11)
!10366 = !DILocation(line: 3895, column: 48, scope: !10365)
!10367 = !DILocation(line: 3895, column: 53, scope: !10365)
!10368 = !DILocation(line: 3895, column: 59, scope: !10365)
!10369 = !DILocation(line: 3895, column: 11, scope: !10365)
!10370 = !DILocation(line: 3896, column: 4, scope: !10365)
!10371 = !DILocation(line: 3896, column: 7, scope: !10365)
!10372 = !DILocation(line: 3895, column: 11, scope: !10321)
!10373 = !DILocation(line: 3897, column: 24, scope: !10365)
!10374 = !DILocation(line: 3897, column: 22, scope: !10365)
!10375 = !DILocation(line: 3897, column: 2, scope: !10365)
!10376 = !DILocation(line: 3899, column: 2, scope: !10365)
!10377 = !DILocation(line: 3901, column: 18, scope: !10321)
!10378 = !DILocation(line: 3901, column: 16, scope: !10321)
!10379 = !DILocation(line: 3902, column: 5, scope: !10321)
!10380 = !DILocation(line: 3905, column: 7, scope: !10381)
!10381 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 3905, column: 7)
!10382 = !DILocation(line: 3905, column: 27, scope: !10381)
!10383 = !DILocation(line: 3905, column: 7, scope: !10201)
!10384 = !DILocalVariable(name: "insn", scope: !10385, file: !3, line: 3911, type: !2577)
!10385 = distinct !DILexicalBlock(scope: !10381, file: !3, line: 3906, column: 5)
!10386 = !DILocation(line: 3911, column: 11, scope: !10385)
!10387 = !DILocalVariable(name: "cond", scope: !10385, file: !3, line: 3911, type: !2577)
!10388 = !DILocation(line: 3911, column: 17, scope: !10385)
!10389 = !DILocalVariable(name: "prev", scope: !10385, file: !3, line: 3911, type: !2577)
!10390 = !DILocation(line: 3911, column: 23, scope: !10385)
!10391 = !DILocalVariable(name: "merge_set", scope: !10385, file: !3, line: 3912, type: !3790)
!10392 = !DILocation(line: 3912, column: 14, scope: !10385)
!10393 = !DILocalVariable(name: "test_live", scope: !10385, file: !3, line: 3912, type: !3790)
!10394 = !DILocation(line: 3912, column: 25, scope: !10385)
!10395 = !DILocalVariable(name: "test_set", scope: !10385, file: !3, line: 3912, type: !3790)
!10396 = !DILocation(line: 3912, column: 36, scope: !10385)
!10397 = !DILocalVariable(name: "i", scope: !10385, file: !3, line: 3913, type: !7)
!10398 = !DILocation(line: 3913, column: 16, scope: !10385)
!10399 = !DILocalVariable(name: "fail", scope: !10385, file: !3, line: 3913, type: !7)
!10400 = !DILocation(line: 3913, column: 19, scope: !10385)
!10401 = !DILocalVariable(name: "bi", scope: !10385, file: !3, line: 3914, type: !10402)
!10402 = !DIDerivedType(tag: DW_TAG_typedef, name: "bitmap_iterator", file: !2635, line: 218, baseType: !10403)
!10403 = distinct !DICompositeType(tag: DW_TAG_structure_type, file: !2635, line: 203, size: 256, elements: !10404)
!10404 = !{!10405, !10406, !10407, !10408}
!10405 = !DIDerivedType(tag: DW_TAG_member, name: "elt1", scope: !10403, file: !2635, line: 206, baseType: !2638, size: 64)
!10406 = !DIDerivedType(tag: DW_TAG_member, name: "elt2", scope: !10403, file: !2635, line: 209, baseType: !2638, size: 64, offset: 64)
!10407 = !DIDerivedType(tag: DW_TAG_member, name: "word_no", scope: !10403, file: !2635, line: 212, baseType: !7, size: 32, offset: 128)
!10408 = !DIDerivedType(tag: DW_TAG_member, name: "bits", scope: !10403, file: !2635, line: 217, baseType: !2648, size: 64, offset: 192)
!10409 = !DILocation(line: 3914, column: 23, scope: !10385)
!10410 = !DILocation(line: 3917, column: 19, scope: !10411)
!10411 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3917, column: 7)
!10412 = !DILocation(line: 3917, column: 17, scope: !10411)
!10413 = !DILocation(line: 3917, column: 12, scope: !10411)
!10414 = !DILocation(line: 3919, column: 8, scope: !10415)
!10415 = distinct !DILexicalBlock(scope: !10416, file: !3, line: 3919, column: 8)
!10416 = distinct !DILexicalBlock(scope: !10417, file: !3, line: 3918, column: 2)
!10417 = distinct !DILexicalBlock(scope: !10411, file: !3, line: 3917, column: 7)
!10418 = !DILocation(line: 3919, column: 8, scope: !10416)
!10419 = !DILocation(line: 3920, column: 6, scope: !10415)
!10420 = !DILocation(line: 3921, column: 8, scope: !10421)
!10421 = distinct !DILexicalBlock(scope: !10416, file: !3, line: 3921, column: 8)
!10422 = !DILocation(line: 3921, column: 8, scope: !10416)
!10423 = !DILocation(line: 3923, column: 24, scope: !10424)
!10424 = distinct !DILexicalBlock(scope: !10425, file: !3, line: 3923, column: 12)
!10425 = distinct !DILexicalBlock(scope: !10421, file: !3, line: 3922, column: 6)
!10426 = !DILocation(line: 3923, column: 12, scope: !10424)
!10427 = !DILocation(line: 3923, column: 12, scope: !10425)
!10428 = !DILocation(line: 3924, column: 3, scope: !10424)
!10429 = !DILocation(line: 3931, column: 27, scope: !10430)
!10430 = distinct !DILexicalBlock(scope: !10425, file: !3, line: 3931, column: 12)
!10431 = !DILocation(line: 3931, column: 12, scope: !10430)
!10432 = !DILocation(line: 3931, column: 12, scope: !10425)
!10433 = !DILocation(line: 3932, column: 3, scope: !10430)
!10434 = !DILocation(line: 3933, column: 6, scope: !10425)
!10435 = !DILocation(line: 3934, column: 8, scope: !10436)
!10436 = distinct !DILexicalBlock(scope: !10416, file: !3, line: 3934, column: 8)
!10437 = !DILocation(line: 3934, column: 16, scope: !10436)
!10438 = !DILocation(line: 3934, column: 13, scope: !10436)
!10439 = !DILocation(line: 3934, column: 8, scope: !10416)
!10440 = !DILocation(line: 3935, column: 6, scope: !10436)
!10441 = !DILocation(line: 3936, column: 2, scope: !10416)
!10442 = !DILocation(line: 3917, column: 34, scope: !10417)
!10443 = !DILocation(line: 3917, column: 32, scope: !10417)
!10444 = !DILocation(line: 3917, column: 7, scope: !10417)
!10445 = distinct !{!10445, !10446, !10447}
!10446 = !DILocation(line: 3917, column: 7, scope: !10411)
!10447 = !DILocation(line: 3936, column: 2, scope: !10411)
!10448 = !DILocation(line: 3938, column: 29, scope: !10449)
!10449 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3938, column: 11)
!10450 = !DILocation(line: 3938, column: 13, scope: !10449)
!10451 = !DILocation(line: 3938, column: 11, scope: !10385)
!10452 = !DILocation(line: 3939, column: 2, scope: !10449)
!10453 = !DILocation(line: 3942, column: 34, scope: !10385)
!10454 = !DILocation(line: 3942, column: 14, scope: !10385)
!10455 = !DILocation(line: 3942, column: 12, scope: !10385)
!10456 = !DILocation(line: 3943, column: 13, scope: !10457)
!10457 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3943, column: 11)
!10458 = !DILocation(line: 3943, column: 11, scope: !10385)
!10459 = !DILocation(line: 3944, column: 2, scope: !10457)
!10460 = !DILocation(line: 3952, column: 19, scope: !10385)
!10461 = !DILocation(line: 3952, column: 17, scope: !10385)
!10462 = !DILocation(line: 3953, column: 19, scope: !10385)
!10463 = !DILocation(line: 3953, column: 17, scope: !10385)
!10464 = !DILocation(line: 3954, column: 18, scope: !10385)
!10465 = !DILocation(line: 3954, column: 16, scope: !10385)
!10466 = !DILocation(line: 3962, column: 11, scope: !10467)
!10467 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3962, column: 11)
!10468 = !DILocation(line: 3962, column: 23, scope: !10467)
!10469 = !DILocation(line: 3962, column: 21, scope: !10467)
!10470 = !DILocation(line: 3962, column: 11, scope: !10385)
!10471 = !DILocation(line: 3963, column: 14, scope: !10467)
!10472 = !DILocation(line: 3963, column: 12, scope: !10467)
!10473 = !DILocation(line: 3963, column: 2, scope: !10467)
!10474 = !DILocation(line: 3965, column: 7, scope: !10475)
!10475 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3965, column: 7)
!10476 = !DILocation(line: 3965, column: 7, scope: !10477)
!10477 = distinct !DILexicalBlock(scope: !10475, file: !3, line: 3965, column: 7)
!10478 = !DILocation(line: 0, scope: !10477)
!10479 = !DILocation(line: 3967, column: 8, scope: !10480)
!10480 = distinct !DILexicalBlock(scope: !10481, file: !3, line: 3967, column: 8)
!10481 = distinct !DILexicalBlock(scope: !10477, file: !3, line: 3966, column: 2)
!10482 = !DILocation(line: 3967, column: 8, scope: !10481)
!10483 = !DILocalVariable(name: "uid", scope: !10484, file: !3, line: 3969, type: !7)
!10484 = distinct !DILexicalBlock(scope: !10480, file: !3, line: 3968, column: 6)
!10485 = !DILocation(line: 3969, column: 21, scope: !10484)
!10486 = !DILocation(line: 3969, column: 27, scope: !10484)
!10487 = !DILocalVariable(name: "def_rec", scope: !10484, file: !3, line: 3970, type: !10488)
!10488 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10489, size: 64)
!10489 = !DIDerivedType(tag: DW_TAG_typedef, name: "df_ref", file: !637, line: 429, baseType: !10490)
!10490 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10491, size: 64)
!10491 = distinct !DICompositeType(tag: DW_TAG_union_type, name: "df_ref_d", file: !637, line: 422, size: 704, elements: !10492)
!10492 = !{!10493, !10531, !10536, !10541}
!10493 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10491, file: !637, line: 424, baseType: !10494, size: 512)
!10494 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_base_ref", file: !637, line: 356, size: 512, elements: !10495)
!10495 = !{!10496, !10497, !10498, !10499, !10500, !10506, !10526, !10527, !10528, !10529, !10530}
!10496 = !DIDerivedType(tag: DW_TAG_member, name: "cl", scope: !10494, file: !637, line: 360, baseType: !7, size: 8, flags: DIFlagBitField, extraData: i64 0)
!10497 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !10494, file: !637, line: 362, baseType: !7, size: 8, offset: 8, flags: DIFlagBitField, extraData: i64 0)
!10498 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !10494, file: !637, line: 364, baseType: !2545, size: 16, offset: 16, flags: DIFlagBitField, extraData: i64 0)
!10499 = !DIDerivedType(tag: DW_TAG_member, name: "reg", scope: !10494, file: !637, line: 365, baseType: !2577, size: 64, offset: 64)
!10500 = !DIDerivedType(tag: DW_TAG_member, name: "chain", scope: !10494, file: !637, line: 366, baseType: !10501, size: 64, offset: 128)
!10501 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10502, size: 64)
!10502 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_link", file: !637, line: 449, size: 128, elements: !10503)
!10503 = !{!10504, !10505}
!10504 = !DIDerivedType(tag: DW_TAG_member, name: "ref", scope: !10502, file: !637, line: 451, baseType: !10489, size: 64)
!10505 = !DIDerivedType(tag: DW_TAG_member, name: "next", scope: !10502, file: !637, line: 452, baseType: !10501, size: 64, offset: 64)
!10506 = !DIDerivedType(tag: DW_TAG_member, name: "insn_info", scope: !10494, file: !637, line: 370, baseType: !10507, size: 64, offset: 192)
!10507 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10508, size: 64)
!10508 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_insn_info", file: !637, line: 433, size: 384, elements: !10509)
!10509 = !{!10510, !10511, !10512, !10513, !10514, !10525}
!10510 = !DIDerivedType(tag: DW_TAG_member, name: "insn", scope: !10508, file: !637, line: 435, baseType: !2577, size: 64)
!10511 = !DIDerivedType(tag: DW_TAG_member, name: "defs", scope: !10508, file: !637, line: 436, baseType: !10488, size: 64, offset: 64)
!10512 = !DIDerivedType(tag: DW_TAG_member, name: "uses", scope: !10508, file: !637, line: 437, baseType: !10488, size: 64, offset: 128)
!10513 = !DIDerivedType(tag: DW_TAG_member, name: "eq_uses", scope: !10508, file: !637, line: 439, baseType: !10488, size: 64, offset: 192)
!10514 = !DIDerivedType(tag: DW_TAG_member, name: "mw_hardregs", scope: !10508, file: !637, line: 440, baseType: !10515, size: 64, offset: 256)
!10515 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10516, size: 64)
!10516 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10517, size: 64)
!10517 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_mw_hardreg", file: !637, line: 339, size: 192, elements: !10518)
!10518 = !{!10519, !10520, !10521, !10522, !10523, !10524}
!10519 = !DIDerivedType(tag: DW_TAG_member, name: "mw_reg", scope: !10517, file: !637, line: 341, baseType: !2577, size: 64)
!10520 = !DIDerivedType(tag: DW_TAG_member, name: "type", scope: !10517, file: !637, line: 344, baseType: !7, size: 16, offset: 64, flags: DIFlagBitField, extraData: i64 64)
!10521 = !DIDerivedType(tag: DW_TAG_member, name: "flags", scope: !10517, file: !637, line: 346, baseType: !2545, size: 16, offset: 80, flags: DIFlagBitField, extraData: i64 64)
!10522 = !DIDerivedType(tag: DW_TAG_member, name: "start_regno", scope: !10517, file: !637, line: 347, baseType: !7, size: 32, offset: 96)
!10523 = !DIDerivedType(tag: DW_TAG_member, name: "end_regno", scope: !10517, file: !637, line: 348, baseType: !7, size: 32, offset: 128)
!10524 = !DIDerivedType(tag: DW_TAG_member, name: "mw_order", scope: !10517, file: !637, line: 349, baseType: !7, size: 32, offset: 160)
!10525 = !DIDerivedType(tag: DW_TAG_member, name: "luid", scope: !10508, file: !637, line: 444, baseType: !2545, size: 32, offset: 320)
!10526 = !DIDerivedType(tag: DW_TAG_member, name: "next_reg", scope: !10494, file: !637, line: 374, baseType: !10490, size: 64, offset: 256)
!10527 = !DIDerivedType(tag: DW_TAG_member, name: "prev_reg", scope: !10494, file: !637, line: 375, baseType: !10490, size: 64, offset: 320)
!10528 = !DIDerivedType(tag: DW_TAG_member, name: "regno", scope: !10494, file: !637, line: 376, baseType: !7, size: 32, offset: 384)
!10529 = !DIDerivedType(tag: DW_TAG_member, name: "id", scope: !10494, file: !637, line: 379, baseType: !2545, size: 32, offset: 416)
!10530 = !DIDerivedType(tag: DW_TAG_member, name: "ref_order", scope: !10494, file: !637, line: 382, baseType: !7, size: 32, offset: 448)
!10531 = !DIDerivedType(tag: DW_TAG_member, name: "regular_ref", scope: !10491, file: !637, line: 425, baseType: !10532, size: 576)
!10532 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_regular_ref", file: !637, line: 398, size: 576, elements: !10533)
!10533 = !{!10534, !10535}
!10534 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10532, file: !637, line: 400, baseType: !10494, size: 512)
!10535 = !DIDerivedType(tag: DW_TAG_member, name: "loc", scope: !10532, file: !637, line: 405, baseType: !3777, size: 64, offset: 512)
!10536 = !DIDerivedType(tag: DW_TAG_member, name: "artificial_ref", scope: !10491, file: !637, line: 426, baseType: !10537, size: 576)
!10537 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_artificial_ref", file: !637, line: 388, size: 576, elements: !10538)
!10538 = !{!10539, !10540}
!10539 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10537, file: !637, line: 390, baseType: !10494, size: 512)
!10540 = !DIDerivedType(tag: DW_TAG_member, name: "bb", scope: !10537, file: !637, line: 394, baseType: !2546, size: 64, offset: 512)
!10541 = !DIDerivedType(tag: DW_TAG_member, name: "extract_ref", scope: !10491, file: !637, line: 427, baseType: !10542, size: 704)
!10542 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "df_extract_ref", file: !637, line: 413, size: 704, elements: !10543)
!10543 = !{!10544, !10545, !10546, !10547}
!10544 = !DIDerivedType(tag: DW_TAG_member, name: "base", scope: !10542, file: !637, line: 415, baseType: !10532, size: 576)
!10545 = !DIDerivedType(tag: DW_TAG_member, name: "width", scope: !10542, file: !637, line: 416, baseType: !2545, size: 32, offset: 576)
!10546 = !DIDerivedType(tag: DW_TAG_member, name: "offset", scope: !10542, file: !637, line: 417, baseType: !2545, size: 32, offset: 608)
!10547 = !DIDerivedType(tag: DW_TAG_member, name: "mode", scope: !10542, file: !637, line: 418, baseType: !231, size: 32, offset: 640)
!10548 = !DILocation(line: 3970, column: 16, scope: !10484)
!10549 = !DILocation(line: 3971, column: 23, scope: !10550)
!10550 = distinct !DILexicalBlock(scope: !10484, file: !3, line: 3971, column: 8)
!10551 = !DILocation(line: 3971, column: 21, scope: !10550)
!10552 = !DILocation(line: 3971, column: 13, scope: !10550)
!10553 = !DILocation(line: 3971, column: 48, scope: !10554)
!10554 = distinct !DILexicalBlock(scope: !10550, file: !3, line: 3971, column: 8)
!10555 = !DILocation(line: 3971, column: 47, scope: !10554)
!10556 = !DILocation(line: 3971, column: 8, scope: !10550)
!10557 = !DILocalVariable(name: "def", scope: !10558, file: !3, line: 3973, type: !10489)
!10558 = distinct !DILexicalBlock(scope: !10554, file: !3, line: 3972, column: 3)
!10559 = !DILocation(line: 3973, column: 12, scope: !10558)
!10560 = !DILocation(line: 3973, column: 19, scope: !10558)
!10561 = !DILocation(line: 3973, column: 18, scope: !10558)
!10562 = !DILocation(line: 3974, column: 21, scope: !10558)
!10563 = !DILocation(line: 3974, column: 32, scope: !10558)
!10564 = !DILocation(line: 3974, column: 5, scope: !10558)
!10565 = !DILocation(line: 3975, column: 3, scope: !10558)
!10566 = !DILocation(line: 3971, column: 64, scope: !10554)
!10567 = !DILocation(line: 3971, column: 8, scope: !10554)
!10568 = distinct !{!10568, !10556, !10569}
!10569 = !DILocation(line: 3975, column: 3, scope: !10550)
!10570 = !DILocation(line: 3976, column: 6, scope: !10484)
!10571 = !DILocation(line: 3977, column: 2, scope: !10481)
!10572 = distinct !{!10572, !10474, !10573}
!10573 = !DILocation(line: 3977, column: 2, scope: !10475)
!10574 = !DILocation(line: 3981, column: 39, scope: !10575)
!10575 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3981, column: 11)
!10576 = !DILocation(line: 3981, column: 11, scope: !10385)
!10577 = !DILocation(line: 3983, column: 11, scope: !10578)
!10578 = distinct !DILexicalBlock(scope: !10579, file: !3, line: 3983, column: 11)
!10579 = distinct !DILexicalBlock(scope: !10575, file: !3, line: 3982, column: 2)
!10580 = !DILocation(line: 3983, column: 11, scope: !10581)
!10581 = distinct !DILexicalBlock(scope: !10578, file: !3, line: 3983, column: 11)
!10582 = !DILocation(line: 3985, column: 12, scope: !10583)
!10583 = distinct !DILexicalBlock(scope: !10584, file: !3, line: 3985, column: 12)
!10584 = distinct !DILexicalBlock(scope: !10581, file: !3, line: 3984, column: 6)
!10585 = !DILocation(line: 3985, column: 14, scope: !10583)
!10586 = !DILocation(line: 3986, column: 5, scope: !10583)
!10587 = !DILocation(line: 3986, column: 21, scope: !10583)
!10588 = !DILocation(line: 3986, column: 10, scope: !10583)
!10589 = !DILocation(line: 3987, column: 5, scope: !10583)
!10590 = !DILocation(line: 3987, column: 22, scope: !10583)
!10591 = !DILocation(line: 3987, column: 10, scope: !10583)
!10592 = !DILocation(line: 3985, column: 12, scope: !10584)
!10593 = !DILocation(line: 3988, column: 8, scope: !10583)
!10594 = !DILocation(line: 3988, column: 3, scope: !10583)
!10595 = !DILocation(line: 3989, column: 6, scope: !10584)
!10596 = distinct !{!10596, !10577, !10597}
!10597 = !DILocation(line: 3989, column: 6, scope: !10578)
!10598 = !DILocation(line: 3990, column: 2, scope: !10579)
!10599 = !DILocation(line: 3997, column: 20, scope: !10385)
!10600 = !DILocation(line: 3997, column: 47, scope: !10385)
!10601 = !DILocation(line: 3997, column: 31, scope: !10385)
!10602 = !DILocation(line: 3997, column: 7, scope: !10385)
!10603 = !DILocation(line: 3998, column: 41, scope: !10385)
!10604 = !DILocation(line: 3998, column: 50, scope: !10385)
!10605 = !DILocation(line: 3998, column: 7, scope: !10385)
!10606 = !DILocation(line: 3999, column: 19, scope: !10607)
!10607 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 3999, column: 7)
!10608 = !DILocation(line: 3999, column: 17, scope: !10607)
!10609 = !DILocation(line: 3999, column: 12, scope: !10607)
!10610 = !DILocation(line: 4001, column: 8, scope: !10611)
!10611 = distinct !DILexicalBlock(scope: !10612, file: !3, line: 4001, column: 8)
!10612 = distinct !DILexicalBlock(scope: !10613, file: !3, line: 4000, column: 2)
!10613 = distinct !DILexicalBlock(scope: !10607, file: !3, line: 3999, column: 7)
!10614 = !DILocation(line: 4001, column: 8, scope: !10612)
!10615 = !DILocation(line: 4003, column: 31, scope: !10616)
!10616 = distinct !DILexicalBlock(scope: !10611, file: !3, line: 4002, column: 6)
!10617 = !DILocation(line: 4003, column: 37, scope: !10616)
!10618 = !DILocation(line: 4003, column: 8, scope: !10616)
!10619 = !DILocation(line: 4004, column: 40, scope: !10616)
!10620 = !DILocation(line: 4004, column: 49, scope: !10616)
!10621 = !DILocation(line: 4004, column: 55, scope: !10616)
!10622 = !DILocation(line: 4004, column: 8, scope: !10616)
!10623 = !DILocation(line: 4005, column: 6, scope: !10616)
!10624 = !DILocation(line: 4006, column: 11, scope: !10612)
!10625 = !DILocation(line: 4006, column: 9, scope: !10612)
!10626 = !DILocation(line: 4007, column: 8, scope: !10627)
!10627 = distinct !DILexicalBlock(scope: !10612, file: !3, line: 4007, column: 8)
!10628 = !DILocation(line: 4007, column: 16, scope: !10627)
!10629 = !DILocation(line: 4007, column: 13, scope: !10627)
!10630 = !DILocation(line: 4007, column: 8, scope: !10612)
!10631 = !DILocation(line: 4008, column: 6, scope: !10627)
!10632 = !DILocation(line: 4009, column: 2, scope: !10612)
!10633 = !DILocation(line: 3999, column: 34, scope: !10613)
!10634 = !DILocation(line: 3999, column: 32, scope: !10613)
!10635 = !DILocation(line: 3999, column: 7, scope: !10613)
!10636 = distinct !{!10636, !10637, !10638}
!10637 = !DILocation(line: 3999, column: 7, scope: !10607)
!10638 = !DILocation(line: 4009, column: 2, scope: !10607)
!10639 = !DILocation(line: 4017, column: 31, scope: !10640)
!10640 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 4017, column: 11)
!10641 = !DILocation(line: 4017, column: 41, scope: !10640)
!10642 = !DILocation(line: 4017, column: 11, scope: !10640)
!10643 = !DILocation(line: 4018, column: 4, scope: !10640)
!10644 = !DILocation(line: 4018, column: 27, scope: !10640)
!10645 = !DILocation(line: 4018, column: 38, scope: !10640)
!10646 = !DILocation(line: 4018, column: 7, scope: !10640)
!10647 = !DILocation(line: 4019, column: 4, scope: !10640)
!10648 = !DILocation(line: 4019, column: 27, scope: !10640)
!10649 = !DILocation(line: 4019, column: 53, scope: !10640)
!10650 = !DILocation(line: 4019, column: 37, scope: !10640)
!10651 = !DILocation(line: 4019, column: 7, scope: !10640)
!10652 = !DILocation(line: 4017, column: 11, scope: !10385)
!10653 = !DILocation(line: 4020, column: 7, scope: !10640)
!10654 = !DILocation(line: 4020, column: 2, scope: !10640)
!10655 = !DILocation(line: 4022, column: 7, scope: !10385)
!10656 = !DILocation(line: 4023, column: 7, scope: !10385)
!10657 = !DILocation(line: 4024, column: 7, scope: !10385)
!10658 = !DILocation(line: 4026, column: 11, scope: !10659)
!10659 = distinct !DILexicalBlock(scope: !10385, file: !3, line: 4026, column: 11)
!10660 = !DILocation(line: 4026, column: 11, scope: !10385)
!10661 = !DILocation(line: 4027, column: 2, scope: !10659)
!10662 = !DILocation(line: 4028, column: 5, scope: !10385)
!10663 = !DILocation(line: 3905, column: 30, scope: !10381)
!10664 = !DILabel(scope: !10201, name: "no_body", file: !3, line: 4030)
!10665 = !DILocation(line: 4030, column: 2, scope: !10201)
!10666 = !DILocation(line: 4035, column: 14, scope: !10201)
!10667 = !DILocation(line: 4035, column: 12, scope: !10201)
!10668 = !DILocation(line: 4036, column: 7, scope: !10669)
!10669 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 4036, column: 7)
!10670 = !DILocation(line: 4036, column: 19, scope: !10669)
!10671 = !DILocation(line: 4036, column: 16, scope: !10669)
!10672 = !DILocation(line: 4036, column: 7, scope: !10201)
!10673 = !DILocation(line: 4038, column: 32, scope: !10674)
!10674 = distinct !DILexicalBlock(scope: !10669, file: !3, line: 4037, column: 5)
!10675 = !DILocation(line: 4038, column: 19, scope: !10674)
!10676 = !DILocation(line: 4038, column: 17, scope: !10674)
!10677 = !DILocation(line: 4039, column: 11, scope: !10678)
!10678 = distinct !DILexicalBlock(scope: !10674, file: !3, line: 4039, column: 11)
!10679 = !DILocation(line: 4039, column: 11, scope: !10674)
!10680 = !DILocation(line: 4040, column: 23, scope: !10678)
!10681 = !DILocation(line: 4040, column: 29, scope: !10678)
!10682 = !DILocation(line: 4040, column: 8, scope: !10678)
!10683 = !DILocation(line: 4041, column: 25, scope: !10678)
!10684 = !DILocation(line: 4041, column: 31, scope: !10678)
!10685 = !DILocation(line: 4041, column: 8, scope: !10678)
!10686 = !DILocation(line: 4042, column: 2, scope: !10678)
!10687 = !DILocation(line: 4043, column: 5, scope: !10674)
!10688 = !DILocation(line: 4045, column: 23, scope: !10689)
!10689 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 4045, column: 7)
!10690 = !DILocation(line: 4045, column: 7, scope: !10689)
!10691 = !DILocation(line: 4045, column: 7, scope: !10201)
!10692 = !DILocation(line: 4046, column: 5, scope: !10689)
!10693 = !DILocation(line: 4048, column: 5, scope: !10689)
!10694 = !DILocation(line: 4050, column: 7, scope: !10695)
!10695 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 4050, column: 7)
!10696 = !DILocation(line: 4050, column: 19, scope: !10695)
!10697 = !DILocation(line: 4050, column: 16, scope: !10695)
!10698 = !DILocation(line: 4050, column: 7, scope: !10201)
!10699 = !DILocation(line: 4052, column: 24, scope: !10700)
!10700 = distinct !DILexicalBlock(scope: !10695, file: !3, line: 4051, column: 5)
!10701 = !DILocation(line: 4052, column: 30, scope: !10700)
!10702 = !DILocation(line: 4052, column: 40, scope: !10700)
!10703 = !DILocation(line: 4052, column: 54, scope: !10700)
!10704 = !DILocation(line: 4052, column: 7, scope: !10700)
!10705 = !DILocation(line: 4054, column: 27, scope: !10700)
!10706 = !DILocation(line: 4054, column: 50, scope: !10700)
!10707 = !DILocation(line: 4054, column: 7, scope: !10700)
!10708 = !DILocation(line: 4055, column: 11, scope: !10709)
!10709 = distinct !DILexicalBlock(scope: !10700, file: !3, line: 4055, column: 11)
!10710 = !DILocation(line: 4055, column: 11, scope: !10700)
!10711 = !DILocalVariable(name: "count", scope: !10712, file: !3, line: 4057, type: !3742)
!10712 = distinct !DILexicalBlock(scope: !10709, file: !3, line: 4056, column: 2)
!10713 = !DILocation(line: 4057, column: 14, scope: !10712)
!10714 = !DILocalVariable(name: "probability", scope: !10712, file: !3, line: 4057, type: !3742)
!10715 = !DILocation(line: 4057, column: 21, scope: !10712)
!10716 = !DILocation(line: 4058, column: 12, scope: !10712)
!10717 = !DILocation(line: 4058, column: 35, scope: !10712)
!10718 = !DILocation(line: 4058, column: 10, scope: !10712)
!10719 = !DILocation(line: 4059, column: 35, scope: !10712)
!10720 = !DILocation(line: 4059, column: 60, scope: !10712)
!10721 = !DILocation(line: 4059, column: 4, scope: !10712)
!10722 = !DILocation(line: 4059, column: 27, scope: !10712)
!10723 = !DILocation(line: 4059, column: 33, scope: !10712)
!10724 = !DILocation(line: 4060, column: 37, scope: !10712)
!10725 = !DILocation(line: 4060, column: 4, scope: !10712)
!10726 = !DILocation(line: 4060, column: 29, scope: !10712)
!10727 = !DILocation(line: 4060, column: 35, scope: !10712)
!10728 = !DILocation(line: 4061, column: 18, scope: !10712)
!10729 = !DILocation(line: 4061, column: 41, scope: !10712)
!10730 = !DILocation(line: 4061, column: 16, scope: !10712)
!10731 = !DILocation(line: 4063, column: 8, scope: !10712)
!10732 = !DILocation(line: 4063, column: 33, scope: !10712)
!10733 = !DILocation(line: 4062, column: 4, scope: !10712)
!10734 = !DILocation(line: 4062, column: 27, scope: !10712)
!10735 = !DILocation(line: 4063, column: 6, scope: !10712)
!10736 = !DILocation(line: 4064, column: 43, scope: !10712)
!10737 = !DILocation(line: 4064, column: 4, scope: !10712)
!10738 = !DILocation(line: 4064, column: 29, scope: !10712)
!10739 = !DILocation(line: 4064, column: 41, scope: !10712)
!10740 = !DILocation(line: 4065, column: 25, scope: !10712)
!10741 = !DILocation(line: 4065, column: 4, scope: !10712)
!10742 = !DILocation(line: 4066, column: 2, scope: !10712)
!10743 = !DILocation(line: 4067, column: 5, scope: !10700)
!10744 = !DILocation(line: 4070, column: 7, scope: !10745)
!10745 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 4070, column: 7)
!10746 = !DILocation(line: 4070, column: 12, scope: !10745)
!10747 = !DILocation(line: 4070, column: 7, scope: !10201)
!10748 = !DILocalVariable(name: "insn", scope: !10749, file: !3, line: 4072, type: !2577)
!10749 = distinct !DILexicalBlock(scope: !10745, file: !3, line: 4071, column: 5)
!10750 = !DILocation(line: 4072, column: 11, scope: !10749)
!10751 = !DILocation(line: 4074, column: 11, scope: !10752)
!10752 = distinct !DILexicalBlock(scope: !10749, file: !3, line: 4074, column: 11)
!10753 = !DILocation(line: 4074, column: 18, scope: !10752)
!10754 = !DILocation(line: 4074, column: 15, scope: !10752)
!10755 = !DILocation(line: 4074, column: 11, scope: !10749)
!10756 = !DILocation(line: 4075, column: 22, scope: !10752)
!10757 = !DILocation(line: 4075, column: 2, scope: !10752)
!10758 = !DILocation(line: 4075, column: 20, scope: !10752)
!10759 = !DILocation(line: 4079, column: 14, scope: !10749)
!10760 = !DILocation(line: 4079, column: 12, scope: !10749)
!10761 = !DILocation(line: 4080, column: 7, scope: !10749)
!10762 = !DILocalVariable(name: "note", scope: !10763, file: !3, line: 4082, type: !2577)
!10763 = distinct !DILexicalBlock(scope: !10749, file: !3, line: 4081, column: 2)
!10764 = !DILocation(line: 4082, column: 8, scope: !10763)
!10765 = !DILocalVariable(name: "set", scope: !10763, file: !3, line: 4082, type: !2577)
!10766 = !DILocation(line: 4082, column: 14, scope: !10763)
!10767 = !DILocation(line: 4084, column: 10, scope: !10768)
!10768 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 4084, column: 8)
!10769 = !DILocation(line: 4084, column: 8, scope: !10763)
!10770 = !DILocation(line: 4085, column: 6, scope: !10768)
!10771 = !DILocation(line: 4086, column: 26, scope: !10763)
!10772 = !DILocation(line: 4086, column: 11, scope: !10763)
!10773 = !DILocation(line: 4086, column: 9, scope: !10763)
!10774 = !DILocation(line: 4087, column: 10, scope: !10775)
!10775 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 4087, column: 8)
!10776 = !DILocation(line: 4087, column: 8, scope: !10763)
!10777 = !DILocation(line: 4088, column: 6, scope: !10775)
!10778 = !DILocation(line: 4089, column: 10, scope: !10763)
!10779 = !DILocation(line: 4089, column: 8, scope: !10763)
!10780 = !DILocation(line: 4090, column: 9, scope: !10781)
!10781 = distinct !DILexicalBlock(scope: !10763, file: !3, line: 4090, column: 8)
!10782 = !DILocation(line: 4090, column: 13, scope: !10781)
!10783 = !DILocation(line: 4090, column: 39, scope: !10781)
!10784 = !DILocation(line: 4090, column: 17, scope: !10781)
!10785 = !DILocation(line: 4091, column: 8, scope: !10781)
!10786 = !DILocation(line: 4091, column: 34, scope: !10781)
!10787 = !DILocation(line: 4091, column: 12, scope: !10781)
!10788 = !DILocation(line: 4090, column: 8, scope: !10763)
!10789 = !DILocation(line: 4092, column: 19, scope: !10781)
!10790 = !DILocation(line: 4092, column: 25, scope: !10781)
!10791 = !DILocation(line: 4092, column: 6, scope: !10781)
!10792 = !DILocation(line: 4093, column: 2, scope: !10763)
!10793 = !DILocation(line: 4093, column: 11, scope: !10749)
!10794 = !DILocation(line: 4093, column: 19, scope: !10749)
!10795 = !DILocation(line: 4093, column: 16, scope: !10749)
!10796 = !DILocation(line: 4093, column: 23, scope: !10749)
!10797 = !DILocation(line: 4093, column: 34, scope: !10749)
!10798 = !DILocation(line: 4093, column: 32, scope: !10749)
!10799 = !DILocation(line: 0, scope: !10749)
!10800 = distinct !{!10800, !10761, !10801}
!10801 = !DILocation(line: 4093, column: 51, scope: !10749)
!10802 = !DILocation(line: 4095, column: 22, scope: !10749)
!10803 = !DILocation(line: 4095, column: 28, scope: !10749)
!10804 = !DILocation(line: 4095, column: 33, scope: !10749)
!10805 = !DILocation(line: 4095, column: 7, scope: !10749)
!10806 = !DILocation(line: 4096, column: 5, scope: !10749)
!10807 = !DILocation(line: 4099, column: 7, scope: !10808)
!10808 = distinct !DILexicalBlock(scope: !10201, file: !3, line: 4099, column: 7)
!10809 = !DILocation(line: 4099, column: 19, scope: !10808)
!10810 = !DILocation(line: 4099, column: 16, scope: !10808)
!10811 = !DILocation(line: 4099, column: 7, scope: !10201)
!10812 = !DILocation(line: 4101, column: 20, scope: !10813)
!10813 = distinct !DILexicalBlock(scope: !10808, file: !3, line: 4100, column: 5)
!10814 = !DILocation(line: 4101, column: 7, scope: !10813)
!10815 = !DILocation(line: 4102, column: 20, scope: !10813)
!10816 = !DILocation(line: 4102, column: 7, scope: !10813)
!10817 = !DILocation(line: 4105, column: 5, scope: !10813)
!10818 = !DILocation(line: 4107, column: 3, scope: !10201)
!10819 = !DILabel(scope: !10201, name: "cancel", file: !3, line: 4109)
!10820 = !DILocation(line: 4109, column: 2, scope: !10201)
!10821 = !DILocation(line: 4110, column: 3, scope: !10201)
!10822 = !DILocation(line: 4111, column: 3, scope: !10201)
!10823 = !DILocation(line: 4112, column: 1, scope: !10201)
!10824 = distinct !DISubprogram(name: "find_memory", scope: !3, file: !3, line: 3798, type: !10825, scopeLine: 3799, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10825 = !DISubroutineType(types: !10826)
!10826 = !{!2545, !3777, !2544}
!10827 = !DILocalVariable(name: "px", arg: 1, scope: !10824, file: !3, line: 3798, type: !3777)
!10828 = !DILocation(line: 3798, column: 19, scope: !10824)
!10829 = !DILocalVariable(name: "data", arg: 2, scope: !10824, file: !3, line: 3798, type: !2544)
!10830 = !DILocation(line: 3798, column: 29, scope: !10824)
!10831 = !DILocation(line: 3800, column: 10, scope: !10824)
!10832 = !DILocation(line: 3800, column: 3, scope: !10824)
!10833 = distinct !DISubprogram(name: "bmp_iter_set_init", scope: !2635, file: !2635, line: 224, type: !10834, scopeLine: 226, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10834 = !DISubroutineType(types: !10835)
!10835 = !{null, !10836, !10837, !7, !10840}
!10836 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10402, size: 64)
!10837 = !DIDerivedType(tag: DW_TAG_typedef, name: "const_bitmap", file: !2524, line: 48, baseType: !10838)
!10838 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !10839, size: 64)
!10839 = !DIDerivedType(tag: DW_TAG_const_type, baseType: !2634)
!10840 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !7, size: 64)
!10841 = !DILocalVariable(name: "bi", arg: 1, scope: !10833, file: !2635, line: 224, type: !10836)
!10842 = !DILocation(line: 224, column: 37, scope: !10833)
!10843 = !DILocalVariable(name: "map", arg: 2, scope: !10833, file: !2635, line: 224, type: !10837)
!10844 = !DILocation(line: 224, column: 54, scope: !10833)
!10845 = !DILocalVariable(name: "start_bit", arg: 3, scope: !10833, file: !2635, line: 225, type: !7)
!10846 = !DILocation(line: 225, column: 15, scope: !10833)
!10847 = !DILocalVariable(name: "bit_no", arg: 4, scope: !10833, file: !2635, line: 225, type: !10840)
!10848 = !DILocation(line: 225, column: 36, scope: !10833)
!10849 = !DILocation(line: 227, column: 14, scope: !10833)
!10850 = !DILocation(line: 227, column: 19, scope: !10833)
!10851 = !DILocation(line: 227, column: 3, scope: !10833)
!10852 = !DILocation(line: 227, column: 7, scope: !10833)
!10853 = !DILocation(line: 227, column: 12, scope: !10833)
!10854 = !DILocation(line: 228, column: 3, scope: !10833)
!10855 = !DILocation(line: 228, column: 7, scope: !10833)
!10856 = !DILocation(line: 228, column: 12, scope: !10833)
!10857 = !DILocation(line: 231, column: 3, scope: !10833)
!10858 = !DILocation(line: 233, column: 12, scope: !10859)
!10859 = distinct !DILexicalBlock(scope: !10860, file: !2635, line: 233, column: 11)
!10860 = distinct !DILexicalBlock(scope: !10833, file: !2635, line: 232, column: 5)
!10861 = !DILocation(line: 233, column: 16, scope: !10859)
!10862 = !DILocation(line: 233, column: 11, scope: !10860)
!10863 = !DILocation(line: 235, column: 4, scope: !10864)
!10864 = distinct !DILexicalBlock(scope: !10859, file: !2635, line: 234, column: 2)
!10865 = !DILocation(line: 235, column: 8, scope: !10864)
!10866 = !DILocation(line: 235, column: 13, scope: !10864)
!10867 = !DILocation(line: 236, column: 4, scope: !10864)
!10868 = !DILocation(line: 239, column: 11, scope: !10869)
!10869 = distinct !DILexicalBlock(scope: !10860, file: !2635, line: 239, column: 11)
!10870 = !DILocation(line: 239, column: 15, scope: !10869)
!10871 = !DILocation(line: 239, column: 21, scope: !10869)
!10872 = !DILocation(line: 239, column: 29, scope: !10869)
!10873 = !DILocation(line: 239, column: 39, scope: !10869)
!10874 = !DILocation(line: 239, column: 26, scope: !10869)
!10875 = !DILocation(line: 239, column: 11, scope: !10860)
!10876 = !DILocation(line: 240, column: 2, scope: !10869)
!10877 = !DILocation(line: 241, column: 18, scope: !10860)
!10878 = !DILocation(line: 241, column: 22, scope: !10860)
!10879 = !DILocation(line: 241, column: 28, scope: !10860)
!10880 = !DILocation(line: 241, column: 7, scope: !10860)
!10881 = !DILocation(line: 241, column: 11, scope: !10860)
!10882 = !DILocation(line: 241, column: 16, scope: !10860)
!10883 = distinct !{!10883, !10857, !10884}
!10884 = !DILocation(line: 242, column: 5, scope: !10833)
!10885 = !DILocation(line: 245, column: 7, scope: !10886)
!10886 = distinct !DILexicalBlock(scope: !10833, file: !2635, line: 245, column: 7)
!10887 = !DILocation(line: 245, column: 11, scope: !10886)
!10888 = !DILocation(line: 245, column: 17, scope: !10886)
!10889 = !DILocation(line: 245, column: 25, scope: !10886)
!10890 = !DILocation(line: 245, column: 35, scope: !10886)
!10891 = !DILocation(line: 245, column: 22, scope: !10886)
!10892 = !DILocation(line: 245, column: 7, scope: !10833)
!10893 = !DILocation(line: 246, column: 17, scope: !10886)
!10894 = !DILocation(line: 246, column: 21, scope: !10886)
!10895 = !DILocation(line: 246, column: 27, scope: !10886)
!10896 = !DILocation(line: 246, column: 32, scope: !10886)
!10897 = !DILocation(line: 246, column: 15, scope: !10886)
!10898 = !DILocation(line: 246, column: 5, scope: !10886)
!10899 = !DILocation(line: 249, column: 17, scope: !10833)
!10900 = !DILocation(line: 249, column: 27, scope: !10833)
!10901 = !DILocation(line: 249, column: 46, scope: !10833)
!10902 = !DILocation(line: 249, column: 3, scope: !10833)
!10903 = !DILocation(line: 249, column: 7, scope: !10833)
!10904 = !DILocation(line: 249, column: 15, scope: !10833)
!10905 = !DILocation(line: 250, column: 14, scope: !10833)
!10906 = !DILocation(line: 250, column: 18, scope: !10833)
!10907 = !DILocation(line: 250, column: 24, scope: !10833)
!10908 = !DILocation(line: 250, column: 29, scope: !10833)
!10909 = !DILocation(line: 250, column: 33, scope: !10833)
!10910 = !DILocation(line: 250, column: 3, scope: !10833)
!10911 = !DILocation(line: 250, column: 7, scope: !10833)
!10912 = !DILocation(line: 250, column: 12, scope: !10833)
!10913 = !DILocation(line: 251, column: 16, scope: !10833)
!10914 = !DILocation(line: 251, column: 26, scope: !10833)
!10915 = !DILocation(line: 251, column: 3, scope: !10833)
!10916 = !DILocation(line: 251, column: 7, scope: !10833)
!10917 = !DILocation(line: 251, column: 12, scope: !10833)
!10918 = !DILocation(line: 257, column: 17, scope: !10833)
!10919 = !DILocation(line: 257, column: 21, scope: !10833)
!10920 = !DILocation(line: 257, column: 16, scope: !10833)
!10921 = !DILocation(line: 257, column: 13, scope: !10833)
!10922 = !DILocation(line: 259, column: 13, scope: !10833)
!10923 = !DILocation(line: 259, column: 4, scope: !10833)
!10924 = !DILocation(line: 259, column: 11, scope: !10833)
!10925 = !DILocation(line: 260, column: 1, scope: !10833)
!10926 = distinct !DISubprogram(name: "bmp_iter_set", scope: !2635, file: !2635, line: 393, type: !10927, scopeLine: 394, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!10927 = !DISubroutineType(types: !10928)
!10928 = !{!2809, !10836, !10840}
!10929 = !DILocalVariable(name: "bi", arg: 1, scope: !10926, file: !2635, line: 393, type: !10836)
!10930 = !DILocation(line: 393, column: 32, scope: !10926)
!10931 = !DILocalVariable(name: "bit_no", arg: 2, scope: !10926, file: !2635, line: 393, type: !10840)
!10932 = !DILocation(line: 393, column: 46, scope: !10926)
!10933 = !DILocation(line: 396, column: 7, scope: !10934)
!10934 = distinct !DILexicalBlock(scope: !10926, file: !2635, line: 396, column: 7)
!10935 = !DILocation(line: 396, column: 11, scope: !10934)
!10936 = !DILocation(line: 396, column: 7, scope: !10926)
!10937 = !DILocation(line: 397, column: 5, scope: !10934)
!10938 = !DILabel(scope: !10939, name: "next_bit", file: !2635, line: 398)
!10939 = distinct !DILexicalBlock(scope: !10934, file: !2635, line: 397, column: 5)
!10940 = !DILocation(line: 398, column: 5, scope: !10939)
!10941 = !DILocation(line: 399, column: 7, scope: !10939)
!10942 = !DILocation(line: 399, column: 16, scope: !10939)
!10943 = !DILocation(line: 399, column: 20, scope: !10939)
!10944 = !DILocation(line: 399, column: 25, scope: !10939)
!10945 = !DILocation(line: 399, column: 14, scope: !10939)
!10946 = !DILocation(line: 401, column: 4, scope: !10947)
!10947 = distinct !DILexicalBlock(scope: !10939, file: !2635, line: 400, column: 2)
!10948 = !DILocation(line: 401, column: 8, scope: !10947)
!10949 = !DILocation(line: 401, column: 13, scope: !10947)
!10950 = !DILocation(line: 402, column: 5, scope: !10947)
!10951 = !DILocation(line: 402, column: 12, scope: !10947)
!10952 = distinct !{!10952, !10941, !10953}
!10953 = !DILocation(line: 403, column: 2, scope: !10939)
!10954 = !DILocation(line: 404, column: 7, scope: !10939)
!10955 = !DILocation(line: 410, column: 16, scope: !10926)
!10956 = !DILocation(line: 410, column: 15, scope: !10926)
!10957 = !DILocation(line: 410, column: 23, scope: !10926)
!10958 = !DILocation(line: 410, column: 42, scope: !10926)
!10959 = !DILocation(line: 411, column: 7, scope: !10926)
!10960 = !DILocation(line: 411, column: 26, scope: !10926)
!10961 = !DILocation(line: 410, column: 4, scope: !10926)
!10962 = !DILocation(line: 410, column: 11, scope: !10926)
!10963 = !DILocation(line: 412, column: 3, scope: !10926)
!10964 = !DILocation(line: 412, column: 7, scope: !10926)
!10965 = !DILocation(line: 412, column: 14, scope: !10926)
!10966 = !DILocation(line: 414, column: 3, scope: !10926)
!10967 = !DILocation(line: 417, column: 7, scope: !10968)
!10968 = distinct !DILexicalBlock(scope: !10926, file: !2635, line: 415, column: 5)
!10969 = !DILocation(line: 417, column: 14, scope: !10968)
!10970 = !DILocation(line: 417, column: 18, scope: !10968)
!10971 = !DILocation(line: 417, column: 26, scope: !10968)
!10972 = !DILocation(line: 419, column: 15, scope: !10973)
!10973 = distinct !DILexicalBlock(scope: !10968, file: !2635, line: 418, column: 2)
!10974 = !DILocation(line: 419, column: 19, scope: !10973)
!10975 = !DILocation(line: 419, column: 25, scope: !10973)
!10976 = !DILocation(line: 419, column: 30, scope: !10973)
!10977 = !DILocation(line: 419, column: 34, scope: !10973)
!10978 = !DILocation(line: 419, column: 4, scope: !10973)
!10979 = !DILocation(line: 419, column: 8, scope: !10973)
!10980 = !DILocation(line: 419, column: 13, scope: !10973)
!10981 = !DILocation(line: 420, column: 8, scope: !10982)
!10982 = distinct !DILexicalBlock(scope: !10973, file: !2635, line: 420, column: 8)
!10983 = !DILocation(line: 420, column: 12, scope: !10982)
!10984 = !DILocation(line: 420, column: 8, scope: !10973)
!10985 = !DILocation(line: 421, column: 6, scope: !10982)
!10986 = !DILocation(line: 422, column: 5, scope: !10973)
!10987 = !DILocation(line: 422, column: 12, scope: !10973)
!10988 = !DILocation(line: 423, column: 4, scope: !10973)
!10989 = !DILocation(line: 423, column: 8, scope: !10973)
!10990 = !DILocation(line: 423, column: 15, scope: !10973)
!10991 = distinct !{!10991, !10967, !10992}
!10992 = !DILocation(line: 424, column: 2, scope: !10968)
!10993 = !DILocation(line: 427, column: 18, scope: !10968)
!10994 = !DILocation(line: 427, column: 22, scope: !10968)
!10995 = !DILocation(line: 427, column: 28, scope: !10968)
!10996 = !DILocation(line: 427, column: 7, scope: !10968)
!10997 = !DILocation(line: 427, column: 11, scope: !10968)
!10998 = !DILocation(line: 427, column: 16, scope: !10968)
!10999 = !DILocation(line: 428, column: 12, scope: !11000)
!11000 = distinct !DILexicalBlock(scope: !10968, file: !2635, line: 428, column: 11)
!11001 = !DILocation(line: 428, column: 16, scope: !11000)
!11002 = !DILocation(line: 428, column: 11, scope: !10968)
!11003 = !DILocation(line: 429, column: 2, scope: !11000)
!11004 = !DILocation(line: 430, column: 17, scope: !10968)
!11005 = !DILocation(line: 430, column: 21, scope: !10968)
!11006 = !DILocation(line: 430, column: 27, scope: !10968)
!11007 = !DILocation(line: 430, column: 32, scope: !10968)
!11008 = !DILocation(line: 430, column: 8, scope: !10968)
!11009 = !DILocation(line: 430, column: 15, scope: !10968)
!11010 = !DILocation(line: 431, column: 7, scope: !10968)
!11011 = !DILocation(line: 431, column: 11, scope: !10968)
!11012 = !DILocation(line: 431, column: 19, scope: !10968)
!11013 = distinct !{!11013, !10966, !11014}
!11014 = !DILocation(line: 432, column: 5, scope: !10926)
!11015 = !DILocation(line: 433, column: 1, scope: !10926)
!11016 = distinct !DISubprogram(name: "bmp_iter_next", scope: !2635, file: !2635, line: 382, type: !11017, scopeLine: 383, flags: DIFlagPrototyped, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !2, retainedNodes: !3835)
!11017 = !DISubroutineType(types: !11018)
!11018 = !{null, !10836, !10840}
!11019 = !DILocalVariable(name: "bi", arg: 1, scope: !11016, file: !2635, line: 382, type: !10836)
!11020 = !DILocation(line: 382, column: 33, scope: !11016)
!11021 = !DILocalVariable(name: "bit_no", arg: 2, scope: !11016, file: !2635, line: 382, type: !10840)
!11022 = !DILocation(line: 382, column: 47, scope: !11016)
!11023 = !DILocation(line: 384, column: 3, scope: !11016)
!11024 = !DILocation(line: 384, column: 7, scope: !11016)
!11025 = !DILocation(line: 384, column: 12, scope: !11016)
!11026 = !DILocation(line: 385, column: 4, scope: !11016)
!11027 = !DILocation(line: 385, column: 11, scope: !11016)
!11028 = !DILocation(line: 386, column: 1, scope: !11016)
